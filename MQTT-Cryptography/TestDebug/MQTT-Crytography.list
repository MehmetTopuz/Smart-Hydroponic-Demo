
MQTT-Crytography.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000245d8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006ebc  080247b8  080247b8  000347b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802b674  0802b674  0004033c  2**0
                  CONTENTS
  4 .ARM          00000008  0802b674  0802b674  0003b674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802b67c  0802b67c  0004033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  0802b67c  0802b67c  0003b67c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000014  0802b690  0802b690  0003b690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  0802b6a4  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d1c  2000033c  0802b9e0  0004033c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001058  0802b9e0  00041058  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006d648  00000000  00000000  0004036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000c7a6  00000000  00000000  000ad9b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004638  00000000  00000000  000ba160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000043f8  00000000  00000000  000be798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002de2d  00000000  00000000  000c2b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002eae6  00000000  00000000  000f09bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115661  00000000  00000000  0011f4a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00234b04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000152a0  00000000  00000000  00234b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000033c 	.word	0x2000033c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08024794 	.word	0x08024794

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000340 	.word	0x20000340
 800021c:	08024794 	.word	0x08024794

08000220 <setjmp>:
 8000220:	46ec      	mov	ip, sp
 8000222:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000226:	f04f 0000 	mov.w	r0, #0
 800022a:	4770      	bx	lr

0800022c <longjmp>:
 800022c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000230:	46e5      	mov	sp, ip
 8000232:	0008      	movs	r0, r1
 8000234:	bf08      	it	eq
 8000236:	2001      	moveq	r0, #1
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <strcmp>:
 800024c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000254:	2a01      	cmp	r2, #1
 8000256:	bf28      	it	cs
 8000258:	429a      	cmpcs	r2, r3
 800025a:	d0f7      	beq.n	800024c <strcmp>
 800025c:	1ad0      	subs	r0, r2, r3
 800025e:	4770      	bx	lr

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__gedf2>:
 8000678:	f04f 3cff 	mov.w	ip, #4294967295
 800067c:	e006      	b.n	800068c <__cmpdf2+0x4>
 800067e:	bf00      	nop

08000680 <__ledf2>:
 8000680:	f04f 0c01 	mov.w	ip, #1
 8000684:	e002      	b.n	800068c <__cmpdf2+0x4>
 8000686:	bf00      	nop

08000688 <__cmpdf2>:
 8000688:	f04f 0c01 	mov.w	ip, #1
 800068c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800069c:	bf18      	it	ne
 800069e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006a2:	d01b      	beq.n	80006dc <__cmpdf2+0x54>
 80006a4:	b001      	add	sp, #4
 80006a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006aa:	bf0c      	ite	eq
 80006ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006b0:	ea91 0f03 	teqne	r1, r3
 80006b4:	bf02      	ittt	eq
 80006b6:	ea90 0f02 	teqeq	r0, r2
 80006ba:	2000      	moveq	r0, #0
 80006bc:	4770      	bxeq	lr
 80006be:	f110 0f00 	cmn.w	r0, #0
 80006c2:	ea91 0f03 	teq	r1, r3
 80006c6:	bf58      	it	pl
 80006c8:	4299      	cmppl	r1, r3
 80006ca:	bf08      	it	eq
 80006cc:	4290      	cmpeq	r0, r2
 80006ce:	bf2c      	ite	cs
 80006d0:	17d8      	asrcs	r0, r3, #31
 80006d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006d6:	f040 0001 	orr.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d102      	bne.n	80006ec <__cmpdf2+0x64>
 80006e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ea:	d107      	bne.n	80006fc <__cmpdf2+0x74>
 80006ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006f4:	d1d6      	bne.n	80006a4 <__cmpdf2+0x1c>
 80006f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006fa:	d0d3      	beq.n	80006a4 <__cmpdf2+0x1c>
 80006fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_cdrcmple>:
 8000704:	4684      	mov	ip, r0
 8000706:	4610      	mov	r0, r2
 8000708:	4662      	mov	r2, ip
 800070a:	468c      	mov	ip, r1
 800070c:	4619      	mov	r1, r3
 800070e:	4663      	mov	r3, ip
 8000710:	e000      	b.n	8000714 <__aeabi_cdcmpeq>
 8000712:	bf00      	nop

08000714 <__aeabi_cdcmpeq>:
 8000714:	b501      	push	{r0, lr}
 8000716:	f7ff ffb7 	bl	8000688 <__cmpdf2>
 800071a:	2800      	cmp	r0, #0
 800071c:	bf48      	it	mi
 800071e:	f110 0f00 	cmnmi.w	r0, #0
 8000722:	bd01      	pop	{r0, pc}

08000724 <__aeabi_dcmpeq>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff fff4 	bl	8000714 <__aeabi_cdcmpeq>
 800072c:	bf0c      	ite	eq
 800072e:	2001      	moveq	r0, #1
 8000730:	2000      	movne	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_dcmplt>:
 8000738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800073c:	f7ff ffea 	bl	8000714 <__aeabi_cdcmpeq>
 8000740:	bf34      	ite	cc
 8000742:	2001      	movcc	r0, #1
 8000744:	2000      	movcs	r0, #0
 8000746:	f85d fb08 	ldr.w	pc, [sp], #8
 800074a:	bf00      	nop

0800074c <__aeabi_dcmple>:
 800074c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000750:	f7ff ffe0 	bl	8000714 <__aeabi_cdcmpeq>
 8000754:	bf94      	ite	ls
 8000756:	2001      	movls	r0, #1
 8000758:	2000      	movhi	r0, #0
 800075a:	f85d fb08 	ldr.w	pc, [sp], #8
 800075e:	bf00      	nop

08000760 <__aeabi_dcmpge>:
 8000760:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000764:	f7ff ffce 	bl	8000704 <__aeabi_cdrcmple>
 8000768:	bf94      	ite	ls
 800076a:	2001      	movls	r0, #1
 800076c:	2000      	movhi	r0, #0
 800076e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000772:	bf00      	nop

08000774 <__aeabi_dcmpgt>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff ffc4 	bl	8000704 <__aeabi_cdrcmple>
 800077c:	bf34      	ite	cc
 800077e:	2001      	movcc	r0, #1
 8000780:	2000      	movcs	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_dcmpun>:
 8000788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800078c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000790:	d102      	bne.n	8000798 <__aeabi_dcmpun+0x10>
 8000792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000796:	d10a      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800079c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a0:	d102      	bne.n	80007a8 <__aeabi_dcmpun+0x20>
 80007a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007a6:	d102      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	f04f 0001 	mov.w	r0, #1
 80007b2:	4770      	bx	lr

080007b4 <__aeabi_ldivmod>:
 80007b4:	b97b      	cbnz	r3, 80007d6 <__aeabi_ldivmod+0x22>
 80007b6:	b972      	cbnz	r2, 80007d6 <__aeabi_ldivmod+0x22>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	bfbe      	ittt	lt
 80007bc:	2000      	movlt	r0, #0
 80007be:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80007c2:	e006      	blt.n	80007d2 <__aeabi_ldivmod+0x1e>
 80007c4:	bf08      	it	eq
 80007c6:	2800      	cmpeq	r0, #0
 80007c8:	bf1c      	itt	ne
 80007ca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80007ce:	f04f 30ff 	movne.w	r0, #4294967295
 80007d2:	f000 b9b9 	b.w	8000b48 <__aeabi_idiv0>
 80007d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80007da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007de:	2900      	cmp	r1, #0
 80007e0:	db09      	blt.n	80007f6 <__aeabi_ldivmod+0x42>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db1a      	blt.n	800081c <__aeabi_ldivmod+0x68>
 80007e6:	f000 f84d 	bl	8000884 <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4770      	bx	lr
 80007f6:	4240      	negs	r0, r0
 80007f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db1b      	blt.n	8000838 <__aeabi_ldivmod+0x84>
 8000800:	f000 f840 	bl	8000884 <__udivmoddi4>
 8000804:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080c:	b004      	add	sp, #16
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	4252      	negs	r2, r2
 8000816:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800081a:	4770      	bx	lr
 800081c:	4252      	negs	r2, r2
 800081e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000822:	f000 f82f 	bl	8000884 <__udivmoddi4>
 8000826:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800082e:	b004      	add	sp, #16
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	4770      	bx	lr
 8000838:	4252      	negs	r2, r2
 800083a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800083e:	f000 f821 	bl	8000884 <__udivmoddi4>
 8000842:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084a:	b004      	add	sp, #16
 800084c:	4252      	negs	r2, r2
 800084e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000852:	4770      	bx	lr

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b96e 	b.w	8000b48 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468c      	mov	ip, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8083 	bne.w	800099a <__udivmoddi4+0x116>
 8000894:	428a      	cmp	r2, r1
 8000896:	4617      	mov	r7, r2
 8000898:	d947      	bls.n	800092a <__udivmoddi4+0xa6>
 800089a:	fab2 f282 	clz	r2, r2
 800089e:	b142      	cbz	r2, 80008b2 <__udivmoddi4+0x2e>
 80008a0:	f1c2 0020 	rsb	r0, r2, #32
 80008a4:	fa24 f000 	lsr.w	r0, r4, r0
 80008a8:	4091      	lsls	r1, r2
 80008aa:	4097      	lsls	r7, r2
 80008ac:	ea40 0c01 	orr.w	ip, r0, r1
 80008b0:	4094      	lsls	r4, r2
 80008b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008b6:	0c23      	lsrs	r3, r4, #16
 80008b8:	fbbc f6f8 	udiv	r6, ip, r8
 80008bc:	fa1f fe87 	uxth.w	lr, r7
 80008c0:	fb08 c116 	mls	r1, r8, r6, ip
 80008c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c8:	fb06 f10e 	mul.w	r1, r6, lr
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d909      	bls.n	80008e4 <__udivmoddi4+0x60>
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008d6:	f080 8119 	bcs.w	8000b0c <__udivmoddi4+0x288>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 8116 	bls.w	8000b0c <__udivmoddi4+0x288>
 80008e0:	3e02      	subs	r6, #2
 80008e2:	443b      	add	r3, r7
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ec:	fb08 3310 	mls	r3, r8, r0, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d909      	bls.n	8000910 <__udivmoddi4+0x8c>
 80008fc:	193c      	adds	r4, r7, r4
 80008fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000902:	f080 8105 	bcs.w	8000b10 <__udivmoddi4+0x28c>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f240 8102 	bls.w	8000b10 <__udivmoddi4+0x28c>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000914:	eba4 040e 	sub.w	r4, r4, lr
 8000918:	2600      	movs	r6, #0
 800091a:	b11d      	cbz	r5, 8000924 <__udivmoddi4+0xa0>
 800091c:	40d4      	lsrs	r4, r2
 800091e:	2300      	movs	r3, #0
 8000920:	e9c5 4300 	strd	r4, r3, [r5]
 8000924:	4631      	mov	r1, r6
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	b902      	cbnz	r2, 800092e <__udivmoddi4+0xaa>
 800092c:	deff      	udf	#255	; 0xff
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	2a00      	cmp	r2, #0
 8000934:	d150      	bne.n	80009d8 <__udivmoddi4+0x154>
 8000936:	1bcb      	subs	r3, r1, r7
 8000938:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800093c:	fa1f f887 	uxth.w	r8, r7
 8000940:	2601      	movs	r6, #1
 8000942:	fbb3 fcfe 	udiv	ip, r3, lr
 8000946:	0c21      	lsrs	r1, r4, #16
 8000948:	fb0e 331c 	mls	r3, lr, ip, r3
 800094c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000950:	fb08 f30c 	mul.w	r3, r8, ip
 8000954:	428b      	cmp	r3, r1
 8000956:	d907      	bls.n	8000968 <__udivmoddi4+0xe4>
 8000958:	1879      	adds	r1, r7, r1
 800095a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0xe2>
 8000960:	428b      	cmp	r3, r1
 8000962:	f200 80e9 	bhi.w	8000b38 <__udivmoddi4+0x2b4>
 8000966:	4684      	mov	ip, r0
 8000968:	1ac9      	subs	r1, r1, r3
 800096a:	b2a3      	uxth	r3, r4
 800096c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000970:	fb0e 1110 	mls	r1, lr, r0, r1
 8000974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000978:	fb08 f800 	mul.w	r8, r8, r0
 800097c:	45a0      	cmp	r8, r4
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0x10c>
 8000980:	193c      	adds	r4, r7, r4
 8000982:	f100 33ff 	add.w	r3, r0, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x10a>
 8000988:	45a0      	cmp	r8, r4
 800098a:	f200 80d9 	bhi.w	8000b40 <__udivmoddi4+0x2bc>
 800098e:	4618      	mov	r0, r3
 8000990:	eba4 0408 	sub.w	r4, r4, r8
 8000994:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000998:	e7bf      	b.n	800091a <__udivmoddi4+0x96>
 800099a:	428b      	cmp	r3, r1
 800099c:	d909      	bls.n	80009b2 <__udivmoddi4+0x12e>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	f000 80b1 	beq.w	8000b06 <__udivmoddi4+0x282>
 80009a4:	2600      	movs	r6, #0
 80009a6:	e9c5 0100 	strd	r0, r1, [r5]
 80009aa:	4630      	mov	r0, r6
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	fab3 f683 	clz	r6, r3
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d14a      	bne.n	8000a50 <__udivmoddi4+0x1cc>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d302      	bcc.n	80009c4 <__udivmoddi4+0x140>
 80009be:	4282      	cmp	r2, r0
 80009c0:	f200 80b8 	bhi.w	8000b34 <__udivmoddi4+0x2b0>
 80009c4:	1a84      	subs	r4, r0, r2
 80009c6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ca:	2001      	movs	r0, #1
 80009cc:	468c      	mov	ip, r1
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d0a8      	beq.n	8000924 <__udivmoddi4+0xa0>
 80009d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009d6:	e7a5      	b.n	8000924 <__udivmoddi4+0xa0>
 80009d8:	f1c2 0320 	rsb	r3, r2, #32
 80009dc:	fa20 f603 	lsr.w	r6, r0, r3
 80009e0:	4097      	lsls	r7, r2
 80009e2:	fa01 f002 	lsl.w	r0, r1, r2
 80009e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ea:	40d9      	lsrs	r1, r3
 80009ec:	4330      	orrs	r0, r6
 80009ee:	0c03      	lsrs	r3, r0, #16
 80009f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009f4:	fa1f f887 	uxth.w	r8, r7
 80009f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a00:	fb06 f108 	mul.w	r1, r6, r8
 8000a04:	4299      	cmp	r1, r3
 8000a06:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x19c>
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a12:	f080 808d 	bcs.w	8000b30 <__udivmoddi4+0x2ac>
 8000a16:	4299      	cmp	r1, r3
 8000a18:	f240 808a 	bls.w	8000b30 <__udivmoddi4+0x2ac>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	443b      	add	r3, r7
 8000a20:	1a5b      	subs	r3, r3, r1
 8000a22:	b281      	uxth	r1, r0
 8000a24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb00 f308 	mul.w	r3, r0, r8
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x1c4>
 8000a38:	1879      	adds	r1, r7, r1
 8000a3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a3e:	d273      	bcs.n	8000b28 <__udivmoddi4+0x2a4>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d971      	bls.n	8000b28 <__udivmoddi4+0x2a4>
 8000a44:	3802      	subs	r0, #2
 8000a46:	4439      	add	r1, r7
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a4e:	e778      	b.n	8000942 <__udivmoddi4+0xbe>
 8000a50:	f1c6 0c20 	rsb	ip, r6, #32
 8000a54:	fa03 f406 	lsl.w	r4, r3, r6
 8000a58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a5c:	431c      	orrs	r4, r3
 8000a5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a62:	fa01 f306 	lsl.w	r3, r1, r6
 8000a66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a6e:	431f      	orrs	r7, r3
 8000a70:	0c3b      	lsrs	r3, r7, #16
 8000a72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a76:	fa1f f884 	uxth.w	r8, r4
 8000a7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a82:	fb09 fa08 	mul.w	sl, r9, r8
 8000a86:	458a      	cmp	sl, r1
 8000a88:	fa02 f206 	lsl.w	r2, r2, r6
 8000a8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x220>
 8000a92:	1861      	adds	r1, r4, r1
 8000a94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a98:	d248      	bcs.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9a:	458a      	cmp	sl, r1
 8000a9c:	d946      	bls.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000aa2:	4421      	add	r1, r4
 8000aa4:	eba1 010a 	sub.w	r1, r1, sl
 8000aa8:	b2bf      	uxth	r7, r7
 8000aaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000aae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ab2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ab6:	fb00 f808 	mul.w	r8, r0, r8
 8000aba:	45b8      	cmp	r8, r7
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x24a>
 8000abe:	19e7      	adds	r7, r4, r7
 8000ac0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac4:	d22e      	bcs.n	8000b24 <__udivmoddi4+0x2a0>
 8000ac6:	45b8      	cmp	r8, r7
 8000ac8:	d92c      	bls.n	8000b24 <__udivmoddi4+0x2a0>
 8000aca:	3802      	subs	r0, #2
 8000acc:	4427      	add	r7, r4
 8000ace:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ad2:	eba7 0708 	sub.w	r7, r7, r8
 8000ad6:	fba0 8902 	umull	r8, r9, r0, r2
 8000ada:	454f      	cmp	r7, r9
 8000adc:	46c6      	mov	lr, r8
 8000ade:	4649      	mov	r1, r9
 8000ae0:	d31a      	bcc.n	8000b18 <__udivmoddi4+0x294>
 8000ae2:	d017      	beq.n	8000b14 <__udivmoddi4+0x290>
 8000ae4:	b15d      	cbz	r5, 8000afe <__udivmoddi4+0x27a>
 8000ae6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aea:	eb67 0701 	sbc.w	r7, r7, r1
 8000aee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000af2:	40f2      	lsrs	r2, r6
 8000af4:	ea4c 0202 	orr.w	r2, ip, r2
 8000af8:	40f7      	lsrs	r7, r6
 8000afa:	e9c5 2700 	strd	r2, r7, [r5]
 8000afe:	2600      	movs	r6, #0
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e70b      	b.n	8000924 <__udivmoddi4+0xa0>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e9      	b.n	80008e4 <__udivmoddi4+0x60>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6fd      	b.n	8000910 <__udivmoddi4+0x8c>
 8000b14:	4543      	cmp	r3, r8
 8000b16:	d2e5      	bcs.n	8000ae4 <__udivmoddi4+0x260>
 8000b18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7df      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b24:	4608      	mov	r0, r1
 8000b26:	e7d2      	b.n	8000ace <__udivmoddi4+0x24a>
 8000b28:	4660      	mov	r0, ip
 8000b2a:	e78d      	b.n	8000a48 <__udivmoddi4+0x1c4>
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	e7b9      	b.n	8000aa4 <__udivmoddi4+0x220>
 8000b30:	4666      	mov	r6, ip
 8000b32:	e775      	b.n	8000a20 <__udivmoddi4+0x19c>
 8000b34:	4630      	mov	r0, r6
 8000b36:	e74a      	b.n	80009ce <__udivmoddi4+0x14a>
 8000b38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b3c:	4439      	add	r1, r7
 8000b3e:	e713      	b.n	8000968 <__udivmoddi4+0xe4>
 8000b40:	3802      	subs	r0, #2
 8000b42:	443c      	add	r4, r7
 8000b44:	e724      	b.n	8000990 <__udivmoddi4+0x10c>
 8000b46:	bf00      	nop

08000b48 <__aeabi_idiv0>:
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b82:	f001 f889 	bl	8001c98 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a47      	ldr	r2, [pc, #284]	; (8000cd0 <HAL_UART_MspInit+0x13c>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb6:	4b47      	ldr	r3, [pc, #284]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bba:	4a46      	ldr	r2, [pc, #280]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bc2:	4b44      	ldr	r3, [pc, #272]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b41      	ldr	r3, [pc, #260]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a40      	ldr	r2, [pc, #256]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b3e      	ldr	r3, [pc, #248]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f000 fde6 	bl	80017d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c08:	e05d      	b.n	8000cc6 <HAL_UART_MspInit+0x132>
  else if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_UART_MspInit+0x144>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d158      	bne.n	8000cc6 <HAL_UART_MspInit+0x132>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	4a2e      	ldr	r2, [pc, #184]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c20:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a28      	ldr	r2, [pc, #160]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c54:	2307      	movs	r3, #7
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	481f      	ldr	r0, [pc, #124]	; (8000cdc <HAL_UART_MspInit+0x148>)
 8000c60:	f000 fdb8 	bl	80017d4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000c64:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c66:	4a1f      	ldr	r2, [pc, #124]	; (8000ce4 <HAL_UART_MspInit+0x150>)
 8000c68:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c6c:	2218      	movs	r2, #24
 8000c6e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c70:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c76:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c7c:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c7e:	2280      	movs	r2, #128	; 0x80
 8000c80:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c88:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000c8e:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c90:	2220      	movs	r2, #32
 8000c92:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000c9a:	4811      	ldr	r0, [pc, #68]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c9c:	f000 fb20 	bl	80012e0 <HAL_DMA_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_UART_MspInit+0x116>
      Error_Handler();
 8000ca6:	f008 f9ef 	bl	8009088 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a0c      	ldr	r2, [pc, #48]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000cae:	67da      	str	r2, [r3, #124]	; 0x7c
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2025      	movs	r0, #37	; 0x25
 8000cbc:	f000 fadb 	bl	8001276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cc0:	2025      	movs	r0, #37	; 0x25
 8000cc2:	f000 faf2 	bl	80012aa <HAL_NVIC_EnableIRQ>
}
 8000cc6:	bf00      	nop
 8000cc8:	3730      	adds	r7, #48	; 0x30
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40008000 	.word	0x40008000
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40013800 	.word	0x40013800
 8000cdc:	48000800 	.word	0x48000800
 8000ce0:	20000848 	.word	0x20000848
 8000ce4:	40020008 	.word	0x40020008

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <NMI_Handler+0x4>

08000cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <BusFault_Handler+0x4>

08000d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <UsageFault_Handler+0x4>

08000d06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d34:	f000 f9a6 	bl	8001084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <DMA1_Channel1_IRQHandler+0x10>)
 8000d42:	f000 fc35 	bl	80015b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000848 	.word	0x20000848

08000d50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d54:	4802      	ldr	r0, [pc, #8]	; (8000d60 <USART1_IRQHandler+0x10>)
 8000d56:	f001 ff7f 	bl	8002c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200007b8 	.word	0x200007b8

08000d64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d6c:	f000 fecc 	bl	8001b08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d7c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d80:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d013      	beq.n	8000db4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d90:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d94:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d00b      	beq.n	8000db4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d9c:	e000      	b.n	8000da0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d9e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000da0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d0f9      	beq.n	8000d9e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000daa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000db4:	687b      	ldr	r3, [r7, #4]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
	return 1;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <_kill>:

int _kill(int pid, int sig)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ddc:	f01f ffda 	bl	8020d94 <__errno>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2216      	movs	r2, #22
 8000de4:	601a      	str	r2, [r3, #0]
	return -1;
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <_exit>:

void _exit (int status)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000dfa:	f04f 31ff 	mov.w	r1, #4294967295
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff ffe7 	bl	8000dd2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e04:	e7fe      	b.n	8000e04 <_exit+0x12>

08000e06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	60f8      	str	r0, [r7, #12]
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	e00a      	b.n	8000e2e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e18:	f3af 8000 	nop.w
 8000e1c:	4601      	mov	r1, r0
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	1c5a      	adds	r2, r3, #1
 8000e22:	60ba      	str	r2, [r7, #8]
 8000e24:	b2ca      	uxtb	r2, r1
 8000e26:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	dbf0      	blt.n	8000e18 <_read+0x12>
	}

return len;
 8000e36:	687b      	ldr	r3, [r7, #4]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	e009      	b.n	8000e66 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	1c5a      	adds	r2, r3, #1
 8000e56:	60ba      	str	r2, [r7, #8]
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff ff8a 	bl	8000d74 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	3301      	adds	r3, #1
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	dbf1      	blt.n	8000e52 <_write+0x12>
	}
	return len;
 8000e6e:	687b      	ldr	r3, [r7, #4]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <_close>:

int _close(int file)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	return -1;
 8000e80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ea0:	605a      	str	r2, [r3, #4]
	return 0;
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <_isatty>:

int _isatty(int file)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	return 1;
 8000eb8:	2301      	movs	r3, #1
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b085      	sub	sp, #20
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	60f8      	str	r0, [r7, #12]
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
	return 0;
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <_open>:

int _open(char *path, int flags, ...)
{
 8000ee0:	b40e      	push	{r1, r2, r3}
 8000ee2:	b480      	push	{r7}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	b003      	add	sp, #12
 8000efa:	4770      	bx	lr

08000efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f04:	4a14      	ldr	r2, [pc, #80]	; (8000f58 <_sbrk+0x5c>)
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <_sbrk+0x60>)
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f10:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <_sbrk+0x64>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d102      	bne.n	8000f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <_sbrk+0x64>)
 8000f1a:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <_sbrk+0x68>)
 8000f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <_sbrk+0x64>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d207      	bcs.n	8000f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f2c:	f01f ff32 	bl	8020d94 <__errno>
 8000f30:	4603      	mov	r3, r0
 8000f32:	220c      	movs	r2, #12
 8000f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3a:	e009      	b.n	8000f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <_sbrk+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <_sbrk+0x64>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <_sbrk+0x64>)
 8000f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20020000 	.word	0x20020000
 8000f5c:	00000400 	.word	0x00000400
 8000f60:	2000035c 	.word	0x2000035c
 8000f64:	20001058 	.word	0x20001058

08000f68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <SystemInit+0x20>)
 8000f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <SystemInit+0x20>)
 8000f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f8c:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f8e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f90:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f92:	490e      	ldr	r1, [pc, #56]	; (8000fcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f94:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <LoopForever+0xe>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f98:	e002      	b.n	8000fa0 <LoopCopyDataInit>

08000f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9e:	3304      	adds	r3, #4

08000fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa4:	d3f9      	bcc.n	8000f9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa6:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fa8:	4c0b      	ldr	r4, [pc, #44]	; (8000fd8 <LoopForever+0x16>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fac:	e001      	b.n	8000fb2 <LoopFillZerobss>

08000fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb0:	3204      	adds	r2, #4

08000fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb4:	d3fb      	bcc.n	8000fae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fb6:	f7ff ffd7 	bl	8000f68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fba:	f020 fb09 	bl	80215d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fbe:	f007 fe77 	bl	8008cb0 <main>

08000fc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fc2:	e7fe      	b.n	8000fc2 <LoopForever>
  ldr   r0, =_estack
 8000fc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fcc:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8000fd0:	0802b6a4 	.word	0x0802b6a4
  ldr r2, =_sbss
 8000fd4:	2000033c 	.word	0x2000033c
  ldr r4, =_ebss
 8000fd8:	20001058 	.word	0x20001058

08000fdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fdc:	e7fe      	b.n	8000fdc <ADC1_2_IRQHandler>

08000fde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe8:	2003      	movs	r0, #3
 8000fea:	f000 f939 	bl	8001260 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f000 f80e 	bl	8001010 <HAL_InitTick>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d002      	beq.n	8001000 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	71fb      	strb	r3, [r7, #7]
 8000ffe:	e001      	b.n	8001004 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001000:	f7ff fda4 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001004:	79fb      	ldrb	r3, [r7, #7]

}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800101c:	4b16      	ldr	r3, [pc, #88]	; (8001078 <HAL_InitTick+0x68>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d022      	beq.n	800106a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001024:	4b15      	ldr	r3, [pc, #84]	; (800107c <HAL_InitTick+0x6c>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b13      	ldr	r3, [pc, #76]	; (8001078 <HAL_InitTick+0x68>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001030:	fbb1 f3f3 	udiv	r3, r1, r3
 8001034:	fbb2 f3f3 	udiv	r3, r2, r3
 8001038:	4618      	mov	r0, r3
 800103a:	f000 f944 	bl	80012c6 <HAL_SYSTICK_Config>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d10f      	bne.n	8001064 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b0f      	cmp	r3, #15
 8001048:	d809      	bhi.n	800105e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104a:	2200      	movs	r2, #0
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	f04f 30ff 	mov.w	r0, #4294967295
 8001052:	f000 f910 	bl	8001276 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <HAL_InitTick+0x70>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	e007      	b.n	800106e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	73fb      	strb	r3, [r7, #15]
 8001062:	e004      	b.n	800106e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	e001      	b.n	800106e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800106e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2000000c 	.word	0x2000000c
 800107c:	20000004 	.word	0x20000004
 8001080:	20000008 	.word	0x20000008

08001084 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <HAL_IncTick+0x1c>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_IncTick+0x20>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4413      	add	r3, r2
 8001092:	4a03      	ldr	r2, [pc, #12]	; (80010a0 <HAL_IncTick+0x1c>)
 8001094:	6013      	str	r3, [r2, #0]
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	20001044 	.word	0x20001044
 80010a4:	2000000c 	.word	0x2000000c

080010a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return uwTick;
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <HAL_GetTick+0x14>)
 80010ae:	681b      	ldr	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20001044 	.word	0x20001044

080010c0 <__NVIC_SetPriorityGrouping>:
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_GetPriorityGrouping>:
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_EnableIRQ>:
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	db0b      	blt.n	800114e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	4907      	ldr	r1, [pc, #28]	; (800115c <__NVIC_EnableIRQ+0x38>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	2001      	movs	r0, #1
 8001146:	fa00 f202 	lsl.w	r2, r0, r2
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000e100 	.word	0xe000e100

08001160 <__NVIC_SetPriority>:
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db0a      	blt.n	800118a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	490c      	ldr	r1, [pc, #48]	; (80011ac <__NVIC_SetPriority+0x4c>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	440b      	add	r3, r1
 8001184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001188:	e00a      	b.n	80011a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4908      	ldr	r1, [pc, #32]	; (80011b0 <__NVIC_SetPriority+0x50>)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	3b04      	subs	r3, #4
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	440b      	add	r3, r1
 800119e:	761a      	strb	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <NVIC_EncodePriority>:
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f1c3 0307 	rsb	r3, r3, #7
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	bf28      	it	cs
 80011d2:	2304      	movcs	r3, #4
 80011d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3304      	adds	r3, #4
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d902      	bls.n	80011e4 <NVIC_EncodePriority+0x30>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3b03      	subs	r3, #3
 80011e2:	e000      	b.n	80011e6 <NVIC_EncodePriority+0x32>
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	401a      	ands	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43d9      	mvns	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	4313      	orrs	r3, r2
}
 800120e:	4618      	mov	r0, r3
 8001210:	3724      	adds	r7, #36	; 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <SysTick_Config>:
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800122c:	d301      	bcc.n	8001232 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800122e:	2301      	movs	r3, #1
 8001230:	e00f      	b.n	8001252 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001232:	4a0a      	ldr	r2, [pc, #40]	; (800125c <SysTick_Config+0x40>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123a:	210f      	movs	r1, #15
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f7ff ff8e 	bl	8001160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <SysTick_Config+0x40>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124a:	4b04      	ldr	r3, [pc, #16]	; (800125c <SysTick_Config+0x40>)
 800124c:	2207      	movs	r2, #7
 800124e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	e000e010 	.word	0xe000e010

08001260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ff29 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001284:	f7ff ff40 	bl	8001108 <__NVIC_GetPriorityGrouping>
 8001288:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff ff90 	bl	80011b4 <NVIC_EncodePriority>
 8001294:	4602      	mov	r2, r0
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff5f 	bl	8001160 <__NVIC_SetPriority>
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff33 	bl	8001124 <__NVIC_EnableIRQ>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffa4 	bl	800121c <SysTick_Config>
 80012d4:	4603      	mov	r3, r0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e08d      	b.n	800140e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	4b47      	ldr	r3, [pc, #284]	; (8001418 <HAL_DMA_Init+0x138>)
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d80f      	bhi.n	800131e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	461a      	mov	r2, r3
 8001304:	4b45      	ldr	r3, [pc, #276]	; (800141c <HAL_DMA_Init+0x13c>)
 8001306:	4413      	add	r3, r2
 8001308:	4a45      	ldr	r2, [pc, #276]	; (8001420 <HAL_DMA_Init+0x140>)
 800130a:	fba2 2303 	umull	r2, r3, r2, r3
 800130e:	091b      	lsrs	r3, r3, #4
 8001310:	009a      	lsls	r2, r3, #2
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a42      	ldr	r2, [pc, #264]	; (8001424 <HAL_DMA_Init+0x144>)
 800131a:	641a      	str	r2, [r3, #64]	; 0x40
 800131c:	e00e      	b.n	800133c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	4b40      	ldr	r3, [pc, #256]	; (8001428 <HAL_DMA_Init+0x148>)
 8001326:	4413      	add	r3, r2
 8001328:	4a3d      	ldr	r2, [pc, #244]	; (8001420 <HAL_DMA_Init+0x140>)
 800132a:	fba2 2303 	umull	r2, r3, r2, r3
 800132e:	091b      	lsrs	r3, r3, #4
 8001330:	009a      	lsls	r2, r3, #2
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a3c      	ldr	r2, [pc, #240]	; (800142c <HAL_DMA_Init+0x14c>)
 800133a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2202      	movs	r2, #2
 8001340:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001356:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001360:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800136c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001378:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a1b      	ldr	r3, [r3, #32]
 800137e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	4313      	orrs	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 f9be 	bl	8001710 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800139c:	d102      	bne.n	80013a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013b8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d010      	beq.n	80013e4 <HAL_DMA_Init+0x104>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d80c      	bhi.n	80013e4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 f9de 	bl	800178c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	e008      	b.n	80013f6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40020407 	.word	0x40020407
 800141c:	bffdfff8 	.word	0xbffdfff8
 8001420:	cccccccd 	.word	0xcccccccd
 8001424:	40020000 	.word	0x40020000
 8001428:	bffdfbf8 	.word	0xbffdfbf8
 800142c:	40020400 	.word	0x40020400

08001430 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001438:	2300      	movs	r3, #0
 800143a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d005      	beq.n	8001454 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2204      	movs	r2, #4
 800144c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	73fb      	strb	r3, [r7, #15]
 8001452:	e037      	b.n	80014c4 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f022 020e 	bic.w	r2, r2, #14
 8001462:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800146e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001472:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0201 	bic.w	r2, r2, #1
 8001482:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001488:	f003 021f 	and.w	r2, r3, #31
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	2101      	movs	r1, #1
 8001492:	fa01 f202 	lsl.w	r2, r1, r2
 8001496:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014a0:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00c      	beq.n	80014c4 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014b8:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80014c2:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b084      	sub	sp, #16
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d00d      	beq.n	8001516 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2204      	movs	r2, #4
 80014fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	73fb      	strb	r3, [r7, #15]
 8001514:	e047      	b.n	80015a6 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 020e 	bic.w	r2, r2, #14
 8001524:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 0201 	bic.w	r2, r2, #1
 8001534:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001540:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001544:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	f003 021f 	and.w	r2, r3, #31
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	2101      	movs	r1, #1
 8001554:	fa01 f202 	lsl.w	r2, r1, r2
 8001558:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001562:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001568:	2b00      	cmp	r3, #0
 800156a:	d00c      	beq.n	8001586 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001576:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800157a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001584:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	4798      	blx	r3
    }
  }
  return status;
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015cc:	f003 031f 	and.w	r3, r3, #31
 80015d0:	2204      	movs	r2, #4
 80015d2:	409a      	lsls	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d026      	beq.n	800162a <HAL_DMA_IRQHandler+0x7a>
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d021      	beq.n	800162a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0320 	and.w	r3, r3, #32
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d107      	bne.n	8001604 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0204 	bic.w	r2, r2, #4
 8001602:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001608:	f003 021f 	and.w	r2, r3, #31
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	2104      	movs	r1, #4
 8001612:	fa01 f202 	lsl.w	r2, r1, r2
 8001616:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161c:	2b00      	cmp	r3, #0
 800161e:	d071      	beq.n	8001704 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001628:	e06c      	b.n	8001704 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	f003 031f 	and.w	r3, r3, #31
 8001632:	2202      	movs	r2, #2
 8001634:	409a      	lsls	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	4013      	ands	r3, r2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d02e      	beq.n	800169c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d029      	beq.n	800169c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0320 	and.w	r3, r3, #32
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10b      	bne.n	800166e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 020a 	bic.w	r2, r2, #10
 8001664:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	f003 021f 	and.w	r2, r3, #31
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	2102      	movs	r1, #2
 800167c:	fa01 f202 	lsl.w	r2, r1, r2
 8001680:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168e:	2b00      	cmp	r3, #0
 8001690:	d038      	beq.n	8001704 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800169a:	e033      	b.n	8001704 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a0:	f003 031f 	and.w	r3, r3, #31
 80016a4:	2208      	movs	r2, #8
 80016a6:	409a      	lsls	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4013      	ands	r3, r2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d02a      	beq.n	8001706 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d025      	beq.n	8001706 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 020e 	bic.w	r2, r2, #14
 80016c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	f003 021f 	and.w	r2, r3, #31
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	2101      	movs	r1, #1
 80016d8:	fa01 f202 	lsl.w	r2, r1, r2
 80016dc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d004      	beq.n	8001706 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001704:	bf00      	nop
 8001706:	bf00      	nop
}
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001710:	b480      	push	{r7}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	4b16      	ldr	r3, [pc, #88]	; (8001778 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001720:	429a      	cmp	r2, r3
 8001722:	d802      	bhi.n	800172a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001724:	4b15      	ldr	r3, [pc, #84]	; (800177c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	e001      	b.n	800172e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800172c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	b2db      	uxtb	r3, r3
 8001738:	3b08      	subs	r3, #8
 800173a:	4a12      	ldr	r2, [pc, #72]	; (8001784 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800173c:	fba2 2303 	umull	r2, r3, r2, r3
 8001740:	091b      	lsrs	r3, r3, #4
 8001742:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001748:	089b      	lsrs	r3, r3, #2
 800174a:	009a      	lsls	r2, r3, #2
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4413      	add	r3, r2
 8001750:	461a      	mov	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800175a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 031f 	and.w	r3, r3, #31
 8001762:	2201      	movs	r2, #1
 8001764:	409a      	lsls	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	651a      	str	r2, [r3, #80]	; 0x50
}
 800176a:	bf00      	nop
 800176c:	371c      	adds	r7, #28
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40020407 	.word	0x40020407
 800177c:	40020800 	.word	0x40020800
 8001780:	40020820 	.word	0x40020820
 8001784:	cccccccd 	.word	0xcccccccd
 8001788:	40020880 	.word	0x40020880

0800178c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80017a0:	4413      	add	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	461a      	mov	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80017ae:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	f003 031f 	and.w	r3, r3, #31
 80017b8:	2201      	movs	r2, #1
 80017ba:	409a      	lsls	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	1000823f 	.word	0x1000823f
 80017d0:	40020940 	.word	0x40020940

080017d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017e2:	e15a      	b.n	8001a9a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	2101      	movs	r1, #1
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	fa01 f303 	lsl.w	r3, r1, r3
 80017f0:	4013      	ands	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 814c 	beq.w	8001a94 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d00b      	beq.n	800181c <HAL_GPIO_Init+0x48>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b02      	cmp	r3, #2
 800180a:	d007      	beq.n	800181c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001810:	2b11      	cmp	r3, #17
 8001812:	d003      	beq.n	800181c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b12      	cmp	r3, #18
 800181a:	d130      	bne.n	800187e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	2203      	movs	r2, #3
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4313      	orrs	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001852:	2201      	movs	r2, #1
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	091b      	lsrs	r3, r3, #4
 8001868:	f003 0201 	and.w	r2, r3, #1
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	2203      	movs	r2, #3
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0xea>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b12      	cmp	r3, #18
 80018bc:	d123      	bne.n	8001906 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	08da      	lsrs	r2, r3, #3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3208      	adds	r2, #8
 80018c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	220f      	movs	r2, #15
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	691a      	ldr	r2, [r3, #16]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	08da      	lsrs	r2, r3, #3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3208      	adds	r2, #8
 8001900:	6939      	ldr	r1, [r7, #16]
 8001902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	2203      	movs	r2, #3
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0203 	and.w	r2, r3, #3
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 80a6 	beq.w	8001a94 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001948:	4b5b      	ldr	r3, [pc, #364]	; (8001ab8 <HAL_GPIO_Init+0x2e4>)
 800194a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194c:	4a5a      	ldr	r2, [pc, #360]	; (8001ab8 <HAL_GPIO_Init+0x2e4>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6613      	str	r3, [r2, #96]	; 0x60
 8001954:	4b58      	ldr	r3, [pc, #352]	; (8001ab8 <HAL_GPIO_Init+0x2e4>)
 8001956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001960:	4a56      	ldr	r2, [pc, #344]	; (8001abc <HAL_GPIO_Init+0x2e8>)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	089b      	lsrs	r3, r3, #2
 8001966:	3302      	adds	r3, #2
 8001968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800196c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	220f      	movs	r2, #15
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800198a:	d01f      	beq.n	80019cc <HAL_GPIO_Init+0x1f8>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a4c      	ldr	r2, [pc, #304]	; (8001ac0 <HAL_GPIO_Init+0x2ec>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d019      	beq.n	80019c8 <HAL_GPIO_Init+0x1f4>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a4b      	ldr	r2, [pc, #300]	; (8001ac4 <HAL_GPIO_Init+0x2f0>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d013      	beq.n	80019c4 <HAL_GPIO_Init+0x1f0>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a4a      	ldr	r2, [pc, #296]	; (8001ac8 <HAL_GPIO_Init+0x2f4>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d00d      	beq.n	80019c0 <HAL_GPIO_Init+0x1ec>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a49      	ldr	r2, [pc, #292]	; (8001acc <HAL_GPIO_Init+0x2f8>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d007      	beq.n	80019bc <HAL_GPIO_Init+0x1e8>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a48      	ldr	r2, [pc, #288]	; (8001ad0 <HAL_GPIO_Init+0x2fc>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d101      	bne.n	80019b8 <HAL_GPIO_Init+0x1e4>
 80019b4:	2305      	movs	r3, #5
 80019b6:	e00a      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019b8:	2306      	movs	r3, #6
 80019ba:	e008      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019bc:	2304      	movs	r3, #4
 80019be:	e006      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019c0:	2303      	movs	r3, #3
 80019c2:	e004      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019c4:	2302      	movs	r3, #2
 80019c6:	e002      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019cc:	2300      	movs	r3, #0
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	f002 0203 	and.w	r2, r2, #3
 80019d4:	0092      	lsls	r2, r2, #2
 80019d6:	4093      	lsls	r3, r2
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019de:	4937      	ldr	r1, [pc, #220]	; (8001abc <HAL_GPIO_Init+0x2e8>)
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	089b      	lsrs	r3, r3, #2
 80019e4:	3302      	adds	r3, #2
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019ec:	4b39      	ldr	r3, [pc, #228]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a10:	4a30      	ldr	r2, [pc, #192]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a16:	4b2f      	ldr	r3, [pc, #188]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4013      	ands	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a3a:	4a26      	ldr	r2, [pc, #152]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a40:	4b24      	ldr	r3, [pc, #144]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a64:	4a1b      	ldr	r2, [pc, #108]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	43db      	mvns	r3, r3
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4013      	ands	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a8e:	4a11      	ldr	r2, [pc, #68]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	3301      	adds	r3, #1
 8001a98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f47f ae9d 	bne.w	80017e4 <HAL_GPIO_Init+0x10>
  }
}
 8001aaa:	bf00      	nop
 8001aac:	bf00      	nop
 8001aae:	371c      	adds	r7, #28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40010000 	.word	0x40010000
 8001ac0:	48000400 	.word	0x48000400
 8001ac4:	48000800 	.word	0x48000800
 8001ac8:	48000c00 	.word	0x48000c00
 8001acc:	48001000 	.word	0x48001000
 8001ad0:	48001400 	.word	0x48001400
 8001ad4:	40010400 	.word	0x40010400

08001ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	807b      	strh	r3, [r7, #2]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ae8:	787b      	ldrb	r3, [r7, #1]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aee:	887a      	ldrh	r2, [r7, #2]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001af4:	e002      	b.n	8001afc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001af6:	887a      	ldrh	r2, [r7, #2]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b12:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b14:	695a      	ldr	r2, [r3, #20]
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d006      	beq.n	8001b2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b1e:	4a05      	ldr	r2, [pc, #20]	; (8001b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b20:	88fb      	ldrh	r3, [r7, #6]
 8001b22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f806 	bl	8001b38 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40010400 	.word	0x40010400

08001b38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d141      	bne.n	8001be2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b5e:	4b4b      	ldr	r3, [pc, #300]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b6a:	d131      	bne.n	8001bd0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b6c:	4b47      	ldr	r3, [pc, #284]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b72:	4a46      	ldr	r2, [pc, #280]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b7c:	4b43      	ldr	r3, [pc, #268]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b84:	4a41      	ldr	r2, [pc, #260]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b8c:	4b40      	ldr	r3, [pc, #256]	; (8001c90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2232      	movs	r2, #50	; 0x32
 8001b92:	fb02 f303 	mul.w	r3, r2, r3
 8001b96:	4a3f      	ldr	r2, [pc, #252]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b98:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9c:	0c9b      	lsrs	r3, r3, #18
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ba2:	e002      	b.n	8001baa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001baa:	4b38      	ldr	r3, [pc, #224]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bb6:	d102      	bne.n	8001bbe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f2      	bne.n	8001ba4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bbe:	4b33      	ldr	r3, [pc, #204]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bca:	d158      	bne.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e057      	b.n	8001c80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bd0:	4b2e      	ldr	r3, [pc, #184]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bd6:	4a2d      	ldr	r2, [pc, #180]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001be0:	e04d      	b.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001be8:	d141      	bne.n	8001c6e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bea:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf6:	d131      	bne.n	8001c5c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bf8:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bfe:	4a23      	ldr	r2, [pc, #140]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c08:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c10:	4a1e      	ldr	r2, [pc, #120]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c18:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2232      	movs	r2, #50	; 0x32
 8001c1e:	fb02 f303 	mul.w	r3, r2, r3
 8001c22:	4a1c      	ldr	r2, [pc, #112]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c24:	fba2 2303 	umull	r2, r3, r2, r3
 8001c28:	0c9b      	lsrs	r3, r3, #18
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c2e:	e002      	b.n	8001c36 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c42:	d102      	bne.n	8001c4a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f2      	bne.n	8001c30 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c56:	d112      	bne.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e011      	b.n	8001c80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c62:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c6c:	e007      	b.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c6e:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c76:	4a05      	ldr	r2, [pc, #20]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c7c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	40007000 	.word	0x40007000
 8001c90:	20000004 	.word	0x20000004
 8001c94:	431bde83 	.word	0x431bde83

08001c98 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ca2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca6:	6093      	str	r3, [r2, #8]
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40007000 	.word	0x40007000

08001cb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e308      	b.n	80022dc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d075      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cd6:	4ba3      	ldr	r3, [pc, #652]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ce0:	4ba0      	ldr	r3, [pc, #640]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	2b0c      	cmp	r3, #12
 8001cee:	d102      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x3e>
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d002      	beq.n	8001cfc <HAL_RCC_OscConfig+0x44>
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d10b      	bne.n	8001d14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfc:	4b99      	ldr	r3, [pc, #612]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d05b      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x108>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d157      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e2e3      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d1c:	d106      	bne.n	8001d2c <HAL_RCC_OscConfig+0x74>
 8001d1e:	4b91      	ldr	r3, [pc, #580]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a90      	ldr	r2, [pc, #576]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	e01d      	b.n	8001d68 <HAL_RCC_OscConfig+0xb0>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d34:	d10c      	bne.n	8001d50 <HAL_RCC_OscConfig+0x98>
 8001d36:	4b8b      	ldr	r3, [pc, #556]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a8a      	ldr	r2, [pc, #552]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	4b88      	ldr	r3, [pc, #544]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a87      	ldr	r2, [pc, #540]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	e00b      	b.n	8001d68 <HAL_RCC_OscConfig+0xb0>
 8001d50:	4b84      	ldr	r3, [pc, #528]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a83      	ldr	r2, [pc, #524]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	4b81      	ldr	r3, [pc, #516]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a80      	ldr	r2, [pc, #512]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d013      	beq.n	8001d98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d70:	f7ff f99a 	bl	80010a8 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d78:	f7ff f996 	bl	80010a8 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b64      	cmp	r3, #100	; 0x64
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e2a8      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d8a:	4b76      	ldr	r3, [pc, #472]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCC_OscConfig+0xc0>
 8001d96:	e014      	b.n	8001dc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7ff f986 	bl	80010a8 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da0:	f7ff f982 	bl	80010a8 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b64      	cmp	r3, #100	; 0x64
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e294      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001db2:	4b6c      	ldr	r3, [pc, #432]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0xe8>
 8001dbe:	e000      	b.n	8001dc2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d075      	beq.n	8001eba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dce:	4b65      	ldr	r3, [pc, #404]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
 8001dd6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dd8:	4b62      	ldr	r3, [pc, #392]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	2b0c      	cmp	r3, #12
 8001de6:	d102      	bne.n	8001dee <HAL_RCC_OscConfig+0x136>
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d002      	beq.n	8001df4 <HAL_RCC_OscConfig+0x13c>
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d11f      	bne.n	8001e34 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001df4:	4b5b      	ldr	r3, [pc, #364]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_RCC_OscConfig+0x154>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e267      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0c:	4b55      	ldr	r3, [pc, #340]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	061b      	lsls	r3, r3, #24
 8001e1a:	4952      	ldr	r1, [pc, #328]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e20:	4b51      	ldr	r3, [pc, #324]	; (8001f68 <HAL_RCC_OscConfig+0x2b0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff f8f3 	bl	8001010 <HAL_InitTick>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d043      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e253      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d023      	beq.n	8001e84 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e3c:	4b49      	ldr	r3, [pc, #292]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a48      	ldr	r2, [pc, #288]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e48:	f7ff f92e 	bl	80010a8 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e50:	f7ff f92a 	bl	80010a8 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e23c      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e62:	4b40      	ldr	r3, [pc, #256]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6e:	4b3d      	ldr	r3, [pc, #244]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	061b      	lsls	r3, r3, #24
 8001e7c:	4939      	ldr	r1, [pc, #228]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	604b      	str	r3, [r1, #4]
 8001e82:	e01a      	b.n	8001eba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e84:	4b37      	ldr	r3, [pc, #220]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a36      	ldr	r2, [pc, #216]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7ff f90a 	bl	80010a8 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e98:	f7ff f906 	bl	80010a8 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e218      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eaa:	4b2e      	ldr	r3, [pc, #184]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x1e0>
 8001eb6:	e000      	b.n	8001eba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eb8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d03c      	beq.n	8001f40 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d01c      	beq.n	8001f08 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ece:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed4:	4a23      	ldr	r2, [pc, #140]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ede:	f7ff f8e3 	bl	80010a8 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee6:	f7ff f8df 	bl	80010a8 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e1f1      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ef8:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0ef      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x22e>
 8001f06:	e01b      	b.n	8001f40 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f08:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f0e:	4a15      	ldr	r2, [pc, #84]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001f10:	f023 0301 	bic.w	r3, r3, #1
 8001f14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f18:	f7ff f8c6 	bl	80010a8 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f20:	f7ff f8c2 	bl	80010a8 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e1d4      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f32:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1ef      	bne.n	8001f20 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 80ab 	beq.w	80020a4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f52:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d106      	bne.n	8001f6c <HAL_RCC_OscConfig+0x2b4>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e005      	b.n	8001f6e <HAL_RCC_OscConfig+0x2b6>
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	20000008 	.word	0x20000008
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00d      	beq.n	8001f8e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f72:	4baf      	ldr	r3, [pc, #700]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	4aae      	ldr	r2, [pc, #696]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f7e:	4bac      	ldr	r3, [pc, #688]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f8e:	4ba9      	ldr	r3, [pc, #676]	; (8002234 <HAL_RCC_OscConfig+0x57c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d118      	bne.n	8001fcc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f9a:	4ba6      	ldr	r3, [pc, #664]	; (8002234 <HAL_RCC_OscConfig+0x57c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4aa5      	ldr	r2, [pc, #660]	; (8002234 <HAL_RCC_OscConfig+0x57c>)
 8001fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa6:	f7ff f87f 	bl	80010a8 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fae:	f7ff f87b 	bl	80010a8 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e18d      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fc0:	4b9c      	ldr	r3, [pc, #624]	; (8002234 <HAL_RCC_OscConfig+0x57c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d108      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x32e>
 8001fd4:	4b96      	ldr	r3, [pc, #600]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fda:	4a95      	ldr	r2, [pc, #596]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fe4:	e024      	b.n	8002030 <HAL_RCC_OscConfig+0x378>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b05      	cmp	r3, #5
 8001fec:	d110      	bne.n	8002010 <HAL_RCC_OscConfig+0x358>
 8001fee:	4b90      	ldr	r3, [pc, #576]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff4:	4a8e      	ldr	r2, [pc, #568]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001ff6:	f043 0304 	orr.w	r3, r3, #4
 8001ffa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ffe:	4b8c      	ldr	r3, [pc, #560]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002004:	4a8a      	ldr	r2, [pc, #552]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800200e:	e00f      	b.n	8002030 <HAL_RCC_OscConfig+0x378>
 8002010:	4b87      	ldr	r3, [pc, #540]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002016:	4a86      	ldr	r2, [pc, #536]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002018:	f023 0301 	bic.w	r3, r3, #1
 800201c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002020:	4b83      	ldr	r3, [pc, #524]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002026:	4a82      	ldr	r2, [pc, #520]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002028:	f023 0304 	bic.w	r3, r3, #4
 800202c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d016      	beq.n	8002066 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002038:	f7ff f836 	bl	80010a8 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800203e:	e00a      	b.n	8002056 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002040:	f7ff f832 	bl	80010a8 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	f241 3288 	movw	r2, #5000	; 0x1388
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e142      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002056:	4b76      	ldr	r3, [pc, #472]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0ed      	beq.n	8002040 <HAL_RCC_OscConfig+0x388>
 8002064:	e015      	b.n	8002092 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002066:	f7ff f81f 	bl	80010a8 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800206c:	e00a      	b.n	8002084 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206e:	f7ff f81b 	bl	80010a8 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	f241 3288 	movw	r2, #5000	; 0x1388
 800207c:	4293      	cmp	r3, r2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e12b      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002084:	4b6a      	ldr	r3, [pc, #424]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1ed      	bne.n	800206e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002092:	7ffb      	ldrb	r3, [r7, #31]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d105      	bne.n	80020a4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002098:	4b65      	ldr	r3, [pc, #404]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209c:	4a64      	ldr	r2, [pc, #400]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800209e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0320 	and.w	r3, r3, #32
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d03c      	beq.n	800212a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d01c      	beq.n	80020f2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020b8:	4b5d      	ldr	r3, [pc, #372]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020be:	4a5c      	ldr	r2, [pc, #368]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c8:	f7fe ffee 	bl	80010a8 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020d0:	f7fe ffea 	bl	80010a8 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e0fc      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020e2:	4b53      	ldr	r3, [pc, #332]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0ef      	beq.n	80020d0 <HAL_RCC_OscConfig+0x418>
 80020f0:	e01b      	b.n	800212a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020f2:	4b4f      	ldr	r3, [pc, #316]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020f8:	4a4d      	ldr	r2, [pc, #308]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020fa:	f023 0301 	bic.w	r3, r3, #1
 80020fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002102:	f7fe ffd1 	bl	80010a8 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800210a:	f7fe ffcd 	bl	80010a8 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e0df      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800211c:	4b44      	ldr	r3, [pc, #272]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800211e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1ef      	bne.n	800210a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 80d3 	beq.w	80022da <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002134:	4b3e      	ldr	r3, [pc, #248]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 030c 	and.w	r3, r3, #12
 800213c:	2b0c      	cmp	r3, #12
 800213e:	f000 808d 	beq.w	800225c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d15a      	bne.n	8002200 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214a:	4b39      	ldr	r3, [pc, #228]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a38      	ldr	r2, [pc, #224]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002150:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002154:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002156:	f7fe ffa7 	bl	80010a8 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215e:	f7fe ffa3 	bl	80010a8 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e0b5      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002170:	4b2f      	ldr	r3, [pc, #188]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1f0      	bne.n	800215e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800217c:	4b2c      	ldr	r3, [pc, #176]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	4b2d      	ldr	r3, [pc, #180]	; (8002238 <HAL_RCC_OscConfig+0x580>)
 8002182:	4013      	ands	r3, r2
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6a11      	ldr	r1, [r2, #32]
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800218c:	3a01      	subs	r2, #1
 800218e:	0112      	lsls	r2, r2, #4
 8002190:	4311      	orrs	r1, r2
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002196:	0212      	lsls	r2, r2, #8
 8002198:	4311      	orrs	r1, r2
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800219e:	0852      	lsrs	r2, r2, #1
 80021a0:	3a01      	subs	r2, #1
 80021a2:	0552      	lsls	r2, r2, #21
 80021a4:	4311      	orrs	r1, r2
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021aa:	0852      	lsrs	r2, r2, #1
 80021ac:	3a01      	subs	r2, #1
 80021ae:	0652      	lsls	r2, r2, #25
 80021b0:	4311      	orrs	r1, r2
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80021b6:	06d2      	lsls	r2, r2, #27
 80021b8:	430a      	orrs	r2, r1
 80021ba:	491d      	ldr	r1, [pc, #116]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021c0:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a1a      	ldr	r2, [pc, #104]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021cc:	4b18      	ldr	r3, [pc, #96]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4a17      	ldr	r2, [pc, #92]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7fe ff66 	bl	80010a8 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e0:	f7fe ff62 	bl	80010a8 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e074      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f2:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCC_OscConfig+0x528>
 80021fe:	e06c      	b.n	80022da <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002206:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800220a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800220c:	4b08      	ldr	r3, [pc, #32]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	4a07      	ldr	r2, [pc, #28]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002212:	f023 0303 	bic.w	r3, r3, #3
 8002216:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	4a04      	ldr	r2, [pc, #16]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800221e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002226:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7fe ff3e 	bl	80010a8 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800222e:	e00e      	b.n	800224e <HAL_RCC_OscConfig+0x596>
 8002230:	40021000 	.word	0x40021000
 8002234:	40007000 	.word	0x40007000
 8002238:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223c:	f7fe ff34 	bl	80010a8 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e046      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800224e:	4b25      	ldr	r3, [pc, #148]	; (80022e4 <HAL_RCC_OscConfig+0x62c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x584>
 800225a:	e03e      	b.n	80022da <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e039      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002268:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <HAL_RCC_OscConfig+0x62c>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f003 0203 	and.w	r2, r3, #3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	429a      	cmp	r2, r3
 800227a:	d12c      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	3b01      	subs	r3, #1
 8002288:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228a:	429a      	cmp	r2, r3
 800228c:	d123      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002298:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800229a:	429a      	cmp	r2, r3
 800229c:	d11b      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d113      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b8:	085b      	lsrs	r3, r3, #1
 80022ba:	3b01      	subs	r3, #1
 80022bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022be:	429a      	cmp	r2, r3
 80022c0:	d109      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022cc:	085b      	lsrs	r3, r3, #1
 80022ce:	3b01      	subs	r3, #1
 80022d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d001      	beq.n	80022da <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3720      	adds	r7, #32
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40021000 	.word	0x40021000

080022e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e11e      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002300:	4b91      	ldr	r3, [pc, #580]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d910      	bls.n	8002330 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b8e      	ldr	r3, [pc, #568]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 020f 	bic.w	r2, r3, #15
 8002316:	498c      	ldr	r1, [pc, #560]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	4313      	orrs	r3, r2
 800231c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	4b8a      	ldr	r3, [pc, #552]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e106      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	d073      	beq.n	8002424 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b03      	cmp	r3, #3
 8002342:	d129      	bne.n	8002398 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002344:	4b81      	ldr	r3, [pc, #516]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0f4      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002354:	f000 f99e 	bl	8002694 <RCC_GetSysClockFreqFromPLLSource>
 8002358:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4a7c      	ldr	r2, [pc, #496]	; (8002550 <HAL_RCC_ClockConfig+0x268>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d93f      	bls.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002362:	4b7a      	ldr	r3, [pc, #488]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d009      	beq.n	8002382 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002376:	2b00      	cmp	r3, #0
 8002378:	d033      	beq.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800237e:	2b00      	cmp	r3, #0
 8002380:	d12f      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002382:	4b72      	ldr	r3, [pc, #456]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800238a:	4a70      	ldr	r2, [pc, #448]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800238c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002390:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	e024      	b.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b02      	cmp	r3, #2
 800239e:	d107      	bne.n	80023b0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023a0:	4b6a      	ldr	r3, [pc, #424]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d109      	bne.n	80023c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0c6      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b0:	4b66      	ldr	r3, [pc, #408]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0be      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80023c0:	f000 f8ce 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 80023c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4a61      	ldr	r2, [pc, #388]	; (8002550 <HAL_RCC_ClockConfig+0x268>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d909      	bls.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023ce:	4b5f      	ldr	r3, [pc, #380]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023d6:	4a5d      	ldr	r2, [pc, #372]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023dc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023e2:	4b5a      	ldr	r3, [pc, #360]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f023 0203 	bic.w	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	4957      	ldr	r1, [pc, #348]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023f4:	f7fe fe58 	bl	80010a8 <HAL_GetTick>
 80023f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fa:	e00a      	b.n	8002412 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023fc:	f7fe fe54 	bl	80010a8 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	f241 3288 	movw	r2, #5000	; 0x1388
 800240a:	4293      	cmp	r3, r2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e095      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002412:	4b4e      	ldr	r3, [pc, #312]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 020c 	and.w	r2, r3, #12
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	429a      	cmp	r2, r3
 8002422:	d1eb      	bne.n	80023fc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d023      	beq.n	8002478 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800243c:	4b43      	ldr	r3, [pc, #268]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	4a42      	ldr	r2, [pc, #264]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002442:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002446:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0308 	and.w	r3, r3, #8
 8002450:	2b00      	cmp	r3, #0
 8002452:	d007      	beq.n	8002464 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002454:	4b3d      	ldr	r3, [pc, #244]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800245c:	4a3b      	ldr	r2, [pc, #236]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800245e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002462:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002464:	4b39      	ldr	r3, [pc, #228]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	4936      	ldr	r1, [pc, #216]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002472:	4313      	orrs	r3, r2
 8002474:	608b      	str	r3, [r1, #8]
 8002476:	e008      	b.n	800248a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2b80      	cmp	r3, #128	; 0x80
 800247c:	d105      	bne.n	800248a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800247e:	4b33      	ldr	r3, [pc, #204]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	4a32      	ldr	r2, [pc, #200]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002484:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002488:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800248a:	4b2f      	ldr	r3, [pc, #188]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d21d      	bcs.n	80024d4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002498:	4b2b      	ldr	r3, [pc, #172]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f023 020f 	bic.w	r2, r3, #15
 80024a0:	4929      	ldr	r1, [pc, #164]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024a8:	f7fe fdfe 	bl	80010a8 <HAL_GetTick>
 80024ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ae:	e00a      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b0:	f7fe fdfa 	bl	80010a8 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e03b      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b20      	ldr	r3, [pc, #128]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d1ed      	bne.n	80024b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e0:	4b1a      	ldr	r3, [pc, #104]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4917      	ldr	r1, [pc, #92]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d009      	beq.n	8002512 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024fe:	4b13      	ldr	r3, [pc, #76]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	490f      	ldr	r1, [pc, #60]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800250e:	4313      	orrs	r3, r2
 8002510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002512:	f000 f825 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 8002516:	4602      	mov	r2, r0
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	490c      	ldr	r1, [pc, #48]	; (8002554 <HAL_RCC_ClockConfig+0x26c>)
 8002524:	5ccb      	ldrb	r3, [r1, r3]
 8002526:	f003 031f 	and.w	r3, r3, #31
 800252a:	fa22 f303 	lsr.w	r3, r2, r3
 800252e:	4a0a      	ldr	r2, [pc, #40]	; (8002558 <HAL_RCC_ClockConfig+0x270>)
 8002530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <HAL_RCC_ClockConfig+0x274>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe fd6a 	bl	8001010 <HAL_InitTick>
 800253c:	4603      	mov	r3, r0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40022000 	.word	0x40022000
 800254c:	40021000 	.word	0x40021000
 8002550:	04c4b400 	.word	0x04c4b400
 8002554:	08028268 	.word	0x08028268
 8002558:	20000004 	.word	0x20000004
 800255c:	20000008 	.word	0x20000008

08002560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002560:	b480      	push	{r7}
 8002562:	b087      	sub	sp, #28
 8002564:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002566:	4b2c      	ldr	r3, [pc, #176]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	2b04      	cmp	r3, #4
 8002570:	d102      	bne.n	8002578 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002572:	4b2a      	ldr	r3, [pc, #168]	; (800261c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	e047      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002578:	4b27      	ldr	r3, [pc, #156]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	2b08      	cmp	r3, #8
 8002582:	d102      	bne.n	800258a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002584:	4b26      	ldr	r3, [pc, #152]	; (8002620 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	e03e      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800258a:	4b23      	ldr	r3, [pc, #140]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	2b0c      	cmp	r3, #12
 8002594:	d136      	bne.n	8002604 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002596:	4b20      	ldr	r3, [pc, #128]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025a0:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	3301      	adds	r3, #1
 80025ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d10c      	bne.n	80025ce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025b4:	4a1a      	ldr	r2, [pc, #104]	; (8002620 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025bc:	4a16      	ldr	r2, [pc, #88]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025be:	68d2      	ldr	r2, [r2, #12]
 80025c0:	0a12      	lsrs	r2, r2, #8
 80025c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025c6:	fb02 f303 	mul.w	r3, r2, r3
 80025ca:	617b      	str	r3, [r7, #20]
      break;
 80025cc:	e00c      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025ce:	4a13      	ldr	r2, [pc, #76]	; (800261c <HAL_RCC_GetSysClockFreq+0xbc>)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d6:	4a10      	ldr	r2, [pc, #64]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025d8:	68d2      	ldr	r2, [r2, #12]
 80025da:	0a12      	lsrs	r2, r2, #8
 80025dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025e0:	fb02 f303 	mul.w	r3, r2, r3
 80025e4:	617b      	str	r3, [r7, #20]
      break;
 80025e6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	0e5b      	lsrs	r3, r3, #25
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	3301      	adds	r3, #1
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	e001      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002608:	693b      	ldr	r3, [r7, #16]
}
 800260a:	4618      	mov	r0, r3
 800260c:	371c      	adds	r7, #28
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
 800261c:	00f42400 	.word	0x00f42400
 8002620:	016e3600 	.word	0x016e3600

08002624 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002628:	4b03      	ldr	r3, [pc, #12]	; (8002638 <HAL_RCC_GetHCLKFreq+0x14>)
 800262a:	681b      	ldr	r3, [r3, #0]
}
 800262c:	4618      	mov	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	20000004 	.word	0x20000004

0800263c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002640:	f7ff fff0 	bl	8002624 <HAL_RCC_GetHCLKFreq>
 8002644:	4602      	mov	r2, r0
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	0a1b      	lsrs	r3, r3, #8
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	4904      	ldr	r1, [pc, #16]	; (8002664 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002652:	5ccb      	ldrb	r3, [r1, r3]
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800265c:	4618      	mov	r0, r3
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40021000 	.word	0x40021000
 8002664:	08028278 	.word	0x08028278

08002668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800266c:	f7ff ffda 	bl	8002624 <HAL_RCC_GetHCLKFreq>
 8002670:	4602      	mov	r2, r0
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	0adb      	lsrs	r3, r3, #11
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	4904      	ldr	r1, [pc, #16]	; (8002690 <HAL_RCC_GetPCLK2Freq+0x28>)
 800267e:	5ccb      	ldrb	r3, [r1, r3]
 8002680:	f003 031f 	and.w	r3, r3, #31
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002688:	4618      	mov	r0, r3
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40021000 	.word	0x40021000
 8002690:	08028278 	.word	0x08028278

08002694 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002694:	b480      	push	{r7}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800269a:	4b1e      	ldr	r3, [pc, #120]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026a4:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	3301      	adds	r3, #1
 80026b0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d10c      	bne.n	80026d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026b8:	4a17      	ldr	r2, [pc, #92]	; (8002718 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c0:	4a14      	ldr	r2, [pc, #80]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026c2:	68d2      	ldr	r2, [r2, #12]
 80026c4:	0a12      	lsrs	r2, r2, #8
 80026c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026ca:	fb02 f303 	mul.w	r3, r2, r3
 80026ce:	617b      	str	r3, [r7, #20]
    break;
 80026d0:	e00c      	b.n	80026ec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026d2:	4a12      	ldr	r2, [pc, #72]	; (800271c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026da:	4a0e      	ldr	r2, [pc, #56]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026dc:	68d2      	ldr	r2, [r2, #12]
 80026de:	0a12      	lsrs	r2, r2, #8
 80026e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026e4:	fb02 f303 	mul.w	r3, r2, r3
 80026e8:	617b      	str	r3, [r7, #20]
    break;
 80026ea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026ec:	4b09      	ldr	r3, [pc, #36]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	0e5b      	lsrs	r3, r3, #25
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	3301      	adds	r3, #1
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	fbb2 f3f3 	udiv	r3, r2, r3
 8002704:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002706:	687b      	ldr	r3, [r7, #4]
}
 8002708:	4618      	mov	r0, r3
 800270a:	371c      	adds	r7, #28
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	40021000 	.word	0x40021000
 8002718:	016e3600 	.word	0x016e3600
 800271c:	00f42400 	.word	0x00f42400

08002720 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002728:	2300      	movs	r3, #0
 800272a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800272c:	2300      	movs	r3, #0
 800272e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 8098 	beq.w	800286e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273e:	2300      	movs	r3, #0
 8002740:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002742:	4b43      	ldr	r3, [pc, #268]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10d      	bne.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800274e:	4b40      	ldr	r3, [pc, #256]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002752:	4a3f      	ldr	r2, [pc, #252]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002758:	6593      	str	r3, [r2, #88]	; 0x58
 800275a:	4b3d      	ldr	r3, [pc, #244]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800275c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002766:	2301      	movs	r3, #1
 8002768:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800276a:	4b3a      	ldr	r3, [pc, #232]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a39      	ldr	r2, [pc, #228]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002774:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002776:	f7fe fc97 	bl	80010a8 <HAL_GetTick>
 800277a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800277c:	e009      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277e:	f7fe fc93 	bl	80010a8 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d902      	bls.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	74fb      	strb	r3, [r7, #19]
        break;
 8002790:	e005      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002792:	4b30      	ldr	r3, [pc, #192]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0ef      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800279e:	7cfb      	ldrb	r3, [r7, #19]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d159      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027a4:	4b2a      	ldr	r3, [pc, #168]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d01e      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d019      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027c0:	4b23      	ldr	r3, [pc, #140]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027cc:	4b20      	ldr	r3, [pc, #128]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d2:	4a1f      	ldr	r2, [pc, #124]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027dc:	4b1c      	ldr	r3, [pc, #112]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e2:	4a1b      	ldr	r2, [pc, #108]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027ec:	4a18      	ldr	r2, [pc, #96]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d016      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fe:	f7fe fc53 	bl	80010a8 <HAL_GetTick>
 8002802:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002804:	e00b      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002806:	f7fe fc4f 	bl	80010a8 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	f241 3288 	movw	r2, #5000	; 0x1388
 8002814:	4293      	cmp	r3, r2
 8002816:	d902      	bls.n	800281e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	74fb      	strb	r3, [r7, #19]
            break;
 800281c:	e006      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800281e:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0ec      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10b      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002832:	4b07      	ldr	r3, [pc, #28]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002838:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002840:	4903      	ldr	r1, [pc, #12]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002848:	e008      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800284a:	7cfb      	ldrb	r3, [r7, #19]
 800284c:	74bb      	strb	r3, [r7, #18]
 800284e:	e005      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002850:	40021000 	.word	0x40021000
 8002854:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002858:	7cfb      	ldrb	r3, [r7, #19]
 800285a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800285c:	7c7b      	ldrb	r3, [r7, #17]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d105      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002862:	4baf      	ldr	r3, [pc, #700]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002866:	4aae      	ldr	r2, [pc, #696]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800286c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00a      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800287a:	4ba9      	ldr	r3, [pc, #676]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800287c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002880:	f023 0203 	bic.w	r2, r3, #3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	49a5      	ldr	r1, [pc, #660]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00a      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800289c:	4ba0      	ldr	r3, [pc, #640]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800289e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a2:	f023 020c 	bic.w	r2, r3, #12
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	499d      	ldr	r1, [pc, #628]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028be:	4b98      	ldr	r3, [pc, #608]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4994      	ldr	r1, [pc, #592]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00a      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028e0:	4b8f      	ldr	r3, [pc, #572]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	498c      	ldr	r1, [pc, #560]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002902:	4b87      	ldr	r3, [pc, #540]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002908:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	4983      	ldr	r1, [pc, #524]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0320 	and.w	r3, r3, #32
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002924:	4b7e      	ldr	r3, [pc, #504]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	497b      	ldr	r1, [pc, #492]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002946:	4b76      	ldr	r3, [pc, #472]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	4972      	ldr	r1, [pc, #456]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00a      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002968:	4b6d      	ldr	r3, [pc, #436]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	496a      	ldr	r1, [pc, #424]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800298a:	4b65      	ldr	r3, [pc, #404]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800298c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002990:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	4961      	ldr	r1, [pc, #388]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029ac:	4b5c      	ldr	r3, [pc, #368]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029b2:	f023 0203 	bic.w	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ba:	4959      	ldr	r1, [pc, #356]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029ce:	4b54      	ldr	r3, [pc, #336]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	4950      	ldr	r1, [pc, #320]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d015      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029f0:	4b4b      	ldr	r3, [pc, #300]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	4948      	ldr	r1, [pc, #288]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a0e:	d105      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a10:	4b43      	ldr	r3, [pc, #268]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4a42      	ldr	r2, [pc, #264]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a1a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d015      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a28:	4b3d      	ldr	r3, [pc, #244]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a36:	493a      	ldr	r1, [pc, #232]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a46:	d105      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a48:	4b35      	ldr	r3, [pc, #212]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4a34      	ldr	r2, [pc, #208]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a52:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d015      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a60:	4b2f      	ldr	r3, [pc, #188]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a66:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6e:	492c      	ldr	r1, [pc, #176]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a7e:	d105      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a80:	4b27      	ldr	r3, [pc, #156]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4a26      	ldr	r2, [pc, #152]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a8a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d015      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a98:	4b21      	ldr	r3, [pc, #132]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa6:	491e      	ldr	r1, [pc, #120]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ab6:	d105      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ab8:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4a18      	ldr	r2, [pc, #96]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002abe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ac2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d015      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ad0:	4b13      	ldr	r3, [pc, #76]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	4910      	ldr	r1, [pc, #64]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aee:	d105      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4a0a      	ldr	r2, [pc, #40]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002af6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002afa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d018      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b08:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b16:	4902      	ldr	r1, [pc, #8]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b1e:	e001      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002b20:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b2c:	d105      	bne.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b2e:	4b21      	ldr	r3, [pc, #132]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	4a20      	ldr	r2, [pc, #128]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b38:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d015      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002b46:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b54:	4917      	ldr	r1, [pc, #92]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b64:	d105      	bne.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b66:	4b13      	ldr	r3, [pc, #76]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	4a12      	ldr	r2, [pc, #72]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b70:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d015      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8c:	4909      	ldr	r1, [pc, #36]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b9c:	d105      	bne.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	4a04      	ldr	r2, [pc, #16]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002ba4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ba8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002baa:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021000 	.word	0x40021000

08002bb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e042      	b.n	8002c50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d106      	bne.n	8002be2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7fd ffd9 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2224      	movs	r2, #36	; 0x24
 8002be6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0201 	bic.w	r2, r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fa80 	bl	8003100 <UART_SetConfig>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d101      	bne.n	8002c0a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e022      	b.n	8002c50 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fd3e 	bl	8003694 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 fdc5 	bl	80037d8 <UART_CheckIdleState>
 8002c4e:	4603      	mov	r3, r0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c78:	69fa      	ldr	r2, [r7, #28]
 8002c7a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002c7e:	4013      	ands	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d118      	bne.n	8002cba <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d013      	beq.n	8002cba <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	f003 0320 	and.w	r3, r3, #32
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d104      	bne.n	8002ca6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d009      	beq.n	8002cba <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 81fb 	beq.w	80030a6 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	4798      	blx	r3
      }
      return;
 8002cb8:	e1f5      	b.n	80030a6 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 80ef 	beq.w	8002ea0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4b73      	ldr	r3, [pc, #460]	; (8002e94 <HAL_UART_IRQHandler+0x23c>)
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d105      	bne.n	8002cd8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4b72      	ldr	r3, [pc, #456]	; (8002e98 <HAL_UART_IRQHandler+0x240>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 80e4 	beq.w	8002ea0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d010      	beq.n	8002d04 <HAL_UART_IRQHandler+0xac>
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00b      	beq.n	8002d04 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cfa:	f043 0201 	orr.w	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d010      	beq.n	8002d30 <HAL_UART_IRQHandler+0xd8>
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00b      	beq.n	8002d30 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d26:	f043 0204 	orr.w	r2, r3, #4
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d010      	beq.n	8002d5c <HAL_UART_IRQHandler+0x104>
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00b      	beq.n	8002d5c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2204      	movs	r2, #4
 8002d4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d52:	f043 0202 	orr.w	r2, r3, #2
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d015      	beq.n	8002d92 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	f003 0320 	and.w	r3, r3, #32
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d104      	bne.n	8002d7a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	4b48      	ldr	r3, [pc, #288]	; (8002e94 <HAL_UART_IRQHandler+0x23c>)
 8002d74:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00b      	beq.n	8002d92 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2208      	movs	r2, #8
 8002d80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d88:	f043 0208 	orr.w	r2, r3, #8
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d011      	beq.n	8002dc0 <HAL_UART_IRQHandler+0x168>
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00c      	beq.n	8002dc0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002db6:	f043 0220 	orr.w	r2, r3, #32
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 816f 	beq.w	80030aa <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d011      	beq.n	8002dfa <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	f003 0320 	and.w	r3, r3, #32
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d104      	bne.n	8002dea <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d007      	beq.n	8002dfa <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e00:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0c:	2b40      	cmp	r3, #64	; 0x40
 8002e0e:	d004      	beq.n	8002e1a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d031      	beq.n	8002e7e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 fda7 	bl	800396e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2a:	2b40      	cmp	r3, #64	; 0x40
 8002e2c:	d123      	bne.n	8002e76 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e3c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d013      	beq.n	8002e6e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e4a:	4a14      	ldr	r2, [pc, #80]	; (8002e9c <HAL_UART_IRQHandler+0x244>)
 8002e4c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe fb45 	bl	80014e2 <HAL_DMA_Abort_IT>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d017      	beq.n	8002e8e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002e68:	4610      	mov	r0, r2
 8002e6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e6c:	e00f      	b.n	8002e8e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f930 	bl	80030d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e74:	e00b      	b.n	8002e8e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f92c 	bl	80030d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e7c:	e007      	b.n	8002e8e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f928 	bl	80030d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002e8c:	e10d      	b.n	80030aa <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e8e:	bf00      	nop
    return;
 8002e90:	e10b      	b.n	80030aa <HAL_UART_IRQHandler+0x452>
 8002e92:	bf00      	nop
 8002e94:	10000001 	.word	0x10000001
 8002e98:	04000120 	.word	0x04000120
 8002e9c:	080039d3 	.word	0x080039d3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	f040 80ab 	bne.w	8003000 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80a5 	beq.w	8003000 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	f003 0310 	and.w	r3, r3, #16
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 809f 	beq.w	8003000 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2210      	movs	r2, #16
 8002ec8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed4:	2b40      	cmp	r3, #64	; 0x40
 8002ed6:	d155      	bne.n	8002f84 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002ee2:	893b      	ldrh	r3, [r7, #8]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 80e2 	beq.w	80030ae <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002ef0:	893a      	ldrh	r2, [r7, #8]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	f080 80db 	bcs.w	80030ae <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	893a      	ldrh	r2, [r7, #8]
 8002efc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0320 	and.w	r3, r3, #32
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d12b      	bne.n	8002f68 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f1e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0201 	bic.w	r2, r2, #1
 8002f2e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f3e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0210 	bic.w	r2, r2, #16
 8002f5c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fe fa64 	bl	8001430 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f8b3 	bl	80030e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f82:	e094      	b.n	80030ae <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 8087 	beq.w	80030b2 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8002fa4:	897b      	ldrh	r3, [r7, #10]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 8083 	beq.w	80030b2 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002fba:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fca:	f023 0301 	bic.w	r3, r3, #1
 8002fce:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0210 	bic.w	r2, r2, #16
 8002ff2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ff4:	897b      	ldrh	r3, [r7, #10]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f875 	bl	80030e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ffe:	e058      	b.n	80030b2 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00d      	beq.n	8003026 <HAL_UART_IRQHandler+0x3ce>
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800301c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fd07 	bl	8003a32 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003024:	e048      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302c:	2b00      	cmp	r3, #0
 800302e:	d012      	beq.n	8003056 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003036:	2b00      	cmp	r3, #0
 8003038:	d104      	bne.n	8003044 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d008      	beq.n	8003056 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003048:	2b00      	cmp	r3, #0
 800304a:	d034      	beq.n	80030b6 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	4798      	blx	r3
    }
    return;
 8003054:	e02f      	b.n	80030b6 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <HAL_UART_IRQHandler+0x41a>
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fcc7 	bl	80039fe <UART_EndTransmit_IT>
    return;
 8003070:	e022      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <HAL_UART_IRQHandler+0x436>
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fce7 	bl	8003a5a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800308c:	e014      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00f      	beq.n	80030b8 <HAL_UART_IRQHandler+0x460>
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	2b00      	cmp	r3, #0
 800309c:	da0c      	bge.n	80030b8 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fcd1 	bl	8003a46 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030a4:	e008      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
      return;
 80030a6:	bf00      	nop
 80030a8:	e006      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
    return;
 80030aa:	bf00      	nop
 80030ac:	e004      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
      return;
 80030ae:	bf00      	nop
 80030b0:	e002      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
      return;
 80030b2:	bf00      	nop
 80030b4:	e000      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
    return;
 80030b6:	bf00      	nop
  }
}
 80030b8:	3720      	adds	r7, #32
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop

080030c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003100:	b5b0      	push	{r4, r5, r7, lr}
 8003102:	b088      	sub	sp, #32
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	4313      	orrs	r3, r2
 8003122:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	4bb1      	ldr	r3, [pc, #708]	; (80033f0 <UART_SetConfig+0x2f0>)
 800312c:	4013      	ands	r3, r2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6812      	ldr	r2, [r2, #0]
 8003132:	69f9      	ldr	r1, [r7, #28]
 8003134:	430b      	orrs	r3, r1
 8003136:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4aa6      	ldr	r2, [pc, #664]	; (80033f4 <UART_SetConfig+0x2f4>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d004      	beq.n	8003168 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	69fa      	ldr	r2, [r7, #28]
 8003164:	4313      	orrs	r3, r2
 8003166:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003172:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6812      	ldr	r2, [r2, #0]
 800317a:	69f9      	ldr	r1, [r7, #28]
 800317c:	430b      	orrs	r3, r1
 800317e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	f023 010f 	bic.w	r1, r3, #15
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a97      	ldr	r2, [pc, #604]	; (80033f8 <UART_SetConfig+0x2f8>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d120      	bne.n	80031e2 <UART_SetConfig+0xe2>
 80031a0:	4b96      	ldr	r3, [pc, #600]	; (80033fc <UART_SetConfig+0x2fc>)
 80031a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d816      	bhi.n	80031dc <UART_SetConfig+0xdc>
 80031ae:	a201      	add	r2, pc, #4	; (adr r2, 80031b4 <UART_SetConfig+0xb4>)
 80031b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b4:	080031c5 	.word	0x080031c5
 80031b8:	080031d1 	.word	0x080031d1
 80031bc:	080031cb 	.word	0x080031cb
 80031c0:	080031d7 	.word	0x080031d7
 80031c4:	2301      	movs	r3, #1
 80031c6:	76fb      	strb	r3, [r7, #27]
 80031c8:	e0e7      	b.n	800339a <UART_SetConfig+0x29a>
 80031ca:	2302      	movs	r3, #2
 80031cc:	76fb      	strb	r3, [r7, #27]
 80031ce:	e0e4      	b.n	800339a <UART_SetConfig+0x29a>
 80031d0:	2304      	movs	r3, #4
 80031d2:	76fb      	strb	r3, [r7, #27]
 80031d4:	e0e1      	b.n	800339a <UART_SetConfig+0x29a>
 80031d6:	2308      	movs	r3, #8
 80031d8:	76fb      	strb	r3, [r7, #27]
 80031da:	e0de      	b.n	800339a <UART_SetConfig+0x29a>
 80031dc:	2310      	movs	r3, #16
 80031de:	76fb      	strb	r3, [r7, #27]
 80031e0:	e0db      	b.n	800339a <UART_SetConfig+0x29a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a86      	ldr	r2, [pc, #536]	; (8003400 <UART_SetConfig+0x300>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d132      	bne.n	8003252 <UART_SetConfig+0x152>
 80031ec:	4b83      	ldr	r3, [pc, #524]	; (80033fc <UART_SetConfig+0x2fc>)
 80031ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	2b0c      	cmp	r3, #12
 80031f8:	d828      	bhi.n	800324c <UART_SetConfig+0x14c>
 80031fa:	a201      	add	r2, pc, #4	; (adr r2, 8003200 <UART_SetConfig+0x100>)
 80031fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003200:	08003235 	.word	0x08003235
 8003204:	0800324d 	.word	0x0800324d
 8003208:	0800324d 	.word	0x0800324d
 800320c:	0800324d 	.word	0x0800324d
 8003210:	08003241 	.word	0x08003241
 8003214:	0800324d 	.word	0x0800324d
 8003218:	0800324d 	.word	0x0800324d
 800321c:	0800324d 	.word	0x0800324d
 8003220:	0800323b 	.word	0x0800323b
 8003224:	0800324d 	.word	0x0800324d
 8003228:	0800324d 	.word	0x0800324d
 800322c:	0800324d 	.word	0x0800324d
 8003230:	08003247 	.word	0x08003247
 8003234:	2300      	movs	r3, #0
 8003236:	76fb      	strb	r3, [r7, #27]
 8003238:	e0af      	b.n	800339a <UART_SetConfig+0x29a>
 800323a:	2302      	movs	r3, #2
 800323c:	76fb      	strb	r3, [r7, #27]
 800323e:	e0ac      	b.n	800339a <UART_SetConfig+0x29a>
 8003240:	2304      	movs	r3, #4
 8003242:	76fb      	strb	r3, [r7, #27]
 8003244:	e0a9      	b.n	800339a <UART_SetConfig+0x29a>
 8003246:	2308      	movs	r3, #8
 8003248:	76fb      	strb	r3, [r7, #27]
 800324a:	e0a6      	b.n	800339a <UART_SetConfig+0x29a>
 800324c:	2310      	movs	r3, #16
 800324e:	76fb      	strb	r3, [r7, #27]
 8003250:	e0a3      	b.n	800339a <UART_SetConfig+0x29a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a6b      	ldr	r2, [pc, #428]	; (8003404 <UART_SetConfig+0x304>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d120      	bne.n	800329e <UART_SetConfig+0x19e>
 800325c:	4b67      	ldr	r3, [pc, #412]	; (80033fc <UART_SetConfig+0x2fc>)
 800325e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003262:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003266:	2b30      	cmp	r3, #48	; 0x30
 8003268:	d013      	beq.n	8003292 <UART_SetConfig+0x192>
 800326a:	2b30      	cmp	r3, #48	; 0x30
 800326c:	d814      	bhi.n	8003298 <UART_SetConfig+0x198>
 800326e:	2b20      	cmp	r3, #32
 8003270:	d009      	beq.n	8003286 <UART_SetConfig+0x186>
 8003272:	2b20      	cmp	r3, #32
 8003274:	d810      	bhi.n	8003298 <UART_SetConfig+0x198>
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <UART_SetConfig+0x180>
 800327a:	2b10      	cmp	r3, #16
 800327c:	d006      	beq.n	800328c <UART_SetConfig+0x18c>
 800327e:	e00b      	b.n	8003298 <UART_SetConfig+0x198>
 8003280:	2300      	movs	r3, #0
 8003282:	76fb      	strb	r3, [r7, #27]
 8003284:	e089      	b.n	800339a <UART_SetConfig+0x29a>
 8003286:	2302      	movs	r3, #2
 8003288:	76fb      	strb	r3, [r7, #27]
 800328a:	e086      	b.n	800339a <UART_SetConfig+0x29a>
 800328c:	2304      	movs	r3, #4
 800328e:	76fb      	strb	r3, [r7, #27]
 8003290:	e083      	b.n	800339a <UART_SetConfig+0x29a>
 8003292:	2308      	movs	r3, #8
 8003294:	76fb      	strb	r3, [r7, #27]
 8003296:	e080      	b.n	800339a <UART_SetConfig+0x29a>
 8003298:	2310      	movs	r3, #16
 800329a:	76fb      	strb	r3, [r7, #27]
 800329c:	e07d      	b.n	800339a <UART_SetConfig+0x29a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a59      	ldr	r2, [pc, #356]	; (8003408 <UART_SetConfig+0x308>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d120      	bne.n	80032ea <UART_SetConfig+0x1ea>
 80032a8:	4b54      	ldr	r3, [pc, #336]	; (80033fc <UART_SetConfig+0x2fc>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80032b2:	2bc0      	cmp	r3, #192	; 0xc0
 80032b4:	d013      	beq.n	80032de <UART_SetConfig+0x1de>
 80032b6:	2bc0      	cmp	r3, #192	; 0xc0
 80032b8:	d814      	bhi.n	80032e4 <UART_SetConfig+0x1e4>
 80032ba:	2b80      	cmp	r3, #128	; 0x80
 80032bc:	d009      	beq.n	80032d2 <UART_SetConfig+0x1d2>
 80032be:	2b80      	cmp	r3, #128	; 0x80
 80032c0:	d810      	bhi.n	80032e4 <UART_SetConfig+0x1e4>
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <UART_SetConfig+0x1cc>
 80032c6:	2b40      	cmp	r3, #64	; 0x40
 80032c8:	d006      	beq.n	80032d8 <UART_SetConfig+0x1d8>
 80032ca:	e00b      	b.n	80032e4 <UART_SetConfig+0x1e4>
 80032cc:	2300      	movs	r3, #0
 80032ce:	76fb      	strb	r3, [r7, #27]
 80032d0:	e063      	b.n	800339a <UART_SetConfig+0x29a>
 80032d2:	2302      	movs	r3, #2
 80032d4:	76fb      	strb	r3, [r7, #27]
 80032d6:	e060      	b.n	800339a <UART_SetConfig+0x29a>
 80032d8:	2304      	movs	r3, #4
 80032da:	76fb      	strb	r3, [r7, #27]
 80032dc:	e05d      	b.n	800339a <UART_SetConfig+0x29a>
 80032de:	2308      	movs	r3, #8
 80032e0:	76fb      	strb	r3, [r7, #27]
 80032e2:	e05a      	b.n	800339a <UART_SetConfig+0x29a>
 80032e4:	2310      	movs	r3, #16
 80032e6:	76fb      	strb	r3, [r7, #27]
 80032e8:	e057      	b.n	800339a <UART_SetConfig+0x29a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a47      	ldr	r2, [pc, #284]	; (800340c <UART_SetConfig+0x30c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d125      	bne.n	8003340 <UART_SetConfig+0x240>
 80032f4:	4b41      	ldr	r3, [pc, #260]	; (80033fc <UART_SetConfig+0x2fc>)
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003302:	d017      	beq.n	8003334 <UART_SetConfig+0x234>
 8003304:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003308:	d817      	bhi.n	800333a <UART_SetConfig+0x23a>
 800330a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800330e:	d00b      	beq.n	8003328 <UART_SetConfig+0x228>
 8003310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003314:	d811      	bhi.n	800333a <UART_SetConfig+0x23a>
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <UART_SetConfig+0x222>
 800331a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800331e:	d006      	beq.n	800332e <UART_SetConfig+0x22e>
 8003320:	e00b      	b.n	800333a <UART_SetConfig+0x23a>
 8003322:	2300      	movs	r3, #0
 8003324:	76fb      	strb	r3, [r7, #27]
 8003326:	e038      	b.n	800339a <UART_SetConfig+0x29a>
 8003328:	2302      	movs	r3, #2
 800332a:	76fb      	strb	r3, [r7, #27]
 800332c:	e035      	b.n	800339a <UART_SetConfig+0x29a>
 800332e:	2304      	movs	r3, #4
 8003330:	76fb      	strb	r3, [r7, #27]
 8003332:	e032      	b.n	800339a <UART_SetConfig+0x29a>
 8003334:	2308      	movs	r3, #8
 8003336:	76fb      	strb	r3, [r7, #27]
 8003338:	e02f      	b.n	800339a <UART_SetConfig+0x29a>
 800333a:	2310      	movs	r3, #16
 800333c:	76fb      	strb	r3, [r7, #27]
 800333e:	e02c      	b.n	800339a <UART_SetConfig+0x29a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a2b      	ldr	r2, [pc, #172]	; (80033f4 <UART_SetConfig+0x2f4>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d125      	bne.n	8003396 <UART_SetConfig+0x296>
 800334a:	4b2c      	ldr	r3, [pc, #176]	; (80033fc <UART_SetConfig+0x2fc>)
 800334c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003350:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003354:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003358:	d017      	beq.n	800338a <UART_SetConfig+0x28a>
 800335a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800335e:	d817      	bhi.n	8003390 <UART_SetConfig+0x290>
 8003360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003364:	d00b      	beq.n	800337e <UART_SetConfig+0x27e>
 8003366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800336a:	d811      	bhi.n	8003390 <UART_SetConfig+0x290>
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <UART_SetConfig+0x278>
 8003370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003374:	d006      	beq.n	8003384 <UART_SetConfig+0x284>
 8003376:	e00b      	b.n	8003390 <UART_SetConfig+0x290>
 8003378:	2300      	movs	r3, #0
 800337a:	76fb      	strb	r3, [r7, #27]
 800337c:	e00d      	b.n	800339a <UART_SetConfig+0x29a>
 800337e:	2302      	movs	r3, #2
 8003380:	76fb      	strb	r3, [r7, #27]
 8003382:	e00a      	b.n	800339a <UART_SetConfig+0x29a>
 8003384:	2304      	movs	r3, #4
 8003386:	76fb      	strb	r3, [r7, #27]
 8003388:	e007      	b.n	800339a <UART_SetConfig+0x29a>
 800338a:	2308      	movs	r3, #8
 800338c:	76fb      	strb	r3, [r7, #27]
 800338e:	e004      	b.n	800339a <UART_SetConfig+0x29a>
 8003390:	2310      	movs	r3, #16
 8003392:	76fb      	strb	r3, [r7, #27]
 8003394:	e001      	b.n	800339a <UART_SetConfig+0x29a>
 8003396:	2310      	movs	r3, #16
 8003398:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a15      	ldr	r2, [pc, #84]	; (80033f4 <UART_SetConfig+0x2f4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	f040 809f 	bne.w	80034e4 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033a6:	7efb      	ldrb	r3, [r7, #27]
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d837      	bhi.n	800341c <UART_SetConfig+0x31c>
 80033ac:	a201      	add	r2, pc, #4	; (adr r2, 80033b4 <UART_SetConfig+0x2b4>)
 80033ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b2:	bf00      	nop
 80033b4:	080033d9 	.word	0x080033d9
 80033b8:	0800341d 	.word	0x0800341d
 80033bc:	080033e1 	.word	0x080033e1
 80033c0:	0800341d 	.word	0x0800341d
 80033c4:	080033e7 	.word	0x080033e7
 80033c8:	0800341d 	.word	0x0800341d
 80033cc:	0800341d 	.word	0x0800341d
 80033d0:	0800341d 	.word	0x0800341d
 80033d4:	08003415 	.word	0x08003415
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033d8:	f7ff f930 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 80033dc:	6178      	str	r0, [r7, #20]
        break;
 80033de:	e022      	b.n	8003426 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <UART_SetConfig+0x310>)
 80033e2:	617b      	str	r3, [r7, #20]
        break;
 80033e4:	e01f      	b.n	8003426 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033e6:	f7ff f8bb 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 80033ea:	6178      	str	r0, [r7, #20]
        break;
 80033ec:	e01b      	b.n	8003426 <UART_SetConfig+0x326>
 80033ee:	bf00      	nop
 80033f0:	cfff69f3 	.word	0xcfff69f3
 80033f4:	40008000 	.word	0x40008000
 80033f8:	40013800 	.word	0x40013800
 80033fc:	40021000 	.word	0x40021000
 8003400:	40004400 	.word	0x40004400
 8003404:	40004800 	.word	0x40004800
 8003408:	40004c00 	.word	0x40004c00
 800340c:	40005000 	.word	0x40005000
 8003410:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003414:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003418:	617b      	str	r3, [r7, #20]
        break;
 800341a:	e004      	b.n	8003426 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	76bb      	strb	r3, [r7, #26]
        break;
 8003424:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 811b 	beq.w	8003664 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	4a96      	ldr	r2, [pc, #600]	; (800368c <UART_SetConfig+0x58c>)
 8003434:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003438:	461a      	mov	r2, r3
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003440:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	4413      	add	r3, r2
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	429a      	cmp	r2, r3
 8003450:	d305      	bcc.n	800345e <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	429a      	cmp	r2, r3
 800345c:	d902      	bls.n	8003464 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	76bb      	strb	r3, [r7, #26]
 8003462:	e0ff      	b.n	8003664 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	4618      	mov	r0, r3
 8003468:	f04f 0100 	mov.w	r1, #0
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	4a86      	ldr	r2, [pc, #536]	; (800368c <UART_SetConfig+0x58c>)
 8003472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003476:	b29a      	uxth	r2, r3
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	f7fd f9ea 	bl	8000854 <__aeabi_uldivmod>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4610      	mov	r0, r2
 8003486:	4619      	mov	r1, r3
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	020b      	lsls	r3, r1, #8
 8003492:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003496:	0202      	lsls	r2, r0, #8
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	6849      	ldr	r1, [r1, #4]
 800349c:	0849      	lsrs	r1, r1, #1
 800349e:	4608      	mov	r0, r1
 80034a0:	f04f 0100 	mov.w	r1, #0
 80034a4:	1814      	adds	r4, r2, r0
 80034a6:	eb43 0501 	adc.w	r5, r3, r1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	461a      	mov	r2, r3
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	4620      	mov	r0, r4
 80034b6:	4629      	mov	r1, r5
 80034b8:	f7fd f9cc 	bl	8000854 <__aeabi_uldivmod>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4613      	mov	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034ca:	d308      	bcc.n	80034de <UART_SetConfig+0x3de>
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034d2:	d204      	bcs.n	80034de <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	60da      	str	r2, [r3, #12]
 80034dc:	e0c2      	b.n	8003664 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	76bb      	strb	r3, [r7, #26]
 80034e2:	e0bf      	b.n	8003664 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ec:	d165      	bne.n	80035ba <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 80034ee:	7efb      	ldrb	r3, [r7, #27]
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d828      	bhi.n	8003546 <UART_SetConfig+0x446>
 80034f4:	a201      	add	r2, pc, #4	; (adr r2, 80034fc <UART_SetConfig+0x3fc>)
 80034f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fa:	bf00      	nop
 80034fc:	08003521 	.word	0x08003521
 8003500:	08003529 	.word	0x08003529
 8003504:	08003531 	.word	0x08003531
 8003508:	08003547 	.word	0x08003547
 800350c:	08003537 	.word	0x08003537
 8003510:	08003547 	.word	0x08003547
 8003514:	08003547 	.word	0x08003547
 8003518:	08003547 	.word	0x08003547
 800351c:	0800353f 	.word	0x0800353f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003520:	f7ff f88c 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 8003524:	6178      	str	r0, [r7, #20]
        break;
 8003526:	e013      	b.n	8003550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003528:	f7ff f89e 	bl	8002668 <HAL_RCC_GetPCLK2Freq>
 800352c:	6178      	str	r0, [r7, #20]
        break;
 800352e:	e00f      	b.n	8003550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003530:	4b57      	ldr	r3, [pc, #348]	; (8003690 <UART_SetConfig+0x590>)
 8003532:	617b      	str	r3, [r7, #20]
        break;
 8003534:	e00c      	b.n	8003550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003536:	f7ff f813 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 800353a:	6178      	str	r0, [r7, #20]
        break;
 800353c:	e008      	b.n	8003550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800353e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003542:	617b      	str	r3, [r7, #20]
        break;
 8003544:	e004      	b.n	8003550 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	76bb      	strb	r3, [r7, #26]
        break;
 800354e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 8086 	beq.w	8003664 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	4a4b      	ldr	r2, [pc, #300]	; (800368c <UART_SetConfig+0x58c>)
 800355e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003562:	461a      	mov	r2, r3
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	fbb3 f3f2 	udiv	r3, r3, r2
 800356a:	005a      	lsls	r2, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	085b      	lsrs	r3, r3, #1
 8003572:	441a      	add	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	fbb2 f3f3 	udiv	r3, r2, r3
 800357c:	b29b      	uxth	r3, r3
 800357e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	2b0f      	cmp	r3, #15
 8003584:	d916      	bls.n	80035b4 <UART_SetConfig+0x4b4>
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358c:	d212      	bcs.n	80035b4 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	b29b      	uxth	r3, r3
 8003592:	f023 030f 	bic.w	r3, r3, #15
 8003596:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	085b      	lsrs	r3, r3, #1
 800359c:	b29b      	uxth	r3, r3
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	89fb      	ldrh	r3, [r7, #14]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	89fa      	ldrh	r2, [r7, #14]
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	e057      	b.n	8003664 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	76bb      	strb	r3, [r7, #26]
 80035b8:	e054      	b.n	8003664 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035ba:	7efb      	ldrb	r3, [r7, #27]
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d828      	bhi.n	8003612 <UART_SetConfig+0x512>
 80035c0:	a201      	add	r2, pc, #4	; (adr r2, 80035c8 <UART_SetConfig+0x4c8>)
 80035c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c6:	bf00      	nop
 80035c8:	080035ed 	.word	0x080035ed
 80035cc:	080035f5 	.word	0x080035f5
 80035d0:	080035fd 	.word	0x080035fd
 80035d4:	08003613 	.word	0x08003613
 80035d8:	08003603 	.word	0x08003603
 80035dc:	08003613 	.word	0x08003613
 80035e0:	08003613 	.word	0x08003613
 80035e4:	08003613 	.word	0x08003613
 80035e8:	0800360b 	.word	0x0800360b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035ec:	f7ff f826 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 80035f0:	6178      	str	r0, [r7, #20]
        break;
 80035f2:	e013      	b.n	800361c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035f4:	f7ff f838 	bl	8002668 <HAL_RCC_GetPCLK2Freq>
 80035f8:	6178      	str	r0, [r7, #20]
        break;
 80035fa:	e00f      	b.n	800361c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035fc:	4b24      	ldr	r3, [pc, #144]	; (8003690 <UART_SetConfig+0x590>)
 80035fe:	617b      	str	r3, [r7, #20]
        break;
 8003600:	e00c      	b.n	800361c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003602:	f7fe ffad 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 8003606:	6178      	str	r0, [r7, #20]
        break;
 8003608:	e008      	b.n	800361c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800360a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800360e:	617b      	str	r3, [r7, #20]
        break;
 8003610:	e004      	b.n	800361c <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	76bb      	strb	r3, [r7, #26]
        break;
 800361a:	bf00      	nop
    }

    if (pclk != 0U)
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d020      	beq.n	8003664 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	4a19      	ldr	r2, [pc, #100]	; (800368c <UART_SetConfig+0x58c>)
 8003628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800362c:	461a      	mov	r2, r3
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	fbb3 f2f2 	udiv	r2, r3, r2
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	085b      	lsrs	r3, r3, #1
 800363a:	441a      	add	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	fbb2 f3f3 	udiv	r3, r2, r3
 8003644:	b29b      	uxth	r3, r3
 8003646:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	2b0f      	cmp	r3, #15
 800364c:	d908      	bls.n	8003660 <UART_SetConfig+0x560>
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003654:	d204      	bcs.n	8003660 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	60da      	str	r2, [r3, #12]
 800365e:	e001      	b.n	8003664 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003680:	7ebb      	ldrb	r3, [r7, #26]
}
 8003682:	4618      	mov	r0, r3
 8003684:	3720      	adds	r7, #32
 8003686:	46bd      	mov	sp, r7
 8003688:	bdb0      	pop	{r4, r5, r7, pc}
 800368a:	bf00      	nop
 800368c:	08028280 	.word	0x08028280
 8003690:	00f42400 	.word	0x00f42400

08003694 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003728:	f003 0310 	and.w	r3, r3, #16
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003770:	2b00      	cmp	r3, #0
 8003772:	d01a      	beq.n	80037aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003792:	d10a      	bne.n	80037aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	605a      	str	r2, [r3, #4]
  }
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af02      	add	r7, sp, #8
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037e8:	f7fd fc5e 	bl	80010a8 <HAL_GetTick>
 80037ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d10e      	bne.n	800381a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f82f 	bl	800386e <UART_WaitOnFlagUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e025      	b.n	8003866 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b04      	cmp	r3, #4
 8003826:	d10e      	bne.n	8003846 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003828:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f819 	bl	800386e <UART_WaitOnFlagUntilTimeout>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e00f      	b.n	8003866 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2220      	movs	r2, #32
 800384a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2220      	movs	r2, #32
 8003852:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b084      	sub	sp, #16
 8003872:	af00      	add	r7, sp, #0
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	60b9      	str	r1, [r7, #8]
 8003878:	603b      	str	r3, [r7, #0]
 800387a:	4613      	mov	r3, r2
 800387c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800387e:	e062      	b.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003886:	d05e      	beq.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003888:	f7fd fc0e 	bl	80010a8 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	429a      	cmp	r2, r3
 8003896:	d302      	bcc.n	800389e <UART_WaitOnFlagUntilTimeout+0x30>
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d11d      	bne.n	80038da <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0201 	bic.w	r2, r2, #1
 80038bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e045      	b.n	8003966 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d02e      	beq.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038f6:	d126      	bne.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003900:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003910:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0201 	bic.w	r2, r2, #1
 8003920:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2220      	movs	r2, #32
 8003926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2220      	movs	r2, #32
 800392e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2220      	movs	r2, #32
 8003936:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e00f      	b.n	8003966 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69da      	ldr	r2, [r3, #28]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4013      	ands	r3, r2
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	429a      	cmp	r2, r3
 8003954:	bf0c      	ite	eq
 8003956:	2301      	moveq	r3, #1
 8003958:	2300      	movne	r3, #0
 800395a:	b2db      	uxtb	r3, r3
 800395c:	461a      	mov	r2, r3
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	429a      	cmp	r2, r3
 8003962:	d08d      	beq.n	8003880 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003984:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003994:	f023 0301 	bic.w	r3, r3, #1
 8003998:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d107      	bne.n	80039b2 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0210 	bic.w	r2, r2, #16
 80039b0:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	671a      	str	r2, [r3, #112]	; 0x70
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b084      	sub	sp, #16
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f7ff fb6f 	bl	80030d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039f6:	bf00      	nop
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b082      	sub	sp, #8
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a14:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff fb4b 	bl	80030c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b085      	sub	sp, #20
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_UARTEx_DisableFifoMode+0x16>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e027      	b.n	8003ad4 <HAL_UARTEx_DisableFifoMode+0x66>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2224      	movs	r2, #36	; 0x24
 8003a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0201 	bic.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003ab2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e02d      	b.n	8003b54 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2224      	movs	r2, #36	; 0x24
 8003b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0201 	bic.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f84f 	bl	8003bd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e02d      	b.n	8003bd0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2224      	movs	r2, #36	; 0x24
 8003b80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0201 	bic.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f811 	bl	8003bd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d108      	bne.n	8003bfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003bf8:	e031      	b.n	8003c5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003bfa:	2308      	movs	r3, #8
 8003bfc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003bfe:	2308      	movs	r3, #8
 8003c00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	0e5b      	lsrs	r3, r3, #25
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	0f5b      	lsrs	r3, r3, #29
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c22:	7bbb      	ldrb	r3, [r7, #14]
 8003c24:	7b3a      	ldrb	r2, [r7, #12]
 8003c26:	4911      	ldr	r1, [pc, #68]	; (8003c6c <UARTEx_SetNbDataToProcess+0x94>)
 8003c28:	5c8a      	ldrb	r2, [r1, r2]
 8003c2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003c2e:	7b3a      	ldrb	r2, [r7, #12]
 8003c30:	490f      	ldr	r1, [pc, #60]	; (8003c70 <UARTEx_SetNbDataToProcess+0x98>)
 8003c32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c34:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
 8003c42:	7b7a      	ldrb	r2, [r7, #13]
 8003c44:	4909      	ldr	r1, [pc, #36]	; (8003c6c <UARTEx_SetNbDataToProcess+0x94>)
 8003c46:	5c8a      	ldrb	r2, [r1, r2]
 8003c48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003c4c:	7b7a      	ldrb	r2, [r7, #13]
 8003c4e:	4908      	ldr	r1, [pc, #32]	; (8003c70 <UARTEx_SetNbDataToProcess+0x98>)
 8003c50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c52:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003c5e:	bf00      	nop
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	08028298 	.word	0x08028298
 8003c70:	080282a0 	.word	0x080282a0

08003c74 <ESP_Init>:
 */
int32_t ESP_Init(void 		(*UART_Transmit)(uint8_t*),
			 	 uint8_t 	(*UART_Receive)(void),
				 uint32_t 	(*getTick)(void),
				 uint32_t	UART_Buffer_Size)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	603b      	str	r3, [r7, #0]
	if(UART_Transmit != NULL		&&
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d01d      	beq.n	8003cc4 <ESP_Init+0x50>
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d01a      	beq.n	8003cc4 <ESP_Init+0x50>
	   UART_Receive	!= NULL			&&
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d017      	beq.n	8003cc4 <ESP_Init+0x50>
	   getTick != NULL)
	{
		ESP8266.UART_Receive 		= UART_Receive;
 8003c94:	4a0e      	ldr	r2, [pc, #56]	; (8003cd0 <ESP_Init+0x5c>)
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	6053      	str	r3, [r2, #4]
		ESP8266.UART_Transmit 		= UART_Transmit;
 8003c9a:	4a0d      	ldr	r2, [pc, #52]	; (8003cd0 <ESP_Init+0x5c>)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6013      	str	r3, [r2, #0]
		ESP8266.getTick 			= getTick;
 8003ca0:	4a0b      	ldr	r2, [pc, #44]	; (8003cd0 <ESP_Init+0x5c>)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6093      	str	r3, [r2, #8]

		rx_buffer = ringBuffer_init(UART_Buffer_Size);
 8003ca6:	6838      	ldr	r0, [r7, #0]
 8003ca8:	f000 fc2c 	bl	8004504 <ringBuffer_init>
 8003cac:	4603      	mov	r3, r0
 8003cae:	4a09      	ldr	r2, [pc, #36]	; (8003cd4 <ESP_Init+0x60>)
 8003cb0:	6013      	str	r3, [r2, #0]

		if(rx_buffer != NULL)
 8003cb2:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <ESP_Init+0x60>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <ESP_Init+0x4a>
			return 1;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e004      	b.n	8003cc8 <ESP_Init+0x54>
		else
			return -1;
 8003cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc2:	e001      	b.n	8003cc8 <ESP_Init+0x54>
	}
	else
	{
		return -1;
 8003cc4:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	20000360 	.word	0x20000360
 8003cd4:	2000037c 	.word	0x2000037c

08003cd8 <Send_AT_Command>:
 * 			as a function pointer in the ESP_Init function to send AT commands over UART.
 * @param 	cmd is a string containing the AT command.
 * @retval	None.
 */
void Send_AT_Command(char *cmd)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]

	ESP8266.UART_Transmit((uint8_t*)cmd);
 8003ce0:	4b03      	ldr	r3, [pc, #12]	; (8003cf0 <Send_AT_Command+0x18>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	4798      	blx	r3
}
 8003ce8:	bf00      	nop
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	20000360 	.word	0x20000360

08003cf4 <ESP_UART_ReceiveHandler>:
 * 			this function in the UART ISR.
 * @param 	None.
 * @retval	None.
 */
void ESP_UART_ReceiveHandler(void)
{
 8003cf4:	b598      	push	{r3, r4, r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
	ringBuffer_push(rx_buffer, ESP8266.UART_Receive());
 8003cf8:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <ESP_UART_ReceiveHandler+0x1c>)
 8003cfa:	681c      	ldr	r4, [r3, #0]
 8003cfc:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <ESP_UART_ReceiveHandler+0x20>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	4798      	blx	r3
 8003d02:	4603      	mov	r3, r0
 8003d04:	4619      	mov	r1, r3
 8003d06:	4620      	mov	r0, r4
 8003d08:	f000 fc3d 	bl	8004586 <ringBuffer_push>
}
 8003d0c:	bf00      	nop
 8003d0e:	bd98      	pop	{r3, r4, r7, pc}
 8003d10:	2000037c 	.word	0x2000037c
 8003d14:	20000360 	.word	0x20000360

08003d18 <Read_Response>:
 * @param 	response is a string is checked if it is in the ring buffer.
 * @retval	1: There is a string passed as a parameter in the ring buffer.
 * @retval	0: There is no string passed as a parameter in the ring buffer.
 */
uint32_t Read_Response(char * response)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
	return ringBuffer_lookFor(rx_buffer, (uint8_t*)response);
 8003d20:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <Read_Response+0x20>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 fcb7 	bl	800469a <ringBuffer_lookFor>
 8003d2c:	4603      	mov	r3, r0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	2000037c 	.word	0x2000037c

08003d3c <Wait_Response>:
 * @retval	FOUND			:There is a string passed as a parameter in the ring buffer.
 * @retval	TIMEOUT_ERROR	:It returns when timeout occurs.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Wait_Response(char* response, uint32_t timeout)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]

	static uint32_t time = 0;
	static uint8_t firstCall = 0;

	if(!firstCall)
 8003d46:	4b1a      	ldr	r3, [pc, #104]	; (8003db0 <Wait_Response+0x74>)
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d108      	bne.n	8003d60 <Wait_Response+0x24>
	{
		time = ESP8266.getTick();
 8003d4e:	4b19      	ldr	r3, [pc, #100]	; (8003db4 <Wait_Response+0x78>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	4798      	blx	r3
 8003d54:	4603      	mov	r3, r0
 8003d56:	4a18      	ldr	r2, [pc, #96]	; (8003db8 <Wait_Response+0x7c>)
 8003d58:	6013      	str	r3, [r2, #0]
		firstCall = 1;
 8003d5a:	4b15      	ldr	r3, [pc, #84]	; (8003db0 <Wait_Response+0x74>)
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	701a      	strb	r2, [r3, #0]
	}

	if(ringBuffer_lookFor(rx_buffer, (uint8_t*)response))
 8003d60:	4b16      	ldr	r3, [pc, #88]	; (8003dbc <Wait_Response+0x80>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 fc97 	bl	800469a <ringBuffer_lookFor>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d007      	beq.n	8003d82 <Wait_Response+0x46>
	{
		firstCall = 0;
 8003d72:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <Wait_Response+0x74>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	701a      	strb	r2, [r3, #0]
		time = 0;
 8003d78:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <Wait_Response+0x7c>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]
		return FOUND;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	e012      	b.n	8003da8 <Wait_Response+0x6c>
	}
	else if(ESP8266.getTick() - time >= timeout)
 8003d82:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <Wait_Response+0x78>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	4798      	blx	r3
 8003d88:	4602      	mov	r2, r0
 8003d8a:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <Wait_Response+0x7c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d807      	bhi.n	8003da6 <Wait_Response+0x6a>
	{
		firstCall = 0;
 8003d96:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <Wait_Response+0x74>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	701a      	strb	r2, [r3, #0]
		time = 0;
 8003d9c:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <Wait_Response+0x7c>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]
		return TIMEOUT_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e000      	b.n	8003da8 <Wait_Response+0x6c>
	}
	else
	{
		return IDLE;
 8003da6:	2304      	movs	r3, #4
	}

}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	2000036c 	.word	0x2000036c
 8003db4:	20000360 	.word	0x20000360
 8003db8:	20000370 	.word	0x20000370
 8003dbc:	2000037c 	.word	0x2000037c

08003dc0 <Connect_Wifi>:
 * @retval	STATUS_ERROR	:There is an error about connection.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Connect_Wifi(char* ssid, char* password)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b098      	sub	sp, #96	; 0x60
 8003dc4:	af02      	add	r7, sp, #8
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
	char *command_buffer[3] =
 8003dca:	4a16      	ldr	r2, [pc, #88]	; (8003e24 <Connect_Wifi+0x64>)
 8003dcc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003dd0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003dd2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		AT_CWMODE_STATION,
		AT_CWQAP,
		""
	};
	char *response_buffer[3] =
 8003dd6:	4a14      	ldr	r2, [pc, #80]	; (8003e28 <Connect_Wifi+0x68>)
 8003dd8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ddc:	ca07      	ldmia	r2, {r0, r1, r2}
 8003dde:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		AT_RESPONSE_OK,
		AT_RESPONSE_OK,
		AT_RESPONSE_OK
	};
	Status response_state = IDLE;
 8003de2:	2304      	movs	r3, #4
 8003de4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	char wifi_buffer[50];

	sprintf(wifi_buffer,"%s\"%s\",\"%s\"\r\n",AT_CWJAP,ssid,password); 		// AT+CWJAP="<SSID>","<password>"
 8003de8:	f107 0008 	add.w	r0, r7, #8
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a0e      	ldr	r2, [pc, #56]	; (8003e2c <Connect_Wifi+0x6c>)
 8003df4:	490e      	ldr	r1, [pc, #56]	; (8003e30 <Connect_Wifi+0x70>)
 8003df6:	f01d ff5f 	bl	8021cb8 <siprintf>

	command_buffer[2] = wifi_buffer;
 8003dfa:	f107 0308 	add.w	r3, r7, #8
 8003dfe:	653b      	str	r3, [r7, #80]	; 0x50

	response_state = Command_Process(command_buffer, response_buffer, 3);
 8003e00:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003e04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e08:	2203      	movs	r2, #3
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 f82e 	bl	8003e6c <Command_Process>
 8003e10:	4603      	mov	r3, r0
 8003e12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	return response_state;
 8003e16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3758      	adds	r7, #88	; 0x58
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	08024814 	.word	0x08024814
 8003e28:	08024820 	.word	0x08024820
 8003e2c:	080247f8 	.word	0x080247f8
 8003e30:	08024804 	.word	0x08024804

08003e34 <Disconnect_Wifi>:
 * @retval	STATUS_ERROR	:There is an error about disconnect operation.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Disconnect_Wifi(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
	char *command_buffer[1] = { AT_CWQAP };
 8003e3a:	4b0a      	ldr	r3, [pc, #40]	; (8003e64 <Disconnect_Wifi+0x30>)
 8003e3c:	60bb      	str	r3, [r7, #8]
	char *response_buffer[1] = { AT_RESPONSE_OK };
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <Disconnect_Wifi+0x34>)
 8003e40:	607b      	str	r3, [r7, #4]

	Status response_state = IDLE;
 8003e42:	2304      	movs	r3, #4
 8003e44:	73fb      	strb	r3, [r7, #15]

	response_state = Command_Process(command_buffer, response_buffer, 1);
 8003e46:	1d39      	adds	r1, r7, #4
 8003e48:	f107 0308 	add.w	r3, r7, #8
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 f80c 	bl	8003e6c <Command_Process>
 8003e54:	4603      	mov	r3, r0
 8003e56:	73fb      	strb	r3, [r7, #15]

	return response_state;
 8003e58:	7bfb      	ldrb	r3, [r7, #15]

}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	080247c8 	.word	0x080247c8
 8003e68:	080247d8 	.word	0x080247d8

08003e6c <Command_Process>:
 * @retval	STATUS_ERROR	:It returns when ESP send the ERROR message or number of commands is equal zero.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Command_Process(char **commandArray, char **responseArray, uint8_t numberOfCommands)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	4613      	mov	r3, r2
 8003e78:	71fb      	strb	r3, [r7, #7]
	static uint8_t commandFlag  = 1, currentCommand = 0;
	Status response;

	if(!numberOfCommands || currentCommand >= numberOfCommands)
 8003e7a:	79fb      	ldrb	r3, [r7, #7]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d004      	beq.n	8003e8a <Command_Process+0x1e>
 8003e80:	4b3b      	ldr	r3, [pc, #236]	; (8003f70 <Command_Process+0x104>)
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	79fa      	ldrb	r2, [r7, #7]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d806      	bhi.n	8003e98 <Command_Process+0x2c>
	{
		ringBuffer_flush(rx_buffer);
 8003e8a:	4b3a      	ldr	r3, [pc, #232]	; (8003f74 <Command_Process+0x108>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fbcd 	bl	800462e <ringBuffer_flush>
		return STATUS_ERROR;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e067      	b.n	8003f68 <Command_Process+0xfc>
	}
	else
	{
		if(commandFlag)
 8003e98:	4b37      	ldr	r3, [pc, #220]	; (8003f78 <Command_Process+0x10c>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00b      	beq.n	8003eb8 <Command_Process+0x4c>
		{
			Send_AT_Command(commandArray[currentCommand]);
 8003ea0:	4b33      	ldr	r3, [pc, #204]	; (8003f70 <Command_Process+0x104>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7ff ff13 	bl	8003cd8 <Send_AT_Command>
			commandFlag = 0;
 8003eb2:	4b31      	ldr	r3, [pc, #196]	; (8003f78 <Command_Process+0x10c>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	701a      	strb	r2, [r3, #0]
		}
			response = Wait_Response(responseArray[currentCommand], TIMEOUT);
 8003eb8:	4b2d      	ldr	r3, [pc, #180]	; (8003f70 <Command_Process+0x104>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f242 7110 	movw	r1, #10000	; 0x2710
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff ff37 	bl	8003d3c <Wait_Response>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	75fb      	strb	r3, [r7, #23]

			if(Read_Response("ERROR"))
 8003ed2:	482a      	ldr	r0, [pc, #168]	; (8003f7c <Command_Process+0x110>)
 8003ed4:	f7ff ff20 	bl	8003d18 <Read_Response>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00c      	beq.n	8003ef8 <Command_Process+0x8c>
			{
				commandFlag = 1;
 8003ede:	4b26      	ldr	r3, [pc, #152]	; (8003f78 <Command_Process+0x10c>)
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 8003ee4:	4b22      	ldr	r3, [pc, #136]	; (8003f70 <Command_Process+0x104>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	701a      	strb	r2, [r3, #0]
				ringBuffer_flush(rx_buffer);
 8003eea:	4b22      	ldr	r3, [pc, #136]	; (8003f74 <Command_Process+0x108>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fb9d 	bl	800462e <ringBuffer_flush>
				return STATUS_ERROR;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e037      	b.n	8003f68 <Command_Process+0xfc>
			}
			else if(response == IDLE)
 8003ef8:	7dfb      	ldrb	r3, [r7, #23]
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d101      	bne.n	8003f02 <Command_Process+0x96>
			{
				return response;
 8003efe:	7dfb      	ldrb	r3, [r7, #23]
 8003f00:	e032      	b.n	8003f68 <Command_Process+0xfc>
			}
			else if(response == FOUND)
 8003f02:	7dfb      	ldrb	r3, [r7, #23]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d123      	bne.n	8003f50 <Command_Process+0xe4>
			{
				if(currentCommand == (numberOfCommands-1))
 8003f08:	4b19      	ldr	r3, [pc, #100]	; (8003f70 <Command_Process+0x104>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	79fb      	ldrb	r3, [r7, #7]
 8003f10:	3b01      	subs	r3, #1
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d10c      	bne.n	8003f30 <Command_Process+0xc4>
				{
					commandFlag = 1;
 8003f16:	4b18      	ldr	r3, [pc, #96]	; (8003f78 <Command_Process+0x10c>)
 8003f18:	2201      	movs	r2, #1
 8003f1a:	701a      	strb	r2, [r3, #0]
					currentCommand = 0;
 8003f1c:	4b14      	ldr	r3, [pc, #80]	; (8003f70 <Command_Process+0x104>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 8003f22:	4b14      	ldr	r3, [pc, #80]	; (8003f74 <Command_Process+0x108>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 fb81 	bl	800462e <ringBuffer_flush>
					return STATUS_OK;
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e01b      	b.n	8003f68 <Command_Process+0xfc>
				}
				else
				{
					commandFlag = 1;
 8003f30:	4b11      	ldr	r3, [pc, #68]	; (8003f78 <Command_Process+0x10c>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	701a      	strb	r2, [r3, #0]
					currentCommand += 1;
 8003f36:	4b0e      	ldr	r3, [pc, #56]	; (8003f70 <Command_Process+0x104>)
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <Command_Process+0x104>)
 8003f40:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 8003f42:	4b0c      	ldr	r3, [pc, #48]	; (8003f74 <Command_Process+0x108>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fb71 	bl	800462e <ringBuffer_flush>
					return IDLE;
 8003f4c:	2304      	movs	r3, #4
 8003f4e:	e00b      	b.n	8003f68 <Command_Process+0xfc>
				}

			}
			else
			{
				commandFlag = 1;
 8003f50:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <Command_Process+0x10c>)
 8003f52:	2201      	movs	r2, #1
 8003f54:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 8003f56:	4b06      	ldr	r3, [pc, #24]	; (8003f70 <Command_Process+0x104>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	701a      	strb	r2, [r3, #0]
				ringBuffer_flush(rx_buffer);
 8003f5c:	4b05      	ldr	r3, [pc, #20]	; (8003f74 <Command_Process+0x108>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 fb64 	bl	800462e <ringBuffer_flush>
				return response;
 8003f66:	7dfb      	ldrb	r3, [r7, #23]
			}
	}


}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	20000374 	.word	0x20000374
 8003f74:	2000037c 	.word	0x2000037c
 8003f78:	20000010 	.word	0x20000010
 8003f7c:	0802482c 	.word	0x0802482c

08003f80 <Connect_TCP_Server>:
 * @retval	STATUS_ERROR	:There is an error about connection.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Connect_TCP_Server(char* ip, char* port)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b0a2      	sub	sp, #136	; 0x88
 8003f84:	af02      	add	r7, sp, #8
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
	Status response_state = IDLE;
 8003f8a:	2304      	movs	r3, #4
 8003f8c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	char *command_buffer[2] =
 8003f90:	4a15      	ldr	r2, [pc, #84]	; (8003fe8 <Connect_TCP_Server+0x68>)
 8003f92:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003f96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f9a:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		AT_CIPMUX_SINGLE,
		""
	};

	char *response_buffer[2] =
 8003f9e:	4a13      	ldr	r2, [pc, #76]	; (8003fec <Connect_TCP_Server+0x6c>)
 8003fa0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003fa4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fa8:	e883 0003 	stmia.w	r3, {r0, r1}
		AT_RESPONSE_OK
	};

	char wifi_buffer[100];

	sprintf(wifi_buffer,"%s\"%s\",%s\r\n",AT_CIPSTART_TCP,ip,port);
 8003fac:	f107 0008 	add.w	r0, r7, #8
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a0e      	ldr	r2, [pc, #56]	; (8003ff0 <Connect_TCP_Server+0x70>)
 8003fb8:	490e      	ldr	r1, [pc, #56]	; (8003ff4 <Connect_TCP_Server+0x74>)
 8003fba:	f01d fe7d 	bl	8021cb8 <siprintf>

	command_buffer[1] = wifi_buffer;
 8003fbe:	f107 0308 	add.w	r3, r7, #8
 8003fc2:	67bb      	str	r3, [r7, #120]	; 0x78

	response_state = Command_Process(command_buffer, response_buffer, 2);
 8003fc4:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003fc8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003fcc:	2202      	movs	r2, #2
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff ff4c 	bl	8003e6c <Command_Process>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	return response_state;
 8003fda:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3780      	adds	r7, #128	; 0x80
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	08024854 	.word	0x08024854
 8003fec:	0802485c 	.word	0x0802485c
 8003ff0:	08024834 	.word	0x08024834
 8003ff4:	08024848 	.word	0x08024848

08003ff8 <Disconnect_TCP_Server>:
 * @retval	STATUS_ERROR	:There is an error about disconnection.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Disconnect_TCP_Server(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
	Status response_state = IDLE;
 8003ffe:	2304      	movs	r3, #4
 8004000:	73fb      	strb	r3, [r7, #15]

	char *command_buffer[1] = { AT_CIPCLOSE };
 8004002:	4b09      	ldr	r3, [pc, #36]	; (8004028 <Disconnect_TCP_Server+0x30>)
 8004004:	60bb      	str	r3, [r7, #8]
	char *response_buffer[1] = { AT_RESPONSE_OK };
 8004006:	4b09      	ldr	r3, [pc, #36]	; (800402c <Disconnect_TCP_Server+0x34>)
 8004008:	607b      	str	r3, [r7, #4]

	response_state = Command_Process(command_buffer, response_buffer, 1);
 800400a:	1d39      	adds	r1, r7, #4
 800400c:	f107 0308 	add.w	r3, r7, #8
 8004010:	2201      	movs	r2, #1
 8004012:	4618      	mov	r0, r3
 8004014:	f7ff ff2a 	bl	8003e6c <Command_Process>
 8004018:	4603      	mov	r3, r0
 800401a:	73fb      	strb	r3, [r7, #15]

	return response_state;
 800401c:	7bfb      	ldrb	r3, [r7, #15]

}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	08024864 	.word	0x08024864
 800402c:	080247d8 	.word	0x080247d8

08004030 <Send_TCP_Message>:
 * @retval	STATUS_ERROR	:There is an error about sending message.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Send_TCP_Message(char* message)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b096      	sub	sp, #88	; 0x58
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
	Status response_state = STATUS_ERROR;
 8004038:	2303      	movs	r3, #3
 800403a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	uint32_t length=0;
 800403e:	2300      	movs	r3, #0
 8004040:	653b      	str	r3, [r7, #80]	; 0x50

	length = strlen(message);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7fc f8fa 	bl	800023c <strlen>
 8004048:	6538      	str	r0, [r7, #80]	; 0x50

	char cipSendBuffer[50];

	sprintf(cipSendBuffer,"%s%ld\r\n",AT_CIPSEND,length);
 800404a:	f107 001c 	add.w	r0, r7, #28
 800404e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004050:	4a10      	ldr	r2, [pc, #64]	; (8004094 <Send_TCP_Message+0x64>)
 8004052:	4911      	ldr	r1, [pc, #68]	; (8004098 <Send_TCP_Message+0x68>)
 8004054:	f01d fe30 	bl	8021cb8 <siprintf>

	char *command_buffer[2];

	command_buffer[0] = cipSendBuffer;
 8004058:	f107 031c 	add.w	r3, r7, #28
 800405c:	617b      	str	r3, [r7, #20]
	command_buffer[1] = message;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	61bb      	str	r3, [r7, #24]

	char *response_buffer[2] =
 8004062:	4a0e      	ldr	r2, [pc, #56]	; (800409c <Send_TCP_Message+0x6c>)
 8004064:	f107 030c 	add.w	r3, r7, #12
 8004068:	e892 0003 	ldmia.w	r2, {r0, r1}
 800406c:	e883 0003 	stmia.w	r3, {r0, r1}
	{
			AT_RESPONSE_GREATER_THAN,
			AT_RESPONSE_SEND_OK
	};

	response_state = Command_Process(command_buffer, response_buffer, 2);
 8004070:	f107 010c 	add.w	r1, r7, #12
 8004074:	f107 0314 	add.w	r3, r7, #20
 8004078:	2202      	movs	r2, #2
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff fef6 	bl	8003e6c <Command_Process>
 8004080:	4603      	mov	r3, r0
 8004082:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	return response_state;
 8004086:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57

}
 800408a:	4618      	mov	r0, r3
 800408c:	3758      	adds	r7, #88	; 0x58
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	08024874 	.word	0x08024874
 8004098:	08024880 	.word	0x08024880
 800409c:	08024888 	.word	0x08024888

080040a0 <Read_TCP_Message>:
 * @param 	receviedMessage : If a message is received, it is assigned to receivedMessage.
 * @retval	STATUS_OK		:The message has been read successfully.
 * @retval	STATUS_ERROR	:There is no TCP message in the buffer.
 */
Status Read_TCP_Message(char* receivedMessage)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b088      	sub	sp, #32
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]

	char *substring = strstr((char*)rx_buffer->buffer,"+IPD,");
 80040a8:	4b2d      	ldr	r3, [pc, #180]	; (8004160 <Read_TCP_Message+0xc0>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	492d      	ldr	r1, [pc, #180]	; (8004164 <Read_TCP_Message+0xc4>)
 80040b0:	4618      	mov	r0, r3
 80040b2:	f01e fbcb 	bl	802284c <strstr>
 80040b6:	6138      	str	r0, [r7, #16]

	char messageLengthString[3];

	uint32_t messageLength=0,index=0;
 80040b8:	2300      	movs	r3, #0
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	2300      	movs	r3, #0
 80040be:	61fb      	str	r3, [r7, #28]


	if(substring != NULL)
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d042      	beq.n	800414c <Read_TCP_Message+0xac>
	{
		for(uint8_t i=0;i<3;i++)
 80040c6:	2300      	movs	r3, #0
 80040c8:	76fb      	strb	r3, [r7, #27]
 80040ca:	e017      	b.n	80040fc <Read_TCP_Message+0x5c>
		{
			if(*(substring+5+i) == ':')
 80040cc:	7efb      	ldrb	r3, [r7, #27]
 80040ce:	3305      	adds	r3, #5
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4413      	add	r3, r2
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2b3a      	cmp	r3, #58	; 0x3a
 80040d8:	d014      	beq.n	8004104 <Read_TCP_Message+0x64>
				break;
			messageLengthString[i] = *(substring+5+i);
 80040da:	7efb      	ldrb	r3, [r7, #27]
 80040dc:	3305      	adds	r3, #5
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	441a      	add	r2, r3
 80040e2:	7efb      	ldrb	r3, [r7, #27]
 80040e4:	7812      	ldrb	r2, [r2, #0]
 80040e6:	f107 0120 	add.w	r1, r7, #32
 80040ea:	440b      	add	r3, r1
 80040ec:	f803 2c18 	strb.w	r2, [r3, #-24]
			index += 1;
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	3301      	adds	r3, #1
 80040f4:	61fb      	str	r3, [r7, #28]
		for(uint8_t i=0;i<3;i++)
 80040f6:	7efb      	ldrb	r3, [r7, #27]
 80040f8:	3301      	adds	r3, #1
 80040fa:	76fb      	strb	r3, [r7, #27]
 80040fc:	7efb      	ldrb	r3, [r7, #27]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d9e4      	bls.n	80040cc <Read_TCP_Message+0x2c>
 8004102:	e000      	b.n	8004106 <Read_TCP_Message+0x66>
				break;
 8004104:	bf00      	nop

		}

		messageLength = atoi(messageLengthString);
 8004106:	f107 0308 	add.w	r3, r7, #8
 800410a:	4618      	mov	r0, r3
 800410c:	f01c fe35 	bl	8020d7a <atoi>
 8004110:	4603      	mov	r3, r0
 8004112:	60fb      	str	r3, [r7, #12]

		for(uint32_t i=0;i<messageLength;i++)
 8004114:	2300      	movs	r3, #0
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	e00d      	b.n	8004136 <Read_TCP_Message+0x96>
		{
			receivedMessage[i] = *(substring+6+index+i);
 800411a:	69fa      	ldr	r2, [r7, #28]
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	4413      	add	r3, r2
 8004120:	3306      	adds	r3, #6
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	441a      	add	r2, r3
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	440b      	add	r3, r1
 800412c:	7812      	ldrb	r2, [r2, #0]
 800412e:	701a      	strb	r2, [r3, #0]
		for(uint32_t i=0;i<messageLength;i++)
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	3301      	adds	r3, #1
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	429a      	cmp	r2, r3
 800413c:	d3ed      	bcc.n	800411a <Read_TCP_Message+0x7a>
		}
		ringBuffer_flush(rx_buffer);
 800413e:	4b08      	ldr	r3, [pc, #32]	; (8004160 <Read_TCP_Message+0xc0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fa73 	bl	800462e <ringBuffer_flush>
		return STATUS_OK;
 8004148:	2302      	movs	r3, #2
 800414a:	e005      	b.n	8004158 <Read_TCP_Message+0xb8>


	}
	else
	{
		ringBuffer_flush(rx_buffer);
 800414c:	4b04      	ldr	r3, [pc, #16]	; (8004160 <Read_TCP_Message+0xc0>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4618      	mov	r0, r3
 8004152:	f000 fa6c 	bl	800462e <ringBuffer_flush>
		return STATUS_ERROR;
 8004156:	2303      	movs	r3, #3
	}



}
 8004158:	4618      	mov	r0, r3
 800415a:	3720      	adds	r7, #32
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	2000037c 	.word	0x2000037c
 8004164:	08024890 	.word	0x08024890

08004168 <Wait_TCP_Message>:
 * @retval	STATUS_ERROR	:There is no TCP message in the buffer.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE
 */
Status Wait_TCP_Message(char* receivedMessage, uint32_t timeout)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
	static uint8_t firstCall = 1;
	static uint32_t time = 0;

	if(firstCall)
 8004172:	4b19      	ldr	r3, [pc, #100]	; (80041d8 <Wait_TCP_Message+0x70>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d008      	beq.n	800418c <Wait_TCP_Message+0x24>
	{
		time = ESP8266.getTick();
 800417a:	4b18      	ldr	r3, [pc, #96]	; (80041dc <Wait_TCP_Message+0x74>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	4798      	blx	r3
 8004180:	4603      	mov	r3, r0
 8004182:	4a17      	ldr	r2, [pc, #92]	; (80041e0 <Wait_TCP_Message+0x78>)
 8004184:	6013      	str	r3, [r2, #0]
		firstCall = 0;
 8004186:	4b14      	ldr	r3, [pc, #80]	; (80041d8 <Wait_TCP_Message+0x70>)
 8004188:	2200      	movs	r2, #0
 800418a:	701a      	strb	r2, [r3, #0]
	}

	if(Read_TCP_Message(receivedMessage) == STATUS_OK)
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7ff ff87 	bl	80040a0 <Read_TCP_Message>
 8004192:	4603      	mov	r3, r0
 8004194:	2b02      	cmp	r3, #2
 8004196:	d107      	bne.n	80041a8 <Wait_TCP_Message+0x40>
	{
		time = 0;
 8004198:	4b11      	ldr	r3, [pc, #68]	; (80041e0 <Wait_TCP_Message+0x78>)
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]
		firstCall = 1;
 800419e:	4b0e      	ldr	r3, [pc, #56]	; (80041d8 <Wait_TCP_Message+0x70>)
 80041a0:	2201      	movs	r2, #1
 80041a2:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
 80041a4:	2302      	movs	r3, #2
 80041a6:	e012      	b.n	80041ce <Wait_TCP_Message+0x66>
	}
	else if(ESP8266.getTick()-time >= timeout)
 80041a8:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <Wait_TCP_Message+0x74>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	4798      	blx	r3
 80041ae:	4602      	mov	r2, r0
 80041b0:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <Wait_TCP_Message+0x78>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d807      	bhi.n	80041cc <Wait_TCP_Message+0x64>
	{
		time = 0;
 80041bc:	4b08      	ldr	r3, [pc, #32]	; (80041e0 <Wait_TCP_Message+0x78>)
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]
		firstCall = 1;
 80041c2:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <Wait_TCP_Message+0x70>)
 80041c4:	2201      	movs	r2, #1
 80041c6:	701a      	strb	r2, [r3, #0]
		return TIMEOUT_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e000      	b.n	80041ce <Wait_TCP_Message+0x66>
	}
	else
		return IDLE;
 80041cc:	2304      	movs	r3, #4

}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	20000011 	.word	0x20000011
 80041dc:	20000360 	.word	0x20000360
 80041e0:	20000378 	.word	0x20000378

080041e4 <mqtt_encode_packet>:

#include <string.h>
#include "mqtt.h"


int32_t mqtt_encode_packet(uint8_t *buffer, void *packet, mqtt_packet_types packetType ){
 80041e4:	b590      	push	{r4, r7, lr}
 80041e6:	b08f      	sub	sp, #60	; 0x3c
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	4613      	mov	r3, r2
 80041f0:	71fb      	strb	r3, [r7, #7]

	if(packetType == CONNECT_PACKET)
 80041f2:	79fb      	ldrb	r3, [r7, #7]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f040 80a4 	bne.w	8004342 <mqtt_encode_packet+0x15e>
	{
		int32_t index = 0;
 80041fa:	2300      	movs	r3, #0
 80041fc:	637b      	str	r3, [r7, #52]	; 0x34

		MQTT_Connect_Packet *connectPacket = (MQTT_Connect_Packet*)packet;
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	617b      	str	r3, [r7, #20]

		buffer[index++] = connectPacket->ConnectByte;
 8004202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004204:	1c5a      	adds	r2, r3, #1
 8004206:	637a      	str	r2, [r7, #52]	; 0x34
 8004208:	461a      	mov	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4413      	add	r3, r2
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	7812      	ldrb	r2, [r2, #0]
 8004212:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->RemainLength;
 8004214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	637a      	str	r2, [r7, #52]	; 0x34
 800421a:	461a      	mov	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4413      	add	r3, r2
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	7852      	ldrb	r2, [r2, #1]
 8004224:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->ProtocolNameLength>>8;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	885b      	ldrh	r3, [r3, #2]
 800422a:	0a1b      	lsrs	r3, r3, #8
 800422c:	b299      	uxth	r1, r3
 800422e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	637a      	str	r2, [r7, #52]	; 0x34
 8004234:	461a      	mov	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	4413      	add	r3, r2
 800423a:	b2ca      	uxtb	r2, r1
 800423c:	701a      	strb	r2, [r3, #0]
		buffer[index++]= connectPacket->ProtocolNameLength & 0xFF;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	8859      	ldrh	r1, [r3, #2]
 8004242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	637a      	str	r2, [r7, #52]	; 0x34
 8004248:	461a      	mov	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4413      	add	r3, r2
 800424e:	b2ca      	uxtb	r2, r1
 8004250:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<connectPacket->ProtocolNameLength;i++)
 8004252:	2300      	movs	r3, #0
 8004254:	867b      	strh	r3, [r7, #50]	; 0x32
 8004256:	e013      	b.n	8004280 <mqtt_encode_packet+0x9c>
		{
			if(i==4)
 8004258:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800425a:	2b04      	cmp	r3, #4
 800425c:	d102      	bne.n	8004264 <mqtt_encode_packet+0x80>
				return -1;
 800425e:	f04f 33ff 	mov.w	r3, #4294967295
 8004262:	e14b      	b.n	80044fc <mqtt_encode_packet+0x318>
			buffer[index++] = connectPacket->ProtocolName[i];
 8004264:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8004266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004268:	1c59      	adds	r1, r3, #1
 800426a:	6379      	str	r1, [r7, #52]	; 0x34
 800426c:	4619      	mov	r1, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	440b      	add	r3, r1
 8004272:	6979      	ldr	r1, [r7, #20]
 8004274:	440a      	add	r2, r1
 8004276:	7912      	ldrb	r2, [r2, #4]
 8004278:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<connectPacket->ProtocolNameLength;i++)
 800427a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800427c:	3301      	adds	r3, #1
 800427e:	867b      	strh	r3, [r7, #50]	; 0x32
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	885b      	ldrh	r3, [r3, #2]
 8004284:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8004286:	429a      	cmp	r2, r3
 8004288:	d3e6      	bcc.n	8004258 <mqtt_encode_packet+0x74>
		}
		buffer[index++] = connectPacket->Level;
 800428a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800428c:	1c5a      	adds	r2, r3, #1
 800428e:	637a      	str	r2, [r7, #52]	; 0x34
 8004290:	461a      	mov	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	4413      	add	r3, r2
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	7a12      	ldrb	r2, [r2, #8]
 800429a:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->Flag;
 800429c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800429e:	1c5a      	adds	r2, r3, #1
 80042a0:	637a      	str	r2, [r7, #52]	; 0x34
 80042a2:	461a      	mov	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4413      	add	r3, r2
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	7a52      	ldrb	r2, [r2, #9]
 80042ac:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->KeepAlive >> 8;
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	895b      	ldrh	r3, [r3, #10]
 80042b2:	0a1b      	lsrs	r3, r3, #8
 80042b4:	b299      	uxth	r1, r3
 80042b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	637a      	str	r2, [r7, #52]	; 0x34
 80042bc:	461a      	mov	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	4413      	add	r3, r2
 80042c2:	b2ca      	uxtb	r2, r1
 80042c4:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->KeepAlive & 0xFF;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	8959      	ldrh	r1, [r3, #10]
 80042ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	637a      	str	r2, [r7, #52]	; 0x34
 80042d0:	461a      	mov	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	4413      	add	r3, r2
 80042d6:	b2ca      	uxtb	r2, r1
 80042d8:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->ClientIDLength >> 8;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	899b      	ldrh	r3, [r3, #12]
 80042de:	0a1b      	lsrs	r3, r3, #8
 80042e0:	b299      	uxth	r1, r3
 80042e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e4:	1c5a      	adds	r2, r3, #1
 80042e6:	637a      	str	r2, [r7, #52]	; 0x34
 80042e8:	461a      	mov	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	4413      	add	r3, r2
 80042ee:	b2ca      	uxtb	r2, r1
 80042f0:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->ClientIDLength & 0xFF;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	8999      	ldrh	r1, [r3, #12]
 80042f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f8:	1c5a      	adds	r2, r3, #1
 80042fa:	637a      	str	r2, [r7, #52]	; 0x34
 80042fc:	461a      	mov	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	4413      	add	r3, r2
 8004302:	b2ca      	uxtb	r2, r1
 8004304:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<connectPacket->ClientIDLength;i++)
 8004306:	2300      	movs	r3, #0
 8004308:	863b      	strh	r3, [r7, #48]	; 0x30
 800430a:	e013      	b.n	8004334 <mqtt_encode_packet+0x150>
		{
			if(i == MAX_LENGTH_OF_CLIENT_ID)
 800430c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800430e:	2b32      	cmp	r3, #50	; 0x32
 8004310:	d102      	bne.n	8004318 <mqtt_encode_packet+0x134>
				return -1;
 8004312:	f04f 33ff 	mov.w	r3, #4294967295
 8004316:	e0f1      	b.n	80044fc <mqtt_encode_packet+0x318>
			buffer[index++] = connectPacket->ClientID[i];
 8004318:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800431a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800431c:	1c59      	adds	r1, r3, #1
 800431e:	6379      	str	r1, [r7, #52]	; 0x34
 8004320:	4619      	mov	r1, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	440b      	add	r3, r1
 8004326:	6979      	ldr	r1, [r7, #20]
 8004328:	440a      	add	r2, r1
 800432a:	7b92      	ldrb	r2, [r2, #14]
 800432c:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<connectPacket->ClientIDLength;i++)
 800432e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004330:	3301      	adds	r3, #1
 8004332:	863b      	strh	r3, [r7, #48]	; 0x30
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	899b      	ldrh	r3, [r3, #12]
 8004338:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800433a:	429a      	cmp	r2, r3
 800433c:	d3e6      	bcc.n	800430c <mqtt_encode_packet+0x128>
		}

		return index;
 800433e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004340:	e0dc      	b.n	80044fc <mqtt_encode_packet+0x318>

	}
	else if(packetType == SUBSCRIBE_PACKET)
 8004342:	79fb      	ldrb	r3, [r7, #7]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d169      	bne.n	800441c <mqtt_encode_packet+0x238>
	{

		int32_t index = 0;
 8004348:	2300      	movs	r3, #0
 800434a:	62fb      	str	r3, [r7, #44]	; 0x2c

		MQTT_Subscribe_Packet *subscribePacket = (MQTT_Subscribe_Packet*)packet;
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	61bb      	str	r3, [r7, #24]

		buffer[index++] = subscribePacket->subscribePacketByte;
 8004350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004352:	1c5a      	adds	r2, r3, #1
 8004354:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004356:	461a      	mov	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4413      	add	r3, r2
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	7812      	ldrb	r2, [r2, #0]
 8004360:	701a      	strb	r2, [r3, #0]
		buffer[index++] = subscribePacket->remainLength;
 8004362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004368:	461a      	mov	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4413      	add	r3, r2
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	7852      	ldrb	r2, [r2, #1]
 8004372:	701a      	strb	r2, [r3, #0]
		buffer[index++] = subscribePacket->packetID >> 8;
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	885b      	ldrh	r3, [r3, #2]
 8004378:	0a1b      	lsrs	r3, r3, #8
 800437a:	b299      	uxth	r1, r3
 800437c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437e:	1c5a      	adds	r2, r3, #1
 8004380:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004382:	461a      	mov	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4413      	add	r3, r2
 8004388:	b2ca      	uxtb	r2, r1
 800438a:	701a      	strb	r2, [r3, #0]
		buffer[index++] = subscribePacket->packetID & 0xFF;
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	8859      	ldrh	r1, [r3, #2]
 8004390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004392:	1c5a      	adds	r2, r3, #1
 8004394:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004396:	461a      	mov	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4413      	add	r3, r2
 800439c:	b2ca      	uxtb	r2, r1
 800439e:	701a      	strb	r2, [r3, #0]
		buffer[index++] = subscribePacket->topicLength >> 8;
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	889b      	ldrh	r3, [r3, #4]
 80043a4:	0a1b      	lsrs	r3, r3, #8
 80043a6:	b299      	uxth	r1, r3
 80043a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043aa:	1c5a      	adds	r2, r3, #1
 80043ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043ae:	461a      	mov	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4413      	add	r3, r2
 80043b4:	b2ca      	uxtb	r2, r1
 80043b6:	701a      	strb	r2, [r3, #0]
		buffer[index++] = subscribePacket->topicLength & 0xFF;
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	8899      	ldrh	r1, [r3, #4]
 80043bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043c2:	461a      	mov	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4413      	add	r3, r2
 80043c8:	b2ca      	uxtb	r2, r1
 80043ca:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<subscribePacket->topicLength;i++)
 80043cc:	2300      	movs	r3, #0
 80043ce:	857b      	strh	r3, [r7, #42]	; 0x2a
 80043d0:	e013      	b.n	80043fa <mqtt_encode_packet+0x216>
		{
			if(i == MAX_LENGTH_OF_TOPIC_NAME)
 80043d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80043d4:	2b32      	cmp	r3, #50	; 0x32
 80043d6:	d102      	bne.n	80043de <mqtt_encode_packet+0x1fa>
				return -1;
 80043d8:	f04f 33ff 	mov.w	r3, #4294967295
 80043dc:	e08e      	b.n	80044fc <mqtt_encode_packet+0x318>
			buffer[index++] = subscribePacket->topic[i];
 80043de:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80043e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e2:	1c59      	adds	r1, r3, #1
 80043e4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80043e6:	4619      	mov	r1, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	440b      	add	r3, r1
 80043ec:	69b9      	ldr	r1, [r7, #24]
 80043ee:	440a      	add	r2, r1
 80043f0:	7992      	ldrb	r2, [r2, #6]
 80043f2:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<subscribePacket->topicLength;i++)
 80043f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80043f6:	3301      	adds	r3, #1
 80043f8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	889b      	ldrh	r3, [r3, #4]
 80043fe:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8004400:	429a      	cmp	r2, r3
 8004402:	d3e6      	bcc.n	80043d2 <mqtt_encode_packet+0x1ee>
		}

		buffer[index++] = subscribePacket->Qos;
 8004404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	62fa      	str	r2, [r7, #44]	; 0x2c
 800440a:	461a      	mov	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4413      	add	r3, r2
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8004416:	701a      	strb	r2, [r3, #0]

		return index;
 8004418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441a:	e06f      	b.n	80044fc <mqtt_encode_packet+0x318>


	}
	else if(packetType == PUBLISH_PACKET)
 800441c:	79fb      	ldrb	r3, [r7, #7]
 800441e:	2b02      	cmp	r3, #2
 8004420:	d16a      	bne.n	80044f8 <mqtt_encode_packet+0x314>
	{
		int32_t index = 0;
 8004422:	2300      	movs	r3, #0
 8004424:	627b      	str	r3, [r7, #36]	; 0x24

		MQTT_Publish_Packet *publishPacket = (MQTT_Publish_Packet*)packet;
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	61fb      	str	r3, [r7, #28]

		buffer[index++] = publishPacket->publishPacketByte;
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	627a      	str	r2, [r7, #36]	; 0x24
 8004430:	461a      	mov	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	4413      	add	r3, r2
 8004436:	69fa      	ldr	r2, [r7, #28]
 8004438:	7812      	ldrb	r2, [r2, #0]
 800443a:	701a      	strb	r2, [r3, #0]
		buffer[index++] = publishPacket->remainLength;
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	1c5a      	adds	r2, r3, #1
 8004440:	627a      	str	r2, [r7, #36]	; 0x24
 8004442:	461a      	mov	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4413      	add	r3, r2
 8004448:	69fa      	ldr	r2, [r7, #28]
 800444a:	7852      	ldrb	r2, [r2, #1]
 800444c:	701a      	strb	r2, [r3, #0]
		buffer[index++] = publishPacket->topicLength >> 8;
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	885b      	ldrh	r3, [r3, #2]
 8004452:	0a1b      	lsrs	r3, r3, #8
 8004454:	b299      	uxth	r1, r3
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	627a      	str	r2, [r7, #36]	; 0x24
 800445c:	461a      	mov	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	4413      	add	r3, r2
 8004462:	b2ca      	uxtb	r2, r1
 8004464:	701a      	strb	r2, [r3, #0]
		buffer[index++] = publishPacket->topicLength & 0xFF;
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	8859      	ldrh	r1, [r3, #2]
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	627a      	str	r2, [r7, #36]	; 0x24
 8004470:	461a      	mov	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	4413      	add	r3, r2
 8004476:	b2ca      	uxtb	r2, r1
 8004478:	701a      	strb	r2, [r3, #0]

		for(uint16_t i=0;i<publishPacket->topicLength;i++)
 800447a:	2300      	movs	r3, #0
 800447c:	847b      	strh	r3, [r7, #34]	; 0x22
 800447e:	e013      	b.n	80044a8 <mqtt_encode_packet+0x2c4>
		{
			if(i == MAX_LENGTH_OF_TOPIC_NAME)
 8004480:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004482:	2b32      	cmp	r3, #50	; 0x32
 8004484:	d102      	bne.n	800448c <mqtt_encode_packet+0x2a8>
				return -1;
 8004486:	f04f 33ff 	mov.w	r3, #4294967295
 800448a:	e037      	b.n	80044fc <mqtt_encode_packet+0x318>

			buffer[index++] = publishPacket->topic[i];
 800448c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	1c59      	adds	r1, r3, #1
 8004492:	6279      	str	r1, [r7, #36]	; 0x24
 8004494:	4619      	mov	r1, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	440b      	add	r3, r1
 800449a:	69f9      	ldr	r1, [r7, #28]
 800449c:	440a      	add	r2, r1
 800449e:	7912      	ldrb	r2, [r2, #4]
 80044a0:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<publishPacket->topicLength;i++)
 80044a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80044a4:	3301      	adds	r3, #1
 80044a6:	847b      	strh	r3, [r7, #34]	; 0x22
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	885b      	ldrh	r3, [r3, #2]
 80044ac:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d3e6      	bcc.n	8004480 <mqtt_encode_packet+0x29c>
		}
		for(uint16_t i=0; i< strlen(publishPacket->message);i++)
 80044b2:	2300      	movs	r3, #0
 80044b4:	843b      	strh	r3, [r7, #32]
 80044b6:	e014      	b.n	80044e2 <mqtt_encode_packet+0x2fe>
		{
			if(i == MAX_LENGTH_OF_TOPIC_MESSAGE)
 80044b8:	8c3b      	ldrh	r3, [r7, #32]
 80044ba:	2b64      	cmp	r3, #100	; 0x64
 80044bc:	d102      	bne.n	80044c4 <mqtt_encode_packet+0x2e0>
				return -1;
 80044be:	f04f 33ff 	mov.w	r3, #4294967295
 80044c2:	e01b      	b.n	80044fc <mqtt_encode_packet+0x318>

			buffer[index++] = publishPacket->message[i];
 80044c4:	8c3a      	ldrh	r2, [r7, #32]
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	1c59      	adds	r1, r3, #1
 80044ca:	6279      	str	r1, [r7, #36]	; 0x24
 80044cc:	4619      	mov	r1, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	440b      	add	r3, r1
 80044d2:	69f9      	ldr	r1, [r7, #28]
 80044d4:	440a      	add	r2, r1
 80044d6:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80044da:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0; i< strlen(publishPacket->message);i++)
 80044dc:	8c3b      	ldrh	r3, [r7, #32]
 80044de:	3301      	adds	r3, #1
 80044e0:	843b      	strh	r3, [r7, #32]
 80044e2:	8c3c      	ldrh	r4, [r7, #32]
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	3336      	adds	r3, #54	; 0x36
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fb fea7 	bl	800023c <strlen>
 80044ee:	4603      	mov	r3, r0
 80044f0:	429c      	cmp	r4, r3
 80044f2:	d3e1      	bcc.n	80044b8 <mqtt_encode_packet+0x2d4>
		}
		return index;
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	e001      	b.n	80044fc <mqtt_encode_packet+0x318>
	}

	return -1;
 80044f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	373c      	adds	r7, #60	; 0x3c
 8004500:	46bd      	mov	sp, r7
 8004502:	bd90      	pop	{r4, r7, pc}

08004504 <ringBuffer_init>:
 * @brief 	Initialize the ring buffer. Ring buffer is allocated after this function.
 * @param 	size parameter specifies the size of ring buffer.
 * @retval	RingBuffer typedef structure.
 */
RingBuffer* ringBuffer_init(uint32_t size)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
	RingBuffer* rBuf;

	rBuf = (RingBuffer*)malloc(1*sizeof(RingBuffer));
 800450c:	2010      	movs	r0, #16
 800450e:	f01d fa01 	bl	8021914 <malloc>
 8004512:	4603      	mov	r3, r0
 8004514:	60fb      	str	r3, [r7, #12]
	if(rBuf == NULL)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <ringBuffer_init+0x1c>
	{
		// Error
		return 0;
 800451c:	2300      	movs	r3, #0
 800451e:	e017      	b.n	8004550 <ringBuffer_init+0x4c>
	}

	rBuf->size = size;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	609a      	str	r2, [r3, #8]
	rBuf->head = 0;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]
	rBuf->tail = 0;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	605a      	str	r2, [r3, #4]

	rBuf->buffer = (uint8_t*)calloc((size_t)size,sizeof(uint8_t));
 8004532:	2101      	movs	r1, #1
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f01c fc25 	bl	8020d84 <calloc>
 800453a:	4603      	mov	r3, r0
 800453c:	461a      	mov	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	60da      	str	r2, [r3, #12]
	if(rBuf->buffer == NULL)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <ringBuffer_init+0x4a>
		{
			// Error
			return 0;
 800454a:	2300      	movs	r3, #0
 800454c:	e000      	b.n	8004550 <ringBuffer_init+0x4c>
		}

	return rBuf;
 800454e:	68fb      	ldr	r3, [r7, #12]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <ringBuffer_deInit>:
 * @brief 	De-initialize the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_deInit(RingBuffer* buffer)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
	if(buffer != NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00b      	beq.n	800457e <ringBuffer_deInit+0x26>
	{
		if(buffer->buffer != NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d004      	beq.n	8004578 <ringBuffer_deInit+0x20>
		{
			free(buffer->buffer);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	4618      	mov	r0, r3
 8004574:	f01d f9d6 	bl	8021924 <free>
		}
		free(buffer);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f01d f9d3 	bl	8021924 <free>
	}
}
 800457e:	bf00      	nop
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <ringBuffer_push>:
 * @param 	RingBuffer typedef structure.
 * @param 	data is an unsigned 8-bit integer variable to be pushed into the buffer.
 * @retval	None.
 */
void ringBuffer_push(RingBuffer* ringBuffer, uint8_t data)
{
 8004586:	b480      	push	{r7}
 8004588:	b083      	sub	sp, #12
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
 800458e:	460b      	mov	r3, r1
 8004590:	70fb      	strb	r3, [r7, #3]
	if(ringBuffer->head != (ringBuffer->size - 1))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	3b01      	subs	r3, #1
 800459c:	429a      	cmp	r2, r3
 800459e:	d00c      	beq.n	80045ba <ringBuffer_push+0x34>
	{
		ringBuffer->buffer[ringBuffer->head] = data;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4413      	add	r3, r2
 80045aa:	78fa      	ldrb	r2, [r7, #3]
 80045ac:	701a      	strb	r2, [r3, #0]
		ringBuffer->head += 1;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	601a      	str	r2, [r3, #0]
	else
	{
		ringBuffer->buffer[ringBuffer->head] = data;
		ringBuffer->head = 0;
	}
}
 80045b8:	e009      	b.n	80045ce <ringBuffer_push+0x48>
		ringBuffer->buffer[ringBuffer->head] = data;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4413      	add	r3, r2
 80045c4:	78fa      	ldrb	r2, [r7, #3]
 80045c6:	701a      	strb	r2, [r3, #0]
		ringBuffer->head = 0;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <ringBuffer_pop>:
 * @brief 	Read data from the buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	unsigned 8-bit integer data to be read from the buffer.
 */
uint8_t ringBuffer_pop(RingBuffer* ringBuffer)
{
 80045da:	b480      	push	{r7}
 80045dc:	b085      	sub	sp, #20
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
	uint8_t data;

	if(ringBuffer->tail != (ringBuffer->size - 1))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d00d      	beq.n	800460c <ringBuffer_pop+0x32>
	{
		data = ringBuffer->buffer[ringBuffer->tail];
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	4413      	add	r3, r2
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail += 1;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	605a      	str	r2, [r3, #4]
		return data;
 8004608:	7bfb      	ldrb	r3, [r7, #15]
 800460a:	e00a      	b.n	8004622 <ringBuffer_pop+0x48>
	}
	else
	{

		data = ringBuffer->buffer[ringBuffer->tail];
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	4413      	add	r3, r2
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail = 0;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	605a      	str	r2, [r3, #4]
		return data;
 8004620:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 8004622:	4618      	mov	r0, r3
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <ringBuffer_flush>:
 * @brief 	Clear the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_flush(RingBuffer* ringBuffer)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b082      	sub	sp, #8
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
	memset(ringBuffer->buffer,(uint8_t)0x00,(size_t)ringBuffer->size);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68d8      	ldr	r0, [r3, #12]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	461a      	mov	r2, r3
 8004640:	2100      	movs	r1, #0
 8004642:	f01d f985 	bl	8021950 <memset>
	ringBuffer->head = ringBuffer->tail = 0;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	605a      	str	r2, [r3, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	601a      	str	r2, [r3, #0]
}
 8004654:	bf00      	nop
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <ringBuffer_pushArray>:
 * @param 	RingBuffer typedef structure.
 * @param	data is an unsigned 8-bit data array to be written into the buffer.
 * @retval	None.
 */
void ringBuffer_pushArray(RingBuffer* ringBuffer, uint8_t* data)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
	 for(int i = 0; i<strlen((char*)data);i++)
 8004666:	2300      	movs	r3, #0
 8004668:	60fb      	str	r3, [r7, #12]
 800466a:	e00a      	b.n	8004682 <ringBuffer_pushArray+0x26>
		 ringBuffer_push(ringBuffer, data[i]);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	4413      	add	r3, r2
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	4619      	mov	r1, r3
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7ff ff85 	bl	8004586 <ringBuffer_push>
	 for(int i = 0; i<strlen((char*)data);i++)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	3301      	adds	r3, #1
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	6838      	ldr	r0, [r7, #0]
 8004684:	f7fb fdda 	bl	800023c <strlen>
 8004688:	4602      	mov	r2, r0
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	429a      	cmp	r2, r3
 800468e:	d8ed      	bhi.n	800466c <ringBuffer_pushArray+0x10>
}
 8004690:	bf00      	nop
 8004692:	bf00      	nop
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <ringBuffer_lookFor>:
 * @param	data is an unsigned 8-bit array to be searched in the buffer.
 * @retval	1: data is available in the buffer.
 * @retval	0: data is not available in the buffer.
 */
uint32_t ringBuffer_lookFor(RingBuffer* ringBuffer, uint8_t* data)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b084      	sub	sp, #16
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
 80046a2:	6039      	str	r1, [r7, #0]
	char* str = strstr((char*)ringBuffer->buffer,(char*)data);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	6839      	ldr	r1, [r7, #0]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f01e f8ce 	bl	802284c <strstr>
 80046b0:	60f8      	str	r0, [r7, #12]

	if(str != NULL)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <ringBuffer_lookFor+0x22>
		return 1;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e000      	b.n	80046be <ringBuffer_lookFor+0x24>
	else
		return 0;
 80046bc:	2300      	movs	r3, #0

}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <ringBuffer_capacity>:
 * @brief 	Check the size of the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	Size of ring buffer.
 */
uint32_t ringBuffer_capacity(RingBuffer* ringBuffer)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b083      	sub	sp, #12
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
	return ringBuffer->size;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group5setupEv>:
TEST_GROUP(RingBuffer_Test_Group)
{

	RingBuffer* testBuf;

	void setup()
 80046de:	b580      	push	{r7, lr}
 80046e0:	b082      	sub	sp, #8
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
	{

	   testBuf = ringBuffer_init(50);
 80046e6:	2032      	movs	r0, #50	; 0x32
 80046e8:	f7ff ff0c 	bl	8004504 <ringBuffer_init>
 80046ec:	4602      	mov	r2, r0
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	605a      	str	r2, [r3, #4]

	}
 80046f2:	bf00      	nop
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group8teardownEv>:

	void teardown()
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b082      	sub	sp, #8
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
	{

		ringBuffer_deInit(testBuf);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff ff26 	bl	8004558 <ringBuffer_deInit>
	}
 800470c:	bf00      	nop
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>:
TEST_GROUP(RingBuffer_Test_Group)
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4618      	mov	r0, r3
 8004720:	f011 f83e 	bl	80157a0 <_ZN5UtestC1Ev>
 8004724:	4a03      	ldr	r2, [pc, #12]	; (8004734 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev+0x20>)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4618      	mov	r0, r3
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	080299ec 	.word	0x080299ec

08004738 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>:
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	4a05      	ldr	r2, [pc, #20]	; (8004758 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev+0x20>)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	601a      	str	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4618      	mov	r0, r3
 800474a:	f011 f839 	bl	80157c0 <_ZN5UtestD1Ev>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4618      	mov	r0, r3
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	080299ec 	.word	0x080299ec

0800475c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD0Ev>:
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f7ff ffe7 	bl	8004738 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800476a:	2108      	movs	r1, #8
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f007 f85b 	bl	800b828 <_ZdlPvj>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4618      	mov	r0, r3
 8004776:	3708      	adds	r7, #8
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>:
};


TEST(RingBuffer_Test_Group, InitTest)
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	601a      	str	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	605a      	str	r2, [r3, #4]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff ffbe 	bl	8004714 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004798:	4a03      	ldr	r2, [pc, #12]	; (80047a8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev+0x2c>)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4618      	mov	r0, r3
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	080299cc 	.word	0x080299cc

080047ac <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv>:
 80047ac:	b590      	push	{r4, r7, lr}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	2229      	movs	r2, #41	; 0x29
 80047b6:	4906      	ldr	r1, [pc, #24]	; (80047d0 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv+0x24>)
 80047b8:	2008      	movs	r0, #8
 80047ba:	f007 f821 	bl	800b800 <_ZnwjPKci>
 80047be:	4604      	mov	r4, r0
 80047c0:	4620      	mov	r0, r4
 80047c2:	f7ff ffdb 	bl	800477c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>
 80047c6:	4623      	mov	r3, r4
 80047c8:	4618      	mov	r0, r3
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd90      	pop	{r4, r7, pc}
 80047d0:	0802490c 	.word	0x0802490c

080047d4 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>:
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4618      	mov	r0, r3
 80047e0:	f00f fbfc 	bl	8013fdc <_ZN10UtestShellC1Ev>
 80047e4:	4a03      	ldr	r2, [pc, #12]	; (80047f4 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev+0x20>)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4618      	mov	r0, r3
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	08029920 	.word	0x08029920

080047f8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv>:
{
 80047f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047fa:	b087      	sub	sp, #28
 80047fc:	af04      	add	r7, sp, #16
 80047fe:	6078      	str	r0, [r7, #4]

   LONGS_EQUAL(50,testBuf->size);
 8004800:	f010 ffa4 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8004804:	4604      	mov	r4, r0
 8004806:	6823      	ldr	r3, [r4, #0]
 8004808:	3338      	adds	r3, #56	; 0x38
 800480a:	681d      	ldr	r5, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	461e      	mov	r6, r3
 8004814:	f010 ffaa 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004818:	4603      	mov	r3, r0
 800481a:	9302      	str	r3, [sp, #8]
 800481c:	232c      	movs	r3, #44	; 0x2c
 800481e:	9301      	str	r3, [sp, #4]
 8004820:	4b2a      	ldr	r3, [pc, #168]	; (80048cc <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	4b2a      	ldr	r3, [pc, #168]	; (80048d0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd8>)
 8004826:	4632      	mov	r2, r6
 8004828:	2132      	movs	r1, #50	; 0x32
 800482a:	4620      	mov	r0, r4
 800482c:	47a8      	blx	r5
   CHECK(testBuf->buffer != NULL);
 800482e:	f010 ff8d 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8004832:	4604      	mov	r4, r0
 8004834:	6823      	ldr	r3, [r4, #0]
 8004836:	3320      	adds	r3, #32
 8004838:	681d      	ldr	r5, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	2b00      	cmp	r3, #0
 8004842:	bf14      	ite	ne
 8004844:	2301      	movne	r3, #1
 8004846:	2300      	moveq	r3, #0
 8004848:	b2de      	uxtb	r6, r3
 800484a:	f010 ff8f 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800484e:	4603      	mov	r3, r0
 8004850:	9303      	str	r3, [sp, #12]
 8004852:	232d      	movs	r3, #45	; 0x2d
 8004854:	9302      	str	r3, [sp, #8]
 8004856:	4b1d      	ldr	r3, [pc, #116]	; (80048cc <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004858:	9301      	str	r3, [sp, #4]
 800485a:	2300      	movs	r3, #0
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	4b1d      	ldr	r3, [pc, #116]	; (80048d4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xdc>)
 8004860:	4a1d      	ldr	r2, [pc, #116]	; (80048d8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe0>)
 8004862:	4631      	mov	r1, r6
 8004864:	4620      	mov	r0, r4
 8004866:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->head);
 8004868:	f010 ff70 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 800486c:	4604      	mov	r4, r0
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	3338      	adds	r3, #56	; 0x38
 8004872:	681d      	ldr	r5, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	461e      	mov	r6, r3
 800487c:	f010 ff76 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004880:	4603      	mov	r3, r0
 8004882:	9302      	str	r3, [sp, #8]
 8004884:	232e      	movs	r3, #46	; 0x2e
 8004886:	9301      	str	r3, [sp, #4]
 8004888:	4b10      	ldr	r3, [pc, #64]	; (80048cc <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	4b13      	ldr	r3, [pc, #76]	; (80048dc <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe4>)
 800488e:	4632      	mov	r2, r6
 8004890:	2100      	movs	r1, #0
 8004892:	4620      	mov	r0, r4
 8004894:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->tail);
 8004896:	f010 ff59 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 800489a:	4604      	mov	r4, r0
 800489c:	6823      	ldr	r3, [r4, #0]
 800489e:	3338      	adds	r3, #56	; 0x38
 80048a0:	681d      	ldr	r5, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	461e      	mov	r6, r3
 80048aa:	f010 ff5f 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80048ae:	4603      	mov	r3, r0
 80048b0:	9302      	str	r3, [sp, #8]
 80048b2:	232f      	movs	r3, #47	; 0x2f
 80048b4:	9301      	str	r3, [sp, #4]
 80048b6:	4b05      	ldr	r3, [pc, #20]	; (80048cc <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	4b09      	ldr	r3, [pc, #36]	; (80048e0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe8>)
 80048bc:	4632      	mov	r2, r6
 80048be:	2100      	movs	r1, #0
 80048c0:	4620      	mov	r0, r4
 80048c2:	47a8      	blx	r5

}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048cc:	0802490c 	.word	0x0802490c
 80048d0:	0802492c 	.word	0x0802492c
 80048d4:	08024954 	.word	0x08024954
 80048d8:	0802496c 	.word	0x0802496c
 80048dc:	08024974 	.word	0x08024974
 80048e0:	0802499c 	.word	0x0802499c

080048e4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushDataTests)
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	605a      	str	r2, [r3, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7ff ff0a 	bl	8004714 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004900:	4a03      	ldr	r2, [pc, #12]	; (8004910 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev+0x2c>)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	601a      	str	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4618      	mov	r0, r3
 800490a:	3708      	adds	r7, #8
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	08029900 	.word	0x08029900

08004914 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv>:
 8004914:	b590      	push	{r4, r7, lr}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	2233      	movs	r2, #51	; 0x33
 800491e:	4906      	ldr	r1, [pc, #24]	; (8004938 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv+0x24>)
 8004920:	2008      	movs	r0, #8
 8004922:	f006 ff6d 	bl	800b800 <_ZnwjPKci>
 8004926:	4604      	mov	r4, r0
 8004928:	4620      	mov	r0, r4
 800492a:	f7ff ffdb 	bl	80048e4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>
 800492e:	4623      	mov	r3, r4
 8004930:	4618      	mov	r0, r3
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	bd90      	pop	{r4, r7, pc}
 8004938:	0802490c 	.word	0x0802490c

0800493c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>:
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4618      	mov	r0, r3
 8004948:	f00f fb48 	bl	8013fdc <_ZN10UtestShellC1Ev>
 800494c:	4a03      	ldr	r2, [pc, #12]	; (800495c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev+0x20>)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	601a      	str	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4618      	mov	r0, r3
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	08029854 	.word	0x08029854

08004960 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv>:
{
 8004960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004962:	b087      	sub	sp, #28
 8004964:	af04      	add	r7, sp, #16
 8004966:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0x45);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	2145      	movs	r1, #69	; 0x45
 800496e:	4618      	mov	r0, r3
 8004970:	f7ff fe09 	bl	8004586 <ringBuffer_push>
	LONGS_EQUAL(0x45,testBuf->buffer[0]);
 8004974:	f010 feea 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8004978:	4604      	mov	r4, r0
 800497a:	6823      	ldr	r3, [r4, #0]
 800497c:	3338      	adds	r3, #56	; 0x38
 800497e:	681d      	ldr	r5, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	461e      	mov	r6, r3
 800498a:	f010 feef 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800498e:	4603      	mov	r3, r0
 8004990:	9302      	str	r3, [sp, #8]
 8004992:	2336      	movs	r3, #54	; 0x36
 8004994:	9301      	str	r3, [sp, #4]
 8004996:	4b15      	ldr	r3, [pc, #84]	; (80049ec <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	4b15      	ldr	r3, [pc, #84]	; (80049f0 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x90>)
 800499c:	4632      	mov	r2, r6
 800499e:	2145      	movs	r1, #69	; 0x45
 80049a0:	4620      	mov	r0, r4
 80049a2:	47a8      	blx	r5

	ringBuffer_push(testBuf, 0x10);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2110      	movs	r1, #16
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7ff fdeb 	bl	8004586 <ringBuffer_push>
	LONGS_EQUAL(0x10,testBuf->buffer[1]);
 80049b0:	f010 fecc 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 80049b4:	4604      	mov	r4, r0
 80049b6:	6823      	ldr	r3, [r4, #0]
 80049b8:	3338      	adds	r3, #56	; 0x38
 80049ba:	681d      	ldr	r5, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	3301      	adds	r3, #1
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	461e      	mov	r6, r3
 80049c8:	f010 fed0 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80049cc:	4603      	mov	r3, r0
 80049ce:	9302      	str	r3, [sp, #8]
 80049d0:	2339      	movs	r3, #57	; 0x39
 80049d2:	9301      	str	r3, [sp, #4]
 80049d4:	4b05      	ldr	r3, [pc, #20]	; (80049ec <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	4b06      	ldr	r3, [pc, #24]	; (80049f4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x94>)
 80049da:	4632      	mov	r2, r6
 80049dc:	2110      	movs	r1, #16
 80049de:	4620      	mov	r0, r4
 80049e0:	47a8      	blx	r5

}
 80049e2:	bf00      	nop
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049ea:	bf00      	nop
 80049ec:	0802490c 	.word	0x0802490c
 80049f0:	080249c4 	.word	0x080249c4
 80049f4:	080249f4 	.word	0x080249f4

080049f8 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferOverflowTest)
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	605a      	str	r2, [r3, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7ff fe80 	bl	8004714 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004a14:	4a03      	ldr	r2, [pc, #12]	; (8004a24 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev+0x2c>)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	08029834 	.word	0x08029834

08004a28 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv>:
 8004a28:	b590      	push	{r4, r7, lr}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	223d      	movs	r2, #61	; 0x3d
 8004a32:	4906      	ldr	r1, [pc, #24]	; (8004a4c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv+0x24>)
 8004a34:	2008      	movs	r0, #8
 8004a36:	f006 fee3 	bl	800b800 <_ZnwjPKci>
 8004a3a:	4604      	mov	r4, r0
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	f7ff ffdb 	bl	80049f8 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>
 8004a42:	4623      	mov	r3, r4
 8004a44:	4618      	mov	r0, r3
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd90      	pop	{r4, r7, pc}
 8004a4c:	0802490c 	.word	0x0802490c

08004a50 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>:
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f00f fabe 	bl	8013fdc <_ZN10UtestShellC1Ev>
 8004a60:	4a03      	ldr	r2, [pc, #12]	; (8004a70 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev+0x20>)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	601a      	str	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3708      	adds	r7, #8
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	08029788 	.word	0x08029788

08004a74 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv>:
{
 8004a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a76:	b089      	sub	sp, #36	; 0x24
 8004a78:	af04      	add	r7, sp, #16
 8004a7a:	6078      	str	r0, [r7, #4]
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	60fb      	str	r3, [r7, #12]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	3b01      	subs	r3, #1
 8004a92:	429a      	cmp	r2, r3
 8004a94:	bf0c      	ite	eq
 8004a96:	2301      	moveq	r3, #1
 8004a98:	2300      	movne	r3, #0
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	da0b      	bge.n	8004abc <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x48>
	{
		ringBuffer_push(testBuf, (uint8_t)i);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	b2d2      	uxtb	r2, r2
 8004aac:	4611      	mov	r1, r2
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7ff fd69 	bl	8004586 <ringBuffer_push>
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	e7e3      	b.n	8004a84 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x10>
	}

	ringBuffer_push(testBuf, 0xFF);			// This data must be the first element of buffer.
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	21ff      	movs	r1, #255	; 0xff
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7ff fd5f 	bl	8004586 <ringBuffer_push>
	LONGS_EQUAL(0xFF,testBuf->buffer[0]);
 8004ac8:	f010 fe40 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8004acc:	4604      	mov	r4, r0
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	3338      	adds	r3, #56	; 0x38
 8004ad2:	681d      	ldr	r5, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	461e      	mov	r6, r3
 8004ade:	f010 fe45 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	9302      	str	r3, [sp, #8]
 8004ae6:	2345      	movs	r3, #69	; 0x45
 8004ae8:	9301      	str	r3, [sp, #4]
 8004aea:	4b05      	ldr	r3, [pc, #20]	; (8004b00 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x8c>)
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	4b05      	ldr	r3, [pc, #20]	; (8004b04 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x90>)
 8004af0:	4632      	mov	r2, r6
 8004af2:	21ff      	movs	r1, #255	; 0xff
 8004af4:	4620      	mov	r0, r4
 8004af6:	47a8      	blx	r5
}
 8004af8:	bf00      	nop
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b00:	0802490c 	.word	0x0802490c
 8004b04:	08024a24 	.word	0x08024a24

08004b08 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopDataTests)
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	605a      	str	r2, [r3, #4]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7ff fdf8 	bl	8004714 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004b24:	4a03      	ldr	r2, [pc, #12]	; (8004b34 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev+0x2c>)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	08029768 	.word	0x08029768

08004b38 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv>:
 8004b38:	b590      	push	{r4, r7, lr}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	2248      	movs	r2, #72	; 0x48
 8004b42:	4906      	ldr	r1, [pc, #24]	; (8004b5c <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv+0x24>)
 8004b44:	2008      	movs	r0, #8
 8004b46:	f006 fe5b 	bl	800b800 <_ZnwjPKci>
 8004b4a:	4604      	mov	r4, r0
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	f7ff ffdb 	bl	8004b08 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>
 8004b52:	4623      	mov	r3, r4
 8004b54:	4618      	mov	r0, r3
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd90      	pop	{r4, r7, pc}
 8004b5c:	0802490c 	.word	0x0802490c

08004b60 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>:
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f00f fa36 	bl	8013fdc <_ZN10UtestShellC1Ev>
 8004b70:	4a03      	ldr	r2, [pc, #12]	; (8004b80 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev+0x20>)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3708      	adds	r7, #8
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	080296bc 	.word	0x080296bc

08004b84 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv>:
{
 8004b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b86:	b089      	sub	sp, #36	; 0x24
 8004b88:	af04      	add	r7, sp, #16
 8004b8a:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0xFF);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	21ff      	movs	r1, #255	; 0xff
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7ff fcf7 	bl	8004586 <ringBuffer_push>
	uint8_t data = ringBuffer_pop(testBuf); // 0xFF
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7ff fd1c 	bl	80045da <ringBuffer_pop>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	73fb      	strb	r3, [r7, #15]

	LONGS_EQUAL(0xFF,data);
 8004ba6:	f010 fdd1 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8004baa:	4604      	mov	r4, r0
 8004bac:	6823      	ldr	r3, [r4, #0]
 8004bae:	3338      	adds	r3, #56	; 0x38
 8004bb0:	681d      	ldr	r5, [r3, #0]
 8004bb2:	7bfe      	ldrb	r6, [r7, #15]
 8004bb4:	f010 fdda 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	9302      	str	r3, [sp, #8]
 8004bbc:	234d      	movs	r3, #77	; 0x4d
 8004bbe:	9301      	str	r3, [sp, #4]
 8004bc0:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x54>)
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x58>)
 8004bc6:	4632      	mov	r2, r6
 8004bc8:	21ff      	movs	r1, #255	; 0xff
 8004bca:	4620      	mov	r0, r4
 8004bcc:	47a8      	blx	r5

}
 8004bce:	bf00      	nop
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	0802490c 	.word	0x0802490c
 8004bdc:	08024a54 	.word	0x08024a54

08004be0 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	605a      	str	r2, [r3, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7ff fd8c 	bl	8004714 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004bfc:	4a03      	ldr	r2, [pc, #12]	; (8004c0c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev+0x2c>)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4618      	mov	r0, r3
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	0802969c 	.word	0x0802969c

08004c10 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv>:
 8004c10:	b590      	push	{r4, r7, lr}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	2251      	movs	r2, #81	; 0x51
 8004c1a:	4906      	ldr	r1, [pc, #24]	; (8004c34 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv+0x24>)
 8004c1c:	2008      	movs	r0, #8
 8004c1e:	f006 fdef 	bl	800b800 <_ZnwjPKci>
 8004c22:	4604      	mov	r4, r0
 8004c24:	4620      	mov	r0, r4
 8004c26:	f7ff ffdb 	bl	8004be0 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>
 8004c2a:	4623      	mov	r3, r4
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd90      	pop	{r4, r7, pc}
 8004c34:	0802490c 	.word	0x0802490c

08004c38 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>:
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f00f f9ca 	bl	8013fdc <_ZN10UtestShellC1Ev>
 8004c48:	4a03      	ldr	r2, [pc, #12]	; (8004c58 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev+0x20>)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4618      	mov	r0, r3
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	080295f0 	.word	0x080295f0

08004c5c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv>:
{
 8004c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c5e:	b089      	sub	sp, #36	; 0x24
 8004c60:	af04      	add	r7, sp, #16
 8004c62:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 8004c64:	2300      	movs	r3, #0
 8004c66:	72fb      	strb	r3, [r7, #11]

	ringBuffer_push(testBuf, 0xAA);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	21aa      	movs	r1, #170	; 0xaa
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7ff fc89 	bl	8004586 <ringBuffer_push>

	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	bf0c      	ite	eq
 8004c8e:	2301      	moveq	r3, #1
 8004c90:	2300      	movne	r3, #0
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	461a      	mov	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	da0a      	bge.n	8004cb2 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x56>
	{
		data = ringBuffer_pop(testBuf);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7ff fc9a 	bl	80045da <ringBuffer_pop>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	72fb      	strb	r3, [r7, #11]
	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	3301      	adds	r3, #1
 8004cae:	60fb      	str	r3, [r7, #12]
 8004cb0:	e7e4      	b.n	8004c7c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x20>
	}

	data = ringBuffer_pop(testBuf);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7ff fc8f 	bl	80045da <ringBuffer_pop>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	72fb      	strb	r3, [r7, #11]

	LONGS_EQUAL(0xAA,data);
 8004cc0:	f010 fd44 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8004cc4:	4604      	mov	r4, r0
 8004cc6:	6823      	ldr	r3, [r4, #0]
 8004cc8:	3338      	adds	r3, #56	; 0x38
 8004cca:	681d      	ldr	r5, [r3, #0]
 8004ccc:	7afe      	ldrb	r6, [r7, #11]
 8004cce:	f010 fd4d 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	9302      	str	r3, [sp, #8]
 8004cd6:	235e      	movs	r3, #94	; 0x5e
 8004cd8:	9301      	str	r3, [sp, #4]
 8004cda:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x94>)
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x98>)
 8004ce0:	4632      	mov	r2, r6
 8004ce2:	21aa      	movs	r1, #170	; 0xaa
 8004ce4:	4620      	mov	r0, r4
 8004ce6:	47a8      	blx	r5
}
 8004ce8:	bf00      	nop
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cf0:	0802490c 	.word	0x0802490c
 8004cf4:	08024a74 	.word	0x08024a74

08004cf8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferFlushTest)
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	605a      	str	r2, [r3, #4]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7ff fd00 	bl	8004714 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004d14:	4a03      	ldr	r2, [pc, #12]	; (8004d24 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev+0x2c>)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3708      	adds	r7, #8
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	080295d0 	.word	0x080295d0

08004d28 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv>:
 8004d28:	b590      	push	{r4, r7, lr}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	2261      	movs	r2, #97	; 0x61
 8004d32:	4906      	ldr	r1, [pc, #24]	; (8004d4c <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv+0x24>)
 8004d34:	2008      	movs	r0, #8
 8004d36:	f006 fd63 	bl	800b800 <_ZnwjPKci>
 8004d3a:	4604      	mov	r4, r0
 8004d3c:	4620      	mov	r0, r4
 8004d3e:	f7ff ffdb 	bl	8004cf8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>
 8004d42:	4623      	mov	r3, r4
 8004d44:	4618      	mov	r0, r3
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd90      	pop	{r4, r7, pc}
 8004d4c:	0802490c 	.word	0x0802490c

08004d50 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>:
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f00f f93e 	bl	8013fdc <_ZN10UtestShellC1Ev>
 8004d60:	4a03      	ldr	r2, [pc, #12]	; (8004d70 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev+0x20>)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	08029524 	.word	0x08029524

08004d74 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv>:
{
 8004d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d76:	b089      	sub	sp, #36	; 0x24
 8004d78:	af04      	add	r7, sp, #16
 8004d7a:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	60fb      	str	r3, [r7, #12]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d20b      	bcs.n	8004da4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0x30>
	{
		ringBuffer_push(testBuf,(uint8_t)i);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	b2d2      	uxtb	r2, r2
 8004d94:	4611      	mov	r1, r2
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7ff fbf5 	bl	8004586 <ringBuffer_push>
	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	e7ed      	b.n	8004d80 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xc>
	}
	LONGS_EQUAL(49,testBuf->buffer[testBuf->size - 1]);
 8004da4:	f010 fcd2 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8004da8:	4604      	mov	r4, r0
 8004daa:	6823      	ldr	r3, [r4, #0]
 8004dac:	3338      	adds	r3, #56	; 0x38
 8004dae:	681d      	ldr	r5, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	4413      	add	r3, r2
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	461e      	mov	r6, r3
 8004dc4:	f010 fcd2 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	9302      	str	r3, [sp, #8]
 8004dcc:	2368      	movs	r3, #104	; 0x68
 8004dce:	9301      	str	r3, [sp, #4]
 8004dd0:	4b24      	ldr	r3, [pc, #144]	; (8004e64 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004dd2:	9300      	str	r3, [sp, #0]
 8004dd4:	4b24      	ldr	r3, [pc, #144]	; (8004e68 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf4>)
 8004dd6:	4632      	mov	r2, r6
 8004dd8:	2131      	movs	r1, #49	; 0x31
 8004dda:	4620      	mov	r0, r4
 8004ddc:	47a8      	blx	r5

	ringBuffer_flush(testBuf);  // clear the buffer
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7ff fc23 	bl	800462e <ringBuffer_flush>

	LONGS_EQUAL(0,testBuf->buffer[testBuf->size - 1]);
 8004de8:	f010 fcb0 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8004dec:	4604      	mov	r4, r0
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	3338      	adds	r3, #56	; 0x38
 8004df2:	681d      	ldr	r5, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	68da      	ldr	r2, [r3, #12]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	3b01      	subs	r3, #1
 8004e02:	4413      	add	r3, r2
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	461e      	mov	r6, r3
 8004e08:	f010 fcb0 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	9302      	str	r3, [sp, #8]
 8004e10:	236c      	movs	r3, #108	; 0x6c
 8004e12:	9301      	str	r3, [sp, #4]
 8004e14:	4b13      	ldr	r3, [pc, #76]	; (8004e64 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	4b14      	ldr	r3, [pc, #80]	; (8004e6c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf8>)
 8004e1a:	4632      	mov	r2, r6
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	4620      	mov	r0, r4
 8004e20:	47a8      	blx	r5
	LONGS_EQUAL(0,testBuf->buffer[testBuf->size/2]);    // check random value  (buffer[25]);
 8004e22:	f010 fc93 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8004e26:	4604      	mov	r4, r0
 8004e28:	6823      	ldr	r3, [r4, #0]
 8004e2a:	3338      	adds	r3, #56	; 0x38
 8004e2c:	681d      	ldr	r5, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	68da      	ldr	r2, [r3, #12]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	085b      	lsrs	r3, r3, #1
 8004e3c:	4413      	add	r3, r2
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	461e      	mov	r6, r3
 8004e42:	f010 fc93 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004e46:	4603      	mov	r3, r0
 8004e48:	9302      	str	r3, [sp, #8]
 8004e4a:	236d      	movs	r3, #109	; 0x6d
 8004e4c:	9301      	str	r3, [sp, #4]
 8004e4e:	4b05      	ldr	r3, [pc, #20]	; (8004e64 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	4b07      	ldr	r3, [pc, #28]	; (8004e70 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xfc>)
 8004e54:	4632      	mov	r2, r6
 8004e56:	2100      	movs	r1, #0
 8004e58:	4620      	mov	r0, r4
 8004e5a:	47a8      	blx	r5
//	for(uint32_t i = 0;i < testBuf->size;i++)  // check all the elements of the buffer
//	{
//		LONGS_EQUAL(0,testBuf->buffer[i]);
//	}

}
 8004e5c:	bf00      	nop
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e64:	0802490c 	.word	0x0802490c
 8004e68:	08024a94 	.word	0x08024a94
 8004e6c:	08024ad0 	.word	0x08024ad0
 8004e70:	08024b0c 	.word	0x08024b0c

08004e74 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushArrayTest)
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	605a      	str	r2, [r3, #4]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7ff fc42 	bl	8004714 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004e90:	4a03      	ldr	r2, [pc, #12]	; (8004ea0 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev+0x2c>)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3708      	adds	r7, #8
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	08029504 	.word	0x08029504

08004ea4 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv>:
 8004ea4:	b590      	push	{r4, r7, lr}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	2276      	movs	r2, #118	; 0x76
 8004eae:	4906      	ldr	r1, [pc, #24]	; (8004ec8 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv+0x24>)
 8004eb0:	2008      	movs	r0, #8
 8004eb2:	f006 fca5 	bl	800b800 <_ZnwjPKci>
 8004eb6:	4604      	mov	r4, r0
 8004eb8:	4620      	mov	r0, r4
 8004eba:	f7ff ffdb 	bl	8004e74 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>
 8004ebe:	4623      	mov	r3, r4
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd90      	pop	{r4, r7, pc}
 8004ec8:	0802490c 	.word	0x0802490c

08004ecc <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>:
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f00f f880 	bl	8013fdc <_ZN10UtestShellC1Ev>
 8004edc:	4a03      	ldr	r2, [pc, #12]	; (8004eec <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev+0x20>)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	601a      	str	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3708      	adds	r7, #8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	08029458 	.word	0x08029458

08004ef0 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv>:
{
 8004ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af04      	add	r7, sp, #16
 8004ef6:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Test");
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	490e      	ldr	r1, [pc, #56]	; (8004f38 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7ff fbac 	bl	800465c <ringBuffer_pushArray>

	STRCMP_EQUAL("Test",(char*)testBuf->buffer);
 8004f04:	f010 fc22 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8004f08:	4604      	mov	r4, r0
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	3324      	adds	r3, #36	; 0x24
 8004f0e:	681d      	ldr	r5, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	68de      	ldr	r6, [r3, #12]
 8004f16:	f010 fc29 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	9302      	str	r3, [sp, #8]
 8004f1e:	237a      	movs	r3, #122	; 0x7a
 8004f20:	9301      	str	r3, [sp, #4]
 8004f22:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x4c>)
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	2300      	movs	r3, #0
 8004f28:	4632      	mov	r2, r6
 8004f2a:	4903      	ldr	r1, [pc, #12]	; (8004f38 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	47a8      	blx	r5
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f38:	08024b44 	.word	0x08024b44
 8004f3c:	0802490c 	.word	0x0802490c

08004f40 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, LookForTest)
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	601a      	str	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	605a      	str	r2, [r3, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7ff fbdc 	bl	8004714 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004f5c:	4a03      	ldr	r2, [pc, #12]	; (8004f6c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev+0x2c>)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4618      	mov	r0, r3
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	08029438 	.word	0x08029438

08004f70 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv>:
 8004f70:	b590      	push	{r4, r7, lr}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	227d      	movs	r2, #125	; 0x7d
 8004f7a:	4906      	ldr	r1, [pc, #24]	; (8004f94 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv+0x24>)
 8004f7c:	2008      	movs	r0, #8
 8004f7e:	f006 fc3f 	bl	800b800 <_ZnwjPKci>
 8004f82:	4604      	mov	r4, r0
 8004f84:	4620      	mov	r0, r4
 8004f86:	f7ff ffdb 	bl	8004f40 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>
 8004f8a:	4623      	mov	r3, r4
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd90      	pop	{r4, r7, pc}
 8004f94:	0802490c 	.word	0x0802490c

08004f98 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>:
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f00f f81a 	bl	8013fdc <_ZN10UtestShellC1Ev>
 8004fa8:	4a03      	ldr	r2, [pc, #12]	; (8004fb8 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev+0x20>)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	0802938c 	.word	0x0802938c

08004fbc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv>:
{
 8004fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fc0:	b08a      	sub	sp, #40	; 0x28
 8004fc2:	af04      	add	r7, sp, #16
 8004fc4:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Hello World");
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	494e      	ldr	r1, [pc, #312]	; (8005104 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7ff fb45 	bl	800465c <ringBuffer_pushArray>

	STRCMP_EQUAL("Hello World",(char*)testBuf->buffer);
 8004fd2:	f010 fbbb 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8004fd6:	4604      	mov	r4, r0
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	3324      	adds	r3, #36	; 0x24
 8004fdc:	681d      	ldr	r5, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	68de      	ldr	r6, [r3, #12]
 8004fe4:	f010 fbc2 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	9302      	str	r3, [sp, #8]
 8004fec:	2381      	movs	r3, #129	; 0x81
 8004fee:	9301      	str	r3, [sp, #4]
 8004ff0:	4b45      	ldr	r3, [pc, #276]	; (8005108 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	4632      	mov	r2, r6
 8004ff8:	4942      	ldr	r1, [pc, #264]	; (8005104 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	47a8      	blx	r5
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	4942      	ldr	r1, [pc, #264]	; (800510c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8005004:	4618      	mov	r0, r3
 8005006:	f7ff fb48 	bl	800469a <ringBuffer_lookFor>
 800500a:	4603      	mov	r3, r0
 800500c:	2b01      	cmp	r3, #1
 800500e:	bf14      	ite	ne
 8005010:	2301      	movne	r3, #1
 8005012:	2300      	moveq	r3, #0
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d05c      	beq.n	80050d4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x118>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	493b      	ldr	r1, [pc, #236]	; (800510c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8005020:	4618      	mov	r0, r3
 8005022:	f7ff fb3a 	bl	800469a <ringBuffer_lookFor>
 8005026:	4604      	mov	r4, r0
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	4937      	ldr	r1, [pc, #220]	; (800510c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 800502e:	4618      	mov	r0, r3
 8005030:	f7ff fb33 	bl	800469a <ringBuffer_lookFor>
 8005034:	4603      	mov	r3, r0
 8005036:	429c      	cmp	r4, r3
 8005038:	bf14      	ite	ne
 800503a:	2301      	movne	r3, #1
 800503c:	2300      	moveq	r3, #0
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b00      	cmp	r3, #0
 8005042:	d008      	beq.n	8005056 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x9a>
 8005044:	f010 fb82 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8005048:	6803      	ldr	r3, [r0, #0]
 800504a:	3370      	adds	r3, #112	; 0x70
 800504c:	681c      	ldr	r4, [r3, #0]
 800504e:	2382      	movs	r3, #130	; 0x82
 8005050:	4a2d      	ldr	r2, [pc, #180]	; (8005108 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8005052:	492f      	ldr	r1, [pc, #188]	; (8005110 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x154>)
 8005054:	47a0      	blx	r4
 8005056:	f010 fb79 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 800505a:	4604      	mov	r4, r0
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	3358      	adds	r3, #88	; 0x58
 8005060:	681d      	ldr	r5, [r3, #0]
 8005062:	f107 0308 	add.w	r3, r7, #8
 8005066:	2101      	movs	r1, #1
 8005068:	4618      	mov	r0, r3
 800506a:	f009 fe0b 	bl	800ec84 <_Z10StringFromi>
 800506e:	f107 0308 	add.w	r3, r7, #8
 8005072:	4618      	mov	r0, r3
 8005074:	f009 fb12 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 8005078:	4606      	mov	r6, r0
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	4923      	ldr	r1, [pc, #140]	; (800510c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8005080:	4618      	mov	r0, r3
 8005082:	f7ff fb0a 	bl	800469a <ringBuffer_lookFor>
 8005086:	4602      	mov	r2, r0
 8005088:	f107 0310 	add.w	r3, r7, #16
 800508c:	4611      	mov	r1, r2
 800508e:	4618      	mov	r0, r3
 8005090:	f00a f872 	bl	800f178 <_Z10StringFromm>
 8005094:	f107 0310 	add.w	r3, r7, #16
 8005098:	4618      	mov	r0, r3
 800509a:	f009 faff 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 800509e:	4680      	mov	r8, r0
 80050a0:	f010 fb64 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80050a4:	4603      	mov	r3, r0
 80050a6:	9303      	str	r3, [sp, #12]
 80050a8:	2382      	movs	r3, #130	; 0x82
 80050aa:	9302      	str	r3, [sp, #8]
 80050ac:	4b16      	ldr	r3, [pc, #88]	; (8005108 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 80050ae:	9301      	str	r3, [sp, #4]
 80050b0:	2300      	movs	r3, #0
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	4643      	mov	r3, r8
 80050b6:	4632      	mov	r2, r6
 80050b8:	2101      	movs	r1, #1
 80050ba:	4620      	mov	r0, r4
 80050bc:	47a8      	blx	r5
 80050be:	f107 0310 	add.w	r3, r7, #16
 80050c2:	4618      	mov	r0, r3
 80050c4:	f009 fb17 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80050c8:	f107 0308 	add.w	r3, r7, #8
 80050cc:	4618      	mov	r0, r3
 80050ce:	f009 fb12 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 80050d2:	e012      	b.n	80050fa <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x13e>
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 80050d4:	f010 fb3a 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 80050d8:	4604      	mov	r4, r0
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	3338      	adds	r3, #56	; 0x38
 80050de:	681d      	ldr	r5, [r3, #0]
 80050e0:	f010 fb44 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80050e4:	4603      	mov	r3, r0
 80050e6:	9302      	str	r3, [sp, #8]
 80050e8:	2382      	movs	r3, #130	; 0x82
 80050ea:	9301      	str	r3, [sp, #4]
 80050ec:	4b06      	ldr	r3, [pc, #24]	; (8005108 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	2300      	movs	r3, #0
 80050f2:	2200      	movs	r2, #0
 80050f4:	2100      	movs	r1, #0
 80050f6:	4620      	mov	r0, r4
 80050f8:	47a8      	blx	r5
}
 80050fa:	bf00      	nop
 80050fc:	3718      	adds	r7, #24
 80050fe:	46bd      	mov	sp, r7
 8005100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005104:	08024b4c 	.word	0x08024b4c
 8005108:	0802490c 	.word	0x0802490c
 800510c:	08024b58 	.word	0x08024b58
 8005110:	08024b60 	.word	0x08024b60

08005114 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, CapacityTest)
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	605a      	str	r2, [r3, #4]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4618      	mov	r0, r3
 800512c:	f7ff faf2 	bl	8004714 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8005130:	4a03      	ldr	r2, [pc, #12]	; (8005140 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev+0x2c>)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4618      	mov	r0, r3
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	0802936c 	.word	0x0802936c

08005144 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv>:
 8005144:	b590      	push	{r4, r7, lr}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	2285      	movs	r2, #133	; 0x85
 800514e:	4906      	ldr	r1, [pc, #24]	; (8005168 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv+0x24>)
 8005150:	2008      	movs	r0, #8
 8005152:	f006 fb55 	bl	800b800 <_ZnwjPKci>
 8005156:	4604      	mov	r4, r0
 8005158:	4620      	mov	r0, r4
 800515a:	f7ff ffdb 	bl	8005114 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>
 800515e:	4623      	mov	r3, r4
 8005160:	4618      	mov	r0, r3
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	bd90      	pop	{r4, r7, pc}
 8005168:	0802490c 	.word	0x0802490c

0800516c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>:
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4618      	mov	r0, r3
 8005178:	f00e ff30 	bl	8013fdc <_ZN10UtestShellC1Ev>
 800517c:	4a03      	ldr	r2, [pc, #12]	; (800518c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev+0x20>)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	601a      	str	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4618      	mov	r0, r3
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	080292c0 	.word	0x080292c0

08005190 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv>:
{
 8005190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005192:	b087      	sub	sp, #28
 8005194:	af04      	add	r7, sp, #16
 8005196:	6078      	str	r0, [r7, #4]

	LONGS_EQUAL(50,ringBuffer_capacity(testBuf));
 8005198:	f010 fad8 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 800519c:	4604      	mov	r4, r0
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	3338      	adds	r3, #56	; 0x38
 80051a2:	681d      	ldr	r5, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7ff fa8c 	bl	80046c6 <ringBuffer_capacity>
 80051ae:	4603      	mov	r3, r0
 80051b0:	461e      	mov	r6, r3
 80051b2:	f010 fadb 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80051b6:	4603      	mov	r3, r0
 80051b8:	9302      	str	r3, [sp, #8]
 80051ba:	2388      	movs	r3, #136	; 0x88
 80051bc:	9301      	str	r3, [sp, #4]
 80051be:	4b05      	ldr	r3, [pc, #20]	; (80051d4 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x44>)
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	4b05      	ldr	r3, [pc, #20]	; (80051d8 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x48>)
 80051c4:	4632      	mov	r2, r6
 80051c6:	2132      	movs	r1, #50	; 0x32
 80051c8:	4620      	mov	r0, r4
 80051ca:	47a8      	blx	r5

}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051d4:	0802490c 	.word	0x0802490c
 80051d8:	08024c04 	.word	0x08024c04

080051dc <_Z18UART_Transmit_FakePh>:

/* Mpck functions-----------------------------------------------------------------------*/

void UART_Transmit_Fake(uint8_t* data)
{
 80051dc:	b5b0      	push	{r4, r5, r7, lr}
 80051de:	b088      	sub	sp, #32
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]

	mock().actualCall("UART_Transmit_Fake").withStringParameter("data", (char*)data);
 80051e4:	f107 0308 	add.w	r3, r7, #8
 80051e8:	491d      	ldr	r1, [pc, #116]	; (8005260 <_Z18UART_Transmit_FakePh+0x84>)
 80051ea:	4618      	mov	r0, r3
 80051ec:	f008 fecb 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80051f0:	f107 0308 	add.w	r3, r7, #8
 80051f4:	2100      	movs	r1, #0
 80051f6:	4618      	mov	r0, r3
 80051f8:	f006 ff9e 	bl	800c138 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80051fc:	4604      	mov	r4, r0
 80051fe:	6823      	ldr	r3, [r4, #0]
 8005200:	3318      	adds	r3, #24
 8005202:	681d      	ldr	r5, [r3, #0]
 8005204:	f107 0310 	add.w	r3, r7, #16
 8005208:	4916      	ldr	r1, [pc, #88]	; (8005264 <_Z18UART_Transmit_FakePh+0x88>)
 800520a:	4618      	mov	r0, r3
 800520c:	f008 febb 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8005210:	f107 0310 	add.w	r3, r7, #16
 8005214:	4619      	mov	r1, r3
 8005216:	4620      	mov	r0, r4
 8005218:	47a8      	blx	r5
 800521a:	4604      	mov	r4, r0
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	333c      	adds	r3, #60	; 0x3c
 8005220:	681d      	ldr	r5, [r3, #0]
 8005222:	f107 0318 	add.w	r3, r7, #24
 8005226:	4910      	ldr	r1, [pc, #64]	; (8005268 <_Z18UART_Transmit_FakePh+0x8c>)
 8005228:	4618      	mov	r0, r3
 800522a:	f008 feac 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800522e:	f107 0318 	add.w	r3, r7, #24
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	4619      	mov	r1, r3
 8005236:	4620      	mov	r0, r4
 8005238:	47a8      	blx	r5
 800523a:	f107 0318 	add.w	r3, r7, #24
 800523e:	4618      	mov	r0, r3
 8005240:	f009 fa59 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8005244:	f107 0310 	add.w	r3, r7, #16
 8005248:	4618      	mov	r0, r3
 800524a:	f009 fa54 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800524e:	f107 0308 	add.w	r3, r7, #8
 8005252:	4618      	mov	r0, r3
 8005254:	f009 fa4f 	bl	800e6f6 <_ZN12SimpleStringD1Ev>

}
 8005258:	bf00      	nop
 800525a:	3720      	adds	r7, #32
 800525c:	46bd      	mov	sp, r7
 800525e:	bdb0      	pop	{r4, r5, r7, pc}
 8005260:	08024c3c 	.word	0x08024c3c
 8005264:	08024c40 	.word	0x08024c40
 8005268:	08024c54 	.word	0x08024c54

0800526c <_Z17UART_Receive_Fakev>:
uint8_t UART_Receive_Fake(void)
{
 800526c:	b5b0      	push	{r4, r5, r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0

	return mock().actualCall("UART_Receive_Fake").returnIntValue();
 8005272:	463b      	mov	r3, r7
 8005274:	4916      	ldr	r1, [pc, #88]	; (80052d0 <_Z17UART_Receive_Fakev+0x64>)
 8005276:	4618      	mov	r0, r3
 8005278:	f008 fe85 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800527c:	463b      	mov	r3, r7
 800527e:	2100      	movs	r1, #0
 8005280:	4618      	mov	r0, r3
 8005282:	f006 ff59 	bl	800c138 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005286:	4604      	mov	r4, r0
 8005288:	6823      	ldr	r3, [r4, #0]
 800528a:	3318      	adds	r3, #24
 800528c:	681d      	ldr	r5, [r3, #0]
 800528e:	f107 0308 	add.w	r3, r7, #8
 8005292:	4910      	ldr	r1, [pc, #64]	; (80052d4 <_Z17UART_Receive_Fakev+0x68>)
 8005294:	4618      	mov	r0, r3
 8005296:	f008 fe76 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800529a:	f107 0308 	add.w	r3, r7, #8
 800529e:	4619      	mov	r1, r3
 80052a0:	4620      	mov	r0, r4
 80052a2:	47a8      	blx	r5
 80052a4:	4603      	mov	r3, r0
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	3264      	adds	r2, #100	; 0x64
 80052aa:	6812      	ldr	r2, [r2, #0]
 80052ac:	4618      	mov	r0, r3
 80052ae:	4790      	blx	r2
 80052b0:	4603      	mov	r3, r0
 80052b2:	b2dc      	uxtb	r4, r3
 80052b4:	f107 0308 	add.w	r3, r7, #8
 80052b8:	4618      	mov	r0, r3
 80052ba:	f009 fa1c 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80052be:	463b      	mov	r3, r7
 80052c0:	4618      	mov	r0, r3
 80052c2:	f009 fa18 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80052c6:	4623      	mov	r3, r4
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bdb0      	pop	{r4, r5, r7, pc}
 80052d0:	08024c3c 	.word	0x08024c3c
 80052d4:	08024c5c 	.word	0x08024c5c

080052d8 <_Z12getTick_Fakev>:

uint32_t time=0;

uint32_t getTick_Fake(void)
{
 80052d8:	b480      	push	{r7}
 80052da:	af00      	add	r7, sp, #0
	if(time == 0xFFFFFFFF)
 80052dc:	4b0a      	ldr	r3, [pc, #40]	; (8005308 <_Z12getTick_Fakev+0x30>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e4:	d103      	bne.n	80052ee <_Z12getTick_Fakev+0x16>
		time = 0;
 80052e6:	4b08      	ldr	r3, [pc, #32]	; (8005308 <_Z12getTick_Fakev+0x30>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	e004      	b.n	80052f8 <_Z12getTick_Fakev+0x20>
	else
		time += 1;
 80052ee:	4b06      	ldr	r3, [pc, #24]	; (8005308 <_Z12getTick_Fakev+0x30>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	3301      	adds	r3, #1
 80052f4:	4a04      	ldr	r2, [pc, #16]	; (8005308 <_Z12getTick_Fakev+0x30>)
 80052f6:	6013      	str	r3, [r2, #0]
	return time;
 80052f8:	4b03      	ldr	r3, [pc, #12]	; (8005308 <_Z12getTick_Fakev+0x30>)
 80052fa:	681b      	ldr	r3, [r3, #0]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	200004a0 	.word	0x200004a0

0800530c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv>:
/* Test functions of the ring buffer-----------------------------------------------------------------------*/

TEST_GROUP(EspDriver_Test_Group)
{

	void setup()
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
	{
		ESP_Init(UART_Transmit_Fake,
 8005314:	2364      	movs	r3, #100	; 0x64
 8005316:	4a04      	ldr	r2, [pc, #16]	; (8005328 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x1c>)
 8005318:	4904      	ldr	r1, [pc, #16]	; (800532c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x20>)
 800531a:	4805      	ldr	r0, [pc, #20]	; (8005330 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x24>)
 800531c:	f7fe fcaa 	bl	8003c74 <ESP_Init>
				  UART_Receive_Fake,
				  getTick_Fake,
				  100);					// buffer size

	}
 8005320:	bf00      	nop
 8005322:	3708      	adds	r7, #8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	080052d9 	.word	0x080052d9
 800532c:	0800526d 	.word	0x0800526d
 8005330:	080051dd 	.word	0x080051dd

08005334 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv>:

	void teardown()
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
	{

		mock().checkExpectations();
 800533c:	f107 0308 	add.w	r3, r7, #8
 8005340:	4917      	ldr	r1, [pc, #92]	; (80053a0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 8005342:	4618      	mov	r0, r3
 8005344:	f008 fe1f 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8005348:	f107 0308 	add.w	r3, r7, #8
 800534c:	2100      	movs	r1, #0
 800534e:	4618      	mov	r0, r3
 8005350:	f006 fef2 	bl	800c138 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005354:	4603      	mov	r3, r0
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	3294      	adds	r2, #148	; 0x94
 800535a:	6812      	ldr	r2, [r2, #0]
 800535c:	4618      	mov	r0, r3
 800535e:	4790      	blx	r2
 8005360:	f107 0308 	add.w	r3, r7, #8
 8005364:	4618      	mov	r0, r3
 8005366:	f009 f9c6 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
		mock().clear();
 800536a:	f107 0310 	add.w	r3, r7, #16
 800536e:	490c      	ldr	r1, [pc, #48]	; (80053a0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 8005370:	4618      	mov	r0, r3
 8005372:	f008 fe08 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8005376:	f107 0310 	add.w	r3, r7, #16
 800537a:	2100      	movs	r1, #0
 800537c:	4618      	mov	r0, r3
 800537e:	f006 fedb 	bl	800c138 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005382:	4603      	mov	r3, r0
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	329c      	adds	r2, #156	; 0x9c
 8005388:	6812      	ldr	r2, [r2, #0]
 800538a:	4618      	mov	r0, r3
 800538c:	4790      	blx	r2
 800538e:	f107 0310 	add.w	r3, r7, #16
 8005392:	4618      	mov	r0, r3
 8005394:	f009 f9af 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
	}
 8005398:	bf00      	nop
 800539a:	3718      	adds	r7, #24
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	08024c3c 	.word	0x08024c3c

080053a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>:
TEST_GROUP(EspDriver_Test_Group)
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f010 f9f6 	bl	80157a0 <_ZN5UtestC1Ev>
 80053b4:	4a03      	ldr	r2, [pc, #12]	; (80053c4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev+0x20>)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4618      	mov	r0, r3
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	080292a0 	.word	0x080292a0

080053c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>:
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	4a05      	ldr	r2, [pc, #20]	; (80053e8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev+0x20>)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4618      	mov	r0, r3
 80053da:	f010 f9f1 	bl	80157c0 <_ZN5UtestD1Ev>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4618      	mov	r0, r3
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	080292a0 	.word	0x080292a0

080053ec <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD0Ev>:
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f7ff ffe7 	bl	80053c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80053fa:	2104      	movs	r1, #4
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f006 fa13 	bl	800b828 <_ZdlPvj>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4618      	mov	r0, r3
 8005406:	3708      	adds	r7, #8
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>:


};

TEST(EspDriver_Test_Group, Esp_Init_Test)
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4618      	mov	r0, r3
 8005418:	f7ff ffc4 	bl	80053a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 800541c:	4a03      	ldr	r2, [pc, #12]	; (800542c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev+0x20>)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4618      	mov	r0, r3
 8005426:	3708      	adds	r7, #8
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	08029280 	.word	0x08029280

08005430 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv>:
 8005430:	b590      	push	{r4, r7, lr}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	22c0      	movs	r2, #192	; 0xc0
 800543a:	4906      	ldr	r1, [pc, #24]	; (8005454 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv+0x24>)
 800543c:	2004      	movs	r0, #4
 800543e:	f006 f9df 	bl	800b800 <_ZnwjPKci>
 8005442:	4604      	mov	r4, r0
 8005444:	4620      	mov	r0, r4
 8005446:	f7ff ffe1 	bl	800540c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>
 800544a:	4623      	mov	r3, r4
 800544c:	4618      	mov	r0, r3
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	bd90      	pop	{r4, r7, pc}
 8005454:	0802490c 	.word	0x0802490c

08005458 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>:
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4618      	mov	r0, r3
 8005464:	f00e fdba 	bl	8013fdc <_ZN10UtestShellC1Ev>
 8005468:	4a03      	ldr	r2, [pc, #12]	; (8005478 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev+0x20>)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4618      	mov	r0, r3
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	080291d4 	.word	0x080291d4

0800547c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv>:
{
 800547c:	b5b0      	push	{r4, r5, r7, lr}
 800547e:	b088      	sub	sp, #32
 8005480:	af04      	add	r7, sp, #16
 8005482:	6078      	str	r0, [r7, #4]

	transmit = UART_Transmit_Fake; 			// or you can pass UART_Transmit_Fake as a parameter to the function instead of transmit.
 8005484:	4b10      	ldr	r3, [pc, #64]	; (80054c8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 8005486:	4a11      	ldr	r2, [pc, #68]	; (80054cc <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x50>)
 8005488:	601a      	str	r2, [r3, #0]
	int32_t result = ESP_Init(transmit,
 800548a:	4b0f      	ldr	r3, [pc, #60]	; (80054c8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 800548c:	6818      	ldr	r0, [r3, #0]
 800548e:	2364      	movs	r3, #100	; 0x64
 8005490:	4a0f      	ldr	r2, [pc, #60]	; (80054d0 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x54>)
 8005492:	4910      	ldr	r1, [pc, #64]	; (80054d4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x58>)
 8005494:	f7fe fbee 	bl	8003c74 <ESP_Init>
 8005498:	60f8      	str	r0, [r7, #12]
//	int result = ESP_Init(UART_Transmit_Fake,
//						  UART_Receive_Fake,
//						  getTick_Fake,
//	  	  	  	  	  	  100);

	LONGS_EQUAL(1,result);
 800549a:	f010 f957 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 800549e:	4604      	mov	r4, r0
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	3338      	adds	r3, #56	; 0x38
 80054a4:	681d      	ldr	r5, [r3, #0]
 80054a6:	f010 f961 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80054aa:	4603      	mov	r3, r0
 80054ac:	9302      	str	r3, [sp, #8]
 80054ae:	23ce      	movs	r3, #206	; 0xce
 80054b0:	9301      	str	r3, [sp, #4]
 80054b2:	4b09      	ldr	r3, [pc, #36]	; (80054d8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x5c>)
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	4b09      	ldr	r3, [pc, #36]	; (80054dc <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x60>)
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	2101      	movs	r1, #1
 80054bc:	4620      	mov	r0, r4
 80054be:	47a8      	blx	r5

}
 80054c0:	bf00      	nop
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bdb0      	pop	{r4, r5, r7, pc}
 80054c8:	200004a4 	.word	0x200004a4
 80054cc:	080051dd 	.word	0x080051dd
 80054d0:	080052d9 	.word	0x080052d9
 80054d4:	0800526d 	.word	0x0800526d
 80054d8:	0802490c 	.word	0x0802490c
 80054dc:	08024c70 	.word	0x08024c70

080054e0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7ff ff5a 	bl	80053a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80054f0:	4a03      	ldr	r2, [pc, #12]	; (8005500 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev+0x20>)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4618      	mov	r0, r3
 80054fa:	3708      	adds	r7, #8
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	080291b4 	.word	0x080291b4

08005504 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv>:
 8005504:	b590      	push	{r4, r7, lr}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	22d2      	movs	r2, #210	; 0xd2
 800550e:	4906      	ldr	r1, [pc, #24]	; (8005528 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv+0x24>)
 8005510:	2004      	movs	r0, #4
 8005512:	f006 f975 	bl	800b800 <_ZnwjPKci>
 8005516:	4604      	mov	r4, r0
 8005518:	4620      	mov	r0, r4
 800551a:	f7ff ffe1 	bl	80054e0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>
 800551e:	4623      	mov	r3, r4
 8005520:	4618      	mov	r0, r3
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	bd90      	pop	{r4, r7, pc}
 8005528:	0802490c 	.word	0x0802490c

0800552c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>:
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4618      	mov	r0, r3
 8005538:	f00e fd50 	bl	8013fdc <_ZN10UtestShellC1Ev>
 800553c:	4a03      	ldr	r2, [pc, #12]	; (800554c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev+0x20>)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4618      	mov	r0, r3
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	08029108 	.word	0x08029108

08005550 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv>:
{
 8005550:	b5b0      	push	{r4, r5, r7, lr}
 8005552:	b08e      	sub	sp, #56	; 0x38
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "Test");  // UART_Transmit_Fake function waits "Test" string.
 8005558:	f107 0308 	add.w	r3, r7, #8
 800555c:	493d      	ldr	r1, [pc, #244]	; (8005654 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x104>)
 800555e:	4618      	mov	r0, r3
 8005560:	f008 fd11 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8005564:	f107 0308 	add.w	r3, r7, #8
 8005568:	2100      	movs	r1, #0
 800556a:	4618      	mov	r0, r3
 800556c:	f006 fde4 	bl	800c138 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005570:	4604      	mov	r4, r0
 8005572:	6823      	ldr	r3, [r4, #0]
 8005574:	330c      	adds	r3, #12
 8005576:	681d      	ldr	r5, [r3, #0]
 8005578:	f107 0310 	add.w	r3, r7, #16
 800557c:	4936      	ldr	r1, [pc, #216]	; (8005658 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x108>)
 800557e:	4618      	mov	r0, r3
 8005580:	f008 fd01 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8005584:	f107 0310 	add.w	r3, r7, #16
 8005588:	4619      	mov	r1, r3
 800558a:	4620      	mov	r0, r4
 800558c:	47a8      	blx	r5
 800558e:	4604      	mov	r4, r0
 8005590:	6823      	ldr	r3, [r4, #0]
 8005592:	334c      	adds	r3, #76	; 0x4c
 8005594:	681d      	ldr	r5, [r3, #0]
 8005596:	f107 0318 	add.w	r3, r7, #24
 800559a:	4930      	ldr	r1, [pc, #192]	; (800565c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x10c>)
 800559c:	4618      	mov	r0, r3
 800559e:	f008 fcf2 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80055a2:	f107 0318 	add.w	r3, r7, #24
 80055a6:	4a2e      	ldr	r2, [pc, #184]	; (8005660 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x110>)
 80055a8:	4619      	mov	r1, r3
 80055aa:	4620      	mov	r0, r4
 80055ac:	47a8      	blx	r5
 80055ae:	f107 0318 	add.w	r3, r7, #24
 80055b2:	4618      	mov	r0, r3
 80055b4:	f009 f89f 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80055b8:	f107 0310 	add.w	r3, r7, #16
 80055bc:	4618      	mov	r0, r3
 80055be:	f009 f89a 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80055c2:	f107 0308 	add.w	r3, r7, #8
 80055c6:	4618      	mov	r0, r3
 80055c8:	f009 f895 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "AT\r\n");
 80055cc:	f107 0320 	add.w	r3, r7, #32
 80055d0:	4920      	ldr	r1, [pc, #128]	; (8005654 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x104>)
 80055d2:	4618      	mov	r0, r3
 80055d4:	f008 fcd7 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80055d8:	f107 0320 	add.w	r3, r7, #32
 80055dc:	2100      	movs	r1, #0
 80055de:	4618      	mov	r0, r3
 80055e0:	f006 fdaa 	bl	800c138 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80055e4:	4604      	mov	r4, r0
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	330c      	adds	r3, #12
 80055ea:	681d      	ldr	r5, [r3, #0]
 80055ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055f0:	4919      	ldr	r1, [pc, #100]	; (8005658 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x108>)
 80055f2:	4618      	mov	r0, r3
 80055f4:	f008 fcc7 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80055f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055fc:	4619      	mov	r1, r3
 80055fe:	4620      	mov	r0, r4
 8005600:	47a8      	blx	r5
 8005602:	4604      	mov	r4, r0
 8005604:	6823      	ldr	r3, [r4, #0]
 8005606:	334c      	adds	r3, #76	; 0x4c
 8005608:	681d      	ldr	r5, [r3, #0]
 800560a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800560e:	4913      	ldr	r1, [pc, #76]	; (800565c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x10c>)
 8005610:	4618      	mov	r0, r3
 8005612:	f008 fcb8 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8005616:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800561a:	4a12      	ldr	r2, [pc, #72]	; (8005664 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x114>)
 800561c:	4619      	mov	r1, r3
 800561e:	4620      	mov	r0, r4
 8005620:	47a8      	blx	r5
 8005622:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005626:	4618      	mov	r0, r3
 8005628:	f009 f865 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800562c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005630:	4618      	mov	r0, r3
 8005632:	f009 f860 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8005636:	f107 0320 	add.w	r3, r7, #32
 800563a:	4618      	mov	r0, r3
 800563c:	f009 f85b 	bl	800e6f6 <_ZN12SimpleStringD1Ev>

	Send_AT_Command((char*)"Test");
 8005640:	4807      	ldr	r0, [pc, #28]	; (8005660 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x110>)
 8005642:	f7fe fb49 	bl	8003cd8 <Send_AT_Command>
	Send_AT_Command((char*)"AT\r\n");
 8005646:	4807      	ldr	r0, [pc, #28]	; (8005664 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x114>)
 8005648:	f7fe fb46 	bl	8003cd8 <Send_AT_Command>

	// There is no assertion macro here because the function returns nothing.
	// Mocking library checks if the function has been called.
}
 800564c:	bf00      	nop
 800564e:	3738      	adds	r7, #56	; 0x38
 8005650:	46bd      	mov	sp, r7
 8005652:	bdb0      	pop	{r4, r5, r7, pc}
 8005654:	08024c3c 	.word	0x08024c3c
 8005658:	08024c40 	.word	0x08024c40
 800565c:	08024c54 	.word	0x08024c54
 8005660:	08024b44 	.word	0x08024b44
 8005664:	08024c90 	.word	0x08024c90

08005668 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4618      	mov	r0, r3
 8005674:	f7ff fe96 	bl	80053a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005678:	4a03      	ldr	r2, [pc, #12]	; (8005688 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev+0x20>)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	601a      	str	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4618      	mov	r0, r3
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	080290e8 	.word	0x080290e8

0800568c <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv>:
 800568c:	b590      	push	{r4, r7, lr}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	22de      	movs	r2, #222	; 0xde
 8005696:	4906      	ldr	r1, [pc, #24]	; (80056b0 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv+0x24>)
 8005698:	2004      	movs	r0, #4
 800569a:	f006 f8b1 	bl	800b800 <_ZnwjPKci>
 800569e:	4604      	mov	r4, r0
 80056a0:	4620      	mov	r0, r4
 80056a2:	f7ff ffe1 	bl	8005668 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>
 80056a6:	4623      	mov	r3, r4
 80056a8:	4618      	mov	r0, r3
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd90      	pop	{r4, r7, pc}
 80056b0:	0802490c 	.word	0x0802490c

080056b4 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>:
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4618      	mov	r0, r3
 80056c0:	f00e fc8c 	bl	8013fdc <_ZN10UtestShellC1Ev>
 80056c4:	4a03      	ldr	r2, [pc, #12]	; (80056d4 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev+0x20>)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	601a      	str	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4618      	mov	r0, r3
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	0802903c 	.word	0x0802903c

080056d8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv>:
{
 80056d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056da:	b08f      	sub	sp, #60	; 0x3c
 80056dc:	af04      	add	r7, sp, #16
 80056de:	6078      	str	r0, [r7, #4]

	const char response[] = "OK\r\n";
 80056e0:	4a31      	ldr	r2, [pc, #196]	; (80057a8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd0>)
 80056e2:	f107 030c 	add.w	r3, r7, #12
 80056e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80056ea:	6018      	str	r0, [r3, #0]
 80056ec:	3304      	adds	r3, #4
 80056ee:	7019      	strb	r1, [r3, #0]

	for(int32_t i=0;i<(int32_t)strlen(response);i++)
 80056f0:	2300      	movs	r3, #0
 80056f2:	627b      	str	r3, [r7, #36]	; 0x24
 80056f4:	f107 030c 	add.w	r3, r7, #12
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7fa fd9f 	bl	800023c <strlen>
 80056fe:	4603      	mov	r3, r0
 8005700:	461a      	mov	r2, r3
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	4293      	cmp	r3, r2
 8005706:	da35      	bge.n	8005774 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x9c>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8005708:	f107 0314 	add.w	r3, r7, #20
 800570c:	4927      	ldr	r1, [pc, #156]	; (80057ac <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd4>)
 800570e:	4618      	mov	r0, r3
 8005710:	f008 fc39 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8005714:	f107 0314 	add.w	r3, r7, #20
 8005718:	2100      	movs	r1, #0
 800571a:	4618      	mov	r0, r3
 800571c:	f006 fd0c 	bl	800c138 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005720:	4604      	mov	r4, r0
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	330c      	adds	r3, #12
 8005726:	681d      	ldr	r5, [r3, #0]
 8005728:	f107 031c 	add.w	r3, r7, #28
 800572c:	4920      	ldr	r1, [pc, #128]	; (80057b0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd8>)
 800572e:	4618      	mov	r0, r3
 8005730:	f008 fc29 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8005734:	f107 031c 	add.w	r3, r7, #28
 8005738:	4619      	mov	r1, r3
 800573a:	4620      	mov	r0, r4
 800573c:	47a8      	blx	r5
 800573e:	4603      	mov	r3, r0
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	3264      	adds	r2, #100	; 0x64
 8005744:	6812      	ldr	r2, [r2, #0]
 8005746:	f107 000c 	add.w	r0, r7, #12
 800574a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800574c:	4401      	add	r1, r0
 800574e:	7809      	ldrb	r1, [r1, #0]
 8005750:	4618      	mov	r0, r3
 8005752:	4790      	blx	r2
 8005754:	f107 031c 	add.w	r3, r7, #28
 8005758:	4618      	mov	r0, r3
 800575a:	f008 ffcc 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800575e:	f107 0314 	add.w	r3, r7, #20
 8005762:	4618      	mov	r0, r3
 8005764:	f008 ffc7 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 8005768:	f7fe fac4 	bl	8003cf4 <ESP_UART_ReceiveHandler>
	for(int32_t i=0;i<(int32_t)strlen(response);i++)
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	3301      	adds	r3, #1
 8005770:	627b      	str	r3, [r7, #36]	; 0x24
 8005772:	e7bf      	b.n	80056f4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1c>
	}

	STRCMP_EQUAL("OK\r\n",(char*)rx_buffer->buffer);	// check the ring buffer.
 8005774:	f00f ffea 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8005778:	4604      	mov	r4, r0
 800577a:	6823      	ldr	r3, [r4, #0]
 800577c:	3324      	adds	r3, #36	; 0x24
 800577e:	681d      	ldr	r5, [r3, #0]
 8005780:	4b0c      	ldr	r3, [pc, #48]	; (80057b4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xdc>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68de      	ldr	r6, [r3, #12]
 8005786:	f00f fff1 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800578a:	4603      	mov	r3, r0
 800578c:	9302      	str	r3, [sp, #8]
 800578e:	23e9      	movs	r3, #233	; 0xe9
 8005790:	9301      	str	r3, [sp, #4]
 8005792:	4b09      	ldr	r3, [pc, #36]	; (80057b8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xe0>)
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	2300      	movs	r3, #0
 8005798:	4632      	mov	r2, r6
 800579a:	4903      	ldr	r1, [pc, #12]	; (80057a8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd0>)
 800579c:	4620      	mov	r0, r4
 800579e:	47a8      	blx	r5

}
 80057a0:	bf00      	nop
 80057a2:	372c      	adds	r7, #44	; 0x2c
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057a8:	08024c98 	.word	0x08024c98
 80057ac:	08024c3c 	.word	0x08024c3c
 80057b0:	08024c5c 	.word	0x08024c5c
 80057b4:	2000037c 	.word	0x2000037c
 80057b8:	0802490c 	.word	0x0802490c

080057bc <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_Response_Test)
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7ff fdec 	bl	80053a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80057cc:	4a03      	ldr	r2, [pc, #12]	; (80057dc <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev+0x20>)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	601a      	str	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4618      	mov	r0, r3
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	0802901c 	.word	0x0802901c

080057e0 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv>:
 80057e0:	b590      	push	{r4, r7, lr}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	22ed      	movs	r2, #237	; 0xed
 80057ea:	4906      	ldr	r1, [pc, #24]	; (8005804 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv+0x24>)
 80057ec:	2004      	movs	r0, #4
 80057ee:	f006 f807 	bl	800b800 <_ZnwjPKci>
 80057f2:	4604      	mov	r4, r0
 80057f4:	4620      	mov	r0, r4
 80057f6:	f7ff ffe1 	bl	80057bc <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>
 80057fa:	4623      	mov	r3, r4
 80057fc:	4618      	mov	r0, r3
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	bd90      	pop	{r4, r7, pc}
 8005804:	0802490c 	.word	0x0802490c

08005808 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>:
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4618      	mov	r0, r3
 8005814:	f00e fbe2 	bl	8013fdc <_ZN10UtestShellC1Ev>
 8005818:	4a03      	ldr	r2, [pc, #12]	; (8005828 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev+0x20>)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4618      	mov	r0, r3
 8005822:	3708      	adds	r7, #8
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	08028f70 	.word	0x08028f70

0800582c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv>:
{
 800582c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800582e:	b08f      	sub	sp, #60	; 0x3c
 8005830:	af04      	add	r7, sp, #16
 8005832:	6078      	str	r0, [r7, #4]
	const char response[] = "OK\r\n";
 8005834:	4a32      	ldr	r2, [pc, #200]	; (8005900 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xd4>)
 8005836:	f107 0308 	add.w	r3, r7, #8
 800583a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800583e:	6018      	str	r0, [r3, #0]
 8005840:	3304      	adds	r3, #4
 8005842:	7019      	strb	r1, [r3, #0]

	for(int i=0;i<(int)strlen(response);i++)
 8005844:	2300      	movs	r3, #0
 8005846:	627b      	str	r3, [r7, #36]	; 0x24
 8005848:	f107 0308 	add.w	r3, r7, #8
 800584c:	4618      	mov	r0, r3
 800584e:	f7fa fcf5 	bl	800023c <strlen>
 8005852:	4603      	mov	r3, r0
 8005854:	461a      	mov	r2, r3
 8005856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005858:	4293      	cmp	r3, r2
 800585a:	da35      	bge.n	80058c8 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x9c>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 800585c:	f107 0310 	add.w	r3, r7, #16
 8005860:	4928      	ldr	r1, [pc, #160]	; (8005904 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xd8>)
 8005862:	4618      	mov	r0, r3
 8005864:	f008 fb8f 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8005868:	f107 0310 	add.w	r3, r7, #16
 800586c:	2100      	movs	r1, #0
 800586e:	4618      	mov	r0, r3
 8005870:	f006 fc62 	bl	800c138 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005874:	4604      	mov	r4, r0
 8005876:	6823      	ldr	r3, [r4, #0]
 8005878:	330c      	adds	r3, #12
 800587a:	681d      	ldr	r5, [r3, #0]
 800587c:	f107 0318 	add.w	r3, r7, #24
 8005880:	4921      	ldr	r1, [pc, #132]	; (8005908 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xdc>)
 8005882:	4618      	mov	r0, r3
 8005884:	f008 fb7f 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8005888:	f107 0318 	add.w	r3, r7, #24
 800588c:	4619      	mov	r1, r3
 800588e:	4620      	mov	r0, r4
 8005890:	47a8      	blx	r5
 8005892:	4603      	mov	r3, r0
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	3264      	adds	r2, #100	; 0x64
 8005898:	6812      	ldr	r2, [r2, #0]
 800589a:	f107 0008 	add.w	r0, r7, #8
 800589e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058a0:	4401      	add	r1, r0
 80058a2:	7809      	ldrb	r1, [r1, #0]
 80058a4:	4618      	mov	r0, r3
 80058a6:	4790      	blx	r2
 80058a8:	f107 0318 	add.w	r3, r7, #24
 80058ac:	4618      	mov	r0, r3
 80058ae:	f008 ff22 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80058b2:	f107 0310 	add.w	r3, r7, #16
 80058b6:	4618      	mov	r0, r3
 80058b8:	f008 ff1d 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 80058bc:	f7fe fa1a 	bl	8003cf4 <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	3301      	adds	r3, #1
 80058c4:	627b      	str	r3, [r7, #36]	; 0x24
 80058c6:	e7bf      	b.n	8005848 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x1c>
	}

	uint32_t result = Read_Response((char*)"OK");
 80058c8:	4810      	ldr	r0, [pc, #64]	; (800590c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe0>)
 80058ca:	f7fe fa25 	bl	8003d18 <Read_Response>
 80058ce:	6238      	str	r0, [r7, #32]

	LONGS_EQUAL(1,result);
 80058d0:	f00f ff3c 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 80058d4:	4604      	mov	r4, r0
 80058d6:	6823      	ldr	r3, [r4, #0]
 80058d8:	3338      	adds	r3, #56	; 0x38
 80058da:	681d      	ldr	r5, [r3, #0]
 80058dc:	6a3e      	ldr	r6, [r7, #32]
 80058de:	f00f ff45 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80058e2:	4603      	mov	r3, r0
 80058e4:	9302      	str	r3, [sp, #8]
 80058e6:	23f9      	movs	r3, #249	; 0xf9
 80058e8:	9301      	str	r3, [sp, #4]
 80058ea:	4b09      	ldr	r3, [pc, #36]	; (8005910 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe4>)
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	4b09      	ldr	r3, [pc, #36]	; (8005914 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe8>)
 80058f0:	4632      	mov	r2, r6
 80058f2:	2101      	movs	r1, #1
 80058f4:	4620      	mov	r0, r4
 80058f6:	47a8      	blx	r5

}
 80058f8:	bf00      	nop
 80058fa:	372c      	adds	r7, #44	; 0x2c
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005900:	08024c98 	.word	0x08024c98
 8005904:	08024c3c 	.word	0x08024c3c
 8005908:	08024c5c 	.word	0x08024c5c
 800590c:	08024898 	.word	0x08024898
 8005910:	0802490c 	.word	0x0802490c
 8005914:	08024c70 	.word	0x08024c70

08005918 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>:


TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4618      	mov	r0, r3
 8005924:	f7ff fd3e 	bl	80053a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005928:	4a03      	ldr	r2, [pc, #12]	; (8005938 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev+0x20>)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	601a      	str	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4618      	mov	r0, r3
 8005932:	3708      	adds	r7, #8
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	08028f50 	.word	0x08028f50

0800593c <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv>:
 800593c:	b590      	push	{r4, r7, lr}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	22fe      	movs	r2, #254	; 0xfe
 8005946:	4906      	ldr	r1, [pc, #24]	; (8005960 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv+0x24>)
 8005948:	2004      	movs	r0, #4
 800594a:	f005 ff59 	bl	800b800 <_ZnwjPKci>
 800594e:	4604      	mov	r4, r0
 8005950:	4620      	mov	r0, r4
 8005952:	f7ff ffe1 	bl	8005918 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>
 8005956:	4623      	mov	r3, r4
 8005958:	4618      	mov	r0, r3
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	bd90      	pop	{r4, r7, pc}
 8005960:	0802490c 	.word	0x0802490c

08005964 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>:
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4618      	mov	r0, r3
 8005970:	f00e fb34 	bl	8013fdc <_ZN10UtestShellC1Ev>
 8005974:	4a03      	ldr	r2, [pc, #12]	; (8005984 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev+0x20>)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4618      	mov	r0, r3
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	08028ea4 	.word	0x08028ea4

08005988 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv>:
{
 8005988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800598a:	b089      	sub	sp, #36	; 0x24
 800598c:	af04      	add	r7, sp, #16
 800598e:	6078      	str	r0, [r7, #4]
	Status response_state = IDLE;
 8005990:	2304      	movs	r3, #4
 8005992:	73fb      	strb	r3, [r7, #15]

	while(1)	// wait the message until timeout occurs.
	{
		response_state = Wait_Response((char*)"OK", 1000);
 8005994:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005998:	4811      	ldr	r0, [pc, #68]	; (80059e0 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x58>)
 800599a:	f7fe f9cf 	bl	8003d3c <Wait_Response>
 800599e:	4603      	mov	r3, r0
 80059a0:	73fb      	strb	r3, [r7, #15]
		if(response_state != IDLE)
 80059a2:	7bfb      	ldrb	r3, [r7, #15]
 80059a4:	2b04      	cmp	r3, #4
 80059a6:	d100      	bne.n	80059aa <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x22>
		response_state = Wait_Response((char*)"OK", 1000);
 80059a8:	e7f4      	b.n	8005994 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0xc>
			break;
 80059aa:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response_state);
 80059ac:	f00f fece 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 80059b0:	4604      	mov	r4, r0
 80059b2:	6823      	ldr	r3, [r4, #0]
 80059b4:	3338      	adds	r3, #56	; 0x38
 80059b6:	681d      	ldr	r5, [r3, #0]
 80059b8:	7bfe      	ldrb	r6, [r7, #15]
 80059ba:	f00f fed7 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80059be:	4603      	mov	r3, r0
 80059c0:	9302      	str	r3, [sp, #8]
 80059c2:	f44f 7385 	mov.w	r3, #266	; 0x10a
 80059c6:	9301      	str	r3, [sp, #4]
 80059c8:	4b06      	ldr	r3, [pc, #24]	; (80059e4 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x5c>)
 80059ca:	9300      	str	r3, [sp, #0]
 80059cc:	4b06      	ldr	r3, [pc, #24]	; (80059e8 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x60>)
 80059ce:	4632      	mov	r2, r6
 80059d0:	2101      	movs	r1, #1
 80059d2:	4620      	mov	r0, r4
 80059d4:	47a8      	blx	r5

}
 80059d6:	bf00      	nop
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059de:	bf00      	nop
 80059e0:	08024898 	.word	0x08024898
 80059e4:	0802490c 	.word	0x0802490c
 80059e8:	08024ca0 	.word	0x08024ca0

080059ec <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_Response_Test)
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff fcd4 	bl	80053a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80059fc:	4a03      	ldr	r2, [pc, #12]	; (8005a0c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev+0x20>)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4618      	mov	r0, r3
 8005a06:	3708      	adds	r7, #8
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	08028e84 	.word	0x08028e84

08005a10 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv>:
 8005a10:	b590      	push	{r4, r7, lr}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8005a1c:	4906      	ldr	r1, [pc, #24]	; (8005a38 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv+0x28>)
 8005a1e:	2004      	movs	r0, #4
 8005a20:	f005 feee 	bl	800b800 <_ZnwjPKci>
 8005a24:	4604      	mov	r4, r0
 8005a26:	4620      	mov	r0, r4
 8005a28:	f7ff ffe0 	bl	80059ec <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>
 8005a2c:	4623      	mov	r3, r4
 8005a2e:	4618      	mov	r0, r3
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd90      	pop	{r4, r7, pc}
 8005a36:	bf00      	nop
 8005a38:	0802490c 	.word	0x0802490c

08005a3c <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>:
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f00e fac8 	bl	8013fdc <_ZN10UtestShellC1Ev>
 8005a4c:	4a03      	ldr	r2, [pc, #12]	; (8005a5c <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev+0x20>)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	601a      	str	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4618      	mov	r0, r3
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	08028dd8 	.word	0x08028dd8

08005a60 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv>:
{
 8005a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a62:	b08f      	sub	sp, #60	; 0x3c
 8005a64:	af04      	add	r7, sp, #16
 8005a66:	6078      	str	r0, [r7, #4]

	Status response_state = IDLE;
 8005a68:	2304      	movs	r3, #4
 8005a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	const char response[] = "OK\r\n";
 8005a6e:	4a38      	ldr	r2, [pc, #224]	; (8005b50 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xf0>)
 8005a70:	f107 0308 	add.w	r3, r7, #8
 8005a74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005a78:	6018      	str	r0, [r3, #0]
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	7019      	strb	r1, [r3, #0]

	while(1)
	{
		response_state = Wait_Response((char*)"OK",1000);
 8005a7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005a82:	4834      	ldr	r0, [pc, #208]	; (8005b54 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xf4>)
 8005a84:	f7fe f95a 	bl	8003d3c <Wait_Response>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if(response_state != IDLE)
 8005a8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	d141      	bne.n	8005b1a <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xba>
			break;
		for(int i=0;i<(int)strlen(response);i++)
 8005a96:	2300      	movs	r3, #0
 8005a98:	627b      	str	r3, [r7, #36]	; 0x24
 8005a9a:	f107 0308 	add.w	r3, r7, #8
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fa fbcc 	bl	800023c <strlen>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	dae7      	bge.n	8005a7e <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x1e>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8005aae:	f107 0310 	add.w	r3, r7, #16
 8005ab2:	4929      	ldr	r1, [pc, #164]	; (8005b58 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xf8>)
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f008 fa66 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8005aba:	f107 0310 	add.w	r3, r7, #16
 8005abe:	2100      	movs	r1, #0
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f006 fb39 	bl	800c138 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005ac6:	4604      	mov	r4, r0
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	330c      	adds	r3, #12
 8005acc:	681d      	ldr	r5, [r3, #0]
 8005ace:	f107 0318 	add.w	r3, r7, #24
 8005ad2:	4922      	ldr	r1, [pc, #136]	; (8005b5c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xfc>)
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f008 fa56 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8005ada:	f107 0318 	add.w	r3, r7, #24
 8005ade:	4619      	mov	r1, r3
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	47a8      	blx	r5
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	3264      	adds	r2, #100	; 0x64
 8005aea:	6812      	ldr	r2, [r2, #0]
 8005aec:	f107 0008 	add.w	r0, r7, #8
 8005af0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005af2:	4401      	add	r1, r0
 8005af4:	7809      	ldrb	r1, [r1, #0]
 8005af6:	4618      	mov	r0, r3
 8005af8:	4790      	blx	r2
 8005afa:	f107 0318 	add.w	r3, r7, #24
 8005afe:	4618      	mov	r0, r3
 8005b00:	f008 fdf9 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8005b04:	f107 0310 	add.w	r3, r7, #16
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f008 fdf4 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8005b0e:	f7fe f8f1 	bl	8003cf4 <ESP_UART_ReceiveHandler>
		for(int i=0;i<(int)strlen(response);i++)
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	3301      	adds	r3, #1
 8005b16:	627b      	str	r3, [r7, #36]	; 0x24
 8005b18:	e7bf      	b.n	8005a9a <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x3a>
			break;
 8005b1a:	bf00      	nop
		}
	}

	LONGS_EQUAL(FOUND,response_state);
 8005b1c:	f00f fe16 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8005b20:	4604      	mov	r4, r0
 8005b22:	6823      	ldr	r3, [r4, #0]
 8005b24:	3338      	adds	r3, #56	; 0x38
 8005b26:	681d      	ldr	r5, [r3, #0]
 8005b28:	f897 6023 	ldrb.w	r6, [r7, #35]	; 0x23
 8005b2c:	f00f fe1e 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005b30:	4603      	mov	r3, r0
 8005b32:	9302      	str	r3, [sp, #8]
 8005b34:	f240 1321 	movw	r3, #289	; 0x121
 8005b38:	9301      	str	r3, [sp, #4]
 8005b3a:	4b09      	ldr	r3, [pc, #36]	; (8005b60 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x100>)
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	4b09      	ldr	r3, [pc, #36]	; (8005b64 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x104>)
 8005b40:	4632      	mov	r2, r6
 8005b42:	2100      	movs	r1, #0
 8005b44:	4620      	mov	r0, r4
 8005b46:	47a8      	blx	r5
}
 8005b48:	bf00      	nop
 8005b4a:	372c      	adds	r7, #44	; 0x2c
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b50:	08024c98 	.word	0x08024c98
 8005b54:	08024898 	.word	0x08024898
 8005b58:	08024c3c 	.word	0x08024c3c
 8005b5c:	08024c5c 	.word	0x08024c5c
 8005b60:	0802490c 	.word	0x0802490c
 8005b64:	08024cd4 	.word	0x08024cd4

08005b68 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7ff fc16 	bl	80053a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005b78:	4a03      	ldr	r2, [pc, #12]	; (8005b88 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4618      	mov	r0, r3
 8005b82:	3708      	adds	r7, #8
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	08028db8 	.word	0x08028db8

08005b8c <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv>:
 8005b8c:	b590      	push	{r4, r7, lr}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	f44f 7292 	mov.w	r2, #292	; 0x124
 8005b98:	4906      	ldr	r1, [pc, #24]	; (8005bb4 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 8005b9a:	2004      	movs	r0, #4
 8005b9c:	f005 fe30 	bl	800b800 <_ZnwjPKci>
 8005ba0:	4604      	mov	r4, r0
 8005ba2:	4620      	mov	r0, r4
 8005ba4:	f7ff ffe0 	bl	8005b68 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>
 8005ba8:	4623      	mov	r3, r4
 8005baa:	4618      	mov	r0, r3
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd90      	pop	{r4, r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	0802490c 	.word	0x0802490c

08005bb8 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>:
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f00e fa0a 	bl	8013fdc <_ZN10UtestShellC1Ev>
 8005bc8:	4a03      	ldr	r2, [pc, #12]	; (8005bd8 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	601a      	str	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	08028d0c 	.word	0x08028d0c

08005bdc <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 8005bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bde:	b08f      	sub	sp, #60	; 0x3c
 8005be0:	af04      	add	r7, sp, #16
 8005be2:	6078      	str	r0, [r7, #4]
	Status response = TIMEOUT_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data",AT_CWMODE_STATION);
 8005bea:	f107 030c 	add.w	r3, r7, #12
 8005bee:	492f      	ldr	r1, [pc, #188]	; (8005cac <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd0>)
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f008 f9c8 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8005bf6:	f107 030c 	add.w	r3, r7, #12
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f006 fa9b 	bl	800c138 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005c02:	4604      	mov	r4, r0
 8005c04:	6823      	ldr	r3, [r4, #0]
 8005c06:	330c      	adds	r3, #12
 8005c08:	681d      	ldr	r5, [r3, #0]
 8005c0a:	f107 0314 	add.w	r3, r7, #20
 8005c0e:	4928      	ldr	r1, [pc, #160]	; (8005cb0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd4>)
 8005c10:	4618      	mov	r0, r3
 8005c12:	f008 f9b8 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8005c16:	f107 0314 	add.w	r3, r7, #20
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	4620      	mov	r0, r4
 8005c1e:	47a8      	blx	r5
 8005c20:	4604      	mov	r4, r0
 8005c22:	6823      	ldr	r3, [r4, #0]
 8005c24:	334c      	adds	r3, #76	; 0x4c
 8005c26:	681d      	ldr	r5, [r3, #0]
 8005c28:	f107 031c 	add.w	r3, r7, #28
 8005c2c:	4921      	ldr	r1, [pc, #132]	; (8005cb4 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd8>)
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f008 f9a9 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8005c34:	f107 031c 	add.w	r3, r7, #28
 8005c38:	4a1f      	ldr	r2, [pc, #124]	; (8005cb8 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xdc>)
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	47a8      	blx	r5
 8005c40:	f107 031c 	add.w	r3, r7, #28
 8005c44:	4618      	mov	r0, r3
 8005c46:	f008 fd56 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8005c4a:	f107 0314 	add.w	r3, r7, #20
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f008 fd51 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8005c54:	f107 030c 	add.w	r3, r7, #12
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f008 fd4c 	bl	800e6f6 <_ZN12SimpleStringD1Ev>

	while(1)
	{

		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 8005c5e:	4917      	ldr	r1, [pc, #92]	; (8005cbc <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe0>)
 8005c60:	4817      	ldr	r0, [pc, #92]	; (8005cc0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe4>)
 8005c62:	f7fe f8ad 	bl	8003dc0 <Connect_Wifi>
 8005c66:	4603      	mov	r3, r0
 8005c68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(response != IDLE)
 8005c6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c70:	2b04      	cmp	r3, #4
 8005c72:	d100      	bne.n	8005c76 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x9a>
		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 8005c74:	e7f3      	b.n	8005c5e <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x82>
		{
			break;
 8005c76:	bf00      	nop
		}

	}


	LONGS_EQUAL(TIMEOUT_ERROR,response);
 8005c78:	f00f fd68 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8005c7c:	4604      	mov	r4, r0
 8005c7e:	6823      	ldr	r3, [r4, #0]
 8005c80:	3338      	adds	r3, #56	; 0x38
 8005c82:	681d      	ldr	r5, [r3, #0]
 8005c84:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8005c88:	f00f fd70 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	9302      	str	r3, [sp, #8]
 8005c90:	f240 1337 	movw	r3, #311	; 0x137
 8005c94:	9301      	str	r3, [sp, #4]
 8005c96:	4b0b      	ldr	r3, [pc, #44]	; (8005cc4 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe8>)
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	4b0b      	ldr	r3, [pc, #44]	; (8005cc8 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xec>)
 8005c9c:	4632      	mov	r2, r6
 8005c9e:	2101      	movs	r1, #1
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	47a8      	blx	r5

}
 8005ca4:	bf00      	nop
 8005ca6:	372c      	adds	r7, #44	; 0x2c
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cac:	08024c3c 	.word	0x08024c3c
 8005cb0:	08024c40 	.word	0x08024c40
 8005cb4:	08024c54 	.word	0x08024c54
 8005cb8:	0802489c 	.word	0x0802489c
 8005cbc:	08024d00 	.word	0x08024d00
 8005cc0:	08024d08 	.word	0x08024d08
 8005cc4:	0802490c 	.word	0x0802490c
 8005cc8:	08024d10 	.word	0x08024d10

08005ccc <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7ff fb64 	bl	80053a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005cdc:	4a03      	ldr	r2, [pc, #12]	; (8005cec <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev+0x20>)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	601a      	str	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3708      	adds	r7, #8
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	08028cec 	.word	0x08028cec

08005cf0 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv>:
 8005cf0:	b590      	push	{r4, r7, lr}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	f240 123b 	movw	r2, #315	; 0x13b
 8005cfc:	4906      	ldr	r1, [pc, #24]	; (8005d18 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv+0x28>)
 8005cfe:	2004      	movs	r0, #4
 8005d00:	f005 fd7e 	bl	800b800 <_ZnwjPKci>
 8005d04:	4604      	mov	r4, r0
 8005d06:	4620      	mov	r0, r4
 8005d08:	f7ff ffe0 	bl	8005ccc <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>
 8005d0c:	4623      	mov	r3, r4
 8005d0e:	4618      	mov	r0, r3
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd90      	pop	{r4, r7, pc}
 8005d16:	bf00      	nop
 8005d18:	0802490c 	.word	0x0802490c

08005d1c <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>:
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f00e f958 	bl	8013fdc <_ZN10UtestShellC1Ev>
 8005d2c:	4a03      	ldr	r2, [pc, #12]	; (8005d3c <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev+0x20>)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	601a      	str	r2, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4618      	mov	r0, r3
 8005d36:	3708      	adds	r7, #8
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	08028c40 	.word	0x08028c40

08005d40 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv>:
{
 8005d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d42:	b0e1      	sub	sp, #388	; 0x184
 8005d44:	af04      	add	r7, sp, #16
 8005d46:	1d3b      	adds	r3, r7, #4
 8005d48:	6018      	str	r0, [r3, #0]
	const char response_arr[3][50] =
 8005d4a:	4a75      	ldr	r2, [pc, #468]	; (8005f20 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1e0>)
 8005d4c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005d50:	4611      	mov	r1, r2
 8005d52:	2296      	movs	r2, #150	; 0x96
 8005d54:	4618      	mov	r0, r3
 8005d56:	f01b fded 	bl	8021934 <memcpy>
	{ "OK\r\n",									// station mode response (AT+CWMODE=1)
	  "OK\r\n",									//  disconnect command response (AT+CWQAP)
	  "ERROR\r\n"								// connect wifi command response (AT+CWJAP="SSID","password")
	};

	const char fake_tx_buffer[3][50] =
 8005d5a:	f107 0308 	add.w	r3, r7, #8
 8005d5e:	4a71      	ldr	r2, [pc, #452]	; (8005f24 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1e4>)
 8005d60:	4618      	mov	r0, r3
 8005d62:	4611      	mov	r1, r2
 8005d64:	2396      	movs	r3, #150	; 0x96
 8005d66:	461a      	mov	r2, r3
 8005d68:	f01b fde4 	bl	8021934 <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005d72:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	dc46      	bgt.n	8005e08 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xc8>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_tx_buffer[i]);
 8005d7a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d7e:	496a      	ldr	r1, [pc, #424]	; (8005f28 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1e8>)
 8005d80:	4618      	mov	r0, r3
 8005d82:	f008 f900 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8005d86:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f006 f9d3 	bl	800c138 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005d92:	4604      	mov	r4, r0
 8005d94:	6823      	ldr	r3, [r4, #0]
 8005d96:	330c      	adds	r3, #12
 8005d98:	681d      	ldr	r5, [r3, #0]
 8005d9a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005d9e:	4963      	ldr	r1, [pc, #396]	; (8005f2c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1ec>)
 8005da0:	4618      	mov	r0, r3
 8005da2:	f008 f8f0 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8005da6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005daa:	4619      	mov	r1, r3
 8005dac:	4620      	mov	r0, r4
 8005dae:	47a8      	blx	r5
 8005db0:	4604      	mov	r4, r0
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	334c      	adds	r3, #76	; 0x4c
 8005db6:	681d      	ldr	r5, [r3, #0]
 8005db8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005dbc:	495c      	ldr	r1, [pc, #368]	; (8005f30 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f0>)
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f008 f8e1 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8005dc4:	f107 0208 	add.w	r2, r7, #8
 8005dc8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005dcc:	2132      	movs	r1, #50	; 0x32
 8005dce:	fb01 f303 	mul.w	r3, r1, r3
 8005dd2:	441a      	add	r2, r3
 8005dd4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005dd8:	4619      	mov	r1, r3
 8005dda:	4620      	mov	r0, r4
 8005ddc:	47a8      	blx	r5
 8005dde:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005de2:	4618      	mov	r0, r3
 8005de4:	f008 fc87 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8005de8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005dec:	4618      	mov	r0, r3
 8005dee:	f008 fc82 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8005df2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005df6:	4618      	mov	r0, r3
 8005df8:	f008 fc7d 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8005dfc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005e00:	3301      	adds	r3, #1
 8005e02:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005e06:	e7b4      	b.n	8005d72 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x32>
	}
	Status response = IDLE;
 8005e08:	2304      	movs	r3, #4
 8005e0a:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
	int i = 0;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8005e14:	4947      	ldr	r1, [pc, #284]	; (8005f34 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f4>)
 8005e16:	4848      	ldr	r0, [pc, #288]	; (8005f38 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f8>)
 8005e18:	f7fd ffd2 	bl	8003dc0 <Connect_Wifi>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
		if(response != IDLE)
 8005e22:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005e26:	2b04      	cmp	r3, #4
 8005e28:	d15d      	bne.n	8005ee6 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1a6>
		{
			break;
		}

		if(i<3)
 8005e2a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	dcf0      	bgt.n	8005e14 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xd4>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005e32:	2300      	movs	r3, #0
 8005e34:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005e38:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8005e3c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005e40:	2132      	movs	r1, #50	; 0x32
 8005e42:	fb01 f303 	mul.w	r3, r1, r3
 8005e46:	4413      	add	r3, r2
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7fa f9f7 	bl	800023c <strlen>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	461a      	mov	r2, r3
 8005e52:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005e56:	4293      	cmp	r3, r2
 8005e58:	da3f      	bge.n	8005eda <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x19a>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8005e5a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005e5e:	4932      	ldr	r1, [pc, #200]	; (8005f28 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1e8>)
 8005e60:	4618      	mov	r0, r3
 8005e62:	f008 f890 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8005e66:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f006 f963 	bl	800c138 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005e72:	4604      	mov	r4, r0
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	330c      	adds	r3, #12
 8005e78:	681d      	ldr	r5, [r3, #0]
 8005e7a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005e7e:	492f      	ldr	r1, [pc, #188]	; (8005f3c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1fc>)
 8005e80:	4618      	mov	r0, r3
 8005e82:	f008 f880 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8005e86:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	47a8      	blx	r5
 8005e90:	4603      	mov	r3, r0
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	3264      	adds	r2, #100	; 0x64
 8005e96:	6812      	ldr	r2, [r2, #0]
 8005e98:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8005e9c:	2032      	movs	r0, #50	; 0x32
 8005e9e:	fb00 f101 	mul.w	r1, r0, r1
 8005ea2:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8005ea6:	4408      	add	r0, r1
 8005ea8:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8005eac:	4401      	add	r1, r0
 8005eae:	39d0      	subs	r1, #208	; 0xd0
 8005eb0:	7809      	ldrb	r1, [r1, #0]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	4790      	blx	r2
 8005eb6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f008 fc1b 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8005ec0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f008 fc16 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8005eca:	f7fd ff13 	bl	8003cf4 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005ece:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005ed8:	e7ae      	b.n	8005e38 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xf8>
			}
			i++;
 8005eda:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005ede:	3301      	adds	r3, #1
 8005ee0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		}

	}
 8005ee4:	e796      	b.n	8005e14 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xd4>
			break;
 8005ee6:	bf00      	nop
	LONGS_EQUAL(STATUS_ERROR,response);
 8005ee8:	f00f fc30 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8005eec:	4604      	mov	r4, r0
 8005eee:	6823      	ldr	r3, [r4, #0]
 8005ef0:	3338      	adds	r3, #56	; 0x38
 8005ef2:	681d      	ldr	r5, [r3, #0]
 8005ef4:	f897 6163 	ldrb.w	r6, [r7, #355]	; 0x163
 8005ef8:	f00f fc38 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005efc:	4603      	mov	r3, r0
 8005efe:	9302      	str	r3, [sp, #8]
 8005f00:	f240 1363 	movw	r3, #355	; 0x163
 8005f04:	9301      	str	r3, [sp, #4]
 8005f06:	4b0e      	ldr	r3, [pc, #56]	; (8005f40 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x200>)
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	4b0e      	ldr	r3, [pc, #56]	; (8005f44 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x204>)
 8005f0c:	4632      	mov	r2, r6
 8005f0e:	2103      	movs	r1, #3
 8005f10:	4620      	mov	r0, r4
 8005f12:	47a8      	blx	r5

}
 8005f14:	bf00      	nop
 8005f16:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	08024d68 	.word	0x08024d68
 8005f24:	08024e00 	.word	0x08024e00
 8005f28:	08024c3c 	.word	0x08024c3c
 8005f2c:	08024c40 	.word	0x08024c40
 8005f30:	08024c54 	.word	0x08024c54
 8005f34:	08024d00 	.word	0x08024d00
 8005f38:	08024d08 	.word	0x08024d08
 8005f3c:	08024c5c 	.word	0x08024c5c
 8005f40:	0802490c 	.word	0x0802490c
 8005f44:	08024d3c 	.word	0x08024d3c

08005f48 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7ff fa26 	bl	80053a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005f58:	4a03      	ldr	r2, [pc, #12]	; (8005f68 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev+0x20>)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	601a      	str	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4618      	mov	r0, r3
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	08028c20 	.word	0x08028c20

08005f6c <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv>:
 8005f6c:	b590      	push	{r4, r7, lr}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	f240 1267 	movw	r2, #359	; 0x167
 8005f78:	4906      	ldr	r1, [pc, #24]	; (8005f94 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv+0x28>)
 8005f7a:	2004      	movs	r0, #4
 8005f7c:	f005 fc40 	bl	800b800 <_ZnwjPKci>
 8005f80:	4604      	mov	r4, r0
 8005f82:	4620      	mov	r0, r4
 8005f84:	f7ff ffe0 	bl	8005f48 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>
 8005f88:	4623      	mov	r3, r4
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd90      	pop	{r4, r7, pc}
 8005f92:	bf00      	nop
 8005f94:	0802490c 	.word	0x0802490c

08005f98 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>:
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f00e f81a 	bl	8013fdc <_ZN10UtestShellC1Ev>
 8005fa8:	4a03      	ldr	r2, [pc, #12]	; (8005fb8 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev+0x20>)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	601a      	str	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3708      	adds	r7, #8
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	08028b74 	.word	0x08028b74

08005fbc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv>:
{
 8005fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fbe:	b0e1      	sub	sp, #388	; 0x184
 8005fc0:	af04      	add	r7, sp, #16
 8005fc2:	1d3b      	adds	r3, r7, #4
 8005fc4:	6018      	str	r0, [r3, #0]
	const char response_arr[3][50] =
 8005fc6:	4a73      	ldr	r2, [pc, #460]	; (8006194 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1d8>)
 8005fc8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005fcc:	4611      	mov	r1, r2
 8005fce:	2296      	movs	r2, #150	; 0x96
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f01b fcaf 	bl	8021934 <memcpy>
	{ "OK\r\n",
	  "OK\r\n",
	  "OK\r\n"
	};

	const char fake_tx_buffer[3][50] =
 8005fd6:	f107 0308 	add.w	r3, r7, #8
 8005fda:	4a6f      	ldr	r2, [pc, #444]	; (8006198 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1dc>)
 8005fdc:	4618      	mov	r0, r3
 8005fde:	4611      	mov	r1, r2
 8005fe0:	2396      	movs	r3, #150	; 0x96
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	f01b fca6 	bl	8021934 <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8005fe8:	2300      	movs	r3, #0
 8005fea:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005fee:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	dc46      	bgt.n	8006084 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xc8>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_tx_buffer[i]);
 8005ff6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005ffa:	4968      	ldr	r1, [pc, #416]	; (800619c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e0>)
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f007 ffc2 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8006002:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006006:	2100      	movs	r1, #0
 8006008:	4618      	mov	r0, r3
 800600a:	f006 f895 	bl	800c138 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800600e:	4604      	mov	r4, r0
 8006010:	6823      	ldr	r3, [r4, #0]
 8006012:	330c      	adds	r3, #12
 8006014:	681d      	ldr	r5, [r3, #0]
 8006016:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800601a:	4961      	ldr	r1, [pc, #388]	; (80061a0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e4>)
 800601c:	4618      	mov	r0, r3
 800601e:	f007 ffb2 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8006022:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006026:	4619      	mov	r1, r3
 8006028:	4620      	mov	r0, r4
 800602a:	47a8      	blx	r5
 800602c:	4604      	mov	r4, r0
 800602e:	6823      	ldr	r3, [r4, #0]
 8006030:	334c      	adds	r3, #76	; 0x4c
 8006032:	681d      	ldr	r5, [r3, #0]
 8006034:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006038:	495a      	ldr	r1, [pc, #360]	; (80061a4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e8>)
 800603a:	4618      	mov	r0, r3
 800603c:	f007 ffa3 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8006040:	f107 0208 	add.w	r2, r7, #8
 8006044:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8006048:	2132      	movs	r1, #50	; 0x32
 800604a:	fb01 f303 	mul.w	r3, r1, r3
 800604e:	441a      	add	r2, r3
 8006050:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006054:	4619      	mov	r1, r3
 8006056:	4620      	mov	r0, r4
 8006058:	47a8      	blx	r5
 800605a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800605e:	4618      	mov	r0, r3
 8006060:	f008 fb49 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8006064:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006068:	4618      	mov	r0, r3
 800606a:	f008 fb44 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800606e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006072:	4618      	mov	r0, r3
 8006074:	f008 fb3f 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8006078:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800607c:	3301      	adds	r3, #1
 800607e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8006082:	e7b4      	b.n	8005fee <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x32>
	}
	Status response;
	int i = 0;
 8006084:	2300      	movs	r3, #0
 8006086:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 800608a:	4947      	ldr	r1, [pc, #284]	; (80061a8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1ec>)
 800608c:	4847      	ldr	r0, [pc, #284]	; (80061ac <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f0>)
 800608e:	f7fd fe97 	bl	8003dc0 <Connect_Wifi>
 8006092:	4603      	mov	r3, r0
 8006094:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
		if(response != IDLE)
 8006098:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 800609c:	2b04      	cmp	r3, #4
 800609e:	d15d      	bne.n	800615c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1a0>
		{
			break;
		}

		if(i<3)
 80060a0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	dcf0      	bgt.n	800608a <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xce>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80060a8:	2300      	movs	r3, #0
 80060aa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80060ae:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80060b2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80060b6:	2132      	movs	r1, #50	; 0x32
 80060b8:	fb01 f303 	mul.w	r3, r1, r3
 80060bc:	4413      	add	r3, r2
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fa f8bc 	bl	800023c <strlen>
 80060c4:	4603      	mov	r3, r0
 80060c6:	461a      	mov	r2, r3
 80060c8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80060cc:	4293      	cmp	r3, r2
 80060ce:	da3f      	bge.n	8006150 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x194>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 80060d0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80060d4:	4931      	ldr	r1, [pc, #196]	; (800619c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e0>)
 80060d6:	4618      	mov	r0, r3
 80060d8:	f007 ff55 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80060dc:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80060e0:	2100      	movs	r1, #0
 80060e2:	4618      	mov	r0, r3
 80060e4:	f006 f828 	bl	800c138 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80060e8:	4604      	mov	r4, r0
 80060ea:	6823      	ldr	r3, [r4, #0]
 80060ec:	330c      	adds	r3, #12
 80060ee:	681d      	ldr	r5, [r3, #0]
 80060f0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80060f4:	492e      	ldr	r1, [pc, #184]	; (80061b0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f4>)
 80060f6:	4618      	mov	r0, r3
 80060f8:	f007 ff45 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80060fc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8006100:	4619      	mov	r1, r3
 8006102:	4620      	mov	r0, r4
 8006104:	47a8      	blx	r5
 8006106:	4603      	mov	r3, r0
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	3264      	adds	r2, #100	; 0x64
 800610c:	6812      	ldr	r2, [r2, #0]
 800610e:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8006112:	2032      	movs	r0, #50	; 0x32
 8006114:	fb00 f101 	mul.w	r1, r0, r1
 8006118:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 800611c:	4408      	add	r0, r1
 800611e:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8006122:	4401      	add	r1, r0
 8006124:	39d0      	subs	r1, #208	; 0xd0
 8006126:	7809      	ldrb	r1, [r1, #0]
 8006128:	4618      	mov	r0, r3
 800612a:	4790      	blx	r2
 800612c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8006130:	4618      	mov	r0, r3
 8006132:	f008 fae0 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8006136:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800613a:	4618      	mov	r0, r3
 800613c:	f008 fadb 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006140:	f7fd fdd8 	bl	8003cf4 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006144:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006148:	3301      	adds	r3, #1
 800614a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800614e:	e7ae      	b.n	80060ae <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xf2>
			}
			i++;
 8006150:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006154:	3301      	adds	r3, #1
 8006156:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		}

	}
 800615a:	e796      	b.n	800608a <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xce>
			break;
 800615c:	bf00      	nop
	LONGS_EQUAL(STATUS_OK,response);
 800615e:	f00f faf5 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8006162:	4604      	mov	r4, r0
 8006164:	6823      	ldr	r3, [r4, #0]
 8006166:	3338      	adds	r3, #56	; 0x38
 8006168:	681d      	ldr	r5, [r3, #0]
 800616a:	f897 6163 	ldrb.w	r6, [r7, #355]	; 0x163
 800616e:	f00f fafd 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006172:	4603      	mov	r3, r0
 8006174:	9302      	str	r3, [sp, #8]
 8006176:	f240 138f 	movw	r3, #399	; 0x18f
 800617a:	9301      	str	r3, [sp, #4]
 800617c:	4b0d      	ldr	r3, [pc, #52]	; (80061b4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f8>)
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	4b0d      	ldr	r3, [pc, #52]	; (80061b8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1fc>)
 8006182:	4632      	mov	r2, r6
 8006184:	2102      	movs	r1, #2
 8006186:	4620      	mov	r0, r4
 8006188:	47a8      	blx	r5

}
 800618a:	bf00      	nop
 800618c:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8006190:	46bd      	mov	sp, r7
 8006192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006194:	08024ec0 	.word	0x08024ec0
 8006198:	08024e00 	.word	0x08024e00
 800619c:	08024c3c 	.word	0x08024c3c
 80061a0:	08024c40 	.word	0x08024c40
 80061a4:	08024c54 	.word	0x08024c54
 80061a8:	08024d00 	.word	0x08024d00
 80061ac:	08024d08 	.word	0x08024d08
 80061b0:	08024c5c 	.word	0x08024c5c
 80061b4:	0802490c 	.word	0x0802490c
 80061b8:	08024e98 	.word	0x08024e98

080061bc <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7ff f8ec 	bl	80053a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80061cc:	4a03      	ldr	r2, [pc, #12]	; (80061dc <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	601a      	str	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4618      	mov	r0, r3
 80061d6:	3708      	adds	r7, #8
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	08028b54 	.word	0x08028b54

080061e0 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv>:
 80061e0:	b590      	push	{r4, r7, lr}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	f240 1293 	movw	r2, #403	; 0x193
 80061ec:	4906      	ldr	r1, [pc, #24]	; (8006208 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 80061ee:	2004      	movs	r0, #4
 80061f0:	f005 fb06 	bl	800b800 <_ZnwjPKci>
 80061f4:	4604      	mov	r4, r0
 80061f6:	4620      	mov	r0, r4
 80061f8:	f7ff ffe0 	bl	80061bc <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>
 80061fc:	4623      	mov	r3, r4
 80061fe:	4618      	mov	r0, r3
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	bd90      	pop	{r4, r7, pc}
 8006206:	bf00      	nop
 8006208:	0802490c 	.word	0x0802490c

0800620c <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>:
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4618      	mov	r0, r3
 8006218:	f00d fee0 	bl	8013fdc <_ZN10UtestShellC1Ev>
 800621c:	4a03      	ldr	r2, [pc, #12]	; (800622c <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	601a      	str	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4618      	mov	r0, r3
 8006226:	3708      	adds	r7, #8
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	08028aa8 	.word	0x08028aa8

08006230 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 8006230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006232:	b08f      	sub	sp, #60	; 0x3c
 8006234:	af04      	add	r7, sp, #16
 8006236:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CWQAP);
 8006238:	f107 030c 	add.w	r3, r7, #12
 800623c:	492e      	ldr	r1, [pc, #184]	; (80062f8 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xc8>)
 800623e:	4618      	mov	r0, r3
 8006240:	f007 fea1 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8006244:	f107 030c 	add.w	r3, r7, #12
 8006248:	2100      	movs	r1, #0
 800624a:	4618      	mov	r0, r3
 800624c:	f005 ff74 	bl	800c138 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006250:	4604      	mov	r4, r0
 8006252:	6823      	ldr	r3, [r4, #0]
 8006254:	330c      	adds	r3, #12
 8006256:	681d      	ldr	r5, [r3, #0]
 8006258:	f107 0314 	add.w	r3, r7, #20
 800625c:	4927      	ldr	r1, [pc, #156]	; (80062fc <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xcc>)
 800625e:	4618      	mov	r0, r3
 8006260:	f007 fe91 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8006264:	f107 0314 	add.w	r3, r7, #20
 8006268:	4619      	mov	r1, r3
 800626a:	4620      	mov	r0, r4
 800626c:	47a8      	blx	r5
 800626e:	4604      	mov	r4, r0
 8006270:	6823      	ldr	r3, [r4, #0]
 8006272:	334c      	adds	r3, #76	; 0x4c
 8006274:	681d      	ldr	r5, [r3, #0]
 8006276:	f107 031c 	add.w	r3, r7, #28
 800627a:	4921      	ldr	r1, [pc, #132]	; (8006300 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd0>)
 800627c:	4618      	mov	r0, r3
 800627e:	f007 fe82 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8006282:	f107 031c 	add.w	r3, r7, #28
 8006286:	4a1f      	ldr	r2, [pc, #124]	; (8006304 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd4>)
 8006288:	4619      	mov	r1, r3
 800628a:	4620      	mov	r0, r4
 800628c:	47a8      	blx	r5
 800628e:	f107 031c 	add.w	r3, r7, #28
 8006292:	4618      	mov	r0, r3
 8006294:	f008 fa2f 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8006298:	f107 0314 	add.w	r3, r7, #20
 800629c:	4618      	mov	r0, r3
 800629e:	f008 fa2a 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80062a2:	f107 030c 	add.w	r3, r7, #12
 80062a6:	4618      	mov	r0, r3
 80062a8:	f008 fa25 	bl	800e6f6 <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 80062ac:	f7fd fdc2 	bl	8003e34 <Disconnect_Wifi>
 80062b0:	4603      	mov	r3, r0
 80062b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(response != IDLE)
 80062b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062ba:	2b04      	cmp	r3, #4
 80062bc:	d100      	bne.n	80062c0 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x90>
		response = Disconnect_Wifi();
 80062be:	e7f5      	b.n	80062ac <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x7c>
			break;
 80062c0:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response);
 80062c2:	f00f fa43 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 80062c6:	4604      	mov	r4, r0
 80062c8:	6823      	ldr	r3, [r4, #0]
 80062ca:	3338      	adds	r3, #56	; 0x38
 80062cc:	681d      	ldr	r5, [r3, #0]
 80062ce:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 80062d2:	f00f fa4b 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80062d6:	4603      	mov	r3, r0
 80062d8:	9302      	str	r3, [sp, #8]
 80062da:	f44f 73d1 	mov.w	r3, #418	; 0x1a2
 80062de:	9301      	str	r3, [sp, #4]
 80062e0:	4b09      	ldr	r3, [pc, #36]	; (8006308 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd8>)
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	4b09      	ldr	r3, [pc, #36]	; (800630c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xdc>)
 80062e6:	4632      	mov	r2, r6
 80062e8:	2101      	movs	r1, #1
 80062ea:	4620      	mov	r0, r4
 80062ec:	47a8      	blx	r5
}
 80062ee:	bf00      	nop
 80062f0:	372c      	adds	r7, #44	; 0x2c
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062f6:	bf00      	nop
 80062f8:	08024c3c 	.word	0x08024c3c
 80062fc:	08024c40 	.word	0x08024c40
 8006300:	08024c54 	.word	0x08024c54
 8006304:	080248ac 	.word	0x080248ac
 8006308:	0802490c 	.word	0x0802490c
 800630c:	08024d10 	.word	0x08024d10

08006310 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4618      	mov	r0, r3
 800631c:	f7ff f842 	bl	80053a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006320:	4a03      	ldr	r2, [pc, #12]	; (8006330 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev+0x20>)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	601a      	str	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4618      	mov	r0, r3
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	08028a88 	.word	0x08028a88

08006334 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv>:
 8006334:	b590      	push	{r4, r7, lr}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	f240 12a5 	movw	r2, #421	; 0x1a5
 8006340:	4906      	ldr	r1, [pc, #24]	; (800635c <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv+0x28>)
 8006342:	2004      	movs	r0, #4
 8006344:	f005 fa5c 	bl	800b800 <_ZnwjPKci>
 8006348:	4604      	mov	r4, r0
 800634a:	4620      	mov	r0, r4
 800634c:	f7ff ffe0 	bl	8006310 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>
 8006350:	4623      	mov	r3, r4
 8006352:	4618      	mov	r0, r3
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	bd90      	pop	{r4, r7, pc}
 800635a:	bf00      	nop
 800635c:	0802490c 	.word	0x0802490c

08006360 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>:
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4618      	mov	r0, r3
 800636c:	f00d fe36 	bl	8013fdc <_ZN10UtestShellC1Ev>
 8006370:	4a03      	ldr	r2, [pc, #12]	; (8006380 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev+0x20>)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	601a      	str	r2, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4618      	mov	r0, r3
 800637a:	3708      	adds	r7, #8
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	080289dc 	.word	0x080289dc

08006384 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv>:
{
 8006384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006386:	b093      	sub	sp, #76	; 0x4c
 8006388:	af04      	add	r7, sp, #16
 800638a:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CWQAP);
 800638c:	f107 0308 	add.w	r3, r7, #8
 8006390:	494a      	ldr	r1, [pc, #296]	; (80064bc <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x138>)
 8006392:	4618      	mov	r0, r3
 8006394:	f007 fdf7 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8006398:	f107 0308 	add.w	r3, r7, #8
 800639c:	2100      	movs	r1, #0
 800639e:	4618      	mov	r0, r3
 80063a0:	f005 feca 	bl	800c138 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80063a4:	4604      	mov	r4, r0
 80063a6:	6823      	ldr	r3, [r4, #0]
 80063a8:	330c      	adds	r3, #12
 80063aa:	681d      	ldr	r5, [r3, #0]
 80063ac:	f107 0310 	add.w	r3, r7, #16
 80063b0:	4943      	ldr	r1, [pc, #268]	; (80064c0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x13c>)
 80063b2:	4618      	mov	r0, r3
 80063b4:	f007 fde7 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80063b8:	f107 0310 	add.w	r3, r7, #16
 80063bc:	4619      	mov	r1, r3
 80063be:	4620      	mov	r0, r4
 80063c0:	47a8      	blx	r5
 80063c2:	4604      	mov	r4, r0
 80063c4:	6823      	ldr	r3, [r4, #0]
 80063c6:	334c      	adds	r3, #76	; 0x4c
 80063c8:	681d      	ldr	r5, [r3, #0]
 80063ca:	f107 0318 	add.w	r3, r7, #24
 80063ce:	493d      	ldr	r1, [pc, #244]	; (80064c4 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x140>)
 80063d0:	4618      	mov	r0, r3
 80063d2:	f007 fdd8 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80063d6:	f107 0318 	add.w	r3, r7, #24
 80063da:	4a3b      	ldr	r2, [pc, #236]	; (80064c8 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x144>)
 80063dc:	4619      	mov	r1, r3
 80063de:	4620      	mov	r0, r4
 80063e0:	47a8      	blx	r5
 80063e2:	f107 0318 	add.w	r3, r7, #24
 80063e6:	4618      	mov	r0, r3
 80063e8:	f008 f985 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80063ec:	f107 0310 	add.w	r3, r7, #16
 80063f0:	4618      	mov	r0, r3
 80063f2:	f008 f980 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80063f6:	f107 0308 	add.w	r3, r7, #8
 80063fa:	4618      	mov	r0, r3
 80063fc:	f008 f97b 	bl	800e6f6 <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 8006400:	f7fd fd18 	bl	8003e34 <Disconnect_Wifi>
 8006404:	4603      	mov	r3, r0
 8006406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if(response != IDLE)
 800640a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800640e:	2b04      	cmp	r3, #4
 8006410:	d139      	bne.n	8006486 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x102>
			break;

		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 8006412:	2300      	movs	r3, #0
 8006414:	637b      	str	r3, [r7, #52]	; 0x34
 8006416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006418:	2b01      	cmp	r3, #1
 800641a:	dcf1      	bgt.n	8006400 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x7c>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)AT_RESPONSE_OK[j]);
 800641c:	f107 0320 	add.w	r3, r7, #32
 8006420:	4926      	ldr	r1, [pc, #152]	; (80064bc <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x138>)
 8006422:	4618      	mov	r0, r3
 8006424:	f007 fdaf 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8006428:	f107 0320 	add.w	r3, r7, #32
 800642c:	2100      	movs	r1, #0
 800642e:	4618      	mov	r0, r3
 8006430:	f005 fe82 	bl	800c138 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006434:	4604      	mov	r4, r0
 8006436:	6823      	ldr	r3, [r4, #0]
 8006438:	330c      	adds	r3, #12
 800643a:	681d      	ldr	r5, [r3, #0]
 800643c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006440:	4922      	ldr	r1, [pc, #136]	; (80064cc <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x148>)
 8006442:	4618      	mov	r0, r3
 8006444:	f007 fd9f 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8006448:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800644c:	4619      	mov	r1, r3
 800644e:	4620      	mov	r0, r4
 8006450:	47a8      	blx	r5
 8006452:	4603      	mov	r3, r0
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	3264      	adds	r2, #100	; 0x64
 8006458:	6812      	ldr	r2, [r2, #0]
 800645a:	481d      	ldr	r0, [pc, #116]	; (80064d0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x14c>)
 800645c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800645e:	4401      	add	r1, r0
 8006460:	7809      	ldrb	r1, [r1, #0]
 8006462:	4618      	mov	r0, r3
 8006464:	4790      	blx	r2
 8006466:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800646a:	4618      	mov	r0, r3
 800646c:	f008 f943 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8006470:	f107 0320 	add.w	r3, r7, #32
 8006474:	4618      	mov	r0, r3
 8006476:	f008 f93e 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 800647a:	f7fd fc3b 	bl	8003cf4 <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 800647e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006480:	3301      	adds	r3, #1
 8006482:	637b      	str	r3, [r7, #52]	; 0x34
 8006484:	e7c7      	b.n	8006416 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x92>
			break;
 8006486:	bf00      	nop
		}

	}

	LONGS_EQUAL(STATUS_OK,response);
 8006488:	f00f f960 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 800648c:	4604      	mov	r4, r0
 800648e:	6823      	ldr	r3, [r4, #0]
 8006490:	3338      	adds	r3, #56	; 0x38
 8006492:	681d      	ldr	r5, [r3, #0]
 8006494:	f897 6033 	ldrb.w	r6, [r7, #51]	; 0x33
 8006498:	f00f f968 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800649c:	4603      	mov	r3, r0
 800649e:	9302      	str	r3, [sp, #8]
 80064a0:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 80064a4:	9301      	str	r3, [sp, #4]
 80064a6:	4b0b      	ldr	r3, [pc, #44]	; (80064d4 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x150>)
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	4b0b      	ldr	r3, [pc, #44]	; (80064d8 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x154>)
 80064ac:	4632      	mov	r2, r6
 80064ae:	2102      	movs	r1, #2
 80064b0:	4620      	mov	r0, r4
 80064b2:	47a8      	blx	r5
}
 80064b4:	bf00      	nop
 80064b6:	373c      	adds	r7, #60	; 0x3c
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064bc:	08024c3c 	.word	0x08024c3c
 80064c0:	08024c40 	.word	0x08024c40
 80064c4:	08024c54 	.word	0x08024c54
 80064c8:	080248ac 	.word	0x080248ac
 80064cc:	08024c5c 	.word	0x08024c5c
 80064d0:	08024898 	.word	0x08024898
 80064d4:	0802490c 	.word	0x0802490c
 80064d8:	08024e98 	.word	0x08024e98

080064dc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Command_Process_Test)
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7fe ff5c 	bl	80053a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80064ec:	4a03      	ldr	r2, [pc, #12]	; (80064fc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev+0x20>)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	601a      	str	r2, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4618      	mov	r0, r3
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	080289bc 	.word	0x080289bc

08006500 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShell10createTestEv>:
 8006500:	b590      	push	{r4, r7, lr}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	f240 12bd 	movw	r2, #445	; 0x1bd
 800650c:	4906      	ldr	r1, [pc, #24]	; (8006528 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShell10createTestEv+0x28>)
 800650e:	2004      	movs	r0, #4
 8006510:	f005 f976 	bl	800b800 <_ZnwjPKci>
 8006514:	4604      	mov	r4, r0
 8006516:	4620      	mov	r0, r4
 8006518:	f7ff ffe0 	bl	80064dc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev>
 800651c:	4623      	mov	r3, r4
 800651e:	4618      	mov	r0, r3
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	bd90      	pop	{r4, r7, pc}
 8006526:	bf00      	nop
 8006528:	0802490c 	.word	0x0802490c

0800652c <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev>:
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4618      	mov	r0, r3
 8006538:	f00d fd50 	bl	8013fdc <_ZN10UtestShellC1Ev>
 800653c:	4a03      	ldr	r2, [pc, #12]	; (800654c <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev+0x20>)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	601a      	str	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4618      	mov	r0, r3
 8006546:	3708      	adds	r7, #8
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	08028910 	.word	0x08028910

08006550 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv>:
{
 8006550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006552:	b09b      	sub	sp, #108	; 0x6c
 8006554:	af04      	add	r7, sp, #16
 8006556:	6078      	str	r0, [r7, #4]
	char *response_arr[3] =
 8006558:	4a6a      	ldr	r2, [pc, #424]	; (8006704 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1b4>)
 800655a:	f107 0314 	add.w	r3, r7, #20
 800655e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006560:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{ (char*)AT_RESPONSE_OK,									// station mode response
	  (char*)AT_RESPONSE_OK,									// check wifi connection response
	  (char*)AT_RESPONSE_OK										// connect wifi command response
	};

	char *fake_command_buffer[3] =
 8006564:	4a68      	ldr	r2, [pc, #416]	; (8006708 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1b8>)
 8006566:	f107 0308 	add.w	r3, r7, #8
 800656a:	ca07      	ldmia	r2, {r0, r1, r2}
 800656c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		(char*)AT_CWMODE_STATION,
		(char*)AT_CWQAP,
		(char*)"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8006570:	2300      	movs	r3, #0
 8006572:	657b      	str	r3, [r7, #84]	; 0x54
 8006574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006576:	2b02      	cmp	r3, #2
 8006578:	dc43      	bgt.n	8006602 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb2>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 800657a:	f107 0320 	add.w	r3, r7, #32
 800657e:	4963      	ldr	r1, [pc, #396]	; (800670c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1bc>)
 8006580:	4618      	mov	r0, r3
 8006582:	f007 fd00 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8006586:	f107 0320 	add.w	r3, r7, #32
 800658a:	2100      	movs	r1, #0
 800658c:	4618      	mov	r0, r3
 800658e:	f005 fdd3 	bl	800c138 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006592:	4604      	mov	r4, r0
 8006594:	6823      	ldr	r3, [r4, #0]
 8006596:	330c      	adds	r3, #12
 8006598:	681d      	ldr	r5, [r3, #0]
 800659a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800659e:	495c      	ldr	r1, [pc, #368]	; (8006710 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c0>)
 80065a0:	4618      	mov	r0, r3
 80065a2:	f007 fcf0 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80065a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80065aa:	4619      	mov	r1, r3
 80065ac:	4620      	mov	r0, r4
 80065ae:	47a8      	blx	r5
 80065b0:	4604      	mov	r4, r0
 80065b2:	6823      	ldr	r3, [r4, #0]
 80065b4:	334c      	adds	r3, #76	; 0x4c
 80065b6:	681d      	ldr	r5, [r3, #0]
 80065b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80065bc:	4955      	ldr	r1, [pc, #340]	; (8006714 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c4>)
 80065be:	4618      	mov	r0, r3
 80065c0:	f007 fce1 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80065c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80065cc:	4413      	add	r3, r2
 80065ce:	f853 2c50 	ldr.w	r2, [r3, #-80]
 80065d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80065d6:	4619      	mov	r1, r3
 80065d8:	4620      	mov	r0, r4
 80065da:	47a8      	blx	r5
 80065dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80065e0:	4618      	mov	r0, r3
 80065e2:	f008 f888 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80065e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80065ea:	4618      	mov	r0, r3
 80065ec:	f008 f883 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80065f0:	f107 0320 	add.w	r3, r7, #32
 80065f4:	4618      	mov	r0, r3
 80065f6:	f008 f87e 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 80065fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065fc:	3301      	adds	r3, #1
 80065fe:	657b      	str	r3, [r7, #84]	; 0x54
 8006600:	e7b8      	b.n	8006574 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x24>
	}
	Status response;
	int i = 0;
 8006602:	2300      	movs	r3, #0
 8006604:	653b      	str	r3, [r7, #80]	; 0x50
	while(1)
	{
		response = Command_Process(fake_command_buffer, response_arr, 3);
 8006606:	f107 0114 	add.w	r1, r7, #20
 800660a:	f107 0308 	add.w	r3, r7, #8
 800660e:	2203      	movs	r2, #3
 8006610:	4618      	mov	r0, r3
 8006612:	f7fd fc2b 	bl	8003e6c <Command_Process>
 8006616:	4603      	mov	r3, r0
 8006618:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		if(response != IDLE)
 800661c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006620:	2b04      	cmp	r3, #4
 8006622:	d153      	bne.n	80066cc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x17c>
		{
			break;
		}

		if(i<3)
 8006624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006626:	2b02      	cmp	r3, #2
 8006628:	dced      	bgt.n	8006606 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb6>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 800662a:	2300      	movs	r3, #0
 800662c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800662e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006636:	4413      	add	r3, r2
 8006638:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800663c:	4618      	mov	r0, r3
 800663e:	f7f9 fdfd 	bl	800023c <strlen>
 8006642:	4603      	mov	r3, r0
 8006644:	461a      	mov	r2, r3
 8006646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006648:	4293      	cmp	r3, r2
 800664a:	da3b      	bge.n	80066c4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x174>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 800664c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006650:	492e      	ldr	r1, [pc, #184]	; (800670c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1bc>)
 8006652:	4618      	mov	r0, r3
 8006654:	f007 fc97 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8006658:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800665c:	2100      	movs	r1, #0
 800665e:	4618      	mov	r0, r3
 8006660:	f005 fd6a 	bl	800c138 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006664:	4604      	mov	r4, r0
 8006666:	6823      	ldr	r3, [r4, #0]
 8006668:	330c      	adds	r3, #12
 800666a:	681d      	ldr	r5, [r3, #0]
 800666c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006670:	4929      	ldr	r1, [pc, #164]	; (8006718 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c8>)
 8006672:	4618      	mov	r0, r3
 8006674:	f007 fc87 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8006678:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800667c:	4619      	mov	r1, r3
 800667e:	4620      	mov	r0, r4
 8006680:	47a8      	blx	r5
 8006682:	4602      	mov	r2, r0
 8006684:	6813      	ldr	r3, [r2, #0]
 8006686:	3364      	adds	r3, #100	; 0x64
 8006688:	681c      	ldr	r4, [r3, #0]
 800668a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006692:	440b      	add	r3, r1
 8006694:	f853 1c44 	ldr.w	r1, [r3, #-68]
 8006698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800669a:	440b      	add	r3, r1
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	4619      	mov	r1, r3
 80066a0:	4610      	mov	r0, r2
 80066a2:	47a0      	blx	r4
 80066a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80066a8:	4618      	mov	r0, r3
 80066aa:	f008 f824 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80066ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80066b2:	4618      	mov	r0, r3
 80066b4:	f008 f81f 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 80066b8:	f7fd fb1c 	bl	8003cf4 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80066bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066be:	3301      	adds	r3, #1
 80066c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066c2:	e7b4      	b.n	800662e <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xde>
			}
			i++;
 80066c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066c6:	3301      	adds	r3, #1
 80066c8:	653b      	str	r3, [r7, #80]	; 0x50
		}

	}
 80066ca:	e79c      	b.n	8006606 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xb6>
			break;
 80066cc:	bf00      	nop
	LONGS_EQUAL(STATUS_OK,response);
 80066ce:	f00f f83d 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 80066d2:	4604      	mov	r4, r0
 80066d4:	6823      	ldr	r3, [r4, #0]
 80066d6:	3338      	adds	r3, #56	; 0x38
 80066d8:	681d      	ldr	r5, [r3, #0]
 80066da:	f897 604b 	ldrb.w	r6, [r7, #75]	; 0x4b
 80066de:	f00f f845 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80066e2:	4603      	mov	r3, r0
 80066e4:	9302      	str	r3, [sp, #8]
 80066e6:	f240 13e5 	movw	r3, #485	; 0x1e5
 80066ea:	9301      	str	r3, [sp, #4]
 80066ec:	4b0b      	ldr	r3, [pc, #44]	; (800671c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1cc>)
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	4b0b      	ldr	r3, [pc, #44]	; (8006720 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1d0>)
 80066f2:	4632      	mov	r2, r6
 80066f4:	2102      	movs	r1, #2
 80066f6:	4620      	mov	r0, r4
 80066f8:	47a8      	blx	r5

}
 80066fa:	bf00      	nop
 80066fc:	375c      	adds	r7, #92	; 0x5c
 80066fe:	46bd      	mov	sp, r7
 8006700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006702:	bf00      	nop
 8006704:	08024f58 	.word	0x08024f58
 8006708:	08024f64 	.word	0x08024f64
 800670c:	08024c3c 	.word	0x08024c3c
 8006710:	08024c40 	.word	0x08024c40
 8006714:	08024c54 	.word	0x08024c54
 8006718:	08024c5c 	.word	0x08024c5c
 800671c:	0802490c 	.word	0x0802490c
 8006720:	08024e98 	.word	0x08024e98

08006724 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4618      	mov	r0, r3
 8006730:	f7fe fe38 	bl	80053a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006734:	4a03      	ldr	r2, [pc, #12]	; (8006744 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev+0x20>)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	601a      	str	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4618      	mov	r0, r3
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	080288f0 	.word	0x080288f0

08006748 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShell10createTestEv>:
 8006748:	b590      	push	{r4, r7, lr}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	f240 12e9 	movw	r2, #489	; 0x1e9
 8006754:	4906      	ldr	r1, [pc, #24]	; (8006770 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShell10createTestEv+0x28>)
 8006756:	2004      	movs	r0, #4
 8006758:	f005 f852 	bl	800b800 <_ZnwjPKci>
 800675c:	4604      	mov	r4, r0
 800675e:	4620      	mov	r0, r4
 8006760:	f7ff ffe0 	bl	8006724 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev>
 8006764:	4623      	mov	r3, r4
 8006766:	4618      	mov	r0, r3
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	bd90      	pop	{r4, r7, pc}
 800676e:	bf00      	nop
 8006770:	0802490c 	.word	0x0802490c

08006774 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev>:
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4618      	mov	r0, r3
 8006780:	f00d fc2c 	bl	8013fdc <_ZN10UtestShellC1Ev>
 8006784:	4a03      	ldr	r2, [pc, #12]	; (8006794 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev+0x20>)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	601a      	str	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4618      	mov	r0, r3
 800678e:	3708      	adds	r7, #8
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	08028844 	.word	0x08028844

08006798 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv>:
{
 8006798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800679a:	b0b1      	sub	sp, #196	; 0xc4
 800679c:	af04      	add	r7, sp, #16
 800679e:	6078      	str	r0, [r7, #4]
	char response_arr[2][50] =
 80067a0:	4a71      	ldr	r2, [pc, #452]	; (8006968 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1d0>)
 80067a2:	f107 0314 	add.w	r3, r7, #20
 80067a6:	4611      	mov	r1, r2
 80067a8:	2264      	movs	r2, #100	; 0x64
 80067aa:	4618      	mov	r0, r3
 80067ac:	f01b f8c2 	bl	8021934 <memcpy>
	{
		AT_RESPONSE_OK,
		AT_RESPONSE_OK
	};

	char *fake_command_buffer[2] =
 80067b0:	4a6e      	ldr	r2, [pc, #440]	; (800696c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1d4>)
 80067b2:	f107 030c 	add.w	r3, r7, #12
 80067b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80067ba:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		(char*)AT_CIPMUX_SINGLE,
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	for(int i=0;i<2;i++)
 80067be:	2300      	movs	r3, #0
 80067c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80067c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	dc46      	bgt.n	800685a <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc2>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 80067cc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80067d0:	4967      	ldr	r1, [pc, #412]	; (8006970 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1d8>)
 80067d2:	4618      	mov	r0, r3
 80067d4:	f007 fbd7 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80067d8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80067dc:	2100      	movs	r1, #0
 80067de:	4618      	mov	r0, r3
 80067e0:	f005 fcaa 	bl	800c138 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80067e4:	4604      	mov	r4, r0
 80067e6:	6823      	ldr	r3, [r4, #0]
 80067e8:	330c      	adds	r3, #12
 80067ea:	681d      	ldr	r5, [r3, #0]
 80067ec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80067f0:	4960      	ldr	r1, [pc, #384]	; (8006974 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1dc>)
 80067f2:	4618      	mov	r0, r3
 80067f4:	f007 fbc7 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80067f8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80067fc:	4619      	mov	r1, r3
 80067fe:	4620      	mov	r0, r4
 8006800:	47a8      	blx	r5
 8006802:	4604      	mov	r4, r0
 8006804:	6823      	ldr	r3, [r4, #0]
 8006806:	334c      	adds	r3, #76	; 0x4c
 8006808:	681d      	ldr	r5, [r3, #0]
 800680a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800680e:	495a      	ldr	r1, [pc, #360]	; (8006978 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e0>)
 8006810:	4618      	mov	r0, r3
 8006812:	f007 fbb8 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8006816:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8006820:	4413      	add	r3, r2
 8006822:	f853 2ca4 	ldr.w	r2, [r3, #-164]
 8006826:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800682a:	4619      	mov	r1, r3
 800682c:	4620      	mov	r0, r4
 800682e:	47a8      	blx	r5
 8006830:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006834:	4618      	mov	r0, r3
 8006836:	f007 ff5e 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800683a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800683e:	4618      	mov	r0, r3
 8006840:	f007 ff59 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8006844:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006848:	4618      	mov	r0, r3
 800684a:	f007 ff54 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<2;i++)
 800684e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006852:	3301      	adds	r3, #1
 8006854:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006858:	e7b4      	b.n	80067c4 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x2c>
	}

	Status response;
	int i = 0;
 800685a:	2300      	movs	r3, #0
 800685c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 8006860:	4946      	ldr	r1, [pc, #280]	; (800697c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e4>)
 8006862:	4847      	ldr	r0, [pc, #284]	; (8006980 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e8>)
 8006864:	f7fd fb8c 	bl	8003f80 <Connect_TCP_Server>
 8006868:	4603      	mov	r3, r0
 800686a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		if(response != IDLE)
 800686e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8006872:	2b04      	cmp	r3, #4
 8006874:	d15d      	bne.n	8006932 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x19a>
		{
			break;
		}

		if(i<3)
 8006876:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800687a:	2b02      	cmp	r3, #2
 800687c:	dcf0      	bgt.n	8006860 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc8>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 800687e:	2300      	movs	r3, #0
 8006880:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006884:	f107 0214 	add.w	r2, r7, #20
 8006888:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800688c:	2132      	movs	r1, #50	; 0x32
 800688e:	fb01 f303 	mul.w	r3, r1, r3
 8006892:	4413      	add	r3, r2
 8006894:	4618      	mov	r0, r3
 8006896:	f7f9 fcd1 	bl	800023c <strlen>
 800689a:	4603      	mov	r3, r0
 800689c:	461a      	mov	r2, r3
 800689e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80068a2:	4293      	cmp	r3, r2
 80068a4:	da3f      	bge.n	8006926 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x18e>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 80068a6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80068aa:	4931      	ldr	r1, [pc, #196]	; (8006970 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1d8>)
 80068ac:	4618      	mov	r0, r3
 80068ae:	f007 fb6a 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80068b2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80068b6:	2100      	movs	r1, #0
 80068b8:	4618      	mov	r0, r3
 80068ba:	f005 fc3d 	bl	800c138 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80068be:	4604      	mov	r4, r0
 80068c0:	6823      	ldr	r3, [r4, #0]
 80068c2:	330c      	adds	r3, #12
 80068c4:	681d      	ldr	r5, [r3, #0]
 80068c6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80068ca:	492e      	ldr	r1, [pc, #184]	; (8006984 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1ec>)
 80068cc:	4618      	mov	r0, r3
 80068ce:	f007 fb5a 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80068d2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80068d6:	4619      	mov	r1, r3
 80068d8:	4620      	mov	r0, r4
 80068da:	47a8      	blx	r5
 80068dc:	4603      	mov	r3, r0
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	3264      	adds	r2, #100	; 0x64
 80068e2:	6812      	ldr	r2, [r2, #0]
 80068e4:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80068e8:	2032      	movs	r0, #50	; 0x32
 80068ea:	fb00 f101 	mul.w	r1, r0, r1
 80068ee:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80068f2:	4408      	add	r0, r1
 80068f4:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80068f8:	4401      	add	r1, r0
 80068fa:	399c      	subs	r1, #156	; 0x9c
 80068fc:	7809      	ldrb	r1, [r1, #0]
 80068fe:	4618      	mov	r0, r3
 8006900:	4790      	blx	r2
 8006902:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006906:	4618      	mov	r0, r3
 8006908:	f007 fef5 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800690c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006910:	4618      	mov	r0, r3
 8006912:	f007 fef0 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006916:	f7fd f9ed 	bl	8003cf4 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 800691a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800691e:	3301      	adds	r3, #1
 8006920:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006924:	e7ae      	b.n	8006884 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xec>
			}
			i++;
 8006926:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800692a:	3301      	adds	r3, #1
 800692c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}

	}
 8006930:	e796      	b.n	8006860 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0xc8>
			break;
 8006932:	bf00      	nop
	LONGS_EQUAL(STATUS_OK,response);
 8006934:	f00e ff0a 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8006938:	4604      	mov	r4, r0
 800693a:	6823      	ldr	r3, [r4, #0]
 800693c:	3338      	adds	r3, #56	; 0x38
 800693e:	681d      	ldr	r5, [r3, #0]
 8006940:	f897 60a3 	ldrb.w	r6, [r7, #163]	; 0xa3
 8006944:	f00e ff12 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006948:	4603      	mov	r3, r0
 800694a:	9302      	str	r3, [sp, #8]
 800694c:	f240 2311 	movw	r3, #529	; 0x211
 8006950:	9301      	str	r3, [sp, #4]
 8006952:	4b0d      	ldr	r3, [pc, #52]	; (8006988 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1f0>)
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	4b0d      	ldr	r3, [pc, #52]	; (800698c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1f4>)
 8006958:	4632      	mov	r2, r6
 800695a:	2102      	movs	r1, #2
 800695c:	4620      	mov	r0, r4
 800695e:	47a8      	blx	r5

}
 8006960:	bf00      	nop
 8006962:	37b4      	adds	r7, #180	; 0xb4
 8006964:	46bd      	mov	sp, r7
 8006966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006968:	08024f80 	.word	0x08024f80
 800696c:	08024fe4 	.word	0x08024fe4
 8006970:	08024c3c 	.word	0x08024c3c
 8006974:	08024c40 	.word	0x08024c40
 8006978:	08024c54 	.word	0x08024c54
 800697c:	08024f70 	.word	0x08024f70
 8006980:	08024f74 	.word	0x08024f74
 8006984:	08024c5c 	.word	0x08024c5c
 8006988:	0802490c 	.word	0x0802490c
 800698c:	08024e98 	.word	0x08024e98

08006990 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4618      	mov	r0, r3
 800699c:	f7fe fd02 	bl	80053a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80069a0:	4a03      	ldr	r2, [pc, #12]	; (80069b0 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev+0x20>)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	601a      	str	r2, [r3, #0]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4618      	mov	r0, r3
 80069aa:	3708      	adds	r7, #8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	08028824 	.word	0x08028824

080069b4 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShell10createTestEv>:
 80069b4:	b590      	push	{r4, r7, lr}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	f240 2215 	movw	r2, #533	; 0x215
 80069c0:	4906      	ldr	r1, [pc, #24]	; (80069dc <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShell10createTestEv+0x28>)
 80069c2:	2004      	movs	r0, #4
 80069c4:	f004 ff1c 	bl	800b800 <_ZnwjPKci>
 80069c8:	4604      	mov	r4, r0
 80069ca:	4620      	mov	r0, r4
 80069cc:	f7ff ffe0 	bl	8006990 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev>
 80069d0:	4623      	mov	r3, r4
 80069d2:	4618      	mov	r0, r3
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd90      	pop	{r4, r7, pc}
 80069da:	bf00      	nop
 80069dc:	0802490c 	.word	0x0802490c

080069e0 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev>:
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4618      	mov	r0, r3
 80069ec:	f00d faf6 	bl	8013fdc <_ZN10UtestShellC1Ev>
 80069f0:	4a03      	ldr	r2, [pc, #12]	; (8006a00 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev+0x20>)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	601a      	str	r2, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4618      	mov	r0, r3
 80069fa:	3708      	adds	r7, #8
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	08028778 	.word	0x08028778

08006a04 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv>:
{
 8006a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a06:	b091      	sub	sp, #68	; 0x44
 8006a08:	af04      	add	r7, sp, #16
 8006a0a:	6078      	str	r0, [r7, #4]

	char *fake_command_buffer[2] =
 8006a0c:	4a33      	ldr	r2, [pc, #204]	; (8006adc <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xd8>)
 8006a0e:	f107 030c 	add.w	r3, r7, #12
 8006a12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a16:	e883 0003 	stmia.w	r3, {r0, r1}

		(char*)AT_CIPMUX_SINGLE,
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[0]);
 8006a1a:	f107 0314 	add.w	r3, r7, #20
 8006a1e:	4930      	ldr	r1, [pc, #192]	; (8006ae0 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xdc>)
 8006a20:	4618      	mov	r0, r3
 8006a22:	f007 fab0 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8006a26:	f107 0314 	add.w	r3, r7, #20
 8006a2a:	2100      	movs	r1, #0
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f005 fb83 	bl	800c138 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006a32:	4604      	mov	r4, r0
 8006a34:	6823      	ldr	r3, [r4, #0]
 8006a36:	330c      	adds	r3, #12
 8006a38:	681d      	ldr	r5, [r3, #0]
 8006a3a:	f107 031c 	add.w	r3, r7, #28
 8006a3e:	4929      	ldr	r1, [pc, #164]	; (8006ae4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xe0>)
 8006a40:	4618      	mov	r0, r3
 8006a42:	f007 faa0 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8006a46:	f107 031c 	add.w	r3, r7, #28
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	47a8      	blx	r5
 8006a50:	4604      	mov	r4, r0
 8006a52:	6823      	ldr	r3, [r4, #0]
 8006a54:	334c      	adds	r3, #76	; 0x4c
 8006a56:	681d      	ldr	r5, [r3, #0]
 8006a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a5c:	4922      	ldr	r1, [pc, #136]	; (8006ae8 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xe4>)
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f007 fa91 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	47a8      	blx	r5
 8006a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a74:	4618      	mov	r0, r3
 8006a76:	f007 fe3e 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8006a7a:	f107 031c 	add.w	r3, r7, #28
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f007 fe39 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8006a84:	f107 0314 	add.w	r3, r7, #20
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f007 fe34 	bl	800e6f6 <_ZN12SimpleStringD1Ev>


	Status response;
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 8006a8e:	4917      	ldr	r1, [pc, #92]	; (8006aec <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xe8>)
 8006a90:	4817      	ldr	r0, [pc, #92]	; (8006af0 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xec>)
 8006a92:	f7fd fa75 	bl	8003f80 <Connect_TCP_Server>
 8006a96:	4603      	mov	r3, r0
 8006a98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(response != IDLE)
 8006a9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006aa0:	2b04      	cmp	r3, #4
 8006aa2:	d100      	bne.n	8006aa6 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xa2>
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 8006aa4:	e7f3      	b.n	8006a8e <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x8a>
		{
			break;
 8006aa6:	bf00      	nop
		}

	}
	LONGS_EQUAL(TIMEOUT_ERROR,response);
 8006aa8:	f00e fe50 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8006aac:	4604      	mov	r4, r0
 8006aae:	6823      	ldr	r3, [r4, #0]
 8006ab0:	3338      	adds	r3, #56	; 0x38
 8006ab2:	681d      	ldr	r5, [r3, #0]
 8006ab4:	f897 602f 	ldrb.w	r6, [r7, #47]	; 0x2f
 8006ab8:	f00e fe58 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006abc:	4603      	mov	r3, r0
 8006abe:	9302      	str	r3, [sp, #8]
 8006ac0:	f44f 730b 	mov.w	r3, #556	; 0x22c
 8006ac4:	9301      	str	r3, [sp, #4]
 8006ac6:	4b0b      	ldr	r3, [pc, #44]	; (8006af4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xf0>)
 8006ac8:	9300      	str	r3, [sp, #0]
 8006aca:	4b0b      	ldr	r3, [pc, #44]	; (8006af8 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xf4>)
 8006acc:	4632      	mov	r2, r6
 8006ace:	2101      	movs	r1, #1
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	47a8      	blx	r5

}
 8006ad4:	bf00      	nop
 8006ad6:	3734      	adds	r7, #52	; 0x34
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006adc:	08024fe4 	.word	0x08024fe4
 8006ae0:	08024c3c 	.word	0x08024c3c
 8006ae4:	08024c40 	.word	0x08024c40
 8006ae8:	08024c54 	.word	0x08024c54
 8006aec:	08024f70 	.word	0x08024f70
 8006af0:	08024f74 	.word	0x08024f74
 8006af4:	0802490c 	.word	0x0802490c
 8006af8:	08024d10 	.word	0x08024d10

08006afc <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7fe fc4c 	bl	80053a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006b0c:	4a03      	ldr	r2, [pc, #12]	; (8006b1c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev+0x20>)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	601a      	str	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4618      	mov	r0, r3
 8006b16:	3708      	adds	r7, #8
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	08028758 	.word	0x08028758

08006b20 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShell10createTestEv>:
 8006b20:	b590      	push	{r4, r7, lr}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	f44f 720c 	mov.w	r2, #560	; 0x230
 8006b2c:	4906      	ldr	r1, [pc, #24]	; (8006b48 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShell10createTestEv+0x28>)
 8006b2e:	2004      	movs	r0, #4
 8006b30:	f004 fe66 	bl	800b800 <_ZnwjPKci>
 8006b34:	4604      	mov	r4, r0
 8006b36:	4620      	mov	r0, r4
 8006b38:	f7ff ffe0 	bl	8006afc <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev>
 8006b3c:	4623      	mov	r3, r4
 8006b3e:	4618      	mov	r0, r3
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd90      	pop	{r4, r7, pc}
 8006b46:	bf00      	nop
 8006b48:	0802490c 	.word	0x0802490c

08006b4c <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev>:
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4618      	mov	r0, r3
 8006b58:	f00d fa40 	bl	8013fdc <_ZN10UtestShellC1Ev>
 8006b5c:	4a03      	ldr	r2, [pc, #12]	; (8006b6c <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev+0x20>)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	601a      	str	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4618      	mov	r0, r3
 8006b66:	3708      	adds	r7, #8
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	080286ac 	.word	0x080286ac

08006b70 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv>:
{
 8006b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b72:	b0b1      	sub	sp, #196	; 0xc4
 8006b74:	af04      	add	r7, sp, #16
 8006b76:	6078      	str	r0, [r7, #4]
	char response_arr[2][50] =
 8006b78:	4a71      	ldr	r2, [pc, #452]	; (8006d40 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1d0>)
 8006b7a:	f107 0314 	add.w	r3, r7, #20
 8006b7e:	4611      	mov	r1, r2
 8006b80:	2264      	movs	r2, #100	; 0x64
 8006b82:	4618      	mov	r0, r3
 8006b84:	f01a fed6 	bl	8021934 <memcpy>
	{
	  AT_RESPONSE_OK,
	  AT_RESPONSE_ERROR
	};

	char *fake_command_buffer[2] =
 8006b88:	4a6e      	ldr	r2, [pc, #440]	; (8006d44 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1d4>)
 8006b8a:	f107 030c 	add.w	r3, r7, #12
 8006b8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006b92:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		(char*)AT_CIPMUX_SINGLE,
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	for(int i=0;i<2;i++)
 8006b96:	2300      	movs	r3, #0
 8006b98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	dc46      	bgt.n	8006c32 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc2>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 8006ba4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006ba8:	4967      	ldr	r1, [pc, #412]	; (8006d48 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1d8>)
 8006baa:	4618      	mov	r0, r3
 8006bac:	f007 f9eb 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8006bb0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f005 fabe 	bl	800c138 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006bbc:	4604      	mov	r4, r0
 8006bbe:	6823      	ldr	r3, [r4, #0]
 8006bc0:	330c      	adds	r3, #12
 8006bc2:	681d      	ldr	r5, [r3, #0]
 8006bc4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006bc8:	4960      	ldr	r1, [pc, #384]	; (8006d4c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1dc>)
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f007 f9db 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8006bd0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	47a8      	blx	r5
 8006bda:	4604      	mov	r4, r0
 8006bdc:	6823      	ldr	r3, [r4, #0]
 8006bde:	334c      	adds	r3, #76	; 0x4c
 8006be0:	681d      	ldr	r5, [r3, #0]
 8006be2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006be6:	495a      	ldr	r1, [pc, #360]	; (8006d50 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e0>)
 8006be8:	4618      	mov	r0, r3
 8006bea:	f007 f9cc 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8006bee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8006bf8:	4413      	add	r3, r2
 8006bfa:	f853 2ca4 	ldr.w	r2, [r3, #-164]
 8006bfe:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006c02:	4619      	mov	r1, r3
 8006c04:	4620      	mov	r0, r4
 8006c06:	47a8      	blx	r5
 8006c08:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f007 fd72 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8006c12:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006c16:	4618      	mov	r0, r3
 8006c18:	f007 fd6d 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8006c1c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006c20:	4618      	mov	r0, r3
 8006c22:	f007 fd68 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<2;i++)
 8006c26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c30:	e7b4      	b.n	8006b9c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x2c>
	}

	Status response;
	int i = 0;
 8006c32:	2300      	movs	r3, #0
 8006c34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 8006c38:	4946      	ldr	r1, [pc, #280]	; (8006d54 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e4>)
 8006c3a:	4847      	ldr	r0, [pc, #284]	; (8006d58 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e8>)
 8006c3c:	f7fd f9a0 	bl	8003f80 <Connect_TCP_Server>
 8006c40:	4603      	mov	r3, r0
 8006c42:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		if(response != IDLE)
 8006c46:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8006c4a:	2b04      	cmp	r3, #4
 8006c4c:	d15d      	bne.n	8006d0a <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x19a>
		{
			break;
		}

		if(i<3)
 8006c4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	dcf0      	bgt.n	8006c38 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc8>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006c56:	2300      	movs	r3, #0
 8006c58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006c5c:	f107 0214 	add.w	r2, r7, #20
 8006c60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c64:	2132      	movs	r1, #50	; 0x32
 8006c66:	fb01 f303 	mul.w	r3, r1, r3
 8006c6a:	4413      	add	r3, r2
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7f9 fae5 	bl	800023c <strlen>
 8006c72:	4603      	mov	r3, r0
 8006c74:	461a      	mov	r2, r3
 8006c76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	da3f      	bge.n	8006cfe <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x18e>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8006c7e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006c82:	4931      	ldr	r1, [pc, #196]	; (8006d48 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1d8>)
 8006c84:	4618      	mov	r0, r3
 8006c86:	f007 f97e 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8006c8a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006c8e:	2100      	movs	r1, #0
 8006c90:	4618      	mov	r0, r3
 8006c92:	f005 fa51 	bl	800c138 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006c96:	4604      	mov	r4, r0
 8006c98:	6823      	ldr	r3, [r4, #0]
 8006c9a:	330c      	adds	r3, #12
 8006c9c:	681d      	ldr	r5, [r3, #0]
 8006c9e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006ca2:	492e      	ldr	r1, [pc, #184]	; (8006d5c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1ec>)
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f007 f96e 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8006caa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006cae:	4619      	mov	r1, r3
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	47a8      	blx	r5
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	3264      	adds	r2, #100	; 0x64
 8006cba:	6812      	ldr	r2, [r2, #0]
 8006cbc:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8006cc0:	2032      	movs	r0, #50	; 0x32
 8006cc2:	fb00 f101 	mul.w	r1, r0, r1
 8006cc6:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8006cca:	4408      	add	r0, r1
 8006ccc:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006cd0:	4401      	add	r1, r0
 8006cd2:	399c      	subs	r1, #156	; 0x9c
 8006cd4:	7809      	ldrb	r1, [r1, #0]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	4790      	blx	r2
 8006cda:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f007 fd09 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8006ce4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f007 fd04 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006cee:	f7fd f801 	bl	8003cf4 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006cf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006cfc:	e7ae      	b.n	8006c5c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xec>
			}
			i++;
 8006cfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d02:	3301      	adds	r3, #1
 8006d04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}

	}
 8006d08:	e796      	b.n	8006c38 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0xc8>
			break;
 8006d0a:	bf00      	nop
	LONGS_EQUAL(STATUS_ERROR,response);
 8006d0c:	f00e fd1e 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8006d10:	4604      	mov	r4, r0
 8006d12:	6823      	ldr	r3, [r4, #0]
 8006d14:	3338      	adds	r3, #56	; 0x38
 8006d16:	681d      	ldr	r5, [r3, #0]
 8006d18:	f897 60a3 	ldrb.w	r6, [r7, #163]	; 0xa3
 8006d1c:	f00e fd26 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006d20:	4603      	mov	r3, r0
 8006d22:	9302      	str	r3, [sp, #8]
 8006d24:	f44f 7316 	mov.w	r3, #600	; 0x258
 8006d28:	9301      	str	r3, [sp, #4]
 8006d2a:	4b0d      	ldr	r3, [pc, #52]	; (8006d60 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1f0>)
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	4b0d      	ldr	r3, [pc, #52]	; (8006d64 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1f4>)
 8006d30:	4632      	mov	r2, r6
 8006d32:	2103      	movs	r1, #3
 8006d34:	4620      	mov	r0, r4
 8006d36:	47a8      	blx	r5

}
 8006d38:	bf00      	nop
 8006d3a:	37b4      	adds	r7, #180	; 0xb4
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d40:	08024fec 	.word	0x08024fec
 8006d44:	08024fe4 	.word	0x08024fe4
 8006d48:	08024c3c 	.word	0x08024c3c
 8006d4c:	08024c40 	.word	0x08024c40
 8006d50:	08024c54 	.word	0x08024c54
 8006d54:	08024f70 	.word	0x08024f70
 8006d58:	08024f74 	.word	0x08024f74
 8006d5c:	08024c5c 	.word	0x08024c5c
 8006d60:	0802490c 	.word	0x0802490c
 8006d64:	08024d3c 	.word	0x08024d3c

08006d68 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fe fb16 	bl	80053a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006d78:	4a03      	ldr	r2, [pc, #12]	; (8006d88 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev+0x20>)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	601a      	str	r2, [r3, #0]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4618      	mov	r0, r3
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	0802868c 	.word	0x0802868c

08006d8c <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShell10createTestEv>:
 8006d8c:	b590      	push	{r4, r7, lr}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	f44f 7217 	mov.w	r2, #604	; 0x25c
 8006d98:	4906      	ldr	r1, [pc, #24]	; (8006db4 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShell10createTestEv+0x28>)
 8006d9a:	2004      	movs	r0, #4
 8006d9c:	f004 fd30 	bl	800b800 <_ZnwjPKci>
 8006da0:	4604      	mov	r4, r0
 8006da2:	4620      	mov	r0, r4
 8006da4:	f7ff ffe0 	bl	8006d68 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev>
 8006da8:	4623      	mov	r3, r4
 8006daa:	4618      	mov	r0, r3
 8006dac:	370c      	adds	r7, #12
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd90      	pop	{r4, r7, pc}
 8006db2:	bf00      	nop
 8006db4:	0802490c 	.word	0x0802490c

08006db8 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev>:
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f00d f90a 	bl	8013fdc <_ZN10UtestShellC1Ev>
 8006dc8:	4a03      	ldr	r2, [pc, #12]	; (8006dd8 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev+0x20>)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3708      	adds	r7, #8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	080285e0 	.word	0x080285e0

08006ddc <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv>:
{
 8006ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dde:	b093      	sub	sp, #76	; 0x4c
 8006de0:	af04      	add	r7, sp, #16
 8006de2:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CIPCLOSE);
 8006de4:	f107 0308 	add.w	r3, r7, #8
 8006de8:	494a      	ldr	r1, [pc, #296]	; (8006f14 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x138>)
 8006dea:	4618      	mov	r0, r3
 8006dec:	f007 f8cb 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8006df0:	f107 0308 	add.w	r3, r7, #8
 8006df4:	2100      	movs	r1, #0
 8006df6:	4618      	mov	r0, r3
 8006df8:	f005 f99e 	bl	800c138 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006dfc:	4604      	mov	r4, r0
 8006dfe:	6823      	ldr	r3, [r4, #0]
 8006e00:	330c      	adds	r3, #12
 8006e02:	681d      	ldr	r5, [r3, #0]
 8006e04:	f107 0310 	add.w	r3, r7, #16
 8006e08:	4943      	ldr	r1, [pc, #268]	; (8006f18 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x13c>)
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f007 f8bb 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8006e10:	f107 0310 	add.w	r3, r7, #16
 8006e14:	4619      	mov	r1, r3
 8006e16:	4620      	mov	r0, r4
 8006e18:	47a8      	blx	r5
 8006e1a:	4604      	mov	r4, r0
 8006e1c:	6823      	ldr	r3, [r4, #0]
 8006e1e:	334c      	adds	r3, #76	; 0x4c
 8006e20:	681d      	ldr	r5, [r3, #0]
 8006e22:	f107 0318 	add.w	r3, r7, #24
 8006e26:	493d      	ldr	r1, [pc, #244]	; (8006f1c <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x140>)
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f007 f8ac 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8006e2e:	f107 0318 	add.w	r3, r7, #24
 8006e32:	4a3b      	ldr	r2, [pc, #236]	; (8006f20 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x144>)
 8006e34:	4619      	mov	r1, r3
 8006e36:	4620      	mov	r0, r4
 8006e38:	47a8      	blx	r5
 8006e3a:	f107 0318 	add.w	r3, r7, #24
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f007 fc59 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8006e44:	f107 0310 	add.w	r3, r7, #16
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f007 fc54 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8006e4e:	f107 0308 	add.w	r3, r7, #8
 8006e52:	4618      	mov	r0, r3
 8006e54:	f007 fc4f 	bl	800e6f6 <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_TCP_Server();
 8006e58:	f7fd f8ce 	bl	8003ff8 <Disconnect_TCP_Server>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if(response != IDLE)
 8006e62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006e66:	2b04      	cmp	r3, #4
 8006e68:	d139      	bne.n	8006ede <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x102>
			break;

		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8006e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	dcf1      	bgt.n	8006e58 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x7c>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)AT_RESPONSE_OK[j]);
 8006e74:	f107 0320 	add.w	r3, r7, #32
 8006e78:	4926      	ldr	r1, [pc, #152]	; (8006f14 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x138>)
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f007 f883 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8006e80:	f107 0320 	add.w	r3, r7, #32
 8006e84:	2100      	movs	r1, #0
 8006e86:	4618      	mov	r0, r3
 8006e88:	f005 f956 	bl	800c138 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006e8c:	4604      	mov	r4, r0
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	330c      	adds	r3, #12
 8006e92:	681d      	ldr	r5, [r3, #0]
 8006e94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006e98:	4922      	ldr	r1, [pc, #136]	; (8006f24 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x148>)
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f007 f873 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8006ea0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	47a8      	blx	r5
 8006eaa:	4603      	mov	r3, r0
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	3264      	adds	r2, #100	; 0x64
 8006eb0:	6812      	ldr	r2, [r2, #0]
 8006eb2:	481d      	ldr	r0, [pc, #116]	; (8006f28 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x14c>)
 8006eb4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006eb6:	4401      	add	r1, r0
 8006eb8:	7809      	ldrb	r1, [r1, #0]
 8006eba:	4618      	mov	r0, r3
 8006ebc:	4790      	blx	r2
 8006ebe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f007 fc17 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8006ec8:	f107 0320 	add.w	r3, r7, #32
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f007 fc12 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8006ed2:	f7fc ff0f 	bl	8003cf4 <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 8006ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed8:	3301      	adds	r3, #1
 8006eda:	637b      	str	r3, [r7, #52]	; 0x34
 8006edc:	e7c7      	b.n	8006e6e <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x92>
			break;
 8006ede:	bf00      	nop
		}

	}

	LONGS_EQUAL(STATUS_OK,response);
 8006ee0:	f00e fc34 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8006ee4:	4604      	mov	r4, r0
 8006ee6:	6823      	ldr	r3, [r4, #0]
 8006ee8:	3338      	adds	r3, #56	; 0x38
 8006eea:	681d      	ldr	r5, [r3, #0]
 8006eec:	f897 6033 	ldrb.w	r6, [r7, #51]	; 0x33
 8006ef0:	f00e fc3c 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	9302      	str	r3, [sp, #8]
 8006ef8:	f240 2371 	movw	r3, #625	; 0x271
 8006efc:	9301      	str	r3, [sp, #4]
 8006efe:	4b0b      	ldr	r3, [pc, #44]	; (8006f2c <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x150>)
 8006f00:	9300      	str	r3, [sp, #0]
 8006f02:	4b0b      	ldr	r3, [pc, #44]	; (8006f30 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x154>)
 8006f04:	4632      	mov	r2, r6
 8006f06:	2102      	movs	r1, #2
 8006f08:	4620      	mov	r0, r4
 8006f0a:	47a8      	blx	r5

}
 8006f0c:	bf00      	nop
 8006f0e:	373c      	adds	r7, #60	; 0x3c
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f14:	08024c3c 	.word	0x08024c3c
 8006f18:	08024c40 	.word	0x08024c40
 8006f1c:	08024c54 	.word	0x08024c54
 8006f20:	08025050 	.word	0x08025050
 8006f24:	08024c5c 	.word	0x08024c5c
 8006f28:	08024898 	.word	0x08024898
 8006f2c:	0802490c 	.word	0x0802490c
 8006f30:	08024e98 	.word	0x08024e98

08006f34 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7fe fa30 	bl	80053a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006f44:	4a03      	ldr	r2, [pc, #12]	; (8006f54 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev+0x20>)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	601a      	str	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3708      	adds	r7, #8
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	080285c0 	.word	0x080285c0

08006f58 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShell10createTestEv>:
 8006f58:	b590      	push	{r4, r7, lr}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	f240 2275 	movw	r2, #629	; 0x275
 8006f64:	4906      	ldr	r1, [pc, #24]	; (8006f80 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShell10createTestEv+0x28>)
 8006f66:	2004      	movs	r0, #4
 8006f68:	f004 fc4a 	bl	800b800 <_ZnwjPKci>
 8006f6c:	4604      	mov	r4, r0
 8006f6e:	4620      	mov	r0, r4
 8006f70:	f7ff ffe0 	bl	8006f34 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev>
 8006f74:	4623      	mov	r3, r4
 8006f76:	4618      	mov	r0, r3
 8006f78:	370c      	adds	r7, #12
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd90      	pop	{r4, r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	0802490c 	.word	0x0802490c

08006f84 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev>:
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f00d f824 	bl	8013fdc <_ZN10UtestShellC1Ev>
 8006f94:	4a03      	ldr	r2, [pc, #12]	; (8006fa4 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev+0x20>)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	601a      	str	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	08028514 	.word	0x08028514

08006fa8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv>:
{
 8006fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006faa:	b0b3      	sub	sp, #204	; 0xcc
 8006fac:	af04      	add	r7, sp, #16
 8006fae:	6078      	str	r0, [r7, #4]
	Status response;
	int i = 0;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	char response_arr[2][50] =
 8006fb6:	4a7f      	ldr	r2, [pc, #508]	; (80071b4 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x20c>)
 8006fb8:	f107 0308 	add.w	r3, r7, #8
 8006fbc:	4611      	mov	r1, r2
 8006fbe:	2264      	movs	r2, #100	; 0x64
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f01a fcb7 	bl	8021934 <memcpy>
	{ AT_RESPONSE_GREATER_THAN,
	  AT_RESPONSE_SEND_OK,
	};

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "AT+CIPSEND=11\r\n");
 8006fc6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006fca:	497b      	ldr	r1, [pc, #492]	; (80071b8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x210>)
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f006 ffda 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8006fd2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f005 f8ad 	bl	800c138 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006fde:	4604      	mov	r4, r0
 8006fe0:	6823      	ldr	r3, [r4, #0]
 8006fe2:	330c      	adds	r3, #12
 8006fe4:	681d      	ldr	r5, [r3, #0]
 8006fe6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006fea:	4974      	ldr	r1, [pc, #464]	; (80071bc <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x214>)
 8006fec:	4618      	mov	r0, r3
 8006fee:	f006 ffca 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8006ff2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	47a8      	blx	r5
 8006ffc:	4604      	mov	r4, r0
 8006ffe:	6823      	ldr	r3, [r4, #0]
 8007000:	334c      	adds	r3, #76	; 0x4c
 8007002:	681d      	ldr	r5, [r3, #0]
 8007004:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007008:	496d      	ldr	r1, [pc, #436]	; (80071c0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x218>)
 800700a:	4618      	mov	r0, r3
 800700c:	f006 ffbb 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8007010:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007014:	4a6b      	ldr	r2, [pc, #428]	; (80071c4 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x21c>)
 8007016:	4619      	mov	r1, r3
 8007018:	4620      	mov	r0, r4
 800701a:	47a8      	blx	r5
 800701c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007020:	4618      	mov	r0, r3
 8007022:	f007 fb68 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8007026:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800702a:	4618      	mov	r0, r3
 800702c:	f007 fb63 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8007030:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007034:	4618      	mov	r0, r3
 8007036:	f007 fb5e 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "Hello World");
 800703a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800703e:	495e      	ldr	r1, [pc, #376]	; (80071b8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x210>)
 8007040:	4618      	mov	r0, r3
 8007042:	f006 ffa0 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8007046:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800704a:	2100      	movs	r1, #0
 800704c:	4618      	mov	r0, r3
 800704e:	f005 f873 	bl	800c138 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8007052:	4604      	mov	r4, r0
 8007054:	6823      	ldr	r3, [r4, #0]
 8007056:	330c      	adds	r3, #12
 8007058:	681d      	ldr	r5, [r3, #0]
 800705a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800705e:	4957      	ldr	r1, [pc, #348]	; (80071bc <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x214>)
 8007060:	4618      	mov	r0, r3
 8007062:	f006 ff90 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8007066:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800706a:	4619      	mov	r1, r3
 800706c:	4620      	mov	r0, r4
 800706e:	47a8      	blx	r5
 8007070:	4604      	mov	r4, r0
 8007072:	6823      	ldr	r3, [r4, #0]
 8007074:	334c      	adds	r3, #76	; 0x4c
 8007076:	681d      	ldr	r5, [r3, #0]
 8007078:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800707c:	4950      	ldr	r1, [pc, #320]	; (80071c0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x218>)
 800707e:	4618      	mov	r0, r3
 8007080:	f006 ff81 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8007084:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8007088:	4a4f      	ldr	r2, [pc, #316]	; (80071c8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x220>)
 800708a:	4619      	mov	r1, r3
 800708c:	4620      	mov	r0, r4
 800708e:	47a8      	blx	r5
 8007090:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8007094:	4618      	mov	r0, r3
 8007096:	f007 fb2e 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800709a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800709e:	4618      	mov	r0, r3
 80070a0:	f007 fb29 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80070a4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80070a8:	4618      	mov	r0, r3
 80070aa:	f007 fb24 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
	while(1)
	{
		response = Send_TCP_Message((char*)"Hello World");
 80070ae:	4846      	ldr	r0, [pc, #280]	; (80071c8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x220>)
 80070b0:	f7fc ffbe 	bl	8004030 <Send_TCP_Message>
 80070b4:	4603      	mov	r3, r0
 80070b6:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

		if(response != IDLE)
 80070ba:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80070be:	2b04      	cmp	r3, #4
 80070c0:	d15d      	bne.n	800717e <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x1d6>
		{
			break;
		}

		if(i<2)
 80070c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	dcf1      	bgt.n	80070ae <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x106>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80070ca:	2300      	movs	r3, #0
 80070cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80070d0:	f107 0208 	add.w	r2, r7, #8
 80070d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80070d8:	2132      	movs	r1, #50	; 0x32
 80070da:	fb01 f303 	mul.w	r3, r1, r3
 80070de:	4413      	add	r3, r2
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7f9 f8ab 	bl	800023c <strlen>
 80070e6:	4603      	mov	r3, r0
 80070e8:	461a      	mov	r2, r3
 80070ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80070ee:	4293      	cmp	r3, r2
 80070f0:	da3f      	bge.n	8007172 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x1ca>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 80070f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80070f6:	4930      	ldr	r1, [pc, #192]	; (80071b8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x210>)
 80070f8:	4618      	mov	r0, r3
 80070fa:	f006 ff44 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80070fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007102:	2100      	movs	r1, #0
 8007104:	4618      	mov	r0, r3
 8007106:	f005 f817 	bl	800c138 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800710a:	4604      	mov	r4, r0
 800710c:	6823      	ldr	r3, [r4, #0]
 800710e:	330c      	adds	r3, #12
 8007110:	681d      	ldr	r5, [r3, #0]
 8007112:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007116:	492d      	ldr	r1, [pc, #180]	; (80071cc <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x224>)
 8007118:	4618      	mov	r0, r3
 800711a:	f006 ff34 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800711e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007122:	4619      	mov	r1, r3
 8007124:	4620      	mov	r0, r4
 8007126:	47a8      	blx	r5
 8007128:	4603      	mov	r3, r0
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	3264      	adds	r2, #100	; 0x64
 800712e:	6812      	ldr	r2, [r2, #0]
 8007130:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8007134:	2032      	movs	r0, #50	; 0x32
 8007136:	fb00 f101 	mul.w	r1, r0, r1
 800713a:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 800713e:	4408      	add	r0, r1
 8007140:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8007144:	4401      	add	r1, r0
 8007146:	39b0      	subs	r1, #176	; 0xb0
 8007148:	7809      	ldrb	r1, [r1, #0]
 800714a:	4618      	mov	r0, r3
 800714c:	4790      	blx	r2
 800714e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007152:	4618      	mov	r0, r3
 8007154:	f007 facf 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8007158:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800715c:	4618      	mov	r0, r3
 800715e:	f007 faca 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8007162:	f7fc fdc7 	bl	8003cf4 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8007166:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800716a:	3301      	adds	r3, #1
 800716c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007170:	e7ae      	b.n	80070d0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x128>
			}
			i++;
 8007172:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007176:	3301      	adds	r3, #1
 8007178:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		}

	}
 800717c:	e797      	b.n	80070ae <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x106>
			break;
 800717e:	bf00      	nop

	LONGS_EQUAL(STATUS_OK,response);
 8007180:	f00e fae4 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8007184:	4604      	mov	r4, r0
 8007186:	6823      	ldr	r3, [r4, #0]
 8007188:	3338      	adds	r3, #56	; 0x38
 800718a:	681d      	ldr	r5, [r3, #0]
 800718c:	f897 60af 	ldrb.w	r6, [r7, #175]	; 0xaf
 8007190:	f00e faec 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007194:	4603      	mov	r3, r0
 8007196:	9302      	str	r3, [sp, #8]
 8007198:	f240 2396 	movw	r3, #662	; 0x296
 800719c:	9301      	str	r3, [sp, #4]
 800719e:	4b0c      	ldr	r3, [pc, #48]	; (80071d0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x228>)
 80071a0:	9300      	str	r3, [sp, #0]
 80071a2:	4b0c      	ldr	r3, [pc, #48]	; (80071d4 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x22c>)
 80071a4:	4632      	mov	r2, r6
 80071a6:	2102      	movs	r1, #2
 80071a8:	4620      	mov	r0, r4
 80071aa:	47a8      	blx	r5

}
 80071ac:	bf00      	nop
 80071ae:	37bc      	adds	r7, #188	; 0xbc
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071b4:	08025070 	.word	0x08025070
 80071b8:	08024c3c 	.word	0x08024c3c
 80071bc:	08024c40 	.word	0x08024c40
 80071c0:	08024c54 	.word	0x08024c54
 80071c4:	08025060 	.word	0x08025060
 80071c8:	08024b4c 	.word	0x08024b4c
 80071cc:	08024c5c 	.word	0x08024c5c
 80071d0:	0802490c 	.word	0x0802490c
 80071d4:	08024e98 	.word	0x08024e98

080071d8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7fe f8de 	bl	80053a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80071e8:	4a03      	ldr	r2, [pc, #12]	; (80071f8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev+0x20>)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	601a      	str	r2, [r3, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4618      	mov	r0, r3
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	080284f4 	.word	0x080284f4

080071fc <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShell10createTestEv>:
 80071fc:	b590      	push	{r4, r7, lr}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	f240 229a 	movw	r2, #666	; 0x29a
 8007208:	4906      	ldr	r1, [pc, #24]	; (8007224 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShell10createTestEv+0x28>)
 800720a:	2004      	movs	r0, #4
 800720c:	f004 faf8 	bl	800b800 <_ZnwjPKci>
 8007210:	4604      	mov	r4, r0
 8007212:	4620      	mov	r0, r4
 8007214:	f7ff ffe0 	bl	80071d8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev>
 8007218:	4623      	mov	r3, r4
 800721a:	4618      	mov	r0, r3
 800721c:	370c      	adds	r7, #12
 800721e:	46bd      	mov	sp, r7
 8007220:	bd90      	pop	{r4, r7, pc}
 8007222:	bf00      	nop
 8007224:	0802490c 	.word	0x0802490c

08007228 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev>:
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4618      	mov	r0, r3
 8007234:	f00c fed2 	bl	8013fdc <_ZN10UtestShellC1Ev>
 8007238:	4a03      	ldr	r2, [pc, #12]	; (8007248 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev+0x20>)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	601a      	str	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4618      	mov	r0, r3
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	08028448 	.word	0x08028448

0800724c <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv>:
{
 800724c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800724e:	b0a3      	sub	sp, #140	; 0x8c
 8007250:	af04      	add	r7, sp, #16
 8007252:	6078      	str	r0, [r7, #4]
	char response[30] = "+IPD,11:Hello World";		// an example data that ESP received from server
 8007254:	4b49      	ldr	r3, [pc, #292]	; (800737c <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x130>)
 8007256:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800725a:	461d      	mov	r5, r3
 800725c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800725e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007260:	682b      	ldr	r3, [r5, #0]
 8007262:	6023      	str	r3, [r4, #0]
 8007264:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007268:	2200      	movs	r2, #0
 800726a:	601a      	str	r2, [r3, #0]
 800726c:	605a      	str	r2, [r3, #4]
 800726e:	811a      	strh	r2, [r3, #8]

	Status response_state = IDLE;
 8007270:	2304      	movs	r3, #4
 8007272:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	char received_message[50] ={0};
 8007276:	2300      	movs	r3, #0
 8007278:	60fb      	str	r3, [r7, #12]
 800727a:	f107 0310 	add.w	r3, r7, #16
 800727e:	222e      	movs	r2, #46	; 0x2e
 8007280:	2100      	movs	r1, #0
 8007282:	4618      	mov	r0, r3
 8007284:	f01a fb64 	bl	8021950 <memset>

	for(int i=0;i<(int)strlen(response);i++)
 8007288:	2300      	movs	r3, #0
 800728a:	677b      	str	r3, [r7, #116]	; 0x74
 800728c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007290:	4618      	mov	r0, r3
 8007292:	f7f8 ffd3 	bl	800023c <strlen>
 8007296:	4603      	mov	r3, r0
 8007298:	461a      	mov	r2, r3
 800729a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800729c:	4293      	cmp	r3, r2
 800729e:	da35      	bge.n	800730c <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0xc0>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 80072a0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80072a4:	4936      	ldr	r1, [pc, #216]	; (8007380 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x134>)
 80072a6:	4618      	mov	r0, r3
 80072a8:	f006 fe6d 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80072ac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80072b0:	2100      	movs	r1, #0
 80072b2:	4618      	mov	r0, r3
 80072b4:	f004 ff40 	bl	800c138 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80072b8:	4604      	mov	r4, r0
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	330c      	adds	r3, #12
 80072be:	681d      	ldr	r5, [r3, #0]
 80072c0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80072c4:	492f      	ldr	r1, [pc, #188]	; (8007384 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x138>)
 80072c6:	4618      	mov	r0, r3
 80072c8:	f006 fe5d 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80072cc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80072d0:	4619      	mov	r1, r3
 80072d2:	4620      	mov	r0, r4
 80072d4:	47a8      	blx	r5
 80072d6:	4603      	mov	r3, r0
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	3264      	adds	r2, #100	; 0x64
 80072dc:	6812      	ldr	r2, [r2, #0]
 80072de:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80072e2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80072e4:	4401      	add	r1, r0
 80072e6:	7809      	ldrb	r1, [r1, #0]
 80072e8:	4618      	mov	r0, r3
 80072ea:	4790      	blx	r2
 80072ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80072f0:	4618      	mov	r0, r3
 80072f2:	f007 fa00 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80072f6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80072fa:	4618      	mov	r0, r3
 80072fc:	f007 f9fb 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 8007300:	f7fc fcf8 	bl	8003cf4 <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 8007304:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007306:	3301      	adds	r3, #1
 8007308:	677b      	str	r3, [r7, #116]	; 0x74
 800730a:	e7bf      	b.n	800728c <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x40>
	}

	response_state = Read_TCP_Message(received_message);
 800730c:	f107 030c 	add.w	r3, r7, #12
 8007310:	4618      	mov	r0, r3
 8007312:	f7fc fec5 	bl	80040a0 <Read_TCP_Message>
 8007316:	4603      	mov	r3, r0
 8007318:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	LONGS_EQUAL(STATUS_OK,response_state);
 800731c:	f00e fa16 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8007320:	4604      	mov	r4, r0
 8007322:	6823      	ldr	r3, [r4, #0]
 8007324:	3338      	adds	r3, #56	; 0x38
 8007326:	681d      	ldr	r5, [r3, #0]
 8007328:	f897 6073 	ldrb.w	r6, [r7, #115]	; 0x73
 800732c:	f00e fa1e 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007330:	4603      	mov	r3, r0
 8007332:	9302      	str	r3, [sp, #8]
 8007334:	f240 23aa 	movw	r3, #682	; 0x2aa
 8007338:	9301      	str	r3, [sp, #4]
 800733a:	4b13      	ldr	r3, [pc, #76]	; (8007388 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x13c>)
 800733c:	9300      	str	r3, [sp, #0]
 800733e:	4b13      	ldr	r3, [pc, #76]	; (800738c <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x140>)
 8007340:	4632      	mov	r2, r6
 8007342:	2102      	movs	r1, #2
 8007344:	4620      	mov	r0, r4
 8007346:	47a8      	blx	r5

	STRCMP_EQUAL("Hello World",received_message);
 8007348:	f00e fa00 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 800734c:	4604      	mov	r4, r0
 800734e:	6823      	ldr	r3, [r4, #0]
 8007350:	3324      	adds	r3, #36	; 0x24
 8007352:	681d      	ldr	r5, [r3, #0]
 8007354:	f00e fa0a 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007358:	4603      	mov	r3, r0
 800735a:	f107 020c 	add.w	r2, r7, #12
 800735e:	9302      	str	r3, [sp, #8]
 8007360:	f44f 732b 	mov.w	r3, #684	; 0x2ac
 8007364:	9301      	str	r3, [sp, #4]
 8007366:	4b08      	ldr	r3, [pc, #32]	; (8007388 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x13c>)
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	2300      	movs	r3, #0
 800736c:	4908      	ldr	r1, [pc, #32]	; (8007390 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x144>)
 800736e:	4620      	mov	r0, r4
 8007370:	47a8      	blx	r5

}
 8007372:	bf00      	nop
 8007374:	377c      	adds	r7, #124	; 0x7c
 8007376:	46bd      	mov	sp, r7
 8007378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800737a:	bf00      	nop
 800737c:	08025104 	.word	0x08025104
 8007380:	08024c3c 	.word	0x08024c3c
 8007384:	08024c5c 	.word	0x08024c5c
 8007388:	0802490c 	.word	0x0802490c
 800738c:	080250d4 	.word	0x080250d4
 8007390:	08024b4c 	.word	0x08024b4c

08007394 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4618      	mov	r0, r3
 80073a0:	f7fe f800 	bl	80053a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80073a4:	4a03      	ldr	r2, [pc, #12]	; (80073b4 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev+0x20>)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	601a      	str	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4618      	mov	r0, r3
 80073ae:	3708      	adds	r7, #8
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	08028428 	.word	0x08028428

080073b8 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShell10createTestEv>:
 80073b8:	b590      	push	{r4, r7, lr}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	f44f 722c 	mov.w	r2, #688	; 0x2b0
 80073c4:	4906      	ldr	r1, [pc, #24]	; (80073e0 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShell10createTestEv+0x28>)
 80073c6:	2004      	movs	r0, #4
 80073c8:	f004 fa1a 	bl	800b800 <_ZnwjPKci>
 80073cc:	4604      	mov	r4, r0
 80073ce:	4620      	mov	r0, r4
 80073d0:	f7ff ffe0 	bl	8007394 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev>
 80073d4:	4623      	mov	r3, r4
 80073d6:	4618      	mov	r0, r3
 80073d8:	370c      	adds	r7, #12
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd90      	pop	{r4, r7, pc}
 80073de:	bf00      	nop
 80073e0:	0802490c 	.word	0x0802490c

080073e4 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev>:
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4618      	mov	r0, r3
 80073f0:	f00c fdf4 	bl	8013fdc <_ZN10UtestShellC1Ev>
 80073f4:	4a03      	ldr	r2, [pc, #12]	; (8007404 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev+0x20>)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	601a      	str	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4618      	mov	r0, r3
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	0802837c 	.word	0x0802837c

08007408 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv>:
{
 8007408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800740a:	b095      	sub	sp, #84	; 0x54
 800740c:	af04      	add	r7, sp, #16
 800740e:	6078      	str	r0, [r7, #4]

	Status response_state = IDLE;
 8007410:	2304      	movs	r3, #4
 8007412:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	char received_message[50] ={0};
 8007416:	2300      	movs	r3, #0
 8007418:	60fb      	str	r3, [r7, #12]
 800741a:	f107 0310 	add.w	r3, r7, #16
 800741e:	222e      	movs	r2, #46	; 0x2e
 8007420:	2100      	movs	r1, #0
 8007422:	4618      	mov	r0, r3
 8007424:	f01a fa94 	bl	8021950 <memset>
	while(1)
	{
		response_state = Wait_TCP_Message(received_message, 1000);
 8007428:	f107 030c 	add.w	r3, r7, #12
 800742c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007430:	4618      	mov	r0, r3
 8007432:	f7fc fe99 	bl	8004168 <Wait_TCP_Message>
 8007436:	4603      	mov	r3, r0
 8007438:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if(response_state != IDLE)
 800743c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007440:	2b04      	cmp	r3, #4
 8007442:	d100      	bne.n	8007446 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x3e>
		response_state = Wait_TCP_Message(received_message, 1000);
 8007444:	e7f0      	b.n	8007428 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x20>
			break;
 8007446:	bf00      	nop
	}

	LONGS_EQUAL(TIMEOUT_ERROR,response_state);
 8007448:	f00e f980 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 800744c:	4604      	mov	r4, r0
 800744e:	6823      	ldr	r3, [r4, #0]
 8007450:	3338      	adds	r3, #56	; 0x38
 8007452:	681d      	ldr	r5, [r3, #0]
 8007454:	f897 603f 	ldrb.w	r6, [r7, #63]	; 0x3f
 8007458:	f00e f988 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800745c:	4603      	mov	r3, r0
 800745e:	9302      	str	r3, [sp, #8]
 8007460:	f240 23bd 	movw	r3, #701	; 0x2bd
 8007464:	9301      	str	r3, [sp, #4]
 8007466:	4b05      	ldr	r3, [pc, #20]	; (800747c <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x74>)
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	4b05      	ldr	r3, [pc, #20]	; (8007480 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x78>)
 800746c:	4632      	mov	r2, r6
 800746e:	2101      	movs	r1, #1
 8007470:	4620      	mov	r0, r4
 8007472:	47a8      	blx	r5

}
 8007474:	bf00      	nop
 8007476:	3744      	adds	r7, #68	; 0x44
 8007478:	46bd      	mov	sp, r7
 800747a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800747c:	0802490c 	.word	0x0802490c
 8007480:	08024ca0 	.word	0x08024ca0

08007484 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4618      	mov	r0, r3
 8007490:	f7fd ff88 	bl	80053a4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8007494:	4a03      	ldr	r2, [pc, #12]	; (80074a4 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev+0x20>)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	601a      	str	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4618      	mov	r0, r3
 800749e:	3708      	adds	r7, #8
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	0802835c 	.word	0x0802835c

080074a8 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShell10createTestEv>:
 80074a8:	b590      	push	{r4, r7, lr}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	f240 22c1 	movw	r2, #705	; 0x2c1
 80074b4:	4906      	ldr	r1, [pc, #24]	; (80074d0 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShell10createTestEv+0x28>)
 80074b6:	2004      	movs	r0, #4
 80074b8:	f004 f9a2 	bl	800b800 <_ZnwjPKci>
 80074bc:	4604      	mov	r4, r0
 80074be:	4620      	mov	r0, r4
 80074c0:	f7ff ffe0 	bl	8007484 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev>
 80074c4:	4623      	mov	r3, r4
 80074c6:	4618      	mov	r0, r3
 80074c8:	370c      	adds	r7, #12
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd90      	pop	{r4, r7, pc}
 80074ce:	bf00      	nop
 80074d0:	0802490c 	.word	0x0802490c

080074d4 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev>:
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4618      	mov	r0, r3
 80074e0:	f00c fd7c 	bl	8013fdc <_ZN10UtestShellC1Ev>
 80074e4:	4a03      	ldr	r2, [pc, #12]	; (80074f4 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev+0x20>)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	601a      	str	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4618      	mov	r0, r3
 80074ee:	3708      	adds	r7, #8
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	080282b0 	.word	0x080282b0

080074f8 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv>:
{
 80074f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074fa:	b0a3      	sub	sp, #140	; 0x8c
 80074fc:	af04      	add	r7, sp, #16
 80074fe:	6078      	str	r0, [r7, #4]
	char response[30] = "+IPD,13:PUMP_MOTOR=ON";		// an example string data that ESP received from server
 8007500:	4b4d      	ldr	r3, [pc, #308]	; (8007638 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x140>)
 8007502:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8007506:	461d      	mov	r5, r3
 8007508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800750a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800750c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007510:	6020      	str	r0, [r4, #0]
 8007512:	3404      	adds	r4, #4
 8007514:	8021      	strh	r1, [r4, #0]
 8007516:	f107 0356 	add.w	r3, r7, #86	; 0x56
 800751a:	2200      	movs	r2, #0
 800751c:	601a      	str	r2, [r3, #0]
 800751e:	605a      	str	r2, [r3, #4]

	Status response_state = IDLE;
 8007520:	2304      	movs	r3, #4
 8007522:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	char received_message[50] ={0};
 8007526:	2300      	movs	r3, #0
 8007528:	60fb      	str	r3, [r7, #12]
 800752a:	f107 0310 	add.w	r3, r7, #16
 800752e:	222e      	movs	r2, #46	; 0x2e
 8007530:	2100      	movs	r1, #0
 8007532:	4618      	mov	r0, r3
 8007534:	f01a fa0c 	bl	8021950 <memset>

	while(1)
	{
		response_state = Wait_TCP_Message(received_message, 1000);
 8007538:	f107 030c 	add.w	r3, r7, #12
 800753c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007540:	4618      	mov	r0, r3
 8007542:	f7fc fe11 	bl	8004168 <Wait_TCP_Message>
 8007546:	4603      	mov	r3, r0
 8007548:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

		if(response_state != IDLE)
 800754c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8007550:	2b04      	cmp	r3, #4
 8007552:	d141      	bne.n	80075d8 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0xe0>
			break;

		for(int i=0;i<(int)strlen(response);i++)
 8007554:	2300      	movs	r3, #0
 8007556:	677b      	str	r3, [r7, #116]	; 0x74
 8007558:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800755c:	4618      	mov	r0, r3
 800755e:	f7f8 fe6d 	bl	800023c <strlen>
 8007562:	4603      	mov	r3, r0
 8007564:	461a      	mov	r2, r3
 8007566:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007568:	4293      	cmp	r3, r2
 800756a:	dae5      	bge.n	8007538 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x40>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 800756c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007570:	4932      	ldr	r1, [pc, #200]	; (800763c <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x144>)
 8007572:	4618      	mov	r0, r3
 8007574:	f006 fd07 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8007578:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800757c:	2100      	movs	r1, #0
 800757e:	4618      	mov	r0, r3
 8007580:	f004 fdda 	bl	800c138 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8007584:	4604      	mov	r4, r0
 8007586:	6823      	ldr	r3, [r4, #0]
 8007588:	330c      	adds	r3, #12
 800758a:	681d      	ldr	r5, [r3, #0]
 800758c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007590:	492b      	ldr	r1, [pc, #172]	; (8007640 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x148>)
 8007592:	4618      	mov	r0, r3
 8007594:	f006 fcf7 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8007598:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800759c:	4619      	mov	r1, r3
 800759e:	4620      	mov	r0, r4
 80075a0:	47a8      	blx	r5
 80075a2:	4603      	mov	r3, r0
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	3264      	adds	r2, #100	; 0x64
 80075a8:	6812      	ldr	r2, [r2, #0]
 80075aa:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80075ae:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80075b0:	4401      	add	r1, r0
 80075b2:	7809      	ldrb	r1, [r1, #0]
 80075b4:	4618      	mov	r0, r3
 80075b6:	4790      	blx	r2
 80075b8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80075bc:	4618      	mov	r0, r3
 80075be:	f007 f89a 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80075c2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80075c6:	4618      	mov	r0, r3
 80075c8:	f007 f895 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 80075cc:	f7fc fb92 	bl	8003cf4 <ESP_UART_ReceiveHandler>
		for(int i=0;i<(int)strlen(response);i++)
 80075d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075d2:	3301      	adds	r3, #1
 80075d4:	677b      	str	r3, [r7, #116]	; 0x74
 80075d6:	e7bf      	b.n	8007558 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x60>
			break;
 80075d8:	bf00      	nop
		}
	}

	LONGS_EQUAL(STATUS_OK,response_state);
 80075da:	f00e f8b7 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 80075de:	4604      	mov	r4, r0
 80075e0:	6823      	ldr	r3, [r4, #0]
 80075e2:	3338      	adds	r3, #56	; 0x38
 80075e4:	681d      	ldr	r5, [r3, #0]
 80075e6:	f897 6073 	ldrb.w	r6, [r7, #115]	; 0x73
 80075ea:	f00e f8bf 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80075ee:	4603      	mov	r3, r0
 80075f0:	9302      	str	r3, [sp, #8]
 80075f2:	f240 23d7 	movw	r3, #727	; 0x2d7
 80075f6:	9301      	str	r3, [sp, #4]
 80075f8:	4b12      	ldr	r3, [pc, #72]	; (8007644 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x14c>)
 80075fa:	9300      	str	r3, [sp, #0]
 80075fc:	4b12      	ldr	r3, [pc, #72]	; (8007648 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x150>)
 80075fe:	4632      	mov	r2, r6
 8007600:	2102      	movs	r1, #2
 8007602:	4620      	mov	r0, r4
 8007604:	47a8      	blx	r5
	STRCMP_EQUAL("PUMP_MOTOR=ON",received_message);
 8007606:	f00e f8a1 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 800760a:	4604      	mov	r4, r0
 800760c:	6823      	ldr	r3, [r4, #0]
 800760e:	3324      	adds	r3, #36	; 0x24
 8007610:	681d      	ldr	r5, [r3, #0]
 8007612:	f00e f8ab 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007616:	4603      	mov	r3, r0
 8007618:	f107 020c 	add.w	r2, r7, #12
 800761c:	9302      	str	r3, [sp, #8]
 800761e:	f44f 7336 	mov.w	r3, #728	; 0x2d8
 8007622:	9301      	str	r3, [sp, #4]
 8007624:	4b07      	ldr	r3, [pc, #28]	; (8007644 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x14c>)
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	2300      	movs	r3, #0
 800762a:	4908      	ldr	r1, [pc, #32]	; (800764c <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x154>)
 800762c:	4620      	mov	r0, r4
 800762e:	47a8      	blx	r5

}
 8007630:	bf00      	nop
 8007632:	377c      	adds	r7, #124	; 0x7c
 8007634:	46bd      	mov	sp, r7
 8007636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007638:	08025134 	.word	0x08025134
 800763c:	08024c3c 	.word	0x08024c3c
 8007640:	08024c5c 	.word	0x08024c5c
 8007644:	0802490c 	.word	0x0802490c
 8007648:	080250d4 	.word	0x080250d4
 800764c:	08025124 	.word	0x08025124

08007650 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	4a05      	ldr	r2, [pc, #20]	; (8007670 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev+0x20>)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	601a      	str	r2, [r3, #0]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4618      	mov	r0, r3
 8007662:	f00c fd0f 	bl	8014084 <_ZN10UtestShellD1Ev>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4618      	mov	r0, r3
 800766a:	3708      	adds	r7, #8
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	080282b0 	.word	0x080282b0

08007674 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD0Ev>:
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f7ff ffe7 	bl	8007650 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>
 8007682:	211c      	movs	r1, #28
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f004 f8cf 	bl	800b828 <_ZdlPvj>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4618      	mov	r0, r3
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev>:
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	4a05      	ldr	r2, [pc, #20]	; (80076b4 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev+0x20>)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	601a      	str	r2, [r3, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7fd fe8f 	bl	80053c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4618      	mov	r0, r3
 80076ae:	3708      	adds	r7, #8
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	0802835c 	.word	0x0802835c

080076b8 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD0Ev>:
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f7ff ffe7 	bl	8007694 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev>
 80076c6:	2104      	movs	r1, #4
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f004 f8ad 	bl	800b828 <_ZdlPvj>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4618      	mov	r0, r3
 80076d2:	3708      	adds	r7, #8
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	4a05      	ldr	r2, [pc, #20]	; (80076f8 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev+0x20>)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	601a      	str	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4618      	mov	r0, r3
 80076ea:	f00c fccb 	bl	8014084 <_ZN10UtestShellD1Ev>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4618      	mov	r0, r3
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	0802837c 	.word	0x0802837c

080076fc <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD0Ev>:
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f7ff ffe7 	bl	80076d8 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>
 800770a:	211c      	movs	r1, #28
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f004 f88b 	bl	800b828 <_ZdlPvj>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4618      	mov	r0, r3
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev>:
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	4a05      	ldr	r2, [pc, #20]	; (800773c <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev+0x20>)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	601a      	str	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4618      	mov	r0, r3
 800772e:	f7fd fe4b 	bl	80053c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4618      	mov	r0, r3
 8007736:	3708      	adds	r7, #8
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	08028428 	.word	0x08028428

08007740 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD0Ev>:
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f7ff ffe7 	bl	800771c <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev>
 800774e:	2104      	movs	r1, #4
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f004 f869 	bl	800b828 <_ZdlPvj>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4618      	mov	r0, r3
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	4a05      	ldr	r2, [pc, #20]	; (8007780 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev+0x20>)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	601a      	str	r2, [r3, #0]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4618      	mov	r0, r3
 8007772:	f00c fc87 	bl	8014084 <_ZN10UtestShellD1Ev>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4618      	mov	r0, r3
 800777a:	3708      	adds	r7, #8
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	08028448 	.word	0x08028448

08007784 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD0Ev>:
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f7ff ffe7 	bl	8007760 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>
 8007792:	211c      	movs	r1, #28
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f004 f847 	bl	800b828 <_ZdlPvj>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4618      	mov	r0, r3
 800779e:	3708      	adds	r7, #8
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev>:
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	4a05      	ldr	r2, [pc, #20]	; (80077c4 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev+0x20>)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	601a      	str	r2, [r3, #0]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7fd fe07 	bl	80053c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4618      	mov	r0, r3
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	080284f4 	.word	0x080284f4

080077c8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD0Ev>:
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f7ff ffe7 	bl	80077a4 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev>
 80077d6:	2104      	movs	r1, #4
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f004 f825 	bl	800b828 <_ZdlPvj>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4618      	mov	r0, r3
 80077e2:	3708      	adds	r7, #8
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	4a05      	ldr	r2, [pc, #20]	; (8007808 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev+0x20>)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	601a      	str	r2, [r3, #0]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4618      	mov	r0, r3
 80077fa:	f00c fc43 	bl	8014084 <_ZN10UtestShellD1Ev>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4618      	mov	r0, r3
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	08028514 	.word	0x08028514

0800780c <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD0Ev>:
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f7ff ffe7 	bl	80077e8 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>
 800781a:	211c      	movs	r1, #28
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f004 f803 	bl	800b828 <_ZdlPvj>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4618      	mov	r0, r3
 8007826:	3708      	adds	r7, #8
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev>:
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	4a05      	ldr	r2, [pc, #20]	; (800784c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev+0x20>)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	601a      	str	r2, [r3, #0]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4618      	mov	r0, r3
 800783e:	f7fd fdc3 	bl	80053c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4618      	mov	r0, r3
 8007846:	3708      	adds	r7, #8
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	080285c0 	.word	0x080285c0

08007850 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD0Ev>:
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7ff ffe7 	bl	800782c <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev>
 800785e:	2104      	movs	r1, #4
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f003 ffe1 	bl	800b828 <_ZdlPvj>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4618      	mov	r0, r3
 800786a:	3708      	adds	r7, #8
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	4a05      	ldr	r2, [pc, #20]	; (8007890 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev+0x20>)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	601a      	str	r2, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4618      	mov	r0, r3
 8007882:	f00c fbff 	bl	8014084 <_ZN10UtestShellD1Ev>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4618      	mov	r0, r3
 800788a:	3708      	adds	r7, #8
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	080285e0 	.word	0x080285e0

08007894 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD0Ev>:
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f7ff ffe7 	bl	8007870 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>
 80078a2:	211c      	movs	r1, #28
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f003 ffbf 	bl	800b828 <_ZdlPvj>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4618      	mov	r0, r3
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev>:
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	4a05      	ldr	r2, [pc, #20]	; (80078d4 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev+0x20>)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	601a      	str	r2, [r3, #0]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7fd fd7f 	bl	80053c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4618      	mov	r0, r3
 80078ce:	3708      	adds	r7, #8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	0802868c 	.word	0x0802868c

080078d8 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD0Ev>:
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f7ff ffe7 	bl	80078b4 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev>
 80078e6:	2104      	movs	r1, #4
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f003 ff9d 	bl	800b828 <_ZdlPvj>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4618      	mov	r0, r3
 80078f2:	3708      	adds	r7, #8
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	4a05      	ldr	r2, [pc, #20]	; (8007918 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev+0x20>)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	601a      	str	r2, [r3, #0]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4618      	mov	r0, r3
 800790a:	f00c fbbb 	bl	8014084 <_ZN10UtestShellD1Ev>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4618      	mov	r0, r3
 8007912:	3708      	adds	r7, #8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	080286ac 	.word	0x080286ac

0800791c <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD0Ev>:
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f7ff ffe7 	bl	80078f8 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>
 800792a:	211c      	movs	r1, #28
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f003 ff7b 	bl	800b828 <_ZdlPvj>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4618      	mov	r0, r3
 8007936:	3708      	adds	r7, #8
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev>:
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	4a05      	ldr	r2, [pc, #20]	; (800795c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev+0x20>)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	601a      	str	r2, [r3, #0]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4618      	mov	r0, r3
 800794e:	f7fd fd3b 	bl	80053c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4618      	mov	r0, r3
 8007956:	3708      	adds	r7, #8
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}
 800795c:	08028758 	.word	0x08028758

08007960 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD0Ev>:
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f7ff ffe7 	bl	800793c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev>
 800796e:	2104      	movs	r1, #4
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f003 ff59 	bl	800b828 <_ZdlPvj>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4618      	mov	r0, r3
 800797a:	3708      	adds	r7, #8
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	4a05      	ldr	r2, [pc, #20]	; (80079a0 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev+0x20>)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	601a      	str	r2, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4618      	mov	r0, r3
 8007992:	f00c fb77 	bl	8014084 <_ZN10UtestShellD1Ev>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4618      	mov	r0, r3
 800799a:	3708      	adds	r7, #8
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	08028778 	.word	0x08028778

080079a4 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD0Ev>:
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f7ff ffe7 	bl	8007980 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>
 80079b2:	211c      	movs	r1, #28
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f003 ff37 	bl	800b828 <_ZdlPvj>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4618      	mov	r0, r3
 80079be:	3708      	adds	r7, #8
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev>:
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	4a05      	ldr	r2, [pc, #20]	; (80079e4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev+0x20>)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	601a      	str	r2, [r3, #0]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7fd fcf7 	bl	80053c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4618      	mov	r0, r3
 80079de:	3708      	adds	r7, #8
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	08028824 	.word	0x08028824

080079e8 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD0Ev>:
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f7ff ffe7 	bl	80079c4 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev>
 80079f6:	2104      	movs	r1, #4
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f003 ff15 	bl	800b828 <_ZdlPvj>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4618      	mov	r0, r3
 8007a02:	3708      	adds	r7, #8
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	4a05      	ldr	r2, [pc, #20]	; (8007a28 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev+0x20>)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	601a      	str	r2, [r3, #0]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f00c fb33 	bl	8014084 <_ZN10UtestShellD1Ev>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4618      	mov	r0, r3
 8007a22:	3708      	adds	r7, #8
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	08028844 	.word	0x08028844

08007a2c <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD0Ev>:
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f7ff ffe7 	bl	8007a08 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>
 8007a3a:	211c      	movs	r1, #28
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f003 fef3 	bl	800b828 <_ZdlPvj>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4618      	mov	r0, r3
 8007a46:	3708      	adds	r7, #8
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev>:
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	4a05      	ldr	r2, [pc, #20]	; (8007a6c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev+0x20>)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	601a      	str	r2, [r3, #0]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7fd fcb3 	bl	80053c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4618      	mov	r0, r3
 8007a66:	3708      	adds	r7, #8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	080288f0 	.word	0x080288f0

08007a70 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD0Ev>:
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f7ff ffe7 	bl	8007a4c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev>
 8007a7e:	2104      	movs	r1, #4
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f003 fed1 	bl	800b828 <_ZdlPvj>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3708      	adds	r7, #8
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Command_Process_Test)
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	4a05      	ldr	r2, [pc, #20]	; (8007ab0 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev+0x20>)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	601a      	str	r2, [r3, #0]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f00c faef 	bl	8014084 <_ZN10UtestShellD1Ev>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	08028910 	.word	0x08028910

08007ab4 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD0Ev>:
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f7ff ffe7 	bl	8007a90 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>
 8007ac2:	211c      	movs	r1, #28
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f003 feaf 	bl	800b828 <_ZdlPvj>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4618      	mov	r0, r3
 8007ace:	3708      	adds	r7, #8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev>:
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	4a05      	ldr	r2, [pc, #20]	; (8007af4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev+0x20>)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	601a      	str	r2, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7fd fc6f 	bl	80053c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4618      	mov	r0, r3
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	080289bc 	.word	0x080289bc

08007af8 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD0Ev>:
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f7ff ffe7 	bl	8007ad4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev>
 8007b06:	2104      	movs	r1, #4
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f003 fe8d 	bl	800b828 <_ZdlPvj>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4618      	mov	r0, r3
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	4a05      	ldr	r2, [pc, #20]	; (8007b38 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev+0x20>)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	601a      	str	r2, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f00c faab 	bl	8014084 <_ZN10UtestShellD1Ev>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4618      	mov	r0, r3
 8007b32:	3708      	adds	r7, #8
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	080289dc 	.word	0x080289dc

08007b3c <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD0Ev>:
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f7ff ffe7 	bl	8007b18 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
 8007b4a:	211c      	movs	r1, #28
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f003 fe6b 	bl	800b828 <_ZdlPvj>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4618      	mov	r0, r3
 8007b56:	3708      	adds	r7, #8
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>:
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	4a05      	ldr	r2, [pc, #20]	; (8007b7c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev+0x20>)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	601a      	str	r2, [r3, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f7fd fc2b 	bl	80053c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4618      	mov	r0, r3
 8007b76:	3708      	adds	r7, #8
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	08028a88 	.word	0x08028a88

08007b80 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD0Ev>:
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f7ff ffe7 	bl	8007b5c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>
 8007b8e:	2104      	movs	r1, #4
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f003 fe49 	bl	800b828 <_ZdlPvj>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3708      	adds	r7, #8
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	4a05      	ldr	r2, [pc, #20]	; (8007bc0 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	601a      	str	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f00c fa67 	bl	8014084 <_ZN10UtestShellD1Ev>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3708      	adds	r7, #8
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	08028aa8 	.word	0x08028aa8

08007bc4 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD0Ev>:
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f7ff ffe7 	bl	8007ba0 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
 8007bd2:	211c      	movs	r1, #28
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f003 fe27 	bl	800b828 <_ZdlPvj>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>:
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	4a05      	ldr	r2, [pc, #20]	; (8007c04 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	601a      	str	r2, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7fd fbe7 	bl	80053c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3708      	adds	r7, #8
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	08028b54 	.word	0x08028b54

08007c08 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD0Ev>:
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f7ff ffe7 	bl	8007be4 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>
 8007c16:	2104      	movs	r1, #4
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f003 fe05 	bl	800b828 <_ZdlPvj>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4618      	mov	r0, r3
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	4a05      	ldr	r2, [pc, #20]	; (8007c48 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev+0x20>)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	601a      	str	r2, [r3, #0]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f00c fa23 	bl	8014084 <_ZN10UtestShellD1Ev>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4618      	mov	r0, r3
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	08028b74 	.word	0x08028b74

08007c4c <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD0Ev>:
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f7ff ffe7 	bl	8007c28 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
 8007c5a:	211c      	movs	r1, #28
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f003 fde3 	bl	800b828 <_ZdlPvj>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4618      	mov	r0, r3
 8007c66:	3708      	adds	r7, #8
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>:
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	4a05      	ldr	r2, [pc, #20]	; (8007c8c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev+0x20>)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	601a      	str	r2, [r3, #0]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7fd fba3 	bl	80053c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4618      	mov	r0, r3
 8007c86:	3708      	adds	r7, #8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	08028c20 	.word	0x08028c20

08007c90 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD0Ev>:
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f7ff ffe7 	bl	8007c6c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>
 8007c9e:	2104      	movs	r1, #4
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f003 fdc1 	bl	800b828 <_ZdlPvj>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3708      	adds	r7, #8
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	4a05      	ldr	r2, [pc, #20]	; (8007cd0 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev+0x20>)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	601a      	str	r2, [r3, #0]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f00c f9df 	bl	8014084 <_ZN10UtestShellD1Ev>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3708      	adds	r7, #8
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	08028c40 	.word	0x08028c40

08007cd4 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD0Ev>:
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f7ff ffe7 	bl	8007cb0 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
 8007ce2:	211c      	movs	r1, #28
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f003 fd9f 	bl	800b828 <_ZdlPvj>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4618      	mov	r0, r3
 8007cee:	3708      	adds	r7, #8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>:
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	4a05      	ldr	r2, [pc, #20]	; (8007d14 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev+0x20>)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	601a      	str	r2, [r3, #0]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7fd fb5f 	bl	80053c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3708      	adds	r7, #8
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	08028cec 	.word	0x08028cec

08007d18 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD0Ev>:
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7ff ffe7 	bl	8007cf4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>
 8007d26:	2104      	movs	r1, #4
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f003 fd7d 	bl	800b828 <_ZdlPvj>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4618      	mov	r0, r3
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	4a05      	ldr	r2, [pc, #20]	; (8007d58 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	601a      	str	r2, [r3, #0]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f00c f99b 	bl	8014084 <_ZN10UtestShellD1Ev>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4618      	mov	r0, r3
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	08028d0c 	.word	0x08028d0c

08007d5c <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD0Ev>:
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f7ff ffe7 	bl	8007d38 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
 8007d6a:	211c      	movs	r1, #28
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f003 fd5b 	bl	800b828 <_ZdlPvj>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4618      	mov	r0, r3
 8007d76:	3708      	adds	r7, #8
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>:
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	4a05      	ldr	r2, [pc, #20]	; (8007d9c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	601a      	str	r2, [r3, #0]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7fd fb1b 	bl	80053c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4618      	mov	r0, r3
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	08028db8 	.word	0x08028db8

08007da0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD0Ev>:
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f7ff ffe7 	bl	8007d7c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>
 8007dae:	2104      	movs	r1, #4
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f003 fd39 	bl	800b828 <_ZdlPvj>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4618      	mov	r0, r3
 8007dba:	3708      	adds	r7, #8
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	4a05      	ldr	r2, [pc, #20]	; (8007de0 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev+0x20>)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	601a      	str	r2, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f00c f957 	bl	8014084 <_ZN10UtestShellD1Ev>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	08028dd8 	.word	0x08028dd8

08007de4 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD0Ev>:
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f7ff ffe7 	bl	8007dc0 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
 8007df2:	211c      	movs	r1, #28
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f003 fd17 	bl	800b828 <_ZdlPvj>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3708      	adds	r7, #8
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>:
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	4a05      	ldr	r2, [pc, #20]	; (8007e24 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev+0x20>)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	601a      	str	r2, [r3, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7fd fad7 	bl	80053c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3708      	adds	r7, #8
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	08028e84 	.word	0x08028e84

08007e28 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD0Ev>:
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f7ff ffe7 	bl	8007e04 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>
 8007e36:	2104      	movs	r1, #4
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f003 fcf5 	bl	800b828 <_ZdlPvj>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4618      	mov	r0, r3
 8007e42:	3708      	adds	r7, #8
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	4a05      	ldr	r2, [pc, #20]	; (8007e68 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev+0x20>)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	601a      	str	r2, [r3, #0]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f00c f913 	bl	8014084 <_ZN10UtestShellD1Ev>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4618      	mov	r0, r3
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	08028ea4 	.word	0x08028ea4

08007e6c <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD0Ev>:
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f7ff ffe7 	bl	8007e48 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
 8007e7a:	211c      	movs	r1, #28
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f003 fcd3 	bl	800b828 <_ZdlPvj>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4618      	mov	r0, r3
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>:
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	4a05      	ldr	r2, [pc, #20]	; (8007eac <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev+0x20>)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	601a      	str	r2, [r3, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7fd fa93 	bl	80053c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	08028f50 	.word	0x08028f50

08007eb0 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD0Ev>:
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f7ff ffe7 	bl	8007e8c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>
 8007ebe:	2104      	movs	r1, #4
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f003 fcb1 	bl	800b828 <_ZdlPvj>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3708      	adds	r7, #8
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_Response_Test)
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	4a05      	ldr	r2, [pc, #20]	; (8007ef0 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev+0x20>)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f00c f8cf 	bl	8014084 <_ZN10UtestShellD1Ev>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3708      	adds	r7, #8
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	08028f70 	.word	0x08028f70

08007ef4 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD0Ev>:
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f7ff ffe7 	bl	8007ed0 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
 8007f02:	211c      	movs	r1, #28
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f003 fc8f 	bl	800b828 <_ZdlPvj>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>:
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	4a05      	ldr	r2, [pc, #20]	; (8007f34 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev+0x20>)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	601a      	str	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7fd fa4f 	bl	80053c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3708      	adds	r7, #8
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	0802901c 	.word	0x0802901c

08007f38 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD0Ev>:
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f7ff ffe7 	bl	8007f14 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>
 8007f46:	2104      	movs	r1, #4
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f003 fc6d 	bl	800b828 <_ZdlPvj>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4618      	mov	r0, r3
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	4a05      	ldr	r2, [pc, #20]	; (8007f78 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev+0x20>)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	601a      	str	r2, [r3, #0]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f00c f88b 	bl	8014084 <_ZN10UtestShellD1Ev>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4618      	mov	r0, r3
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	0802903c 	.word	0x0802903c

08007f7c <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD0Ev>:
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f7ff ffe7 	bl	8007f58 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
 8007f8a:	211c      	movs	r1, #28
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f003 fc4b 	bl	800b828 <_ZdlPvj>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4618      	mov	r0, r3
 8007f96:	3708      	adds	r7, #8
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>:
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	4a05      	ldr	r2, [pc, #20]	; (8007fbc <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev+0x20>)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	601a      	str	r2, [r3, #0]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7fd fa0b 	bl	80053c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3708      	adds	r7, #8
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	080290e8 	.word	0x080290e8

08007fc0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD0Ev>:
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f7ff ffe7 	bl	8007f9c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>
 8007fce:	2104      	movs	r1, #4
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f003 fc29 	bl	800b828 <_ZdlPvj>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3708      	adds	r7, #8
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	4a05      	ldr	r2, [pc, #20]	; (8008000 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev+0x20>)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	601a      	str	r2, [r3, #0]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f00c f847 	bl	8014084 <_ZN10UtestShellD1Ev>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3708      	adds	r7, #8
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	08029108 	.word	0x08029108

08008004 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD0Ev>:
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f7ff ffe7 	bl	8007fe0 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
 8008012:	211c      	movs	r1, #28
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f003 fc07 	bl	800b828 <_ZdlPvj>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4618      	mov	r0, r3
 800801e:	3708      	adds	r7, #8
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>:
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	4a05      	ldr	r2, [pc, #20]	; (8008044 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev+0x20>)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	601a      	str	r2, [r3, #0]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4618      	mov	r0, r3
 8008036:	f7fd f9c7 	bl	80053c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4618      	mov	r0, r3
 800803e:	3708      	adds	r7, #8
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}
 8008044:	080291b4 	.word	0x080291b4

08008048 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD0Ev>:
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7ff ffe7 	bl	8008024 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>
 8008056:	2104      	movs	r1, #4
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f003 fbe5 	bl	800b828 <_ZdlPvj>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4618      	mov	r0, r3
 8008062:	3708      	adds	r7, #8
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	4a05      	ldr	r2, [pc, #20]	; (8008088 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev+0x20>)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	601a      	str	r2, [r3, #0]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4618      	mov	r0, r3
 800807a:	f00c f803 	bl	8014084 <_ZN10UtestShellD1Ev>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4618      	mov	r0, r3
 8008082:	3708      	adds	r7, #8
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	080291d4 	.word	0x080291d4

0800808c <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD0Ev>:
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f7ff ffe7 	bl	8008068 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
 800809a:	211c      	movs	r1, #28
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f003 fbc3 	bl	800b828 <_ZdlPvj>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4618      	mov	r0, r3
 80080a6:	3708      	adds	r7, #8
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>:
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	4a05      	ldr	r2, [pc, #20]	; (80080cc <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev+0x20>)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	601a      	str	r2, [r3, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4618      	mov	r0, r3
 80080be:	f7fd f983 	bl	80053c8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4618      	mov	r0, r3
 80080c6:	3708      	adds	r7, #8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	08029280 	.word	0x08029280

080080d0 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD0Ev>:
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f7ff ffe7 	bl	80080ac <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>
 80080de:	2104      	movs	r1, #4
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f003 fba1 	bl	800b828 <_ZdlPvj>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4618      	mov	r0, r3
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, CapacityTest)
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	4a05      	ldr	r2, [pc, #20]	; (8008110 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev+0x20>)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	601a      	str	r2, [r3, #0]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4618      	mov	r0, r3
 8008102:	f00b ffbf 	bl	8014084 <_ZN10UtestShellD1Ev>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4618      	mov	r0, r3
 800810a:	3708      	adds	r7, #8
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	080292c0 	.word	0x080292c0

08008114 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD0Ev>:
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f7ff ffe7 	bl	80080f0 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
 8008122:	211c      	movs	r1, #28
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f003 fb7f 	bl	800b828 <_ZdlPvj>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4618      	mov	r0, r3
 800812e:	3708      	adds	r7, #8
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>:
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	4a05      	ldr	r2, [pc, #20]	; (8008154 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev+0x20>)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	601a      	str	r2, [r3, #0]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4618      	mov	r0, r3
 8008146:	f7fc faf7 	bl	8004738 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4618      	mov	r0, r3
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	0802936c 	.word	0x0802936c

08008158 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD0Ev>:
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f7ff ffe7 	bl	8008134 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>
 8008166:	2108      	movs	r1, #8
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f003 fb5d 	bl	800b828 <_ZdlPvj>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4618      	mov	r0, r3
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, LookForTest)
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	4a05      	ldr	r2, [pc, #20]	; (8008198 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev+0x20>)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	601a      	str	r2, [r3, #0]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4618      	mov	r0, r3
 800818a:	f00b ff7b 	bl	8014084 <_ZN10UtestShellD1Ev>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4618      	mov	r0, r3
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	0802938c 	.word	0x0802938c

0800819c <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD0Ev>:
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f7ff ffe7 	bl	8008178 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
 80081aa:	211c      	movs	r1, #28
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f003 fb3b 	bl	800b828 <_ZdlPvj>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4618      	mov	r0, r3
 80081b6:	3708      	adds	r7, #8
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>:
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	4a05      	ldr	r2, [pc, #20]	; (80081dc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev+0x20>)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	601a      	str	r2, [r3, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7fc fab3 	bl	8004738 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4618      	mov	r0, r3
 80081d6:	3708      	adds	r7, #8
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	08029438 	.word	0x08029438

080081e0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD0Ev>:
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f7ff ffe7 	bl	80081bc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>
 80081ee:	2108      	movs	r1, #8
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f003 fb19 	bl	800b828 <_ZdlPvj>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4618      	mov	r0, r3
 80081fa:	3708      	adds	r7, #8
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushArrayTest)
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	4a05      	ldr	r2, [pc, #20]	; (8008220 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev+0x20>)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	601a      	str	r2, [r3, #0]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4618      	mov	r0, r3
 8008212:	f00b ff37 	bl	8014084 <_ZN10UtestShellD1Ev>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	4618      	mov	r0, r3
 800821a:	3708      	adds	r7, #8
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}
 8008220:	08029458 	.word	0x08029458

08008224 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD0Ev>:
 8008224:	b580      	push	{r7, lr}
 8008226:	b082      	sub	sp, #8
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f7ff ffe7 	bl	8008200 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
 8008232:	211c      	movs	r1, #28
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f003 faf7 	bl	800b828 <_ZdlPvj>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4618      	mov	r0, r3
 800823e:	3708      	adds	r7, #8
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>:
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	4a05      	ldr	r2, [pc, #20]	; (8008264 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev+0x20>)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	601a      	str	r2, [r3, #0]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4618      	mov	r0, r3
 8008256:	f7fc fa6f 	bl	8004738 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4618      	mov	r0, r3
 800825e:	3708      	adds	r7, #8
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	08029504 	.word	0x08029504

08008268 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD0Ev>:
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f7ff ffe7 	bl	8008244 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>
 8008276:	2108      	movs	r1, #8
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f003 fad5 	bl	800b828 <_ZdlPvj>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4618      	mov	r0, r3
 8008282:	3708      	adds	r7, #8
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	4a05      	ldr	r2, [pc, #20]	; (80082a8 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev+0x20>)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	601a      	str	r2, [r3, #0]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4618      	mov	r0, r3
 800829a:	f00b fef3 	bl	8014084 <_ZN10UtestShellD1Ev>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4618      	mov	r0, r3
 80082a2:	3708      	adds	r7, #8
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	08029524 	.word	0x08029524

080082ac <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD0Ev>:
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f7ff ffe7 	bl	8008288 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
 80082ba:	211c      	movs	r1, #28
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f003 fab3 	bl	800b828 <_ZdlPvj>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4618      	mov	r0, r3
 80082c6:	3708      	adds	r7, #8
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>:
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	4a05      	ldr	r2, [pc, #20]	; (80082ec <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev+0x20>)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	601a      	str	r2, [r3, #0]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4618      	mov	r0, r3
 80082de:	f7fc fa2b 	bl	8004738 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4618      	mov	r0, r3
 80082e6:	3708      	adds	r7, #8
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	080295d0 	.word	0x080295d0

080082f0 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD0Ev>:
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f7ff ffe7 	bl	80082cc <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>
 80082fe:	2108      	movs	r1, #8
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f003 fa91 	bl	800b828 <_ZdlPvj>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4618      	mov	r0, r3
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	4a05      	ldr	r2, [pc, #20]	; (8008330 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev+0x20>)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	601a      	str	r2, [r3, #0]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4618      	mov	r0, r3
 8008322:	f00b feaf 	bl	8014084 <_ZN10UtestShellD1Ev>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4618      	mov	r0, r3
 800832a:	3708      	adds	r7, #8
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	080295f0 	.word	0x080295f0

08008334 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD0Ev>:
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f7ff ffe7 	bl	8008310 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
 8008342:	211c      	movs	r1, #28
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f003 fa6f 	bl	800b828 <_ZdlPvj>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4618      	mov	r0, r3
 800834e:	3708      	adds	r7, #8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>:
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	4a05      	ldr	r2, [pc, #20]	; (8008374 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev+0x20>)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	601a      	str	r2, [r3, #0]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4618      	mov	r0, r3
 8008366:	f7fc f9e7 	bl	8004738 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4618      	mov	r0, r3
 800836e:	3708      	adds	r7, #8
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	0802969c 	.word	0x0802969c

08008378 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD0Ev>:
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f7ff ffe7 	bl	8008354 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>
 8008386:	2108      	movs	r1, #8
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f003 fa4d 	bl	800b828 <_ZdlPvj>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4618      	mov	r0, r3
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopDataTests)
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	4a05      	ldr	r2, [pc, #20]	; (80083b8 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev+0x20>)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	601a      	str	r2, [r3, #0]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4618      	mov	r0, r3
 80083aa:	f00b fe6b 	bl	8014084 <_ZN10UtestShellD1Ev>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4618      	mov	r0, r3
 80083b2:	3708      	adds	r7, #8
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	080296bc 	.word	0x080296bc

080083bc <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD0Ev>:
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f7ff ffe7 	bl	8008398 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
 80083ca:	211c      	movs	r1, #28
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f003 fa2b 	bl	800b828 <_ZdlPvj>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4618      	mov	r0, r3
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>:
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	4a05      	ldr	r2, [pc, #20]	; (80083fc <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev+0x20>)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	601a      	str	r2, [r3, #0]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4618      	mov	r0, r3
 80083ee:	f7fc f9a3 	bl	8004738 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4618      	mov	r0, r3
 80083f6:	3708      	adds	r7, #8
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	08029768 	.word	0x08029768

08008400 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD0Ev>:
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f7ff ffe7 	bl	80083dc <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>
 800840e:	2108      	movs	r1, #8
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f003 fa09 	bl	800b828 <_ZdlPvj>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4618      	mov	r0, r3
 800841a:	3708      	adds	r7, #8
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	4a05      	ldr	r2, [pc, #20]	; (8008440 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev+0x20>)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	601a      	str	r2, [r3, #0]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4618      	mov	r0, r3
 8008432:	f00b fe27 	bl	8014084 <_ZN10UtestShellD1Ev>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4618      	mov	r0, r3
 800843a:	3708      	adds	r7, #8
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	08029788 	.word	0x08029788

08008444 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD0Ev>:
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f7ff ffe7 	bl	8008420 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
 8008452:	211c      	movs	r1, #28
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f003 f9e7 	bl	800b828 <_ZdlPvj>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4618      	mov	r0, r3
 800845e:	3708      	adds	r7, #8
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>:
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	4a05      	ldr	r2, [pc, #20]	; (8008484 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev+0x20>)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	601a      	str	r2, [r3, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4618      	mov	r0, r3
 8008476:	f7fc f95f 	bl	8004738 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4618      	mov	r0, r3
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}
 8008484:	08029834 	.word	0x08029834

08008488 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD0Ev>:
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f7ff ffe7 	bl	8008464 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>
 8008496:	2108      	movs	r1, #8
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f003 f9c5 	bl	800b828 <_ZdlPvj>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4618      	mov	r0, r3
 80084a2:	3708      	adds	r7, #8
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushDataTests)
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	4a05      	ldr	r2, [pc, #20]	; (80084c8 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev+0x20>)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	601a      	str	r2, [r3, #0]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4618      	mov	r0, r3
 80084ba:	f00b fde3 	bl	8014084 <_ZN10UtestShellD1Ev>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4618      	mov	r0, r3
 80084c2:	3708      	adds	r7, #8
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	08029854 	.word	0x08029854

080084cc <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD0Ev>:
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f7ff ffe7 	bl	80084a8 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
 80084da:	211c      	movs	r1, #28
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f003 f9a3 	bl	800b828 <_ZdlPvj>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4618      	mov	r0, r3
 80084e6:	3708      	adds	r7, #8
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>:
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	4a05      	ldr	r2, [pc, #20]	; (800850c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev+0x20>)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	601a      	str	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7fc f91b 	bl	8004738 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4618      	mov	r0, r3
 8008506:	3708      	adds	r7, #8
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}
 800850c:	08029900 	.word	0x08029900

08008510 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD0Ev>:
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f7ff ffe7 	bl	80084ec <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>
 800851e:	2108      	movs	r1, #8
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f003 f981 	bl	800b828 <_ZdlPvj>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4618      	mov	r0, r3
 800852a:	3708      	adds	r7, #8
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, InitTest)
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	4a05      	ldr	r2, [pc, #20]	; (8008550 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev+0x20>)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	601a      	str	r2, [r3, #0]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4618      	mov	r0, r3
 8008542:	f00b fd9f 	bl	8014084 <_ZN10UtestShellD1Ev>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4618      	mov	r0, r3
 800854a:	3708      	adds	r7, #8
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	08029920 	.word	0x08029920

08008554 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD0Ev>:
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f7ff ffe7 	bl	8008530 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
 8008562:	211c      	movs	r1, #28
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f003 f95f 	bl	800b828 <_ZdlPvj>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4618      	mov	r0, r3
 800856e:	3708      	adds	r7, #8
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>:
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	4a05      	ldr	r2, [pc, #20]	; (8008594 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev+0x20>)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	601a      	str	r2, [r3, #0]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4618      	mov	r0, r3
 8008586:	f7fc f8d7 	bl	8004738 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4618      	mov	r0, r3
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	080299cc 	.word	0x080299cc

08008598 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD0Ev>:
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f7ff ffe7 	bl	8008574 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>
 80085a6:	2108      	movs	r1, #8
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f003 f93d 	bl	800b828 <_ZdlPvj>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4618      	mov	r0, r3
 80085b2:	3708      	adds	r7, #8
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <_Z41__static_initialization_and_destruction_0ii>:
}
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af02      	add	r7, sp, #8
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	f040 8224 	bne.w	8008a12 <_Z41__static_initialization_and_destruction_0ii+0x45a>
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085d0:	4293      	cmp	r3, r2
 80085d2:	f040 821e 	bne.w	8008a12 <_Z41__static_initialization_and_destruction_0ii+0x45a>
TEST(RingBuffer_Test_Group, InitTest)
 80085d6:	489f      	ldr	r0, [pc, #636]	; (8008854 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 80085d8:	f7fc f8fc 	bl	80047d4 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>
 80085dc:	2329      	movs	r3, #41	; 0x29
 80085de:	9301      	str	r3, [sp, #4]
 80085e0:	4b9d      	ldr	r3, [pc, #628]	; (8008858 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80085e2:	9300      	str	r3, [sp, #0]
 80085e4:	4b9d      	ldr	r3, [pc, #628]	; (800885c <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 80085e6:	4a9e      	ldr	r2, [pc, #632]	; (8008860 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80085e8:	499a      	ldr	r1, [pc, #616]	; (8008854 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 80085ea:	489e      	ldr	r0, [pc, #632]	; (8008864 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 80085ec:	f00d fb46 	bl	8015c7c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushDataTests)
 80085f0:	489d      	ldr	r0, [pc, #628]	; (8008868 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 80085f2:	f7fc f9a3 	bl	800493c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>
 80085f6:	2333      	movs	r3, #51	; 0x33
 80085f8:	9301      	str	r3, [sp, #4]
 80085fa:	4b97      	ldr	r3, [pc, #604]	; (8008858 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80085fc:	9300      	str	r3, [sp, #0]
 80085fe:	4b9b      	ldr	r3, [pc, #620]	; (800886c <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8008600:	4a97      	ldr	r2, [pc, #604]	; (8008860 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008602:	4999      	ldr	r1, [pc, #612]	; (8008868 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8008604:	489a      	ldr	r0, [pc, #616]	; (8008870 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8008606:	f00d fb39 	bl	8015c7c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 800860a:	489a      	ldr	r0, [pc, #616]	; (8008874 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800860c:	f7fc fa20 	bl	8004a50 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>
 8008610:	233d      	movs	r3, #61	; 0x3d
 8008612:	9301      	str	r3, [sp, #4]
 8008614:	4b90      	ldr	r3, [pc, #576]	; (8008858 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008616:	9300      	str	r3, [sp, #0]
 8008618:	4b97      	ldr	r3, [pc, #604]	; (8008878 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 800861a:	4a91      	ldr	r2, [pc, #580]	; (8008860 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800861c:	4995      	ldr	r1, [pc, #596]	; (8008874 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800861e:	4897      	ldr	r0, [pc, #604]	; (800887c <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8008620:	f00d fb2c 	bl	8015c7c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopDataTests)
 8008624:	4896      	ldr	r0, [pc, #600]	; (8008880 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8008626:	f7fc fa9b 	bl	8004b60 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>
 800862a:	2348      	movs	r3, #72	; 0x48
 800862c:	9301      	str	r3, [sp, #4]
 800862e:	4b8a      	ldr	r3, [pc, #552]	; (8008858 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008630:	9300      	str	r3, [sp, #0]
 8008632:	4b94      	ldr	r3, [pc, #592]	; (8008884 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8008634:	4a8a      	ldr	r2, [pc, #552]	; (8008860 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008636:	4992      	ldr	r1, [pc, #584]	; (8008880 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8008638:	4893      	ldr	r0, [pc, #588]	; (8008888 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 800863a:	f00d fb1f 	bl	8015c7c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 800863e:	4893      	ldr	r0, [pc, #588]	; (800888c <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8008640:	f7fc fafa 	bl	8004c38 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>
 8008644:	2351      	movs	r3, #81	; 0x51
 8008646:	9301      	str	r3, [sp, #4]
 8008648:	4b83      	ldr	r3, [pc, #524]	; (8008858 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800864a:	9300      	str	r3, [sp, #0]
 800864c:	4b90      	ldr	r3, [pc, #576]	; (8008890 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 800864e:	4a84      	ldr	r2, [pc, #528]	; (8008860 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008650:	498e      	ldr	r1, [pc, #568]	; (800888c <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8008652:	4890      	ldr	r0, [pc, #576]	; (8008894 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8008654:	f00d fb12 	bl	8015c7c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8008658:	488f      	ldr	r0, [pc, #572]	; (8008898 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 800865a:	f7fc fb79 	bl	8004d50 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>
 800865e:	2361      	movs	r3, #97	; 0x61
 8008660:	9301      	str	r3, [sp, #4]
 8008662:	4b7d      	ldr	r3, [pc, #500]	; (8008858 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	4b8d      	ldr	r3, [pc, #564]	; (800889c <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8008668:	4a7d      	ldr	r2, [pc, #500]	; (8008860 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800866a:	498b      	ldr	r1, [pc, #556]	; (8008898 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 800866c:	488c      	ldr	r0, [pc, #560]	; (80088a0 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 800866e:	f00d fb05 	bl	8015c7c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushArrayTest)
 8008672:	488c      	ldr	r0, [pc, #560]	; (80088a4 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8008674:	f7fc fc2a 	bl	8004ecc <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>
 8008678:	2376      	movs	r3, #118	; 0x76
 800867a:	9301      	str	r3, [sp, #4]
 800867c:	4b76      	ldr	r3, [pc, #472]	; (8008858 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	4b89      	ldr	r3, [pc, #548]	; (80088a8 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8008682:	4a77      	ldr	r2, [pc, #476]	; (8008860 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008684:	4987      	ldr	r1, [pc, #540]	; (80088a4 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8008686:	4889      	ldr	r0, [pc, #548]	; (80088ac <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8008688:	f00d faf8 	bl	8015c7c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, LookForTest)
 800868c:	4888      	ldr	r0, [pc, #544]	; (80088b0 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 800868e:	f7fc fc83 	bl	8004f98 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>
 8008692:	237d      	movs	r3, #125	; 0x7d
 8008694:	9301      	str	r3, [sp, #4]
 8008696:	4b70      	ldr	r3, [pc, #448]	; (8008858 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008698:	9300      	str	r3, [sp, #0]
 800869a:	4b86      	ldr	r3, [pc, #536]	; (80088b4 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 800869c:	4a70      	ldr	r2, [pc, #448]	; (8008860 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800869e:	4984      	ldr	r1, [pc, #528]	; (80088b0 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 80086a0:	4885      	ldr	r0, [pc, #532]	; (80088b8 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 80086a2:	f00d faeb 	bl	8015c7c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, CapacityTest)
 80086a6:	4885      	ldr	r0, [pc, #532]	; (80088bc <_Z41__static_initialization_and_destruction_0ii+0x304>)
 80086a8:	f7fc fd60 	bl	800516c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>
 80086ac:	2385      	movs	r3, #133	; 0x85
 80086ae:	9301      	str	r3, [sp, #4]
 80086b0:	4b69      	ldr	r3, [pc, #420]	; (8008858 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80086b2:	9300      	str	r3, [sp, #0]
 80086b4:	4b82      	ldr	r3, [pc, #520]	; (80088c0 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 80086b6:	4a6a      	ldr	r2, [pc, #424]	; (8008860 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80086b8:	4980      	ldr	r1, [pc, #512]	; (80088bc <_Z41__static_initialization_and_destruction_0ii+0x304>)
 80086ba:	4882      	ldr	r0, [pc, #520]	; (80088c4 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 80086bc:	f00d fade 	bl	8015c7c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 80086c0:	4881      	ldr	r0, [pc, #516]	; (80088c8 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 80086c2:	f7fc fec9 	bl	8005458 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>
 80086c6:	23c0      	movs	r3, #192	; 0xc0
 80086c8:	9301      	str	r3, [sp, #4]
 80086ca:	4b63      	ldr	r3, [pc, #396]	; (8008858 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80086cc:	9300      	str	r3, [sp, #0]
 80086ce:	4b7f      	ldr	r3, [pc, #508]	; (80088cc <_Z41__static_initialization_and_destruction_0ii+0x314>)
 80086d0:	4a7f      	ldr	r2, [pc, #508]	; (80088d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80086d2:	497d      	ldr	r1, [pc, #500]	; (80088c8 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 80086d4:	487f      	ldr	r0, [pc, #508]	; (80088d4 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 80086d6:	f00d fad1 	bl	8015c7c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 80086da:	487f      	ldr	r0, [pc, #508]	; (80088d8 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 80086dc:	f7fc ff26 	bl	800552c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>
 80086e0:	23d2      	movs	r3, #210	; 0xd2
 80086e2:	9301      	str	r3, [sp, #4]
 80086e4:	4b5c      	ldr	r3, [pc, #368]	; (8008858 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80086e6:	9300      	str	r3, [sp, #0]
 80086e8:	4b7c      	ldr	r3, [pc, #496]	; (80088dc <_Z41__static_initialization_and_destruction_0ii+0x324>)
 80086ea:	4a79      	ldr	r2, [pc, #484]	; (80088d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80086ec:	497a      	ldr	r1, [pc, #488]	; (80088d8 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 80086ee:	487c      	ldr	r0, [pc, #496]	; (80088e0 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 80086f0:	f00d fac4 	bl	8015c7c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 80086f4:	487b      	ldr	r0, [pc, #492]	; (80088e4 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 80086f6:	f7fc ffdd 	bl	80056b4 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>
 80086fa:	23de      	movs	r3, #222	; 0xde
 80086fc:	9301      	str	r3, [sp, #4]
 80086fe:	4b56      	ldr	r3, [pc, #344]	; (8008858 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008700:	9300      	str	r3, [sp, #0]
 8008702:	4b79      	ldr	r3, [pc, #484]	; (80088e8 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8008704:	4a72      	ldr	r2, [pc, #456]	; (80088d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008706:	4977      	ldr	r1, [pc, #476]	; (80088e4 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8008708:	4878      	ldr	r0, [pc, #480]	; (80088ec <_Z41__static_initialization_and_destruction_0ii+0x334>)
 800870a:	f00d fab7 	bl	8015c7c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_Response_Test)
 800870e:	4878      	ldr	r0, [pc, #480]	; (80088f0 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8008710:	f7fd f87a 	bl	8005808 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>
 8008714:	23ed      	movs	r3, #237	; 0xed
 8008716:	9301      	str	r3, [sp, #4]
 8008718:	4b4f      	ldr	r3, [pc, #316]	; (8008858 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800871a:	9300      	str	r3, [sp, #0]
 800871c:	4b75      	ldr	r3, [pc, #468]	; (80088f4 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 800871e:	4a6c      	ldr	r2, [pc, #432]	; (80088d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008720:	4973      	ldr	r1, [pc, #460]	; (80088f0 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8008722:	4875      	ldr	r0, [pc, #468]	; (80088f8 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8008724:	f00d faaa 	bl	8015c7c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8008728:	4874      	ldr	r0, [pc, #464]	; (80088fc <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800872a:	f7fd f91b 	bl	8005964 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>
 800872e:	23fe      	movs	r3, #254	; 0xfe
 8008730:	9301      	str	r3, [sp, #4]
 8008732:	4b49      	ldr	r3, [pc, #292]	; (8008858 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008734:	9300      	str	r3, [sp, #0]
 8008736:	4b72      	ldr	r3, [pc, #456]	; (8008900 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8008738:	4a65      	ldr	r2, [pc, #404]	; (80088d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800873a:	4970      	ldr	r1, [pc, #448]	; (80088fc <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800873c:	4871      	ldr	r0, [pc, #452]	; (8008904 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 800873e:	f00d fa9d 	bl	8015c7c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8008742:	4871      	ldr	r0, [pc, #452]	; (8008908 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8008744:	f7fd f97a 	bl	8005a3c <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>
 8008748:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800874c:	9301      	str	r3, [sp, #4]
 800874e:	4b42      	ldr	r3, [pc, #264]	; (8008858 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008750:	9300      	str	r3, [sp, #0]
 8008752:	4b6e      	ldr	r3, [pc, #440]	; (800890c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8008754:	4a5e      	ldr	r2, [pc, #376]	; (80088d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008756:	496c      	ldr	r1, [pc, #432]	; (8008908 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8008758:	486d      	ldr	r0, [pc, #436]	; (8008910 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 800875a:	f00d fa8f 	bl	8015c7c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 800875e:	486d      	ldr	r0, [pc, #436]	; (8008914 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8008760:	f7fd fa2a 	bl	8005bb8 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>
 8008764:	f44f 7392 	mov.w	r3, #292	; 0x124
 8008768:	9301      	str	r3, [sp, #4]
 800876a:	4b3b      	ldr	r3, [pc, #236]	; (8008858 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	4b6a      	ldr	r3, [pc, #424]	; (8008918 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 8008770:	4a57      	ldr	r2, [pc, #348]	; (80088d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008772:	4968      	ldr	r1, [pc, #416]	; (8008914 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8008774:	4869      	ldr	r0, [pc, #420]	; (800891c <_Z41__static_initialization_and_destruction_0ii+0x364>)
 8008776:	f00d fa81 	bl	8015c7c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 800877a:	4869      	ldr	r0, [pc, #420]	; (8008920 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 800877c:	f7fd face 	bl	8005d1c <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>
 8008780:	f240 133b 	movw	r3, #315	; 0x13b
 8008784:	9301      	str	r3, [sp, #4]
 8008786:	4b34      	ldr	r3, [pc, #208]	; (8008858 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008788:	9300      	str	r3, [sp, #0]
 800878a:	4b66      	ldr	r3, [pc, #408]	; (8008924 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 800878c:	4a50      	ldr	r2, [pc, #320]	; (80088d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800878e:	4964      	ldr	r1, [pc, #400]	; (8008920 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8008790:	4865      	ldr	r0, [pc, #404]	; (8008928 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 8008792:	f00d fa73 	bl	8015c7c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8008796:	4865      	ldr	r0, [pc, #404]	; (800892c <_Z41__static_initialization_and_destruction_0ii+0x374>)
 8008798:	f7fd fbfe 	bl	8005f98 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>
 800879c:	f240 1367 	movw	r3, #359	; 0x167
 80087a0:	9301      	str	r3, [sp, #4]
 80087a2:	4b2d      	ldr	r3, [pc, #180]	; (8008858 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80087a4:	9300      	str	r3, [sp, #0]
 80087a6:	4b62      	ldr	r3, [pc, #392]	; (8008930 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 80087a8:	4a49      	ldr	r2, [pc, #292]	; (80088d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80087aa:	4960      	ldr	r1, [pc, #384]	; (800892c <_Z41__static_initialization_and_destruction_0ii+0x374>)
 80087ac:	4861      	ldr	r0, [pc, #388]	; (8008934 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 80087ae:	f00d fa65 	bl	8015c7c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 80087b2:	4861      	ldr	r0, [pc, #388]	; (8008938 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 80087b4:	f7fd fd2a 	bl	800620c <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>
 80087b8:	f240 1393 	movw	r3, #403	; 0x193
 80087bc:	9301      	str	r3, [sp, #4]
 80087be:	4b26      	ldr	r3, [pc, #152]	; (8008858 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80087c0:	9300      	str	r3, [sp, #0]
 80087c2:	4b5e      	ldr	r3, [pc, #376]	; (800893c <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80087c4:	4a42      	ldr	r2, [pc, #264]	; (80088d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80087c6:	495c      	ldr	r1, [pc, #368]	; (8008938 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 80087c8:	485d      	ldr	r0, [pc, #372]	; (8008940 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 80087ca:	f00d fa57 	bl	8015c7c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 80087ce:	485d      	ldr	r0, [pc, #372]	; (8008944 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 80087d0:	f7fd fdc6 	bl	8006360 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>
 80087d4:	f240 13a5 	movw	r3, #421	; 0x1a5
 80087d8:	9301      	str	r3, [sp, #4]
 80087da:	4b1f      	ldr	r3, [pc, #124]	; (8008858 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80087dc:	9300      	str	r3, [sp, #0]
 80087de:	4b5a      	ldr	r3, [pc, #360]	; (8008948 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 80087e0:	4a3b      	ldr	r2, [pc, #236]	; (80088d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80087e2:	4958      	ldr	r1, [pc, #352]	; (8008944 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 80087e4:	4859      	ldr	r0, [pc, #356]	; (800894c <_Z41__static_initialization_and_destruction_0ii+0x394>)
 80087e6:	f00d fa49 	bl	8015c7c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Command_Process_Test)
 80087ea:	4859      	ldr	r0, [pc, #356]	; (8008950 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 80087ec:	f7fd fe9e 	bl	800652c <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev>
 80087f0:	f240 13bd 	movw	r3, #445	; 0x1bd
 80087f4:	9301      	str	r3, [sp, #4]
 80087f6:	4b18      	ldr	r3, [pc, #96]	; (8008858 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80087f8:	9300      	str	r3, [sp, #0]
 80087fa:	4b56      	ldr	r3, [pc, #344]	; (8008954 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 80087fc:	4a34      	ldr	r2, [pc, #208]	; (80088d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80087fe:	4954      	ldr	r1, [pc, #336]	; (8008950 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8008800:	4855      	ldr	r0, [pc, #340]	; (8008958 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8008802:	f00d fa3b 	bl	8015c7c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8008806:	4855      	ldr	r0, [pc, #340]	; (800895c <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8008808:	f7fd ffb4 	bl	8006774 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev>
 800880c:	f240 13e9 	movw	r3, #489	; 0x1e9
 8008810:	9301      	str	r3, [sp, #4]
 8008812:	4b11      	ldr	r3, [pc, #68]	; (8008858 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008814:	9300      	str	r3, [sp, #0]
 8008816:	4b52      	ldr	r3, [pc, #328]	; (8008960 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8008818:	4a2d      	ldr	r2, [pc, #180]	; (80088d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800881a:	4950      	ldr	r1, [pc, #320]	; (800895c <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 800881c:	4851      	ldr	r0, [pc, #324]	; (8008964 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800881e:	f00d fa2d 	bl	8015c7c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 8008822:	4851      	ldr	r0, [pc, #324]	; (8008968 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8008824:	f7fe f8dc 	bl	80069e0 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev>
 8008828:	f240 2315 	movw	r3, #533	; 0x215
 800882c:	9301      	str	r3, [sp, #4]
 800882e:	4b0a      	ldr	r3, [pc, #40]	; (8008858 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008830:	9300      	str	r3, [sp, #0]
 8008832:	4b4e      	ldr	r3, [pc, #312]	; (800896c <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8008834:	4a26      	ldr	r2, [pc, #152]	; (80088d0 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008836:	494c      	ldr	r1, [pc, #304]	; (8008968 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8008838:	484d      	ldr	r0, [pc, #308]	; (8008970 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 800883a:	f00d fa1f 	bl	8015c7c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 800883e:	484d      	ldr	r0, [pc, #308]	; (8008974 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8008840:	f7fe f984 	bl	8006b4c <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev>
 8008844:	f44f 730c 	mov.w	r3, #560	; 0x230
 8008848:	9301      	str	r3, [sp, #4]
 800884a:	4b03      	ldr	r3, [pc, #12]	; (8008858 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800884c:	9300      	str	r3, [sp, #0]
 800884e:	4b4a      	ldr	r3, [pc, #296]	; (8008978 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 8008850:	e094      	b.n	800897c <_Z41__static_initialization_and_destruction_0ii+0x3c4>
 8008852:	bf00      	nop
 8008854:	20000380 	.word	0x20000380
 8008858:	0802490c 	.word	0x0802490c
 800885c:	08025154 	.word	0x08025154
 8008860:	08025160 	.word	0x08025160
 8008864:	2000039c 	.word	0x2000039c
 8008868:	200003a0 	.word	0x200003a0
 800886c:	08025178 	.word	0x08025178
 8008870:	200003bc 	.word	0x200003bc
 8008874:	200003c0 	.word	0x200003c0
 8008878:	08025188 	.word	0x08025188
 800887c:	200003dc 	.word	0x200003dc
 8008880:	200003e0 	.word	0x200003e0
 8008884:	0802519c 	.word	0x0802519c
 8008888:	200003fc 	.word	0x200003fc
 800888c:	20000400 	.word	0x20000400
 8008890:	080251ac 	.word	0x080251ac
 8008894:	2000041c 	.word	0x2000041c
 8008898:	20000420 	.word	0x20000420
 800889c:	080251c4 	.word	0x080251c4
 80088a0:	2000043c 	.word	0x2000043c
 80088a4:	20000440 	.word	0x20000440
 80088a8:	080251d4 	.word	0x080251d4
 80088ac:	2000045c 	.word	0x2000045c
 80088b0:	20000460 	.word	0x20000460
 80088b4:	080251e4 	.word	0x080251e4
 80088b8:	2000047c 	.word	0x2000047c
 80088bc:	20000480 	.word	0x20000480
 80088c0:	080251f0 	.word	0x080251f0
 80088c4:	2000049c 	.word	0x2000049c
 80088c8:	200004a8 	.word	0x200004a8
 80088cc:	08025200 	.word	0x08025200
 80088d0:	08025210 	.word	0x08025210
 80088d4:	200004c4 	.word	0x200004c4
 80088d8:	200004c8 	.word	0x200004c8
 80088dc:	08025228 	.word	0x08025228
 80088e0:	200004e4 	.word	0x200004e4
 80088e4:	200004e8 	.word	0x200004e8
 80088e8:	08025240 	.word	0x08025240
 80088ec:	20000504 	.word	0x20000504
 80088f0:	20000508 	.word	0x20000508
 80088f4:	0802525c 	.word	0x0802525c
 80088f8:	20000524 	.word	0x20000524
 80088fc:	20000528 	.word	0x20000528
 8008900:	08025270 	.word	0x08025270
 8008904:	20000544 	.word	0x20000544
 8008908:	20000548 	.word	0x20000548
 800890c:	0802528c 	.word	0x0802528c
 8008910:	20000564 	.word	0x20000564
 8008914:	20000568 	.word	0x20000568
 8008918:	080252a0 	.word	0x080252a0
 800891c:	20000584 	.word	0x20000584
 8008920:	20000588 	.word	0x20000588
 8008924:	080252bc 	.word	0x080252bc
 8008928:	200005a4 	.word	0x200005a4
 800892c:	200005a8 	.word	0x200005a8
 8008930:	080252d4 	.word	0x080252d4
 8008934:	200005c4 	.word	0x200005c4
 8008938:	200005c8 	.word	0x200005c8
 800893c:	080252e8 	.word	0x080252e8
 8008940:	200005e4 	.word	0x200005e4
 8008944:	200005e8 	.word	0x200005e8
 8008948:	08025308 	.word	0x08025308
 800894c:	20000604 	.word	0x20000604
 8008950:	20000608 	.word	0x20000608
 8008954:	08025320 	.word	0x08025320
 8008958:	20000624 	.word	0x20000624
 800895c:	20000628 	.word	0x20000628
 8008960:	08025338 	.word	0x08025338
 8008964:	20000644 	.word	0x20000644
 8008968:	20000648 	.word	0x20000648
 800896c:	0802534c 	.word	0x0802534c
 8008970:	20000664 	.word	0x20000664
 8008974:	20000668 	.word	0x20000668
 8008978:	08025368 	.word	0x08025368
 800897c:	4a83      	ldr	r2, [pc, #524]	; (8008b8c <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 800897e:	4984      	ldr	r1, [pc, #528]	; (8008b90 <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 8008980:	4884      	ldr	r0, [pc, #528]	; (8008b94 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 8008982:	f00d f97b 	bl	8015c7c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8008986:	4884      	ldr	r0, [pc, #528]	; (8008b98 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 8008988:	f7fe fa16 	bl	8006db8 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev>
 800898c:	f44f 7317 	mov.w	r3, #604	; 0x25c
 8008990:	9301      	str	r3, [sp, #4]
 8008992:	4b82      	ldr	r3, [pc, #520]	; (8008b9c <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8008994:	9300      	str	r3, [sp, #0]
 8008996:	4b82      	ldr	r3, [pc, #520]	; (8008ba0 <_Z41__static_initialization_and_destruction_0ii+0x5e8>)
 8008998:	4a7c      	ldr	r2, [pc, #496]	; (8008b8c <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 800899a:	497f      	ldr	r1, [pc, #508]	; (8008b98 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 800899c:	4881      	ldr	r0, [pc, #516]	; (8008ba4 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 800899e:	f00d f96d 	bl	8015c7c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 80089a2:	4881      	ldr	r0, [pc, #516]	; (8008ba8 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 80089a4:	f7fe faee 	bl	8006f84 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev>
 80089a8:	f240 2375 	movw	r3, #629	; 0x275
 80089ac:	9301      	str	r3, [sp, #4]
 80089ae:	4b7b      	ldr	r3, [pc, #492]	; (8008b9c <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 80089b0:	9300      	str	r3, [sp, #0]
 80089b2:	4b7e      	ldr	r3, [pc, #504]	; (8008bac <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 80089b4:	4a75      	ldr	r2, [pc, #468]	; (8008b8c <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 80089b6:	497c      	ldr	r1, [pc, #496]	; (8008ba8 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 80089b8:	487d      	ldr	r0, [pc, #500]	; (8008bb0 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 80089ba:	f00d f95f 	bl	8015c7c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 80089be:	487d      	ldr	r0, [pc, #500]	; (8008bb4 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 80089c0:	f7fe fc32 	bl	8007228 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev>
 80089c4:	f240 239a 	movw	r3, #666	; 0x29a
 80089c8:	9301      	str	r3, [sp, #4]
 80089ca:	4b74      	ldr	r3, [pc, #464]	; (8008b9c <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 80089cc:	9300      	str	r3, [sp, #0]
 80089ce:	4b7a      	ldr	r3, [pc, #488]	; (8008bb8 <_Z41__static_initialization_and_destruction_0ii+0x600>)
 80089d0:	4a6e      	ldr	r2, [pc, #440]	; (8008b8c <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 80089d2:	4978      	ldr	r1, [pc, #480]	; (8008bb4 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 80089d4:	4879      	ldr	r0, [pc, #484]	; (8008bbc <_Z41__static_initialization_and_destruction_0ii+0x604>)
 80089d6:	f00d f951 	bl	8015c7c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 80089da:	4879      	ldr	r0, [pc, #484]	; (8008bc0 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 80089dc:	f7fe fd02 	bl	80073e4 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev>
 80089e0:	f44f 732c 	mov.w	r3, #688	; 0x2b0
 80089e4:	9301      	str	r3, [sp, #4]
 80089e6:	4b6d      	ldr	r3, [pc, #436]	; (8008b9c <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 80089e8:	9300      	str	r3, [sp, #0]
 80089ea:	4b76      	ldr	r3, [pc, #472]	; (8008bc4 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 80089ec:	4a67      	ldr	r2, [pc, #412]	; (8008b8c <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 80089ee:	4974      	ldr	r1, [pc, #464]	; (8008bc0 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 80089f0:	4875      	ldr	r0, [pc, #468]	; (8008bc8 <_Z41__static_initialization_and_destruction_0ii+0x610>)
 80089f2:	f00d f943 	bl	8015c7c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 80089f6:	4875      	ldr	r0, [pc, #468]	; (8008bcc <_Z41__static_initialization_and_destruction_0ii+0x614>)
 80089f8:	f7fe fd6c 	bl	80074d4 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev>
 80089fc:	f240 23c1 	movw	r3, #705	; 0x2c1
 8008a00:	9301      	str	r3, [sp, #4]
 8008a02:	4b66      	ldr	r3, [pc, #408]	; (8008b9c <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8008a04:	9300      	str	r3, [sp, #0]
 8008a06:	4b72      	ldr	r3, [pc, #456]	; (8008bd0 <_Z41__static_initialization_and_destruction_0ii+0x618>)
 8008a08:	4a60      	ldr	r2, [pc, #384]	; (8008b8c <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 8008a0a:	4970      	ldr	r1, [pc, #448]	; (8008bcc <_Z41__static_initialization_and_destruction_0ii+0x614>)
 8008a0c:	4871      	ldr	r0, [pc, #452]	; (8008bd4 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 8008a0e:	f00d f935 	bl	8015c7c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	f040 80b4 	bne.w	8008b82 <_Z41__static_initialization_and_destruction_0ii+0x5ca>
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a20:	4293      	cmp	r3, r2
 8008a22:	f040 80ae 	bne.w	8008b82 <_Z41__static_initialization_and_destruction_0ii+0x5ca>
 8008a26:	486b      	ldr	r0, [pc, #428]	; (8008bd4 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 8008a28:	f00d f952 	bl	8015cd0 <_ZN13TestInstallerD1Ev>
 8008a2c:	4867      	ldr	r0, [pc, #412]	; (8008bcc <_Z41__static_initialization_and_destruction_0ii+0x614>)
 8008a2e:	f7fe fe0f 	bl	8007650 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 8008a32:	4865      	ldr	r0, [pc, #404]	; (8008bc8 <_Z41__static_initialization_and_destruction_0ii+0x610>)
 8008a34:	f00d f94c 	bl	8015cd0 <_ZN13TestInstallerD1Ev>
 8008a38:	4861      	ldr	r0, [pc, #388]	; (8008bc0 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 8008a3a:	f7fe fe4d 	bl	80076d8 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 8008a3e:	485f      	ldr	r0, [pc, #380]	; (8008bbc <_Z41__static_initialization_and_destruction_0ii+0x604>)
 8008a40:	f00d f946 	bl	8015cd0 <_ZN13TestInstallerD1Ev>
 8008a44:	485b      	ldr	r0, [pc, #364]	; (8008bb4 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8008a46:	f7fe fe8b 	bl	8007760 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 8008a4a:	4859      	ldr	r0, [pc, #356]	; (8008bb0 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 8008a4c:	f00d f940 	bl	8015cd0 <_ZN13TestInstallerD1Ev>
 8008a50:	4855      	ldr	r0, [pc, #340]	; (8008ba8 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 8008a52:	f7fe fec9 	bl	80077e8 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8008a56:	4853      	ldr	r0, [pc, #332]	; (8008ba4 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 8008a58:	f00d f93a 	bl	8015cd0 <_ZN13TestInstallerD1Ev>
 8008a5c:	484e      	ldr	r0, [pc, #312]	; (8008b98 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 8008a5e:	f7fe ff07 	bl	8007870 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 8008a62:	484c      	ldr	r0, [pc, #304]	; (8008b94 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 8008a64:	f00d f934 	bl	8015cd0 <_ZN13TestInstallerD1Ev>
 8008a68:	4849      	ldr	r0, [pc, #292]	; (8008b90 <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 8008a6a:	f7fe ff45 	bl	80078f8 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 8008a6e:	485a      	ldr	r0, [pc, #360]	; (8008bd8 <_Z41__static_initialization_and_destruction_0ii+0x620>)
 8008a70:	f00d f92e 	bl	8015cd0 <_ZN13TestInstallerD1Ev>
 8008a74:	4859      	ldr	r0, [pc, #356]	; (8008bdc <_Z41__static_initialization_and_destruction_0ii+0x624>)
 8008a76:	f7fe ff83 	bl	8007980 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8008a7a:	4859      	ldr	r0, [pc, #356]	; (8008be0 <_Z41__static_initialization_and_destruction_0ii+0x628>)
 8008a7c:	f00d f928 	bl	8015cd0 <_ZN13TestInstallerD1Ev>
 8008a80:	4858      	ldr	r0, [pc, #352]	; (8008be4 <_Z41__static_initialization_and_destruction_0ii+0x62c>)
 8008a82:	f7fe ffc1 	bl	8007a08 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Command_Process_Test)
 8008a86:	4858      	ldr	r0, [pc, #352]	; (8008be8 <_Z41__static_initialization_and_destruction_0ii+0x630>)
 8008a88:	f00d f922 	bl	8015cd0 <_ZN13TestInstallerD1Ev>
 8008a8c:	4857      	ldr	r0, [pc, #348]	; (8008bec <_Z41__static_initialization_and_destruction_0ii+0x634>)
 8008a8e:	f7fe ffff 	bl	8007a90 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8008a92:	4857      	ldr	r0, [pc, #348]	; (8008bf0 <_Z41__static_initialization_and_destruction_0ii+0x638>)
 8008a94:	f00d f91c 	bl	8015cd0 <_ZN13TestInstallerD1Ev>
 8008a98:	4856      	ldr	r0, [pc, #344]	; (8008bf4 <_Z41__static_initialization_and_destruction_0ii+0x63c>)
 8008a9a:	f7ff f83d 	bl	8007b18 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 8008a9e:	4856      	ldr	r0, [pc, #344]	; (8008bf8 <_Z41__static_initialization_and_destruction_0ii+0x640>)
 8008aa0:	f00d f916 	bl	8015cd0 <_ZN13TestInstallerD1Ev>
 8008aa4:	4855      	ldr	r0, [pc, #340]	; (8008bfc <_Z41__static_initialization_and_destruction_0ii+0x644>)
 8008aa6:	f7ff f87b 	bl	8007ba0 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8008aaa:	4855      	ldr	r0, [pc, #340]	; (8008c00 <_Z41__static_initialization_and_destruction_0ii+0x648>)
 8008aac:	f00d f910 	bl	8015cd0 <_ZN13TestInstallerD1Ev>
 8008ab0:	4854      	ldr	r0, [pc, #336]	; (8008c04 <_Z41__static_initialization_and_destruction_0ii+0x64c>)
 8008ab2:	f7ff f8b9 	bl	8007c28 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8008ab6:	4854      	ldr	r0, [pc, #336]	; (8008c08 <_Z41__static_initialization_and_destruction_0ii+0x650>)
 8008ab8:	f00d f90a 	bl	8015cd0 <_ZN13TestInstallerD1Ev>
 8008abc:	4853      	ldr	r0, [pc, #332]	; (8008c0c <_Z41__static_initialization_and_destruction_0ii+0x654>)
 8008abe:	f7ff f8f7 	bl	8007cb0 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8008ac2:	4853      	ldr	r0, [pc, #332]	; (8008c10 <_Z41__static_initialization_and_destruction_0ii+0x658>)
 8008ac4:	f00d f904 	bl	8015cd0 <_ZN13TestInstallerD1Ev>
 8008ac8:	4852      	ldr	r0, [pc, #328]	; (8008c14 <_Z41__static_initialization_and_destruction_0ii+0x65c>)
 8008aca:	f7ff f935 	bl	8007d38 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8008ace:	4852      	ldr	r0, [pc, #328]	; (8008c18 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 8008ad0:	f00d f8fe 	bl	8015cd0 <_ZN13TestInstallerD1Ev>
 8008ad4:	4851      	ldr	r0, [pc, #324]	; (8008c1c <_Z41__static_initialization_and_destruction_0ii+0x664>)
 8008ad6:	f7ff f973 	bl	8007dc0 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8008ada:	4851      	ldr	r0, [pc, #324]	; (8008c20 <_Z41__static_initialization_and_destruction_0ii+0x668>)
 8008adc:	f00d f8f8 	bl	8015cd0 <_ZN13TestInstallerD1Ev>
 8008ae0:	4850      	ldr	r0, [pc, #320]	; (8008c24 <_Z41__static_initialization_and_destruction_0ii+0x66c>)
 8008ae2:	f7ff f9b1 	bl	8007e48 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_Response_Test)
 8008ae6:	4850      	ldr	r0, [pc, #320]	; (8008c28 <_Z41__static_initialization_and_destruction_0ii+0x670>)
 8008ae8:	f00d f8f2 	bl	8015cd0 <_ZN13TestInstallerD1Ev>
 8008aec:	484f      	ldr	r0, [pc, #316]	; (8008c2c <_Z41__static_initialization_and_destruction_0ii+0x674>)
 8008aee:	f7ff f9ef 	bl	8007ed0 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8008af2:	484f      	ldr	r0, [pc, #316]	; (8008c30 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 8008af4:	f00d f8ec 	bl	8015cd0 <_ZN13TestInstallerD1Ev>
 8008af8:	484e      	ldr	r0, [pc, #312]	; (8008c34 <_Z41__static_initialization_and_destruction_0ii+0x67c>)
 8008afa:	f7ff fa2d 	bl	8007f58 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8008afe:	484e      	ldr	r0, [pc, #312]	; (8008c38 <_Z41__static_initialization_and_destruction_0ii+0x680>)
 8008b00:	f00d f8e6 	bl	8015cd0 <_ZN13TestInstallerD1Ev>
 8008b04:	484d      	ldr	r0, [pc, #308]	; (8008c3c <_Z41__static_initialization_and_destruction_0ii+0x684>)
 8008b06:	f7ff fa6b 	bl	8007fe0 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8008b0a:	484d      	ldr	r0, [pc, #308]	; (8008c40 <_Z41__static_initialization_and_destruction_0ii+0x688>)
 8008b0c:	f00d f8e0 	bl	8015cd0 <_ZN13TestInstallerD1Ev>
 8008b10:	484c      	ldr	r0, [pc, #304]	; (8008c44 <_Z41__static_initialization_and_destruction_0ii+0x68c>)
 8008b12:	f7ff faa9 	bl	8008068 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
TEST(RingBuffer_Test_Group, CapacityTest)
 8008b16:	484c      	ldr	r0, [pc, #304]	; (8008c48 <_Z41__static_initialization_and_destruction_0ii+0x690>)
 8008b18:	f00d f8da 	bl	8015cd0 <_ZN13TestInstallerD1Ev>
 8008b1c:	484b      	ldr	r0, [pc, #300]	; (8008c4c <_Z41__static_initialization_and_destruction_0ii+0x694>)
 8008b1e:	f7ff fae7 	bl	80080f0 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, LookForTest)
 8008b22:	484b      	ldr	r0, [pc, #300]	; (8008c50 <_Z41__static_initialization_and_destruction_0ii+0x698>)
 8008b24:	f00d f8d4 	bl	8015cd0 <_ZN13TestInstallerD1Ev>
 8008b28:	484a      	ldr	r0, [pc, #296]	; (8008c54 <_Z41__static_initialization_and_destruction_0ii+0x69c>)
 8008b2a:	f7ff fb25 	bl	8008178 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushArrayTest)
 8008b2e:	484a      	ldr	r0, [pc, #296]	; (8008c58 <_Z41__static_initialization_and_destruction_0ii+0x6a0>)
 8008b30:	f00d f8ce 	bl	8015cd0 <_ZN13TestInstallerD1Ev>
 8008b34:	4849      	ldr	r0, [pc, #292]	; (8008c5c <_Z41__static_initialization_and_destruction_0ii+0x6a4>)
 8008b36:	f7ff fb63 	bl	8008200 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8008b3a:	4849      	ldr	r0, [pc, #292]	; (8008c60 <_Z41__static_initialization_and_destruction_0ii+0x6a8>)
 8008b3c:	f00d f8c8 	bl	8015cd0 <_ZN13TestInstallerD1Ev>
 8008b40:	4848      	ldr	r0, [pc, #288]	; (8008c64 <_Z41__static_initialization_and_destruction_0ii+0x6ac>)
 8008b42:	f7ff fba1 	bl	8008288 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8008b46:	4848      	ldr	r0, [pc, #288]	; (8008c68 <_Z41__static_initialization_and_destruction_0ii+0x6b0>)
 8008b48:	f00d f8c2 	bl	8015cd0 <_ZN13TestInstallerD1Ev>
 8008b4c:	4847      	ldr	r0, [pc, #284]	; (8008c6c <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 8008b4e:	f7ff fbdf 	bl	8008310 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopDataTests)
 8008b52:	4847      	ldr	r0, [pc, #284]	; (8008c70 <_Z41__static_initialization_and_destruction_0ii+0x6b8>)
 8008b54:	f00d f8bc 	bl	8015cd0 <_ZN13TestInstallerD1Ev>
 8008b58:	4846      	ldr	r0, [pc, #280]	; (8008c74 <_Z41__static_initialization_and_destruction_0ii+0x6bc>)
 8008b5a:	f7ff fc1d 	bl	8008398 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8008b5e:	4846      	ldr	r0, [pc, #280]	; (8008c78 <_Z41__static_initialization_and_destruction_0ii+0x6c0>)
 8008b60:	f00d f8b6 	bl	8015cd0 <_ZN13TestInstallerD1Ev>
 8008b64:	4845      	ldr	r0, [pc, #276]	; (8008c7c <_Z41__static_initialization_and_destruction_0ii+0x6c4>)
 8008b66:	f7ff fc5b 	bl	8008420 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushDataTests)
 8008b6a:	4845      	ldr	r0, [pc, #276]	; (8008c80 <_Z41__static_initialization_and_destruction_0ii+0x6c8>)
 8008b6c:	f00d f8b0 	bl	8015cd0 <_ZN13TestInstallerD1Ev>
 8008b70:	4844      	ldr	r0, [pc, #272]	; (8008c84 <_Z41__static_initialization_and_destruction_0ii+0x6cc>)
 8008b72:	f7ff fc99 	bl	80084a8 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, InitTest)
 8008b76:	4844      	ldr	r0, [pc, #272]	; (8008c88 <_Z41__static_initialization_and_destruction_0ii+0x6d0>)
 8008b78:	f00d f8aa 	bl	8015cd0 <_ZN13TestInstallerD1Ev>
 8008b7c:	4843      	ldr	r0, [pc, #268]	; (8008c8c <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 8008b7e:	f7ff fcd7 	bl	8008530 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
}
 8008b82:	bf00      	nop
 8008b84:	3708      	adds	r7, #8
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	08025210 	.word	0x08025210
 8008b90:	20000668 	.word	0x20000668
 8008b94:	20000684 	.word	0x20000684
 8008b98:	20000688 	.word	0x20000688
 8008b9c:	0802490c 	.word	0x0802490c
 8008ba0:	08025380 	.word	0x08025380
 8008ba4:	200006a4 	.word	0x200006a4
 8008ba8:	200006a8 	.word	0x200006a8
 8008bac:	08025394 	.word	0x08025394
 8008bb0:	200006c4 	.word	0x200006c4
 8008bb4:	200006c8 	.word	0x200006c8
 8008bb8:	080253ac 	.word	0x080253ac
 8008bbc:	200006e4 	.word	0x200006e4
 8008bc0:	200006e8 	.word	0x200006e8
 8008bc4:	080253c4 	.word	0x080253c4
 8008bc8:	20000704 	.word	0x20000704
 8008bcc:	20000708 	.word	0x20000708
 8008bd0:	080253e4 	.word	0x080253e4
 8008bd4:	20000724 	.word	0x20000724
 8008bd8:	20000664 	.word	0x20000664
 8008bdc:	20000648 	.word	0x20000648
 8008be0:	20000644 	.word	0x20000644
 8008be4:	20000628 	.word	0x20000628
 8008be8:	20000624 	.word	0x20000624
 8008bec:	20000608 	.word	0x20000608
 8008bf0:	20000604 	.word	0x20000604
 8008bf4:	200005e8 	.word	0x200005e8
 8008bf8:	200005e4 	.word	0x200005e4
 8008bfc:	200005c8 	.word	0x200005c8
 8008c00:	200005c4 	.word	0x200005c4
 8008c04:	200005a8 	.word	0x200005a8
 8008c08:	200005a4 	.word	0x200005a4
 8008c0c:	20000588 	.word	0x20000588
 8008c10:	20000584 	.word	0x20000584
 8008c14:	20000568 	.word	0x20000568
 8008c18:	20000564 	.word	0x20000564
 8008c1c:	20000548 	.word	0x20000548
 8008c20:	20000544 	.word	0x20000544
 8008c24:	20000528 	.word	0x20000528
 8008c28:	20000524 	.word	0x20000524
 8008c2c:	20000508 	.word	0x20000508
 8008c30:	20000504 	.word	0x20000504
 8008c34:	200004e8 	.word	0x200004e8
 8008c38:	200004e4 	.word	0x200004e4
 8008c3c:	200004c8 	.word	0x200004c8
 8008c40:	200004c4 	.word	0x200004c4
 8008c44:	200004a8 	.word	0x200004a8
 8008c48:	2000049c 	.word	0x2000049c
 8008c4c:	20000480 	.word	0x20000480
 8008c50:	2000047c 	.word	0x2000047c
 8008c54:	20000460 	.word	0x20000460
 8008c58:	2000045c 	.word	0x2000045c
 8008c5c:	20000440 	.word	0x20000440
 8008c60:	2000043c 	.word	0x2000043c
 8008c64:	20000420 	.word	0x20000420
 8008c68:	2000041c 	.word	0x2000041c
 8008c6c:	20000400 	.word	0x20000400
 8008c70:	200003fc 	.word	0x200003fc
 8008c74:	200003e0 	.word	0x200003e0
 8008c78:	200003dc 	.word	0x200003dc
 8008c7c:	200003c0 	.word	0x200003c0
 8008c80:	200003bc 	.word	0x200003bc
 8008c84:	200003a0 	.word	0x200003a0
 8008c88:	2000039c 	.word	0x2000039c
 8008c8c:	20000380 	.word	0x20000380

08008c90 <_GLOBAL__sub_I_rx_buffer>:
 8008c90:	b580      	push	{r7, lr}
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008c98:	2001      	movs	r0, #1
 8008c9a:	f7ff fc8d 	bl	80085b8 <_Z41__static_initialization_and_destruction_0ii>
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <_GLOBAL__sub_D_rx_buffer>:
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008ca8:	2000      	movs	r0, #0
 8008caa:	f7ff fc85 	bl	80085b8 <_Z41__static_initialization_and_destruction_0ii>
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008cb6:	f7f8 f992 	bl	8000fde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008cba:	f000 f817 	bl	8008cec <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008cbe:	f000 f973 	bl	8008fa8 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8008cc2:	f000 f947 	bl	8008f54 <_ZL11MX_DMA_Initv>
  MX_LPUART1_UART_Init();
 8008cc6:	f000 f887 	bl	8008dd8 <_ZL20MX_LPUART1_UART_Initv>
  MX_USART1_UART_Init();
 8008cca:	f000 f8e3 	bl	8008e94 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  const char * av_override[] = { "exe","-v" };      // verbose mode
 8008cce:	4a06      	ldr	r2, [pc, #24]	; (8008ce8 <main+0x38>)
 8008cd0:	463b      	mov	r3, r7
 8008cd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008cd6:	e883 0003 	stmia.w	r3, {r0, r1}
  CommandLineTestRunner::RunAllTests(2, av_override);
 8008cda:	463b      	mov	r3, r7
 8008cdc:	4619      	mov	r1, r3
 8008cde:	2002      	movs	r0, #2
 8008ce0:	f001 f8c0 	bl	8009e64 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>
  while (1)
 8008ce4:	e7fe      	b.n	8008ce4 <main+0x34>
 8008ce6:	bf00      	nop
 8008ce8:	08025404 	.word	0x08025404

08008cec <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b0a8      	sub	sp, #160	; 0xa0
 8008cf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008cf2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008cf6:	2238      	movs	r2, #56	; 0x38
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f018 fe28 	bl	8021950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008d00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008d04:	2200      	movs	r2, #0
 8008d06:	601a      	str	r2, [r3, #0]
 8008d08:	605a      	str	r2, [r3, #4]
 8008d0a:	609a      	str	r2, [r3, #8]
 8008d0c:	60da      	str	r2, [r3, #12]
 8008d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008d10:	463b      	mov	r3, r7
 8008d12:	2254      	movs	r2, #84	; 0x54
 8008d14:	2100      	movs	r1, #0
 8008d16:	4618      	mov	r0, r3
 8008d18:	f018 fe1a 	bl	8021950 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8008d1c:	2000      	movs	r0, #0
 8008d1e:	f7f8 ff17 	bl	8001b50 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008d22:	2301      	movs	r3, #1
 8008d24:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008d26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d2a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008d2c:	2302      	movs	r3, #2
 8008d2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008d32:	2303      	movs	r3, #3
 8008d34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8008d38:	2306      	movs	r3, #6
 8008d3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8008d3e:	2355      	movs	r3, #85	; 0x55
 8008d40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008d44:	2302      	movs	r3, #2
 8008d46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8008d4a:	2302      	movs	r3, #2
 8008d4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8008d50:	2302      	movs	r3, #2
 8008d52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008d56:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7f8 ffac 	bl	8001cb8 <HAL_RCC_OscConfig>
 8008d60:	4603      	mov	r3, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	bf14      	ite	ne
 8008d66:	2301      	movne	r3, #1
 8008d68:	2300      	moveq	r3, #0
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d001      	beq.n	8008d74 <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 8008d70:	f000 f98a 	bl	8009088 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008d74:	230f      	movs	r3, #15
 8008d76:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008d78:	2303      	movs	r3, #3
 8008d7a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008d80:	2300      	movs	r3, #0
 8008d82:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008d84:	2300      	movs	r3, #0
 8008d86:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8008d88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008d8c:	2104      	movs	r1, #4
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7f9 faaa 	bl	80022e8 <HAL_RCC_ClockConfig>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	bf14      	ite	ne
 8008d9a:	2301      	movne	r3, #1
 8008d9c:	2300      	moveq	r3, #0
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d001      	beq.n	8008da8 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 8008da4:	f000 f970 	bl	8009088 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 8008da8:	2321      	movs	r3, #33	; 0x21
 8008daa:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008dac:	2300      	movs	r3, #0
 8008dae:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8008db0:	2300      	movs	r3, #0
 8008db2:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008db4:	463b      	mov	r3, r7
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7f9 fcb2 	bl	8002720 <HAL_RCCEx_PeriphCLKConfig>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	bf14      	ite	ne
 8008dc2:	2301      	movne	r3, #1
 8008dc4:	2300      	moveq	r3, #0
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d001      	beq.n	8008dd0 <_Z18SystemClock_Configv+0xe4>
  {
    Error_Handler();
 8008dcc:	f000 f95c 	bl	8009088 <Error_Handler>
  }
}
 8008dd0:	bf00      	nop
 8008dd2:	37a0      	adds	r7, #160	; 0xa0
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8008ddc:	4b2b      	ldr	r3, [pc, #172]	; (8008e8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008dde:	4a2c      	ldr	r2, [pc, #176]	; (8008e90 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8008de0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8008de2:	4b2a      	ldr	r3, [pc, #168]	; (8008e8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008de4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008de8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008dea:	4b28      	ldr	r3, [pc, #160]	; (8008e8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008dec:	2200      	movs	r2, #0
 8008dee:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8008df0:	4b26      	ldr	r3, [pc, #152]	; (8008e8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008df2:	2200      	movs	r2, #0
 8008df4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8008df6:	4b25      	ldr	r3, [pc, #148]	; (8008e8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008df8:	2200      	movs	r2, #0
 8008dfa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8008dfc:	4b23      	ldr	r3, [pc, #140]	; (8008e8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008dfe:	220c      	movs	r2, #12
 8008e00:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008e02:	4b22      	ldr	r3, [pc, #136]	; (8008e8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008e04:	2200      	movs	r2, #0
 8008e06:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008e08:	4b20      	ldr	r3, [pc, #128]	; (8008e8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008e0e:	4b1f      	ldr	r3, [pc, #124]	; (8008e8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008e14:	4b1d      	ldr	r3, [pc, #116]	; (8008e8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008e16:	2200      	movs	r2, #0
 8008e18:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8008e1a:	481c      	ldr	r0, [pc, #112]	; (8008e8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008e1c:	f7f9 fecc 	bl	8002bb8 <HAL_UART_Init>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	bf14      	ite	ne
 8008e26:	2301      	movne	r3, #1
 8008e28:	2300      	moveq	r3, #0
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d001      	beq.n	8008e34 <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8008e30:	f000 f92a 	bl	8009088 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008e34:	2100      	movs	r1, #0
 8008e36:	4815      	ldr	r0, [pc, #84]	; (8008e8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008e38:	f7fa fe52 	bl	8003ae0 <HAL_UARTEx_SetTxFifoThreshold>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	bf14      	ite	ne
 8008e42:	2301      	movne	r3, #1
 8008e44:	2300      	moveq	r3, #0
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d001      	beq.n	8008e50 <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 8008e4c:	f000 f91c 	bl	8009088 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008e50:	2100      	movs	r1, #0
 8008e52:	480e      	ldr	r0, [pc, #56]	; (8008e8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008e54:	f7fa fe82 	bl	8003b5c <HAL_UARTEx_SetRxFifoThreshold>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	bf14      	ite	ne
 8008e5e:	2301      	movne	r3, #1
 8008e60:	2300      	moveq	r3, #0
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d001      	beq.n	8008e6c <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 8008e68:	f000 f90e 	bl	8009088 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8008e6c:	4807      	ldr	r0, [pc, #28]	; (8008e8c <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8008e6e:	f7fa fdfe 	bl	8003a6e <HAL_UARTEx_DisableFifoMode>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	bf14      	ite	ne
 8008e78:	2301      	movne	r3, #1
 8008e7a:	2300      	moveq	r3, #0
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d001      	beq.n	8008e86 <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 8008e82:	f000 f901 	bl	8009088 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8008e86:	bf00      	nop
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	20000728 	.word	0x20000728
 8008e90:	40008000 	.word	0x40008000

08008e94 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008e98:	4b2c      	ldr	r3, [pc, #176]	; (8008f4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008e9a:	4a2d      	ldr	r2, [pc, #180]	; (8008f50 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8008e9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008e9e:	4b2b      	ldr	r3, [pc, #172]	; (8008f4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008ea0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008ea4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008ea6:	4b29      	ldr	r3, [pc, #164]	; (8008f4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008eac:	4b27      	ldr	r3, [pc, #156]	; (8008f4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008eae:	2200      	movs	r2, #0
 8008eb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008eb2:	4b26      	ldr	r3, [pc, #152]	; (8008f4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008eb8:	4b24      	ldr	r3, [pc, #144]	; (8008f4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008eba:	220c      	movs	r2, #12
 8008ebc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008ebe:	4b23      	ldr	r3, [pc, #140]	; (8008f4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008ec4:	4b21      	ldr	r3, [pc, #132]	; (8008f4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008eca:	4b20      	ldr	r3, [pc, #128]	; (8008f4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008ecc:	2200      	movs	r2, #0
 8008ece:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008ed0:	4b1e      	ldr	r3, [pc, #120]	; (8008f4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008ed6:	4b1d      	ldr	r3, [pc, #116]	; (8008f4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008ed8:	2200      	movs	r2, #0
 8008eda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008edc:	481b      	ldr	r0, [pc, #108]	; (8008f4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008ede:	f7f9 fe6b 	bl	8002bb8 <HAL_UART_Init>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	bf14      	ite	ne
 8008ee8:	2301      	movne	r3, #1
 8008eea:	2300      	moveq	r3, #0
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d001      	beq.n	8008ef6 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8008ef2:	f000 f8c9 	bl	8009088 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008ef6:	2100      	movs	r1, #0
 8008ef8:	4814      	ldr	r0, [pc, #80]	; (8008f4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008efa:	f7fa fdf1 	bl	8003ae0 <HAL_UARTEx_SetTxFifoThreshold>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	bf14      	ite	ne
 8008f04:	2301      	movne	r3, #1
 8008f06:	2300      	moveq	r3, #0
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d001      	beq.n	8008f12 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8008f0e:	f000 f8bb 	bl	8009088 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008f12:	2100      	movs	r1, #0
 8008f14:	480d      	ldr	r0, [pc, #52]	; (8008f4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008f16:	f7fa fe21 	bl	8003b5c <HAL_UARTEx_SetRxFifoThreshold>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	bf14      	ite	ne
 8008f20:	2301      	movne	r3, #1
 8008f22:	2300      	moveq	r3, #0
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d001      	beq.n	8008f2e <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8008f2a:	f000 f8ad 	bl	8009088 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8008f2e:	4807      	ldr	r0, [pc, #28]	; (8008f4c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008f30:	f7fa fd9d 	bl	8003a6e <HAL_UARTEx_DisableFifoMode>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	bf14      	ite	ne
 8008f3a:	2301      	movne	r3, #1
 8008f3c:	2300      	moveq	r3, #0
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d001      	beq.n	8008f48 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8008f44:	f000 f8a0 	bl	8009088 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008f48:	bf00      	nop
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	200007b8 	.word	0x200007b8
 8008f50:	40013800 	.word	0x40013800

08008f54 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8008f5a:	4b12      	ldr	r3, [pc, #72]	; (8008fa4 <_ZL11MX_DMA_Initv+0x50>)
 8008f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f5e:	4a11      	ldr	r2, [pc, #68]	; (8008fa4 <_ZL11MX_DMA_Initv+0x50>)
 8008f60:	f043 0304 	orr.w	r3, r3, #4
 8008f64:	6493      	str	r3, [r2, #72]	; 0x48
 8008f66:	4b0f      	ldr	r3, [pc, #60]	; (8008fa4 <_ZL11MX_DMA_Initv+0x50>)
 8008f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f6a:	f003 0304 	and.w	r3, r3, #4
 8008f6e:	607b      	str	r3, [r7, #4]
 8008f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008f72:	4b0c      	ldr	r3, [pc, #48]	; (8008fa4 <_ZL11MX_DMA_Initv+0x50>)
 8008f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f76:	4a0b      	ldr	r2, [pc, #44]	; (8008fa4 <_ZL11MX_DMA_Initv+0x50>)
 8008f78:	f043 0301 	orr.w	r3, r3, #1
 8008f7c:	6493      	str	r3, [r2, #72]	; 0x48
 8008f7e:	4b09      	ldr	r3, [pc, #36]	; (8008fa4 <_ZL11MX_DMA_Initv+0x50>)
 8008f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f82:	f003 0301 	and.w	r3, r3, #1
 8008f86:	603b      	str	r3, [r7, #0]
 8008f88:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	200b      	movs	r0, #11
 8008f90:	f7f8 f971 	bl	8001276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8008f94:	200b      	movs	r0, #11
 8008f96:	f7f8 f988 	bl	80012aa <HAL_NVIC_EnableIRQ>

}
 8008f9a:	bf00      	nop
 8008f9c:	3708      	adds	r7, #8
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	40021000 	.word	0x40021000

08008fa8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b08a      	sub	sp, #40	; 0x28
 8008fac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008fae:	f107 0314 	add.w	r3, r7, #20
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	601a      	str	r2, [r3, #0]
 8008fb6:	605a      	str	r2, [r3, #4]
 8008fb8:	609a      	str	r2, [r3, #8]
 8008fba:	60da      	str	r2, [r3, #12]
 8008fbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008fbe:	4b2f      	ldr	r3, [pc, #188]	; (800907c <_ZL12MX_GPIO_Initv+0xd4>)
 8008fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fc2:	4a2e      	ldr	r2, [pc, #184]	; (800907c <_ZL12MX_GPIO_Initv+0xd4>)
 8008fc4:	f043 0304 	orr.w	r3, r3, #4
 8008fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008fca:	4b2c      	ldr	r3, [pc, #176]	; (800907c <_ZL12MX_GPIO_Initv+0xd4>)
 8008fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fce:	f003 0304 	and.w	r3, r3, #4
 8008fd2:	613b      	str	r3, [r7, #16]
 8008fd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008fd6:	4b29      	ldr	r3, [pc, #164]	; (800907c <_ZL12MX_GPIO_Initv+0xd4>)
 8008fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fda:	4a28      	ldr	r2, [pc, #160]	; (800907c <_ZL12MX_GPIO_Initv+0xd4>)
 8008fdc:	f043 0320 	orr.w	r3, r3, #32
 8008fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008fe2:	4b26      	ldr	r3, [pc, #152]	; (800907c <_ZL12MX_GPIO_Initv+0xd4>)
 8008fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fe6:	f003 0320 	and.w	r3, r3, #32
 8008fea:	60fb      	str	r3, [r7, #12]
 8008fec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008fee:	4b23      	ldr	r3, [pc, #140]	; (800907c <_ZL12MX_GPIO_Initv+0xd4>)
 8008ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ff2:	4a22      	ldr	r2, [pc, #136]	; (800907c <_ZL12MX_GPIO_Initv+0xd4>)
 8008ff4:	f043 0301 	orr.w	r3, r3, #1
 8008ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008ffa:	4b20      	ldr	r3, [pc, #128]	; (800907c <_ZL12MX_GPIO_Initv+0xd4>)
 8008ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ffe:	f003 0301 	and.w	r3, r3, #1
 8009002:	60bb      	str	r3, [r7, #8]
 8009004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009006:	4b1d      	ldr	r3, [pc, #116]	; (800907c <_ZL12MX_GPIO_Initv+0xd4>)
 8009008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800900a:	4a1c      	ldr	r2, [pc, #112]	; (800907c <_ZL12MX_GPIO_Initv+0xd4>)
 800900c:	f043 0302 	orr.w	r3, r3, #2
 8009010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009012:	4b1a      	ldr	r3, [pc, #104]	; (800907c <_ZL12MX_GPIO_Initv+0xd4>)
 8009014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009016:	f003 0302 	and.w	r3, r3, #2
 800901a:	607b      	str	r3, [r7, #4]
 800901c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800901e:	2200      	movs	r2, #0
 8009020:	2120      	movs	r1, #32
 8009022:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009026:	f7f8 fd57 	bl	8001ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800902a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800902e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009030:	4b13      	ldr	r3, [pc, #76]	; (8009080 <_ZL12MX_GPIO_Initv+0xd8>)
 8009032:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009034:	2300      	movs	r3, #0
 8009036:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8009038:	f107 0314 	add.w	r3, r7, #20
 800903c:	4619      	mov	r1, r3
 800903e:	4811      	ldr	r0, [pc, #68]	; (8009084 <_ZL12MX_GPIO_Initv+0xdc>)
 8009040:	f7f8 fbc8 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8009044:	2320      	movs	r3, #32
 8009046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009048:	2301      	movs	r3, #1
 800904a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800904c:	2300      	movs	r3, #0
 800904e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009050:	2300      	movs	r3, #0
 8009052:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8009054:	f107 0314 	add.w	r3, r7, #20
 8009058:	4619      	mov	r1, r3
 800905a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800905e:	f7f8 fbb9 	bl	80017d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8009062:	2200      	movs	r2, #0
 8009064:	2100      	movs	r1, #0
 8009066:	2028      	movs	r0, #40	; 0x28
 8009068:	f7f8 f905 	bl	8001276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800906c:	2028      	movs	r0, #40	; 0x28
 800906e:	f7f8 f91c 	bl	80012aa <HAL_NVIC_EnableIRQ>

}
 8009072:	bf00      	nop
 8009074:	3728      	adds	r7, #40	; 0x28
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	40021000 	.word	0x40021000
 8009080:	10110000 	.word	0x10110000
 8009084:	48000800 	.word	0x48000800

08009088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009088:	b480      	push	{r7}
 800908a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800908c:	b672      	cpsid	i
}
 800908e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009090:	e7fe      	b.n	8009090 <Error_Handler+0x8>

08009092 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroup5setupEv>:
/* Test functions of the MQTT library-----------------------------------------------------------------------*/

TEST_GROUP(MqttTestGroup)
{

	void setup()
 8009092:	b480      	push	{r7}
 8009094:	b083      	sub	sp, #12
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
	{

	}
 800909a:	bf00      	nop
 800909c:	370c      	adds	r7, #12
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr

080090a6 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroup8teardownEv>:

	void teardown()
 80090a6:	b480      	push	{r7}
 80090a8:	b083      	sub	sp, #12
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
	{

	}
 80090ae:	bf00      	nop
 80090b0:	370c      	adds	r7, #12
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr
	...

080090bc <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupC1Ev>:
TEST_GROUP(MqttTestGroup)
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4618      	mov	r0, r3
 80090c8:	f00c fb6a 	bl	80157a0 <_ZN5UtestC1Ev>
 80090cc:	4a03      	ldr	r2, [pc, #12]	; (80090dc <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupC1Ev+0x20>)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	601a      	str	r2, [r3, #0]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4618      	mov	r0, r3
 80090d6:	3708      	adds	r7, #8
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}
 80090dc:	08029c70 	.word	0x08029c70

080090e0 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev>:
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	4a05      	ldr	r2, [pc, #20]	; (8009100 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev+0x20>)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	601a      	str	r2, [r3, #0]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	4618      	mov	r0, r3
 80090f2:	f00c fb65 	bl	80157c0 <_ZN5UtestD1Ev>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	4618      	mov	r0, r3
 80090fa:	3708      	adds	r7, #8
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	08029c70 	.word	0x08029c70

08009104 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD0Ev>:
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f7ff ffe7 	bl	80090e0 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev>
 8009112:	2104      	movs	r1, #4
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f002 fb87 	bl	800b828 <_ZdlPvj>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4618      	mov	r0, r3
 800911e:	3708      	adds	r7, #8
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestC1Ev>:
};

TEST(MqttTestGroup, ConnectPacketTest)
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4618      	mov	r0, r3
 8009130:	f7ff ffc4 	bl	80090bc <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupC1Ev>
 8009134:	4a03      	ldr	r2, [pc, #12]	; (8009144 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestC1Ev+0x20>)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	601a      	str	r2, [r3, #0]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4618      	mov	r0, r3
 800913e:	3708      	adds	r7, #8
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}
 8009144:	08029c50 	.word	0x08029c50

08009148 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShell10createTestEv>:
 8009148:	b590      	push	{r4, r7, lr}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	2222      	movs	r2, #34	; 0x22
 8009152:	4906      	ldr	r1, [pc, #24]	; (800916c <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShell10createTestEv+0x24>)
 8009154:	2004      	movs	r0, #4
 8009156:	f002 fb53 	bl	800b800 <_ZnwjPKci>
 800915a:	4604      	mov	r4, r0
 800915c:	4620      	mov	r0, r4
 800915e:	f7ff ffe1 	bl	8009124 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestC1Ev>
 8009162:	4623      	mov	r3, r4
 8009164:	4618      	mov	r0, r3
 8009166:	370c      	adds	r7, #12
 8009168:	46bd      	mov	sp, r7
 800916a:	bd90      	pop	{r4, r7, pc}
 800916c:	0802540c 	.word	0x0802540c

08009170 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellC1Ev>:
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4618      	mov	r0, r3
 800917c:	f00a ff2e 	bl	8013fdc <_ZN10UtestShellC1Ev>
 8009180:	4a03      	ldr	r2, [pc, #12]	; (8009190 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellC1Ev+0x20>)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	601a      	str	r2, [r3, #0]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	4618      	mov	r0, r3
 800918a:	3708      	adds	r7, #8
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}
 8009190:	08029ba4 	.word	0x08029ba4

08009194 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv>:
{
 8009194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009198:	b0b4      	sub	sp, #208	; 0xd0
 800919a:	af04      	add	r7, sp, #16
 800919c:	6078      	str	r0, [r7, #4]
	char clientID[] = "Topuz";
 800919e:	4ac2      	ldr	r2, [pc, #776]	; (80094a8 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x314>)
 80091a0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80091a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80091a8:	6018      	str	r0, [r3, #0]
 80091aa:	3304      	adds	r3, #4
 80091ac:	8019      	strh	r1, [r3, #0]
	uint16_t ClientIDLength = strlen(clientID);
 80091ae:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7f7 f842 	bl	800023c <strlen>
 80091b8:	4603      	mov	r3, r0
 80091ba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
	uint8_t remainLength = (uint8_t)ClientIDLength + 12;  	// 12 represents the bytes in the packet between remain length and Client ID byte.
 80091be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	330c      	adds	r3, #12
 80091c6:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd

	uint8_t outputStream[100] ={0};							// for serialize
 80091ca:	2300      	movs	r3, #0
 80091cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80091d2:	2260      	movs	r2, #96	; 0x60
 80091d4:	2100      	movs	r1, #0
 80091d6:	4618      	mov	r0, r3
 80091d8:	f018 fbba 	bl	8021950 <memset>

	MQTT_Connect_Packet connectPacket;

	connectPacket.ConnectByte = 0x10;
 80091dc:	2310      	movs	r3, #16
 80091de:	733b      	strb	r3, [r7, #12]
	connectPacket.RemainLength = remainLength;
 80091e0:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 80091e4:	737b      	strb	r3, [r7, #13]
	connectPacket.ProtocolNameLength = 0x0004;
 80091e6:	2304      	movs	r3, #4
 80091e8:	81fb      	strh	r3, [r7, #14]
	strcpy(connectPacket.ProtocolName,"MQTT");
 80091ea:	f107 030c 	add.w	r3, r7, #12
 80091ee:	3304      	adds	r3, #4
 80091f0:	4aae      	ldr	r2, [pc, #696]	; (80094ac <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x318>)
 80091f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80091f6:	6018      	str	r0, [r3, #0]
 80091f8:	3304      	adds	r3, #4
 80091fa:	7019      	strb	r1, [r3, #0]
	connectPacket.Level = 0x04;
 80091fc:	2304      	movs	r3, #4
 80091fe:	753b      	strb	r3, [r7, #20]
	connectPacket.Flag = 0x02;
 8009200:	2302      	movs	r3, #2
 8009202:	757b      	strb	r3, [r7, #21]
	connectPacket.KeepAlive = 60;
 8009204:	233c      	movs	r3, #60	; 0x3c
 8009206:	82fb      	strh	r3, [r7, #22]
	connectPacket.ClientIDLength = ClientIDLength;
 8009208:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800920c:	833b      	strh	r3, [r7, #24]
	strcpy(connectPacket.ClientID,clientID);
 800920e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009212:	f107 030c 	add.w	r3, r7, #12
 8009216:	330e      	adds	r3, #14
 8009218:	4611      	mov	r1, r2
 800921a:	4618      	mov	r0, r3
 800921c:	f018 fdb1 	bl	8021d82 <strcpy>

	int32_t status = mqtt_encode_packet(outputStream, &connectPacket, CONNECT_PACKET);
 8009220:	f107 010c 	add.w	r1, r7, #12
 8009224:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009228:	2200      	movs	r2, #0
 800922a:	4618      	mov	r0, r3
 800922c:	f7fa ffda 	bl	80041e4 <mqtt_encode_packet>
 8009230:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8

	LONGS_EQUAL(remainLength+2,status);												// check number of bytes that is written to buffer
 8009234:	f00c fa8a 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8009238:	4604      	mov	r4, r0
 800923a:	6823      	ldr	r3, [r4, #0]
 800923c:	3338      	adds	r3, #56	; 0x38
 800923e:	681d      	ldr	r5, [r3, #0]
 8009240:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 8009244:	1c9e      	adds	r6, r3, #2
 8009246:	f00c fa91 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800924a:	4603      	mov	r3, r0
 800924c:	9302      	str	r3, [sp, #8]
 800924e:	2338      	movs	r3, #56	; 0x38
 8009250:	9301      	str	r3, [sp, #4]
 8009252:	4b97      	ldr	r3, [pc, #604]	; (80094b0 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009254:	9300      	str	r3, [sp, #0]
 8009256:	4b97      	ldr	r3, [pc, #604]	; (80094b4 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x320>)
 8009258:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800925c:	4631      	mov	r1, r6
 800925e:	4620      	mov	r0, r4
 8009260:	47a8      	blx	r5
	STRCMP_EQUAL("Topuz",(const char*)&outputStream[status-ClientIDLength]);		// check clientID that is written to buffer
 8009262:	f00c fa73 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8009266:	4604      	mov	r4, r0
 8009268:	6823      	ldr	r3, [r4, #0]
 800926a:	3324      	adds	r3, #36	; 0x24
 800926c:	681d      	ldr	r5, [r3, #0]
 800926e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009272:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009276:	1ad3      	subs	r3, r2, r3
 8009278:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800927c:	18d6      	adds	r6, r2, r3
 800927e:	f00c fa75 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009282:	4603      	mov	r3, r0
 8009284:	9302      	str	r3, [sp, #8]
 8009286:	2339      	movs	r3, #57	; 0x39
 8009288:	9301      	str	r3, [sp, #4]
 800928a:	4b89      	ldr	r3, [pc, #548]	; (80094b0 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 800928c:	9300      	str	r3, [sp, #0]
 800928e:	2300      	movs	r3, #0
 8009290:	4632      	mov	r2, r6
 8009292:	4985      	ldr	r1, [pc, #532]	; (80094a8 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x314>)
 8009294:	4620      	mov	r0, r4
 8009296:	47a8      	blx	r5
	LONGS_EQUAL(0x10,outputStream[0]);												// check connectByte
 8009298:	f00c fa58 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 800929c:	4604      	mov	r4, r0
 800929e:	6823      	ldr	r3, [r4, #0]
 80092a0:	3338      	adds	r3, #56	; 0x38
 80092a2:	681d      	ldr	r5, [r3, #0]
 80092a4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80092a8:	461e      	mov	r6, r3
 80092aa:	f00c fa5f 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80092ae:	4603      	mov	r3, r0
 80092b0:	9302      	str	r3, [sp, #8]
 80092b2:	233a      	movs	r3, #58	; 0x3a
 80092b4:	9301      	str	r3, [sp, #4]
 80092b6:	4b7e      	ldr	r3, [pc, #504]	; (80094b0 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 80092b8:	9300      	str	r3, [sp, #0]
 80092ba:	4b7f      	ldr	r3, [pc, #508]	; (80094b8 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x324>)
 80092bc:	4632      	mov	r2, r6
 80092be:	2110      	movs	r1, #16
 80092c0:	4620      	mov	r0, r4
 80092c2:	47a8      	blx	r5
	LONGS_EQUAL(remainLength,outputStream[1]);										// check remainlength
 80092c4:	f00c fa42 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 80092c8:	4604      	mov	r4, r0
 80092ca:	6823      	ldr	r3, [r4, #0]
 80092cc:	3338      	adds	r3, #56	; 0x38
 80092ce:	681d      	ldr	r5, [r3, #0]
 80092d0:	f897 60bd 	ldrb.w	r6, [r7, #189]	; 0xbd
 80092d4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80092d8:	4698      	mov	r8, r3
 80092da:	f00c fa47 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80092de:	4603      	mov	r3, r0
 80092e0:	9302      	str	r3, [sp, #8]
 80092e2:	233b      	movs	r3, #59	; 0x3b
 80092e4:	9301      	str	r3, [sp, #4]
 80092e6:	4b72      	ldr	r3, [pc, #456]	; (80094b0 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 80092e8:	9300      	str	r3, [sp, #0]
 80092ea:	4b74      	ldr	r3, [pc, #464]	; (80094bc <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x328>)
 80092ec:	4642      	mov	r2, r8
 80092ee:	4631      	mov	r1, r6
 80092f0:	4620      	mov	r0, r4
 80092f2:	47a8      	blx	r5
	LONGS_EQUAL(0x0004,(uint16_t)((outputStream[2] << 8) + outputStream[3]));		// check protocol name length
 80092f4:	f00c fa2a 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 80092f8:	4604      	mov	r4, r0
 80092fa:	6823      	ldr	r3, [r4, #0]
 80092fc:	3338      	adds	r3, #56	; 0x38
 80092fe:	681d      	ldr	r5, [r3, #0]
 8009300:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8009304:	b29b      	uxth	r3, r3
 8009306:	021b      	lsls	r3, r3, #8
 8009308:	b29a      	uxth	r2, r3
 800930a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800930e:	b29b      	uxth	r3, r3
 8009310:	4413      	add	r3, r2
 8009312:	b29b      	uxth	r3, r3
 8009314:	461e      	mov	r6, r3
 8009316:	f00c fa29 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800931a:	4603      	mov	r3, r0
 800931c:	9302      	str	r3, [sp, #8]
 800931e:	233c      	movs	r3, #60	; 0x3c
 8009320:	9301      	str	r3, [sp, #4]
 8009322:	4b63      	ldr	r3, [pc, #396]	; (80094b0 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009324:	9300      	str	r3, [sp, #0]
 8009326:	4b66      	ldr	r3, [pc, #408]	; (80094c0 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x32c>)
 8009328:	4632      	mov	r2, r6
 800932a:	2104      	movs	r1, #4
 800932c:	4620      	mov	r0, r4
 800932e:	47a8      	blx	r5
	LONGS_EQUAL('M',outputStream[4]); 												// check protocol name
 8009330:	f00c fa0c 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8009334:	4604      	mov	r4, r0
 8009336:	6823      	ldr	r3, [r4, #0]
 8009338:	3338      	adds	r3, #56	; 0x38
 800933a:	681d      	ldr	r5, [r3, #0]
 800933c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8009340:	461e      	mov	r6, r3
 8009342:	f00c fa13 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009346:	4603      	mov	r3, r0
 8009348:	9302      	str	r3, [sp, #8]
 800934a:	233d      	movs	r3, #61	; 0x3d
 800934c:	9301      	str	r3, [sp, #4]
 800934e:	4b58      	ldr	r3, [pc, #352]	; (80094b0 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009350:	9300      	str	r3, [sp, #0]
 8009352:	4b5c      	ldr	r3, [pc, #368]	; (80094c4 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x330>)
 8009354:	4632      	mov	r2, r6
 8009356:	214d      	movs	r1, #77	; 0x4d
 8009358:	4620      	mov	r0, r4
 800935a:	47a8      	blx	r5
	LONGS_EQUAL('Q',outputStream[5]);
 800935c:	f00c f9f6 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8009360:	4604      	mov	r4, r0
 8009362:	6823      	ldr	r3, [r4, #0]
 8009364:	3338      	adds	r3, #56	; 0x38
 8009366:	681d      	ldr	r5, [r3, #0]
 8009368:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800936c:	461e      	mov	r6, r3
 800936e:	f00c f9fd 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009372:	4603      	mov	r3, r0
 8009374:	9302      	str	r3, [sp, #8]
 8009376:	233e      	movs	r3, #62	; 0x3e
 8009378:	9301      	str	r3, [sp, #4]
 800937a:	4b4d      	ldr	r3, [pc, #308]	; (80094b0 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 800937c:	9300      	str	r3, [sp, #0]
 800937e:	4b52      	ldr	r3, [pc, #328]	; (80094c8 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x334>)
 8009380:	4632      	mov	r2, r6
 8009382:	2151      	movs	r1, #81	; 0x51
 8009384:	4620      	mov	r0, r4
 8009386:	47a8      	blx	r5
	LONGS_EQUAL('T',outputStream[6]);
 8009388:	f00c f9e0 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 800938c:	4604      	mov	r4, r0
 800938e:	6823      	ldr	r3, [r4, #0]
 8009390:	3338      	adds	r3, #56	; 0x38
 8009392:	681d      	ldr	r5, [r3, #0]
 8009394:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8009398:	461e      	mov	r6, r3
 800939a:	f00c f9e7 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800939e:	4603      	mov	r3, r0
 80093a0:	9302      	str	r3, [sp, #8]
 80093a2:	233f      	movs	r3, #63	; 0x3f
 80093a4:	9301      	str	r3, [sp, #4]
 80093a6:	4b42      	ldr	r3, [pc, #264]	; (80094b0 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 80093a8:	9300      	str	r3, [sp, #0]
 80093aa:	4b48      	ldr	r3, [pc, #288]	; (80094cc <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x338>)
 80093ac:	4632      	mov	r2, r6
 80093ae:	2154      	movs	r1, #84	; 0x54
 80093b0:	4620      	mov	r0, r4
 80093b2:	47a8      	blx	r5
	LONGS_EQUAL('T',outputStream[7]);
 80093b4:	f00c f9ca 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 80093b8:	4604      	mov	r4, r0
 80093ba:	6823      	ldr	r3, [r4, #0]
 80093bc:	3338      	adds	r3, #56	; 0x38
 80093be:	681d      	ldr	r5, [r3, #0]
 80093c0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80093c4:	461e      	mov	r6, r3
 80093c6:	f00c f9d1 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80093ca:	4603      	mov	r3, r0
 80093cc:	9302      	str	r3, [sp, #8]
 80093ce:	2340      	movs	r3, #64	; 0x40
 80093d0:	9301      	str	r3, [sp, #4]
 80093d2:	4b37      	ldr	r3, [pc, #220]	; (80094b0 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 80093d4:	9300      	str	r3, [sp, #0]
 80093d6:	4b3e      	ldr	r3, [pc, #248]	; (80094d0 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x33c>)
 80093d8:	4632      	mov	r2, r6
 80093da:	2154      	movs	r1, #84	; 0x54
 80093dc:	4620      	mov	r0, r4
 80093de:	47a8      	blx	r5
	LONGS_EQUAL(0x04,outputStream[8]);													// check level byte
 80093e0:	f00c f9b4 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 80093e4:	4604      	mov	r4, r0
 80093e6:	6823      	ldr	r3, [r4, #0]
 80093e8:	3338      	adds	r3, #56	; 0x38
 80093ea:	681d      	ldr	r5, [r3, #0]
 80093ec:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80093f0:	461e      	mov	r6, r3
 80093f2:	f00c f9bb 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80093f6:	4603      	mov	r3, r0
 80093f8:	9302      	str	r3, [sp, #8]
 80093fa:	2341      	movs	r3, #65	; 0x41
 80093fc:	9301      	str	r3, [sp, #4]
 80093fe:	4b2c      	ldr	r3, [pc, #176]	; (80094b0 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009400:	9300      	str	r3, [sp, #0]
 8009402:	4b34      	ldr	r3, [pc, #208]	; (80094d4 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x340>)
 8009404:	4632      	mov	r2, r6
 8009406:	2104      	movs	r1, #4
 8009408:	4620      	mov	r0, r4
 800940a:	47a8      	blx	r5
	LONGS_EQUAL(0x02,outputStream[9]);													// check flag byte
 800940c:	f00c f99e 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8009410:	4604      	mov	r4, r0
 8009412:	6823      	ldr	r3, [r4, #0]
 8009414:	3338      	adds	r3, #56	; 0x38
 8009416:	681d      	ldr	r5, [r3, #0]
 8009418:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800941c:	461e      	mov	r6, r3
 800941e:	f00c f9a5 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009422:	4603      	mov	r3, r0
 8009424:	9302      	str	r3, [sp, #8]
 8009426:	2342      	movs	r3, #66	; 0x42
 8009428:	9301      	str	r3, [sp, #4]
 800942a:	4b21      	ldr	r3, [pc, #132]	; (80094b0 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 800942c:	9300      	str	r3, [sp, #0]
 800942e:	4b2a      	ldr	r3, [pc, #168]	; (80094d8 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x344>)
 8009430:	4632      	mov	r2, r6
 8009432:	2102      	movs	r1, #2
 8009434:	4620      	mov	r0, r4
 8009436:	47a8      	blx	r5
	LONGS_EQUAL((uint16_t)60,(uint16_t)((outputStream[10] << 8) + outputStream[11]));	// check keep alive bytes
 8009438:	f00c f988 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 800943c:	4604      	mov	r4, r0
 800943e:	6823      	ldr	r3, [r4, #0]
 8009440:	3338      	adds	r3, #56	; 0x38
 8009442:	681d      	ldr	r5, [r3, #0]
 8009444:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8009448:	b29b      	uxth	r3, r3
 800944a:	021b      	lsls	r3, r3, #8
 800944c:	b29a      	uxth	r2, r3
 800944e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009452:	b29b      	uxth	r3, r3
 8009454:	4413      	add	r3, r2
 8009456:	b29b      	uxth	r3, r3
 8009458:	461e      	mov	r6, r3
 800945a:	f00c f987 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800945e:	4603      	mov	r3, r0
 8009460:	9302      	str	r3, [sp, #8]
 8009462:	2343      	movs	r3, #67	; 0x43
 8009464:	9301      	str	r3, [sp, #4]
 8009466:	4b12      	ldr	r3, [pc, #72]	; (80094b0 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009468:	9300      	str	r3, [sp, #0]
 800946a:	4b1c      	ldr	r3, [pc, #112]	; (80094dc <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x348>)
 800946c:	4632      	mov	r2, r6
 800946e:	213c      	movs	r1, #60	; 0x3c
 8009470:	4620      	mov	r0, r4
 8009472:	47a8      	blx	r5
	LONGS_EQUAL(ClientIDLength,(uint16_t)((outputStream[12] << 8) + outputStream[13]));	// check client id length bytes
 8009474:	f00c f96a 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8009478:	4604      	mov	r4, r0
 800947a:	6823      	ldr	r3, [r4, #0]
 800947c:	3338      	adds	r3, #56	; 0x38
 800947e:	681d      	ldr	r5, [r3, #0]
 8009480:	f8b7 60be 	ldrh.w	r6, [r7, #190]	; 0xbe
 8009484:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8009488:	b29b      	uxth	r3, r3
 800948a:	021b      	lsls	r3, r3, #8
 800948c:	b29a      	uxth	r2, r3
 800948e:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8009492:	b29b      	uxth	r3, r3
 8009494:	4413      	add	r3, r2
 8009496:	b29b      	uxth	r3, r3
 8009498:	4698      	mov	r8, r3
 800949a:	f00c f967 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800949e:	4603      	mov	r3, r0
 80094a0:	9302      	str	r3, [sp, #8]
 80094a2:	2344      	movs	r3, #68	; 0x44
 80094a4:	e01c      	b.n	80094e0 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x34c>
 80094a6:	bf00      	nop
 80094a8:	0802545c 	.word	0x0802545c
 80094ac:	08025428 	.word	0x08025428
 80094b0:	0802540c 	.word	0x0802540c
 80094b4:	08025430 	.word	0x08025430
 80094b8:	08025464 	.word	0x08025464
 80094bc:	08025490 	.word	0x08025490
 80094c0:	080254c4 	.word	0x080254c4
 80094c4:	08025518 	.word	0x08025518
 80094c8:	08025544 	.word	0x08025544
 80094cc:	08025570 	.word	0x08025570
 80094d0:	0802559c 	.word	0x0802559c
 80094d4:	080255c8 	.word	0x080255c8
 80094d8:	080255f4 	.word	0x080255f4
 80094dc:	08025620 	.word	0x08025620
 80094e0:	9301      	str	r3, [sp, #4]
 80094e2:	4b06      	ldr	r3, [pc, #24]	; (80094fc <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x368>)
 80094e4:	9300      	str	r3, [sp, #0]
 80094e6:	4b06      	ldr	r3, [pc, #24]	; (8009500 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x36c>)
 80094e8:	4642      	mov	r2, r8
 80094ea:	4631      	mov	r1, r6
 80094ec:	4620      	mov	r0, r4
 80094ee:	47a8      	blx	r5

}
 80094f0:	bf00      	nop
 80094f2:	37c0      	adds	r7, #192	; 0xc0
 80094f4:	46bd      	mov	sp, r7
 80094f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094fa:	bf00      	nop
 80094fc:	0802540c 	.word	0x0802540c
 8009500:	0802567c 	.word	0x0802567c

08009504 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_TestC1Ev>:


TEST(MqttTestGroup, SubscribePacketTest)
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4618      	mov	r0, r3
 8009510:	f7ff fdd4 	bl	80090bc <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupC1Ev>
 8009514:	4a03      	ldr	r2, [pc, #12]	; (8009524 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_TestC1Ev+0x20>)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	601a      	str	r2, [r3, #0]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	4618      	mov	r0, r3
 800951e:	3708      	adds	r7, #8
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}
 8009524:	08029b84 	.word	0x08029b84

08009528 <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShell10createTestEv>:
 8009528:	b590      	push	{r4, r7, lr}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	2249      	movs	r2, #73	; 0x49
 8009532:	4906      	ldr	r1, [pc, #24]	; (800954c <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShell10createTestEv+0x24>)
 8009534:	2004      	movs	r0, #4
 8009536:	f002 f963 	bl	800b800 <_ZnwjPKci>
 800953a:	4604      	mov	r4, r0
 800953c:	4620      	mov	r0, r4
 800953e:	f7ff ffe1 	bl	8009504 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_TestC1Ev>
 8009542:	4623      	mov	r3, r4
 8009544:	4618      	mov	r0, r3
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	bd90      	pop	{r4, r7, pc}
 800954c:	0802540c 	.word	0x0802540c

08009550 <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellC1Ev>:
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	4618      	mov	r0, r3
 800955c:	f00a fd3e 	bl	8013fdc <_ZN10UtestShellC1Ev>
 8009560:	4a03      	ldr	r2, [pc, #12]	; (8009570 <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellC1Ev+0x20>)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	601a      	str	r2, [r3, #0]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4618      	mov	r0, r3
 800956a:	3708      	adds	r7, #8
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	08029ad8 	.word	0x08029ad8

08009574 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv>:
{
 8009574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009578:	b0b6      	sub	sp, #216	; 0xd8
 800957a:	af04      	add	r7, sp, #16
 800957c:	6078      	str	r0, [r7, #4]
	char topicName[] = "Testtopic";
 800957e:	4a8c      	ldr	r2, [pc, #560]	; (80097b0 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x23c>)
 8009580:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009584:	ca07      	ldmia	r2, {r0, r1, r2}
 8009586:	c303      	stmia	r3!, {r0, r1}
 8009588:	801a      	strh	r2, [r3, #0]
	uint16_t topicLength = strlen(topicName);
 800958a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800958e:	4618      	mov	r0, r3
 8009590:	f7f6 fe54 	bl	800023c <strlen>
 8009594:	4603      	mov	r3, r0
 8009596:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
	uint8_t remainLength = (uint8_t)topicLength + 5;
 800959a:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	3305      	adds	r3, #5
 80095a2:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

	uint8_t outputBuffer[100] = {0};
 80095a6:	2300      	movs	r3, #0
 80095a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80095aa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80095ae:	2260      	movs	r2, #96	; 0x60
 80095b0:	2100      	movs	r1, #0
 80095b2:	4618      	mov	r0, r3
 80095b4:	f018 f9cc 	bl	8021950 <memset>

	MQTT_Subscribe_Packet subscribePacket;

	subscribePacket.subscribePacketByte = 0x82;
 80095b8:	2382      	movs	r3, #130	; 0x82
 80095ba:	733b      	strb	r3, [r7, #12]
	subscribePacket.remainLength = remainLength;
 80095bc:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80095c0:	737b      	strb	r3, [r7, #13]
	subscribePacket.packetID = 1;
 80095c2:	2301      	movs	r3, #1
 80095c4:	81fb      	strh	r3, [r7, #14]
	subscribePacket.topicLength = topicLength;
 80095c6:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 80095ca:	823b      	strh	r3, [r7, #16]
	strcpy(subscribePacket.topic,topicName);
 80095cc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80095d0:	f107 030c 	add.w	r3, r7, #12
 80095d4:	3306      	adds	r3, #6
 80095d6:	4611      	mov	r1, r2
 80095d8:	4618      	mov	r0, r3
 80095da:	f018 fbd2 	bl	8021d82 <strcpy>
	subscribePacket.Qos = 0;
 80095de:	2300      	movs	r3, #0
 80095e0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	int32_t numberOfBytes = mqtt_encode_packet(outputBuffer, &subscribePacket, SUBSCRIBE_PACKET);
 80095e4:	f107 010c 	add.w	r1, r7, #12
 80095e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80095ec:	2201      	movs	r2, #1
 80095ee:	4618      	mov	r0, r3
 80095f0:	f7fa fdf8 	bl	80041e4 <mqtt_encode_packet>
 80095f4:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8

	LONGS_EQUAL(remainLength+2,numberOfBytes);
 80095f8:	f00c f8a8 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 80095fc:	4604      	mov	r4, r0
 80095fe:	6823      	ldr	r3, [r4, #0]
 8009600:	3338      	adds	r3, #56	; 0x38
 8009602:	681d      	ldr	r5, [r3, #0]
 8009604:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8009608:	1c9e      	adds	r6, r3, #2
 800960a:	f00c f8af 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800960e:	4603      	mov	r3, r0
 8009610:	9302      	str	r3, [sp, #8]
 8009612:	235c      	movs	r3, #92	; 0x5c
 8009614:	9301      	str	r3, [sp, #4]
 8009616:	4b67      	ldr	r3, [pc, #412]	; (80097b4 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x240>)
 8009618:	9300      	str	r3, [sp, #0]
 800961a:	4b67      	ldr	r3, [pc, #412]	; (80097b8 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x244>)
 800961c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009620:	4631      	mov	r1, r6
 8009622:	4620      	mov	r0, r4
 8009624:	47a8      	blx	r5
	LONGS_EQUAL(0x82,outputBuffer[0]);
 8009626:	f00c f891 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 800962a:	4604      	mov	r4, r0
 800962c:	6823      	ldr	r3, [r4, #0]
 800962e:	3338      	adds	r3, #56	; 0x38
 8009630:	681d      	ldr	r5, [r3, #0]
 8009632:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8009636:	461e      	mov	r6, r3
 8009638:	f00c f898 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800963c:	4603      	mov	r3, r0
 800963e:	9302      	str	r3, [sp, #8]
 8009640:	235d      	movs	r3, #93	; 0x5d
 8009642:	9301      	str	r3, [sp, #4]
 8009644:	4b5b      	ldr	r3, [pc, #364]	; (80097b4 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x240>)
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	4b5c      	ldr	r3, [pc, #368]	; (80097bc <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x248>)
 800964a:	4632      	mov	r2, r6
 800964c:	2182      	movs	r1, #130	; 0x82
 800964e:	4620      	mov	r0, r4
 8009650:	47a8      	blx	r5
	LONGS_EQUAL(remainLength,outputBuffer[1]);
 8009652:	f00c f87b 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8009656:	4604      	mov	r4, r0
 8009658:	6823      	ldr	r3, [r4, #0]
 800965a:	3338      	adds	r3, #56	; 0x38
 800965c:	681d      	ldr	r5, [r3, #0]
 800965e:	f897 60bf 	ldrb.w	r6, [r7, #191]	; 0xbf
 8009662:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8009666:	4698      	mov	r8, r3
 8009668:	f00c f880 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800966c:	4603      	mov	r3, r0
 800966e:	9302      	str	r3, [sp, #8]
 8009670:	235e      	movs	r3, #94	; 0x5e
 8009672:	9301      	str	r3, [sp, #4]
 8009674:	4b4f      	ldr	r3, [pc, #316]	; (80097b4 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x240>)
 8009676:	9300      	str	r3, [sp, #0]
 8009678:	4b51      	ldr	r3, [pc, #324]	; (80097c0 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x24c>)
 800967a:	4642      	mov	r2, r8
 800967c:	4631      	mov	r1, r6
 800967e:	4620      	mov	r0, r4
 8009680:	47a8      	blx	r5
	LONGS_EQUAL(0x0001,(uint16_t)((outputBuffer[2] << 8) + outputBuffer[3]));
 8009682:	f00c f863 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8009686:	4604      	mov	r4, r0
 8009688:	6823      	ldr	r3, [r4, #0]
 800968a:	3338      	adds	r3, #56	; 0x38
 800968c:	681d      	ldr	r5, [r3, #0]
 800968e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8009692:	b29b      	uxth	r3, r3
 8009694:	021b      	lsls	r3, r3, #8
 8009696:	b29a      	uxth	r2, r3
 8009698:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800969c:	b29b      	uxth	r3, r3
 800969e:	4413      	add	r3, r2
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	461e      	mov	r6, r3
 80096a4:	f00c f862 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80096a8:	4603      	mov	r3, r0
 80096aa:	9302      	str	r3, [sp, #8]
 80096ac:	235f      	movs	r3, #95	; 0x5f
 80096ae:	9301      	str	r3, [sp, #4]
 80096b0:	4b40      	ldr	r3, [pc, #256]	; (80097b4 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x240>)
 80096b2:	9300      	str	r3, [sp, #0]
 80096b4:	4b43      	ldr	r3, [pc, #268]	; (80097c4 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x250>)
 80096b6:	4632      	mov	r2, r6
 80096b8:	2101      	movs	r1, #1
 80096ba:	4620      	mov	r0, r4
 80096bc:	47a8      	blx	r5
	LONGS_EQUAL(topicLength,(uint16_t)((outputBuffer[4] << 8) + outputBuffer[5]));
 80096be:	f00c f845 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 80096c2:	4604      	mov	r4, r0
 80096c4:	6823      	ldr	r3, [r4, #0]
 80096c6:	3338      	adds	r3, #56	; 0x38
 80096c8:	681d      	ldr	r5, [r3, #0]
 80096ca:	f8b7 60c0 	ldrh.w	r6, [r7, #192]	; 0xc0
 80096ce:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	021b      	lsls	r3, r3, #8
 80096d6:	b29a      	uxth	r2, r3
 80096d8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80096dc:	b29b      	uxth	r3, r3
 80096de:	4413      	add	r3, r2
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	4698      	mov	r8, r3
 80096e4:	f00c f842 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80096e8:	4603      	mov	r3, r0
 80096ea:	9302      	str	r3, [sp, #8]
 80096ec:	2360      	movs	r3, #96	; 0x60
 80096ee:	9301      	str	r3, [sp, #4]
 80096f0:	4b30      	ldr	r3, [pc, #192]	; (80097b4 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x240>)
 80096f2:	9300      	str	r3, [sp, #0]
 80096f4:	4b34      	ldr	r3, [pc, #208]	; (80097c8 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x254>)
 80096f6:	4642      	mov	r2, r8
 80096f8:	4631      	mov	r1, r6
 80096fa:	4620      	mov	r0, r4
 80096fc:	47a8      	blx	r5

	int32_t index = 6;
 80096fe:	2306      	movs	r3, #6
 8009700:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	for(int16_t i=0;i<topicLength;i++)
 8009704:	2300      	movs	r3, #0
 8009706:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 800970a:	f9b7 20c2 	ldrsh.w	r2, [r7, #194]	; 0xc2
 800970e:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8009712:	429a      	cmp	r2, r3
 8009714:	da2d      	bge.n	8009772 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x1fe>
	{
		BYTES_EQUAL(topicName[i],outputBuffer[index++]);
 8009716:	f00c f819 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 800971a:	4604      	mov	r4, r0
 800971c:	6823      	ldr	r3, [r4, #0]
 800971e:	3338      	adds	r3, #56	; 0x38
 8009720:	681d      	ldr	r5, [r3, #0]
 8009722:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 8009726:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800972a:	4413      	add	r3, r2
 800972c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8009730:	461e      	mov	r6, r3
 8009732:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009736:	1c5a      	adds	r2, r3, #1
 8009738:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800973c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8009740:	4413      	add	r3, r2
 8009742:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 8009746:	4698      	mov	r8, r3
 8009748:	f00c f810 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800974c:	4603      	mov	r3, r0
 800974e:	9302      	str	r3, [sp, #8]
 8009750:	2366      	movs	r3, #102	; 0x66
 8009752:	9301      	str	r3, [sp, #4]
 8009754:	4b17      	ldr	r3, [pc, #92]	; (80097b4 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x240>)
 8009756:	9300      	str	r3, [sp, #0]
 8009758:	4b1c      	ldr	r3, [pc, #112]	; (80097cc <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x258>)
 800975a:	4642      	mov	r2, r8
 800975c:	4631      	mov	r1, r6
 800975e:	4620      	mov	r0, r4
 8009760:	47a8      	blx	r5
	for(int16_t i=0;i<topicLength;i++)
 8009762:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 8009766:	b29b      	uxth	r3, r3
 8009768:	3301      	adds	r3, #1
 800976a:	b29b      	uxth	r3, r3
 800976c:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 8009770:	e7cb      	b.n	800970a <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x196>
	}

	LONGS_EQUAL(0,outputBuffer[index]);
 8009772:	f00b ffeb 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8009776:	4604      	mov	r4, r0
 8009778:	6823      	ldr	r3, [r4, #0]
 800977a:	3338      	adds	r3, #56	; 0x38
 800977c:	681d      	ldr	r5, [r3, #0]
 800977e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009782:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009786:	4413      	add	r3, r2
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	461e      	mov	r6, r3
 800978c:	f00b ffee 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009790:	4603      	mov	r3, r0
 8009792:	9302      	str	r3, [sp, #8]
 8009794:	2369      	movs	r3, #105	; 0x69
 8009796:	9301      	str	r3, [sp, #4]
 8009798:	4b06      	ldr	r3, [pc, #24]	; (80097b4 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x240>)
 800979a:	9300      	str	r3, [sp, #0]
 800979c:	4b0c      	ldr	r3, [pc, #48]	; (80097d0 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x25c>)
 800979e:	4632      	mov	r2, r6
 80097a0:	2100      	movs	r1, #0
 80097a2:	4620      	mov	r0, r4
 80097a4:	47a8      	blx	r5


}
 80097a6:	bf00      	nop
 80097a8:	37c8      	adds	r7, #200	; 0xc8
 80097aa:	46bd      	mov	sp, r7
 80097ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097b0:	08025890 	.word	0x08025890
 80097b4:	0802540c 	.word	0x0802540c
 80097b8:	080256d8 	.word	0x080256d8
 80097bc:	0802570c 	.word	0x0802570c
 80097c0:	08025738 	.word	0x08025738
 80097c4:	0802576c 	.word	0x0802576c
 80097c8:	080257c0 	.word	0x080257c0
 80097cc:	08025818 	.word	0x08025818
 80097d0:	08025864 	.word	0x08025864

080097d4 <_ZN41TEST_MqttTestGroup_PublishPacketTest_TestC1Ev>:

TEST(MqttTestGroup, PublishPacketTest)
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b082      	sub	sp, #8
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	4618      	mov	r0, r3
 80097e0:	f7ff fc6c 	bl	80090bc <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupC1Ev>
 80097e4:	4a03      	ldr	r2, [pc, #12]	; (80097f4 <_ZN41TEST_MqttTestGroup_PublishPacketTest_TestC1Ev+0x20>)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	601a      	str	r2, [r3, #0]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4618      	mov	r0, r3
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	08029ab8 	.word	0x08029ab8

080097f8 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShell10createTestEv>:
 80097f8:	b590      	push	{r4, r7, lr}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	226e      	movs	r2, #110	; 0x6e
 8009802:	4906      	ldr	r1, [pc, #24]	; (800981c <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShell10createTestEv+0x24>)
 8009804:	2004      	movs	r0, #4
 8009806:	f001 fffb 	bl	800b800 <_ZnwjPKci>
 800980a:	4604      	mov	r4, r0
 800980c:	4620      	mov	r0, r4
 800980e:	f7ff ffe1 	bl	80097d4 <_ZN41TEST_MqttTestGroup_PublishPacketTest_TestC1Ev>
 8009812:	4623      	mov	r3, r4
 8009814:	4618      	mov	r0, r3
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	bd90      	pop	{r4, r7, pc}
 800981c:	0802540c 	.word	0x0802540c

08009820 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellC1Ev>:
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	4618      	mov	r0, r3
 800982c:	f00a fbd6 	bl	8013fdc <_ZN10UtestShellC1Ev>
 8009830:	4a03      	ldr	r2, [pc, #12]	; (8009840 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellC1Ev+0x20>)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	601a      	str	r2, [r3, #0]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4618      	mov	r0, r3
 800983a:	3708      	adds	r7, #8
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	08029a0c 	.word	0x08029a0c

08009844 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv>:
{
 8009844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009848:	b0d2      	sub	sp, #328	; 0x148
 800984a:	af04      	add	r7, sp, #16
 800984c:	1d3b      	adds	r3, r7, #4
 800984e:	6018      	str	r0, [r3, #0]
	char topicName[] = "Testtopic";
 8009850:	4a9f      	ldr	r2, [pc, #636]	; (8009ad0 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x28c>)
 8009852:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009856:	ca07      	ldmia	r2, {r0, r1, r2}
 8009858:	c303      	stmia	r3!, {r0, r1}
 800985a:	801a      	strh	r2, [r3, #0]
	char message[] = "hello world!";
 800985c:	4b9d      	ldr	r3, [pc, #628]	; (8009ad4 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x290>)
 800985e:	f507 7484 	add.w	r4, r7, #264	; 0x108
 8009862:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009864:	c407      	stmia	r4!, {r0, r1, r2}
 8009866:	7023      	strb	r3, [r4, #0]

	uint16_t topicLength = strlen(topicName);
 8009868:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800986c:	4618      	mov	r0, r3
 800986e:	f7f6 fce5 	bl	800023c <strlen>
 8009872:	4603      	mov	r3, r0
 8009874:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
	uint16_t messageLength = strlen(message);
 8009878:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800987c:	4618      	mov	r0, r3
 800987e:	f7f6 fcdd 	bl	800023c <strlen>
 8009882:	4603      	mov	r3, r0
 8009884:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
	uint8_t remainLength = (uint8_t)topicLength+ (uint8_t)messageLength + 2;
 8009888:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 800988c:	b2da      	uxtb	r2, r3
 800988e:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 8009892:	b2db      	uxtb	r3, r3
 8009894:	4413      	add	r3, r2
 8009896:	b2db      	uxtb	r3, r3
 8009898:	3302      	adds	r3, #2
 800989a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b

	uint8_t outputBuffer[100] = {0};
 800989e:	2300      	movs	r3, #0
 80098a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80098a4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80098a8:	2260      	movs	r2, #96	; 0x60
 80098aa:	2100      	movs	r1, #0
 80098ac:	4618      	mov	r0, r3
 80098ae:	f018 f84f 	bl	8021950 <memset>

	MQTT_Publish_Packet publishPacket = {0};
 80098b2:	f107 0308 	add.w	r3, r7, #8
 80098b6:	4618      	mov	r0, r3
 80098b8:	239a      	movs	r3, #154	; 0x9a
 80098ba:	461a      	mov	r2, r3
 80098bc:	2100      	movs	r1, #0
 80098be:	f018 f847 	bl	8021950 <memset>

	publishPacket.publishPacketByte = 0x30;
 80098c2:	f107 0308 	add.w	r3, r7, #8
 80098c6:	2230      	movs	r2, #48	; 0x30
 80098c8:	701a      	strb	r2, [r3, #0]
	publishPacket.remainLength = remainLength;
 80098ca:	f107 0308 	add.w	r3, r7, #8
 80098ce:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 80098d2:	705a      	strb	r2, [r3, #1]
	publishPacket.topicLength = topicLength;
 80098d4:	f107 0308 	add.w	r3, r7, #8
 80098d8:	f8b7 212e 	ldrh.w	r2, [r7, #302]	; 0x12e
 80098dc:	805a      	strh	r2, [r3, #2]
	strcpy(publishPacket.topic,topicName);
 80098de:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80098e2:	f107 0308 	add.w	r3, r7, #8
 80098e6:	3304      	adds	r3, #4
 80098e8:	4611      	mov	r1, r2
 80098ea:	4618      	mov	r0, r3
 80098ec:	f018 fa49 	bl	8021d82 <strcpy>
	strcpy(publishPacket.message,message);
 80098f0:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80098f4:	f107 0308 	add.w	r3, r7, #8
 80098f8:	3336      	adds	r3, #54	; 0x36
 80098fa:	4611      	mov	r1, r2
 80098fc:	4618      	mov	r0, r3
 80098fe:	f018 fa40 	bl	8021d82 <strcpy>

	int32_t numberOfBytes = mqtt_encode_packet(outputBuffer, &publishPacket, PUBLISH_PACKET);
 8009902:	f107 0108 	add.w	r1, r7, #8
 8009906:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800990a:	2202      	movs	r2, #2
 800990c:	4618      	mov	r0, r3
 800990e:	f7fa fc69 	bl	80041e4 <mqtt_encode_packet>
 8009912:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124

	LONGS_EQUAL(remainLength+2,numberOfBytes);
 8009916:	f00b ff19 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 800991a:	4604      	mov	r4, r0
 800991c:	6823      	ldr	r3, [r4, #0]
 800991e:	3338      	adds	r3, #56	; 0x38
 8009920:	681d      	ldr	r5, [r3, #0]
 8009922:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009926:	1c9e      	adds	r6, r3, #2
 8009928:	f00b ff20 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800992c:	4603      	mov	r3, r0
 800992e:	9302      	str	r3, [sp, #8]
 8009930:	2383      	movs	r3, #131	; 0x83
 8009932:	9301      	str	r3, [sp, #4]
 8009934:	4b68      	ldr	r3, [pc, #416]	; (8009ad8 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x294>)
 8009936:	9300      	str	r3, [sp, #0]
 8009938:	4b68      	ldr	r3, [pc, #416]	; (8009adc <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x298>)
 800993a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800993e:	4631      	mov	r1, r6
 8009940:	4620      	mov	r0, r4
 8009942:	47a8      	blx	r5
	LONGS_EQUAL(0x30,outputBuffer[0]);
 8009944:	f00b ff02 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8009948:	4604      	mov	r4, r0
 800994a:	6823      	ldr	r3, [r4, #0]
 800994c:	3338      	adds	r3, #56	; 0x38
 800994e:	681d      	ldr	r5, [r3, #0]
 8009950:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8009954:	461e      	mov	r6, r3
 8009956:	f00b ff09 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800995a:	4603      	mov	r3, r0
 800995c:	9302      	str	r3, [sp, #8]
 800995e:	2384      	movs	r3, #132	; 0x84
 8009960:	9301      	str	r3, [sp, #4]
 8009962:	4b5d      	ldr	r3, [pc, #372]	; (8009ad8 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x294>)
 8009964:	9300      	str	r3, [sp, #0]
 8009966:	4b5e      	ldr	r3, [pc, #376]	; (8009ae0 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x29c>)
 8009968:	4632      	mov	r2, r6
 800996a:	2130      	movs	r1, #48	; 0x30
 800996c:	4620      	mov	r0, r4
 800996e:	47a8      	blx	r5
	LONGS_EQUAL(remainLength,outputBuffer[1]);
 8009970:	f00b feec 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8009974:	4604      	mov	r4, r0
 8009976:	6823      	ldr	r3, [r4, #0]
 8009978:	3338      	adds	r3, #56	; 0x38
 800997a:	681d      	ldr	r5, [r3, #0]
 800997c:	f897 612b 	ldrb.w	r6, [r7, #299]	; 0x12b
 8009980:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8009984:	4698      	mov	r8, r3
 8009986:	f00b fef1 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800998a:	4603      	mov	r3, r0
 800998c:	9302      	str	r3, [sp, #8]
 800998e:	2385      	movs	r3, #133	; 0x85
 8009990:	9301      	str	r3, [sp, #4]
 8009992:	4b51      	ldr	r3, [pc, #324]	; (8009ad8 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x294>)
 8009994:	9300      	str	r3, [sp, #0]
 8009996:	4b53      	ldr	r3, [pc, #332]	; (8009ae4 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x2a0>)
 8009998:	4642      	mov	r2, r8
 800999a:	4631      	mov	r1, r6
 800999c:	4620      	mov	r0, r4
 800999e:	47a8      	blx	r5
	LONGS_EQUAL(topicLength,(uint16_t)((outputBuffer[2] << 8) + outputBuffer[3]));
 80099a0:	f00b fed4 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 80099a4:	4604      	mov	r4, r0
 80099a6:	6823      	ldr	r3, [r4, #0]
 80099a8:	3338      	adds	r3, #56	; 0x38
 80099aa:	681d      	ldr	r5, [r3, #0]
 80099ac:	f8b7 612e 	ldrh.w	r6, [r7, #302]	; 0x12e
 80099b0:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	021b      	lsls	r3, r3, #8
 80099b8:	b29a      	uxth	r2, r3
 80099ba:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80099be:	b29b      	uxth	r3, r3
 80099c0:	4413      	add	r3, r2
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	4698      	mov	r8, r3
 80099c6:	f00b fed1 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80099ca:	4603      	mov	r3, r0
 80099cc:	9302      	str	r3, [sp, #8]
 80099ce:	2386      	movs	r3, #134	; 0x86
 80099d0:	9301      	str	r3, [sp, #4]
 80099d2:	4b41      	ldr	r3, [pc, #260]	; (8009ad8 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x294>)
 80099d4:	9300      	str	r3, [sp, #0]
 80099d6:	4b44      	ldr	r3, [pc, #272]	; (8009ae8 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x2a4>)
 80099d8:	4642      	mov	r2, r8
 80099da:	4631      	mov	r1, r6
 80099dc:	4620      	mov	r0, r4
 80099de:	47a8      	blx	r5

	int32_t index = 4;
 80099e0:	2304      	movs	r3, #4
 80099e2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

	for(int16_t i=0;i<topicLength;i++)
 80099e6:	2300      	movs	r3, #0
 80099e8:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
 80099ec:	f9b7 2132 	ldrsh.w	r2, [r7, #306]	; 0x132
 80099f0:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 80099f4:	429a      	cmp	r2, r3
 80099f6:	da2d      	bge.n	8009a54 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x210>
	{
		BYTES_EQUAL(topicName[i],outputBuffer[index++]);
 80099f8:	f00b fea8 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 80099fc:	4604      	mov	r4, r0
 80099fe:	6823      	ldr	r3, [r4, #0]
 8009a00:	3338      	adds	r3, #56	; 0x38
 8009a02:	681d      	ldr	r5, [r3, #0]
 8009a04:	f9b7 3132 	ldrsh.w	r3, [r7, #306]	; 0x132
 8009a08:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009a0c:	4413      	add	r3, r2
 8009a0e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8009a12:	461e      	mov	r6, r3
 8009a14:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009a18:	1c5a      	adds	r2, r3, #1
 8009a1a:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8009a1e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009a22:	4413      	add	r3, r2
 8009a24:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 8009a28:	4698      	mov	r8, r3
 8009a2a:	f00b fe9f 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	9302      	str	r3, [sp, #8]
 8009a32:	238c      	movs	r3, #140	; 0x8c
 8009a34:	9301      	str	r3, [sp, #4]
 8009a36:	4b28      	ldr	r3, [pc, #160]	; (8009ad8 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x294>)
 8009a38:	9300      	str	r3, [sp, #0]
 8009a3a:	4b2c      	ldr	r3, [pc, #176]	; (8009aec <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x2a8>)
 8009a3c:	4642      	mov	r2, r8
 8009a3e:	4631      	mov	r1, r6
 8009a40:	4620      	mov	r0, r4
 8009a42:	47a8      	blx	r5
	for(int16_t i=0;i<topicLength;i++)
 8009a44:	f9b7 3132 	ldrsh.w	r3, [r7, #306]	; 0x132
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
 8009a52:	e7cb      	b.n	80099ec <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x1a8>
	}

	for(int16_t i=0;i<messageLength;i++)
 8009a54:	2300      	movs	r3, #0
 8009a56:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
 8009a5a:	f9b7 2130 	ldrsh.w	r2, [r7, #304]	; 0x130
 8009a5e:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 8009a62:	429a      	cmp	r2, r3
 8009a64:	da2d      	bge.n	8009ac2 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x27e>
	{
		BYTES_EQUAL(message[i],outputBuffer[index++]);
 8009a66:	f00b fe71 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8009a6a:	4604      	mov	r4, r0
 8009a6c:	6823      	ldr	r3, [r4, #0]
 8009a6e:	3338      	adds	r3, #56	; 0x38
 8009a70:	681d      	ldr	r5, [r3, #0]
 8009a72:	f9b7 3130 	ldrsh.w	r3, [r7, #304]	; 0x130
 8009a76:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009a7a:	4413      	add	r3, r2
 8009a7c:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8009a80:	461e      	mov	r6, r3
 8009a82:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009a86:	1c5a      	adds	r2, r3, #1
 8009a88:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8009a8c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009a90:	4413      	add	r3, r2
 8009a92:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 8009a96:	4698      	mov	r8, r3
 8009a98:	f00b fe68 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	9302      	str	r3, [sp, #8]
 8009aa0:	2391      	movs	r3, #145	; 0x91
 8009aa2:	9301      	str	r3, [sp, #4]
 8009aa4:	4b0c      	ldr	r3, [pc, #48]	; (8009ad8 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x294>)
 8009aa6:	9300      	str	r3, [sp, #0]
 8009aa8:	4b11      	ldr	r3, [pc, #68]	; (8009af0 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x2ac>)
 8009aaa:	4642      	mov	r2, r8
 8009aac:	4631      	mov	r1, r6
 8009aae:	4620      	mov	r0, r4
 8009ab0:	47a8      	blx	r5
	for(int16_t i=0;i<messageLength;i++)
 8009ab2:	f9b7 3130 	ldrsh.w	r3, [r7, #304]	; 0x130
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	3301      	adds	r3, #1
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
 8009ac0:	e7cb      	b.n	8009a5a <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x216>
	}


}
 8009ac2:	bf00      	nop
 8009ac4:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ace:	bf00      	nop
 8009ad0:	08025890 	.word	0x08025890
 8009ad4:	08025968 	.word	0x08025968
 8009ad8:	0802540c 	.word	0x0802540c
 8009adc:	080256d8 	.word	0x080256d8
 8009ae0:	0802589c 	.word	0x0802589c
 8009ae4:	08025738 	.word	0x08025738
 8009ae8:	080258c8 	.word	0x080258c8
 8009aec:	08025818 	.word	0x08025818
 8009af0:	08025920 	.word	0x08025920

08009af4 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellD1Ev>:
TEST(MqttTestGroup, PublishPacketTest)
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	4a05      	ldr	r2, [pc, #20]	; (8009b14 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellD1Ev+0x20>)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	601a      	str	r2, [r3, #0]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	4618      	mov	r0, r3
 8009b06:	f00a fabd 	bl	8014084 <_ZN10UtestShellD1Ev>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3708      	adds	r7, #8
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	08029a0c 	.word	0x08029a0c

08009b18 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellD0Ev>:
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f7ff ffe7 	bl	8009af4 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellD1Ev>
 8009b26:	211c      	movs	r1, #28
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f001 fe7d 	bl	800b828 <_ZdlPvj>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	4618      	mov	r0, r3
 8009b32:	3708      	adds	r7, #8
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <_ZN41TEST_MqttTestGroup_PublishPacketTest_TestD1Ev>:
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	4a05      	ldr	r2, [pc, #20]	; (8009b58 <_ZN41TEST_MqttTestGroup_PublishPacketTest_TestD1Ev+0x20>)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	601a      	str	r2, [r3, #0]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f7ff fac9 	bl	80090e0 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	4618      	mov	r0, r3
 8009b52:	3708      	adds	r7, #8
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	08029ab8 	.word	0x08029ab8

08009b5c <_ZN41TEST_MqttTestGroup_PublishPacketTest_TestD0Ev>:
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f7ff ffe7 	bl	8009b38 <_ZN41TEST_MqttTestGroup_PublishPacketTest_TestD1Ev>
 8009b6a:	2104      	movs	r1, #4
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f001 fe5b 	bl	800b828 <_ZdlPvj>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	4618      	mov	r0, r3
 8009b76:	3708      	adds	r7, #8
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellD1Ev>:
TEST(MqttTestGroup, SubscribePacketTest)
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	4a05      	ldr	r2, [pc, #20]	; (8009b9c <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellD1Ev+0x20>)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	601a      	str	r2, [r3, #0]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f00a fa79 	bl	8014084 <_ZN10UtestShellD1Ev>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	4618      	mov	r0, r3
 8009b96:	3708      	adds	r7, #8
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	08029ad8 	.word	0x08029ad8

08009ba0 <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellD0Ev>:
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f7ff ffe7 	bl	8009b7c <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellD1Ev>
 8009bae:	211c      	movs	r1, #28
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f001 fe39 	bl	800b828 <_ZdlPvj>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3708      	adds	r7, #8
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_TestD1Ev>:
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	4a05      	ldr	r2, [pc, #20]	; (8009be0 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_TestD1Ev+0x20>)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	601a      	str	r2, [r3, #0]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7ff fa85 	bl	80090e0 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3708      	adds	r7, #8
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	08029b84 	.word	0x08029b84

08009be4 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_TestD0Ev>:
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f7ff ffe7 	bl	8009bc0 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_TestD1Ev>
 8009bf2:	2104      	movs	r1, #4
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f001 fe17 	bl	800b828 <_ZdlPvj>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3708      	adds	r7, #8
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellD1Ev>:
TEST(MqttTestGroup, ConnectPacketTest)
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	4a05      	ldr	r2, [pc, #20]	; (8009c24 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellD1Ev+0x20>)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	601a      	str	r2, [r3, #0]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	4618      	mov	r0, r3
 8009c16:	f00a fa35 	bl	8014084 <_ZN10UtestShellD1Ev>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3708      	adds	r7, #8
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	08029ba4 	.word	0x08029ba4

08009c28 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellD0Ev>:
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f7ff ffe7 	bl	8009c04 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellD1Ev>
 8009c36:	211c      	movs	r1, #28
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f001 fdf5 	bl	800b828 <_ZdlPvj>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	4618      	mov	r0, r3
 8009c42:	3708      	adds	r7, #8
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestD1Ev>:
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	4a05      	ldr	r2, [pc, #20]	; (8009c68 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestD1Ev+0x20>)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	601a      	str	r2, [r3, #0]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7ff fa41 	bl	80090e0 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	4618      	mov	r0, r3
 8009c62:	3708      	adds	r7, #8
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	08029c50 	.word	0x08029c50

08009c6c <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestD0Ev>:
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f7ff ffe7 	bl	8009c48 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestD1Ev>
 8009c7a:	2104      	movs	r1, #4
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f001 fdd3 	bl	800b828 <_ZdlPvj>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4618      	mov	r0, r3
 8009c86:	3708      	adds	r7, #8
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <_Z41__static_initialization_and_destruction_0ii>:
}
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af02      	add	r7, sp, #8
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d12b      	bne.n	8009cf4 <_Z41__static_initialization_and_destruction_0ii+0x68>
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d126      	bne.n	8009cf4 <_Z41__static_initialization_and_destruction_0ii+0x68>
TEST(MqttTestGroup, ConnectPacketTest)
 8009ca6:	4822      	ldr	r0, [pc, #136]	; (8009d30 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009ca8:	f7ff fa62 	bl	8009170 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellC1Ev>
 8009cac:	2322      	movs	r3, #34	; 0x22
 8009cae:	9301      	str	r3, [sp, #4]
 8009cb0:	4b20      	ldr	r3, [pc, #128]	; (8009d34 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009cb2:	9300      	str	r3, [sp, #0]
 8009cb4:	4b20      	ldr	r3, [pc, #128]	; (8009d38 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009cb6:	4a21      	ldr	r2, [pc, #132]	; (8009d3c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009cb8:	491d      	ldr	r1, [pc, #116]	; (8009d30 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009cba:	4821      	ldr	r0, [pc, #132]	; (8009d40 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009cbc:	f00b ffde 	bl	8015c7c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(MqttTestGroup, SubscribePacketTest)
 8009cc0:	4820      	ldr	r0, [pc, #128]	; (8009d44 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009cc2:	f7ff fc45 	bl	8009550 <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellC1Ev>
 8009cc6:	2349      	movs	r3, #73	; 0x49
 8009cc8:	9301      	str	r3, [sp, #4]
 8009cca:	4b1a      	ldr	r3, [pc, #104]	; (8009d34 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009ccc:	9300      	str	r3, [sp, #0]
 8009cce:	4b1e      	ldr	r3, [pc, #120]	; (8009d48 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009cd0:	4a1a      	ldr	r2, [pc, #104]	; (8009d3c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009cd2:	491c      	ldr	r1, [pc, #112]	; (8009d44 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009cd4:	481d      	ldr	r0, [pc, #116]	; (8009d4c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009cd6:	f00b ffd1 	bl	8015c7c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(MqttTestGroup, PublishPacketTest)
 8009cda:	481d      	ldr	r0, [pc, #116]	; (8009d50 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009cdc:	f7ff fda0 	bl	8009820 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellC1Ev>
 8009ce0:	236e      	movs	r3, #110	; 0x6e
 8009ce2:	9301      	str	r3, [sp, #4]
 8009ce4:	4b13      	ldr	r3, [pc, #76]	; (8009d34 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009ce6:	9300      	str	r3, [sp, #0]
 8009ce8:	4b1a      	ldr	r3, [pc, #104]	; (8009d54 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8009cea:	4a14      	ldr	r2, [pc, #80]	; (8009d3c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009cec:	4918      	ldr	r1, [pc, #96]	; (8009d50 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009cee:	481a      	ldr	r0, [pc, #104]	; (8009d58 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8009cf0:	f00b ffc4 	bl	8015c7c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d116      	bne.n	8009d28 <_Z41__static_initialization_and_destruction_0ii+0x9c>
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d111      	bne.n	8009d28 <_Z41__static_initialization_and_destruction_0ii+0x9c>
 8009d04:	4814      	ldr	r0, [pc, #80]	; (8009d58 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8009d06:	f00b ffe3 	bl	8015cd0 <_ZN13TestInstallerD1Ev>
 8009d0a:	4811      	ldr	r0, [pc, #68]	; (8009d50 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009d0c:	f7ff fef2 	bl	8009af4 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellD1Ev>
TEST(MqttTestGroup, SubscribePacketTest)
 8009d10:	480e      	ldr	r0, [pc, #56]	; (8009d4c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009d12:	f00b ffdd 	bl	8015cd0 <_ZN13TestInstallerD1Ev>
 8009d16:	480b      	ldr	r0, [pc, #44]	; (8009d44 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009d18:	f7ff ff30 	bl	8009b7c <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellD1Ev>
TEST(MqttTestGroup, ConnectPacketTest)
 8009d1c:	4808      	ldr	r0, [pc, #32]	; (8009d40 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009d1e:	f00b ffd7 	bl	8015cd0 <_ZN13TestInstallerD1Ev>
 8009d22:	4803      	ldr	r0, [pc, #12]	; (8009d30 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009d24:	f7ff ff6e 	bl	8009c04 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellD1Ev>
}
 8009d28:	bf00      	nop
 8009d2a:	3708      	adds	r7, #8
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	200008a8 	.word	0x200008a8
 8009d34:	0802540c 	.word	0x0802540c
 8009d38:	08025978 	.word	0x08025978
 8009d3c:	0802598c 	.word	0x0802598c
 8009d40:	200008c4 	.word	0x200008c4
 8009d44:	200008c8 	.word	0x200008c8
 8009d48:	0802599c 	.word	0x0802599c
 8009d4c:	200008e4 	.word	0x200008e4
 8009d50:	200008e8 	.word	0x200008e8
 8009d54:	080259b0 	.word	0x080259b0
 8009d58:	20000904 	.word	0x20000904

08009d5c <_GLOBAL__sub_I_externTestGroupMqttTestGroup>:
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009d64:	2001      	movs	r0, #1
 8009d66:	f7ff ff91 	bl	8009c8c <_Z41__static_initialization_and_destruction_0ii>
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <_GLOBAL__sub_D_externTestGroupMqttTestGroup>:
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009d74:	2000      	movs	r0, #0
 8009d76:	f7ff ff89 	bl	8009c8c <_Z41__static_initialization_and_destruction_0ii>
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <_ZNK10TestResult11getRunCountEv>:

    size_t getTestCount() const
    {
        return testCount_;
    }
    size_t getRunCount() const
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
    {
        return runCount_;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	68db      	ldr	r3, [r3, #12]
    }
 8009d88:	4618      	mov	r0, r3
 8009d8a:	370c      	adds	r7, #12
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr

08009d94 <_ZNK10TestResult15getIgnoredCountEv>:
    }
    size_t getFilteredOutCount() const
    {
        return filteredOutCount_;
    }
    size_t getIgnoredCount() const
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
    {
        return ignoredCount_;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	69db      	ldr	r3, [r3, #28]
    }
 8009da0:	4618      	mov	r0, r3
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <_ZNK10TestResult15getFailureCountEv>:
    size_t getFailureCount() const
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
    {
        return failureCount_;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	695b      	ldr	r3, [r3, #20]
    }
 8009db8:	4618      	mov	r0, r3
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <_ZNK10TestResult9isFailureEv>:

    bool isFailure() const
 8009dc4:	b590      	push	{r4, r7, lr}
 8009dc6:	b083      	sub	sp, #12
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
    {
        return (getFailureCount() != 0) || (getRunCount() + getIgnoredCount() == 0);
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f7ff ffed 	bl	8009dac <_ZNK10TestResult15getFailureCountEv>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d10a      	bne.n	8009dee <_ZNK10TestResult9isFailureEv+0x2a>
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f7ff ffcf 	bl	8009d7c <_ZNK10TestResult11getRunCountEv>
 8009dde:	4604      	mov	r4, r0
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f7ff ffd7 	bl	8009d94 <_ZNK10TestResult15getIgnoredCountEv>
 8009de6:	4603      	mov	r3, r0
 8009de8:	4423      	add	r3, r4
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d101      	bne.n	8009df2 <_ZNK10TestResult9isFailureEv+0x2e>
 8009dee:	2301      	movs	r3, #1
 8009df0:	e000      	b.n	8009df4 <_ZNK10TestResult9isFailureEv+0x30>
 8009df2:	2300      	movs	r3, #0
    }
 8009df4:	4618      	mov	r0, r3
 8009df6:	370c      	adds	r7, #12
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd90      	pop	{r4, r7, pc}

08009dfc <_ZN17ConsoleTestOutputC1Ev>:
///////////////////////////////////////////////////////////////////////////////

class ConsoleTestOutput: public TestOutput
{
public:
    explicit ConsoleTestOutput()
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b082      	sub	sp, #8
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
    {
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	4618      	mov	r0, r3
 8009e08:	f007 fde6 	bl	80119d8 <_ZN10TestOutputC1Ev>
 8009e0c:	4a03      	ldr	r2, [pc, #12]	; (8009e1c <_ZN17ConsoleTestOutputC1Ev+0x20>)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	601a      	str	r2, [r3, #0]
    }
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	4618      	mov	r0, r3
 8009e16:	3708      	adds	r7, #8
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	0802a304 	.word	0x0802a304

08009e20 <_ZN17ConsoleTestOutputD1Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
    {
 8009e28:	4a05      	ldr	r2, [pc, #20]	; (8009e40 <_ZN17ConsoleTestOutputD1Ev+0x20>)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	601a      	str	r2, [r3, #0]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	4618      	mov	r0, r3
 8009e32:	f007 fdef 	bl	8011a14 <_ZN10TestOutputD1Ev>
    }
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3708      	adds	r7, #8
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	0802a304 	.word	0x0802a304

08009e44 <_ZN17ConsoleTestOutputD0Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b082      	sub	sp, #8
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
    }
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f7ff ffe7 	bl	8009e20 <_ZN17ConsoleTestOutputD1Ev>
 8009e52:	2110      	movs	r1, #16
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f001 fce7 	bl	800b828 <_ZdlPvj>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3708      	adds	r7, #8
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>:
{
    return RunAllTests(ac, (const char *const *) av);
}

int CommandLineTestRunner::RunAllTests(int ac, const char *const *av)
{
 8009e64:	b5b0      	push	{r4, r5, r7, lr}
 8009e66:	b098      	sub	sp, #96	; 0x60
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	6039      	str	r1, [r7, #0]
    int result = 0;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	65fb      	str	r3, [r7, #92]	; 0x5c
    ConsoleTestOutput backupOutput;
 8009e72:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009e76:	4618      	mov	r0, r3
 8009e78:	f7ff ffc0 	bl	8009dfc <_ZN17ConsoleTestOutputC1Ev>

    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8009e7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009e80:	4935      	ldr	r1, [pc, #212]	; (8009f58 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8009e82:	4618      	mov	r0, r3
 8009e84:	f004 f87f 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8009e88:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8009e8c:	f107 0318 	add.w	r3, r7, #24
 8009e90:	2200      	movs	r2, #0
 8009e92:	4618      	mov	r0, r3
 8009e94:	f001 ff6a 	bl	800bd6c <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>
 8009e98:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f004 fc2a 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    memLeakWarn.destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(true);
 8009ea2:	f107 0318 	add.w	r3, r7, #24
 8009ea6:	2101      	movs	r1, #1
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f001 ff2f 	bl	800bd0c <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>
    TestRegistry::getCurrentRegistry()->installPlugin(&memLeakWarn);
 8009eae:	f009 fb21 	bl	80134f4 <_ZN12TestRegistry18getCurrentRegistryEv>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	3234      	adds	r2, #52	; 0x34
 8009eb8:	6812      	ldr	r2, [r2, #0]
 8009eba:	f107 0118 	add.w	r1, r7, #24
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	4790      	blx	r2

    {
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8009ec2:	f009 fb17 	bl	80134f4 <_ZN12TestRegistry18getCurrentRegistryEv>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	f107 0008 	add.w	r0, r7, #8
 8009ecc:	683a      	ldr	r2, [r7, #0]
 8009ece:	6879      	ldr	r1, [r7, #4]
 8009ed0:	f000 f844 	bl	8009f5c <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>
        result = runner.runAllTestsMain();
 8009ed4:	f107 0308 	add.w	r3, r7, #8
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f000 f899 	bl	800a010 <_ZN21CommandLineTestRunner15runAllTestsMainEv>
 8009ede:	65f8      	str	r0, [r7, #92]	; 0x5c
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8009ee0:	f107 0308 	add.w	r3, r7, #8
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f000 f863 	bl	8009fb0 <_ZN21CommandLineTestRunnerD1Ev>
    }

    if (result == 0) {
 8009eea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d10c      	bne.n	8009f0a <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xa6>
        backupOutput << memLeakWarn.FinalReport(0);
 8009ef0:	f107 0318 	add.w	r3, r7, #24
 8009ef4:	2100      	movs	r1, #0
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f002 f83a 	bl	800bf70 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>
 8009efc:	4602      	mov	r2, r0
 8009efe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009f02:	4611      	mov	r1, r2
 8009f04:	4618      	mov	r0, r3
 8009f06:	f007 fe27 	bl	8011b58 <_ZlsR10TestOutputPKc>
    }
    TestRegistry::getCurrentRegistry()->removePluginByName(DEF_PLUGIN_MEM_LEAK);
 8009f0a:	f009 faf3 	bl	80134f4 <_ZN12TestRegistry18getCurrentRegistryEv>
 8009f0e:	4604      	mov	r4, r0
 8009f10:	6823      	ldr	r3, [r4, #0]
 8009f12:	3344      	adds	r3, #68	; 0x44
 8009f14:	681d      	ldr	r5, [r3, #0]
 8009f16:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009f1a:	490f      	ldr	r1, [pc, #60]	; (8009f58 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f004 f832 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8009f22:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009f26:	4619      	mov	r1, r3
 8009f28:	4620      	mov	r0, r4
 8009f2a:	47a8      	blx	r5
 8009f2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009f30:	4618      	mov	r0, r3
 8009f32:	f004 fbe0 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    return result;
 8009f36:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8009f38:	f107 0318 	add.w	r3, r7, #24
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f001 ff4d 	bl	800bddc <_ZN23MemoryLeakWarningPluginD1Ev>
    ConsoleTestOutput backupOutput;
 8009f42:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7ff ff6a 	bl	8009e20 <_ZN17ConsoleTestOutputD1Ev>
    return result;
 8009f4c:	4623      	mov	r3, r4
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3760      	adds	r7, #96	; 0x60
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bdb0      	pop	{r4, r5, r7, pc}
 8009f56:	bf00      	nop
 8009f58:	080259c4 	.word	0x080259c4

08009f5c <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>:

CommandLineTestRunner::CommandLineTestRunner(int ac, const char *const *av, TestRegistry* registry) :
 8009f5c:	b590      	push	{r4, r7, lr}
 8009f5e:	b085      	sub	sp, #20
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	607a      	str	r2, [r7, #4]
 8009f68:	603b      	str	r3, [r7, #0]
    output_(NULLPTR), arguments_(NULLPTR), registry_(registry)
 8009f6a:	4a0f      	ldr	r2, [pc, #60]	; (8009fa8 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x4c>)
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	601a      	str	r2, [r3, #0]
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2200      	movs	r2, #0
 8009f74:	605a      	str	r2, [r3, #4]
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	609a      	str	r2, [r3, #8]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	683a      	ldr	r2, [r7, #0]
 8009f80:	60da      	str	r2, [r3, #12]
{
    arguments_ = new CommandLineArguments(ac, av);
 8009f82:	2241      	movs	r2, #65	; 0x41
 8009f84:	4909      	ldr	r1, [pc, #36]	; (8009fac <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x50>)
 8009f86:	2038      	movs	r0, #56	; 0x38
 8009f88:	f001 fc3a 	bl	800b800 <_ZnwjPKci>
 8009f8c:	4604      	mov	r4, r0
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	68b9      	ldr	r1, [r7, #8]
 8009f92:	4620      	mov	r0, r4
 8009f94:	f00c f84a 	bl	801602c <_ZN20CommandLineArgumentsC1EiPKPKc>
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	609c      	str	r4, [r3, #8]
}
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3714      	adds	r7, #20
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd90      	pop	{r4, r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	08029c90 	.word	0x08029c90
 8009fac:	080259d8 	.word	0x080259d8

08009fb0 <_ZN21CommandLineTestRunnerD1Ev>:

CommandLineTestRunner::~CommandLineTestRunner()
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b082      	sub	sp, #8
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	4a0c      	ldr	r2, [pc, #48]	; (8009fec <_ZN21CommandLineTestRunnerD1Ev+0x3c>)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	601a      	str	r2, [r3, #0]
{
    delete arguments_;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	689b      	ldr	r3, [r3, #8]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d004      	beq.n	8009fd0 <_ZN21CommandLineTestRunnerD1Ev+0x20>
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	3204      	adds	r2, #4
 8009fca:	6812      	ldr	r2, [r2, #0]
 8009fcc:	4618      	mov	r0, r3
 8009fce:	4790      	blx	r2
    delete output_;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d004      	beq.n	8009fe2 <_ZN21CommandLineTestRunnerD1Ev+0x32>
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	3204      	adds	r2, #4
 8009fdc:	6812      	ldr	r2, [r2, #0]
 8009fde:	4618      	mov	r0, r3
 8009fe0:	4790      	blx	r2
}
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3708      	adds	r7, #8
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	08029c90 	.word	0x08029c90

08009ff0 <_ZN21CommandLineTestRunnerD0Ev>:
CommandLineTestRunner::~CommandLineTestRunner()
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
}
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f7ff ffd9 	bl	8009fb0 <_ZN21CommandLineTestRunnerD1Ev>
 8009ffe:	2110      	movs	r1, #16
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f001 fc11 	bl	800b828 <_ZdlPvj>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	4618      	mov	r0, r3
 800a00a:	3708      	adds	r7, #8
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <_ZN21CommandLineTestRunner15runAllTestsMainEv>:

int CommandLineTestRunner::runAllTestsMain()
{
 800a010:	b5b0      	push	{r4, r5, r7, lr}
 800a012:	b08c      	sub	sp, #48	; 0x30
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
    int testResult = 1;
 800a018:	2301      	movs	r3, #1
 800a01a:	62fb      	str	r3, [r7, #44]	; 0x2c

    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 800a01c:	f107 031c 	add.w	r3, r7, #28
 800a020:	4929      	ldr	r1, [pc, #164]	; (800a0c8 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 800a022:	4618      	mov	r0, r3
 800a024:	f003 ffaf 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800a028:	f107 021c 	add.w	r2, r7, #28
 800a02c:	f107 0308 	add.w	r3, r7, #8
 800a030:	4611      	mov	r1, r2
 800a032:	4618      	mov	r0, r3
 800a034:	f008 fe1c 	bl	8012c70 <_ZN16SetPointerPluginC1ERK12SimpleString>
 800a038:	f107 031c 	add.w	r3, r7, #28
 800a03c:	4618      	mov	r0, r3
 800a03e:	f004 fb5a 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    registry_->installPlugin(&pPlugin);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	68da      	ldr	r2, [r3, #12]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	68db      	ldr	r3, [r3, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	3334      	adds	r3, #52	; 0x34
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f107 0108 	add.w	r1, r7, #8
 800a054:	4610      	mov	r0, r2
 800a056:	4798      	blx	r3

    if (parseArguments(registry_->getFirstPlugin()))
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	68da      	ldr	r2, [r3, #12]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	333c      	adds	r3, #60	; 0x3c
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4610      	mov	r0, r2
 800a068:	4798      	blx	r3
 800a06a:	4603      	mov	r3, r0
 800a06c:	4619      	mov	r1, r3
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 fa3e 	bl	800a4f0 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>
 800a074:	4603      	mov	r3, r0
 800a076:	2b00      	cmp	r3, #0
 800a078:	d003      	beq.n	800a082 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0x72>
        testResult = runAllTests();
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 f8ac 	bl	800a1d8 <_ZN21CommandLineTestRunner11runAllTestsEv>
 800a080:	62f8      	str	r0, [r7, #44]	; 0x2c

    registry_->removePluginByName(DEF_PLUGIN_SET_POINTER);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	68dd      	ldr	r5, [r3, #12]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	3344      	adds	r3, #68	; 0x44
 800a08e:	681c      	ldr	r4, [r3, #0]
 800a090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a094:	490c      	ldr	r1, [pc, #48]	; (800a0c8 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 800a096:	4618      	mov	r0, r3
 800a098:	f003 ff75 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800a09c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	4628      	mov	r0, r5
 800a0a4:	47a0      	blx	r4
 800a0a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f004 fb23 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    return testResult;
 800a0b0:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 800a0b2:	f107 0308 	add.w	r3, r7, #8
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f000 faaa 	bl	800a610 <_ZN16SetPointerPluginD1Ev>
    return testResult;
 800a0bc:	4623      	mov	r3, r4
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3730      	adds	r7, #48	; 0x30
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bdb0      	pop	{r4, r5, r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	080259fc 	.word	0x080259fc

0800a0cc <_ZN21CommandLineTestRunner17initializeTestRunEv>:

void CommandLineTestRunner::initializeTestRun()
{
 800a0cc:	b5b0      	push	{r4, r5, r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
    registry_->setGroupFilters(arguments_->getGroupFilters());
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	68dd      	ldr	r5, [r3, #12]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	68db      	ldr	r3, [r3, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	3330      	adds	r3, #48	; 0x30
 800a0e0:	681c      	ldr	r4, [r3, #0]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f00c fce0 	bl	8016aac <_ZNK20CommandLineArguments15getGroupFiltersEv>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	47a0      	blx	r4
    registry_->setNameFilters(arguments_->getNameFilters());
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	68dd      	ldr	r5, [r3, #12]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	68db      	ldr	r3, [r3, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	332c      	adds	r3, #44	; 0x2c
 800a100:	681c      	ldr	r4, [r3, #0]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	689b      	ldr	r3, [r3, #8]
 800a106:	4618      	mov	r0, r3
 800a108:	f00c fcdc 	bl	8016ac4 <_ZNK20CommandLineArguments14getNameFiltersEv>
 800a10c:	4603      	mov	r3, r0
 800a10e:	4619      	mov	r1, r3
 800a110:	4628      	mov	r0, r5
 800a112:	47a0      	blx	r4

    if (arguments_->isVerbose()) output_->verbose(TestOutput::level_verbose);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	689b      	ldr	r3, [r3, #8]
 800a118:	4618      	mov	r0, r3
 800a11a:	f00c fc2b 	bl	8016974 <_ZNK20CommandLineArguments9isVerboseEv>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b00      	cmp	r3, #0
 800a122:	d009      	beq.n	800a138 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x6c>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	685a      	ldr	r2, [r3, #4]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	3320      	adds	r3, #32
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	2101      	movs	r1, #1
 800a134:	4610      	mov	r0, r2
 800a136:	4798      	blx	r3
    if (arguments_->isVeryVerbose()) output_->verbose(TestOutput::level_veryVerbose);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	4618      	mov	r0, r3
 800a13e:	f00c fc25 	bl	801698c <_ZNK20CommandLineArguments13isVeryVerboseEv>
 800a142:	4603      	mov	r3, r0
 800a144:	2b00      	cmp	r3, #0
 800a146:	d009      	beq.n	800a15c <_ZN21CommandLineTestRunner17initializeTestRunEv+0x90>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	685a      	ldr	r2, [r3, #4]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	3320      	adds	r3, #32
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	2102      	movs	r1, #2
 800a158:	4610      	mov	r0, r2
 800a15a:	4798      	blx	r3
    if (arguments_->isColor()) output_->color();
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	689b      	ldr	r3, [r3, #8]
 800a160:	4618      	mov	r0, r3
 800a162:	f00c fc1f 	bl	80169a4 <_ZNK20CommandLineArguments7isColorEv>
 800a166:	4603      	mov	r3, r0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d008      	beq.n	800a17e <_ZN21CommandLineTestRunner17initializeTestRunEv+0xb2>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	685a      	ldr	r2, [r3, #4]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	3324      	adds	r3, #36	; 0x24
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4610      	mov	r0, r2
 800a17c:	4798      	blx	r3
    if (arguments_->runTestsInSeperateProcess()) registry_->setRunTestsInSeperateProcess();
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	4618      	mov	r0, r3
 800a184:	f00c fc4a 	bl	8016a1c <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d008      	beq.n	800a1a0 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xd4>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	68da      	ldr	r2, [r3, #12]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	3360      	adds	r3, #96	; 0x60
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4610      	mov	r0, r2
 800a19e:	4798      	blx	r3
    if (arguments_->isRunIgnored()) registry_->setRunIgnored();
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	689b      	ldr	r3, [r3, #8]
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f00c fc2d 	bl	8016a04 <_ZNK20CommandLineArguments12isRunIgnoredEv>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d004      	beq.n	800a1ba <_ZN21CommandLineTestRunner17initializeTestRunEv+0xee>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f009 fa19 	bl	80135ec <_ZN12TestRegistry13setRunIgnoredEv>
    if (arguments_->isCrashingOnFail()) UtestShell::setCrashOnFail();
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f00c fc50 	bl	8016a64 <_ZNK20CommandLineArguments16isCrashingOnFailEv>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d001      	beq.n	800a1ce <_ZN21CommandLineTestRunner17initializeTestRunEv+0x102>
 800a1ca:	f00b fadb 	bl	8015784 <_ZN10UtestShell14setCrashOnFailEv>
}
 800a1ce:	bf00      	nop
 800a1d0:	3708      	adds	r7, #8
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a1d8 <_ZN21CommandLineTestRunner11runAllTestsEv>:

int CommandLineTestRunner::runAllTests()
{
 800a1d8:	b5b0      	push	{r4, r5, r7, lr}
 800a1da:	b094      	sub	sp, #80	; 0x50
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
    initializeTestRun();
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f7ff ff73 	bl	800a0cc <_ZN21CommandLineTestRunner17initializeTestRunEv>
    size_t loopCount = 0;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t failedTestCount = 0;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t failedExecutionCount = 0;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	647b      	str	r3, [r7, #68]	; 0x44
    size_t repeatCount = arguments_->getRepeatCount();
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f00c fc1c 	bl	8016a34 <_ZNK20CommandLineArguments14getRepeatCountEv>
 800a1fc:	6438      	str	r0, [r7, #64]	; 0x40

    if (arguments_->isListingTestGroupNames())
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	4618      	mov	r0, r3
 800a204:	f00c fbda 	bl	80169bc <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d019      	beq.n	800a242 <_ZN21CommandLineTestRunner11runAllTestsEv+0x6a>
    {
        TestResult tr(*output_);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	685a      	ldr	r2, [r3, #4]
 800a212:	f107 0308 	add.w	r3, r7, #8
 800a216:	4611      	mov	r1, r2
 800a218:	4618      	mov	r0, r3
 800a21a:	f009 fbaf 	bl	801397c <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupNames(tr);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	68da      	ldr	r2, [r3, #12]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	3320      	adds	r3, #32
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f107 0108 	add.w	r1, r7, #8
 800a230:	4610      	mov	r0, r2
 800a232:	4798      	blx	r3
        return 0;
 800a234:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800a236:	f107 0308 	add.w	r3, r7, #8
 800a23a:	4618      	mov	r0, r3
 800a23c:	f009 fbd6 	bl	80139ec <_ZN10TestResultD1Ev>
 800a240:	e0e1      	b.n	800a406 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestGroupAndCaseNames())
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	4618      	mov	r0, r3
 800a248:	f00c fbc4 	bl	80169d4 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d019      	beq.n	800a286 <_ZN21CommandLineTestRunner11runAllTestsEv+0xae>
    {
        TestResult tr(*output_);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	685a      	ldr	r2, [r3, #4]
 800a256:	f107 0308 	add.w	r3, r7, #8
 800a25a:	4611      	mov	r1, r2
 800a25c:	4618      	mov	r0, r3
 800a25e:	f009 fb8d 	bl	801397c <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupAndCaseNames(tr);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	68da      	ldr	r2, [r3, #12]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	3324      	adds	r3, #36	; 0x24
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f107 0108 	add.w	r1, r7, #8
 800a274:	4610      	mov	r0, r2
 800a276:	4798      	blx	r3
        return 0;
 800a278:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800a27a:	f107 0308 	add.w	r3, r7, #8
 800a27e:	4618      	mov	r0, r3
 800a280:	f009 fbb4 	bl	80139ec <_ZN10TestResultD1Ev>
 800a284:	e0bf      	b.n	800a406 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestLocations())
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	689b      	ldr	r3, [r3, #8]
 800a28a:	4618      	mov	r0, r3
 800a28c:	f00c fbae 	bl	80169ec <_ZNK20CommandLineArguments22isListingTestLocationsEv>
 800a290:	4603      	mov	r3, r0
 800a292:	2b00      	cmp	r3, #0
 800a294:	d019      	beq.n	800a2ca <_ZN21CommandLineTestRunner11runAllTestsEv+0xf2>
    {
        TestResult tr(*output_);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	685a      	ldr	r2, [r3, #4]
 800a29a:	f107 0308 	add.w	r3, r7, #8
 800a29e:	4611      	mov	r1, r2
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f009 fb6b 	bl	801397c <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestLocations(tr);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	68da      	ldr	r2, [r3, #12]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	68db      	ldr	r3, [r3, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	3328      	adds	r3, #40	; 0x28
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f107 0108 	add.w	r1, r7, #8
 800a2b8:	4610      	mov	r0, r2
 800a2ba:	4798      	blx	r3
        return 0;
 800a2bc:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800a2be:	f107 0308 	add.w	r3, r7, #8
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f009 fb92 	bl	80139ec <_ZN10TestResultD1Ev>
 800a2c8:	e09d      	b.n	800a406 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isReversing())
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	689b      	ldr	r3, [r3, #8]
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f00c fbbc 	bl	8016a4c <_ZNK20CommandLineArguments11isReversingEv>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d008      	beq.n	800a2ec <_ZN21CommandLineTestRunner11runAllTestsEv+0x114>
        registry_->reverseTests();
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	68da      	ldr	r2, [r3, #12]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	68db      	ldr	r3, [r3, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	331c      	adds	r3, #28
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4610      	mov	r0, r2
 800a2ea:	4798      	blx	r3

    if (arguments_->isShuffling())
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f00c fbc3 	bl	8016a7c <_ZNK20CommandLineArguments11isShufflingEv>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d023      	beq.n	800a344 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
    {
        output_->print("Test order shuffling enabled with seed: ");
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	685a      	ldr	r2, [r3, #4]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	332c      	adds	r3, #44	; 0x2c
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4941      	ldr	r1, [pc, #260]	; (800a410 <_ZN21CommandLineTestRunner11runAllTestsEv+0x238>)
 800a30c:	4610      	mov	r0, r2
 800a30e:	4798      	blx	r3
        output_->print(arguments_->getShuffleSeed());
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	685d      	ldr	r5, [r3, #4]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	3334      	adds	r3, #52	; 0x34
 800a31c:	681c      	ldr	r4, [r3, #0]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	689b      	ldr	r3, [r3, #8]
 800a322:	4618      	mov	r0, r3
 800a324:	f00c fbb6 	bl	8016a94 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 800a328:	4603      	mov	r3, r0
 800a32a:	4619      	mov	r1, r3
 800a32c:	4628      	mov	r0, r5
 800a32e:	47a0      	blx	r4
        output_->print("\n");
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	685a      	ldr	r2, [r3, #4]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	332c      	adds	r3, #44	; 0x2c
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4935      	ldr	r1, [pc, #212]	; (800a414 <_ZN21CommandLineTestRunner11runAllTestsEv+0x23c>)
 800a340:	4610      	mov	r0, r2
 800a342:	4798      	blx	r3
    }
    while (loopCount++ < repeatCount) {
 800a344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a346:	1c5a      	adds	r2, r3, #1
 800a348:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a34a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a34c:	429a      	cmp	r2, r3
 800a34e:	bf8c      	ite	hi
 800a350:	2301      	movhi	r3, #1
 800a352:	2300      	movls	r3, #0
 800a354:	b2db      	uxtb	r3, r3
 800a356:	2b00      	cmp	r3, #0
 800a358:	d04e      	beq.n	800a3f8 <_ZN21CommandLineTestRunner11runAllTestsEv+0x220>

        if (arguments_->isShuffling())
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	689b      	ldr	r3, [r3, #8]
 800a35e:	4618      	mov	r0, r3
 800a360:	f00c fb8c 	bl	8016a7c <_ZNK20CommandLineArguments11isShufflingEv>
 800a364:	4603      	mov	r3, r0
 800a366:	2b00      	cmp	r3, #0
 800a368:	d00f      	beq.n	800a38a <_ZN21CommandLineTestRunner11runAllTestsEv+0x1b2>
            registry_->shuffleTests(arguments_->getShuffleSeed());
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	68dd      	ldr	r5, [r3, #12]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	3318      	adds	r3, #24
 800a376:	681c      	ldr	r4, [r3, #0]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	4618      	mov	r0, r3
 800a37e:	f00c fb89 	bl	8016a94 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 800a382:	4603      	mov	r3, r0
 800a384:	4619      	mov	r1, r3
 800a386:	4628      	mov	r0, r5
 800a388:	47a0      	blx	r4

        output_->printTestRun(loopCount, repeatCount);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6858      	ldr	r0, [r3, #4]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	3340      	adds	r3, #64	; 0x40
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a39a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a39c:	4798      	blx	r3
        TestResult tr(*output_);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	685a      	ldr	r2, [r3, #4]
 800a3a2:	f107 0308 	add.w	r3, r7, #8
 800a3a6:	4611      	mov	r1, r2
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f009 fae7 	bl	801397c <_ZN10TestResultC1ER10TestOutput>
        registry_->runAllTests(tr);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	68da      	ldr	r2, [r3, #12]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	68db      	ldr	r3, [r3, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	3314      	adds	r3, #20
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f107 0108 	add.w	r1, r7, #8
 800a3c0:	4610      	mov	r0, r2
 800a3c2:	4798      	blx	r3
        failedTestCount += tr.getFailureCount();
 800a3c4:	f107 0308 	add.w	r3, r7, #8
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f7ff fcef 	bl	8009dac <_ZNK10TestResult15getFailureCountEv>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3d2:	4413      	add	r3, r2
 800a3d4:	64bb      	str	r3, [r7, #72]	; 0x48
        if (tr.isFailure()) {
 800a3d6:	f107 0308 	add.w	r3, r7, #8
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7ff fcf2 	bl	8009dc4 <_ZNK10TestResult9isFailureEv>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d002      	beq.n	800a3ec <_ZN21CommandLineTestRunner11runAllTestsEv+0x214>
            failedExecutionCount++;
 800a3e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	647b      	str	r3, [r7, #68]	; 0x44
        TestResult tr(*output_);
 800a3ec:	f107 0308 	add.w	r3, r7, #8
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f009 fafb 	bl	80139ec <_ZN10TestResultD1Ev>
    while (loopCount++ < repeatCount) {
 800a3f6:	e7a5      	b.n	800a344 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
        }
    }
    return (int) (failedTestCount != 0 ? failedTestCount : failedExecutionCount);
 800a3f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d001      	beq.n	800a402 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22a>
 800a3fe:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800a400:	e000      	b.n	800a404 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22c>
 800a402:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800a404:	bf00      	nop
 800a406:	4623      	mov	r3, r4
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3750      	adds	r7, #80	; 0x50
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bdb0      	pop	{r4, r5, r7, pc}
 800a410:	08025a10 	.word	0x08025a10
 800a414:	08025a3c 	.word	0x08025a3c

0800a418 <_ZN21CommandLineTestRunner20createTeamCityOutputEv>:

TestOutput* CommandLineTestRunner::createTeamCityOutput()
{
 800a418:	b590      	push	{r4, r7, lr}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
    return new TeamCityTestOutput;
 800a420:	229d      	movs	r2, #157	; 0x9d
 800a422:	4906      	ldr	r1, [pc, #24]	; (800a43c <_ZN21CommandLineTestRunner20createTeamCityOutputEv+0x24>)
 800a424:	201c      	movs	r0, #28
 800a426:	f001 f9eb 	bl	800b800 <_ZnwjPKci>
 800a42a:	4604      	mov	r4, r0
 800a42c:	4620      	mov	r0, r4
 800a42e:	f005 f955 	bl	800f6dc <_ZN18TeamCityTestOutputC1Ev>
 800a432:	4623      	mov	r3, r4
}
 800a434:	4618      	mov	r0, r3
 800a436:	370c      	adds	r7, #12
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd90      	pop	{r4, r7, pc}
 800a43c:	080259d8 	.word	0x080259d8

0800a440 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString>:

TestOutput* CommandLineTestRunner::createJUnitOutput(const SimpleString& packageName)
{
 800a440:	b590      	push	{r4, r7, lr}
 800a442:	b085      	sub	sp, #20
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	6039      	str	r1, [r7, #0]
    JUnitTestOutput* junitOutput = new JUnitTestOutput;
 800a44a:	22a2      	movs	r2, #162	; 0xa2
 800a44c:	490a      	ldr	r1, [pc, #40]	; (800a478 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x38>)
 800a44e:	2014      	movs	r0, #20
 800a450:	f001 f9d6 	bl	800b800 <_ZnwjPKci>
 800a454:	4604      	mov	r4, r0
 800a456:	4620      	mov	r0, r4
 800a458:	f000 f980 	bl	800a75c <_ZN15JUnitTestOutputC1Ev>
 800a45c:	60fc      	str	r4, [r7, #12]
    if (junitOutput != NULLPTR) {
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d003      	beq.n	800a46c <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x2c>
      junitOutput->setPackageName(packageName);
 800a464:	6839      	ldr	r1, [r7, #0]
 800a466:	68f8      	ldr	r0, [r7, #12]
 800a468:	f000 fbb2 	bl	800abd0 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>
    }
    return junitOutput;
 800a46c:	68fb      	ldr	r3, [r7, #12]
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3714      	adds	r7, #20
 800a472:	46bd      	mov	sp, r7
 800a474:	bd90      	pop	{r4, r7, pc}
 800a476:	bf00      	nop
 800a478:	080259d8 	.word	0x080259d8

0800a47c <_ZN21CommandLineTestRunner19createConsoleOutputEv>:

TestOutput* CommandLineTestRunner::createConsoleOutput()
{
 800a47c:	b590      	push	{r4, r7, lr}
 800a47e:	b083      	sub	sp, #12
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
    return new ConsoleTestOutput;
 800a484:	22ab      	movs	r2, #171	; 0xab
 800a486:	4906      	ldr	r1, [pc, #24]	; (800a4a0 <_ZN21CommandLineTestRunner19createConsoleOutputEv+0x24>)
 800a488:	2010      	movs	r0, #16
 800a48a:	f001 f9b9 	bl	800b800 <_ZnwjPKci>
 800a48e:	4604      	mov	r4, r0
 800a490:	4620      	mov	r0, r4
 800a492:	f7ff fcb3 	bl	8009dfc <_ZN17ConsoleTestOutputC1Ev>
 800a496:	4623      	mov	r3, r4
}
 800a498:	4618      	mov	r0, r3
 800a49a:	370c      	adds	r7, #12
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd90      	pop	{r4, r7, pc}
 800a4a0:	080259d8 	.word	0x080259d8

0800a4a4 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_>:

TestOutput* CommandLineTestRunner::createCompositeOutput(TestOutput* outputOne, TestOutput* outputTwo)
{
 800a4a4:	b590      	push	{r4, r7, lr}
 800a4a6:	b087      	sub	sp, #28
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	60f8      	str	r0, [r7, #12]
 800a4ac:	60b9      	str	r1, [r7, #8]
 800a4ae:	607a      	str	r2, [r7, #4]
  CompositeTestOutput* composite = new CompositeTestOutput;
 800a4b0:	22b0      	movs	r2, #176	; 0xb0
 800a4b2:	490e      	ldr	r1, [pc, #56]	; (800a4ec <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_+0x48>)
 800a4b4:	2018      	movs	r0, #24
 800a4b6:	f001 f9a3 	bl	800b800 <_ZnwjPKci>
 800a4ba:	4604      	mov	r4, r0
 800a4bc:	4620      	mov	r0, r4
 800a4be:	f007 ff83 	bl	80123c8 <_ZN19CompositeTestOutputC1Ev>
 800a4c2:	617c      	str	r4, [r7, #20]
  composite->setOutputOne(outputOne);
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	335c      	adds	r3, #92	; 0x5c
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	68b9      	ldr	r1, [r7, #8]
 800a4ce:	6978      	ldr	r0, [r7, #20]
 800a4d0:	4798      	blx	r3
  composite->setOutputTwo(outputTwo);
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	3360      	adds	r3, #96	; 0x60
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	6879      	ldr	r1, [r7, #4]
 800a4dc:	6978      	ldr	r0, [r7, #20]
 800a4de:	4798      	blx	r3
  return composite;
 800a4e0:	697b      	ldr	r3, [r7, #20]
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	371c      	adds	r7, #28
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd90      	pop	{r4, r7, pc}
 800a4ea:	bf00      	nop
 800a4ec:	080259d8 	.word	0x080259d8

0800a4f0 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>:

bool CommandLineTestRunner::parseArguments(TestPlugin* plugin)
{
 800a4f0:	b5b0      	push	{r4, r5, r7, lr}
 800a4f2:	b082      	sub	sp, #8
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
  if (!arguments_->parse(plugin)) {
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	689b      	ldr	r3, [r3, #8]
 800a4fe:	6839      	ldr	r1, [r7, #0]
 800a500:	4618      	mov	r0, r3
 800a502:	f00b fe4f 	bl	80161a4 <_ZN20CommandLineArguments5parseEP10TestPlugin>
 800a506:	4603      	mov	r3, r0
 800a508:	f083 0301 	eor.w	r3, r3, #1
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d029      	beq.n	800a566 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x76>
    output_ = createConsoleOutput();
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	3310      	adds	r3, #16
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	4798      	blx	r3
 800a51e:	4602      	mov	r2, r0
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	605a      	str	r2, [r3, #4]
    output_->print((arguments_->needHelp()) ? arguments_->help() : arguments_->usage());
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	685d      	ldr	r5, [r3, #4]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	332c      	adds	r3, #44	; 0x2c
 800a530:	681c      	ldr	r4, [r3, #0]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	689b      	ldr	r3, [r3, #8]
 800a536:	4618      	mov	r0, r3
 800a538:	f00c fa10 	bl	801695c <_ZNK20CommandLineArguments8needHelpEv>
 800a53c:	4603      	mov	r3, r0
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d006      	beq.n	800a550 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x60>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	4618      	mov	r0, r3
 800a548:	f00c f9fa 	bl	8016940 <_ZNK20CommandLineArguments4helpEv>
 800a54c:	4603      	mov	r3, r0
 800a54e:	e005      	b.n	800a55c <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x6c>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	689b      	ldr	r3, [r3, #8]
 800a554:	4618      	mov	r0, r3
 800a556:	f00c f9e5 	bl	8016924 <_ZNK20CommandLineArguments5usageEv>
 800a55a:	4603      	mov	r3, r0
 800a55c:	4619      	mov	r1, r3
 800a55e:	4628      	mov	r0, r5
 800a560:	47a0      	blx	r4
    return false;
 800a562:	2300      	movs	r3, #0
 800a564:	e050      	b.n	800a608 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x118>
  }

  if (arguments_->isJUnitOutput()) {
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	689b      	ldr	r3, [r3, #8]
 800a56a:	4618      	mov	r0, r3
 800a56c:	f00d f84c 	bl	8017608 <_ZNK20CommandLineArguments13isJUnitOutputEv>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d02c      	beq.n	800a5d0 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0xe0>
    output_= createJUnitOutput(arguments_->getPackageName());
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	330c      	adds	r3, #12
 800a57c:	681c      	ldr	r4, [r3, #0]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	4618      	mov	r0, r3
 800a584:	f00d f864 	bl	8017650 <_ZNK20CommandLineArguments14getPackageNameEv>
 800a588:	4603      	mov	r3, r0
 800a58a:	4619      	mov	r1, r3
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	47a0      	blx	r4
 800a590:	4602      	mov	r2, r0
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	605a      	str	r2, [r3, #4]
    if (arguments_->isVerbose())
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	689b      	ldr	r3, [r3, #8]
 800a59a:	4618      	mov	r0, r3
 800a59c:	f00c f9ea 	bl	8016974 <_ZNK20CommandLineArguments9isVerboseEv>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d02f      	beq.n	800a606 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
      output_ = createCompositeOutput(output_, createConsoleOutput());
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	3314      	adds	r3, #20
 800a5ac:	681c      	ldr	r4, [r3, #0]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	685d      	ldr	r5, [r3, #4]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	3310      	adds	r3, #16
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	4798      	blx	r3
 800a5be:	4603      	mov	r3, r0
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	4629      	mov	r1, r5
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	47a0      	blx	r4
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	605a      	str	r2, [r3, #4]
 800a5ce:	e01a      	b.n	800a606 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else if (arguments_->isTeamCityOutput()) {
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	689b      	ldr	r3, [r3, #8]
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f00d f829 	bl	801762c <_ZNK20CommandLineArguments16isTeamCityOutputEv>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d009      	beq.n	800a5f4 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x104>
    output_ = createTeamCityOutput();
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	3308      	adds	r3, #8
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	4798      	blx	r3
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	605a      	str	r2, [r3, #4]
 800a5f2:	e008      	b.n	800a606 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else
    output_ = createConsoleOutput();
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	3310      	adds	r3, #16
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	4798      	blx	r3
 800a600:	4602      	mov	r2, r0
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	605a      	str	r2, [r3, #4]
  return true;
 800a606:	2301      	movs	r3, #1
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3708      	adds	r7, #8
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bdb0      	pop	{r4, r5, r7, pc}

0800a610 <_ZN16SetPointerPluginD1Ev>:
//
///////////////////////////////////////////////////////////////////////////////

extern void CppUTestStore(void **location);

class SetPointerPlugin: public TestPlugin
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	4a05      	ldr	r2, [pc, #20]	; (800a630 <_ZN16SetPointerPluginD1Ev+0x20>)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	601a      	str	r2, [r3, #0]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	4618      	mov	r0, r3
 800a622:	f008 f9e7 	bl	80129f4 <_ZN10TestPluginD1Ev>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	4618      	mov	r0, r3
 800a62a:	3708      	adds	r7, #8
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}
 800a630:	0802a410 	.word	0x0802a410

0800a634 <_ZN16SetPointerPluginD0Ev>:
 800a634:	b580      	push	{r7, lr}
 800a636:	b082      	sub	sp, #8
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f7ff ffe7 	bl	800a610 <_ZN16SetPointerPluginD1Ev>
 800a642:	2114      	movs	r1, #20
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f001 f8ef 	bl	800b828 <_ZdlPvj>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	4618      	mov	r0, r3
 800a64e:	3708      	adds	r7, #8
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <_ZNK10TestResult13getCheckCountEv>:
    size_t getCheckCount() const
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
        return checkCount_;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	691b      	ldr	r3, [r3, #16]
    }
 800a660:	4618      	mov	r0, r3
 800a662:	370c      	adds	r7, #12
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr

0800a66c <_ZN23JUnitTestCaseResultNodeC1Ev>:
#include "CppUTest/TestFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

struct JUnitTestCaseResultNode
{
    JUnitTestCaseResultNode() :
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b082      	sub	sp, #8
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
        execTime_(0), failure_(NULLPTR), ignored_(false), lineNumber_ (0), checkCount_ (0), next_(NULLPTR)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	4910      	ldr	r1, [pc, #64]	; (800a6b8 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 800a678:	4618      	mov	r0, r3
 800a67a:	f003 fc84 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2200      	movs	r2, #0
 800a682:	609a      	str	r2, [r3, #8]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	60da      	str	r2, [r3, #12]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2200      	movs	r2, #0
 800a68e:	741a      	strb	r2, [r3, #16]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	3314      	adds	r3, #20
 800a694:	4908      	ldr	r1, [pc, #32]	; (800a6b8 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 800a696:	4618      	mov	r0, r3
 800a698:	f003 fc75 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	61da      	str	r2, [r3, #28]
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	621a      	str	r2, [r3, #32]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3708      	adds	r7, #8
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}
 800a6b8:	08025a40 	.word	0x08025a40

0800a6bc <_ZN20JUnitTestGroupResultC1Ev>:
    JUnitTestCaseResultNode* next_;
};

struct JUnitTestGroupResult
{
    JUnitTestGroupResult() :
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b082      	sub	sp, #8
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
        testCount_(0), failureCount_(0), totalCheckCount_(0), startTime_(0), groupExecTime_(0), head_(NULLPTR), tail_(NULLPTR)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	601a      	str	r2, [r3, #0]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	605a      	str	r2, [r3, #4]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	609a      	str	r2, [r3, #8]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	60da      	str	r2, [r3, #12]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	611a      	str	r2, [r3, #16]
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	3314      	adds	r3, #20
 800a6e6:	4907      	ldr	r1, [pc, #28]	; (800a704 <_ZN20JUnitTestGroupResultC1Ev+0x48>)
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f003 fc4c 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	61da      	str	r2, [r3, #28]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	621a      	str	r2, [r3, #32]
    {
    }
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3708      	adds	r7, #8
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}
 800a704:	08025a40 	.word	0x08025a40

0800a708 <_ZN20JUnitTestGroupResultD1Ev>:
struct JUnitTestGroupResult
 800a708:	b580      	push	{r7, lr}
 800a70a:	b082      	sub	sp, #8
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	3314      	adds	r3, #20
 800a714:	4618      	mov	r0, r3
 800a716:	f003 ffee 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	4618      	mov	r0, r3
 800a71e:	3708      	adds	r7, #8
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <_ZN19JUnitTestOutputImplC1Ev>:
    SimpleString group_;
    JUnitTestCaseResultNode* head_;
    JUnitTestCaseResultNode* tail_;
};

struct JUnitTestOutputImpl
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	4618      	mov	r0, r3
 800a730:	f7ff ffc4 	bl	800a6bc <_ZN20JUnitTestGroupResultC1Ev>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	3328      	adds	r3, #40	; 0x28
 800a738:	4907      	ldr	r1, [pc, #28]	; (800a758 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 800a73a:	4618      	mov	r0, r3
 800a73c:	f003 fc23 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	3330      	adds	r3, #48	; 0x30
 800a744:	4904      	ldr	r1, [pc, #16]	; (800a758 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 800a746:	4618      	mov	r0, r3
 800a748:	f003 fc1d 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	4618      	mov	r0, r3
 800a750:	3708      	adds	r7, #8
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	08025a40 	.word	0x08025a40

0800a75c <_ZN15JUnitTestOutputC1Ev>:
    PlatformSpecificFile file_;
    SimpleString package_;
    SimpleString stdOutput_;
};

JUnitTestOutput::JUnitTestOutput() :
 800a75c:	b590      	push	{r4, r7, lr}
 800a75e:	b083      	sub	sp, #12
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
    impl_(new JUnitTestOutputImpl)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	4618      	mov	r0, r3
 800a768:	f007 f936 	bl	80119d8 <_ZN10TestOutputC1Ev>
 800a76c:	4a09      	ldr	r2, [pc, #36]	; (800a794 <_ZN15JUnitTestOutputC1Ev+0x38>)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	601a      	str	r2, [r3, #0]
 800a772:	224d      	movs	r2, #77	; 0x4d
 800a774:	4908      	ldr	r1, [pc, #32]	; (800a798 <_ZN15JUnitTestOutputC1Ev+0x3c>)
 800a776:	2038      	movs	r0, #56	; 0x38
 800a778:	f001 f842 	bl	800b800 <_ZnwjPKci>
 800a77c:	4604      	mov	r4, r0
 800a77e:	4620      	mov	r0, r4
 800a780:	f7ff ffd0 	bl	800a724 <_ZN19JUnitTestOutputImplC1Ev>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	611c      	str	r4, [r3, #16]
{
}
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	4618      	mov	r0, r3
 800a78c:	370c      	adds	r7, #12
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd90      	pop	{r4, r7, pc}
 800a792:	bf00      	nop
 800a794:	08029cb0 	.word	0x08029cb0
 800a798:	08025a44 	.word	0x08025a44

0800a79c <_ZN19JUnitTestOutputImplD1Ev>:
struct JUnitTestOutputImpl
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b082      	sub	sp, #8
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	3330      	adds	r3, #48	; 0x30
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f003 ffa4 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	3328      	adds	r3, #40	; 0x28
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f003 ff9f 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f7ff ffa4 	bl	800a708 <_ZN20JUnitTestGroupResultD1Ev>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3708      	adds	r7, #8
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
	...

0800a7cc <_ZN15JUnitTestOutputD1Ev>:

JUnitTestOutput::~JUnitTestOutput()
 800a7cc:	b590      	push	{r4, r7, lr}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	4a0c      	ldr	r2, [pc, #48]	; (800a808 <_ZN15JUnitTestOutputD1Ev+0x3c>)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	601a      	str	r2, [r3, #0]
{
    resetTestGroupResult();
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f000 f838 	bl	800a850 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
    delete impl_;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	691c      	ldr	r4, [r3, #16]
 800a7e4:	2c00      	cmp	r4, #0
 800a7e6:	d006      	beq.n	800a7f6 <_ZN15JUnitTestOutputD1Ev+0x2a>
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	f7ff ffd7 	bl	800a79c <_ZN19JUnitTestOutputImplD1Ev>
 800a7ee:	2138      	movs	r1, #56	; 0x38
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	f001 f819 	bl	800b828 <_ZdlPvj>
JUnitTestOutput::~JUnitTestOutput()
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f007 f90b 	bl	8011a14 <_ZN10TestOutputD1Ev>
}
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	4618      	mov	r0, r3
 800a802:	370c      	adds	r7, #12
 800a804:	46bd      	mov	sp, r7
 800a806:	bd90      	pop	{r4, r7, pc}
 800a808:	08029cb0 	.word	0x08029cb0

0800a80c <_ZN15JUnitTestOutputD0Ev>:
JUnitTestOutput::~JUnitTestOutput()
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
}
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f7ff ffd9 	bl	800a7cc <_ZN15JUnitTestOutputD1Ev>
 800a81a:	2114      	movs	r1, #20
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f001 f803 	bl	800b828 <_ZdlPvj>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4618      	mov	r0, r3
 800a826:	3708      	adds	r7, #8
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <_ZN23JUnitTestCaseResultNodeD1Ev>:
struct JUnitTestCaseResultNode
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	3314      	adds	r3, #20
 800a838:	4618      	mov	r0, r3
 800a83a:	f003 ff5c 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	4618      	mov	r0, r3
 800a842:	f003 ff58 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	4618      	mov	r0, r3
 800a84a:	3708      	adds	r7, #8
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}

0800a850 <_ZN15JUnitTestOutput20resetTestGroupResultEv>:

void JUnitTestOutput::resetTestGroupResult()
{
 800a850:	b590      	push	{r4, r7, lr}
 800a852:	b087      	sub	sp, #28
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
    impl_->results_.testCount_ = 0;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	691b      	ldr	r3, [r3, #16]
 800a85c:	2200      	movs	r2, #0
 800a85e:	601a      	str	r2, [r3, #0]
    impl_->results_.failureCount_ = 0;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	691b      	ldr	r3, [r3, #16]
 800a864:	2200      	movs	r2, #0
 800a866:	605a      	str	r2, [r3, #4]
    impl_->results_.group_ = "";
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	691b      	ldr	r3, [r3, #16]
 800a86c:	f103 0414 	add.w	r4, r3, #20
 800a870:	f107 0308 	add.w	r3, r7, #8
 800a874:	491d      	ldr	r1, [pc, #116]	; (800a8ec <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x9c>)
 800a876:	4618      	mov	r0, r3
 800a878:	f003 fb85 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800a87c:	f107 0308 	add.w	r3, r7, #8
 800a880:	4619      	mov	r1, r3
 800a882:	4620      	mov	r0, r4
 800a884:	f003 fbeb 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 800a888:	f107 0308 	add.w	r3, r7, #8
 800a88c:	4618      	mov	r0, r3
 800a88e:	f003 ff32 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	691b      	ldr	r3, [r3, #16]
 800a896:	69db      	ldr	r3, [r3, #28]
 800a898:	617b      	str	r3, [r7, #20]
    while (cur) {
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d018      	beq.n	800a8d2 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x82>
        JUnitTestCaseResultNode* tmp = cur->next_;
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a4:	613b      	str	r3, [r7, #16]
        delete cur->failure_;
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	68db      	ldr	r3, [r3, #12]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d004      	beq.n	800a8b8 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x68>
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	3204      	adds	r2, #4
 800a8b2:	6812      	ldr	r2, [r2, #0]
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	4790      	blx	r2
        delete cur;
 800a8b8:	697c      	ldr	r4, [r7, #20]
 800a8ba:	2c00      	cmp	r4, #0
 800a8bc:	d006      	beq.n	800a8cc <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x7c>
 800a8be:	4620      	mov	r0, r4
 800a8c0:	f7ff ffb4 	bl	800a82c <_ZN23JUnitTestCaseResultNodeD1Ev>
 800a8c4:	2128      	movs	r1, #40	; 0x28
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	f000 ffae 	bl	800b828 <_ZdlPvj>
        cur = tmp;
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	617b      	str	r3, [r7, #20]
    while (cur) {
 800a8d0:	e7e3      	b.n	800a89a <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x4a>
    }
    impl_->results_.head_ = NULLPTR;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	691b      	ldr	r3, [r3, #16]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	61da      	str	r2, [r3, #28]
    impl_->results_.tail_ = NULLPTR;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	691b      	ldr	r3, [r3, #16]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	621a      	str	r2, [r3, #32]
}
 800a8e2:	bf00      	nop
 800a8e4:	371c      	adds	r7, #28
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd90      	pop	{r4, r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	08025a40 	.word	0x08025a40

0800a8f0 <_ZN15JUnitTestOutput17printTestsStartedEv>:

void JUnitTestOutput::printTestsStarted()
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b083      	sub	sp, #12
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
}
 800a8f8:	bf00      	nop
 800a8fa:	370c      	adds	r7, #12
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr

0800a904 <_ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 800a904:	b480      	push	{r7}
 800a906:	b083      	sub	sp, #12
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	6039      	str	r1, [r7, #0]
}
 800a90e:	bf00      	nop
 800a910:	370c      	adds	r7, #12
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr

0800a91a <_ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult>:

void JUnitTestOutput::printCurrentTestEnded(const TestResult& result)
{
 800a91a:	b590      	push	{r4, r7, lr}
 800a91c:	b083      	sub	sp, #12
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
 800a922:	6039      	str	r1, [r7, #0]
    impl_->results_.tail_->execTime_ = result.getCurrentTestTotalExecutionTime();
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	691b      	ldr	r3, [r3, #16]
 800a928:	6a1c      	ldr	r4, [r3, #32]
 800a92a:	6838      	ldr	r0, [r7, #0]
 800a92c:	f009 f9c6 	bl	8013cbc <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800a930:	4603      	mov	r3, r0
 800a932:	60a3      	str	r3, [r4, #8]
    impl_->results_.tail_->checkCount_ = result.getCheckCount();
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	691b      	ldr	r3, [r3, #16]
 800a938:	6a1c      	ldr	r4, [r3, #32]
 800a93a:	6838      	ldr	r0, [r7, #0]
 800a93c:	f7ff fe8a 	bl	800a654 <_ZNK10TestResult13getCheckCountEv>
 800a940:	4603      	mov	r3, r0
 800a942:	6223      	str	r3, [r4, #32]
}
 800a944:	bf00      	nop
 800a946:	370c      	adds	r7, #12
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd90      	pop	{r4, r7, pc}

0800a94c <_ZN15JUnitTestOutput15printTestsEndedERK10TestResult>:

void JUnitTestOutput::printTestsEnded(const TestResult& /*result*/)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b083      	sub	sp, #12
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	6039      	str	r1, [r7, #0]
}
 800a956:	bf00      	nop
 800a958:	370c      	adds	r7, #12
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr

0800a962 <_ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult>:

void JUnitTestOutput::printCurrentGroupEnded(const TestResult& result)
{
 800a962:	b590      	push	{r4, r7, lr}
 800a964:	b083      	sub	sp, #12
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
 800a96a:	6039      	str	r1, [r7, #0]
    impl_->results_.groupExecTime_ = result.getCurrentGroupTotalExecutionTime();
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	691c      	ldr	r4, [r3, #16]
 800a970:	6838      	ldr	r0, [r7, #0]
 800a972:	f009 f9af 	bl	8013cd4 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>
 800a976:	4603      	mov	r3, r0
 800a978:	6123      	str	r3, [r4, #16]
    writeTestGroupToFile();
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	3364      	adds	r3, #100	; 0x64
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	4798      	blx	r3
    resetTestGroupResult();
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f7ff ff62 	bl	800a850 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
}
 800a98c:	bf00      	nop
 800a98e:	370c      	adds	r7, #12
 800a990:	46bd      	mov	sp, r7
 800a992:	bd90      	pop	{r4, r7, pc}

0800a994 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800a994:	b590      	push	{r4, r7, lr}
 800a996:	b089      	sub	sp, #36	; 0x24
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	6039      	str	r1, [r7, #0]
    impl_->results_.testCount_++;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	681a      	ldr	r2, [r3, #0]
 800a9a4:	3201      	adds	r2, #1
 800a9a6:	601a      	str	r2, [r3, #0]
    impl_->results_.group_ = test.getGroup();
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	691b      	ldr	r3, [r3, #16]
 800a9ac:	f103 0414 	add.w	r4, r3, #20
 800a9b0:	f107 0308 	add.w	r3, r7, #8
 800a9b4:	6839      	ldr	r1, [r7, #0]
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f009 fcef 	bl	801439a <_ZNK10UtestShell8getGroupEv>
 800a9bc:	f107 0308 	add.w	r3, r7, #8
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	f003 fb4b 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 800a9c8:	f107 0308 	add.w	r3, r7, #8
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f003 fe92 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    impl_->results_.startTime_ = (size_t) GetPlatformSpecificTimeInMillis();
 800a9d2:	4b3c      	ldr	r3, [pc, #240]	; (800aac4 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x130>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4798      	blx	r3
 800a9d8:	4602      	mov	r2, r0
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	691b      	ldr	r3, [r3, #16]
 800a9de:	60da      	str	r2, [r3, #12]

    if (impl_->results_.tail_ == NULLPTR) {
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	691b      	ldr	r3, [r3, #16]
 800a9e4:	6a1b      	ldr	r3, [r3, #32]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d110      	bne.n	800aa0c <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x78>
        impl_->results_.head_ = impl_->results_.tail_
                = new JUnitTestCaseResultNode;
 800a9ea:	2288      	movs	r2, #136	; 0x88
 800a9ec:	4936      	ldr	r1, [pc, #216]	; (800aac8 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 800a9ee:	2028      	movs	r0, #40	; 0x28
 800a9f0:	f000 ff06 	bl	800b800 <_ZnwjPKci>
 800a9f4:	4604      	mov	r4, r0
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	f7ff fe38 	bl	800a66c <_ZN23JUnitTestCaseResultNodeC1Ev>
        impl_->results_.head_ = impl_->results_.tail_
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	691b      	ldr	r3, [r3, #16]
                = new JUnitTestCaseResultNode;
 800aa00:	621c      	str	r4, [r3, #32]
        impl_->results_.head_ = impl_->results_.tail_
 800aa02:	687a      	ldr	r2, [r7, #4]
 800aa04:	6912      	ldr	r2, [r2, #16]
 800aa06:	6a1b      	ldr	r3, [r3, #32]
 800aa08:	61d3      	str	r3, [r2, #28]
 800aa0a:	e013      	b.n	800aa34 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0xa0>
    }
    else {
        impl_->results_.tail_->next_ = new JUnitTestCaseResultNode;
 800aa0c:	228b      	movs	r2, #139	; 0x8b
 800aa0e:	492e      	ldr	r1, [pc, #184]	; (800aac8 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 800aa10:	2028      	movs	r0, #40	; 0x28
 800aa12:	f000 fef5 	bl	800b800 <_ZnwjPKci>
 800aa16:	4604      	mov	r4, r0
 800aa18:	4620      	mov	r0, r4
 800aa1a:	f7ff fe27 	bl	800a66c <_ZN23JUnitTestCaseResultNodeC1Ev>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	691b      	ldr	r3, [r3, #16]
 800aa22:	6a1b      	ldr	r3, [r3, #32]
 800aa24:	625c      	str	r4, [r3, #36]	; 0x24
        impl_->results_.tail_ = impl_->results_.tail_->next_;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	691b      	ldr	r3, [r3, #16]
 800aa2a:	6a1a      	ldr	r2, [r3, #32]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	691b      	ldr	r3, [r3, #16]
 800aa30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800aa32:	621a      	str	r2, [r3, #32]
    }
    impl_->results_.tail_->name_ = test.getName();
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	691b      	ldr	r3, [r3, #16]
 800aa38:	6a1b      	ldr	r3, [r3, #32]
 800aa3a:	461c      	mov	r4, r3
 800aa3c:	f107 0310 	add.w	r3, r7, #16
 800aa40:	6839      	ldr	r1, [r7, #0]
 800aa42:	4618      	mov	r0, r3
 800aa44:	f009 fc9a 	bl	801437c <_ZNK10UtestShell7getNameEv>
 800aa48:	f107 0310 	add.w	r3, r7, #16
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	4620      	mov	r0, r4
 800aa50:	f003 fb05 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 800aa54:	f107 0310 	add.w	r3, r7, #16
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f003 fe4c 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->file_ = test.getFile();
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	691b      	ldr	r3, [r3, #16]
 800aa62:	6a1b      	ldr	r3, [r3, #32]
 800aa64:	f103 0414 	add.w	r4, r3, #20
 800aa68:	f107 0318 	add.w	r3, r7, #24
 800aa6c:	6839      	ldr	r1, [r7, #0]
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f009 fd55 	bl	801451e <_ZNK10UtestShell7getFileEv>
 800aa74:	f107 0318 	add.w	r3, r7, #24
 800aa78:	4619      	mov	r1, r3
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f003 faef 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 800aa80:	f107 0318 	add.w	r3, r7, #24
 800aa84:	4618      	mov	r0, r3
 800aa86:	f003 fe36 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->lineNumber_ = test.getLineNumber();
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	691b      	ldr	r3, [r3, #16]
 800aa8e:	6a1c      	ldr	r4, [r3, #32]
 800aa90:	6838      	ldr	r0, [r7, #0]
 800aa92:	f009 fd53 	bl	801453c <_ZNK10UtestShell13getLineNumberEv>
 800aa96:	4603      	mov	r3, r0
 800aa98:	61e3      	str	r3, [r4, #28]
    if (!test.willRun()) {
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	3318      	adds	r3, #24
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	6838      	ldr	r0, [r7, #0]
 800aaa4:	4798      	blx	r3
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	f083 0301 	eor.w	r3, r3, #1
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d004      	beq.n	800aabc <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x128>
        impl_->results_.tail_->ignored_ = true;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	691b      	ldr	r3, [r3, #16]
 800aab6:	6a1b      	ldr	r3, [r3, #32]
 800aab8:	2201      	movs	r2, #1
 800aaba:	741a      	strb	r2, [r3, #16]
    }
}
 800aabc:	bf00      	nop
 800aabe:	3724      	adds	r7, #36	; 0x24
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd90      	pop	{r4, r7, pc}
 800aac4:	200000a8 	.word	0x200000a8
 800aac8:	08025a44 	.word	0x08025a44

0800aacc <_ZN15JUnitTestOutput14createFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::createFileName(const SimpleString& group)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b08a      	sub	sp, #40	; 0x28
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	607a      	str	r2, [r7, #4]
    SimpleString fileName = "cpputest_";
 800aad8:	f107 0310 	add.w	r3, r7, #16
 800aadc:	4928      	ldr	r1, [pc, #160]	; (800ab80 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb4>)
 800aade:	4618      	mov	r0, r3
 800aae0:	f003 fa51 	bl	800df86 <_ZN12SimpleStringC1EPKc>
    if (!impl_->package_.isEmpty()) {
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	691b      	ldr	r3, [r3, #16]
 800aae8:	3328      	adds	r3, #40	; 0x28
 800aaea:	4618      	mov	r0, r3
 800aaec:	f003 fdf2 	bl	800e6d4 <_ZNK12SimpleString7isEmptyEv>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	f083 0301 	eor.w	r3, r3, #1
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d00f      	beq.n	800ab1c <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0x50>
        fileName += impl_->package_;
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	691b      	ldr	r3, [r3, #16]
 800ab00:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800ab04:	f107 0310 	add.w	r3, r7, #16
 800ab08:	4611      	mov	r1, r2
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f003 fe70 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
        fileName += "_";
 800ab10:	f107 0310 	add.w	r3, r7, #16
 800ab14:	491b      	ldr	r1, [pc, #108]	; (800ab84 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb8>)
 800ab16:	4618      	mov	r0, r3
 800ab18:	f003 fe7c 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    }
    fileName += group;
 800ab1c:	f107 0310 	add.w	r3, r7, #16
 800ab20:	6879      	ldr	r1, [r7, #4]
 800ab22:	4618      	mov	r0, r3
 800ab24:	f003 fe64 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
    return encodeFileName(fileName) + ".xml";
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	3384      	adds	r3, #132	; 0x84
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f107 0018 	add.w	r0, r7, #24
 800ab34:	f107 0210 	add.w	r2, r7, #16
 800ab38:	68b9      	ldr	r1, [r7, #8]
 800ab3a:	4798      	blx	r3
 800ab3c:	f107 0320 	add.w	r3, r7, #32
 800ab40:	4911      	ldr	r1, [pc, #68]	; (800ab88 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xbc>)
 800ab42:	4618      	mov	r0, r3
 800ab44:	f003 fa1f 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f107 0220 	add.w	r2, r7, #32
 800ab4e:	f107 0118 	add.w	r1, r7, #24
 800ab52:	4618      	mov	r0, r3
 800ab54:	f003 fe31 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 800ab58:	f107 0320 	add.w	r3, r7, #32
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f003 fdca 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800ab62:	f107 0318 	add.w	r3, r7, #24
 800ab66:	4618      	mov	r0, r3
 800ab68:	f003 fdc5 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    SimpleString fileName = "cpputest_";
 800ab6c:	f107 0310 	add.w	r3, r7, #16
 800ab70:	4618      	mov	r0, r3
 800ab72:	f003 fdc0 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    return encodeFileName(fileName) + ".xml";
 800ab76:	bf00      	nop
}
 800ab78:	68f8      	ldr	r0, [r7, #12]
 800ab7a:	3728      	adds	r7, #40	; 0x28
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	08025a60 	.word	0x08025a60
 800ab84:	08025a6c 	.word	0x08025a6c
 800ab88:	08025a70 	.word	0x08025a70

0800ab8c <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::encodeFileName(const SimpleString& fileName)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b086      	sub	sp, #24
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	607a      	str	r2, [r7, #4]
    // special character list based on: https://en.wikipedia.org/wiki/Filename
    static const char* const forbiddenCharacters = "/\\?%*:|\"<>";

    SimpleString result = fileName;
 800ab98:	6879      	ldr	r1, [r7, #4]
 800ab9a:	68f8      	ldr	r0, [r7, #12]
 800ab9c:	f003 fa47 	bl	800e02e <_ZN12SimpleStringC1ERKS_>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 800aba0:	4b0a      	ldr	r3, [pc, #40]	; (800abcc <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x40>)
 800aba2:	617b      	str	r3, [r7, #20]
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	781b      	ldrb	r3, [r3, #0]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d00a      	beq.n	800abc2 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x36>
        result.replace(*sym, '_');
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	225f      	movs	r2, #95	; 0x5f
 800abb2:	4619      	mov	r1, r3
 800abb4:	68f8      	ldr	r0, [r7, #12]
 800abb6:	f003 fbcc 	bl	800e352 <_ZN12SimpleString7replaceEcc>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	3301      	adds	r3, #1
 800abbe:	617b      	str	r3, [r7, #20]
 800abc0:	e7f0      	b.n	800aba4 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x18>
    }
    return result;
 800abc2:	bf00      	nop
}
 800abc4:	68f8      	ldr	r0, [r7, #12]
 800abc6:	3718      	adds	r7, #24
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}
 800abcc:	08025a78 	.word	0x08025a78

0800abd0 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>:

void JUnitTestOutput::setPackageName(const SimpleString& package)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b082      	sub	sp, #8
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
    if (impl_ != NULLPTR) {
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	691b      	ldr	r3, [r3, #16]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d006      	beq.n	800abf0 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString+0x20>
        impl_->package_ = package;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	691b      	ldr	r3, [r3, #16]
 800abe6:	3328      	adds	r3, #40	; 0x28
 800abe8:	6839      	ldr	r1, [r7, #0]
 800abea:	4618      	mov	r0, r3
 800abec:	f003 fa37 	bl	800e05e <_ZN12SimpleStringaSERKS_>
    }
}
 800abf0:	bf00      	nop
 800abf2:	3708      	adds	r7, #8
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}

0800abf8 <_ZN15JUnitTestOutput14writeXmlHeaderEv>:

void JUnitTestOutput::writeXmlHeader()
{
 800abf8:	b590      	push	{r4, r7, lr}
 800abfa:	b085      	sub	sp, #20
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
    writeToFile("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	3368      	adds	r3, #104	; 0x68
 800ac06:	681c      	ldr	r4, [r3, #0]
 800ac08:	f107 0308 	add.w	r3, r7, #8
 800ac0c:	4908      	ldr	r1, [pc, #32]	; (800ac30 <_ZN15JUnitTestOutput14writeXmlHeaderEv+0x38>)
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f003 f9b9 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800ac14:	f107 0308 	add.w	r3, r7, #8
 800ac18:	4619      	mov	r1, r3
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	47a0      	blx	r4
 800ac1e:	f107 0308 	add.w	r3, r7, #8
 800ac22:	4618      	mov	r0, r3
 800ac24:	f003 fd67 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 800ac28:	bf00      	nop
 800ac2a:	3714      	adds	r7, #20
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd90      	pop	{r4, r7, pc}
 800ac30:	08025a84 	.word	0x08025a84

0800ac34 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv>:

void JUnitTestOutput::writeTestSuiteSummary()
{
 800ac34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac38:	b08a      	sub	sp, #40	; 0x28
 800ac3a:	af04      	add	r7, sp, #16
 800ac3c:	6078      	str	r0, [r7, #4]
    SimpleString
            buf =
                    StringFromFormat(
                            "<testsuite errors=\"0\" failures=\"%d\" hostname=\"localhost\" name=\"%s\" tests=\"%d\" time=\"%d.%03d\" timestamp=\"%s\">\n",
                            (int)impl_->results_.failureCount_,
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	691b      	ldr	r3, [r3, #16]
 800ac42:	685b      	ldr	r3, [r3, #4]
                            impl_->results_.group_.asCharString(),
                            (int) impl_->results_.testCount_,
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
                            GetPlatformSpecificTimeString());
 800ac44:	4698      	mov	r8, r3
                            impl_->results_.group_.asCharString(),
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	691b      	ldr	r3, [r3, #16]
                            GetPlatformSpecificTimeString());
 800ac4a:	3314      	adds	r3, #20
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f003 fd25 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 800ac52:	4604      	mov	r4, r0
                            (int) impl_->results_.testCount_,
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	691b      	ldr	r3, [r3, #16]
 800ac58:	681b      	ldr	r3, [r3, #0]
                            GetPlatformSpecificTimeString());
 800ac5a:	461d      	mov	r5, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	691b      	ldr	r3, [r3, #16]
 800ac60:	691b      	ldr	r3, [r3, #16]
 800ac62:	4a23      	ldr	r2, [pc, #140]	; (800acf0 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 800ac64:	fba2 2303 	umull	r2, r3, r2, r3
 800ac68:	099b      	lsrs	r3, r3, #6
                            GetPlatformSpecificTimeString());
 800ac6a:	461e      	mov	r6, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	691b      	ldr	r3, [r3, #16]
 800ac70:	691a      	ldr	r2, [r3, #16]
 800ac72:	4b1f      	ldr	r3, [pc, #124]	; (800acf0 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 800ac74:	fba3 1302 	umull	r1, r3, r3, r2
 800ac78:	099b      	lsrs	r3, r3, #6
 800ac7a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ac7e:	fb01 f303 	mul.w	r3, r1, r3
 800ac82:	1ad3      	subs	r3, r2, r3
                            GetPlatformSpecificTimeString());
 800ac84:	603b      	str	r3, [r7, #0]
 800ac86:	4b1b      	ldr	r3, [pc, #108]	; (800acf4 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc0>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4798      	blx	r3
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	f107 0008 	add.w	r0, r7, #8
 800ac92:	9303      	str	r3, [sp, #12]
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	9302      	str	r3, [sp, #8]
 800ac98:	9601      	str	r6, [sp, #4]
 800ac9a:	9500      	str	r5, [sp, #0]
 800ac9c:	4623      	mov	r3, r4
 800ac9e:	4642      	mov	r2, r8
 800aca0:	4915      	ldr	r1, [pc, #84]	; (800acf8 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc4>)
 800aca2:	f004 fa2f 	bl	800f104 <_Z16StringFromFormatPKcz>
    writeToFile(buf.asCharString());
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	3368      	adds	r3, #104	; 0x68
 800acac:	681c      	ldr	r4, [r3, #0]
 800acae:	f107 0308 	add.w	r3, r7, #8
 800acb2:	4618      	mov	r0, r3
 800acb4:	f003 fcf2 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 800acb8:	4602      	mov	r2, r0
 800acba:	f107 0310 	add.w	r3, r7, #16
 800acbe:	4611      	mov	r1, r2
 800acc0:	4618      	mov	r0, r3
 800acc2:	f003 f960 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800acc6:	f107 0310 	add.w	r3, r7, #16
 800acca:	4619      	mov	r1, r3
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	47a0      	blx	r4
 800acd0:	f107 0310 	add.w	r3, r7, #16
 800acd4:	4618      	mov	r0, r3
 800acd6:	f003 fd0e 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
                            GetPlatformSpecificTimeString());
 800acda:	f107 0308 	add.w	r3, r7, #8
 800acde:	4618      	mov	r0, r3
 800ace0:	f003 fd09 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 800ace4:	bf00      	nop
 800ace6:	3718      	adds	r7, #24
 800ace8:	46bd      	mov	sp, r7
 800acea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acee:	bf00      	nop
 800acf0:	10624dd3 	.word	0x10624dd3
 800acf4:	200000ac 	.word	0x200000ac
 800acf8:	08025ab0 	.word	0x08025ab0

0800acfc <_ZN15JUnitTestOutput15writePropertiesEv>:

void JUnitTestOutput::writeProperties()
{
 800acfc:	b590      	push	{r4, r7, lr}
 800acfe:	b087      	sub	sp, #28
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
    writeToFile("<properties>\n");
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	3368      	adds	r3, #104	; 0x68
 800ad0a:	681c      	ldr	r4, [r3, #0]
 800ad0c:	f107 0308 	add.w	r3, r7, #8
 800ad10:	4912      	ldr	r1, [pc, #72]	; (800ad5c <_ZN15JUnitTestOutput15writePropertiesEv+0x60>)
 800ad12:	4618      	mov	r0, r3
 800ad14:	f003 f937 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800ad18:	f107 0308 	add.w	r3, r7, #8
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	47a0      	blx	r4
 800ad22:	f107 0308 	add.w	r3, r7, #8
 800ad26:	4618      	mov	r0, r3
 800ad28:	f003 fce5 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    writeToFile("</properties>\n");
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	3368      	adds	r3, #104	; 0x68
 800ad32:	681c      	ldr	r4, [r3, #0]
 800ad34:	f107 0310 	add.w	r3, r7, #16
 800ad38:	4909      	ldr	r1, [pc, #36]	; (800ad60 <_ZN15JUnitTestOutput15writePropertiesEv+0x64>)
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f003 f923 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800ad40:	f107 0310 	add.w	r3, r7, #16
 800ad44:	4619      	mov	r1, r3
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	47a0      	blx	r4
 800ad4a:	f107 0310 	add.w	r3, r7, #16
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f003 fcd1 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 800ad54:	bf00      	nop
 800ad56:	371c      	adds	r7, #28
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd90      	pop	{r4, r7, pc}
 800ad5c:	08025b20 	.word	0x08025b20
 800ad60:	08025b30 	.word	0x08025b30

0800ad64 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString>:

SimpleString JUnitTestOutput::encodeXmlText(const SimpleString& textbody)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	60f8      	str	r0, [r7, #12]
 800ad6c:	60b9      	str	r1, [r7, #8]
 800ad6e:	607a      	str	r2, [r7, #4]
    SimpleString buf = textbody.asCharString();
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f003 fc93 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 800ad76:	4603      	mov	r3, r0
 800ad78:	4619      	mov	r1, r3
 800ad7a:	68f8      	ldr	r0, [r7, #12]
 800ad7c:	f003 f903 	bl	800df86 <_ZN12SimpleStringC1EPKc>
    buf.replace("&", "&amp;");
 800ad80:	4a0e      	ldr	r2, [pc, #56]	; (800adbc <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x58>)
 800ad82:	490f      	ldr	r1, [pc, #60]	; (800adc0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x5c>)
 800ad84:	68f8      	ldr	r0, [r7, #12]
 800ad86:	f003 fb13 	bl	800e3b0 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\"", "&quot;");
 800ad8a:	4a0e      	ldr	r2, [pc, #56]	; (800adc4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x60>)
 800ad8c:	490e      	ldr	r1, [pc, #56]	; (800adc8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x64>)
 800ad8e:	68f8      	ldr	r0, [r7, #12]
 800ad90:	f003 fb0e 	bl	800e3b0 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("<", "&lt;");
 800ad94:	4a0d      	ldr	r2, [pc, #52]	; (800adcc <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x68>)
 800ad96:	490e      	ldr	r1, [pc, #56]	; (800add0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x6c>)
 800ad98:	68f8      	ldr	r0, [r7, #12]
 800ad9a:	f003 fb09 	bl	800e3b0 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace(">", "&gt;");
 800ad9e:	4a0d      	ldr	r2, [pc, #52]	; (800add4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x70>)
 800ada0:	490d      	ldr	r1, [pc, #52]	; (800add8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x74>)
 800ada2:	68f8      	ldr	r0, [r7, #12]
 800ada4:	f003 fb04 	bl	800e3b0 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\n", "{newline}");
 800ada8:	4a0c      	ldr	r2, [pc, #48]	; (800addc <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x78>)
 800adaa:	490d      	ldr	r1, [pc, #52]	; (800ade0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x7c>)
 800adac:	68f8      	ldr	r0, [r7, #12]
 800adae:	f003 faff 	bl	800e3b0 <_ZN12SimpleString7replaceEPKcS1_>
    return buf;
 800adb2:	bf00      	nop
}
 800adb4:	68f8      	ldr	r0, [r7, #12]
 800adb6:	3710      	adds	r7, #16
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}
 800adbc:	08025b40 	.word	0x08025b40
 800adc0:	08025b48 	.word	0x08025b48
 800adc4:	08025b4c 	.word	0x08025b4c
 800adc8:	08025b54 	.word	0x08025b54
 800adcc:	08025b58 	.word	0x08025b58
 800add0:	08025b60 	.word	0x08025b60
 800add4:	08025b64 	.word	0x08025b64
 800add8:	08025b6c 	.word	0x08025b6c
 800addc:	08025b70 	.word	0x08025b70
 800ade0:	08025b7c 	.word	0x08025b7c

0800ade4 <_ZN15JUnitTestOutput14writeTestCasesEv>:

void JUnitTestOutput::writeTestCases()
{
 800ade4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ade8:	b096      	sub	sp, #88	; 0x58
 800adea:	af08      	add	r7, sp, #32
 800adec:	60f8      	str	r0, [r7, #12]
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	691b      	ldr	r3, [r3, #16]
 800adf2:	69db      	ldr	r3, [r3, #28]
 800adf4:	637b      	str	r3, [r7, #52]	; 0x34

    while (cur) {
 800adf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	f000 80b2 	beq.w	800af62 <_ZN15JUnitTestOutput14writeTestCasesEv+0x17e>
        SimpleString buf = StringFromFormat(
                "<testcase classname=\"%s%s%s\" name=\"%s\" assertions=\"%d\" time=\"%d.%03d\" file=\"%s\" line=\"%d\">\n",
                impl_->package_.asCharString(),
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	691b      	ldr	r3, [r3, #16]
                impl_->results_.group_.asCharString(),
                cur->name_.asCharString(),
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
                cur->file_.asCharString(),
                (int) cur->lineNumber_);
 800ae02:	3328      	adds	r3, #40	; 0x28
 800ae04:	4618      	mov	r0, r3
 800ae06:	f003 fc49 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 800ae0a:	4680      	mov	r8, r0
                impl_->package_.isEmpty() ? "" : ".",
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	691b      	ldr	r3, [r3, #16]
 800ae10:	3328      	adds	r3, #40	; 0x28
 800ae12:	4618      	mov	r0, r3
 800ae14:	f003 fc5e 	bl	800e6d4 <_ZNK12SimpleString7isEmptyEv>
 800ae18:	4603      	mov	r3, r0
                (int) cur->lineNumber_);
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d001      	beq.n	800ae22 <_ZN15JUnitTestOutput14writeTestCasesEv+0x3e>
 800ae1e:	4c53      	ldr	r4, [pc, #332]	; (800af6c <_ZN15JUnitTestOutput14writeTestCasesEv+0x188>)
 800ae20:	e000      	b.n	800ae24 <_ZN15JUnitTestOutput14writeTestCasesEv+0x40>
 800ae22:	4c53      	ldr	r4, [pc, #332]	; (800af70 <_ZN15JUnitTestOutput14writeTestCasesEv+0x18c>)
                impl_->results_.group_.asCharString(),
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	691b      	ldr	r3, [r3, #16]
                (int) cur->lineNumber_);
 800ae28:	3314      	adds	r3, #20
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f003 fc36 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 800ae30:	4605      	mov	r5, r0
 800ae32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae34:	4618      	mov	r0, r3
 800ae36:	f003 fc31 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 800ae3a:	4606      	mov	r6, r0
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
 800ae3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae3e:	6a1a      	ldr	r2, [r3, #32]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	691b      	ldr	r3, [r3, #16]
 800ae44:	689b      	ldr	r3, [r3, #8]
 800ae46:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 800ae48:	60bb      	str	r3, [r7, #8]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 800ae4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae4c:	689b      	ldr	r3, [r3, #8]
 800ae4e:	4a49      	ldr	r2, [pc, #292]	; (800af74 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 800ae50:	fba2 2303 	umull	r2, r3, r2, r3
 800ae54:	099b      	lsrs	r3, r3, #6
                (int) cur->lineNumber_);
 800ae56:	607b      	str	r3, [r7, #4]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 800ae58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae5a:	689a      	ldr	r2, [r3, #8]
 800ae5c:	4b45      	ldr	r3, [pc, #276]	; (800af74 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 800ae5e:	fba3 1302 	umull	r1, r3, r3, r2
 800ae62:	099b      	lsrs	r3, r3, #6
 800ae64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ae68:	fb01 f303 	mul.w	r3, r1, r3
 800ae6c:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 800ae6e:	603b      	str	r3, [r7, #0]
 800ae70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae72:	3314      	adds	r3, #20
 800ae74:	4618      	mov	r0, r3
 800ae76:	f003 fc11 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae7e:	69db      	ldr	r3, [r3, #28]
 800ae80:	f107 0014 	add.w	r0, r7, #20
 800ae84:	9306      	str	r3, [sp, #24]
 800ae86:	9205      	str	r2, [sp, #20]
 800ae88:	683a      	ldr	r2, [r7, #0]
 800ae8a:	9204      	str	r2, [sp, #16]
 800ae8c:	687a      	ldr	r2, [r7, #4]
 800ae8e:	9203      	str	r2, [sp, #12]
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	9302      	str	r3, [sp, #8]
 800ae94:	9601      	str	r6, [sp, #4]
 800ae96:	9500      	str	r5, [sp, #0]
 800ae98:	4623      	mov	r3, r4
 800ae9a:	4642      	mov	r2, r8
 800ae9c:	4936      	ldr	r1, [pc, #216]	; (800af78 <_ZN15JUnitTestOutput14writeTestCasesEv+0x194>)
 800ae9e:	f004 f931 	bl	800f104 <_Z16StringFromFormatPKcz>
        writeToFile(buf.asCharString());
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	3368      	adds	r3, #104	; 0x68
 800aea8:	681c      	ldr	r4, [r3, #0]
 800aeaa:	f107 0314 	add.w	r3, r7, #20
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f003 fbf4 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	f107 031c 	add.w	r3, r7, #28
 800aeba:	4611      	mov	r1, r2
 800aebc:	4618      	mov	r0, r3
 800aebe:	f003 f862 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800aec2:	f107 031c 	add.w	r3, r7, #28
 800aec6:	4619      	mov	r1, r3
 800aec8:	68f8      	ldr	r0, [r7, #12]
 800aeca:	47a0      	blx	r4
 800aecc:	f107 031c 	add.w	r3, r7, #28
 800aed0:	4618      	mov	r0, r3
 800aed2:	f003 fc10 	bl	800e6f6 <_ZN12SimpleStringD1Ev>

        impl_->results_.totalCheckCount_ = cur->checkCount_;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	691b      	ldr	r3, [r3, #16]
 800aeda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aedc:	6a12      	ldr	r2, [r2, #32]
 800aede:	609a      	str	r2, [r3, #8]

        if (cur->failure_) {
 800aee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aee2:	68db      	ldr	r3, [r3, #12]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d007      	beq.n	800aef8 <_ZN15JUnitTestOutput14writeTestCasesEv+0x114>
            writeFailure(cur);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	3388      	adds	r3, #136	; 0x88
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aef2:	68f8      	ldr	r0, [r7, #12]
 800aef4:	4798      	blx	r3
 800aef6:	e017      	b.n	800af28 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
        }
        else if (cur->ignored_) {
 800aef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aefa:	7c1b      	ldrb	r3, [r3, #16]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d013      	beq.n	800af28 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
            writeToFile("<skipped />\n");
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	3368      	adds	r3, #104	; 0x68
 800af06:	681c      	ldr	r4, [r3, #0]
 800af08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af0c:	491b      	ldr	r1, [pc, #108]	; (800af7c <_ZN15JUnitTestOutput14writeTestCasesEv+0x198>)
 800af0e:	4618      	mov	r0, r3
 800af10:	f003 f839 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800af14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af18:	4619      	mov	r1, r3
 800af1a:	68f8      	ldr	r0, [r7, #12]
 800af1c:	47a0      	blx	r4
 800af1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af22:	4618      	mov	r0, r3
 800af24:	f003 fbe7 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
        }
        writeToFile("</testcase>\n");
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	3368      	adds	r3, #104	; 0x68
 800af2e:	681c      	ldr	r4, [r3, #0]
 800af30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800af34:	4912      	ldr	r1, [pc, #72]	; (800af80 <_ZN15JUnitTestOutput14writeTestCasesEv+0x19c>)
 800af36:	4618      	mov	r0, r3
 800af38:	f003 f825 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800af3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800af40:	4619      	mov	r1, r3
 800af42:	68f8      	ldr	r0, [r7, #12]
 800af44:	47a0      	blx	r4
 800af46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800af4a:	4618      	mov	r0, r3
 800af4c:	f003 fbd3 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
        cur = cur->next_;
 800af50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af54:	637b      	str	r3, [r7, #52]	; 0x34
                (int) cur->lineNumber_);
 800af56:	f107 0314 	add.w	r3, r7, #20
 800af5a:	4618      	mov	r0, r3
 800af5c:	f003 fbcb 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    while (cur) {
 800af60:	e749      	b.n	800adf6 <_ZN15JUnitTestOutput14writeTestCasesEv+0x12>
    }
}
 800af62:	bf00      	nop
 800af64:	3738      	adds	r7, #56	; 0x38
 800af66:	46bd      	mov	sp, r7
 800af68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af6c:	08025a40 	.word	0x08025a40
 800af70:	08025b80 	.word	0x08025b80
 800af74:	10624dd3 	.word	0x10624dd3
 800af78:	08025b84 	.word	0x08025b84
 800af7c:	08025be0 	.word	0x08025be0
 800af80:	08025bf0 	.word	0x08025bf0

0800af84 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode>:

void JUnitTestOutput::writeFailure(JUnitTestCaseResultNode* node)
{
 800af84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af86:	b091      	sub	sp, #68	; 0x44
 800af88:	af02      	add	r7, sp, #8
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	6039      	str	r1, [r7, #0]
    SimpleString buf = StringFromFormat(
            "<failure message=\"%s:%d: %s\" type=\"AssertionFailedError\">\n",
            node->failure_->getFileName().asCharString(),
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	68d9      	ldr	r1, [r3, #12]
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	68db      	ldr	r3, [r3, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	3308      	adds	r3, #8
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f107 0210 	add.w	r2, r7, #16
 800afa0:	4610      	mov	r0, r2
 800afa2:	4798      	blx	r3
            (int) node->failure_->getFailureLineNumber(),
            encodeXmlText(node->failure_->getMessage()).asCharString());
 800afa4:	f107 0310 	add.w	r3, r7, #16
 800afa8:	4618      	mov	r0, r3
 800afaa:	f003 fb77 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 800afae:	4605      	mov	r5, r0
            (int) node->failure_->getFailureLineNumber(),
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	68da      	ldr	r2, [r3, #12]
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	68db      	ldr	r3, [r3, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	3314      	adds	r3, #20
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	4610      	mov	r0, r2
 800afc0:	4798      	blx	r3
 800afc2:	4603      	mov	r3, r0
            encodeXmlText(node->failure_->getMessage()).asCharString());
 800afc4:	461e      	mov	r6, r3
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	3380      	adds	r3, #128	; 0x80
 800afcc:	681c      	ldr	r4, [r3, #0]
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	68d9      	ldr	r1, [r3, #12]
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	68db      	ldr	r3, [r3, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	3318      	adds	r3, #24
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f107 0220 	add.w	r2, r7, #32
 800afe0:	4610      	mov	r0, r2
 800afe2:	4798      	blx	r3
 800afe4:	f107 0318 	add.w	r3, r7, #24
 800afe8:	f107 0220 	add.w	r2, r7, #32
 800afec:	6879      	ldr	r1, [r7, #4]
 800afee:	4618      	mov	r0, r3
 800aff0:	47a0      	blx	r4
 800aff2:	f107 0318 	add.w	r3, r7, #24
 800aff6:	4618      	mov	r0, r3
 800aff8:	f003 fb50 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 800affc:	4603      	mov	r3, r0
 800affe:	f107 0008 	add.w	r0, r7, #8
 800b002:	9300      	str	r3, [sp, #0]
 800b004:	4633      	mov	r3, r6
 800b006:	462a      	mov	r2, r5
 800b008:	4924      	ldr	r1, [pc, #144]	; (800b09c <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x118>)
 800b00a:	f004 f87b 	bl	800f104 <_Z16StringFromFormatPKcz>
 800b00e:	f107 0318 	add.w	r3, r7, #24
 800b012:	4618      	mov	r0, r3
 800b014:	f003 fb6f 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800b018:	f107 0320 	add.w	r3, r7, #32
 800b01c:	4618      	mov	r0, r3
 800b01e:	f003 fb6a 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
            node->failure_->getFileName().asCharString(),
 800b022:	f107 0310 	add.w	r3, r7, #16
 800b026:	4618      	mov	r0, r3
 800b028:	f003 fb65 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    writeToFile(buf.asCharString());
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	3368      	adds	r3, #104	; 0x68
 800b032:	681c      	ldr	r4, [r3, #0]
 800b034:	f107 0308 	add.w	r3, r7, #8
 800b038:	4618      	mov	r0, r3
 800b03a:	f003 fb2f 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 800b03e:	4602      	mov	r2, r0
 800b040:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b044:	4611      	mov	r1, r2
 800b046:	4618      	mov	r0, r3
 800b048:	f002 ff9d 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800b04c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b050:	4619      	mov	r1, r3
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	47a0      	blx	r4
 800b056:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b05a:	4618      	mov	r0, r3
 800b05c:	f003 fb4b 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    writeToFile("</failure>\n");
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	3368      	adds	r3, #104	; 0x68
 800b066:	681c      	ldr	r4, [r3, #0]
 800b068:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b06c:	490c      	ldr	r1, [pc, #48]	; (800b0a0 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x11c>)
 800b06e:	4618      	mov	r0, r3
 800b070:	f002 ff89 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800b074:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b078:	4619      	mov	r1, r3
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	47a0      	blx	r4
 800b07e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b082:	4618      	mov	r0, r3
 800b084:	f003 fb37 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
            encodeXmlText(node->failure_->getMessage()).asCharString());
 800b088:	f107 0308 	add.w	r3, r7, #8
 800b08c:	4618      	mov	r0, r3
 800b08e:	f003 fb32 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 800b092:	bf00      	nop
 800b094:	373c      	adds	r7, #60	; 0x3c
 800b096:	46bd      	mov	sp, r7
 800b098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b09a:	bf00      	nop
 800b09c:	08025c00 	.word	0x08025c00
 800b0a0:	08025c3c 	.word	0x08025c3c

0800b0a4 <_ZN15JUnitTestOutput15writeFileEndingEv>:


void JUnitTestOutput::writeFileEnding()
{
 800b0a4:	b590      	push	{r4, r7, lr}
 800b0a6:	b08d      	sub	sp, #52	; 0x34
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
    writeToFile("<system-out>");
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	3368      	adds	r3, #104	; 0x68
 800b0b2:	681c      	ldr	r4, [r3, #0]
 800b0b4:	f107 0308 	add.w	r3, r7, #8
 800b0b8:	4933      	ldr	r1, [pc, #204]	; (800b188 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe4>)
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f002 ff63 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800b0c0:	f107 0308 	add.w	r3, r7, #8
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	47a0      	blx	r4
 800b0ca:	f107 0308 	add.w	r3, r7, #8
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f003 fb11 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    writeToFile(encodeXmlText(impl_->stdOutput_));
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	3368      	adds	r3, #104	; 0x68
 800b0da:	681c      	ldr	r4, [r3, #0]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	3380      	adds	r3, #128	; 0x80
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	687a      	ldr	r2, [r7, #4]
 800b0e6:	6912      	ldr	r2, [r2, #16]
 800b0e8:	3230      	adds	r2, #48	; 0x30
 800b0ea:	f107 0010 	add.w	r0, r7, #16
 800b0ee:	6879      	ldr	r1, [r7, #4]
 800b0f0:	4798      	blx	r3
 800b0f2:	f107 0310 	add.w	r3, r7, #16
 800b0f6:	4619      	mov	r1, r3
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	47a0      	blx	r4
 800b0fc:	f107 0310 	add.w	r3, r7, #16
 800b100:	4618      	mov	r0, r3
 800b102:	f003 faf8 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    writeToFile("</system-out>\n");
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	3368      	adds	r3, #104	; 0x68
 800b10c:	681c      	ldr	r4, [r3, #0]
 800b10e:	f107 0318 	add.w	r3, r7, #24
 800b112:	491e      	ldr	r1, [pc, #120]	; (800b18c <_ZN15JUnitTestOutput15writeFileEndingEv+0xe8>)
 800b114:	4618      	mov	r0, r3
 800b116:	f002 ff36 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800b11a:	f107 0318 	add.w	r3, r7, #24
 800b11e:	4619      	mov	r1, r3
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	47a0      	blx	r4
 800b124:	f107 0318 	add.w	r3, r7, #24
 800b128:	4618      	mov	r0, r3
 800b12a:	f003 fae4 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    writeToFile("<system-err></system-err>\n");
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	3368      	adds	r3, #104	; 0x68
 800b134:	681c      	ldr	r4, [r3, #0]
 800b136:	f107 0320 	add.w	r3, r7, #32
 800b13a:	4915      	ldr	r1, [pc, #84]	; (800b190 <_ZN15JUnitTestOutput15writeFileEndingEv+0xec>)
 800b13c:	4618      	mov	r0, r3
 800b13e:	f002 ff22 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800b142:	f107 0320 	add.w	r3, r7, #32
 800b146:	4619      	mov	r1, r3
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	47a0      	blx	r4
 800b14c:	f107 0320 	add.w	r3, r7, #32
 800b150:	4618      	mov	r0, r3
 800b152:	f003 fad0 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    writeToFile("</testsuite>\n");
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	3368      	adds	r3, #104	; 0x68
 800b15c:	681c      	ldr	r4, [r3, #0]
 800b15e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b162:	490c      	ldr	r1, [pc, #48]	; (800b194 <_ZN15JUnitTestOutput15writeFileEndingEv+0xf0>)
 800b164:	4618      	mov	r0, r3
 800b166:	f002 ff0e 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800b16a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b16e:	4619      	mov	r1, r3
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	47a0      	blx	r4
 800b174:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b178:	4618      	mov	r0, r3
 800b17a:	f003 fabc 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 800b17e:	bf00      	nop
 800b180:	3734      	adds	r7, #52	; 0x34
 800b182:	46bd      	mov	sp, r7
 800b184:	bd90      	pop	{r4, r7, pc}
 800b186:	bf00      	nop
 800b188:	08025c48 	.word	0x08025c48
 800b18c:	08025c58 	.word	0x08025c58
 800b190:	08025c68 	.word	0x08025c68
 800b194:	08025c84 	.word	0x08025c84

0800b198 <_ZN15JUnitTestOutput20writeTestGroupToFileEv>:

void JUnitTestOutput::writeTestGroupToFile()
{
 800b198:	b590      	push	{r4, r7, lr}
 800b19a:	b085      	sub	sp, #20
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
    openFileForWrite(createFileName(impl_->results_.group_));
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	3360      	adds	r3, #96	; 0x60
 800b1a6:	681c      	ldr	r4, [r3, #0]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	335c      	adds	r3, #92	; 0x5c
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	687a      	ldr	r2, [r7, #4]
 800b1b2:	6912      	ldr	r2, [r2, #16]
 800b1b4:	3214      	adds	r2, #20
 800b1b6:	f107 0008 	add.w	r0, r7, #8
 800b1ba:	6879      	ldr	r1, [r7, #4]
 800b1bc:	4798      	blx	r3
 800b1be:	f107 0308 	add.w	r3, r7, #8
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	47a0      	blx	r4
 800b1c8:	f107 0308 	add.w	r3, r7, #8
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f003 fa92 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    writeXmlHeader();
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	3370      	adds	r3, #112	; 0x70
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	4798      	blx	r3
    writeTestSuiteSummary();
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	3374      	adds	r3, #116	; 0x74
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	4798      	blx	r3
    writeProperties();
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	3378      	adds	r3, #120	; 0x78
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	4798      	blx	r3
    writeTestCases();
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	337c      	adds	r3, #124	; 0x7c
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	4798      	blx	r3
    writeFileEnding();
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	338c      	adds	r3, #140	; 0x8c
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	4798      	blx	r3
    closeFile();
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	336c      	adds	r3, #108	; 0x6c
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	4798      	blx	r3
}
 800b21a:	bf00      	nop
 800b21c:	3714      	adds	r7, #20
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd90      	pop	{r4, r7, pc}

0800b222 <_ZN15JUnitTestOutput11printBufferEPKc>:

// LCOV_EXCL_START

void JUnitTestOutput::printBuffer(const char*)
{
 800b222:	b480      	push	{r7}
 800b224:	b083      	sub	sp, #12
 800b226:	af00      	add	r7, sp, #0
 800b228:	6078      	str	r0, [r7, #4]
 800b22a:	6039      	str	r1, [r7, #0]
}
 800b22c:	bf00      	nop
 800b22e:	370c      	adds	r7, #12
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr

0800b238 <_ZN15JUnitTestOutput5printEPKc>:

void JUnitTestOutput::print(const char *output)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b082      	sub	sp, #8
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
    impl_->stdOutput_ += output;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	691b      	ldr	r3, [r3, #16]
 800b246:	3330      	adds	r3, #48	; 0x30
 800b248:	6839      	ldr	r1, [r7, #0]
 800b24a:	4618      	mov	r0, r3
 800b24c:	f003 fae2 	bl	800e814 <_ZN12SimpleStringpLEPKc>
}
 800b250:	bf00      	nop
 800b252:	3708      	adds	r7, #8
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <_ZN15JUnitTestOutput5printEl>:

void JUnitTestOutput::print(long)
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	6039      	str	r1, [r7, #0]
}
 800b262:	bf00      	nop
 800b264:	370c      	adds	r7, #12
 800b266:	46bd      	mov	sp, r7
 800b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26c:	4770      	bx	lr

0800b26e <_ZN15JUnitTestOutput5printEj>:

void JUnitTestOutput::print(size_t)
{
 800b26e:	b480      	push	{r7}
 800b270:	b083      	sub	sp, #12
 800b272:	af00      	add	r7, sp, #0
 800b274:	6078      	str	r0, [r7, #4]
 800b276:	6039      	str	r1, [r7, #0]
}
 800b278:	bf00      	nop
 800b27a:	370c      	adds	r7, #12
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr

0800b284 <_ZN15JUnitTestOutput5flushEv>:

void JUnitTestOutput::flush()
{
 800b284:	b480      	push	{r7}
 800b286:	b083      	sub	sp, #12
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
}
 800b28c:	bf00      	nop
 800b28e:	370c      	adds	r7, #12
 800b290:	46bd      	mov	sp, r7
 800b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b296:	4770      	bx	lr

0800b298 <_ZN15JUnitTestOutput12printFailureERK11TestFailure>:

// LCOV_EXCL_STOP

void JUnitTestOutput::printFailure(const TestFailure& failure)
{
 800b298:	b590      	push	{r4, r7, lr}
 800b29a:	b083      	sub	sp, #12
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	6039      	str	r1, [r7, #0]
    if (impl_->results_.tail_->failure_ == NULLPTR) {
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	691b      	ldr	r3, [r3, #16]
 800b2a6:	6a1b      	ldr	r3, [r3, #32]
 800b2a8:	68db      	ldr	r3, [r3, #12]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d113      	bne.n	800b2d6 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x3e>
        impl_->results_.failureCount_++;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	691b      	ldr	r3, [r3, #16]
 800b2b2:	685a      	ldr	r2, [r3, #4]
 800b2b4:	3201      	adds	r2, #1
 800b2b6:	605a      	str	r2, [r3, #4]
        impl_->results_.tail_->failure_ = new TestFailure(failure);
 800b2b8:	f240 1233 	movw	r2, #307	; 0x133
 800b2bc:	4908      	ldr	r1, [pc, #32]	; (800b2e0 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x48>)
 800b2be:	2034      	movs	r0, #52	; 0x34
 800b2c0:	f000 fa9e 	bl	800b800 <_ZnwjPKci>
 800b2c4:	4604      	mov	r4, r0
 800b2c6:	6839      	ldr	r1, [r7, #0]
 800b2c8:	4620      	mov	r0, r4
 800b2ca:	f004 fd37 	bl	800fd3c <_ZN11TestFailureC1ERKS_>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	691b      	ldr	r3, [r3, #16]
 800b2d2:	6a1b      	ldr	r3, [r3, #32]
 800b2d4:	60dc      	str	r4, [r3, #12]
    }
}
 800b2d6:	bf00      	nop
 800b2d8:	370c      	adds	r7, #12
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd90      	pop	{r4, r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	08025a44 	.word	0x08025a44

0800b2e4 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString>:

void JUnitTestOutput::openFileForWrite(const SimpleString& fileName)
{
 800b2e4:	b5b0      	push	{r4, r5, r7, lr}
 800b2e6:	b082      	sub	sp, #8
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	6039      	str	r1, [r7, #0]
    impl_->file_ = PlatformSpecificFOpen(fileName.asCharString(), "w");
 800b2ee:	4b08      	ldr	r3, [pc, #32]	; (800b310 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x2c>)
 800b2f0:	681d      	ldr	r5, [r3, #0]
 800b2f2:	6838      	ldr	r0, [r7, #0]
 800b2f4:	f003 f9d2 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	691c      	ldr	r4, [r3, #16]
 800b2fe:	4905      	ldr	r1, [pc, #20]	; (800b314 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x30>)
 800b300:	4610      	mov	r0, r2
 800b302:	47a8      	blx	r5
 800b304:	4603      	mov	r3, r0
 800b306:	6263      	str	r3, [r4, #36]	; 0x24
}
 800b308:	bf00      	nop
 800b30a:	3708      	adds	r7, #8
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bdb0      	pop	{r4, r5, r7, pc}
 800b310:	200000b4 	.word	0x200000b4
 800b314:	08025c94 	.word	0x08025c94

0800b318 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString>:

void JUnitTestOutput::writeToFile(const SimpleString& buffer)
{
 800b318:	b590      	push	{r4, r7, lr}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	6039      	str	r1, [r7, #0]
    PlatformSpecificFPuts(buffer.asCharString(), impl_->file_);
 800b322:	4b08      	ldr	r3, [pc, #32]	; (800b344 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString+0x2c>)
 800b324:	681c      	ldr	r4, [r3, #0]
 800b326:	6838      	ldr	r0, [r7, #0]
 800b328:	f003 f9b8 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 800b32c:	4602      	mov	r2, r0
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	691b      	ldr	r3, [r3, #16]
 800b332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b334:	4619      	mov	r1, r3
 800b336:	4610      	mov	r0, r2
 800b338:	47a0      	blx	r4
}
 800b33a:	bf00      	nop
 800b33c:	370c      	adds	r7, #12
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd90      	pop	{r4, r7, pc}
 800b342:	bf00      	nop
 800b344:	200000b8 	.word	0x200000b8

0800b348 <_ZN15JUnitTestOutput9closeFileEv>:

void JUnitTestOutput::closeFile()
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
    PlatformSpecificFClose(impl_->file_);
 800b350:	4b05      	ldr	r3, [pc, #20]	; (800b368 <_ZN15JUnitTestOutput9closeFileEv+0x20>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	687a      	ldr	r2, [r7, #4]
 800b356:	6912      	ldr	r2, [r2, #16]
 800b358:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b35a:	4610      	mov	r0, r2
 800b35c:	4798      	blx	r3
}
 800b35e:	bf00      	nop
 800b360:	3708      	adds	r7, #8
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop
 800b368:	200000bc 	.word	0x200000bc

0800b36c <_ZN10TestPlugin14parseArgumentsEiPKPKci>:
    virtual bool parseArguments(int /* ac */, const char *const * /* av */, int /* index */ )
 800b36c:	b480      	push	{r7}
 800b36e:	b085      	sub	sp, #20
 800b370:	af00      	add	r7, sp, #0
 800b372:	60f8      	str	r0, [r7, #12]
 800b374:	60b9      	str	r1, [r7, #8]
 800b376:	607a      	str	r2, [r7, #4]
 800b378:	603b      	str	r3, [r7, #0]
        return false;
 800b37a:	2300      	movs	r3, #0
    }
 800b37c:	4618      	mov	r0, r3
 800b37e:	3714      	adds	r7, #20
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <_ZN17MemoryLeakFailureD1Ev>:
class SimpleMutex;

class MemoryLeakFailure
{
public:
    virtual ~MemoryLeakFailure()
 800b388:	b480      	push	{r7}
 800b38a:	b083      	sub	sp, #12
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
    {
 800b390:	4a04      	ldr	r2, [pc, #16]	; (800b3a4 <_ZN17MemoryLeakFailureD1Ev+0x1c>)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	601a      	str	r2, [r3, #0]
    }
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	4618      	mov	r0, r3
 800b39a:	370c      	adds	r7, #12
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr
 800b3a4:	08029d5c 	.word	0x08029d5c

0800b3a8 <_ZN17MemoryLeakFailureD0Ev>:
    virtual ~MemoryLeakFailure()
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b082      	sub	sp, #8
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
    }
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f7ff ffe9 	bl	800b388 <_ZN17MemoryLeakFailureD1Ev>
 800b3b6:	2104      	movs	r1, #4
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f000 fa35 	bl	800b828 <_ZdlPvj>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3708      	adds	r7, #8
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <_ZN18MemLeakScopedMutexC1Ev>:
#if CPPUTEST_USE_MEM_LEAK_DETECTION

class MemLeakScopedMutex
{
public:
    MemLeakScopedMutex() : lock(MemoryLeakWarningPlugin::getGlobalDetector()->getMutex()) { }
 800b3c8:	b590      	push	{r4, r7, lr}
 800b3ca:	b083      	sub	sp, #12
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	687c      	ldr	r4, [r7, #4]
 800b3d2:	f000 fc71 	bl	800bcb8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f00c ff6c 	bl	80182b6 <_ZN18MemoryLeakDetector8getMutexEv>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	4620      	mov	r0, r4
 800b3e4:	f002 fb24 	bl	800da30 <_ZN15ScopedMutexLockC1EP11SimpleMutex>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	370c      	adds	r7, #12
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd90      	pop	{r4, r7, pc}

0800b3f2 <_ZN18MemLeakScopedMutexD1Ev>:
class MemLeakScopedMutex
 800b3f2:	b580      	push	{r7, lr}
 800b3f4:	b082      	sub	sp, #8
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	6078      	str	r0, [r7, #4]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f002 fb29 	bl	800da54 <_ZN15ScopedMutexLockD1Ev>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	4618      	mov	r0, r3
 800b406:	3708      	adds	r7, #8
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <_ZL15mem_leak_mallocjPKcj>:
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
}


static void* mem_leak_malloc(size_t size, const char* file, size_t line)
{
 800b40c:	b590      	push	{r4, r7, lr}
 800b40e:	b087      	sub	sp, #28
 800b410:	af02      	add	r7, sp, #8
 800b412:	60f8      	str	r0, [r7, #12]
 800b414:	60b9      	str	r1, [r7, #8]
 800b416:	607a      	str	r2, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentMallocAllocator(), size, file, line, true);
 800b418:	f000 fc4e 	bl	800bcb8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800b41c:	4604      	mov	r4, r0
 800b41e:	f006 f8df 	bl	80115e0 <_Z25getCurrentMallocAllocatorv>
 800b422:	4601      	mov	r1, r0
 800b424:	2301      	movs	r3, #1
 800b426:	9301      	str	r3, [sp, #4]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	9300      	str	r3, [sp, #0]
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	68fa      	ldr	r2, [r7, #12]
 800b430:	4620      	mov	r0, r4
 800b432:	f00d f983 	bl	801873c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800b436:	4603      	mov	r3, r0
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3714      	adds	r7, #20
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd90      	pop	{r4, r7, pc}

0800b440 <_ZL13mem_leak_freePvPKcj>:

static void mem_leak_free(void* buffer, const char* file, size_t line)
{
 800b440:	b590      	push	{r4, r7, lr}
 800b442:	b087      	sub	sp, #28
 800b444:	af02      	add	r7, sp, #8
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	607a      	str	r2, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) buffer);
 800b44c:	f000 fc34 	bl	800bcb8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800b450:	4603      	mov	r3, r0
 800b452:	68f9      	ldr	r1, [r7, #12]
 800b454:	4618      	mov	r0, r3
 800b456:	f00c ffdd 	bl	8018414 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentMallocAllocator(), (char*) buffer, file, line, true);
 800b45a:	f000 fc2d 	bl	800bcb8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800b45e:	4604      	mov	r4, r0
 800b460:	f006 f8be 	bl	80115e0 <_Z25getCurrentMallocAllocatorv>
 800b464:	4601      	mov	r1, r0
 800b466:	2301      	movs	r3, #1
 800b468:	9301      	str	r3, [sp, #4]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	9300      	str	r3, [sp, #0]
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	68fa      	ldr	r2, [r7, #12]
 800b472:	4620      	mov	r0, r4
 800b474:	f00d f996 	bl	80187a4 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 800b478:	bf00      	nop
 800b47a:	3714      	adds	r7, #20
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd90      	pop	{r4, r7, pc}

0800b480 <_ZL16mem_leak_reallocPvjPKcj>:

static void* mem_leak_realloc(void* memory, size_t size, const char* file, size_t line)
{
 800b480:	b590      	push	{r4, r7, lr}
 800b482:	b089      	sub	sp, #36	; 0x24
 800b484:	af04      	add	r7, sp, #16
 800b486:	60f8      	str	r0, [r7, #12]
 800b488:	60b9      	str	r1, [r7, #8]
 800b48a:	607a      	str	r2, [r7, #4]
 800b48c:	603b      	str	r3, [r7, #0]
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
 800b48e:	f000 fc13 	bl	800bcb8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800b492:	4604      	mov	r4, r0
 800b494:	f006 f8a4 	bl	80115e0 <_Z25getCurrentMallocAllocatorv>
 800b498:	4601      	mov	r1, r0
 800b49a:	2301      	movs	r3, #1
 800b49c:	9302      	str	r3, [sp, #8]
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	9301      	str	r3, [sp, #4]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	9300      	str	r3, [sp, #0]
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	68fa      	ldr	r2, [r7, #12]
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	f00d f9de 	bl	801886c <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>
 800b4b0:	4603      	mov	r3, r0
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3714      	adds	r7, #20
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd90      	pop	{r4, r7, pc}
	...

0800b4bc <_ZL13normal_mallocjPKcj>:

#endif

static void* normal_malloc(size_t size, const char*, size_t)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	60f8      	str	r0, [r7, #12]
 800b4c4:	60b9      	str	r1, [r7, #8]
 800b4c6:	607a      	str	r2, [r7, #4]
    return PlatformSpecificMalloc(size);
 800b4c8:	4b04      	ldr	r3, [pc, #16]	; (800b4dc <_ZL13normal_mallocjPKcj+0x20>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	68f8      	ldr	r0, [r7, #12]
 800b4ce:	4798      	blx	r3
 800b4d0:	4603      	mov	r3, r0
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3710      	adds	r7, #16
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
 800b4da:	bf00      	nop
 800b4dc:	200000c8 	.word	0x200000c8

0800b4e0 <_ZL14normal_reallocPvjPKcj>:

static void* normal_realloc(void* memory, size_t size, const char*, size_t)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b084      	sub	sp, #16
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	60f8      	str	r0, [r7, #12]
 800b4e8:	60b9      	str	r1, [r7, #8]
 800b4ea:	607a      	str	r2, [r7, #4]
 800b4ec:	603b      	str	r3, [r7, #0]
    return PlatformSpecificRealloc(memory, size);
 800b4ee:	4b05      	ldr	r3, [pc, #20]	; (800b504 <_ZL14normal_reallocPvjPKcj+0x24>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	68b9      	ldr	r1, [r7, #8]
 800b4f4:	68f8      	ldr	r0, [r7, #12]
 800b4f6:	4798      	blx	r3
 800b4f8:	4603      	mov	r3, r0
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3710      	adds	r7, #16
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}
 800b502:	bf00      	nop
 800b504:	200000cc 	.word	0x200000cc

0800b508 <_ZL11normal_freePvPKcj>:

static void normal_free(void* buffer, const char*, size_t)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	60b9      	str	r1, [r7, #8]
 800b512:	607a      	str	r2, [r7, #4]
    PlatformSpecificFree(buffer);
 800b514:	4b03      	ldr	r3, [pc, #12]	; (800b524 <_ZL11normal_freePvPKcj+0x1c>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	68f8      	ldr	r0, [r7, #12]
 800b51a:	4798      	blx	r3
}
 800b51c:	bf00      	nop
 800b51e:	3710      	adds	r7, #16
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}
 800b524:	200000d0 	.word	0x200000d0

0800b528 <_ZL32threadsafe_mem_leak_operator_newj>:
#else
#define UT_THROW_BAD_ALLOC_WHEN_NULL(memory)
#endif

static void* threadsafe_mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800b528:	b590      	push	{r4, r7, lr}
 800b52a:	b085      	sub	sp, #20
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
    MemLeakScopedMutex lock;
 800b530:	f107 0308 	add.w	r3, r7, #8
 800b534:	4618      	mov	r0, r3
 800b536:	f7ff ff47 	bl	800b3c8 <_ZN18MemLeakScopedMutexC1Ev>
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800b53a:	f000 fbbd 	bl	800bcb8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800b53e:	4604      	mov	r4, r0
 800b540:	f005 ff9e 	bl	8011480 <_Z22getCurrentNewAllocatorv>
 800b544:	4601      	mov	r1, r0
 800b546:	2300      	movs	r3, #0
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	4620      	mov	r0, r4
 800b54c:	f00d f864 	bl	8018618 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800b550:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800b552:	68fc      	ldr	r4, [r7, #12]
    MemLeakScopedMutex lock;
 800b554:	f107 0308 	add.w	r3, r7, #8
 800b558:	4618      	mov	r0, r3
 800b55a:	f7ff ff4a 	bl	800b3f2 <_ZN18MemLeakScopedMutexD1Ev>
    return memory;
 800b55e:	4623      	mov	r3, r4
}
 800b560:	4618      	mov	r0, r3
 800b562:	3714      	adds	r7, #20
 800b564:	46bd      	mov	sp, r7
 800b566:	bd90      	pop	{r4, r7, pc}

0800b568 <_ZL21mem_leak_operator_newj>:
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
}


static void* mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800b568:	b590      	push	{r4, r7, lr}
 800b56a:	b085      	sub	sp, #20
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800b570:	f000 fba2 	bl	800bcb8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800b574:	4604      	mov	r4, r0
 800b576:	f005 ff83 	bl	8011480 <_Z22getCurrentNewAllocatorv>
 800b57a:	4601      	mov	r1, r0
 800b57c:	2300      	movs	r3, #0
 800b57e:	687a      	ldr	r2, [r7, #4]
 800b580:	4620      	mov	r0, r4
 800b582:	f00d f849 	bl	8018618 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800b586:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800b588:	68fb      	ldr	r3, [r7, #12]
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3714      	adds	r7, #20
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd90      	pop	{r4, r7, pc}

0800b592 <_ZL29mem_leak_operator_new_nothrowj>:

static void* mem_leak_operator_new_nothrow (size_t size) UT_NOTHROW
{
 800b592:	b590      	push	{r4, r7, lr}
 800b594:	b083      	sub	sp, #12
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800b59a:	f000 fb8d 	bl	800bcb8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800b59e:	4604      	mov	r4, r0
 800b5a0:	f005 ff6e 	bl	8011480 <_Z22getCurrentNewAllocatorv>
 800b5a4:	4601      	mov	r1, r0
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	4620      	mov	r0, r4
 800b5ac:	f00d f834 	bl	8018618 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800b5b0:	4603      	mov	r3, r0
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	370c      	adds	r7, #12
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd90      	pop	{r4, r7, pc}

0800b5ba <_ZL27mem_leak_operator_new_debugjPKcj>:

static void* mem_leak_operator_new_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 800b5ba:	b590      	push	{r4, r7, lr}
 800b5bc:	b089      	sub	sp, #36	; 0x24
 800b5be:	af02      	add	r7, sp, #8
 800b5c0:	60f8      	str	r0, [r7, #12]
 800b5c2:	60b9      	str	r1, [r7, #8]
 800b5c4:	607a      	str	r2, [r7, #4]
    void *memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size, file, line);
 800b5c6:	f000 fb77 	bl	800bcb8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800b5ca:	4604      	mov	r4, r0
 800b5cc:	f005 ff58 	bl	8011480 <_Z22getCurrentNewAllocatorv>
 800b5d0:	4601      	mov	r1, r0
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	9301      	str	r3, [sp, #4]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	9300      	str	r3, [sp, #0]
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	68fa      	ldr	r2, [r7, #12]
 800b5de:	4620      	mov	r0, r4
 800b5e0:	f00d f8ac 	bl	801873c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800b5e4:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800b5e6:	697b      	ldr	r3, [r7, #20]
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	371c      	adds	r7, #28
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd90      	pop	{r4, r7, pc}

0800b5f0 <_ZL27mem_leak_operator_new_arrayj>:

static void* mem_leak_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 800b5f0:	b590      	push	{r4, r7, lr}
 800b5f2:	b085      	sub	sp, #20
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 800b5f8:	f000 fb5e 	bl	800bcb8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800b5fc:	4604      	mov	r4, r0
 800b5fe:	f005 ff97 	bl	8011530 <_Z27getCurrentNewArrayAllocatorv>
 800b602:	4601      	mov	r1, r0
 800b604:	2300      	movs	r3, #0
 800b606:	687a      	ldr	r2, [r7, #4]
 800b608:	4620      	mov	r0, r4
 800b60a:	f00d f805 	bl	8018618 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800b60e:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800b610:	68fb      	ldr	r3, [r7, #12]
}
 800b612:	4618      	mov	r0, r3
 800b614:	3714      	adds	r7, #20
 800b616:	46bd      	mov	sp, r7
 800b618:	bd90      	pop	{r4, r7, pc}

0800b61a <_ZL35mem_leak_operator_new_array_nothrowj>:

static void* mem_leak_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 800b61a:	b590      	push	{r4, r7, lr}
 800b61c:	b083      	sub	sp, #12
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 800b622:	f000 fb49 	bl	800bcb8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800b626:	4604      	mov	r4, r0
 800b628:	f005 ff82 	bl	8011530 <_Z27getCurrentNewArrayAllocatorv>
 800b62c:	4601      	mov	r1, r0
 800b62e:	2300      	movs	r3, #0
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	4620      	mov	r0, r4
 800b634:	f00c fff0 	bl	8018618 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800b638:	4603      	mov	r3, r0
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	370c      	adds	r7, #12
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd90      	pop	{r4, r7, pc}

0800b642 <_ZL33mem_leak_operator_new_array_debugjPKcj>:

static void* mem_leak_operator_new_array_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 800b642:	b590      	push	{r4, r7, lr}
 800b644:	b089      	sub	sp, #36	; 0x24
 800b646:	af02      	add	r7, sp, #8
 800b648:	60f8      	str	r0, [r7, #12]
 800b64a:	60b9      	str	r1, [r7, #8]
 800b64c:	607a      	str	r2, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size, file, line);
 800b64e:	f000 fb33 	bl	800bcb8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800b652:	4604      	mov	r4, r0
 800b654:	f005 ff6c 	bl	8011530 <_Z27getCurrentNewArrayAllocatorv>
 800b658:	4601      	mov	r1, r0
 800b65a:	2300      	movs	r3, #0
 800b65c:	9301      	str	r3, [sp, #4]
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	9300      	str	r3, [sp, #0]
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	68fa      	ldr	r2, [r7, #12]
 800b666:	4620      	mov	r0, r4
 800b668:	f00d f868 	bl	801873c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800b66c:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800b66e:	697b      	ldr	r3, [r7, #20]
}
 800b670:	4618      	mov	r0, r3
 800b672:	371c      	adds	r7, #28
 800b674:	46bd      	mov	sp, r7
 800b676:	bd90      	pop	{r4, r7, pc}

0800b678 <_ZL24mem_leak_operator_deletePv>:

static void mem_leak_operator_delete (void* mem) UT_NOTHROW
{
 800b678:	b590      	push	{r4, r7, lr}
 800b67a:	b083      	sub	sp, #12
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 800b680:	f000 fb1a 	bl	800bcb8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800b684:	4603      	mov	r3, r0
 800b686:	6879      	ldr	r1, [r7, #4]
 800b688:	4618      	mov	r0, r3
 800b68a:	f00c fec3 	bl	8018414 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewAllocator(), (char*) mem);
 800b68e:	f000 fb13 	bl	800bcb8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800b692:	4604      	mov	r4, r0
 800b694:	f005 fef4 	bl	8011480 <_Z22getCurrentNewAllocatorv>
 800b698:	4601      	mov	r1, r0
 800b69a:	2300      	movs	r3, #0
 800b69c:	687a      	ldr	r2, [r7, #4]
 800b69e:	4620      	mov	r0, r4
 800b6a0:	f00d f8ca 	bl	8018838 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 800b6a4:	bf00      	nop
 800b6a6:	370c      	adds	r7, #12
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd90      	pop	{r4, r7, pc}

0800b6ac <_ZL30mem_leak_operator_delete_arrayPv>:

static void mem_leak_operator_delete_array (void* mem) UT_NOTHROW
{
 800b6ac:	b590      	push	{r4, r7, lr}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 800b6b4:	f000 fb00 	bl	800bcb8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	6879      	ldr	r1, [r7, #4]
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f00c fea9 	bl	8018414 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
 800b6c2:	f000 faf9 	bl	800bcb8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800b6c6:	4604      	mov	r4, r0
 800b6c8:	f005 ff32 	bl	8011530 <_Z27getCurrentNewArrayAllocatorv>
 800b6cc:	4601      	mov	r1, r0
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	4620      	mov	r0, r4
 800b6d4:	f00d f8b0 	bl	8018838 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 800b6d8:	bf00      	nop
 800b6da:	370c      	adds	r7, #12
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd90      	pop	{r4, r7, pc}

0800b6e0 <_ZL19normal_operator_newj>:

static void* normal_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800b6e8:	4b04      	ldr	r3, [pc, #16]	; (800b6fc <_ZL19normal_operator_newj+0x1c>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	4798      	blx	r3
 800b6f0:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3710      	adds	r7, #16
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}
 800b6fc:	200000c8 	.word	0x200000c8

0800b700 <_ZL27normal_operator_new_nothrowj>:

static void* normal_operator_new_nothrow (size_t size) UT_NOTHROW
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b082      	sub	sp, #8
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 800b708:	4b04      	ldr	r3, [pc, #16]	; (800b71c <_ZL27normal_operator_new_nothrowj+0x1c>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	4798      	blx	r3
 800b710:	4603      	mov	r3, r0
}
 800b712:	4618      	mov	r0, r3
 800b714:	3708      	adds	r7, #8
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
 800b71a:	bf00      	nop
 800b71c:	200000c8 	.word	0x200000c8

0800b720 <_ZL25normal_operator_new_debugjPKcj>:

static void* normal_operator_new_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b086      	sub	sp, #24
 800b724:	af00      	add	r7, sp, #0
 800b726:	60f8      	str	r0, [r7, #12]
 800b728:	60b9      	str	r1, [r7, #8]
 800b72a:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800b72c:	4b04      	ldr	r3, [pc, #16]	; (800b740 <_ZL25normal_operator_new_debugjPKcj+0x20>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	68f8      	ldr	r0, [r7, #12]
 800b732:	4798      	blx	r3
 800b734:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800b736:	697b      	ldr	r3, [r7, #20]
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3718      	adds	r7, #24
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}
 800b740:	200000c8 	.word	0x200000c8

0800b744 <_ZL25normal_operator_new_arrayj>:

static void* normal_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800b74c:	4b04      	ldr	r3, [pc, #16]	; (800b760 <_ZL25normal_operator_new_arrayj+0x1c>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	4798      	blx	r3
 800b754:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800b756:	68fb      	ldr	r3, [r7, #12]
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3710      	adds	r7, #16
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}
 800b760:	200000c8 	.word	0x200000c8

0800b764 <_ZL33normal_operator_new_array_nothrowj>:

static void* normal_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b082      	sub	sp, #8
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 800b76c:	4b04      	ldr	r3, [pc, #16]	; (800b780 <_ZL33normal_operator_new_array_nothrowj+0x1c>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	4798      	blx	r3
 800b774:	4603      	mov	r3, r0
}
 800b776:	4618      	mov	r0, r3
 800b778:	3708      	adds	r7, #8
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	200000c8 	.word	0x200000c8

0800b784 <_ZL31normal_operator_new_array_debugjPKcj>:

static void* normal_operator_new_array_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b086      	sub	sp, #24
 800b788:	af00      	add	r7, sp, #0
 800b78a:	60f8      	str	r0, [r7, #12]
 800b78c:	60b9      	str	r1, [r7, #8]
 800b78e:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800b790:	4b04      	ldr	r3, [pc, #16]	; (800b7a4 <_ZL31normal_operator_new_array_debugjPKcj+0x20>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	68f8      	ldr	r0, [r7, #12]
 800b796:	4798      	blx	r3
 800b798:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800b79a:	697b      	ldr	r3, [r7, #20]
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3718      	adds	r7, #24
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}
 800b7a4:	200000c8 	.word	0x200000c8

0800b7a8 <_ZL22normal_operator_deletePv>:

static void normal_operator_delete (void* mem) UT_NOTHROW
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 800b7b0:	4b03      	ldr	r3, [pc, #12]	; (800b7c0 <_ZL22normal_operator_deletePv+0x18>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	4798      	blx	r3
}
 800b7b8:	bf00      	nop
 800b7ba:	3708      	adds	r7, #8
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}
 800b7c0:	200000d0 	.word	0x200000d0

0800b7c4 <_ZL28normal_operator_delete_arrayPv>:

static void normal_operator_delete_array (void* mem) UT_NOTHROW
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b082      	sub	sp, #8
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 800b7cc:	4b03      	ldr	r3, [pc, #12]	; (800b7dc <_ZL28normal_operator_delete_arrayPv+0x18>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	4798      	blx	r3
}
 800b7d4:	bf00      	nop
 800b7d6:	3708      	adds	r7, #8
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}
 800b7dc:	200000d0 	.word	0x200000d0

0800b7e0 <_Znwj>:
static void (*saved_operator_delete_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete;
static void (*saved_operator_delete_array_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete_array;
static int save_counter = 0;

void* operator new(size_t size) UT_THROW(std::bad_alloc)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b082      	sub	sp, #8
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
    return operator_new_fptr(size);
 800b7e8:	4b04      	ldr	r3, [pc, #16]	; (800b7fc <_Znwj+0x1c>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	4798      	blx	r3
 800b7f0:	4603      	mov	r3, r0
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3708      	adds	r7, #8
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
 800b7fa:	bf00      	nop
 800b7fc:	2000002c 	.word	0x2000002c

0800b800 <_ZnwjPKci>:

void* operator new(size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b084      	sub	sp, #16
 800b804:	af00      	add	r7, sp, #0
 800b806:	60f8      	str	r0, [r7, #12]
 800b808:	60b9      	str	r1, [r7, #8]
 800b80a:	607a      	str	r2, [r7, #4]
    return operator_new_debug_fptr(size, file, (size_t)line);
 800b80c:	4b05      	ldr	r3, [pc, #20]	; (800b824 <_ZnwjPKci+0x24>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	687a      	ldr	r2, [r7, #4]
 800b812:	68b9      	ldr	r1, [r7, #8]
 800b814:	68f8      	ldr	r0, [r7, #12]
 800b816:	4798      	blx	r3
 800b818:	4603      	mov	r3, r0
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3710      	adds	r7, #16
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop
 800b824:	20000034 	.word	0x20000034

0800b828 <_ZdlPvj>:
    operator_delete_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete (void* mem, size_t) UT_NOTHROW
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	6039      	str	r1, [r7, #0]
    operator_delete_fptr(mem);
 800b832:	4b04      	ldr	r3, [pc, #16]	; (800b844 <_ZdlPvj+0x1c>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	4798      	blx	r3
}
 800b83a:	bf00      	nop
 800b83c:	3708      	adds	r7, #8
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
 800b842:	bf00      	nop
 800b844:	20000044 	.word	0x20000044

0800b848 <_ZnajPKci>:
{
    return operator_new_array_fptr(size);
}

void* operator new [](size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	60f8      	str	r0, [r7, #12]
 800b850:	60b9      	str	r1, [r7, #8]
 800b852:	607a      	str	r2, [r7, #4]
    return operator_new_array_debug_fptr(size, file, (size_t)line);
 800b854:	4b05      	ldr	r3, [pc, #20]	; (800b86c <_ZnajPKci+0x24>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	687a      	ldr	r2, [r7, #4]
 800b85a:	68b9      	ldr	r1, [r7, #8]
 800b85c:	68f8      	ldr	r0, [r7, #12]
 800b85e:	4798      	blx	r3
 800b860:	4603      	mov	r3, r0
}
 800b862:	4618      	mov	r0, r3
 800b864:	3710      	adds	r7, #16
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}
 800b86a:	bf00      	nop
 800b86c:	20000040 	.word	0x20000040

0800b870 <_ZdaPv>:
{
    return operator_new_array_debug_fptr(size, file, line);
}

void operator delete[](void* mem) UT_NOTHROW
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
     operator_delete_array_fptr(mem);
 800b878:	4b03      	ldr	r3, [pc, #12]	; (800b888 <_ZdaPv+0x18>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	4798      	blx	r3
}
 800b880:	bf00      	nop
 800b882:	3708      	adds	r7, #8
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}
 800b888:	20000048 	.word	0x20000048

0800b88c <_ZdaPvj>:
     operator_delete_array_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete[] (void* mem, size_t) UT_NOTHROW
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b082      	sub	sp, #8
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	6039      	str	r1, [r7, #0]
     operator_delete_array_fptr(mem);
 800b896:	4b04      	ldr	r3, [pc, #16]	; (800b8a8 <_ZdaPvj+0x1c>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	4798      	blx	r3
}
 800b89e:	bf00      	nop
 800b8a0:	3708      	adds	r7, #8
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop
 800b8a8:	20000048 	.word	0x20000048

0800b8ac <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>:

#endif
#endif

void MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    operator_new_fptr = normal_operator_new;
 800b8b0:	4b12      	ldr	r3, [pc, #72]	; (800b8fc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x50>)
 800b8b2:	4a13      	ldr	r2, [pc, #76]	; (800b900 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x54>)
 800b8b4:	601a      	str	r2, [r3, #0]
    operator_new_nothrow_fptr = normal_operator_new_nothrow;
 800b8b6:	4b13      	ldr	r3, [pc, #76]	; (800b904 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x58>)
 800b8b8:	4a13      	ldr	r2, [pc, #76]	; (800b908 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x5c>)
 800b8ba:	601a      	str	r2, [r3, #0]
    operator_new_debug_fptr = normal_operator_new_debug;
 800b8bc:	4b13      	ldr	r3, [pc, #76]	; (800b90c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x60>)
 800b8be:	4a14      	ldr	r2, [pc, #80]	; (800b910 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x64>)
 800b8c0:	601a      	str	r2, [r3, #0]
    operator_new_array_fptr = normal_operator_new_array;
 800b8c2:	4b14      	ldr	r3, [pc, #80]	; (800b914 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x68>)
 800b8c4:	4a14      	ldr	r2, [pc, #80]	; (800b918 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x6c>)
 800b8c6:	601a      	str	r2, [r3, #0]
    operator_new_array_nothrow_fptr = normal_operator_new_array_nothrow;
 800b8c8:	4b14      	ldr	r3, [pc, #80]	; (800b91c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x70>)
 800b8ca:	4a15      	ldr	r2, [pc, #84]	; (800b920 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x74>)
 800b8cc:	601a      	str	r2, [r3, #0]
    operator_new_array_debug_fptr = normal_operator_new_array_debug;
 800b8ce:	4b15      	ldr	r3, [pc, #84]	; (800b924 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x78>)
 800b8d0:	4a15      	ldr	r2, [pc, #84]	; (800b928 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x7c>)
 800b8d2:	601a      	str	r2, [r3, #0]
    operator_delete_fptr = normal_operator_delete;
 800b8d4:	4b15      	ldr	r3, [pc, #84]	; (800b92c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x80>)
 800b8d6:	4a16      	ldr	r2, [pc, #88]	; (800b930 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x84>)
 800b8d8:	601a      	str	r2, [r3, #0]
    operator_delete_array_fptr = normal_operator_delete_array;
 800b8da:	4b16      	ldr	r3, [pc, #88]	; (800b934 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x88>)
 800b8dc:	4a16      	ldr	r2, [pc, #88]	; (800b938 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x8c>)
 800b8de:	601a      	str	r2, [r3, #0]
    malloc_fptr = normal_malloc;
 800b8e0:	4b16      	ldr	r3, [pc, #88]	; (800b93c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x90>)
 800b8e2:	4a17      	ldr	r2, [pc, #92]	; (800b940 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x94>)
 800b8e4:	601a      	str	r2, [r3, #0]
    realloc_fptr = normal_realloc;
 800b8e6:	4b17      	ldr	r3, [pc, #92]	; (800b944 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x98>)
 800b8e8:	4a17      	ldr	r2, [pc, #92]	; (800b948 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x9c>)
 800b8ea:	601a      	str	r2, [r3, #0]
    free_fptr = normal_free;
 800b8ec:	4b17      	ldr	r3, [pc, #92]	; (800b94c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa0>)
 800b8ee:	4a18      	ldr	r2, [pc, #96]	; (800b950 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa4>)
 800b8f0:	601a      	str	r2, [r3, #0]

#endif
}
 800b8f2:	bf00      	nop
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr
 800b8fc:	2000002c 	.word	0x2000002c
 800b900:	0800b6e1 	.word	0x0800b6e1
 800b904:	20000030 	.word	0x20000030
 800b908:	0800b701 	.word	0x0800b701
 800b90c:	20000034 	.word	0x20000034
 800b910:	0800b721 	.word	0x0800b721
 800b914:	20000038 	.word	0x20000038
 800b918:	0800b745 	.word	0x0800b745
 800b91c:	2000003c 	.word	0x2000003c
 800b920:	0800b765 	.word	0x0800b765
 800b924:	20000040 	.word	0x20000040
 800b928:	0800b785 	.word	0x0800b785
 800b92c:	20000044 	.word	0x20000044
 800b930:	0800b7a9 	.word	0x0800b7a9
 800b934:	20000048 	.word	0x20000048
 800b938:	0800b7c5 	.word	0x0800b7c5
 800b93c:	20000014 	.word	0x20000014
 800b940:	0800b4bd 	.word	0x0800b4bd
 800b944:	2000001c 	.word	0x2000001c
 800b948:	0800b4e1 	.word	0x0800b4e1
 800b94c:	20000018 	.word	0x20000018
 800b950:	0800b509 	.word	0x0800b509

0800b954 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>:
    free_fptr = threadsafe_mem_leak_free;
#endif
}

bool MemoryLeakWarningPlugin::areNewDeleteOverloaded()
{
 800b954:	b480      	push	{r7}
 800b956:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    return operator_new_fptr == mem_leak_operator_new || operator_new_fptr == threadsafe_mem_leak_operator_new;
 800b958:	4b08      	ldr	r3, [pc, #32]	; (800b97c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4a08      	ldr	r2, [pc, #32]	; (800b980 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x2c>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d004      	beq.n	800b96c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x18>
 800b962:	4b06      	ldr	r3, [pc, #24]	; (800b97c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4a07      	ldr	r2, [pc, #28]	; (800b984 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x30>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d101      	bne.n	800b970 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1c>
 800b96c:	2301      	movs	r3, #1
 800b96e:	e000      	b.n	800b972 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1e>
 800b970:	2300      	movs	r3, #0
#else
    return false;
#endif
}
 800b972:	4618      	mov	r0, r3
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr
 800b97c:	2000002c 	.word	0x2000002c
 800b980:	0800b569 	.word	0x0800b569
 800b984:	0800b529 	.word	0x0800b529

0800b988 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (++save_counter > 1) return;
 800b98c:	4b1f      	ldr	r3, [pc, #124]	; (800ba0c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	3301      	adds	r3, #1
 800b992:	4a1e      	ldr	r2, [pc, #120]	; (800ba0c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800b994:	6013      	str	r3, [r2, #0]
 800b996:	4b1d      	ldr	r3, [pc, #116]	; (800ba0c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	2b01      	cmp	r3, #1
 800b99c:	bfcc      	ite	gt
 800b99e:	2301      	movgt	r3, #1
 800b9a0:	2300      	movle	r3, #0
 800b9a2:	b2db      	uxtb	r3, r3
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d12e      	bne.n	800ba06 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x7e>
    saved_operator_new_fptr = operator_new_fptr;
 800b9a8:	4b19      	ldr	r3, [pc, #100]	; (800ba10 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x88>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4a19      	ldr	r2, [pc, #100]	; (800ba14 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x8c>)
 800b9ae:	6013      	str	r3, [r2, #0]
    saved_operator_new_nothrow_fptr = operator_new_nothrow_fptr;
 800b9b0:	4b19      	ldr	r3, [pc, #100]	; (800ba18 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x90>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4a19      	ldr	r2, [pc, #100]	; (800ba1c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x94>)
 800b9b6:	6013      	str	r3, [r2, #0]
    saved_operator_new_debug_fptr = operator_new_debug_fptr;
 800b9b8:	4b19      	ldr	r3, [pc, #100]	; (800ba20 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x98>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	4a19      	ldr	r2, [pc, #100]	; (800ba24 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x9c>)
 800b9be:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_fptr = operator_new_array_fptr;
 800b9c0:	4b19      	ldr	r3, [pc, #100]	; (800ba28 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa0>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4a19      	ldr	r2, [pc, #100]	; (800ba2c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa4>)
 800b9c6:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_nothrow_fptr = operator_new_array_nothrow_fptr;
 800b9c8:	4b19      	ldr	r3, [pc, #100]	; (800ba30 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa8>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	4a19      	ldr	r2, [pc, #100]	; (800ba34 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xac>)
 800b9ce:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_debug_fptr = operator_new_array_debug_fptr;
 800b9d0:	4b19      	ldr	r3, [pc, #100]	; (800ba38 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb0>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	4a19      	ldr	r2, [pc, #100]	; (800ba3c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb4>)
 800b9d6:	6013      	str	r3, [r2, #0]
    saved_operator_delete_fptr = operator_delete_fptr;
 800b9d8:	4b19      	ldr	r3, [pc, #100]	; (800ba40 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb8>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4a19      	ldr	r2, [pc, #100]	; (800ba44 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xbc>)
 800b9de:	6013      	str	r3, [r2, #0]
    saved_operator_delete_array_fptr = operator_delete_array_fptr;
 800b9e0:	4b19      	ldr	r3, [pc, #100]	; (800ba48 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc0>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4a19      	ldr	r2, [pc, #100]	; (800ba4c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc4>)
 800b9e6:	6013      	str	r3, [r2, #0]
    saved_malloc_fptr = malloc_fptr;
 800b9e8:	4b19      	ldr	r3, [pc, #100]	; (800ba50 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc8>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4a19      	ldr	r2, [pc, #100]	; (800ba54 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xcc>)
 800b9ee:	6013      	str	r3, [r2, #0]
    saved_realloc_fptr = realloc_fptr;
 800b9f0:	4b19      	ldr	r3, [pc, #100]	; (800ba58 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd0>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a19      	ldr	r2, [pc, #100]	; (800ba5c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd4>)
 800b9f6:	6013      	str	r3, [r2, #0]
    saved_free_fptr = free_fptr;
 800b9f8:	4b19      	ldr	r3, [pc, #100]	; (800ba60 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd8>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	4a19      	ldr	r2, [pc, #100]	; (800ba64 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xdc>)
 800b9fe:	6013      	str	r3, [r2, #0]
    turnOffNewDeleteOverloads();
 800ba00:	f7ff ff54 	bl	800b8ac <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
 800ba04:	e000      	b.n	800ba08 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x80>
    if (++save_counter > 1) return;
 800ba06:	bf00      	nop
#endif
}
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	20000908 	.word	0x20000908
 800ba10:	2000002c 	.word	0x2000002c
 800ba14:	2000004c 	.word	0x2000004c
 800ba18:	20000030 	.word	0x20000030
 800ba1c:	20000050 	.word	0x20000050
 800ba20:	20000034 	.word	0x20000034
 800ba24:	20000054 	.word	0x20000054
 800ba28:	20000038 	.word	0x20000038
 800ba2c:	20000058 	.word	0x20000058
 800ba30:	2000003c 	.word	0x2000003c
 800ba34:	2000005c 	.word	0x2000005c
 800ba38:	20000040 	.word	0x20000040
 800ba3c:	20000060 	.word	0x20000060
 800ba40:	20000044 	.word	0x20000044
 800ba44:	20000064 	.word	0x20000064
 800ba48:	20000048 	.word	0x20000048
 800ba4c:	20000068 	.word	0x20000068
 800ba50:	20000014 	.word	0x20000014
 800ba54:	20000020 	.word	0x20000020
 800ba58:	2000001c 	.word	0x2000001c
 800ba5c:	20000028 	.word	0x20000028
 800ba60:	20000018 	.word	0x20000018
 800ba64:	20000024 	.word	0x20000024

0800ba68 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::restoreNewDeleteOverloads()
{
 800ba68:	b480      	push	{r7}
 800ba6a:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (--save_counter > 0) return;
 800ba6c:	4b1f      	ldr	r3, [pc, #124]	; (800baec <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	3b01      	subs	r3, #1
 800ba72:	4a1e      	ldr	r2, [pc, #120]	; (800baec <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800ba74:	6013      	str	r3, [r2, #0]
 800ba76:	4b1d      	ldr	r3, [pc, #116]	; (800baec <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	bfcc      	ite	gt
 800ba7e:	2301      	movgt	r3, #1
 800ba80:	2300      	movle	r3, #0
 800ba82:	b2db      	uxtb	r3, r3
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d12c      	bne.n	800bae2 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7a>
    operator_new_fptr = saved_operator_new_fptr;
 800ba88:	4b19      	ldr	r3, [pc, #100]	; (800baf0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x88>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	4a19      	ldr	r2, [pc, #100]	; (800baf4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x8c>)
 800ba8e:	6013      	str	r3, [r2, #0]
    operator_new_nothrow_fptr = saved_operator_new_nothrow_fptr;
 800ba90:	4b19      	ldr	r3, [pc, #100]	; (800baf8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x90>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	4a19      	ldr	r2, [pc, #100]	; (800bafc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x94>)
 800ba96:	6013      	str	r3, [r2, #0]
    operator_new_debug_fptr = saved_operator_new_debug_fptr;
 800ba98:	4b19      	ldr	r3, [pc, #100]	; (800bb00 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x98>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	4a19      	ldr	r2, [pc, #100]	; (800bb04 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x9c>)
 800ba9e:	6013      	str	r3, [r2, #0]
    operator_new_array_fptr = saved_operator_new_array_fptr;
 800baa0:	4b19      	ldr	r3, [pc, #100]	; (800bb08 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa0>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4a19      	ldr	r2, [pc, #100]	; (800bb0c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa4>)
 800baa6:	6013      	str	r3, [r2, #0]
    operator_new_array_nothrow_fptr = saved_operator_new_array_nothrow_fptr;
 800baa8:	4b19      	ldr	r3, [pc, #100]	; (800bb10 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa8>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4a19      	ldr	r2, [pc, #100]	; (800bb14 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xac>)
 800baae:	6013      	str	r3, [r2, #0]
    operator_new_array_debug_fptr = saved_operator_new_array_debug_fptr;
 800bab0:	4b19      	ldr	r3, [pc, #100]	; (800bb18 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb0>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	4a19      	ldr	r2, [pc, #100]	; (800bb1c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb4>)
 800bab6:	6013      	str	r3, [r2, #0]
    operator_delete_fptr = saved_operator_delete_fptr;
 800bab8:	4b19      	ldr	r3, [pc, #100]	; (800bb20 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb8>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	4a19      	ldr	r2, [pc, #100]	; (800bb24 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xbc>)
 800babe:	6013      	str	r3, [r2, #0]
    operator_delete_array_fptr = saved_operator_delete_array_fptr;
 800bac0:	4b19      	ldr	r3, [pc, #100]	; (800bb28 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc0>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	4a19      	ldr	r2, [pc, #100]	; (800bb2c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc4>)
 800bac6:	6013      	str	r3, [r2, #0]
    malloc_fptr = saved_malloc_fptr;
 800bac8:	4b19      	ldr	r3, [pc, #100]	; (800bb30 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc8>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	4a19      	ldr	r2, [pc, #100]	; (800bb34 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xcc>)
 800bace:	6013      	str	r3, [r2, #0]
    realloc_fptr = saved_realloc_fptr;
 800bad0:	4b19      	ldr	r3, [pc, #100]	; (800bb38 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd0>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	4a19      	ldr	r2, [pc, #100]	; (800bb3c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd4>)
 800bad6:	6013      	str	r3, [r2, #0]
    free_fptr = saved_free_fptr;
 800bad8:	4b19      	ldr	r3, [pc, #100]	; (800bb40 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd8>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	4a19      	ldr	r2, [pc, #100]	; (800bb44 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xdc>)
 800bade:	6013      	str	r3, [r2, #0]
 800bae0:	e000      	b.n	800bae4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7c>
    if (--save_counter > 0) return;
 800bae2:	bf00      	nop
#endif
}
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr
 800baec:	20000908 	.word	0x20000908
 800baf0:	2000004c 	.word	0x2000004c
 800baf4:	2000002c 	.word	0x2000002c
 800baf8:	20000050 	.word	0x20000050
 800bafc:	20000030 	.word	0x20000030
 800bb00:	20000054 	.word	0x20000054
 800bb04:	20000034 	.word	0x20000034
 800bb08:	20000058 	.word	0x20000058
 800bb0c:	20000038 	.word	0x20000038
 800bb10:	2000005c 	.word	0x2000005c
 800bb14:	2000003c 	.word	0x2000003c
 800bb18:	20000060 	.word	0x20000060
 800bb1c:	20000040 	.word	0x20000040
 800bb20:	20000064 	.word	0x20000064
 800bb24:	20000044 	.word	0x20000044
 800bb28:	20000068 	.word	0x20000068
 800bb2c:	20000048 	.word	0x20000048
 800bb30:	20000020 	.word	0x20000020
 800bb34:	20000014 	.word	0x20000014
 800bb38:	20000028 	.word	0x20000028
 800bb3c:	2000001c 	.word	0x2000001c
 800bb40:	20000024 	.word	0x20000024
 800bb44:	20000018 	.word	0x20000018

0800bb48 <_ZN25MemoryLeakWarningReporterD1Ev>:
}

class MemoryLeakWarningReporter: public MemoryLeakFailure
{
public:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b082      	sub	sp, #8
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
    {
 800bb50:	4a05      	ldr	r2, [pc, #20]	; (800bb68 <_ZN25MemoryLeakWarningReporterD1Ev+0x20>)
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	601a      	str	r2, [r3, #0]
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f7ff fc15 	bl	800b388 <_ZN17MemoryLeakFailureD1Ev>
    }
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	4618      	mov	r0, r3
 800bb62:	3708      	adds	r7, #8
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}
 800bb68:	08029d48 	.word	0x08029d48

0800bb6c <_ZN25MemoryLeakWarningReporterD0Ev>:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b082      	sub	sp, #8
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
    }
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f7ff ffe7 	bl	800bb48 <_ZN25MemoryLeakWarningReporterD1Ev>
 800bb7a:	2104      	movs	r1, #4
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f7ff fe53 	bl	800b828 <_ZdlPvj>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	4618      	mov	r0, r3
 800bb86:	3708      	adds	r7, #8
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <_ZN14TestTerminatorC1Ev>:
    virtual void testBody();
};

//////////////////// TestTerminator

class TestTerminator
 800bb8c:	b480      	push	{r7}
 800bb8e:	b083      	sub	sp, #12
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	4a04      	ldr	r2, [pc, #16]	; (800bba8 <_ZN14TestTerminatorC1Ev+0x1c>)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	601a      	str	r2, [r3, #0]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	370c      	adds	r7, #12
 800bba0:	46bd      	mov	sp, r7
 800bba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba6:	4770      	bx	lr
 800bba8:	0802a6f4 	.word	0x0802a6f4

0800bbac <_ZN31TestTerminatorWithoutExceptionsC1Ev>:
public:
    virtual void exitCurrentTest() const _override;
    virtual ~NormalTestTerminator() _destructor_override;
};

class TestTerminatorWithoutExceptions  : public TestTerminator
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b082      	sub	sp, #8
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7ff ffe8 	bl	800bb8c <_ZN14TestTerminatorC1Ev>
 800bbbc:	4a03      	ldr	r2, [pc, #12]	; (800bbcc <_ZN31TestTerminatorWithoutExceptionsC1Ev+0x20>)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	601a      	str	r2, [r3, #0]
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3708      	adds	r7, #8
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}
 800bbcc:	0802a6cc 	.word	0x0802a6cc

0800bbd0 <_ZN25MemoryLeakWarningReporter4failEPc>:

    virtual void fail(char* fail_string) _override
 800bbd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbd2:	b099      	sub	sp, #100	; 0x64
 800bbd4:	af02      	add	r7, sp, #8
 800bbd6:	6078      	str	r0, [r7, #4]
 800bbd8:	6039      	str	r1, [r7, #0]
    {
        UtestShell* currentTest = UtestShell::getCurrent();
 800bbda:	f009 fdb7 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 800bbde:	6578      	str	r0, [r7, #84]	; 0x54
        currentTest->failWith(FailFailure(currentTest, currentTest->getName().asCharString(), currentTest->getLineNumber(), fail_string), TestTerminatorWithoutExceptions());
 800bbe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	339c      	adds	r3, #156	; 0x9c
 800bbe6:	681c      	ldr	r4, [r3, #0]
 800bbe8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bbec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f008 fbc4 	bl	801437c <_ZNK10UtestShell7getNameEv>
 800bbf4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f002 fd4f 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 800bbfe:	4605      	mov	r5, r0
 800bc00:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800bc02:	f008 fc9b 	bl	801453c <_ZNK10UtestShell13getLineNumberEv>
 800bc06:	4606      	mov	r6, r0
 800bc08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bc0c:	6839      	ldr	r1, [r7, #0]
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f002 f9b9 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800bc14:	f107 000c 	add.w	r0, r7, #12
 800bc18:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bc1c:	9300      	str	r3, [sp, #0]
 800bc1e:	4633      	mov	r3, r6
 800bc20:	462a      	mov	r2, r5
 800bc22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bc24:	f004 fd14 	bl	8010650 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 800bc28:	2300      	movs	r3, #0
 800bc2a:	653b      	str	r3, [r7, #80]	; 0x50
 800bc2c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bc30:	4618      	mov	r0, r3
 800bc32:	f7ff ffbb 	bl	800bbac <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 800bc36:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800bc3a:	f107 030c 	add.w	r3, r7, #12
 800bc3e:	4619      	mov	r1, r3
 800bc40:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800bc42:	47a0      	blx	r4
 800bc44:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f009 fe79 	bl	8015940 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 800bc4e:	f107 030c 	add.w	r3, r7, #12
 800bc52:	4618      	mov	r0, r3
 800bc54:	f000 f9ac 	bl	800bfb0 <_ZN11FailFailureD1Ev>
 800bc58:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f002 fd4a 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800bc62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bc66:	4618      	mov	r0, r3
 800bc68:	f002 fd45 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    } // LCOV_EXCL_LINE
 800bc6c:	bf00      	nop
 800bc6e:	375c      	adds	r7, #92	; 0x5c
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bc74 <_ZN17MemoryLeakFailureC1Ev>:
class MemoryLeakFailure
 800bc74:	b480      	push	{r7}
 800bc76:	b083      	sub	sp, #12
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	4a04      	ldr	r2, [pc, #16]	; (800bc90 <_ZN17MemoryLeakFailureC1Ev+0x1c>)
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	601a      	str	r2, [r3, #0]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	4618      	mov	r0, r3
 800bc86:	370c      	adds	r7, #12
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr
 800bc90:	08029d5c 	.word	0x08029d5c

0800bc94 <_ZN25MemoryLeakWarningReporterC1Ev>:
class MemoryLeakWarningReporter: public MemoryLeakFailure
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f7ff ffe8 	bl	800bc74 <_ZN17MemoryLeakFailureC1Ev>
 800bca4:	4a03      	ldr	r2, [pc, #12]	; (800bcb4 <_ZN25MemoryLeakWarningReporterC1Ev+0x20>)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	601a      	str	r2, [r3, #0]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	4618      	mov	r0, r3
 800bcae:	3708      	adds	r7, #8
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}
 800bcb4:	08029d48 	.word	0x08029d48

0800bcb8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>:

static MemoryLeakFailure* globalReporter = NULLPTR;
static MemoryLeakDetector* globalDetector = NULLPTR;

MemoryLeakDetector* MemoryLeakWarningPlugin::getGlobalDetector()
{
 800bcb8:	b598      	push	{r3, r4, r7, lr}
 800bcba:	af00      	add	r7, sp, #0
    if (globalDetector == NULLPTR) {
 800bcbc:	4b11      	ldr	r3, [pc, #68]	; (800bd04 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d11b      	bne.n	800bcfc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x44>
        saveAndDisableNewDeleteOverloads();
 800bcc4:	f7ff fe60 	bl	800b988 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>

        globalReporter = new MemoryLeakWarningReporter;
 800bcc8:	2004      	movs	r0, #4
 800bcca:	f7ff fd89 	bl	800b7e0 <_Znwj>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	461c      	mov	r4, r3
 800bcd2:	4620      	mov	r0, r4
 800bcd4:	f7ff ffde 	bl	800bc94 <_ZN25MemoryLeakWarningReporterC1Ev>
 800bcd8:	4b0b      	ldr	r3, [pc, #44]	; (800bd08 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800bcda:	601c      	str	r4, [r3, #0]
        globalDetector = new MemoryLeakDetector(globalReporter);
 800bcdc:	f241 1050 	movw	r0, #4432	; 0x1150
 800bce0:	f7ff fd7e 	bl	800b7e0 <_Znwj>
 800bce4:	4603      	mov	r3, r0
 800bce6:	461c      	mov	r4, r3
 800bce8:	4b07      	ldr	r3, [pc, #28]	; (800bd08 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4619      	mov	r1, r3
 800bcee:	4620      	mov	r0, r4
 800bcf0:	f00c fa3e 	bl	8018170 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>
 800bcf4:	4b03      	ldr	r3, [pc, #12]	; (800bd04 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800bcf6:	601c      	str	r4, [r3, #0]

        restoreNewDeleteOverloads();
 800bcf8:	f7ff feb6 	bl	800ba68 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>
    }
    return globalDetector;
 800bcfc:	4b01      	ldr	r3, [pc, #4]	; (800bd04 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	bd98      	pop	{r3, r4, r7, pc}
 800bd04:	20000910 	.word	0x20000910
 800bd08:	2000090c 	.word	0x2000090c

0800bd0c <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>:
{
    return globalReporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool des)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b083      	sub	sp, #12
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	460b      	mov	r3, r1
 800bd16:	70fb      	strb	r3, [r7, #3]
    destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_ = des;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	78fa      	ldrb	r2, [r7, #3]
 800bd1c:	765a      	strb	r2, [r3, #25]
}
 800bd1e:	bf00      	nop
 800bd20:	370c      	adds	r7, #12
 800bd22:	46bd      	mov	sp, r7
 800bd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd28:	4770      	bx	lr
	...

0800bd2c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>:
    globalDetector = detector;
    globalReporter = reporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetector()
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	af00      	add	r7, sp, #0
    turnOffNewDeleteOverloads();
 800bd30:	f7ff fdbc 	bl	800b8ac <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
    delete globalDetector;
 800bd34:	4b0b      	ldr	r3, [pc, #44]	; (800bd64 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d004      	beq.n	800bd46 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x1a>
 800bd3c:	681a      	ldr	r2, [r3, #0]
 800bd3e:	3204      	adds	r2, #4
 800bd40:	6812      	ldr	r2, [r2, #0]
 800bd42:	4618      	mov	r0, r3
 800bd44:	4790      	blx	r2
    delete globalReporter;
 800bd46:	4b08      	ldr	r3, [pc, #32]	; (800bd68 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x3c>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d004      	beq.n	800bd58 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x2c>
 800bd4e:	681a      	ldr	r2, [r3, #0]
 800bd50:	3204      	adds	r2, #4
 800bd52:	6812      	ldr	r2, [r2, #0]
 800bd54:	4618      	mov	r0, r3
 800bd56:	4790      	blx	r2
    globalDetector = NULLPTR;
 800bd58:	4b02      	ldr	r3, [pc, #8]	; (800bd64 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	601a      	str	r2, [r3, #0]
}
 800bd5e:	bf00      	nop
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	20000910 	.word	0x20000910
 800bd68:	2000090c 	.word	0x2000090c

0800bd6c <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>:
void MemoryLeakWarningPlugin::expectLeaksInTest(size_t n)
{
    expectedLeaks_ = n;
}

MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString& name, MemoryLeakDetector* localDetector) :
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b084      	sub	sp, #16
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	60f8      	str	r0, [r7, #12]
 800bd74:	60b9      	str	r1, [r7, #8]
 800bd76:	607a      	str	r2, [r7, #4]
    TestPlugin(name), ignoreAllWarnings_(false), destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_(false), expectedLeaks_(0)
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	68b9      	ldr	r1, [r7, #8]
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f006 fdfd 	bl	801297c <_ZN10TestPluginC1ERK12SimpleString>
 800bd82:	4a14      	ldr	r2, [pc, #80]	; (800bdd4 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x68>)
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	601a      	str	r2, [r3, #0]
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	761a      	strb	r2, [r3, #24]
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	2200      	movs	r2, #0
 800bd92:	765a      	strb	r2, [r3, #25]
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	2200      	movs	r2, #0
 800bd98:	61da      	str	r2, [r3, #28]
{
    if (firstPlugin_ == NULLPTR) firstPlugin_ = this;
 800bd9a:	4b0f      	ldr	r3, [pc, #60]	; (800bdd8 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d102      	bne.n	800bda8 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x3c>
 800bda2:	4a0d      	ldr	r2, [pc, #52]	; (800bdd8 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	6013      	str	r3, [r2, #0]

    if (localDetector) memLeakDetector_ = localDetector;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d003      	beq.n	800bdb6 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x4a>
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	687a      	ldr	r2, [r7, #4]
 800bdb2:	615a      	str	r2, [r3, #20]
 800bdb4:	e004      	b.n	800bdc0 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x54>
    else memLeakDetector_ = getGlobalDetector();
 800bdb6:	f7ff ff7f 	bl	800bcb8 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800bdba:	4602      	mov	r2, r0
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	615a      	str	r2, [r3, #20]

    memLeakDetector_->enable();
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	695b      	ldr	r3, [r3, #20]
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f00c fa69 	bl	801829c <_ZN18MemoryLeakDetector6enableEv>
}
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3710      	adds	r7, #16
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}
 800bdd4:	08029d70 	.word	0x08029d70
 800bdd8:	20000914 	.word	0x20000914

0800bddc <_ZN23MemoryLeakWarningPluginD1Ev>:

MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	4a09      	ldr	r2, [pc, #36]	; (800be0c <_ZN23MemoryLeakWarningPluginD1Ev+0x30>)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	601a      	str	r2, [r3, #0]
{
    if (destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_) {
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	7e5b      	ldrb	r3, [r3, #25]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d003      	beq.n	800bdfa <_ZN23MemoryLeakWarningPluginD1Ev+0x1e>
        MemoryLeakWarningPlugin::turnOffNewDeleteOverloads();
 800bdf2:	f7ff fd5b 	bl	800b8ac <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
        MemoryLeakWarningPlugin::destroyGlobalDetector();
 800bdf6:	f7ff ff99 	bl	800bd2c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f006 fdf9 	bl	80129f4 <_ZN10TestPluginD1Ev>
    }
}
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	4618      	mov	r0, r3
 800be06:	3708      	adds	r7, #8
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}
 800be0c:	08029d70 	.word	0x08029d70

0800be10 <_ZN23MemoryLeakWarningPluginD0Ev>:
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800be10:	b580      	push	{r7, lr}
 800be12:	b082      	sub	sp, #8
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
}
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f7ff ffdf 	bl	800bddc <_ZN23MemoryLeakWarningPluginD1Ev>
 800be1e:	2124      	movs	r1, #36	; 0x24
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f7ff fd01 	bl	800b828 <_ZdlPvj>
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	4618      	mov	r0, r3
 800be2a:	3708      	adds	r7, #8
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}

0800be30 <_ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::preTestAction(UtestShell& /*test*/, TestResult& result)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
 800be36:	60f8      	str	r0, [r7, #12]
 800be38:	60b9      	str	r1, [r7, #8]
 800be3a:	607a      	str	r2, [r7, #4]
    memLeakDetector_->startChecking();
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	695b      	ldr	r3, [r3, #20]
 800be40:	4618      	mov	r0, r3
 800be42:	f00c fa0e 	bl	8018262 <_ZN18MemoryLeakDetector13startCheckingEv>
    failureCount_ = result.getFailureCount();
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f7fd ffb0 	bl	8009dac <_ZNK10TestResult15getFailureCountEv>
 800be4c:	4602      	mov	r2, r0
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	621a      	str	r2, [r3, #32]
}
 800be52:	bf00      	nop
 800be54:	3710      	adds	r7, #16
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}
	...

0800be5c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::postTestAction(UtestShell& test, TestResult& result)
{
 800be5c:	b590      	push	{r4, r7, lr}
 800be5e:	b097      	sub	sp, #92	; 0x5c
 800be60:	af00      	add	r7, sp, #0
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	60b9      	str	r1, [r7, #8]
 800be66:	607a      	str	r2, [r7, #4]
    memLeakDetector_->stopChecking();
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	695b      	ldr	r3, [r3, #20]
 800be6c:	4618      	mov	r0, r3
 800be6e:	f00c fa08 	bl	8018282 <_ZN18MemoryLeakDetector12stopCheckingEv>
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_checking);
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	695b      	ldr	r3, [r3, #20]
 800be76:	2103      	movs	r1, #3
 800be78:	4618      	mov	r0, r3
 800be7a:	f00c fda5 	bl	80189c8 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800be7e:	6578      	str	r0, [r7, #84]	; 0x54

    if (!ignoreAllWarnings_ && expectedLeaks_ != leaks && failureCount_ == result.getFailureCount()) {
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	7e1b      	ldrb	r3, [r3, #24]
 800be84:	f083 0301 	eor.w	r3, r3, #1
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d00e      	beq.n	800beac <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	69db      	ldr	r3, [r3, #28]
 800be92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800be94:	429a      	cmp	r2, r3
 800be96:	d009      	beq.n	800beac <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	6a1c      	ldr	r4, [r3, #32]
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f7fd ff85 	bl	8009dac <_ZNK10TestResult15getFailureCountEv>
 800bea2:	4603      	mov	r3, r0
 800bea4:	429c      	cmp	r4, r3
 800bea6:	d101      	bne.n	800beac <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800bea8:	2301      	movs	r3, #1
 800beaa:	e000      	b.n	800beae <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x52>
 800beac:	2300      	movs	r3, #0
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d04c      	beq.n	800bf4c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        if(MemoryLeakWarningPlugin::areNewDeleteOverloaded()) {
 800beb2:	f7ff fd4f 	bl	800b954 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>
 800beb6:	4603      	mov	r3, r0
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d028      	beq.n	800bf0e <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xb2>
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	695b      	ldr	r3, [r3, #20]
 800bec0:	2103      	movs	r1, #3
 800bec2:	4618      	mov	r0, r3
 800bec4:	f00c fd45 	bl	8018952 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 800bec8:	4602      	mov	r2, r0
 800beca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800bece:	4611      	mov	r1, r2
 800bed0:	4618      	mov	r0, r3
 800bed2:	f002 f858 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800bed6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800beda:	f107 0310 	add.w	r3, r7, #16
 800bede:	68b9      	ldr	r1, [r7, #8]
 800bee0:	4618      	mov	r0, r3
 800bee2:	f003 feaf 	bl	800fc44 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 800bee6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800beea:	4618      	mov	r0, r3
 800beec:	f002 fc03 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
            result.addFailure(f);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	3334      	adds	r3, #52	; 0x34
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f107 0210 	add.w	r2, r7, #16
 800befc:	4611      	mov	r1, r2
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	4798      	blx	r3
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 800bf02:	f107 0310 	add.w	r3, r7, #16
 800bf06:	4618      	mov	r0, r3
 800bf08:	f003 ff5c 	bl	800fdc4 <_ZN11TestFailureD1Ev>
 800bf0c:	e01e      	b.n	800bf4c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        } else if(expectedLeaks_ > 0) {
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	69db      	ldr	r3, [r3, #28]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d01a      	beq.n	800bf4c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
            result.print(StringFromFormat("Warning: Expected %d leak(s), but leak detection was disabled", (int) expectedLeaks_).asCharString());
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	3338      	adds	r3, #56	; 0x38
 800bf1c:	681c      	ldr	r4, [r3, #0]
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	69db      	ldr	r3, [r3, #28]
 800bf22:	461a      	mov	r2, r3
 800bf24:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800bf28:	4910      	ldr	r1, [pc, #64]	; (800bf6c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x110>)
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f003 f8ea 	bl	800f104 <_Z16StringFromFormatPKcz>
 800bf30:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800bf34:	4618      	mov	r0, r3
 800bf36:	f002 fbb1 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	47a0      	blx	r4
 800bf42:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800bf46:	4618      	mov	r0, r3
 800bf48:	f002 fbd5 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
        }
    }
    memLeakDetector_->markCheckingPeriodLeaksAsNonCheckingPeriod();
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	695b      	ldr	r3, [r3, #20]
 800bf50:	4618      	mov	r0, r3
 800bf52:	f00c fd13 	bl	801897c <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>
    ignoreAllWarnings_ = false;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	761a      	strb	r2, [r3, #24]
    expectedLeaks_ = 0;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	61da      	str	r2, [r3, #28]
}
 800bf62:	bf00      	nop
 800bf64:	375c      	adds	r7, #92	; 0x5c
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd90      	pop	{r4, r7, pc}
 800bf6a:	bf00      	nop
 800bf6c:	08025c98 	.word	0x08025c98

0800bf70 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>:

const char* MemoryLeakWarningPlugin::FinalReport(size_t toBeDeletedLeaks)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_enabled);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	695b      	ldr	r3, [r3, #20]
 800bf7e:	2102      	movs	r1, #2
 800bf80:	4618      	mov	r0, r3
 800bf82:	f00c fd21 	bl	80189c8 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800bf86:	60f8      	str	r0, [r7, #12]
    if (leaks != toBeDeletedLeaks) return memLeakDetector_->report(mem_leak_period_enabled);
 800bf88:	68fa      	ldr	r2, [r7, #12]
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d007      	beq.n	800bfa0 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x30>
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	695b      	ldr	r3, [r3, #20]
 800bf94:	2102      	movs	r1, #2
 800bf96:	4618      	mov	r0, r3
 800bf98:	f00c fcdb 	bl	8018952 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	e000      	b.n	800bfa2 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x32>
    return "";
 800bfa0:	4b02      	ldr	r3, [pc, #8]	; (800bfac <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x3c>)
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3710      	adds	r7, #16
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
 800bfaa:	bf00      	nop
 800bfac:	08025cd8 	.word	0x08025cd8

0800bfb0 <_ZN11FailFailureD1Ev>:
{
public:
    CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& textString = "");
};

class FailFailure : public TestFailure
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b082      	sub	sp, #8
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
 800bfb8:	4a05      	ldr	r2, [pc, #20]	; (800bfd0 <_ZN11FailFailureD1Ev+0x20>)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	601a      	str	r2, [r3, #0]
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f003 feff 	bl	800fdc4 <_ZN11TestFailureD1Ev>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3708      	adds	r7, #8
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}
 800bfd0:	08029db8 	.word	0x08029db8

0800bfd4 <_ZN11FailFailureD0Ev>:
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b082      	sub	sp, #8
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f7ff ffe7 	bl	800bfb0 <_ZN11FailFailureD1Ev>
 800bfe2:	2134      	movs	r1, #52	; 0x34
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f7ff fc1f 	bl	800b828 <_ZdlPvj>
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	4618      	mov	r0, r3
 800bfee:	3708      	adds	r7, #8
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}

0800bff4 <_ZN17cpputest_longlongC1Ei>:

struct cpputest_longlong
{
#if defined(__cplusplus)
  cpputest_longlong() {}
  cpputest_longlong(int) {}
 800bff4:	b480      	push	{r7}
 800bff6:	b083      	sub	sp, #12
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	6039      	str	r1, [r7, #0]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	4618      	mov	r0, r3
 800c002:	370c      	adds	r7, #12
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr

0800c00c <_ZN18cpputest_ulonglongC1Ei>:

struct cpputest_ulonglong
{
#if defined(__cplusplus)
  cpputest_ulonglong() {}
  cpputest_ulonglong(int) {}
 800c00c:	b480      	push	{r7}
 800c00e:	b083      	sub	sp, #12
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	6039      	str	r1, [r7, #0]
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	4618      	mov	r0, r3
 800c01a:	370c      	adds	r7, #12
 800c01c:	46bd      	mov	sp, r7
 800c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c022:	4770      	bx	lr

0800c024 <_ZN19MockFailureReporterC1Ev>:
class MockFailureReporter
{
protected:
    bool crashOnFailure_;
public:
    MockFailureReporter() : crashOnFailure_(false){}
 800c024:	b480      	push	{r7}
 800c026:	b083      	sub	sp, #12
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	4a06      	ldr	r2, [pc, #24]	; (800c048 <_ZN19MockFailureReporterC1Ev+0x24>)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	601a      	str	r2, [r3, #0]
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2200      	movs	r2, #0
 800c036:	711a      	strb	r2, [r3, #4]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	4618      	mov	r0, r3
 800c03c:	370c      	adds	r7, #12
 800c03e:	46bd      	mov	sp, r7
 800c040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c044:	4770      	bx	lr
 800c046:	bf00      	nop
 800c048:	0802af94 	.word	0x0802af94

0800c04c <_ZN19MockFailureReporterD1Ev>:
    virtual ~MockFailureReporter() {}
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	4a04      	ldr	r2, [pc, #16]	; (800c068 <_ZN19MockFailureReporterD1Ev+0x1c>)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	601a      	str	r2, [r3, #0]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	4618      	mov	r0, r3
 800c05e:	370c      	adds	r7, #12
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr
 800c068:	0802af94 	.word	0x0802af94

0800c06c <_ZN19MockFailureReporterD0Ev>:
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b082      	sub	sp, #8
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f7ff ffe9 	bl	800c04c <_ZN19MockFailureReporterD1Ev>
 800c07a:	2108      	movs	r1, #8
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f7ff fbd3 	bl	800b828 <_ZdlPvj>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	4618      	mov	r0, r3
 800c086:	3708      	adds	r7, #8
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}

0800c08c <_ZN11MockFailureD1Ev>:

class MockFailure : public TestFailure
{
public:
    MockFailure(UtestShell* test);
    virtual ~MockFailure() _destructor_override {}
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b082      	sub	sp, #8
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	4a05      	ldr	r2, [pc, #20]	; (800c0ac <_ZN11MockFailureD1Ev+0x20>)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	601a      	str	r2, [r3, #0]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	4618      	mov	r0, r3
 800c09e:	f003 fe91 	bl	800fdc4 <_ZN11TestFailureD1Ev>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	3708      	adds	r7, #8
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}
 800c0ac:	08029f0c 	.word	0x08029f0c

0800c0b0 <_ZN11MockFailureD0Ev>:
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b082      	sub	sp, #8
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f7ff ffe7 	bl	800c08c <_ZN11MockFailureD1Ev>
 800c0be:	2134      	movs	r1, #52	; 0x34
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f7ff fbb1 	bl	800b828 <_ZdlPvj>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3708      	adds	r7, #8
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}

0800c0d0 <_ZN14MockNamedValueC1ERKS_>:
class MockNamedValueComparatorsAndCopiersRepository;
class MockNamedValue
{
public:
    MockNamedValue(const SimpleString& name);
    DEFAULT_COPY_CONSTRUCTOR(MockNamedValue)
 800c0d0:	b590      	push	{r4, r7, lr}
 800c0d2:	b083      	sub	sp, #12
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	6039      	str	r1, [r7, #0]
 800c0da:	4a16      	ldr	r2, [pc, #88]	; (800c134 <_ZN14MockNamedValueC1ERKS_+0x64>)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	601a      	str	r2, [r3, #0]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	1d1a      	adds	r2, r3, #4
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	3304      	adds	r3, #4
 800c0e8:	4619      	mov	r1, r3
 800c0ea:	4610      	mov	r0, r2
 800c0ec:	f001 ff9f 	bl	800e02e <_ZN12SimpleStringC1ERKS_>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f103 020c 	add.w	r2, r3, #12
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	330c      	adds	r3, #12
 800c0fa:	4619      	mov	r1, r3
 800c0fc:	4610      	mov	r0, r2
 800c0fe:	f001 ff96 	bl	800e02e <_ZN12SimpleStringC1ERKS_>
 800c102:	687a      	ldr	r2, [r7, #4]
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	f102 0418 	add.w	r4, r2, #24
 800c10a:	3318      	adds	r3, #24
 800c10c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c10e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	629a      	str	r2, [r3, #40]	; 0x28
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	62da      	str	r2, [r3, #44]	; 0x2c
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	631a      	str	r2, [r3, #48]	; 0x30
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	4618      	mov	r0, r3
 800c12e:	370c      	adds	r7, #12
 800c130:	46bd      	mov	sp, r7
 800c132:	bd90      	pop	{r4, r7, pc}
 800c134:	0802afd4 	.word	0x0802afd4

0800c138 <_Z4mockRK12SimpleStringP19MockFailureReporter>:
#define MOCK_SUPPORT_SCOPE_PREFIX "!!!$$$MockingSupportScope$$$!!!"

static MockSupport global_mock;

MockSupport& mock(const SimpleString& mockName, MockFailureReporter* failureReporterForThisCall)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b086      	sub	sp, #24
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	6039      	str	r1, [r7, #0]
    MockSupport& mock_support = (mockName != "") ? *global_mock.getMockSupportScope(mockName) : global_mock;
 800c142:	f107 030c 	add.w	r3, r7, #12
 800c146:	4916      	ldr	r1, [pc, #88]	; (800c1a0 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x68>)
 800c148:	4618      	mov	r0, r3
 800c14a:	f001 ff1c 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800c14e:	f107 030c 	add.w	r3, r7, #12
 800c152:	4619      	mov	r1, r3
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f002 fb1f 	bl	800e798 <_ZneRK12SimpleStringS1_>
 800c15a:	4603      	mov	r3, r0
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d005      	beq.n	800c16c <_Z4mockRK12SimpleStringP19MockFailureReporter+0x34>
 800c160:	6879      	ldr	r1, [r7, #4]
 800c162:	4810      	ldr	r0, [pc, #64]	; (800c1a4 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 800c164:	f000 ff70 	bl	800d048 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>
 800c168:	4603      	mov	r3, r0
 800c16a:	e000      	b.n	800c16e <_Z4mockRK12SimpleStringP19MockFailureReporter+0x36>
 800c16c:	4b0d      	ldr	r3, [pc, #52]	; (800c1a4 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 800c16e:	617b      	str	r3, [r7, #20]
 800c170:	f107 030c 	add.w	r3, r7, #12
 800c174:	4618      	mov	r0, r3
 800c176:	f002 fabe 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    mock_support.setActiveReporter(failureReporterForThisCall);
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	33a8      	adds	r3, #168	; 0xa8
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	6839      	ldr	r1, [r7, #0]
 800c184:	6978      	ldr	r0, [r7, #20]
 800c186:	4798      	blx	r3
    mock_support.setDefaultComparatorsAndCopiersRepository();
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	33ac      	adds	r3, #172	; 0xac
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	6978      	ldr	r0, [r7, #20]
 800c192:	4798      	blx	r3
    return mock_support;
 800c194:	697b      	ldr	r3, [r7, #20]
}
 800c196:	4618      	mov	r0, r3
 800c198:	3718      	adds	r7, #24
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}
 800c19e:	bf00      	nop
 800c1a0:	08025cdc 	.word	0x08025cdc
 800c1a4:	20000918 	.word	0x20000918

0800c1a8 <_ZN11MockSupportC1ERK12SimpleString>:

MockSupport::MockSupport(const SimpleString& mockName)
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b082      	sub	sp, #8
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	6039      	str	r1, [r7, #0]
    : actualCallOrder_(0), expectedCallOrder_(0), strictOrdering_(false), standardReporter_(&defaultReporter_), ignoreOtherCalls_(false), enabled_(true), lastActualFunctionCall_(NULLPTR), mockName_(mockName), tracing_(false)
 800c1b2:	4a21      	ldr	r2, [pc, #132]	; (800c238 <_ZN11MockSupportC1ERK12SimpleString+0x90>)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	601a      	str	r2, [r3, #0]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	605a      	str	r2, [r3, #4]
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	609a      	str	r2, [r3, #8]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	731a      	strb	r2, [r3, #12]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f103 0218 	add.w	r2, r3, #24
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	615a      	str	r2, [r3, #20]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	3318      	adds	r3, #24
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f7ff ff23 	bl	800c024 <_ZN19MockFailureReporterC1Ev>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	3320      	adds	r3, #32
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f010 fefc 	bl	801cfe0 <_ZN21MockExpectedCallsListC1Ev>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	62da      	str	r2, [r3, #44]	; 0x2c
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	3330      	adds	r3, #48	; 0x30
 800c202:	4618      	mov	r0, r3
 800c204:	f014 fbea 	bl	80209dc <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	3338      	adds	r3, #56	; 0x38
 800c20c:	4618      	mov	r0, r3
 800c20e:	f014 faf4 	bl	80207fa <_ZN18MockNamedValueListC1Ev>
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	333c      	adds	r3, #60	; 0x3c
 800c216:	6839      	ldr	r1, [r7, #0]
 800c218:	4618      	mov	r0, r3
 800c21a:	f001 ff08 	bl	800e02e <_ZN12SimpleStringC1ERKS_>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2200      	movs	r2, #0
 800c222:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
{
    setActiveReporter(NULLPTR);
 800c226:	2100      	movs	r1, #0
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f000 f894 	bl	800c356 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>
}
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	4618      	mov	r0, r3
 800c232:	3708      	adds	r7, #8
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}
 800c238:	08029de4 	.word	0x08029de4

0800c23c <_ZN11MockSupportD1Ev>:

MockSupport::~MockSupport()
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b082      	sub	sp, #8
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	4a0d      	ldr	r2, [pc, #52]	; (800c27c <_ZN11MockSupportD1Ev+0x40>)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	601a      	str	r2, [r3, #0]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	333c      	adds	r3, #60	; 0x3c
 800c24e:	4618      	mov	r0, r3
 800c250:	f002 fa51 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	3330      	adds	r3, #48	; 0x30
 800c258:	4618      	mov	r0, r3
 800c25a:	f014 fbd3 	bl	8020a04 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	3320      	adds	r3, #32
 800c262:	4618      	mov	r0, r3
 800c264:	f010 fed0 	bl	801d008 <_ZN21MockExpectedCallsListD1Ev>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	3318      	adds	r3, #24
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7ff feed 	bl	800c04c <_ZN19MockFailureReporterD1Ev>
{
}
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	4618      	mov	r0, r3
 800c276:	3708      	adds	r7, #8
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}
 800c27c:	08029de4 	.word	0x08029de4

0800c280 <_ZN11MockSupportD0Ev>:
MockSupport::~MockSupport()
 800c280:	b580      	push	{r7, lr}
 800c282:	b082      	sub	sp, #8
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
}
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f7ff ffd7 	bl	800c23c <_ZN11MockSupportD1Ev>
 800c28e:	2148      	movs	r1, #72	; 0x48
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f7ff fac9 	bl	800b828 <_ZdlPvj>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	4618      	mov	r0, r3
 800c29a:	3708      	adds	r7, #8
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <_ZN11MockSupport14crashOnFailureEb>:

void MockSupport::crashOnFailure(bool shouldCrash)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b082      	sub	sp, #8
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	460b      	mov	r3, r1
 800c2aa:	70fb      	strb	r3, [r7, #3]
    activeReporter_->crashOnFailure(shouldCrash);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	691a      	ldr	r2, [r3, #16]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	691b      	ldr	r3, [r3, #16]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	3310      	adds	r3, #16
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	78f9      	ldrb	r1, [r7, #3]
 800c2bc:	4610      	mov	r0, r2
 800c2be:	4798      	blx	r3
}
 800c2c0:	bf00      	nop
 800c2c2:	3708      	adds	r7, #8
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}

0800c2c8 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter>:

void MockSupport::setMockFailureStandardReporter(MockFailureReporter* reporter)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b084      	sub	sp, #16
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	6039      	str	r1, [r7, #0]
    standardReporter_ = (reporter != NULLPTR) ? reporter : &defaultReporter_;
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d102      	bne.n	800c2de <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x16>
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	3318      	adds	r3, #24
 800c2dc:	e000      	b.n	800c2e0 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x18>
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	6153      	str	r3, [r2, #20]

    if (lastActualFunctionCall_)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d00a      	beq.n	800c302 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x3a>
        lastActualFunctionCall_->setMockFailureReporter(standardReporter_);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	33c8      	adds	r3, #200	; 0xc8
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	687a      	ldr	r2, [r7, #4]
 800c2fc:	6952      	ldr	r2, [r2, #20]
 800c2fe:	4611      	mov	r1, r2
 800c300:	4798      	blx	r3

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	3338      	adds	r3, #56	; 0x38
 800c306:	4618      	mov	r0, r3
 800c308:	f014 fb0d 	bl	8020926 <_ZN18MockNamedValueList5beginEv>
 800c30c:	60f8      	str	r0, [r7, #12]
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d01c      	beq.n	800c34e <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x86>
        if (getMockSupport(p)) getMockSupport(p)->setMockFailureStandardReporter(standardReporter_);
 800c314:	68f9      	ldr	r1, [r7, #12]
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f000 ff26 	bl	800d168 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b00      	cmp	r3, #0
 800c320:	bf14      	ite	ne
 800c322:	2301      	movne	r3, #1
 800c324:	2300      	moveq	r3, #0
 800c326:	b2db      	uxtb	r3, r3
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d00b      	beq.n	800c344 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x7c>
 800c32c:	68f9      	ldr	r1, [r7, #12]
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f000 ff1a 	bl	800d168 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c334:	4603      	mov	r3, r0
 800c336:	681a      	ldr	r2, [r3, #0]
 800c338:	32a4      	adds	r2, #164	; 0xa4
 800c33a:	6812      	ldr	r2, [r2, #0]
 800c33c:	6879      	ldr	r1, [r7, #4]
 800c33e:	6949      	ldr	r1, [r1, #20]
 800c340:	4618      	mov	r0, r3
 800c342:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c344:	68f8      	ldr	r0, [r7, #12]
 800c346:	f014 f9f7 	bl	8020738 <_ZN22MockNamedValueListNode4nextEv>
 800c34a:	60f8      	str	r0, [r7, #12]
 800c34c:	e7df      	b.n	800c30e <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x46>
}
 800c34e:	bf00      	nop
 800c350:	3710      	adds	r7, #16
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}

0800c356 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>:

void MockSupport::setActiveReporter(MockFailureReporter* reporter)
{
 800c356:	b480      	push	{r7}
 800c358:	b083      	sub	sp, #12
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
 800c35e:	6039      	str	r1, [r7, #0]
    activeReporter_ = (reporter) ? reporter : standardReporter_;
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d102      	bne.n	800c36c <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x16>
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	695b      	ldr	r3, [r3, #20]
 800c36a:	e000      	b.n	800c36e <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x18>
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	687a      	ldr	r2, [r7, #4]
 800c370:	6113      	str	r3, [r2, #16]
}
 800c372:	bf00      	nop
 800c374:	370c      	adds	r7, #12
 800c376:	46bd      	mov	sp, r7
 800c378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37c:	4770      	bx	lr

0800c37e <_ZN11MockSupport41setDefaultComparatorsAndCopiersRepositoryEv>:

void MockSupport::setDefaultComparatorsAndCopiersRepository()
{
 800c37e:	b580      	push	{r7, lr}
 800c380:	b082      	sub	sp, #8
 800c382:	af00      	add	r7, sp, #0
 800c384:	6078      	str	r0, [r7, #4]
    MockNamedValue::setDefaultComparatorsAndCopiersRepository(&comparatorsAndCopiersRepository_);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	3330      	adds	r3, #48	; 0x30
 800c38a:	4618      	mov	r0, r3
 800c38c:	f012 fb10 	bl	801e9b0 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>
}
 800c390:	bf00      	nop
 800c392:	3708      	adds	r7, #8
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}

0800c398 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockSupport::installComparator(const SimpleString& typeName, MockNamedValueComparator& comparator)
{
 800c398:	b590      	push	{r4, r7, lr}
 800c39a:	b087      	sub	sp, #28
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	60f8      	str	r0, [r7, #12]
 800c3a0:	60b9      	str	r1, [r7, #8]
 800c3a2:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installComparator(typeName, comparator);
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	3330      	adds	r3, #48	; 0x30
 800c3a8:	687a      	ldr	r2, [r7, #4]
 800c3aa:	68b9      	ldr	r1, [r7, #8]
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f014 fb77 	bl	8020aa0 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	3338      	adds	r3, #56	; 0x38
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f014 fab5 	bl	8020926 <_ZN18MockNamedValueList5beginEv>
 800c3bc:	6178      	str	r0, [r7, #20]
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d01c      	beq.n	800c3fe <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installComparator(typeName, comparator);
 800c3c4:	6979      	ldr	r1, [r7, #20]
 800c3c6:	68f8      	ldr	r0, [r7, #12]
 800c3c8:	f000 fece 	bl	800d168 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	bf14      	ite	ne
 800c3d2:	2301      	movne	r3, #1
 800c3d4:	2300      	moveq	r3, #0
 800c3d6:	b2db      	uxtb	r3, r3
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d00b      	beq.n	800c3f4 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x5c>
 800c3dc:	6979      	ldr	r1, [r7, #20]
 800c3de:	68f8      	ldr	r0, [r7, #12]
 800c3e0:	f000 fec2 	bl	800d168 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	681a      	ldr	r2, [r3, #0]
 800c3e8:	32b0      	adds	r2, #176	; 0xb0
 800c3ea:	6814      	ldr	r4, [r2, #0]
 800c3ec:	687a      	ldr	r2, [r7, #4]
 800c3ee:	68b9      	ldr	r1, [r7, #8]
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c3f4:	6978      	ldr	r0, [r7, #20]
 800c3f6:	f014 f99f 	bl	8020738 <_ZN22MockNamedValueListNode4nextEv>
 800c3fa:	6178      	str	r0, [r7, #20]
 800c3fc:	e7df      	b.n	800c3be <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x26>
}
 800c3fe:	bf00      	nop
 800c400:	371c      	adds	r7, #28
 800c402:	46bd      	mov	sp, r7
 800c404:	bd90      	pop	{r4, r7, pc}

0800c406 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockSupport::installCopier(const SimpleString& typeName, MockNamedValueCopier& copier)
{
 800c406:	b590      	push	{r4, r7, lr}
 800c408:	b087      	sub	sp, #28
 800c40a:	af00      	add	r7, sp, #0
 800c40c:	60f8      	str	r0, [r7, #12]
 800c40e:	60b9      	str	r1, [r7, #8]
 800c410:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installCopier(typeName, copier);
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	3330      	adds	r3, #48	; 0x30
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	68b9      	ldr	r1, [r7, #8]
 800c41a:	4618      	mov	r0, r3
 800c41c:	f014 fb5c 	bl	8020ad8 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	3338      	adds	r3, #56	; 0x38
 800c424:	4618      	mov	r0, r3
 800c426:	f014 fa7e 	bl	8020926 <_ZN18MockNamedValueList5beginEv>
 800c42a:	6178      	str	r0, [r7, #20]
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d01c      	beq.n	800c46c <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installCopier(typeName, copier);
 800c432:	6979      	ldr	r1, [r7, #20]
 800c434:	68f8      	ldr	r0, [r7, #12]
 800c436:	f000 fe97 	bl	800d168 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c43a:	4603      	mov	r3, r0
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	bf14      	ite	ne
 800c440:	2301      	movne	r3, #1
 800c442:	2300      	moveq	r3, #0
 800c444:	b2db      	uxtb	r3, r3
 800c446:	2b00      	cmp	r3, #0
 800c448:	d00b      	beq.n	800c462 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x5c>
 800c44a:	6979      	ldr	r1, [r7, #20]
 800c44c:	68f8      	ldr	r0, [r7, #12]
 800c44e:	f000 fe8b 	bl	800d168 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c452:	4603      	mov	r3, r0
 800c454:	681a      	ldr	r2, [r3, #0]
 800c456:	32b4      	adds	r2, #180	; 0xb4
 800c458:	6814      	ldr	r4, [r2, #0]
 800c45a:	687a      	ldr	r2, [r7, #4]
 800c45c:	68b9      	ldr	r1, [r7, #8]
 800c45e:	4618      	mov	r0, r3
 800c460:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c462:	6978      	ldr	r0, [r7, #20]
 800c464:	f014 f968 	bl	8020738 <_ZN22MockNamedValueListNode4nextEv>
 800c468:	6178      	str	r0, [r7, #20]
 800c46a:	e7df      	b.n	800c42c <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x26>
}
 800c46c:	bf00      	nop
 800c46e:	371c      	adds	r7, #28
 800c470:	46bd      	mov	sp, r7
 800c472:	bd90      	pop	{r4, r7, pc}

0800c474 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository>:

void MockSupport::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b084      	sub	sp, #16
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	6039      	str	r1, [r7, #0]
    comparatorsAndCopiersRepository_.installComparatorsAndCopiers(repository);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	3330      	adds	r3, #48	; 0x30
 800c482:	6839      	ldr	r1, [r7, #0]
 800c484:	4618      	mov	r0, r3
 800c486:	f014 fb93 	bl	8020bb0 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	3338      	adds	r3, #56	; 0x38
 800c48e:	4618      	mov	r0, r3
 800c490:	f014 fa49 	bl	8020926 <_ZN18MockNamedValueList5beginEv>
 800c494:	60f8      	str	r0, [r7, #12]
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d01b      	beq.n	800c4d4 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x60>
        if (getMockSupport(p)) getMockSupport(p)->installComparatorsAndCopiers(repository);
 800c49c:	68f9      	ldr	r1, [r7, #12]
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f000 fe62 	bl	800d168 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	bf14      	ite	ne
 800c4aa:	2301      	movne	r3, #1
 800c4ac:	2300      	moveq	r3, #0
 800c4ae:	b2db      	uxtb	r3, r3
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d00a      	beq.n	800c4ca <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x56>
 800c4b4:	68f9      	ldr	r1, [r7, #12]
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f000 fe56 	bl	800d168 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	681a      	ldr	r2, [r3, #0]
 800c4c0:	32b8      	adds	r2, #184	; 0xb8
 800c4c2:	6812      	ldr	r2, [r2, #0]
 800c4c4:	6839      	ldr	r1, [r7, #0]
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c4ca:	68f8      	ldr	r0, [r7, #12]
 800c4cc:	f014 f934 	bl	8020738 <_ZN22MockNamedValueListNode4nextEv>
 800c4d0:	60f8      	str	r0, [r7, #12]
 800c4d2:	e7e0      	b.n	800c496 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x22>
}
 800c4d4:	bf00      	nop
 800c4d6:	3710      	adds	r7, #16
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <_ZN11MockSupport30removeAllComparatorsAndCopiersEv>:

void MockSupport::removeAllComparatorsAndCopiers()
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b084      	sub	sp, #16
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
    comparatorsAndCopiersRepository_.clear();
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	3330      	adds	r3, #48	; 0x30
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f014 faba 	bl	8020a62 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	3338      	adds	r3, #56	; 0x38
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f014 fa17 	bl	8020926 <_ZN18MockNamedValueList5beginEv>
 800c4f8:	60f8      	str	r0, [r7, #12]
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d01a      	beq.n	800c536 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x5a>
        if (getMockSupport(p)) getMockSupport(p)->removeAllComparatorsAndCopiers();
 800c500:	68f9      	ldr	r1, [r7, #12]
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f000 fe30 	bl	800d168 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c508:	4603      	mov	r3, r0
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	bf14      	ite	ne
 800c50e:	2301      	movne	r3, #1
 800c510:	2300      	moveq	r3, #0
 800c512:	b2db      	uxtb	r3, r3
 800c514:	2b00      	cmp	r3, #0
 800c516:	d009      	beq.n	800c52c <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x50>
 800c518:	68f9      	ldr	r1, [r7, #12]
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f000 fe24 	bl	800d168 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c520:	4603      	mov	r3, r0
 800c522:	681a      	ldr	r2, [r3, #0]
 800c524:	32bc      	adds	r2, #188	; 0xbc
 800c526:	6812      	ldr	r2, [r2, #0]
 800c528:	4618      	mov	r0, r3
 800c52a:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c52c:	68f8      	ldr	r0, [r7, #12]
 800c52e:	f014 f903 	bl	8020738 <_ZN22MockNamedValueListNode4nextEv>
 800c532:	60f8      	str	r0, [r7, #12]
 800c534:	e7e1      	b.n	800c4fa <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x1e>
}
 800c536:	bf00      	nop
 800c538:	3710      	adds	r7, #16
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}

0800c53e <_ZN11MockSupport5clearEv>:

void MockSupport::clear()
{
 800c53e:	b580      	push	{r7, lr}
 800c540:	b084      	sub	sp, #16
 800c542:	af00      	add	r7, sp, #0
 800c544:	6078      	str	r0, [r7, #4]
    delete lastActualFunctionCall_;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d004      	beq.n	800c558 <_ZN11MockSupport5clearEv+0x1a>
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	3204      	adds	r2, #4
 800c552:	6812      	ldr	r2, [r2, #0]
 800c554:	4618      	mov	r0, r3
 800c556:	4790      	blx	r2
    lastActualFunctionCall_ = NULLPTR;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2200      	movs	r2, #0
 800c55c:	62da      	str	r2, [r3, #44]	; 0x2c

    tracing_ = false;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2200      	movs	r2, #0
 800c562:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    MockActualCallTrace::clearInstance();
 800c566:	f00e fe0d 	bl	801b184 <_ZN19MockActualCallTrace13clearInstanceEv>

    expectations_.deleteAllExpectationsAndClearList();
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	3320      	adds	r3, #32
 800c56e:	4618      	mov	r0, r3
 800c570:	f011 f937 	bl	801d7e2 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>
    ignoreOtherCalls_ = false;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2200      	movs	r2, #0
 800c578:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    enabled_ = true;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2201      	movs	r2, #1
 800c580:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    actualCallOrder_ = 0;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2200      	movs	r2, #0
 800c588:	605a      	str	r2, [r3, #4]
    expectedCallOrder_ = 0;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2200      	movs	r2, #0
 800c58e:	609a      	str	r2, [r3, #8]
    strictOrdering_ = false;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2200      	movs	r2, #0
 800c594:	731a      	strb	r2, [r3, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	3338      	adds	r3, #56	; 0x38
 800c59a:	4618      	mov	r0, r3
 800c59c:	f014 f9c3 	bl	8020926 <_ZN18MockNamedValueList5beginEv>
 800c5a0:	60f8      	str	r0, [r7, #12]
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d01a      	beq.n	800c5de <_ZN11MockSupport5clearEv+0xa0>
        MockSupport* support = getMockSupport(p);
 800c5a8:	68f9      	ldr	r1, [r7, #12]
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f000 fddc 	bl	800d168 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c5b0:	60b8      	str	r0, [r7, #8]
        if (support) {
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d00d      	beq.n	800c5d4 <_ZN11MockSupport5clearEv+0x96>
            support->clear();
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	339c      	adds	r3, #156	; 0x9c
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	68b8      	ldr	r0, [r7, #8]
 800c5c2:	4798      	blx	r3
            delete support;
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d004      	beq.n	800c5d4 <_ZN11MockSupport5clearEv+0x96>
 800c5ca:	681a      	ldr	r2, [r3, #0]
 800c5cc:	3204      	adds	r2, #4
 800c5ce:	6812      	ldr	r2, [r2, #0]
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800c5d4:	68f8      	ldr	r0, [r7, #12]
 800c5d6:	f014 f8af 	bl	8020738 <_ZN22MockNamedValueListNode4nextEv>
 800c5da:	60f8      	str	r0, [r7, #12]
 800c5dc:	e7e1      	b.n	800c5a2 <_ZN11MockSupport5clearEv+0x64>
        }
    }
    data_.clear();
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	3338      	adds	r3, #56	; 0x38
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f014 f917 	bl	8020816 <_ZN18MockNamedValueList5clearEv>
}
 800c5e8:	bf00      	nop
 800c5ea:	3710      	adds	r7, #16
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}

0800c5f0 <_ZN11MockSupport11strictOrderEv>:

void MockSupport::strictOrder()
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b083      	sub	sp, #12
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
    strictOrdering_ = true;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	731a      	strb	r2, [r3, #12]
}
 800c5fe:	bf00      	nop
 800c600:	370c      	adds	r7, #12
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr
	...

0800c60c <_ZN11MockSupport17appendScopeToNameERK12SimpleString>:

SimpleString MockSupport::appendScopeToName(const SimpleString& functionName)
{
 800c60c:	b590      	push	{r4, r7, lr}
 800c60e:	b089      	sub	sp, #36	; 0x24
 800c610:	af00      	add	r7, sp, #0
 800c612:	60f8      	str	r0, [r7, #12]
 800c614:	60b9      	str	r1, [r7, #8]
 800c616:	607a      	str	r2, [r7, #4]
    if (mockName_.isEmpty()) return functionName;
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	333c      	adds	r3, #60	; 0x3c
 800c61c:	4618      	mov	r0, r3
 800c61e:	f002 f859 	bl	800e6d4 <_ZNK12SimpleString7isEmptyEv>
 800c622:	4603      	mov	r3, r0
 800c624:	2b00      	cmp	r3, #0
 800c626:	d004      	beq.n	800c632 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x26>
 800c628:	6879      	ldr	r1, [r7, #4]
 800c62a:	68f8      	ldr	r0, [r7, #12]
 800c62c:	f001 fcff 	bl	800e02e <_ZN12SimpleStringC1ERKS_>
 800c630:	e021      	b.n	800c676 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x6a>
    return mockName_ + "::" + functionName;
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800c638:	f107 0318 	add.w	r3, r7, #24
 800c63c:	4910      	ldr	r1, [pc, #64]	; (800c680 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x74>)
 800c63e:	4618      	mov	r0, r3
 800c640:	f001 fca1 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800c644:	f107 0310 	add.w	r3, r7, #16
 800c648:	f107 0218 	add.w	r2, r7, #24
 800c64c:	4621      	mov	r1, r4
 800c64e:	4618      	mov	r0, r3
 800c650:	f002 f8b3 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f107 0110 	add.w	r1, r7, #16
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	4618      	mov	r0, r3
 800c65e:	f002 f8ac 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 800c662:	f107 0310 	add.w	r3, r7, #16
 800c666:	4618      	mov	r0, r3
 800c668:	f002 f845 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800c66c:	f107 0318 	add.w	r3, r7, #24
 800c670:	4618      	mov	r0, r3
 800c672:	f002 f840 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 800c676:	68f8      	ldr	r0, [r7, #12]
 800c678:	3724      	adds	r7, #36	; 0x24
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd90      	pop	{r4, r7, pc}
 800c67e:	bf00      	nop
 800c680:	08025ce0 	.word	0x08025ce0

0800c684 <_ZN11MockSupport13expectOneCallERK12SimpleString>:

MockExpectedCall& MockSupport::expectOneCall(const SimpleString& functionName)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b082      	sub	sp, #8
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	6039      	str	r1, [r7, #0]
    return expectNCalls(1, functionName);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	3314      	adds	r3, #20
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	683a      	ldr	r2, [r7, #0]
 800c698:	2101      	movs	r1, #1
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	4798      	blx	r3
 800c69e:	4603      	mov	r3, r0
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3708      	adds	r7, #8
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}

0800c6a8 <_ZN11MockSupport12expectNoCallERK12SimpleString>:

void MockSupport::expectNoCall(const SimpleString& functionName)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b082      	sub	sp, #8
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	6039      	str	r1, [r7, #0]
    expectNCalls(0, functionName);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	3314      	adds	r3, #20
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	683a      	ldr	r2, [r7, #0]
 800c6bc:	2100      	movs	r1, #0
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	4798      	blx	r3
}
 800c6c2:	bf00      	nop
 800c6c4:	3708      	adds	r7, #8
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}
	...

0800c6cc <_ZN11MockSupport12expectNCallsEjRK12SimpleString>:

MockExpectedCall& MockSupport::expectNCalls(unsigned int amount, const SimpleString& functionName)
{
 800c6cc:	b590      	push	{r4, r7, lr}
 800c6ce:	b089      	sub	sp, #36	; 0x24
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	60f8      	str	r0, [r7, #12]
 800c6d4:	60b9      	str	r1, [r7, #8]
 800c6d6:	607a      	str	r2, [r7, #4]
    if (!enabled_) return MockIgnoredExpectedCall::instance();
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800c6de:	f083 0301 	eor.w	r3, r3, #1
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d003      	beq.n	800c6f0 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x24>
 800c6e8:	f010 fbf6 	bl	801ced8 <_ZN23MockIgnoredExpectedCall8instanceEv>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	e041      	b.n	800c774 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xa8>

    countCheck();
 800c6f0:	68f8      	ldr	r0, [r7, #12]
 800c6f2:	f000 fb1b 	bl	800cd2c <_ZN11MockSupport10countCheckEv>

    MockCheckedExpectedCall* call = new MockCheckedExpectedCall(amount);
 800c6f6:	22a5      	movs	r2, #165	; 0xa5
 800c6f8:	4920      	ldr	r1, [pc, #128]	; (800c77c <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xb0>)
 800c6fa:	2070      	movs	r0, #112	; 0x70
 800c6fc:	f7ff f880 	bl	800b800 <_ZnwjPKci>
 800c700:	4604      	mov	r4, r0
 800c702:	68b9      	ldr	r1, [r7, #8]
 800c704:	4620      	mov	r0, r4
 800c706:	f00f f8f3 	bl	801b8f0 <_ZN23MockCheckedExpectedCallC1Ej>
 800c70a:	61fc      	str	r4, [r7, #28]
    call->withName(appendScopeToName(functionName));
 800c70c:	69fb      	ldr	r3, [r7, #28]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	3308      	adds	r3, #8
 800c712:	681c      	ldr	r4, [r3, #0]
 800c714:	f107 0314 	add.w	r3, r7, #20
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	68f9      	ldr	r1, [r7, #12]
 800c71c:	4618      	mov	r0, r3
 800c71e:	f7ff ff75 	bl	800c60c <_ZN11MockSupport17appendScopeToNameERK12SimpleString>
 800c722:	f107 0314 	add.w	r3, r7, #20
 800c726:	4619      	mov	r1, r3
 800c728:	69f8      	ldr	r0, [r7, #28]
 800c72a:	47a0      	blx	r4
 800c72c:	f107 0314 	add.w	r3, r7, #20
 800c730:	4618      	mov	r0, r3
 800c732:	f001 ffe0 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    if (strictOrdering_) {
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	7b1b      	ldrb	r3, [r3, #12]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d013      	beq.n	800c766 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x9a>
        call->withCallOrder(expectedCallOrder_ + 1, expectedCallOrder_ + amount);
 800c73e:	69fb      	ldr	r3, [r7, #28]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	3310      	adds	r3, #16
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	68fa      	ldr	r2, [r7, #12]
 800c748:	6892      	ldr	r2, [r2, #8]
 800c74a:	1c50      	adds	r0, r2, #1
 800c74c:	68fa      	ldr	r2, [r7, #12]
 800c74e:	6891      	ldr	r1, [r2, #8]
 800c750:	68ba      	ldr	r2, [r7, #8]
 800c752:	440a      	add	r2, r1
 800c754:	4601      	mov	r1, r0
 800c756:	69f8      	ldr	r0, [r7, #28]
 800c758:	4798      	blx	r3
        expectedCallOrder_ += amount;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	689a      	ldr	r2, [r3, #8]
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	441a      	add	r2, r3
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	609a      	str	r2, [r3, #8]
    }
    expectations_.addExpectedCall(call);
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	3320      	adds	r3, #32
 800c76a:	69f9      	ldr	r1, [r7, #28]
 800c76c:	4618      	mov	r0, r3
 800c76e:	f010 fd89 	bl	801d284 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>
    return *call;
 800c772:	69fb      	ldr	r3, [r7, #28]
}
 800c774:	4618      	mov	r0, r3
 800c776:	3724      	adds	r7, #36	; 0x24
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd90      	pop	{r4, r7, pc}
 800c77c:	08025ce4 	.word	0x08025ce4

0800c780 <_ZN11MockSupport16createActualCallEv>:

MockCheckedActualCall* MockSupport::createActualCall()
{
 800c780:	b5b0      	push	{r4, r5, r7, lr}
 800c782:	b082      	sub	sp, #8
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
    lastActualFunctionCall_ = new MockCheckedActualCall(++actualCallOrder_, activeReporter_, expectations_);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	685b      	ldr	r3, [r3, #4]
 800c78c:	1c5a      	adds	r2, r3, #1
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	605a      	str	r2, [r3, #4]
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	685d      	ldr	r5, [r3, #4]
 800c796:	22b1      	movs	r2, #177	; 0xb1
 800c798:	490a      	ldr	r1, [pc, #40]	; (800c7c4 <_ZN11MockSupport16createActualCallEv+0x44>)
 800c79a:	202c      	movs	r0, #44	; 0x2c
 800c79c:	f7ff f830 	bl	800b800 <_ZnwjPKci>
 800c7a0:	4604      	mov	r4, r0
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	691a      	ldr	r2, [r3, #16]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	3320      	adds	r3, #32
 800c7aa:	4629      	mov	r1, r5
 800c7ac:	4620      	mov	r0, r4
 800c7ae:	f00c fbdb 	bl	8018f68 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	62dc      	str	r4, [r3, #44]	; 0x2c
    return lastActualFunctionCall_;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3708      	adds	r7, #8
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bdb0      	pop	{r4, r5, r7, pc}
 800c7c2:	bf00      	nop
 800c7c4:	08025ce4 	.word	0x08025ce4

0800c7c8 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>:

bool MockSupport::callIsIgnored(const SimpleString& functionName)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
    return ignoreOtherCalls_ && !expectations_.hasExpectationWithName(functionName);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d00d      	beq.n	800c7f8 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	3320      	adds	r3, #32
 800c7e0:	6839      	ldr	r1, [r7, #0]
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f010 fd2a 	bl	801d23c <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	f083 0301 	eor.w	r3, r3, #1
 800c7ee:	b2db      	uxtb	r3, r3
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d001      	beq.n	800c7f8 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	e000      	b.n	800c7fa <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x32>
 800c7f8:	2300      	movs	r3, #0
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3708      	adds	r7, #8
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}

0800c802 <_ZN11MockSupport10actualCallERK12SimpleString>:

MockActualCall& MockSupport::actualCall(const SimpleString& functionName)
{
 800c802:	b590      	push	{r4, r7, lr}
 800c804:	b087      	sub	sp, #28
 800c806:	af00      	add	r7, sp, #0
 800c808:	6078      	str	r0, [r7, #4]
 800c80a:	6039      	str	r1, [r7, #0]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 800c80c:	f107 030c 	add.w	r3, r7, #12
 800c810:	683a      	ldr	r2, [r7, #0]
 800c812:	6879      	ldr	r1, [r7, #4]
 800c814:	4618      	mov	r0, r3
 800c816:	f7ff fef9 	bl	800c60c <_ZN11MockSupport17appendScopeToNameERK12SimpleString>

    if (lastActualFunctionCall_) {
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d014      	beq.n	800c84c <_ZN11MockSupport10actualCallERK12SimpleString+0x4a>
        lastActualFunctionCall_->checkExpectations();
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	33c4      	adds	r3, #196	; 0xc4
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4610      	mov	r0, r2
 800c832:	4798      	blx	r3
        delete lastActualFunctionCall_;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d004      	beq.n	800c846 <_ZN11MockSupport10actualCallERK12SimpleString+0x44>
 800c83c:	681a      	ldr	r2, [r3, #0]
 800c83e:	3204      	adds	r2, #4
 800c840:	6812      	ldr	r2, [r2, #0]
 800c842:	4618      	mov	r0, r3
 800c844:	4790      	blx	r2
        lastActualFunctionCall_ = NULLPTR;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2200      	movs	r2, #0
 800c84a:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    if (!enabled_) return MockIgnoredActualCall::instance();
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800c852:	f083 0301 	eor.w	r3, r3, #1
 800c856:	b2db      	uxtb	r3, r3
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d004      	beq.n	800c866 <_ZN11MockSupport10actualCallERK12SimpleString+0x64>
 800c85c:	f00e fcbe 	bl	801b1dc <_ZN21MockIgnoredActualCall8instanceEv>
 800c860:	4603      	mov	r3, r0
 800c862:	461c      	mov	r4, r3
 800c864:	e02f      	b.n	800c8c6 <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    if (tracing_) return MockActualCallTrace::instance().withName(scopeFunctionName);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d00b      	beq.n	800c888 <_ZN11MockSupport10actualCallERK12SimpleString+0x86>
 800c870:	f00e fc6e 	bl	801b150 <_ZN19MockActualCallTrace8instanceEv>
 800c874:	4603      	mov	r3, r0
 800c876:	681a      	ldr	r2, [r3, #0]
 800c878:	3208      	adds	r2, #8
 800c87a:	6812      	ldr	r2, [r2, #0]
 800c87c:	f107 010c 	add.w	r1, r7, #12
 800c880:	4618      	mov	r0, r3
 800c882:	4790      	blx	r2
 800c884:	4604      	mov	r4, r0
 800c886:	e01e      	b.n	800c8c6 <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>


    if (callIsIgnored(scopeFunctionName)) {
 800c888:	f107 030c 	add.w	r3, r7, #12
 800c88c:	4619      	mov	r1, r3
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f7ff ff9a 	bl	800c7c8 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>
 800c894:	4603      	mov	r3, r0
 800c896:	2b00      	cmp	r3, #0
 800c898:	d004      	beq.n	800c8a4 <_ZN11MockSupport10actualCallERK12SimpleString+0xa2>
        return MockIgnoredActualCall::instance();
 800c89a:	f00e fc9f 	bl	801b1dc <_ZN21MockIgnoredActualCall8instanceEv>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	461c      	mov	r4, r3
 800c8a2:	e010      	b.n	800c8c6 <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    }

    MockCheckedActualCall* call = createActualCall();
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	33c0      	adds	r3, #192	; 0xc0
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	4798      	blx	r3
 800c8b0:	6178      	str	r0, [r7, #20]
    call->withName(scopeFunctionName);
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	3308      	adds	r3, #8
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	f107 020c 	add.w	r2, r7, #12
 800c8be:	4611      	mov	r1, r2
 800c8c0:	6978      	ldr	r0, [r7, #20]
 800c8c2:	4798      	blx	r3
    return *call;
 800c8c4:	697c      	ldr	r4, [r7, #20]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 800c8c6:	f107 030c 	add.w	r3, r7, #12
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f001 ff13 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800c8d0:	4623      	mov	r3, r4
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	371c      	adds	r7, #28
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd90      	pop	{r4, r7, pc}

0800c8da <_ZN11MockSupport16ignoreOtherCallsEv>:

void MockSupport::ignoreOtherCalls()
{
 800c8da:	b580      	push	{r7, lr}
 800c8dc:	b084      	sub	sp, #16
 800c8de:	af00      	add	r7, sp, #0
 800c8e0:	6078      	str	r0, [r7, #4]
    ignoreOtherCalls_ = true;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2201      	movs	r2, #1
 800c8e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	3338      	adds	r3, #56	; 0x38
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f014 f819 	bl	8020926 <_ZN18MockNamedValueList5beginEv>
 800c8f4:	60f8      	str	r0, [r7, #12]
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d01a      	beq.n	800c932 <_ZN11MockSupport16ignoreOtherCallsEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->ignoreOtherCalls();
 800c8fc:	68f9      	ldr	r1, [r7, #12]
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 fc32 	bl	800d168 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c904:	4603      	mov	r3, r0
 800c906:	2b00      	cmp	r3, #0
 800c908:	bf14      	ite	ne
 800c90a:	2301      	movne	r3, #1
 800c90c:	2300      	moveq	r3, #0
 800c90e:	b2db      	uxtb	r3, r3
 800c910:	2b00      	cmp	r3, #0
 800c912:	d009      	beq.n	800c928 <_ZN11MockSupport16ignoreOtherCallsEv+0x4e>
 800c914:	68f9      	ldr	r1, [r7, #12]
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f000 fc26 	bl	800d168 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c91c:	4603      	mov	r3, r0
 800c91e:	681a      	ldr	r2, [r3, #0]
 800c920:	3290      	adds	r2, #144	; 0x90
 800c922:	6812      	ldr	r2, [r2, #0]
 800c924:	4618      	mov	r0, r3
 800c926:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c928:	68f8      	ldr	r0, [r7, #12]
 800c92a:	f013 ff05 	bl	8020738 <_ZN22MockNamedValueListNode4nextEv>
 800c92e:	60f8      	str	r0, [r7, #12]
 800c930:	e7e1      	b.n	800c8f6 <_ZN11MockSupport16ignoreOtherCallsEv+0x1c>
}
 800c932:	bf00      	nop
 800c934:	3710      	adds	r7, #16
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}

0800c93a <_ZN11MockSupport7disableEv>:

void MockSupport::disable()
{
 800c93a:	b580      	push	{r7, lr}
 800c93c:	b084      	sub	sp, #16
 800c93e:	af00      	add	r7, sp, #0
 800c940:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2200      	movs	r2, #0
 800c946:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	3338      	adds	r3, #56	; 0x38
 800c94e:	4618      	mov	r0, r3
 800c950:	f013 ffe9 	bl	8020926 <_ZN18MockNamedValueList5beginEv>
 800c954:	60f8      	str	r0, [r7, #12]
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d01a      	beq.n	800c992 <_ZN11MockSupport7disableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->disable();
 800c95c:	68f9      	ldr	r1, [r7, #12]
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f000 fc02 	bl	800d168 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c964:	4603      	mov	r3, r0
 800c966:	2b00      	cmp	r3, #0
 800c968:	bf14      	ite	ne
 800c96a:	2301      	movne	r3, #1
 800c96c:	2300      	moveq	r3, #0
 800c96e:	b2db      	uxtb	r3, r3
 800c970:	2b00      	cmp	r3, #0
 800c972:	d009      	beq.n	800c988 <_ZN11MockSupport7disableEv+0x4e>
 800c974:	68f9      	ldr	r1, [r7, #12]
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f000 fbf6 	bl	800d168 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c97c:	4603      	mov	r3, r0
 800c97e:	681a      	ldr	r2, [r3, #0]
 800c980:	3284      	adds	r2, #132	; 0x84
 800c982:	6812      	ldr	r2, [r2, #0]
 800c984:	4618      	mov	r0, r3
 800c986:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c988:	68f8      	ldr	r0, [r7, #12]
 800c98a:	f013 fed5 	bl	8020738 <_ZN22MockNamedValueListNode4nextEv>
 800c98e:	60f8      	str	r0, [r7, #12]
 800c990:	e7e1      	b.n	800c956 <_ZN11MockSupport7disableEv+0x1c>
}
 800c992:	bf00      	nop
 800c994:	3710      	adds	r7, #16
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}

0800c99a <_ZN11MockSupport6enableEv>:

void MockSupport::enable()
{
 800c99a:	b580      	push	{r7, lr}
 800c99c:	b084      	sub	sp, #16
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	3338      	adds	r3, #56	; 0x38
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f013 ffb9 	bl	8020926 <_ZN18MockNamedValueList5beginEv>
 800c9b4:	60f8      	str	r0, [r7, #12]
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d01a      	beq.n	800c9f2 <_ZN11MockSupport6enableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->enable();
 800c9bc:	68f9      	ldr	r1, [r7, #12]
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	f000 fbd2 	bl	800d168 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	bf14      	ite	ne
 800c9ca:	2301      	movne	r3, #1
 800c9cc:	2300      	moveq	r3, #0
 800c9ce:	b2db      	uxtb	r3, r3
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d009      	beq.n	800c9e8 <_ZN11MockSupport6enableEv+0x4e>
 800c9d4:	68f9      	ldr	r1, [r7, #12]
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f000 fbc6 	bl	800d168 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	681a      	ldr	r2, [r3, #0]
 800c9e0:	3288      	adds	r2, #136	; 0x88
 800c9e2:	6812      	ldr	r2, [r2, #0]
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800c9e8:	68f8      	ldr	r0, [r7, #12]
 800c9ea:	f013 fea5 	bl	8020738 <_ZN22MockNamedValueListNode4nextEv>
 800c9ee:	60f8      	str	r0, [r7, #12]
 800c9f0:	e7e1      	b.n	800c9b6 <_ZN11MockSupport6enableEv+0x1c>
}
 800c9f2:	bf00      	nop
 800c9f4:	3710      	adds	r7, #16
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}

0800c9fa <_ZN11MockSupport7tracingEb>:

void MockSupport::tracing(bool enabled)
{
 800c9fa:	b580      	push	{r7, lr}
 800c9fc:	b084      	sub	sp, #16
 800c9fe:	af00      	add	r7, sp, #0
 800ca00:	6078      	str	r0, [r7, #4]
 800ca02:	460b      	mov	r3, r1
 800ca04:	70fb      	strb	r3, [r7, #3]
    tracing_ = enabled;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	78fa      	ldrb	r2, [r7, #3]
 800ca0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	3338      	adds	r3, #56	; 0x38
 800ca12:	4618      	mov	r0, r3
 800ca14:	f013 ff87 	bl	8020926 <_ZN18MockNamedValueList5beginEv>
 800ca18:	60f8      	str	r0, [r7, #12]
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d01b      	beq.n	800ca58 <_ZN11MockSupport7tracingEb+0x5e>
        if (getMockSupport(p)) getMockSupport(p)->tracing(enabled);
 800ca20:	68f9      	ldr	r1, [r7, #12]
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f000 fba0 	bl	800d168 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	bf14      	ite	ne
 800ca2e:	2301      	movne	r3, #1
 800ca30:	2300      	moveq	r3, #0
 800ca32:	b2db      	uxtb	r3, r3
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d00a      	beq.n	800ca4e <_ZN11MockSupport7tracingEb+0x54>
 800ca38:	68f9      	ldr	r1, [r7, #12]
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f000 fb94 	bl	800d168 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ca40:	4603      	mov	r3, r0
 800ca42:	681a      	ldr	r2, [r3, #0]
 800ca44:	328c      	adds	r2, #140	; 0x8c
 800ca46:	6812      	ldr	r2, [r2, #0]
 800ca48:	78f9      	ldrb	r1, [r7, #3]
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800ca4e:	68f8      	ldr	r0, [r7, #12]
 800ca50:	f013 fe72 	bl	8020738 <_ZN22MockNamedValueListNode4nextEv>
 800ca54:	60f8      	str	r0, [r7, #12]
 800ca56:	e7e0      	b.n	800ca1a <_ZN11MockSupport7tracingEb+0x20>
}
 800ca58:	bf00      	nop
 800ca5a:	3710      	adds	r7, #16
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}

0800ca60 <_ZN11MockSupport17expectedCallsLeftEv>:
{
    return MockActualCallTrace::instance().getTraceOutput();
}

bool MockSupport::expectedCallsLeft()
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b084      	sub	sp, #16
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
    int callsLeft = expectations_.hasUnfulfilledExpectations();
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	3320      	adds	r3, #32
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f010 fbc1 	bl	801d1f4 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>
 800ca72:	4603      	mov	r3, r0
 800ca74:	60fb      	str	r3, [r7, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	3338      	adds	r3, #56	; 0x38
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f013 ff53 	bl	8020926 <_ZN18MockNamedValueList5beginEv>
 800ca80:	60b8      	str	r0, [r7, #8]
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d01f      	beq.n	800cac8 <_ZN11MockSupport17expectedCallsLeftEv+0x68>
        if (getMockSupport(p)) callsLeft += getMockSupport(p)->expectedCallsLeft();
 800ca88:	68b9      	ldr	r1, [r7, #8]
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f000 fb6c 	bl	800d168 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ca90:	4603      	mov	r3, r0
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	bf14      	ite	ne
 800ca96:	2301      	movne	r3, #1
 800ca98:	2300      	moveq	r3, #0
 800ca9a:	b2db      	uxtb	r3, r3
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d00e      	beq.n	800cabe <_ZN11MockSupport17expectedCallsLeftEv+0x5e>
 800caa0:	68b9      	ldr	r1, [r7, #8]
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f000 fb60 	bl	800d168 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800caa8:	4603      	mov	r3, r0
 800caaa:	681a      	ldr	r2, [r3, #0]
 800caac:	3298      	adds	r2, #152	; 0x98
 800caae:	6812      	ldr	r2, [r2, #0]
 800cab0:	4618      	mov	r0, r3
 800cab2:	4790      	blx	r2
 800cab4:	4603      	mov	r3, r0
 800cab6:	461a      	mov	r2, r3
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	4413      	add	r3, r2
 800cabc:	60fb      	str	r3, [r7, #12]
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800cabe:	68b8      	ldr	r0, [r7, #8]
 800cac0:	f013 fe3a 	bl	8020738 <_ZN22MockNamedValueListNode4nextEv>
 800cac4:	60b8      	str	r0, [r7, #8]
 800cac6:	e7dc      	b.n	800ca82 <_ZN11MockSupport17expectedCallsLeftEv+0x22>

    return callsLeft != 0;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	bf14      	ite	ne
 800cace:	2301      	movne	r3, #1
 800cad0:	2300      	moveq	r3, #0
 800cad2:	b2db      	uxtb	r3, r3
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3710      	adds	r7, #16
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}

0800cadc <_ZN11MockSupport26wasLastActualCallFulfilledEv>:

bool MockSupport::wasLastActualCallFulfilled()
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b084      	sub	sp, #16
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_ && !lastActualFunctionCall_->isFulfilled())
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d010      	beq.n	800cb0e <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	33bc      	adds	r3, #188	; 0xbc
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	4610      	mov	r0, r2
 800cafc:	4798      	blx	r3
 800cafe:	4603      	mov	r3, r0
 800cb00:	f083 0301 	eor.w	r3, r3, #1
 800cb04:	b2db      	uxtb	r3, r3
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d001      	beq.n	800cb0e <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	e000      	b.n	800cb10 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x34>
 800cb0e:	2300      	movs	r3, #0
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d001      	beq.n	800cb18 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x3c>
        return false;
 800cb14:	2300      	movs	r3, #0
 800cb16:	e02a      	b.n	800cb6e <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	3338      	adds	r3, #56	; 0x38
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f013 ff02 	bl	8020926 <_ZN18MockNamedValueList5beginEv>
 800cb22:	60f8      	str	r0, [r7, #12]
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d020      	beq.n	800cb6c <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x90>
        if (getMockSupport(p) && !getMockSupport(p)->wasLastActualCallFulfilled())
 800cb2a:	68f9      	ldr	r1, [r7, #12]
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f000 fb1b 	bl	800d168 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800cb32:	4603      	mov	r3, r0
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d00f      	beq.n	800cb58 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800cb38:	68f9      	ldr	r1, [r7, #12]
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f000 fb14 	bl	800d168 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800cb40:	4603      	mov	r3, r0
 800cb42:	4618      	mov	r0, r3
 800cb44:	f7ff ffca 	bl	800cadc <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	f083 0301 	eor.w	r3, r3, #1
 800cb4e:	b2db      	uxtb	r3, r3
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d001      	beq.n	800cb58 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800cb54:	2301      	movs	r3, #1
 800cb56:	e000      	b.n	800cb5a <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7e>
 800cb58:	2300      	movs	r3, #0
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d001      	beq.n	800cb62 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x86>
                return false;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	e005      	b.n	800cb6e <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800cb62:	68f8      	ldr	r0, [r7, #12]
 800cb64:	f013 fde8 	bl	8020738 <_ZN22MockNamedValueListNode4nextEv>
 800cb68:	60f8      	str	r0, [r7, #12]
 800cb6a:	e7db      	b.n	800cb24 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x48>

    return true;
 800cb6c:	2301      	movs	r3, #1
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3710      	adds	r7, #16
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}

0800cb76 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>:

void MockSupport::failTestWithExpectedCallsNotFulfilled()
{
 800cb76:	b580      	push	{r7, lr}
 800cb78:	b092      	sub	sp, #72	; 0x48
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 800cb7e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cb82:	4618      	mov	r0, r3
 800cb84:	f010 fa2c 	bl	801cfe0 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f103 0220 	add.w	r2, r3, #32
 800cb8e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cb92:	4611      	mov	r1, r2
 800cb94:	4618      	mov	r0, r3
 800cb96:	f010 fbf3 	bl	801d380 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	3338      	adds	r3, #56	; 0x38
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f013 fec1 	bl	8020926 <_ZN18MockNamedValueList5beginEv>
 800cba4:	6478      	str	r0, [r7, #68]	; 0x44
 800cba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d01d      	beq.n	800cbe8 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x72>
        if(getMockSupport(p))
 800cbac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f000 fada 	bl	800d168 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	bf14      	ite	ne
 800cbba:	2301      	movne	r3, #1
 800cbbc:	2300      	moveq	r3, #0
 800cbbe:	b2db      	uxtb	r3, r3
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d00c      	beq.n	800cbde <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800cbc4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f000 face 	bl	800d168 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	f103 0220 	add.w	r2, r3, #32
 800cbd2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cbd6:	4611      	mov	r1, r2
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f010 fbd1 	bl	801d380 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800cbde:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cbe0:	f013 fdaa 	bl	8020738 <_ZN22MockNamedValueListNode4nextEv>
 800cbe4:	6478      	str	r0, [r7, #68]	; 0x44
 800cbe6:	e7de      	b.n	800cba6 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x30>

    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	691a      	ldr	r2, [r3, #16]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	691b      	ldr	r3, [r3, #16]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	330c      	adds	r3, #12
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	4610      	mov	r0, r2
 800cbf8:	4798      	blx	r3
 800cbfa:	4601      	mov	r1, r0
 800cbfc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800cc00:	f107 0308 	add.w	r3, r7, #8
 800cc04:	4618      	mov	r0, r3
 800cc06:	f011 f9f5 	bl	801dff4 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	33c4      	adds	r3, #196	; 0xc4
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f107 0208 	add.w	r2, r7, #8
 800cc16:	4611      	mov	r1, r2
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	4798      	blx	r3
    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800cc1c:	f107 0308 	add.w	r3, r7, #8
 800cc20:	4618      	mov	r0, r3
 800cc22:	f000 fe6d 	bl	800d900 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800cc26:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f010 f9ec 	bl	801d008 <_ZN21MockExpectedCallsListD1Ev>
}
 800cc30:	bf00      	nop
 800cc32:	3748      	adds	r7, #72	; 0x48
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>:

void MockSupport::failTestWithOutOfOrderCalls()
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b092      	sub	sp, #72	; 0x48
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 800cc40:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cc44:	4618      	mov	r0, r3
 800cc46:	f010 f9cb 	bl	801cfe0 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f103 0220 	add.w	r2, r3, #32
 800cc50:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cc54:	4611      	mov	r1, r2
 800cc56:	4618      	mov	r0, r3
 800cc58:	f010 fb92 	bl	801d380 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	3338      	adds	r3, #56	; 0x38
 800cc60:	4618      	mov	r0, r3
 800cc62:	f013 fe60 	bl	8020926 <_ZN18MockNamedValueList5beginEv>
 800cc66:	6478      	str	r0, [r7, #68]	; 0x44
 800cc68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d01d      	beq.n	800ccaa <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x72>
        if(getMockSupport(p))
 800cc6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f000 fa79 	bl	800d168 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800cc76:	4603      	mov	r3, r0
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	bf14      	ite	ne
 800cc7c:	2301      	movne	r3, #1
 800cc7e:	2300      	moveq	r3, #0
 800cc80:	b2db      	uxtb	r3, r3
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d00c      	beq.n	800cca0 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800cc86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f000 fa6d 	bl	800d168 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	f103 0220 	add.w	r2, r3, #32
 800cc94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cc98:	4611      	mov	r1, r2
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f010 fb70 	bl	801d380 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800cca0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cca2:	f013 fd49 	bl	8020738 <_ZN22MockNamedValueListNode4nextEv>
 800cca6:	6478      	str	r0, [r7, #68]	; 0x44
 800cca8:	e7de      	b.n	800cc68 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x30>

    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	691a      	ldr	r2, [r3, #16]
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	691b      	ldr	r3, [r3, #16]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	330c      	adds	r3, #12
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	4610      	mov	r0, r2
 800ccba:	4798      	blx	r3
 800ccbc:	4601      	mov	r1, r0
 800ccbe:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800ccc2:	f107 0308 	add.w	r3, r7, #8
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f011 fa38 	bl	801e13c <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	33c4      	adds	r3, #196	; 0xc4
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f107 0208 	add.w	r2, r7, #8
 800ccd8:	4611      	mov	r1, r2
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	4798      	blx	r3
    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800ccde:	f107 0308 	add.w	r3, r7, #8
 800cce2:	4618      	mov	r0, r3
 800cce4:	f000 fe2e 	bl	800d944 <_ZN20MockCallOrderFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800cce8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ccec:	4618      	mov	r0, r3
 800ccee:	f010 f98b 	bl	801d008 <_ZN21MockExpectedCallsListD1Ev>
}
 800ccf2:	bf00      	nop
 800ccf4:	3748      	adds	r7, #72	; 0x48
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}

0800ccfa <_ZN11MockSupport8failTestER11MockFailure>:

void MockSupport::failTest(MockFailure& failure)
{
 800ccfa:	b580      	push	{r7, lr}
 800ccfc:	b082      	sub	sp, #8
 800ccfe:	af00      	add	r7, sp, #0
 800cd00:	6078      	str	r0, [r7, #4]
 800cd02:	6039      	str	r1, [r7, #0]
    clear();
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	339c      	adds	r3, #156	; 0x9c
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	4798      	blx	r3
    activeReporter_->failTest(failure);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	691a      	ldr	r2, [r3, #16]
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	691b      	ldr	r3, [r3, #16]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	3308      	adds	r3, #8
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	6839      	ldr	r1, [r7, #0]
 800cd20:	4610      	mov	r0, r2
 800cd22:	4798      	blx	r3
}
 800cd24:	bf00      	nop
 800cd26:	3708      	adds	r7, #8
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}

0800cd2c <_ZN11MockSupport10countCheckEv>:

void MockSupport::countCheck()
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b082      	sub	sp, #8
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
    UtestShell::getCurrent()->countCheck();
 800cd34:	f008 fd0a 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f007 fb78 	bl	8014430 <_ZN10UtestShell10countCheckEv>
}
 800cd40:	bf00      	nop
 800cd42:	3708      	adds	r7, #8
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}

0800cd48 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>:

void MockSupport::checkExpectationsOfLastActualCall()
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b084      	sub	sp, #16
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
    if(lastActualFunctionCall_)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d008      	beq.n	800cd6a <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x22>
        lastActualFunctionCall_->checkExpectations();
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	33c4      	adds	r3, #196	; 0xc4
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	4610      	mov	r0, r2
 800cd68:	4798      	blx	r3

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	3338      	adds	r3, #56	; 0x38
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f013 fdd9 	bl	8020926 <_ZN18MockNamedValueList5beginEv>
 800cd74:	60f8      	str	r0, [r7, #12]
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d023      	beq.n	800cdc4 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x7c>
        if(getMockSupport(p) && getMockSupport(p)->lastActualFunctionCall_)
 800cd7c:	68f9      	ldr	r1, [r7, #12]
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f000 f9f2 	bl	800d168 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800cd84:	4603      	mov	r3, r0
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d009      	beq.n	800cd9e <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800cd8a:	68f9      	ldr	r1, [r7, #12]
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f000 f9eb 	bl	800d168 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800cd92:	4603      	mov	r3, r0
 800cd94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d001      	beq.n	800cd9e <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	e000      	b.n	800cda0 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x58>
 800cd9e:	2300      	movs	r3, #0
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d00a      	beq.n	800cdba <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x72>
            getMockSupport(p)->lastActualFunctionCall_->checkExpectations();
 800cda4:	68f9      	ldr	r1, [r7, #12]
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f000 f9de 	bl	800d168 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800cdac:	4603      	mov	r3, r0
 800cdae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdb0:	681a      	ldr	r2, [r3, #0]
 800cdb2:	32c4      	adds	r2, #196	; 0xc4
 800cdb4:	6812      	ldr	r2, [r2, #0]
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	4790      	blx	r2
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800cdba:	68f8      	ldr	r0, [r7, #12]
 800cdbc:	f013 fcbc 	bl	8020738 <_ZN22MockNamedValueListNode4nextEv>
 800cdc0:	60f8      	str	r0, [r7, #12]
 800cdc2:	e7d8      	b.n	800cd76 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x2e>
}
 800cdc4:	bf00      	nop
 800cdc6:	3710      	adds	r7, #16
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}

0800cdcc <_ZN11MockSupport18hasCallsOutOfOrderEv>:

bool MockSupport::hasCallsOutOfOrder()
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
    if (expectations_.hasCallsOutOfOrder())
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	3320      	adds	r3, #32
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f010 f947 	bl	801d06c <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>
 800cdde:	4603      	mov	r3, r0
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d001      	beq.n	800cde8 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x1c>
    {
        return true;
 800cde4:	2301      	movs	r3, #1
 800cde6:	e027      	b.n	800ce38 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    }
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	3338      	adds	r3, #56	; 0x38
 800cdec:	4618      	mov	r0, r3
 800cdee:	f013 fd9a 	bl	8020926 <_ZN18MockNamedValueList5beginEv>
 800cdf2:	60f8      	str	r0, [r7, #12]
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d01d      	beq.n	800ce36 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6a>
        if (getMockSupport(p) && getMockSupport(p)->hasCallsOutOfOrder())
 800cdfa:	68f9      	ldr	r1, [r7, #12]
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f000 f9b3 	bl	800d168 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ce02:	4603      	mov	r3, r0
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d00c      	beq.n	800ce22 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800ce08:	68f9      	ldr	r1, [r7, #12]
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f000 f9ac 	bl	800d168 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800ce10:	4603      	mov	r3, r0
 800ce12:	4618      	mov	r0, r3
 800ce14:	f7ff ffda 	bl	800cdcc <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d001      	beq.n	800ce22 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800ce1e:	2301      	movs	r3, #1
 800ce20:	e000      	b.n	800ce24 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x58>
 800ce22:	2300      	movs	r3, #0
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d001      	beq.n	800ce2c <_ZN11MockSupport18hasCallsOutOfOrderEv+0x60>
        {
            return true;
 800ce28:	2301      	movs	r3, #1
 800ce2a:	e005      	b.n	800ce38 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800ce2c:	68f8      	ldr	r0, [r7, #12]
 800ce2e:	f013 fc83 	bl	8020738 <_ZN22MockNamedValueListNode4nextEv>
 800ce32:	60f8      	str	r0, [r7, #12]
 800ce34:	e7de      	b.n	800cdf4 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x28>
        }
    return false;
 800ce36:	2300      	movs	r3, #0
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3710      	adds	r7, #16
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}

0800ce40 <_ZN11MockSupport17checkExpectationsEv>:

void MockSupport::checkExpectations()
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
    checkExpectationsOfLastActualCall();
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f7ff ff7d 	bl	800cd48 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>

    if (wasLastActualCallFulfilled() && expectedCallsLeft())
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f7ff fe44 	bl	800cadc <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800ce54:	4603      	mov	r3, r0
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d00a      	beq.n	800ce70 <_ZN11MockSupport17checkExpectationsEv+0x30>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	3398      	adds	r3, #152	; 0x98
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	4798      	blx	r3
 800ce66:	4603      	mov	r3, r0
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d001      	beq.n	800ce70 <_ZN11MockSupport17checkExpectationsEv+0x30>
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	e000      	b.n	800ce72 <_ZN11MockSupport17checkExpectationsEv+0x32>
 800ce70:	2300      	movs	r3, #0
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d002      	beq.n	800ce7c <_ZN11MockSupport17checkExpectationsEv+0x3c>
        failTestWithExpectedCallsNotFulfilled();
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f7ff fe7d 	bl	800cb76 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>

    if (hasCallsOutOfOrder())
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f7ff ffa5 	bl	800cdcc <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800ce82:	4603      	mov	r3, r0
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d002      	beq.n	800ce8e <_ZN11MockSupport17checkExpectationsEv+0x4e>
        failTestWithOutOfOrderCalls();
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f7ff fed5 	bl	800cc38 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>
}
 800ce8e:	bf00      	nop
 800ce90:	3708      	adds	r7, #8
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}

0800ce96 <_ZN11MockSupport7hasDataERK12SimpleString>:


bool MockSupport::hasData(const SimpleString& name)
{
 800ce96:	b580      	push	{r7, lr}
 800ce98:	b082      	sub	sp, #8
 800ce9a:	af00      	add	r7, sp, #0
 800ce9c:	6078      	str	r0, [r7, #4]
 800ce9e:	6039      	str	r1, [r7, #0]
    return data_.getValueByName(name) != NULLPTR;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	3338      	adds	r3, #56	; 0x38
 800cea4:	6839      	ldr	r1, [r7, #0]
 800cea6:	4618      	mov	r0, r3
 800cea8:	f013 fd0e 	bl	80208c8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800ceac:	4603      	mov	r3, r0
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	bf14      	ite	ne
 800ceb2:	2301      	movne	r3, #1
 800ceb4:	2300      	moveq	r3, #0
 800ceb6:	b2db      	uxtb	r3, r3
}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	3708      	adds	r7, #8
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>:

MockNamedValue* MockSupport::retrieveDataFromStore(const SimpleString& name)
{
 800cec0:	b590      	push	{r4, r7, lr}
 800cec2:	b085      	sub	sp, #20
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	6039      	str	r1, [r7, #0]
    MockNamedValue* newData = data_.getValueByName(name);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	3338      	adds	r3, #56	; 0x38
 800cece:	6839      	ldr	r1, [r7, #0]
 800ced0:	4618      	mov	r0, r3
 800ced2:	f013 fcf9 	bl	80208c8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800ced6:	60f8      	str	r0, [r7, #12]
    if (newData == NULLPTR) {
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d111      	bne.n	800cf02 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x42>
        newData = new MockNamedValue(name);
 800cede:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800cee2:	490a      	ldr	r1, [pc, #40]	; (800cf0c <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x4c>)
 800cee4:	2038      	movs	r0, #56	; 0x38
 800cee6:	f7fe fc8b 	bl	800b800 <_ZnwjPKci>
 800ceea:	4604      	mov	r4, r0
 800ceec:	6839      	ldr	r1, [r7, #0]
 800ceee:	4620      	mov	r0, r4
 800cef0:	f011 fd6e 	bl	801e9d0 <_ZN14MockNamedValueC1ERK12SimpleString>
 800cef4:	60fc      	str	r4, [r7, #12]
        data_.add(newData);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	3338      	adds	r3, #56	; 0x38
 800cefa:	68f9      	ldr	r1, [r7, #12]
 800cefc:	4618      	mov	r0, r3
 800cefe:	f013 fcad 	bl	802085c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    }
    return newData;
 800cf02:	68fb      	ldr	r3, [r7, #12]
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	3714      	adds	r7, #20
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd90      	pop	{r4, r7, pc}
 800cf0c:	08025ce4 	.word	0x08025ce4

0800cf10 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setValue(value);
}

void MockSupport::setDataObject(const SimpleString& name, const SimpleString& type, void* value)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b086      	sub	sp, #24
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	60f8      	str	r0, [r7, #12]
 800cf18:	60b9      	str	r1, [r7, #8]
 800cf1a:	607a      	str	r2, [r7, #4]
 800cf1c:	603b      	str	r3, [r7, #0]
    MockNamedValue* newData = retrieveDataFromStore(name);
 800cf1e:	68b9      	ldr	r1, [r7, #8]
 800cf20:	68f8      	ldr	r0, [r7, #12]
 800cf22:	f7ff ffcd 	bl	800cec0 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>
 800cf26:	6178      	str	r0, [r7, #20]
    newData->setObjectPointer(type, value);
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	3344      	adds	r3, #68	; 0x44
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	683a      	ldr	r2, [r7, #0]
 800cf32:	6879      	ldr	r1, [r7, #4]
 800cf34:	6978      	ldr	r0, [r7, #20]
 800cf36:	4798      	blx	r3
}
 800cf38:	bf00      	nop
 800cf3a:	3718      	adds	r7, #24
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}

0800cf40 <_ZN11MockSupport7getDataERK12SimpleString>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setConstObjectPointer(type, value);
}

MockNamedValue MockSupport::getData(const SimpleString& name)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b088      	sub	sp, #32
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	60f8      	str	r0, [r7, #12]
 800cf48:	60b9      	str	r1, [r7, #8]
 800cf4a:	607a      	str	r2, [r7, #4]
    MockNamedValue* value = data_.getValueByName(name);
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	3338      	adds	r3, #56	; 0x38
 800cf50:	6879      	ldr	r1, [r7, #4]
 800cf52:	4618      	mov	r0, r3
 800cf54:	f013 fcb8 	bl	80208c8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800cf58:	61f8      	str	r0, [r7, #28]
    if (value == NULLPTR)
 800cf5a:	69fb      	ldr	r3, [r7, #28]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d111      	bne.n	800cf84 <_ZN11MockSupport7getDataERK12SimpleString+0x44>
        return MockNamedValue("");
 800cf60:	f107 0314 	add.w	r3, r7, #20
 800cf64:	490b      	ldr	r1, [pc, #44]	; (800cf94 <_ZN11MockSupport7getDataERK12SimpleString+0x54>)
 800cf66:	4618      	mov	r0, r3
 800cf68:	f001 f80d 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800cf6c:	f107 0314 	add.w	r3, r7, #20
 800cf70:	4619      	mov	r1, r3
 800cf72:	68f8      	ldr	r0, [r7, #12]
 800cf74:	f011 fd2c 	bl	801e9d0 <_ZN14MockNamedValueC1ERK12SimpleString>
 800cf78:	f107 0314 	add.w	r3, r7, #20
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f001 fbba 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800cf82:	e003      	b.n	800cf8c <_ZN11MockSupport7getDataERK12SimpleString+0x4c>
    return *value;
 800cf84:	69f9      	ldr	r1, [r7, #28]
 800cf86:	68f8      	ldr	r0, [r7, #12]
 800cf88:	f7ff f8a2 	bl	800c0d0 <_ZN14MockNamedValueC1ERKS_>
}
 800cf8c:	68f8      	ldr	r0, [r7, #12]
 800cf8e:	3720      	adds	r7, #32
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}
 800cf94:	08025cdc 	.word	0x08025cdc

0800cf98 <_ZN11MockSupport5cloneERK12SimpleString>:

MockSupport* MockSupport::clone(const SimpleString& mockName)
{
 800cf98:	b590      	push	{r4, r7, lr}
 800cf9a:	b085      	sub	sp, #20
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
 800cfa0:	6039      	str	r1, [r7, #0]
    MockSupport* newMock = new MockSupport(mockName);
 800cfa2:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800cfa6:	4927      	ldr	r1, [pc, #156]	; (800d044 <_ZN11MockSupport5cloneERK12SimpleString+0xac>)
 800cfa8:	2048      	movs	r0, #72	; 0x48
 800cfaa:	f7fe fc29 	bl	800b800 <_ZnwjPKci>
 800cfae:	4604      	mov	r4, r0
 800cfb0:	6839      	ldr	r1, [r7, #0]
 800cfb2:	4620      	mov	r0, r4
 800cfb4:	f7ff f8f8 	bl	800c1a8 <_ZN11MockSupportC1ERK12SimpleString>
 800cfb8:	60fc      	str	r4, [r7, #12]
    newMock->setMockFailureStandardReporter(standardReporter_);
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	33a4      	adds	r3, #164	; 0xa4
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	687a      	ldr	r2, [r7, #4]
 800cfc4:	6952      	ldr	r2, [r2, #20]
 800cfc6:	4611      	mov	r1, r2
 800cfc8:	68f8      	ldr	r0, [r7, #12]
 800cfca:	4798      	blx	r3
    if (ignoreOtherCalls_) newMock->ignoreOtherCalls();
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d005      	beq.n	800cfe2 <_ZN11MockSupport5cloneERK12SimpleString+0x4a>
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	3390      	adds	r3, #144	; 0x90
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	68f8      	ldr	r0, [r7, #12]
 800cfe0:	4798      	blx	r3

    if (!enabled_) newMock->disable();
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800cfe8:	f083 0301 	eor.w	r3, r3, #1
 800cfec:	b2db      	uxtb	r3, r3
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d005      	beq.n	800cffe <_ZN11MockSupport5cloneERK12SimpleString+0x66>
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	3384      	adds	r3, #132	; 0x84
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	68f8      	ldr	r0, [r7, #12]
 800cffc:	4798      	blx	r3

    if (strictOrdering_) newMock->strictOrder();
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	7b1b      	ldrb	r3, [r3, #12]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d005      	beq.n	800d012 <_ZN11MockSupport5cloneERK12SimpleString+0x7a>
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	3308      	adds	r3, #8
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	68f8      	ldr	r0, [r7, #12]
 800d010:	4798      	blx	r3

    newMock->tracing(tracing_);
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	338c      	adds	r3, #140	; 0x8c
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	687a      	ldr	r2, [r7, #4]
 800d01c:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 800d020:	4611      	mov	r1, r2
 800d022:	68f8      	ldr	r0, [r7, #12]
 800d024:	4798      	blx	r3
    newMock->installComparatorsAndCopiers(comparatorsAndCopiersRepository_);
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	33b8      	adds	r3, #184	; 0xb8
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	687a      	ldr	r2, [r7, #4]
 800d030:	3230      	adds	r2, #48	; 0x30
 800d032:	4611      	mov	r1, r2
 800d034:	68f8      	ldr	r0, [r7, #12]
 800d036:	4798      	blx	r3
    return newMock;
 800d038:	68fb      	ldr	r3, [r7, #12]
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	3714      	adds	r7, #20
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd90      	pop	{r4, r7, pc}
 800d042:	bf00      	nop
 800d044:	08025ce4 	.word	0x08025ce4

0800d048 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>:

MockSupport* MockSupport::getMockSupportScope(const SimpleString& name)
{
 800d048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d04a:	b0ab      	sub	sp, #172	; 0xac
 800d04c:	af04      	add	r7, sp, #16
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	6039      	str	r1, [r7, #0]
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800d052:	f107 0308 	add.w	r3, r7, #8
 800d056:	4941      	ldr	r1, [pc, #260]	; (800d15c <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x114>)
 800d058:	4618      	mov	r0, r3
 800d05a:	f000 ff94 	bl	800df86 <_ZN12SimpleStringC1EPKc>
    mockingSupportName += name;
 800d05e:	f107 0308 	add.w	r3, r7, #8
 800d062:	6839      	ldr	r1, [r7, #0]
 800d064:	4618      	mov	r0, r3
 800d066:	f001 fbc3 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>

    if (hasData(mockingSupportName)) {
 800d06a:	f107 0308 	add.w	r3, r7, #8
 800d06e:	4619      	mov	r1, r3
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f7ff ff10 	bl	800ce96 <_ZN11MockSupport7hasDataERK12SimpleString>
 800d076:	4603      	mov	r3, r0
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d048      	beq.n	800d10e <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xc6>
        STRCMP_EQUAL("MockSupport", getData(mockingSupportName).getType().asCharString());
 800d07c:	f008 fb66 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 800d080:	4604      	mov	r4, r0
 800d082:	6823      	ldr	r3, [r4, #0]
 800d084:	3324      	adds	r3, #36	; 0x24
 800d086:	681d      	ldr	r5, [r3, #0]
 800d088:	f107 0318 	add.w	r3, r7, #24
 800d08c:	f107 0208 	add.w	r2, r7, #8
 800d090:	6879      	ldr	r1, [r7, #4]
 800d092:	4618      	mov	r0, r3
 800d094:	f7ff ff54 	bl	800cf40 <_ZN11MockSupport7getDataERK12SimpleString>
 800d098:	f107 0310 	add.w	r3, r7, #16
 800d09c:	f107 0218 	add.w	r2, r7, #24
 800d0a0:	4611      	mov	r1, r2
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f011 ff63 	bl	801ef6e <_ZNK14MockNamedValue7getTypeEv>
 800d0a8:	f107 0310 	add.w	r3, r7, #16
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f001 faf5 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 800d0b2:	4606      	mov	r6, r0
 800d0b4:	f008 fb5a 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	9302      	str	r3, [sp, #8]
 800d0bc:	f240 13bd 	movw	r3, #445	; 0x1bd
 800d0c0:	9301      	str	r3, [sp, #4]
 800d0c2:	4b27      	ldr	r3, [pc, #156]	; (800d160 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x118>)
 800d0c4:	9300      	str	r3, [sp, #0]
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	4632      	mov	r2, r6
 800d0ca:	4926      	ldr	r1, [pc, #152]	; (800d164 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800d0cc:	4620      	mov	r0, r4
 800d0ce:	47a8      	blx	r5
 800d0d0:	f107 0310 	add.w	r3, r7, #16
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f001 fb0e 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800d0da:	f107 0318 	add.w	r3, r7, #24
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f011 fca0 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
        return (MockSupport*) getData(mockingSupportName).getObjectPointer();
 800d0e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d0e8:	f107 0208 	add.w	r2, r7, #8
 800d0ec:	6879      	ldr	r1, [r7, #4]
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f7ff ff26 	bl	800cf40 <_ZN11MockSupport7getDataERK12SimpleString>
 800d0f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f012 fa51 	bl	801f5a0 <_ZNK14MockNamedValue16getObjectPointerEv>
 800d0fe:	4604      	mov	r4, r0
 800d100:	bf00      	nop
 800d102:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d106:	4618      	mov	r0, r3
 800d108:	f011 fc8c 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
 800d10c:	e01b      	b.n	800d146 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xfe>
    }

    MockSupport *newMock = clone(name);
 800d10e:	6839      	ldr	r1, [r7, #0]
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f7ff ff41 	bl	800cf98 <_ZN11MockSupport5cloneERK12SimpleString>
 800d116:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    setDataObject(mockingSupportName, "MockSupport", newMock);
 800d11a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800d11e:	4911      	ldr	r1, [pc, #68]	; (800d164 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800d120:	4618      	mov	r0, r3
 800d122:	f000 ff30 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800d126:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800d12a:	f107 0108 	add.w	r1, r7, #8
 800d12e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f7ff feec 	bl	800cf10 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>
 800d138:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800d13c:	4618      	mov	r0, r3
 800d13e:	f001 fada 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    return newMock;
 800d142:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800d146:	f107 0308 	add.w	r3, r7, #8
 800d14a:	4618      	mov	r0, r3
 800d14c:	f001 fad3 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800d150:	4623      	mov	r3, r4
}
 800d152:	4618      	mov	r0, r3
 800d154:	379c      	adds	r7, #156	; 0x9c
 800d156:	46bd      	mov	sp, r7
 800d158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d15a:	bf00      	nop
 800d15c:	08025cfc 	.word	0x08025cfc
 800d160:	08025ce4 	.word	0x08025ce4
 800d164:	08025d1c 	.word	0x08025d1c

0800d168 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>:

MockSupport* MockSupport::getMockSupport(MockNamedValueListNode* node)
{
 800d168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d16c:	b08b      	sub	sp, #44	; 0x2c
 800d16e:	af00      	add	r7, sp, #0
 800d170:	6078      	str	r0, [r7, #4]
 800d172:	6039      	str	r1, [r7, #0]
    if (node->getType() == "MockSupport" && node->getName().contains(MOCK_SUPPORT_SCOPE_PREFIX))
 800d174:	2500      	movs	r5, #0
 800d176:	2600      	movs	r6, #0
 800d178:	f107 0308 	add.w	r3, r7, #8
 800d17c:	6839      	ldr	r1, [r7, #0]
 800d17e:	4618      	mov	r0, r3
 800d180:	f013 fb28 	bl	80207d4 <_ZNK22MockNamedValueListNode7getTypeEv>
 800d184:	f04f 0801 	mov.w	r8, #1
 800d188:	f107 0310 	add.w	r3, r7, #16
 800d18c:	492e      	ldr	r1, [pc, #184]	; (800d248 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe0>)
 800d18e:	4618      	mov	r0, r3
 800d190:	f000 fef9 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800d194:	f04f 0901 	mov.w	r9, #1
 800d198:	f107 0210 	add.w	r2, r7, #16
 800d19c:	f107 0308 	add.w	r3, r7, #8
 800d1a0:	4611      	mov	r1, r2
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f001 fab3 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d01a      	beq.n	800d1e4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800d1ae:	f107 0318 	add.w	r3, r7, #24
 800d1b2:	6839      	ldr	r1, [r7, #0]
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f013 fafa 	bl	80207ae <_ZNK22MockNamedValueListNode7getNameEv>
 800d1ba:	2501      	movs	r5, #1
 800d1bc:	f107 0320 	add.w	r3, r7, #32
 800d1c0:	4922      	ldr	r1, [pc, #136]	; (800d24c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe4>)
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f000 fedf 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800d1c8:	2601      	movs	r6, #1
 800d1ca:	f107 0220 	add.w	r2, r7, #32
 800d1ce:	f107 0318 	add.w	r3, r7, #24
 800d1d2:	4611      	mov	r1, r2
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f000 ff54 	bl	800e082 <_ZNK12SimpleString8containsERKS_>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d001      	beq.n	800d1e4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800d1e0:	2401      	movs	r4, #1
 800d1e2:	e000      	b.n	800d1e6 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7e>
 800d1e4:	2400      	movs	r4, #0
 800d1e6:	2e00      	cmp	r6, #0
 800d1e8:	d004      	beq.n	800d1f4 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x8c>
 800d1ea:	f107 0320 	add.w	r3, r7, #32
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f001 fa81 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800d1f4:	2d00      	cmp	r5, #0
 800d1f6:	d004      	beq.n	800d202 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x9a>
 800d1f8:	f107 0318 	add.w	r3, r7, #24
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f001 fa7a 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800d202:	f1b9 0f00 	cmp.w	r9, #0
 800d206:	d004      	beq.n	800d212 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xaa>
 800d208:	f107 0310 	add.w	r3, r7, #16
 800d20c:	4618      	mov	r0, r3
 800d20e:	f001 fa72 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800d212:	f1b8 0f00 	cmp.w	r8, #0
 800d216:	d004      	beq.n	800d222 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xba>
 800d218:	f107 0308 	add.w	r3, r7, #8
 800d21c:	4618      	mov	r0, r3
 800d21e:	f001 fa6a 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800d222:	2c00      	cmp	r4, #0
 800d224:	d00a      	beq.n	800d23c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd4>
        return (MockSupport*) node->item()->getObjectPointer();
 800d226:	6838      	ldr	r0, [r7, #0]
 800d228:	f013 fa92 	bl	8020750 <_ZN22MockNamedValueListNode4itemEv>
 800d22c:	4603      	mov	r3, r0
 800d22e:	681a      	ldr	r2, [r3, #0]
 800d230:	32a0      	adds	r2, #160	; 0xa0
 800d232:	6812      	ldr	r2, [r2, #0]
 800d234:	4618      	mov	r0, r3
 800d236:	4790      	blx	r2
 800d238:	4603      	mov	r3, r0
 800d23a:	e000      	b.n	800d23e <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd6>
    return NULLPTR;
 800d23c:	2300      	movs	r3, #0
}
 800d23e:	4618      	mov	r0, r3
 800d240:	372c      	adds	r7, #44	; 0x2c
 800d242:	46bd      	mov	sp, r7
 800d244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d248:	08025d1c 	.word	0x08025d1c
 800d24c:	08025cfc 	.word	0x08025cfc

0800d250 <_ZN11MockSupport11returnValueEv>:

MockNamedValue MockSupport::returnValue()
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b084      	sub	sp, #16
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
 800d258:	6039      	str	r1, [r7, #0]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->returnValue();
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d00a      	beq.n	800d278 <_ZN11MockSupport11returnValueEv+0x28>
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	3354      	adds	r3, #84	; 0x54
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	687a      	ldr	r2, [r7, #4]
 800d272:	4610      	mov	r0, r2
 800d274:	4798      	blx	r3
 800d276:	e010      	b.n	800d29a <_ZN11MockSupport11returnValueEv+0x4a>
    return MockNamedValue("");
 800d278:	f107 0308 	add.w	r3, r7, #8
 800d27c:	4909      	ldr	r1, [pc, #36]	; (800d2a4 <_ZN11MockSupport11returnValueEv+0x54>)
 800d27e:	4618      	mov	r0, r3
 800d280:	f000 fe81 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800d284:	f107 0308 	add.w	r3, r7, #8
 800d288:	4619      	mov	r1, r3
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f011 fba0 	bl	801e9d0 <_ZN14MockNamedValueC1ERK12SimpleString>
 800d290:	f107 0308 	add.w	r3, r7, #8
 800d294:	4618      	mov	r0, r3
 800d296:	f001 fa2e 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	3710      	adds	r7, #16
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}
 800d2a2:	bf00      	nop
 800d2a4:	08025cdc 	.word	0x08025cdc

0800d2a8 <_ZN11MockSupport15boolReturnValueEv>:

bool MockSupport::boolReturnValue()
{
 800d2a8:	b590      	push	{r4, r7, lr}
 800d2aa:	b091      	sub	sp, #68	; 0x44
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	3320      	adds	r3, #32
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	f107 0208 	add.w	r2, r7, #8
 800d2bc:	6879      	ldr	r1, [r7, #4]
 800d2be:	4610      	mov	r0, r2
 800d2c0:	4798      	blx	r3
 800d2c2:	f107 0308 	add.w	r3, r7, #8
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f011 fe60 	bl	801ef8c <_ZNK14MockNamedValue12getBoolValueEv>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	461c      	mov	r4, r3
 800d2d0:	bf00      	nop
 800d2d2:	f107 0308 	add.w	r3, r7, #8
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f011 fba4 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
 800d2dc:	4623      	mov	r3, r4
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	3744      	adds	r7, #68	; 0x44
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd90      	pop	{r4, r7, pc}

0800d2e6 <_ZN11MockSupport22unsignedIntReturnValueEv>:

unsigned int MockSupport::unsignedIntReturnValue()
{
 800d2e6:	b590      	push	{r4, r7, lr}
 800d2e8:	b091      	sub	sp, #68	; 0x44
 800d2ea:	af00      	add	r7, sp, #0
 800d2ec:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	3320      	adds	r3, #32
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f107 0208 	add.w	r2, r7, #8
 800d2fa:	6879      	ldr	r1, [r7, #4]
 800d2fc:	4610      	mov	r0, r2
 800d2fe:	4798      	blx	r3
 800d300:	f107 0308 	add.w	r3, r7, #8
 800d304:	4618      	mov	r0, r3
 800d306:	f011 fe69 	bl	801efdc <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 800d30a:	4604      	mov	r4, r0
 800d30c:	bf00      	nop
 800d30e:	f107 0308 	add.w	r3, r7, #8
 800d312:	4618      	mov	r0, r3
 800d314:	f011 fb86 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
 800d318:	4623      	mov	r3, r4
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3744      	adds	r7, #68	; 0x44
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd90      	pop	{r4, r7, pc}

0800d322 <_ZN11MockSupport14intReturnValueEv>:

int MockSupport::intReturnValue()
{
 800d322:	b590      	push	{r4, r7, lr}
 800d324:	b091      	sub	sp, #68	; 0x44
 800d326:	af00      	add	r7, sp, #0
 800d328:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	3320      	adds	r3, #32
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	f107 0208 	add.w	r2, r7, #8
 800d336:	6879      	ldr	r1, [r7, #4]
 800d338:	4610      	mov	r0, r2
 800d33a:	4798      	blx	r3
 800d33c:	f107 0308 	add.w	r3, r7, #8
 800d340:	4618      	mov	r0, r3
 800d342:	f011 fe9b 	bl	801f07c <_ZNK14MockNamedValue11getIntValueEv>
 800d346:	4604      	mov	r4, r0
 800d348:	bf00      	nop
 800d34a:	f107 0308 	add.w	r3, r7, #8
 800d34e:	4618      	mov	r0, r3
 800d350:	f011 fb68 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
 800d354:	4623      	mov	r3, r4
}
 800d356:	4618      	mov	r0, r3
 800d358:	3744      	adds	r7, #68	; 0x44
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd90      	pop	{r4, r7, pc}

0800d35e <_ZN11MockSupport26returnStringValueOrDefaultEPKc>:

const char * MockSupport::returnStringValueOrDefault(const char * defaultValue)
{
 800d35e:	b580      	push	{r7, lr}
 800d360:	b082      	sub	sp, #8
 800d362:	af00      	add	r7, sp, #0
 800d364:	6078      	str	r0, [r7, #4]
 800d366:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	331c      	adds	r3, #28
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	4798      	blx	r3
 800d374:	4603      	mov	r3, r0
 800d376:	2b00      	cmp	r3, #0
 800d378:	d007      	beq.n	800d38a <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2c>
        return stringReturnValue();
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	335c      	adds	r3, #92	; 0x5c
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	6878      	ldr	r0, [r7, #4]
 800d384:	4798      	blx	r3
 800d386:	4603      	mov	r3, r0
 800d388:	e000      	b.n	800d38c <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2e>
    }
    return defaultValue;
 800d38a:	683b      	ldr	r3, [r7, #0]
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3708      	adds	r7, #8
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}

0800d394 <_ZN11MockSupport26returnDoubleValueOrDefaultEd>:

double MockSupport::returnDoubleValueOrDefault(double defaultValue)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b084      	sub	sp, #16
 800d398:	af00      	add	r7, sp, #0
 800d39a:	60f8      	str	r0, [r7, #12]
 800d39c:	ed87 0b00 	vstr	d0, [r7]
    if (hasReturnValue()) {
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	331c      	adds	r3, #28
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	68f8      	ldr	r0, [r7, #12]
 800d3aa:	4798      	blx	r3
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d00a      	beq.n	800d3c8 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x34>
        return doubleReturnValue();
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	3368      	adds	r3, #104	; 0x68
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	68f8      	ldr	r0, [r7, #12]
 800d3bc:	4798      	blx	r3
 800d3be:	eeb0 7a40 	vmov.f32	s14, s0
 800d3c2:	eef0 7a60 	vmov.f32	s15, s1
 800d3c6:	e001      	b.n	800d3cc <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x38>
    }
    return defaultValue;
 800d3c8:	ed97 7b00 	vldr	d7, [r7]
}
 800d3cc:	eeb0 0a47 	vmov.f32	s0, s14
 800d3d0:	eef0 0a67 	vmov.f32	s1, s15
 800d3d4:	3710      	adds	r7, #16
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}

0800d3da <_ZN11MockSupport27returnLongIntValueOrDefaultEl>:

long int MockSupport::returnLongIntValueOrDefault(long int defaultValue)
{
 800d3da:	b580      	push	{r7, lr}
 800d3dc:	b082      	sub	sp, #8
 800d3de:	af00      	add	r7, sp, #0
 800d3e0:	6078      	str	r0, [r7, #4]
 800d3e2:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	331c      	adds	r3, #28
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	4798      	blx	r3
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d007      	beq.n	800d406 <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2c>
        return longIntReturnValue();
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	3338      	adds	r3, #56	; 0x38
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	4798      	blx	r3
 800d402:	4603      	mov	r3, r0
 800d404:	e000      	b.n	800d408 <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2e>
    }
    return defaultValue;
 800d406:	683b      	ldr	r3, [r7, #0]
}
 800d408:	4618      	mov	r0, r3
 800d40a:	3708      	adds	r7, #8
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}

0800d410 <_ZN11MockSupport24returnBoolValueOrDefaultEb>:

bool MockSupport::returnBoolValueOrDefault(bool defaultValue)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b082      	sub	sp, #8
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	460b      	mov	r3, r1
 800d41a:	70fb      	strb	r3, [r7, #3]
    if (hasReturnValue()) {
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	331c      	adds	r3, #28
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	6878      	ldr	r0, [r7, #4]
 800d426:	4798      	blx	r3
 800d428:	4603      	mov	r3, r0
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d007      	beq.n	800d43e <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x2e>
        return boolReturnValue();
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	3324      	adds	r3, #36	; 0x24
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	4798      	blx	r3
 800d43a:	4603      	mov	r3, r0
 800d43c:	e000      	b.n	800d440 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x30>
    }
    return defaultValue;
 800d43e:	78fb      	ldrb	r3, [r7, #3]
}
 800d440:	4618      	mov	r0, r3
 800d442:	3708      	adds	r7, #8
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}

0800d448 <_ZN11MockSupport23returnIntValueOrDefaultEi>:

int MockSupport::returnIntValueOrDefault(int defaultValue)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b082      	sub	sp, #8
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
 800d450:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	331c      	adds	r3, #28
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	4798      	blx	r3
 800d45e:	4603      	mov	r3, r0
 800d460:	2b00      	cmp	r3, #0
 800d462:	d007      	beq.n	800d474 <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2c>
        return intReturnValue();
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	332c      	adds	r3, #44	; 0x2c
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	4798      	blx	r3
 800d470:	4603      	mov	r3, r0
 800d472:	e000      	b.n	800d476 <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2e>
    }
    return defaultValue;
 800d474:	683b      	ldr	r3, [r7, #0]
}
 800d476:	4618      	mov	r0, r3
 800d478:	3708      	adds	r7, #8
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}

0800d47e <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockSupport::returnUnsignedIntValueOrDefault(unsigned int defaultValue)
{
 800d47e:	b580      	push	{r7, lr}
 800d480:	b082      	sub	sp, #8
 800d482:	af00      	add	r7, sp, #0
 800d484:	6078      	str	r0, [r7, #4]
 800d486:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	331c      	adds	r3, #28
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	4798      	blx	r3
 800d494:	4603      	mov	r3, r0
 800d496:	2b00      	cmp	r3, #0
 800d498:	d007      	beq.n	800d4aa <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2c>
        return unsignedIntReturnValue();
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	3334      	adds	r3, #52	; 0x34
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	4798      	blx	r3
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	e000      	b.n	800d4ac <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2e>
    }
    return defaultValue;
 800d4aa:	683b      	ldr	r3, [r7, #0]
}
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	3708      	adds	r7, #8
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}

0800d4b4 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockSupport::returnUnsignedLongIntValueOrDefault(unsigned long int defaultValue)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b082      	sub	sp, #8
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	331c      	adds	r3, #28
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	4798      	blx	r3
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d007      	beq.n	800d4e0 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2c>
        return unsignedLongIntReturnValue();
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	3340      	adds	r3, #64	; 0x40
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	4798      	blx	r3
 800d4dc:	4603      	mov	r3, r0
 800d4de:	e000      	b.n	800d4e2 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2e>
    }
    return defaultValue;
 800d4e0:	683b      	ldr	r3, [r7, #0]
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3708      	adds	r7, #8
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}

0800d4ea <_ZN11MockSupport18longIntReturnValueEv>:

long int MockSupport::longIntReturnValue()
{
 800d4ea:	b590      	push	{r4, r7, lr}
 800d4ec:	b091      	sub	sp, #68	; 0x44
 800d4ee:	af00      	add	r7, sp, #0
 800d4f0:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	3320      	adds	r3, #32
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	f107 0208 	add.w	r2, r7, #8
 800d4fe:	6879      	ldr	r1, [r7, #4]
 800d500:	4610      	mov	r0, r2
 800d502:	4798      	blx	r3
 800d504:	f107 0308 	add.w	r3, r7, #8
 800d508:	4618      	mov	r0, r3
 800d50a:	f011 fddf 	bl	801f0cc <_ZNK14MockNamedValue15getLongIntValueEv>
 800d50e:	4604      	mov	r4, r0
 800d510:	bf00      	nop
 800d512:	f107 0308 	add.w	r3, r7, #8
 800d516:	4618      	mov	r0, r3
 800d518:	f011 fa84 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
 800d51c:	4623      	mov	r3, r4
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3744      	adds	r7, #68	; 0x44
 800d522:	46bd      	mov	sp, r7
 800d524:	bd90      	pop	{r4, r7, pc}

0800d526 <_ZN11MockSupport26unsignedLongIntReturnValueEv>:

unsigned long int MockSupport::unsignedLongIntReturnValue()
{
 800d526:	b590      	push	{r4, r7, lr}
 800d528:	b091      	sub	sp, #68	; 0x44
 800d52a:	af00      	add	r7, sp, #0
 800d52c:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	3320      	adds	r3, #32
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f107 0208 	add.w	r2, r7, #8
 800d53a:	6879      	ldr	r1, [r7, #4]
 800d53c:	4610      	mov	r0, r2
 800d53e:	4798      	blx	r3
 800d540:	f107 0308 	add.w	r3, r7, #8
 800d544:	4618      	mov	r0, r3
 800d546:	f011 fe23 	bl	801f190 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 800d54a:	4604      	mov	r4, r0
 800d54c:	bf00      	nop
 800d54e:	f107 0308 	add.w	r3, r7, #8
 800d552:	4618      	mov	r0, r3
 800d554:	f011 fa66 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
 800d558:	4623      	mov	r3, r4
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3744      	adds	r7, #68	; 0x44
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd90      	pop	{r4, r7, pc}
	...

0800d564 <_ZN11MockSupport22longLongIntReturnValueEv>:
}

#else

cpputest_longlong MockSupport::longLongIntReturnValue()
{
 800d564:	b5b0      	push	{r4, r5, r7, lr}
 800d566:	b084      	sub	sp, #16
 800d568:	af02      	add	r7, sp, #8
 800d56a:	6078      	str	r0, [r7, #4]
 800d56c:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 800d56e:	f008 f8ed 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 800d572:	4604      	mov	r4, r0
 800d574:	6823      	ldr	r3, [r4, #0]
 800d576:	3368      	adds	r3, #104	; 0x68
 800d578:	681d      	ldr	r5, [r3, #0]
 800d57a:	f008 f8f7 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800d57e:	4603      	mov	r3, r0
 800d580:	9300      	str	r3, [sp, #0]
 800d582:	f240 2345 	movw	r3, #581	; 0x245
 800d586:	4a06      	ldr	r2, [pc, #24]	; (800d5a0 <_ZN11MockSupport22longLongIntReturnValueEv+0x3c>)
 800d588:	4906      	ldr	r1, [pc, #24]	; (800d5a4 <_ZN11MockSupport22longLongIntReturnValueEv+0x40>)
 800d58a:	4620      	mov	r0, r4
 800d58c:	47a8      	blx	r5
    return cpputest_longlong(0);
 800d58e:	2100      	movs	r1, #0
 800d590:	6878      	ldr	r0, [r7, #4]
 800d592:	f7fe fd2f 	bl	800bff4 <_ZN17cpputest_longlongC1Ei>
}
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	3708      	adds	r7, #8
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bdb0      	pop	{r4, r5, r7, pc}
 800d59e:	bf00      	nop
 800d5a0:	08025ce4 	.word	0x08025ce4
 800d5a4:	08025d28 	.word	0x08025d28

0800d5a8 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv>:

cpputest_ulonglong MockSupport::unsignedLongLongIntReturnValue()
{
 800d5a8:	b5b0      	push	{r4, r5, r7, lr}
 800d5aa:	b084      	sub	sp, #16
 800d5ac:	af02      	add	r7, sp, #8
 800d5ae:	6078      	str	r0, [r7, #4]
 800d5b0:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 800d5b2:	f008 f8cb 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 800d5b6:	4604      	mov	r4, r0
 800d5b8:	6823      	ldr	r3, [r4, #0]
 800d5ba:	3368      	adds	r3, #104	; 0x68
 800d5bc:	681d      	ldr	r5, [r3, #0]
 800d5be:	f008 f8d5 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	9300      	str	r3, [sp, #0]
 800d5c6:	f240 234b 	movw	r3, #587	; 0x24b
 800d5ca:	4a06      	ldr	r2, [pc, #24]	; (800d5e4 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x3c>)
 800d5cc:	4906      	ldr	r1, [pc, #24]	; (800d5e8 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x40>)
 800d5ce:	4620      	mov	r0, r4
 800d5d0:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 800d5d2:	2100      	movs	r1, #0
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	f7fe fd19 	bl	800c00c <_ZN18cpputest_ulonglongC1Ei>
}
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	3708      	adds	r7, #8
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bdb0      	pop	{r4, r5, r7, pc}
 800d5e2:	bf00      	nop
 800d5e4:	08025ce4 	.word	0x08025ce4
 800d5e8:	08025d48 	.word	0x08025d48

0800d5ec <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockSupport::returnLongLongIntValueOrDefault(cpputest_longlong defaultValue)
{
 800d5ec:	b5b0      	push	{r4, r5, r7, lr}
 800d5ee:	b086      	sub	sp, #24
 800d5f0:	af02      	add	r7, sp, #8
 800d5f2:	60f8      	str	r0, [r7, #12]
 800d5f4:	60b9      	str	r1, [r7, #8]
 800d5f6:	4639      	mov	r1, r7
 800d5f8:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 800d5fc:	f008 f8a6 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 800d600:	4604      	mov	r4, r0
 800d602:	6823      	ldr	r3, [r4, #0]
 800d604:	3368      	adds	r3, #104	; 0x68
 800d606:	681d      	ldr	r5, [r3, #0]
 800d608:	f008 f8b0 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800d60c:	4603      	mov	r3, r0
 800d60e:	9300      	str	r3, [sp, #0]
 800d610:	f240 2351 	movw	r3, #593	; 0x251
 800d614:	4a06      	ldr	r2, [pc, #24]	; (800d630 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 800d616:	4907      	ldr	r1, [pc, #28]	; (800d634 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 800d618:	4620      	mov	r0, r4
 800d61a:	47a8      	blx	r5
    return defaultValue;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	461a      	mov	r2, r3
 800d620:	463b      	mov	r3, r7
 800d622:	cb03      	ldmia	r3!, {r0, r1}
 800d624:	6010      	str	r0, [r2, #0]
 800d626:	6051      	str	r1, [r2, #4]
}
 800d628:	68f8      	ldr	r0, [r7, #12]
 800d62a:	3710      	adds	r7, #16
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bdb0      	pop	{r4, r5, r7, pc}
 800d630:	08025ce4 	.word	0x08025ce4
 800d634:	08025d28 	.word	0x08025d28

0800d638 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockSupport::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong defaultValue)
{
 800d638:	b5b0      	push	{r4, r5, r7, lr}
 800d63a:	b086      	sub	sp, #24
 800d63c:	af02      	add	r7, sp, #8
 800d63e:	60f8      	str	r0, [r7, #12]
 800d640:	60b9      	str	r1, [r7, #8]
 800d642:	4639      	mov	r1, r7
 800d644:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 800d648:	f008 f880 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 800d64c:	4604      	mov	r4, r0
 800d64e:	6823      	ldr	r3, [r4, #0]
 800d650:	3368      	adds	r3, #104	; 0x68
 800d652:	681d      	ldr	r5, [r3, #0]
 800d654:	f008 f88a 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800d658:	4603      	mov	r3, r0
 800d65a:	9300      	str	r3, [sp, #0]
 800d65c:	f240 2357 	movw	r3, #599	; 0x257
 800d660:	4a06      	ldr	r2, [pc, #24]	; (800d67c <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 800d662:	4907      	ldr	r1, [pc, #28]	; (800d680 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 800d664:	4620      	mov	r0, r4
 800d666:	47a8      	blx	r5
    return defaultValue;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	461a      	mov	r2, r3
 800d66c:	463b      	mov	r3, r7
 800d66e:	cb03      	ldmia	r3!, {r0, r1}
 800d670:	6010      	str	r0, [r2, #0]
 800d672:	6051      	str	r1, [r2, #4]
}
 800d674:	68f8      	ldr	r0, [r7, #12]
 800d676:	3710      	adds	r7, #16
 800d678:	46bd      	mov	sp, r7
 800d67a:	bdb0      	pop	{r4, r5, r7, pc}
 800d67c:	08025ce4 	.word	0x08025ce4
 800d680:	08025d48 	.word	0x08025d48

0800d684 <_ZN11MockSupport17stringReturnValueEv>:

#endif

const char* MockSupport::stringReturnValue()
{
 800d684:	b590      	push	{r4, r7, lr}
 800d686:	b091      	sub	sp, #68	; 0x44
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	3320      	adds	r3, #32
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	f107 0208 	add.w	r2, r7, #8
 800d698:	6879      	ldr	r1, [r7, #4]
 800d69a:	4610      	mov	r0, r2
 800d69c:	4798      	blx	r3
 800d69e:	f107 0308 	add.w	r3, r7, #8
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f011 fea8 	bl	801f3f8 <_ZNK14MockNamedValue14getStringValueEv>
 800d6a8:	4604      	mov	r4, r0
 800d6aa:	bf00      	nop
 800d6ac:	f107 0308 	add.w	r3, r7, #8
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f011 f9b7 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
 800d6b6:	4623      	mov	r3, r4
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3744      	adds	r7, #68	; 0x44
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd90      	pop	{r4, r7, pc}

0800d6c0 <_ZN11MockSupport17doubleReturnValueEv>:

double MockSupport::doubleReturnValue()
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	ed2d 8b02 	vpush	{d8}
 800d6c6:	b090      	sub	sp, #64	; 0x40
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	3320      	adds	r3, #32
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	f107 0208 	add.w	r2, r7, #8
 800d6d8:	6879      	ldr	r1, [r7, #4]
 800d6da:	4610      	mov	r0, r2
 800d6dc:	4798      	blx	r3
 800d6de:	f107 0308 	add.w	r3, r7, #8
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f011 fe2c 	bl	801f340 <_ZNK14MockNamedValue14getDoubleValueEv>
 800d6e8:	eeb0 8a40 	vmov.f32	s16, s0
 800d6ec:	eef0 8a60 	vmov.f32	s17, s1
 800d6f0:	bf00      	nop
 800d6f2:	f107 0308 	add.w	r3, r7, #8
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f011 f994 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
 800d6fc:	eeb0 7a48 	vmov.f32	s14, s16
 800d700:	eef0 7a68 	vmov.f32	s15, s17
}
 800d704:	eeb0 0a47 	vmov.f32	s0, s14
 800d708:	eef0 0a67 	vmov.f32	s1, s15
 800d70c:	3740      	adds	r7, #64	; 0x40
 800d70e:	46bd      	mov	sp, r7
 800d710:	ecbd 8b02 	vpop	{d8}
 800d714:	bd80      	pop	{r7, pc}

0800d716 <_ZN11MockSupport27returnPointerValueOrDefaultEPv>:

void * MockSupport::returnPointerValueOrDefault(void * defaultValue)
{
 800d716:	b580      	push	{r7, lr}
 800d718:	b082      	sub	sp, #8
 800d71a:	af00      	add	r7, sp, #0
 800d71c:	6078      	str	r0, [r7, #4]
 800d71e:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	331c      	adds	r3, #28
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	4798      	blx	r3
 800d72c:	4603      	mov	r3, r0
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d007      	beq.n	800d742 <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2c>
        return pointerReturnValue();
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	336c      	adds	r3, #108	; 0x6c
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	4798      	blx	r3
 800d73e:	4603      	mov	r3, r0
 800d740:	e000      	b.n	800d744 <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2e>
    }
    return defaultValue;
 800d742:	683b      	ldr	r3, [r7, #0]
}
 800d744:	4618      	mov	r0, r3
 800d746:	3708      	adds	r7, #8
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}

0800d74c <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv>:

const void* MockSupport::returnConstPointerValueOrDefault(const void * defaultValue)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b082      	sub	sp, #8
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
 800d754:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	331c      	adds	r3, #28
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	4798      	blx	r3
 800d762:	4603      	mov	r3, r0
 800d764:	2b00      	cmp	r3, #0
 800d766:	d007      	beq.n	800d778 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2c>
        return constPointerReturnValue();
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	3378      	adds	r3, #120	; 0x78
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	4798      	blx	r3
 800d774:	4603      	mov	r3, r0
 800d776:	e000      	b.n	800d77a <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2e>
    }
    return defaultValue;
 800d778:	683b      	ldr	r3, [r7, #0]
}
 800d77a:	4618      	mov	r0, r3
 800d77c:	3708      	adds	r7, #8
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}

0800d782 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockSupport::returnFunctionPointerValueOrDefault(void (*defaultValue)()))()
{
 800d782:	b580      	push	{r7, lr}
 800d784:	b082      	sub	sp, #8
 800d786:	af00      	add	r7, sp, #0
 800d788:	6078      	str	r0, [r7, #4]
 800d78a:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	331c      	adds	r3, #28
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	4798      	blx	r3
 800d798:	4603      	mov	r3, r0
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d007      	beq.n	800d7ae <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2c>
        return functionPointerReturnValue();
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	3380      	adds	r3, #128	; 0x80
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	4798      	blx	r3
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	e000      	b.n	800d7b0 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2e>
    }
    return defaultValue;
 800d7ae:	683b      	ldr	r3, [r7, #0]
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	3708      	adds	r7, #8
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}

0800d7b8 <_ZN11MockSupport18pointerReturnValueEv>:

void* MockSupport::pointerReturnValue()
{
 800d7b8:	b590      	push	{r4, r7, lr}
 800d7ba:	b091      	sub	sp, #68	; 0x44
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	3320      	adds	r3, #32
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	f107 0208 	add.w	r2, r7, #8
 800d7cc:	6879      	ldr	r1, [r7, #4]
 800d7ce:	4610      	mov	r0, r2
 800d7d0:	4798      	blx	r3
 800d7d2:	f107 0308 	add.w	r3, r7, #8
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f011 fe36 	bl	801f448 <_ZNK14MockNamedValue15getPointerValueEv>
 800d7dc:	4604      	mov	r4, r0
 800d7de:	bf00      	nop
 800d7e0:	f107 0308 	add.w	r3, r7, #8
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f011 f91d 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
 800d7ea:	4623      	mov	r3, r4
}
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	3744      	adds	r7, #68	; 0x44
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd90      	pop	{r4, r7, pc}

0800d7f4 <_ZN11MockSupport23constPointerReturnValueEv>:

const void* MockSupport::constPointerReturnValue()
{
 800d7f4:	b590      	push	{r4, r7, lr}
 800d7f6:	b091      	sub	sp, #68	; 0x44
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	3320      	adds	r3, #32
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f107 0208 	add.w	r2, r7, #8
 800d808:	6879      	ldr	r1, [r7, #4]
 800d80a:	4610      	mov	r0, r2
 800d80c:	4798      	blx	r3
 800d80e:	f107 0308 	add.w	r3, r7, #8
 800d812:	4618      	mov	r0, r3
 800d814:	f011 fe40 	bl	801f498 <_ZNK14MockNamedValue20getConstPointerValueEv>
 800d818:	4604      	mov	r4, r0
 800d81a:	bf00      	nop
 800d81c:	f107 0308 	add.w	r3, r7, #8
 800d820:	4618      	mov	r0, r3
 800d822:	f011 f8ff 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
 800d826:	4623      	mov	r3, r4
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3744      	adds	r7, #68	; 0x44
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd90      	pop	{r4, r7, pc}

0800d830 <_ZN11MockSupport26functionPointerReturnValueEv>:

void (*MockSupport::functionPointerReturnValue())()
{
 800d830:	b590      	push	{r4, r7, lr}
 800d832:	b091      	sub	sp, #68	; 0x44
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	3320      	adds	r3, #32
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	f107 0208 	add.w	r2, r7, #8
 800d844:	6879      	ldr	r1, [r7, #4]
 800d846:	4610      	mov	r0, r2
 800d848:	4798      	blx	r3
 800d84a:	f107 0308 	add.w	r3, r7, #8
 800d84e:	4618      	mov	r0, r3
 800d850:	f011 fe4a 	bl	801f4e8 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 800d854:	4604      	mov	r4, r0
 800d856:	bf00      	nop
 800d858:	f107 0308 	add.w	r3, r7, #8
 800d85c:	4618      	mov	r0, r3
 800d85e:	f011 f8e1 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
 800d862:	4623      	mov	r3, r4
}
 800d864:	4618      	mov	r0, r3
 800d866:	3744      	adds	r7, #68	; 0x44
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd90      	pop	{r4, r7, pc}

0800d86c <_ZN11MockSupport14hasReturnValueEv>:

bool MockSupport::hasReturnValue()
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b082      	sub	sp, #8
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->hasReturnValue();
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d00a      	beq.n	800d892 <_ZN11MockSupport14hasReturnValueEv+0x26>
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	3350      	adds	r3, #80	; 0x50
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	4610      	mov	r0, r2
 800d88c:	4798      	blx	r3
 800d88e:	4603      	mov	r3, r0
 800d890:	e000      	b.n	800d894 <_ZN11MockSupport14hasReturnValueEv+0x28>
    return false;
 800d892:	2300      	movs	r3, #0
}
 800d894:	4618      	mov	r0, r3
 800d896:	3708      	adds	r7, #8
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}

0800d89c <_Z41__static_initialization_and_destruction_0ii>:
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b084      	sub	sp, #16
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
 800d8a4:	6039      	str	r1, [r7, #0]
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2b01      	cmp	r3, #1
 800d8aa:	d115      	bne.n	800d8d8 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	d110      	bne.n	800d8d8 <_Z41__static_initialization_and_destruction_0ii+0x3c>
static MockSupport global_mock;
 800d8b6:	f107 0308 	add.w	r3, r7, #8
 800d8ba:	490f      	ldr	r1, [pc, #60]	; (800d8f8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f000 fb62 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800d8c2:	f107 0308 	add.w	r3, r7, #8
 800d8c6:	4619      	mov	r1, r3
 800d8c8:	480c      	ldr	r0, [pc, #48]	; (800d8fc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800d8ca:	f7fe fc6d 	bl	800c1a8 <_ZN11MockSupportC1ERK12SimpleString>
 800d8ce:	f107 0308 	add.w	r3, r7, #8
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f000 ff0f 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d107      	bne.n	800d8ee <_Z41__static_initialization_and_destruction_0ii+0x52>
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	d102      	bne.n	800d8ee <_Z41__static_initialization_and_destruction_0ii+0x52>
 800d8e8:	4804      	ldr	r0, [pc, #16]	; (800d8fc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800d8ea:	f7fe fca7 	bl	800c23c <_ZN11MockSupportD1Ev>
}
 800d8ee:	bf00      	nop
 800d8f0:	3710      	adds	r7, #16
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}
 800d8f6:	bf00      	nop
 800d8f8:	08025cdc 	.word	0x08025cdc
 800d8fc:	20000918 	.word	0x20000918

0800d900 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>:
protected:
    void addExpectationsAndCallHistory(const MockExpectedCallsList& expectations);
    void addExpectationsAndCallHistoryRelatedTo(const SimpleString& function, const MockExpectedCallsList& expectations);
};

class MockExpectedCallsDidntHappenFailure : public MockFailure
 800d900:	b580      	push	{r7, lr}
 800d902:	b082      	sub	sp, #8
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
 800d908:	4a05      	ldr	r2, [pc, #20]	; (800d920 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev+0x20>)
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	601a      	str	r2, [r3, #0]
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	4618      	mov	r0, r3
 800d912:	f7fe fbbb 	bl	800c08c <_ZN11MockFailureD1Ev>
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	4618      	mov	r0, r3
 800d91a:	3708      	adds	r7, #8
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}
 800d920:	08029ee0 	.word	0x08029ee0

0800d924 <_ZN35MockExpectedCallsDidntHappenFailureD0Ev>:
 800d924:	b580      	push	{r7, lr}
 800d926:	b082      	sub	sp, #8
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f7ff ffe7 	bl	800d900 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
 800d932:	2134      	movs	r1, #52	; 0x34
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f7fd ff77 	bl	800b828 <_ZdlPvj>
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	4618      	mov	r0, r3
 800d93e:	3708      	adds	r7, #8
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}

0800d944 <_ZN20MockCallOrderFailureD1Ev>:
{
public:
    MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations);
};

class MockCallOrderFailure : public MockFailure
 800d944:	b580      	push	{r7, lr}
 800d946:	b082      	sub	sp, #8
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	4a05      	ldr	r2, [pc, #20]	; (800d964 <_ZN20MockCallOrderFailureD1Ev+0x20>)
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	601a      	str	r2, [r3, #0]
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	4618      	mov	r0, r3
 800d956:	f7fe fb99 	bl	800c08c <_ZN11MockFailureD1Ev>
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	4618      	mov	r0, r3
 800d95e:	3708      	adds	r7, #8
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}
 800d964:	08029eb4 	.word	0x08029eb4

0800d968 <_ZN20MockCallOrderFailureD0Ev>:
 800d968:	b580      	push	{r7, lr}
 800d96a:	b082      	sub	sp, #8
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
 800d970:	6878      	ldr	r0, [r7, #4]
 800d972:	f7ff ffe7 	bl	800d944 <_ZN20MockCallOrderFailureD1Ev>
 800d976:	2134      	movs	r1, #52	; 0x34
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f7fd ff55 	bl	800b828 <_ZdlPvj>
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	4618      	mov	r0, r3
 800d982:	3708      	adds	r7, #8
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}

0800d988 <_GLOBAL__sub_I__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800d988:	b580      	push	{r7, lr}
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d990:	2001      	movs	r0, #1
 800d992:	f7ff ff83 	bl	800d89c <_Z41__static_initialization_and_destruction_0ii>
 800d996:	bd80      	pop	{r7, pc}

0800d998 <_GLOBAL__sub_D__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800d998:	b580      	push	{r7, lr}
 800d99a:	af00      	add	r7, sp, #0
 800d99c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d9a0:	2000      	movs	r0, #0
 800d9a2:	f7ff ff7b 	bl	800d89c <_Z41__static_initialization_and_destruction_0ii>
 800d9a6:	bd80      	pop	{r7, pc}

0800d9a8 <_ZN11SimpleMutexC1Ev>:
 */
#include "CppUTest/TestHarness.h"
#include "CppUTest/SimpleMutex.h"


SimpleMutex::SimpleMutex(void)
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b082      	sub	sp, #8
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
{
    psMtx = PlatformSpecificMutexCreate();
 800d9b0:	4b05      	ldr	r3, [pc, #20]	; (800d9c8 <_ZN11SimpleMutexC1Ev+0x20>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	4798      	blx	r3
 800d9b6:	4602      	mov	r2, r0
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	601a      	str	r2, [r3, #0]
}
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	4618      	mov	r0, r3
 800d9c0:	3708      	adds	r7, #8
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}
 800d9c6:	bf00      	nop
 800d9c8:	200000f0 	.word	0x200000f0

0800d9cc <_ZN11SimpleMutexD1Ev>:

SimpleMutex::~SimpleMutex(void)
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b082      	sub	sp, #8
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
{
    PlatformSpecificMutexDestroy(psMtx);
 800d9d4:	4b05      	ldr	r3, [pc, #20]	; (800d9ec <_ZN11SimpleMutexD1Ev+0x20>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	687a      	ldr	r2, [r7, #4]
 800d9da:	6812      	ldr	r2, [r2, #0]
 800d9dc:	4610      	mov	r0, r2
 800d9de:	4798      	blx	r3
}
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	3708      	adds	r7, #8
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}
 800d9ea:	bf00      	nop
 800d9ec:	200000fc 	.word	0x200000fc

0800d9f0 <_ZN11SimpleMutex4LockEv>:

void SimpleMutex::Lock(void)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b082      	sub	sp, #8
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexLock(psMtx);
 800d9f8:	4b04      	ldr	r3, [pc, #16]	; (800da0c <_ZN11SimpleMutex4LockEv+0x1c>)
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	687a      	ldr	r2, [r7, #4]
 800d9fe:	6812      	ldr	r2, [r2, #0]
 800da00:	4610      	mov	r0, r2
 800da02:	4798      	blx	r3
}
 800da04:	bf00      	nop
 800da06:	3708      	adds	r7, #8
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}
 800da0c:	200000f4 	.word	0x200000f4

0800da10 <_ZN11SimpleMutex6UnlockEv>:

void SimpleMutex::Unlock(void)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b082      	sub	sp, #8
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexUnlock(psMtx);
 800da18:	4b04      	ldr	r3, [pc, #16]	; (800da2c <_ZN11SimpleMutex6UnlockEv+0x1c>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	687a      	ldr	r2, [r7, #4]
 800da1e:	6812      	ldr	r2, [r2, #0]
 800da20:	4610      	mov	r0, r2
 800da22:	4798      	blx	r3
}
 800da24:	bf00      	nop
 800da26:	3708      	adds	r7, #8
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}
 800da2c:	200000f8 	.word	0x200000f8

0800da30 <_ZN15ScopedMutexLockC1EP11SimpleMutex>:


ScopedMutexLock::ScopedMutexLock(SimpleMutex *mtx) :
 800da30:	b580      	push	{r7, lr}
 800da32:	b082      	sub	sp, #8
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
 800da38:	6039      	str	r1, [r7, #0]
    mutex(mtx)
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	683a      	ldr	r2, [r7, #0]
 800da3e:	601a      	str	r2, [r3, #0]
{
    mutex->Lock();
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	4618      	mov	r0, r3
 800da46:	f7ff ffd3 	bl	800d9f0 <_ZN11SimpleMutex4LockEv>
}
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	4618      	mov	r0, r3
 800da4e:	3708      	adds	r7, #8
 800da50:	46bd      	mov	sp, r7
 800da52:	bd80      	pop	{r7, pc}

0800da54 <_ZN15ScopedMutexLockD1Ev>:

ScopedMutexLock::~ScopedMutexLock()
 800da54:	b580      	push	{r7, lr}
 800da56:	b082      	sub	sp, #8
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
{
    mutex->Unlock();
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	4618      	mov	r0, r3
 800da62:	f7ff ffd5 	bl	800da10 <_ZN11SimpleMutex6UnlockEv>
}
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	4618      	mov	r0, r3
 800da6a:	3708      	adds	r7, #8
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}

0800da70 <_ZN12SimpleString18getStringAllocatorEv>:
}

TestMemoryAllocator* SimpleString::stringAllocator_ = NULLPTR;

TestMemoryAllocator* SimpleString::getStringAllocator()
{
 800da70:	b580      	push	{r7, lr}
 800da72:	af00      	add	r7, sp, #0
    if (stringAllocator_ == NULLPTR)
 800da74:	4b05      	ldr	r3, [pc, #20]	; (800da8c <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d103      	bne.n	800da84 <_ZN12SimpleString18getStringAllocatorEv+0x14>
        return defaultNewArrayAllocator();
 800da7c:	f003 fd7a 	bl	8011574 <_Z24defaultNewArrayAllocatorv>
 800da80:	4603      	mov	r3, r0
 800da82:	e001      	b.n	800da88 <_ZN12SimpleString18getStringAllocatorEv+0x18>
    return stringAllocator_;
 800da84:	4b01      	ldr	r3, [pc, #4]	; (800da8c <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800da86:	681b      	ldr	r3, [r3, #0]
}
 800da88:	4618      	mov	r0, r3
 800da8a:	bd80      	pop	{r7, pc}
 800da8c:	20000960 	.word	0x20000960

0800da90 <_ZN12SimpleString17allocStringBufferEjPKcj>:
    stringAllocator_ = allocator;
}

/* Avoid using the memory leak detector INSIDE SimpleString as its used inside the detector */
char* SimpleString::allocStringBuffer(size_t _size, const char* file, size_t line)
{
 800da90:	b590      	push	{r4, r7, lr}
 800da92:	b085      	sub	sp, #20
 800da94:	af00      	add	r7, sp, #0
 800da96:	60f8      	str	r0, [r7, #12]
 800da98:	60b9      	str	r1, [r7, #8]
 800da9a:	607a      	str	r2, [r7, #4]
    return getStringAllocator()->alloc_memory(_size, file, line);
 800da9c:	f7ff ffe8 	bl	800da70 <_ZN12SimpleString18getStringAllocatorEv>
 800daa0:	6803      	ldr	r3, [r0, #0]
 800daa2:	3308      	adds	r3, #8
 800daa4:	681c      	ldr	r4, [r3, #0]
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	68ba      	ldr	r2, [r7, #8]
 800daaa:	68f9      	ldr	r1, [r7, #12]
 800daac:	47a0      	blx	r4
 800daae:	4603      	mov	r3, r0
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3714      	adds	r7, #20
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd90      	pop	{r4, r7, pc}

0800dab8 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>:

void SimpleString::deallocStringBuffer(char* str, size_t size, const char* file, size_t line)
{
 800dab8:	b590      	push	{r4, r7, lr}
 800daba:	b087      	sub	sp, #28
 800dabc:	af02      	add	r7, sp, #8
 800dabe:	60f8      	str	r0, [r7, #12]
 800dac0:	60b9      	str	r1, [r7, #8]
 800dac2:	607a      	str	r2, [r7, #4]
 800dac4:	603b      	str	r3, [r7, #0]
    getStringAllocator()->free_memory(str, size, file, line);
 800dac6:	f7ff ffd3 	bl	800da70 <_ZN12SimpleString18getStringAllocatorEv>
 800daca:	6803      	ldr	r3, [r0, #0]
 800dacc:	330c      	adds	r3, #12
 800dace:	681c      	ldr	r4, [r3, #0]
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	9300      	str	r3, [sp, #0]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	68ba      	ldr	r2, [r7, #8]
 800dad8:	68f9      	ldr	r1, [r7, #12]
 800dada:	47a0      	blx	r4
}
 800dadc:	bf00      	nop
 800dade:	3714      	adds	r7, #20
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd90      	pop	{r4, r7, pc}

0800dae4 <_ZNK12SimpleString14getEmptyStringEv>:

char* SimpleString::getEmptyString() const
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b084      	sub	sp, #16
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
    char* empty = allocStringBuffer(1, __FILE__, __LINE__);
 800daec:	2284      	movs	r2, #132	; 0x84
 800daee:	4906      	ldr	r1, [pc, #24]	; (800db08 <_ZNK12SimpleString14getEmptyStringEv+0x24>)
 800daf0:	2001      	movs	r0, #1
 800daf2:	f7ff ffcd 	bl	800da90 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800daf6:	60f8      	str	r0, [r7, #12]
    empty[0] = '\0';
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	2200      	movs	r2, #0
 800dafc:	701a      	strb	r2, [r3, #0]
    return empty;
 800dafe:	68fb      	ldr	r3, [r7, #12]
}
 800db00:	4618      	mov	r0, r3
 800db02:	3710      	adds	r7, #16
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}
 800db08:	08025d74 	.word	0x08025d74

0800db0c <_ZN12SimpleString4AtoUEPKc>:

// does not support + or - prefixes
unsigned SimpleString::AtoU(const char* str)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b084      	sub	sp, #16
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	781b      	ldrb	r3, [r3, #0]
 800db18:	4618      	mov	r0, r3
 800db1a:	f001 f809 	bl	800eb30 <_ZN12SimpleString7isSpaceEc>
 800db1e:	4603      	mov	r3, r0
 800db20:	2b00      	cmp	r3, #0
 800db22:	d003      	beq.n	800db2c <_ZN12SimpleString4AtoUEPKc+0x20>
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	3301      	adds	r3, #1
 800db28:	607b      	str	r3, [r7, #4]
 800db2a:	e7f3      	b.n	800db14 <_ZN12SimpleString4AtoUEPKc+0x8>

    unsigned result = 0;
 800db2c:	2300      	movs	r3, #0
 800db2e:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	781b      	ldrb	r3, [r3, #0]
 800db34:	4618      	mov	r0, r3
 800db36:	f000 ffe7 	bl	800eb08 <_ZN12SimpleString7isDigitEc>
 800db3a:	4603      	mov	r3, r0
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d005      	beq.n	800db4c <_ZN12SimpleString4AtoUEPKc+0x40>
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	781b      	ldrb	r3, [r3, #0]
 800db44:	2b2f      	cmp	r3, #47	; 0x2f
 800db46:	d901      	bls.n	800db4c <_ZN12SimpleString4AtoUEPKc+0x40>
 800db48:	2301      	movs	r3, #1
 800db4a:	e000      	b.n	800db4e <_ZN12SimpleString4AtoUEPKc+0x42>
 800db4c:	2300      	movs	r3, #0
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d010      	beq.n	800db74 <_ZN12SimpleString4AtoUEPKc+0x68>
    {
        result *= 10;
 800db52:	68fa      	ldr	r2, [r7, #12]
 800db54:	4613      	mov	r3, r2
 800db56:	009b      	lsls	r3, r3, #2
 800db58:	4413      	add	r3, r2
 800db5a:	005b      	lsls	r3, r3, #1
 800db5c:	60fb      	str	r3, [r7, #12]
        result += static_cast<unsigned>(*str - '0');
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	781b      	ldrb	r3, [r3, #0]
 800db62:	461a      	mov	r2, r3
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	4413      	add	r3, r2
 800db68:	3b30      	subs	r3, #48	; 0x30
 800db6a:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	3301      	adds	r3, #1
 800db70:	607b      	str	r3, [r7, #4]
 800db72:	e7dd      	b.n	800db30 <_ZN12SimpleString4AtoUEPKc+0x24>
    }
    return result;
 800db74:	68fb      	ldr	r3, [r7, #12]
}
 800db76:	4618      	mov	r0, r3
 800db78:	3710      	adds	r7, #16
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}

0800db7e <_ZN12SimpleString4AtoIEPKc>:

int SimpleString::AtoI(const char* str)
{
 800db7e:	b580      	push	{r7, lr}
 800db80:	b084      	sub	sp, #16
 800db82:	af00      	add	r7, sp, #0
 800db84:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	781b      	ldrb	r3, [r3, #0]
 800db8a:	4618      	mov	r0, r3
 800db8c:	f000 ffd0 	bl	800eb30 <_ZN12SimpleString7isSpaceEc>
 800db90:	4603      	mov	r3, r0
 800db92:	2b00      	cmp	r3, #0
 800db94:	d003      	beq.n	800db9e <_ZN12SimpleString4AtoIEPKc+0x20>
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	3301      	adds	r3, #1
 800db9a:	607b      	str	r3, [r7, #4]
 800db9c:	e7f3      	b.n	800db86 <_ZN12SimpleString4AtoIEPKc+0x8>

    char first_char = *str;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	781b      	ldrb	r3, [r3, #0]
 800dba2:	72fb      	strb	r3, [r7, #11]
    if (first_char == '-' || first_char == '+') str++;
 800dba4:	7afb      	ldrb	r3, [r7, #11]
 800dba6:	2b2d      	cmp	r3, #45	; 0x2d
 800dba8:	d002      	beq.n	800dbb0 <_ZN12SimpleString4AtoIEPKc+0x32>
 800dbaa:	7afb      	ldrb	r3, [r7, #11]
 800dbac:	2b2b      	cmp	r3, #43	; 0x2b
 800dbae:	d102      	bne.n	800dbb6 <_ZN12SimpleString4AtoIEPKc+0x38>
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	3301      	adds	r3, #1
 800dbb4:	607b      	str	r3, [r7, #4]

    int  result = 0;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	781b      	ldrb	r3, [r3, #0]
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f000 ffa2 	bl	800eb08 <_ZN12SimpleString7isDigitEc>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d00f      	beq.n	800dbea <_ZN12SimpleString4AtoIEPKc+0x6c>
    {
        result *= 10;
 800dbca:	68fa      	ldr	r2, [r7, #12]
 800dbcc:	4613      	mov	r3, r2
 800dbce:	009b      	lsls	r3, r3, #2
 800dbd0:	4413      	add	r3, r2
 800dbd2:	005b      	lsls	r3, r3, #1
 800dbd4:	60fb      	str	r3, [r7, #12]
        result += *str - '0';
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	781b      	ldrb	r3, [r3, #0]
 800dbda:	3b30      	subs	r3, #48	; 0x30
 800dbdc:	68fa      	ldr	r2, [r7, #12]
 800dbde:	4413      	add	r3, r2
 800dbe0:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	607b      	str	r3, [r7, #4]
 800dbe8:	e7e7      	b.n	800dbba <_ZN12SimpleString4AtoIEPKc+0x3c>
    }
    return (first_char == '-') ? -result : result;
 800dbea:	7afb      	ldrb	r3, [r7, #11]
 800dbec:	2b2d      	cmp	r3, #45	; 0x2d
 800dbee:	d102      	bne.n	800dbf6 <_ZN12SimpleString4AtoIEPKc+0x78>
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	425b      	negs	r3, r3
 800dbf4:	e000      	b.n	800dbf8 <_ZN12SimpleString4AtoIEPKc+0x7a>
 800dbf6:	68fb      	ldr	r3, [r7, #12]
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3710      	adds	r7, #16
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}

0800dc00 <_ZN12SimpleString6StrCmpEPKcS1_>:

int SimpleString::StrCmp(const char* s1, const char* s2)
{
 800dc00:	b480      	push	{r7}
 800dc02:	b083      	sub	sp, #12
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
 800dc08:	6039      	str	r1, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	781b      	ldrb	r3, [r3, #0]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d00c      	beq.n	800dc2c <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	781a      	ldrb	r2, [r3, #0]
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	781b      	ldrb	r3, [r3, #0]
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d106      	bne.n	800dc2c <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
       ++s1;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	3301      	adds	r3, #1
 800dc22:	607b      	str	r3, [r7, #4]
       ++s2;
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	3301      	adds	r3, #1
 800dc28:	603b      	str	r3, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800dc2a:	e7ee      	b.n	800dc0a <_ZN12SimpleString6StrCmpEPKcS1_+0xa>
   }
   return *(const unsigned char *) s1 - *(const unsigned char *) s2;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	781b      	ldrb	r3, [r3, #0]
 800dc30:	461a      	mov	r2, r3
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	1ad3      	subs	r3, r2, r3
}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	370c      	adds	r7, #12
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc42:	4770      	bx	lr

0800dc44 <_ZN12SimpleString6StrLenEPKc>:

size_t SimpleString::StrLen(const char* str)
{
 800dc44:	b480      	push	{r7}
 800dc46:	b085      	sub	sp, #20
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
    size_t n = (size_t)-1;
 800dc4c:	f04f 33ff 	mov.w	r3, #4294967295
 800dc50:	60fb      	str	r3, [r7, #12]
    do n++; while (*str++);
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	3301      	adds	r3, #1
 800dc56:	60fb      	str	r3, [r7, #12]
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	1c5a      	adds	r2, r3, #1
 800dc5c:	607a      	str	r2, [r7, #4]
 800dc5e:	781b      	ldrb	r3, [r3, #0]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	bf14      	ite	ne
 800dc64:	2301      	movne	r3, #1
 800dc66:	2300      	moveq	r3, #0
 800dc68:	b2db      	uxtb	r3, r3
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d000      	beq.n	800dc70 <_ZN12SimpleString6StrLenEPKc+0x2c>
 800dc6e:	e7f0      	b.n	800dc52 <_ZN12SimpleString6StrLenEPKc+0xe>
    return n;
 800dc70:	68fb      	ldr	r3, [r7, #12]
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	3714      	adds	r7, #20
 800dc76:	46bd      	mov	sp, r7
 800dc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7c:	4770      	bx	lr

0800dc7e <_ZN12SimpleString7StrNCmpEPKcS1_j>:

int SimpleString::StrNCmp(const char* s1, const char* s2, size_t n)
{
 800dc7e:	b480      	push	{r7}
 800dc80:	b085      	sub	sp, #20
 800dc82:	af00      	add	r7, sp, #0
 800dc84:	60f8      	str	r0, [r7, #12]
 800dc86:	60b9      	str	r1, [r7, #8]
 800dc88:	607a      	str	r2, [r7, #4]
    while (n && *s1 && *s1 == *s2) {
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d013      	beq.n	800dcb8 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	781b      	ldrb	r3, [r3, #0]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d00f      	beq.n	800dcb8 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	781a      	ldrb	r2, [r3, #0]
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	781b      	ldrb	r3, [r3, #0]
 800dca0:	429a      	cmp	r2, r3
 800dca2:	d109      	bne.n	800dcb8 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
        --n;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	3b01      	subs	r3, #1
 800dca8:	607b      	str	r3, [r7, #4]
        ++s1;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	3301      	adds	r3, #1
 800dcae:	60fb      	str	r3, [r7, #12]
        ++s2;
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	3301      	adds	r3, #1
 800dcb4:	60bb      	str	r3, [r7, #8]
    while (n && *s1 && *s1 == *s2) {
 800dcb6:	e7e8      	b.n	800dc8a <_ZN12SimpleString7StrNCmpEPKcS1_j+0xc>
    }
    return n ? *(const unsigned char *) s1 - *(const unsigned char *) s2 : 0;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d006      	beq.n	800dccc <_ZN12SimpleString7StrNCmpEPKcS1_j+0x4e>
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	781b      	ldrb	r3, [r3, #0]
 800dcc2:	461a      	mov	r2, r3
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	781b      	ldrb	r3, [r3, #0]
 800dcc8:	1ad3      	subs	r3, r2, r3
 800dcca:	e000      	b.n	800dcce <_ZN12SimpleString7StrNCmpEPKcS1_j+0x50>
 800dccc:	2300      	movs	r3, #0
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3714      	adds	r7, #20
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd8:	4770      	bx	lr

0800dcda <_ZN12SimpleString7StrNCpyEPcPKcj>:

char* SimpleString::StrNCpy(char* s1, const char* s2, size_t n)
{
 800dcda:	b480      	push	{r7}
 800dcdc:	b087      	sub	sp, #28
 800dcde:	af00      	add	r7, sp, #0
 800dce0:	60f8      	str	r0, [r7, #12]
 800dce2:	60b9      	str	r1, [r7, #8]
 800dce4:	607a      	str	r2, [r7, #4]
    char* result = s1;
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	617b      	str	r3, [r7, #20]

    if((NULLPTR == s1) || (0 == n)) return result;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d002      	beq.n	800dcf6 <_ZN12SimpleString7StrNCpyEPcPKcj+0x1c>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d101      	bne.n	800dcfa <_ZN12SimpleString7StrNCpyEPcPKcj+0x20>
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	e01e      	b.n	800dd38 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5e>

    *s1 = *s2;
 800dcfa:	68bb      	ldr	r3, [r7, #8]
 800dcfc:	781a      	ldrb	r2, [r3, #0]
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	3b01      	subs	r3, #1
 800dd06:	607b      	str	r3, [r7, #4]
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d005      	beq.n	800dd1a <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	781b      	ldrb	r3, [r3, #0]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d001      	beq.n	800dd1a <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800dd16:	2301      	movs	r3, #1
 800dd18:	e000      	b.n	800dd1c <_ZN12SimpleString7StrNCpyEPcPKcj+0x42>
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d00a      	beq.n	800dd36 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5c>
        *++s1 = *++s2;
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	3301      	adds	r3, #1
 800dd24:	60bb      	str	r3, [r7, #8]
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	3301      	adds	r3, #1
 800dd2a:	60fb      	str	r3, [r7, #12]
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	781a      	ldrb	r2, [r3, #0]
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800dd34:	e7e5      	b.n	800dd02 <_ZN12SimpleString7StrNCpyEPcPKcj+0x28>
    }
    return result;
 800dd36:	697b      	ldr	r3, [r7, #20]
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	371c      	adds	r7, #28
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd42:	4770      	bx	lr

0800dd44 <_ZN12SimpleString6StrStrEPKcS1_>:

const char* SimpleString::StrStr(const char* s1, const char* s2)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b082      	sub	sp, #8
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	6039      	str	r1, [r7, #0]
    if(!*s2) return s1;
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	781b      	ldrb	r3, [r3, #0]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d101      	bne.n	800dd5a <_ZN12SimpleString6StrStrEPKcS1_+0x16>
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	e01b      	b.n	800dd92 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	781b      	ldrb	r3, [r3, #0]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d016      	beq.n	800dd90 <_ZN12SimpleString6StrStrEPKcS1_+0x4c>
        if (StrNCmp(s1, s2, StrLen(s2)) == 0)
 800dd62:	6838      	ldr	r0, [r7, #0]
 800dd64:	f7ff ff6e 	bl	800dc44 <_ZN12SimpleString6StrLenEPKc>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	461a      	mov	r2, r3
 800dd6c:	6839      	ldr	r1, [r7, #0]
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f7ff ff85 	bl	800dc7e <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800dd74:	4603      	mov	r3, r0
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	bf0c      	ite	eq
 800dd7a:	2301      	moveq	r3, #1
 800dd7c:	2300      	movne	r3, #0
 800dd7e:	b2db      	uxtb	r3, r3
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d001      	beq.n	800dd88 <_ZN12SimpleString6StrStrEPKcS1_+0x44>
            return s1;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	e004      	b.n	800dd92 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	3301      	adds	r3, #1
 800dd8c:	607b      	str	r3, [r7, #4]
 800dd8e:	e7e4      	b.n	800dd5a <_ZN12SimpleString6StrStrEPKcS1_+0x16>
    return NULLPTR;
 800dd90:	2300      	movs	r3, #0
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3708      	adds	r7, #8
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}

0800dd9a <_ZN12SimpleString7ToLowerEc>:

char SimpleString::ToLower(char ch)
{
 800dd9a:	b580      	push	{r7, lr}
 800dd9c:	b082      	sub	sp, #8
 800dd9e:	af00      	add	r7, sp, #0
 800dda0:	4603      	mov	r3, r0
 800dda2:	71fb      	strb	r3, [r7, #7]
    return isUpper(ch) ? (char)((int)ch + ('a' - 'A')) : ch;
 800dda4:	79fb      	ldrb	r3, [r7, #7]
 800dda6:	4618      	mov	r0, r3
 800dda8:	f000 fed9 	bl	800eb5e <_ZN12SimpleString7isUpperEc>
 800ddac:	4603      	mov	r3, r0
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d003      	beq.n	800ddba <_ZN12SimpleString7ToLowerEc+0x20>
 800ddb2:	79fb      	ldrb	r3, [r7, #7]
 800ddb4:	3320      	adds	r3, #32
 800ddb6:	b2db      	uxtb	r3, r3
 800ddb8:	e000      	b.n	800ddbc <_ZN12SimpleString7ToLowerEc+0x22>
 800ddba:	79fb      	ldrb	r3, [r7, #7]
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	3708      	adds	r7, #8
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}

0800ddc4 <_ZN12SimpleString6MemCmpEPKvS1_j>:

int SimpleString::MemCmp(const void* s1, const void *s2, size_t n)
{
 800ddc4:	b480      	push	{r7}
 800ddc6:	b087      	sub	sp, #28
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	60f8      	str	r0, [r7, #12]
 800ddcc:	60b9      	str	r1, [r7, #8]
 800ddce:	607a      	str	r2, [r7, #4]
    const unsigned char* p1 = (const unsigned char*) s1;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	617b      	str	r3, [r7, #20]
    const unsigned char* p2 = (const unsigned char*) s2;
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	613b      	str	r3, [r7, #16]

    while (n--)
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	1e5a      	subs	r2, r3, #1
 800dddc:	607a      	str	r2, [r7, #4]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	bf14      	ite	ne
 800dde2:	2301      	movne	r3, #1
 800dde4:	2300      	moveq	r3, #0
 800dde6:	b2db      	uxtb	r3, r3
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d013      	beq.n	800de14 <_ZN12SimpleString6MemCmpEPKvS1_j+0x50>
        if (*p1 != *p2) {
 800ddec:	697b      	ldr	r3, [r7, #20]
 800ddee:	781a      	ldrb	r2, [r3, #0]
 800ddf0:	693b      	ldr	r3, [r7, #16]
 800ddf2:	781b      	ldrb	r3, [r3, #0]
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	d006      	beq.n	800de06 <_ZN12SimpleString6MemCmpEPKvS1_j+0x42>
            return *p1 - *p2;
 800ddf8:	697b      	ldr	r3, [r7, #20]
 800ddfa:	781b      	ldrb	r3, [r3, #0]
 800ddfc:	461a      	mov	r2, r3
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	781b      	ldrb	r3, [r3, #0]
 800de02:	1ad3      	subs	r3, r2, r3
 800de04:	e007      	b.n	800de16 <_ZN12SimpleString6MemCmpEPKvS1_j+0x52>
        } else {
            ++p1;
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	3301      	adds	r3, #1
 800de0a:	617b      	str	r3, [r7, #20]
            ++p2;
 800de0c:	693b      	ldr	r3, [r7, #16]
 800de0e:	3301      	adds	r3, #1
 800de10:	613b      	str	r3, [r7, #16]
    while (n--)
 800de12:	e7e1      	b.n	800ddd8 <_ZN12SimpleString6MemCmpEPKvS1_j+0x14>
        }
    return 0;
 800de14:	2300      	movs	r3, #0
}
 800de16:	4618      	mov	r0, r3
 800de18:	371c      	adds	r7, #28
 800de1a:	46bd      	mov	sp, r7
 800de1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de20:	4770      	bx	lr
	...

0800de24 <_ZN12SimpleString24deallocateInternalBufferEv>:

void SimpleString::deallocateInternalBuffer()
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b082      	sub	sp, #8
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
    if (buffer_) {
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d00d      	beq.n	800de50 <_ZN12SimpleString24deallocateInternalBufferEv+0x2c>
        deallocStringBuffer(buffer_, bufferSize_, __FILE__, __LINE__);
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	6818      	ldr	r0, [r3, #0]
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	6859      	ldr	r1, [r3, #4]
 800de3c:	23ee      	movs	r3, #238	; 0xee
 800de3e:	4a06      	ldr	r2, [pc, #24]	; (800de58 <_ZN12SimpleString24deallocateInternalBufferEv+0x34>)
 800de40:	f7ff fe3a 	bl	800dab8 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
        buffer_ = NULLPTR;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2200      	movs	r2, #0
 800de48:	601a      	str	r2, [r3, #0]
        bufferSize_ = 0;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2200      	movs	r2, #0
 800de4e:	605a      	str	r2, [r3, #4]
    }
}
 800de50:	bf00      	nop
 800de52:	3708      	adds	r7, #8
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}
 800de58:	08025d74 	.word	0x08025d74

0800de5c <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>:

void SimpleString::setInternalBufferAsEmptyString()
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b082      	sub	sp, #8
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
    deallocateInternalBuffer();
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f7ff ffdd 	bl	800de24 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = 1;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	2201      	movs	r2, #1
 800de6e:	605a      	str	r2, [r3, #4]
    buffer_ = getEmptyString();
 800de70:	6878      	ldr	r0, [r7, #4]
 800de72:	f7ff fe37 	bl	800dae4 <_ZNK12SimpleString14getEmptyStringEv>
 800de76:	4602      	mov	r2, r0
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	601a      	str	r2, [r3, #0]
}
 800de7c:	bf00      	nop
 800de7e:	3708      	adds	r7, #8
 800de80:	46bd      	mov	sp, r7
 800de82:	bd80      	pop	{r7, pc}

0800de84 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer, size_t bufferSize)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b084      	sub	sp, #16
 800de88:	af00      	add	r7, sp, #0
 800de8a:	60f8      	str	r0, [r7, #12]
 800de8c:	60b9      	str	r1, [r7, #8]
 800de8e:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800de90:	68f8      	ldr	r0, [r7, #12]
 800de92:	f7ff ffc7 	bl	800de24 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	687a      	ldr	r2, [r7, #4]
 800de9a:	605a      	str	r2, [r3, #4]
    buffer_ = copyToNewBuffer(otherBuffer, bufferSize_);
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	685b      	ldr	r3, [r3, #4]
 800dea0:	4619      	mov	r1, r3
 800dea2:	68b8      	ldr	r0, [r7, #8]
 800dea4:	f000 fe12 	bl	800eacc <_ZN12SimpleString15copyToNewBufferEPKcj>
 800dea8:	4602      	mov	r2, r0
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	601a      	str	r2, [r3, #0]
}
 800deae:	bf00      	nop
 800deb0:	3710      	adds	r7, #16
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd80      	pop	{r7, pc}
	...

0800deb8 <_ZN12SimpleString28setInternalBufferToNewBufferEj>:

void SimpleString::setInternalBufferToNewBuffer(size_t bufferSize)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b082      	sub	sp, #8
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
 800dec0:	6039      	str	r1, [r7, #0]
    deallocateInternalBuffer();
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	f7ff ffae 	bl	800de24 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	683a      	ldr	r2, [r7, #0]
 800decc:	605a      	str	r2, [r3, #4]
    buffer_ = allocStringBuffer(bufferSize_, __FILE__, __LINE__);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	685b      	ldr	r3, [r3, #4]
 800ded2:	f240 1209 	movw	r2, #265	; 0x109
 800ded6:	4907      	ldr	r1, [pc, #28]	; (800def4 <_ZN12SimpleString28setInternalBufferToNewBufferEj+0x3c>)
 800ded8:	4618      	mov	r0, r3
 800deda:	f7ff fdd9 	bl	800da90 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800dede:	4602      	mov	r2, r0
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	2200      	movs	r2, #0
 800deea:	701a      	strb	r2, [r3, #0]
}
 800deec:	bf00      	nop
 800deee:	3708      	adds	r7, #8
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}
 800def4:	08025d74 	.word	0x08025d74

0800def8 <_ZN12SimpleString19setInternalBufferToEPcj>:

void SimpleString::setInternalBufferTo(char* buffer, size_t bufferSize)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b084      	sub	sp, #16
 800defc:	af00      	add	r7, sp, #0
 800defe:	60f8      	str	r0, [r7, #12]
 800df00:	60b9      	str	r1, [r7, #8]
 800df02:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800df04:	68f8      	ldr	r0, [r7, #12]
 800df06:	f7ff ff8d 	bl	800de24 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	687a      	ldr	r2, [r7, #4]
 800df0e:	605a      	str	r2, [r3, #4]
    buffer_ = buffer;
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	68ba      	ldr	r2, [r7, #8]
 800df14:	601a      	str	r2, [r3, #0]
}
 800df16:	bf00      	nop
 800df18:	3710      	adds	r7, #16
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}

0800df1e <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>:

void SimpleString::copyBufferToNewInternalBuffer(const SimpleString& otherBuffer)
{
 800df1e:	b590      	push	{r4, r7, lr}
 800df20:	b083      	sub	sp, #12
 800df22:	af00      	add	r7, sp, #0
 800df24:	6078      	str	r0, [r7, #4]
 800df26:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer.buffer_, otherBuffer.size() + 1);
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	681c      	ldr	r4, [r3, #0]
 800df2c:	6838      	ldr	r0, [r7, #0]
 800df2e:	f000 fbc1 	bl	800e6b4 <_ZNK12SimpleString4sizeEv>
 800df32:	4603      	mov	r3, r0
 800df34:	3301      	adds	r3, #1
 800df36:	461a      	mov	r2, r3
 800df38:	4621      	mov	r1, r4
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f7ff ffa2 	bl	800de84 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800df40:	bf00      	nop
 800df42:	370c      	adds	r7, #12
 800df44:	46bd      	mov	sp, r7
 800df46:	bd90      	pop	{r4, r7, pc}

0800df48 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b082      	sub	sp, #8
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer, StrLen(otherBuffer) + 1);
 800df52:	6838      	ldr	r0, [r7, #0]
 800df54:	f7ff fe76 	bl	800dc44 <_ZN12SimpleString6StrLenEPKc>
 800df58:	4603      	mov	r3, r0
 800df5a:	3301      	adds	r3, #1
 800df5c:	461a      	mov	r2, r3
 800df5e:	6839      	ldr	r1, [r7, #0]
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	f7ff ff8f 	bl	800de84 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800df66:	bf00      	nop
 800df68:	3708      	adds	r7, #8
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bd80      	pop	{r7, pc}

0800df6e <_ZNK12SimpleString9getBufferEv>:

const char* SimpleString::getBuffer() const
{
 800df6e:	b480      	push	{r7}
 800df70:	b083      	sub	sp, #12
 800df72:	af00      	add	r7, sp, #0
 800df74:	6078      	str	r0, [r7, #4]
    return buffer_;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	370c      	adds	r7, #12
 800df7e:	46bd      	mov	sp, r7
 800df80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df84:	4770      	bx	lr

0800df86 <_ZN12SimpleStringC1EPKc>:

SimpleString::SimpleString(const char *otherBuffer)
 800df86:	b580      	push	{r7, lr}
 800df88:	b082      	sub	sp, #8
 800df8a:	af00      	add	r7, sp, #0
 800df8c:	6078      	str	r0, [r7, #4]
 800df8e:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2200      	movs	r2, #0
 800df94:	601a      	str	r2, [r3, #0]
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2200      	movs	r2, #0
 800df9a:	605a      	str	r2, [r3, #4]
{
    if (otherBuffer == NULLPTR)
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d103      	bne.n	800dfaa <_ZN12SimpleStringC1EPKc+0x24>
        setInternalBufferAsEmptyString();
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f7ff ff5a 	bl	800de5c <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800dfa8:	e003      	b.n	800dfb2 <_ZN12SimpleStringC1EPKc+0x2c>
    else
        copyBufferToNewInternalBuffer(otherBuffer);
 800dfaa:	6839      	ldr	r1, [r7, #0]
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f7ff ffcb 	bl	800df48 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	3708      	adds	r7, #8
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}

0800dfbc <_ZN12SimpleStringC1EPKcj>:

SimpleString::SimpleString(const char *other, size_t repeatCount)
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b088      	sub	sp, #32
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	60f8      	str	r0, [r7, #12]
 800dfc4:	60b9      	str	r1, [r7, #8]
 800dfc6:	607a      	str	r2, [r7, #4]
    : buffer_(NULLPTR), bufferSize_(0)
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	601a      	str	r2, [r3, #0]
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	605a      	str	r2, [r3, #4]
{
    size_t otherStringLength = StrLen(other);
 800dfd4:	68b8      	ldr	r0, [r7, #8]
 800dfd6:	f7ff fe35 	bl	800dc44 <_ZN12SimpleString6StrLenEPKc>
 800dfda:	6178      	str	r0, [r7, #20]
    setInternalBufferToNewBuffer(otherStringLength * repeatCount + 1);
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	687a      	ldr	r2, [r7, #4]
 800dfe0:	fb02 f303 	mul.w	r3, r2, r3
 800dfe4:	3301      	adds	r3, #1
 800dfe6:	4619      	mov	r1, r3
 800dfe8:	68f8      	ldr	r0, [r7, #12]
 800dfea:	f7ff ff65 	bl	800deb8 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    char* next = buffer_;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800dff4:	2300      	movs	r3, #0
 800dff6:	61bb      	str	r3, [r7, #24]
 800dff8:	69ba      	ldr	r2, [r7, #24]
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	429a      	cmp	r2, r3
 800dffe:	d20e      	bcs.n	800e01e <_ZN12SimpleStringC1EPKcj+0x62>
        StrNCpy(next, other, otherStringLength + 1);
 800e000:	697b      	ldr	r3, [r7, #20]
 800e002:	3301      	adds	r3, #1
 800e004:	461a      	mov	r2, r3
 800e006:	68b9      	ldr	r1, [r7, #8]
 800e008:	69f8      	ldr	r0, [r7, #28]
 800e00a:	f7ff fe66 	bl	800dcda <_ZN12SimpleString7StrNCpyEPcPKcj>
        next += otherStringLength;
 800e00e:	69fa      	ldr	r2, [r7, #28]
 800e010:	697b      	ldr	r3, [r7, #20]
 800e012:	4413      	add	r3, r2
 800e014:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800e016:	69bb      	ldr	r3, [r7, #24]
 800e018:	3301      	adds	r3, #1
 800e01a:	61bb      	str	r3, [r7, #24]
 800e01c:	e7ec      	b.n	800dff8 <_ZN12SimpleStringC1EPKcj+0x3c>
    }
    *next = 0;
 800e01e:	69fb      	ldr	r3, [r7, #28]
 800e020:	2200      	movs	r2, #0
 800e022:	701a      	strb	r2, [r3, #0]
}
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	4618      	mov	r0, r3
 800e028:	3720      	adds	r7, #32
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}

0800e02e <_ZN12SimpleStringC1ERKS_>:

SimpleString::SimpleString(const SimpleString& other)
 800e02e:	b580      	push	{r7, lr}
 800e030:	b082      	sub	sp, #8
 800e032:	af00      	add	r7, sp, #0
 800e034:	6078      	str	r0, [r7, #4]
 800e036:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2200      	movs	r2, #0
 800e03c:	601a      	str	r2, [r3, #0]
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2200      	movs	r2, #0
 800e042:	605a      	str	r2, [r3, #4]
{
    copyBufferToNewInternalBuffer(other.getBuffer());
 800e044:	6838      	ldr	r0, [r7, #0]
 800e046:	f7ff ff92 	bl	800df6e <_ZNK12SimpleString9getBufferEv>
 800e04a:	4603      	mov	r3, r0
 800e04c:	4619      	mov	r1, r3
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	f7ff ff7a 	bl	800df48 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	4618      	mov	r0, r3
 800e058:	3708      	adds	r7, #8
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}

0800e05e <_ZN12SimpleStringaSERKS_>:

SimpleString& SimpleString::operator=(const SimpleString& other)
{
 800e05e:	b580      	push	{r7, lr}
 800e060:	b082      	sub	sp, #8
 800e062:	af00      	add	r7, sp, #0
 800e064:	6078      	str	r0, [r7, #4]
 800e066:	6039      	str	r1, [r7, #0]
    if (this != &other)
 800e068:	687a      	ldr	r2, [r7, #4]
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	429a      	cmp	r2, r3
 800e06e:	d003      	beq.n	800e078 <_ZN12SimpleStringaSERKS_+0x1a>
        copyBufferToNewInternalBuffer(other);
 800e070:	6839      	ldr	r1, [r7, #0]
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f7ff ff53 	bl	800df1e <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>
    return *this;
 800e078:	687b      	ldr	r3, [r7, #4]
}
 800e07a:	4618      	mov	r0, r3
 800e07c:	3708      	adds	r7, #8
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}

0800e082 <_ZNK12SimpleString8containsERKS_>:

bool SimpleString::contains(const SimpleString& other) const
{
 800e082:	b590      	push	{r4, r7, lr}
 800e084:	b083      	sub	sp, #12
 800e086:	af00      	add	r7, sp, #0
 800e088:	6078      	str	r0, [r7, #4]
 800e08a:	6039      	str	r1, [r7, #0]
    return StrStr(getBuffer(), other.getBuffer()) != NULLPTR;
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f7ff ff6e 	bl	800df6e <_ZNK12SimpleString9getBufferEv>
 800e092:	4604      	mov	r4, r0
 800e094:	6838      	ldr	r0, [r7, #0]
 800e096:	f7ff ff6a 	bl	800df6e <_ZNK12SimpleString9getBufferEv>
 800e09a:	4603      	mov	r3, r0
 800e09c:	4619      	mov	r1, r3
 800e09e:	4620      	mov	r0, r4
 800e0a0:	f7ff fe50 	bl	800dd44 <_ZN12SimpleString6StrStrEPKcS1_>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	bf14      	ite	ne
 800e0aa:	2301      	movne	r3, #1
 800e0ac:	2300      	moveq	r3, #0
 800e0ae:	b2db      	uxtb	r3, r3
}
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	370c      	adds	r7, #12
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd90      	pop	{r4, r7, pc}

0800e0b8 <_ZNK12SimpleString14containsNoCaseERKS_>:

bool SimpleString::containsNoCase(const SimpleString& other) const
{
 800e0b8:	b590      	push	{r4, r7, lr}
 800e0ba:	b087      	sub	sp, #28
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
 800e0c0:	6039      	str	r1, [r7, #0]
    return lowerCase().contains(other.lowerCase());
 800e0c2:	f107 0308 	add.w	r3, r7, #8
 800e0c6:	6879      	ldr	r1, [r7, #4]
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f000 fabb 	bl	800e644 <_ZNK12SimpleString9lowerCaseEv>
 800e0ce:	f107 0310 	add.w	r3, r7, #16
 800e0d2:	6839      	ldr	r1, [r7, #0]
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f000 fab5 	bl	800e644 <_ZNK12SimpleString9lowerCaseEv>
 800e0da:	f107 0210 	add.w	r2, r7, #16
 800e0de:	f107 0308 	add.w	r3, r7, #8
 800e0e2:	4611      	mov	r1, r2
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	f7ff ffcc 	bl	800e082 <_ZNK12SimpleString8containsERKS_>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	461c      	mov	r4, r3
 800e0ee:	bf00      	nop
 800e0f0:	f107 0310 	add.w	r3, r7, #16
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f000 fafe 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800e0fa:	f107 0308 	add.w	r3, r7, #8
 800e0fe:	4618      	mov	r0, r3
 800e100:	f000 faf9 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800e104:	4623      	mov	r3, r4
}
 800e106:	4618      	mov	r0, r3
 800e108:	371c      	adds	r7, #28
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd90      	pop	{r4, r7, pc}

0800e10e <_ZNK12SimpleString10startsWithERKS_>:

bool SimpleString::startsWith(const SimpleString& other) const
{
 800e10e:	b590      	push	{r4, r7, lr}
 800e110:	b083      	sub	sp, #12
 800e112:	af00      	add	r7, sp, #0
 800e114:	6078      	str	r0, [r7, #4]
 800e116:	6039      	str	r1, [r7, #0]
    if (other.size() == 0) return true;
 800e118:	6838      	ldr	r0, [r7, #0]
 800e11a:	f000 facb 	bl	800e6b4 <_ZNK12SimpleString4sizeEv>
 800e11e:	4603      	mov	r3, r0
 800e120:	2b00      	cmp	r3, #0
 800e122:	bf0c      	ite	eq
 800e124:	2301      	moveq	r3, #1
 800e126:	2300      	movne	r3, #0
 800e128:	b2db      	uxtb	r3, r3
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d001      	beq.n	800e132 <_ZNK12SimpleString10startsWithERKS_+0x24>
 800e12e:	2301      	movs	r3, #1
 800e130:	e022      	b.n	800e178 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else if (size() == 0) return false;
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f000 fabe 	bl	800e6b4 <_ZNK12SimpleString4sizeEv>
 800e138:	4603      	mov	r3, r0
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	bf0c      	ite	eq
 800e13e:	2301      	moveq	r3, #1
 800e140:	2300      	movne	r3, #0
 800e142:	b2db      	uxtb	r3, r3
 800e144:	2b00      	cmp	r3, #0
 800e146:	d001      	beq.n	800e14c <_ZNK12SimpleString10startsWithERKS_+0x3e>
 800e148:	2300      	movs	r3, #0
 800e14a:	e015      	b.n	800e178 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else return StrStr(getBuffer(), other.getBuffer()) == getBuffer();
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f7ff ff0e 	bl	800df6e <_ZNK12SimpleString9getBufferEv>
 800e152:	4604      	mov	r4, r0
 800e154:	6838      	ldr	r0, [r7, #0]
 800e156:	f7ff ff0a 	bl	800df6e <_ZNK12SimpleString9getBufferEv>
 800e15a:	4603      	mov	r3, r0
 800e15c:	4619      	mov	r1, r3
 800e15e:	4620      	mov	r0, r4
 800e160:	f7ff fdf0 	bl	800dd44 <_ZN12SimpleString6StrStrEPKcS1_>
 800e164:	4604      	mov	r4, r0
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f7ff ff01 	bl	800df6e <_ZNK12SimpleString9getBufferEv>
 800e16c:	4603      	mov	r3, r0
 800e16e:	429c      	cmp	r4, r3
 800e170:	bf0c      	ite	eq
 800e172:	2301      	moveq	r3, #1
 800e174:	2300      	movne	r3, #0
 800e176:	b2db      	uxtb	r3, r3
}
 800e178:	4618      	mov	r0, r3
 800e17a:	370c      	adds	r7, #12
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd90      	pop	{r4, r7, pc}

0800e180 <_ZNK12SimpleString8endsWithERKS_>:

bool SimpleString::endsWith(const SimpleString& other) const
{
 800e180:	b590      	push	{r4, r7, lr}
 800e182:	b085      	sub	sp, #20
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
 800e188:	6039      	str	r1, [r7, #0]
    size_t length = size();
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f000 fa92 	bl	800e6b4 <_ZNK12SimpleString4sizeEv>
 800e190:	60f8      	str	r0, [r7, #12]
    size_t other_length = other.size();
 800e192:	6838      	ldr	r0, [r7, #0]
 800e194:	f000 fa8e 	bl	800e6b4 <_ZNK12SimpleString4sizeEv>
 800e198:	60b8      	str	r0, [r7, #8]

    if (other_length == 0) return true;
 800e19a:	68bb      	ldr	r3, [r7, #8]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d101      	bne.n	800e1a4 <_ZNK12SimpleString8endsWithERKS_+0x24>
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	e020      	b.n	800e1e6 <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length == 0) return false;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d101      	bne.n	800e1ae <_ZNK12SimpleString8endsWithERKS_+0x2e>
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	e01b      	b.n	800e1e6 <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length < other_length) return false;
 800e1ae:	68fa      	ldr	r2, [r7, #12]
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	429a      	cmp	r2, r3
 800e1b4:	d201      	bcs.n	800e1ba <_ZNK12SimpleString8endsWithERKS_+0x3a>
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	e015      	b.n	800e1e6 <_ZNK12SimpleString8endsWithERKS_+0x66>

    return StrCmp(getBuffer() + length - other_length, other.getBuffer()) == 0;
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	f7ff fed7 	bl	800df6e <_ZNK12SimpleString9getBufferEv>
 800e1c0:	4601      	mov	r1, r0
 800e1c2:	68fa      	ldr	r2, [r7, #12]
 800e1c4:	68bb      	ldr	r3, [r7, #8]
 800e1c6:	1ad3      	subs	r3, r2, r3
 800e1c8:	18cc      	adds	r4, r1, r3
 800e1ca:	6838      	ldr	r0, [r7, #0]
 800e1cc:	f7ff fecf 	bl	800df6e <_ZNK12SimpleString9getBufferEv>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	4619      	mov	r1, r3
 800e1d4:	4620      	mov	r0, r4
 800e1d6:	f7ff fd13 	bl	800dc00 <_ZN12SimpleString6StrCmpEPKcS1_>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	bf0c      	ite	eq
 800e1e0:	2301      	moveq	r3, #1
 800e1e2:	2300      	movne	r3, #0
 800e1e4:	b2db      	uxtb	r3, r3
}
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	3714      	adds	r7, #20
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd90      	pop	{r4, r7, pc}

0800e1ee <_ZNK12SimpleString5countERKS_>:

size_t SimpleString::count(const SimpleString& substr) const
{
 800e1ee:	b580      	push	{r7, lr}
 800e1f0:	b086      	sub	sp, #24
 800e1f2:	af00      	add	r7, sp, #0
 800e1f4:	6078      	str	r0, [r7, #4]
 800e1f6:	6039      	str	r1, [r7, #0]
    size_t num = 0;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	617b      	str	r3, [r7, #20]
    const char* str = getBuffer();
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f7ff feb6 	bl	800df6e <_ZNK12SimpleString9getBufferEv>
 800e202:	6138      	str	r0, [r7, #16]
    const char* strpart = NULL;
 800e204:	2300      	movs	r3, #0
 800e206:	60fb      	str	r3, [r7, #12]
    if (*str){
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	781b      	ldrb	r3, [r3, #0]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d008      	beq.n	800e222 <_ZNK12SimpleString5countERKS_+0x34>
        strpart = StrStr(str, substr.getBuffer());
 800e210:	6838      	ldr	r0, [r7, #0]
 800e212:	f7ff feac 	bl	800df6e <_ZNK12SimpleString9getBufferEv>
 800e216:	4603      	mov	r3, r0
 800e218:	4619      	mov	r1, r3
 800e21a:	6938      	ldr	r0, [r7, #16]
 800e21c:	f7ff fd92 	bl	800dd44 <_ZN12SimpleString6StrStrEPKcS1_>
 800e220:	60f8      	str	r0, [r7, #12]
    }
    while (*str && strpart) {
 800e222:	693b      	ldr	r3, [r7, #16]
 800e224:	781b      	ldrb	r3, [r3, #0]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d014      	beq.n	800e254 <_ZNK12SimpleString5countERKS_+0x66>
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d011      	beq.n	800e254 <_ZNK12SimpleString5countERKS_+0x66>
        str = strpart;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	613b      	str	r3, [r7, #16]
        str++;
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	3301      	adds	r3, #1
 800e238:	613b      	str	r3, [r7, #16]
        num++;
 800e23a:	697b      	ldr	r3, [r7, #20]
 800e23c:	3301      	adds	r3, #1
 800e23e:	617b      	str	r3, [r7, #20]
        strpart = StrStr(str, substr.getBuffer());
 800e240:	6838      	ldr	r0, [r7, #0]
 800e242:	f7ff fe94 	bl	800df6e <_ZNK12SimpleString9getBufferEv>
 800e246:	4603      	mov	r3, r0
 800e248:	4619      	mov	r1, r3
 800e24a:	6938      	ldr	r0, [r7, #16]
 800e24c:	f7ff fd7a 	bl	800dd44 <_ZN12SimpleString6StrStrEPKcS1_>
 800e250:	60f8      	str	r0, [r7, #12]
    while (*str && strpart) {
 800e252:	e7e6      	b.n	800e222 <_ZNK12SimpleString5countERKS_+0x34>
    }
    return num;
 800e254:	697b      	ldr	r3, [r7, #20]
}
 800e256:	4618      	mov	r0, r3
 800e258:	3718      	adds	r7, #24
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}

0800e25e <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>:

void SimpleString::split(const SimpleString& delimiter, SimpleStringCollection& col) const
{
 800e25e:	b590      	push	{r4, r7, lr}
 800e260:	b091      	sub	sp, #68	; 0x44
 800e262:	af00      	add	r7, sp, #0
 800e264:	60f8      	str	r0, [r7, #12]
 800e266:	60b9      	str	r1, [r7, #8]
 800e268:	607a      	str	r2, [r7, #4]
    size_t num = count(delimiter);
 800e26a:	68b9      	ldr	r1, [r7, #8]
 800e26c:	68f8      	ldr	r0, [r7, #12]
 800e26e:	f7ff ffbe 	bl	800e1ee <_ZNK12SimpleString5countERKS_>
 800e272:	6378      	str	r0, [r7, #52]	; 0x34
    size_t extraEndToken = (endsWith(delimiter)) ? 0 : 1U;
 800e274:	68b9      	ldr	r1, [r7, #8]
 800e276:	68f8      	ldr	r0, [r7, #12]
 800e278:	f7ff ff82 	bl	800e180 <_ZNK12SimpleString8endsWithERKS_>
 800e27c:	4603      	mov	r3, r0
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d001      	beq.n	800e286 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x28>
 800e282:	2300      	movs	r3, #0
 800e284:	e000      	b.n	800e288 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x2a>
 800e286:	2301      	movs	r3, #1
 800e288:	633b      	str	r3, [r7, #48]	; 0x30
    col.allocate(num + extraEndToken);
 800e28a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e28e:	4413      	add	r3, r2
 800e290:	4619      	mov	r1, r3
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f001 f95c 	bl	800f550 <_ZN22SimpleStringCollection8allocateEj>

    const char* str = getBuffer();
 800e298:	68f8      	ldr	r0, [r7, #12]
 800e29a:	f7ff fe68 	bl	800df6e <_ZNK12SimpleString9getBufferEv>
 800e29e:	63f8      	str	r0, [r7, #60]	; 0x3c
    const char* prev;
    for (size_t i = 0; i < num; ++i) {
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	63bb      	str	r3, [r7, #56]	; 0x38
 800e2a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	d235      	bcs.n	800e318 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xba>
        prev = str;
 800e2ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        str = StrStr(str, delimiter.getBuffer()) + 1;
 800e2b0:	68b8      	ldr	r0, [r7, #8]
 800e2b2:	f7ff fe5c 	bl	800df6e <_ZNK12SimpleString9getBufferEv>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	4619      	mov	r1, r3
 800e2ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e2bc:	f7ff fd42 	bl	800dd44 <_ZN12SimpleString6StrStrEPKcS1_>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	3301      	adds	r3, #1
 800e2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        col[i] = SimpleString(prev).subString(0, size_t (str - prev));
 800e2c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f001 f9db 	bl	800f684 <_ZN22SimpleStringCollectionixEj>
 800e2ce:	4604      	mov	r4, r0
 800e2d0:	f107 031c 	add.w	r3, r7, #28
 800e2d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f7ff fe55 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800e2dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e0:	1ad3      	subs	r3, r2, r3
 800e2e2:	f107 0014 	add.w	r0, r7, #20
 800e2e6:	f107 011c 	add.w	r1, r7, #28
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	f000 fb0c 	bl	800e908 <_ZNK12SimpleString9subStringEjj>
 800e2f0:	f107 0314 	add.w	r3, r7, #20
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	4620      	mov	r0, r4
 800e2f8:	f7ff feb1 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 800e2fc:	f107 0314 	add.w	r3, r7, #20
 800e300:	4618      	mov	r0, r3
 800e302:	f000 f9f8 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800e306:	f107 031c 	add.w	r3, r7, #28
 800e30a:	4618      	mov	r0, r3
 800e30c:	f000 f9f3 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < num; ++i) {
 800e310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e312:	3301      	adds	r3, #1
 800e314:	63bb      	str	r3, [r7, #56]	; 0x38
 800e316:	e7c5      	b.n	800e2a4 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x46>
    }
    if (extraEndToken) {
 800e318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d015      	beq.n	800e34a <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xec>
        col[num] = str;
 800e31e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e320:	6878      	ldr	r0, [r7, #4]
 800e322:	f001 f9af 	bl	800f684 <_ZN22SimpleStringCollectionixEj>
 800e326:	4604      	mov	r4, r0
 800e328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e32c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e32e:	4618      	mov	r0, r3
 800e330:	f7ff fe29 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800e334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e338:	4619      	mov	r1, r3
 800e33a:	4620      	mov	r0, r4
 800e33c:	f7ff fe8f 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 800e340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e344:	4618      	mov	r0, r3
 800e346:	f000 f9d6 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    }
}
 800e34a:	bf00      	nop
 800e34c:	3744      	adds	r7, #68	; 0x44
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd90      	pop	{r4, r7, pc}

0800e352 <_ZN12SimpleString7replaceEcc>:

void SimpleString::replace(char to, char with)
{
 800e352:	b580      	push	{r7, lr}
 800e354:	b084      	sub	sp, #16
 800e356:	af00      	add	r7, sp, #0
 800e358:	6078      	str	r0, [r7, #4]
 800e35a:	460b      	mov	r3, r1
 800e35c:	70fb      	strb	r3, [r7, #3]
 800e35e:	4613      	mov	r3, r2
 800e360:	70bb      	strb	r3, [r7, #2]
    size_t s = size();
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f000 f9a6 	bl	800e6b4 <_ZNK12SimpleString4sizeEv>
 800e368:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < s; i++) {
 800e36a:	2300      	movs	r3, #0
 800e36c:	60fb      	str	r3, [r7, #12]
 800e36e:	68fa      	ldr	r2, [r7, #12]
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	429a      	cmp	r2, r3
 800e374:	d218      	bcs.n	800e3a8 <_ZN12SimpleString7replaceEcc+0x56>
        if (getBuffer()[i] == to) buffer_[i] = with;
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	f7ff fdf9 	bl	800df6e <_ZNK12SimpleString9getBufferEv>
 800e37c:	4602      	mov	r2, r0
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	4413      	add	r3, r2
 800e382:	781b      	ldrb	r3, [r3, #0]
 800e384:	78fa      	ldrb	r2, [r7, #3]
 800e386:	429a      	cmp	r2, r3
 800e388:	bf0c      	ite	eq
 800e38a:	2301      	moveq	r3, #1
 800e38c:	2300      	movne	r3, #0
 800e38e:	b2db      	uxtb	r3, r3
 800e390:	2b00      	cmp	r3, #0
 800e392:	d005      	beq.n	800e3a0 <_ZN12SimpleString7replaceEcc+0x4e>
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681a      	ldr	r2, [r3, #0]
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	4413      	add	r3, r2
 800e39c:	78ba      	ldrb	r2, [r7, #2]
 800e39e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < s; i++) {
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	3301      	adds	r3, #1
 800e3a4:	60fb      	str	r3, [r7, #12]
 800e3a6:	e7e2      	b.n	800e36e <_ZN12SimpleString7replaceEcc+0x1c>
    }
}
 800e3a8:	bf00      	nop
 800e3aa:	3710      	adds	r7, #16
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}

0800e3b0 <_ZN12SimpleString7replaceEPKcS1_>:

void SimpleString::replace(const char* to, const char* with)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b08e      	sub	sp, #56	; 0x38
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	60f8      	str	r0, [r7, #12]
 800e3b8:	60b9      	str	r1, [r7, #8]
 800e3ba:	607a      	str	r2, [r7, #4]
    size_t c = count(to);
 800e3bc:	f107 0310 	add.w	r3, r7, #16
 800e3c0:	68b9      	ldr	r1, [r7, #8]
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f7ff fddf 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800e3c8:	f107 0310 	add.w	r3, r7, #16
 800e3cc:	4619      	mov	r1, r3
 800e3ce:	68f8      	ldr	r0, [r7, #12]
 800e3d0:	f7ff ff0d 	bl	800e1ee <_ZNK12SimpleString5countERKS_>
 800e3d4:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e3d6:	f107 0310 	add.w	r3, r7, #16
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f000 f98b 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    if (c == 0) {
 800e3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d071      	beq.n	800e4ca <_ZN12SimpleString7replaceEPKcS1_+0x11a>
        return;
    }
    size_t len = size();
 800e3e6:	68f8      	ldr	r0, [r7, #12]
 800e3e8:	f000 f964 	bl	800e6b4 <_ZNK12SimpleString4sizeEv>
 800e3ec:	62b8      	str	r0, [r7, #40]	; 0x28
    size_t tolen = StrLen(to);
 800e3ee:	68b8      	ldr	r0, [r7, #8]
 800e3f0:	f7ff fc28 	bl	800dc44 <_ZN12SimpleString6StrLenEPKc>
 800e3f4:	6278      	str	r0, [r7, #36]	; 0x24
    size_t withlen = StrLen(with);
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f7ff fc24 	bl	800dc44 <_ZN12SimpleString6StrLenEPKc>
 800e3fc:	6238      	str	r0, [r7, #32]

    size_t newsize = len + (withlen * c) - (tolen * c) + 1;
 800e3fe:	6a3b      	ldr	r3, [r7, #32]
 800e400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e402:	fb02 f203 	mul.w	r2, r2, r3
 800e406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e408:	441a      	add	r2, r3
 800e40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e40c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e40e:	fb01 f303 	mul.w	r3, r1, r3
 800e412:	1ad3      	subs	r3, r2, r3
 800e414:	3301      	adds	r3, #1
 800e416:	61fb      	str	r3, [r7, #28]

    if (newsize > 1) {
 800e418:	69fb      	ldr	r3, [r7, #28]
 800e41a:	2b01      	cmp	r3, #1
 800e41c:	d951      	bls.n	800e4c2 <_ZN12SimpleString7replaceEPKcS1_+0x112>
        char* newbuf = allocStringBuffer(newsize, __FILE__, __LINE__);
 800e41e:	f240 129d 	movw	r2, #413	; 0x19d
 800e422:	492c      	ldr	r1, [pc, #176]	; (800e4d4 <_ZN12SimpleString7replaceEPKcS1_+0x124>)
 800e424:	69f8      	ldr	r0, [r7, #28]
 800e426:	f7ff fb33 	bl	800da90 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800e42a:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0, j = 0; i < len;) {
 800e42c:	2300      	movs	r3, #0
 800e42e:	637b      	str	r3, [r7, #52]	; 0x34
 800e430:	2300      	movs	r3, #0
 800e432:	633b      	str	r3, [r7, #48]	; 0x30
 800e434:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e438:	429a      	cmp	r2, r3
 800e43a:	d236      	bcs.n	800e4aa <_ZN12SimpleString7replaceEPKcS1_+0xfa>
            if (StrNCmp(&getBuffer()[i], to, tolen) == 0) {
 800e43c:	68f8      	ldr	r0, [r7, #12]
 800e43e:	f7ff fd96 	bl	800df6e <_ZNK12SimpleString9getBufferEv>
 800e442:	4602      	mov	r2, r0
 800e444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e446:	4413      	add	r3, r2
 800e448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e44a:	68b9      	ldr	r1, [r7, #8]
 800e44c:	4618      	mov	r0, r3
 800e44e:	f7ff fc16 	bl	800dc7e <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800e452:	4603      	mov	r3, r0
 800e454:	2b00      	cmp	r3, #0
 800e456:	bf0c      	ite	eq
 800e458:	2301      	moveq	r3, #1
 800e45a:	2300      	movne	r3, #0
 800e45c:	b2db      	uxtb	r3, r3
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d011      	beq.n	800e486 <_ZN12SimpleString7replaceEPKcS1_+0xd6>
                StrNCpy(&newbuf[j], with, withlen + 1);
 800e462:	69ba      	ldr	r2, [r7, #24]
 800e464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e466:	18d0      	adds	r0, r2, r3
 800e468:	6a3b      	ldr	r3, [r7, #32]
 800e46a:	3301      	adds	r3, #1
 800e46c:	461a      	mov	r2, r3
 800e46e:	6879      	ldr	r1, [r7, #4]
 800e470:	f7ff fc33 	bl	800dcda <_ZN12SimpleString7StrNCpyEPcPKcj>
                j += withlen;
 800e474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e476:	6a3b      	ldr	r3, [r7, #32]
 800e478:	4413      	add	r3, r2
 800e47a:	633b      	str	r3, [r7, #48]	; 0x30
                i += tolen;
 800e47c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e480:	4413      	add	r3, r2
 800e482:	637b      	str	r3, [r7, #52]	; 0x34
 800e484:	e7d6      	b.n	800e434 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
            else {
                newbuf[j] = getBuffer()[i];
 800e486:	68f8      	ldr	r0, [r7, #12]
 800e488:	f7ff fd71 	bl	800df6e <_ZNK12SimpleString9getBufferEv>
 800e48c:	4602      	mov	r2, r0
 800e48e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e490:	441a      	add	r2, r3
 800e492:	69b9      	ldr	r1, [r7, #24]
 800e494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e496:	440b      	add	r3, r1
 800e498:	7812      	ldrb	r2, [r2, #0]
 800e49a:	701a      	strb	r2, [r3, #0]
                j++;
 800e49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e49e:	3301      	adds	r3, #1
 800e4a0:	633b      	str	r3, [r7, #48]	; 0x30
                i++;
 800e4a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4a4:	3301      	adds	r3, #1
 800e4a6:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t i = 0, j = 0; i < len;) {
 800e4a8:	e7c4      	b.n	800e434 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
        }
        newbuf[newsize - 1] = '\0';
 800e4aa:	69fb      	ldr	r3, [r7, #28]
 800e4ac:	3b01      	subs	r3, #1
 800e4ae:	69ba      	ldr	r2, [r7, #24]
 800e4b0:	4413      	add	r3, r2
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	701a      	strb	r2, [r3, #0]
        setInternalBufferTo(newbuf, newsize);
 800e4b6:	69fa      	ldr	r2, [r7, #28]
 800e4b8:	69b9      	ldr	r1, [r7, #24]
 800e4ba:	68f8      	ldr	r0, [r7, #12]
 800e4bc:	f7ff fd1c 	bl	800def8 <_ZN12SimpleString19setInternalBufferToEPcj>
 800e4c0:	e004      	b.n	800e4cc <_ZN12SimpleString7replaceEPKcS1_+0x11c>
    }
    else
        setInternalBufferAsEmptyString();
 800e4c2:	68f8      	ldr	r0, [r7, #12]
 800e4c4:	f7ff fcca 	bl	800de5c <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800e4c8:	e000      	b.n	800e4cc <_ZN12SimpleString7replaceEPKcS1_+0x11c>
        return;
 800e4ca:	bf00      	nop
}
 800e4cc:	3738      	adds	r7, #56	; 0x38
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}
 800e4d2:	bf00      	nop
 800e4d4:	08025d74 	.word	0x08025d74

0800e4d8 <_ZNK12SimpleString9printableEv>:

SimpleString SimpleString::printable() const
{
 800e4d8:	b590      	push	{r4, r7, lr}
 800e4da:	b089      	sub	sp, #36	; 0x24
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	6039      	str	r1, [r7, #0]
        "\\v",
        "\\f",
        "\\r"
    };

    SimpleString result;
 800e4e2:	493b      	ldr	r1, [pc, #236]	; (800e5d0 <_ZNK12SimpleString9printableEv+0xf8>)
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f7ff fd4e 	bl	800df86 <_ZN12SimpleStringC1EPKc>
    result.setInternalBufferToNewBuffer(getPrintableSize() + 1);
 800e4ea:	6838      	ldr	r0, [r7, #0]
 800e4ec:	f000 f876 	bl	800e5dc <_ZNK12SimpleString16getPrintableSizeEv>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	4619      	mov	r1, r3
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f7ff fcde 	bl	800deb8 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    size_t str_size = size();
 800e4fc:	6838      	ldr	r0, [r7, #0]
 800e4fe:	f000 f8d9 	bl	800e6b4 <_ZNK12SimpleString4sizeEv>
 800e502:	6178      	str	r0, [r7, #20]
    size_t j = 0;
 800e504:	2300      	movs	r3, #0
 800e506:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800e508:	2300      	movs	r3, #0
 800e50a:	61bb      	str	r3, [r7, #24]
 800e50c:	69ba      	ldr	r2, [r7, #24]
 800e50e:	697b      	ldr	r3, [r7, #20]
 800e510:	429a      	cmp	r2, r3
 800e512:	d252      	bcs.n	800e5ba <_ZNK12SimpleString9printableEv+0xe2>
    {
        char c = buffer_[i];
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	681a      	ldr	r2, [r3, #0]
 800e518:	69bb      	ldr	r3, [r7, #24]
 800e51a:	4413      	add	r3, r2
 800e51c:	781b      	ldrb	r3, [r3, #0]
 800e51e:	74fb      	strb	r3, [r7, #19]
        if (isControlWithShortEscapeSequence(c))
 800e520:	7cfb      	ldrb	r3, [r7, #19]
 800e522:	4618      	mov	r0, r3
 800e524:	f000 fb43 	bl	800ebae <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800e528:	4603      	mov	r3, r0
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d012      	beq.n	800e554 <_ZNK12SimpleString9printableEv+0x7c>
        {
            StrNCpy(&result.buffer_[j], shortEscapeCodes[(unsigned char)(c - '\a')], 2);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681a      	ldr	r2, [r3, #0]
 800e532:	69fb      	ldr	r3, [r7, #28]
 800e534:	18d0      	adds	r0, r2, r3
 800e536:	7cfb      	ldrb	r3, [r7, #19]
 800e538:	3b07      	subs	r3, #7
 800e53a:	b2db      	uxtb	r3, r3
 800e53c:	461a      	mov	r2, r3
 800e53e:	4b25      	ldr	r3, [pc, #148]	; (800e5d4 <_ZNK12SimpleString9printableEv+0xfc>)
 800e540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e544:	2202      	movs	r2, #2
 800e546:	4619      	mov	r1, r3
 800e548:	f7ff fbc7 	bl	800dcda <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 2;
 800e54c:	69fb      	ldr	r3, [r7, #28]
 800e54e:	3302      	adds	r3, #2
 800e550:	61fb      	str	r3, [r7, #28]
 800e552:	e02e      	b.n	800e5b2 <_ZNK12SimpleString9printableEv+0xda>
        }
        else if (isControl(c))
 800e554:	7cfb      	ldrb	r3, [r7, #19]
 800e556:	4618      	mov	r0, r3
 800e558:	f000 fb15 	bl	800eb86 <_ZN12SimpleString9isControlEc>
 800e55c:	4603      	mov	r3, r0
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d01e      	beq.n	800e5a0 <_ZNK12SimpleString9printableEv+0xc8>
        {
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800e562:	7cfa      	ldrb	r2, [r7, #19]
 800e564:	f107 0308 	add.w	r3, r7, #8
 800e568:	491b      	ldr	r1, [pc, #108]	; (800e5d8 <_ZNK12SimpleString9printableEv+0x100>)
 800e56a:	4618      	mov	r0, r3
 800e56c:	f000 fdca 	bl	800f104 <_Z16StringFromFormatPKcz>
            StrNCpy(&result.buffer_[j], hexEscapeCode.asCharString(), 4);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681a      	ldr	r2, [r3, #0]
 800e574:	69fb      	ldr	r3, [r7, #28]
 800e576:	18d4      	adds	r4, r2, r3
 800e578:	f107 0308 	add.w	r3, r7, #8
 800e57c:	4618      	mov	r0, r3
 800e57e:	f000 f88d 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 800e582:	4603      	mov	r3, r0
 800e584:	2204      	movs	r2, #4
 800e586:	4619      	mov	r1, r3
 800e588:	4620      	mov	r0, r4
 800e58a:	f7ff fba6 	bl	800dcda <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 4;
 800e58e:	69fb      	ldr	r3, [r7, #28]
 800e590:	3304      	adds	r3, #4
 800e592:	61fb      	str	r3, [r7, #28]
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800e594:	f107 0308 	add.w	r3, r7, #8
 800e598:	4618      	mov	r0, r3
 800e59a:	f000 f8ac 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800e59e:	e008      	b.n	800e5b2 <_ZNK12SimpleString9printableEv+0xda>
        }
        else
        {
            result.buffer_[j] = c;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681a      	ldr	r2, [r3, #0]
 800e5a4:	69fb      	ldr	r3, [r7, #28]
 800e5a6:	4413      	add	r3, r2
 800e5a8:	7cfa      	ldrb	r2, [r7, #19]
 800e5aa:	701a      	strb	r2, [r3, #0]
            j++;
 800e5ac:	69fb      	ldr	r3, [r7, #28]
 800e5ae:	3301      	adds	r3, #1
 800e5b0:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800e5b2:	69bb      	ldr	r3, [r7, #24]
 800e5b4:	3301      	adds	r3, #1
 800e5b6:	61bb      	str	r3, [r7, #24]
 800e5b8:	e7a8      	b.n	800e50c <_ZNK12SimpleString9printableEv+0x34>
        }
    }
    result.buffer_[j] = 0;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681a      	ldr	r2, [r3, #0]
 800e5be:	69fb      	ldr	r3, [r7, #28]
 800e5c0:	4413      	add	r3, r2
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	701a      	strb	r2, [r3, #0]

    return result;
 800e5c6:	bf00      	nop
}
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	3724      	adds	r7, #36	; 0x24
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	bd90      	pop	{r4, r7, pc}
 800e5d0:	08025e34 	.word	0x08025e34
 800e5d4:	2000006c 	.word	0x2000006c
 800e5d8:	08025e38 	.word	0x08025e38

0800e5dc <_ZNK12SimpleString16getPrintableSizeEv>:

size_t SimpleString::getPrintableSize() const
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b086      	sub	sp, #24
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
    size_t str_size = size();
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f000 f865 	bl	800e6b4 <_ZNK12SimpleString4sizeEv>
 800e5ea:	60f8      	str	r0, [r7, #12]
    size_t printable_str_size = str_size;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < str_size; i++)
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	613b      	str	r3, [r7, #16]
 800e5f4:	693a      	ldr	r2, [r7, #16]
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	429a      	cmp	r2, r3
 800e5fa:	d21e      	bcs.n	800e63a <_ZNK12SimpleString16getPrintableSizeEv+0x5e>
    {
        char c = buffer_[i];
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681a      	ldr	r2, [r3, #0]
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	4413      	add	r3, r2
 800e604:	781b      	ldrb	r3, [r3, #0]
 800e606:	72fb      	strb	r3, [r7, #11]
        if (isControlWithShortEscapeSequence(c))
 800e608:	7afb      	ldrb	r3, [r7, #11]
 800e60a:	4618      	mov	r0, r3
 800e60c:	f000 facf 	bl	800ebae <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800e610:	4603      	mov	r3, r0
 800e612:	2b00      	cmp	r3, #0
 800e614:	d003      	beq.n	800e61e <_ZNK12SimpleString16getPrintableSizeEv+0x42>
        {
            printable_str_size += 1;
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	3301      	adds	r3, #1
 800e61a:	617b      	str	r3, [r7, #20]
 800e61c:	e009      	b.n	800e632 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        }
        else if (isControl(c))
 800e61e:	7afb      	ldrb	r3, [r7, #11]
 800e620:	4618      	mov	r0, r3
 800e622:	f000 fab0 	bl	800eb86 <_ZN12SimpleString9isControlEc>
 800e626:	4603      	mov	r3, r0
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d002      	beq.n	800e632 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        {
            printable_str_size += 3;
 800e62c:	697b      	ldr	r3, [r7, #20]
 800e62e:	3303      	adds	r3, #3
 800e630:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < str_size; i++)
 800e632:	693b      	ldr	r3, [r7, #16]
 800e634:	3301      	adds	r3, #1
 800e636:	613b      	str	r3, [r7, #16]
 800e638:	e7dc      	b.n	800e5f4 <_ZNK12SimpleString16getPrintableSizeEv+0x18>
        }
    }

    return printable_str_size;
 800e63a:	697b      	ldr	r3, [r7, #20]
}
 800e63c:	4618      	mov	r0, r3
 800e63e:	3718      	adds	r7, #24
 800e640:	46bd      	mov	sp, r7
 800e642:	bd80      	pop	{r7, pc}

0800e644 <_ZNK12SimpleString9lowerCaseEv>:

SimpleString SimpleString::lowerCase() const
{
 800e644:	b590      	push	{r4, r7, lr}
 800e646:	b085      	sub	sp, #20
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
 800e64c:	6039      	str	r1, [r7, #0]
    SimpleString str(*this);
 800e64e:	6839      	ldr	r1, [r7, #0]
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	f7ff fcec 	bl	800e02e <_ZN12SimpleStringC1ERKS_>

    size_t str_size = str.size();
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f000 f82c 	bl	800e6b4 <_ZNK12SimpleString4sizeEv>
 800e65c:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < str_size; i++)
 800e65e:	2300      	movs	r3, #0
 800e660:	60fb      	str	r3, [r7, #12]
 800e662:	68fa      	ldr	r2, [r7, #12]
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	429a      	cmp	r2, r3
 800e668:	d213      	bcs.n	800e692 <_ZNK12SimpleString9lowerCaseEv+0x4e>
        str.buffer_[i] = ToLower(str.getBuffer()[i]);
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f7ff fc7f 	bl	800df6e <_ZNK12SimpleString9getBufferEv>
 800e670:	4602      	mov	r2, r0
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	4413      	add	r3, r2
 800e676:	7819      	ldrb	r1, [r3, #0]
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681a      	ldr	r2, [r3, #0]
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	18d4      	adds	r4, r2, r3
 800e680:	4608      	mov	r0, r1
 800e682:	f7ff fb8a 	bl	800dd9a <_ZN12SimpleString7ToLowerEc>
 800e686:	4603      	mov	r3, r0
 800e688:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < str_size; i++)
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	3301      	adds	r3, #1
 800e68e:	60fb      	str	r3, [r7, #12]
 800e690:	e7e7      	b.n	800e662 <_ZNK12SimpleString9lowerCaseEv+0x1e>

    return str;
 800e692:	bf00      	nop
}
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	3714      	adds	r7, #20
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd90      	pop	{r4, r7, pc}

0800e69c <_ZNK12SimpleString12asCharStringEv>:

const char *SimpleString::asCharString() const
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b082      	sub	sp, #8
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
    return getBuffer();
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f7ff fc62 	bl	800df6e <_ZNK12SimpleString9getBufferEv>
 800e6aa:	4603      	mov	r3, r0
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3708      	adds	r7, #8
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <_ZNK12SimpleString4sizeEv>:

size_t SimpleString::size() const
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b082      	sub	sp, #8
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
    return StrLen(getBuffer());
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f7ff fc56 	bl	800df6e <_ZNK12SimpleString9getBufferEv>
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f7ff fabd 	bl	800dc44 <_ZN12SimpleString6StrLenEPKc>
 800e6ca:	4603      	mov	r3, r0
}
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3708      	adds	r7, #8
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}

0800e6d4 <_ZNK12SimpleString7isEmptyEv>:

bool SimpleString::isEmpty() const
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b082      	sub	sp, #8
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
    return size() == 0;
 800e6dc:	6878      	ldr	r0, [r7, #4]
 800e6de:	f7ff ffe9 	bl	800e6b4 <_ZNK12SimpleString4sizeEv>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	bf0c      	ite	eq
 800e6e8:	2301      	moveq	r3, #1
 800e6ea:	2300      	movne	r3, #0
 800e6ec:	b2db      	uxtb	r3, r3
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	3708      	adds	r7, #8
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}

0800e6f6 <_ZN12SimpleStringD1Ev>:

SimpleString::~SimpleString()
 800e6f6:	b580      	push	{r7, lr}
 800e6f8:	b082      	sub	sp, #8
 800e6fa:	af00      	add	r7, sp, #0
 800e6fc:	6078      	str	r0, [r7, #4]
{
    deallocateInternalBuffer();
 800e6fe:	6878      	ldr	r0, [r7, #4]
 800e700:	f7ff fb90 	bl	800de24 <_ZN12SimpleString24deallocateInternalBufferEv>
}
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	4618      	mov	r0, r3
 800e708:	3708      	adds	r7, #8
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}

0800e70e <_ZeqRK12SimpleStringS1_>:

bool operator==(const SimpleString& left, const SimpleString& right)
{
 800e70e:	b590      	push	{r4, r7, lr}
 800e710:	b083      	sub	sp, #12
 800e712:	af00      	add	r7, sp, #0
 800e714:	6078      	str	r0, [r7, #4]
 800e716:	6039      	str	r1, [r7, #0]
    return 0 == SimpleString::StrCmp(left.asCharString(), right.asCharString());
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	f7ff ffbf 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 800e71e:	4604      	mov	r4, r0
 800e720:	6838      	ldr	r0, [r7, #0]
 800e722:	f7ff ffbb 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 800e726:	4603      	mov	r3, r0
 800e728:	4619      	mov	r1, r3
 800e72a:	4620      	mov	r0, r4
 800e72c:	f7ff fa68 	bl	800dc00 <_ZN12SimpleString6StrCmpEPKcS1_>
 800e730:	4603      	mov	r3, r0
 800e732:	2b00      	cmp	r3, #0
 800e734:	bf0c      	ite	eq
 800e736:	2301      	moveq	r3, #1
 800e738:	2300      	movne	r3, #0
 800e73a:	b2db      	uxtb	r3, r3
}
 800e73c:	4618      	mov	r0, r3
 800e73e:	370c      	adds	r7, #12
 800e740:	46bd      	mov	sp, r7
 800e742:	bd90      	pop	{r4, r7, pc}

0800e744 <_ZNK12SimpleString12equalsNoCaseERKS_>:

bool SimpleString::equalsNoCase(const SimpleString& str) const
{
 800e744:	b590      	push	{r4, r7, lr}
 800e746:	b087      	sub	sp, #28
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
 800e74c:	6039      	str	r1, [r7, #0]
    return lowerCase() == str.lowerCase();
 800e74e:	f107 0308 	add.w	r3, r7, #8
 800e752:	6879      	ldr	r1, [r7, #4]
 800e754:	4618      	mov	r0, r3
 800e756:	f7ff ff75 	bl	800e644 <_ZNK12SimpleString9lowerCaseEv>
 800e75a:	f107 0310 	add.w	r3, r7, #16
 800e75e:	6839      	ldr	r1, [r7, #0]
 800e760:	4618      	mov	r0, r3
 800e762:	f7ff ff6f 	bl	800e644 <_ZNK12SimpleString9lowerCaseEv>
 800e766:	f107 0210 	add.w	r2, r7, #16
 800e76a:	f107 0308 	add.w	r3, r7, #8
 800e76e:	4611      	mov	r1, r2
 800e770:	4618      	mov	r0, r3
 800e772:	f7ff ffcc 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 800e776:	4603      	mov	r3, r0
 800e778:	461c      	mov	r4, r3
 800e77a:	f107 0310 	add.w	r3, r7, #16
 800e77e:	4618      	mov	r0, r3
 800e780:	f7ff ffb9 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800e784:	f107 0308 	add.w	r3, r7, #8
 800e788:	4618      	mov	r0, r3
 800e78a:	f7ff ffb4 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800e78e:	4623      	mov	r3, r4
}
 800e790:	4618      	mov	r0, r3
 800e792:	371c      	adds	r7, #28
 800e794:	46bd      	mov	sp, r7
 800e796:	bd90      	pop	{r4, r7, pc}

0800e798 <_ZneRK12SimpleStringS1_>:


bool operator!=(const SimpleString& left, const SimpleString& right)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b082      	sub	sp, #8
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
 800e7a0:	6039      	str	r1, [r7, #0]
    return !(left == right);
 800e7a2:	6839      	ldr	r1, [r7, #0]
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f7ff ffb2 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	f083 0301 	eor.w	r3, r3, #1
 800e7b0:	b2db      	uxtb	r3, r3
}
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	3708      	adds	r7, #8
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	bd80      	pop	{r7, pc}

0800e7ba <_ZNK12SimpleStringplERKS_>:

SimpleString SimpleString::operator+(const SimpleString& rhs) const
{
 800e7ba:	b580      	push	{r7, lr}
 800e7bc:	b084      	sub	sp, #16
 800e7be:	af00      	add	r7, sp, #0
 800e7c0:	60f8      	str	r0, [r7, #12]
 800e7c2:	60b9      	str	r1, [r7, #8]
 800e7c4:	607a      	str	r2, [r7, #4]
    SimpleString t(getBuffer());
 800e7c6:	68b8      	ldr	r0, [r7, #8]
 800e7c8:	f7ff fbd1 	bl	800df6e <_ZNK12SimpleString9getBufferEv>
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	4619      	mov	r1, r3
 800e7d0:	68f8      	ldr	r0, [r7, #12]
 800e7d2:	f7ff fbd8 	bl	800df86 <_ZN12SimpleStringC1EPKc>
    t += rhs.getBuffer();
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f7ff fbc9 	bl	800df6e <_ZNK12SimpleString9getBufferEv>
 800e7dc:	4603      	mov	r3, r0
 800e7de:	4619      	mov	r1, r3
 800e7e0:	68f8      	ldr	r0, [r7, #12]
 800e7e2:	f000 f817 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    return t;
 800e7e6:	bf00      	nop
}
 800e7e8:	68f8      	ldr	r0, [r7, #12]
 800e7ea:	3710      	adds	r7, #16
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd80      	pop	{r7, pc}

0800e7f0 <_ZN12SimpleStringpLERKS_>:

SimpleString& SimpleString::operator+=(const SimpleString& rhs)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b082      	sub	sp, #8
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
 800e7f8:	6039      	str	r1, [r7, #0]
    return operator+=(rhs.getBuffer());
 800e7fa:	6838      	ldr	r0, [r7, #0]
 800e7fc:	f7ff fbb7 	bl	800df6e <_ZNK12SimpleString9getBufferEv>
 800e800:	4603      	mov	r3, r0
 800e802:	4619      	mov	r1, r3
 800e804:	6878      	ldr	r0, [r7, #4]
 800e806:	f000 f805 	bl	800e814 <_ZN12SimpleStringpLEPKc>
 800e80a:	4603      	mov	r3, r0
}
 800e80c:	4618      	mov	r0, r3
 800e80e:	3708      	adds	r7, #8
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}

0800e814 <_ZN12SimpleStringpLEPKc>:

SimpleString& SimpleString::operator+=(const char* rhs)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b086      	sub	sp, #24
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
 800e81c:	6039      	str	r1, [r7, #0]
    size_t originalSize = this->size();
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f7ff ff48 	bl	800e6b4 <_ZNK12SimpleString4sizeEv>
 800e824:	6178      	str	r0, [r7, #20]
    size_t additionalStringSize = StrLen(rhs) + 1;
 800e826:	6838      	ldr	r0, [r7, #0]
 800e828:	f7ff fa0c 	bl	800dc44 <_ZN12SimpleString6StrLenEPKc>
 800e82c:	4603      	mov	r3, r0
 800e82e:	3301      	adds	r3, #1
 800e830:	613b      	str	r3, [r7, #16]
    size_t sizeOfNewString = originalSize + additionalStringSize;
 800e832:	697a      	ldr	r2, [r7, #20]
 800e834:	693b      	ldr	r3, [r7, #16]
 800e836:	4413      	add	r3, r2
 800e838:	60fb      	str	r3, [r7, #12]
    char* tbuffer = copyToNewBuffer(this->getBuffer(), sizeOfNewString);
 800e83a:	6878      	ldr	r0, [r7, #4]
 800e83c:	f7ff fb97 	bl	800df6e <_ZNK12SimpleString9getBufferEv>
 800e840:	4603      	mov	r3, r0
 800e842:	68f9      	ldr	r1, [r7, #12]
 800e844:	4618      	mov	r0, r3
 800e846:	f000 f941 	bl	800eacc <_ZN12SimpleString15copyToNewBufferEPKcj>
 800e84a:	60b8      	str	r0, [r7, #8]
    StrNCpy(tbuffer + originalSize, rhs, additionalStringSize);
 800e84c:	68ba      	ldr	r2, [r7, #8]
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	4413      	add	r3, r2
 800e852:	693a      	ldr	r2, [r7, #16]
 800e854:	6839      	ldr	r1, [r7, #0]
 800e856:	4618      	mov	r0, r3
 800e858:	f7ff fa3f 	bl	800dcda <_ZN12SimpleString7StrNCpyEPcPKcj>

    setInternalBufferTo(tbuffer, sizeOfNewString);
 800e85c:	68fa      	ldr	r2, [r7, #12]
 800e85e:	68b9      	ldr	r1, [r7, #8]
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	f7ff fb49 	bl	800def8 <_ZN12SimpleString19setInternalBufferToEPcj>
    return *this;
 800e866:	687b      	ldr	r3, [r7, #4]
}
 800e868:	4618      	mov	r0, r3
 800e86a:	3718      	adds	r7, #24
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}

0800e870 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>:

void SimpleString::padStringsToSameLength(SimpleString& str1, SimpleString& str2, char padCharacter)
{
 800e870:	b590      	push	{r4, r7, lr}
 800e872:	b08b      	sub	sp, #44	; 0x2c
 800e874:	af00      	add	r7, sp, #0
 800e876:	60f8      	str	r0, [r7, #12]
 800e878:	60b9      	str	r1, [r7, #8]
 800e87a:	4613      	mov	r3, r2
 800e87c:	71fb      	strb	r3, [r7, #7]
    if (str1.size() > str2.size()) {
 800e87e:	68f8      	ldr	r0, [r7, #12]
 800e880:	f7ff ff18 	bl	800e6b4 <_ZNK12SimpleString4sizeEv>
 800e884:	4604      	mov	r4, r0
 800e886:	68b8      	ldr	r0, [r7, #8]
 800e888:	f7ff ff14 	bl	800e6b4 <_ZNK12SimpleString4sizeEv>
 800e88c:	4603      	mov	r3, r0
 800e88e:	429c      	cmp	r4, r3
 800e890:	bf8c      	ite	hi
 800e892:	2301      	movhi	r3, #1
 800e894:	2300      	movls	r3, #0
 800e896:	b2db      	uxtb	r3, r3
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d006      	beq.n	800e8aa <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x3a>
        padStringsToSameLength(str2, str1, padCharacter);
 800e89c:	79fb      	ldrb	r3, [r7, #7]
 800e89e:	461a      	mov	r2, r3
 800e8a0:	68f9      	ldr	r1, [r7, #12]
 800e8a2:	68b8      	ldr	r0, [r7, #8]
 800e8a4:	f7ff ffe4 	bl	800e870 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>
 800e8a8:	e02b      	b.n	800e902 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x92>
        return;
    }

    char pad[2];
    pad[0] = padCharacter;
 800e8aa:	79fb      	ldrb	r3, [r7, #7]
 800e8ac:	753b      	strb	r3, [r7, #20]
    pad[1] = 0;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	757b      	strb	r3, [r7, #21]
    str1 = SimpleString(pad, str2.size() - str1.size()) + str1;
 800e8b2:	68b8      	ldr	r0, [r7, #8]
 800e8b4:	f7ff fefe 	bl	800e6b4 <_ZNK12SimpleString4sizeEv>
 800e8b8:	4604      	mov	r4, r0
 800e8ba:	68f8      	ldr	r0, [r7, #12]
 800e8bc:	f7ff fefa 	bl	800e6b4 <_ZNK12SimpleString4sizeEv>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	1ae2      	subs	r2, r4, r3
 800e8c4:	f107 0114 	add.w	r1, r7, #20
 800e8c8:	f107 0320 	add.w	r3, r7, #32
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f7ff fb75 	bl	800dfbc <_ZN12SimpleStringC1EPKcj>
 800e8d2:	f107 0318 	add.w	r3, r7, #24
 800e8d6:	f107 0120 	add.w	r1, r7, #32
 800e8da:	68fa      	ldr	r2, [r7, #12]
 800e8dc:	4618      	mov	r0, r3
 800e8de:	f7ff ff6c 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 800e8e2:	f107 0318 	add.w	r3, r7, #24
 800e8e6:	4619      	mov	r1, r3
 800e8e8:	68f8      	ldr	r0, [r7, #12]
 800e8ea:	f7ff fbb8 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 800e8ee:	f107 0318 	add.w	r3, r7, #24
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f7ff feff 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800e8f8:	f107 0320 	add.w	r3, r7, #32
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	f7ff fefa 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 800e902:	372c      	adds	r7, #44	; 0x2c
 800e904:	46bd      	mov	sp, r7
 800e906:	bd90      	pop	{r4, r7, pc}

0800e908 <_ZNK12SimpleString9subStringEjj>:

SimpleString SimpleString::subString(size_t beginPos, size_t amount) const
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b086      	sub	sp, #24
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	60f8      	str	r0, [r7, #12]
 800e910:	60b9      	str	r1, [r7, #8]
 800e912:	607a      	str	r2, [r7, #4]
 800e914:	603b      	str	r3, [r7, #0]
    if (beginPos > size()-1) return "";
 800e916:	68b8      	ldr	r0, [r7, #8]
 800e918:	f7ff fecc 	bl	800e6b4 <_ZNK12SimpleString4sizeEv>
 800e91c:	4603      	mov	r3, r0
 800e91e:	3b01      	subs	r3, #1
 800e920:	687a      	ldr	r2, [r7, #4]
 800e922:	429a      	cmp	r2, r3
 800e924:	bf8c      	ite	hi
 800e926:	2301      	movhi	r3, #1
 800e928:	2300      	movls	r3, #0
 800e92a:	b2db      	uxtb	r3, r3
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d004      	beq.n	800e93a <_ZNK12SimpleString9subStringEjj+0x32>
 800e930:	4919      	ldr	r1, [pc, #100]	; (800e998 <_ZNK12SimpleString9subStringEjj+0x90>)
 800e932:	68f8      	ldr	r0, [r7, #12]
 800e934:	f7ff fb27 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800e938:	e029      	b.n	800e98e <_ZNK12SimpleString9subStringEjj+0x86>

    SimpleString newString = getBuffer() + beginPos;
 800e93a:	68b8      	ldr	r0, [r7, #8]
 800e93c:	f7ff fb17 	bl	800df6e <_ZNK12SimpleString9getBufferEv>
 800e940:	4602      	mov	r2, r0
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	441a      	add	r2, r3
 800e946:	f107 0310 	add.w	r3, r7, #16
 800e94a:	4611      	mov	r1, r2
 800e94c:	4618      	mov	r0, r3
 800e94e:	f7ff fb1a 	bl	800df86 <_ZN12SimpleStringC1EPKc>

    if (newString.size() > amount)
 800e952:	f107 0310 	add.w	r3, r7, #16
 800e956:	4618      	mov	r0, r3
 800e958:	f7ff feac 	bl	800e6b4 <_ZNK12SimpleString4sizeEv>
 800e95c:	4602      	mov	r2, r0
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	4293      	cmp	r3, r2
 800e962:	bf34      	ite	cc
 800e964:	2301      	movcc	r3, #1
 800e966:	2300      	movcs	r3, #0
 800e968:	b2db      	uxtb	r3, r3
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d004      	beq.n	800e978 <_ZNK12SimpleString9subStringEjj+0x70>
        newString.buffer_[amount] = '\0';
 800e96e:	693a      	ldr	r2, [r7, #16]
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	4413      	add	r3, r2
 800e974:	2200      	movs	r2, #0
 800e976:	701a      	strb	r2, [r3, #0]

    return newString;
 800e978:	f107 0310 	add.w	r3, r7, #16
 800e97c:	4619      	mov	r1, r3
 800e97e:	68f8      	ldr	r0, [r7, #12]
 800e980:	f7ff fb55 	bl	800e02e <_ZN12SimpleStringC1ERKS_>
    SimpleString newString = getBuffer() + beginPos;
 800e984:	f107 0310 	add.w	r3, r7, #16
 800e988:	4618      	mov	r0, r3
 800e98a:	f7ff feb4 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 800e98e:	68f8      	ldr	r0, [r7, #12]
 800e990:	3718      	adds	r7, #24
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}
 800e996:	bf00      	nop
 800e998:	08025e34 	.word	0x08025e34

0800e99c <_ZNK12SimpleString9subStringEj>:

SimpleString SimpleString::subString(size_t beginPos) const
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b084      	sub	sp, #16
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	60f8      	str	r0, [r7, #12]
 800e9a4:	60b9      	str	r1, [r7, #8]
 800e9a6:	607a      	str	r2, [r7, #4]
    return subString(beginPos, npos);
 800e9a8:	68f8      	ldr	r0, [r7, #12]
 800e9aa:	f04f 33ff 	mov.w	r3, #4294967295
 800e9ae:	687a      	ldr	r2, [r7, #4]
 800e9b0:	68b9      	ldr	r1, [r7, #8]
 800e9b2:	f7ff ffa9 	bl	800e908 <_ZNK12SimpleString9subStringEjj>
}
 800e9b6:	68f8      	ldr	r0, [r7, #12]
 800e9b8:	3710      	adds	r7, #16
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}

0800e9be <_ZNK12SimpleString2atEj>:

char SimpleString::at(size_t pos) const
{
 800e9be:	b580      	push	{r7, lr}
 800e9c0:	b082      	sub	sp, #8
 800e9c2:	af00      	add	r7, sp, #0
 800e9c4:	6078      	str	r0, [r7, #4]
 800e9c6:	6039      	str	r1, [r7, #0]
    return getBuffer()[pos];
 800e9c8:	6878      	ldr	r0, [r7, #4]
 800e9ca:	f7ff fad0 	bl	800df6e <_ZNK12SimpleString9getBufferEv>
 800e9ce:	4602      	mov	r2, r0
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	4413      	add	r3, r2
 800e9d4:	781b      	ldrb	r3, [r3, #0]
}
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	3708      	adds	r7, #8
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bd80      	pop	{r7, pc}

0800e9de <_ZNK12SimpleString4findEc>:

size_t SimpleString::find(char ch) const
{
 800e9de:	b580      	push	{r7, lr}
 800e9e0:	b082      	sub	sp, #8
 800e9e2:	af00      	add	r7, sp, #0
 800e9e4:	6078      	str	r0, [r7, #4]
 800e9e6:	460b      	mov	r3, r1
 800e9e8:	70fb      	strb	r3, [r7, #3]
    return findFrom(0, ch);
 800e9ea:	78fb      	ldrb	r3, [r7, #3]
 800e9ec:	461a      	mov	r2, r3
 800e9ee:	2100      	movs	r1, #0
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	f000 f805 	bl	800ea00 <_ZNK12SimpleString8findFromEjc>
 800e9f6:	4603      	mov	r3, r0
}
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	3708      	adds	r7, #8
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd80      	pop	{r7, pc}

0800ea00 <_ZNK12SimpleString8findFromEjc>:

size_t SimpleString::findFrom(size_t starting_position, char ch) const
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b086      	sub	sp, #24
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	60f8      	str	r0, [r7, #12]
 800ea08:	60b9      	str	r1, [r7, #8]
 800ea0a:	4613      	mov	r3, r2
 800ea0c:	71fb      	strb	r3, [r7, #7]
    size_t length = size();
 800ea0e:	68f8      	ldr	r0, [r7, #12]
 800ea10:	f7ff fe50 	bl	800e6b4 <_ZNK12SimpleString4sizeEv>
 800ea14:	6138      	str	r0, [r7, #16]
    for (size_t i = starting_position; i < length; i++)
 800ea16:	68bb      	ldr	r3, [r7, #8]
 800ea18:	617b      	str	r3, [r7, #20]
 800ea1a:	697a      	ldr	r2, [r7, #20]
 800ea1c:	693b      	ldr	r3, [r7, #16]
 800ea1e:	429a      	cmp	r2, r3
 800ea20:	d213      	bcs.n	800ea4a <_ZNK12SimpleString8findFromEjc+0x4a>
        if (at(i) == ch) return i;
 800ea22:	6979      	ldr	r1, [r7, #20]
 800ea24:	68f8      	ldr	r0, [r7, #12]
 800ea26:	f7ff ffca 	bl	800e9be <_ZNK12SimpleString2atEj>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	461a      	mov	r2, r3
 800ea2e:	79fb      	ldrb	r3, [r7, #7]
 800ea30:	4293      	cmp	r3, r2
 800ea32:	bf0c      	ite	eq
 800ea34:	2301      	moveq	r3, #1
 800ea36:	2300      	movne	r3, #0
 800ea38:	b2db      	uxtb	r3, r3
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d001      	beq.n	800ea42 <_ZNK12SimpleString8findFromEjc+0x42>
 800ea3e:	697b      	ldr	r3, [r7, #20]
 800ea40:	e005      	b.n	800ea4e <_ZNK12SimpleString8findFromEjc+0x4e>
    for (size_t i = starting_position; i < length; i++)
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	3301      	adds	r3, #1
 800ea46:	617b      	str	r3, [r7, #20]
 800ea48:	e7e7      	b.n	800ea1a <_ZNK12SimpleString8findFromEjc+0x1a>
    return npos;
 800ea4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ea4e:	4618      	mov	r0, r3
 800ea50:	3718      	adds	r7, #24
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}
	...

0800ea58 <_ZNK12SimpleString17subStringFromTillEcc>:

SimpleString SimpleString::subStringFromTill(char startChar, char lastExcludedChar) const
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b086      	sub	sp, #24
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	60f8      	str	r0, [r7, #12]
 800ea60:	60b9      	str	r1, [r7, #8]
 800ea62:	4611      	mov	r1, r2
 800ea64:	461a      	mov	r2, r3
 800ea66:	460b      	mov	r3, r1
 800ea68:	71fb      	strb	r3, [r7, #7]
 800ea6a:	4613      	mov	r3, r2
 800ea6c:	71bb      	strb	r3, [r7, #6]
    size_t beginPos = find(startChar);
 800ea6e:	79fb      	ldrb	r3, [r7, #7]
 800ea70:	4619      	mov	r1, r3
 800ea72:	68b8      	ldr	r0, [r7, #8]
 800ea74:	f7ff ffb3 	bl	800e9de <_ZNK12SimpleString4findEc>
 800ea78:	6178      	str	r0, [r7, #20]
    if (beginPos == npos) return "";
 800ea7a:	697b      	ldr	r3, [r7, #20]
 800ea7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea80:	d104      	bne.n	800ea8c <_ZNK12SimpleString17subStringFromTillEcc+0x34>
 800ea82:	4911      	ldr	r1, [pc, #68]	; (800eac8 <_ZNK12SimpleString17subStringFromTillEcc+0x70>)
 800ea84:	68f8      	ldr	r0, [r7, #12]
 800ea86:	f7ff fa7e 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800ea8a:	e019      	b.n	800eac0 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    size_t endPos = findFrom(beginPos, lastExcludedChar);
 800ea8c:	79bb      	ldrb	r3, [r7, #6]
 800ea8e:	461a      	mov	r2, r3
 800ea90:	6979      	ldr	r1, [r7, #20]
 800ea92:	68b8      	ldr	r0, [r7, #8]
 800ea94:	f7ff ffb4 	bl	800ea00 <_ZNK12SimpleString8findFromEjc>
 800ea98:	6138      	str	r0, [r7, #16]
    if (endPos == npos) return subString(beginPos);
 800ea9a:	693b      	ldr	r3, [r7, #16]
 800ea9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaa0:	d106      	bne.n	800eab0 <_ZNK12SimpleString17subStringFromTillEcc+0x58>
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	697a      	ldr	r2, [r7, #20]
 800eaa6:	68b9      	ldr	r1, [r7, #8]
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f7ff ff77 	bl	800e99c <_ZNK12SimpleString9subStringEj>
 800eaae:	e007      	b.n	800eac0 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    return subString(beginPos, endPos - beginPos);
 800eab0:	693a      	ldr	r2, [r7, #16]
 800eab2:	697b      	ldr	r3, [r7, #20]
 800eab4:	1ad3      	subs	r3, r2, r3
 800eab6:	68f8      	ldr	r0, [r7, #12]
 800eab8:	697a      	ldr	r2, [r7, #20]
 800eaba:	68b9      	ldr	r1, [r7, #8]
 800eabc:	f7ff ff24 	bl	800e908 <_ZNK12SimpleString9subStringEjj>
}
 800eac0:	68f8      	ldr	r0, [r7, #12]
 800eac2:	3718      	adds	r7, #24
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}
 800eac8:	08025e34 	.word	0x08025e34

0800eacc <_ZN12SimpleString15copyToNewBufferEPKcj>:

char* SimpleString::copyToNewBuffer(const char* bufferToCopy, size_t bufferSize)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b084      	sub	sp, #16
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
 800ead4:	6039      	str	r1, [r7, #0]
    char* newBuffer = allocStringBuffer(bufferSize, __FILE__, __LINE__);
 800ead6:	f240 2275 	movw	r2, #629	; 0x275
 800eada:	490a      	ldr	r1, [pc, #40]	; (800eb04 <_ZN12SimpleString15copyToNewBufferEPKcj+0x38>)
 800eadc:	6838      	ldr	r0, [r7, #0]
 800eade:	f7fe ffd7 	bl	800da90 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800eae2:	60f8      	str	r0, [r7, #12]
    StrNCpy(newBuffer, bufferToCopy, bufferSize);
 800eae4:	683a      	ldr	r2, [r7, #0]
 800eae6:	6879      	ldr	r1, [r7, #4]
 800eae8:	68f8      	ldr	r0, [r7, #12]
 800eaea:	f7ff f8f6 	bl	800dcda <_ZN12SimpleString7StrNCpyEPcPKcj>
    newBuffer[bufferSize-1] = '\0';
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	3b01      	subs	r3, #1
 800eaf2:	68fa      	ldr	r2, [r7, #12]
 800eaf4:	4413      	add	r3, r2
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	701a      	strb	r2, [r3, #0]
    return newBuffer;
 800eafa:	68fb      	ldr	r3, [r7, #12]
}
 800eafc:	4618      	mov	r0, r3
 800eafe:	3710      	adds	r7, #16
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}
 800eb04:	08025d74 	.word	0x08025d74

0800eb08 <_ZN12SimpleString7isDigitEc>:
    StrNCpy(bufferToCopy, getBuffer(), sizeToCopy);
    bufferToCopy[sizeToCopy] = '\0';
}

bool SimpleString::isDigit(char ch)
{
 800eb08:	b480      	push	{r7}
 800eb0a:	b083      	sub	sp, #12
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	4603      	mov	r3, r0
 800eb10:	71fb      	strb	r3, [r7, #7]
    return '0' <= ch && '9' >= ch;
 800eb12:	79fb      	ldrb	r3, [r7, #7]
 800eb14:	2b2f      	cmp	r3, #47	; 0x2f
 800eb16:	d904      	bls.n	800eb22 <_ZN12SimpleString7isDigitEc+0x1a>
 800eb18:	79fb      	ldrb	r3, [r7, #7]
 800eb1a:	2b39      	cmp	r3, #57	; 0x39
 800eb1c:	d801      	bhi.n	800eb22 <_ZN12SimpleString7isDigitEc+0x1a>
 800eb1e:	2301      	movs	r3, #1
 800eb20:	e000      	b.n	800eb24 <_ZN12SimpleString7isDigitEc+0x1c>
 800eb22:	2300      	movs	r3, #0
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	370c      	adds	r7, #12
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2e:	4770      	bx	lr

0800eb30 <_ZN12SimpleString7isSpaceEc>:

bool SimpleString::isSpace(char ch)
{
 800eb30:	b480      	push	{r7}
 800eb32:	b083      	sub	sp, #12
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	4603      	mov	r3, r0
 800eb38:	71fb      	strb	r3, [r7, #7]
    return (ch == ' ') || (0x08 < ch && 0x0E > ch);
 800eb3a:	79fb      	ldrb	r3, [r7, #7]
 800eb3c:	2b20      	cmp	r3, #32
 800eb3e:	d005      	beq.n	800eb4c <_ZN12SimpleString7isSpaceEc+0x1c>
 800eb40:	79fb      	ldrb	r3, [r7, #7]
 800eb42:	2b08      	cmp	r3, #8
 800eb44:	d904      	bls.n	800eb50 <_ZN12SimpleString7isSpaceEc+0x20>
 800eb46:	79fb      	ldrb	r3, [r7, #7]
 800eb48:	2b0d      	cmp	r3, #13
 800eb4a:	d801      	bhi.n	800eb50 <_ZN12SimpleString7isSpaceEc+0x20>
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	e000      	b.n	800eb52 <_ZN12SimpleString7isSpaceEc+0x22>
 800eb50:	2300      	movs	r3, #0
}
 800eb52:	4618      	mov	r0, r3
 800eb54:	370c      	adds	r7, #12
 800eb56:	46bd      	mov	sp, r7
 800eb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5c:	4770      	bx	lr

0800eb5e <_ZN12SimpleString7isUpperEc>:

bool SimpleString::isUpper(char ch)
{
 800eb5e:	b480      	push	{r7}
 800eb60:	b083      	sub	sp, #12
 800eb62:	af00      	add	r7, sp, #0
 800eb64:	4603      	mov	r3, r0
 800eb66:	71fb      	strb	r3, [r7, #7]
    return 'A' <= ch && 'Z' >= ch;
 800eb68:	79fb      	ldrb	r3, [r7, #7]
 800eb6a:	2b40      	cmp	r3, #64	; 0x40
 800eb6c:	d904      	bls.n	800eb78 <_ZN12SimpleString7isUpperEc+0x1a>
 800eb6e:	79fb      	ldrb	r3, [r7, #7]
 800eb70:	2b5a      	cmp	r3, #90	; 0x5a
 800eb72:	d801      	bhi.n	800eb78 <_ZN12SimpleString7isUpperEc+0x1a>
 800eb74:	2301      	movs	r3, #1
 800eb76:	e000      	b.n	800eb7a <_ZN12SimpleString7isUpperEc+0x1c>
 800eb78:	2300      	movs	r3, #0
}
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	370c      	adds	r7, #12
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb84:	4770      	bx	lr

0800eb86 <_ZN12SimpleString9isControlEc>:

bool SimpleString::isControl(char ch)
{
 800eb86:	b480      	push	{r7}
 800eb88:	b083      	sub	sp, #12
 800eb8a:	af00      	add	r7, sp, #0
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	71fb      	strb	r3, [r7, #7]
    return ch < ' ' || ch == char(0x7F);
 800eb90:	79fb      	ldrb	r3, [r7, #7]
 800eb92:	2b1f      	cmp	r3, #31
 800eb94:	d902      	bls.n	800eb9c <_ZN12SimpleString9isControlEc+0x16>
 800eb96:	79fb      	ldrb	r3, [r7, #7]
 800eb98:	2b7f      	cmp	r3, #127	; 0x7f
 800eb9a:	d101      	bne.n	800eba0 <_ZN12SimpleString9isControlEc+0x1a>
 800eb9c:	2301      	movs	r3, #1
 800eb9e:	e000      	b.n	800eba2 <_ZN12SimpleString9isControlEc+0x1c>
 800eba0:	2300      	movs	r3, #0
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	370c      	adds	r7, #12
 800eba6:	46bd      	mov	sp, r7
 800eba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebac:	4770      	bx	lr

0800ebae <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>:

bool SimpleString::isControlWithShortEscapeSequence(char ch)
{
 800ebae:	b480      	push	{r7}
 800ebb0:	b083      	sub	sp, #12
 800ebb2:	af00      	add	r7, sp, #0
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	71fb      	strb	r3, [r7, #7]
    return '\a' <= ch && '\r' >= ch;
 800ebb8:	79fb      	ldrb	r3, [r7, #7]
 800ebba:	2b06      	cmp	r3, #6
 800ebbc:	d904      	bls.n	800ebc8 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800ebbe:	79fb      	ldrb	r3, [r7, #7]
 800ebc0:	2b0d      	cmp	r3, #13
 800ebc2:	d801      	bhi.n	800ebc8 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	e000      	b.n	800ebca <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1c>
 800ebc8:	2300      	movs	r3, #0
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	370c      	adds	r7, #12
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd4:	4770      	bx	lr
	...

0800ebd8 <_Z10StringFromb>:

SimpleString StringFrom(bool value)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b082      	sub	sp, #8
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
 800ebe0:	460b      	mov	r3, r1
 800ebe2:	70fb      	strb	r3, [r7, #3]
    return SimpleString(StringFromFormat("%s", value ? "true" : "false"));
 800ebe4:	78fb      	ldrb	r3, [r7, #3]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d001      	beq.n	800ebee <_Z10StringFromb+0x16>
 800ebea:	4a06      	ldr	r2, [pc, #24]	; (800ec04 <_Z10StringFromb+0x2c>)
 800ebec:	e000      	b.n	800ebf0 <_Z10StringFromb+0x18>
 800ebee:	4a06      	ldr	r2, [pc, #24]	; (800ec08 <_Z10StringFromb+0x30>)
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	4906      	ldr	r1, [pc, #24]	; (800ec0c <_Z10StringFromb+0x34>)
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	f000 fa85 	bl	800f104 <_Z16StringFromFormatPKcz>
}
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	3708      	adds	r7, #8
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}
 800ec02:	bf00      	nop
 800ec04:	08025e40 	.word	0x08025e40
 800ec08:	08025e48 	.word	0x08025e48
 800ec0c:	08025e50 	.word	0x08025e50

0800ec10 <_Z10StringFromPKc>:

SimpleString StringFrom(const char *value)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b082      	sub	sp, #8
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
 800ec18:	6039      	str	r1, [r7, #0]
    return SimpleString(value);
 800ec1a:	6839      	ldr	r1, [r7, #0]
 800ec1c:	6878      	ldr	r0, [r7, #4]
 800ec1e:	f7ff f9b2 	bl	800df86 <_ZN12SimpleStringC1EPKc>
}
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	3708      	adds	r7, #8
 800ec26:	46bd      	mov	sp, r7
 800ec28:	bd80      	pop	{r7, pc}
	...

0800ec2c <_Z25PrintableStringFromOrNullPKc>:
{
    return (expected) ? StringFrom(expected) : StringFrom("(null)");
}

SimpleString PrintableStringFromOrNull(const char * expected)
{
 800ec2c:	b590      	push	{r4, r7, lr}
 800ec2e:	b085      	sub	sp, #20
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
 800ec34:	6039      	str	r1, [r7, #0]
    return (expected) ? StringFrom(expected).printable() : StringFrom("(null)");
 800ec36:	2400      	movs	r4, #0
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d00e      	beq.n	800ec5c <_Z25PrintableStringFromOrNullPKc+0x30>
 800ec3e:	f107 0308 	add.w	r3, r7, #8
 800ec42:	6839      	ldr	r1, [r7, #0]
 800ec44:	4618      	mov	r0, r3
 800ec46:	f7ff ffe3 	bl	800ec10 <_Z10StringFromPKc>
 800ec4a:	2401      	movs	r4, #1
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f107 0208 	add.w	r2, r7, #8
 800ec52:	4611      	mov	r1, r2
 800ec54:	4618      	mov	r0, r3
 800ec56:	f7ff fc3f 	bl	800e4d8 <_ZNK12SimpleString9printableEv>
 800ec5a:	e004      	b.n	800ec66 <_Z25PrintableStringFromOrNullPKc+0x3a>
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	4908      	ldr	r1, [pc, #32]	; (800ec80 <_Z25PrintableStringFromOrNullPKc+0x54>)
 800ec60:	4618      	mov	r0, r3
 800ec62:	f7ff ffd5 	bl	800ec10 <_Z10StringFromPKc>
 800ec66:	2c00      	cmp	r4, #0
 800ec68:	d004      	beq.n	800ec74 <_Z25PrintableStringFromOrNullPKc+0x48>
 800ec6a:	f107 0308 	add.w	r3, r7, #8
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f7ff fd41 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800ec74:	bf00      	nop
}
 800ec76:	6878      	ldr	r0, [r7, #4]
 800ec78:	3714      	adds	r7, #20
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd90      	pop	{r4, r7, pc}
 800ec7e:	bf00      	nop
 800ec80:	08025e54 	.word	0x08025e54

0800ec84 <_Z10StringFromi>:

SimpleString StringFrom(int value)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b082      	sub	sp, #8
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
 800ec8c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%d", value);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	683a      	ldr	r2, [r7, #0]
 800ec92:	4904      	ldr	r1, [pc, #16]	; (800eca4 <_Z10StringFromi+0x20>)
 800ec94:	4618      	mov	r0, r3
 800ec96:	f000 fa35 	bl	800f104 <_Z16StringFromFormatPKcz>
}
 800ec9a:	6878      	ldr	r0, [r7, #4]
 800ec9c:	3708      	adds	r7, #8
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	08025e5c 	.word	0x08025e5c

0800eca8 <_Z10StringFroml>:

SimpleString StringFrom(long value)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b082      	sub	sp, #8
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
 800ecb0:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%ld", value);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	683a      	ldr	r2, [r7, #0]
 800ecb6:	4904      	ldr	r1, [pc, #16]	; (800ecc8 <_Z10StringFroml+0x20>)
 800ecb8:	4618      	mov	r0, r3
 800ecba:	f000 fa23 	bl	800f104 <_Z16StringFromFormatPKcz>
}
 800ecbe:	6878      	ldr	r0, [r7, #4]
 800ecc0:	3708      	adds	r7, #8
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}
 800ecc6:	bf00      	nop
 800ecc8:	08025e60 	.word	0x08025e60

0800eccc <_Z10StringFromPKv>:

SimpleString StringFrom(const void* value)
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b086      	sub	sp, #24
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
 800ecd4:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800ecd6:	f107 0308 	add.w	r3, r7, #8
 800ecda:	4910      	ldr	r1, [pc, #64]	; (800ed1c <_Z10StringFromPKv+0x50>)
 800ecdc:	4618      	mov	r0, r3
 800ecde:	f7ff f952 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800ece2:	f107 0310 	add.w	r3, r7, #16
 800ece6:	6839      	ldr	r1, [r7, #0]
 800ece8:	4618      	mov	r0, r3
 800ecea:	f000 f9a1 	bl	800f030 <_Z13HexStringFromPKv>
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	f107 0210 	add.w	r2, r7, #16
 800ecf4:	f107 0108 	add.w	r1, r7, #8
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f7ff fd5e 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 800ecfe:	f107 0310 	add.w	r3, r7, #16
 800ed02:	4618      	mov	r0, r3
 800ed04:	f7ff fcf7 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800ed08:	f107 0308 	add.w	r3, r7, #8
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	f7ff fcf2 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800ed12:	bf00      	nop
}
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	3718      	adds	r7, #24
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	bd80      	pop	{r7, pc}
 800ed1c:	08025e64 	.word	0x08025e64

0800ed20 <_Z10StringFromPFvvE>:

SimpleString StringFrom(void (*value)())
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b086      	sub	sp, #24
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
 800ed28:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800ed2a:	f107 0308 	add.w	r3, r7, #8
 800ed2e:	4910      	ldr	r1, [pc, #64]	; (800ed70 <_Z10StringFromPFvvE+0x50>)
 800ed30:	4618      	mov	r0, r3
 800ed32:	f7ff f928 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800ed36:	f107 0310 	add.w	r3, r7, #16
 800ed3a:	6839      	ldr	r1, [r7, #0]
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f000 f98b 	bl	800f058 <_Z13HexStringFromPFvvE>
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	f107 0210 	add.w	r2, r7, #16
 800ed48:	f107 0108 	add.w	r1, r7, #8
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	f7ff fd34 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 800ed52:	f107 0310 	add.w	r3, r7, #16
 800ed56:	4618      	mov	r0, r3
 800ed58:	f7ff fccd 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800ed5c:	f107 0308 	add.w	r3, r7, #8
 800ed60:	4618      	mov	r0, r3
 800ed62:	f7ff fcc8 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800ed66:	bf00      	nop
}
 800ed68:	6878      	ldr	r0, [r7, #4]
 800ed6a:	3718      	adds	r7, #24
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bd80      	pop	{r7, pc}
 800ed70:	08025e64 	.word	0x08025e64

0800ed74 <_Z13HexStringFroml>:

SimpleString HexStringFrom(long value)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b082      	sub	sp, #8
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
 800ed7c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	683a      	ldr	r2, [r7, #0]
 800ed82:	4904      	ldr	r1, [pc, #16]	; (800ed94 <_Z13HexStringFroml+0x20>)
 800ed84:	4618      	mov	r0, r3
 800ed86:	f000 f9bd 	bl	800f104 <_Z16StringFromFormatPKcz>
}
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	3708      	adds	r7, #8
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}
 800ed92:	bf00      	nop
 800ed94:	08025e68 	.word	0x08025e68

0800ed98 <_Z13HexStringFromi>:

SimpleString HexStringFrom(int value)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b082      	sub	sp, #8
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
 800eda0:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	683a      	ldr	r2, [r7, #0]
 800eda6:	4904      	ldr	r1, [pc, #16]	; (800edb8 <_Z13HexStringFromi+0x20>)
 800eda8:	4618      	mov	r0, r3
 800edaa:	f000 f9ab 	bl	800f104 <_Z16StringFromFormatPKcz>
}
 800edae:	6878      	ldr	r0, [r7, #4]
 800edb0:	3708      	adds	r7, #8
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}
 800edb6:	bf00      	nop
 800edb8:	08025e6c 	.word	0x08025e6c

0800edbc <_Z13HexStringFroma>:

SimpleString HexStringFrom(signed char value)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b086      	sub	sp, #24
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
 800edc4:	460b      	mov	r3, r1
 800edc6:	70fb      	strb	r3, [r7, #3]
    SimpleString result = StringFromFormat("%x", value);
 800edc8:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	4912      	ldr	r1, [pc, #72]	; (800ee18 <_Z13HexStringFroma+0x5c>)
 800edd0:	4618      	mov	r0, r3
 800edd2:	f000 f997 	bl	800f104 <_Z16StringFromFormatPKcz>
    if(value < 0) {
 800edd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	da16      	bge.n	800ee0c <_Z13HexStringFroma+0x50>
        size_t size = result.size();
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	f7ff fc68 	bl	800e6b4 <_ZNK12SimpleString4sizeEv>
 800ede4:	6178      	str	r0, [r7, #20]
        result = result.subString(size-(CPPUTEST_CHAR_BIT/4));
 800ede6:	697b      	ldr	r3, [r7, #20]
 800ede8:	1e9a      	subs	r2, r3, #2
 800edea:	f107 030c 	add.w	r3, r7, #12
 800edee:	6879      	ldr	r1, [r7, #4]
 800edf0:	4618      	mov	r0, r3
 800edf2:	f7ff fdd3 	bl	800e99c <_ZNK12SimpleString9subStringEj>
 800edf6:	f107 030c 	add.w	r3, r7, #12
 800edfa:	4619      	mov	r1, r3
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f7ff f92e 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 800ee02:	f107 030c 	add.w	r3, r7, #12
 800ee06:	4618      	mov	r0, r3
 800ee08:	f7ff fc75 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    }
    return result;
 800ee0c:	bf00      	nop
}
 800ee0e:	6878      	ldr	r0, [r7, #4]
 800ee10:	3718      	adds	r7, #24
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}
 800ee16:	bf00      	nop
 800ee18:	08025e6c 	.word	0x08025e6c

0800ee1c <_Z13HexStringFromm>:

SimpleString HexStringFrom(unsigned long value)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b082      	sub	sp, #8
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
 800ee24:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	683a      	ldr	r2, [r7, #0]
 800ee2a:	4904      	ldr	r1, [pc, #16]	; (800ee3c <_Z13HexStringFromm+0x20>)
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f000 f969 	bl	800f104 <_Z16StringFromFormatPKcz>
}
 800ee32:	6878      	ldr	r0, [r7, #4]
 800ee34:	3708      	adds	r7, #8
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bd80      	pop	{r7, pc}
 800ee3a:	bf00      	nop
 800ee3c:	08025e68 	.word	0x08025e68

0800ee40 <_Z13HexStringFromj>:

SimpleString HexStringFrom(unsigned int value)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b082      	sub	sp, #8
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
 800ee48:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	683a      	ldr	r2, [r7, #0]
 800ee4e:	4904      	ldr	r1, [pc, #16]	; (800ee60 <_Z13HexStringFromj+0x20>)
 800ee50:	4618      	mov	r0, r3
 800ee52:	f000 f957 	bl	800f104 <_Z16StringFromFormatPKcz>
}
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	3708      	adds	r7, #8
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bd80      	pop	{r7, pc}
 800ee5e:	bf00      	nop
 800ee60:	08025e6c 	.word	0x08025e6c

0800ee64 <_Z30BracketsFormattedHexStringFromi>:

SimpleString BracketsFormattedHexStringFrom(int value)
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b084      	sub	sp, #16
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
 800ee6c:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800ee6e:	f107 0308 	add.w	r3, r7, #8
 800ee72:	6839      	ldr	r1, [r7, #0]
 800ee74:	4618      	mov	r0, r3
 800ee76:	f7ff ff8f 	bl	800ed98 <_Z13HexStringFromi>
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	f107 0208 	add.w	r2, r7, #8
 800ee80:	4611      	mov	r1, r2
 800ee82:	4618      	mov	r0, r3
 800ee84:	f000 f87e 	bl	800ef84 <_Z26BracketsFormattedHexString12SimpleString>
 800ee88:	f107 0308 	add.w	r3, r7, #8
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f7ff fc32 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800ee92:	bf00      	nop
}
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	3710      	adds	r7, #16
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	bd80      	pop	{r7, pc}

0800ee9c <_Z30BracketsFormattedHexStringFromj>:

SimpleString BracketsFormattedHexStringFrom(unsigned int value)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b084      	sub	sp, #16
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
 800eea4:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800eea6:	f107 0308 	add.w	r3, r7, #8
 800eeaa:	6839      	ldr	r1, [r7, #0]
 800eeac:	4618      	mov	r0, r3
 800eeae:	f7ff ffc7 	bl	800ee40 <_Z13HexStringFromj>
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f107 0208 	add.w	r2, r7, #8
 800eeb8:	4611      	mov	r1, r2
 800eeba:	4618      	mov	r0, r3
 800eebc:	f000 f862 	bl	800ef84 <_Z26BracketsFormattedHexString12SimpleString>
 800eec0:	f107 0308 	add.w	r3, r7, #8
 800eec4:	4618      	mov	r0, r3
 800eec6:	f7ff fc16 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800eeca:	bf00      	nop
}
 800eecc:	6878      	ldr	r0, [r7, #4]
 800eece:	3710      	adds	r7, #16
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bd80      	pop	{r7, pc}

0800eed4 <_Z30BracketsFormattedHexStringFroml>:

SimpleString BracketsFormattedHexStringFrom(long value)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b084      	sub	sp, #16
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
 800eedc:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800eede:	f107 0308 	add.w	r3, r7, #8
 800eee2:	6839      	ldr	r1, [r7, #0]
 800eee4:	4618      	mov	r0, r3
 800eee6:	f7ff ff45 	bl	800ed74 <_Z13HexStringFroml>
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	f107 0208 	add.w	r2, r7, #8
 800eef0:	4611      	mov	r1, r2
 800eef2:	4618      	mov	r0, r3
 800eef4:	f000 f846 	bl	800ef84 <_Z26BracketsFormattedHexString12SimpleString>
 800eef8:	f107 0308 	add.w	r3, r7, #8
 800eefc:	4618      	mov	r0, r3
 800eefe:	f7ff fbfa 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800ef02:	bf00      	nop
}
 800ef04:	6878      	ldr	r0, [r7, #4]
 800ef06:	3710      	adds	r7, #16
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	bd80      	pop	{r7, pc}

0800ef0c <_Z30BracketsFormattedHexStringFromm>:


SimpleString BracketsFormattedHexStringFrom(unsigned long value)
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b084      	sub	sp, #16
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
 800ef14:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800ef16:	f107 0308 	add.w	r3, r7, #8
 800ef1a:	6839      	ldr	r1, [r7, #0]
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f7ff ff7d 	bl	800ee1c <_Z13HexStringFromm>
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	f107 0208 	add.w	r2, r7, #8
 800ef28:	4611      	mov	r1, r2
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f000 f82a 	bl	800ef84 <_Z26BracketsFormattedHexString12SimpleString>
 800ef30:	f107 0308 	add.w	r3, r7, #8
 800ef34:	4618      	mov	r0, r3
 800ef36:	f7ff fbde 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800ef3a:	bf00      	nop
}
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	3710      	adds	r7, #16
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bd80      	pop	{r7, pc}

0800ef44 <_Z30BracketsFormattedHexStringFroma>:

SimpleString BracketsFormattedHexStringFrom(signed char value)
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b084      	sub	sp, #16
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
 800ef4c:	460b      	mov	r3, r1
 800ef4e:	70fb      	strb	r3, [r7, #3]
    return BracketsFormattedHexString(HexStringFrom(value));
 800ef50:	f107 0308 	add.w	r3, r7, #8
 800ef54:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800ef58:	4611      	mov	r1, r2
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f7ff ff2e 	bl	800edbc <_Z13HexStringFroma>
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f107 0208 	add.w	r2, r7, #8
 800ef66:	4611      	mov	r1, r2
 800ef68:	4618      	mov	r0, r3
 800ef6a:	f000 f80b 	bl	800ef84 <_Z26BracketsFormattedHexString12SimpleString>
 800ef6e:	f107 0308 	add.w	r3, r7, #8
 800ef72:	4618      	mov	r0, r3
 800ef74:	f7ff fbbf 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800ef78:	bf00      	nop
}
 800ef7a:	6878      	ldr	r0, [r7, #4]
 800ef7c:	3710      	adds	r7, #16
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}
	...

0800ef84 <_Z26BracketsFormattedHexString12SimpleString>:

SimpleString BracketsFormattedHexString(SimpleString hexString)
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b088      	sub	sp, #32
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
 800ef8c:	6039      	str	r1, [r7, #0]
    return SimpleString("(0x") + hexString + ")" ;
 800ef8e:	f107 0310 	add.w	r3, r7, #16
 800ef92:	4917      	ldr	r1, [pc, #92]	; (800eff0 <_Z26BracketsFormattedHexString12SimpleString+0x6c>)
 800ef94:	4618      	mov	r0, r3
 800ef96:	f7fe fff6 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800ef9a:	f107 0308 	add.w	r3, r7, #8
 800ef9e:	f107 0110 	add.w	r1, r7, #16
 800efa2:	683a      	ldr	r2, [r7, #0]
 800efa4:	4618      	mov	r0, r3
 800efa6:	f7ff fc08 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 800efaa:	f107 0318 	add.w	r3, r7, #24
 800efae:	4911      	ldr	r1, [pc, #68]	; (800eff4 <_Z26BracketsFormattedHexString12SimpleString+0x70>)
 800efb0:	4618      	mov	r0, r3
 800efb2:	f7fe ffe8 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	f107 0218 	add.w	r2, r7, #24
 800efbc:	f107 0108 	add.w	r1, r7, #8
 800efc0:	4618      	mov	r0, r3
 800efc2:	f7ff fbfa 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 800efc6:	f107 0318 	add.w	r3, r7, #24
 800efca:	4618      	mov	r0, r3
 800efcc:	f7ff fb93 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800efd0:	f107 0308 	add.w	r3, r7, #8
 800efd4:	4618      	mov	r0, r3
 800efd6:	f7ff fb8e 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800efda:	f107 0310 	add.w	r3, r7, #16
 800efde:	4618      	mov	r0, r3
 800efe0:	f7ff fb89 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800efe4:	bf00      	nop
}
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	3720      	adds	r7, #32
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}
 800efee:	bf00      	nop
 800eff0:	08025e70 	.word	0x08025e70
 800eff4:	08025e74 	.word	0x08025e74

0800eff8 <_ZL25convertPointerToLongValuePKv>:
}

#else   /* CPPUTEST_USE_LONG_LONG */

static long convertPointerToLongValue(const void* value)
{
 800eff8:	b480      	push	{r7}
 800effa:	b085      	sub	sp, #20
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800f000:	1d3b      	adds	r3, r7, #4
 800f002:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	681b      	ldr	r3, [r3, #0]
}
 800f008:	4618      	mov	r0, r3
 800f00a:	3714      	adds	r7, #20
 800f00c:	46bd      	mov	sp, r7
 800f00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f012:	4770      	bx	lr

0800f014 <_ZL33convertFunctionPointerToLongValuePFvvE>:

static long convertFunctionPointerToLongValue(void (*value)())
{
 800f014:	b480      	push	{r7}
 800f016:	b085      	sub	sp, #20
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800f01c:	1d3b      	adds	r3, r7, #4
 800f01e:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	681b      	ldr	r3, [r3, #0]
}
 800f024:	4618      	mov	r0, r3
 800f026:	3714      	adds	r7, #20
 800f028:	46bd      	mov	sp, r7
 800f02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f02e:	4770      	bx	lr

0800f030 <_Z13HexStringFromPKv>:
{
    return "<ulonglong_unsupported>";
}

SimpleString HexStringFrom(const void* value)
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b082      	sub	sp, #8
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
 800f038:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertPointerToLongValue(value));
 800f03a:	6838      	ldr	r0, [r7, #0]
 800f03c:	f7ff ffdc 	bl	800eff8 <_ZL25convertPointerToLongValuePKv>
 800f040:	4602      	mov	r2, r0
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	4903      	ldr	r1, [pc, #12]	; (800f054 <_Z13HexStringFromPKv+0x24>)
 800f046:	4618      	mov	r0, r3
 800f048:	f000 f85c 	bl	800f104 <_Z16StringFromFormatPKcz>
}
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	3708      	adds	r7, #8
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}
 800f054:	08025e68 	.word	0x08025e68

0800f058 <_Z13HexStringFromPFvvE>:

SimpleString HexStringFrom(void (*value)())
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b082      	sub	sp, #8
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
 800f060:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertFunctionPointerToLongValue(value));
 800f062:	6838      	ldr	r0, [r7, #0]
 800f064:	f7ff ffd6 	bl	800f014 <_ZL33convertFunctionPointerToLongValuePFvvE>
 800f068:	4602      	mov	r2, r0
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	4903      	ldr	r1, [pc, #12]	; (800f07c <_Z13HexStringFromPFvvE+0x24>)
 800f06e:	4618      	mov	r0, r3
 800f070:	f000 f848 	bl	800f104 <_Z16StringFromFormatPKcz>
}
 800f074:	6878      	ldr	r0, [r7, #4]
 800f076:	3708      	adds	r7, #8
 800f078:	46bd      	mov	sp, r7
 800f07a:	bd80      	pop	{r7, pc}
 800f07c:	08025e68 	.word	0x08025e68

0800f080 <_Z10StringFromdi>:
}

#endif  /* CPPUTEST_USE_LONG_LONG */

SimpleString StringFrom(double value, int precision)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b086      	sub	sp, #24
 800f084:	af02      	add	r7, sp, #8
 800f086:	60f8      	str	r0, [r7, #12]
 800f088:	ed87 0b00 	vstr	d0, [r7]
 800f08c:	60b9      	str	r1, [r7, #8]
    if (PlatformSpecificIsNan(value))
 800f08e:	4b18      	ldr	r3, [pc, #96]	; (800f0f0 <_Z10StringFromdi+0x70>)
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	ed97 0b00 	vldr	d0, [r7]
 800f096:	4798      	blx	r3
 800f098:	4603      	mov	r3, r0
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	bf14      	ite	ne
 800f09e:	2301      	movne	r3, #1
 800f0a0:	2300      	moveq	r3, #0
 800f0a2:	b2db      	uxtb	r3, r3
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d004      	beq.n	800f0b2 <_Z10StringFromdi+0x32>
        return "Nan - Not a number";
 800f0a8:	4912      	ldr	r1, [pc, #72]	; (800f0f4 <_Z10StringFromdi+0x74>)
 800f0aa:	68f8      	ldr	r0, [r7, #12]
 800f0ac:	f7fe ff6b 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800f0b0:	e01a      	b.n	800f0e8 <_Z10StringFromdi+0x68>
    else if (PlatformSpecificIsInf(value))
 800f0b2:	4b11      	ldr	r3, [pc, #68]	; (800f0f8 <_Z10StringFromdi+0x78>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	ed97 0b00 	vldr	d0, [r7]
 800f0ba:	4798      	blx	r3
 800f0bc:	4603      	mov	r3, r0
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	bf14      	ite	ne
 800f0c2:	2301      	movne	r3, #1
 800f0c4:	2300      	moveq	r3, #0
 800f0c6:	b2db      	uxtb	r3, r3
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d004      	beq.n	800f0d6 <_Z10StringFromdi+0x56>
        return "Inf - Infinity";
 800f0cc:	490b      	ldr	r1, [pc, #44]	; (800f0fc <_Z10StringFromdi+0x7c>)
 800f0ce:	68f8      	ldr	r0, [r7, #12]
 800f0d0:	f7fe ff59 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800f0d4:	e008      	b.n	800f0e8 <_Z10StringFromdi+0x68>
    else
        return StringFromFormat("%.*g", precision, value);
 800f0d6:	68f8      	ldr	r0, [r7, #12]
 800f0d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f0dc:	e9cd 2300 	strd	r2, r3, [sp]
 800f0e0:	68ba      	ldr	r2, [r7, #8]
 800f0e2:	4907      	ldr	r1, [pc, #28]	; (800f100 <_Z10StringFromdi+0x80>)
 800f0e4:	f000 f80e 	bl	800f104 <_Z16StringFromFormatPKcz>
}
 800f0e8:	68f8      	ldr	r0, [r7, #12]
 800f0ea:	3710      	adds	r7, #16
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd80      	pop	{r7, pc}
 800f0f0:	200000e8 	.word	0x200000e8
 800f0f4:	08025ea8 	.word	0x08025ea8
 800f0f8:	200000ec 	.word	0x200000ec
 800f0fc:	08025ebc 	.word	0x08025ebc
 800f100:	08025ecc 	.word	0x08025ecc

0800f104 <_Z16StringFromFormatPKcz>:
{
    return SimpleString(value);
}

SimpleString StringFromFormat(const char* format, ...)
{
 800f104:	b40e      	push	{r1, r2, r3}
 800f106:	b580      	push	{r7, lr}
 800f108:	b087      	sub	sp, #28
 800f10a:	af00      	add	r7, sp, #0
 800f10c:	6078      	str	r0, [r7, #4]
    SimpleString resultString;
 800f10e:	4910      	ldr	r1, [pc, #64]	; (800f150 <_Z16StringFromFormatPKcz+0x4c>)
 800f110:	6878      	ldr	r0, [r7, #4]
 800f112:	f7fe ff38 	bl	800df86 <_ZN12SimpleStringC1EPKc>
    va_list arguments;
    va_start(arguments, format);
 800f116:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f11a:	60fb      	str	r3, [r7, #12]

    resultString = VStringFromFormat(format, arguments);
 800f11c:	f107 0310 	add.w	r3, r7, #16
 800f120:	68fa      	ldr	r2, [r7, #12]
 800f122:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f124:	4618      	mov	r0, r3
 800f126:	f000 f839 	bl	800f19c <_Z17VStringFromFormatPKcSt9__va_list>
 800f12a:	f107 0310 	add.w	r3, r7, #16
 800f12e:	4619      	mov	r1, r3
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	f7fe ff94 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 800f136:	f107 0310 	add.w	r3, r7, #16
 800f13a:	4618      	mov	r0, r3
 800f13c:	f7ff fadb 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    va_end(arguments);
    return resultString;
 800f140:	bf00      	nop
}
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	371c      	adds	r7, #28
 800f146:	46bd      	mov	sp, r7
 800f148:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f14c:	b003      	add	sp, #12
 800f14e:	4770      	bx	lr
 800f150:	08025e34 	.word	0x08025e34

0800f154 <_Z10StringFromj>:

SimpleString StringFrom(unsigned int i)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b082      	sub	sp, #8
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%u", i);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	683a      	ldr	r2, [r7, #0]
 800f162:	4904      	ldr	r1, [pc, #16]	; (800f174 <_Z10StringFromj+0x20>)
 800f164:	4618      	mov	r0, r3
 800f166:	f7ff ffcd 	bl	800f104 <_Z16StringFromFormatPKcz>
}
 800f16a:	6878      	ldr	r0, [r7, #4]
 800f16c:	3708      	adds	r7, #8
 800f16e:	46bd      	mov	sp, r7
 800f170:	bd80      	pop	{r7, pc}
 800f172:	bf00      	nop
 800f174:	08025ed8 	.word	0x08025ed8

0800f178 <_Z10StringFromm>:
}

#endif

SimpleString StringFrom(unsigned long i)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b082      	sub	sp, #8
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
 800f180:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lu", i);
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	683a      	ldr	r2, [r7, #0]
 800f186:	4904      	ldr	r1, [pc, #16]	; (800f198 <_Z10StringFromm+0x20>)
 800f188:	4618      	mov	r0, r3
 800f18a:	f7ff ffbb 	bl	800f104 <_Z16StringFromFormatPKcz>
}
 800f18e:	6878      	ldr	r0, [r7, #4]
 800f190:	3708      	adds	r7, #8
 800f192:	46bd      	mov	sp, r7
 800f194:	bd80      	pop	{r7, pc}
 800f196:	bf00      	nop
 800f198:	08025edc 	.word	0x08025edc

0800f19c <_Z17VStringFromFormatPKcSt9__va_list>:

SimpleString VStringFromFormat(const char* format, va_list args)
{
 800f19c:	b590      	push	{r4, r7, lr}
 800f19e:	b0a7      	sub	sp, #156	; 0x9c
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	60f8      	str	r0, [r7, #12]
 800f1a4:	60b9      	str	r1, [r7, #8]
 800f1a6:	607a      	str	r2, [r7, #4]
    va_list argsCopy;
    va_copy(argsCopy, args);
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	67bb      	str	r3, [r7, #120]	; 0x78
    enum
    {
        sizeOfdefaultBuffer = 100
    };
    char defaultBuffer[sizeOfdefaultBuffer];
    SimpleString resultString;
 800f1ac:	492e      	ldr	r1, [pc, #184]	; (800f268 <_Z17VStringFromFormatPKcSt9__va_list+0xcc>)
 800f1ae:	68f8      	ldr	r0, [r7, #12]
 800f1b0:	f7fe fee9 	bl	800df86 <_ZN12SimpleStringC1EPKc>

    size_t size = (size_t)PlatformSpecificVSNprintf(defaultBuffer, sizeOfdefaultBuffer, format, args);
 800f1b4:	4b2d      	ldr	r3, [pc, #180]	; (800f26c <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800f1b6:	681c      	ldr	r4, [r3, #0]
 800f1b8:	f107 0014 	add.w	r0, r7, #20
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	68ba      	ldr	r2, [r7, #8]
 800f1c0:	2164      	movs	r1, #100	; 0x64
 800f1c2:	47a0      	blx	r4
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (size < sizeOfdefaultBuffer) {
 800f1ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f1ce:	2b63      	cmp	r3, #99	; 0x63
 800f1d0:	d813      	bhi.n	800f1fa <_Z17VStringFromFormatPKcSt9__va_list+0x5e>
        resultString = SimpleString(defaultBuffer);
 800f1d2:	f107 0214 	add.w	r2, r7, #20
 800f1d6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800f1da:	4611      	mov	r1, r2
 800f1dc:	4618      	mov	r0, r3
 800f1de:	f7fe fed2 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800f1e2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800f1e6:	4619      	mov	r1, r3
 800f1e8:	68f8      	ldr	r0, [r7, #12]
 800f1ea:	f7fe ff38 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 800f1ee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f7ff fa7f 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
        resultString = SimpleString(newBuffer);

        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
    }
    va_end(argsCopy);
    return resultString;
 800f1f8:	e031      	b.n	800f25e <_Z17VStringFromFormatPKcSt9__va_list+0xc2>
        size_t newBufferSize = size + 1;
 800f1fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f1fe:	3301      	adds	r3, #1
 800f200:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        char* newBuffer = SimpleString::allocStringBuffer(newBufferSize, __FILE__, __LINE__);
 800f204:	f240 32c3 	movw	r2, #963	; 0x3c3
 800f208:	4919      	ldr	r1, [pc, #100]	; (800f270 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800f20a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800f20e:	f7fe fc3f 	bl	800da90 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800f212:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        PlatformSpecificVSNprintf(newBuffer, newBufferSize, format, argsCopy);
 800f216:	4b15      	ldr	r3, [pc, #84]	; (800f26c <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800f218:	681c      	ldr	r4, [r3, #0]
 800f21a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f21c:	68ba      	ldr	r2, [r7, #8]
 800f21e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f222:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800f226:	47a0      	blx	r4
        resultString = SimpleString(newBuffer);
 800f228:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800f22c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800f230:	4618      	mov	r0, r3
 800f232:	f7fe fea8 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800f236:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800f23a:	4619      	mov	r1, r3
 800f23c:	68f8      	ldr	r0, [r7, #12]
 800f23e:	f7fe ff0e 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 800f242:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800f246:	4618      	mov	r0, r3
 800f248:	f7ff fa55 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
 800f24c:	f240 33c7 	movw	r3, #967	; 0x3c7
 800f250:	4a07      	ldr	r2, [pc, #28]	; (800f270 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800f252:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f256:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800f25a:	f7fe fc2d 	bl	800dab8 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
    return resultString;
 800f25e:	bf00      	nop
}
 800f260:	68f8      	ldr	r0, [r7, #12]
 800f262:	379c      	adds	r7, #156	; 0x9c
 800f264:	46bd      	mov	sp, r7
 800f266:	bd90      	pop	{r4, r7, pc}
 800f268:	08025e34 	.word	0x08025e34
 800f26c:	200000b0 	.word	0x200000b0
 800f270:	08025d74 	.word	0x08025d74

0800f274 <_Z16StringFromBinaryPKhj>:

SimpleString StringFromBinary(const unsigned char* value, size_t size)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b08a      	sub	sp, #40	; 0x28
 800f278:	af00      	add	r7, sp, #0
 800f27a:	60f8      	str	r0, [r7, #12]
 800f27c:	60b9      	str	r1, [r7, #8]
 800f27e:	607a      	str	r2, [r7, #4]
    SimpleString result;
 800f280:	491f      	ldr	r1, [pc, #124]	; (800f300 <_Z16StringFromBinaryPKhj+0x8c>)
 800f282:	68f8      	ldr	r0, [r7, #12]
 800f284:	f7fe fe7f 	bl	800df86 <_ZN12SimpleStringC1EPKc>

    for (size_t i = 0; i < size; i++) {
 800f288:	2300      	movs	r3, #0
 800f28a:	627b      	str	r3, [r7, #36]	; 0x24
 800f28c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	429a      	cmp	r2, r3
 800f292:	d219      	bcs.n	800f2c8 <_Z16StringFromBinaryPKhj+0x54>
        result += StringFromFormat("%02X ", value[i]);
 800f294:	68ba      	ldr	r2, [r7, #8]
 800f296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f298:	4413      	add	r3, r2
 800f29a:	781b      	ldrb	r3, [r3, #0]
 800f29c:	461a      	mov	r2, r3
 800f29e:	f107 0314 	add.w	r3, r7, #20
 800f2a2:	4918      	ldr	r1, [pc, #96]	; (800f304 <_Z16StringFromBinaryPKhj+0x90>)
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	f7ff ff2d 	bl	800f104 <_Z16StringFromFormatPKcz>
 800f2aa:	f107 0314 	add.w	r3, r7, #20
 800f2ae:	4619      	mov	r1, r3
 800f2b0:	68f8      	ldr	r0, [r7, #12]
 800f2b2:	f7ff fa9d 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 800f2b6:	f107 0314 	add.w	r3, r7, #20
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f7ff fa1b 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < size; i++) {
 800f2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c2:	3301      	adds	r3, #1
 800f2c4:	627b      	str	r3, [r7, #36]	; 0x24
 800f2c6:	e7e1      	b.n	800f28c <_Z16StringFromBinaryPKhj+0x18>
    }
    result = result.subString(0, result.size() - 1);
 800f2c8:	68f8      	ldr	r0, [r7, #12]
 800f2ca:	f7ff f9f3 	bl	800e6b4 <_ZNK12SimpleString4sizeEv>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	3b01      	subs	r3, #1
 800f2d2:	f107 001c 	add.w	r0, r7, #28
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	68f9      	ldr	r1, [r7, #12]
 800f2da:	f7ff fb15 	bl	800e908 <_ZNK12SimpleString9subStringEjj>
 800f2de:	f107 031c 	add.w	r3, r7, #28
 800f2e2:	4619      	mov	r1, r3
 800f2e4:	68f8      	ldr	r0, [r7, #12]
 800f2e6:	f7fe feba 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 800f2ea:	f107 031c 	add.w	r3, r7, #28
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	f7ff fa01 	bl	800e6f6 <_ZN12SimpleStringD1Ev>

    return result;
 800f2f4:	bf00      	nop
}
 800f2f6:	68f8      	ldr	r0, [r7, #12]
 800f2f8:	3728      	adds	r7, #40	; 0x28
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd80      	pop	{r7, pc}
 800f2fe:	bf00      	nop
 800f300:	08025e34 	.word	0x08025e34
 800f304:	08025ee0 	.word	0x08025ee0

0800f308 <_Z22StringFromBinaryOrNullPKhj>:

SimpleString StringFromBinaryOrNull(const unsigned char* value, size_t size)
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b084      	sub	sp, #16
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	60f8      	str	r0, [r7, #12]
 800f310:	60b9      	str	r1, [r7, #8]
 800f312:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinary(value, size) : StringFrom("(null)");
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d006      	beq.n	800f328 <_Z22StringFromBinaryOrNullPKhj+0x20>
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	687a      	ldr	r2, [r7, #4]
 800f31e:	68b9      	ldr	r1, [r7, #8]
 800f320:	4618      	mov	r0, r3
 800f322:	f7ff ffa7 	bl	800f274 <_Z16StringFromBinaryPKhj>
 800f326:	e004      	b.n	800f332 <_Z22StringFromBinaryOrNullPKhj+0x2a>
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	4904      	ldr	r1, [pc, #16]	; (800f33c <_Z22StringFromBinaryOrNullPKhj+0x34>)
 800f32c:	4618      	mov	r0, r3
 800f32e:	f7ff fc6f 	bl	800ec10 <_Z10StringFromPKc>
}
 800f332:	68f8      	ldr	r0, [r7, #12]
 800f334:	3710      	adds	r7, #16
 800f336:	46bd      	mov	sp, r7
 800f338:	bd80      	pop	{r7, pc}
 800f33a:	bf00      	nop
 800f33c:	08025e54 	.word	0x08025e54

0800f340 <_Z24StringFromBinaryWithSizePKhj>:

SimpleString StringFromBinaryWithSize(const unsigned char* value, size_t size)
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b088      	sub	sp, #32
 800f344:	af00      	add	r7, sp, #0
 800f346:	60f8      	str	r0, [r7, #12]
 800f348:	60b9      	str	r1, [r7, #8]
 800f34a:	607a      	str	r2, [r7, #4]
    SimpleString result = StringFromFormat("Size = %u | HexContents = ", (unsigned) size);
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	687a      	ldr	r2, [r7, #4]
 800f350:	4913      	ldr	r1, [pc, #76]	; (800f3a0 <_Z24StringFromBinaryWithSizePKhj+0x60>)
 800f352:	4618      	mov	r0, r3
 800f354:	f7ff fed6 	bl	800f104 <_Z16StringFromFormatPKcz>
    size_t displayedSize = ((size > 128) ? 128 : size);
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2b80      	cmp	r3, #128	; 0x80
 800f35c:	bf28      	it	cs
 800f35e:	2380      	movcs	r3, #128	; 0x80
 800f360:	61fb      	str	r3, [r7, #28]
    result += StringFromBinaryOrNull(value, displayedSize);
 800f362:	f107 0314 	add.w	r3, r7, #20
 800f366:	69fa      	ldr	r2, [r7, #28]
 800f368:	68b9      	ldr	r1, [r7, #8]
 800f36a:	4618      	mov	r0, r3
 800f36c:	f7ff ffcc 	bl	800f308 <_Z22StringFromBinaryOrNullPKhj>
 800f370:	f107 0314 	add.w	r3, r7, #20
 800f374:	4619      	mov	r1, r3
 800f376:	68f8      	ldr	r0, [r7, #12]
 800f378:	f7ff fa3a 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 800f37c:	f107 0314 	add.w	r3, r7, #20
 800f380:	4618      	mov	r0, r3
 800f382:	f7ff f9b8 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    if (size > displayedSize)
 800f386:	687a      	ldr	r2, [r7, #4]
 800f388:	69fb      	ldr	r3, [r7, #28]
 800f38a:	429a      	cmp	r2, r3
 800f38c:	d903      	bls.n	800f396 <_Z24StringFromBinaryWithSizePKhj+0x56>
    {
        result += " ...";
 800f38e:	4905      	ldr	r1, [pc, #20]	; (800f3a4 <_Z24StringFromBinaryWithSizePKhj+0x64>)
 800f390:	68f8      	ldr	r0, [r7, #12]
 800f392:	f7ff fa3f 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    }
    return result;
 800f396:	bf00      	nop
}
 800f398:	68f8      	ldr	r0, [r7, #12]
 800f39a:	3720      	adds	r7, #32
 800f39c:	46bd      	mov	sp, r7
 800f39e:	bd80      	pop	{r7, pc}
 800f3a0:	08025ee8 	.word	0x08025ee8
 800f3a4:	08025f04 	.word	0x08025f04

0800f3a8 <_Z30StringFromBinaryWithSizeOrNullPKhj>:

SimpleString StringFromBinaryWithSizeOrNull(const unsigned char* value, size_t size)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b084      	sub	sp, #16
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	60f8      	str	r0, [r7, #12]
 800f3b0:	60b9      	str	r1, [r7, #8]
 800f3b2:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinaryWithSize(value, size) : StringFrom("(null)");
 800f3b4:	68bb      	ldr	r3, [r7, #8]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d006      	beq.n	800f3c8 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x20>
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	687a      	ldr	r2, [r7, #4]
 800f3be:	68b9      	ldr	r1, [r7, #8]
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f7ff ffbd 	bl	800f340 <_Z24StringFromBinaryWithSizePKhj>
 800f3c6:	e004      	b.n	800f3d2 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x2a>
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	4904      	ldr	r1, [pc, #16]	; (800f3dc <_Z30StringFromBinaryWithSizeOrNullPKhj+0x34>)
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	f7ff fc1f 	bl	800ec10 <_Z10StringFromPKc>
}
 800f3d2:	68f8      	ldr	r0, [r7, #12]
 800f3d4:	3710      	adds	r7, #16
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd80      	pop	{r7, pc}
 800f3da:	bf00      	nop
 800f3dc:	08025e54 	.word	0x08025e54

0800f3e0 <_Z20StringFromMaskedBitsmmj>:

SimpleString StringFromMaskedBits(unsigned long value, unsigned long mask, size_t byteCount)
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b088      	sub	sp, #32
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	60f8      	str	r0, [r7, #12]
 800f3e8:	60b9      	str	r1, [r7, #8]
 800f3ea:	607a      	str	r2, [r7, #4]
 800f3ec:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800f3ee:	4925      	ldr	r1, [pc, #148]	; (800f484 <_Z20StringFromMaskedBitsmmj+0xa4>)
 800f3f0:	68f8      	ldr	r0, [r7, #12]
 800f3f2:	f7fe fdc8 	bl	800df86 <_ZN12SimpleStringC1EPKc>
    size_t bitCount = (byteCount > sizeof(unsigned long)) ? (sizeof(unsigned long) * CPPUTEST_CHAR_BIT) : (byteCount * CPPUTEST_CHAR_BIT);
 800f3f6:	683b      	ldr	r3, [r7, #0]
 800f3f8:	2b04      	cmp	r3, #4
 800f3fa:	d802      	bhi.n	800f402 <_Z20StringFromMaskedBitsmmj+0x22>
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	00db      	lsls	r3, r3, #3
 800f400:	e000      	b.n	800f404 <_Z20StringFromMaskedBitsmmj+0x24>
 800f402:	2320      	movs	r3, #32
 800f404:	61bb      	str	r3, [r7, #24]
    const unsigned long msbMask = (((unsigned long) 1) << (bitCount - 1));
 800f406:	69bb      	ldr	r3, [r7, #24]
 800f408:	3b01      	subs	r3, #1
 800f40a:	2201      	movs	r2, #1
 800f40c:	fa02 f303 	lsl.w	r3, r2, r3
 800f410:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < bitCount; i++) {
 800f412:	2300      	movs	r3, #0
 800f414:	61fb      	str	r3, [r7, #28]
 800f416:	69fa      	ldr	r2, [r7, #28]
 800f418:	69bb      	ldr	r3, [r7, #24]
 800f41a:	429a      	cmp	r2, r3
 800f41c:	d22d      	bcs.n	800f47a <_Z20StringFromMaskedBitsmmj+0x9a>
        if (mask & msbMask) {
 800f41e:	687a      	ldr	r2, [r7, #4]
 800f420:	697b      	ldr	r3, [r7, #20]
 800f422:	4013      	ands	r3, r2
 800f424:	2b00      	cmp	r3, #0
 800f426:	d00c      	beq.n	800f442 <_Z20StringFromMaskedBitsmmj+0x62>
            result += (value & msbMask) ? "1" : "0";
 800f428:	68ba      	ldr	r2, [r7, #8]
 800f42a:	697b      	ldr	r3, [r7, #20]
 800f42c:	4013      	ands	r3, r2
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d001      	beq.n	800f436 <_Z20StringFromMaskedBitsmmj+0x56>
 800f432:	4b15      	ldr	r3, [pc, #84]	; (800f488 <_Z20StringFromMaskedBitsmmj+0xa8>)
 800f434:	e000      	b.n	800f438 <_Z20StringFromMaskedBitsmmj+0x58>
 800f436:	4b15      	ldr	r3, [pc, #84]	; (800f48c <_Z20StringFromMaskedBitsmmj+0xac>)
 800f438:	4619      	mov	r1, r3
 800f43a:	68f8      	ldr	r0, [r7, #12]
 800f43c:	f7ff f9ea 	bl	800e814 <_ZN12SimpleStringpLEPKc>
 800f440:	e003      	b.n	800f44a <_Z20StringFromMaskedBitsmmj+0x6a>
        }
        else {
            result += "x";
 800f442:	4913      	ldr	r1, [pc, #76]	; (800f490 <_Z20StringFromMaskedBitsmmj+0xb0>)
 800f444:	68f8      	ldr	r0, [r7, #12]
 800f446:	f7ff f9e5 	bl	800e814 <_ZN12SimpleStringpLEPKc>
        }

        if (((i % 8) == 7) && (i != (bitCount - 1))) {
 800f44a:	69fb      	ldr	r3, [r7, #28]
 800f44c:	f003 0307 	and.w	r3, r3, #7
 800f450:	2b07      	cmp	r3, #7
 800f452:	d108      	bne.n	800f466 <_Z20StringFromMaskedBitsmmj+0x86>
 800f454:	69bb      	ldr	r3, [r7, #24]
 800f456:	3b01      	subs	r3, #1
 800f458:	69fa      	ldr	r2, [r7, #28]
 800f45a:	429a      	cmp	r2, r3
 800f45c:	d003      	beq.n	800f466 <_Z20StringFromMaskedBitsmmj+0x86>
            result += " ";
 800f45e:	490d      	ldr	r1, [pc, #52]	; (800f494 <_Z20StringFromMaskedBitsmmj+0xb4>)
 800f460:	68f8      	ldr	r0, [r7, #12]
 800f462:	f7ff f9d7 	bl	800e814 <_ZN12SimpleStringpLEPKc>
        }

        value <<= 1;
 800f466:	68bb      	ldr	r3, [r7, #8]
 800f468:	005b      	lsls	r3, r3, #1
 800f46a:	60bb      	str	r3, [r7, #8]
        mask <<= 1;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	005b      	lsls	r3, r3, #1
 800f470:	607b      	str	r3, [r7, #4]
    for (size_t i = 0; i < bitCount; i++) {
 800f472:	69fb      	ldr	r3, [r7, #28]
 800f474:	3301      	adds	r3, #1
 800f476:	61fb      	str	r3, [r7, #28]
 800f478:	e7cd      	b.n	800f416 <_Z20StringFromMaskedBitsmmj+0x36>
    }

    return result;
 800f47a:	bf00      	nop
}
 800f47c:	68f8      	ldr	r0, [r7, #12]
 800f47e:	3720      	adds	r7, #32
 800f480:	46bd      	mov	sp, r7
 800f482:	bd80      	pop	{r7, pc}
 800f484:	08025e34 	.word	0x08025e34
 800f488:	08025f0c 	.word	0x08025f0c
 800f48c:	08025f10 	.word	0x08025f10
 800f490:	08025f14 	.word	0x08025f14
 800f494:	08025f18 	.word	0x08025f18

0800f498 <_Z23StringFromOrdinalNumberj>:

SimpleString StringFromOrdinalNumber(unsigned int number)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b084      	sub	sp, #16
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	6039      	str	r1, [r7, #0]
    unsigned int onesDigit = number % 10;
 800f4a2:	683a      	ldr	r2, [r7, #0]
 800f4a4:	4b18      	ldr	r3, [pc, #96]	; (800f508 <_Z23StringFromOrdinalNumberj+0x70>)
 800f4a6:	fba3 1302 	umull	r1, r3, r3, r2
 800f4aa:	08d9      	lsrs	r1, r3, #3
 800f4ac:	460b      	mov	r3, r1
 800f4ae:	009b      	lsls	r3, r3, #2
 800f4b0:	440b      	add	r3, r1
 800f4b2:	005b      	lsls	r3, r3, #1
 800f4b4:	1ad3      	subs	r3, r2, r3
 800f4b6:	60bb      	str	r3, [r7, #8]

    const char* suffix;
    if (number >= 11 && number <= 13) {
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	2b0a      	cmp	r3, #10
 800f4bc:	d905      	bls.n	800f4ca <_Z23StringFromOrdinalNumberj+0x32>
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	2b0d      	cmp	r3, #13
 800f4c2:	d802      	bhi.n	800f4ca <_Z23StringFromOrdinalNumberj+0x32>
        suffix = "th";
 800f4c4:	4b11      	ldr	r3, [pc, #68]	; (800f50c <_Z23StringFromOrdinalNumberj+0x74>)
 800f4c6:	60fb      	str	r3, [r7, #12]
 800f4c8:	e013      	b.n	800f4f2 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (3 == onesDigit) {
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	2b03      	cmp	r3, #3
 800f4ce:	d102      	bne.n	800f4d6 <_Z23StringFromOrdinalNumberj+0x3e>
        suffix = "rd";
 800f4d0:	4b0f      	ldr	r3, [pc, #60]	; (800f510 <_Z23StringFromOrdinalNumberj+0x78>)
 800f4d2:	60fb      	str	r3, [r7, #12]
 800f4d4:	e00d      	b.n	800f4f2 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (2 == onesDigit) {
 800f4d6:	68bb      	ldr	r3, [r7, #8]
 800f4d8:	2b02      	cmp	r3, #2
 800f4da:	d102      	bne.n	800f4e2 <_Z23StringFromOrdinalNumberj+0x4a>
        suffix = "nd";
 800f4dc:	4b0d      	ldr	r3, [pc, #52]	; (800f514 <_Z23StringFromOrdinalNumberj+0x7c>)
 800f4de:	60fb      	str	r3, [r7, #12]
 800f4e0:	e007      	b.n	800f4f2 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (1 == onesDigit) {
 800f4e2:	68bb      	ldr	r3, [r7, #8]
 800f4e4:	2b01      	cmp	r3, #1
 800f4e6:	d102      	bne.n	800f4ee <_Z23StringFromOrdinalNumberj+0x56>
        suffix = "st";
 800f4e8:	4b0b      	ldr	r3, [pc, #44]	; (800f518 <_Z23StringFromOrdinalNumberj+0x80>)
 800f4ea:	60fb      	str	r3, [r7, #12]
 800f4ec:	e001      	b.n	800f4f2 <_Z23StringFromOrdinalNumberj+0x5a>
    } else {
        suffix = "th";
 800f4ee:	4b07      	ldr	r3, [pc, #28]	; (800f50c <_Z23StringFromOrdinalNumberj+0x74>)
 800f4f0:	60fb      	str	r3, [r7, #12]
    }

    return StringFromFormat("%u%s", number, suffix);
 800f4f2:	6878      	ldr	r0, [r7, #4]
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	683a      	ldr	r2, [r7, #0]
 800f4f8:	4908      	ldr	r1, [pc, #32]	; (800f51c <_Z23StringFromOrdinalNumberj+0x84>)
 800f4fa:	f7ff fe03 	bl	800f104 <_Z16StringFromFormatPKcz>
}
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	3710      	adds	r7, #16
 800f502:	46bd      	mov	sp, r7
 800f504:	bd80      	pop	{r7, pc}
 800f506:	bf00      	nop
 800f508:	cccccccd 	.word	0xcccccccd
 800f50c:	08025f1c 	.word	0x08025f1c
 800f510:	08025f20 	.word	0x08025f20
 800f514:	08025f24 	.word	0x08025f24
 800f518:	08025f28 	.word	0x08025f28
 800f51c:	08025f2c 	.word	0x08025f2c

0800f520 <_ZN22SimpleStringCollectionC1Ev>:

SimpleStringCollection::SimpleStringCollection()
 800f520:	b580      	push	{r7, lr}
 800f522:	b082      	sub	sp, #8
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	3304      	adds	r3, #4
 800f52c:	4907      	ldr	r1, [pc, #28]	; (800f54c <_ZN22SimpleStringCollectionC1Ev+0x2c>)
 800f52e:	4618      	mov	r0, r3
 800f530:	f7fe fd29 	bl	800df86 <_ZN12SimpleStringC1EPKc>
{
    collection_ = NULLPTR;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2200      	movs	r2, #0
 800f538:	601a      	str	r2, [r3, #0]
    size_ = 0;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	2200      	movs	r2, #0
 800f53e:	60da      	str	r2, [r3, #12]
}
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	4618      	mov	r0, r3
 800f544:	3708      	adds	r7, #8
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}
 800f54a:	bf00      	nop
 800f54c:	08025e34 	.word	0x08025e34

0800f550 <_ZN22SimpleStringCollection8allocateEj>:

void SimpleStringCollection::allocate(size_t _size)
{
 800f550:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f552:	b083      	sub	sp, #12
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
 800f558:	6039      	str	r1, [r7, #0]
    delete[] collection_;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d01e      	beq.n	800f5a0 <_ZN22SimpleStringCollection8allocateEj+0x50>
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681a      	ldr	r2, [r3, #0]
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	3b04      	subs	r3, #4
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	00db      	lsls	r3, r3, #3
 800f570:	18d4      	adds	r4, r2, r3
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	429c      	cmp	r4, r3
 800f578:	d004      	beq.n	800f584 <_ZN22SimpleStringCollection8allocateEj+0x34>
 800f57a:	3c08      	subs	r4, #8
 800f57c:	4620      	mov	r0, r4
 800f57e:	f7ff f8ba 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800f582:	e7f6      	b.n	800f572 <_ZN22SimpleStringCollection8allocateEj+0x22>
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	f1a3 0208 	sub.w	r2, r3, #8
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	3b04      	subs	r3, #4
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	3301      	adds	r3, #1
 800f596:	00db      	lsls	r3, r3, #3
 800f598:	4619      	mov	r1, r3
 800f59a:	4610      	mov	r0, r2
 800f59c:	f7fc f976 	bl	800b88c <_ZdaPvj>

    size_ = _size;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	683a      	ldr	r2, [r7, #0]
 800f5a4:	60da      	str	r2, [r3, #12]
    collection_ = new SimpleString[size_];
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	68dc      	ldr	r4, [r3, #12]
 800f5aa:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 800f5ae:	d202      	bcs.n	800f5b6 <_ZN22SimpleStringCollection8allocateEj+0x66>
 800f5b0:	1c63      	adds	r3, r4, #1
 800f5b2:	00db      	lsls	r3, r3, #3
 800f5b4:	e001      	b.n	800f5ba <_ZN22SimpleStringCollection8allocateEj+0x6a>
 800f5b6:	f04f 33ff 	mov.w	r3, #4294967295
 800f5ba:	f240 4227 	movw	r2, #1063	; 0x427
 800f5be:	4910      	ldr	r1, [pc, #64]	; (800f600 <_ZN22SimpleStringCollection8allocateEj+0xb0>)
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	f7fc f941 	bl	800b848 <_ZnajPKci>
 800f5c6:	4605      	mov	r5, r0
 800f5c8:	1d2b      	adds	r3, r5, #4
 800f5ca:	3b04      	subs	r3, #4
 800f5cc:	2208      	movs	r2, #8
 800f5ce:	601a      	str	r2, [r3, #0]
 800f5d0:	1d2b      	adds	r3, r5, #4
 800f5d2:	601c      	str	r4, [r3, #0]
 800f5d4:	f105 0308 	add.w	r3, r5, #8
 800f5d8:	1e62      	subs	r2, r4, #1
 800f5da:	4614      	mov	r4, r2
 800f5dc:	461e      	mov	r6, r3
 800f5de:	2c00      	cmp	r4, #0
 800f5e0:	db06      	blt.n	800f5f0 <_ZN22SimpleStringCollection8allocateEj+0xa0>
 800f5e2:	4908      	ldr	r1, [pc, #32]	; (800f604 <_ZN22SimpleStringCollection8allocateEj+0xb4>)
 800f5e4:	4630      	mov	r0, r6
 800f5e6:	f7fe fcce 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800f5ea:	3608      	adds	r6, #8
 800f5ec:	3c01      	subs	r4, #1
 800f5ee:	e7f6      	b.n	800f5de <_ZN22SimpleStringCollection8allocateEj+0x8e>
 800f5f0:	f105 0208 	add.w	r2, r5, #8
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	601a      	str	r2, [r3, #0]
}
 800f5f8:	bf00      	nop
 800f5fa:	370c      	adds	r7, #12
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f600:	08025d74 	.word	0x08025d74
 800f604:	08025e34 	.word	0x08025e34

0800f608 <_ZN22SimpleStringCollectionD1Ev>:

SimpleStringCollection::~SimpleStringCollection()
 800f608:	b590      	push	{r4, r7, lr}
 800f60a:	b083      	sub	sp, #12
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
{
    delete[] (collection_);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d01e      	beq.n	800f656 <_ZN22SimpleStringCollectionD1Ev+0x4e>
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681a      	ldr	r2, [r3, #0]
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	3b04      	subs	r3, #4
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	00db      	lsls	r3, r3, #3
 800f626:	18d4      	adds	r4, r2, r3
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	429c      	cmp	r4, r3
 800f62e:	d004      	beq.n	800f63a <_ZN22SimpleStringCollectionD1Ev+0x32>
 800f630:	3c08      	subs	r4, #8
 800f632:	4620      	mov	r0, r4
 800f634:	f7ff f85f 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800f638:	e7f6      	b.n	800f628 <_ZN22SimpleStringCollectionD1Ev+0x20>
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	f1a3 0208 	sub.w	r2, r3, #8
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	3b04      	subs	r3, #4
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	3301      	adds	r3, #1
 800f64c:	00db      	lsls	r3, r3, #3
 800f64e:	4619      	mov	r1, r3
 800f650:	4610      	mov	r0, r2
 800f652:	f7fc f91b 	bl	800b88c <_ZdaPvj>
SimpleStringCollection::~SimpleStringCollection()
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	3304      	adds	r3, #4
 800f65a:	4618      	mov	r0, r3
 800f65c:	f7ff f84b 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	4618      	mov	r0, r3
 800f664:	370c      	adds	r7, #12
 800f666:	46bd      	mov	sp, r7
 800f668:	bd90      	pop	{r4, r7, pc}

0800f66a <_ZNK22SimpleStringCollection4sizeEv>:

size_t SimpleStringCollection::size() const
{
 800f66a:	b480      	push	{r7}
 800f66c:	b083      	sub	sp, #12
 800f66e:	af00      	add	r7, sp, #0
 800f670:	6078      	str	r0, [r7, #4]
    return size_;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	68db      	ldr	r3, [r3, #12]
}
 800f676:	4618      	mov	r0, r3
 800f678:	370c      	adds	r7, #12
 800f67a:	46bd      	mov	sp, r7
 800f67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f680:	4770      	bx	lr
	...

0800f684 <_ZN22SimpleStringCollectionixEj>:

SimpleString& SimpleStringCollection::operator[](size_t index)
{
 800f684:	b590      	push	{r4, r7, lr}
 800f686:	b085      	sub	sp, #20
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
 800f68c:	6039      	str	r1, [r7, #0]
    if (index >= size_) {
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	68db      	ldr	r3, [r3, #12]
 800f692:	683a      	ldr	r2, [r7, #0]
 800f694:	429a      	cmp	r2, r3
 800f696:	d315      	bcc.n	800f6c4 <_ZN22SimpleStringCollectionixEj+0x40>
        empty_ = "";
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	1d1c      	adds	r4, r3, #4
 800f69c:	f107 0308 	add.w	r3, r7, #8
 800f6a0:	490d      	ldr	r1, [pc, #52]	; (800f6d8 <_ZN22SimpleStringCollectionixEj+0x54>)
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f7fe fc6f 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800f6a8:	f107 0308 	add.w	r3, r7, #8
 800f6ac:	4619      	mov	r1, r3
 800f6ae:	4620      	mov	r0, r4
 800f6b0:	f7fe fcd5 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 800f6b4:	f107 0308 	add.w	r3, r7, #8
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f7ff f81c 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
        return empty_;
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	3304      	adds	r3, #4
 800f6c2:	e004      	b.n	800f6ce <_ZN22SimpleStringCollectionixEj+0x4a>
    }

    return collection_[index];
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681a      	ldr	r2, [r3, #0]
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	00db      	lsls	r3, r3, #3
 800f6cc:	4413      	add	r3, r2
}
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	3714      	adds	r7, #20
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bd90      	pop	{r4, r7, pc}
 800f6d6:	bf00      	nop
 800f6d8:	08025e34 	.word	0x08025e34

0800f6dc <_ZN18TeamCityTestOutputC1Ev>:
#include "CppUTest/TestHarness.h"
#include "CppUTest/TeamCityTestOutput.h"

TeamCityTestOutput::TeamCityTestOutput() : currtest_(NULLPTR), currGroup_()
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b082      	sub	sp, #8
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	f7fa fb88 	bl	8009dfc <_ZN17ConsoleTestOutputC1Ev>
 800f6ec:	4a08      	ldr	r2, [pc, #32]	; (800f710 <_ZN18TeamCityTestOutputC1Ev+0x34>)
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	601a      	str	r2, [r3, #0]
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	611a      	str	r2, [r3, #16]
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	3314      	adds	r3, #20
 800f6fc:	4905      	ldr	r1, [pc, #20]	; (800f714 <_ZN18TeamCityTestOutputC1Ev+0x38>)
 800f6fe:	4618      	mov	r0, r3
 800f700:	f7fe fc41 	bl	800df86 <_ZN12SimpleStringC1EPKc>
{
}
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	4618      	mov	r0, r3
 800f708:	3708      	adds	r7, #8
 800f70a:	46bd      	mov	sp, r7
 800f70c:	bd80      	pop	{r7, pc}
 800f70e:	bf00      	nop
 800f710:	08029f38 	.word	0x08029f38
 800f714:	08025f34 	.word	0x08025f34

0800f718 <_ZN18TeamCityTestOutputD1Ev>:

TeamCityTestOutput::~TeamCityTestOutput()
 800f718:	b580      	push	{r7, lr}
 800f71a:	b082      	sub	sp, #8
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
 800f720:	4a08      	ldr	r2, [pc, #32]	; (800f744 <_ZN18TeamCityTestOutputD1Ev+0x2c>)
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	601a      	str	r2, [r3, #0]
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	3314      	adds	r3, #20
 800f72a:	4618      	mov	r0, r3
 800f72c:	f7fe ffe3 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	4618      	mov	r0, r3
 800f734:	f7fa fb74 	bl	8009e20 <_ZN17ConsoleTestOutputD1Ev>
{
}
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	4618      	mov	r0, r3
 800f73c:	3708      	adds	r7, #8
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd80      	pop	{r7, pc}
 800f742:	bf00      	nop
 800f744:	08029f38 	.word	0x08029f38

0800f748 <_ZN18TeamCityTestOutputD0Ev>:
TeamCityTestOutput::~TeamCityTestOutput()
 800f748:	b580      	push	{r7, lr}
 800f74a:	b082      	sub	sp, #8
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
}
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	f7ff ffe1 	bl	800f718 <_ZN18TeamCityTestOutputD1Ev>
 800f756:	211c      	movs	r1, #28
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	f7fc f865 	bl	800b828 <_ZdlPvj>
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	4618      	mov	r0, r3
 800f762:	3708      	adds	r7, #8
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}

0800f768 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b086      	sub	sp, #24
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
 800f770:	6039      	str	r1, [r7, #0]
    print("##teamcity[testStarted name='");
 800f772:	687a      	ldr	r2, [r7, #4]
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	332c      	adds	r3, #44	; 0x2c
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	492b      	ldr	r1, [pc, #172]	; (800f82c <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc4>)
 800f77e:	4610      	mov	r0, r2
 800f780:	4798      	blx	r3
    printEscaped(test.getName().asCharString());
 800f782:	f107 0308 	add.w	r3, r7, #8
 800f786:	6839      	ldr	r1, [r7, #0]
 800f788:	4618      	mov	r0, r3
 800f78a:	f004 fdf7 	bl	801437c <_ZNK10UtestShell7getNameEv>
 800f78e:	f107 0308 	add.w	r3, r7, #8
 800f792:	4618      	mov	r0, r3
 800f794:	f7fe ff82 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 800f798:	4603      	mov	r3, r0
 800f79a:	4619      	mov	r1, r3
 800f79c:	6878      	ldr	r0, [r7, #4]
 800f79e:	f000 f919 	bl	800f9d4 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800f7a2:	f107 0308 	add.w	r3, r7, #8
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	f7fe ffa5 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    print("']\n");
 800f7ac:	687a      	ldr	r2, [r7, #4]
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	332c      	adds	r3, #44	; 0x2c
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	491e      	ldr	r1, [pc, #120]	; (800f830 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800f7b8:	4610      	mov	r0, r2
 800f7ba:	4798      	blx	r3
    if (!test.willRun()) {
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	3318      	adds	r3, #24
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	6838      	ldr	r0, [r7, #0]
 800f7c6:	4798      	blx	r3
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	f083 0301 	eor.w	r3, r3, #1
 800f7ce:	b2db      	uxtb	r3, r3
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d024      	beq.n	800f81e <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xb6>
        print("##teamcity[testIgnored name='");
 800f7d4:	687a      	ldr	r2, [r7, #4]
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	332c      	adds	r3, #44	; 0x2c
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	4915      	ldr	r1, [pc, #84]	; (800f834 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xcc>)
 800f7e0:	4610      	mov	r0, r2
 800f7e2:	4798      	blx	r3
        printEscaped(test.getName().asCharString());
 800f7e4:	f107 0310 	add.w	r3, r7, #16
 800f7e8:	6839      	ldr	r1, [r7, #0]
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	f004 fdc6 	bl	801437c <_ZNK10UtestShell7getNameEv>
 800f7f0:	f107 0310 	add.w	r3, r7, #16
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	f7fe ff51 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	4619      	mov	r1, r3
 800f7fe:	6878      	ldr	r0, [r7, #4]
 800f800:	f000 f8e8 	bl	800f9d4 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800f804:	f107 0310 	add.w	r3, r7, #16
 800f808:	4618      	mov	r0, r3
 800f80a:	f7fe ff74 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
        print("']\n");
 800f80e:	687a      	ldr	r2, [r7, #4]
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	332c      	adds	r3, #44	; 0x2c
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	4905      	ldr	r1, [pc, #20]	; (800f830 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800f81a:	4610      	mov	r0, r2
 800f81c:	4798      	blx	r3
    }
    currtest_ = &test;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	683a      	ldr	r2, [r7, #0]
 800f822:	611a      	str	r2, [r3, #16]
}
 800f824:	bf00      	nop
 800f826:	3718      	adds	r7, #24
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}
 800f82c:	08025f38 	.word	0x08025f38
 800f830:	08025f58 	.word	0x08025f58
 800f834:	08025f5c 	.word	0x08025f5c

0800f838 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800f838:	b5b0      	push	{r4, r5, r7, lr}
 800f83a:	b084      	sub	sp, #16
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
 800f840:	6039      	str	r1, [r7, #0]
    if (!currtest_)
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	691b      	ldr	r3, [r3, #16]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d03b      	beq.n	800f8c2 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8a>
        return;

    print("##teamcity[testFinished name='");
 800f84a:	687a      	ldr	r2, [r7, #4]
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	332c      	adds	r3, #44	; 0x2c
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	491d      	ldr	r1, [pc, #116]	; (800f8cc <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x94>)
 800f856:	4610      	mov	r0, r2
 800f858:	4798      	blx	r3
    printEscaped(currtest_->getName().asCharString());
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	691a      	ldr	r2, [r3, #16]
 800f85e:	f107 0308 	add.w	r3, r7, #8
 800f862:	4611      	mov	r1, r2
 800f864:	4618      	mov	r0, r3
 800f866:	f004 fd89 	bl	801437c <_ZNK10UtestShell7getNameEv>
 800f86a:	f107 0308 	add.w	r3, r7, #8
 800f86e:	4618      	mov	r0, r3
 800f870:	f7fe ff14 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 800f874:	4603      	mov	r3, r0
 800f876:	4619      	mov	r1, r3
 800f878:	6878      	ldr	r0, [r7, #4]
 800f87a:	f000 f8ab 	bl	800f9d4 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800f87e:	f107 0308 	add.w	r3, r7, #8
 800f882:	4618      	mov	r0, r3
 800f884:	f7fe ff37 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    print("' duration='");
 800f888:	687a      	ldr	r2, [r7, #4]
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	332c      	adds	r3, #44	; 0x2c
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	490f      	ldr	r1, [pc, #60]	; (800f8d0 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x98>)
 800f894:	4610      	mov	r0, r2
 800f896:	4798      	blx	r3
    print(res.getCurrentTestTotalExecutionTime());
 800f898:	687d      	ldr	r5, [r7, #4]
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	3334      	adds	r3, #52	; 0x34
 800f8a0:	681c      	ldr	r4, [r3, #0]
 800f8a2:	6838      	ldr	r0, [r7, #0]
 800f8a4:	f004 fa0a 	bl	8013cbc <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	4619      	mov	r1, r3
 800f8ac:	4628      	mov	r0, r5
 800f8ae:	47a0      	blx	r4
    print("']\n");
 800f8b0:	687a      	ldr	r2, [r7, #4]
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	332c      	adds	r3, #44	; 0x2c
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	4906      	ldr	r1, [pc, #24]	; (800f8d4 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x9c>)
 800f8bc:	4610      	mov	r0, r2
 800f8be:	4798      	blx	r3
 800f8c0:	e000      	b.n	800f8c4 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8c>
        return;
 800f8c2:	bf00      	nop
}
 800f8c4:	3710      	adds	r7, #16
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bdb0      	pop	{r4, r5, r7, pc}
 800f8ca:	bf00      	nop
 800f8cc:	08025f7c 	.word	0x08025f7c
 800f8d0:	08025f9c 	.word	0x08025f9c
 800f8d4:	08025f58 	.word	0x08025f58

0800f8d8 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800f8d8:	b590      	push	{r4, r7, lr}
 800f8da:	b085      	sub	sp, #20
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
 800f8e0:	6039      	str	r1, [r7, #0]
    currGroup_ = test.getGroup();
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	f103 0414 	add.w	r4, r3, #20
 800f8e8:	f107 0308 	add.w	r3, r7, #8
 800f8ec:	6839      	ldr	r1, [r7, #0]
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	f004 fd53 	bl	801439a <_ZNK10UtestShell8getGroupEv>
 800f8f4:	f107 0308 	add.w	r3, r7, #8
 800f8f8:	4619      	mov	r1, r3
 800f8fa:	4620      	mov	r0, r4
 800f8fc:	f7fe fbaf 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 800f900:	f107 0308 	add.w	r3, r7, #8
 800f904:	4618      	mov	r0, r3
 800f906:	f7fe fef6 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    print("##teamcity[testSuiteStarted name='");
 800f90a:	687a      	ldr	r2, [r7, #4]
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	332c      	adds	r3, #44	; 0x2c
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	490c      	ldr	r1, [pc, #48]	; (800f948 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x70>)
 800f916:	4610      	mov	r0, r2
 800f918:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	3314      	adds	r3, #20
 800f91e:	4618      	mov	r0, r3
 800f920:	f7fe febc 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 800f924:	4603      	mov	r3, r0
 800f926:	4619      	mov	r1, r3
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f000 f853 	bl	800f9d4 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800f92e:	687a      	ldr	r2, [r7, #4]
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	332c      	adds	r3, #44	; 0x2c
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	4904      	ldr	r1, [pc, #16]	; (800f94c <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x74>)
 800f93a:	4610      	mov	r0, r2
 800f93c:	4798      	blx	r3
}
 800f93e:	bf00      	nop
 800f940:	3714      	adds	r7, #20
 800f942:	46bd      	mov	sp, r7
 800f944:	bd90      	pop	{r4, r7, pc}
 800f946:	bf00      	nop
 800f948:	08025fac 	.word	0x08025fac
 800f94c:	08025f58 	.word	0x08025f58

0800f950 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800f950:	b590      	push	{r4, r7, lr}
 800f952:	b085      	sub	sp, #20
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
 800f958:	6039      	str	r1, [r7, #0]
    if (currGroup_ == "")
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f103 0414 	add.w	r4, r3, #20
 800f960:	f107 0308 	add.w	r3, r7, #8
 800f964:	4918      	ldr	r1, [pc, #96]	; (800f9c8 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x78>)
 800f966:	4618      	mov	r0, r3
 800f968:	f7fe fb0d 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800f96c:	f107 0308 	add.w	r3, r7, #8
 800f970:	4619      	mov	r1, r3
 800f972:	4620      	mov	r0, r4
 800f974:	f7fe fecb 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 800f978:	4603      	mov	r3, r0
 800f97a:	461c      	mov	r4, r3
 800f97c:	f107 0308 	add.w	r3, r7, #8
 800f980:	4618      	mov	r0, r3
 800f982:	f7fe feb8 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800f986:	2c00      	cmp	r4, #0
 800f988:	d11a      	bne.n	800f9c0 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x70>
        return;

    print("##teamcity[testSuiteFinished name='");
 800f98a:	687a      	ldr	r2, [r7, #4]
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	332c      	adds	r3, #44	; 0x2c
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	490d      	ldr	r1, [pc, #52]	; (800f9cc <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x7c>)
 800f996:	4610      	mov	r0, r2
 800f998:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	3314      	adds	r3, #20
 800f99e:	4618      	mov	r0, r3
 800f9a0:	f7fe fe7c 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 800f9a4:	4603      	mov	r3, r0
 800f9a6:	4619      	mov	r1, r3
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f000 f813 	bl	800f9d4 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800f9ae:	687a      	ldr	r2, [r7, #4]
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	332c      	adds	r3, #44	; 0x2c
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	4905      	ldr	r1, [pc, #20]	; (800f9d0 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x80>)
 800f9ba:	4610      	mov	r0, r2
 800f9bc:	4798      	blx	r3
 800f9be:	e000      	b.n	800f9c2 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x72>
        return;
 800f9c0:	bf00      	nop
}
 800f9c2:	3714      	adds	r7, #20
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd90      	pop	{r4, r7, pc}
 800f9c8:	08025f34 	.word	0x08025f34
 800f9cc:	08025fd0 	.word	0x08025fd0
 800f9d0:	08025f58 	.word	0x08025f58

0800f9d4 <_ZN18TeamCityTestOutput12printEscapedEPKc>:

void TeamCityTestOutput::printEscaped(const char* s)
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b084      	sub	sp, #16
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
 800f9dc:	6039      	str	r1, [r7, #0]
    while (*s) {
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	781b      	ldrb	r3, [r3, #0]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d03f      	beq.n	800fa66 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x92>
        char str[3];
        if ((*s == '\'') || (*s == '|') || (*s == '[') || (*s == ']')) {
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	781b      	ldrb	r3, [r3, #0]
 800f9ea:	2b27      	cmp	r3, #39	; 0x27
 800f9ec:	d00b      	beq.n	800fa06 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	781b      	ldrb	r3, [r3, #0]
 800f9f2:	2b7c      	cmp	r3, #124	; 0x7c
 800f9f4:	d007      	beq.n	800fa06 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800f9f6:	683b      	ldr	r3, [r7, #0]
 800f9f8:	781b      	ldrb	r3, [r3, #0]
 800f9fa:	2b5b      	cmp	r3, #91	; 0x5b
 800f9fc:	d003      	beq.n	800fa06 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	781b      	ldrb	r3, [r3, #0]
 800fa02:	2b5d      	cmp	r3, #93	; 0x5d
 800fa04:	d107      	bne.n	800fa16 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x42>
            str[0] = '|';
 800fa06:	237c      	movs	r3, #124	; 0x7c
 800fa08:	733b      	strb	r3, [r7, #12]
            str[1] = *s;
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	781b      	ldrb	r3, [r3, #0]
 800fa0e:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800fa10:	2300      	movs	r3, #0
 800fa12:	73bb      	strb	r3, [r7, #14]
 800fa14:	e01a      	b.n	800fa4c <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\r') {
 800fa16:	683b      	ldr	r3, [r7, #0]
 800fa18:	781b      	ldrb	r3, [r3, #0]
 800fa1a:	2b0d      	cmp	r3, #13
 800fa1c:	d106      	bne.n	800fa2c <_ZN18TeamCityTestOutput12printEscapedEPKc+0x58>
            str[0] = '|';
 800fa1e:	237c      	movs	r3, #124	; 0x7c
 800fa20:	733b      	strb	r3, [r7, #12]
            str[1] = 'r';
 800fa22:	2372      	movs	r3, #114	; 0x72
 800fa24:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800fa26:	2300      	movs	r3, #0
 800fa28:	73bb      	strb	r3, [r7, #14]
 800fa2a:	e00f      	b.n	800fa4c <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\n') {
 800fa2c:	683b      	ldr	r3, [r7, #0]
 800fa2e:	781b      	ldrb	r3, [r3, #0]
 800fa30:	2b0a      	cmp	r3, #10
 800fa32:	d106      	bne.n	800fa42 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x6e>
            str[0] = '|';
 800fa34:	237c      	movs	r3, #124	; 0x7c
 800fa36:	733b      	strb	r3, [r7, #12]
            str[1] = 'n';
 800fa38:	236e      	movs	r3, #110	; 0x6e
 800fa3a:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	73bb      	strb	r3, [r7, #14]
 800fa40:	e004      	b.n	800fa4c <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else {
            str[0] = *s;
 800fa42:	683b      	ldr	r3, [r7, #0]
 800fa44:	781b      	ldrb	r3, [r3, #0]
 800fa46:	733b      	strb	r3, [r7, #12]
            str[1] = 0;
 800fa48:	2300      	movs	r3, #0
 800fa4a:	737b      	strb	r3, [r7, #13]
        }
        printBuffer(str);
 800fa4c:	687a      	ldr	r2, [r7, #4]
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	3328      	adds	r3, #40	; 0x28
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	f107 010c 	add.w	r1, r7, #12
 800fa5a:	4610      	mov	r0, r2
 800fa5c:	4798      	blx	r3
        s++;
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	3301      	adds	r3, #1
 800fa62:	603b      	str	r3, [r7, #0]
    while (*s) {
 800fa64:	e7bb      	b.n	800f9de <_ZN18TeamCityTestOutput12printEscapedEPKc+0xa>
    }
}
 800fa66:	bf00      	nop
 800fa68:	3710      	adds	r7, #16
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}
	...

0800fa70 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure>:

void TeamCityTestOutput::printFailure(const TestFailure& failure)
{
 800fa70:	b5b0      	push	{r4, r5, r7, lr}
 800fa72:	b08a      	sub	sp, #40	; 0x28
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
 800fa78:	6039      	str	r1, [r7, #0]
    print("##teamcity[testFailed name='");
 800fa7a:	687a      	ldr	r2, [r7, #4]
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	332c      	adds	r3, #44	; 0x2c
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	4968      	ldr	r1, [pc, #416]	; (800fc28 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1b8>)
 800fa86:	4610      	mov	r0, r2
 800fa88:	4798      	blx	r3
    printEscaped(failure.getTestNameOnly().asCharString());
 800fa8a:	683b      	ldr	r3, [r7, #0]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	3310      	adds	r3, #16
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	f107 0208 	add.w	r2, r7, #8
 800fa96:	6839      	ldr	r1, [r7, #0]
 800fa98:	4610      	mov	r0, r2
 800fa9a:	4798      	blx	r3
 800fa9c:	f107 0308 	add.w	r3, r7, #8
 800faa0:	4618      	mov	r0, r3
 800faa2:	f7fe fdfb 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 800faa6:	4603      	mov	r3, r0
 800faa8:	4619      	mov	r1, r3
 800faaa:	6878      	ldr	r0, [r7, #4]
 800faac:	f7ff ff92 	bl	800f9d4 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800fab0:	f107 0308 	add.w	r3, r7, #8
 800fab4:	4618      	mov	r0, r3
 800fab6:	f7fe fe1e 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    print("' message='");
 800faba:	687a      	ldr	r2, [r7, #4]
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	332c      	adds	r3, #44	; 0x2c
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	4959      	ldr	r1, [pc, #356]	; (800fc2c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1bc>)
 800fac6:	4610      	mov	r0, r2
 800fac8:	4798      	blx	r3
    if (failure.isOutsideTestFile() || failure.isInHelperFunction()) {
 800faca:	6838      	ldr	r0, [r7, #0]
 800facc:	f000 fa15 	bl	800fefa <_ZNK11TestFailure17isOutsideTestFileEv>
 800fad0:	4603      	mov	r3, r0
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d105      	bne.n	800fae2 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x72>
 800fad6:	6838      	ldr	r0, [r7, #0]
 800fad8:	f000 fa21 	bl	800ff1e <_ZNK11TestFailure18isInHelperFunctionEv>
 800fadc:	4603      	mov	r3, r0
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d001      	beq.n	800fae6 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x76>
 800fae2:	2301      	movs	r3, #1
 800fae4:	e000      	b.n	800fae8 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x78>
 800fae6:	2300      	movs	r3, #0
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d042      	beq.n	800fb72 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x102>
        print("TEST failed (");
 800faec:	687a      	ldr	r2, [r7, #4]
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	332c      	adds	r3, #44	; 0x2c
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	494e      	ldr	r1, [pc, #312]	; (800fc30 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c0>)
 800faf8:	4610      	mov	r0, r2
 800fafa:	4798      	blx	r3
        print(failure.getTestFileName().asCharString());
 800fafc:	687d      	ldr	r5, [r7, #4]
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	332c      	adds	r3, #44	; 0x2c
 800fb04:	681c      	ldr	r4, [r3, #0]
 800fb06:	683b      	ldr	r3, [r7, #0]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	331c      	adds	r3, #28
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	f107 0210 	add.w	r2, r7, #16
 800fb12:	6839      	ldr	r1, [r7, #0]
 800fb14:	4610      	mov	r0, r2
 800fb16:	4798      	blx	r3
 800fb18:	f107 0310 	add.w	r3, r7, #16
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f7fe fdbd 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 800fb22:	4603      	mov	r3, r0
 800fb24:	4619      	mov	r1, r3
 800fb26:	4628      	mov	r0, r5
 800fb28:	47a0      	blx	r4
 800fb2a:	f107 0310 	add.w	r3, r7, #16
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f7fe fde1 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
        print(":");
 800fb34:	687a      	ldr	r2, [r7, #4]
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	332c      	adds	r3, #44	; 0x2c
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	493d      	ldr	r1, [pc, #244]	; (800fc34 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800fb40:	4610      	mov	r0, r2
 800fb42:	4798      	blx	r3
        print(failure.getTestLineNumber());
 800fb44:	687d      	ldr	r5, [r7, #4]
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	3334      	adds	r3, #52	; 0x34
 800fb4c:	681c      	ldr	r4, [r3, #0]
 800fb4e:	683b      	ldr	r3, [r7, #0]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	3320      	adds	r3, #32
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	6838      	ldr	r0, [r7, #0]
 800fb58:	4798      	blx	r3
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	4619      	mov	r1, r3
 800fb5e:	4628      	mov	r0, r5
 800fb60:	47a0      	blx	r4
        print("): ");
 800fb62:	687a      	ldr	r2, [r7, #4]
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	332c      	adds	r3, #44	; 0x2c
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	4932      	ldr	r1, [pc, #200]	; (800fc38 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c8>)
 800fb6e:	4610      	mov	r0, r2
 800fb70:	4798      	blx	r3
    }

    printEscaped(failure.getFileName().asCharString());
 800fb72:	683b      	ldr	r3, [r7, #0]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	3308      	adds	r3, #8
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	f107 0218 	add.w	r2, r7, #24
 800fb7e:	6839      	ldr	r1, [r7, #0]
 800fb80:	4610      	mov	r0, r2
 800fb82:	4798      	blx	r3
 800fb84:	f107 0318 	add.w	r3, r7, #24
 800fb88:	4618      	mov	r0, r3
 800fb8a:	f7fe fd87 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 800fb8e:	4603      	mov	r3, r0
 800fb90:	4619      	mov	r1, r3
 800fb92:	6878      	ldr	r0, [r7, #4]
 800fb94:	f7ff ff1e 	bl	800f9d4 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800fb98:	f107 0318 	add.w	r3, r7, #24
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f7fe fdaa 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    print(":");
 800fba2:	687a      	ldr	r2, [r7, #4]
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	332c      	adds	r3, #44	; 0x2c
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	4921      	ldr	r1, [pc, #132]	; (800fc34 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800fbae:	4610      	mov	r0, r2
 800fbb0:	4798      	blx	r3
    print(failure.getFailureLineNumber());
 800fbb2:	687d      	ldr	r5, [r7, #4]
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	3334      	adds	r3, #52	; 0x34
 800fbba:	681c      	ldr	r4, [r3, #0]
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	3314      	adds	r3, #20
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	6838      	ldr	r0, [r7, #0]
 800fbc6:	4798      	blx	r3
 800fbc8:	4603      	mov	r3, r0
 800fbca:	4619      	mov	r1, r3
 800fbcc:	4628      	mov	r0, r5
 800fbce:	47a0      	blx	r4

    print("' details='");
 800fbd0:	687a      	ldr	r2, [r7, #4]
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	332c      	adds	r3, #44	; 0x2c
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	4918      	ldr	r1, [pc, #96]	; (800fc3c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1cc>)
 800fbdc:	4610      	mov	r0, r2
 800fbde:	4798      	blx	r3
    printEscaped(failure.getMessage().asCharString());
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	3318      	adds	r3, #24
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	f107 0220 	add.w	r2, r7, #32
 800fbec:	6839      	ldr	r1, [r7, #0]
 800fbee:	4610      	mov	r0, r2
 800fbf0:	4798      	blx	r3
 800fbf2:	f107 0320 	add.w	r3, r7, #32
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	f7fe fd50 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	4619      	mov	r1, r3
 800fc00:	6878      	ldr	r0, [r7, #4]
 800fc02:	f7ff fee7 	bl	800f9d4 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800fc06:	f107 0320 	add.w	r3, r7, #32
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f7fe fd73 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    print("']\n");
 800fc10:	687a      	ldr	r2, [r7, #4]
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	332c      	adds	r3, #44	; 0x2c
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	4909      	ldr	r1, [pc, #36]	; (800fc40 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1d0>)
 800fc1c:	4610      	mov	r0, r2
 800fc1e:	4798      	blx	r3
}
 800fc20:	bf00      	nop
 800fc22:	3728      	adds	r7, #40	; 0x28
 800fc24:	46bd      	mov	sp, r7
 800fc26:	bdb0      	pop	{r4, r5, r7, pc}
 800fc28:	08025ff4 	.word	0x08025ff4
 800fc2c:	08026014 	.word	0x08026014
 800fc30:	08026020 	.word	0x08026020
 800fc34:	08026030 	.word	0x08026030
 800fc38:	08026034 	.word	0x08026034
 800fc3c:	08026038 	.word	0x08026038
 800fc40:	08025f58 	.word	0x08025f58

0800fc44 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>:
TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& theMessage) :
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNumber), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
{
}

TestFailure::TestFailure(UtestShell* test, const SimpleString& theMessage) :
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b084      	sub	sp, #16
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	60f8      	str	r0, [r7, #12]
 800fc4c:	60b9      	str	r1, [r7, #8]
 800fc4e:	607a      	str	r2, [r7, #4]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(test->getFile()), lineNumber_(test->getLineNumber()), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
 800fc50:	4a1a      	ldr	r2, [pc, #104]	; (800fcbc <_ZN11TestFailureC1EP10UtestShellRK12SimpleString+0x78>)
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	601a      	str	r2, [r3, #0]
 800fc56:	68bb      	ldr	r3, [r7, #8]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	3314      	adds	r3, #20
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	68fa      	ldr	r2, [r7, #12]
 800fc60:	3204      	adds	r2, #4
 800fc62:	68b9      	ldr	r1, [r7, #8]
 800fc64:	4610      	mov	r0, r2
 800fc66:	4798      	blx	r3
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	330c      	adds	r3, #12
 800fc6c:	68b9      	ldr	r1, [r7, #8]
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f004 fb84 	bl	801437c <_ZNK10UtestShell7getNameEv>
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	3314      	adds	r3, #20
 800fc78:	68b9      	ldr	r1, [r7, #8]
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	f004 fc4f 	bl	801451e <_ZNK10UtestShell7getFileEv>
 800fc80:	68b8      	ldr	r0, [r7, #8]
 800fc82:	f004 fc5b 	bl	801453c <_ZNK10UtestShell13getLineNumberEv>
 800fc86:	4602      	mov	r2, r0
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	61da      	str	r2, [r3, #28]
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	3320      	adds	r3, #32
 800fc90:	68b9      	ldr	r1, [r7, #8]
 800fc92:	4618      	mov	r0, r3
 800fc94:	f004 fc43 	bl	801451e <_ZNK10UtestShell7getFileEv>
 800fc98:	68b8      	ldr	r0, [r7, #8]
 800fc9a:	f004 fc4f 	bl	801453c <_ZNK10UtestShell13getLineNumberEv>
 800fc9e:	4602      	mov	r2, r0
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	629a      	str	r2, [r3, #40]	; 0x28
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	332c      	adds	r3, #44	; 0x2c
 800fca8:	6879      	ldr	r1, [r7, #4]
 800fcaa:	4618      	mov	r0, r3
 800fcac:	f7fe f9bf 	bl	800e02e <_ZN12SimpleStringC1ERKS_>
{
}
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	3710      	adds	r7, #16
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	bd80      	pop	{r7, pc}
 800fcba:	bf00      	nop
 800fcbc:	0802a204 	.word	0x0802a204

0800fcc0 <_ZN11TestFailureC1EP10UtestShellPKcj>:

TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNum) :
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b084      	sub	sp, #16
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	60f8      	str	r0, [r7, #12]
 800fcc8:	60b9      	str	r1, [r7, #8]
 800fcca:	607a      	str	r2, [r7, #4]
 800fccc:	603b      	str	r3, [r7, #0]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNum), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_("no message")
 800fcce:	4a19      	ldr	r2, [pc, #100]	; (800fd34 <_ZN11TestFailureC1EP10UtestShellPKcj+0x74>)
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	601a      	str	r2, [r3, #0]
 800fcd4:	68bb      	ldr	r3, [r7, #8]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	3314      	adds	r3, #20
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	68fa      	ldr	r2, [r7, #12]
 800fcde:	3204      	adds	r2, #4
 800fce0:	68b9      	ldr	r1, [r7, #8]
 800fce2:	4610      	mov	r0, r2
 800fce4:	4798      	blx	r3
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	330c      	adds	r3, #12
 800fcea:	68b9      	ldr	r1, [r7, #8]
 800fcec:	4618      	mov	r0, r3
 800fcee:	f004 fb45 	bl	801437c <_ZNK10UtestShell7getNameEv>
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	3314      	adds	r3, #20
 800fcf6:	6879      	ldr	r1, [r7, #4]
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	f7fe f944 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	683a      	ldr	r2, [r7, #0]
 800fd02:	61da      	str	r2, [r3, #28]
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	3320      	adds	r3, #32
 800fd08:	68b9      	ldr	r1, [r7, #8]
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f004 fc07 	bl	801451e <_ZNK10UtestShell7getFileEv>
 800fd10:	68b8      	ldr	r0, [r7, #8]
 800fd12:	f004 fc13 	bl	801453c <_ZNK10UtestShell13getLineNumberEv>
 800fd16:	4602      	mov	r2, r0
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	629a      	str	r2, [r3, #40]	; 0x28
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	332c      	adds	r3, #44	; 0x2c
 800fd20:	4905      	ldr	r1, [pc, #20]	; (800fd38 <_ZN11TestFailureC1EP10UtestShellPKcj+0x78>)
 800fd22:	4618      	mov	r0, r3
 800fd24:	f7fe f92f 	bl	800df86 <_ZN12SimpleStringC1EPKc>
{
}
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	3710      	adds	r7, #16
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}
 800fd32:	bf00      	nop
 800fd34:	0802a204 	.word	0x0802a204
 800fd38:	08026044 	.word	0x08026044

0800fd3c <_ZN11TestFailureC1ERKS_>:

TestFailure::TestFailure(const TestFailure& f) :
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b082      	sub	sp, #8
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
 800fd44:	6039      	str	r1, [r7, #0]
    testName_(f.testName_), testNameOnly_(f.testNameOnly_), fileName_(f.fileName_), lineNumber_(f.lineNumber_), testFileName_(f.testFileName_), testLineNumber_(f.testLineNumber_), message_(f.message_)
 800fd46:	4a1e      	ldr	r2, [pc, #120]	; (800fdc0 <_ZN11TestFailureC1ERKS_+0x84>)
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	601a      	str	r2, [r3, #0]
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	1d1a      	adds	r2, r3, #4
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	3304      	adds	r3, #4
 800fd54:	4619      	mov	r1, r3
 800fd56:	4610      	mov	r0, r2
 800fd58:	f7fe f969 	bl	800e02e <_ZN12SimpleStringC1ERKS_>
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	f103 020c 	add.w	r2, r3, #12
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	330c      	adds	r3, #12
 800fd66:	4619      	mov	r1, r3
 800fd68:	4610      	mov	r0, r2
 800fd6a:	f7fe f960 	bl	800e02e <_ZN12SimpleStringC1ERKS_>
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	f103 0214 	add.w	r2, r3, #20
 800fd74:	683b      	ldr	r3, [r7, #0]
 800fd76:	3314      	adds	r3, #20
 800fd78:	4619      	mov	r1, r3
 800fd7a:	4610      	mov	r0, r2
 800fd7c:	f7fe f957 	bl	800e02e <_ZN12SimpleStringC1ERKS_>
 800fd80:	683b      	ldr	r3, [r7, #0]
 800fd82:	69da      	ldr	r2, [r3, #28]
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	61da      	str	r2, [r3, #28]
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	f103 0220 	add.w	r2, r3, #32
 800fd8e:	683b      	ldr	r3, [r7, #0]
 800fd90:	3320      	adds	r3, #32
 800fd92:	4619      	mov	r1, r3
 800fd94:	4610      	mov	r0, r2
 800fd96:	f7fe f94a 	bl	800e02e <_ZN12SimpleStringC1ERKS_>
 800fd9a:	683b      	ldr	r3, [r7, #0]
 800fd9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	629a      	str	r2, [r3, #40]	; 0x28
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	332c      	adds	r3, #44	; 0x2c
 800fdac:	4619      	mov	r1, r3
 800fdae:	4610      	mov	r0, r2
 800fdb0:	f7fe f93d 	bl	800e02e <_ZN12SimpleStringC1ERKS_>
{
}
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	3708      	adds	r7, #8
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}
 800fdbe:	bf00      	nop
 800fdc0:	0802a204 	.word	0x0802a204

0800fdc4 <_ZN11TestFailureD1Ev>:


TestFailure::~TestFailure()
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b082      	sub	sp, #8
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
 800fdcc:	4a10      	ldr	r2, [pc, #64]	; (800fe10 <_ZN11TestFailureD1Ev+0x4c>)
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	601a      	str	r2, [r3, #0]
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	332c      	adds	r3, #44	; 0x2c
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	f7fe fc8d 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	3320      	adds	r3, #32
 800fde0:	4618      	mov	r0, r3
 800fde2:	f7fe fc88 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	3314      	adds	r3, #20
 800fdea:	4618      	mov	r0, r3
 800fdec:	f7fe fc83 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	330c      	adds	r3, #12
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	f7fe fc7e 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	3304      	adds	r3, #4
 800fdfe:	4618      	mov	r0, r3
 800fe00:	f7fe fc79 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
{
}
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	4618      	mov	r0, r3
 800fe08:	3708      	adds	r7, #8
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	bd80      	pop	{r7, pc}
 800fe0e:	bf00      	nop
 800fe10:	0802a204 	.word	0x0802a204

0800fe14 <_ZN11TestFailureD0Ev>:
TestFailure::~TestFailure()
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b082      	sub	sp, #8
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	6078      	str	r0, [r7, #4]
}
 800fe1c:	6878      	ldr	r0, [r7, #4]
 800fe1e:	f7ff ffd1 	bl	800fdc4 <_ZN11TestFailureD1Ev>
 800fe22:	2134      	movs	r1, #52	; 0x34
 800fe24:	6878      	ldr	r0, [r7, #4]
 800fe26:	f7fb fcff 	bl	800b828 <_ZdlPvj>
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	3708      	adds	r7, #8
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}

0800fe34 <_ZNK11TestFailure11getFileNameEv>:

SimpleString TestFailure::getFileName() const
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b082      	sub	sp, #8
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
 800fe3c:	6039      	str	r1, [r7, #0]
    return fileName_;
 800fe3e:	683b      	ldr	r3, [r7, #0]
 800fe40:	3314      	adds	r3, #20
 800fe42:	4619      	mov	r1, r3
 800fe44:	6878      	ldr	r0, [r7, #4]
 800fe46:	f7fe f8f2 	bl	800e02e <_ZN12SimpleStringC1ERKS_>
}
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	3708      	adds	r7, #8
 800fe4e:	46bd      	mov	sp, r7
 800fe50:	bd80      	pop	{r7, pc}

0800fe52 <_ZNK11TestFailure15getTestFileNameEv>:

SimpleString TestFailure::getTestFileName() const
{
 800fe52:	b580      	push	{r7, lr}
 800fe54:	b082      	sub	sp, #8
 800fe56:	af00      	add	r7, sp, #0
 800fe58:	6078      	str	r0, [r7, #4]
 800fe5a:	6039      	str	r1, [r7, #0]
    return testFileName_;
 800fe5c:	683b      	ldr	r3, [r7, #0]
 800fe5e:	3320      	adds	r3, #32
 800fe60:	4619      	mov	r1, r3
 800fe62:	6878      	ldr	r0, [r7, #4]
 800fe64:	f7fe f8e3 	bl	800e02e <_ZN12SimpleStringC1ERKS_>
}
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	3708      	adds	r7, #8
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	bd80      	pop	{r7, pc}

0800fe70 <_ZNK11TestFailure11getTestNameEv>:

SimpleString TestFailure::getTestName() const
{
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b082      	sub	sp, #8
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
 800fe78:	6039      	str	r1, [r7, #0]
    return testName_;
 800fe7a:	683b      	ldr	r3, [r7, #0]
 800fe7c:	3304      	adds	r3, #4
 800fe7e:	4619      	mov	r1, r3
 800fe80:	6878      	ldr	r0, [r7, #4]
 800fe82:	f7fe f8d4 	bl	800e02e <_ZN12SimpleStringC1ERKS_>
}
 800fe86:	6878      	ldr	r0, [r7, #4]
 800fe88:	3708      	adds	r7, #8
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd80      	pop	{r7, pc}

0800fe8e <_ZNK11TestFailure15getTestNameOnlyEv>:

SimpleString TestFailure::getTestNameOnly() const
{
 800fe8e:	b580      	push	{r7, lr}
 800fe90:	b082      	sub	sp, #8
 800fe92:	af00      	add	r7, sp, #0
 800fe94:	6078      	str	r0, [r7, #4]
 800fe96:	6039      	str	r1, [r7, #0]
    return testNameOnly_;
 800fe98:	683b      	ldr	r3, [r7, #0]
 800fe9a:	330c      	adds	r3, #12
 800fe9c:	4619      	mov	r1, r3
 800fe9e:	6878      	ldr	r0, [r7, #4]
 800fea0:	f7fe f8c5 	bl	800e02e <_ZN12SimpleStringC1ERKS_>
}
 800fea4:	6878      	ldr	r0, [r7, #4]
 800fea6:	3708      	adds	r7, #8
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd80      	pop	{r7, pc}

0800feac <_ZNK11TestFailure20getFailureLineNumberEv>:

size_t TestFailure::getFailureLineNumber() const
{
 800feac:	b480      	push	{r7}
 800feae:	b083      	sub	sp, #12
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	69db      	ldr	r3, [r3, #28]
}
 800feb8:	4618      	mov	r0, r3
 800feba:	370c      	adds	r7, #12
 800febc:	46bd      	mov	sp, r7
 800febe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec2:	4770      	bx	lr

0800fec4 <_ZNK11TestFailure17getTestLineNumberEv>:

size_t TestFailure::getTestLineNumber() const
{
 800fec4:	b480      	push	{r7}
 800fec6:	b083      	sub	sp, #12
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
    return testLineNumber_;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800fed0:	4618      	mov	r0, r3
 800fed2:	370c      	adds	r7, #12
 800fed4:	46bd      	mov	sp, r7
 800fed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feda:	4770      	bx	lr

0800fedc <_ZNK11TestFailure10getMessageEv>:

SimpleString TestFailure::getMessage() const
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b082      	sub	sp, #8
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
 800fee4:	6039      	str	r1, [r7, #0]
    return message_;
 800fee6:	683b      	ldr	r3, [r7, #0]
 800fee8:	332c      	adds	r3, #44	; 0x2c
 800feea:	4619      	mov	r1, r3
 800feec:	6878      	ldr	r0, [r7, #4]
 800feee:	f7fe f89e 	bl	800e02e <_ZN12SimpleStringC1ERKS_>
}
 800fef2:	6878      	ldr	r0, [r7, #4]
 800fef4:	3708      	adds	r7, #8
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}

0800fefa <_ZNK11TestFailure17isOutsideTestFileEv>:

bool TestFailure::isOutsideTestFile() const
{
 800fefa:	b580      	push	{r7, lr}
 800fefc:	b082      	sub	sp, #8
 800fefe:	af00      	add	r7, sp, #0
 800ff00:	6078      	str	r0, [r7, #4]
    return testFileName_ != fileName_;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	f103 0220 	add.w	r2, r3, #32
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	3314      	adds	r3, #20
 800ff0c:	4619      	mov	r1, r3
 800ff0e:	4610      	mov	r0, r2
 800ff10:	f7fe fc42 	bl	800e798 <_ZneRK12SimpleStringS1_>
 800ff14:	4603      	mov	r3, r0
}
 800ff16:	4618      	mov	r0, r3
 800ff18:	3708      	adds	r7, #8
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bd80      	pop	{r7, pc}

0800ff1e <_ZNK11TestFailure18isInHelperFunctionEv>:

bool TestFailure::isInHelperFunction() const
{
 800ff1e:	b480      	push	{r7}
 800ff20:	b083      	sub	sp, #12
 800ff22:	af00      	add	r7, sp, #0
 800ff24:	6078      	str	r0, [r7, #4]
    return lineNumber_ < testLineNumber_;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	69da      	ldr	r2, [r3, #28]
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff2e:	429a      	cmp	r2, r3
 800ff30:	bf34      	ite	cc
 800ff32:	2301      	movcc	r3, #1
 800ff34:	2300      	movcs	r3, #0
 800ff36:	b2db      	uxtb	r3, r3
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	370c      	adds	r7, #12
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff42:	4770      	bx	lr

0800ff44 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>:

SimpleString TestFailure::createButWasString(const SimpleString& expected, const SimpleString& actual)
{
 800ff44:	b590      	push	{r4, r7, lr}
 800ff46:	b085      	sub	sp, #20
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	60f8      	str	r0, [r7, #12]
 800ff4c:	60b9      	str	r1, [r7, #8]
 800ff4e:	607a      	str	r2, [r7, #4]
 800ff50:	603b      	str	r3, [r7, #0]
    return StringFromFormat("expected <%s>\n\tbut was  <%s>", expected.asCharString(), actual.asCharString());
 800ff52:	6878      	ldr	r0, [r7, #4]
 800ff54:	f7fe fba2 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 800ff58:	4604      	mov	r4, r0
 800ff5a:	6838      	ldr	r0, [r7, #0]
 800ff5c:	f7fe fb9e 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 800ff60:	4603      	mov	r3, r0
 800ff62:	68f8      	ldr	r0, [r7, #12]
 800ff64:	4622      	mov	r2, r4
 800ff66:	4903      	ldr	r1, [pc, #12]	; (800ff74 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_+0x30>)
 800ff68:	f7ff f8cc 	bl	800f104 <_Z16StringFromFormatPKcz>
}
 800ff6c:	68f8      	ldr	r0, [r7, #12]
 800ff6e:	3714      	adds	r7, #20
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bd90      	pop	{r4, r7, pc}
 800ff74:	08026050 	.word	0x08026050

0800ff78 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>:

SimpleString TestFailure::createDifferenceAtPosString(const SimpleString& actual, size_t offset, size_t reportedPosition)
{
 800ff78:	b590      	push	{r4, r7, lr}
 800ff7a:	b097      	sub	sp, #92	; 0x5c
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	60f8      	str	r0, [r7, #12]
 800ff80:	60b9      	str	r1, [r7, #8]
 800ff82:	607a      	str	r2, [r7, #4]
 800ff84:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800ff86:	494c      	ldr	r1, [pc, #304]	; (80100b8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x140>)
 800ff88:	68f8      	ldr	r0, [r7, #12]
 800ff8a:	f7fd fffc 	bl	800df86 <_ZN12SimpleStringC1EPKc>
    const size_t extraCharactersWindow = 20;
 800ff8e:	2314      	movs	r3, #20
 800ff90:	657b      	str	r3, [r7, #84]	; 0x54
    const size_t halfOfExtraCharactersWindow = extraCharactersWindow / 2;
 800ff92:	230a      	movs	r3, #10
 800ff94:	653b      	str	r3, [r7, #80]	; 0x50

    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800ff96:	f107 0320 	add.w	r3, r7, #32
 800ff9a:	220a      	movs	r2, #10
 800ff9c:	4947      	ldr	r1, [pc, #284]	; (80100bc <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	f7fe f80c 	bl	800dfbc <_ZN12SimpleStringC1EPKcj>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800ffa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ffa8:	f107 0120 	add.w	r1, r7, #32
 800ffac:	687a      	ldr	r2, [r7, #4]
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7fe fc03 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 800ffb4:	f107 0318 	add.w	r3, r7, #24
 800ffb8:	f107 0220 	add.w	r2, r7, #32
 800ffbc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	f7fe fbfa 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 800ffc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f7fe fb93 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800ffd0:	f107 0310 	add.w	r3, r7, #16
 800ffd4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ffd6:	493a      	ldr	r1, [pc, #232]	; (80100c0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x148>)
 800ffd8:	4618      	mov	r0, r3
 800ffda:	f7ff f893 	bl	800f104 <_Z16StringFromFormatPKcz>

    result += "\n";
 800ffde:	4939      	ldr	r1, [pc, #228]	; (80100c4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x14c>)
 800ffe0:	68f8      	ldr	r0, [r7, #12]
 800ffe2:	f7fe fc17 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    result += StringFromFormat("\t%s%s>\n", differentString.asCharString(), actualString.subString(offset, extraCharactersWindow).asCharString());
 800ffe6:	f107 0310 	add.w	r3, r7, #16
 800ffea:	4618      	mov	r0, r3
 800ffec:	f7fe fb56 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 800fff0:	4604      	mov	r4, r0
 800fff2:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800fff6:	f107 0118 	add.w	r1, r7, #24
 800fffa:	2314      	movs	r3, #20
 800fffc:	683a      	ldr	r2, [r7, #0]
 800fffe:	f7fe fc83 	bl	800e908 <_ZNK12SimpleString9subStringEjj>
 8010002:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010006:	4618      	mov	r0, r3
 8010008:	f7fe fb48 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 801000c:	4603      	mov	r3, r0
 801000e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8010012:	4622      	mov	r2, r4
 8010014:	492c      	ldr	r1, [pc, #176]	; (80100c8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x150>)
 8010016:	f7ff f875 	bl	800f104 <_Z16StringFromFormatPKcz>
 801001a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801001e:	4619      	mov	r1, r3
 8010020:	68f8      	ldr	r0, [r7, #12]
 8010022:	f7fe fbe5 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 8010026:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801002a:	4618      	mov	r0, r3
 801002c:	f7fe fb63 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8010030:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010034:	4618      	mov	r0, r3
 8010036:	f7fe fb5e 	bl	800e6f6 <_ZN12SimpleStringD1Ev>


    result += StringFromFormat("\t%s^", SimpleString(" ", (differentString.size() + halfOfExtraCharactersWindow)).asCharString());
 801003a:	f107 0310 	add.w	r3, r7, #16
 801003e:	4618      	mov	r0, r3
 8010040:	f7fe fb38 	bl	800e6b4 <_ZNK12SimpleString4sizeEv>
 8010044:	4603      	mov	r3, r0
 8010046:	f103 020a 	add.w	r2, r3, #10
 801004a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801004e:	491b      	ldr	r1, [pc, #108]	; (80100bc <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 8010050:	4618      	mov	r0, r3
 8010052:	f7fd ffb3 	bl	800dfbc <_ZN12SimpleStringC1EPKcj>
 8010056:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801005a:	4618      	mov	r0, r3
 801005c:	f7fe fb1e 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 8010060:	4602      	mov	r2, r0
 8010062:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010066:	4919      	ldr	r1, [pc, #100]	; (80100cc <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x154>)
 8010068:	4618      	mov	r0, r3
 801006a:	f7ff f84b 	bl	800f104 <_Z16StringFromFormatPKcz>
 801006e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010072:	4619      	mov	r1, r3
 8010074:	68f8      	ldr	r0, [r7, #12]
 8010076:	f7fe fbbb 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801007a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801007e:	4618      	mov	r0, r3
 8010080:	f7fe fb39 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8010084:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010088:	4618      	mov	r0, r3
 801008a:	f7fe fb34 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    return result;
 801008e:	bf00      	nop
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 8010090:	f107 0310 	add.w	r3, r7, #16
 8010094:	4618      	mov	r0, r3
 8010096:	f7fe fb2e 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 801009a:	f107 0318 	add.w	r3, r7, #24
 801009e:	4618      	mov	r0, r3
 80100a0:	f7fe fb29 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 80100a4:	f107 0320 	add.w	r3, r7, #32
 80100a8:	4618      	mov	r0, r3
 80100aa:	f7fe fb24 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    return result;
 80100ae:	bf00      	nop
}
 80100b0:	68f8      	ldr	r0, [r7, #12]
 80100b2:	375c      	adds	r7, #92	; 0x5c
 80100b4:	46bd      	mov	sp, r7
 80100b6:	bd90      	pop	{r4, r7, pc}
 80100b8:	08026070 	.word	0x08026070
 80100bc:	08026074 	.word	0x08026074
 80100c0:	08026078 	.word	0x08026078
 80100c4:	080260a0 	.word	0x080260a0
 80100c8:	080260a4 	.word	0x080260a4
 80100cc:	080260ac 	.word	0x080260ac

080100d0 <_ZN11TestFailure14createUserTextERK12SimpleString>:

SimpleString TestFailure::createUserText(const SimpleString& text)
{
 80100d0:	b590      	push	{r4, r7, lr}
 80100d2:	b087      	sub	sp, #28
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	60f8      	str	r0, [r7, #12]
 80100d8:	60b9      	str	r1, [r7, #8]
 80100da:	607a      	str	r2, [r7, #4]
    SimpleString userMessage = "";
 80100dc:	491a      	ldr	r1, [pc, #104]	; (8010148 <_ZN11TestFailure14createUserTextERK12SimpleString+0x78>)
 80100de:	68f8      	ldr	r0, [r7, #12]
 80100e0:	f7fd ff51 	bl	800df86 <_ZN12SimpleStringC1EPKc>
    if (!text.isEmpty())
 80100e4:	6878      	ldr	r0, [r7, #4]
 80100e6:	f7fe faf5 	bl	800e6d4 <_ZNK12SimpleString7isEmptyEv>
 80100ea:	4603      	mov	r3, r0
 80100ec:	f083 0301 	eor.w	r3, r3, #1
 80100f0:	b2db      	uxtb	r3, r3
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d022      	beq.n	801013c <_ZN11TestFailure14createUserTextERK12SimpleString+0x6c>
    {
        //This is a kludge to turn off "Message: " for this case.
        //I don't think "Message: " adds anything, as you get to see the
        //message. I propose we remove "Message: " lead in
        if (!text.startsWith("LONGS_EQUAL"))
 80100f6:	f107 0310 	add.w	r3, r7, #16
 80100fa:	4914      	ldr	r1, [pc, #80]	; (801014c <_ZN11TestFailure14createUserTextERK12SimpleString+0x7c>)
 80100fc:	4618      	mov	r0, r3
 80100fe:	f7fd ff42 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8010102:	f107 0310 	add.w	r3, r7, #16
 8010106:	4619      	mov	r1, r3
 8010108:	6878      	ldr	r0, [r7, #4]
 801010a:	f7fe f800 	bl	800e10e <_ZNK12SimpleString10startsWithERKS_>
 801010e:	4603      	mov	r3, r0
 8010110:	f083 0301 	eor.w	r3, r3, #1
 8010114:	b2dc      	uxtb	r4, r3
 8010116:	f107 0310 	add.w	r3, r7, #16
 801011a:	4618      	mov	r0, r3
 801011c:	f7fe faeb 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8010120:	2c00      	cmp	r4, #0
 8010122:	d003      	beq.n	801012c <_ZN11TestFailure14createUserTextERK12SimpleString+0x5c>
            userMessage += "Message: ";
 8010124:	490a      	ldr	r1, [pc, #40]	; (8010150 <_ZN11TestFailure14createUserTextERK12SimpleString+0x80>)
 8010126:	68f8      	ldr	r0, [r7, #12]
 8010128:	f7fe fb74 	bl	800e814 <_ZN12SimpleStringpLEPKc>
        userMessage += text;
 801012c:	6879      	ldr	r1, [r7, #4]
 801012e:	68f8      	ldr	r0, [r7, #12]
 8010130:	f7fe fb5e 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
        userMessage += "\n\t";
 8010134:	4907      	ldr	r1, [pc, #28]	; (8010154 <_ZN11TestFailure14createUserTextERK12SimpleString+0x84>)
 8010136:	68f8      	ldr	r0, [r7, #12]
 8010138:	f7fe fb6c 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    }
    return userMessage;
 801013c:	bf00      	nop
}
 801013e:	68f8      	ldr	r0, [r7, #12]
 8010140:	371c      	adds	r7, #28
 8010142:	46bd      	mov	sp, r7
 8010144:	bd90      	pop	{r4, r7, pc}
 8010146:	bf00      	nop
 8010148:	08026070 	.word	0x08026070
 801014c:	080260b4 	.word	0x080260b4
 8010150:	080260c0 	.word	0x080260c0
 8010154:	080260cc 	.word	0x080260cc

08010158 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:
    message_ = createUserText(text);

    message_ += createButWasString(StringFromOrNull(expected), StringFromOrNull(actual));
}

EqualsFailure::EqualsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 8010158:	b590      	push	{r4, r7, lr}
 801015a:	b089      	sub	sp, #36	; 0x24
 801015c:	af00      	add	r7, sp, #0
 801015e:	60f8      	str	r0, [r7, #12]
 8010160:	60b9      	str	r1, [r7, #8]
 8010162:	607a      	str	r2, [r7, #4]
 8010164:	603b      	str	r3, [r7, #0]
    : TestFailure(test, fileName, lineNumber)
 8010166:	68f8      	ldr	r0, [r7, #12]
 8010168:	683b      	ldr	r3, [r7, #0]
 801016a:	687a      	ldr	r2, [r7, #4]
 801016c:	68b9      	ldr	r1, [r7, #8]
 801016e:	f7ff fda7 	bl	800fcc0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8010172:	4a19      	ldr	r2, [pc, #100]	; (80101d8 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x80>)
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801017e:	68f9      	ldr	r1, [r7, #12]
 8010180:	f107 0310 	add.w	r3, r7, #16
 8010184:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010186:	4618      	mov	r0, r3
 8010188:	f7ff ffa2 	bl	80100d0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 801018c:	f107 0310 	add.w	r3, r7, #16
 8010190:	4619      	mov	r1, r3
 8010192:	4620      	mov	r0, r4
 8010194:	f7fd ff63 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 8010198:	f107 0310 	add.w	r3, r7, #16
 801019c:	4618      	mov	r0, r3
 801019e:	f7fe faaa 	bl	800e6f6 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expected, actual);
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80101a8:	68f9      	ldr	r1, [r7, #12]
 80101aa:	f107 0018 	add.w	r0, r7, #24
 80101ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80101b2:	f7ff fec7 	bl	800ff44 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 80101b6:	f107 0318 	add.w	r3, r7, #24
 80101ba:	4619      	mov	r1, r3
 80101bc:	4620      	mov	r0, r4
 80101be:	f7fe fb17 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 80101c2:	f107 0318 	add.w	r3, r7, #24
 80101c6:	4618      	mov	r0, r3
 80101c8:	f7fe fa95 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	4618      	mov	r0, r3
 80101d0:	3724      	adds	r7, #36	; 0x24
 80101d2:	46bd      	mov	sp, r7
 80101d4:	bd90      	pop	{r4, r7, pc}
 80101d6:	bf00      	nop
 80101d8:	0802a1d8 	.word	0x0802a1d8

080101dc <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>:

DoublesEqualFailure::DoublesEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, double expected, double actual, double threshold, const SimpleString& text)
 80101dc:	b5b0      	push	{r4, r5, r7, lr}
 80101de:	b094      	sub	sp, #80	; 0x50
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6278      	str	r0, [r7, #36]	; 0x24
 80101e4:	6239      	str	r1, [r7, #32]
 80101e6:	61fa      	str	r2, [r7, #28]
 80101e8:	61bb      	str	r3, [r7, #24]
 80101ea:	ed87 0b04 	vstr	d0, [r7, #16]
 80101ee:	ed87 1b02 	vstr	d1, [r7, #8]
 80101f2:	ed87 2b00 	vstr	d2, [r7]
: TestFailure(test, fileName, lineNumber)
 80101f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80101f8:	69bb      	ldr	r3, [r7, #24]
 80101fa:	69fa      	ldr	r2, [r7, #28]
 80101fc:	6a39      	ldr	r1, [r7, #32]
 80101fe:	f7ff fd5f 	bl	800fcc0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8010202:	4a4a      	ldr	r2, [pc, #296]	; (801032c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x150>)
 8010204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010206:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8010208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801020a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801020e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010210:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010214:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010216:	4618      	mov	r0, r3
 8010218:	f7ff ff5a 	bl	80100d0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 801021c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010220:	4619      	mov	r1, r3
 8010222:	4620      	mov	r0, r4
 8010224:	f7fd ff1b 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 8010228:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801022c:	4618      	mov	r0, r3
 801022e:	f7fe fa62 	bl	800e6f6 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFrom(expected, 7), StringFrom(actual, 7));
 8010232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010234:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010238:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 801023a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801023e:	2107      	movs	r1, #7
 8010240:	ed97 0b04 	vldr	d0, [r7, #16]
 8010244:	4618      	mov	r0, r3
 8010246:	f7fe ff1b 	bl	800f080 <_Z10StringFromdi>
 801024a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801024e:	2107      	movs	r1, #7
 8010250:	ed97 0b02 	vldr	d0, [r7, #8]
 8010254:	4618      	mov	r0, r3
 8010256:	f7fe ff13 	bl	800f080 <_Z10StringFromdi>
 801025a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 801025e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010262:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8010266:	4629      	mov	r1, r5
 8010268:	f7ff fe6c 	bl	800ff44 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 801026c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010270:	4619      	mov	r1, r3
 8010272:	4620      	mov	r0, r4
 8010274:	f7fe fabc 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 8010278:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801027c:	4618      	mov	r0, r3
 801027e:	f7fe fa3a 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8010282:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010286:	4618      	mov	r0, r3
 8010288:	f7fe fa35 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801028c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010290:	4618      	mov	r0, r3
 8010292:	f7fe fa30 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    message_ += " threshold used was <";
 8010296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010298:	332c      	adds	r3, #44	; 0x2c
 801029a:	4925      	ldr	r1, [pc, #148]	; (8010330 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x154>)
 801029c:	4618      	mov	r0, r3
 801029e:	f7fe fab9 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(threshold, 7);
 80102a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102a4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80102a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80102ac:	2107      	movs	r1, #7
 80102ae:	ed97 0b00 	vldr	d0, [r7]
 80102b2:	4618      	mov	r0, r3
 80102b4:	f7fe fee4 	bl	800f080 <_Z10StringFromdi>
 80102b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80102bc:	4619      	mov	r1, r3
 80102be:	4620      	mov	r0, r4
 80102c0:	f7fe fa96 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 80102c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80102c8:	4618      	mov	r0, r3
 80102ca:	f7fe fa14 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    message_ += ">";
 80102ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102d0:	332c      	adds	r3, #44	; 0x2c
 80102d2:	4918      	ldr	r1, [pc, #96]	; (8010334 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x158>)
 80102d4:	4618      	mov	r0, r3
 80102d6:	f7fe fa9d 	bl	800e814 <_ZN12SimpleStringpLEPKc>

    if (PlatformSpecificIsNan(expected) || PlatformSpecificIsNan(actual) || PlatformSpecificIsNan(threshold))
 80102da:	4b17      	ldr	r3, [pc, #92]	; (8010338 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	ed97 0b04 	vldr	d0, [r7, #16]
 80102e2:	4798      	blx	r3
 80102e4:	4603      	mov	r3, r0
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d10f      	bne.n	801030a <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 80102ea:	4b13      	ldr	r3, [pc, #76]	; (8010338 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	ed97 0b02 	vldr	d0, [r7, #8]
 80102f2:	4798      	blx	r3
 80102f4:	4603      	mov	r3, r0
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d107      	bne.n	801030a <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 80102fa:	4b0f      	ldr	r3, [pc, #60]	; (8010338 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	ed97 0b00 	vldr	d0, [r7]
 8010302:	4798      	blx	r3
 8010304:	4603      	mov	r3, r0
 8010306:	2b00      	cmp	r3, #0
 8010308:	d001      	beq.n	801030e <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x132>
 801030a:	2301      	movs	r3, #1
 801030c:	e000      	b.n	8010310 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x134>
 801030e:	2300      	movs	r3, #0
 8010310:	2b00      	cmp	r3, #0
 8010312:	d005      	beq.n	8010320 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x144>
        message_ += "\n\tCannot make comparisons with Nan";
 8010314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010316:	332c      	adds	r3, #44	; 0x2c
 8010318:	4908      	ldr	r1, [pc, #32]	; (801033c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x160>)
 801031a:	4618      	mov	r0, r3
 801031c:	f7fe fa7a 	bl	800e814 <_ZN12SimpleStringpLEPKc>
}
 8010320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010322:	4618      	mov	r0, r3
 8010324:	3750      	adds	r7, #80	; 0x50
 8010326:	46bd      	mov	sp, r7
 8010328:	bdb0      	pop	{r4, r5, r7, pc}
 801032a:	bf00      	nop
 801032c:	0802a1ac 	.word	0x0802a1ac
 8010330:	080260d0 	.word	0x080260d0
 8010334:	080260e8 	.word	0x080260e8
 8010338:	200000e8 	.word	0x200000e8
 801033c:	080260ec 	.word	0x080260ec

08010340 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckEqualFailure::CheckEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 8010340:	b590      	push	{r4, r7, lr}
 8010342:	b093      	sub	sp, #76	; 0x4c
 8010344:	af02      	add	r7, sp, #8
 8010346:	60f8      	str	r0, [r7, #12]
 8010348:	60b9      	str	r1, [r7, #8]
 801034a:	607a      	str	r2, [r7, #4]
 801034c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 801034e:	68f8      	ldr	r0, [r7, #12]
 8010350:	683b      	ldr	r3, [r7, #0]
 8010352:	687a      	ldr	r2, [r7, #4]
 8010354:	68b9      	ldr	r1, [r7, #8]
 8010356:	f7ff fcb3 	bl	800fcc0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 801035a:	4a4f      	ldr	r2, [pc, #316]	; (8010498 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x158>)
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010366:	68f9      	ldr	r1, [r7, #12]
 8010368:	f107 0320 	add.w	r3, r7, #32
 801036c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801036e:	4618      	mov	r0, r3
 8010370:	f7ff feae 	bl	80100d0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8010374:	f107 0320 	add.w	r3, r7, #32
 8010378:	4619      	mov	r1, r3
 801037a:	4620      	mov	r0, r4
 801037c:	f7fd fe6f 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 8010380:	f107 0320 	add.w	r3, r7, #32
 8010384:	4618      	mov	r0, r3
 8010386:	f7fe f9b6 	bl	800e6f6 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 801038a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801038c:	f7fe f986 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 8010390:	4602      	mov	r2, r0
 8010392:	f107 0318 	add.w	r3, r7, #24
 8010396:	4611      	mov	r1, r2
 8010398:	4618      	mov	r0, r3
 801039a:	f7fe fc47 	bl	800ec2c <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 801039e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80103a0:	f7fe f97c 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 80103a4:	4602      	mov	r2, r0
 80103a6:	f107 0310 	add.w	r3, r7, #16
 80103aa:	4611      	mov	r1, r2
 80103ac:	4618      	mov	r0, r3
 80103ae:	f7fe fc3d 	bl	800ec2c <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80103b8:	68f9      	ldr	r1, [r7, #12]
 80103ba:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80103be:	f107 0310 	add.w	r3, r7, #16
 80103c2:	f107 0218 	add.w	r2, r7, #24
 80103c6:	f7ff fdbd 	bl	800ff44 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 80103ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80103ce:	4619      	mov	r1, r3
 80103d0:	4620      	mov	r0, r4
 80103d2:	f7fe fa0d 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 80103d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80103da:	4618      	mov	r0, r3
 80103dc:	f7fe f98b 	bl	800e6f6 <_ZN12SimpleStringD1Ev>

    size_t failStart;
    for (failStart = 0; actual.at(failStart) == expected.at(failStart); failStart++)
 80103e0:	2300      	movs	r3, #0
 80103e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80103e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80103e6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80103e8:	f7fe fae9 	bl	800e9be <_ZNK12SimpleString2atEj>
 80103ec:	4603      	mov	r3, r0
 80103ee:	461c      	mov	r4, r3
 80103f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80103f2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80103f4:	f7fe fae3 	bl	800e9be <_ZNK12SimpleString2atEj>
 80103f8:	4603      	mov	r3, r0
 80103fa:	429c      	cmp	r4, r3
 80103fc:	bf0c      	ite	eq
 80103fe:	2301      	moveq	r3, #1
 8010400:	2300      	movne	r3, #0
 8010402:	b2db      	uxtb	r3, r3
 8010404:	2b00      	cmp	r3, #0
 8010406:	d003      	beq.n	8010410 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd0>
 8010408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801040a:	3301      	adds	r3, #1
 801040c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801040e:	e7e9      	b.n	80103e4 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xa4>
        ;
    size_t failStartPrintable;
    for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 8010410:	2300      	movs	r3, #0
 8010412:	63bb      	str	r3, [r7, #56]	; 0x38
 8010414:	f107 0310 	add.w	r3, r7, #16
 8010418:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801041a:	4618      	mov	r0, r3
 801041c:	f7fe facf 	bl	800e9be <_ZNK12SimpleString2atEj>
 8010420:	4603      	mov	r3, r0
 8010422:	461c      	mov	r4, r3
 8010424:	f107 0318 	add.w	r3, r7, #24
 8010428:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801042a:	4618      	mov	r0, r3
 801042c:	f7fe fac7 	bl	800e9be <_ZNK12SimpleString2atEj>
 8010430:	4603      	mov	r3, r0
 8010432:	429c      	cmp	r4, r3
 8010434:	bf0c      	ite	eq
 8010436:	2301      	moveq	r3, #1
 8010438:	2300      	movne	r3, #0
 801043a:	b2db      	uxtb	r3, r3
 801043c:	2b00      	cmp	r3, #0
 801043e:	d003      	beq.n	8010448 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x108>
 8010440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010442:	3301      	adds	r3, #1
 8010444:	63bb      	str	r3, [r7, #56]	; 0x38
 8010446:	e7e5      	b.n	8010414 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd4>
        ;
    message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801044e:	68f9      	ldr	r1, [r7, #12]
 8010450:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8010454:	f107 0210 	add.w	r2, r7, #16
 8010458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801045a:	9300      	str	r3, [sp, #0]
 801045c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801045e:	f7ff fd8b 	bl	800ff78 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 8010462:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010466:	4619      	mov	r1, r3
 8010468:	4620      	mov	r0, r4
 801046a:	f7fe f9c1 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801046e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010472:	4618      	mov	r0, r3
 8010474:	f7fe f93f 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 8010478:	f107 0310 	add.w	r3, r7, #16
 801047c:	4618      	mov	r0, r3
 801047e:	f7fe f93a 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 8010482:	f107 0318 	add.w	r3, r7, #24
 8010486:	4618      	mov	r0, r3
 8010488:	f7fe f935 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	4618      	mov	r0, r3
 8010490:	3744      	adds	r7, #68	; 0x44
 8010492:	46bd      	mov	sp, r7
 8010494:	bd90      	pop	{r4, r7, pc}
 8010496:	bf00      	nop
 8010498:	0802a180 	.word	0x0802a180

0801049c <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ComparisonFailure::ComparisonFailure(UtestShell *test, const char *fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString &comparisonString, const SimpleString &text)
 801049c:	b590      	push	{r4, r7, lr}
 801049e:	b087      	sub	sp, #28
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	60f8      	str	r0, [r7, #12]
 80104a4:	60b9      	str	r1, [r7, #8]
 80104a6:	607a      	str	r2, [r7, #4]
 80104a8:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 80104aa:	68f8      	ldr	r0, [r7, #12]
 80104ac:	683b      	ldr	r3, [r7, #0]
 80104ae:	687a      	ldr	r2, [r7, #4]
 80104b0:	68b9      	ldr	r1, [r7, #8]
 80104b2:	f7ff fc05 	bl	800fcc0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 80104b6:	4a1a      	ldr	r2, [pc, #104]	; (8010520 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80104c2:	68f9      	ldr	r1, [r7, #12]
 80104c4:	f107 0310 	add.w	r3, r7, #16
 80104c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80104ca:	4618      	mov	r0, r3
 80104cc:	f7ff fe00 	bl	80100d0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 80104d0:	f107 0310 	add.w	r3, r7, #16
 80104d4:	4619      	mov	r1, r3
 80104d6:	4620      	mov	r0, r4
 80104d8:	f7fd fdc1 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 80104dc:	f107 0310 	add.w	r3, r7, #16
 80104e0:	4618      	mov	r0, r3
 80104e2:	f7fe f908 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    message_ += checkString;
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	332c      	adds	r3, #44	; 0x2c
 80104ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80104ec:	4618      	mov	r0, r3
 80104ee:	f7fe f97f 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	332c      	adds	r3, #44	; 0x2c
 80104f6:	490b      	ldr	r1, [pc, #44]	; (8010524 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 80104f8:	4618      	mov	r0, r3
 80104fa:	f7fe f98b 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    message_ += comparisonString;
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	332c      	adds	r3, #44	; 0x2c
 8010502:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010504:	4618      	mov	r0, r3
 8010506:	f7fe f973 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	332c      	adds	r3, #44	; 0x2c
 801050e:	4906      	ldr	r1, [pc, #24]	; (8010528 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 8010510:	4618      	mov	r0, r3
 8010512:	f7fe f97f 	bl	800e814 <_ZN12SimpleStringpLEPKc>
}
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	4618      	mov	r0, r3
 801051a:	371c      	adds	r7, #28
 801051c:	46bd      	mov	sp, r7
 801051e:	bd90      	pop	{r4, r7, pc}
 8010520:	0802a154 	.word	0x0802a154
 8010524:	08026110 	.word	0x08026110
 8010528:	08026114 	.word	0x08026114

0801052c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ContainsFailure::ContainsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 801052c:	b5b0      	push	{r4, r5, r7, lr}
 801052e:	b088      	sub	sp, #32
 8010530:	af00      	add	r7, sp, #0
 8010532:	60f8      	str	r0, [r7, #12]
 8010534:	60b9      	str	r1, [r7, #8]
 8010536:	607a      	str	r2, [r7, #4]
 8010538:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 801053a:	68f8      	ldr	r0, [r7, #12]
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	687a      	ldr	r2, [r7, #4]
 8010540:	68b9      	ldr	r1, [r7, #8]
 8010542:	f7ff fbbd 	bl	800fcc0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8010546:	4a1c      	ldr	r2, [pc, #112]	; (80105b8 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010552:	68f9      	ldr	r1, [r7, #12]
 8010554:	f107 0310 	add.w	r3, r7, #16
 8010558:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801055a:	4618      	mov	r0, r3
 801055c:	f7ff fdb8 	bl	80100d0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8010560:	f107 0310 	add.w	r3, r7, #16
 8010564:	4619      	mov	r1, r3
 8010566:	4620      	mov	r0, r4
 8010568:	f7fd fd79 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 801056c:	f107 0310 	add.w	r3, r7, #16
 8010570:	4618      	mov	r0, r3
 8010572:	f7fe f8c0 	bl	800e6f6 <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("actual <%s>\n\tdid not contain  <%s>", actual.asCharString(), expected.asCharString());
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801057c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801057e:	f7fe f88d 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 8010582:	4605      	mov	r5, r0
 8010584:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010586:	f7fe f889 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 801058a:	4603      	mov	r3, r0
 801058c:	f107 0018 	add.w	r0, r7, #24
 8010590:	462a      	mov	r2, r5
 8010592:	490a      	ldr	r1, [pc, #40]	; (80105bc <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x90>)
 8010594:	f7fe fdb6 	bl	800f104 <_Z16StringFromFormatPKcz>
 8010598:	f107 0318 	add.w	r3, r7, #24
 801059c:	4619      	mov	r1, r3
 801059e:	4620      	mov	r0, r4
 80105a0:	f7fe f926 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 80105a4:	f107 0318 	add.w	r3, r7, #24
 80105a8:	4618      	mov	r0, r3
 80105aa:	f7fe f8a4 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	4618      	mov	r0, r3
 80105b2:	3720      	adds	r7, #32
 80105b4:	46bd      	mov	sp, r7
 80105b6:	bdb0      	pop	{r4, r5, r7, pc}
 80105b8:	0802a128 	.word	0x0802a128
 80105bc:	08026120 	.word	0x08026120

080105c0 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckFailure::CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& text)
 80105c0:	b590      	push	{r4, r7, lr}
 80105c2:	b087      	sub	sp, #28
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	60f8      	str	r0, [r7, #12]
 80105c8:	60b9      	str	r1, [r7, #8]
 80105ca:	607a      	str	r2, [r7, #4]
 80105cc:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 80105ce:	68f8      	ldr	r0, [r7, #12]
 80105d0:	683b      	ldr	r3, [r7, #0]
 80105d2:	687a      	ldr	r2, [r7, #4]
 80105d4:	68b9      	ldr	r1, [r7, #8]
 80105d6:	f7ff fb73 	bl	800fcc0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 80105da:	4a1a      	ldr	r2, [pc, #104]	; (8010644 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80105e6:	68f9      	ldr	r1, [r7, #12]
 80105e8:	f107 0310 	add.w	r3, r7, #16
 80105ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80105ee:	4618      	mov	r0, r3
 80105f0:	f7ff fd6e 	bl	80100d0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 80105f4:	f107 0310 	add.w	r3, r7, #16
 80105f8:	4619      	mov	r1, r3
 80105fa:	4620      	mov	r0, r4
 80105fc:	f7fd fd2f 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 8010600:	f107 0310 	add.w	r3, r7, #16
 8010604:	4618      	mov	r0, r3
 8010606:	f7fe f876 	bl	800e6f6 <_ZN12SimpleStringD1Ev>

    message_ += checkString;
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	332c      	adds	r3, #44	; 0x2c
 801060e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010610:	4618      	mov	r0, r3
 8010612:	f7fe f8ed 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	332c      	adds	r3, #44	; 0x2c
 801061a:	490b      	ldr	r1, [pc, #44]	; (8010648 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 801061c:	4618      	mov	r0, r3
 801061e:	f7fe f8f9 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    message_ += conditionString;
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	332c      	adds	r3, #44	; 0x2c
 8010626:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010628:	4618      	mov	r0, r3
 801062a:	f7fe f8e1 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	332c      	adds	r3, #44	; 0x2c
 8010632:	4906      	ldr	r1, [pc, #24]	; (801064c <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 8010634:	4618      	mov	r0, r3
 8010636:	f7fe f8ed 	bl	800e814 <_ZN12SimpleStringpLEPKc>
}
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	4618      	mov	r0, r3
 801063e:	371c      	adds	r7, #28
 8010640:	46bd      	mov	sp, r7
 8010642:	bd90      	pop	{r4, r7, pc}
 8010644:	0802a0fc 	.word	0x0802a0fc
 8010648:	08026110 	.word	0x08026110
 801064c:	08026114 	.word	0x08026114

08010650 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>:

FailFailure::FailFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& message) : TestFailure(test, fileName, lineNumber)
 8010650:	b580      	push	{r7, lr}
 8010652:	b084      	sub	sp, #16
 8010654:	af00      	add	r7, sp, #0
 8010656:	60f8      	str	r0, [r7, #12]
 8010658:	60b9      	str	r1, [r7, #8]
 801065a:	607a      	str	r2, [r7, #4]
 801065c:	603b      	str	r3, [r7, #0]
 801065e:	68f8      	ldr	r0, [r7, #12]
 8010660:	683b      	ldr	r3, [r7, #0]
 8010662:	687a      	ldr	r2, [r7, #4]
 8010664:	68b9      	ldr	r1, [r7, #8]
 8010666:	f7ff fb2b 	bl	800fcc0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 801066a:	4a07      	ldr	r2, [pc, #28]	; (8010688 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString+0x38>)
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	601a      	str	r2, [r3, #0]
{
    message_ = message;
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	332c      	adds	r3, #44	; 0x2c
 8010674:	69b9      	ldr	r1, [r7, #24]
 8010676:	4618      	mov	r0, r3
 8010678:	f7fd fcf1 	bl	800e05e <_ZN12SimpleStringaSERKS_>
}
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	4618      	mov	r0, r3
 8010680:	3710      	adds	r7, #16
 8010682:	46bd      	mov	sp, r7
 8010684:	bd80      	pop	{r7, pc}
 8010686:	bf00      	nop
 8010688:	08029db8 	.word	0x08029db8

0801068c <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>:

LongsEqualFailure::LongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, long expected, long actual, const SimpleString& text)
 801068c:	b590      	push	{r4, r7, lr}
 801068e:	b09d      	sub	sp, #116	; 0x74
 8010690:	af00      	add	r7, sp, #0
 8010692:	60f8      	str	r0, [r7, #12]
 8010694:	60b9      	str	r1, [r7, #8]
 8010696:	607a      	str	r2, [r7, #4]
 8010698:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 801069a:	68f8      	ldr	r0, [r7, #12]
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	687a      	ldr	r2, [r7, #4]
 80106a0:	68b9      	ldr	r1, [r7, #8]
 80106a2:	f7ff fb0d 	bl	800fcc0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 80106a6:	4a5d      	ldr	r2, [pc, #372]	; (801081c <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x190>)
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80106b2:	68f9      	ldr	r1, [r7, #12]
 80106b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80106b8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80106bc:	4618      	mov	r0, r3
 80106be:	f7ff fd07 	bl	80100d0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 80106c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80106c6:	4619      	mov	r1, r3
 80106c8:	4620      	mov	r0, r4
 80106ca:	f7fd fcc8 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 80106ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80106d2:	4618      	mov	r0, r3
 80106d4:	f7fe f80f 	bl	800e6f6 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 80106d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80106dc:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80106e0:	4618      	mov	r0, r3
 80106e2:	f7fe fae1 	bl	800eca8 <_Z10StringFroml>
    SimpleString eDecimal = StringFrom(expected);
 80106e6:	f107 0320 	add.w	r3, r7, #32
 80106ea:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80106ee:	4618      	mov	r0, r3
 80106f0:	f7fe fada 	bl	800eca8 <_Z10StringFroml>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 80106f4:	f107 0120 	add.w	r1, r7, #32
 80106f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80106fc:	2220      	movs	r2, #32
 80106fe:	4618      	mov	r0, r3
 8010700:	f7fe f8b6 	bl	800e870 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8010704:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010708:	4945      	ldr	r1, [pc, #276]	; (8010820 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 801070a:	4618      	mov	r0, r3
 801070c:	f7fd fc3b 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8010710:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010714:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8010718:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801071c:	4618      	mov	r0, r3
 801071e:	f7fe f84c 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 8010722:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010726:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801072a:	4618      	mov	r0, r3
 801072c:	f7fe fbd2 	bl	800eed4 <_Z30BracketsFormattedHexStringFroml>
 8010730:	f107 0318 	add.w	r3, r7, #24
 8010734:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8010738:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801073c:	4618      	mov	r0, r3
 801073e:	f7fe f83c 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 8010742:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010746:	4618      	mov	r0, r3
 8010748:	f7fd ffd5 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801074c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010750:	4618      	mov	r0, r3
 8010752:	f7fd ffd0 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8010756:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801075a:	4618      	mov	r0, r3
 801075c:	f7fd ffcb 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8010760:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010764:	492e      	ldr	r1, [pc, #184]	; (8010820 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 8010766:	4618      	mov	r0, r3
 8010768:	f7fd fc0d 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801076c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010770:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010774:	f107 0120 	add.w	r1, r7, #32
 8010778:	4618      	mov	r0, r3
 801077a:	f7fe f81e 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 801077e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010782:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8010786:	4618      	mov	r0, r3
 8010788:	f7fe fba4 	bl	800eed4 <_Z30BracketsFormattedHexStringFroml>
 801078c:	f107 0310 	add.w	r3, r7, #16
 8010790:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8010794:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8010798:	4618      	mov	r0, r3
 801079a:	f7fe f80e 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 801079e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80107a2:	4618      	mov	r0, r3
 80107a4:	f7fd ffa7 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80107a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80107ac:	4618      	mov	r0, r3
 80107ae:	f7fd ffa2 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80107b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80107b6:	4618      	mov	r0, r3
 80107b8:	f7fd ff9d 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80107c2:	68f9      	ldr	r1, [r7, #12]
 80107c4:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80107c8:	f107 0318 	add.w	r3, r7, #24
 80107cc:	f107 0210 	add.w	r2, r7, #16
 80107d0:	f7ff fbb8 	bl	800ff44 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 80107d4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80107d8:	4619      	mov	r1, r3
 80107da:	4620      	mov	r0, r4
 80107dc:	f7fe f808 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 80107e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80107e4:	4618      	mov	r0, r3
 80107e6:	f7fd ff86 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 80107ea:	f107 0310 	add.w	r3, r7, #16
 80107ee:	4618      	mov	r0, r3
 80107f0:	f7fd ff81 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 80107f4:	f107 0318 	add.w	r3, r7, #24
 80107f8:	4618      	mov	r0, r3
 80107fa:	f7fd ff7c 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 80107fe:	f107 0320 	add.w	r3, r7, #32
 8010802:	4618      	mov	r0, r3
 8010804:	f7fd ff77 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 8010808:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801080c:	4618      	mov	r0, r3
 801080e:	f7fd ff72 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	4618      	mov	r0, r3
 8010816:	3774      	adds	r7, #116	; 0x74
 8010818:	46bd      	mov	sp, r7
 801081a:	bd90      	pop	{r4, r7, pc}
 801081c:	0802a0d0 	.word	0x0802a0d0
 8010820:	08026074 	.word	0x08026074

08010824 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>:

UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, const SimpleString& text)
 8010824:	b590      	push	{r4, r7, lr}
 8010826:	b09d      	sub	sp, #116	; 0x74
 8010828:	af00      	add	r7, sp, #0
 801082a:	60f8      	str	r0, [r7, #12]
 801082c:	60b9      	str	r1, [r7, #8]
 801082e:	607a      	str	r2, [r7, #4]
 8010830:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8010832:	68f8      	ldr	r0, [r7, #12]
 8010834:	683b      	ldr	r3, [r7, #0]
 8010836:	687a      	ldr	r2, [r7, #4]
 8010838:	68b9      	ldr	r1, [r7, #8]
 801083a:	f7ff fa41 	bl	800fcc0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 801083e:	4a5d      	ldr	r2, [pc, #372]	; (80109b4 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x190>)
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801084a:	68f9      	ldr	r1, [r7, #12]
 801084c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010850:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010854:	4618      	mov	r0, r3
 8010856:	f7ff fc3b 	bl	80100d0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 801085a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801085e:	4619      	mov	r1, r3
 8010860:	4620      	mov	r0, r4
 8010862:	f7fd fbfc 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 8010866:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801086a:	4618      	mov	r0, r3
 801086c:	f7fd ff43 	bl	800e6f6 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 8010870:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010874:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8010878:	4618      	mov	r0, r3
 801087a:	f7fe fc7d 	bl	800f178 <_Z10StringFromm>
    SimpleString eDecimal = StringFrom(expected);
 801087e:	f107 0320 	add.w	r3, r7, #32
 8010882:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8010886:	4618      	mov	r0, r3
 8010888:	f7fe fc76 	bl	800f178 <_Z10StringFromm>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 801088c:	f107 0120 	add.w	r1, r7, #32
 8010890:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010894:	2220      	movs	r2, #32
 8010896:	4618      	mov	r0, r3
 8010898:	f7fd ffea 	bl	800e870 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 801089c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80108a0:	4945      	ldr	r1, [pc, #276]	; (80109b8 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 80108a2:	4618      	mov	r0, r3
 80108a4:	f7fd fb6f 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80108a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80108ac:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80108b0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80108b4:	4618      	mov	r0, r3
 80108b6:	f7fd ff80 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 80108ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80108be:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80108c2:	4618      	mov	r0, r3
 80108c4:	f7fe fb22 	bl	800ef0c <_Z30BracketsFormattedHexStringFromm>
 80108c8:	f107 0318 	add.w	r3, r7, #24
 80108cc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80108d0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80108d4:	4618      	mov	r0, r3
 80108d6:	f7fd ff70 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 80108da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80108de:	4618      	mov	r0, r3
 80108e0:	f7fd ff09 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80108e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80108e8:	4618      	mov	r0, r3
 80108ea:	f7fd ff04 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80108ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80108f2:	4618      	mov	r0, r3
 80108f4:	f7fd feff 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 80108f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80108fc:	492e      	ldr	r1, [pc, #184]	; (80109b8 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 80108fe:	4618      	mov	r0, r3
 8010900:	f7fd fb41 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8010904:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010908:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801090c:	f107 0120 	add.w	r1, r7, #32
 8010910:	4618      	mov	r0, r3
 8010912:	f7fd ff52 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 8010916:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801091a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 801091e:	4618      	mov	r0, r3
 8010920:	f7fe faf4 	bl	800ef0c <_Z30BracketsFormattedHexStringFromm>
 8010924:	f107 0310 	add.w	r3, r7, #16
 8010928:	f107 0260 	add.w	r2, r7, #96	; 0x60
 801092c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8010930:	4618      	mov	r0, r3
 8010932:	f7fd ff42 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 8010936:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801093a:	4618      	mov	r0, r3
 801093c:	f7fd fedb 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8010940:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010944:	4618      	mov	r0, r3
 8010946:	f7fd fed6 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801094a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801094e:	4618      	mov	r0, r3
 8010950:	f7fd fed1 	bl	800e6f6 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expectedReported, actualReported);
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801095a:	68f9      	ldr	r1, [r7, #12]
 801095c:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8010960:	f107 0318 	add.w	r3, r7, #24
 8010964:	f107 0210 	add.w	r2, r7, #16
 8010968:	f7ff faec 	bl	800ff44 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 801096c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010970:	4619      	mov	r1, r3
 8010972:	4620      	mov	r0, r4
 8010974:	f7fd ff3c 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 8010978:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801097c:	4618      	mov	r0, r3
 801097e:	f7fd feba 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8010982:	f107 0310 	add.w	r3, r7, #16
 8010986:	4618      	mov	r0, r3
 8010988:	f7fd feb5 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 801098c:	f107 0318 	add.w	r3, r7, #24
 8010990:	4618      	mov	r0, r3
 8010992:	f7fd feb0 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 8010996:	f107 0320 	add.w	r3, r7, #32
 801099a:	4618      	mov	r0, r3
 801099c:	f7fd feab 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 80109a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80109a4:	4618      	mov	r0, r3
 80109a6:	f7fd fea6 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	4618      	mov	r0, r3
 80109ae:	3774      	adds	r7, #116	; 0x74
 80109b0:	46bd      	mov	sp, r7
 80109b2:	bd90      	pop	{r4, r7, pc}
 80109b4:	0802a0a4 	.word	0x0802a0a4
 80109b8:	08026074 	.word	0x08026074

080109bc <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>:
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
    message_ += createButWasString(expectedReported, actualReported);
}

SignedBytesEqualFailure::SignedBytesEqualFailure (UtestShell* test, const char* fileName, size_t lineNumber, signed char expected, signed char actual, const SimpleString& text)
 80109bc:	b590      	push	{r4, r7, lr}
 80109be:	b09d      	sub	sp, #116	; 0x74
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	60f8      	str	r0, [r7, #12]
 80109c4:	60b9      	str	r1, [r7, #8]
 80109c6:	607a      	str	r2, [r7, #4]
 80109c8:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 80109ca:	68f8      	ldr	r0, [r7, #12]
 80109cc:	683b      	ldr	r3, [r7, #0]
 80109ce:	687a      	ldr	r2, [r7, #4]
 80109d0:	68b9      	ldr	r1, [r7, #8]
 80109d2:	f7ff f975 	bl	800fcc0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 80109d6:	4a5f      	ldr	r2, [pc, #380]	; (8010b54 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x198>)
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80109e2:	68f9      	ldr	r1, [r7, #12]
 80109e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80109e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80109ec:	4618      	mov	r0, r3
 80109ee:	f7ff fb6f 	bl	80100d0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 80109f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80109f6:	4619      	mov	r1, r3
 80109f8:	4620      	mov	r0, r4
 80109fa:	f7fd fb30 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 80109fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010a02:	4618      	mov	r0, r3
 8010a04:	f7fd fe77 	bl	800e6f6 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom((int)actual);
 8010a08:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 8010a0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010a10:	4611      	mov	r1, r2
 8010a12:	4618      	mov	r0, r3
 8010a14:	f7fe f936 	bl	800ec84 <_Z10StringFromi>
    SimpleString eDecimal = StringFrom((int)expected);
 8010a18:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 8010a1c:	f107 0320 	add.w	r3, r7, #32
 8010a20:	4611      	mov	r1, r2
 8010a22:	4618      	mov	r0, r3
 8010a24:	f7fe f92e 	bl	800ec84 <_Z10StringFromi>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 8010a28:	f107 0120 	add.w	r1, r7, #32
 8010a2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010a30:	2220      	movs	r2, #32
 8010a32:	4618      	mov	r0, r3
 8010a34:	f7fd ff1c 	bl	800e870 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8010a38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010a3c:	4946      	ldr	r1, [pc, #280]	; (8010b58 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 8010a3e:	4618      	mov	r0, r3
 8010a40:	f7fd faa1 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8010a44:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010a48:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8010a4c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010a50:	4618      	mov	r0, r3
 8010a52:	f7fd feb2 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 8010a56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010a5a:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 8010a5e:	4611      	mov	r1, r2
 8010a60:	4618      	mov	r0, r3
 8010a62:	f7fe fa6f 	bl	800ef44 <_Z30BracketsFormattedHexStringFroma>
 8010a66:	f107 0318 	add.w	r3, r7, #24
 8010a6a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8010a6e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8010a72:	4618      	mov	r0, r3
 8010a74:	f7fd fea1 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 8010a78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	f7fd fe3a 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8010a82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010a86:	4618      	mov	r0, r3
 8010a88:	f7fd fe35 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8010a8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010a90:	4618      	mov	r0, r3
 8010a92:	f7fd fe30 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8010a96:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010a9a:	492f      	ldr	r1, [pc, #188]	; (8010b58 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f7fd fa72 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8010aa2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010aa6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010aaa:	f107 0120 	add.w	r1, r7, #32
 8010aae:	4618      	mov	r0, r3
 8010ab0:	f7fd fe83 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 8010ab4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010ab8:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 8010abc:	4611      	mov	r1, r2
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f7fe fa40 	bl	800ef44 <_Z30BracketsFormattedHexStringFroma>
 8010ac4:	f107 0310 	add.w	r3, r7, #16
 8010ac8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8010acc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f7fd fe72 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 8010ad6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010ada:	4618      	mov	r0, r3
 8010adc:	f7fd fe0b 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8010ae0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f7fd fe06 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8010aea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010aee:	4618      	mov	r0, r3
 8010af0:	f7fd fe01 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010afa:	68f9      	ldr	r1, [r7, #12]
 8010afc:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8010b00:	f107 0318 	add.w	r3, r7, #24
 8010b04:	f107 0210 	add.w	r2, r7, #16
 8010b08:	f7ff fa1c 	bl	800ff44 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8010b0c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010b10:	4619      	mov	r1, r3
 8010b12:	4620      	mov	r0, r4
 8010b14:	f7fd fe6c 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 8010b18:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f7fd fdea 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8010b22:	f107 0310 	add.w	r3, r7, #16
 8010b26:	4618      	mov	r0, r3
 8010b28:	f7fd fde5 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8010b2c:	f107 0318 	add.w	r3, r7, #24
 8010b30:	4618      	mov	r0, r3
 8010b32:	f7fd fde0 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom((int)expected);
 8010b36:	f107 0320 	add.w	r3, r7, #32
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	f7fd fddb 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom((int)actual);
 8010b40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010b44:	4618      	mov	r0, r3
 8010b46:	f7fd fdd6 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	3774      	adds	r7, #116	; 0x74
 8010b50:	46bd      	mov	sp, r7
 8010b52:	bd90      	pop	{r4, r7, pc}
 8010b54:	0802a078 	.word	0x0802a078
 8010b58:	08026074 	.word	0x08026074

08010b5c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualFailure::StringEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 8010b5c:	b590      	push	{r4, r7, lr}
 8010b5e:	b093      	sub	sp, #76	; 0x4c
 8010b60:	af02      	add	r7, sp, #8
 8010b62:	60f8      	str	r0, [r7, #12]
 8010b64:	60b9      	str	r1, [r7, #8]
 8010b66:	607a      	str	r2, [r7, #4]
 8010b68:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8010b6a:	68f8      	ldr	r0, [r7, #12]
 8010b6c:	683b      	ldr	r3, [r7, #0]
 8010b6e:	687a      	ldr	r2, [r7, #4]
 8010b70:	68b9      	ldr	r1, [r7, #8]
 8010b72:	f7ff f8a5 	bl	800fcc0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8010b76:	4a4a      	ldr	r2, [pc, #296]	; (8010ca0 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x144>)
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010b82:	68f9      	ldr	r1, [r7, #12]
 8010b84:	f107 0320 	add.w	r3, r7, #32
 8010b88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	f7ff faa0 	bl	80100d0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8010b90:	f107 0320 	add.w	r3, r7, #32
 8010b94:	4619      	mov	r1, r3
 8010b96:	4620      	mov	r0, r4
 8010b98:	f7fd fa61 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 8010b9c:	f107 0320 	add.w	r3, r7, #32
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	f7fd fda8 	bl	800e6f6 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 8010ba6:	f107 0318 	add.w	r3, r7, #24
 8010baa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010bac:	4618      	mov	r0, r3
 8010bae:	f7fe f83d 	bl	800ec2c <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 8010bb2:	f107 0310 	add.w	r3, r7, #16
 8010bb6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010bb8:	4618      	mov	r0, r3
 8010bba:	f7fe f837 	bl	800ec2c <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010bc4:	68f9      	ldr	r1, [r7, #12]
 8010bc6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8010bca:	f107 0310 	add.w	r3, r7, #16
 8010bce:	f107 0218 	add.w	r2, r7, #24
 8010bd2:	f7ff f9b7 	bl	800ff44 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8010bd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010bda:	4619      	mov	r1, r3
 8010bdc:	4620      	mov	r0, r4
 8010bde:	f7fd fe07 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 8010be2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010be6:	4618      	mov	r0, r3
 8010be8:	f7fd fd85 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 8010bec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d046      	beq.n	8010c80 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
 8010bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d043      	beq.n	8010c80 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
    {
        size_t failStart;
        for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010bfc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c00:	4413      	add	r3, r2
 8010c02:	781a      	ldrb	r2, [r3, #0]
 8010c04:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c08:	440b      	add	r3, r1
 8010c0a:	781b      	ldrb	r3, [r3, #0]
 8010c0c:	429a      	cmp	r2, r3
 8010c0e:	d103      	bne.n	8010c18 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xbc>
 8010c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c12:	3301      	adds	r3, #1
 8010c14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c16:	e7f1      	b.n	8010bfc <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 8010c18:	2300      	movs	r3, #0
 8010c1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8010c1c:	f107 0310 	add.w	r3, r7, #16
 8010c20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010c22:	4618      	mov	r0, r3
 8010c24:	f7fd fecb 	bl	800e9be <_ZNK12SimpleString2atEj>
 8010c28:	4603      	mov	r3, r0
 8010c2a:	461c      	mov	r4, r3
 8010c2c:	f107 0318 	add.w	r3, r7, #24
 8010c30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010c32:	4618      	mov	r0, r3
 8010c34:	f7fd fec3 	bl	800e9be <_ZNK12SimpleString2atEj>
 8010c38:	4603      	mov	r3, r0
 8010c3a:	429c      	cmp	r4, r3
 8010c3c:	bf0c      	ite	eq
 8010c3e:	2301      	moveq	r3, #1
 8010c40:	2300      	movne	r3, #0
 8010c42:	b2db      	uxtb	r3, r3
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d003      	beq.n	8010c50 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xf4>
 8010c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c4a:	3301      	adds	r3, #1
 8010c4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8010c4e:	e7e5      	b.n	8010c1c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xc0>
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010c56:	68f9      	ldr	r1, [r7, #12]
 8010c58:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8010c5c:	f107 0210 	add.w	r2, r7, #16
 8010c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c62:	9300      	str	r3, [sp, #0]
 8010c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c66:	f7ff f987 	bl	800ff78 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 8010c6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010c6e:	4619      	mov	r1, r3
 8010c70:	4620      	mov	r0, r4
 8010c72:	f7fd fdbd 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 8010c76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	f7fd fd3b 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 8010c80:	f107 0310 	add.w	r3, r7, #16
 8010c84:	4618      	mov	r0, r3
 8010c86:	f7fd fd36 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 8010c8a:	f107 0318 	add.w	r3, r7, #24
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f7fd fd31 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    }
}
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	4618      	mov	r0, r3
 8010c98:	3744      	adds	r7, #68	; 0x44
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	bd90      	pop	{r4, r7, pc}
 8010c9e:	bf00      	nop
 8010ca0:	0802a04c 	.word	0x0802a04c

08010ca4 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 8010ca4:	b590      	push	{r4, r7, lr}
 8010ca6:	b093      	sub	sp, #76	; 0x4c
 8010ca8:	af02      	add	r7, sp, #8
 8010caa:	60f8      	str	r0, [r7, #12]
 8010cac:	60b9      	str	r1, [r7, #8]
 8010cae:	607a      	str	r2, [r7, #4]
 8010cb0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8010cb2:	68f8      	ldr	r0, [r7, #12]
 8010cb4:	683b      	ldr	r3, [r7, #0]
 8010cb6:	687a      	ldr	r2, [r7, #4]
 8010cb8:	68b9      	ldr	r1, [r7, #8]
 8010cba:	f7ff f801 	bl	800fcc0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8010cbe:	4a55      	ldr	r2, [pc, #340]	; (8010e14 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x170>)
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010cca:	68f9      	ldr	r1, [r7, #12]
 8010ccc:	f107 0320 	add.w	r3, r7, #32
 8010cd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f7ff f9fc 	bl	80100d0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8010cd8:	f107 0320 	add.w	r3, r7, #32
 8010cdc:	4619      	mov	r1, r3
 8010cde:	4620      	mov	r0, r4
 8010ce0:	f7fd f9bd 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 8010ce4:	f107 0320 	add.w	r3, r7, #32
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f7fd fd04 	bl	800e6f6 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 8010cee:	f107 0318 	add.w	r3, r7, #24
 8010cf2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	f7fd ff99 	bl	800ec2c <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 8010cfa:	f107 0310 	add.w	r3, r7, #16
 8010cfe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010d00:	4618      	mov	r0, r3
 8010d02:	f7fd ff93 	bl	800ec2c <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010d0c:	68f9      	ldr	r1, [r7, #12]
 8010d0e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8010d12:	f107 0310 	add.w	r3, r7, #16
 8010d16:	f107 0218 	add.w	r2, r7, #24
 8010d1a:	f7ff f913 	bl	800ff44 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8010d1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010d22:	4619      	mov	r1, r3
 8010d24:	4620      	mov	r0, r4
 8010d26:	f7fd fd63 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 8010d2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f7fd fce1 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 8010d34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d05c      	beq.n	8010df4 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
 8010d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d059      	beq.n	8010df4 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
    {
        size_t failStart;
        for (failStart = 0; SimpleString::ToLower(actual[failStart]) == SimpleString::ToLower(expected[failStart]); failStart++)
 8010d40:	2300      	movs	r3, #0
 8010d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010d44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d48:	4413      	add	r3, r2
 8010d4a:	781b      	ldrb	r3, [r3, #0]
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	f7fd f824 	bl	800dd9a <_ZN12SimpleString7ToLowerEc>
 8010d52:	4603      	mov	r3, r0
 8010d54:	461c      	mov	r4, r3
 8010d56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d5a:	4413      	add	r3, r2
 8010d5c:	781b      	ldrb	r3, [r3, #0]
 8010d5e:	4618      	mov	r0, r3
 8010d60:	f7fd f81b 	bl	800dd9a <_ZN12SimpleString7ToLowerEc>
 8010d64:	4603      	mov	r3, r0
 8010d66:	429c      	cmp	r4, r3
 8010d68:	bf0c      	ite	eq
 8010d6a:	2301      	moveq	r3, #1
 8010d6c:	2300      	movne	r3, #0
 8010d6e:	b2db      	uxtb	r3, r3
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d003      	beq.n	8010d7c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xd8>
 8010d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d76:	3301      	adds	r3, #1
 8010d78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010d7a:	e7e3      	b.n	8010d44 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0;
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	63bb      	str	r3, [r7, #56]	; 0x38
             SimpleString::ToLower(printableActual.at(failStartPrintable)) == SimpleString::ToLower(printableExpected.at(failStartPrintable));
 8010d80:	f107 0310 	add.w	r3, r7, #16
 8010d84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010d86:	4618      	mov	r0, r3
 8010d88:	f7fd fe19 	bl	800e9be <_ZNK12SimpleString2atEj>
 8010d8c:	4603      	mov	r3, r0
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f7fd f803 	bl	800dd9a <_ZN12SimpleString7ToLowerEc>
 8010d94:	4603      	mov	r3, r0
 8010d96:	461c      	mov	r4, r3
 8010d98:	f107 0318 	add.w	r3, r7, #24
 8010d9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010d9e:	4618      	mov	r0, r3
 8010da0:	f7fd fe0d 	bl	800e9be <_ZNK12SimpleString2atEj>
 8010da4:	4603      	mov	r3, r0
 8010da6:	4618      	mov	r0, r3
 8010da8:	f7fc fff7 	bl	800dd9a <_ZN12SimpleString7ToLowerEc>
 8010dac:	4603      	mov	r3, r0
 8010dae:	429c      	cmp	r4, r3
 8010db0:	bf0c      	ite	eq
 8010db2:	2301      	moveq	r3, #1
 8010db4:	2300      	movne	r3, #0
 8010db6:	b2db      	uxtb	r3, r3
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d003      	beq.n	8010dc4 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x120>
        for (failStartPrintable = 0;
 8010dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dbe:	3301      	adds	r3, #1
 8010dc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8010dc2:	e7dd      	b.n	8010d80 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xdc>
             failStartPrintable++)
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010dca:	68f9      	ldr	r1, [r7, #12]
 8010dcc:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8010dd0:	f107 0210 	add.w	r2, r7, #16
 8010dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dd6:	9300      	str	r3, [sp, #0]
 8010dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dda:	f7ff f8cd 	bl	800ff78 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 8010dde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010de2:	4619      	mov	r1, r3
 8010de4:	4620      	mov	r0, r4
 8010de6:	f7fd fd03 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 8010dea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010dee:	4618      	mov	r0, r3
 8010df0:	f7fd fc81 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 8010df4:	f107 0310 	add.w	r3, r7, #16
 8010df8:	4618      	mov	r0, r3
 8010dfa:	f7fd fc7c 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 8010dfe:	f107 0318 	add.w	r3, r7, #24
 8010e02:	4618      	mov	r0, r3
 8010e04:	f7fd fc77 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    }
}
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	3744      	adds	r7, #68	; 0x44
 8010e0e:	46bd      	mov	sp, r7
 8010e10:	bd90      	pop	{r4, r7, pc}
 8010e12:	bf00      	nop
 8010e14:	0802a020 	.word	0x0802a020

08010e18 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>:

BinaryEqualFailure::BinaryEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const unsigned char* expected,
 8010e18:	b5b0      	push	{r4, r5, r7, lr}
 8010e1a:	b092      	sub	sp, #72	; 0x48
 8010e1c:	af02      	add	r7, sp, #8
 8010e1e:	60f8      	str	r0, [r7, #12]
 8010e20:	60b9      	str	r1, [r7, #8]
 8010e22:	607a      	str	r2, [r7, #4]
 8010e24:	603b      	str	r3, [r7, #0]
                                       const unsigned char* actual, size_t size, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 8010e26:	68f8      	ldr	r0, [r7, #12]
 8010e28:	683b      	ldr	r3, [r7, #0]
 8010e2a:	687a      	ldr	r2, [r7, #4]
 8010e2c:	68b9      	ldr	r1, [r7, #8]
 8010e2e:	f7fe ff47 	bl	800fcc0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8010e32:	4a40      	ldr	r2, [pc, #256]	; (8010f34 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x11c>)
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010e3e:	68f9      	ldr	r1, [r7, #12]
 8010e40:	f107 031c 	add.w	r3, r7, #28
 8010e44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010e46:	4618      	mov	r0, r3
 8010e48:	f7ff f942 	bl	80100d0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8010e4c:	f107 031c 	add.w	r3, r7, #28
 8010e50:	4619      	mov	r1, r3
 8010e52:	4620      	mov	r0, r4
 8010e54:	f7fd f903 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 8010e58:	f107 031c 	add.w	r3, r7, #28
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	f7fd fc4a 	bl	800e6f6 <_ZN12SimpleStringD1Ev>

    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 8010e62:	f107 0314 	add.w	r3, r7, #20
 8010e66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010e68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	f7fe fa4c 	bl	800f308 <_Z22StringFromBinaryOrNullPKhj>

	message_ += createButWasString(StringFromBinaryOrNull(expected, size), actualHex);
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010e76:	68fd      	ldr	r5, [r7, #12]
 8010e78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010e7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010e7e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010e80:	4618      	mov	r0, r3
 8010e82:	f7fe fa41 	bl	800f308 <_Z22StringFromBinaryOrNullPKhj>
 8010e86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010e8a:	f107 0314 	add.w	r3, r7, #20
 8010e8e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8010e92:	4629      	mov	r1, r5
 8010e94:	f7ff f856 	bl	800ff44 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8010e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010e9c:	4619      	mov	r1, r3
 8010e9e:	4620      	mov	r0, r4
 8010ea0:	f7fd fca6 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 8010ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	f7fd fc24 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8010eae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	f7fd fc1f 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
	if ((expected) && (actual))
 8010eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d02f      	beq.n	8010f1e <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
 8010ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d02c      	beq.n	8010f1e <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
	{
		size_t failStart;
		for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ec8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ecc:	4413      	add	r3, r2
 8010ece:	781a      	ldrb	r2, [r3, #0]
 8010ed0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ed4:	440b      	add	r3, r1
 8010ed6:	781b      	ldrb	r3, [r3, #0]
 8010ed8:	429a      	cmp	r2, r3
 8010eda:	d103      	bne.n	8010ee4 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xcc>
 8010edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ede:	3301      	adds	r3, #1
 8010ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ee2:	e7f1      	b.n	8010ec8 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xb0>
			;
		message_ += createDifferenceAtPosString(actualHex, (failStart * 3 + 1), failStart);
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010eea:	68f9      	ldr	r1, [r7, #12]
 8010eec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010eee:	4613      	mov	r3, r2
 8010ef0:	005b      	lsls	r3, r3, #1
 8010ef2:	4413      	add	r3, r2
 8010ef4:	1c5d      	adds	r5, r3, #1
 8010ef6:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8010efa:	f107 0214 	add.w	r2, r7, #20
 8010efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f00:	9300      	str	r3, [sp, #0]
 8010f02:	462b      	mov	r3, r5
 8010f04:	f7ff f838 	bl	800ff78 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 8010f08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010f0c:	4619      	mov	r1, r3
 8010f0e:	4620      	mov	r0, r4
 8010f10:	f7fd fc6e 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 8010f14:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010f18:	4618      	mov	r0, r3
 8010f1a:	f7fd fbec 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 8010f1e:	f107 0314 	add.w	r3, r7, #20
 8010f22:	4618      	mov	r0, r3
 8010f24:	f7fd fbe7 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
	}
}
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	3740      	adds	r7, #64	; 0x40
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	bdb0      	pop	{r4, r5, r7, pc}
 8010f32:	bf00      	nop
 8010f34:	08029ff4 	.word	0x08029ff4

08010f38 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>:

BitsEqualFailure::BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual,
 8010f38:	b5b0      	push	{r4, r5, r7, lr}
 8010f3a:	b08c      	sub	sp, #48	; 0x30
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	60f8      	str	r0, [r7, #12]
 8010f40:	60b9      	str	r1, [r7, #8]
 8010f42:	607a      	str	r2, [r7, #4]
 8010f44:	603b      	str	r3, [r7, #0]
                                   unsigned long mask, size_t byteCount, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 8010f46:	68f8      	ldr	r0, [r7, #12]
 8010f48:	683b      	ldr	r3, [r7, #0]
 8010f4a:	687a      	ldr	r2, [r7, #4]
 8010f4c:	68b9      	ldr	r1, [r7, #8]
 8010f4e:	f7fe feb7 	bl	800fcc0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8010f52:	4a26      	ldr	r2, [pc, #152]	; (8010fec <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString+0xb4>)
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010f5e:	68f9      	ldr	r1, [r7, #12]
 8010f60:	f107 0310 	add.w	r3, r7, #16
 8010f64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010f66:	4618      	mov	r0, r3
 8010f68:	f7ff f8b2 	bl	80100d0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8010f6c:	f107 0310 	add.w	r3, r7, #16
 8010f70:	4619      	mov	r1, r3
 8010f72:	4620      	mov	r0, r4
 8010f74:	f7fd f873 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 8010f78:	f107 0310 	add.w	r3, r7, #16
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	f7fd fbba 	bl	800e6f6 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFromMaskedBits(expected, mask, byteCount), StringFromMaskedBits(actual, mask, byteCount));
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8010f88:	68fd      	ldr	r5, [r7, #12]
 8010f8a:	f107 0020 	add.w	r0, r7, #32
 8010f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010f92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010f94:	f7fe fa24 	bl	800f3e0 <_Z20StringFromMaskedBitsmmj>
 8010f98:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8010f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010fa0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010fa2:	f7fe fa1d 	bl	800f3e0 <_Z20StringFromMaskedBitsmmj>
 8010fa6:	f107 0018 	add.w	r0, r7, #24
 8010faa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010fae:	f107 0220 	add.w	r2, r7, #32
 8010fb2:	4629      	mov	r1, r5
 8010fb4:	f7fe ffc6 	bl	800ff44 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8010fb8:	f107 0318 	add.w	r3, r7, #24
 8010fbc:	4619      	mov	r1, r3
 8010fbe:	4620      	mov	r0, r4
 8010fc0:	f7fd fc16 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 8010fc4:	f107 0318 	add.w	r3, r7, #24
 8010fc8:	4618      	mov	r0, r3
 8010fca:	f7fd fb94 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8010fce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f7fd fb8f 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8010fd8:	f107 0320 	add.w	r3, r7, #32
 8010fdc:	4618      	mov	r0, r3
 8010fde:	f7fd fb8a 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	3730      	adds	r7, #48	; 0x30
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	bdb0      	pop	{r4, r5, r7, pc}
 8010fec:	08029fc8 	.word	0x08029fc8

08010ff0 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>:

FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell* test, const char* fileName, size_t lineNumber,
 8010ff0:	b590      	push	{r4, r7, lr}
 8010ff2:	b089      	sub	sp, #36	; 0x24
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	60f8      	str	r0, [r7, #12]
 8010ff8:	60b9      	str	r1, [r7, #8]
 8010ffa:	607a      	str	r2, [r7, #4]
 8010ffc:	603b      	str	r3, [r7, #0]
                                                     const SimpleString& featureName, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 8010ffe:	68f8      	ldr	r0, [r7, #12]
 8011000:	683b      	ldr	r3, [r7, #0]
 8011002:	687a      	ldr	r2, [r7, #4]
 8011004:	68b9      	ldr	r1, [r7, #8]
 8011006:	f7fe fe5b 	bl	800fcc0 <_ZN11TestFailureC1EP10UtestShellPKcj>
 801100a:	4a1a      	ldr	r2, [pc, #104]	; (8011074 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x84>)
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011016:	68f9      	ldr	r1, [r7, #12]
 8011018:	f107 0310 	add.w	r3, r7, #16
 801101c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801101e:	4618      	mov	r0, r3
 8011020:	f7ff f856 	bl	80100d0 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8011024:	f107 0310 	add.w	r3, r7, #16
 8011028:	4619      	mov	r1, r3
 801102a:	4620      	mov	r0, r4
 801102c:	f7fd f817 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 8011030:	f107 0310 	add.w	r3, r7, #16
 8011034:	4618      	mov	r0, r3
 8011036:	f7fd fb5e 	bl	800e6f6 <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("The feature \"%s\" is not supported in this environment or with the feature set selected when building the library.", featureName.asCharString());
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011040:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011042:	f7fd fb2b 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 8011046:	4602      	mov	r2, r0
 8011048:	f107 0318 	add.w	r3, r7, #24
 801104c:	490a      	ldr	r1, [pc, #40]	; (8011078 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x88>)
 801104e:	4618      	mov	r0, r3
 8011050:	f7fe f858 	bl	800f104 <_Z16StringFromFormatPKcz>
 8011054:	f107 0318 	add.w	r3, r7, #24
 8011058:	4619      	mov	r1, r3
 801105a:	4620      	mov	r0, r4
 801105c:	f7fd fbc8 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 8011060:	f107 0318 	add.w	r3, r7, #24
 8011064:	4618      	mov	r0, r3
 8011066:	f7fd fb46 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	4618      	mov	r0, r3
 801106e:	3724      	adds	r7, #36	; 0x24
 8011070:	46bd      	mov	sp, r7
 8011072:	bd90      	pop	{r4, r7, pc}
 8011074:	08029f9c 	.word	0x08029f9c
 8011078:	08026144 	.word	0x08026144

0801107c <_ZN25FeatureUnsupportedFailureD1Ev>:
{
public:
	BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const SimpleString& text);
};

class FeatureUnsupportedFailure : public TestFailure
 801107c:	b580      	push	{r7, lr}
 801107e:	b082      	sub	sp, #8
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
 8011084:	4a05      	ldr	r2, [pc, #20]	; (801109c <_ZN25FeatureUnsupportedFailureD1Ev+0x20>)
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	601a      	str	r2, [r3, #0]
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	4618      	mov	r0, r3
 801108e:	f7fe fe99 	bl	800fdc4 <_ZN11TestFailureD1Ev>
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	4618      	mov	r0, r3
 8011096:	3708      	adds	r7, #8
 8011098:	46bd      	mov	sp, r7
 801109a:	bd80      	pop	{r7, pc}
 801109c:	08029f9c 	.word	0x08029f9c

080110a0 <_ZN25FeatureUnsupportedFailureD0Ev>:
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b082      	sub	sp, #8
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
 80110a8:	6878      	ldr	r0, [r7, #4]
 80110aa:	f7ff ffe7 	bl	801107c <_ZN25FeatureUnsupportedFailureD1Ev>
 80110ae:	2134      	movs	r1, #52	; 0x34
 80110b0:	6878      	ldr	r0, [r7, #4]
 80110b2:	f7fa fbb9 	bl	800b828 <_ZdlPvj>
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	4618      	mov	r0, r3
 80110ba:	3708      	adds	r7, #8
 80110bc:	46bd      	mov	sp, r7
 80110be:	bd80      	pop	{r7, pc}

080110c0 <_ZN16BitsEqualFailureD1Ev>:
class BitsEqualFailure : public TestFailure
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b082      	sub	sp, #8
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
 80110c8:	4a05      	ldr	r2, [pc, #20]	; (80110e0 <_ZN16BitsEqualFailureD1Ev+0x20>)
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	601a      	str	r2, [r3, #0]
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	4618      	mov	r0, r3
 80110d2:	f7fe fe77 	bl	800fdc4 <_ZN11TestFailureD1Ev>
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	4618      	mov	r0, r3
 80110da:	3708      	adds	r7, #8
 80110dc:	46bd      	mov	sp, r7
 80110de:	bd80      	pop	{r7, pc}
 80110e0:	08029fc8 	.word	0x08029fc8

080110e4 <_ZN16BitsEqualFailureD0Ev>:
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b082      	sub	sp, #8
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
 80110ec:	6878      	ldr	r0, [r7, #4]
 80110ee:	f7ff ffe7 	bl	80110c0 <_ZN16BitsEqualFailureD1Ev>
 80110f2:	2134      	movs	r1, #52	; 0x34
 80110f4:	6878      	ldr	r0, [r7, #4]
 80110f6:	f7fa fb97 	bl	800b828 <_ZdlPvj>
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	4618      	mov	r0, r3
 80110fe:	3708      	adds	r7, #8
 8011100:	46bd      	mov	sp, r7
 8011102:	bd80      	pop	{r7, pc}

08011104 <_ZN18BinaryEqualFailureD1Ev>:
class BinaryEqualFailure : public TestFailure
 8011104:	b580      	push	{r7, lr}
 8011106:	b082      	sub	sp, #8
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
 801110c:	4a05      	ldr	r2, [pc, #20]	; (8011124 <_ZN18BinaryEqualFailureD1Ev+0x20>)
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	601a      	str	r2, [r3, #0]
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	4618      	mov	r0, r3
 8011116:	f7fe fe55 	bl	800fdc4 <_ZN11TestFailureD1Ev>
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	4618      	mov	r0, r3
 801111e:	3708      	adds	r7, #8
 8011120:	46bd      	mov	sp, r7
 8011122:	bd80      	pop	{r7, pc}
 8011124:	08029ff4 	.word	0x08029ff4

08011128 <_ZN18BinaryEqualFailureD0Ev>:
 8011128:	b580      	push	{r7, lr}
 801112a:	b082      	sub	sp, #8
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
 8011130:	6878      	ldr	r0, [r7, #4]
 8011132:	f7ff ffe7 	bl	8011104 <_ZN18BinaryEqualFailureD1Ev>
 8011136:	2134      	movs	r1, #52	; 0x34
 8011138:	6878      	ldr	r0, [r7, #4]
 801113a:	f7fa fb75 	bl	800b828 <_ZdlPvj>
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	4618      	mov	r0, r3
 8011142:	3708      	adds	r7, #8
 8011144:	46bd      	mov	sp, r7
 8011146:	bd80      	pop	{r7, pc}

08011148 <_ZN24StringEqualNoCaseFailureD1Ev>:
class StringEqualNoCaseFailure : public TestFailure
 8011148:	b580      	push	{r7, lr}
 801114a:	b082      	sub	sp, #8
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
 8011150:	4a05      	ldr	r2, [pc, #20]	; (8011168 <_ZN24StringEqualNoCaseFailureD1Ev+0x20>)
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	601a      	str	r2, [r3, #0]
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	4618      	mov	r0, r3
 801115a:	f7fe fe33 	bl	800fdc4 <_ZN11TestFailureD1Ev>
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	4618      	mov	r0, r3
 8011162:	3708      	adds	r7, #8
 8011164:	46bd      	mov	sp, r7
 8011166:	bd80      	pop	{r7, pc}
 8011168:	0802a020 	.word	0x0802a020

0801116c <_ZN24StringEqualNoCaseFailureD0Ev>:
 801116c:	b580      	push	{r7, lr}
 801116e:	b082      	sub	sp, #8
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
 8011174:	6878      	ldr	r0, [r7, #4]
 8011176:	f7ff ffe7 	bl	8011148 <_ZN24StringEqualNoCaseFailureD1Ev>
 801117a:	2134      	movs	r1, #52	; 0x34
 801117c:	6878      	ldr	r0, [r7, #4]
 801117e:	f7fa fb53 	bl	800b828 <_ZdlPvj>
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	4618      	mov	r0, r3
 8011186:	3708      	adds	r7, #8
 8011188:	46bd      	mov	sp, r7
 801118a:	bd80      	pop	{r7, pc}

0801118c <_ZN18StringEqualFailureD1Ev>:
class StringEqualFailure : public TestFailure
 801118c:	b580      	push	{r7, lr}
 801118e:	b082      	sub	sp, #8
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
 8011194:	4a05      	ldr	r2, [pc, #20]	; (80111ac <_ZN18StringEqualFailureD1Ev+0x20>)
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	601a      	str	r2, [r3, #0]
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	4618      	mov	r0, r3
 801119e:	f7fe fe11 	bl	800fdc4 <_ZN11TestFailureD1Ev>
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	4618      	mov	r0, r3
 80111a6:	3708      	adds	r7, #8
 80111a8:	46bd      	mov	sp, r7
 80111aa:	bd80      	pop	{r7, pc}
 80111ac:	0802a04c 	.word	0x0802a04c

080111b0 <_ZN18StringEqualFailureD0Ev>:
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b082      	sub	sp, #8
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
 80111b8:	6878      	ldr	r0, [r7, #4]
 80111ba:	f7ff ffe7 	bl	801118c <_ZN18StringEqualFailureD1Ev>
 80111be:	2134      	movs	r1, #52	; 0x34
 80111c0:	6878      	ldr	r0, [r7, #4]
 80111c2:	f7fa fb31 	bl	800b828 <_ZdlPvj>
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	4618      	mov	r0, r3
 80111ca:	3708      	adds	r7, #8
 80111cc:	46bd      	mov	sp, r7
 80111ce:	bd80      	pop	{r7, pc}

080111d0 <_ZN23SignedBytesEqualFailureD1Ev>:
class SignedBytesEqualFailure : public TestFailure
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b082      	sub	sp, #8
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
 80111d8:	4a05      	ldr	r2, [pc, #20]	; (80111f0 <_ZN23SignedBytesEqualFailureD1Ev+0x20>)
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	601a      	str	r2, [r3, #0]
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	4618      	mov	r0, r3
 80111e2:	f7fe fdef 	bl	800fdc4 <_ZN11TestFailureD1Ev>
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	4618      	mov	r0, r3
 80111ea:	3708      	adds	r7, #8
 80111ec:	46bd      	mov	sp, r7
 80111ee:	bd80      	pop	{r7, pc}
 80111f0:	0802a078 	.word	0x0802a078

080111f4 <_ZN23SignedBytesEqualFailureD0Ev>:
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b082      	sub	sp, #8
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
 80111fc:	6878      	ldr	r0, [r7, #4]
 80111fe:	f7ff ffe7 	bl	80111d0 <_ZN23SignedBytesEqualFailureD1Ev>
 8011202:	2134      	movs	r1, #52	; 0x34
 8011204:	6878      	ldr	r0, [r7, #4]
 8011206:	f7fa fb0f 	bl	800b828 <_ZdlPvj>
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	4618      	mov	r0, r3
 801120e:	3708      	adds	r7, #8
 8011210:	46bd      	mov	sp, r7
 8011212:	bd80      	pop	{r7, pc}

08011214 <_ZN25UnsignedLongsEqualFailureD1Ev>:
class UnsignedLongsEqualFailure : public TestFailure
 8011214:	b580      	push	{r7, lr}
 8011216:	b082      	sub	sp, #8
 8011218:	af00      	add	r7, sp, #0
 801121a:	6078      	str	r0, [r7, #4]
 801121c:	4a05      	ldr	r2, [pc, #20]	; (8011234 <_ZN25UnsignedLongsEqualFailureD1Ev+0x20>)
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	601a      	str	r2, [r3, #0]
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	4618      	mov	r0, r3
 8011226:	f7fe fdcd 	bl	800fdc4 <_ZN11TestFailureD1Ev>
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	4618      	mov	r0, r3
 801122e:	3708      	adds	r7, #8
 8011230:	46bd      	mov	sp, r7
 8011232:	bd80      	pop	{r7, pc}
 8011234:	0802a0a4 	.word	0x0802a0a4

08011238 <_ZN25UnsignedLongsEqualFailureD0Ev>:
 8011238:	b580      	push	{r7, lr}
 801123a:	b082      	sub	sp, #8
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
 8011240:	6878      	ldr	r0, [r7, #4]
 8011242:	f7ff ffe7 	bl	8011214 <_ZN25UnsignedLongsEqualFailureD1Ev>
 8011246:	2134      	movs	r1, #52	; 0x34
 8011248:	6878      	ldr	r0, [r7, #4]
 801124a:	f7fa faed 	bl	800b828 <_ZdlPvj>
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	4618      	mov	r0, r3
 8011252:	3708      	adds	r7, #8
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}

08011258 <_ZN17LongsEqualFailureD1Ev>:
class LongsEqualFailure : public TestFailure
 8011258:	b580      	push	{r7, lr}
 801125a:	b082      	sub	sp, #8
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
 8011260:	4a05      	ldr	r2, [pc, #20]	; (8011278 <_ZN17LongsEqualFailureD1Ev+0x20>)
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	601a      	str	r2, [r3, #0]
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	4618      	mov	r0, r3
 801126a:	f7fe fdab 	bl	800fdc4 <_ZN11TestFailureD1Ev>
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	4618      	mov	r0, r3
 8011272:	3708      	adds	r7, #8
 8011274:	46bd      	mov	sp, r7
 8011276:	bd80      	pop	{r7, pc}
 8011278:	0802a0d0 	.word	0x0802a0d0

0801127c <_ZN17LongsEqualFailureD0Ev>:
 801127c:	b580      	push	{r7, lr}
 801127e:	b082      	sub	sp, #8
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
 8011284:	6878      	ldr	r0, [r7, #4]
 8011286:	f7ff ffe7 	bl	8011258 <_ZN17LongsEqualFailureD1Ev>
 801128a:	2134      	movs	r1, #52	; 0x34
 801128c:	6878      	ldr	r0, [r7, #4]
 801128e:	f7fa facb 	bl	800b828 <_ZdlPvj>
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	4618      	mov	r0, r3
 8011296:	3708      	adds	r7, #8
 8011298:	46bd      	mov	sp, r7
 801129a:	bd80      	pop	{r7, pc}

0801129c <_ZN12CheckFailureD1Ev>:
class CheckFailure : public TestFailure
 801129c:	b580      	push	{r7, lr}
 801129e:	b082      	sub	sp, #8
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
 80112a4:	4a05      	ldr	r2, [pc, #20]	; (80112bc <_ZN12CheckFailureD1Ev+0x20>)
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	601a      	str	r2, [r3, #0]
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	4618      	mov	r0, r3
 80112ae:	f7fe fd89 	bl	800fdc4 <_ZN11TestFailureD1Ev>
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	4618      	mov	r0, r3
 80112b6:	3708      	adds	r7, #8
 80112b8:	46bd      	mov	sp, r7
 80112ba:	bd80      	pop	{r7, pc}
 80112bc:	0802a0fc 	.word	0x0802a0fc

080112c0 <_ZN12CheckFailureD0Ev>:
 80112c0:	b580      	push	{r7, lr}
 80112c2:	b082      	sub	sp, #8
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]
 80112c8:	6878      	ldr	r0, [r7, #4]
 80112ca:	f7ff ffe7 	bl	801129c <_ZN12CheckFailureD1Ev>
 80112ce:	2134      	movs	r1, #52	; 0x34
 80112d0:	6878      	ldr	r0, [r7, #4]
 80112d2:	f7fa faa9 	bl	800b828 <_ZdlPvj>
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	4618      	mov	r0, r3
 80112da:	3708      	adds	r7, #8
 80112dc:	46bd      	mov	sp, r7
 80112de:	bd80      	pop	{r7, pc}

080112e0 <_ZN15ContainsFailureD1Ev>:
class ContainsFailure: public TestFailure
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b082      	sub	sp, #8
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
 80112e8:	4a05      	ldr	r2, [pc, #20]	; (8011300 <_ZN15ContainsFailureD1Ev+0x20>)
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	601a      	str	r2, [r3, #0]
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	4618      	mov	r0, r3
 80112f2:	f7fe fd67 	bl	800fdc4 <_ZN11TestFailureD1Ev>
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	4618      	mov	r0, r3
 80112fa:	3708      	adds	r7, #8
 80112fc:	46bd      	mov	sp, r7
 80112fe:	bd80      	pop	{r7, pc}
 8011300:	0802a128 	.word	0x0802a128

08011304 <_ZN15ContainsFailureD0Ev>:
 8011304:	b580      	push	{r7, lr}
 8011306:	b082      	sub	sp, #8
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
 801130c:	6878      	ldr	r0, [r7, #4]
 801130e:	f7ff ffe7 	bl	80112e0 <_ZN15ContainsFailureD1Ev>
 8011312:	2134      	movs	r1, #52	; 0x34
 8011314:	6878      	ldr	r0, [r7, #4]
 8011316:	f7fa fa87 	bl	800b828 <_ZdlPvj>
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	4618      	mov	r0, r3
 801131e:	3708      	adds	r7, #8
 8011320:	46bd      	mov	sp, r7
 8011322:	bd80      	pop	{r7, pc}

08011324 <_ZN17ComparisonFailureD1Ev>:
class ComparisonFailure : public TestFailure
 8011324:	b580      	push	{r7, lr}
 8011326:	b082      	sub	sp, #8
 8011328:	af00      	add	r7, sp, #0
 801132a:	6078      	str	r0, [r7, #4]
 801132c:	4a05      	ldr	r2, [pc, #20]	; (8011344 <_ZN17ComparisonFailureD1Ev+0x20>)
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	601a      	str	r2, [r3, #0]
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	4618      	mov	r0, r3
 8011336:	f7fe fd45 	bl	800fdc4 <_ZN11TestFailureD1Ev>
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	4618      	mov	r0, r3
 801133e:	3708      	adds	r7, #8
 8011340:	46bd      	mov	sp, r7
 8011342:	bd80      	pop	{r7, pc}
 8011344:	0802a154 	.word	0x0802a154

08011348 <_ZN17ComparisonFailureD0Ev>:
 8011348:	b580      	push	{r7, lr}
 801134a:	b082      	sub	sp, #8
 801134c:	af00      	add	r7, sp, #0
 801134e:	6078      	str	r0, [r7, #4]
 8011350:	6878      	ldr	r0, [r7, #4]
 8011352:	f7ff ffe7 	bl	8011324 <_ZN17ComparisonFailureD1Ev>
 8011356:	2134      	movs	r1, #52	; 0x34
 8011358:	6878      	ldr	r0, [r7, #4]
 801135a:	f7fa fa65 	bl	800b828 <_ZdlPvj>
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	4618      	mov	r0, r3
 8011362:	3708      	adds	r7, #8
 8011364:	46bd      	mov	sp, r7
 8011366:	bd80      	pop	{r7, pc}

08011368 <_ZN17CheckEqualFailureD1Ev>:
class CheckEqualFailure : public TestFailure
 8011368:	b580      	push	{r7, lr}
 801136a:	b082      	sub	sp, #8
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
 8011370:	4a05      	ldr	r2, [pc, #20]	; (8011388 <_ZN17CheckEqualFailureD1Ev+0x20>)
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	601a      	str	r2, [r3, #0]
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	4618      	mov	r0, r3
 801137a:	f7fe fd23 	bl	800fdc4 <_ZN11TestFailureD1Ev>
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	4618      	mov	r0, r3
 8011382:	3708      	adds	r7, #8
 8011384:	46bd      	mov	sp, r7
 8011386:	bd80      	pop	{r7, pc}
 8011388:	0802a180 	.word	0x0802a180

0801138c <_ZN17CheckEqualFailureD0Ev>:
 801138c:	b580      	push	{r7, lr}
 801138e:	b082      	sub	sp, #8
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
 8011394:	6878      	ldr	r0, [r7, #4]
 8011396:	f7ff ffe7 	bl	8011368 <_ZN17CheckEqualFailureD1Ev>
 801139a:	2134      	movs	r1, #52	; 0x34
 801139c:	6878      	ldr	r0, [r7, #4]
 801139e:	f7fa fa43 	bl	800b828 <_ZdlPvj>
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	4618      	mov	r0, r3
 80113a6:	3708      	adds	r7, #8
 80113a8:	46bd      	mov	sp, r7
 80113aa:	bd80      	pop	{r7, pc}

080113ac <_ZN19DoublesEqualFailureD1Ev>:
class DoublesEqualFailure: public TestFailure
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b082      	sub	sp, #8
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
 80113b4:	4a05      	ldr	r2, [pc, #20]	; (80113cc <_ZN19DoublesEqualFailureD1Ev+0x20>)
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	601a      	str	r2, [r3, #0]
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	4618      	mov	r0, r3
 80113be:	f7fe fd01 	bl	800fdc4 <_ZN11TestFailureD1Ev>
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	4618      	mov	r0, r3
 80113c6:	3708      	adds	r7, #8
 80113c8:	46bd      	mov	sp, r7
 80113ca:	bd80      	pop	{r7, pc}
 80113cc:	0802a1ac 	.word	0x0802a1ac

080113d0 <_ZN19DoublesEqualFailureD0Ev>:
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b082      	sub	sp, #8
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
 80113d8:	6878      	ldr	r0, [r7, #4]
 80113da:	f7ff ffe7 	bl	80113ac <_ZN19DoublesEqualFailureD1Ev>
 80113de:	2134      	movs	r1, #52	; 0x34
 80113e0:	6878      	ldr	r0, [r7, #4]
 80113e2:	f7fa fa21 	bl	800b828 <_ZdlPvj>
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	4618      	mov	r0, r3
 80113ea:	3708      	adds	r7, #8
 80113ec:	46bd      	mov	sp, r7
 80113ee:	bd80      	pop	{r7, pc}

080113f0 <_ZN13EqualsFailureD1Ev>:
class EqualsFailure: public TestFailure
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b082      	sub	sp, #8
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
 80113f8:	4a05      	ldr	r2, [pc, #20]	; (8011410 <_ZN13EqualsFailureD1Ev+0x20>)
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	601a      	str	r2, [r3, #0]
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	4618      	mov	r0, r3
 8011402:	f7fe fcdf 	bl	800fdc4 <_ZN11TestFailureD1Ev>
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	4618      	mov	r0, r3
 801140a:	3708      	adds	r7, #8
 801140c:	46bd      	mov	sp, r7
 801140e:	bd80      	pop	{r7, pc}
 8011410:	0802a1d8 	.word	0x0802a1d8

08011414 <_ZN13EqualsFailureD0Ev>:
 8011414:	b580      	push	{r7, lr}
 8011416:	b082      	sub	sp, #8
 8011418:	af00      	add	r7, sp, #0
 801141a:	6078      	str	r0, [r7, #4]
 801141c:	6878      	ldr	r0, [r7, #4]
 801141e:	f7ff ffe7 	bl	80113f0 <_ZN13EqualsFailureD1Ev>
 8011422:	2134      	movs	r1, #52	; 0x34
 8011424:	6878      	ldr	r0, [r7, #4]
 8011426:	f7fa f9ff 	bl	800b828 <_ZdlPvj>
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	4618      	mov	r0, r3
 801142e:	3708      	adds	r7, #8
 8011430:	46bd      	mov	sp, r7
 8011432:	bd80      	pop	{r7, pc}

08011434 <_ZL13checkedMallocj>:
#include "CppUTest/TestMemoryAllocator.h"
#include "CppUTest/PlatformSpecificFunctions.h"
#include "CppUTest/MemoryLeakDetector.h"

static char* checkedMalloc(size_t size)
{
 8011434:	b5b0      	push	{r4, r5, r7, lr}
 8011436:	b086      	sub	sp, #24
 8011438:	af02      	add	r7, sp, #8
 801143a:	6078      	str	r0, [r7, #4]
    char* mem = (char*) PlatformSpecificMalloc(size);
 801143c:	4b0d      	ldr	r3, [pc, #52]	; (8011474 <_ZL13checkedMallocj+0x40>)
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	6878      	ldr	r0, [r7, #4]
 8011442:	4798      	blx	r3
 8011444:	60f8      	str	r0, [r7, #12]
    if (mem == NULLPTR)
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d10e      	bne.n	801146a <_ZL13checkedMallocj+0x36>
    FAIL("malloc returned null pointer");
 801144c:	f004 f97e 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8011450:	4604      	mov	r4, r0
 8011452:	6823      	ldr	r3, [r4, #0]
 8011454:	3368      	adds	r3, #104	; 0x68
 8011456:	681d      	ldr	r5, [r3, #0]
 8011458:	f004 f988 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801145c:	4603      	mov	r3, r0
 801145e:	9300      	str	r3, [sp, #0]
 8011460:	2325      	movs	r3, #37	; 0x25
 8011462:	4a05      	ldr	r2, [pc, #20]	; (8011478 <_ZL13checkedMallocj+0x44>)
 8011464:	4905      	ldr	r1, [pc, #20]	; (801147c <_ZL13checkedMallocj+0x48>)
 8011466:	4620      	mov	r0, r4
 8011468:	47a8      	blx	r5
    return mem;
 801146a:	68fb      	ldr	r3, [r7, #12]
}
 801146c:	4618      	mov	r0, r3
 801146e:	3710      	adds	r7, #16
 8011470:	46bd      	mov	sp, r7
 8011472:	bdb0      	pop	{r4, r5, r7, pc}
 8011474:	200000c8 	.word	0x200000c8
 8011478:	080261b8 	.word	0x080261b8
 801147c:	080261d8 	.word	0x080261d8

08011480 <_Z22getCurrentNewAllocatorv>:
{
    currentNewAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewAllocator()
{
 8011480:	b580      	push	{r7, lr}
 8011482:	af00      	add	r7, sp, #0
    if (currentNewAllocator == NULLPTR) setCurrentNewAllocatorToDefault();
 8011484:	4b04      	ldr	r3, [pc, #16]	; (8011498 <_Z22getCurrentNewAllocatorv+0x18>)
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d101      	bne.n	8011490 <_Z22getCurrentNewAllocatorv+0x10>
 801148c:	f000 f806 	bl	801149c <_Z31setCurrentNewAllocatorToDefaultv>
    return currentNewAllocator;
 8011490:	4b01      	ldr	r3, [pc, #4]	; (8011498 <_Z22getCurrentNewAllocatorv+0x18>)
 8011492:	681b      	ldr	r3, [r3, #0]
}
 8011494:	4618      	mov	r0, r3
 8011496:	bd80      	pop	{r7, pc}
 8011498:	20000964 	.word	0x20000964

0801149c <_Z31setCurrentNewAllocatorToDefaultv>:

void setCurrentNewAllocatorToDefault()
{
 801149c:	b580      	push	{r7, lr}
 801149e:	af00      	add	r7, sp, #0
    currentNewAllocator = defaultNewAllocator();
 80114a0:	f000 f810 	bl	80114c4 <_Z19defaultNewAllocatorv>
 80114a4:	4603      	mov	r3, r0
 80114a6:	4a02      	ldr	r2, [pc, #8]	; (80114b0 <_Z31setCurrentNewAllocatorToDefaultv+0x14>)
 80114a8:	6013      	str	r3, [r2, #0]
}
 80114aa:	bf00      	nop
 80114ac:	bd80      	pop	{r7, pc}
 80114ae:	bf00      	nop
 80114b0:	20000964 	.word	0x20000964

080114b4 <__tcf_0>:

TestMemoryAllocator* defaultNewAllocator()
{
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 80114b4:	b580      	push	{r7, lr}
 80114b6:	af00      	add	r7, sp, #0
 80114b8:	4801      	ldr	r0, [pc, #4]	; (80114c0 <__tcf_0+0xc>)
 80114ba:	f000 f909 	bl	80116d0 <_ZN19TestMemoryAllocatorD1Ev>
 80114be:	bd80      	pop	{r7, pc}
 80114c0:	20000970 	.word	0x20000970

080114c4 <_Z19defaultNewAllocatorv>:
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 80114c8:	4b13      	ldr	r3, [pc, #76]	; (8011518 <_Z19defaultNewAllocatorv+0x54>)
 80114ca:	781b      	ldrb	r3, [r3, #0]
 80114cc:	f3bf 8f5b 	dmb	ish
 80114d0:	b2db      	uxtb	r3, r3
 80114d2:	f003 0301 	and.w	r3, r3, #1
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	bf0c      	ite	eq
 80114da:	2301      	moveq	r3, #1
 80114dc:	2300      	movne	r3, #0
 80114de:	b2db      	uxtb	r3, r3
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d016      	beq.n	8011512 <_Z19defaultNewAllocatorv+0x4e>
 80114e4:	480c      	ldr	r0, [pc, #48]	; (8011518 <_Z19defaultNewAllocatorv+0x54>)
 80114e6:	f00f fc0f 	bl	8020d08 <__cxa_guard_acquire>
 80114ea:	4603      	mov	r3, r0
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	bf14      	ite	ne
 80114f0:	2301      	movne	r3, #1
 80114f2:	2300      	moveq	r3, #0
 80114f4:	b2db      	uxtb	r3, r3
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d00b      	beq.n	8011512 <_Z19defaultNewAllocatorv+0x4e>
 80114fa:	4b08      	ldr	r3, [pc, #32]	; (801151c <_Z19defaultNewAllocatorv+0x58>)
 80114fc:	4a08      	ldr	r2, [pc, #32]	; (8011520 <_Z19defaultNewAllocatorv+0x5c>)
 80114fe:	4909      	ldr	r1, [pc, #36]	; (8011524 <_Z19defaultNewAllocatorv+0x60>)
 8011500:	4809      	ldr	r0, [pc, #36]	; (8011528 <_Z19defaultNewAllocatorv+0x64>)
 8011502:	f000 f8c5 	bl	8011690 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 8011506:	4804      	ldr	r0, [pc, #16]	; (8011518 <_Z19defaultNewAllocatorv+0x54>)
 8011508:	f00f fc0a 	bl	8020d20 <__cxa_guard_release>
 801150c:	4807      	ldr	r0, [pc, #28]	; (801152c <_Z19defaultNewAllocatorv+0x68>)
 801150e:	f00f fc2e 	bl	8020d6e <atexit>
    return &allocator;
 8011512:	4b05      	ldr	r3, [pc, #20]	; (8011528 <_Z19defaultNewAllocatorv+0x64>)
}
 8011514:	4618      	mov	r0, r3
 8011516:	bd80      	pop	{r7, pc}
 8011518:	20000984 	.word	0x20000984
 801151c:	080261f8 	.word	0x080261f8
 8011520:	08026200 	.word	0x08026200
 8011524:	08026204 	.word	0x08026204
 8011528:	20000970 	.word	0x20000970
 801152c:	080114b5 	.word	0x080114b5

08011530 <_Z27getCurrentNewArrayAllocatorv>:
{
    currentNewArrayAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewArrayAllocator()
{
 8011530:	b580      	push	{r7, lr}
 8011532:	af00      	add	r7, sp, #0
    if (currentNewArrayAllocator == NULLPTR) setCurrentNewArrayAllocatorToDefault();
 8011534:	4b04      	ldr	r3, [pc, #16]	; (8011548 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d101      	bne.n	8011540 <_Z27getCurrentNewArrayAllocatorv+0x10>
 801153c:	f000 f806 	bl	801154c <_Z36setCurrentNewArrayAllocatorToDefaultv>
    return currentNewArrayAllocator;
 8011540:	4b01      	ldr	r3, [pc, #4]	; (8011548 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 8011542:	681b      	ldr	r3, [r3, #0]
}
 8011544:	4618      	mov	r0, r3
 8011546:	bd80      	pop	{r7, pc}
 8011548:	20000968 	.word	0x20000968

0801154c <_Z36setCurrentNewArrayAllocatorToDefaultv>:

void setCurrentNewArrayAllocatorToDefault()
{
 801154c:	b580      	push	{r7, lr}
 801154e:	af00      	add	r7, sp, #0
    currentNewArrayAllocator = defaultNewArrayAllocator();
 8011550:	f000 f810 	bl	8011574 <_Z24defaultNewArrayAllocatorv>
 8011554:	4603      	mov	r3, r0
 8011556:	4a02      	ldr	r2, [pc, #8]	; (8011560 <_Z36setCurrentNewArrayAllocatorToDefaultv+0x14>)
 8011558:	6013      	str	r3, [r2, #0]
}
 801155a:	bf00      	nop
 801155c:	bd80      	pop	{r7, pc}
 801155e:	bf00      	nop
 8011560:	20000968 	.word	0x20000968

08011564 <__tcf_1>:

TestMemoryAllocator* defaultNewArrayAllocator()
{
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 8011564:	b580      	push	{r7, lr}
 8011566:	af00      	add	r7, sp, #0
 8011568:	4801      	ldr	r0, [pc, #4]	; (8011570 <__tcf_1+0xc>)
 801156a:	f000 f8b1 	bl	80116d0 <_ZN19TestMemoryAllocatorD1Ev>
 801156e:	bd80      	pop	{r7, pc}
 8011570:	20000988 	.word	0x20000988

08011574 <_Z24defaultNewArrayAllocatorv>:
{
 8011574:	b580      	push	{r7, lr}
 8011576:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 8011578:	4b13      	ldr	r3, [pc, #76]	; (80115c8 <_Z24defaultNewArrayAllocatorv+0x54>)
 801157a:	781b      	ldrb	r3, [r3, #0]
 801157c:	f3bf 8f5b 	dmb	ish
 8011580:	b2db      	uxtb	r3, r3
 8011582:	f003 0301 	and.w	r3, r3, #1
 8011586:	2b00      	cmp	r3, #0
 8011588:	bf0c      	ite	eq
 801158a:	2301      	moveq	r3, #1
 801158c:	2300      	movne	r3, #0
 801158e:	b2db      	uxtb	r3, r3
 8011590:	2b00      	cmp	r3, #0
 8011592:	d016      	beq.n	80115c2 <_Z24defaultNewArrayAllocatorv+0x4e>
 8011594:	480c      	ldr	r0, [pc, #48]	; (80115c8 <_Z24defaultNewArrayAllocatorv+0x54>)
 8011596:	f00f fbb7 	bl	8020d08 <__cxa_guard_acquire>
 801159a:	4603      	mov	r3, r0
 801159c:	2b00      	cmp	r3, #0
 801159e:	bf14      	ite	ne
 80115a0:	2301      	movne	r3, #1
 80115a2:	2300      	moveq	r3, #0
 80115a4:	b2db      	uxtb	r3, r3
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d00b      	beq.n	80115c2 <_Z24defaultNewArrayAllocatorv+0x4e>
 80115aa:	4b08      	ldr	r3, [pc, #32]	; (80115cc <_Z24defaultNewArrayAllocatorv+0x58>)
 80115ac:	4a08      	ldr	r2, [pc, #32]	; (80115d0 <_Z24defaultNewArrayAllocatorv+0x5c>)
 80115ae:	4909      	ldr	r1, [pc, #36]	; (80115d4 <_Z24defaultNewArrayAllocatorv+0x60>)
 80115b0:	4809      	ldr	r0, [pc, #36]	; (80115d8 <_Z24defaultNewArrayAllocatorv+0x64>)
 80115b2:	f000 f86d 	bl	8011690 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 80115b6:	4804      	ldr	r0, [pc, #16]	; (80115c8 <_Z24defaultNewArrayAllocatorv+0x54>)
 80115b8:	f00f fbb2 	bl	8020d20 <__cxa_guard_release>
 80115bc:	4807      	ldr	r0, [pc, #28]	; (80115dc <_Z24defaultNewArrayAllocatorv+0x68>)
 80115be:	f00f fbd6 	bl	8020d6e <atexit>
    return &allocator;
 80115c2:	4b05      	ldr	r3, [pc, #20]	; (80115d8 <_Z24defaultNewArrayAllocatorv+0x64>)
}
 80115c4:	4618      	mov	r0, r3
 80115c6:	bd80      	pop	{r7, pc}
 80115c8:	2000099c 	.word	0x2000099c
 80115cc:	0802621c 	.word	0x0802621c
 80115d0:	08026228 	.word	0x08026228
 80115d4:	08026230 	.word	0x08026230
 80115d8:	20000988 	.word	0x20000988
 80115dc:	08011565 	.word	0x08011565

080115e0 <_Z25getCurrentMallocAllocatorv>:
{
    currentMallocAllocator = allocator;
}

TestMemoryAllocator* getCurrentMallocAllocator()
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	af00      	add	r7, sp, #0
    if (currentMallocAllocator == NULLPTR) setCurrentMallocAllocatorToDefault();
 80115e4:	4b04      	ldr	r3, [pc, #16]	; (80115f8 <_Z25getCurrentMallocAllocatorv+0x18>)
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d101      	bne.n	80115f0 <_Z25getCurrentMallocAllocatorv+0x10>
 80115ec:	f000 f806 	bl	80115fc <_Z34setCurrentMallocAllocatorToDefaultv>
    return currentMallocAllocator;
 80115f0:	4b01      	ldr	r3, [pc, #4]	; (80115f8 <_Z25getCurrentMallocAllocatorv+0x18>)
 80115f2:	681b      	ldr	r3, [r3, #0]
}
 80115f4:	4618      	mov	r0, r3
 80115f6:	bd80      	pop	{r7, pc}
 80115f8:	2000096c 	.word	0x2000096c

080115fc <_Z34setCurrentMallocAllocatorToDefaultv>:

void setCurrentMallocAllocatorToDefault()
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	af00      	add	r7, sp, #0
    currentMallocAllocator = defaultMallocAllocator();
 8011600:	f000 f810 	bl	8011624 <_Z22defaultMallocAllocatorv>
 8011604:	4603      	mov	r3, r0
 8011606:	4a02      	ldr	r2, [pc, #8]	; (8011610 <_Z34setCurrentMallocAllocatorToDefaultv+0x14>)
 8011608:	6013      	str	r3, [r2, #0]
}
 801160a:	bf00      	nop
 801160c:	bd80      	pop	{r7, pc}
 801160e:	bf00      	nop
 8011610:	2000096c 	.word	0x2000096c

08011614 <__tcf_2>:

TestMemoryAllocator* defaultMallocAllocator()
{
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 8011614:	b580      	push	{r7, lr}
 8011616:	af00      	add	r7, sp, #0
 8011618:	4801      	ldr	r0, [pc, #4]	; (8011620 <__tcf_2+0xc>)
 801161a:	f000 f859 	bl	80116d0 <_ZN19TestMemoryAllocatorD1Ev>
 801161e:	bd80      	pop	{r7, pc}
 8011620:	200009a0 	.word	0x200009a0

08011624 <_Z22defaultMallocAllocatorv>:
{
 8011624:	b580      	push	{r7, lr}
 8011626:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 8011628:	4b13      	ldr	r3, [pc, #76]	; (8011678 <_Z22defaultMallocAllocatorv+0x54>)
 801162a:	781b      	ldrb	r3, [r3, #0]
 801162c:	f3bf 8f5b 	dmb	ish
 8011630:	b2db      	uxtb	r3, r3
 8011632:	f003 0301 	and.w	r3, r3, #1
 8011636:	2b00      	cmp	r3, #0
 8011638:	bf0c      	ite	eq
 801163a:	2301      	moveq	r3, #1
 801163c:	2300      	movne	r3, #0
 801163e:	b2db      	uxtb	r3, r3
 8011640:	2b00      	cmp	r3, #0
 8011642:	d016      	beq.n	8011672 <_Z22defaultMallocAllocatorv+0x4e>
 8011644:	480c      	ldr	r0, [pc, #48]	; (8011678 <_Z22defaultMallocAllocatorv+0x54>)
 8011646:	f00f fb5f 	bl	8020d08 <__cxa_guard_acquire>
 801164a:	4603      	mov	r3, r0
 801164c:	2b00      	cmp	r3, #0
 801164e:	bf14      	ite	ne
 8011650:	2301      	movne	r3, #1
 8011652:	2300      	moveq	r3, #0
 8011654:	b2db      	uxtb	r3, r3
 8011656:	2b00      	cmp	r3, #0
 8011658:	d00b      	beq.n	8011672 <_Z22defaultMallocAllocatorv+0x4e>
 801165a:	4b08      	ldr	r3, [pc, #32]	; (801167c <_Z22defaultMallocAllocatorv+0x58>)
 801165c:	4a08      	ldr	r2, [pc, #32]	; (8011680 <_Z22defaultMallocAllocatorv+0x5c>)
 801165e:	4909      	ldr	r1, [pc, #36]	; (8011684 <_Z22defaultMallocAllocatorv+0x60>)
 8011660:	4809      	ldr	r0, [pc, #36]	; (8011688 <_Z22defaultMallocAllocatorv+0x64>)
 8011662:	f000 f815 	bl	8011690 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 8011666:	4804      	ldr	r0, [pc, #16]	; (8011678 <_Z22defaultMallocAllocatorv+0x54>)
 8011668:	f00f fb5a 	bl	8020d20 <__cxa_guard_release>
 801166c:	4807      	ldr	r0, [pc, #28]	; (801168c <_Z22defaultMallocAllocatorv+0x68>)
 801166e:	f00f fb7e 	bl	8020d6e <atexit>
    return &allocator;
 8011672:	4b05      	ldr	r3, [pc, #20]	; (8011688 <_Z22defaultMallocAllocatorv+0x64>)
}
 8011674:	4618      	mov	r0, r3
 8011676:	bd80      	pop	{r7, pc}
 8011678:	200009b4 	.word	0x200009b4
 801167c:	0802624c 	.word	0x0802624c
 8011680:	08026254 	.word	0x08026254
 8011684:	0802625c 	.word	0x0802625c
 8011688:	200009a0 	.word	0x200009a0
 801168c:	08011615 	.word	0x08011615

08011690 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>:
    if (originalMallocAllocator) setCurrentMallocAllocator(originalMallocAllocator);
    if (originalNewAllocator) setCurrentNewAllocator(originalNewAllocator);
    if (originalNewArrayAllocator) setCurrentNewArrayAllocator(originalNewArrayAllocator);
}

TestMemoryAllocator::TestMemoryAllocator(const char* name_str, const char* alloc_name_str, const char* free_name_str)
 8011690:	b480      	push	{r7}
 8011692:	b085      	sub	sp, #20
 8011694:	af00      	add	r7, sp, #0
 8011696:	60f8      	str	r0, [r7, #12]
 8011698:	60b9      	str	r1, [r7, #8]
 801169a:	607a      	str	r2, [r7, #4]
 801169c:	603b      	str	r3, [r7, #0]
    : name_(name_str), alloc_name_(alloc_name_str), free_name_(free_name_str), hasBeenDestroyed_(false)
 801169e:	4a0b      	ldr	r2, [pc, #44]	; (80116cc <_ZN19TestMemoryAllocatorC1EPKcS1_S1_+0x3c>)
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	601a      	str	r2, [r3, #0]
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	68ba      	ldr	r2, [r7, #8]
 80116a8:	605a      	str	r2, [r3, #4]
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	687a      	ldr	r2, [r7, #4]
 80116ae:	609a      	str	r2, [r3, #8]
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	683a      	ldr	r2, [r7, #0]
 80116b4:	60da      	str	r2, [r3, #12]
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	2200      	movs	r2, #0
 80116ba:	741a      	strb	r2, [r3, #16]
{
}
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	4618      	mov	r0, r3
 80116c0:	3714      	adds	r7, #20
 80116c2:	46bd      	mov	sp, r7
 80116c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c8:	4770      	bx	lr
 80116ca:	bf00      	nop
 80116cc:	0802a264 	.word	0x0802a264

080116d0 <_ZN19TestMemoryAllocatorD1Ev>:

TestMemoryAllocator::~TestMemoryAllocator()
 80116d0:	b480      	push	{r7}
 80116d2:	b083      	sub	sp, #12
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
 80116d8:	4a06      	ldr	r2, [pc, #24]	; (80116f4 <_ZN19TestMemoryAllocatorD1Ev+0x24>)
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	601a      	str	r2, [r3, #0]
{
    hasBeenDestroyed_ = true;
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	2201      	movs	r2, #1
 80116e2:	741a      	strb	r2, [r3, #16]
}
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	4618      	mov	r0, r3
 80116e8:	370c      	adds	r7, #12
 80116ea:	46bd      	mov	sp, r7
 80116ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f0:	4770      	bx	lr
 80116f2:	bf00      	nop
 80116f4:	0802a264 	.word	0x0802a264

080116f8 <_ZN19TestMemoryAllocatorD0Ev>:
TestMemoryAllocator::~TestMemoryAllocator()
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b082      	sub	sp, #8
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
}
 8011700:	6878      	ldr	r0, [r7, #4]
 8011702:	f7ff ffe5 	bl	80116d0 <_ZN19TestMemoryAllocatorD1Ev>
 8011706:	2114      	movs	r1, #20
 8011708:	6878      	ldr	r0, [r7, #4]
 801170a:	f7fa f88d 	bl	800b828 <_ZdlPvj>
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	4618      	mov	r0, r3
 8011712:	3708      	adds	r7, #8
 8011714:	46bd      	mov	sp, r7
 8011716:	bd80      	pop	{r7, pc}

08011718 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>:

bool TestMemoryAllocator::hasBeenDestroyed()
{
 8011718:	b480      	push	{r7}
 801171a:	b083      	sub	sp, #12
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
    return hasBeenDestroyed_;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	7c1b      	ldrb	r3, [r3, #16]
}
 8011724:	4618      	mov	r0, r3
 8011726:	370c      	adds	r7, #12
 8011728:	46bd      	mov	sp, r7
 801172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801172e:	4770      	bx	lr

08011730 <_ZN19TestMemoryAllocator13isOfEqualTypeEPS_>:

bool TestMemoryAllocator::isOfEqualType(TestMemoryAllocator* allocator)
{
 8011730:	b590      	push	{r4, r7, lr}
 8011732:	b083      	sub	sp, #12
 8011734:	af00      	add	r7, sp, #0
 8011736:	6078      	str	r0, [r7, #4]
 8011738:	6039      	str	r1, [r7, #0]
    return SimpleString::StrCmp(this->name(), allocator->name()) == 0;
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	3310      	adds	r3, #16
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	6878      	ldr	r0, [r7, #4]
 8011744:	4798      	blx	r3
 8011746:	4604      	mov	r4, r0
 8011748:	683b      	ldr	r3, [r7, #0]
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	3310      	adds	r3, #16
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	6838      	ldr	r0, [r7, #0]
 8011752:	4798      	blx	r3
 8011754:	4603      	mov	r3, r0
 8011756:	4619      	mov	r1, r3
 8011758:	4620      	mov	r0, r4
 801175a:	f7fc fa51 	bl	800dc00 <_ZN12SimpleString6StrCmpEPKcS1_>
 801175e:	4603      	mov	r3, r0
 8011760:	2b00      	cmp	r3, #0
 8011762:	bf0c      	ite	eq
 8011764:	2301      	moveq	r3, #1
 8011766:	2300      	movne	r3, #0
 8011768:	b2db      	uxtb	r3, r3
}
 801176a:	4618      	mov	r0, r3
 801176c:	370c      	adds	r7, #12
 801176e:	46bd      	mov	sp, r7
 8011770:	bd90      	pop	{r4, r7, pc}
	...

08011774 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj>:

char* TestMemoryAllocator::allocMemoryLeakNode(size_t size)
{
 8011774:	b590      	push	{r4, r7, lr}
 8011776:	b083      	sub	sp, #12
 8011778:	af00      	add	r7, sp, #0
 801177a:	6078      	str	r0, [r7, #4]
 801177c:	6039      	str	r1, [r7, #0]
    return alloc_memory(size, "MemoryLeakNode", 1);
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	3308      	adds	r3, #8
 8011784:	681c      	ldr	r4, [r3, #0]
 8011786:	2301      	movs	r3, #1
 8011788:	4a04      	ldr	r2, [pc, #16]	; (801179c <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj+0x28>)
 801178a:	6839      	ldr	r1, [r7, #0]
 801178c:	6878      	ldr	r0, [r7, #4]
 801178e:	47a0      	blx	r4
 8011790:	4603      	mov	r3, r0
}
 8011792:	4618      	mov	r0, r3
 8011794:	370c      	adds	r7, #12
 8011796:	46bd      	mov	sp, r7
 8011798:	bd90      	pop	{r4, r7, pc}
 801179a:	bf00      	nop
 801179c:	08026278 	.word	0x08026278

080117a0 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc>:

void TestMemoryAllocator::freeMemoryLeakNode(char* memory)
{
 80117a0:	b590      	push	{r4, r7, lr}
 80117a2:	b085      	sub	sp, #20
 80117a4:	af02      	add	r7, sp, #8
 80117a6:	6078      	str	r0, [r7, #4]
 80117a8:	6039      	str	r1, [r7, #0]
    free_memory(memory, 0, "MemoryLeakNode", 1);
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	330c      	adds	r3, #12
 80117b0:	681c      	ldr	r4, [r3, #0]
 80117b2:	2301      	movs	r3, #1
 80117b4:	9300      	str	r3, [sp, #0]
 80117b6:	4b04      	ldr	r3, [pc, #16]	; (80117c8 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc+0x28>)
 80117b8:	2200      	movs	r2, #0
 80117ba:	6839      	ldr	r1, [r7, #0]
 80117bc:	6878      	ldr	r0, [r7, #4]
 80117be:	47a0      	blx	r4
}
 80117c0:	bf00      	nop
 80117c2:	370c      	adds	r7, #12
 80117c4:	46bd      	mov	sp, r7
 80117c6:	bd90      	pop	{r4, r7, pc}
 80117c8:	08026278 	.word	0x08026278

080117cc <_ZN19TestMemoryAllocator12alloc_memoryEjPKcj>:

char* TestMemoryAllocator::alloc_memory(size_t size, const char*, size_t)
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b084      	sub	sp, #16
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	60f8      	str	r0, [r7, #12]
 80117d4:	60b9      	str	r1, [r7, #8]
 80117d6:	607a      	str	r2, [r7, #4]
 80117d8:	603b      	str	r3, [r7, #0]
    return checkedMalloc(size);
 80117da:	68b8      	ldr	r0, [r7, #8]
 80117dc:	f7ff fe2a 	bl	8011434 <_ZL13checkedMallocj>
 80117e0:	4603      	mov	r3, r0
}
 80117e2:	4618      	mov	r0, r3
 80117e4:	3710      	adds	r7, #16
 80117e6:	46bd      	mov	sp, r7
 80117e8:	bd80      	pop	{r7, pc}
	...

080117ec <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj>:

void TestMemoryAllocator::free_memory(char* memory, size_t, const char*, size_t)
{
 80117ec:	b580      	push	{r7, lr}
 80117ee:	b084      	sub	sp, #16
 80117f0:	af00      	add	r7, sp, #0
 80117f2:	60f8      	str	r0, [r7, #12]
 80117f4:	60b9      	str	r1, [r7, #8]
 80117f6:	607a      	str	r2, [r7, #4]
 80117f8:	603b      	str	r3, [r7, #0]
    PlatformSpecificFree(memory);
 80117fa:	4b04      	ldr	r3, [pc, #16]	; (801180c <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj+0x20>)
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	68b8      	ldr	r0, [r7, #8]
 8011800:	4798      	blx	r3
}
 8011802:	bf00      	nop
 8011804:	3710      	adds	r7, #16
 8011806:	46bd      	mov	sp, r7
 8011808:	bd80      	pop	{r7, pc}
 801180a:	bf00      	nop
 801180c:	200000d0 	.word	0x200000d0

08011810 <_ZNK19TestMemoryAllocator4nameEv>:

const char* TestMemoryAllocator::name() const
{
 8011810:	b480      	push	{r7}
 8011812:	b083      	sub	sp, #12
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
    return name_;
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	685b      	ldr	r3, [r3, #4]
}
 801181c:	4618      	mov	r0, r3
 801181e:	370c      	adds	r7, #12
 8011820:	46bd      	mov	sp, r7
 8011822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011826:	4770      	bx	lr

08011828 <_ZNK19TestMemoryAllocator10alloc_nameEv>:

const char* TestMemoryAllocator::alloc_name() const
{
 8011828:	b480      	push	{r7}
 801182a:	b083      	sub	sp, #12
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
    return alloc_name_;
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	689b      	ldr	r3, [r3, #8]
}
 8011834:	4618      	mov	r0, r3
 8011836:	370c      	adds	r7, #12
 8011838:	46bd      	mov	sp, r7
 801183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801183e:	4770      	bx	lr

08011840 <_ZNK19TestMemoryAllocator9free_nameEv>:

const char* TestMemoryAllocator::free_name() const
{
 8011840:	b480      	push	{r7}
 8011842:	b083      	sub	sp, #12
 8011844:	af00      	add	r7, sp, #0
 8011846:	6078      	str	r0, [r7, #4]
    return free_name_;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	68db      	ldr	r3, [r3, #12]
}
 801184c:	4618      	mov	r0, r3
 801184e:	370c      	adds	r7, #12
 8011850:	46bd      	mov	sp, r7
 8011852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011856:	4770      	bx	lr

08011858 <_ZN19TestMemoryAllocator15actualAllocatorEv>:

TestMemoryAllocator* TestMemoryAllocator::actualAllocator()
{
 8011858:	b480      	push	{r7}
 801185a:	b083      	sub	sp, #12
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
    return this;
 8011860:	687b      	ldr	r3, [r7, #4]
}
 8011862:	4618      	mov	r0, r3
 8011864:	370c      	adds	r7, #12
 8011866:	46bd      	mov	sp, r7
 8011868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186c:	4770      	bx	lr
	...

08011870 <_ZN20NullUnknownAllocatorD1Ev>:

    return TestMemoryAllocator::alloc_memory(size, file, line);
}


NullUnknownAllocator::~NullUnknownAllocator()
 8011870:	b580      	push	{r7, lr}
 8011872:	b082      	sub	sp, #8
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
 8011878:	4a05      	ldr	r2, [pc, #20]	; (8011890 <_ZN20NullUnknownAllocatorD1Ev+0x20>)
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	601a      	str	r2, [r3, #0]
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	4618      	mov	r0, r3
 8011882:	f7ff ff25 	bl	80116d0 <_ZN19TestMemoryAllocatorD1Ev>
{
}
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	4618      	mov	r0, r3
 801188a:	3708      	adds	r7, #8
 801188c:	46bd      	mov	sp, r7
 801188e:	bd80      	pop	{r7, pc}
 8011890:	0802a230 	.word	0x0802a230

08011894 <_ZN20NullUnknownAllocatorD0Ev>:
NullUnknownAllocator::~NullUnknownAllocator()
 8011894:	b580      	push	{r7, lr}
 8011896:	b082      	sub	sp, #8
 8011898:	af00      	add	r7, sp, #0
 801189a:	6078      	str	r0, [r7, #4]
}
 801189c:	6878      	ldr	r0, [r7, #4]
 801189e:	f7ff ffe7 	bl	8011870 <_ZN20NullUnknownAllocatorD1Ev>
 80118a2:	2114      	movs	r1, #20
 80118a4:	6878      	ldr	r0, [r7, #4]
 80118a6:	f7f9 ffbf 	bl	800b828 <_ZdlPvj>
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	4618      	mov	r0, r3
 80118ae:	3708      	adds	r7, #8
 80118b0:	46bd      	mov	sp, r7
 80118b2:	bd80      	pop	{r7, pc}

080118b4 <_ZN20NullUnknownAllocator12alloc_memoryEjPKcj>:

char* NullUnknownAllocator::alloc_memory(size_t /*size*/, const char*, size_t)
{
 80118b4:	b480      	push	{r7}
 80118b6:	b085      	sub	sp, #20
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	60f8      	str	r0, [r7, #12]
 80118bc:	60b9      	str	r1, [r7, #8]
 80118be:	607a      	str	r2, [r7, #4]
 80118c0:	603b      	str	r3, [r7, #0]
    return NULLPTR;
 80118c2:	2300      	movs	r3, #0
}
 80118c4:	4618      	mov	r0, r3
 80118c6:	3714      	adds	r7, #20
 80118c8:	46bd      	mov	sp, r7
 80118ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ce:	4770      	bx	lr

080118d0 <_ZN20NullUnknownAllocator11free_memoryEPcjPKcj>:

void NullUnknownAllocator::free_memory(char* /*memory*/, size_t, const char*, size_t)
{
 80118d0:	b480      	push	{r7}
 80118d2:	b085      	sub	sp, #20
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	60f8      	str	r0, [r7, #12]
 80118d8:	60b9      	str	r1, [r7, #8]
 80118da:	607a      	str	r2, [r7, #4]
 80118dc:	603b      	str	r3, [r7, #0]
}
 80118de:	bf00      	nop
 80118e0:	3714      	adds	r7, #20
 80118e2:	46bd      	mov	sp, r7
 80118e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e8:	4770      	bx	lr
	...

080118ec <_ZN20NullUnknownAllocatorC1Ev>:

NullUnknownAllocator::NullUnknownAllocator()
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b082      	sub	sp, #8
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
    : TestMemoryAllocator("Null Allocator", "unknown", "unknown")
 80118f4:	6878      	ldr	r0, [r7, #4]
 80118f6:	4b06      	ldr	r3, [pc, #24]	; (8011910 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 80118f8:	4a05      	ldr	r2, [pc, #20]	; (8011910 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 80118fa:	4906      	ldr	r1, [pc, #24]	; (8011914 <_ZN20NullUnknownAllocatorC1Ev+0x28>)
 80118fc:	f7ff fec8 	bl	8011690 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 8011900:	4a05      	ldr	r2, [pc, #20]	; (8011918 <_ZN20NullUnknownAllocatorC1Ev+0x2c>)
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	601a      	str	r2, [r3, #0]
{
}
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	4618      	mov	r0, r3
 801190a:	3708      	adds	r7, #8
 801190c:	46bd      	mov	sp, r7
 801190e:	bd80      	pop	{r7, pc}
 8011910:	080262ac 	.word	0x080262ac
 8011914:	080262b4 	.word	0x080262b4
 8011918:	0802a230 	.word	0x0802a230

0801191c <__tcf_3>:


TestMemoryAllocator* NullUnknownAllocator::defaultAllocator()
{
    static NullUnknownAllocator allocator;
 801191c:	b580      	push	{r7, lr}
 801191e:	af00      	add	r7, sp, #0
 8011920:	4801      	ldr	r0, [pc, #4]	; (8011928 <__tcf_3+0xc>)
 8011922:	f7ff ffa5 	bl	8011870 <_ZN20NullUnknownAllocatorD1Ev>
 8011926:	bd80      	pop	{r7, pc}
 8011928:	200009b8 	.word	0x200009b8

0801192c <_ZN20NullUnknownAllocator16defaultAllocatorEv>:
{
 801192c:	b580      	push	{r7, lr}
 801192e:	af00      	add	r7, sp, #0
    static NullUnknownAllocator allocator;
 8011930:	4b12      	ldr	r3, [pc, #72]	; (801197c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 8011932:	781b      	ldrb	r3, [r3, #0]
 8011934:	f3bf 8f5b 	dmb	ish
 8011938:	b2db      	uxtb	r3, r3
 801193a:	f003 0301 	and.w	r3, r3, #1
 801193e:	2b00      	cmp	r3, #0
 8011940:	bf0c      	ite	eq
 8011942:	2301      	moveq	r3, #1
 8011944:	2300      	movne	r3, #0
 8011946:	b2db      	uxtb	r3, r3
 8011948:	2b00      	cmp	r3, #0
 801194a:	d013      	beq.n	8011974 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 801194c:	480b      	ldr	r0, [pc, #44]	; (801197c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 801194e:	f00f f9db 	bl	8020d08 <__cxa_guard_acquire>
 8011952:	4603      	mov	r3, r0
 8011954:	2b00      	cmp	r3, #0
 8011956:	bf14      	ite	ne
 8011958:	2301      	movne	r3, #1
 801195a:	2300      	moveq	r3, #0
 801195c:	b2db      	uxtb	r3, r3
 801195e:	2b00      	cmp	r3, #0
 8011960:	d008      	beq.n	8011974 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 8011962:	4807      	ldr	r0, [pc, #28]	; (8011980 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
 8011964:	f7ff ffc2 	bl	80118ec <_ZN20NullUnknownAllocatorC1Ev>
 8011968:	4804      	ldr	r0, [pc, #16]	; (801197c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 801196a:	f00f f9d9 	bl	8020d20 <__cxa_guard_release>
 801196e:	4805      	ldr	r0, [pc, #20]	; (8011984 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x58>)
 8011970:	f00f f9fd 	bl	8020d6e <atexit>
    return &allocator;
 8011974:	4b02      	ldr	r3, [pc, #8]	; (8011980 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
}
 8011976:	4618      	mov	r0, r3
 8011978:	bd80      	pop	{r7, pc}
 801197a:	bf00      	nop
 801197c:	200009cc 	.word	0x200009cc
 8011980:	200009b8 	.word	0x200009b8
 8011984:	0801191d 	.word	0x0801191d

08011988 <_ZNK10TestResult12getTestCountEv>:
    size_t getTestCount() const
 8011988:	b480      	push	{r7}
 801198a:	b083      	sub	sp, #12
 801198c:	af00      	add	r7, sp, #0
 801198e:	6078      	str	r0, [r7, #4]
        return testCount_;
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	689b      	ldr	r3, [r3, #8]
    }
 8011994:	4618      	mov	r0, r3
 8011996:	370c      	adds	r7, #12
 8011998:	46bd      	mov	sp, r7
 801199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801199e:	4770      	bx	lr

080119a0 <_ZNK10TestResult19getFilteredOutCountEv>:
    size_t getFilteredOutCount() const
 80119a0:	b480      	push	{r7}
 80119a2:	b083      	sub	sp, #12
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
        return filteredOutCount_;
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	699b      	ldr	r3, [r3, #24]
    }
 80119ac:	4618      	mov	r0, r3
 80119ae:	370c      	adds	r7, #12
 80119b0:	46bd      	mov	sp, r7
 80119b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b6:	4770      	bx	lr

080119b8 <_ZN10TestOutput21getWorkingEnvironmentEv>:
{
    workingEnvironment_ = workEnvironment;
}

TestOutput::WorkingEnvironment TestOutput::getWorkingEnvironment()
{
 80119b8:	b580      	push	{r7, lr}
 80119ba:	af00      	add	r7, sp, #0
    if (workingEnvironment_ == TestOutput::detectEnvironment)
 80119bc:	4b05      	ldr	r3, [pc, #20]	; (80119d4 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 80119be:	781b      	ldrb	r3, [r3, #0]
 80119c0:	2b02      	cmp	r3, #2
 80119c2:	d103      	bne.n	80119cc <_ZN10TestOutput21getWorkingEnvironmentEv+0x14>
        return PlatformSpecificGetWorkingEnvironment();
 80119c4:	f004 fa4a 	bl	8015e5c <_Z37PlatformSpecificGetWorkingEnvironmentv>
 80119c8:	4603      	mov	r3, r0
 80119ca:	e001      	b.n	80119d0 <_ZN10TestOutput21getWorkingEnvironmentEv+0x18>
    return workingEnvironment_;
 80119cc:	4b01      	ldr	r3, [pc, #4]	; (80119d4 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 80119ce:	781b      	ldrb	r3, [r3, #0]
}
 80119d0:	4618      	mov	r0, r3
 80119d2:	bd80      	pop	{r7, pc}
 80119d4:	20000088 	.word	0x20000088

080119d8 <_ZN10TestOutputC1Ev>:


TestOutput::TestOutput() :
 80119d8:	b480      	push	{r7}
 80119da:	b083      	sub	sp, #12
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
    dotCount_(0), verbose_(level_quiet), color_(false), progressIndication_(".")
 80119e0:	4a0a      	ldr	r2, [pc, #40]	; (8011a0c <_ZN10TestOutputC1Ev+0x34>)
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	601a      	str	r2, [r3, #0]
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	2200      	movs	r2, #0
 80119ea:	605a      	str	r2, [r3, #4]
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	2200      	movs	r2, #0
 80119f0:	721a      	strb	r2, [r3, #8]
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	2200      	movs	r2, #0
 80119f6:	725a      	strb	r2, [r3, #9]
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	4a05      	ldr	r2, [pc, #20]	; (8011a10 <_ZN10TestOutputC1Ev+0x38>)
 80119fc:	60da      	str	r2, [r3, #12]
{
}
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	4618      	mov	r0, r3
 8011a02:	370c      	adds	r7, #12
 8011a04:	46bd      	mov	sp, r7
 8011a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0a:	4770      	bx	lr
 8011a0c:	0802a368 	.word	0x0802a368
 8011a10:	080266b4 	.word	0x080266b4

08011a14 <_ZN10TestOutputD1Ev>:

TestOutput::~TestOutput()
 8011a14:	b480      	push	{r7}
 8011a16:	b083      	sub	sp, #12
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]
 8011a1c:	4a04      	ldr	r2, [pc, #16]	; (8011a30 <_ZN10TestOutputD1Ev+0x1c>)
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	601a      	str	r2, [r3, #0]
{
}
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	4618      	mov	r0, r3
 8011a26:	370c      	adds	r7, #12
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2e:	4770      	bx	lr
 8011a30:	0802a368 	.word	0x0802a368

08011a34 <_ZN10TestOutput7verboseENS_14VerbosityLevelE>:

void TestOutput::verbose(VerbosityLevel level)
{
 8011a34:	b480      	push	{r7}
 8011a36:	b083      	sub	sp, #12
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6078      	str	r0, [r7, #4]
 8011a3c:	460b      	mov	r3, r1
 8011a3e:	70fb      	strb	r3, [r7, #3]
    verbose_ = level;
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	78fa      	ldrb	r2, [r7, #3]
 8011a44:	721a      	strb	r2, [r3, #8]
}
 8011a46:	bf00      	nop
 8011a48:	370c      	adds	r7, #12
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a50:	4770      	bx	lr

08011a52 <_ZN10TestOutput5colorEv>:

void TestOutput::color()
{
 8011a52:	b480      	push	{r7}
 8011a54:	b083      	sub	sp, #12
 8011a56:	af00      	add	r7, sp, #0
 8011a58:	6078      	str	r0, [r7, #4]
    color_ = true;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	2201      	movs	r2, #1
 8011a5e:	725a      	strb	r2, [r3, #9]
}
 8011a60:	bf00      	nop
 8011a62:	370c      	adds	r7, #12
 8011a64:	46bd      	mov	sp, r7
 8011a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6a:	4770      	bx	lr

08011a6c <_ZN10TestOutput5printEPKc>:

void TestOutput::print(const char* str)
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b082      	sub	sp, #8
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
 8011a74:	6039      	str	r1, [r7, #0]
    printBuffer(str);
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	3328      	adds	r3, #40	; 0x28
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	6839      	ldr	r1, [r7, #0]
 8011a80:	6878      	ldr	r0, [r7, #4]
 8011a82:	4798      	blx	r3
}
 8011a84:	bf00      	nop
 8011a86:	3708      	adds	r7, #8
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	bd80      	pop	{r7, pc}

08011a8c <_ZN10TestOutput5printEl>:

void TestOutput::print(long n)
{
 8011a8c:	b590      	push	{r4, r7, lr}
 8011a8e:	b085      	sub	sp, #20
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
 8011a94:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	332c      	adds	r3, #44	; 0x2c
 8011a9c:	681c      	ldr	r4, [r3, #0]
 8011a9e:	f107 0308 	add.w	r3, r7, #8
 8011aa2:	6839      	ldr	r1, [r7, #0]
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	f7fd f8ff 	bl	800eca8 <_Z10StringFroml>
 8011aaa:	f107 0308 	add.w	r3, r7, #8
 8011aae:	4618      	mov	r0, r3
 8011ab0:	f7fc fdf4 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 8011ab4:	4603      	mov	r3, r0
 8011ab6:	4619      	mov	r1, r3
 8011ab8:	6878      	ldr	r0, [r7, #4]
 8011aba:	47a0      	blx	r4
 8011abc:	f107 0308 	add.w	r3, r7, #8
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	f7fc fe18 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 8011ac6:	bf00      	nop
 8011ac8:	3714      	adds	r7, #20
 8011aca:	46bd      	mov	sp, r7
 8011acc:	bd90      	pop	{r4, r7, pc}

08011ace <_ZN10TestOutput5printEj>:

void TestOutput::print(size_t n)
{
 8011ace:	b590      	push	{r4, r7, lr}
 8011ad0:	b085      	sub	sp, #20
 8011ad2:	af00      	add	r7, sp, #0
 8011ad4:	6078      	str	r0, [r7, #4]
 8011ad6:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	332c      	adds	r3, #44	; 0x2c
 8011ade:	681c      	ldr	r4, [r3, #0]
 8011ae0:	f107 0308 	add.w	r3, r7, #8
 8011ae4:	6839      	ldr	r1, [r7, #0]
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	f7fd fb34 	bl	800f154 <_Z10StringFromj>
 8011aec:	f107 0308 	add.w	r3, r7, #8
 8011af0:	4618      	mov	r0, r3
 8011af2:	f7fc fdd3 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 8011af6:	4603      	mov	r3, r0
 8011af8:	4619      	mov	r1, r3
 8011afa:	6878      	ldr	r0, [r7, #4]
 8011afc:	47a0      	blx	r4
 8011afe:	f107 0308 	add.w	r3, r7, #8
 8011b02:	4618      	mov	r0, r3
 8011b04:	f7fc fdf7 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 8011b08:	bf00      	nop
 8011b0a:	3714      	adds	r7, #20
 8011b0c:	46bd      	mov	sp, r7
 8011b0e:	bd90      	pop	{r4, r7, pc}

08011b10 <_ZN10TestOutput11printDoubleEd>:

void TestOutput::printDouble(double d)
{
 8011b10:	b590      	push	{r4, r7, lr}
 8011b12:	b087      	sub	sp, #28
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	60f8      	str	r0, [r7, #12]
 8011b18:	ed87 0b00 	vstr	d0, [r7]
    print(StringFrom(d).asCharString());
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	332c      	adds	r3, #44	; 0x2c
 8011b22:	681c      	ldr	r4, [r3, #0]
 8011b24:	f107 0310 	add.w	r3, r7, #16
 8011b28:	2106      	movs	r1, #6
 8011b2a:	ed97 0b00 	vldr	d0, [r7]
 8011b2e:	4618      	mov	r0, r3
 8011b30:	f7fd faa6 	bl	800f080 <_Z10StringFromdi>
 8011b34:	f107 0310 	add.w	r3, r7, #16
 8011b38:	4618      	mov	r0, r3
 8011b3a:	f7fc fdaf 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 8011b3e:	4603      	mov	r3, r0
 8011b40:	4619      	mov	r1, r3
 8011b42:	68f8      	ldr	r0, [r7, #12]
 8011b44:	47a0      	blx	r4
 8011b46:	f107 0310 	add.w	r3, r7, #16
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	f7fc fdd3 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 8011b50:	bf00      	nop
 8011b52:	371c      	adds	r7, #28
 8011b54:	46bd      	mov	sp, r7
 8011b56:	bd90      	pop	{r4, r7, pc}

08011b58 <_ZlsR10TestOutputPKc>:

TestOutput& operator<<(TestOutput& p, const char* s)
{
 8011b58:	b580      	push	{r7, lr}
 8011b5a:	b082      	sub	sp, #8
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
 8011b60:	6039      	str	r1, [r7, #0]
    p.print(s);
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	332c      	adds	r3, #44	; 0x2c
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	6839      	ldr	r1, [r7, #0]
 8011b6c:	6878      	ldr	r0, [r7, #4]
 8011b6e:	4798      	blx	r3
    return p;
 8011b70:	687b      	ldr	r3, [r7, #4]
}
 8011b72:	4618      	mov	r0, r3
 8011b74:	3708      	adds	r7, #8
 8011b76:	46bd      	mov	sp, r7
 8011b78:	bd80      	pop	{r7, pc}
	...

08011b7c <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell>:
    p.print(i);
    return p;
}

void TestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8011b7c:	b590      	push	{r4, r7, lr}
 8011b7e:	b085      	sub	sp, #20
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	6078      	str	r0, [r7, #4]
 8011b84:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) print(test.getFormattedName().asCharString());
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	7a1b      	ldrb	r3, [r3, #8]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d01a      	beq.n	8011bc4 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x48>
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	332c      	adds	r3, #44	; 0x2c
 8011b94:	681c      	ldr	r4, [r3, #0]
 8011b96:	683b      	ldr	r3, [r7, #0]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	3314      	adds	r3, #20
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	f107 0208 	add.w	r2, r7, #8
 8011ba2:	6839      	ldr	r1, [r7, #0]
 8011ba4:	4610      	mov	r0, r2
 8011ba6:	4798      	blx	r3
 8011ba8:	f107 0308 	add.w	r3, r7, #8
 8011bac:	4618      	mov	r0, r3
 8011bae:	f7fc fd75 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 8011bb2:	4603      	mov	r3, r0
 8011bb4:	4619      	mov	r1, r3
 8011bb6:	6878      	ldr	r0, [r7, #4]
 8011bb8:	47a0      	blx	r4
 8011bba:	f107 0308 	add.w	r3, r7, #8
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	f7fc fd99 	bl	800e6f6 <_ZN12SimpleStringD1Ev>

    if (test.willRun()) {
 8011bc4:	683b      	ldr	r3, [r7, #0]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	3318      	adds	r3, #24
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	6838      	ldr	r0, [r7, #0]
 8011bce:	4798      	blx	r3
 8011bd0:	4603      	mov	r3, r0
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d007      	beq.n	8011be6 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x6a>
       setProgressIndicator(".");
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	3344      	adds	r3, #68	; 0x44
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	4907      	ldr	r1, [pc, #28]	; (8011bfc <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x80>)
 8011be0:	6878      	ldr	r0, [r7, #4]
 8011be2:	4798      	blx	r3
    }
    else {
       setProgressIndicator("!");
    }
}
 8011be4:	e006      	b.n	8011bf4 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x78>
       setProgressIndicator("!");
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	3344      	adds	r3, #68	; 0x44
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	4904      	ldr	r1, [pc, #16]	; (8011c00 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x84>)
 8011bf0:	6878      	ldr	r0, [r7, #4]
 8011bf2:	4798      	blx	r3
}
 8011bf4:	bf00      	nop
 8011bf6:	3714      	adds	r7, #20
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	bd90      	pop	{r4, r7, pc}
 8011bfc:	080266b4 	.word	0x080266b4
 8011c00:	080266b8 	.word	0x080266b8

08011c04 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult>:

void TestOutput::printCurrentTestEnded(const TestResult& res)
{
 8011c04:	b590      	push	{r4, r7, lr}
 8011c06:	b083      	sub	sp, #12
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	6078      	str	r0, [r7, #4]
 8011c0c:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) {
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	7a1b      	ldrb	r3, [r3, #8]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d019      	beq.n	8011c4a <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x46>
        print(" - ");
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	332c      	adds	r3, #44	; 0x2c
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	4910      	ldr	r1, [pc, #64]	; (8011c60 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x5c>)
 8011c20:	6878      	ldr	r0, [r7, #4]
 8011c22:	4798      	blx	r3
        print(res.getCurrentTestTotalExecutionTime());
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	3334      	adds	r3, #52	; 0x34
 8011c2a:	681c      	ldr	r4, [r3, #0]
 8011c2c:	6838      	ldr	r0, [r7, #0]
 8011c2e:	f002 f845 	bl	8013cbc <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 8011c32:	4603      	mov	r3, r0
 8011c34:	4619      	mov	r1, r3
 8011c36:	6878      	ldr	r0, [r7, #4]
 8011c38:	47a0      	blx	r4
        print(" ms\n");
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	332c      	adds	r3, #44	; 0x2c
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	4908      	ldr	r1, [pc, #32]	; (8011c64 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x60>)
 8011c44:	6878      	ldr	r0, [r7, #4]
 8011c46:	4798      	blx	r3
    }
    else {
        printProgressIndicator();
    }
}
 8011c48:	e005      	b.n	8011c56 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x52>
        printProgressIndicator();
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	3358      	adds	r3, #88	; 0x58
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	6878      	ldr	r0, [r7, #4]
 8011c54:	4798      	blx	r3
}
 8011c56:	bf00      	nop
 8011c58:	370c      	adds	r7, #12
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	bd90      	pop	{r4, r7, pc}
 8011c5e:	bf00      	nop
 8011c60:	080266bc 	.word	0x080266bc
 8011c64:	080266c0 	.word	0x080266c0

08011c68 <_ZN10TestOutput22printProgressIndicatorEv>:

void TestOutput::printProgressIndicator()
{
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	b082      	sub	sp, #8
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
    print(progressIndication_);
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	332c      	adds	r3, #44	; 0x2c
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	687a      	ldr	r2, [r7, #4]
 8011c7a:	68d2      	ldr	r2, [r2, #12]
 8011c7c:	4611      	mov	r1, r2
 8011c7e:	6878      	ldr	r0, [r7, #4]
 8011c80:	4798      	blx	r3
    if (++dotCount_ % 50 == 0) print("\n");
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	685b      	ldr	r3, [r3, #4]
 8011c86:	1c5a      	adds	r2, r3, #1
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	605a      	str	r2, [r3, #4]
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	685a      	ldr	r2, [r3, #4]
 8011c90:	4b0d      	ldr	r3, [pc, #52]	; (8011cc8 <_ZN10TestOutput22printProgressIndicatorEv+0x60>)
 8011c92:	fb83 1302 	smull	r1, r3, r3, r2
 8011c96:	1119      	asrs	r1, r3, #4
 8011c98:	17d3      	asrs	r3, r2, #31
 8011c9a:	1acb      	subs	r3, r1, r3
 8011c9c:	2132      	movs	r1, #50	; 0x32
 8011c9e:	fb01 f303 	mul.w	r3, r1, r3
 8011ca2:	1ad3      	subs	r3, r2, r3
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	bf0c      	ite	eq
 8011ca8:	2301      	moveq	r3, #1
 8011caa:	2300      	movne	r3, #0
 8011cac:	b2db      	uxtb	r3, r3
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d006      	beq.n	8011cc0 <_ZN10TestOutput22printProgressIndicatorEv+0x58>
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	332c      	adds	r3, #44	; 0x2c
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	4904      	ldr	r1, [pc, #16]	; (8011ccc <_ZN10TestOutput22printProgressIndicatorEv+0x64>)
 8011cbc:	6878      	ldr	r0, [r7, #4]
 8011cbe:	4798      	blx	r3
}
 8011cc0:	bf00      	nop
 8011cc2:	3708      	adds	r7, #8
 8011cc4:	46bd      	mov	sp, r7
 8011cc6:	bd80      	pop	{r7, pc}
 8011cc8:	51eb851f 	.word	0x51eb851f
 8011ccc:	080266c8 	.word	0x080266c8

08011cd0 <_ZN10TestOutput20setProgressIndicatorEPKc>:

void TestOutput::setProgressIndicator(const char* indicator)
{
 8011cd0:	b480      	push	{r7}
 8011cd2:	b083      	sub	sp, #12
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]
 8011cd8:	6039      	str	r1, [r7, #0]
    progressIndication_ = indicator;
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	683a      	ldr	r2, [r7, #0]
 8011cde:	60da      	str	r2, [r3, #12]
}
 8011ce0:	bf00      	nop
 8011ce2:	370c      	adds	r7, #12
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cea:	4770      	bx	lr

08011cec <_ZN10TestOutput17printTestsStartedEv>:

void TestOutput::printTestsStarted()
{
 8011cec:	b480      	push	{r7}
 8011cee:	b083      	sub	sp, #12
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
}
 8011cf4:	bf00      	nop
 8011cf6:	370c      	adds	r7, #12
 8011cf8:	46bd      	mov	sp, r7
 8011cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cfe:	4770      	bx	lr

08011d00 <_ZN10TestOutput24printCurrentGroupStartedERK10UtestShell>:

void TestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 8011d00:	b480      	push	{r7}
 8011d02:	b083      	sub	sp, #12
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
 8011d08:	6039      	str	r1, [r7, #0]
}
 8011d0a:	bf00      	nop
 8011d0c:	370c      	adds	r7, #12
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d14:	4770      	bx	lr

08011d16 <_ZN10TestOutput22printCurrentGroupEndedERK10TestResult>:

void TestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 8011d16:	b480      	push	{r7}
 8011d18:	b083      	sub	sp, #12
 8011d1a:	af00      	add	r7, sp, #0
 8011d1c:	6078      	str	r0, [r7, #4]
 8011d1e:	6039      	str	r1, [r7, #0]
}
 8011d20:	bf00      	nop
 8011d22:	370c      	adds	r7, #12
 8011d24:	46bd      	mov	sp, r7
 8011d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2a:	4770      	bx	lr

08011d2c <_ZN10TestOutput15printTestsEndedERK10TestResult>:

void TestOutput::printTestsEnded(const TestResult& result)
{
 8011d2c:	b590      	push	{r4, r7, lr}
 8011d2e:	b085      	sub	sp, #20
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]
 8011d34:	6039      	str	r1, [r7, #0]
    print("\n");
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	332c      	adds	r3, #44	; 0x2c
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	496f      	ldr	r1, [pc, #444]	; (8011efc <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d0>)
 8011d40:	6878      	ldr	r0, [r7, #4]
 8011d42:	4798      	blx	r3
    const bool isFailure = result.isFailure();
 8011d44:	6838      	ldr	r0, [r7, #0]
 8011d46:	f7f8 f83d 	bl	8009dc4 <_ZNK10TestResult9isFailureEv>
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	73fb      	strb	r3, [r7, #15]
    const size_t failureCount = result.getFailureCount();
 8011d4e:	6838      	ldr	r0, [r7, #0]
 8011d50:	f7f8 f82c 	bl	8009dac <_ZNK10TestResult15getFailureCountEv>
 8011d54:	60b8      	str	r0, [r7, #8]
    if (isFailure) {
 8011d56:	7bfb      	ldrb	r3, [r7, #15]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d02b      	beq.n	8011db4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x88>
        if (color_) {
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	7a5b      	ldrb	r3, [r3, #9]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d006      	beq.n	8011d72 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x46>
            print("\033[31;1m");
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	332c      	adds	r3, #44	; 0x2c
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	4964      	ldr	r1, [pc, #400]	; (8011f00 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d4>)
 8011d6e:	6878      	ldr	r0, [r7, #4]
 8011d70:	4798      	blx	r3
        }
        print("Errors (");
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	332c      	adds	r3, #44	; 0x2c
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	4962      	ldr	r1, [pc, #392]	; (8011f04 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d8>)
 8011d7c:	6878      	ldr	r0, [r7, #4]
 8011d7e:	4798      	blx	r3
        if (failureCount > 0) {
 8011d80:	68bb      	ldr	r3, [r7, #8]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d00e      	beq.n	8011da4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x78>
            print(failureCount);
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	3334      	adds	r3, #52	; 0x34
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	68b9      	ldr	r1, [r7, #8]
 8011d90:	6878      	ldr	r0, [r7, #4]
 8011d92:	4798      	blx	r3
            print(" failures, ");
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	332c      	adds	r3, #44	; 0x2c
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	495a      	ldr	r1, [pc, #360]	; (8011f08 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1dc>)
 8011d9e:	6878      	ldr	r0, [r7, #4]
 8011da0:	4798      	blx	r3
 8011da2:	e019      	b.n	8011dd8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
        else {
            print("ran nothing, ");
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	332c      	adds	r3, #44	; 0x2c
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	4957      	ldr	r1, [pc, #348]	; (8011f0c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e0>)
 8011dae:	6878      	ldr	r0, [r7, #4]
 8011db0:	4798      	blx	r3
 8011db2:	e011      	b.n	8011dd8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
    }
    else {
        if (color_) {
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	7a5b      	ldrb	r3, [r3, #9]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d006      	beq.n	8011dca <_ZN10TestOutput15printTestsEndedERK10TestResult+0x9e>
            print("\033[32;1m");
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	332c      	adds	r3, #44	; 0x2c
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	4952      	ldr	r1, [pc, #328]	; (8011f10 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e4>)
 8011dc6:	6878      	ldr	r0, [r7, #4]
 8011dc8:	4798      	blx	r3
        }
        print("OK (");
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	332c      	adds	r3, #44	; 0x2c
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	4950      	ldr	r1, [pc, #320]	; (8011f14 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e8>)
 8011dd4:	6878      	ldr	r0, [r7, #4]
 8011dd6:	4798      	blx	r3
    }
    print(result.getTestCount());
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	3334      	adds	r3, #52	; 0x34
 8011dde:	681c      	ldr	r4, [r3, #0]
 8011de0:	6838      	ldr	r0, [r7, #0]
 8011de2:	f7ff fdd1 	bl	8011988 <_ZNK10TestResult12getTestCountEv>
 8011de6:	4603      	mov	r3, r0
 8011de8:	4619      	mov	r1, r3
 8011dea:	6878      	ldr	r0, [r7, #4]
 8011dec:	47a0      	blx	r4
    print(" tests, ");
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	332c      	adds	r3, #44	; 0x2c
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	4948      	ldr	r1, [pc, #288]	; (8011f18 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1ec>)
 8011df8:	6878      	ldr	r0, [r7, #4]
 8011dfa:	4798      	blx	r3
    print(result.getRunCount());
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	3334      	adds	r3, #52	; 0x34
 8011e02:	681c      	ldr	r4, [r3, #0]
 8011e04:	6838      	ldr	r0, [r7, #0]
 8011e06:	f7f7 ffb9 	bl	8009d7c <_ZNK10TestResult11getRunCountEv>
 8011e0a:	4603      	mov	r3, r0
 8011e0c:	4619      	mov	r1, r3
 8011e0e:	6878      	ldr	r0, [r7, #4]
 8011e10:	47a0      	blx	r4
    print(" ran, ");
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	332c      	adds	r3, #44	; 0x2c
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	4940      	ldr	r1, [pc, #256]	; (8011f1c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f0>)
 8011e1c:	6878      	ldr	r0, [r7, #4]
 8011e1e:	4798      	blx	r3
    print(result.getCheckCount());
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	3334      	adds	r3, #52	; 0x34
 8011e26:	681c      	ldr	r4, [r3, #0]
 8011e28:	6838      	ldr	r0, [r7, #0]
 8011e2a:	f7f8 fc13 	bl	800a654 <_ZNK10TestResult13getCheckCountEv>
 8011e2e:	4603      	mov	r3, r0
 8011e30:	4619      	mov	r1, r3
 8011e32:	6878      	ldr	r0, [r7, #4]
 8011e34:	47a0      	blx	r4
    print(" checks, ");
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	332c      	adds	r3, #44	; 0x2c
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	4938      	ldr	r1, [pc, #224]	; (8011f20 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f4>)
 8011e40:	6878      	ldr	r0, [r7, #4]
 8011e42:	4798      	blx	r3
    print(result.getIgnoredCount());
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	3334      	adds	r3, #52	; 0x34
 8011e4a:	681c      	ldr	r4, [r3, #0]
 8011e4c:	6838      	ldr	r0, [r7, #0]
 8011e4e:	f7f7 ffa1 	bl	8009d94 <_ZNK10TestResult15getIgnoredCountEv>
 8011e52:	4603      	mov	r3, r0
 8011e54:	4619      	mov	r1, r3
 8011e56:	6878      	ldr	r0, [r7, #4]
 8011e58:	47a0      	blx	r4
    print(" ignored, ");
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	332c      	adds	r3, #44	; 0x2c
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	4930      	ldr	r1, [pc, #192]	; (8011f24 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f8>)
 8011e64:	6878      	ldr	r0, [r7, #4]
 8011e66:	4798      	blx	r3
    print(result.getFilteredOutCount());
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	3334      	adds	r3, #52	; 0x34
 8011e6e:	681c      	ldr	r4, [r3, #0]
 8011e70:	6838      	ldr	r0, [r7, #0]
 8011e72:	f7ff fd95 	bl	80119a0 <_ZNK10TestResult19getFilteredOutCountEv>
 8011e76:	4603      	mov	r3, r0
 8011e78:	4619      	mov	r1, r3
 8011e7a:	6878      	ldr	r0, [r7, #4]
 8011e7c:	47a0      	blx	r4
    print(" filtered out, ");
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	332c      	adds	r3, #44	; 0x2c
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	4928      	ldr	r1, [pc, #160]	; (8011f28 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1fc>)
 8011e88:	6878      	ldr	r0, [r7, #4]
 8011e8a:	4798      	blx	r3
    print(result.getTotalExecutionTime());
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	3334      	adds	r3, #52	; 0x34
 8011e92:	681c      	ldr	r4, [r3, #0]
 8011e94:	6838      	ldr	r0, [r7, #0]
 8011e96:	f001 ff05 	bl	8013ca4 <_ZNK10TestResult21getTotalExecutionTimeEv>
 8011e9a:	4603      	mov	r3, r0
 8011e9c:	4619      	mov	r1, r3
 8011e9e:	6878      	ldr	r0, [r7, #4]
 8011ea0:	47a0      	blx	r4
    print(" ms)");
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	332c      	adds	r3, #44	; 0x2c
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	4920      	ldr	r1, [pc, #128]	; (8011f2c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x200>)
 8011eac:	6878      	ldr	r0, [r7, #4]
 8011eae:	4798      	blx	r3
    if (color_) {
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	7a5b      	ldrb	r3, [r3, #9]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d006      	beq.n	8011ec6 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x19a>
        print("\033[m");
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	332c      	adds	r3, #44	; 0x2c
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	491b      	ldr	r1, [pc, #108]	; (8011f30 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x204>)
 8011ec2:	6878      	ldr	r0, [r7, #4]
 8011ec4:	4798      	blx	r3
    }
    if (isFailure && failureCount == 0) {
 8011ec6:	7bfb      	ldrb	r3, [r7, #15]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d009      	beq.n	8011ee0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
 8011ecc:	68bb      	ldr	r3, [r7, #8]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d106      	bne.n	8011ee0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
              "This often happens because of linking errors or typos in test filter.");
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	332c      	adds	r3, #44	; 0x2c
 8011ed8:	681b      	ldr	r3, [r3, #0]
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
 8011eda:	4916      	ldr	r1, [pc, #88]	; (8011f34 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x208>)
 8011edc:	6878      	ldr	r0, [r7, #4]
 8011ede:	4798      	blx	r3
    }
    print("\n\n");
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	332c      	adds	r3, #44	; 0x2c
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	4913      	ldr	r1, [pc, #76]	; (8011f38 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x20c>)
 8011eea:	6878      	ldr	r0, [r7, #4]
 8011eec:	4798      	blx	r3

    dotCount_ = 0;
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	605a      	str	r2, [r3, #4]
}
 8011ef4:	bf00      	nop
 8011ef6:	3714      	adds	r7, #20
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	bd90      	pop	{r4, r7, pc}
 8011efc:	080266c8 	.word	0x080266c8
 8011f00:	080266cc 	.word	0x080266cc
 8011f04:	080266d4 	.word	0x080266d4
 8011f08:	080266e0 	.word	0x080266e0
 8011f0c:	080266ec 	.word	0x080266ec
 8011f10:	080266fc 	.word	0x080266fc
 8011f14:	08026704 	.word	0x08026704
 8011f18:	0802670c 	.word	0x0802670c
 8011f1c:	08026718 	.word	0x08026718
 8011f20:	08026720 	.word	0x08026720
 8011f24:	0802672c 	.word	0x0802672c
 8011f28:	08026738 	.word	0x08026738
 8011f2c:	08026748 	.word	0x08026748
 8011f30:	08026750 	.word	0x08026750
 8011f34:	08026754 	.word	0x08026754
 8011f38:	080267f8 	.word	0x080267f8

08011f3c <_ZN10TestOutput12printTestRunEjj>:

void TestOutput::printTestRun(size_t number, size_t total)
{
 8011f3c:	b580      	push	{r7, lr}
 8011f3e:	b084      	sub	sp, #16
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	60f8      	str	r0, [r7, #12]
 8011f44:	60b9      	str	r1, [r7, #8]
 8011f46:	607a      	str	r2, [r7, #4]
    if (total > 1) {
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	2b01      	cmp	r3, #1
 8011f4c:	d922      	bls.n	8011f94 <_ZN10TestOutput12printTestRunEjj+0x58>
        print("Test run ");
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	332c      	adds	r3, #44	; 0x2c
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	4911      	ldr	r1, [pc, #68]	; (8011f9c <_ZN10TestOutput12printTestRunEjj+0x60>)
 8011f58:	68f8      	ldr	r0, [r7, #12]
 8011f5a:	4798      	blx	r3
        print(number);
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	3334      	adds	r3, #52	; 0x34
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	68b9      	ldr	r1, [r7, #8]
 8011f66:	68f8      	ldr	r0, [r7, #12]
 8011f68:	4798      	blx	r3
        print(" of ");
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	332c      	adds	r3, #44	; 0x2c
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	490b      	ldr	r1, [pc, #44]	; (8011fa0 <_ZN10TestOutput12printTestRunEjj+0x64>)
 8011f74:	68f8      	ldr	r0, [r7, #12]
 8011f76:	4798      	blx	r3
        print(total);
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	3334      	adds	r3, #52	; 0x34
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	6879      	ldr	r1, [r7, #4]
 8011f82:	68f8      	ldr	r0, [r7, #12]
 8011f84:	4798      	blx	r3
        print("\n");
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	332c      	adds	r3, #44	; 0x2c
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	4905      	ldr	r1, [pc, #20]	; (8011fa4 <_ZN10TestOutput12printTestRunEjj+0x68>)
 8011f90:	68f8      	ldr	r0, [r7, #12]
 8011f92:	4798      	blx	r3
    }
}
 8011f94:	bf00      	nop
 8011f96:	3710      	adds	r7, #16
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	bd80      	pop	{r7, pc}
 8011f9c:	080267fc 	.word	0x080267fc
 8011fa0:	08026808 	.word	0x08026808
 8011fa4:	080266c8 	.word	0x080266c8

08011fa8 <_ZN10TestOutput12printFailureERK11TestFailure>:

void TestOutput::printFailure(const TestFailure& failure)
{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b084      	sub	sp, #16
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
 8011fb0:	6039      	str	r1, [r7, #0]
    if (failure.isOutsideTestFile() || failure.isInHelperFunction())
 8011fb2:	6838      	ldr	r0, [r7, #0]
 8011fb4:	f7fd ffa1 	bl	800fefa <_ZNK11TestFailure17isOutsideTestFileEv>
 8011fb8:	4603      	mov	r3, r0
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d105      	bne.n	8011fca <_ZN10TestOutput12printFailureERK11TestFailure+0x22>
 8011fbe:	6838      	ldr	r0, [r7, #0]
 8011fc0:	f7fd ffad 	bl	800ff1e <_ZNK11TestFailure18isInHelperFunctionEv>
 8011fc4:	4603      	mov	r3, r0
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d001      	beq.n	8011fce <_ZN10TestOutput12printFailureERK11TestFailure+0x26>
 8011fca:	2301      	movs	r3, #1
 8011fcc:	e000      	b.n	8011fd0 <_ZN10TestOutput12printFailureERK11TestFailure+0x28>
 8011fce:	2300      	movs	r3, #0
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d004      	beq.n	8011fde <_ZN10TestOutput12printFailureERK11TestFailure+0x36>
        printFileAndLineForTestAndFailure(failure);
 8011fd4:	6839      	ldr	r1, [r7, #0]
 8011fd6:	6878      	ldr	r0, [r7, #4]
 8011fd8:	f000 f81d 	bl	8012016 <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>
 8011fdc:	e003      	b.n	8011fe6 <_ZN10TestOutput12printFailureERK11TestFailure+0x3e>
    else
        printFileAndLineForFailure(failure);
 8011fde:	6839      	ldr	r1, [r7, #0]
 8011fe0:	6878      	ldr	r0, [r7, #4]
 8011fe2:	f000 f86b 	bl	80120bc <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>

    printFailureMessage(failure.getMessage());
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	3318      	adds	r3, #24
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	f107 0208 	add.w	r2, r7, #8
 8011ff2:	6839      	ldr	r1, [r7, #0]
 8011ff4:	4610      	mov	r0, r2
 8011ff6:	4798      	blx	r3
 8011ff8:	f107 0308 	add.w	r3, r7, #8
 8011ffc:	4619      	mov	r1, r3
 8011ffe:	6878      	ldr	r0, [r7, #4]
 8012000:	f000 f8b2 	bl	8012168 <_ZN10TestOutput19printFailureMessageE12SimpleString>
 8012004:	f107 0308 	add.w	r3, r7, #8
 8012008:	4618      	mov	r0, r3
 801200a:	f7fc fb74 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 801200e:	bf00      	nop
 8012010:	3710      	adds	r7, #16
 8012012:	46bd      	mov	sp, r7
 8012014:	bd80      	pop	{r7, pc}

08012016 <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>:

void TestOutput::printFileAndLineForTestAndFailure(const TestFailure& failure)
{
 8012016:	b580      	push	{r7, lr}
 8012018:	b088      	sub	sp, #32
 801201a:	af00      	add	r7, sp, #0
 801201c:	6078      	str	r0, [r7, #4]
 801201e:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getTestFileName(), failure.getTestLineNumber());
 8012020:	683b      	ldr	r3, [r7, #0]
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	331c      	adds	r3, #28
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	f107 0208 	add.w	r2, r7, #8
 801202c:	6839      	ldr	r1, [r7, #0]
 801202e:	4610      	mov	r0, r2
 8012030:	4798      	blx	r3
 8012032:	683b      	ldr	r3, [r7, #0]
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	3320      	adds	r3, #32
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	6838      	ldr	r0, [r7, #0]
 801203c:	4798      	blx	r3
 801203e:	4602      	mov	r2, r0
 8012040:	f107 0308 	add.w	r3, r7, #8
 8012044:	4619      	mov	r1, r3
 8012046:	6878      	ldr	r0, [r7, #4]
 8012048:	f000 f8be 	bl	80121c8 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 801204c:	f107 0308 	add.w	r3, r7, #8
 8012050:	4618      	mov	r0, r3
 8012052:	f7fc fb50 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 8012056:	683b      	ldr	r3, [r7, #0]
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	330c      	adds	r3, #12
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	f107 0210 	add.w	r2, r7, #16
 8012062:	6839      	ldr	r1, [r7, #0]
 8012064:	4610      	mov	r0, r2
 8012066:	4798      	blx	r3
 8012068:	f107 0310 	add.w	r3, r7, #16
 801206c:	4619      	mov	r1, r3
 801206e:	6878      	ldr	r0, [r7, #4]
 8012070:	f000 f85c 	bl	801212c <_ZN10TestOutput18printFailureInTestE12SimpleString>
 8012074:	f107 0310 	add.w	r3, r7, #16
 8012078:	4618      	mov	r0, r3
 801207a:	f7fc fb3c 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 801207e:	683b      	ldr	r3, [r7, #0]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	3308      	adds	r3, #8
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	f107 0218 	add.w	r2, r7, #24
 801208a:	6839      	ldr	r1, [r7, #0]
 801208c:	4610      	mov	r0, r2
 801208e:	4798      	blx	r3
 8012090:	683b      	ldr	r3, [r7, #0]
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	3314      	adds	r3, #20
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	6838      	ldr	r0, [r7, #0]
 801209a:	4798      	blx	r3
 801209c:	4602      	mov	r2, r0
 801209e:	f107 0318 	add.w	r3, r7, #24
 80120a2:	4619      	mov	r1, r3
 80120a4:	6878      	ldr	r0, [r7, #4]
 80120a6:	f000 f88f 	bl	80121c8 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 80120aa:	f107 0318 	add.w	r3, r7, #24
 80120ae:	4618      	mov	r0, r3
 80120b0:	f7fc fb21 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 80120b4:	bf00      	nop
 80120b6:	3720      	adds	r7, #32
 80120b8:	46bd      	mov	sp, r7
 80120ba:	bd80      	pop	{r7, pc}

080120bc <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>:

void TestOutput::printFileAndLineForFailure(const TestFailure& failure)
{
 80120bc:	b580      	push	{r7, lr}
 80120be:	b086      	sub	sp, #24
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
 80120c4:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 80120c6:	683b      	ldr	r3, [r7, #0]
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	3308      	adds	r3, #8
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	f107 0208 	add.w	r2, r7, #8
 80120d2:	6839      	ldr	r1, [r7, #0]
 80120d4:	4610      	mov	r0, r2
 80120d6:	4798      	blx	r3
 80120d8:	683b      	ldr	r3, [r7, #0]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	3314      	adds	r3, #20
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	6838      	ldr	r0, [r7, #0]
 80120e2:	4798      	blx	r3
 80120e4:	4602      	mov	r2, r0
 80120e6:	f107 0308 	add.w	r3, r7, #8
 80120ea:	4619      	mov	r1, r3
 80120ec:	6878      	ldr	r0, [r7, #4]
 80120ee:	f000 f86b 	bl	80121c8 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 80120f2:	f107 0308 	add.w	r3, r7, #8
 80120f6:	4618      	mov	r0, r3
 80120f8:	f7fc fafd 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 80120fc:	683b      	ldr	r3, [r7, #0]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	330c      	adds	r3, #12
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	f107 0210 	add.w	r2, r7, #16
 8012108:	6839      	ldr	r1, [r7, #0]
 801210a:	4610      	mov	r0, r2
 801210c:	4798      	blx	r3
 801210e:	f107 0310 	add.w	r3, r7, #16
 8012112:	4619      	mov	r1, r3
 8012114:	6878      	ldr	r0, [r7, #4]
 8012116:	f000 f809 	bl	801212c <_ZN10TestOutput18printFailureInTestE12SimpleString>
 801211a:	f107 0310 	add.w	r3, r7, #16
 801211e:	4618      	mov	r0, r3
 8012120:	f7fc fae9 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 8012124:	bf00      	nop
 8012126:	3718      	adds	r7, #24
 8012128:	46bd      	mov	sp, r7
 801212a:	bd80      	pop	{r7, pc}

0801212c <_ZN10TestOutput18printFailureInTestE12SimpleString>:

void TestOutput::printFailureInTest(SimpleString testName)
{
 801212c:	b590      	push	{r4, r7, lr}
 801212e:	b083      	sub	sp, #12
 8012130:	af00      	add	r7, sp, #0
 8012132:	6078      	str	r0, [r7, #4]
 8012134:	6039      	str	r1, [r7, #0]
    print(" Failure in ");
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	332c      	adds	r3, #44	; 0x2c
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	4909      	ldr	r1, [pc, #36]	; (8012164 <_ZN10TestOutput18printFailureInTestE12SimpleString+0x38>)
 8012140:	6878      	ldr	r0, [r7, #4]
 8012142:	4798      	blx	r3
    print(testName.asCharString());
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	332c      	adds	r3, #44	; 0x2c
 801214a:	681c      	ldr	r4, [r3, #0]
 801214c:	6838      	ldr	r0, [r7, #0]
 801214e:	f7fc faa5 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 8012152:	4603      	mov	r3, r0
 8012154:	4619      	mov	r1, r3
 8012156:	6878      	ldr	r0, [r7, #4]
 8012158:	47a0      	blx	r4
}
 801215a:	bf00      	nop
 801215c:	370c      	adds	r7, #12
 801215e:	46bd      	mov	sp, r7
 8012160:	bd90      	pop	{r4, r7, pc}
 8012162:	bf00      	nop
 8012164:	08026810 	.word	0x08026810

08012168 <_ZN10TestOutput19printFailureMessageE12SimpleString>:

void TestOutput::printFailureMessage(SimpleString reason)
{
 8012168:	b590      	push	{r4, r7, lr}
 801216a:	b083      	sub	sp, #12
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
 8012170:	6039      	str	r1, [r7, #0]
    print("\n");
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	332c      	adds	r3, #44	; 0x2c
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	4910      	ldr	r1, [pc, #64]	; (80121bc <_ZN10TestOutput19printFailureMessageE12SimpleString+0x54>)
 801217c:	6878      	ldr	r0, [r7, #4]
 801217e:	4798      	blx	r3
    print("\t");
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	332c      	adds	r3, #44	; 0x2c
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	490d      	ldr	r1, [pc, #52]	; (80121c0 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x58>)
 801218a:	6878      	ldr	r0, [r7, #4]
 801218c:	4798      	blx	r3
    print(reason.asCharString());
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	332c      	adds	r3, #44	; 0x2c
 8012194:	681c      	ldr	r4, [r3, #0]
 8012196:	6838      	ldr	r0, [r7, #0]
 8012198:	f7fc fa80 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 801219c:	4603      	mov	r3, r0
 801219e:	4619      	mov	r1, r3
 80121a0:	6878      	ldr	r0, [r7, #4]
 80121a2:	47a0      	blx	r4
    print("\n\n");
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	332c      	adds	r3, #44	; 0x2c
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	4905      	ldr	r1, [pc, #20]	; (80121c4 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x5c>)
 80121ae:	6878      	ldr	r0, [r7, #4]
 80121b0:	4798      	blx	r3
}
 80121b2:	bf00      	nop
 80121b4:	370c      	adds	r7, #12
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bd90      	pop	{r4, r7, pc}
 80121ba:	bf00      	nop
 80121bc:	080266c8 	.word	0x080266c8
 80121c0:	08026820 	.word	0x08026820
 80121c4:	080267f8 	.word	0x080267f8

080121c8 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>:

void TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString file, size_t lineNumber)
{
 80121c8:	b590      	push	{r4, r7, lr}
 80121ca:	b089      	sub	sp, #36	; 0x24
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	60f8      	str	r0, [r7, #12]
 80121d0:	60b9      	str	r1, [r7, #8]
 80121d2:	607a      	str	r2, [r7, #4]
    if (TestOutput::getWorkingEnvironment() == TestOutput::visualStudio)
 80121d4:	f7ff fbf0 	bl	80119b8 <_ZN10TestOutput21getWorkingEnvironmentEv>
 80121d8:	4603      	mov	r3, r0
 80121da:	2b00      	cmp	r3, #0
 80121dc:	bf0c      	ite	eq
 80121de:	2301      	moveq	r3, #1
 80121e0:	2300      	movne	r3, #0
 80121e2:	b2db      	uxtb	r3, r3
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d015      	beq.n	8012214 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x4c>
        printVisualStudioErrorInFileOnLine(file, lineNumber);
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	3354      	adds	r3, #84	; 0x54
 80121ee:	681c      	ldr	r4, [r3, #0]
 80121f0:	f107 0310 	add.w	r3, r7, #16
 80121f4:	68b9      	ldr	r1, [r7, #8]
 80121f6:	4618      	mov	r0, r3
 80121f8:	f7fb ff19 	bl	800e02e <_ZN12SimpleStringC1ERKS_>
 80121fc:	f107 0310 	add.w	r3, r7, #16
 8012200:	687a      	ldr	r2, [r7, #4]
 8012202:	4619      	mov	r1, r3
 8012204:	68f8      	ldr	r0, [r7, #12]
 8012206:	47a0      	blx	r4
 8012208:	f107 0310 	add.w	r3, r7, #16
 801220c:	4618      	mov	r0, r3
 801220e:	f7fc fa72 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    else
        printEclipseErrorInFileOnLine(file, lineNumber);
}
 8012212:	e014      	b.n	801223e <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x76>
        printEclipseErrorInFileOnLine(file, lineNumber);
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	3350      	adds	r3, #80	; 0x50
 801221a:	681c      	ldr	r4, [r3, #0]
 801221c:	f107 0318 	add.w	r3, r7, #24
 8012220:	68b9      	ldr	r1, [r7, #8]
 8012222:	4618      	mov	r0, r3
 8012224:	f7fb ff03 	bl	800e02e <_ZN12SimpleStringC1ERKS_>
 8012228:	f107 0318 	add.w	r3, r7, #24
 801222c:	687a      	ldr	r2, [r7, #4]
 801222e:	4619      	mov	r1, r3
 8012230:	68f8      	ldr	r0, [r7, #12]
 8012232:	47a0      	blx	r4
 8012234:	f107 0318 	add.w	r3, r7, #24
 8012238:	4618      	mov	r0, r3
 801223a:	f7fc fa5c 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 801223e:	bf00      	nop
 8012240:	3724      	adds	r7, #36	; 0x24
 8012242:	46bd      	mov	sp, r7
 8012244:	bd90      	pop	{r4, r7, pc}
	...

08012248 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printEclipseErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 8012248:	b590      	push	{r4, r7, lr}
 801224a:	b085      	sub	sp, #20
 801224c:	af00      	add	r7, sp, #0
 801224e:	60f8      	str	r0, [r7, #12]
 8012250:	60b9      	str	r1, [r7, #8]
 8012252:	607a      	str	r2, [r7, #4]
    print("\n");
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	332c      	adds	r3, #44	; 0x2c
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	4916      	ldr	r1, [pc, #88]	; (80122b8 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x70>)
 801225e:	68f8      	ldr	r0, [r7, #12]
 8012260:	4798      	blx	r3
    print(file.asCharString());
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	332c      	adds	r3, #44	; 0x2c
 8012268:	681c      	ldr	r4, [r3, #0]
 801226a:	68b8      	ldr	r0, [r7, #8]
 801226c:	f7fc fa16 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 8012270:	4603      	mov	r3, r0
 8012272:	4619      	mov	r1, r3
 8012274:	68f8      	ldr	r0, [r7, #12]
 8012276:	47a0      	blx	r4
    print(":");
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	332c      	adds	r3, #44	; 0x2c
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	490e      	ldr	r1, [pc, #56]	; (80122bc <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 8012282:	68f8      	ldr	r0, [r7, #12]
 8012284:	4798      	blx	r3
    print(lineNumber);
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	3334      	adds	r3, #52	; 0x34
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	6879      	ldr	r1, [r7, #4]
 8012290:	68f8      	ldr	r0, [r7, #12]
 8012292:	4798      	blx	r3
    print(":");
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	332c      	adds	r3, #44	; 0x2c
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	4907      	ldr	r1, [pc, #28]	; (80122bc <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 801229e:	68f8      	ldr	r0, [r7, #12]
 80122a0:	4798      	blx	r3
    print(" error:");
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	332c      	adds	r3, #44	; 0x2c
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	4905      	ldr	r1, [pc, #20]	; (80122c0 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x78>)
 80122ac:	68f8      	ldr	r0, [r7, #12]
 80122ae:	4798      	blx	r3
}
 80122b0:	bf00      	nop
 80122b2:	3714      	adds	r7, #20
 80122b4:	46bd      	mov	sp, r7
 80122b6:	bd90      	pop	{r4, r7, pc}
 80122b8:	080266c8 	.word	0x080266c8
 80122bc:	08026824 	.word	0x08026824
 80122c0:	08026828 	.word	0x08026828

080122c4 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printVisualStudioErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 80122c4:	b590      	push	{r4, r7, lr}
 80122c6:	b085      	sub	sp, #20
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	60f8      	str	r0, [r7, #12]
 80122cc:	60b9      	str	r1, [r7, #8]
 80122ce:	607a      	str	r2, [r7, #4]
    print("\n");
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	332c      	adds	r3, #44	; 0x2c
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	4916      	ldr	r1, [pc, #88]	; (8012334 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x70>)
 80122da:	68f8      	ldr	r0, [r7, #12]
 80122dc:	4798      	blx	r3
    print(file.asCharString());
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	332c      	adds	r3, #44	; 0x2c
 80122e4:	681c      	ldr	r4, [r3, #0]
 80122e6:	68b8      	ldr	r0, [r7, #8]
 80122e8:	f7fc f9d8 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 80122ec:	4603      	mov	r3, r0
 80122ee:	4619      	mov	r1, r3
 80122f0:	68f8      	ldr	r0, [r7, #12]
 80122f2:	47a0      	blx	r4
    print("(");
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	332c      	adds	r3, #44	; 0x2c
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	490e      	ldr	r1, [pc, #56]	; (8012338 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x74>)
 80122fe:	68f8      	ldr	r0, [r7, #12]
 8012300:	4798      	blx	r3
    print(lineNumber);
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	3334      	adds	r3, #52	; 0x34
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	6879      	ldr	r1, [r7, #4]
 801230c:	68f8      	ldr	r0, [r7, #12]
 801230e:	4798      	blx	r3
    print("):");
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	332c      	adds	r3, #44	; 0x2c
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	4908      	ldr	r1, [pc, #32]	; (801233c <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x78>)
 801231a:	68f8      	ldr	r0, [r7, #12]
 801231c:	4798      	blx	r3
    print(" error:");
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	332c      	adds	r3, #44	; 0x2c
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	4906      	ldr	r1, [pc, #24]	; (8012340 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x7c>)
 8012328:	68f8      	ldr	r0, [r7, #12]
 801232a:	4798      	blx	r3
}
 801232c:	bf00      	nop
 801232e:	3714      	adds	r7, #20
 8012330:	46bd      	mov	sp, r7
 8012332:	bd90      	pop	{r4, r7, pc}
 8012334:	080266c8 	.word	0x080266c8
 8012338:	08026830 	.word	0x08026830
 801233c:	08026834 	.word	0x08026834
 8012340:	08026828 	.word	0x08026828

08012344 <_ZN10TestOutput16printVeryVerboseEPKc>:

void TestOutput::printVeryVerbose(const char* str)
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b082      	sub	sp, #8
 8012348:	af00      	add	r7, sp, #0
 801234a:	6078      	str	r0, [r7, #4]
 801234c:	6039      	str	r1, [r7, #0]
    if(verbose_ == level_veryVerbose)
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	7a1b      	ldrb	r3, [r3, #8]
 8012352:	2b02      	cmp	r3, #2
 8012354:	d106      	bne.n	8012364 <_ZN10TestOutput16printVeryVerboseEPKc+0x20>
        printBuffer(str);
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	3328      	adds	r3, #40	; 0x28
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	6839      	ldr	r1, [r7, #0]
 8012360:	6878      	ldr	r0, [r7, #4]
 8012362:	4798      	blx	r3
}
 8012364:	bf00      	nop
 8012366:	3708      	adds	r7, #8
 8012368:	46bd      	mov	sp, r7
 801236a:	bd80      	pop	{r7, pc}

0801236c <_ZN17ConsoleTestOutput11printBufferEPKc>:


void ConsoleTestOutput::printBuffer(const char* s)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b082      	sub	sp, #8
 8012370:	af00      	add	r7, sp, #0
 8012372:	6078      	str	r0, [r7, #4]
 8012374:	6039      	str	r1, [r7, #0]
    while (*s) {
 8012376:	683b      	ldr	r3, [r7, #0]
 8012378:	781b      	ldrb	r3, [r3, #0]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d009      	beq.n	8012392 <_ZN17ConsoleTestOutput11printBufferEPKc+0x26>
        PlatformSpecificPutchar(*s);
 801237e:	4b0a      	ldr	r3, [pc, #40]	; (80123a8 <_ZN17ConsoleTestOutput11printBufferEPKc+0x3c>)
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	683a      	ldr	r2, [r7, #0]
 8012384:	7812      	ldrb	r2, [r2, #0]
 8012386:	4610      	mov	r0, r2
 8012388:	4798      	blx	r3
        s++;
 801238a:	683b      	ldr	r3, [r7, #0]
 801238c:	3301      	adds	r3, #1
 801238e:	603b      	str	r3, [r7, #0]
    while (*s) {
 8012390:	e7f1      	b.n	8012376 <_ZN17ConsoleTestOutput11printBufferEPKc+0xa>
    }
    flush();
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	334c      	adds	r3, #76	; 0x4c
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	6878      	ldr	r0, [r7, #4]
 801239c:	4798      	blx	r3
}
 801239e:	bf00      	nop
 80123a0:	3708      	adds	r7, #8
 80123a2:	46bd      	mov	sp, r7
 80123a4:	bd80      	pop	{r7, pc}
 80123a6:	bf00      	nop
 80123a8:	200000c0 	.word	0x200000c0

080123ac <_ZN17ConsoleTestOutput5flushEv>:

void ConsoleTestOutput::flush()
{
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b082      	sub	sp, #8
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
    PlatformSpecificFlush();
 80123b4:	4b03      	ldr	r3, [pc, #12]	; (80123c4 <_ZN17ConsoleTestOutput5flushEv+0x18>)
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	4798      	blx	r3
}
 80123ba:	bf00      	nop
 80123bc:	3708      	adds	r7, #8
 80123be:	46bd      	mov	sp, r7
 80123c0:	bd80      	pop	{r7, pc}
 80123c2:	bf00      	nop
 80123c4:	200000c4 	.word	0x200000c4

080123c8 <_ZN19CompositeTestOutputC1Ev>:

StringBufferTestOutput::~StringBufferTestOutput()
{
}

CompositeTestOutput::CompositeTestOutput()
 80123c8:	b580      	push	{r7, lr}
 80123ca:	b082      	sub	sp, #8
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	6078      	str	r0, [r7, #4]
  : outputOne_(NULLPTR), outputTwo_(NULLPTR)
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	4618      	mov	r0, r3
 80123d4:	f7ff fb00 	bl	80119d8 <_ZN10TestOutputC1Ev>
 80123d8:	4a06      	ldr	r2, [pc, #24]	; (80123f4 <_ZN19CompositeTestOutputC1Ev+0x2c>)
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	601a      	str	r2, [r3, #0]
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	2200      	movs	r2, #0
 80123e2:	611a      	str	r2, [r3, #16]
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	2200      	movs	r2, #0
 80123e8:	615a      	str	r2, [r3, #20]
{
}
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	4618      	mov	r0, r3
 80123ee:	3708      	adds	r7, #8
 80123f0:	46bd      	mov	sp, r7
 80123f2:	bd80      	pop	{r7, pc}
 80123f4:	0802a298 	.word	0x0802a298

080123f8 <_ZN19CompositeTestOutputD1Ev>:

CompositeTestOutput::~CompositeTestOutput()
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b082      	sub	sp, #8
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
 8012400:	4a0e      	ldr	r2, [pc, #56]	; (801243c <_ZN19CompositeTestOutputD1Ev+0x44>)
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	601a      	str	r2, [r3, #0]
{
  delete outputOne_;
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	691b      	ldr	r3, [r3, #16]
 801240a:	2b00      	cmp	r3, #0
 801240c:	d004      	beq.n	8012418 <_ZN19CompositeTestOutputD1Ev+0x20>
 801240e:	681a      	ldr	r2, [r3, #0]
 8012410:	3204      	adds	r2, #4
 8012412:	6812      	ldr	r2, [r2, #0]
 8012414:	4618      	mov	r0, r3
 8012416:	4790      	blx	r2
  delete outputTwo_;
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	695b      	ldr	r3, [r3, #20]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d004      	beq.n	801242a <_ZN19CompositeTestOutputD1Ev+0x32>
 8012420:	681a      	ldr	r2, [r3, #0]
 8012422:	3204      	adds	r2, #4
 8012424:	6812      	ldr	r2, [r2, #0]
 8012426:	4618      	mov	r0, r3
 8012428:	4790      	blx	r2
CompositeTestOutput::~CompositeTestOutput()
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	4618      	mov	r0, r3
 801242e:	f7ff faf1 	bl	8011a14 <_ZN10TestOutputD1Ev>
}
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	4618      	mov	r0, r3
 8012436:	3708      	adds	r7, #8
 8012438:	46bd      	mov	sp, r7
 801243a:	bd80      	pop	{r7, pc}
 801243c:	0802a298 	.word	0x0802a298

08012440 <_ZN19CompositeTestOutputD0Ev>:
CompositeTestOutput::~CompositeTestOutput()
 8012440:	b580      	push	{r7, lr}
 8012442:	b082      	sub	sp, #8
 8012444:	af00      	add	r7, sp, #0
 8012446:	6078      	str	r0, [r7, #4]
}
 8012448:	6878      	ldr	r0, [r7, #4]
 801244a:	f7ff ffd5 	bl	80123f8 <_ZN19CompositeTestOutputD1Ev>
 801244e:	2118      	movs	r1, #24
 8012450:	6878      	ldr	r0, [r7, #4]
 8012452:	f7f9 f9e9 	bl	800b828 <_ZdlPvj>
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	4618      	mov	r0, r3
 801245a:	3708      	adds	r7, #8
 801245c:	46bd      	mov	sp, r7
 801245e:	bd80      	pop	{r7, pc}

08012460 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput>:

void CompositeTestOutput::setOutputOne(TestOutput* output)
{
 8012460:	b580      	push	{r7, lr}
 8012462:	b082      	sub	sp, #8
 8012464:	af00      	add	r7, sp, #0
 8012466:	6078      	str	r0, [r7, #4]
 8012468:	6039      	str	r1, [r7, #0]
  delete outputOne_;
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	691b      	ldr	r3, [r3, #16]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d004      	beq.n	801247c <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput+0x1c>
 8012472:	681a      	ldr	r2, [r3, #0]
 8012474:	3204      	adds	r2, #4
 8012476:	6812      	ldr	r2, [r2, #0]
 8012478:	4618      	mov	r0, r3
 801247a:	4790      	blx	r2
  outputOne_ = output;
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	683a      	ldr	r2, [r7, #0]
 8012480:	611a      	str	r2, [r3, #16]
}
 8012482:	bf00      	nop
 8012484:	3708      	adds	r7, #8
 8012486:	46bd      	mov	sp, r7
 8012488:	bd80      	pop	{r7, pc}

0801248a <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput>:

void CompositeTestOutput::setOutputTwo(TestOutput* output)
{
 801248a:	b580      	push	{r7, lr}
 801248c:	b082      	sub	sp, #8
 801248e:	af00      	add	r7, sp, #0
 8012490:	6078      	str	r0, [r7, #4]
 8012492:	6039      	str	r1, [r7, #0]
  delete outputTwo_;
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	695b      	ldr	r3, [r3, #20]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d004      	beq.n	80124a6 <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput+0x1c>
 801249c:	681a      	ldr	r2, [r3, #0]
 801249e:	3204      	adds	r2, #4
 80124a0:	6812      	ldr	r2, [r2, #0]
 80124a2:	4618      	mov	r0, r3
 80124a4:	4790      	blx	r2
  outputTwo_ = output;
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	683a      	ldr	r2, [r7, #0]
 80124aa:	615a      	str	r2, [r3, #20]
}
 80124ac:	bf00      	nop
 80124ae:	3708      	adds	r7, #8
 80124b0:	46bd      	mov	sp, r7
 80124b2:	bd80      	pop	{r7, pc}

080124b4 <_ZN19CompositeTestOutput17printTestsStartedEv>:

void CompositeTestOutput::printTestsStarted()
{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b082      	sub	sp, #8
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->printTestsStarted();
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	691b      	ldr	r3, [r3, #16]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d008      	beq.n	80124d6 <_ZN19CompositeTestOutput17printTestsStartedEv+0x22>
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	691a      	ldr	r2, [r3, #16]
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	691b      	ldr	r3, [r3, #16]
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	3308      	adds	r3, #8
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	4610      	mov	r0, r2
 80124d4:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsStarted();
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	695b      	ldr	r3, [r3, #20]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d008      	beq.n	80124f0 <_ZN19CompositeTestOutput17printTestsStartedEv+0x3c>
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	695a      	ldr	r2, [r3, #20]
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	695b      	ldr	r3, [r3, #20]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	3308      	adds	r3, #8
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	4610      	mov	r0, r2
 80124ee:	4798      	blx	r3
}
 80124f0:	bf00      	nop
 80124f2:	3708      	adds	r7, #8
 80124f4:	46bd      	mov	sp, r7
 80124f6:	bd80      	pop	{r7, pc}

080124f8 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult>:

void CompositeTestOutput::printTestsEnded(const TestResult& result)
{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b082      	sub	sp, #8
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	6078      	str	r0, [r7, #4]
 8012500:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printTestsEnded(result);
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	691b      	ldr	r3, [r3, #16]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d009      	beq.n	801251e <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x26>
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	691a      	ldr	r2, [r3, #16]
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	691b      	ldr	r3, [r3, #16]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	330c      	adds	r3, #12
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	6839      	ldr	r1, [r7, #0]
 801251a:	4610      	mov	r0, r2
 801251c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsEnded(result);
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	695b      	ldr	r3, [r3, #20]
 8012522:	2b00      	cmp	r3, #0
 8012524:	d009      	beq.n	801253a <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x42>
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	695a      	ldr	r2, [r3, #20]
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	695b      	ldr	r3, [r3, #20]
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	330c      	adds	r3, #12
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	6839      	ldr	r1, [r7, #0]
 8012536:	4610      	mov	r0, r2
 8012538:	4798      	blx	r3
}
 801253a:	bf00      	nop
 801253c:	3708      	adds	r7, #8
 801253e:	46bd      	mov	sp, r7
 8012540:	bd80      	pop	{r7, pc}

08012542 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8012542:	b580      	push	{r7, lr}
 8012544:	b082      	sub	sp, #8
 8012546:	af00      	add	r7, sp, #0
 8012548:	6078      	str	r0, [r7, #4]
 801254a:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestStarted(test);
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	691b      	ldr	r3, [r3, #16]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d009      	beq.n	8012568 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x26>
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	691a      	ldr	r2, [r3, #16]
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	691b      	ldr	r3, [r3, #16]
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	3310      	adds	r3, #16
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	6839      	ldr	r1, [r7, #0]
 8012564:	4610      	mov	r0, r2
 8012566:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestStarted(test);
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	695b      	ldr	r3, [r3, #20]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d009      	beq.n	8012584 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x42>
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	695a      	ldr	r2, [r3, #20]
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	695b      	ldr	r3, [r3, #20]
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	3310      	adds	r3, #16
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	6839      	ldr	r1, [r7, #0]
 8012580:	4610      	mov	r0, r2
 8012582:	4798      	blx	r3
}
 8012584:	bf00      	nop
 8012586:	3708      	adds	r7, #8
 8012588:	46bd      	mov	sp, r7
 801258a:	bd80      	pop	{r7, pc}

0801258c <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult>:

void CompositeTestOutput::printCurrentTestEnded(const TestResult& res)
{
 801258c:	b580      	push	{r7, lr}
 801258e:	b082      	sub	sp, #8
 8012590:	af00      	add	r7, sp, #0
 8012592:	6078      	str	r0, [r7, #4]
 8012594:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestEnded(res);
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	691b      	ldr	r3, [r3, #16]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d009      	beq.n	80125b2 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x26>
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	691a      	ldr	r2, [r3, #16]
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	691b      	ldr	r3, [r3, #16]
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	3314      	adds	r3, #20
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	6839      	ldr	r1, [r7, #0]
 80125ae:	4610      	mov	r0, r2
 80125b0:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestEnded(res);
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	695b      	ldr	r3, [r3, #20]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d009      	beq.n	80125ce <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x42>
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	695a      	ldr	r2, [r3, #20]
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	695b      	ldr	r3, [r3, #20]
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	3314      	adds	r3, #20
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	6839      	ldr	r1, [r7, #0]
 80125ca:	4610      	mov	r0, r2
 80125cc:	4798      	blx	r3
}
 80125ce:	bf00      	nop
 80125d0:	3708      	adds	r7, #8
 80125d2:	46bd      	mov	sp, r7
 80125d4:	bd80      	pop	{r7, pc}

080125d6 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 80125d6:	b580      	push	{r7, lr}
 80125d8:	b082      	sub	sp, #8
 80125da:	af00      	add	r7, sp, #0
 80125dc:	6078      	str	r0, [r7, #4]
 80125de:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupStarted(test);
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	691b      	ldr	r3, [r3, #16]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d009      	beq.n	80125fc <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x26>
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	691a      	ldr	r2, [r3, #16]
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	691b      	ldr	r3, [r3, #16]
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	3318      	adds	r3, #24
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	6839      	ldr	r1, [r7, #0]
 80125f8:	4610      	mov	r0, r2
 80125fa:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupStarted(test);
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	695b      	ldr	r3, [r3, #20]
 8012600:	2b00      	cmp	r3, #0
 8012602:	d009      	beq.n	8012618 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x42>
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	695a      	ldr	r2, [r3, #20]
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	695b      	ldr	r3, [r3, #20]
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	3318      	adds	r3, #24
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	6839      	ldr	r1, [r7, #0]
 8012614:	4610      	mov	r0, r2
 8012616:	4798      	blx	r3
}
 8012618:	bf00      	nop
 801261a:	3708      	adds	r7, #8
 801261c:	46bd      	mov	sp, r7
 801261e:	bd80      	pop	{r7, pc}

08012620 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult>:

void CompositeTestOutput::printCurrentGroupEnded(const TestResult& res)
{
 8012620:	b580      	push	{r7, lr}
 8012622:	b082      	sub	sp, #8
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
 8012628:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupEnded(res);
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	691b      	ldr	r3, [r3, #16]
 801262e:	2b00      	cmp	r3, #0
 8012630:	d009      	beq.n	8012646 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x26>
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	691a      	ldr	r2, [r3, #16]
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	691b      	ldr	r3, [r3, #16]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	331c      	adds	r3, #28
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	6839      	ldr	r1, [r7, #0]
 8012642:	4610      	mov	r0, r2
 8012644:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupEnded(res);
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	695b      	ldr	r3, [r3, #20]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d009      	beq.n	8012662 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x42>
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	695a      	ldr	r2, [r3, #20]
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	695b      	ldr	r3, [r3, #20]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	331c      	adds	r3, #28
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	6839      	ldr	r1, [r7, #0]
 801265e:	4610      	mov	r0, r2
 8012660:	4798      	blx	r3
}
 8012662:	bf00      	nop
 8012664:	3708      	adds	r7, #8
 8012666:	46bd      	mov	sp, r7
 8012668:	bd80      	pop	{r7, pc}

0801266a <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE>:

void CompositeTestOutput::verbose(VerbosityLevel level)
{
 801266a:	b580      	push	{r7, lr}
 801266c:	b082      	sub	sp, #8
 801266e:	af00      	add	r7, sp, #0
 8012670:	6078      	str	r0, [r7, #4]
 8012672:	460b      	mov	r3, r1
 8012674:	70fb      	strb	r3, [r7, #3]
  if (outputOne_) outputOne_->verbose(level);
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	691b      	ldr	r3, [r3, #16]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d009      	beq.n	8012692 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x28>
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	691a      	ldr	r2, [r3, #16]
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	691b      	ldr	r3, [r3, #16]
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	3320      	adds	r3, #32
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	78f9      	ldrb	r1, [r7, #3]
 801268e:	4610      	mov	r0, r2
 8012690:	4798      	blx	r3
  if (outputTwo_) outputTwo_->verbose(level);
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	695b      	ldr	r3, [r3, #20]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d009      	beq.n	80126ae <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x44>
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	695a      	ldr	r2, [r3, #20]
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	695b      	ldr	r3, [r3, #20]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	3320      	adds	r3, #32
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	78f9      	ldrb	r1, [r7, #3]
 80126aa:	4610      	mov	r0, r2
 80126ac:	4798      	blx	r3
}
 80126ae:	bf00      	nop
 80126b0:	3708      	adds	r7, #8
 80126b2:	46bd      	mov	sp, r7
 80126b4:	bd80      	pop	{r7, pc}

080126b6 <_ZN19CompositeTestOutput5colorEv>:

void CompositeTestOutput::color()
{
 80126b6:	b580      	push	{r7, lr}
 80126b8:	b082      	sub	sp, #8
 80126ba:	af00      	add	r7, sp, #0
 80126bc:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->color();
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	691b      	ldr	r3, [r3, #16]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d008      	beq.n	80126d8 <_ZN19CompositeTestOutput5colorEv+0x22>
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	691a      	ldr	r2, [r3, #16]
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	691b      	ldr	r3, [r3, #16]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	3324      	adds	r3, #36	; 0x24
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	4610      	mov	r0, r2
 80126d6:	4798      	blx	r3
  if (outputTwo_) outputTwo_->color();
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	695b      	ldr	r3, [r3, #20]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d008      	beq.n	80126f2 <_ZN19CompositeTestOutput5colorEv+0x3c>
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	695a      	ldr	r2, [r3, #20]
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	695b      	ldr	r3, [r3, #20]
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	3324      	adds	r3, #36	; 0x24
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	4610      	mov	r0, r2
 80126f0:	4798      	blx	r3
}
 80126f2:	bf00      	nop
 80126f4:	3708      	adds	r7, #8
 80126f6:	46bd      	mov	sp, r7
 80126f8:	bd80      	pop	{r7, pc}

080126fa <_ZN19CompositeTestOutput11printBufferEPKc>:

void CompositeTestOutput::printBuffer(const char* buffer)
{
 80126fa:	b580      	push	{r7, lr}
 80126fc:	b082      	sub	sp, #8
 80126fe:	af00      	add	r7, sp, #0
 8012700:	6078      	str	r0, [r7, #4]
 8012702:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printBuffer(buffer);
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	691b      	ldr	r3, [r3, #16]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d009      	beq.n	8012720 <_ZN19CompositeTestOutput11printBufferEPKc+0x26>
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	691a      	ldr	r2, [r3, #16]
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	691b      	ldr	r3, [r3, #16]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	3328      	adds	r3, #40	; 0x28
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	6839      	ldr	r1, [r7, #0]
 801271c:	4610      	mov	r0, r2
 801271e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printBuffer(buffer);
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	695b      	ldr	r3, [r3, #20]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d009      	beq.n	801273c <_ZN19CompositeTestOutput11printBufferEPKc+0x42>
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	695a      	ldr	r2, [r3, #20]
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	695b      	ldr	r3, [r3, #20]
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	3328      	adds	r3, #40	; 0x28
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	6839      	ldr	r1, [r7, #0]
 8012738:	4610      	mov	r0, r2
 801273a:	4798      	blx	r3
}
 801273c:	bf00      	nop
 801273e:	3708      	adds	r7, #8
 8012740:	46bd      	mov	sp, r7
 8012742:	bd80      	pop	{r7, pc}

08012744 <_ZN19CompositeTestOutput5printEPKc>:

void CompositeTestOutput::print(const char* buffer)
{
 8012744:	b580      	push	{r7, lr}
 8012746:	b082      	sub	sp, #8
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]
 801274c:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(buffer);
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	691b      	ldr	r3, [r3, #16]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d009      	beq.n	801276a <_ZN19CompositeTestOutput5printEPKc+0x26>
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	691a      	ldr	r2, [r3, #16]
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	691b      	ldr	r3, [r3, #16]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	332c      	adds	r3, #44	; 0x2c
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	6839      	ldr	r1, [r7, #0]
 8012766:	4610      	mov	r0, r2
 8012768:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(buffer);
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	695b      	ldr	r3, [r3, #20]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d009      	beq.n	8012786 <_ZN19CompositeTestOutput5printEPKc+0x42>
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	695a      	ldr	r2, [r3, #20]
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	695b      	ldr	r3, [r3, #20]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	332c      	adds	r3, #44	; 0x2c
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	6839      	ldr	r1, [r7, #0]
 8012782:	4610      	mov	r0, r2
 8012784:	4798      	blx	r3
}
 8012786:	bf00      	nop
 8012788:	3708      	adds	r7, #8
 801278a:	46bd      	mov	sp, r7
 801278c:	bd80      	pop	{r7, pc}

0801278e <_ZN19CompositeTestOutput5printEl>:

void CompositeTestOutput::print(long number)
{
 801278e:	b580      	push	{r7, lr}
 8012790:	b082      	sub	sp, #8
 8012792:	af00      	add	r7, sp, #0
 8012794:	6078      	str	r0, [r7, #4]
 8012796:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	691b      	ldr	r3, [r3, #16]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d009      	beq.n	80127b4 <_ZN19CompositeTestOutput5printEl+0x26>
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	691a      	ldr	r2, [r3, #16]
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	691b      	ldr	r3, [r3, #16]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	3330      	adds	r3, #48	; 0x30
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	6839      	ldr	r1, [r7, #0]
 80127b0:	4610      	mov	r0, r2
 80127b2:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	695b      	ldr	r3, [r3, #20]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d009      	beq.n	80127d0 <_ZN19CompositeTestOutput5printEl+0x42>
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	695a      	ldr	r2, [r3, #20]
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	695b      	ldr	r3, [r3, #20]
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	3330      	adds	r3, #48	; 0x30
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	6839      	ldr	r1, [r7, #0]
 80127cc:	4610      	mov	r0, r2
 80127ce:	4798      	blx	r3
}
 80127d0:	bf00      	nop
 80127d2:	3708      	adds	r7, #8
 80127d4:	46bd      	mov	sp, r7
 80127d6:	bd80      	pop	{r7, pc}

080127d8 <_ZN19CompositeTestOutput5printEj>:

void CompositeTestOutput::print(size_t number)
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	b082      	sub	sp, #8
 80127dc:	af00      	add	r7, sp, #0
 80127de:	6078      	str	r0, [r7, #4]
 80127e0:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	691b      	ldr	r3, [r3, #16]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d009      	beq.n	80127fe <_ZN19CompositeTestOutput5printEj+0x26>
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	691a      	ldr	r2, [r3, #16]
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	691b      	ldr	r3, [r3, #16]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	3334      	adds	r3, #52	; 0x34
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	6839      	ldr	r1, [r7, #0]
 80127fa:	4610      	mov	r0, r2
 80127fc:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	695b      	ldr	r3, [r3, #20]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d009      	beq.n	801281a <_ZN19CompositeTestOutput5printEj+0x42>
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	695a      	ldr	r2, [r3, #20]
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	695b      	ldr	r3, [r3, #20]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	3334      	adds	r3, #52	; 0x34
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	6839      	ldr	r1, [r7, #0]
 8012816:	4610      	mov	r0, r2
 8012818:	4798      	blx	r3
}
 801281a:	bf00      	nop
 801281c:	3708      	adds	r7, #8
 801281e:	46bd      	mov	sp, r7
 8012820:	bd80      	pop	{r7, pc}

08012822 <_ZN19CompositeTestOutput11printDoubleEd>:

void CompositeTestOutput::printDouble(double number)
{
 8012822:	b580      	push	{r7, lr}
 8012824:	b084      	sub	sp, #16
 8012826:	af00      	add	r7, sp, #0
 8012828:	60f8      	str	r0, [r7, #12]
 801282a:	ed87 0b00 	vstr	d0, [r7]
  if (outputOne_) outputOne_->printDouble(number);
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	691b      	ldr	r3, [r3, #16]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d00a      	beq.n	801284c <_ZN19CompositeTestOutput11printDoubleEd+0x2a>
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	691a      	ldr	r2, [r3, #16]
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	691b      	ldr	r3, [r3, #16]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	3338      	adds	r3, #56	; 0x38
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	ed97 0b00 	vldr	d0, [r7]
 8012848:	4610      	mov	r0, r2
 801284a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printDouble(number);
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	695b      	ldr	r3, [r3, #20]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d00a      	beq.n	801286a <_ZN19CompositeTestOutput11printDoubleEd+0x48>
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	695a      	ldr	r2, [r3, #20]
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	695b      	ldr	r3, [r3, #20]
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	3338      	adds	r3, #56	; 0x38
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	ed97 0b00 	vldr	d0, [r7]
 8012866:	4610      	mov	r0, r2
 8012868:	4798      	blx	r3
}
 801286a:	bf00      	nop
 801286c:	3710      	adds	r7, #16
 801286e:	46bd      	mov	sp, r7
 8012870:	bd80      	pop	{r7, pc}

08012872 <_ZN19CompositeTestOutput12printFailureERK11TestFailure>:

void CompositeTestOutput::printFailure(const TestFailure& failure)
{
 8012872:	b580      	push	{r7, lr}
 8012874:	b082      	sub	sp, #8
 8012876:	af00      	add	r7, sp, #0
 8012878:	6078      	str	r0, [r7, #4]
 801287a:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printFailure(failure);
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	691b      	ldr	r3, [r3, #16]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d009      	beq.n	8012898 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x26>
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	691a      	ldr	r2, [r3, #16]
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	691b      	ldr	r3, [r3, #16]
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	333c      	adds	r3, #60	; 0x3c
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	6839      	ldr	r1, [r7, #0]
 8012894:	4610      	mov	r0, r2
 8012896:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printFailure(failure);
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	695b      	ldr	r3, [r3, #20]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d009      	beq.n	80128b4 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x42>
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	695a      	ldr	r2, [r3, #20]
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	695b      	ldr	r3, [r3, #20]
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	333c      	adds	r3, #60	; 0x3c
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	6839      	ldr	r1, [r7, #0]
 80128b0:	4610      	mov	r0, r2
 80128b2:	4798      	blx	r3
}
 80128b4:	bf00      	nop
 80128b6:	3708      	adds	r7, #8
 80128b8:	46bd      	mov	sp, r7
 80128ba:	bd80      	pop	{r7, pc}

080128bc <_ZN19CompositeTestOutput20setProgressIndicatorEPKc>:

void CompositeTestOutput::setProgressIndicator(const char* indicator)
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b082      	sub	sp, #8
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
 80128c4:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->setProgressIndicator(indicator);
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	691b      	ldr	r3, [r3, #16]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d009      	beq.n	80128e2 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x26>
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	691a      	ldr	r2, [r3, #16]
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	691b      	ldr	r3, [r3, #16]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	3344      	adds	r3, #68	; 0x44
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	6839      	ldr	r1, [r7, #0]
 80128de:	4610      	mov	r0, r2
 80128e0:	4798      	blx	r3
  if (outputTwo_) outputTwo_->setProgressIndicator(indicator);
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	695b      	ldr	r3, [r3, #20]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d009      	beq.n	80128fe <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x42>
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	695a      	ldr	r2, [r3, #20]
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	695b      	ldr	r3, [r3, #20]
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	3344      	adds	r3, #68	; 0x44
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	6839      	ldr	r1, [r7, #0]
 80128fa:	4610      	mov	r0, r2
 80128fc:	4798      	blx	r3
}
 80128fe:	bf00      	nop
 8012900:	3708      	adds	r7, #8
 8012902:	46bd      	mov	sp, r7
 8012904:	bd80      	pop	{r7, pc}

08012906 <_ZN19CompositeTestOutput5flushEv>:

void CompositeTestOutput::flush()
{
 8012906:	b580      	push	{r7, lr}
 8012908:	b082      	sub	sp, #8
 801290a:	af00      	add	r7, sp, #0
 801290c:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->flush();
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	691b      	ldr	r3, [r3, #16]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d008      	beq.n	8012928 <_ZN19CompositeTestOutput5flushEv+0x22>
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	691a      	ldr	r2, [r3, #16]
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	691b      	ldr	r3, [r3, #16]
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	334c      	adds	r3, #76	; 0x4c
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	4610      	mov	r0, r2
 8012926:	4798      	blx	r3
  if (outputTwo_) outputTwo_->flush();
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	695b      	ldr	r3, [r3, #20]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d008      	beq.n	8012942 <_ZN19CompositeTestOutput5flushEv+0x3c>
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	695a      	ldr	r2, [r3, #20]
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	695b      	ldr	r3, [r3, #20]
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	334c      	adds	r3, #76	; 0x4c
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	4610      	mov	r0, r2
 8012940:	4798      	blx	r3
}
 8012942:	bf00      	nop
 8012944:	3708      	adds	r7, #8
 8012946:	46bd      	mov	sp, r7
 8012948:	bd80      	pop	{r7, pc}

0801294a <_ZN10TestPlugin13preTestActionER10UtestShellR10TestResult>:
    virtual void preTestAction(UtestShell&, TestResult&)
 801294a:	b480      	push	{r7}
 801294c:	b085      	sub	sp, #20
 801294e:	af00      	add	r7, sp, #0
 8012950:	60f8      	str	r0, [r7, #12]
 8012952:	60b9      	str	r1, [r7, #8]
 8012954:	607a      	str	r2, [r7, #4]
    }
 8012956:	bf00      	nop
 8012958:	3714      	adds	r7, #20
 801295a:	46bd      	mov	sp, r7
 801295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012960:	4770      	bx	lr

08012962 <_ZN10TestPlugin14postTestActionER10UtestShellR10TestResult>:
    virtual void postTestAction(UtestShell&, TestResult&)
 8012962:	b480      	push	{r7}
 8012964:	b085      	sub	sp, #20
 8012966:	af00      	add	r7, sp, #0
 8012968:	60f8      	str	r0, [r7, #12]
 801296a:	60b9      	str	r1, [r7, #8]
 801296c:	607a      	str	r2, [r7, #4]
    }
 801296e:	bf00      	nop
 8012970:	3714      	adds	r7, #20
 8012972:	46bd      	mov	sp, r7
 8012974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012978:	4770      	bx	lr
	...

0801297c <_ZN10TestPluginC1ERK12SimpleString>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestPlugin.h"

TestPlugin::TestPlugin(const SimpleString& name) :
 801297c:	b580      	push	{r7, lr}
 801297e:	b082      	sub	sp, #8
 8012980:	af00      	add	r7, sp, #0
 8012982:	6078      	str	r0, [r7, #4]
 8012984:	6039      	str	r1, [r7, #0]
    next_(NullTestPlugin::instance()), name_(name), enabled_(true)
 8012986:	4a0b      	ldr	r2, [pc, #44]	; (80129b4 <_ZN10TestPluginC1ERK12SimpleString+0x38>)
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	601a      	str	r2, [r3, #0]
 801298c:	f000 f9ce 	bl	8012d2c <_ZN14NullTestPlugin8instanceEv>
 8012990:	4602      	mov	r2, r0
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	605a      	str	r2, [r3, #4]
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	3308      	adds	r3, #8
 801299a:	6839      	ldr	r1, [r7, #0]
 801299c:	4618      	mov	r0, r3
 801299e:	f7fb fb46 	bl	800e02e <_ZN12SimpleStringC1ERKS_>
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	2201      	movs	r2, #1
 80129a6:	741a      	strb	r2, [r3, #16]
{
}
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	4618      	mov	r0, r3
 80129ac:	3708      	adds	r7, #8
 80129ae:	46bd      	mov	sp, r7
 80129b0:	bd80      	pop	{r7, pc}
 80129b2:	bf00      	nop
 80129b4:	0802a454 	.word	0x0802a454

080129b8 <_ZN10TestPluginC1EPS_>:

TestPlugin::TestPlugin(TestPlugin* next) :
 80129b8:	b580      	push	{r7, lr}
 80129ba:	b082      	sub	sp, #8
 80129bc:	af00      	add	r7, sp, #0
 80129be:	6078      	str	r0, [r7, #4]
 80129c0:	6039      	str	r1, [r7, #0]
    next_(next), name_("null"), enabled_(true)
 80129c2:	4a0a      	ldr	r2, [pc, #40]	; (80129ec <_ZN10TestPluginC1EPS_+0x34>)
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	601a      	str	r2, [r3, #0]
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	683a      	ldr	r2, [r7, #0]
 80129cc:	605a      	str	r2, [r3, #4]
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	3308      	adds	r3, #8
 80129d2:	4907      	ldr	r1, [pc, #28]	; (80129f0 <_ZN10TestPluginC1EPS_+0x38>)
 80129d4:	4618      	mov	r0, r3
 80129d6:	f7fb fad6 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	2201      	movs	r2, #1
 80129de:	741a      	strb	r2, [r3, #16]
{
}
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	4618      	mov	r0, r3
 80129e4:	3708      	adds	r7, #8
 80129e6:	46bd      	mov	sp, r7
 80129e8:	bd80      	pop	{r7, pc}
 80129ea:	bf00      	nop
 80129ec:	0802a454 	.word	0x0802a454
 80129f0:	08026838 	.word	0x08026838

080129f4 <_ZN10TestPluginD1Ev>:

TestPlugin::~TestPlugin()
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b082      	sub	sp, #8
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
 80129fc:	4a06      	ldr	r2, [pc, #24]	; (8012a18 <_ZN10TestPluginD1Ev+0x24>)
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	601a      	str	r2, [r3, #0]
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	3308      	adds	r3, #8
 8012a06:	4618      	mov	r0, r3
 8012a08:	f7fb fe75 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
{
}
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	4618      	mov	r0, r3
 8012a10:	3708      	adds	r7, #8
 8012a12:	46bd      	mov	sp, r7
 8012a14:	bd80      	pop	{r7, pc}
 8012a16:	bf00      	nop
 8012a18:	0802a454 	.word	0x0802a454

08012a1c <_ZN10TestPluginD0Ev>:
TestPlugin::~TestPlugin()
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b082      	sub	sp, #8
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	6078      	str	r0, [r7, #4]
}
 8012a24:	6878      	ldr	r0, [r7, #4]
 8012a26:	f7ff ffe5 	bl	80129f4 <_ZN10TestPluginD1Ev>
 8012a2a:	2114      	movs	r1, #20
 8012a2c:	6878      	ldr	r0, [r7, #4]
 8012a2e:	f7f8 fefb 	bl	800b828 <_ZdlPvj>
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	4618      	mov	r0, r3
 8012a36:	3708      	adds	r7, #8
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	bd80      	pop	{r7, pc}

08012a3c <_ZN10TestPlugin9addPluginEPS_>:

TestPlugin* TestPlugin::addPlugin(TestPlugin* plugin)
{
 8012a3c:	b480      	push	{r7}
 8012a3e:	b083      	sub	sp, #12
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	6078      	str	r0, [r7, #4]
 8012a44:	6039      	str	r1, [r7, #0]
    next_ = plugin;
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	683a      	ldr	r2, [r7, #0]
 8012a4a:	605a      	str	r2, [r3, #4]
    return this;
 8012a4c:	687b      	ldr	r3, [r7, #4]
}
 8012a4e:	4618      	mov	r0, r3
 8012a50:	370c      	adds	r7, #12
 8012a52:	46bd      	mov	sp, r7
 8012a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a58:	4770      	bx	lr

08012a5a <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPreTestAction(UtestShell& test, TestResult& result)
{
 8012a5a:	b580      	push	{r7, lr}
 8012a5c:	b084      	sub	sp, #16
 8012a5e:	af00      	add	r7, sp, #0
 8012a60:	60f8      	str	r0, [r7, #12]
 8012a62:	60b9      	str	r1, [r7, #8]
 8012a64:	607a      	str	r2, [r7, #4]
    if (enabled_) preTestAction(test, result);
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	7c1b      	ldrb	r3, [r3, #16]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d007      	beq.n	8012a7e <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult+0x24>
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	3308      	adds	r3, #8
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	687a      	ldr	r2, [r7, #4]
 8012a78:	68b9      	ldr	r1, [r7, #8]
 8012a7a:	68f8      	ldr	r0, [r7, #12]
 8012a7c:	4798      	blx	r3
    next_->runAllPreTestAction(test, result);
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	6858      	ldr	r0, [r3, #4]
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	685b      	ldr	r3, [r3, #4]
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	3314      	adds	r3, #20
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	687a      	ldr	r2, [r7, #4]
 8012a8e:	68b9      	ldr	r1, [r7, #8]
 8012a90:	4798      	blx	r3
}
 8012a92:	bf00      	nop
 8012a94:	3710      	adds	r7, #16
 8012a96:	46bd      	mov	sp, r7
 8012a98:	bd80      	pop	{r7, pc}

08012a9a <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPostTestAction(UtestShell& test, TestResult& result)
{
 8012a9a:	b580      	push	{r7, lr}
 8012a9c:	b084      	sub	sp, #16
 8012a9e:	af00      	add	r7, sp, #0
 8012aa0:	60f8      	str	r0, [r7, #12]
 8012aa2:	60b9      	str	r1, [r7, #8]
 8012aa4:	607a      	str	r2, [r7, #4]
    next_ ->runAllPostTestAction(test, result);
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	6858      	ldr	r0, [r3, #4]
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	685b      	ldr	r3, [r3, #4]
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	3318      	adds	r3, #24
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	687a      	ldr	r2, [r7, #4]
 8012ab6:	68b9      	ldr	r1, [r7, #8]
 8012ab8:	4798      	blx	r3
    if (enabled_) postTestAction(test, result);
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	7c1b      	ldrb	r3, [r3, #16]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d007      	beq.n	8012ad2 <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult+0x38>
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	330c      	adds	r3, #12
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	687a      	ldr	r2, [r7, #4]
 8012acc:	68b9      	ldr	r1, [r7, #8]
 8012ace:	68f8      	ldr	r0, [r7, #12]
 8012ad0:	4798      	blx	r3
}
 8012ad2:	bf00      	nop
 8012ad4:	3710      	adds	r7, #16
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	bd80      	pop	{r7, pc}

08012ada <_ZN10TestPlugin17parseAllArgumentsEiPPci>:

bool TestPlugin::parseAllArguments(int ac, char** av, int index)
{
 8012ada:	b590      	push	{r4, r7, lr}
 8012adc:	b085      	sub	sp, #20
 8012ade:	af00      	add	r7, sp, #0
 8012ae0:	60f8      	str	r0, [r7, #12]
 8012ae2:	60b9      	str	r1, [r7, #8]
 8012ae4:	607a      	str	r2, [r7, #4]
 8012ae6:	603b      	str	r3, [r7, #0]
    return parseAllArguments(ac, const_cast<const char *const *> (av), index);
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	331c      	adds	r3, #28
 8012aee:	681c      	ldr	r4, [r3, #0]
 8012af0:	683b      	ldr	r3, [r7, #0]
 8012af2:	687a      	ldr	r2, [r7, #4]
 8012af4:	68b9      	ldr	r1, [r7, #8]
 8012af6:	68f8      	ldr	r0, [r7, #12]
 8012af8:	47a0      	blx	r4
 8012afa:	4603      	mov	r3, r0
}
 8012afc:	4618      	mov	r0, r3
 8012afe:	3714      	adds	r7, #20
 8012b00:	46bd      	mov	sp, r7
 8012b02:	bd90      	pop	{r4, r7, pc}

08012b04 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci>:

bool TestPlugin::parseAllArguments(int ac, const char *const *av, int index)
{
 8012b04:	b590      	push	{r4, r7, lr}
 8012b06:	b085      	sub	sp, #20
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	60f8      	str	r0, [r7, #12]
 8012b0c:	60b9      	str	r1, [r7, #8]
 8012b0e:	607a      	str	r2, [r7, #4]
 8012b10:	603b      	str	r3, [r7, #0]
    if (parseArguments(ac, av, index)) return true;
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	3310      	adds	r3, #16
 8012b18:	681c      	ldr	r4, [r3, #0]
 8012b1a:	683b      	ldr	r3, [r7, #0]
 8012b1c:	687a      	ldr	r2, [r7, #4]
 8012b1e:	68b9      	ldr	r1, [r7, #8]
 8012b20:	68f8      	ldr	r0, [r7, #12]
 8012b22:	47a0      	blx	r4
 8012b24:	4603      	mov	r3, r0
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d001      	beq.n	8012b2e <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x2a>
 8012b2a:	2301      	movs	r3, #1
 8012b2c:	e011      	b.n	8012b52 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    if (next_) return next_->parseAllArguments(ac, av, index);
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	685b      	ldr	r3, [r3, #4]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d00c      	beq.n	8012b50 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4c>
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	6858      	ldr	r0, [r3, #4]
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	685b      	ldr	r3, [r3, #4]
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	331c      	adds	r3, #28
 8012b42:	681c      	ldr	r4, [r3, #0]
 8012b44:	683b      	ldr	r3, [r7, #0]
 8012b46:	687a      	ldr	r2, [r7, #4]
 8012b48:	68b9      	ldr	r1, [r7, #8]
 8012b4a:	47a0      	blx	r4
 8012b4c:	4603      	mov	r3, r0
 8012b4e:	e000      	b.n	8012b52 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    return false;
 8012b50:	2300      	movs	r3, #0
}
 8012b52:	4618      	mov	r0, r3
 8012b54:	3714      	adds	r7, #20
 8012b56:	46bd      	mov	sp, r7
 8012b58:	bd90      	pop	{r4, r7, pc}

08012b5a <_ZN10TestPlugin7getNameEv>:

const SimpleString& TestPlugin::getName()
{
 8012b5a:	b480      	push	{r7}
 8012b5c:	b083      	sub	sp, #12
 8012b5e:	af00      	add	r7, sp, #0
 8012b60:	6078      	str	r0, [r7, #4]
    return name_;
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	3308      	adds	r3, #8
}
 8012b66:	4618      	mov	r0, r3
 8012b68:	370c      	adds	r7, #12
 8012b6a:	46bd      	mov	sp, r7
 8012b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b70:	4770      	bx	lr

08012b72 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>:

TestPlugin* TestPlugin::getPluginByName(const SimpleString& name)
{
 8012b72:	b580      	push	{r7, lr}
 8012b74:	b082      	sub	sp, #8
 8012b76:	af00      	add	r7, sp, #0
 8012b78:	6078      	str	r0, [r7, #4]
 8012b7a:	6039      	str	r1, [r7, #0]
    if (name == name_) return this;
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	3308      	adds	r3, #8
 8012b80:	4619      	mov	r1, r3
 8012b82:	6838      	ldr	r0, [r7, #0]
 8012b84:	f7fb fdc3 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 8012b88:	4603      	mov	r3, r0
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d001      	beq.n	8012b92 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x20>
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	e00d      	b.n	8012bae <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    if (next_) return next_->getPluginByName(name);
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	685b      	ldr	r3, [r3, #4]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d007      	beq.n	8012baa <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x38>
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	685b      	ldr	r3, [r3, #4]
 8012b9e:	6839      	ldr	r1, [r7, #0]
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	f7ff ffe6 	bl	8012b72 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 8012ba6:	4603      	mov	r3, r0
 8012ba8:	e001      	b.n	8012bae <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    return (next_);
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	685b      	ldr	r3, [r3, #4]
}
 8012bae:	4618      	mov	r0, r3
 8012bb0:	3708      	adds	r7, #8
 8012bb2:	46bd      	mov	sp, r7
 8012bb4:	bd80      	pop	{r7, pc}

08012bb6 <_ZN10TestPlugin7getNextEv>:

TestPlugin* TestPlugin::getNext()
{
 8012bb6:	b480      	push	{r7}
 8012bb8:	b083      	sub	sp, #12
 8012bba:	af00      	add	r7, sp, #0
 8012bbc:	6078      	str	r0, [r7, #4]
    return next_;
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	685b      	ldr	r3, [r3, #4]
}
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	370c      	adds	r7, #12
 8012bc6:	46bd      	mov	sp, r7
 8012bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bcc:	4770      	bx	lr

08012bce <_ZN10TestPlugin18removePluginByNameERK12SimpleString>:
TestPlugin* TestPlugin::removePluginByName(const SimpleString& name)
{
 8012bce:	b580      	push	{r7, lr}
 8012bd0:	b084      	sub	sp, #16
 8012bd2:	af00      	add	r7, sp, #0
 8012bd4:	6078      	str	r0, [r7, #4]
 8012bd6:	6039      	str	r1, [r7, #0]
    TestPlugin* removed = NULLPTR;
 8012bd8:	2300      	movs	r3, #0
 8012bda:	60fb      	str	r3, [r7, #12]
    if (next_ && next_->getName() == name) {
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	685b      	ldr	r3, [r3, #4]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d00e      	beq.n	8012c02 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	685b      	ldr	r3, [r3, #4]
 8012be8:	4618      	mov	r0, r3
 8012bea:	f7ff ffb6 	bl	8012b5a <_ZN10TestPlugin7getNameEv>
 8012bee:	4603      	mov	r3, r0
 8012bf0:	6839      	ldr	r1, [r7, #0]
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	f7fb fd8b 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 8012bf8:	4603      	mov	r3, r0
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d001      	beq.n	8012c02 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 8012bfe:	2301      	movs	r3, #1
 8012c00:	e000      	b.n	8012c04 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x36>
 8012c02:	2300      	movs	r3, #0
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d007      	beq.n	8012c18 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x4a>
        removed = next_;
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	685b      	ldr	r3, [r3, #4]
 8012c0c:	60fb      	str	r3, [r7, #12]
        next_ = next_->next_;
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	685b      	ldr	r3, [r3, #4]
 8012c12:	685a      	ldr	r2, [r3, #4]
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	605a      	str	r2, [r3, #4]
    }
    return removed;
 8012c18:	68fb      	ldr	r3, [r7, #12]
}
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	3710      	adds	r7, #16
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	bd80      	pop	{r7, pc}

08012c22 <_ZN10TestPlugin7disableEv>:

void TestPlugin::disable()
{
 8012c22:	b480      	push	{r7}
 8012c24:	b083      	sub	sp, #12
 8012c26:	af00      	add	r7, sp, #0
 8012c28:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	2200      	movs	r2, #0
 8012c2e:	741a      	strb	r2, [r3, #16]
}
 8012c30:	bf00      	nop
 8012c32:	370c      	adds	r7, #12
 8012c34:	46bd      	mov	sp, r7
 8012c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c3a:	4770      	bx	lr

08012c3c <_ZN10TestPlugin6enableEv>:

void TestPlugin::enable()
{
 8012c3c:	b480      	push	{r7}
 8012c3e:	b083      	sub	sp, #12
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	2201      	movs	r2, #1
 8012c48:	741a      	strb	r2, [r3, #16]
}
 8012c4a:	bf00      	nop
 8012c4c:	370c      	adds	r7, #12
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c54:	4770      	bx	lr

08012c56 <_ZN10TestPlugin9isEnabledEv>:

bool TestPlugin::isEnabled()
{
 8012c56:	b480      	push	{r7}
 8012c58:	b083      	sub	sp, #12
 8012c5a:	af00      	add	r7, sp, #0
 8012c5c:	6078      	str	r0, [r7, #4]
    return enabled_;
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	7c1b      	ldrb	r3, [r3, #16]
}
 8012c62:	4618      	mov	r0, r3
 8012c64:	370c      	adds	r7, #12
 8012c66:	46bd      	mov	sp, r7
 8012c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c6c:	4770      	bx	lr
	...

08012c70 <_ZN16SetPointerPluginC1ERK12SimpleString>:
//////// SetPlugin

static int pointerTableIndex;
static cpputest_pair setlist[SetPointerPlugin::MAX_SET];

SetPointerPlugin::SetPointerPlugin(const SimpleString& name) :
 8012c70:	b580      	push	{r7, lr}
 8012c72:	b082      	sub	sp, #8
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	6078      	str	r0, [r7, #4]
 8012c78:	6039      	str	r1, [r7, #0]
    TestPlugin(name)
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	6839      	ldr	r1, [r7, #0]
 8012c7e:	4618      	mov	r0, r3
 8012c80:	f7ff fe7c 	bl	801297c <_ZN10TestPluginC1ERK12SimpleString>
 8012c84:	4a05      	ldr	r2, [pc, #20]	; (8012c9c <_ZN16SetPointerPluginC1ERK12SimpleString+0x2c>)
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	601a      	str	r2, [r3, #0]
{
    pointerTableIndex = 0;
 8012c8a:	4b05      	ldr	r3, [pc, #20]	; (8012ca0 <_ZN16SetPointerPluginC1ERK12SimpleString+0x30>)
 8012c8c:	2200      	movs	r2, #0
 8012c8e:	601a      	str	r2, [r3, #0]
}
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	4618      	mov	r0, r3
 8012c94:	3708      	adds	r7, #8
 8012c96:	46bd      	mov	sp, r7
 8012c98:	bd80      	pop	{r7, pc}
 8012c9a:	bf00      	nop
 8012c9c:	0802a410 	.word	0x0802a410
 8012ca0:	200009d0 	.word	0x200009d0

08012ca4 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult>:
    setlist[pointerTableIndex].orig = function;
    pointerTableIndex++;
}

void SetPointerPlugin::postTestAction(UtestShell& /*test*/, TestResult& /*result*/)
{
 8012ca4:	b480      	push	{r7}
 8012ca6:	b087      	sub	sp, #28
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	60f8      	str	r0, [r7, #12]
 8012cac:	60b9      	str	r1, [r7, #8]
 8012cae:	607a      	str	r2, [r7, #4]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 8012cb0:	4b0e      	ldr	r3, [pc, #56]	; (8012cec <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	3b01      	subs	r3, #1
 8012cb6:	617b      	str	r3, [r7, #20]
 8012cb8:	697b      	ldr	r3, [r7, #20]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	db0d      	blt.n	8012cda <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x36>
        *((void**) setlist[i].orig) = setlist[i].orig_value;
 8012cbe:	4a0c      	ldr	r2, [pc, #48]	; (8012cf0 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 8012cc0:	697b      	ldr	r3, [r7, #20]
 8012cc2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8012cc6:	490a      	ldr	r1, [pc, #40]	; (8012cf0 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 8012cc8:	697b      	ldr	r3, [r7, #20]
 8012cca:	00db      	lsls	r3, r3, #3
 8012ccc:	440b      	add	r3, r1
 8012cce:	685b      	ldr	r3, [r3, #4]
 8012cd0:	6013      	str	r3, [r2, #0]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 8012cd2:	697b      	ldr	r3, [r7, #20]
 8012cd4:	3b01      	subs	r3, #1
 8012cd6:	617b      	str	r3, [r7, #20]
 8012cd8:	e7ee      	b.n	8012cb8 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x14>
    pointerTableIndex = 0;
 8012cda:	4b04      	ldr	r3, [pc, #16]	; (8012cec <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 8012cdc:	2200      	movs	r2, #0
 8012cde:	601a      	str	r2, [r3, #0]
}
 8012ce0:	bf00      	nop
 8012ce2:	371c      	adds	r7, #28
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cea:	4770      	bx	lr
 8012cec:	200009d0 	.word	0x200009d0
 8012cf0:	200009d4 	.word	0x200009d4

08012cf4 <_ZN14NullTestPluginC1Ev>:

//////// NullPlugin

NullTestPlugin::NullTestPlugin() :
 8012cf4:	b580      	push	{r7, lr}
 8012cf6:	b082      	sub	sp, #8
 8012cf8:	af00      	add	r7, sp, #0
 8012cfa:	6078      	str	r0, [r7, #4]
    TestPlugin(NULLPTR)
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	2100      	movs	r1, #0
 8012d00:	4618      	mov	r0, r3
 8012d02:	f7ff fe59 	bl	80129b8 <_ZN10TestPluginC1EPS_>
 8012d06:	4a04      	ldr	r2, [pc, #16]	; (8012d18 <_ZN14NullTestPluginC1Ev+0x24>)
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	601a      	str	r2, [r3, #0]
{
}
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	4618      	mov	r0, r3
 8012d10:	3708      	adds	r7, #8
 8012d12:	46bd      	mov	sp, r7
 8012d14:	bd80      	pop	{r7, pc}
 8012d16:	bf00      	nop
 8012d18:	0802a3cc 	.word	0x0802a3cc

08012d1c <__tcf_0>:

NullTestPlugin* NullTestPlugin::instance()
{
    static NullTestPlugin _instance;
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	af00      	add	r7, sp, #0
 8012d20:	4801      	ldr	r0, [pc, #4]	; (8012d28 <__tcf_0+0xc>)
 8012d22:	f000 f849 	bl	8012db8 <_ZN14NullTestPluginD1Ev>
 8012d26:	bd80      	pop	{r7, pc}
 8012d28:	20000ad4 	.word	0x20000ad4

08012d2c <_ZN14NullTestPlugin8instanceEv>:
{
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	af00      	add	r7, sp, #0
    static NullTestPlugin _instance;
 8012d30:	4b12      	ldr	r3, [pc, #72]	; (8012d7c <_ZN14NullTestPlugin8instanceEv+0x50>)
 8012d32:	781b      	ldrb	r3, [r3, #0]
 8012d34:	f3bf 8f5b 	dmb	ish
 8012d38:	b2db      	uxtb	r3, r3
 8012d3a:	f003 0301 	and.w	r3, r3, #1
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	bf0c      	ite	eq
 8012d42:	2301      	moveq	r3, #1
 8012d44:	2300      	movne	r3, #0
 8012d46:	b2db      	uxtb	r3, r3
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d013      	beq.n	8012d74 <_ZN14NullTestPlugin8instanceEv+0x48>
 8012d4c:	480b      	ldr	r0, [pc, #44]	; (8012d7c <_ZN14NullTestPlugin8instanceEv+0x50>)
 8012d4e:	f00d ffdb 	bl	8020d08 <__cxa_guard_acquire>
 8012d52:	4603      	mov	r3, r0
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	bf14      	ite	ne
 8012d58:	2301      	movne	r3, #1
 8012d5a:	2300      	moveq	r3, #0
 8012d5c:	b2db      	uxtb	r3, r3
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d008      	beq.n	8012d74 <_ZN14NullTestPlugin8instanceEv+0x48>
 8012d62:	4807      	ldr	r0, [pc, #28]	; (8012d80 <_ZN14NullTestPlugin8instanceEv+0x54>)
 8012d64:	f7ff ffc6 	bl	8012cf4 <_ZN14NullTestPluginC1Ev>
 8012d68:	4804      	ldr	r0, [pc, #16]	; (8012d7c <_ZN14NullTestPlugin8instanceEv+0x50>)
 8012d6a:	f00d ffd9 	bl	8020d20 <__cxa_guard_release>
 8012d6e:	4805      	ldr	r0, [pc, #20]	; (8012d84 <_ZN14NullTestPlugin8instanceEv+0x58>)
 8012d70:	f00d fffd 	bl	8020d6e <atexit>
    return &_instance;
 8012d74:	4b02      	ldr	r3, [pc, #8]	; (8012d80 <_ZN14NullTestPlugin8instanceEv+0x54>)
}
 8012d76:	4618      	mov	r0, r3
 8012d78:	bd80      	pop	{r7, pc}
 8012d7a:	bf00      	nop
 8012d7c:	20000ae8 	.word	0x20000ae8
 8012d80:	20000ad4 	.word	0x20000ad4
 8012d84:	08012d1d 	.word	0x08012d1d

08012d88 <_ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)
{
 8012d88:	b480      	push	{r7}
 8012d8a:	b085      	sub	sp, #20
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	60f8      	str	r0, [r7, #12]
 8012d90:	60b9      	str	r1, [r7, #8]
 8012d92:	607a      	str	r2, [r7, #4]
}
 8012d94:	bf00      	nop
 8012d96:	3714      	adds	r7, #20
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d9e:	4770      	bx	lr

08012da0 <_ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)
{
 8012da0:	b480      	push	{r7}
 8012da2:	b085      	sub	sp, #20
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	60f8      	str	r0, [r7, #12]
 8012da8:	60b9      	str	r1, [r7, #8]
 8012daa:	607a      	str	r2, [r7, #4]
}
 8012dac:	bf00      	nop
 8012dae:	3714      	adds	r7, #20
 8012db0:	46bd      	mov	sp, r7
 8012db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db6:	4770      	bx	lr

08012db8 <_ZN14NullTestPluginD1Ev>:

#define UT_PTR_SET(a, b) do { CppUTestStore( (void**)&a ); a = b; } while(0)

///////////// Null Plugin

class NullTestPlugin: public TestPlugin
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b082      	sub	sp, #8
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]
 8012dc0:	4a05      	ldr	r2, [pc, #20]	; (8012dd8 <_ZN14NullTestPluginD1Ev+0x20>)
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	601a      	str	r2, [r3, #0]
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	4618      	mov	r0, r3
 8012dca:	f7ff fe13 	bl	80129f4 <_ZN10TestPluginD1Ev>
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	3708      	adds	r7, #8
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	bd80      	pop	{r7, pc}
 8012dd8:	0802a3cc 	.word	0x0802a3cc

08012ddc <_ZN14NullTestPluginD0Ev>:
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	b082      	sub	sp, #8
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	6078      	str	r0, [r7, #4]
 8012de4:	6878      	ldr	r0, [r7, #4]
 8012de6:	f7ff ffe7 	bl	8012db8 <_ZN14NullTestPluginD1Ev>
 8012dea:	2114      	movs	r1, #20
 8012dec:	6878      	ldr	r0, [r7, #4]
 8012dee:	f7f8 fd1b 	bl	800b828 <_ZdlPvj>
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	4618      	mov	r0, r3
 8012df6:	3708      	adds	r7, #8
 8012df8:	46bd      	mov	sp, r7
 8012dfa:	bd80      	pop	{r7, pc}

08012dfc <_ZN12TestRegistryC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestRegistry.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestRegistry::TestRegistry() :
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	b082      	sub	sp, #8
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]
    tests_(NULLPTR), nameFilters_(NULLPTR), groupFilters_(NULLPTR), firstPlugin_(NullTestPlugin::instance()), runInSeperateProcess_(false), currentRepetition_(0), runIgnored_(false)
 8012e04:	4a0f      	ldr	r2, [pc, #60]	; (8012e44 <_ZN12TestRegistryC1Ev+0x48>)
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	601a      	str	r2, [r3, #0]
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	2200      	movs	r2, #0
 8012e0e:	605a      	str	r2, [r3, #4]
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	2200      	movs	r2, #0
 8012e14:	609a      	str	r2, [r3, #8]
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	2200      	movs	r2, #0
 8012e1a:	60da      	str	r2, [r3, #12]
 8012e1c:	f7ff ff86 	bl	8012d2c <_ZN14NullTestPlugin8instanceEv>
 8012e20:	4602      	mov	r2, r0
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	611a      	str	r2, [r3, #16]
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	2200      	movs	r2, #0
 8012e2a:	751a      	strb	r2, [r3, #20]
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	2200      	movs	r2, #0
 8012e30:	619a      	str	r2, [r3, #24]
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	2200      	movs	r2, #0
 8012e36:	771a      	strb	r2, [r3, #28]
{
}
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	3708      	adds	r7, #8
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	bd80      	pop	{r7, pc}
 8012e42:	bf00      	nop
 8012e44:	0802a498 	.word	0x0802a498

08012e48 <_ZN12TestRegistryD1Ev>:

TestRegistry::~TestRegistry()
 8012e48:	b480      	push	{r7}
 8012e4a:	b083      	sub	sp, #12
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	6078      	str	r0, [r7, #4]
 8012e50:	4a04      	ldr	r2, [pc, #16]	; (8012e64 <_ZN12TestRegistryD1Ev+0x1c>)
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	601a      	str	r2, [r3, #0]
{
}
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	4618      	mov	r0, r3
 8012e5a:	370c      	adds	r7, #12
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e62:	4770      	bx	lr
 8012e64:	0802a498 	.word	0x0802a498

08012e68 <_ZN12TestRegistryD0Ev>:
TestRegistry::~TestRegistry()
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b082      	sub	sp, #8
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	6078      	str	r0, [r7, #4]
}
 8012e70:	6878      	ldr	r0, [r7, #4]
 8012e72:	f7ff ffe9 	bl	8012e48 <_ZN12TestRegistryD1Ev>
 8012e76:	2120      	movs	r1, #32
 8012e78:	6878      	ldr	r0, [r7, #4]
 8012e7a:	f7f8 fcd5 	bl	800b828 <_ZdlPvj>
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	4618      	mov	r0, r3
 8012e82:	3708      	adds	r7, #8
 8012e84:	46bd      	mov	sp, r7
 8012e86:	bd80      	pop	{r7, pc}

08012e88 <_ZN12TestRegistry7addTestEP10UtestShell>:

void TestRegistry::addTest(UtestShell *test)
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b082      	sub	sp, #8
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
 8012e90:	6039      	str	r1, [r7, #0]
    tests_ = test->addTest(tests_);
 8012e92:	683b      	ldr	r3, [r7, #0]
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	3308      	adds	r3, #8
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	687a      	ldr	r2, [r7, #4]
 8012e9c:	6852      	ldr	r2, [r2, #4]
 8012e9e:	4611      	mov	r1, r2
 8012ea0:	6838      	ldr	r0, [r7, #0]
 8012ea2:	4798      	blx	r3
 8012ea4:	4602      	mov	r2, r0
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	605a      	str	r2, [r3, #4]
}
 8012eaa:	bf00      	nop
 8012eac:	3708      	adds	r7, #8
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	bd80      	pop	{r7, pc}

08012eb2 <_ZN12TestRegistry11runAllTestsER10TestResult>:

void TestRegistry::runAllTests(TestResult& result)
{
 8012eb2:	b580      	push	{r7, lr}
 8012eb4:	b084      	sub	sp, #16
 8012eb6:	af00      	add	r7, sp, #0
 8012eb8:	6078      	str	r0, [r7, #4]
 8012eba:	6039      	str	r1, [r7, #0]
    bool groupStart = true;
 8012ebc:	2301      	movs	r3, #1
 8012ebe:	73fb      	strb	r3, [r7, #15]

    result.testsStarted();
 8012ec0:	683b      	ldr	r3, [r7, #0]
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	3308      	adds	r3, #8
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	6838      	ldr	r0, [r7, #0]
 8012eca:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	685b      	ldr	r3, [r3, #4]
 8012ed0:	60bb      	str	r3, [r7, #8]
 8012ed2:	68bb      	ldr	r3, [r7, #8]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d05c      	beq.n	8012f92 <_ZN12TestRegistry11runAllTestsER10TestResult+0xe0>
        if (runInSeperateProcess_) test->setRunInSeperateProcess();
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	7d1b      	ldrb	r3, [r3, #20]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d005      	beq.n	8012eec <_ZN12TestRegistry11runAllTestsER10TestResult+0x3a>
 8012ee0:	68bb      	ldr	r3, [r7, #8]
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	3380      	adds	r3, #128	; 0x80
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	68b8      	ldr	r0, [r7, #8]
 8012eea:	4798      	blx	r3
        if (runIgnored_) test->setRunIgnored();
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	7f1b      	ldrb	r3, [r3, #28]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d005      	beq.n	8012f00 <_ZN12TestRegistry11runAllTestsER10TestResult+0x4e>
 8012ef4:	68bb      	ldr	r3, [r7, #8]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	3384      	adds	r3, #132	; 0x84
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	68b8      	ldr	r0, [r7, #8]
 8012efe:	4798      	blx	r3

        if (groupStart) {
 8012f00:	7bfb      	ldrb	r3, [r7, #15]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d008      	beq.n	8012f18 <_ZN12TestRegistry11runAllTestsER10TestResult+0x66>
            result.currentGroupStarted(test);
 8012f06:	683b      	ldr	r3, [r7, #0]
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	3310      	adds	r3, #16
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	68b9      	ldr	r1, [r7, #8]
 8012f10:	6838      	ldr	r0, [r7, #0]
 8012f12:	4798      	blx	r3
            groupStart = false;
 8012f14:	2300      	movs	r3, #0
 8012f16:	73fb      	strb	r3, [r7, #15]
        }

        result.countTest();
 8012f18:	683b      	ldr	r3, [r7, #0]
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	3320      	adds	r3, #32
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	6838      	ldr	r0, [r7, #0]
 8012f22:	4798      	blx	r3
        if (testShouldRun(test, result)) {
 8012f24:	683a      	ldr	r2, [r7, #0]
 8012f26:	68b9      	ldr	r1, [r7, #8]
 8012f28:	6878      	ldr	r0, [r7, #4]
 8012f2a:	f000 fb79 	bl	8013620 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 8012f2e:	4603      	mov	r3, r0
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d016      	beq.n	8012f62 <_ZN12TestRegistry11runAllTestsER10TestResult+0xb0>
            result.currentTestStarted(test);
 8012f34:	683b      	ldr	r3, [r7, #0]
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	3318      	adds	r3, #24
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	68b9      	ldr	r1, [r7, #8]
 8012f3e:	6838      	ldr	r0, [r7, #0]
 8012f40:	4798      	blx	r3
            test->runOneTest(firstPlugin_, result);
 8012f42:	68bb      	ldr	r3, [r7, #8]
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	3390      	adds	r3, #144	; 0x90
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	687a      	ldr	r2, [r7, #4]
 8012f4c:	6911      	ldr	r1, [r2, #16]
 8012f4e:	683a      	ldr	r2, [r7, #0]
 8012f50:	68b8      	ldr	r0, [r7, #8]
 8012f52:	4798      	blx	r3
            result.currentTestEnded(test);
 8012f54:	683b      	ldr	r3, [r7, #0]
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	331c      	adds	r3, #28
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	68b9      	ldr	r1, [r7, #8]
 8012f5e:	6838      	ldr	r0, [r7, #0]
 8012f60:	4798      	blx	r3
        }

        if (endOfGroup(test)) {
 8012f62:	68b9      	ldr	r1, [r7, #8]
 8012f64:	6878      	ldr	r0, [r7, #4]
 8012f66:	f000 fa5b 	bl	8013420 <_ZN12TestRegistry10endOfGroupEP10UtestShell>
 8012f6a:	4603      	mov	r3, r0
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d008      	beq.n	8012f82 <_ZN12TestRegistry11runAllTestsER10TestResult+0xd0>
            groupStart = true;
 8012f70:	2301      	movs	r3, #1
 8012f72:	73fb      	strb	r3, [r7, #15]
            result.currentGroupEnded(test);
 8012f74:	683b      	ldr	r3, [r7, #0]
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	3314      	adds	r3, #20
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	68b9      	ldr	r1, [r7, #8]
 8012f7e:	6838      	ldr	r0, [r7, #0]
 8012f80:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8012f82:	68bb      	ldr	r3, [r7, #8]
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	330c      	adds	r3, #12
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	68b8      	ldr	r0, [r7, #8]
 8012f8c:	4798      	blx	r3
 8012f8e:	60b8      	str	r0, [r7, #8]
 8012f90:	e79f      	b.n	8012ed2 <_ZN12TestRegistry11runAllTestsER10TestResult+0x20>
        }
    }
    result.testsEnded();
 8012f92:	683b      	ldr	r3, [r7, #0]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	330c      	adds	r3, #12
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	6838      	ldr	r0, [r7, #0]
 8012f9c:	4798      	blx	r3
    currentRepetition_++;
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	699b      	ldr	r3, [r3, #24]
 8012fa2:	1c5a      	adds	r2, r3, #1
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	619a      	str	r2, [r3, #24]
}
 8012fa8:	bf00      	nop
 8012faa:	3710      	adds	r7, #16
 8012fac:	46bd      	mov	sp, r7
 8012fae:	bd80      	pop	{r7, pc}

08012fb0 <_ZN12TestRegistry18listTestGroupNamesER10TestResult>:

void TestRegistry::listTestGroupNames(TestResult& result)
{
 8012fb0:	b590      	push	{r4, r7, lr}
 8012fb2:	b08f      	sub	sp, #60	; 0x3c
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	6078      	str	r0, [r7, #4]
 8012fb8:	6039      	str	r1, [r7, #0]
    SimpleString groupList;
 8012fba:	f107 0314 	add.w	r3, r7, #20
 8012fbe:	4953      	ldr	r1, [pc, #332]	; (801310c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f7fa ffe0 	bl	800df86 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	685b      	ldr	r3, [r3, #4]
 8012fca:	637b      	str	r3, [r7, #52]	; 0x34
 8012fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d04d      	beq.n	801306e <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xbe>
        SimpleString gname;
 8012fd2:	f107 030c 	add.w	r3, r7, #12
 8012fd6:	494d      	ldr	r1, [pc, #308]	; (801310c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 8012fd8:	4618      	mov	r0, r3
 8012fda:	f7fa ffd4 	bl	800df86 <_ZN12SimpleStringC1EPKc>
        gname += "#";
 8012fde:	f107 030c 	add.w	r3, r7, #12
 8012fe2:	494b      	ldr	r1, [pc, #300]	; (8013110 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	f7fb fc15 	bl	800e814 <_ZN12SimpleStringpLEPKc>
        gname += test->getGroup();
 8012fea:	f107 031c 	add.w	r3, r7, #28
 8012fee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	f001 f9d2 	bl	801439a <_ZNK10UtestShell8getGroupEv>
 8012ff6:	f107 021c 	add.w	r2, r7, #28
 8012ffa:	f107 030c 	add.w	r3, r7, #12
 8012ffe:	4611      	mov	r1, r2
 8013000:	4618      	mov	r0, r3
 8013002:	f7fb fbf5 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 8013006:	f107 031c 	add.w	r3, r7, #28
 801300a:	4618      	mov	r0, r3
 801300c:	f7fb fb73 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
        gname += "#";
 8013010:	f107 030c 	add.w	r3, r7, #12
 8013014:	493e      	ldr	r1, [pc, #248]	; (8013110 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 8013016:	4618      	mov	r0, r3
 8013018:	f7fb fbfc 	bl	800e814 <_ZN12SimpleStringpLEPKc>

        if (!groupList.contains(gname)) {
 801301c:	f107 020c 	add.w	r2, r7, #12
 8013020:	f107 0314 	add.w	r3, r7, #20
 8013024:	4611      	mov	r1, r2
 8013026:	4618      	mov	r0, r3
 8013028:	f7fb f82b 	bl	800e082 <_ZNK12SimpleString8containsERKS_>
 801302c:	4603      	mov	r3, r0
 801302e:	f083 0301 	eor.w	r3, r3, #1
 8013032:	b2db      	uxtb	r3, r3
 8013034:	2b00      	cmp	r3, #0
 8013036:	d00d      	beq.n	8013054 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xa4>
            groupList += gname;
 8013038:	f107 020c 	add.w	r2, r7, #12
 801303c:	f107 0314 	add.w	r3, r7, #20
 8013040:	4611      	mov	r1, r2
 8013042:	4618      	mov	r0, r3
 8013044:	f7fb fbd4 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
            groupList += " ";
 8013048:	f107 0314 	add.w	r3, r7, #20
 801304c:	4931      	ldr	r1, [pc, #196]	; (8013114 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 801304e:	4618      	mov	r0, r3
 8013050:	f7fb fbe0 	bl	800e814 <_ZN12SimpleStringpLEPKc>
        SimpleString gname;
 8013054:	f107 030c 	add.w	r3, r7, #12
 8013058:	4618      	mov	r0, r3
 801305a:	f7fb fb4c 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 801305e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	330c      	adds	r3, #12
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013068:	4798      	blx	r3
 801306a:	6378      	str	r0, [r7, #52]	; 0x34
 801306c:	e7ae      	b.n	8012fcc <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x1c>
        }
    }

    groupList.replace("#", "");
 801306e:	f107 0314 	add.w	r3, r7, #20
 8013072:	4a26      	ldr	r2, [pc, #152]	; (801310c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 8013074:	4926      	ldr	r1, [pc, #152]	; (8013110 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 8013076:	4618      	mov	r0, r3
 8013078:	f7fb f99a 	bl	800e3b0 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupList.endsWith(" "))
 801307c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013080:	4924      	ldr	r1, [pc, #144]	; (8013114 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 8013082:	4618      	mov	r0, r3
 8013084:	f7fa ff7f 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8013088:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801308c:	f107 0314 	add.w	r3, r7, #20
 8013090:	4611      	mov	r1, r2
 8013092:	4618      	mov	r0, r3
 8013094:	f7fb f874 	bl	800e180 <_ZNK12SimpleString8endsWithERKS_>
 8013098:	4603      	mov	r3, r0
 801309a:	461c      	mov	r4, r3
 801309c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80130a0:	4618      	mov	r0, r3
 80130a2:	f7fb fb28 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80130a6:	2c00      	cmp	r4, #0
 80130a8:	d01a      	beq.n	80130e0 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x130>
        groupList = groupList.subString(0, groupList.size() - 1);
 80130aa:	f107 0314 	add.w	r3, r7, #20
 80130ae:	4618      	mov	r0, r3
 80130b0:	f7fb fb00 	bl	800e6b4 <_ZNK12SimpleString4sizeEv>
 80130b4:	4603      	mov	r3, r0
 80130b6:	3b01      	subs	r3, #1
 80130b8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80130bc:	f107 0114 	add.w	r1, r7, #20
 80130c0:	2200      	movs	r2, #0
 80130c2:	f7fb fc21 	bl	800e908 <_ZNK12SimpleString9subStringEjj>
 80130c6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80130ca:	f107 0314 	add.w	r3, r7, #20
 80130ce:	4611      	mov	r1, r2
 80130d0:	4618      	mov	r0, r3
 80130d2:	f7fa ffc4 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 80130d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80130da:	4618      	mov	r0, r3
 80130dc:	f7fb fb0b 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    result.print(groupList.asCharString());
 80130e0:	683b      	ldr	r3, [r7, #0]
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	3338      	adds	r3, #56	; 0x38
 80130e6:	681c      	ldr	r4, [r3, #0]
 80130e8:	f107 0314 	add.w	r3, r7, #20
 80130ec:	4618      	mov	r0, r3
 80130ee:	f7fb fad5 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 80130f2:	4603      	mov	r3, r0
 80130f4:	4619      	mov	r1, r3
 80130f6:	6838      	ldr	r0, [r7, #0]
 80130f8:	47a0      	blx	r4
    SimpleString groupList;
 80130fa:	f107 0314 	add.w	r3, r7, #20
 80130fe:	4618      	mov	r0, r3
 8013100:	f7fb faf9 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 8013104:	bf00      	nop
 8013106:	373c      	adds	r7, #60	; 0x3c
 8013108:	46bd      	mov	sp, r7
 801310a:	bd90      	pop	{r4, r7, pc}
 801310c:	08026888 	.word	0x08026888
 8013110:	0802688c 	.word	0x0802688c
 8013114:	08026890 	.word	0x08026890

08013118 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult>:

void TestRegistry::listTestGroupAndCaseNames(TestResult& result)
{
 8013118:	b590      	push	{r4, r7, lr}
 801311a:	b091      	sub	sp, #68	; 0x44
 801311c:	af00      	add	r7, sp, #0
 801311e:	6078      	str	r0, [r7, #4]
 8013120:	6039      	str	r1, [r7, #0]
    SimpleString groupAndNameList;
 8013122:	f107 0314 	add.w	r3, r7, #20
 8013126:	4964      	ldr	r1, [pc, #400]	; (80132b8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8013128:	4618      	mov	r0, r3
 801312a:	f7fa ff2c 	bl	800df86 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	685b      	ldr	r3, [r3, #4]
 8013132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013136:	2b00      	cmp	r3, #0
 8013138:	d06e      	beq.n	8013218 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x100>
        if (testShouldRun(test, result)) {
 801313a:	683a      	ldr	r2, [r7, #0]
 801313c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801313e:	6878      	ldr	r0, [r7, #4]
 8013140:	f000 fa6e 	bl	8013620 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 8013144:	4603      	mov	r3, r0
 8013146:	2b00      	cmp	r3, #0
 8013148:	d05e      	beq.n	8013208 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xf0>
            SimpleString groupAndName;
 801314a:	f107 030c 	add.w	r3, r7, #12
 801314e:	495a      	ldr	r1, [pc, #360]	; (80132b8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8013150:	4618      	mov	r0, r3
 8013152:	f7fa ff18 	bl	800df86 <_ZN12SimpleStringC1EPKc>
            groupAndName += "#";
 8013156:	f107 030c 	add.w	r3, r7, #12
 801315a:	4958      	ldr	r1, [pc, #352]	; (80132bc <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 801315c:	4618      	mov	r0, r3
 801315e:	f7fb fb59 	bl	800e814 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getGroup();
 8013162:	f107 031c 	add.w	r3, r7, #28
 8013166:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013168:	4618      	mov	r0, r3
 801316a:	f001 f916 	bl	801439a <_ZNK10UtestShell8getGroupEv>
 801316e:	f107 021c 	add.w	r2, r7, #28
 8013172:	f107 030c 	add.w	r3, r7, #12
 8013176:	4611      	mov	r1, r2
 8013178:	4618      	mov	r0, r3
 801317a:	f7fb fb39 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801317e:	f107 031c 	add.w	r3, r7, #28
 8013182:	4618      	mov	r0, r3
 8013184:	f7fb fab7 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
            groupAndName += ".";
 8013188:	f107 030c 	add.w	r3, r7, #12
 801318c:	494c      	ldr	r1, [pc, #304]	; (80132c0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a8>)
 801318e:	4618      	mov	r0, r3
 8013190:	f7fb fb40 	bl	800e814 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getName();
 8013194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013198:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801319a:	4618      	mov	r0, r3
 801319c:	f001 f8ee 	bl	801437c <_ZNK10UtestShell7getNameEv>
 80131a0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80131a4:	f107 030c 	add.w	r3, r7, #12
 80131a8:	4611      	mov	r1, r2
 80131aa:	4618      	mov	r0, r3
 80131ac:	f7fb fb20 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 80131b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80131b4:	4618      	mov	r0, r3
 80131b6:	f7fb fa9e 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
            groupAndName += "#";
 80131ba:	f107 030c 	add.w	r3, r7, #12
 80131be:	493f      	ldr	r1, [pc, #252]	; (80132bc <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 80131c0:	4618      	mov	r0, r3
 80131c2:	f7fb fb27 	bl	800e814 <_ZN12SimpleStringpLEPKc>

            if (!groupAndNameList.contains(groupAndName)) {
 80131c6:	f107 020c 	add.w	r2, r7, #12
 80131ca:	f107 0314 	add.w	r3, r7, #20
 80131ce:	4611      	mov	r1, r2
 80131d0:	4618      	mov	r0, r3
 80131d2:	f7fa ff56 	bl	800e082 <_ZNK12SimpleString8containsERKS_>
 80131d6:	4603      	mov	r3, r0
 80131d8:	f083 0301 	eor.w	r3, r3, #1
 80131dc:	b2db      	uxtb	r3, r3
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d00d      	beq.n	80131fe <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xe6>
                groupAndNameList += groupAndName;
 80131e2:	f107 020c 	add.w	r2, r7, #12
 80131e6:	f107 0314 	add.w	r3, r7, #20
 80131ea:	4611      	mov	r1, r2
 80131ec:	4618      	mov	r0, r3
 80131ee:	f7fb faff 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
                groupAndNameList += " ";
 80131f2:	f107 0314 	add.w	r3, r7, #20
 80131f6:	4933      	ldr	r1, [pc, #204]	; (80132c4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 80131f8:	4618      	mov	r0, r3
 80131fa:	f7fb fb0b 	bl	800e814 <_ZN12SimpleStringpLEPKc>
            SimpleString groupAndName;
 80131fe:	f107 030c 	add.w	r3, r7, #12
 8013202:	4618      	mov	r0, r3
 8013204:	f7fb fa77 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8013208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	330c      	adds	r3, #12
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013212:	4798      	blx	r3
 8013214:	63f8      	str	r0, [r7, #60]	; 0x3c
 8013216:	e78d      	b.n	8013134 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1c>
            }
        }
    }

    groupAndNameList.replace("#", "");
 8013218:	f107 0314 	add.w	r3, r7, #20
 801321c:	4a26      	ldr	r2, [pc, #152]	; (80132b8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 801321e:	4927      	ldr	r1, [pc, #156]	; (80132bc <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8013220:	4618      	mov	r0, r3
 8013222:	f7fb f8c5 	bl	800e3b0 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupAndNameList.endsWith(" "))
 8013226:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801322a:	4926      	ldr	r1, [pc, #152]	; (80132c4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 801322c:	4618      	mov	r0, r3
 801322e:	f7fa feaa 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8013232:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8013236:	f107 0314 	add.w	r3, r7, #20
 801323a:	4611      	mov	r1, r2
 801323c:	4618      	mov	r0, r3
 801323e:	f7fa ff9f 	bl	800e180 <_ZNK12SimpleString8endsWithERKS_>
 8013242:	4603      	mov	r3, r0
 8013244:	461c      	mov	r4, r3
 8013246:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801324a:	4618      	mov	r0, r3
 801324c:	f7fb fa53 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8013250:	2c00      	cmp	r4, #0
 8013252:	d01a      	beq.n	801328a <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x172>
        groupAndNameList = groupAndNameList.subString(0, groupAndNameList.size() - 1);
 8013254:	f107 0314 	add.w	r3, r7, #20
 8013258:	4618      	mov	r0, r3
 801325a:	f7fb fa2b 	bl	800e6b4 <_ZNK12SimpleString4sizeEv>
 801325e:	4603      	mov	r3, r0
 8013260:	3b01      	subs	r3, #1
 8013262:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8013266:	f107 0114 	add.w	r1, r7, #20
 801326a:	2200      	movs	r2, #0
 801326c:	f7fb fb4c 	bl	800e908 <_ZNK12SimpleString9subStringEjj>
 8013270:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8013274:	f107 0314 	add.w	r3, r7, #20
 8013278:	4611      	mov	r1, r2
 801327a:	4618      	mov	r0, r3
 801327c:	f7fa feef 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 8013280:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013284:	4618      	mov	r0, r3
 8013286:	f7fb fa36 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    result.print(groupAndNameList.asCharString());
 801328a:	683b      	ldr	r3, [r7, #0]
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	3338      	adds	r3, #56	; 0x38
 8013290:	681c      	ldr	r4, [r3, #0]
 8013292:	f107 0314 	add.w	r3, r7, #20
 8013296:	4618      	mov	r0, r3
 8013298:	f7fb fa00 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 801329c:	4603      	mov	r3, r0
 801329e:	4619      	mov	r1, r3
 80132a0:	6838      	ldr	r0, [r7, #0]
 80132a2:	47a0      	blx	r4
    SimpleString groupAndNameList;
 80132a4:	f107 0314 	add.w	r3, r7, #20
 80132a8:	4618      	mov	r0, r3
 80132aa:	f7fb fa24 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 80132ae:	bf00      	nop
 80132b0:	3744      	adds	r7, #68	; 0x44
 80132b2:	46bd      	mov	sp, r7
 80132b4:	bd90      	pop	{r4, r7, pc}
 80132b6:	bf00      	nop
 80132b8:	08026888 	.word	0x08026888
 80132bc:	0802688c 	.word	0x0802688c
 80132c0:	08026894 	.word	0x08026894
 80132c4:	08026890 	.word	0x08026890

080132c8 <_ZN12TestRegistry17listTestLocationsER10TestResult>:

void TestRegistry::listTestLocations(TestResult& result)
{
 80132c8:	b590      	push	{r4, r7, lr}
 80132ca:	b091      	sub	sp, #68	; 0x44
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
 80132d0:	6039      	str	r1, [r7, #0]
    SimpleString testLocations;
 80132d2:	f107 0314 	add.w	r3, r7, #20
 80132d6:	494f      	ldr	r1, [pc, #316]	; (8013414 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 80132d8:	4618      	mov	r0, r3
 80132da:	f7fa fe54 	bl	800df86 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	685b      	ldr	r3, [r3, #4]
 80132e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80132e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d07d      	beq.n	80133e6 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x11e>
            SimpleString testLocation;
 80132ea:	f107 030c 	add.w	r3, r7, #12
 80132ee:	4949      	ldr	r1, [pc, #292]	; (8013414 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 80132f0:	4618      	mov	r0, r3
 80132f2:	f7fa fe48 	bl	800df86 <_ZN12SimpleStringC1EPKc>
            testLocation += test->getGroup();
 80132f6:	f107 031c 	add.w	r3, r7, #28
 80132fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80132fc:	4618      	mov	r0, r3
 80132fe:	f001 f84c 	bl	801439a <_ZNK10UtestShell8getGroupEv>
 8013302:	f107 021c 	add.w	r2, r7, #28
 8013306:	f107 030c 	add.w	r3, r7, #12
 801330a:	4611      	mov	r1, r2
 801330c:	4618      	mov	r0, r3
 801330e:	f7fb fa6f 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 8013312:	f107 031c 	add.w	r3, r7, #28
 8013316:	4618      	mov	r0, r3
 8013318:	f7fb f9ed 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 801331c:	f107 030c 	add.w	r3, r7, #12
 8013320:	493d      	ldr	r1, [pc, #244]	; (8013418 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 8013322:	4618      	mov	r0, r3
 8013324:	f7fb fa76 	bl	800e814 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getName();
 8013328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801332c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801332e:	4618      	mov	r0, r3
 8013330:	f001 f824 	bl	801437c <_ZNK10UtestShell7getNameEv>
 8013334:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013338:	f107 030c 	add.w	r3, r7, #12
 801333c:	4611      	mov	r1, r2
 801333e:	4618      	mov	r0, r3
 8013340:	f7fb fa56 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 8013344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013348:	4618      	mov	r0, r3
 801334a:	f7fb f9d4 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 801334e:	f107 030c 	add.w	r3, r7, #12
 8013352:	4931      	ldr	r1, [pc, #196]	; (8013418 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 8013354:	4618      	mov	r0, r3
 8013356:	f7fb fa5d 	bl	800e814 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getFile();
 801335a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801335e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013360:	4618      	mov	r0, r3
 8013362:	f001 f8dc 	bl	801451e <_ZNK10UtestShell7getFileEv>
 8013366:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801336a:	f107 030c 	add.w	r3, r7, #12
 801336e:	4611      	mov	r1, r2
 8013370:	4618      	mov	r0, r3
 8013372:	f7fb fa3d 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 8013376:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801337a:	4618      	mov	r0, r3
 801337c:	f7fb f9bb 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8013380:	f107 030c 	add.w	r3, r7, #12
 8013384:	4924      	ldr	r1, [pc, #144]	; (8013418 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 8013386:	4618      	mov	r0, r3
 8013388:	f7fb fa44 	bl	800e814 <_ZN12SimpleStringpLEPKc>
            testLocation += StringFromFormat("%d\n",(int) test->getLineNumber());
 801338c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801338e:	f001 f8d5 	bl	801453c <_ZNK10UtestShell13getLineNumberEv>
 8013392:	4603      	mov	r3, r0
 8013394:	461a      	mov	r2, r3
 8013396:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801339a:	4920      	ldr	r1, [pc, #128]	; (801341c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x154>)
 801339c:	4618      	mov	r0, r3
 801339e:	f7fb feb1 	bl	800f104 <_Z16StringFromFormatPKcz>
 80133a2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80133a6:	f107 030c 	add.w	r3, r7, #12
 80133aa:	4611      	mov	r1, r2
 80133ac:	4618      	mov	r0, r3
 80133ae:	f7fb fa1f 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 80133b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80133b6:	4618      	mov	r0, r3
 80133b8:	f7fb f99d 	bl	800e6f6 <_ZN12SimpleStringD1Ev>

            testLocations += testLocation;
 80133bc:	f107 020c 	add.w	r2, r7, #12
 80133c0:	f107 0314 	add.w	r3, r7, #20
 80133c4:	4611      	mov	r1, r2
 80133c6:	4618      	mov	r0, r3
 80133c8:	f7fb fa12 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
            SimpleString testLocation;
 80133cc:	f107 030c 	add.w	r3, r7, #12
 80133d0:	4618      	mov	r0, r3
 80133d2:	f7fb f990 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80133d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	330c      	adds	r3, #12
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80133e0:	4798      	blx	r3
 80133e2:	63f8      	str	r0, [r7, #60]	; 0x3c
 80133e4:	e77e      	b.n	80132e4 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x1c>
    }

    result.print(testLocations.asCharString());
 80133e6:	683b      	ldr	r3, [r7, #0]
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	3338      	adds	r3, #56	; 0x38
 80133ec:	681c      	ldr	r4, [r3, #0]
 80133ee:	f107 0314 	add.w	r3, r7, #20
 80133f2:	4618      	mov	r0, r3
 80133f4:	f7fb f952 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 80133f8:	4603      	mov	r3, r0
 80133fa:	4619      	mov	r1, r3
 80133fc:	6838      	ldr	r0, [r7, #0]
 80133fe:	47a0      	blx	r4
    SimpleString testLocations;
 8013400:	f107 0314 	add.w	r3, r7, #20
 8013404:	4618      	mov	r0, r3
 8013406:	f7fb f976 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 801340a:	bf00      	nop
 801340c:	3744      	adds	r7, #68	; 0x44
 801340e:	46bd      	mov	sp, r7
 8013410:	bd90      	pop	{r4, r7, pc}
 8013412:	bf00      	nop
 8013414:	08026888 	.word	0x08026888
 8013418:	08026894 	.word	0x08026894
 801341c:	08026898 	.word	0x08026898

08013420 <_ZN12TestRegistry10endOfGroupEP10UtestShell>:

bool TestRegistry::endOfGroup(UtestShell* test)
{
 8013420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013422:	b087      	sub	sp, #28
 8013424:	af00      	add	r7, sp, #0
 8013426:	6078      	str	r0, [r7, #4]
 8013428:	6039      	str	r1, [r7, #0]
    return (!test || !test->getNext() || test->getGroup() != test->getNext()->getGroup());
 801342a:	2400      	movs	r4, #0
 801342c:	2500      	movs	r5, #0
 801342e:	683b      	ldr	r3, [r7, #0]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d028      	beq.n	8013486 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 8013434:	683b      	ldr	r3, [r7, #0]
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	330c      	adds	r3, #12
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	6838      	ldr	r0, [r7, #0]
 801343e:	4798      	blx	r3
 8013440:	4603      	mov	r3, r0
 8013442:	2b00      	cmp	r3, #0
 8013444:	d01f      	beq.n	8013486 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 8013446:	f107 0308 	add.w	r3, r7, #8
 801344a:	6839      	ldr	r1, [r7, #0]
 801344c:	4618      	mov	r0, r3
 801344e:	f000 ffa4 	bl	801439a <_ZNK10UtestShell8getGroupEv>
 8013452:	2401      	movs	r4, #1
 8013454:	683b      	ldr	r3, [r7, #0]
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	330c      	adds	r3, #12
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	6838      	ldr	r0, [r7, #0]
 801345e:	4798      	blx	r3
 8013460:	4602      	mov	r2, r0
 8013462:	f107 0310 	add.w	r3, r7, #16
 8013466:	4611      	mov	r1, r2
 8013468:	4618      	mov	r0, r3
 801346a:	f000 ff96 	bl	801439a <_ZNK10UtestShell8getGroupEv>
 801346e:	2501      	movs	r5, #1
 8013470:	f107 0210 	add.w	r2, r7, #16
 8013474:	f107 0308 	add.w	r3, r7, #8
 8013478:	4611      	mov	r1, r2
 801347a:	4618      	mov	r0, r3
 801347c:	f7fb f98c 	bl	800e798 <_ZneRK12SimpleStringS1_>
 8013480:	4603      	mov	r3, r0
 8013482:	2b00      	cmp	r3, #0
 8013484:	d001      	beq.n	801348a <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6a>
 8013486:	2601      	movs	r6, #1
 8013488:	e000      	b.n	801348c <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6c>
 801348a:	2600      	movs	r6, #0
 801348c:	2d00      	cmp	r5, #0
 801348e:	d004      	beq.n	801349a <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x7a>
 8013490:	f107 0310 	add.w	r3, r7, #16
 8013494:	4618      	mov	r0, r3
 8013496:	f7fb f92e 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801349a:	2c00      	cmp	r4, #0
 801349c:	d004      	beq.n	80134a8 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x88>
 801349e:	f107 0308 	add.w	r3, r7, #8
 80134a2:	4618      	mov	r0, r3
 80134a4:	f7fb f927 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80134a8:	4633      	mov	r3, r6
}
 80134aa:	4618      	mov	r0, r3
 80134ac:	371c      	adds	r7, #28
 80134ae:	46bd      	mov	sp, r7
 80134b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080134b2 <_ZN12TestRegistry10countTestsEv>:

size_t TestRegistry::countTests()
{
 80134b2:	b580      	push	{r7, lr}
 80134b4:	b082      	sub	sp, #8
 80134b6:	af00      	add	r7, sp, #0
 80134b8:	6078      	str	r0, [r7, #4]
    return tests_ ? tests_->countTests() : 0;
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	685b      	ldr	r3, [r3, #4]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d00a      	beq.n	80134d8 <_ZN12TestRegistry10countTestsEv+0x26>
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	685a      	ldr	r2, [r3, #4]
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	685b      	ldr	r3, [r3, #4]
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	3310      	adds	r3, #16
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	4610      	mov	r0, r2
 80134d2:	4798      	blx	r3
 80134d4:	4603      	mov	r3, r0
 80134d6:	e000      	b.n	80134da <_ZN12TestRegistry10countTestsEv+0x28>
 80134d8:	2300      	movs	r3, #0
}
 80134da:	4618      	mov	r0, r3
 80134dc:	3708      	adds	r7, #8
 80134de:	46bd      	mov	sp, r7
 80134e0:	bd80      	pop	{r7, pc}
	...

080134e4 <__tcf_0>:

TestRegistry* TestRegistry::currentRegistry_ = NULLPTR;

TestRegistry* TestRegistry::getCurrentRegistry()
{
    static TestRegistry registry;
 80134e4:	b580      	push	{r7, lr}
 80134e6:	af00      	add	r7, sp, #0
 80134e8:	4801      	ldr	r0, [pc, #4]	; (80134f0 <__tcf_0+0xc>)
 80134ea:	f7ff fcad 	bl	8012e48 <_ZN12TestRegistryD1Ev>
 80134ee:	bd80      	pop	{r7, pc}
 80134f0:	20000af0 	.word	0x20000af0

080134f4 <_ZN12TestRegistry18getCurrentRegistryEv>:
{
 80134f4:	b580      	push	{r7, lr}
 80134f6:	af00      	add	r7, sp, #0
    static TestRegistry registry;
 80134f8:	4b15      	ldr	r3, [pc, #84]	; (8013550 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 80134fa:	781b      	ldrb	r3, [r3, #0]
 80134fc:	f3bf 8f5b 	dmb	ish
 8013500:	b2db      	uxtb	r3, r3
 8013502:	f003 0301 	and.w	r3, r3, #1
 8013506:	2b00      	cmp	r3, #0
 8013508:	bf0c      	ite	eq
 801350a:	2301      	moveq	r3, #1
 801350c:	2300      	movne	r3, #0
 801350e:	b2db      	uxtb	r3, r3
 8013510:	2b00      	cmp	r3, #0
 8013512:	d013      	beq.n	801353c <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 8013514:	480e      	ldr	r0, [pc, #56]	; (8013550 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 8013516:	f00d fbf7 	bl	8020d08 <__cxa_guard_acquire>
 801351a:	4603      	mov	r3, r0
 801351c:	2b00      	cmp	r3, #0
 801351e:	bf14      	ite	ne
 8013520:	2301      	movne	r3, #1
 8013522:	2300      	moveq	r3, #0
 8013524:	b2db      	uxtb	r3, r3
 8013526:	2b00      	cmp	r3, #0
 8013528:	d008      	beq.n	801353c <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 801352a:	480a      	ldr	r0, [pc, #40]	; (8013554 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
 801352c:	f7ff fc66 	bl	8012dfc <_ZN12TestRegistryC1Ev>
 8013530:	4807      	ldr	r0, [pc, #28]	; (8013550 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 8013532:	f00d fbf5 	bl	8020d20 <__cxa_guard_release>
 8013536:	4808      	ldr	r0, [pc, #32]	; (8013558 <_ZN12TestRegistry18getCurrentRegistryEv+0x64>)
 8013538:	f00d fc19 	bl	8020d6e <atexit>
    return (currentRegistry_ == NULLPTR) ? &registry : currentRegistry_;
 801353c:	4b07      	ldr	r3, [pc, #28]	; (801355c <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d002      	beq.n	801354a <_ZN12TestRegistry18getCurrentRegistryEv+0x56>
 8013544:	4b05      	ldr	r3, [pc, #20]	; (801355c <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	e000      	b.n	801354c <_ZN12TestRegistry18getCurrentRegistryEv+0x58>
 801354a:	4b02      	ldr	r3, [pc, #8]	; (8013554 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
}
 801354c:	4618      	mov	r0, r3
 801354e:	bd80      	pop	{r7, pc}
 8013550:	20000b10 	.word	0x20000b10
 8013554:	20000af0 	.word	0x20000af0
 8013558:	080134e5 	.word	0x080134e5
 801355c:	20000aec 	.word	0x20000aec

08013560 <_ZN12TestRegistry18setCurrentRegistryEPS_>:

void TestRegistry::setCurrentRegistry(TestRegistry* registry)
{
 8013560:	b480      	push	{r7}
 8013562:	b083      	sub	sp, #12
 8013564:	af00      	add	r7, sp, #0
 8013566:	6078      	str	r0, [r7, #4]
 8013568:	6039      	str	r1, [r7, #0]
    currentRegistry_ = registry;
 801356a:	4a04      	ldr	r2, [pc, #16]	; (801357c <_ZN12TestRegistry18setCurrentRegistryEPS_+0x1c>)
 801356c:	683b      	ldr	r3, [r7, #0]
 801356e:	6013      	str	r3, [r2, #0]
}
 8013570:	bf00      	nop
 8013572:	370c      	adds	r7, #12
 8013574:	46bd      	mov	sp, r7
 8013576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801357a:	4770      	bx	lr
 801357c:	20000aec 	.word	0x20000aec

08013580 <_ZN12TestRegistry15unDoLastAddTestEv>:

void TestRegistry::unDoLastAddTest()
{
 8013580:	b580      	push	{r7, lr}
 8013582:	b082      	sub	sp, #8
 8013584:	af00      	add	r7, sp, #0
 8013586:	6078      	str	r0, [r7, #4]
    tests_ = tests_ ? tests_->getNext() : NULLPTR;
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	685b      	ldr	r3, [r3, #4]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d00a      	beq.n	80135a6 <_ZN12TestRegistry15unDoLastAddTestEv+0x26>
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	685a      	ldr	r2, [r3, #4]
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	685b      	ldr	r3, [r3, #4]
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	330c      	adds	r3, #12
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	4610      	mov	r0, r2
 80135a0:	4798      	blx	r3
 80135a2:	4603      	mov	r3, r0
 80135a4:	e000      	b.n	80135a8 <_ZN12TestRegistry15unDoLastAddTestEv+0x28>
 80135a6:	2300      	movs	r3, #0
 80135a8:	687a      	ldr	r2, [r7, #4]
 80135aa:	6053      	str	r3, [r2, #4]

}
 80135ac:	bf00      	nop
 80135ae:	3708      	adds	r7, #8
 80135b0:	46bd      	mov	sp, r7
 80135b2:	bd80      	pop	{r7, pc}

080135b4 <_ZN12TestRegistry14setNameFiltersEPK10TestFilter>:

void TestRegistry::setNameFilters(const TestFilter* filters)
{
 80135b4:	b480      	push	{r7}
 80135b6:	b083      	sub	sp, #12
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	6078      	str	r0, [r7, #4]
 80135bc:	6039      	str	r1, [r7, #0]
    nameFilters_ = filters;
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	683a      	ldr	r2, [r7, #0]
 80135c2:	609a      	str	r2, [r3, #8]
}
 80135c4:	bf00      	nop
 80135c6:	370c      	adds	r7, #12
 80135c8:	46bd      	mov	sp, r7
 80135ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ce:	4770      	bx	lr

080135d0 <_ZN12TestRegistry15setGroupFiltersEPK10TestFilter>:

void TestRegistry::setGroupFilters(const TestFilter* filters)
{
 80135d0:	b480      	push	{r7}
 80135d2:	b083      	sub	sp, #12
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	6078      	str	r0, [r7, #4]
 80135d8:	6039      	str	r1, [r7, #0]
    groupFilters_ = filters;
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	683a      	ldr	r2, [r7, #0]
 80135de:	60da      	str	r2, [r3, #12]
}
 80135e0:	bf00      	nop
 80135e2:	370c      	adds	r7, #12
 80135e4:	46bd      	mov	sp, r7
 80135e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ea:	4770      	bx	lr

080135ec <_ZN12TestRegistry13setRunIgnoredEv>:

void TestRegistry::setRunIgnored()
{
 80135ec:	b480      	push	{r7}
 80135ee:	b083      	sub	sp, #12
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	6078      	str	r0, [r7, #4]
    runIgnored_ = true;
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	2201      	movs	r2, #1
 80135f8:	771a      	strb	r2, [r3, #28]
}
 80135fa:	bf00      	nop
 80135fc:	370c      	adds	r7, #12
 80135fe:	46bd      	mov	sp, r7
 8013600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013604:	4770      	bx	lr

08013606 <_ZN12TestRegistry28setRunTestsInSeperateProcessEv>:

void TestRegistry::setRunTestsInSeperateProcess()
{
 8013606:	b480      	push	{r7}
 8013608:	b083      	sub	sp, #12
 801360a:	af00      	add	r7, sp, #0
 801360c:	6078      	str	r0, [r7, #4]
    runInSeperateProcess_ = true;
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	2201      	movs	r2, #1
 8013612:	751a      	strb	r2, [r3, #20]
}
 8013614:	bf00      	nop
 8013616:	370c      	adds	r7, #12
 8013618:	46bd      	mov	sp, r7
 801361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801361e:	4770      	bx	lr

08013620 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>:
{
    return currentRepetition_;
}

bool TestRegistry::testShouldRun(UtestShell* test, TestResult& result)
{
 8013620:	b580      	push	{r7, lr}
 8013622:	b084      	sub	sp, #16
 8013624:	af00      	add	r7, sp, #0
 8013626:	60f8      	str	r0, [r7, #12]
 8013628:	60b9      	str	r1, [r7, #8]
 801362a:	607a      	str	r2, [r7, #4]
    if (test->shouldRun(groupFilters_, nameFilters_)) return true;
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	68d9      	ldr	r1, [r3, #12]
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	689b      	ldr	r3, [r3, #8]
 8013634:	461a      	mov	r2, r3
 8013636:	68b8      	ldr	r0, [r7, #8]
 8013638:	f000 ffbb 	bl	80145b2 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>
 801363c:	4603      	mov	r3, r0
 801363e:	2b00      	cmp	r3, #0
 8013640:	d001      	beq.n	8013646 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x26>
 8013642:	2301      	movs	r3, #1
 8013644:	e006      	b.n	8013654 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x34>
    else {
        result.countFilteredOut();
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	332c      	adds	r3, #44	; 0x2c
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	6878      	ldr	r0, [r7, #4]
 8013650:	4798      	blx	r3
        return false;
 8013652:	2300      	movs	r3, #0
    }
}
 8013654:	4618      	mov	r0, r3
 8013656:	3710      	adds	r7, #16
 8013658:	46bd      	mov	sp, r7
 801365a:	bd80      	pop	{r7, pc}

0801365c <_ZN12TestRegistry12resetPluginsEv>:

void TestRegistry::resetPlugins()
{
 801365c:	b580      	push	{r7, lr}
 801365e:	b082      	sub	sp, #8
 8013660:	af00      	add	r7, sp, #0
 8013662:	6078      	str	r0, [r7, #4]
    firstPlugin_ = NullTestPlugin::instance();
 8013664:	f7ff fb62 	bl	8012d2c <_ZN14NullTestPlugin8instanceEv>
 8013668:	4602      	mov	r2, r0
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	611a      	str	r2, [r3, #16]
}
 801366e:	bf00      	nop
 8013670:	3708      	adds	r7, #8
 8013672:	46bd      	mov	sp, r7
 8013674:	bd80      	pop	{r7, pc}

08013676 <_ZN12TestRegistry13installPluginEP10TestPlugin>:

void TestRegistry::installPlugin(TestPlugin* plugin)
{
 8013676:	b580      	push	{r7, lr}
 8013678:	b082      	sub	sp, #8
 801367a:	af00      	add	r7, sp, #0
 801367c:	6078      	str	r0, [r7, #4]
 801367e:	6039      	str	r1, [r7, #0]
    firstPlugin_ = plugin->addPlugin(firstPlugin_);
 8013680:	683b      	ldr	r3, [r7, #0]
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	3324      	adds	r3, #36	; 0x24
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	687a      	ldr	r2, [r7, #4]
 801368a:	6912      	ldr	r2, [r2, #16]
 801368c:	4611      	mov	r1, r2
 801368e:	6838      	ldr	r0, [r7, #0]
 8013690:	4798      	blx	r3
 8013692:	4602      	mov	r2, r0
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	611a      	str	r2, [r3, #16]
}
 8013698:	bf00      	nop
 801369a:	3708      	adds	r7, #8
 801369c:	46bd      	mov	sp, r7
 801369e:	bd80      	pop	{r7, pc}

080136a0 <_ZN12TestRegistry14getFirstPluginEv>:

TestPlugin* TestRegistry::getFirstPlugin()
{
 80136a0:	b480      	push	{r7}
 80136a2:	b083      	sub	sp, #12
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	6078      	str	r0, [r7, #4]
    return firstPlugin_;
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	691b      	ldr	r3, [r3, #16]
}
 80136ac:	4618      	mov	r0, r3
 80136ae:	370c      	adds	r7, #12
 80136b0:	46bd      	mov	sp, r7
 80136b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b6:	4770      	bx	lr

080136b8 <_ZN12TestRegistry15getPluginByNameERK12SimpleString>:

TestPlugin* TestRegistry::getPluginByName(const SimpleString& name)
{
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b082      	sub	sp, #8
 80136bc:	af00      	add	r7, sp, #0
 80136be:	6078      	str	r0, [r7, #4]
 80136c0:	6039      	str	r1, [r7, #0]
    return firstPlugin_->getPluginByName(name);
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	691b      	ldr	r3, [r3, #16]
 80136c6:	6839      	ldr	r1, [r7, #0]
 80136c8:	4618      	mov	r0, r3
 80136ca:	f7ff fa52 	bl	8012b72 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 80136ce:	4603      	mov	r3, r0
}
 80136d0:	4618      	mov	r0, r3
 80136d2:	3708      	adds	r7, #8
 80136d4:	46bd      	mov	sp, r7
 80136d6:	bd80      	pop	{r7, pc}

080136d8 <_ZN12TestRegistry18removePluginByNameERK12SimpleString>:

void TestRegistry::removePluginByName(const SimpleString& name)
{
 80136d8:	b580      	push	{r7, lr}
 80136da:	b082      	sub	sp, #8
 80136dc:	af00      	add	r7, sp, #0
 80136de:	6078      	str	r0, [r7, #4]
 80136e0:	6039      	str	r1, [r7, #0]
    if (firstPlugin_->removePluginByName(name) == firstPlugin_) firstPlugin_ = firstPlugin_->getNext();
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	691a      	ldr	r2, [r3, #16]
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	691b      	ldr	r3, [r3, #16]
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	3328      	adds	r3, #40	; 0x28
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	6839      	ldr	r1, [r7, #0]
 80136f2:	4610      	mov	r0, r2
 80136f4:	4798      	blx	r3
 80136f6:	4602      	mov	r2, r0
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	691b      	ldr	r3, [r3, #16]
 80136fc:	429a      	cmp	r2, r3
 80136fe:	bf0c      	ite	eq
 8013700:	2301      	moveq	r3, #1
 8013702:	2300      	movne	r3, #0
 8013704:	b2db      	uxtb	r3, r3
 8013706:	2b00      	cmp	r3, #0
 8013708:	d00b      	beq.n	8013722 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x4a>
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	691a      	ldr	r2, [r3, #16]
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	691b      	ldr	r3, [r3, #16]
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	332c      	adds	r3, #44	; 0x2c
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	4610      	mov	r0, r2
 801371a:	4798      	blx	r3
 801371c:	4602      	mov	r2, r0
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	611a      	str	r2, [r3, #16]
    if (firstPlugin_->getName() == name) firstPlugin_ = firstPlugin_->getNext();
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	691b      	ldr	r3, [r3, #16]
 8013726:	4618      	mov	r0, r3
 8013728:	f7ff fa17 	bl	8012b5a <_ZN10TestPlugin7getNameEv>
 801372c:	4603      	mov	r3, r0
 801372e:	6839      	ldr	r1, [r7, #0]
 8013730:	4618      	mov	r0, r3
 8013732:	f7fa ffec 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 8013736:	4603      	mov	r3, r0
 8013738:	2b00      	cmp	r3, #0
 801373a:	d00b      	beq.n	8013754 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x7c>
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	691a      	ldr	r2, [r3, #16]
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	691b      	ldr	r3, [r3, #16]
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	332c      	adds	r3, #44	; 0x2c
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	4610      	mov	r0, r2
 801374c:	4798      	blx	r3
 801374e:	4602      	mov	r2, r0
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	611a      	str	r2, [r3, #16]
    firstPlugin_->removePluginByName(name);
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	691a      	ldr	r2, [r3, #16]
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	691b      	ldr	r3, [r3, #16]
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	3328      	adds	r3, #40	; 0x28
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	6839      	ldr	r1, [r7, #0]
 8013764:	4610      	mov	r0, r2
 8013766:	4798      	blx	r3
}
 8013768:	bf00      	nop
 801376a:	3708      	adds	r7, #8
 801376c:	46bd      	mov	sp, r7
 801376e:	bd80      	pop	{r7, pc}

08013770 <_ZN12TestRegistry12countPluginsEv>:

int TestRegistry::countPlugins()
{
 8013770:	b580      	push	{r7, lr}
 8013772:	b084      	sub	sp, #16
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
    int count = 0;
 8013778:	2300      	movs	r3, #0
 801377a:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	691b      	ldr	r3, [r3, #16]
 8013780:	60bb      	str	r3, [r7, #8]
 8013782:	f7ff fad3 	bl	8012d2c <_ZN14NullTestPlugin8instanceEv>
 8013786:	4602      	mov	r2, r0
 8013788:	68bb      	ldr	r3, [r7, #8]
 801378a:	4293      	cmp	r3, r2
 801378c:	bf14      	ite	ne
 801378e:	2301      	movne	r3, #1
 8013790:	2300      	moveq	r3, #0
 8013792:	b2db      	uxtb	r3, r3
 8013794:	2b00      	cmp	r3, #0
 8013796:	d00a      	beq.n	80137ae <_ZN12TestRegistry12countPluginsEv+0x3e>
        count++;
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	3301      	adds	r3, #1
 801379c:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 801379e:	68bb      	ldr	r3, [r7, #8]
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	332c      	adds	r3, #44	; 0x2c
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	68b8      	ldr	r0, [r7, #8]
 80137a8:	4798      	blx	r3
 80137aa:	60b8      	str	r0, [r7, #8]
 80137ac:	e7e9      	b.n	8013782 <_ZN12TestRegistry12countPluginsEv+0x12>
    return count;
 80137ae:	68fb      	ldr	r3, [r7, #12]
}
 80137b0:	4618      	mov	r0, r3
 80137b2:	3710      	adds	r7, #16
 80137b4:	46bd      	mov	sp, r7
 80137b6:	bd80      	pop	{r7, pc}

080137b8 <_ZN12TestRegistry12getFirstTestEv>:


UtestShell* TestRegistry::getFirstTest()
{
 80137b8:	b480      	push	{r7}
 80137ba:	b083      	sub	sp, #12
 80137bc:	af00      	add	r7, sp, #0
 80137be:	6078      	str	r0, [r7, #4]
    return tests_;
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	685b      	ldr	r3, [r3, #4]
}
 80137c4:	4618      	mov	r0, r3
 80137c6:	370c      	adds	r7, #12
 80137c8:	46bd      	mov	sp, r7
 80137ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ce:	4770      	bx	lr

080137d0 <_ZN12TestRegistry12shuffleTestsEj>:

void TestRegistry::shuffleTests(size_t seed)
{
 80137d0:	b580      	push	{r7, lr}
 80137d2:	b084      	sub	sp, #16
 80137d4:	af00      	add	r7, sp, #0
 80137d6:	6078      	str	r0, [r7, #4]
 80137d8:	6039      	str	r1, [r7, #0]
    UtestShellPointerArray array(getFirstTest());
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	334c      	adds	r3, #76	; 0x4c
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	6878      	ldr	r0, [r7, #4]
 80137e4:	4798      	blx	r3
 80137e6:	4602      	mov	r2, r0
 80137e8:	f107 0308 	add.w	r3, r7, #8
 80137ec:	4611      	mov	r1, r2
 80137ee:	4618      	mov	r0, r3
 80137f0:	f002 f8f8 	bl	80159e4 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.shuffle(seed);
 80137f4:	f107 0308 	add.w	r3, r7, #8
 80137f8:	6839      	ldr	r1, [r7, #0]
 80137fa:	4618      	mov	r0, r3
 80137fc:	f002 f980 	bl	8015b00 <_ZN22UtestShellPointerArray7shuffleEj>
    tests_ = array.getFirstTest();
 8013800:	f107 0308 	add.w	r3, r7, #8
 8013804:	4618      	mov	r0, r3
 8013806:	f002 fa13 	bl	8015c30 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 801380a:	4602      	mov	r2, r0
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 8013810:	f107 0308 	add.w	r3, r7, #8
 8013814:	4618      	mov	r0, r3
 8013816:	f002 f939 	bl	8015a8c <_ZN22UtestShellPointerArrayD1Ev>
}
 801381a:	bf00      	nop
 801381c:	3710      	adds	r7, #16
 801381e:	46bd      	mov	sp, r7
 8013820:	bd80      	pop	{r7, pc}

08013822 <_ZN12TestRegistry12reverseTestsEv>:

void TestRegistry::reverseTests()
{
 8013822:	b580      	push	{r7, lr}
 8013824:	b084      	sub	sp, #16
 8013826:	af00      	add	r7, sp, #0
 8013828:	6078      	str	r0, [r7, #4]
    UtestShellPointerArray array(getFirstTest());
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	334c      	adds	r3, #76	; 0x4c
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	6878      	ldr	r0, [r7, #4]
 8013834:	4798      	blx	r3
 8013836:	4602      	mov	r2, r0
 8013838:	f107 0308 	add.w	r3, r7, #8
 801383c:	4611      	mov	r1, r2
 801383e:	4618      	mov	r0, r3
 8013840:	f002 f8d0 	bl	80159e4 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.reverse();
 8013844:	f107 0308 	add.w	r3, r7, #8
 8013848:	4618      	mov	r0, r3
 801384a:	f002 f995 	bl	8015b78 <_ZN22UtestShellPointerArray7reverseEv>
    tests_ = array.getFirstTest();
 801384e:	f107 0308 	add.w	r3, r7, #8
 8013852:	4618      	mov	r0, r3
 8013854:	f002 f9ec 	bl	8015c30 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 8013858:	4602      	mov	r2, r0
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 801385e:	f107 0308 	add.w	r3, r7, #8
 8013862:	4618      	mov	r0, r3
 8013864:	f002 f912 	bl	8015a8c <_ZN22UtestShellPointerArrayD1Ev>
}
 8013868:	bf00      	nop
 801386a:	3710      	adds	r7, #16
 801386c:	46bd      	mov	sp, r7
 801386e:	bd80      	pop	{r7, pc}

08013870 <_ZN12TestRegistry15getTestWithNextEP10UtestShell>:

UtestShell* TestRegistry::getTestWithNext(UtestShell* test)
{
 8013870:	b580      	push	{r7, lr}
 8013872:	b084      	sub	sp, #16
 8013874:	af00      	add	r7, sp, #0
 8013876:	6078      	str	r0, [r7, #4]
 8013878:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	685b      	ldr	r3, [r3, #4]
 801387e:	60fb      	str	r3, [r7, #12]
    while (current && current->getNext() != test)
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d00b      	beq.n	801389e <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	330c      	adds	r3, #12
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	68f8      	ldr	r0, [r7, #12]
 8013890:	4798      	blx	r3
 8013892:	4602      	mov	r2, r0
 8013894:	683b      	ldr	r3, [r7, #0]
 8013896:	4293      	cmp	r3, r2
 8013898:	d001      	beq.n	801389e <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 801389a:	2301      	movs	r3, #1
 801389c:	e000      	b.n	80138a0 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x30>
 801389e:	2300      	movs	r3, #0
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d007      	beq.n	80138b4 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x44>
        current = current->getNext();
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	330c      	adds	r3, #12
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	68f8      	ldr	r0, [r7, #12]
 80138ae:	4798      	blx	r3
 80138b0:	60f8      	str	r0, [r7, #12]
    while (current && current->getNext() != test)
 80138b2:	e7e5      	b.n	8013880 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x10>
    return current;
 80138b4:	68fb      	ldr	r3, [r7, #12]
}
 80138b6:	4618      	mov	r0, r3
 80138b8:	3710      	adds	r7, #16
 80138ba:	46bd      	mov	sp, r7
 80138bc:	bd80      	pop	{r7, pc}

080138be <_ZN12TestRegistry16findTestWithNameERK12SimpleString>:

UtestShell* TestRegistry::findTestWithName(const SimpleString& name)
{
 80138be:	b590      	push	{r4, r7, lr}
 80138c0:	b087      	sub	sp, #28
 80138c2:	af00      	add	r7, sp, #0
 80138c4:	6078      	str	r0, [r7, #4]
 80138c6:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	685b      	ldr	r3, [r3, #4]
 80138cc:	617b      	str	r3, [r7, #20]
    while (current) {
 80138ce:	697b      	ldr	r3, [r7, #20]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d01e      	beq.n	8013912 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x54>
        if (current->getName() == name)
 80138d4:	f107 030c 	add.w	r3, r7, #12
 80138d8:	6979      	ldr	r1, [r7, #20]
 80138da:	4618      	mov	r0, r3
 80138dc:	f000 fd4e 	bl	801437c <_ZNK10UtestShell7getNameEv>
 80138e0:	f107 030c 	add.w	r3, r7, #12
 80138e4:	6839      	ldr	r1, [r7, #0]
 80138e6:	4618      	mov	r0, r3
 80138e8:	f7fa ff11 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 80138ec:	4603      	mov	r3, r0
 80138ee:	461c      	mov	r4, r3
 80138f0:	f107 030c 	add.w	r3, r7, #12
 80138f4:	4618      	mov	r0, r3
 80138f6:	f7fa fefe 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80138fa:	2c00      	cmp	r4, #0
 80138fc:	d001      	beq.n	8013902 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x44>
            return current;
 80138fe:	697b      	ldr	r3, [r7, #20]
 8013900:	e008      	b.n	8013914 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x56>
        current = current->getNext();
 8013902:	697b      	ldr	r3, [r7, #20]
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	330c      	adds	r3, #12
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	6978      	ldr	r0, [r7, #20]
 801390c:	4798      	blx	r3
 801390e:	6178      	str	r0, [r7, #20]
    while (current) {
 8013910:	e7dd      	b.n	80138ce <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x10>
    }
    return NULLPTR;
 8013912:	2300      	movs	r3, #0
}
 8013914:	4618      	mov	r0, r3
 8013916:	371c      	adds	r7, #28
 8013918:	46bd      	mov	sp, r7
 801391a:	bd90      	pop	{r4, r7, pc}

0801391c <_ZN12TestRegistry17findTestWithGroupERK12SimpleString>:

UtestShell* TestRegistry::findTestWithGroup(const SimpleString& group)
{
 801391c:	b590      	push	{r4, r7, lr}
 801391e:	b087      	sub	sp, #28
 8013920:	af00      	add	r7, sp, #0
 8013922:	6078      	str	r0, [r7, #4]
 8013924:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	685b      	ldr	r3, [r3, #4]
 801392a:	617b      	str	r3, [r7, #20]
    while (current) {
 801392c:	697b      	ldr	r3, [r7, #20]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d01e      	beq.n	8013970 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x54>
        if (current->getGroup() == group)
 8013932:	f107 030c 	add.w	r3, r7, #12
 8013936:	6979      	ldr	r1, [r7, #20]
 8013938:	4618      	mov	r0, r3
 801393a:	f000 fd2e 	bl	801439a <_ZNK10UtestShell8getGroupEv>
 801393e:	f107 030c 	add.w	r3, r7, #12
 8013942:	6839      	ldr	r1, [r7, #0]
 8013944:	4618      	mov	r0, r3
 8013946:	f7fa fee2 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801394a:	4603      	mov	r3, r0
 801394c:	461c      	mov	r4, r3
 801394e:	f107 030c 	add.w	r3, r7, #12
 8013952:	4618      	mov	r0, r3
 8013954:	f7fa fecf 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8013958:	2c00      	cmp	r4, #0
 801395a:	d001      	beq.n	8013960 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x44>
            return current;
 801395c:	697b      	ldr	r3, [r7, #20]
 801395e:	e008      	b.n	8013972 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x56>
        current = current->getNext();
 8013960:	697b      	ldr	r3, [r7, #20]
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	330c      	adds	r3, #12
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	6978      	ldr	r0, [r7, #20]
 801396a:	4798      	blx	r3
 801396c:	6178      	str	r0, [r7, #20]
    while (current) {
 801396e:	e7dd      	b.n	801392c <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x10>
    }
    return NULLPTR;
 8013970:	2300      	movs	r3, #0
}
 8013972:	4618      	mov	r0, r3
 8013974:	371c      	adds	r7, #28
 8013976:	46bd      	mov	sp, r7
 8013978:	bd90      	pop	{r4, r7, pc}
	...

0801397c <_ZN10TestResultC1ER10TestOutput>:
#include "CppUTest/TestResult.h"
#include "CppUTest/TestFailure.h"
#include "CppUTest/TestOutput.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestResult::TestResult(TestOutput& p) :
 801397c:	b480      	push	{r7}
 801397e:	b083      	sub	sp, #12
 8013980:	af00      	add	r7, sp, #0
 8013982:	6078      	str	r0, [r7, #4]
 8013984:	6039      	str	r1, [r7, #0]
    output_(p), testCount_(0), runCount_(0), checkCount_(0), failureCount_(0), filteredOutCount_(0), ignoredCount_(0), totalExecutionTime_(0), timeStarted_(0), currentTestTimeStarted_(0),
            currentTestTotalExecutionTime_(0), currentGroupTimeStarted_(0), currentGroupTotalExecutionTime_(0)
 8013986:	4a18      	ldr	r2, [pc, #96]	; (80139e8 <_ZN10TestResultC1ER10TestOutput+0x6c>)
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	601a      	str	r2, [r3, #0]
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	683a      	ldr	r2, [r7, #0]
 8013990:	605a      	str	r2, [r3, #4]
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	2200      	movs	r2, #0
 8013996:	609a      	str	r2, [r3, #8]
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	2200      	movs	r2, #0
 801399c:	60da      	str	r2, [r3, #12]
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	2200      	movs	r2, #0
 80139a2:	611a      	str	r2, [r3, #16]
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	2200      	movs	r2, #0
 80139a8:	615a      	str	r2, [r3, #20]
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	2200      	movs	r2, #0
 80139ae:	619a      	str	r2, [r3, #24]
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	2200      	movs	r2, #0
 80139b4:	61da      	str	r2, [r3, #28]
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	2200      	movs	r2, #0
 80139ba:	621a      	str	r2, [r3, #32]
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	2200      	movs	r2, #0
 80139c0:	625a      	str	r2, [r3, #36]	; 0x24
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	2200      	movs	r2, #0
 80139c6:	629a      	str	r2, [r3, #40]	; 0x28
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	2200      	movs	r2, #0
 80139cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	2200      	movs	r2, #0
 80139d2:	631a      	str	r2, [r3, #48]	; 0x30
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	2200      	movs	r2, #0
 80139d8:	635a      	str	r2, [r3, #52]	; 0x34
{
}
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	4618      	mov	r0, r3
 80139de:	370c      	adds	r7, #12
 80139e0:	46bd      	mov	sp, r7
 80139e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139e6:	4770      	bx	lr
 80139e8:	0802a504 	.word	0x0802a504

080139ec <_ZN10TestResultD1Ev>:

TestResult::~TestResult()
 80139ec:	b480      	push	{r7}
 80139ee:	b083      	sub	sp, #12
 80139f0:	af00      	add	r7, sp, #0
 80139f2:	6078      	str	r0, [r7, #4]
 80139f4:	4a04      	ldr	r2, [pc, #16]	; (8013a08 <_ZN10TestResultD1Ev+0x1c>)
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	601a      	str	r2, [r3, #0]
{
}
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	4618      	mov	r0, r3
 80139fe:	370c      	adds	r7, #12
 8013a00:	46bd      	mov	sp, r7
 8013a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a06:	4770      	bx	lr
 8013a08:	0802a504 	.word	0x0802a504

08013a0c <_ZN10TestResultD0Ev>:
TestResult::~TestResult()
 8013a0c:	b580      	push	{r7, lr}
 8013a0e:	b082      	sub	sp, #8
 8013a10:	af00      	add	r7, sp, #0
 8013a12:	6078      	str	r0, [r7, #4]
}
 8013a14:	6878      	ldr	r0, [r7, #4]
 8013a16:	f7ff ffe9 	bl	80139ec <_ZN10TestResultD1Ev>
 8013a1a:	2138      	movs	r1, #56	; 0x38
 8013a1c:	6878      	ldr	r0, [r7, #4]
 8013a1e:	f7f7 ff03 	bl	800b828 <_ZdlPvj>
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	4618      	mov	r0, r3
 8013a26:	3708      	adds	r7, #8
 8013a28:	46bd      	mov	sp, r7
 8013a2a:	bd80      	pop	{r7, pc}

08013a2c <_ZN10TestResult19currentGroupStartedEP10UtestShell>:

void TestResult::currentGroupStarted(UtestShell* test)
{
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	b082      	sub	sp, #8
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	6078      	str	r0, [r7, #4]
 8013a34:	6039      	str	r1, [r7, #0]
    output_.printCurrentGroupStarted(*test);
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	685a      	ldr	r2, [r3, #4]
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	685b      	ldr	r3, [r3, #4]
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	3318      	adds	r3, #24
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	6839      	ldr	r1, [r7, #0]
 8013a46:	4610      	mov	r0, r2
 8013a48:	4798      	blx	r3
    currentGroupTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8013a4a:	4b05      	ldr	r3, [pc, #20]	; (8013a60 <_ZN10TestResult19currentGroupStartedEP10UtestShell+0x34>)
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	4798      	blx	r3
 8013a50:	4603      	mov	r3, r0
 8013a52:	461a      	mov	r2, r3
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	631a      	str	r2, [r3, #48]	; 0x30
}
 8013a58:	bf00      	nop
 8013a5a:	3708      	adds	r7, #8
 8013a5c:	46bd      	mov	sp, r7
 8013a5e:	bd80      	pop	{r7, pc}
 8013a60:	200000a8 	.word	0x200000a8

08013a64 <_ZN10TestResult17currentGroupEndedEP10UtestShell>:

void TestResult::currentGroupEnded(UtestShell* /*test*/)
{
 8013a64:	b580      	push	{r7, lr}
 8013a66:	b082      	sub	sp, #8
 8013a68:	af00      	add	r7, sp, #0
 8013a6a:	6078      	str	r0, [r7, #4]
 8013a6c:	6039      	str	r1, [r7, #0]
    currentGroupTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentGroupTimeStarted_;
 8013a6e:	4b0c      	ldr	r3, [pc, #48]	; (8013aa0 <_ZN10TestResult17currentGroupEndedEP10UtestShell+0x3c>)
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	4798      	blx	r3
 8013a74:	4603      	mov	r3, r0
 8013a76:	461a      	mov	r2, r3
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a7c:	1ad2      	subs	r2, r2, r3
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	635a      	str	r2, [r3, #52]	; 0x34
    output_.printCurrentGroupEnded(*this);
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	685a      	ldr	r2, [r3, #4]
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	685b      	ldr	r3, [r3, #4]
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	331c      	adds	r3, #28
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	6879      	ldr	r1, [r7, #4]
 8013a92:	4610      	mov	r0, r2
 8013a94:	4798      	blx	r3
}
 8013a96:	bf00      	nop
 8013a98:	3708      	adds	r7, #8
 8013a9a:	46bd      	mov	sp, r7
 8013a9c:	bd80      	pop	{r7, pc}
 8013a9e:	bf00      	nop
 8013aa0:	200000a8 	.word	0x200000a8

08013aa4 <_ZN10TestResult18currentTestStartedEP10UtestShell>:

void TestResult::currentTestStarted(UtestShell* test)
{
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b082      	sub	sp, #8
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
 8013aac:	6039      	str	r1, [r7, #0]
    output_.printCurrentTestStarted(*test);
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	685a      	ldr	r2, [r3, #4]
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	685b      	ldr	r3, [r3, #4]
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	3310      	adds	r3, #16
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	6839      	ldr	r1, [r7, #0]
 8013abe:	4610      	mov	r0, r2
 8013ac0:	4798      	blx	r3
    currentTestTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8013ac2:	4b05      	ldr	r3, [pc, #20]	; (8013ad8 <_ZN10TestResult18currentTestStartedEP10UtestShell+0x34>)
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	4798      	blx	r3
 8013ac8:	4603      	mov	r3, r0
 8013aca:	461a      	mov	r2, r3
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	629a      	str	r2, [r3, #40]	; 0x28
}
 8013ad0:	bf00      	nop
 8013ad2:	3708      	adds	r7, #8
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	bd80      	pop	{r7, pc}
 8013ad8:	200000a8 	.word	0x200000a8

08013adc <_ZN10TestResult5printEPKc>:

void TestResult::print(const char* text)
{
 8013adc:	b580      	push	{r7, lr}
 8013ade:	b082      	sub	sp, #8
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
 8013ae4:	6039      	str	r1, [r7, #0]
    output_.print(text);
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	685a      	ldr	r2, [r3, #4]
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	685b      	ldr	r3, [r3, #4]
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	332c      	adds	r3, #44	; 0x2c
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	6839      	ldr	r1, [r7, #0]
 8013af6:	4610      	mov	r0, r2
 8013af8:	4798      	blx	r3
}
 8013afa:	bf00      	nop
 8013afc:	3708      	adds	r7, #8
 8013afe:	46bd      	mov	sp, r7
 8013b00:	bd80      	pop	{r7, pc}

08013b02 <_ZN10TestResult16printVeryVerboseEPKc>:

void TestResult::printVeryVerbose(const char* text)
{
 8013b02:	b580      	push	{r7, lr}
 8013b04:	b082      	sub	sp, #8
 8013b06:	af00      	add	r7, sp, #0
 8013b08:	6078      	str	r0, [r7, #4]
 8013b0a:	6039      	str	r1, [r7, #0]
    output_.printVeryVerbose(text);
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	685a      	ldr	r2, [r3, #4]
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	685b      	ldr	r3, [r3, #4]
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	3348      	adds	r3, #72	; 0x48
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	6839      	ldr	r1, [r7, #0]
 8013b1c:	4610      	mov	r0, r2
 8013b1e:	4798      	blx	r3
}
 8013b20:	bf00      	nop
 8013b22:	3708      	adds	r7, #8
 8013b24:	46bd      	mov	sp, r7
 8013b26:	bd80      	pop	{r7, pc}

08013b28 <_ZN10TestResult16currentTestEndedEP10UtestShell>:

void TestResult::currentTestEnded(UtestShell* /*test*/)
{
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	b082      	sub	sp, #8
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
 8013b30:	6039      	str	r1, [r7, #0]
    currentTestTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentTestTimeStarted_;
 8013b32:	4b0c      	ldr	r3, [pc, #48]	; (8013b64 <_ZN10TestResult16currentTestEndedEP10UtestShell+0x3c>)
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	4798      	blx	r3
 8013b38:	4603      	mov	r3, r0
 8013b3a:	461a      	mov	r2, r3
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b40:	1ad2      	subs	r2, r2, r3
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	62da      	str	r2, [r3, #44]	; 0x2c
    output_.printCurrentTestEnded(*this);
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	685a      	ldr	r2, [r3, #4]
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	685b      	ldr	r3, [r3, #4]
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	3314      	adds	r3, #20
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	6879      	ldr	r1, [r7, #4]
 8013b56:	4610      	mov	r0, r2
 8013b58:	4798      	blx	r3

}
 8013b5a:	bf00      	nop
 8013b5c:	3708      	adds	r7, #8
 8013b5e:	46bd      	mov	sp, r7
 8013b60:	bd80      	pop	{r7, pc}
 8013b62:	bf00      	nop
 8013b64:	200000a8 	.word	0x200000a8

08013b68 <_ZN10TestResult10addFailureERK11TestFailure>:

void TestResult::addFailure(const TestFailure& failure)
{
 8013b68:	b580      	push	{r7, lr}
 8013b6a:	b082      	sub	sp, #8
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	6078      	str	r0, [r7, #4]
 8013b70:	6039      	str	r1, [r7, #0]
    output_.printFailure(failure);
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	685a      	ldr	r2, [r3, #4]
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	685b      	ldr	r3, [r3, #4]
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	333c      	adds	r3, #60	; 0x3c
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	6839      	ldr	r1, [r7, #0]
 8013b82:	4610      	mov	r0, r2
 8013b84:	4798      	blx	r3
    failureCount_++;
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	695b      	ldr	r3, [r3, #20]
 8013b8a:	1c5a      	adds	r2, r3, #1
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	615a      	str	r2, [r3, #20]
}
 8013b90:	bf00      	nop
 8013b92:	3708      	adds	r7, #8
 8013b94:	46bd      	mov	sp, r7
 8013b96:	bd80      	pop	{r7, pc}

08013b98 <_ZN10TestResult9countTestEv>:

void TestResult::countTest()
{
 8013b98:	b480      	push	{r7}
 8013b9a:	b083      	sub	sp, #12
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	6078      	str	r0, [r7, #4]
    testCount_++;
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	689b      	ldr	r3, [r3, #8]
 8013ba4:	1c5a      	adds	r2, r3, #1
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	609a      	str	r2, [r3, #8]
}
 8013baa:	bf00      	nop
 8013bac:	370c      	adds	r7, #12
 8013bae:	46bd      	mov	sp, r7
 8013bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bb4:	4770      	bx	lr

08013bb6 <_ZN10TestResult8countRunEv>:

void TestResult::countRun()
{
 8013bb6:	b480      	push	{r7}
 8013bb8:	b083      	sub	sp, #12
 8013bba:	af00      	add	r7, sp, #0
 8013bbc:	6078      	str	r0, [r7, #4]
    runCount_++;
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	68db      	ldr	r3, [r3, #12]
 8013bc2:	1c5a      	adds	r2, r3, #1
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	60da      	str	r2, [r3, #12]
}
 8013bc8:	bf00      	nop
 8013bca:	370c      	adds	r7, #12
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd2:	4770      	bx	lr

08013bd4 <_ZN10TestResult10countCheckEv>:

void TestResult::countCheck()
{
 8013bd4:	b480      	push	{r7}
 8013bd6:	b083      	sub	sp, #12
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	6078      	str	r0, [r7, #4]
    checkCount_++;
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	691b      	ldr	r3, [r3, #16]
 8013be0:	1c5a      	adds	r2, r3, #1
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	611a      	str	r2, [r3, #16]
}
 8013be6:	bf00      	nop
 8013be8:	370c      	adds	r7, #12
 8013bea:	46bd      	mov	sp, r7
 8013bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf0:	4770      	bx	lr

08013bf2 <_ZN10TestResult16countFilteredOutEv>:

void TestResult::countFilteredOut()
{
 8013bf2:	b480      	push	{r7}
 8013bf4:	b083      	sub	sp, #12
 8013bf6:	af00      	add	r7, sp, #0
 8013bf8:	6078      	str	r0, [r7, #4]
    filteredOutCount_++;
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	699b      	ldr	r3, [r3, #24]
 8013bfe:	1c5a      	adds	r2, r3, #1
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	619a      	str	r2, [r3, #24]
}
 8013c04:	bf00      	nop
 8013c06:	370c      	adds	r7, #12
 8013c08:	46bd      	mov	sp, r7
 8013c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c0e:	4770      	bx	lr

08013c10 <_ZN10TestResult12countIgnoredEv>:

void TestResult::countIgnored()
{
 8013c10:	b480      	push	{r7}
 8013c12:	b083      	sub	sp, #12
 8013c14:	af00      	add	r7, sp, #0
 8013c16:	6078      	str	r0, [r7, #4]
    ignoredCount_++;
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	69db      	ldr	r3, [r3, #28]
 8013c1c:	1c5a      	adds	r2, r3, #1
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	61da      	str	r2, [r3, #28]
}
 8013c22:	bf00      	nop
 8013c24:	370c      	adds	r7, #12
 8013c26:	46bd      	mov	sp, r7
 8013c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c2c:	4770      	bx	lr
	...

08013c30 <_ZN10TestResult12testsStartedEv>:

void TestResult::testsStarted()
{
 8013c30:	b580      	push	{r7, lr}
 8013c32:	b082      	sub	sp, #8
 8013c34:	af00      	add	r7, sp, #0
 8013c36:	6078      	str	r0, [r7, #4]
    timeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8013c38:	4b09      	ldr	r3, [pc, #36]	; (8013c60 <_ZN10TestResult12testsStartedEv+0x30>)
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	4798      	blx	r3
 8013c3e:	4603      	mov	r3, r0
 8013c40:	461a      	mov	r2, r3
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	625a      	str	r2, [r3, #36]	; 0x24
    output_.printTestsStarted();
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	685a      	ldr	r2, [r3, #4]
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	685b      	ldr	r3, [r3, #4]
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	3308      	adds	r3, #8
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	4610      	mov	r0, r2
 8013c56:	4798      	blx	r3
}
 8013c58:	bf00      	nop
 8013c5a:	3708      	adds	r7, #8
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	bd80      	pop	{r7, pc}
 8013c60:	200000a8 	.word	0x200000a8

08013c64 <_ZN10TestResult10testsEndedEv>:

void TestResult::testsEnded()
{
 8013c64:	b580      	push	{r7, lr}
 8013c66:	b084      	sub	sp, #16
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
    size_t timeEnded = (size_t) GetPlatformSpecificTimeInMillis();
 8013c6c:	4b0c      	ldr	r3, [pc, #48]	; (8013ca0 <_ZN10TestResult10testsEndedEv+0x3c>)
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	4798      	blx	r3
 8013c72:	4603      	mov	r3, r0
 8013c74:	60fb      	str	r3, [r7, #12]
    totalExecutionTime_ = timeEnded - timeStarted_;
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c7a:	68fa      	ldr	r2, [r7, #12]
 8013c7c:	1ad2      	subs	r2, r2, r3
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	621a      	str	r2, [r3, #32]
    output_.printTestsEnded(*this);
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	685a      	ldr	r2, [r3, #4]
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	685b      	ldr	r3, [r3, #4]
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	330c      	adds	r3, #12
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	6879      	ldr	r1, [r7, #4]
 8013c92:	4610      	mov	r0, r2
 8013c94:	4798      	blx	r3
}
 8013c96:	bf00      	nop
 8013c98:	3710      	adds	r7, #16
 8013c9a:	46bd      	mov	sp, r7
 8013c9c:	bd80      	pop	{r7, pc}
 8013c9e:	bf00      	nop
 8013ca0:	200000a8 	.word	0x200000a8

08013ca4 <_ZNK10TestResult21getTotalExecutionTimeEv>:

size_t TestResult::getTotalExecutionTime() const
{
 8013ca4:	b480      	push	{r7}
 8013ca6:	b083      	sub	sp, #12
 8013ca8:	af00      	add	r7, sp, #0
 8013caa:	6078      	str	r0, [r7, #4]
    return totalExecutionTime_;
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	6a1b      	ldr	r3, [r3, #32]
}
 8013cb0:	4618      	mov	r0, r3
 8013cb2:	370c      	adds	r7, #12
 8013cb4:	46bd      	mov	sp, r7
 8013cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cba:	4770      	bx	lr

08013cbc <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>:
{
    totalExecutionTime_ = exTime;
}

size_t TestResult::getCurrentTestTotalExecutionTime() const
{
 8013cbc:	b480      	push	{r7}
 8013cbe:	b083      	sub	sp, #12
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	6078      	str	r0, [r7, #4]
    return currentTestTotalExecutionTime_;
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8013cc8:	4618      	mov	r0, r3
 8013cca:	370c      	adds	r7, #12
 8013ccc:	46bd      	mov	sp, r7
 8013cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd2:	4770      	bx	lr

08013cd4 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>:

size_t TestResult::getCurrentGroupTotalExecutionTime() const
{
 8013cd4:	b480      	push	{r7}
 8013cd6:	b083      	sub	sp, #12
 8013cd8:	af00      	add	r7, sp, #0
 8013cda:	6078      	str	r0, [r7, #4]
    return currentGroupTotalExecutionTime_;
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	370c      	adds	r7, #12
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cea:	4770      	bx	lr

08013cec <_Z13doubles_equalddd>:
#if defined(__GNUC__) && __GNUC__ >= 11
# define NEEDS_DISABLE_NULL_WARNING
#endif /* GCC >= 11 */

bool doubles_equal(double d1, double d2, double threshold)
{
 8013cec:	b590      	push	{r4, r7, lr}
 8013cee:	b087      	sub	sp, #28
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	ed87 0b04 	vstr	d0, [r7, #16]
 8013cf6:	ed87 1b02 	vstr	d1, [r7, #8]
 8013cfa:	ed87 2b00 	vstr	d2, [r7]
    if (PlatformSpecificIsNan(d1) || PlatformSpecificIsNan(d2) || PlatformSpecificIsNan(threshold))
 8013cfe:	4b2c      	ldr	r3, [pc, #176]	; (8013db0 <_Z13doubles_equalddd+0xc4>)
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	ed97 0b04 	vldr	d0, [r7, #16]
 8013d06:	4798      	blx	r3
 8013d08:	4603      	mov	r3, r0
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d10f      	bne.n	8013d2e <_Z13doubles_equalddd+0x42>
 8013d0e:	4b28      	ldr	r3, [pc, #160]	; (8013db0 <_Z13doubles_equalddd+0xc4>)
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	ed97 0b02 	vldr	d0, [r7, #8]
 8013d16:	4798      	blx	r3
 8013d18:	4603      	mov	r3, r0
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d107      	bne.n	8013d2e <_Z13doubles_equalddd+0x42>
 8013d1e:	4b24      	ldr	r3, [pc, #144]	; (8013db0 <_Z13doubles_equalddd+0xc4>)
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	ed97 0b00 	vldr	d0, [r7]
 8013d26:	4798      	blx	r3
 8013d28:	4603      	mov	r3, r0
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d001      	beq.n	8013d32 <_Z13doubles_equalddd+0x46>
 8013d2e:	2301      	movs	r3, #1
 8013d30:	e000      	b.n	8013d34 <_Z13doubles_equalddd+0x48>
 8013d32:	2300      	movs	r3, #0
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d001      	beq.n	8013d3c <_Z13doubles_equalddd+0x50>
        return false;
 8013d38:	2300      	movs	r3, #0
 8013d3a:	e035      	b.n	8013da8 <_Z13doubles_equalddd+0xbc>

    if (PlatformSpecificIsInf(d1) && PlatformSpecificIsInf(d2))
 8013d3c:	4b1d      	ldr	r3, [pc, #116]	; (8013db4 <_Z13doubles_equalddd+0xc8>)
 8013d3e:	681b      	ldr	r3, [r3, #0]
 8013d40:	ed97 0b04 	vldr	d0, [r7, #16]
 8013d44:	4798      	blx	r3
 8013d46:	4603      	mov	r3, r0
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d009      	beq.n	8013d60 <_Z13doubles_equalddd+0x74>
 8013d4c:	4b19      	ldr	r3, [pc, #100]	; (8013db4 <_Z13doubles_equalddd+0xc8>)
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	ed97 0b02 	vldr	d0, [r7, #8]
 8013d54:	4798      	blx	r3
 8013d56:	4603      	mov	r3, r0
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d001      	beq.n	8013d60 <_Z13doubles_equalddd+0x74>
 8013d5c:	2301      	movs	r3, #1
 8013d5e:	e000      	b.n	8013d62 <_Z13doubles_equalddd+0x76>
 8013d60:	2300      	movs	r3, #0
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d001      	beq.n	8013d6a <_Z13doubles_equalddd+0x7e>
    {
        return true;
 8013d66:	2301      	movs	r3, #1
 8013d68:	e01e      	b.n	8013da8 <_Z13doubles_equalddd+0xbc>
    }

    return PlatformSpecificFabs(d1 - d2) <= threshold;
 8013d6a:	4b13      	ldr	r3, [pc, #76]	; (8013db8 <_Z13doubles_equalddd+0xcc>)
 8013d6c:	681c      	ldr	r4, [r3, #0]
 8013d6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013d72:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8013d76:	f7ec fac7 	bl	8000308 <__aeabi_dsub>
 8013d7a:	4602      	mov	r2, r0
 8013d7c:	460b      	mov	r3, r1
 8013d7e:	ec43 2b17 	vmov	d7, r2, r3
 8013d82:	eeb0 0a47 	vmov.f32	s0, s14
 8013d86:	eef0 0a67 	vmov.f32	s1, s15
 8013d8a:	47a0      	blx	r4
 8013d8c:	ec53 2b10 	vmov	r2, r3, d0
 8013d90:	2101      	movs	r1, #1
 8013d92:	460c      	mov	r4, r1
 8013d94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8013d98:	f7ec fce2 	bl	8000760 <__aeabi_dcmpge>
 8013d9c:	4603      	mov	r3, r0
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d101      	bne.n	8013da6 <_Z13doubles_equalddd+0xba>
 8013da2:	2300      	movs	r3, #0
 8013da4:	461c      	mov	r4, r3
 8013da6:	b2e3      	uxtb	r3, r4
}
 8013da8:	4618      	mov	r0, r3
 8013daa:	371c      	adds	r7, #28
 8013dac:	46bd      	mov	sp, r7
 8013dae:	bd90      	pop	{r4, r7, pc}
 8013db0:	200000e8 	.word	0x200000e8
 8013db4:	200000ec 	.word	0x200000ec
 8013db8:	200000dc 	.word	0x200000dc

08013dbc <_ZN22OutsideTestRunnerUTest13getTestResultEv>:
 */
class OutsideTestRunnerUTest: public UtestShell
{
public:
    static OutsideTestRunnerUTest& instance();
    virtual TestResult& getTestResult()
 8013dbc:	b480      	push	{r7}
 8013dbe:	b083      	sub	sp, #12
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	6078      	str	r0, [r7, #4]
    {
        return defaultTestResult;
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	332c      	adds	r3, #44	; 0x2c
    }
 8013dc8:	4618      	mov	r0, r3
 8013dca:	370c      	adds	r7, #12
 8013dcc:	46bd      	mov	sp, r7
 8013dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dd2:	4770      	bx	lr

08013dd4 <_ZN22OutsideTestRunnerUTestD1Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 8013dd4:	b580      	push	{r7, lr}
 8013dd6:	b082      	sub	sp, #8
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	6078      	str	r0, [r7, #4]
    {
 8013ddc:	4a0a      	ldr	r2, [pc, #40]	; (8013e08 <_ZN22OutsideTestRunnerUTestD1Ev+0x34>)
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	601a      	str	r2, [r3, #0]
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	332c      	adds	r3, #44	; 0x2c
 8013de6:	4618      	mov	r0, r3
 8013de8:	f7ff fe00 	bl	80139ec <_ZN10TestResultD1Ev>
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	331c      	adds	r3, #28
 8013df0:	4618      	mov	r0, r3
 8013df2:	f7f6 f815 	bl	8009e20 <_ZN17ConsoleTestOutputD1Ev>
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	4618      	mov	r0, r3
 8013dfa:	f000 f943 	bl	8014084 <_ZN10UtestShellD1Ev>
    }
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	4618      	mov	r0, r3
 8013e02:	3708      	adds	r7, #8
 8013e04:	46bd      	mov	sp, r7
 8013e06:	bd80      	pop	{r7, pc}
 8013e08:	0802a54c 	.word	0x0802a54c

08013e0c <_ZN22OutsideTestRunnerUTestD0Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 8013e0c:	b580      	push	{r7, lr}
 8013e0e:	b082      	sub	sp, #8
 8013e10:	af00      	add	r7, sp, #0
 8013e12:	6078      	str	r0, [r7, #4]
    }
 8013e14:	6878      	ldr	r0, [r7, #4]
 8013e16:	f7ff ffdd 	bl	8013dd4 <_ZN22OutsideTestRunnerUTestD1Ev>
 8013e1a:	2164      	movs	r1, #100	; 0x64
 8013e1c:	6878      	ldr	r0, [r7, #4]
 8013e1e:	f7f7 fd03 	bl	800b828 <_ZdlPvj>
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	4618      	mov	r0, r3
 8013e26:	3708      	adds	r7, #8
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	bd80      	pop	{r7, pc}

08013e2c <_ZN22OutsideTestRunnerUTestC1Ev>:
private:
    OutsideTestRunnerUTest() :
 8013e2c:	b580      	push	{r7, lr}
 8013e2e:	b084      	sub	sp, #16
 8013e30:	af02      	add	r7, sp, #8
 8013e32:	6078      	str	r0, [r7, #4]
        UtestShell("\n\t NOTE: Assertion happened without being in a test run (perhaps in main?)", "\n\t       Something is very wrong. Check this assertion and fix", "unknown file", 0),
                defaultTestResult(defaultOutput)
 8013e34:	6878      	ldr	r0, [r7, #4]
 8013e36:	2300      	movs	r3, #0
 8013e38:	9300      	str	r3, [sp, #0]
 8013e3a:	4b0d      	ldr	r3, [pc, #52]	; (8013e70 <_ZN22OutsideTestRunnerUTestC1Ev+0x44>)
 8013e3c:	4a0d      	ldr	r2, [pc, #52]	; (8013e74 <_ZN22OutsideTestRunnerUTestC1Ev+0x48>)
 8013e3e:	490e      	ldr	r1, [pc, #56]	; (8013e78 <_ZN22OutsideTestRunnerUTestC1Ev+0x4c>)
 8013e40:	f000 f8f8 	bl	8014034 <_ZN10UtestShellC1EPKcS1_S1_j>
 8013e44:	4a0d      	ldr	r2, [pc, #52]	; (8013e7c <_ZN22OutsideTestRunnerUTestC1Ev+0x50>)
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	601a      	str	r2, [r3, #0]
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	331c      	adds	r3, #28
 8013e4e:	4618      	mov	r0, r3
 8013e50:	f7f5 ffd4 	bl	8009dfc <_ZN17ConsoleTestOutputC1Ev>
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	331c      	adds	r3, #28
 8013e5e:	4619      	mov	r1, r3
 8013e60:	4610      	mov	r0, r2
 8013e62:	f7ff fd8b 	bl	801397c <_ZN10TestResultC1ER10TestOutput>
    {
    }
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	4618      	mov	r0, r3
 8013e6a:	3708      	adds	r7, #8
 8013e6c:	46bd      	mov	sp, r7
 8013e6e:	bd80      	pop	{r7, pc}
 8013e70:	0802689c 	.word	0x0802689c
 8013e74:	080268ac 	.word	0x080268ac
 8013e78:	080268ec 	.word	0x080268ec
 8013e7c:	0802a54c 	.word	0x0802a54c

08013e80 <__tcf_0>:
    TestResult defaultTestResult;
};

OutsideTestRunnerUTest& OutsideTestRunnerUTest::instance()
{
    static OutsideTestRunnerUTest instance_;
 8013e80:	b580      	push	{r7, lr}
 8013e82:	af00      	add	r7, sp, #0
 8013e84:	4801      	ldr	r0, [pc, #4]	; (8013e8c <__tcf_0+0xc>)
 8013e86:	f7ff ffa5 	bl	8013dd4 <_ZN22OutsideTestRunnerUTestD1Ev>
 8013e8a:	bd80      	pop	{r7, pc}
 8013e8c:	20000b14 	.word	0x20000b14

08013e90 <_ZN22OutsideTestRunnerUTest8instanceEv>:
{
 8013e90:	b580      	push	{r7, lr}
 8013e92:	af00      	add	r7, sp, #0
    static OutsideTestRunnerUTest instance_;
 8013e94:	4b12      	ldr	r3, [pc, #72]	; (8013ee0 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8013e96:	781b      	ldrb	r3, [r3, #0]
 8013e98:	f3bf 8f5b 	dmb	ish
 8013e9c:	b2db      	uxtb	r3, r3
 8013e9e:	f003 0301 	and.w	r3, r3, #1
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	bf0c      	ite	eq
 8013ea6:	2301      	moveq	r3, #1
 8013ea8:	2300      	movne	r3, #0
 8013eaa:	b2db      	uxtb	r3, r3
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d013      	beq.n	8013ed8 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 8013eb0:	480b      	ldr	r0, [pc, #44]	; (8013ee0 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8013eb2:	f00c ff29 	bl	8020d08 <__cxa_guard_acquire>
 8013eb6:	4603      	mov	r3, r0
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	bf14      	ite	ne
 8013ebc:	2301      	movne	r3, #1
 8013ebe:	2300      	moveq	r3, #0
 8013ec0:	b2db      	uxtb	r3, r3
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d008      	beq.n	8013ed8 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 8013ec6:	4807      	ldr	r0, [pc, #28]	; (8013ee4 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
 8013ec8:	f7ff ffb0 	bl	8013e2c <_ZN22OutsideTestRunnerUTestC1Ev>
 8013ecc:	4804      	ldr	r0, [pc, #16]	; (8013ee0 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8013ece:	f00c ff27 	bl	8020d20 <__cxa_guard_release>
 8013ed2:	4805      	ldr	r0, [pc, #20]	; (8013ee8 <_ZN22OutsideTestRunnerUTest8instanceEv+0x58>)
 8013ed4:	f00c ff4b 	bl	8020d6e <atexit>
    return instance_;
 8013ed8:	4b02      	ldr	r3, [pc, #8]	; (8013ee4 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
}
 8013eda:	4618      	mov	r0, r3
 8013edc:	bd80      	pop	{r7, pc}
 8013ede:	bf00      	nop
 8013ee0:	20000b78 	.word	0x20000b78
 8013ee4:	20000b14 	.word	0x20000b14
 8013ee8:	08013e81 	.word	0x08013e81

08013eec <helperDoTestSetup>:
 */

extern "C" {

    static void helperDoTestSetup(void* data)
    {
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b082      	sub	sp, #8
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->setup();
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	330c      	adds	r3, #12
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	6878      	ldr	r0, [r7, #4]
 8013efe:	4798      	blx	r3
    }
 8013f00:	bf00      	nop
 8013f02:	3708      	adds	r7, #8
 8013f04:	46bd      	mov	sp, r7
 8013f06:	bd80      	pop	{r7, pc}

08013f08 <helperDoTestBody>:

    static void helperDoTestBody(void* data)
    {
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b082      	sub	sp, #8
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->testBody();
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	3314      	adds	r3, #20
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	6878      	ldr	r0, [r7, #4]
 8013f1a:	4798      	blx	r3
    }
 8013f1c:	bf00      	nop
 8013f1e:	3708      	adds	r7, #8
 8013f20:	46bd      	mov	sp, r7
 8013f22:	bd80      	pop	{r7, pc}

08013f24 <helperDoTestTeardown>:

    static void helperDoTestTeardown(void* data)
    {
 8013f24:	b580      	push	{r7, lr}
 8013f26:	b082      	sub	sp, #8
 8013f28:	af00      	add	r7, sp, #0
 8013f2a:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->teardown();
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	3310      	adds	r3, #16
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	6878      	ldr	r0, [r7, #4]
 8013f36:	4798      	blx	r3
    }
 8013f38:	bf00      	nop
 8013f3a:	3708      	adds	r7, #8
 8013f3c:	46bd      	mov	sp, r7
 8013f3e:	bd80      	pop	{r7, pc}

08013f40 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>:

    struct HelperTestRunInfo
    {
        HelperTestRunInfo(UtestShell* shell, TestPlugin* plugin, TestResult* result) : shell_(shell), plugin_(plugin), result_(result){}
 8013f40:	b480      	push	{r7}
 8013f42:	b085      	sub	sp, #20
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	60f8      	str	r0, [r7, #12]
 8013f48:	60b9      	str	r1, [r7, #8]
 8013f4a:	607a      	str	r2, [r7, #4]
 8013f4c:	603b      	str	r3, [r7, #0]
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	68ba      	ldr	r2, [r7, #8]
 8013f52:	601a      	str	r2, [r3, #0]
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	687a      	ldr	r2, [r7, #4]
 8013f58:	605a      	str	r2, [r3, #4]
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	683a      	ldr	r2, [r7, #0]
 8013f5e:	609a      	str	r2, [r3, #8]
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	4618      	mov	r0, r3
 8013f64:	3714      	adds	r7, #20
 8013f66:	46bd      	mov	sp, r7
 8013f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f6c:	4770      	bx	lr

08013f6e <helperDoRunOneTestInCurrentProcess>:
        TestPlugin* plugin_;
        TestResult* result_;
    };

    static void helperDoRunOneTestInCurrentProcess(void* data)
    {
 8013f6e:	b580      	push	{r7, lr}
 8013f70:	b086      	sub	sp, #24
 8013f72:	af00      	add	r7, sp, #0
 8013f74:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 8013f7a:	697b      	ldr	r3, [r7, #20]
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 8013f80:	697b      	ldr	r3, [r7, #20]
 8013f82:	685b      	ldr	r3, [r3, #4]
 8013f84:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 8013f86:	697b      	ldr	r3, [r7, #20]
 8013f88:	689b      	ldr	r3, [r3, #8]
 8013f8a:	60bb      	str	r3, [r7, #8]

        shell->runOneTestInCurrentProcess(plugin, *result);
 8013f8c:	693b      	ldr	r3, [r7, #16]
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	3394      	adds	r3, #148	; 0x94
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	68ba      	ldr	r2, [r7, #8]
 8013f96:	68f9      	ldr	r1, [r7, #12]
 8013f98:	6938      	ldr	r0, [r7, #16]
 8013f9a:	4798      	blx	r3
    }
 8013f9c:	bf00      	nop
 8013f9e:	3718      	adds	r7, #24
 8013fa0:	46bd      	mov	sp, r7
 8013fa2:	bd80      	pop	{r7, pc}

08013fa4 <helperDoRunOneTestSeperateProcess>:

    static void helperDoRunOneTestSeperateProcess(void* data)
    {
 8013fa4:	b580      	push	{r7, lr}
 8013fa6:	b086      	sub	sp, #24
 8013fa8:	af00      	add	r7, sp, #0
 8013faa:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 8013fb0:	697b      	ldr	r3, [r7, #20]
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 8013fb6:	697b      	ldr	r3, [r7, #20]
 8013fb8:	685b      	ldr	r3, [r3, #4]
 8013fba:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 8013fbc:	697b      	ldr	r3, [r7, #20]
 8013fbe:	689b      	ldr	r3, [r3, #8]
 8013fc0:	60bb      	str	r3, [r7, #8]
        PlatformSpecificRunTestInASeperateProcess(shell, plugin, result);
 8013fc2:	4b05      	ldr	r3, [pc, #20]	; (8013fd8 <helperDoRunOneTestSeperateProcess+0x34>)
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	68ba      	ldr	r2, [r7, #8]
 8013fc8:	68f9      	ldr	r1, [r7, #12]
 8013fca:	6938      	ldr	r0, [r7, #16]
 8013fcc:	4798      	blx	r3
    }
 8013fce:	bf00      	nop
 8013fd0:	3718      	adds	r7, #24
 8013fd2:	46bd      	mov	sp, r7
 8013fd4:	bd80      	pop	{r7, pc}
 8013fd6:	bf00      	nop
 8013fd8:	2000009c 	.word	0x2000009c

08013fdc <_ZN10UtestShellC1Ev>:

const TestTerminator *UtestShell::currentTestTerminator_ = &normalTestTerminator;

/******************************** */

UtestShell::UtestShell() :
 8013fdc:	b480      	push	{r7}
 8013fde:	b083      	sub	sp, #12
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	6078      	str	r0, [r7, #4]
    group_("UndefinedTestGroup"), name_("UndefinedTest"), file_("UndefinedFile"), lineNumber_(0), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 8013fe4:	4a0f      	ldr	r2, [pc, #60]	; (8014024 <_ZN10UtestShellC1Ev+0x48>)
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	601a      	str	r2, [r3, #0]
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	4a0e      	ldr	r2, [pc, #56]	; (8014028 <_ZN10UtestShellC1Ev+0x4c>)
 8013fee:	605a      	str	r2, [r3, #4]
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	4a0e      	ldr	r2, [pc, #56]	; (801402c <_ZN10UtestShellC1Ev+0x50>)
 8013ff4:	609a      	str	r2, [r3, #8]
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	4a0d      	ldr	r2, [pc, #52]	; (8014030 <_ZN10UtestShellC1Ev+0x54>)
 8013ffa:	60da      	str	r2, [r3, #12]
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	2200      	movs	r2, #0
 8014000:	611a      	str	r2, [r3, #16]
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	2200      	movs	r2, #0
 8014006:	615a      	str	r2, [r3, #20]
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	2200      	movs	r2, #0
 801400c:	761a      	strb	r2, [r3, #24]
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	2200      	movs	r2, #0
 8014012:	765a      	strb	r2, [r3, #25]
{
}
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	4618      	mov	r0, r3
 8014018:	370c      	adds	r7, #12
 801401a:	46bd      	mov	sp, r7
 801401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014020:	4770      	bx	lr
 8014022:	bf00      	nop
 8014024:	0802a60c 	.word	0x0802a60c
 8014028:	08026938 	.word	0x08026938
 801402c:	0802694c 	.word	0x0802694c
 8014030:	0802695c 	.word	0x0802695c

08014034 <_ZN10UtestShellC1EPKcS1_S1_j>:

UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber) :
 8014034:	b480      	push	{r7}
 8014036:	b085      	sub	sp, #20
 8014038:	af00      	add	r7, sp, #0
 801403a:	60f8      	str	r0, [r7, #12]
 801403c:	60b9      	str	r1, [r7, #8]
 801403e:	607a      	str	r2, [r7, #4]
 8014040:	603b      	str	r3, [r7, #0]
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 8014042:	4a0f      	ldr	r2, [pc, #60]	; (8014080 <_ZN10UtestShellC1EPKcS1_S1_j+0x4c>)
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	601a      	str	r2, [r3, #0]
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	68ba      	ldr	r2, [r7, #8]
 801404c:	605a      	str	r2, [r3, #4]
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	687a      	ldr	r2, [r7, #4]
 8014052:	609a      	str	r2, [r3, #8]
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	683a      	ldr	r2, [r7, #0]
 8014058:	60da      	str	r2, [r3, #12]
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	69ba      	ldr	r2, [r7, #24]
 801405e:	611a      	str	r2, [r3, #16]
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	2200      	movs	r2, #0
 8014064:	615a      	str	r2, [r3, #20]
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	2200      	movs	r2, #0
 801406a:	761a      	strb	r2, [r3, #24]
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	2200      	movs	r2, #0
 8014070:	765a      	strb	r2, [r3, #25]
{
}
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	4618      	mov	r0, r3
 8014076:	3714      	adds	r7, #20
 8014078:	46bd      	mov	sp, r7
 801407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801407e:	4770      	bx	lr
 8014080:	0802a60c 	.word	0x0802a60c

08014084 <_ZN10UtestShellD1Ev>:
UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber, UtestShell* nextTest) :
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(nextTest), isRunAsSeperateProcess_(false), hasFailed_(false)
{
}

UtestShell::~UtestShell()
 8014084:	b480      	push	{r7}
 8014086:	b083      	sub	sp, #12
 8014088:	af00      	add	r7, sp, #0
 801408a:	6078      	str	r0, [r7, #4]
 801408c:	4a04      	ldr	r2, [pc, #16]	; (80140a0 <_ZN10UtestShellD1Ev+0x1c>)
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	601a      	str	r2, [r3, #0]
{
}
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	4618      	mov	r0, r3
 8014096:	370c      	adds	r7, #12
 8014098:	46bd      	mov	sp, r7
 801409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801409e:	4770      	bx	lr
 80140a0:	0802a60c 	.word	0x0802a60c

080140a4 <_ZN10UtestShellD0Ev>:
UtestShell::~UtestShell()
 80140a4:	b580      	push	{r7, lr}
 80140a6:	b082      	sub	sp, #8
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	6078      	str	r0, [r7, #4]
}
 80140ac:	6878      	ldr	r0, [r7, #4]
 80140ae:	f7ff ffe9 	bl	8014084 <_ZN10UtestShellD1Ev>
 80140b2:	211c      	movs	r1, #28
 80140b4:	6878      	ldr	r0, [r7, #4]
 80140b6:	f7f7 fbb7 	bl	800b828 <_ZdlPvj>
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	4618      	mov	r0, r3
 80140be:	3708      	adds	r7, #8
 80140c0:	46bd      	mov	sp, r7
 80140c2:	bd80      	pop	{r7, pc}

080140c4 <_ZL18defaultCrashMethodv>:
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Wnonnull"
#endif /* NEEDS_DISABLE_NULL_WARNING */

static void defaultCrashMethod()
{
 80140c4:	b580      	push	{r7, lr}
 80140c6:	b082      	sub	sp, #8
 80140c8:	af00      	add	r7, sp, #0
    UtestShell* ptr = (UtestShell*) NULLPTR;
 80140ca:	2300      	movs	r3, #0
 80140cc:	607b      	str	r3, [r7, #4]
    ptr->countTests();
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	3310      	adds	r3, #16
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	6878      	ldr	r0, [r7, #4]
 80140d8:	4798      	blx	r3
}
 80140da:	bf00      	nop
 80140dc:	3708      	adds	r7, #8
 80140de:	46bd      	mov	sp, r7
 80140e0:	bd80      	pop	{r7, pc}
	...

080140e4 <_ZN10UtestShell5crashEv>:
{
    pleaseCrashMeRightNow = defaultCrashMethod;
}

void UtestShell::crash()
{
 80140e4:	b580      	push	{r7, lr}
 80140e6:	af00      	add	r7, sp, #0
    pleaseCrashMeRightNow();
 80140e8:	4b02      	ldr	r3, [pc, #8]	; (80140f4 <_ZN10UtestShell5crashEv+0x10>)
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	4798      	blx	r3
}
 80140ee:	bf00      	nop
 80140f0:	bd80      	pop	{r7, pc}
 80140f2:	bf00      	nop
 80140f4:	20000098 	.word	0x20000098

080140f8 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult>:

void UtestShell::runOneTest(TestPlugin* plugin, TestResult& result)
{
 80140f8:	b580      	push	{r7, lr}
 80140fa:	b088      	sub	sp, #32
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	60f8      	str	r0, [r7, #12]
 8014100:	60b9      	str	r1, [r7, #8]
 8014102:	607a      	str	r2, [r7, #4]
    hasFailed_ = false;
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	2200      	movs	r2, #0
 8014108:	765a      	strb	r2, [r3, #25]
    result.countRun();
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	3324      	adds	r3, #36	; 0x24
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	6878      	ldr	r0, [r7, #4]
 8014114:	4798      	blx	r3
    HelperTestRunInfo runInfo(this, plugin, &result);
 8014116:	f107 0014 	add.w	r0, r7, #20
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	68ba      	ldr	r2, [r7, #8]
 801411e:	68f9      	ldr	r1, [r7, #12]
 8014120:	f7ff ff0e 	bl	8013f40 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>
    if (isRunInSeperateProcess())
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	337c      	adds	r3, #124	; 0x7c
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	68f8      	ldr	r0, [r7, #12]
 801412e:	4798      	blx	r3
 8014130:	4603      	mov	r3, r0
 8014132:	2b00      	cmp	r3, #0
 8014134:	d007      	beq.n	8014146 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x4e>
        PlatformSpecificSetJmp(helperDoRunOneTestSeperateProcess, &runInfo);
 8014136:	4b09      	ldr	r3, [pc, #36]	; (801415c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	f107 0214 	add.w	r2, r7, #20
 801413e:	4611      	mov	r1, r2
 8014140:	4807      	ldr	r0, [pc, #28]	; (8014160 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x68>)
 8014142:	4798      	blx	r3
    else
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
}
 8014144:	e006      	b.n	8014154 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x5c>
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
 8014146:	4b05      	ldr	r3, [pc, #20]	; (801415c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	f107 0214 	add.w	r2, r7, #20
 801414e:	4611      	mov	r1, r2
 8014150:	4804      	ldr	r0, [pc, #16]	; (8014164 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x6c>)
 8014152:	4798      	blx	r3
}
 8014154:	bf00      	nop
 8014156:	3720      	adds	r7, #32
 8014158:	46bd      	mov	sp, r7
 801415a:	bd80      	pop	{r7, pc}
 801415c:	200000a4 	.word	0x200000a4
 8014160:	08013fa5 	.word	0x08013fa5
 8014164:	08013f6f 	.word	0x08013f6f

08014168 <_ZN10UtestShell10createTestEv>:

Utest* UtestShell::createTest()
{
 8014168:	b590      	push	{r4, r7, lr}
 801416a:	b083      	sub	sp, #12
 801416c:	af00      	add	r7, sp, #0
 801416e:	6078      	str	r0, [r7, #4]
    return new Utest();
 8014170:	22d3      	movs	r2, #211	; 0xd3
 8014172:	4906      	ldr	r1, [pc, #24]	; (801418c <_ZN10UtestShell10createTestEv+0x24>)
 8014174:	2004      	movs	r0, #4
 8014176:	f7f7 fb43 	bl	800b800 <_ZnwjPKci>
 801417a:	4604      	mov	r4, r0
 801417c:	4620      	mov	r0, r4
 801417e:	f001 fb0f 	bl	80157a0 <_ZN5UtestC1Ev>
 8014182:	4623      	mov	r3, r4
}
 8014184:	4618      	mov	r0, r3
 8014186:	370c      	adds	r7, #12
 8014188:	46bd      	mov	sp, r7
 801418a:	bd90      	pop	{r4, r7, pc}
 801418c:	0802696c 	.word	0x0802696c

08014190 <_ZN10UtestShell11destroyTestEP5Utest>:

void UtestShell::destroyTest(Utest* test)
{
 8014190:	b580      	push	{r7, lr}
 8014192:	b082      	sub	sp, #8
 8014194:	af00      	add	r7, sp, #0
 8014196:	6078      	str	r0, [r7, #4]
 8014198:	6039      	str	r1, [r7, #0]
    delete test;
 801419a:	683b      	ldr	r3, [r7, #0]
 801419c:	2b00      	cmp	r3, #0
 801419e:	d004      	beq.n	80141aa <_ZN10UtestShell11destroyTestEP5Utest+0x1a>
 80141a0:	681a      	ldr	r2, [r3, #0]
 80141a2:	3204      	adds	r2, #4
 80141a4:	6812      	ldr	r2, [r2, #0]
 80141a6:	4618      	mov	r0, r3
 80141a8:	4790      	blx	r2
}
 80141aa:	bf00      	nop
 80141ac:	3708      	adds	r7, #8
 80141ae:	46bd      	mov	sp, r7
 80141b0:	bd80      	pop	{r7, pc}
	...

080141b4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult>:

void UtestShell::runOneTestInCurrentProcess(TestPlugin* plugin, TestResult& result)
{
 80141b4:	b580      	push	{r7, lr}
 80141b6:	b088      	sub	sp, #32
 80141b8:	af00      	add	r7, sp, #0
 80141ba:	60f8      	str	r0, [r7, #12]
 80141bc:	60b9      	str	r1, [r7, #8]
 80141be:	607a      	str	r2, [r7, #4]
    result.printVeryVerbose("\n-- before runAllPreTestAction: ");
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	333c      	adds	r3, #60	; 0x3c
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	4940      	ldr	r1, [pc, #256]	; (80142cc <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x118>)
 80141ca:	6878      	ldr	r0, [r7, #4]
 80141cc:	4798      	blx	r3
    plugin->runAllPreTestAction(*this, result);
 80141ce:	68bb      	ldr	r3, [r7, #8]
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	3314      	adds	r3, #20
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	687a      	ldr	r2, [r7, #4]
 80141d8:	68f9      	ldr	r1, [r7, #12]
 80141da:	68b8      	ldr	r0, [r7, #8]
 80141dc:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPreTestAction: ");
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	333c      	adds	r3, #60	; 0x3c
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	493a      	ldr	r1, [pc, #232]	; (80142d0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x11c>)
 80141e8:	6878      	ldr	r0, [r7, #4]
 80141ea:	4798      	blx	r3

    //save test context, so that test class can be tested
    UtestShell* savedTest = UtestShell::getCurrent();
 80141ec:	f001 faae 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 80141f0:	61f8      	str	r0, [r7, #28]
    TestResult* savedResult = UtestShell::getTestResult();
 80141f2:	68f8      	ldr	r0, [r7, #12]
 80141f4:	f001 fa90 	bl	8015718 <_ZN10UtestShell13getTestResultEv>
 80141f8:	61b8      	str	r0, [r7, #24]

    UtestShell::setTestResult(&result);
 80141fa:	6879      	ldr	r1, [r7, #4]
 80141fc:	68f8      	ldr	r0, [r7, #12]
 80141fe:	f001 fa6b 	bl	80156d8 <_ZN10UtestShell13setTestResultEP10TestResult>
    UtestShell::setCurrentTest(this);
 8014202:	68f9      	ldr	r1, [r7, #12]
 8014204:	68f8      	ldr	r0, [r7, #12]
 8014206:	f001 fa77 	bl	80156f8 <_ZN10UtestShell14setCurrentTestEPS_>

    result.printVeryVerbose("\n---- before createTest: ");
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	333c      	adds	r3, #60	; 0x3c
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	4930      	ldr	r1, [pc, #192]	; (80142d4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x120>)
 8014214:	6878      	ldr	r0, [r7, #4]
 8014216:	4798      	blx	r3
    Utest* testToRun = createTest();
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	3388      	adds	r3, #136	; 0x88
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	68f8      	ldr	r0, [r7, #12]
 8014222:	4798      	blx	r3
 8014224:	6178      	str	r0, [r7, #20]
    result.printVeryVerbose("\n---- after createTest: ");
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	333c      	adds	r3, #60	; 0x3c
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	492a      	ldr	r1, [pc, #168]	; (80142d8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x124>)
 8014230:	6878      	ldr	r0, [r7, #4]
 8014232:	4798      	blx	r3

    result.printVeryVerbose("\n------ before runTest: ");
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	333c      	adds	r3, #60	; 0x3c
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	4927      	ldr	r1, [pc, #156]	; (80142dc <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x128>)
 801423e:	6878      	ldr	r0, [r7, #4]
 8014240:	4798      	blx	r3
    testToRun->run();
 8014242:	697b      	ldr	r3, [r7, #20]
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	3308      	adds	r3, #8
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	6978      	ldr	r0, [r7, #20]
 801424c:	4798      	blx	r3
    result.printVeryVerbose("\n------ after runTest: ");
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	333c      	adds	r3, #60	; 0x3c
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	4922      	ldr	r1, [pc, #136]	; (80142e0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x12c>)
 8014258:	6878      	ldr	r0, [r7, #4]
 801425a:	4798      	blx	r3

    UtestShell::setCurrentTest(savedTest);
 801425c:	69f9      	ldr	r1, [r7, #28]
 801425e:	68f8      	ldr	r0, [r7, #12]
 8014260:	f001 fa4a 	bl	80156f8 <_ZN10UtestShell14setCurrentTestEPS_>
    UtestShell::setTestResult(savedResult);
 8014264:	69b9      	ldr	r1, [r7, #24]
 8014266:	68f8      	ldr	r0, [r7, #12]
 8014268:	f001 fa36 	bl	80156d8 <_ZN10UtestShell13setTestResultEP10TestResult>

    result.printVeryVerbose("\n---- before destroyTest: ");
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	333c      	adds	r3, #60	; 0x3c
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	491b      	ldr	r1, [pc, #108]	; (80142e4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x130>)
 8014276:	6878      	ldr	r0, [r7, #4]
 8014278:	4798      	blx	r3
    destroyTest(testToRun);
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	338c      	adds	r3, #140	; 0x8c
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	6979      	ldr	r1, [r7, #20]
 8014284:	68f8      	ldr	r0, [r7, #12]
 8014286:	4798      	blx	r3
    result.printVeryVerbose("\n---- after destroyTest: ");
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	333c      	adds	r3, #60	; 0x3c
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	4915      	ldr	r1, [pc, #84]	; (80142e8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x134>)
 8014292:	6878      	ldr	r0, [r7, #4]
 8014294:	4798      	blx	r3

    result.printVeryVerbose("\n-- before runAllPostTestAction: ");
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	333c      	adds	r3, #60	; 0x3c
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	4913      	ldr	r1, [pc, #76]	; (80142ec <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x138>)
 80142a0:	6878      	ldr	r0, [r7, #4]
 80142a2:	4798      	blx	r3
    plugin->runAllPostTestAction(*this, result);
 80142a4:	68bb      	ldr	r3, [r7, #8]
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	3318      	adds	r3, #24
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	687a      	ldr	r2, [r7, #4]
 80142ae:	68f9      	ldr	r1, [r7, #12]
 80142b0:	68b8      	ldr	r0, [r7, #8]
 80142b2:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPostTestAction: ");
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	333c      	adds	r3, #60	; 0x3c
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	490c      	ldr	r1, [pc, #48]	; (80142f0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x13c>)
 80142be:	6878      	ldr	r0, [r7, #4]
 80142c0:	4798      	blx	r3
}
 80142c2:	bf00      	nop
 80142c4:	3720      	adds	r7, #32
 80142c6:	46bd      	mov	sp, r7
 80142c8:	bd80      	pop	{r7, pc}
 80142ca:	bf00      	nop
 80142cc:	08026980 	.word	0x08026980
 80142d0:	080269a4 	.word	0x080269a4
 80142d4:	080269c4 	.word	0x080269c4
 80142d8:	080269e0 	.word	0x080269e0
 80142dc:	080269fc 	.word	0x080269fc
 80142e0:	08026a18 	.word	0x08026a18
 80142e4:	08026a30 	.word	0x08026a30
 80142e8:	08026a4c 	.word	0x08026a4c
 80142ec:	08026a68 	.word	0x08026a68
 80142f0:	08026a8c 	.word	0x08026a8c

080142f4 <_ZNK10UtestShell7getNextEv>:

UtestShell *UtestShell::getNext() const
{
 80142f4:	b480      	push	{r7}
 80142f6:	b083      	sub	sp, #12
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	6078      	str	r0, [r7, #4]
    return next_;
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	695b      	ldr	r3, [r3, #20]
}
 8014300:	4618      	mov	r0, r3
 8014302:	370c      	adds	r7, #12
 8014304:	46bd      	mov	sp, r7
 8014306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801430a:	4770      	bx	lr

0801430c <_ZN10UtestShell7addTestEPS_>:

UtestShell* UtestShell::addTest(UtestShell *test)
{
 801430c:	b480      	push	{r7}
 801430e:	b083      	sub	sp, #12
 8014310:	af00      	add	r7, sp, #0
 8014312:	6078      	str	r0, [r7, #4]
 8014314:	6039      	str	r1, [r7, #0]
    next_ = test;
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	683a      	ldr	r2, [r7, #0]
 801431a:	615a      	str	r2, [r3, #20]
    return this;
 801431c:	687b      	ldr	r3, [r7, #4]
}
 801431e:	4618      	mov	r0, r3
 8014320:	370c      	adds	r7, #12
 8014322:	46bd      	mov	sp, r7
 8014324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014328:	4770      	bx	lr

0801432a <_ZN10UtestShell10countTestsEv>:

size_t UtestShell::countTests()
{
 801432a:	b580      	push	{r7, lr}
 801432c:	b082      	sub	sp, #8
 801432e:	af00      	add	r7, sp, #0
 8014330:	6078      	str	r0, [r7, #4]
    return next_ ? next_->countTests() + 1 : 1;
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	695b      	ldr	r3, [r3, #20]
 8014336:	2b00      	cmp	r3, #0
 8014338:	d00b      	beq.n	8014352 <_ZN10UtestShell10countTestsEv+0x28>
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	695a      	ldr	r2, [r3, #20]
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	695b      	ldr	r3, [r3, #20]
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	3310      	adds	r3, #16
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	4610      	mov	r0, r2
 801434a:	4798      	blx	r3
 801434c:	4603      	mov	r3, r0
 801434e:	3301      	adds	r3, #1
 8014350:	e000      	b.n	8014354 <_ZN10UtestShell10countTestsEv+0x2a>
 8014352:	2301      	movs	r3, #1
}
 8014354:	4618      	mov	r0, r3
 8014356:	3708      	adds	r7, #8
 8014358:	46bd      	mov	sp, r7
 801435a:	bd80      	pop	{r7, pc}

0801435c <_ZNK10UtestShell12getMacroNameEv>:

SimpleString UtestShell::getMacroName() const
{
 801435c:	b580      	push	{r7, lr}
 801435e:	b082      	sub	sp, #8
 8014360:	af00      	add	r7, sp, #0
 8014362:	6078      	str	r0, [r7, #4]
 8014364:	6039      	str	r1, [r7, #0]
    return "TEST";
 8014366:	4904      	ldr	r1, [pc, #16]	; (8014378 <_ZNK10UtestShell12getMacroNameEv+0x1c>)
 8014368:	6878      	ldr	r0, [r7, #4]
 801436a:	f7f9 fe0c 	bl	800df86 <_ZN12SimpleStringC1EPKc>
}
 801436e:	6878      	ldr	r0, [r7, #4]
 8014370:	3708      	adds	r7, #8
 8014372:	46bd      	mov	sp, r7
 8014374:	bd80      	pop	{r7, pc}
 8014376:	bf00      	nop
 8014378:	08026ab0 	.word	0x08026ab0

0801437c <_ZNK10UtestShell7getNameEv>:

const SimpleString UtestShell::getName() const
{
 801437c:	b580      	push	{r7, lr}
 801437e:	b082      	sub	sp, #8
 8014380:	af00      	add	r7, sp, #0
 8014382:	6078      	str	r0, [r7, #4]
 8014384:	6039      	str	r1, [r7, #0]
    return SimpleString(name_);
 8014386:	683b      	ldr	r3, [r7, #0]
 8014388:	689b      	ldr	r3, [r3, #8]
 801438a:	4619      	mov	r1, r3
 801438c:	6878      	ldr	r0, [r7, #4]
 801438e:	f7f9 fdfa 	bl	800df86 <_ZN12SimpleStringC1EPKc>
}
 8014392:	6878      	ldr	r0, [r7, #4]
 8014394:	3708      	adds	r7, #8
 8014396:	46bd      	mov	sp, r7
 8014398:	bd80      	pop	{r7, pc}

0801439a <_ZNK10UtestShell8getGroupEv>:

const SimpleString UtestShell::getGroup() const
{
 801439a:	b580      	push	{r7, lr}
 801439c:	b082      	sub	sp, #8
 801439e:	af00      	add	r7, sp, #0
 80143a0:	6078      	str	r0, [r7, #4]
 80143a2:	6039      	str	r1, [r7, #0]
    return SimpleString(group_);
 80143a4:	683b      	ldr	r3, [r7, #0]
 80143a6:	685b      	ldr	r3, [r3, #4]
 80143a8:	4619      	mov	r1, r3
 80143aa:	6878      	ldr	r0, [r7, #4]
 80143ac:	f7f9 fdeb 	bl	800df86 <_ZN12SimpleStringC1EPKc>
}
 80143b0:	6878      	ldr	r0, [r7, #4]
 80143b2:	3708      	adds	r7, #8
 80143b4:	46bd      	mov	sp, r7
 80143b6:	bd80      	pop	{r7, pc}

080143b8 <_ZNK10UtestShell16getFormattedNameEv>:

SimpleString UtestShell::getFormattedName() const
{
 80143b8:	b580      	push	{r7, lr}
 80143ba:	b082      	sub	sp, #8
 80143bc:	af00      	add	r7, sp, #0
 80143be:	6078      	str	r0, [r7, #4]
 80143c0:	6039      	str	r1, [r7, #0]
    SimpleString formattedName(getMacroName());
 80143c2:	683b      	ldr	r3, [r7, #0]
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	33a0      	adds	r3, #160	; 0xa0
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	687a      	ldr	r2, [r7, #4]
 80143cc:	6839      	ldr	r1, [r7, #0]
 80143ce:	4610      	mov	r0, r2
 80143d0:	4798      	blx	r3
    formattedName += "(";
 80143d2:	490e      	ldr	r1, [pc, #56]	; (801440c <_ZNK10UtestShell16getFormattedNameEv+0x54>)
 80143d4:	6878      	ldr	r0, [r7, #4]
 80143d6:	f7fa fa1d 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    formattedName += group_;
 80143da:	683b      	ldr	r3, [r7, #0]
 80143dc:	685b      	ldr	r3, [r3, #4]
 80143de:	4619      	mov	r1, r3
 80143e0:	6878      	ldr	r0, [r7, #4]
 80143e2:	f7fa fa17 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    formattedName += ", ";
 80143e6:	490a      	ldr	r1, [pc, #40]	; (8014410 <_ZNK10UtestShell16getFormattedNameEv+0x58>)
 80143e8:	6878      	ldr	r0, [r7, #4]
 80143ea:	f7fa fa13 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    formattedName += name_;
 80143ee:	683b      	ldr	r3, [r7, #0]
 80143f0:	689b      	ldr	r3, [r3, #8]
 80143f2:	4619      	mov	r1, r3
 80143f4:	6878      	ldr	r0, [r7, #4]
 80143f6:	f7fa fa0d 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    formattedName += ")";
 80143fa:	4906      	ldr	r1, [pc, #24]	; (8014414 <_ZNK10UtestShell16getFormattedNameEv+0x5c>)
 80143fc:	6878      	ldr	r0, [r7, #4]
 80143fe:	f7fa fa09 	bl	800e814 <_ZN12SimpleStringpLEPKc>

    return formattedName;
 8014402:	bf00      	nop
}
 8014404:	6878      	ldr	r0, [r7, #4]
 8014406:	3708      	adds	r7, #8
 8014408:	46bd      	mov	sp, r7
 801440a:	bd80      	pop	{r7, pc}
 801440c:	08026ab8 	.word	0x08026ab8
 8014410:	08026abc 	.word	0x08026abc
 8014414:	08026ac0 	.word	0x08026ac0

08014418 <_ZNK10UtestShell9hasFailedEv>:

bool UtestShell::hasFailed() const
{
 8014418:	b480      	push	{r7}
 801441a:	b083      	sub	sp, #12
 801441c:	af00      	add	r7, sp, #0
 801441e:	6078      	str	r0, [r7, #4]
    return hasFailed_;
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	7e5b      	ldrb	r3, [r3, #25]
}
 8014424:	4618      	mov	r0, r3
 8014426:	370c      	adds	r7, #12
 8014428:	46bd      	mov	sp, r7
 801442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801442e:	4770      	bx	lr

08014430 <_ZN10UtestShell10countCheckEv>:

void UtestShell::countCheck()
{
 8014430:	b580      	push	{r7, lr}
 8014432:	b082      	sub	sp, #8
 8014434:	af00      	add	r7, sp, #0
 8014436:	6078      	str	r0, [r7, #4]
    getTestResult()->countCheck();
 8014438:	6878      	ldr	r0, [r7, #4]
 801443a:	f001 f96d 	bl	8015718 <_ZN10UtestShell13getTestResultEv>
 801443e:	4603      	mov	r3, r0
 8014440:	681a      	ldr	r2, [r3, #0]
 8014442:	3228      	adds	r2, #40	; 0x28
 8014444:	6812      	ldr	r2, [r2, #0]
 8014446:	4618      	mov	r0, r3
 8014448:	4790      	blx	r2
}
 801444a:	bf00      	nop
 801444c:	3708      	adds	r7, #8
 801444e:	46bd      	mov	sp, r7
 8014450:	bd80      	pop	{r7, pc}

08014452 <_ZNK10UtestShell7willRunEv>:

bool UtestShell::willRun() const
{
 8014452:	b480      	push	{r7}
 8014454:	b083      	sub	sp, #12
 8014456:	af00      	add	r7, sp, #0
 8014458:	6078      	str	r0, [r7, #4]
    return true;
 801445a:	2301      	movs	r3, #1
}
 801445c:	4618      	mov	r0, r3
 801445e:	370c      	adds	r7, #12
 8014460:	46bd      	mov	sp, r7
 8014462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014466:	4770      	bx	lr

08014468 <_ZNK10UtestShell22isRunInSeperateProcessEv>:

bool UtestShell::isRunInSeperateProcess() const
{
 8014468:	b480      	push	{r7}
 801446a:	b083      	sub	sp, #12
 801446c:	af00      	add	r7, sp, #0
 801446e:	6078      	str	r0, [r7, #4]
    return isRunAsSeperateProcess_;
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	7e1b      	ldrb	r3, [r3, #24]
}
 8014474:	4618      	mov	r0, r3
 8014476:	370c      	adds	r7, #12
 8014478:	46bd      	mov	sp, r7
 801447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801447e:	4770      	bx	lr

08014480 <_ZN10UtestShell23setRunInSeperateProcessEv>:

void UtestShell::setRunInSeperateProcess()
{
 8014480:	b480      	push	{r7}
 8014482:	b083      	sub	sp, #12
 8014484:	af00      	add	r7, sp, #0
 8014486:	6078      	str	r0, [r7, #4]
    isRunAsSeperateProcess_ = true;
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	2201      	movs	r2, #1
 801448c:	761a      	strb	r2, [r3, #24]
}
 801448e:	bf00      	nop
 8014490:	370c      	adds	r7, #12
 8014492:	46bd      	mov	sp, r7
 8014494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014498:	4770      	bx	lr

0801449a <_ZN10UtestShell13setRunIgnoredEv>:


void UtestShell::setRunIgnored()
{
 801449a:	b480      	push	{r7}
 801449c:	b083      	sub	sp, #12
 801449e:	af00      	add	r7, sp, #0
 80144a0:	6078      	str	r0, [r7, #4]

}
 80144a2:	bf00      	nop
 80144a4:	370c      	adds	r7, #12
 80144a6:	46bd      	mov	sp, r7
 80144a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ac:	4770      	bx	lr

080144ae <_ZN10UtestShell11setFileNameEPKc>:

void UtestShell::setFileName(const char* fileName)
{
 80144ae:	b480      	push	{r7}
 80144b0:	b083      	sub	sp, #12
 80144b2:	af00      	add	r7, sp, #0
 80144b4:	6078      	str	r0, [r7, #4]
 80144b6:	6039      	str	r1, [r7, #0]
    file_ = fileName;
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	683a      	ldr	r2, [r7, #0]
 80144bc:	60da      	str	r2, [r3, #12]
}
 80144be:	bf00      	nop
 80144c0:	370c      	adds	r7, #12
 80144c2:	46bd      	mov	sp, r7
 80144c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144c8:	4770      	bx	lr

080144ca <_ZN10UtestShell13setLineNumberEj>:

void UtestShell::setLineNumber(size_t lineNumber)
{
 80144ca:	b480      	push	{r7}
 80144cc:	b083      	sub	sp, #12
 80144ce:	af00      	add	r7, sp, #0
 80144d0:	6078      	str	r0, [r7, #4]
 80144d2:	6039      	str	r1, [r7, #0]
    lineNumber_ = lineNumber;
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	683a      	ldr	r2, [r7, #0]
 80144d8:	611a      	str	r2, [r3, #16]
}
 80144da:	bf00      	nop
 80144dc:	370c      	adds	r7, #12
 80144de:	46bd      	mov	sp, r7
 80144e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e4:	4770      	bx	lr

080144e6 <_ZN10UtestShell12setGroupNameEPKc>:

void UtestShell::setGroupName(const char* groupName)
{
 80144e6:	b480      	push	{r7}
 80144e8:	b083      	sub	sp, #12
 80144ea:	af00      	add	r7, sp, #0
 80144ec:	6078      	str	r0, [r7, #4]
 80144ee:	6039      	str	r1, [r7, #0]
    group_ = groupName;
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	683a      	ldr	r2, [r7, #0]
 80144f4:	605a      	str	r2, [r3, #4]
}
 80144f6:	bf00      	nop
 80144f8:	370c      	adds	r7, #12
 80144fa:	46bd      	mov	sp, r7
 80144fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014500:	4770      	bx	lr

08014502 <_ZN10UtestShell11setTestNameEPKc>:

void UtestShell::setTestName(const char* testName)
{
 8014502:	b480      	push	{r7}
 8014504:	b083      	sub	sp, #12
 8014506:	af00      	add	r7, sp, #0
 8014508:	6078      	str	r0, [r7, #4]
 801450a:	6039      	str	r1, [r7, #0]
    name_ = testName;
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	683a      	ldr	r2, [r7, #0]
 8014510:	609a      	str	r2, [r3, #8]
}
 8014512:	bf00      	nop
 8014514:	370c      	adds	r7, #12
 8014516:	46bd      	mov	sp, r7
 8014518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801451c:	4770      	bx	lr

0801451e <_ZNK10UtestShell7getFileEv>:

const SimpleString UtestShell::getFile() const
{
 801451e:	b580      	push	{r7, lr}
 8014520:	b082      	sub	sp, #8
 8014522:	af00      	add	r7, sp, #0
 8014524:	6078      	str	r0, [r7, #4]
 8014526:	6039      	str	r1, [r7, #0]
    return SimpleString(file_);
 8014528:	683b      	ldr	r3, [r7, #0]
 801452a:	68db      	ldr	r3, [r3, #12]
 801452c:	4619      	mov	r1, r3
 801452e:	6878      	ldr	r0, [r7, #4]
 8014530:	f7f9 fd29 	bl	800df86 <_ZN12SimpleStringC1EPKc>
}
 8014534:	6878      	ldr	r0, [r7, #4]
 8014536:	3708      	adds	r7, #8
 8014538:	46bd      	mov	sp, r7
 801453a:	bd80      	pop	{r7, pc}

0801453c <_ZNK10UtestShell13getLineNumberEv>:

size_t UtestShell::getLineNumber() const
{
 801453c:	b480      	push	{r7}
 801453e:	b083      	sub	sp, #12
 8014540:	af00      	add	r7, sp, #0
 8014542:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	691b      	ldr	r3, [r3, #16]
}
 8014548:	4618      	mov	r0, r3
 801454a:	370c      	adds	r7, #12
 801454c:	46bd      	mov	sp, r7
 801454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014552:	4770      	bx	lr

08014554 <_ZNK10UtestShell5matchEPKcPK10TestFilter>:

bool UtestShell::match(const char* target, const TestFilter* filters) const
{
 8014554:	b590      	push	{r4, r7, lr}
 8014556:	b087      	sub	sp, #28
 8014558:	af00      	add	r7, sp, #0
 801455a:	60f8      	str	r0, [r7, #12]
 801455c:	60b9      	str	r1, [r7, #8]
 801455e:	607a      	str	r2, [r7, #4]
    if(filters == NULLPTR) return true;
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	2b00      	cmp	r3, #0
 8014564:	d101      	bne.n	801456a <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>
 8014566:	2301      	movs	r3, #1
 8014568:	e01f      	b.n	80145aa <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>

    for(; filters != NULLPTR; filters = filters->getNext())
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	2b00      	cmp	r3, #0
 801456e:	d01b      	beq.n	80145a8 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x54>
        if(filters->match(target)) return true;
 8014570:	f107 0310 	add.w	r3, r7, #16
 8014574:	68b9      	ldr	r1, [r7, #8]
 8014576:	4618      	mov	r0, r3
 8014578:	f7f9 fd05 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801457c:	f107 0310 	add.w	r3, r7, #16
 8014580:	4619      	mov	r1, r3
 8014582:	6878      	ldr	r0, [r7, #4]
 8014584:	f00c fb93 	bl	8020cae <_ZNK10TestFilter5matchERK12SimpleString>
 8014588:	4603      	mov	r3, r0
 801458a:	461c      	mov	r4, r3
 801458c:	f107 0310 	add.w	r3, r7, #16
 8014590:	4618      	mov	r0, r3
 8014592:	f7fa f8b0 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8014596:	2c00      	cmp	r4, #0
 8014598:	d001      	beq.n	801459e <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x4a>
 801459a:	2301      	movs	r3, #1
 801459c:	e005      	b.n	80145aa <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>
    for(; filters != NULLPTR; filters = filters->getNext())
 801459e:	6878      	ldr	r0, [r7, #4]
 80145a0:	f00c fb5f 	bl	8020c62 <_ZNK10TestFilter7getNextEv>
 80145a4:	6078      	str	r0, [r7, #4]
 80145a6:	e7e0      	b.n	801456a <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>

    return false;
 80145a8:	2300      	movs	r3, #0
}
 80145aa:	4618      	mov	r0, r3
 80145ac:	371c      	adds	r7, #28
 80145ae:	46bd      	mov	sp, r7
 80145b0:	bd90      	pop	{r4, r7, pc}

080145b2 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>:

bool UtestShell::shouldRun(const TestFilter* groupFilters, const TestFilter* nameFilters) const
{
 80145b2:	b580      	push	{r7, lr}
 80145b4:	b084      	sub	sp, #16
 80145b6:	af00      	add	r7, sp, #0
 80145b8:	60f8      	str	r0, [r7, #12]
 80145ba:	60b9      	str	r1, [r7, #8]
 80145bc:	607a      	str	r2, [r7, #4]
    return match(group_, groupFilters) && match(name_, nameFilters);
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	685b      	ldr	r3, [r3, #4]
 80145c2:	68ba      	ldr	r2, [r7, #8]
 80145c4:	4619      	mov	r1, r3
 80145c6:	68f8      	ldr	r0, [r7, #12]
 80145c8:	f7ff ffc4 	bl	8014554 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 80145cc:	4603      	mov	r3, r0
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d00b      	beq.n	80145ea <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	689b      	ldr	r3, [r3, #8]
 80145d6:	687a      	ldr	r2, [r7, #4]
 80145d8:	4619      	mov	r1, r3
 80145da:	68f8      	ldr	r0, [r7, #12]
 80145dc:	f7ff ffba 	bl	8014554 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 80145e0:	4603      	mov	r3, r0
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d001      	beq.n	80145ea <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 80145e6:	2301      	movs	r3, #1
 80145e8:	e000      	b.n	80145ec <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x3a>
 80145ea:	2300      	movs	r3, #0
}
 80145ec:	4618      	mov	r0, r3
 80145ee:	3710      	adds	r7, #16
 80145f0:	46bd      	mov	sp, r7
 80145f2:	bd80      	pop	{r7, pc}

080145f4 <_ZN10UtestShell8failWithERK11TestFailure>:

void UtestShell::failWith(const TestFailure& failure)
{
 80145f4:	b590      	push	{r4, r7, lr}
 80145f6:	b083      	sub	sp, #12
 80145f8:	af00      	add	r7, sp, #0
 80145fa:	6078      	str	r0, [r7, #4]
 80145fc:	6039      	str	r1, [r7, #0]
    failWith(failure, getCurrentTestTerminator());
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	339c      	adds	r3, #156	; 0x9c
 8014604:	681c      	ldr	r4, [r3, #0]
 8014606:	f001 f8b1 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801460a:	4603      	mov	r3, r0
 801460c:	461a      	mov	r2, r3
 801460e:	6839      	ldr	r1, [r7, #0]
 8014610:	6878      	ldr	r0, [r7, #4]
 8014612:	47a0      	blx	r4
} // LCOV_EXCL_LINE
 8014614:	bf00      	nop
 8014616:	370c      	adds	r7, #12
 8014618:	46bd      	mov	sp, r7
 801461a:	bd90      	pop	{r4, r7, pc}

0801461c <_ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator>:

void UtestShell::failWith(const TestFailure& failure, const TestTerminator& terminator)
{
 801461c:	b580      	push	{r7, lr}
 801461e:	b084      	sub	sp, #16
 8014620:	af00      	add	r7, sp, #0
 8014622:	60f8      	str	r0, [r7, #12]
 8014624:	60b9      	str	r1, [r7, #8]
 8014626:	607a      	str	r2, [r7, #4]
    hasFailed_ = true;
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	2201      	movs	r2, #1
 801462c:	765a      	strb	r2, [r3, #25]
    getTestResult()->addFailure(failure);
 801462e:	68f8      	ldr	r0, [r7, #12]
 8014630:	f001 f872 	bl	8015718 <_ZN10UtestShell13getTestResultEv>
 8014634:	4603      	mov	r3, r0
 8014636:	681a      	ldr	r2, [r3, #0]
 8014638:	3234      	adds	r2, #52	; 0x34
 801463a:	6812      	ldr	r2, [r2, #0]
 801463c:	68b9      	ldr	r1, [r7, #8]
 801463e:	4618      	mov	r0, r3
 8014640:	4790      	blx	r2
    terminator.exitCurrentTest();
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	681b      	ldr	r3, [r3, #0]
 8014648:	6878      	ldr	r0, [r7, #4]
 801464a:	4798      	blx	r3
} // LCOV_EXCL_LINE
 801464c:	bf00      	nop
 801464e:	3710      	adds	r7, #16
 8014650:	46bd      	mov	sp, r7
 8014652:	bd80      	pop	{r7, pc}

08014654 <_ZN10UtestShell8exitTestERK14TestTerminator>:

void UtestShell::exitTest(const TestTerminator& terminator)
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b082      	sub	sp, #8
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]
 801465c:	6039      	str	r1, [r7, #0]
    terminator.exitCurrentTest();
 801465e:	683b      	ldr	r3, [r7, #0]
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	6838      	ldr	r0, [r7, #0]
 8014666:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8014668:	bf00      	nop
 801466a:	3708      	adds	r7, #8
 801466c:	46bd      	mov	sp, r7
 801466e:	bd80      	pop	{r7, pc}

08014670 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertTrue(bool condition, const char *checkString, const char *conditionString, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8014670:	b590      	push	{r4, r7, lr}
 8014672:	b09d      	sub	sp, #116	; 0x74
 8014674:	af04      	add	r7, sp, #16
 8014676:	60f8      	str	r0, [r7, #12]
 8014678:	607a      	str	r2, [r7, #4]
 801467a:	603b      	str	r3, [r7, #0]
 801467c:	460b      	mov	r3, r1
 801467e:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8014680:	68f8      	ldr	r0, [r7, #12]
 8014682:	f001 f849 	bl	8015718 <_ZN10UtestShell13getTestResultEv>
 8014686:	4603      	mov	r3, r0
 8014688:	681a      	ldr	r2, [r3, #0]
 801468a:	3228      	adds	r2, #40	; 0x28
 801468c:	6812      	ldr	r2, [r2, #0]
 801468e:	4618      	mov	r0, r3
 8014690:	4790      	blx	r2
    if (!condition)
 8014692:	7afb      	ldrb	r3, [r7, #11]
 8014694:	f083 0301 	eor.w	r3, r3, #1
 8014698:	b2db      	uxtb	r3, r3
 801469a:	2b00      	cmp	r3, #0
 801469c:	d03f      	beq.n	801471e <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(CheckFailure(this, fileName, lineNumber, checkString, conditionString, text), testTerminator);
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	339c      	adds	r3, #156	; 0x9c
 80146a4:	681c      	ldr	r4, [r3, #0]
 80146a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80146aa:	6879      	ldr	r1, [r7, #4]
 80146ac:	4618      	mov	r0, r3
 80146ae:	f7f9 fc6a 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80146b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80146b6:	6839      	ldr	r1, [r7, #0]
 80146b8:	4618      	mov	r0, r3
 80146ba:	f7f9 fc64 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80146be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80146c2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80146c4:	4618      	mov	r0, r3
 80146c6:	f7f9 fc5e 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80146ca:	f107 0014 	add.w	r0, r7, #20
 80146ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80146d2:	9302      	str	r3, [sp, #8]
 80146d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80146d8:	9301      	str	r3, [sp, #4]
 80146da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80146de:	9300      	str	r3, [sp, #0]
 80146e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80146e2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80146e4:	68f9      	ldr	r1, [r7, #12]
 80146e6:	f7fb ff6b 	bl	80105c0 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80146ea:	f107 0314 	add.w	r3, r7, #20
 80146ee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80146f0:	4619      	mov	r1, r3
 80146f2:	68f8      	ldr	r0, [r7, #12]
 80146f4:	47a0      	blx	r4
 80146f6:	f107 0314 	add.w	r3, r7, #20
 80146fa:	4618      	mov	r0, r3
 80146fc:	f7fc fdce 	bl	801129c <_ZN12CheckFailureD1Ev>
 8014700:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014704:	4618      	mov	r0, r3
 8014706:	f7f9 fff6 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801470a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801470e:	4618      	mov	r0, r3
 8014710:	f7f9 fff1 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8014714:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014718:	4618      	mov	r0, r3
 801471a:	f7f9 ffec 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 801471e:	bf00      	nop
 8014720:	3764      	adds	r7, #100	; 0x64
 8014722:	46bd      	mov	sp, r7
 8014724:	bd90      	pop	{r4, r7, pc}

08014726 <_ZN10UtestShell4failEPKcS1_jRK14TestTerminator>:

void UtestShell::fail(const char *text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8014726:	b590      	push	{r4, r7, lr}
 8014728:	b097      	sub	sp, #92	; 0x5c
 801472a:	af02      	add	r7, sp, #8
 801472c:	60f8      	str	r0, [r7, #12]
 801472e:	60b9      	str	r1, [r7, #8]
 8014730:	607a      	str	r2, [r7, #4]
 8014732:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8014734:	68f8      	ldr	r0, [r7, #12]
 8014736:	f000 ffef 	bl	8015718 <_ZN10UtestShell13getTestResultEv>
 801473a:	4603      	mov	r3, r0
 801473c:	681a      	ldr	r2, [r3, #0]
 801473e:	3228      	adds	r2, #40	; 0x28
 8014740:	6812      	ldr	r2, [r2, #0]
 8014742:	4618      	mov	r0, r3
 8014744:	4790      	blx	r2
    failWith(FailFailure(this, fileName, lineNumber, text), testTerminator);
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	339c      	adds	r3, #156	; 0x9c
 801474c:	681c      	ldr	r4, [r3, #0]
 801474e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014752:	68b9      	ldr	r1, [r7, #8]
 8014754:	4618      	mov	r0, r3
 8014756:	f7f9 fc16 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801475a:	f107 0014 	add.w	r0, r7, #20
 801475e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014762:	9300      	str	r3, [sp, #0]
 8014764:	683b      	ldr	r3, [r7, #0]
 8014766:	687a      	ldr	r2, [r7, #4]
 8014768:	68f9      	ldr	r1, [r7, #12]
 801476a:	f7fb ff71 	bl	8010650 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 801476e:	f107 0314 	add.w	r3, r7, #20
 8014772:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014774:	4619      	mov	r1, r3
 8014776:	68f8      	ldr	r0, [r7, #12]
 8014778:	47a0      	blx	r4
 801477a:	f107 0314 	add.w	r3, r7, #20
 801477e:	4618      	mov	r0, r3
 8014780:	f7f7 fc16 	bl	800bfb0 <_ZN11FailFailureD1Ev>
 8014784:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014788:	4618      	mov	r0, r3
 801478a:	f7f9 ffb4 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
} // LCOV_EXCL_LINE
 801478e:	bf00      	nop
 8014790:	3754      	adds	r7, #84	; 0x54
 8014792:	46bd      	mov	sp, r7
 8014794:	bd90      	pop	{r4, r7, pc}

08014796 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8014796:	b590      	push	{r4, r7, lr}
 8014798:	b0a7      	sub	sp, #156	; 0x9c
 801479a:	af04      	add	r7, sp, #16
 801479c:	60f8      	str	r0, [r7, #12]
 801479e:	60b9      	str	r1, [r7, #8]
 80147a0:	607a      	str	r2, [r7, #4]
 80147a2:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80147a4:	68f8      	ldr	r0, [r7, #12]
 80147a6:	f000 ffb7 	bl	8015718 <_ZN10UtestShell13getTestResultEv>
 80147aa:	4603      	mov	r3, r0
 80147ac:	681a      	ldr	r2, [r3, #0]
 80147ae:	3228      	adds	r2, #40	; 0x28
 80147b0:	6812      	ldr	r2, [r2, #0]
 80147b2:	4618      	mov	r0, r3
 80147b4:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d102      	bne.n	80147c2 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x2c>
 80147bc:	68bb      	ldr	r3, [r7, #8]
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d068      	beq.n	8014894 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0xfe>
    if (actual == NULLPTR || expected == NULLPTR)
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d002      	beq.n	80147ce <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x38>
 80147c8:	68bb      	ldr	r3, [r7, #8]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d12a      	bne.n	8014824 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x8e>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	339c      	adds	r3, #156	; 0x9c
 80147d4:	681c      	ldr	r4, [r3, #0]
 80147d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80147da:	6839      	ldr	r1, [r7, #0]
 80147dc:	4618      	mov	r0, r3
 80147de:	f7f9 fbd2 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80147e2:	f107 0010 	add.w	r0, r7, #16
 80147e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80147ea:	9302      	str	r3, [sp, #8]
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	9301      	str	r3, [sp, #4]
 80147f0:	68bb      	ldr	r3, [r7, #8]
 80147f2:	9300      	str	r3, [sp, #0]
 80147f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80147f8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80147fc:	68f9      	ldr	r1, [r7, #12]
 80147fe:	f7fc f9ad 	bl	8010b5c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8014802:	f107 0310 	add.w	r3, r7, #16
 8014806:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801480a:	4619      	mov	r1, r3
 801480c:	68f8      	ldr	r0, [r7, #12]
 801480e:	47a0      	blx	r4
 8014810:	f107 0310 	add.w	r3, r7, #16
 8014814:	4618      	mov	r0, r3
 8014816:	f7fc fcb9 	bl	801118c <_ZN18StringEqualFailureD1Ev>
 801481a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801481e:	4618      	mov	r0, r3
 8014820:	f7f9 ff69 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrCmp(expected, actual) != 0)
 8014824:	6879      	ldr	r1, [r7, #4]
 8014826:	68b8      	ldr	r0, [r7, #8]
 8014828:	f7f9 f9ea 	bl	800dc00 <_ZN12SimpleString6StrCmpEPKcS1_>
 801482c:	4603      	mov	r3, r0
 801482e:	2b00      	cmp	r3, #0
 8014830:	bf14      	ite	ne
 8014832:	2301      	movne	r3, #1
 8014834:	2300      	moveq	r3, #0
 8014836:	b2db      	uxtb	r3, r3
 8014838:	2b00      	cmp	r3, #0
 801483a:	d02c      	beq.n	8014896 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	339c      	adds	r3, #156	; 0x9c
 8014842:	681c      	ldr	r4, [r3, #0]
 8014844:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014848:	6839      	ldr	r1, [r7, #0]
 801484a:	4618      	mov	r0, r3
 801484c:	f7f9 fb9b 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8014850:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8014854:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014858:	9302      	str	r3, [sp, #8]
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	9301      	str	r3, [sp, #4]
 801485e:	68bb      	ldr	r3, [r7, #8]
 8014860:	9300      	str	r3, [sp, #0]
 8014862:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014866:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801486a:	68f9      	ldr	r1, [r7, #12]
 801486c:	f7fc f976 	bl	8010b5c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8014870:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014874:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8014878:	4619      	mov	r1, r3
 801487a:	68f8      	ldr	r0, [r7, #12]
 801487c:	47a0      	blx	r4
 801487e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014882:	4618      	mov	r0, r3
 8014884:	f7fc fc82 	bl	801118c <_ZN18StringEqualFailureD1Ev>
 8014888:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801488c:	4618      	mov	r0, r3
 801488e:	f7f9 ff32 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8014892:	e000      	b.n	8014896 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8014894:	bf00      	nop
}
 8014896:	378c      	adds	r7, #140	; 0x8c
 8014898:	46bd      	mov	sp, r7
 801489a:	bd90      	pop	{r4, r7, pc}

0801489c <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrNEqual(const char* expected, const char* actual, size_t length, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801489c:	b590      	push	{r4, r7, lr}
 801489e:	b0a7      	sub	sp, #156	; 0x9c
 80148a0:	af04      	add	r7, sp, #16
 80148a2:	60f8      	str	r0, [r7, #12]
 80148a4:	60b9      	str	r1, [r7, #8]
 80148a6:	607a      	str	r2, [r7, #4]
 80148a8:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80148aa:	68f8      	ldr	r0, [r7, #12]
 80148ac:	f000 ff34 	bl	8015718 <_ZN10UtestShell13getTestResultEv>
 80148b0:	4603      	mov	r3, r0
 80148b2:	681a      	ldr	r2, [r3, #0]
 80148b4:	3228      	adds	r2, #40	; 0x28
 80148b6:	6812      	ldr	r2, [r2, #0]
 80148b8:	4618      	mov	r0, r3
 80148ba:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d102      	bne.n	80148c8 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x2c>
 80148c2:	68bb      	ldr	r3, [r7, #8]
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d06b      	beq.n	80149a0 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x104>
    if (actual == NULLPTR || expected == NULLPTR)
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d002      	beq.n	80148d4 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x38>
 80148ce:	68bb      	ldr	r3, [r7, #8]
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d12b      	bne.n	801492c <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x90>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	339c      	adds	r3, #156	; 0x9c
 80148da:	681c      	ldr	r4, [r3, #0]
 80148dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80148e0:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80148e4:	4618      	mov	r0, r3
 80148e6:	f7f9 fb4e 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80148ea:	f107 0010 	add.w	r0, r7, #16
 80148ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80148f2:	9302      	str	r3, [sp, #8]
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	9301      	str	r3, [sp, #4]
 80148f8:	68bb      	ldr	r3, [r7, #8]
 80148fa:	9300      	str	r3, [sp, #0]
 80148fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014900:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8014904:	68f9      	ldr	r1, [r7, #12]
 8014906:	f7fc f929 	bl	8010b5c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 801490a:	f107 0310 	add.w	r3, r7, #16
 801490e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8014912:	4619      	mov	r1, r3
 8014914:	68f8      	ldr	r0, [r7, #12]
 8014916:	47a0      	blx	r4
 8014918:	f107 0310 	add.w	r3, r7, #16
 801491c:	4618      	mov	r0, r3
 801491e:	f7fc fc35 	bl	801118c <_ZN18StringEqualFailureD1Ev>
 8014922:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014926:	4618      	mov	r0, r3
 8014928:	f7f9 fee5 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrNCmp(expected, actual, length) != 0)
 801492c:	683a      	ldr	r2, [r7, #0]
 801492e:	6879      	ldr	r1, [r7, #4]
 8014930:	68b8      	ldr	r0, [r7, #8]
 8014932:	f7f9 f9a4 	bl	800dc7e <_ZN12SimpleString7StrNCmpEPKcS1_j>
 8014936:	4603      	mov	r3, r0
 8014938:	2b00      	cmp	r3, #0
 801493a:	bf14      	ite	ne
 801493c:	2301      	movne	r3, #1
 801493e:	2300      	moveq	r3, #0
 8014940:	b2db      	uxtb	r3, r3
 8014942:	2b00      	cmp	r3, #0
 8014944:	d02d      	beq.n	80149a2 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	339c      	adds	r3, #156	; 0x9c
 801494c:	681c      	ldr	r4, [r3, #0]
 801494e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014952:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8014956:	4618      	mov	r0, r3
 8014958:	f7f9 fb15 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801495c:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8014960:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014964:	9302      	str	r3, [sp, #8]
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	9301      	str	r3, [sp, #4]
 801496a:	68bb      	ldr	r3, [r7, #8]
 801496c:	9300      	str	r3, [sp, #0]
 801496e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014972:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8014976:	68f9      	ldr	r1, [r7, #12]
 8014978:	f7fc f8f0 	bl	8010b5c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 801497c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014980:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8014984:	4619      	mov	r1, r3
 8014986:	68f8      	ldr	r0, [r7, #12]
 8014988:	47a0      	blx	r4
 801498a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801498e:	4618      	mov	r0, r3
 8014990:	f7fc fbfc 	bl	801118c <_ZN18StringEqualFailureD1Ev>
 8014994:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014998:	4618      	mov	r0, r3
 801499a:	f7f9 feac 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801499e:	e000      	b.n	80149a2 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80149a0:	bf00      	nop
}
 80149a2:	378c      	adds	r7, #140	; 0x8c
 80149a4:	46bd      	mov	sp, r7
 80149a6:	bd90      	pop	{r4, r7, pc}

080149a8 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 80149a8:	b590      	push	{r4, r7, lr}
 80149aa:	b0ab      	sub	sp, #172	; 0xac
 80149ac:	af04      	add	r7, sp, #16
 80149ae:	60f8      	str	r0, [r7, #12]
 80149b0:	60b9      	str	r1, [r7, #8]
 80149b2:	607a      	str	r2, [r7, #4]
 80149b4:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80149b6:	68f8      	ldr	r0, [r7, #12]
 80149b8:	f000 feae 	bl	8015718 <_ZN10UtestShell13getTestResultEv>
 80149bc:	4603      	mov	r3, r0
 80149be:	681a      	ldr	r2, [r3, #0]
 80149c0:	3228      	adds	r2, #40	; 0x28
 80149c2:	6812      	ldr	r2, [r2, #0]
 80149c4:	4618      	mov	r0, r3
 80149c6:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d102      	bne.n	80149d4 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x2c>
 80149ce:	68bb      	ldr	r3, [r7, #8]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d07c      	beq.n	8014ace <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x126>
    if (actual == NULLPTR || expected == NULLPTR)
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d002      	beq.n	80149e0 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x38>
 80149da:	68bb      	ldr	r3, [r7, #8]
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d128      	bne.n	8014a32 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x8a>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	3398      	adds	r3, #152	; 0x98
 80149e6:	681c      	ldr	r4, [r3, #0]
 80149e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80149ec:	6839      	ldr	r1, [r7, #0]
 80149ee:	4618      	mov	r0, r3
 80149f0:	f7f9 fac9 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80149f4:	f107 0010 	add.w	r0, r7, #16
 80149f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80149fc:	9302      	str	r3, [sp, #8]
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	9301      	str	r3, [sp, #4]
 8014a02:	68bb      	ldr	r3, [r7, #8]
 8014a04:	9300      	str	r3, [sp, #0]
 8014a06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014a0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8014a0e:	68f9      	ldr	r1, [r7, #12]
 8014a10:	f7fc f948 	bl	8010ca4 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8014a14:	f107 0310 	add.w	r3, r7, #16
 8014a18:	4619      	mov	r1, r3
 8014a1a:	68f8      	ldr	r0, [r7, #12]
 8014a1c:	47a0      	blx	r4
 8014a1e:	f107 0310 	add.w	r3, r7, #16
 8014a22:	4618      	mov	r0, r3
 8014a24:	f7fc fb90 	bl	8011148 <_ZN24StringEqualNoCaseFailureD1Ev>
 8014a28:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	f7f9 fe62 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(expected).equalsNoCase(actual))
 8014a32:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014a36:	68b9      	ldr	r1, [r7, #8]
 8014a38:	4618      	mov	r0, r3
 8014a3a:	f7f9 faa4 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8014a3e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014a42:	6879      	ldr	r1, [r7, #4]
 8014a44:	4618      	mov	r0, r3
 8014a46:	f7f9 fa9e 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8014a4a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8014a4e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014a52:	4611      	mov	r1, r2
 8014a54:	4618      	mov	r0, r3
 8014a56:	f7f9 fe75 	bl	800e744 <_ZNK12SimpleString12equalsNoCaseERKS_>
 8014a5a:	4603      	mov	r3, r0
 8014a5c:	f083 0301 	eor.w	r3, r3, #1
 8014a60:	b2dc      	uxtb	r4, r3
 8014a62:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014a66:	4618      	mov	r0, r3
 8014a68:	f7f9 fe45 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8014a6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014a70:	4618      	mov	r0, r3
 8014a72:	f7f9 fe40 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8014a76:	2c00      	cmp	r4, #0
 8014a78:	d02a      	beq.n	8014ad0 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	3398      	adds	r3, #152	; 0x98
 8014a80:	681c      	ldr	r4, [r3, #0]
 8014a82:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8014a86:	6839      	ldr	r1, [r7, #0]
 8014a88:	4618      	mov	r0, r3
 8014a8a:	f7f9 fa7c 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8014a8e:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8014a92:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8014a96:	9302      	str	r3, [sp, #8]
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	9301      	str	r3, [sp, #4]
 8014a9c:	68bb      	ldr	r3, [r7, #8]
 8014a9e:	9300      	str	r3, [sp, #0]
 8014aa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014aa4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8014aa8:	68f9      	ldr	r1, [r7, #12]
 8014aaa:	f7fc f8fb 	bl	8010ca4 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8014aae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014ab2:	4619      	mov	r1, r3
 8014ab4:	68f8      	ldr	r0, [r7, #12]
 8014ab6:	47a0      	blx	r4
 8014ab8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014abc:	4618      	mov	r0, r3
 8014abe:	f7fc fb43 	bl	8011148 <_ZN24StringEqualNoCaseFailureD1Ev>
 8014ac2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	f7f9 fe15 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8014acc:	e000      	b.n	8014ad0 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8014ace:	bf00      	nop
}
 8014ad0:	379c      	adds	r7, #156	; 0x9c
 8014ad2:	46bd      	mov	sp, r7
 8014ad4:	bd90      	pop	{r4, r7, pc}

08014ad6 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8014ad6:	b590      	push	{r4, r7, lr}
 8014ad8:	b0b3      	sub	sp, #204	; 0xcc
 8014ada:	af04      	add	r7, sp, #16
 8014adc:	60f8      	str	r0, [r7, #12]
 8014ade:	60b9      	str	r1, [r7, #8]
 8014ae0:	607a      	str	r2, [r7, #4]
 8014ae2:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8014ae4:	68f8      	ldr	r0, [r7, #12]
 8014ae6:	f000 fe17 	bl	8015718 <_ZN10UtestShell13getTestResultEv>
 8014aea:	4603      	mov	r3, r0
 8014aec:	681a      	ldr	r2, [r3, #0]
 8014aee:	3228      	adds	r2, #40	; 0x28
 8014af0:	6812      	ldr	r2, [r2, #0]
 8014af2:	4618      	mov	r0, r3
 8014af4:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d103      	bne.n	8014b04 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x2e>
 8014afc:	68bb      	ldr	r3, [r7, #8]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	f000 80ad 	beq.w	8014c5e <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d002      	beq.n	8014b10 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x3a>
 8014b0a:	68bb      	ldr	r3, [r7, #8]
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d140      	bne.n	8014b92 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	3398      	adds	r3, #152	; 0x98
 8014b16:	681c      	ldr	r4, [r3, #0]
 8014b18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014b1c:	68b9      	ldr	r1, [r7, #8]
 8014b1e:	4618      	mov	r0, r3
 8014b20:	f7f9 fa31 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8014b24:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014b28:	6879      	ldr	r1, [r7, #4]
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	f7f9 fa2b 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8014b30:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014b34:	6839      	ldr	r1, [r7, #0]
 8014b36:	4618      	mov	r0, r3
 8014b38:	f7f9 fa25 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8014b3c:	f107 0010 	add.w	r0, r7, #16
 8014b40:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014b44:	9302      	str	r3, [sp, #8]
 8014b46:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014b4a:	9301      	str	r3, [sp, #4]
 8014b4c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014b50:	9300      	str	r3, [sp, #0]
 8014b52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014b56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8014b5a:	68f9      	ldr	r1, [r7, #12]
 8014b5c:	f7fb fce6 	bl	801052c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8014b60:	f107 0310 	add.w	r3, r7, #16
 8014b64:	4619      	mov	r1, r3
 8014b66:	68f8      	ldr	r0, [r7, #12]
 8014b68:	47a0      	blx	r4
 8014b6a:	f107 0310 	add.w	r3, r7, #16
 8014b6e:	4618      	mov	r0, r3
 8014b70:	f7fc fbb6 	bl	80112e0 <_ZN15ContainsFailureD1Ev>
 8014b74:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014b78:	4618      	mov	r0, r3
 8014b7a:	f7f9 fdbc 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8014b7e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014b82:	4618      	mov	r0, r3
 8014b84:	f7f9 fdb7 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8014b88:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014b8c:	4618      	mov	r0, r3
 8014b8e:	f7f9 fdb2 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).contains(expected))
 8014b92:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014b96:	6879      	ldr	r1, [r7, #4]
 8014b98:	4618      	mov	r0, r3
 8014b9a:	f7f9 f9f4 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8014b9e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8014ba2:	68b9      	ldr	r1, [r7, #8]
 8014ba4:	4618      	mov	r0, r3
 8014ba6:	f7f9 f9ee 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8014baa:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8014bae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014bb2:	4611      	mov	r1, r2
 8014bb4:	4618      	mov	r0, r3
 8014bb6:	f7f9 fa64 	bl	800e082 <_ZNK12SimpleString8containsERKS_>
 8014bba:	4603      	mov	r3, r0
 8014bbc:	f083 0301 	eor.w	r3, r3, #1
 8014bc0:	b2dc      	uxtb	r4, r3
 8014bc2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8014bc6:	4618      	mov	r0, r3
 8014bc8:	f7f9 fd95 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8014bcc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014bd0:	4618      	mov	r0, r3
 8014bd2:	f7f9 fd90 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8014bd6:	2c00      	cmp	r4, #0
 8014bd8:	d042      	beq.n	8014c60 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	3398      	adds	r3, #152	; 0x98
 8014be0:	681c      	ldr	r4, [r3, #0]
 8014be2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8014be6:	68b9      	ldr	r1, [r7, #8]
 8014be8:	4618      	mov	r0, r3
 8014bea:	f7f9 f9cc 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8014bee:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8014bf2:	6879      	ldr	r1, [r7, #4]
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	f7f9 f9c6 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8014bfa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8014bfe:	6839      	ldr	r1, [r7, #0]
 8014c00:	4618      	mov	r0, r3
 8014c02:	f7f9 f9c0 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8014c06:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8014c0a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8014c0e:	9302      	str	r3, [sp, #8]
 8014c10:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8014c14:	9301      	str	r3, [sp, #4]
 8014c16:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8014c1a:	9300      	str	r3, [sp, #0]
 8014c1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014c20:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8014c24:	68f9      	ldr	r1, [r7, #12]
 8014c26:	f7fb fc81 	bl	801052c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8014c2a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8014c2e:	4619      	mov	r1, r3
 8014c30:	68f8      	ldr	r0, [r7, #12]
 8014c32:	47a0      	blx	r4
 8014c34:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8014c38:	4618      	mov	r0, r3
 8014c3a:	f7fc fb51 	bl	80112e0 <_ZN15ContainsFailureD1Ev>
 8014c3e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8014c42:	4618      	mov	r0, r3
 8014c44:	f7f9 fd57 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8014c48:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8014c4c:	4618      	mov	r0, r3
 8014c4e:	f7f9 fd52 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8014c52:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8014c56:	4618      	mov	r0, r3
 8014c58:	f7f9 fd4d 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8014c5c:	e000      	b.n	8014c60 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8014c5e:	bf00      	nop
}
 8014c60:	37bc      	adds	r7, #188	; 0xbc
 8014c62:	46bd      	mov	sp, r7
 8014c64:	bd90      	pop	{r4, r7, pc}

08014c66 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8014c66:	b590      	push	{r4, r7, lr}
 8014c68:	b0b3      	sub	sp, #204	; 0xcc
 8014c6a:	af04      	add	r7, sp, #16
 8014c6c:	60f8      	str	r0, [r7, #12]
 8014c6e:	60b9      	str	r1, [r7, #8]
 8014c70:	607a      	str	r2, [r7, #4]
 8014c72:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8014c74:	68f8      	ldr	r0, [r7, #12]
 8014c76:	f000 fd4f 	bl	8015718 <_ZN10UtestShell13getTestResultEv>
 8014c7a:	4603      	mov	r3, r0
 8014c7c:	681a      	ldr	r2, [r3, #0]
 8014c7e:	3228      	adds	r2, #40	; 0x28
 8014c80:	6812      	ldr	r2, [r2, #0]
 8014c82:	4618      	mov	r0, r3
 8014c84:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d103      	bne.n	8014c94 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x2e>
 8014c8c:	68bb      	ldr	r3, [r7, #8]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	f000 80ad 	beq.w	8014dee <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d002      	beq.n	8014ca0 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x3a>
 8014c9a:	68bb      	ldr	r3, [r7, #8]
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d140      	bne.n	8014d22 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	3398      	adds	r3, #152	; 0x98
 8014ca6:	681c      	ldr	r4, [r3, #0]
 8014ca8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014cac:	68b9      	ldr	r1, [r7, #8]
 8014cae:	4618      	mov	r0, r3
 8014cb0:	f7f9 f969 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8014cb4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014cb8:	6879      	ldr	r1, [r7, #4]
 8014cba:	4618      	mov	r0, r3
 8014cbc:	f7f9 f963 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8014cc0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014cc4:	6839      	ldr	r1, [r7, #0]
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	f7f9 f95d 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8014ccc:	f107 0010 	add.w	r0, r7, #16
 8014cd0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014cd4:	9302      	str	r3, [sp, #8]
 8014cd6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014cda:	9301      	str	r3, [sp, #4]
 8014cdc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014ce0:	9300      	str	r3, [sp, #0]
 8014ce2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014ce6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8014cea:	68f9      	ldr	r1, [r7, #12]
 8014cec:	f7fb fc1e 	bl	801052c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8014cf0:	f107 0310 	add.w	r3, r7, #16
 8014cf4:	4619      	mov	r1, r3
 8014cf6:	68f8      	ldr	r0, [r7, #12]
 8014cf8:	47a0      	blx	r4
 8014cfa:	f107 0310 	add.w	r3, r7, #16
 8014cfe:	4618      	mov	r0, r3
 8014d00:	f7fc faee 	bl	80112e0 <_ZN15ContainsFailureD1Ev>
 8014d04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014d08:	4618      	mov	r0, r3
 8014d0a:	f7f9 fcf4 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8014d0e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014d12:	4618      	mov	r0, r3
 8014d14:	f7f9 fcef 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8014d18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014d1c:	4618      	mov	r0, r3
 8014d1e:	f7f9 fcea 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).containsNoCase(expected))
 8014d22:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014d26:	6879      	ldr	r1, [r7, #4]
 8014d28:	4618      	mov	r0, r3
 8014d2a:	f7f9 f92c 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8014d2e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8014d32:	68b9      	ldr	r1, [r7, #8]
 8014d34:	4618      	mov	r0, r3
 8014d36:	f7f9 f926 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8014d3a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8014d3e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014d42:	4611      	mov	r1, r2
 8014d44:	4618      	mov	r0, r3
 8014d46:	f7f9 f9b7 	bl	800e0b8 <_ZNK12SimpleString14containsNoCaseERKS_>
 8014d4a:	4603      	mov	r3, r0
 8014d4c:	f083 0301 	eor.w	r3, r3, #1
 8014d50:	b2dc      	uxtb	r4, r3
 8014d52:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8014d56:	4618      	mov	r0, r3
 8014d58:	f7f9 fccd 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8014d5c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014d60:	4618      	mov	r0, r3
 8014d62:	f7f9 fcc8 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8014d66:	2c00      	cmp	r4, #0
 8014d68:	d042      	beq.n	8014df0 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	3398      	adds	r3, #152	; 0x98
 8014d70:	681c      	ldr	r4, [r3, #0]
 8014d72:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8014d76:	68b9      	ldr	r1, [r7, #8]
 8014d78:	4618      	mov	r0, r3
 8014d7a:	f7f9 f904 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8014d7e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8014d82:	6879      	ldr	r1, [r7, #4]
 8014d84:	4618      	mov	r0, r3
 8014d86:	f7f9 f8fe 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8014d8a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8014d8e:	6839      	ldr	r1, [r7, #0]
 8014d90:	4618      	mov	r0, r3
 8014d92:	f7f9 f8f8 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8014d96:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8014d9a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8014d9e:	9302      	str	r3, [sp, #8]
 8014da0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8014da4:	9301      	str	r3, [sp, #4]
 8014da6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8014daa:	9300      	str	r3, [sp, #0]
 8014dac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014db0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8014db4:	68f9      	ldr	r1, [r7, #12]
 8014db6:	f7fb fbb9 	bl	801052c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8014dba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8014dbe:	4619      	mov	r1, r3
 8014dc0:	68f8      	ldr	r0, [r7, #12]
 8014dc2:	47a0      	blx	r4
 8014dc4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8014dc8:	4618      	mov	r0, r3
 8014dca:	f7fc fa89 	bl	80112e0 <_ZN15ContainsFailureD1Ev>
 8014dce:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8014dd2:	4618      	mov	r0, r3
 8014dd4:	f7f9 fc8f 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8014dd8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8014ddc:	4618      	mov	r0, r3
 8014dde:	f7f9 fc8a 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8014de2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8014de6:	4618      	mov	r0, r3
 8014de8:	f7f9 fc85 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8014dec:	e000      	b.n	8014df0 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8014dee:	bf00      	nop
}
 8014df0:	37bc      	adds	r7, #188	; 0xbc
 8014df2:	46bd      	mov	sp, r7
 8014df4:	bd90      	pop	{r4, r7, pc}

08014df6 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator>:

void UtestShell::assertLongsEqual(long expected, long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8014df6:	b590      	push	{r4, r7, lr}
 8014df8:	b099      	sub	sp, #100	; 0x64
 8014dfa:	af04      	add	r7, sp, #16
 8014dfc:	60f8      	str	r0, [r7, #12]
 8014dfe:	60b9      	str	r1, [r7, #8]
 8014e00:	607a      	str	r2, [r7, #4]
 8014e02:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8014e04:	68f8      	ldr	r0, [r7, #12]
 8014e06:	f000 fc87 	bl	8015718 <_ZN10UtestShell13getTestResultEv>
 8014e0a:	4603      	mov	r3, r0
 8014e0c:	681a      	ldr	r2, [r3, #0]
 8014e0e:	3228      	adds	r2, #40	; 0x28
 8014e10:	6812      	ldr	r2, [r2, #0]
 8014e12:	4618      	mov	r0, r3
 8014e14:	4790      	blx	r2
    if (expected != actual)
 8014e16:	68ba      	ldr	r2, [r7, #8]
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	429a      	cmp	r2, r3
 8014e1c:	d027      	beq.n	8014e6e <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator+0x78>
        failWith(LongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	339c      	adds	r3, #156	; 0x9c
 8014e24:	681c      	ldr	r4, [r3, #0]
 8014e26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014e2a:	6839      	ldr	r1, [r7, #0]
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	f7f9 f8aa 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8014e32:	f107 0014 	add.w	r0, r7, #20
 8014e36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014e3a:	9302      	str	r3, [sp, #8]
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	9301      	str	r3, [sp, #4]
 8014e40:	68bb      	ldr	r3, [r7, #8]
 8014e42:	9300      	str	r3, [sp, #0]
 8014e44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014e46:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014e48:	68f9      	ldr	r1, [r7, #12]
 8014e4a:	f7fb fc1f 	bl	801068c <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>
 8014e4e:	f107 0314 	add.w	r3, r7, #20
 8014e52:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014e54:	4619      	mov	r1, r3
 8014e56:	68f8      	ldr	r0, [r7, #12]
 8014e58:	47a0      	blx	r4
 8014e5a:	f107 0314 	add.w	r3, r7, #20
 8014e5e:	4618      	mov	r0, r3
 8014e60:	f7fc f9fa 	bl	8011258 <_ZN17LongsEqualFailureD1Ev>
 8014e64:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014e68:	4618      	mov	r0, r3
 8014e6a:	f7f9 fc44 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 8014e6e:	bf00      	nop
 8014e70:	3754      	adds	r7, #84	; 0x54
 8014e72:	46bd      	mov	sp, r7
 8014e74:	bd90      	pop	{r4, r7, pc}

08014e76 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongsEqual(unsigned long expected, unsigned long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8014e76:	b590      	push	{r4, r7, lr}
 8014e78:	b099      	sub	sp, #100	; 0x64
 8014e7a:	af04      	add	r7, sp, #16
 8014e7c:	60f8      	str	r0, [r7, #12]
 8014e7e:	60b9      	str	r1, [r7, #8]
 8014e80:	607a      	str	r2, [r7, #4]
 8014e82:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8014e84:	68f8      	ldr	r0, [r7, #12]
 8014e86:	f000 fc47 	bl	8015718 <_ZN10UtestShell13getTestResultEv>
 8014e8a:	4603      	mov	r3, r0
 8014e8c:	681a      	ldr	r2, [r3, #0]
 8014e8e:	3228      	adds	r2, #40	; 0x28
 8014e90:	6812      	ldr	r2, [r2, #0]
 8014e92:	4618      	mov	r0, r3
 8014e94:	4790      	blx	r2
    if (expected != actual)
 8014e96:	68ba      	ldr	r2, [r7, #8]
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	429a      	cmp	r2, r3
 8014e9c:	d027      	beq.n	8014eee <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator+0x78>
        failWith(UnsignedLongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	339c      	adds	r3, #156	; 0x9c
 8014ea4:	681c      	ldr	r4, [r3, #0]
 8014ea6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014eaa:	6839      	ldr	r1, [r7, #0]
 8014eac:	4618      	mov	r0, r3
 8014eae:	f7f9 f86a 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8014eb2:	f107 0014 	add.w	r0, r7, #20
 8014eb6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014eba:	9302      	str	r3, [sp, #8]
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	9301      	str	r3, [sp, #4]
 8014ec0:	68bb      	ldr	r3, [r7, #8]
 8014ec2:	9300      	str	r3, [sp, #0]
 8014ec4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014ec6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014ec8:	68f9      	ldr	r1, [r7, #12]
 8014eca:	f7fb fcab 	bl	8010824 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>
 8014ece:	f107 0314 	add.w	r3, r7, #20
 8014ed2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014ed4:	4619      	mov	r1, r3
 8014ed6:	68f8      	ldr	r0, [r7, #12]
 8014ed8:	47a0      	blx	r4
 8014eda:	f107 0314 	add.w	r3, r7, #20
 8014ede:	4618      	mov	r0, r3
 8014ee0:	f7fc f998 	bl	8011214 <_ZN25UnsignedLongsEqualFailureD1Ev>
 8014ee4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014ee8:	4618      	mov	r0, r3
 8014eea:	f7f9 fc04 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 8014eee:	bf00      	nop
 8014ef0:	3754      	adds	r7, #84	; 0x54
 8014ef2:	46bd      	mov	sp, r7
 8014ef4:	bd90      	pop	{r4, r7, pc}
	...

08014ef8 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertLongLongsEqual(cpputest_longlong expected, cpputest_longlong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8014ef8:	b082      	sub	sp, #8
 8014efa:	b590      	push	{r4, r7, lr}
 8014efc:	b099      	sub	sp, #100	; 0x64
 8014efe:	af02      	add	r7, sp, #8
 8014f00:	60f8      	str	r0, [r7, #12]
 8014f02:	1d38      	adds	r0, r7, #4
 8014f04:	e880 0006 	stmia.w	r0, {r1, r2}
 8014f08:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 8014f0a:	68f8      	ldr	r0, [r7, #12]
 8014f0c:	f000 fc04 	bl	8015718 <_ZN10UtestShell13getTestResultEv>
 8014f10:	4603      	mov	r3, r0
 8014f12:	681a      	ldr	r2, [r3, #0]
 8014f14:	3228      	adds	r2, #40	; 0x28
 8014f16:	6812      	ldr	r2, [r2, #0]
 8014f18:	4618      	mov	r0, r3
 8014f1a:	4790      	blx	r2
    if (expected != actual)
        failWith(LongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	339c      	adds	r3, #156	; 0x9c
 8014f22:	681c      	ldr	r4, [r3, #0]
 8014f24:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014f28:	4919      	ldr	r1, [pc, #100]	; (8014f90 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator+0x98>)
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	f7f9 f82b 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8014f30:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014f34:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8014f36:	4618      	mov	r0, r3
 8014f38:	f7f9 f825 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8014f3c:	f107 0014 	add.w	r0, r7, #20
 8014f40:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014f44:	9301      	str	r3, [sp, #4]
 8014f46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014f4a:	9300      	str	r3, [sp, #0]
 8014f4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014f4e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014f50:	68f9      	ldr	r1, [r7, #12]
 8014f52:	f7fc f84d 	bl	8010ff0 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 8014f56:	f107 0314 	add.w	r3, r7, #20
 8014f5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014f5e:	4619      	mov	r1, r3
 8014f60:	68f8      	ldr	r0, [r7, #12]
 8014f62:	47a0      	blx	r4
 8014f64:	f107 0314 	add.w	r3, r7, #20
 8014f68:	4618      	mov	r0, r3
 8014f6a:	f7fc f887 	bl	801107c <_ZN25FeatureUnsupportedFailureD1Ev>
 8014f6e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014f72:	4618      	mov	r0, r3
 8014f74:	f7f9 fbbf 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8014f78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014f7c:	4618      	mov	r0, r3
 8014f7e:	f7f9 fbba 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
#endif
}
 8014f82:	bf00      	nop
 8014f84:	375c      	adds	r7, #92	; 0x5c
 8014f86:	46bd      	mov	sp, r7
 8014f88:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8014f8c:	b002      	add	sp, #8
 8014f8e:	4770      	bx	lr
 8014f90:	08026ac4 	.word	0x08026ac4

08014f94 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongLongsEqual(cpputest_ulonglong expected, cpputest_ulonglong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8014f94:	b082      	sub	sp, #8
 8014f96:	b590      	push	{r4, r7, lr}
 8014f98:	b099      	sub	sp, #100	; 0x64
 8014f9a:	af02      	add	r7, sp, #8
 8014f9c:	60f8      	str	r0, [r7, #12]
 8014f9e:	1d38      	adds	r0, r7, #4
 8014fa0:	e880 0006 	stmia.w	r0, {r1, r2}
 8014fa4:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 8014fa6:	68f8      	ldr	r0, [r7, #12]
 8014fa8:	f000 fbb6 	bl	8015718 <_ZN10UtestShell13getTestResultEv>
 8014fac:	4603      	mov	r3, r0
 8014fae:	681a      	ldr	r2, [r3, #0]
 8014fb0:	3228      	adds	r2, #40	; 0x28
 8014fb2:	6812      	ldr	r2, [r2, #0]
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	4790      	blx	r2
    if (expected != actual)
        failWith(UnsignedLongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	339c      	adds	r3, #156	; 0x9c
 8014fbe:	681c      	ldr	r4, [r3, #0]
 8014fc0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014fc4:	4919      	ldr	r1, [pc, #100]	; (801502c <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator+0x98>)
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	f7f8 ffdd 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8014fcc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014fd0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	f7f8 ffd7 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8014fd8:	f107 0014 	add.w	r0, r7, #20
 8014fdc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014fe0:	9301      	str	r3, [sp, #4]
 8014fe2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014fe6:	9300      	str	r3, [sp, #0]
 8014fe8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014fea:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014fec:	68f9      	ldr	r1, [r7, #12]
 8014fee:	f7fb ffff 	bl	8010ff0 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 8014ff2:	f107 0314 	add.w	r3, r7, #20
 8014ff6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014ffa:	4619      	mov	r1, r3
 8014ffc:	68f8      	ldr	r0, [r7, #12]
 8014ffe:	47a0      	blx	r4
 8015000:	f107 0314 	add.w	r3, r7, #20
 8015004:	4618      	mov	r0, r3
 8015006:	f7fc f839 	bl	801107c <_ZN25FeatureUnsupportedFailureD1Ev>
 801500a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801500e:	4618      	mov	r0, r3
 8015010:	f7f9 fb71 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8015014:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015018:	4618      	mov	r0, r3
 801501a:	f7f9 fb6c 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
#endif
}
 801501e:	bf00      	nop
 8015020:	375c      	adds	r7, #92	; 0x5c
 8015022:	46bd      	mov	sp, r7
 8015024:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8015028:	b002      	add	sp, #8
 801502a:	4770      	bx	lr
 801502c:	08026ac4 	.word	0x08026ac4

08015030 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator>:

void UtestShell::assertSignedBytesEqual(signed char expected, signed char actual, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8015030:	b590      	push	{r4, r7, lr}
 8015032:	b099      	sub	sp, #100	; 0x64
 8015034:	af04      	add	r7, sp, #16
 8015036:	60f8      	str	r0, [r7, #12]
 8015038:	607b      	str	r3, [r7, #4]
 801503a:	460b      	mov	r3, r1
 801503c:	72fb      	strb	r3, [r7, #11]
 801503e:	4613      	mov	r3, r2
 8015040:	72bb      	strb	r3, [r7, #10]
    getTestResult()->countCheck();
 8015042:	68f8      	ldr	r0, [r7, #12]
 8015044:	f000 fb68 	bl	8015718 <_ZN10UtestShell13getTestResultEv>
 8015048:	4603      	mov	r3, r0
 801504a:	681a      	ldr	r2, [r3, #0]
 801504c:	3228      	adds	r2, #40	; 0x28
 801504e:	6812      	ldr	r2, [r2, #0]
 8015050:	4618      	mov	r0, r3
 8015052:	4790      	blx	r2
    if (expected != actual)
 8015054:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8015058:	f997 300a 	ldrsb.w	r3, [r7, #10]
 801505c:	429a      	cmp	r2, r3
 801505e:	d029      	beq.n	80150b4 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator+0x84>
        failWith(SignedBytesEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	339c      	adds	r3, #156	; 0x9c
 8015066:	681c      	ldr	r4, [r3, #0]
 8015068:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801506c:	6879      	ldr	r1, [r7, #4]
 801506e:	4618      	mov	r0, r3
 8015070:	f7f8 ff89 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8015074:	f107 0014 	add.w	r0, r7, #20
 8015078:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801507c:	9302      	str	r3, [sp, #8]
 801507e:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8015082:	9301      	str	r3, [sp, #4]
 8015084:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8015088:	9300      	str	r3, [sp, #0]
 801508a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801508c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801508e:	68f9      	ldr	r1, [r7, #12]
 8015090:	f7fb fc94 	bl	80109bc <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>
 8015094:	f107 0314 	add.w	r3, r7, #20
 8015098:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801509a:	4619      	mov	r1, r3
 801509c:	68f8      	ldr	r0, [r7, #12]
 801509e:	47a0      	blx	r4
 80150a0:	f107 0314 	add.w	r3, r7, #20
 80150a4:	4618      	mov	r0, r3
 80150a6:	f7fc f893 	bl	80111d0 <_ZN23SignedBytesEqualFailureD1Ev>
 80150aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80150ae:	4618      	mov	r0, r3
 80150b0:	f7f9 fb21 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 80150b4:	bf00      	nop
 80150b6:	3754      	adds	r7, #84	; 0x54
 80150b8:	46bd      	mov	sp, r7
 80150ba:	bd90      	pop	{r4, r7, pc}

080150bc <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertPointersEqual(const void* expected, const void* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80150bc:	b590      	push	{r4, r7, lr}
 80150be:	b09d      	sub	sp, #116	; 0x74
 80150c0:	af04      	add	r7, sp, #16
 80150c2:	60f8      	str	r0, [r7, #12]
 80150c4:	60b9      	str	r1, [r7, #8]
 80150c6:	607a      	str	r2, [r7, #4]
 80150c8:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80150ca:	68f8      	ldr	r0, [r7, #12]
 80150cc:	f000 fb24 	bl	8015718 <_ZN10UtestShell13getTestResultEv>
 80150d0:	4603      	mov	r3, r0
 80150d2:	681a      	ldr	r2, [r3, #0]
 80150d4:	3228      	adds	r2, #40	; 0x28
 80150d6:	6812      	ldr	r2, [r2, #0]
 80150d8:	4618      	mov	r0, r3
 80150da:	4790      	blx	r2
    if (expected != actual)
 80150dc:	68ba      	ldr	r2, [r7, #8]
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	429a      	cmp	r2, r3
 80150e2:	d03f      	beq.n	8015164 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	339c      	adds	r3, #156	; 0x9c
 80150ea:	681c      	ldr	r4, [r3, #0]
 80150ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80150f0:	68b9      	ldr	r1, [r7, #8]
 80150f2:	4618      	mov	r0, r3
 80150f4:	f7f9 fdea 	bl	800eccc <_Z10StringFromPKv>
 80150f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80150fc:	6879      	ldr	r1, [r7, #4]
 80150fe:	4618      	mov	r0, r3
 8015100:	f7f9 fde4 	bl	800eccc <_Z10StringFromPKv>
 8015104:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015108:	6839      	ldr	r1, [r7, #0]
 801510a:	4618      	mov	r0, r3
 801510c:	f7f8 ff3b 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8015110:	f107 0014 	add.w	r0, r7, #20
 8015114:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015118:	9302      	str	r3, [sp, #8]
 801511a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801511e:	9301      	str	r3, [sp, #4]
 8015120:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015124:	9300      	str	r3, [sp, #0]
 8015126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015128:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801512a:	68f9      	ldr	r1, [r7, #12]
 801512c:	f7fb f814 	bl	8010158 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8015130:	f107 0314 	add.w	r3, r7, #20
 8015134:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8015136:	4619      	mov	r1, r3
 8015138:	68f8      	ldr	r0, [r7, #12]
 801513a:	47a0      	blx	r4
 801513c:	f107 0314 	add.w	r3, r7, #20
 8015140:	4618      	mov	r0, r3
 8015142:	f7fc f955 	bl	80113f0 <_ZN13EqualsFailureD1Ev>
 8015146:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801514a:	4618      	mov	r0, r3
 801514c:	f7f9 fad3 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8015150:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015154:	4618      	mov	r0, r3
 8015156:	f7f9 face 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801515a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801515e:	4618      	mov	r0, r3
 8015160:	f7f9 fac9 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 8015164:	bf00      	nop
 8015166:	3764      	adds	r7, #100	; 0x64
 8015168:	46bd      	mov	sp, r7
 801516a:	bd90      	pop	{r4, r7, pc}

0801516c <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertFunctionPointersEqual(void (*expected)(), void (*actual)(), const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801516c:	b590      	push	{r4, r7, lr}
 801516e:	b09d      	sub	sp, #116	; 0x74
 8015170:	af04      	add	r7, sp, #16
 8015172:	60f8      	str	r0, [r7, #12]
 8015174:	60b9      	str	r1, [r7, #8]
 8015176:	607a      	str	r2, [r7, #4]
 8015178:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801517a:	68f8      	ldr	r0, [r7, #12]
 801517c:	f000 facc 	bl	8015718 <_ZN10UtestShell13getTestResultEv>
 8015180:	4603      	mov	r3, r0
 8015182:	681a      	ldr	r2, [r3, #0]
 8015184:	3228      	adds	r2, #40	; 0x28
 8015186:	6812      	ldr	r2, [r2, #0]
 8015188:	4618      	mov	r0, r3
 801518a:	4790      	blx	r2
    if (expected != actual)
 801518c:	68ba      	ldr	r2, [r7, #8]
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	429a      	cmp	r2, r3
 8015192:	d03f      	beq.n	8015214 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	339c      	adds	r3, #156	; 0x9c
 801519a:	681c      	ldr	r4, [r3, #0]
 801519c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80151a0:	68b9      	ldr	r1, [r7, #8]
 80151a2:	4618      	mov	r0, r3
 80151a4:	f7f9 fdbc 	bl	800ed20 <_Z10StringFromPFvvE>
 80151a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80151ac:	6879      	ldr	r1, [r7, #4]
 80151ae:	4618      	mov	r0, r3
 80151b0:	f7f9 fdb6 	bl	800ed20 <_Z10StringFromPFvvE>
 80151b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80151b8:	6839      	ldr	r1, [r7, #0]
 80151ba:	4618      	mov	r0, r3
 80151bc:	f7f8 fee3 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80151c0:	f107 0014 	add.w	r0, r7, #20
 80151c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80151c8:	9302      	str	r3, [sp, #8]
 80151ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80151ce:	9301      	str	r3, [sp, #4]
 80151d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80151d4:	9300      	str	r3, [sp, #0]
 80151d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80151d8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80151da:	68f9      	ldr	r1, [r7, #12]
 80151dc:	f7fa ffbc 	bl	8010158 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80151e0:	f107 0314 	add.w	r3, r7, #20
 80151e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80151e6:	4619      	mov	r1, r3
 80151e8:	68f8      	ldr	r0, [r7, #12]
 80151ea:	47a0      	blx	r4
 80151ec:	f107 0314 	add.w	r3, r7, #20
 80151f0:	4618      	mov	r0, r3
 80151f2:	f7fc f8fd 	bl	80113f0 <_ZN13EqualsFailureD1Ev>
 80151f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80151fa:	4618      	mov	r0, r3
 80151fc:	f7f9 fa7b 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8015200:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015204:	4618      	mov	r0, r3
 8015206:	f7f9 fa76 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801520a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801520e:	4618      	mov	r0, r3
 8015210:	f7f9 fa71 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 8015214:	bf00      	nop
 8015216:	3764      	adds	r7, #100	; 0x64
 8015218:	46bd      	mov	sp, r7
 801521a:	bd90      	pop	{r4, r7, pc}

0801521c <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator>:

void UtestShell::assertDoublesEqual(double expected, double actual, double threshold, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801521c:	b590      	push	{r4, r7, lr}
 801521e:	b09d      	sub	sp, #116	; 0x74
 8015220:	af02      	add	r7, sp, #8
 8015222:	6278      	str	r0, [r7, #36]	; 0x24
 8015224:	ed87 0b06 	vstr	d0, [r7, #24]
 8015228:	ed87 1b04 	vstr	d1, [r7, #16]
 801522c:	ed87 2b02 	vstr	d2, [r7, #8]
 8015230:	6239      	str	r1, [r7, #32]
 8015232:	607a      	str	r2, [r7, #4]
 8015234:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8015236:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015238:	f000 fa6e 	bl	8015718 <_ZN10UtestShell13getTestResultEv>
 801523c:	4603      	mov	r3, r0
 801523e:	681a      	ldr	r2, [r3, #0]
 8015240:	3228      	adds	r2, #40	; 0x28
 8015242:	6812      	ldr	r2, [r2, #0]
 8015244:	4618      	mov	r0, r3
 8015246:	4790      	blx	r2
    if (!doubles_equal(expected, actual, threshold))
 8015248:	ed97 2b02 	vldr	d2, [r7, #8]
 801524c:	ed97 1b04 	vldr	d1, [r7, #16]
 8015250:	ed97 0b06 	vldr	d0, [r7, #24]
 8015254:	f7fe fd4a 	bl	8013cec <_Z13doubles_equalddd>
 8015258:	4603      	mov	r3, r0
 801525a:	f083 0301 	eor.w	r3, r3, #1
 801525e:	b2db      	uxtb	r3, r3
 8015260:	2b00      	cmp	r3, #0
 8015262:	d029      	beq.n	80152b8 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator+0x9c>
        failWith(DoublesEqualFailure(this, fileName, lineNumber, expected, actual, threshold, text), testTerminator);
 8015264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	339c      	adds	r3, #156	; 0x9c
 801526a:	681c      	ldr	r4, [r3, #0]
 801526c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8015270:	6a39      	ldr	r1, [r7, #32]
 8015272:	4618      	mov	r0, r3
 8015274:	f7f8 fe87 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8015278:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801527c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8015280:	9300      	str	r3, [sp, #0]
 8015282:	ed97 2b02 	vldr	d2, [r7, #8]
 8015286:	ed97 1b04 	vldr	d1, [r7, #16]
 801528a:	ed97 0b06 	vldr	d0, [r7, #24]
 801528e:	683b      	ldr	r3, [r7, #0]
 8015290:	687a      	ldr	r2, [r7, #4]
 8015292:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015294:	f7fa ffa2 	bl	80101dc <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>
 8015298:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801529c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801529e:	4619      	mov	r1, r3
 80152a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80152a2:	47a0      	blx	r4
 80152a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80152a8:	4618      	mov	r0, r3
 80152aa:	f7fc f87f 	bl	80113ac <_ZN19DoublesEqualFailureD1Ev>
 80152ae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80152b2:	4618      	mov	r0, r3
 80152b4:	f7f9 fa1f 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 80152b8:	bf00      	nop
 80152ba:	376c      	adds	r7, #108	; 0x6c
 80152bc:	46bd      	mov	sp, r7
 80152be:	bd90      	pop	{r4, r7, pc}

080152c0 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator>:

void UtestShell::assertBinaryEqual(const void *expected, const void *actual, size_t length, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80152c0:	b590      	push	{r4, r7, lr}
 80152c2:	b0a7      	sub	sp, #156	; 0x9c
 80152c4:	af04      	add	r7, sp, #16
 80152c6:	60f8      	str	r0, [r7, #12]
 80152c8:	60b9      	str	r1, [r7, #8]
 80152ca:	607a      	str	r2, [r7, #4]
 80152cc:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80152ce:	68f8      	ldr	r0, [r7, #12]
 80152d0:	f000 fa22 	bl	8015718 <_ZN10UtestShell13getTestResultEv>
 80152d4:	4603      	mov	r3, r0
 80152d6:	681a      	ldr	r2, [r3, #0]
 80152d8:	3228      	adds	r2, #40	; 0x28
 80152da:	6812      	ldr	r2, [r2, #0]
 80152dc:	4618      	mov	r0, r3
 80152de:	4790      	blx	r2
	if (length == 0) return;
 80152e0:	683b      	ldr	r3, [r7, #0]
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d075      	beq.n	80153d2 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x112>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d102      	bne.n	80152f2 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x32>
 80152ec:	68bb      	ldr	r3, [r7, #8]
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d071      	beq.n	80153d6 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x116>
    if (actual == NULLPTR || expected == NULLPTR)
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d002      	beq.n	80152fe <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x3e>
 80152f8:	68bb      	ldr	r3, [r7, #8]
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d12d      	bne.n	801535a <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x9a>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	339c      	adds	r3, #156	; 0x9c
 8015304:	681c      	ldr	r4, [r3, #0]
 8015306:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801530a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801530e:	4618      	mov	r0, r3
 8015310:	f7f8 fe39 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8015314:	f107 0010 	add.w	r0, r7, #16
 8015318:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801531c:	9303      	str	r3, [sp, #12]
 801531e:	683b      	ldr	r3, [r7, #0]
 8015320:	9302      	str	r3, [sp, #8]
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	9301      	str	r3, [sp, #4]
 8015326:	68bb      	ldr	r3, [r7, #8]
 8015328:	9300      	str	r3, [sp, #0]
 801532a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801532e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8015332:	68f9      	ldr	r1, [r7, #12]
 8015334:	f7fb fd70 	bl	8010e18 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 8015338:	f107 0310 	add.w	r3, r7, #16
 801533c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8015340:	4619      	mov	r1, r3
 8015342:	68f8      	ldr	r0, [r7, #12]
 8015344:	47a0      	blx	r4
 8015346:	f107 0310 	add.w	r3, r7, #16
 801534a:	4618      	mov	r0, r3
 801534c:	f7fb feda 	bl	8011104 <_ZN18BinaryEqualFailureD1Ev>
 8015350:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015354:	4618      	mov	r0, r3
 8015356:	f7f9 f9ce 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    if (SimpleString::MemCmp(expected, actual, length) != 0)
 801535a:	683a      	ldr	r2, [r7, #0]
 801535c:	6879      	ldr	r1, [r7, #4]
 801535e:	68b8      	ldr	r0, [r7, #8]
 8015360:	f7f8 fd30 	bl	800ddc4 <_ZN12SimpleString6MemCmpEPKvS1_j>
 8015364:	4603      	mov	r3, r0
 8015366:	2b00      	cmp	r3, #0
 8015368:	bf14      	ite	ne
 801536a:	2301      	movne	r3, #1
 801536c:	2300      	moveq	r3, #0
 801536e:	b2db      	uxtb	r3, r3
 8015370:	2b00      	cmp	r3, #0
 8015372:	d031      	beq.n	80153d8 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	339c      	adds	r3, #156	; 0x9c
 801537a:	681c      	ldr	r4, [r3, #0]
 801537c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015380:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8015384:	4618      	mov	r0, r3
 8015386:	f7f8 fdfe 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801538a:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 801538e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015392:	9303      	str	r3, [sp, #12]
 8015394:	683b      	ldr	r3, [r7, #0]
 8015396:	9302      	str	r3, [sp, #8]
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	9301      	str	r3, [sp, #4]
 801539c:	68bb      	ldr	r3, [r7, #8]
 801539e:	9300      	str	r3, [sp, #0]
 80153a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80153a4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80153a8:	68f9      	ldr	r1, [r7, #12]
 80153aa:	f7fb fd35 	bl	8010e18 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 80153ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80153b2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80153b6:	4619      	mov	r1, r3
 80153b8:	68f8      	ldr	r0, [r7, #12]
 80153ba:	47a0      	blx	r4
 80153bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80153c0:	4618      	mov	r0, r3
 80153c2:	f7fb fe9f 	bl	8011104 <_ZN18BinaryEqualFailureD1Ev>
 80153c6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80153ca:	4618      	mov	r0, r3
 80153cc:	f7f9 f993 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80153d0:	e002      	b.n	80153d8 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
	if (length == 0) return;
 80153d2:	bf00      	nop
 80153d4:	e000      	b.n	80153d8 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80153d6:	bf00      	nop
}
 80153d8:	378c      	adds	r7, #140	; 0x8c
 80153da:	46bd      	mov	sp, r7
 80153dc:	bd90      	pop	{r4, r7, pc}

080153de <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator>:

void UtestShell::assertBitsEqual(unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80153de:	b590      	push	{r4, r7, lr}
 80153e0:	b09b      	sub	sp, #108	; 0x6c
 80153e2:	af06      	add	r7, sp, #24
 80153e4:	60f8      	str	r0, [r7, #12]
 80153e6:	60b9      	str	r1, [r7, #8]
 80153e8:	607a      	str	r2, [r7, #4]
 80153ea:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80153ec:	68f8      	ldr	r0, [r7, #12]
 80153ee:	f000 f993 	bl	8015718 <_ZN10UtestShell13getTestResultEv>
 80153f2:	4603      	mov	r3, r0
 80153f4:	681a      	ldr	r2, [r3, #0]
 80153f6:	3228      	adds	r2, #40	; 0x28
 80153f8:	6812      	ldr	r2, [r2, #0]
 80153fa:	4618      	mov	r0, r3
 80153fc:	4790      	blx	r2
    if ((expected & mask) != (actual & mask))
 80153fe:	68ba      	ldr	r2, [r7, #8]
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	405a      	eors	r2, r3
 8015404:	683b      	ldr	r3, [r7, #0]
 8015406:	4013      	ands	r3, r2
 8015408:	2b00      	cmp	r3, #0
 801540a:	d02b      	beq.n	8015464 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator+0x86>
        failWith(BitsEqualFailure(this, fileName, lineNumber, expected, actual, mask, byteCount, text), testTerminator);
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	339c      	adds	r3, #156	; 0x9c
 8015412:	681c      	ldr	r4, [r3, #0]
 8015414:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015418:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801541a:	4618      	mov	r0, r3
 801541c:	f7f8 fdb3 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8015420:	f107 0014 	add.w	r0, r7, #20
 8015424:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015428:	9304      	str	r3, [sp, #16]
 801542a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801542c:	9303      	str	r3, [sp, #12]
 801542e:	683b      	ldr	r3, [r7, #0]
 8015430:	9302      	str	r3, [sp, #8]
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	9301      	str	r3, [sp, #4]
 8015436:	68bb      	ldr	r3, [r7, #8]
 8015438:	9300      	str	r3, [sp, #0]
 801543a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801543c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801543e:	68f9      	ldr	r1, [r7, #12]
 8015440:	f7fb fd7a 	bl	8010f38 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>
 8015444:	f107 0314 	add.w	r3, r7, #20
 8015448:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801544a:	4619      	mov	r1, r3
 801544c:	68f8      	ldr	r0, [r7, #12]
 801544e:	47a0      	blx	r4
 8015450:	f107 0314 	add.w	r3, r7, #20
 8015454:	4618      	mov	r0, r3
 8015456:	f7fb fe33 	bl	80110c0 <_ZN16BitsEqualFailureD1Ev>
 801545a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801545e:	4618      	mov	r0, r3
 8015460:	f7f9 f949 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 8015464:	bf00      	nop
 8015466:	3754      	adds	r7, #84	; 0x54
 8015468:	46bd      	mov	sp, r7
 801546a:	bd90      	pop	{r4, r7, pc}

0801546c <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertEquals(bool failed, const char* expected, const char* actual, const char* text, const char* file, size_t line, const TestTerminator& testTerminator)
{
 801546c:	b590      	push	{r4, r7, lr}
 801546e:	b09d      	sub	sp, #116	; 0x74
 8015470:	af04      	add	r7, sp, #16
 8015472:	60f8      	str	r0, [r7, #12]
 8015474:	607a      	str	r2, [r7, #4]
 8015476:	603b      	str	r3, [r7, #0]
 8015478:	460b      	mov	r3, r1
 801547a:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 801547c:	68f8      	ldr	r0, [r7, #12]
 801547e:	f000 f94b 	bl	8015718 <_ZN10UtestShell13getTestResultEv>
 8015482:	4603      	mov	r3, r0
 8015484:	681a      	ldr	r2, [r3, #0]
 8015486:	3228      	adds	r2, #40	; 0x28
 8015488:	6812      	ldr	r2, [r2, #0]
 801548a:	4618      	mov	r0, r3
 801548c:	4790      	blx	r2
    if (failed)
 801548e:	7afb      	ldrb	r3, [r7, #11]
 8015490:	2b00      	cmp	r3, #0
 8015492:	d03f      	beq.n	8015514 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator+0xa8>
        failWith(CheckEqualFailure(this, file, line, expected, actual, text), testTerminator);
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	339c      	adds	r3, #156	; 0x9c
 801549a:	681c      	ldr	r4, [r3, #0]
 801549c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80154a0:	6879      	ldr	r1, [r7, #4]
 80154a2:	4618      	mov	r0, r3
 80154a4:	f7f8 fd6f 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80154a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80154ac:	6839      	ldr	r1, [r7, #0]
 80154ae:	4618      	mov	r0, r3
 80154b0:	f7f8 fd69 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80154b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80154b8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80154ba:	4618      	mov	r0, r3
 80154bc:	f7f8 fd63 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80154c0:	f107 0014 	add.w	r0, r7, #20
 80154c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80154c8:	9302      	str	r3, [sp, #8]
 80154ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80154ce:	9301      	str	r3, [sp, #4]
 80154d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80154d4:	9300      	str	r3, [sp, #0]
 80154d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80154d8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80154da:	68f9      	ldr	r1, [r7, #12]
 80154dc:	f7fa ff30 	bl	8010340 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80154e0:	f107 0314 	add.w	r3, r7, #20
 80154e4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80154e6:	4619      	mov	r1, r3
 80154e8:	68f8      	ldr	r0, [r7, #12]
 80154ea:	47a0      	blx	r4
 80154ec:	f107 0314 	add.w	r3, r7, #20
 80154f0:	4618      	mov	r0, r3
 80154f2:	f7fb ff39 	bl	8011368 <_ZN17CheckEqualFailureD1Ev>
 80154f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80154fa:	4618      	mov	r0, r3
 80154fc:	f7f9 f8fb 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8015500:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015504:	4618      	mov	r0, r3
 8015506:	f7f9 f8f6 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801550a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801550e:	4618      	mov	r0, r3
 8015510:	f7f9 f8f1 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 8015514:	bf00      	nop
 8015516:	3764      	adds	r7, #100	; 0x64
 8015518:	46bd      	mov	sp, r7
 801551a:	bd90      	pop	{r4, r7, pc}

0801551c <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCompare(bool comparison, const char *checkString, const char *comparisonString, const char *text, const char *fileName, size_t lineNumber, const TestTerminator &testTerminator)
{
 801551c:	b590      	push	{r4, r7, lr}
 801551e:	b09d      	sub	sp, #116	; 0x74
 8015520:	af04      	add	r7, sp, #16
 8015522:	60f8      	str	r0, [r7, #12]
 8015524:	607a      	str	r2, [r7, #4]
 8015526:	603b      	str	r3, [r7, #0]
 8015528:	460b      	mov	r3, r1
 801552a:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 801552c:	68f8      	ldr	r0, [r7, #12]
 801552e:	f000 f8f3 	bl	8015718 <_ZN10UtestShell13getTestResultEv>
 8015532:	4603      	mov	r3, r0
 8015534:	681a      	ldr	r2, [r3, #0]
 8015536:	3228      	adds	r2, #40	; 0x28
 8015538:	6812      	ldr	r2, [r2, #0]
 801553a:	4618      	mov	r0, r3
 801553c:	4790      	blx	r2
    if (!comparison)
 801553e:	7afb      	ldrb	r3, [r7, #11]
 8015540:	f083 0301 	eor.w	r3, r3, #1
 8015544:	b2db      	uxtb	r3, r3
 8015546:	2b00      	cmp	r3, #0
 8015548:	d03f      	beq.n	80155ca <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(ComparisonFailure(this, fileName, lineNumber, checkString, comparisonString, text), testTerminator);
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	339c      	adds	r3, #156	; 0x9c
 8015550:	681c      	ldr	r4, [r3, #0]
 8015552:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015556:	6879      	ldr	r1, [r7, #4]
 8015558:	4618      	mov	r0, r3
 801555a:	f7f8 fd14 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801555e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015562:	6839      	ldr	r1, [r7, #0]
 8015564:	4618      	mov	r0, r3
 8015566:	f7f8 fd0e 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801556a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801556e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8015570:	4618      	mov	r0, r3
 8015572:	f7f8 fd08 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8015576:	f107 0014 	add.w	r0, r7, #20
 801557a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801557e:	9302      	str	r3, [sp, #8]
 8015580:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015584:	9301      	str	r3, [sp, #4]
 8015586:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801558a:	9300      	str	r3, [sp, #0]
 801558c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801558e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015590:	68f9      	ldr	r1, [r7, #12]
 8015592:	f7fa ff83 	bl	801049c <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8015596:	f107 0314 	add.w	r3, r7, #20
 801559a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801559c:	4619      	mov	r1, r3
 801559e:	68f8      	ldr	r0, [r7, #12]
 80155a0:	47a0      	blx	r4
 80155a2:	f107 0314 	add.w	r3, r7, #20
 80155a6:	4618      	mov	r0, r3
 80155a8:	f7fb febc 	bl	8011324 <_ZN17ComparisonFailureD1Ev>
 80155ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80155b0:	4618      	mov	r0, r3
 80155b2:	f7f9 f8a0 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80155b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80155ba:	4618      	mov	r0, r3
 80155bc:	f7f9 f89b 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80155c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80155c4:	4618      	mov	r0, r3
 80155c6:	f7f9 f896 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 80155ca:	bf00      	nop
 80155cc:	3764      	adds	r7, #100	; 0x64
 80155ce:	46bd      	mov	sp, r7
 80155d0:	bd90      	pop	{r4, r7, pc}
	...

080155d4 <_ZN10UtestShell5printEPKcS1_j>:

void UtestShell::print(const char *text, const char* fileName, size_t lineNumber)
{
 80155d4:	b5b0      	push	{r4, r5, r7, lr}
 80155d6:	b088      	sub	sp, #32
 80155d8:	af00      	add	r7, sp, #0
 80155da:	60f8      	str	r0, [r7, #12]
 80155dc:	60b9      	str	r1, [r7, #8]
 80155de:	607a      	str	r2, [r7, #4]
 80155e0:	603b      	str	r3, [r7, #0]
    SimpleString stringToPrint = "\n";
 80155e2:	f107 0310 	add.w	r3, r7, #16
 80155e6:	4924      	ldr	r1, [pc, #144]	; (8015678 <_ZN10UtestShell5printEPKcS1_j+0xa4>)
 80155e8:	4618      	mov	r0, r3
 80155ea:	f7f8 fccc 	bl	800df86 <_ZN12SimpleStringC1EPKc>
    stringToPrint += fileName;
 80155ee:	f107 0310 	add.w	r3, r7, #16
 80155f2:	6879      	ldr	r1, [r7, #4]
 80155f4:	4618      	mov	r0, r3
 80155f6:	f7f9 f90d 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    stringToPrint += ":";
 80155fa:	f107 0310 	add.w	r3, r7, #16
 80155fe:	491f      	ldr	r1, [pc, #124]	; (801567c <_ZN10UtestShell5printEPKcS1_j+0xa8>)
 8015600:	4618      	mov	r0, r3
 8015602:	f7f9 f907 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    stringToPrint += StringFrom(lineNumber);
 8015606:	f107 0318 	add.w	r3, r7, #24
 801560a:	6839      	ldr	r1, [r7, #0]
 801560c:	4618      	mov	r0, r3
 801560e:	f7f9 fda1 	bl	800f154 <_Z10StringFromj>
 8015612:	f107 0218 	add.w	r2, r7, #24
 8015616:	f107 0310 	add.w	r3, r7, #16
 801561a:	4611      	mov	r1, r2
 801561c:	4618      	mov	r0, r3
 801561e:	f7f9 f8e7 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 8015622:	f107 0318 	add.w	r3, r7, #24
 8015626:	4618      	mov	r0, r3
 8015628:	f7f9 f865 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    stringToPrint += " ";
 801562c:	f107 0310 	add.w	r3, r7, #16
 8015630:	4913      	ldr	r1, [pc, #76]	; (8015680 <_ZN10UtestShell5printEPKcS1_j+0xac>)
 8015632:	4618      	mov	r0, r3
 8015634:	f7f9 f8ee 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    stringToPrint += text;
 8015638:	f107 0310 	add.w	r3, r7, #16
 801563c:	68b9      	ldr	r1, [r7, #8]
 801563e:	4618      	mov	r0, r3
 8015640:	f7f9 f8e8 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    getTestResult()->print(stringToPrint.asCharString());
 8015644:	68f8      	ldr	r0, [r7, #12]
 8015646:	f000 f867 	bl	8015718 <_ZN10UtestShell13getTestResultEv>
 801564a:	4604      	mov	r4, r0
 801564c:	6823      	ldr	r3, [r4, #0]
 801564e:	3338      	adds	r3, #56	; 0x38
 8015650:	681d      	ldr	r5, [r3, #0]
 8015652:	f107 0310 	add.w	r3, r7, #16
 8015656:	4618      	mov	r0, r3
 8015658:	f7f9 f820 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 801565c:	4603      	mov	r3, r0
 801565e:	4619      	mov	r1, r3
 8015660:	4620      	mov	r0, r4
 8015662:	47a8      	blx	r5
    SimpleString stringToPrint = "\n";
 8015664:	f107 0310 	add.w	r3, r7, #16
 8015668:	4618      	mov	r0, r3
 801566a:	f7f9 f844 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 801566e:	bf00      	nop
 8015670:	3720      	adds	r7, #32
 8015672:	46bd      	mov	sp, r7
 8015674:	bdb0      	pop	{r4, r5, r7, pc}
 8015676:	bf00      	nop
 8015678:	08026adc 	.word	0x08026adc
 801567c:	08026ae0 	.word	0x08026ae0
 8015680:	08026ae4 	.word	0x08026ae4

08015684 <_ZN10UtestShell5printERK12SimpleStringPKcj>:

void UtestShell::print(const SimpleString& text, const char* fileName, size_t lineNumber)
{
 8015684:	b590      	push	{r4, r7, lr}
 8015686:	b085      	sub	sp, #20
 8015688:	af00      	add	r7, sp, #0
 801568a:	60f8      	str	r0, [r7, #12]
 801568c:	60b9      	str	r1, [r7, #8]
 801568e:	607a      	str	r2, [r7, #4]
 8015690:	603b      	str	r3, [r7, #0]
    print(text.asCharString(), fileName, lineNumber);
 8015692:	68fb      	ldr	r3, [r7, #12]
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	3370      	adds	r3, #112	; 0x70
 8015698:	681c      	ldr	r4, [r3, #0]
 801569a:	68b8      	ldr	r0, [r7, #8]
 801569c:	f7f8 fffe 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 80156a0:	4601      	mov	r1, r0
 80156a2:	683b      	ldr	r3, [r7, #0]
 80156a4:	687a      	ldr	r2, [r7, #4]
 80156a6:	68f8      	ldr	r0, [r7, #12]
 80156a8:	47a0      	blx	r4
}
 80156aa:	bf00      	nop
 80156ac:	3714      	adds	r7, #20
 80156ae:	46bd      	mov	sp, r7
 80156b0:	bd90      	pop	{r4, r7, pc}

080156b2 <_ZN10UtestShell16printVeryVerboseEPKc>:

void UtestShell::printVeryVerbose(const char* text)
{
 80156b2:	b580      	push	{r7, lr}
 80156b4:	b082      	sub	sp, #8
 80156b6:	af00      	add	r7, sp, #0
 80156b8:	6078      	str	r0, [r7, #4]
 80156ba:	6039      	str	r1, [r7, #0]
    getTestResult()->printVeryVerbose(text);
 80156bc:	6878      	ldr	r0, [r7, #4]
 80156be:	f000 f82b 	bl	8015718 <_ZN10UtestShell13getTestResultEv>
 80156c2:	4603      	mov	r3, r0
 80156c4:	681a      	ldr	r2, [r3, #0]
 80156c6:	323c      	adds	r2, #60	; 0x3c
 80156c8:	6812      	ldr	r2, [r2, #0]
 80156ca:	6839      	ldr	r1, [r7, #0]
 80156cc:	4618      	mov	r0, r3
 80156ce:	4790      	blx	r2
}
 80156d0:	bf00      	nop
 80156d2:	3708      	adds	r7, #8
 80156d4:	46bd      	mov	sp, r7
 80156d6:	bd80      	pop	{r7, pc}

080156d8 <_ZN10UtestShell13setTestResultEP10TestResult>:

TestResult* UtestShell::testResult_ = NULLPTR;
UtestShell* UtestShell::currentTest_ = NULLPTR;

void UtestShell::setTestResult(TestResult* result)
{
 80156d8:	b480      	push	{r7}
 80156da:	b083      	sub	sp, #12
 80156dc:	af00      	add	r7, sp, #0
 80156de:	6078      	str	r0, [r7, #4]
 80156e0:	6039      	str	r1, [r7, #0]
    testResult_ = result;
 80156e2:	4a04      	ldr	r2, [pc, #16]	; (80156f4 <_ZN10UtestShell13setTestResultEP10TestResult+0x1c>)
 80156e4:	683b      	ldr	r3, [r7, #0]
 80156e6:	6013      	str	r3, [r2, #0]
}
 80156e8:	bf00      	nop
 80156ea:	370c      	adds	r7, #12
 80156ec:	46bd      	mov	sp, r7
 80156ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f2:	4770      	bx	lr
 80156f4:	20000b7c 	.word	0x20000b7c

080156f8 <_ZN10UtestShell14setCurrentTestEPS_>:

void UtestShell::setCurrentTest(UtestShell* test)
{
 80156f8:	b480      	push	{r7}
 80156fa:	b083      	sub	sp, #12
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	6078      	str	r0, [r7, #4]
 8015700:	6039      	str	r1, [r7, #0]
    currentTest_ = test;
 8015702:	4a04      	ldr	r2, [pc, #16]	; (8015714 <_ZN10UtestShell14setCurrentTestEPS_+0x1c>)
 8015704:	683b      	ldr	r3, [r7, #0]
 8015706:	6013      	str	r3, [r2, #0]
}
 8015708:	bf00      	nop
 801570a:	370c      	adds	r7, #12
 801570c:	46bd      	mov	sp, r7
 801570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015712:	4770      	bx	lr
 8015714:	20000b80 	.word	0x20000b80

08015718 <_ZN10UtestShell13getTestResultEv>:

TestResult* UtestShell::getTestResult()
{
 8015718:	b580      	push	{r7, lr}
 801571a:	b082      	sub	sp, #8
 801571c:	af00      	add	r7, sp, #0
 801571e:	6078      	str	r0, [r7, #4]
    if (testResult_ == NULLPTR)
 8015720:	4b09      	ldr	r3, [pc, #36]	; (8015748 <_ZN10UtestShell13getTestResultEv+0x30>)
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	2b00      	cmp	r3, #0
 8015726:	d109      	bne.n	801573c <_ZN10UtestShell13getTestResultEv+0x24>
        return &OutsideTestRunnerUTest::instance().getTestResult();
 8015728:	f7fe fbb2 	bl	8013e90 <_ZN22OutsideTestRunnerUTest8instanceEv>
 801572c:	4603      	mov	r3, r0
 801572e:	681a      	ldr	r2, [r3, #0]
 8015730:	32a4      	adds	r2, #164	; 0xa4
 8015732:	6812      	ldr	r2, [r2, #0]
 8015734:	4618      	mov	r0, r3
 8015736:	4790      	blx	r2
 8015738:	4603      	mov	r3, r0
 801573a:	e001      	b.n	8015740 <_ZN10UtestShell13getTestResultEv+0x28>
    return testResult_;
 801573c:	4b02      	ldr	r3, [pc, #8]	; (8015748 <_ZN10UtestShell13getTestResultEv+0x30>)
 801573e:	681b      	ldr	r3, [r3, #0]
}
 8015740:	4618      	mov	r0, r3
 8015742:	3708      	adds	r7, #8
 8015744:	46bd      	mov	sp, r7
 8015746:	bd80      	pop	{r7, pc}
 8015748:	20000b7c 	.word	0x20000b7c

0801574c <_ZN10UtestShell10getCurrentEv>:

UtestShell* UtestShell::getCurrent()
{
 801574c:	b580      	push	{r7, lr}
 801574e:	af00      	add	r7, sp, #0
    if (currentTest_ == NULLPTR)
 8015750:	4b05      	ldr	r3, [pc, #20]	; (8015768 <_ZN10UtestShell10getCurrentEv+0x1c>)
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	2b00      	cmp	r3, #0
 8015756:	d103      	bne.n	8015760 <_ZN10UtestShell10getCurrentEv+0x14>
        return &OutsideTestRunnerUTest::instance();
 8015758:	f7fe fb9a 	bl	8013e90 <_ZN22OutsideTestRunnerUTest8instanceEv>
 801575c:	4603      	mov	r3, r0
 801575e:	e001      	b.n	8015764 <_ZN10UtestShell10getCurrentEv+0x18>
    return currentTest_;
 8015760:	4b01      	ldr	r3, [pc, #4]	; (8015768 <_ZN10UtestShell10getCurrentEv+0x1c>)
 8015762:	681b      	ldr	r3, [r3, #0]
}
 8015764:	4618      	mov	r0, r3
 8015766:	bd80      	pop	{r7, pc}
 8015768:	20000b80 	.word	0x20000b80

0801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>:

const TestTerminator &UtestShell::getCurrentTestTerminator()
{
 801576c:	b480      	push	{r7}
 801576e:	af00      	add	r7, sp, #0
    return *currentTestTerminator_;
 8015770:	4b03      	ldr	r3, [pc, #12]	; (8015780 <_ZN10UtestShell24getCurrentTestTerminatorEv+0x14>)
 8015772:	681b      	ldr	r3, [r3, #0]
}
 8015774:	4618      	mov	r0, r3
 8015776:	46bd      	mov	sp, r7
 8015778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801577c:	4770      	bx	lr
 801577e:	bf00      	nop
 8015780:	20000094 	.word	0x20000094

08015784 <_ZN10UtestShell14setCrashOnFailEv>:

void UtestShell::setCrashOnFail()
{
 8015784:	b480      	push	{r7}
 8015786:	af00      	add	r7, sp, #0
    currentTestTerminator_ = &crashingTestTerminator;
 8015788:	4b03      	ldr	r3, [pc, #12]	; (8015798 <_ZN10UtestShell14setCrashOnFailEv+0x14>)
 801578a:	4a04      	ldr	r2, [pc, #16]	; (801579c <_ZN10UtestShell14setCrashOnFailEv+0x18>)
 801578c:	601a      	str	r2, [r3, #0]
}
 801578e:	bf00      	nop
 8015790:	46bd      	mov	sp, r7
 8015792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015796:	4770      	bx	lr
 8015798:	20000094 	.word	0x20000094
 801579c:	20000090 	.word	0x20000090

080157a0 <_ZN5UtestC1Ev>:
{
}

////////////// Utest ////////////

Utest::Utest()
 80157a0:	b480      	push	{r7}
 80157a2:	b083      	sub	sp, #12
 80157a4:	af00      	add	r7, sp, #0
 80157a6:	6078      	str	r0, [r7, #4]
 80157a8:	4a04      	ldr	r2, [pc, #16]	; (80157bc <_ZN5UtestC1Ev+0x1c>)
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	601a      	str	r2, [r3, #0]
{
}
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	4618      	mov	r0, r3
 80157b2:	370c      	adds	r7, #12
 80157b4:	46bd      	mov	sp, r7
 80157b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ba:	4770      	bx	lr
 80157bc:	0802a708 	.word	0x0802a708

080157c0 <_ZN5UtestD1Ev>:

Utest::~Utest()
 80157c0:	b480      	push	{r7}
 80157c2:	b083      	sub	sp, #12
 80157c4:	af00      	add	r7, sp, #0
 80157c6:	6078      	str	r0, [r7, #4]
 80157c8:	4a04      	ldr	r2, [pc, #16]	; (80157dc <_ZN5UtestD1Ev+0x1c>)
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	601a      	str	r2, [r3, #0]
{
}
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	4618      	mov	r0, r3
 80157d2:	370c      	adds	r7, #12
 80157d4:	46bd      	mov	sp, r7
 80157d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157da:	4770      	bx	lr
 80157dc:	0802a708 	.word	0x0802a708

080157e0 <_ZN5UtestD0Ev>:
Utest::~Utest()
 80157e0:	b580      	push	{r7, lr}
 80157e2:	b082      	sub	sp, #8
 80157e4:	af00      	add	r7, sp, #0
 80157e6:	6078      	str	r0, [r7, #4]
}
 80157e8:	6878      	ldr	r0, [r7, #4]
 80157ea:	f7ff ffe9 	bl	80157c0 <_ZN5UtestD1Ev>
 80157ee:	2104      	movs	r1, #4
 80157f0:	6878      	ldr	r0, [r7, #4]
 80157f2:	f7f6 f819 	bl	800b828 <_ZdlPvj>
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	4618      	mov	r0, r3
 80157fa:	3708      	adds	r7, #8
 80157fc:	46bd      	mov	sp, r7
 80157fe:	bd80      	pop	{r7, pc}

08015800 <_ZN5Utest3runEv>:

}
#else

void Utest::run()
{
 8015800:	b580      	push	{r7, lr}
 8015802:	b082      	sub	sp, #8
 8015804:	af00      	add	r7, sp, #0
 8015806:	6078      	str	r0, [r7, #4]
    if (PlatformSpecificSetJmp(helperDoTestSetup, this)) {
 8015808:	4b0d      	ldr	r3, [pc, #52]	; (8015840 <_ZN5Utest3runEv+0x40>)
 801580a:	681b      	ldr	r3, [r3, #0]
 801580c:	6879      	ldr	r1, [r7, #4]
 801580e:	480d      	ldr	r0, [pc, #52]	; (8015844 <_ZN5Utest3runEv+0x44>)
 8015810:	4798      	blx	r3
 8015812:	4603      	mov	r3, r0
 8015814:	2b00      	cmp	r3, #0
 8015816:	bf14      	ite	ne
 8015818:	2301      	movne	r3, #1
 801581a:	2300      	moveq	r3, #0
 801581c:	b2db      	uxtb	r3, r3
 801581e:	2b00      	cmp	r3, #0
 8015820:	d004      	beq.n	801582c <_ZN5Utest3runEv+0x2c>
        PlatformSpecificSetJmp(helperDoTestBody, this);
 8015822:	4b07      	ldr	r3, [pc, #28]	; (8015840 <_ZN5Utest3runEv+0x40>)
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	6879      	ldr	r1, [r7, #4]
 8015828:	4807      	ldr	r0, [pc, #28]	; (8015848 <_ZN5Utest3runEv+0x48>)
 801582a:	4798      	blx	r3
    }
    PlatformSpecificSetJmp(helperDoTestTeardown, this);
 801582c:	4b04      	ldr	r3, [pc, #16]	; (8015840 <_ZN5Utest3runEv+0x40>)
 801582e:	681b      	ldr	r3, [r3, #0]
 8015830:	6879      	ldr	r1, [r7, #4]
 8015832:	4806      	ldr	r0, [pc, #24]	; (801584c <_ZN5Utest3runEv+0x4c>)
 8015834:	4798      	blx	r3
}
 8015836:	bf00      	nop
 8015838:	3708      	adds	r7, #8
 801583a:	46bd      	mov	sp, r7
 801583c:	bd80      	pop	{r7, pc}
 801583e:	bf00      	nop
 8015840:	200000a4 	.word	0x200000a4
 8015844:	08013eed 	.word	0x08013eed
 8015848:	08013f09 	.word	0x08013f09
 801584c:	08013f25 	.word	0x08013f25

08015850 <_ZN5Utest5setupEv>:

#endif

void Utest::setup()
{
 8015850:	b480      	push	{r7}
 8015852:	b083      	sub	sp, #12
 8015854:	af00      	add	r7, sp, #0
 8015856:	6078      	str	r0, [r7, #4]
}
 8015858:	bf00      	nop
 801585a:	370c      	adds	r7, #12
 801585c:	46bd      	mov	sp, r7
 801585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015862:	4770      	bx	lr

08015864 <_ZN5Utest8testBodyEv>:

void Utest::testBody()
{
 8015864:	b480      	push	{r7}
 8015866:	b083      	sub	sp, #12
 8015868:	af00      	add	r7, sp, #0
 801586a:	6078      	str	r0, [r7, #4]
}
 801586c:	bf00      	nop
 801586e:	370c      	adds	r7, #12
 8015870:	46bd      	mov	sp, r7
 8015872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015876:	4770      	bx	lr

08015878 <_ZN5Utest8teardownEv>:

void Utest::teardown()
{
 8015878:	b480      	push	{r7}
 801587a:	b083      	sub	sp, #12
 801587c:	af00      	add	r7, sp, #0
 801587e:	6078      	str	r0, [r7, #4]
}
 8015880:	bf00      	nop
 8015882:	370c      	adds	r7, #12
 8015884:	46bd      	mov	sp, r7
 8015886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801588a:	4770      	bx	lr

0801588c <_ZN14TestTerminatorD1Ev>:


/////////////////// Terminators

TestTerminator::~TestTerminator()
 801588c:	b480      	push	{r7}
 801588e:	b083      	sub	sp, #12
 8015890:	af00      	add	r7, sp, #0
 8015892:	6078      	str	r0, [r7, #4]
 8015894:	4a04      	ldr	r2, [pc, #16]	; (80158a8 <_ZN14TestTerminatorD1Ev+0x1c>)
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	601a      	str	r2, [r3, #0]
{
}
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	4618      	mov	r0, r3
 801589e:	370c      	adds	r7, #12
 80158a0:	46bd      	mov	sp, r7
 80158a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a6:	4770      	bx	lr
 80158a8:	0802a6f4 	.word	0x0802a6f4

080158ac <_ZNK20NormalTestTerminator15exitCurrentTestEv>:

void NormalTestTerminator::exitCurrentTest() const
{
 80158ac:	b580      	push	{r7, lr}
 80158ae:	b084      	sub	sp, #16
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	6078      	str	r0, [r7, #4]
    #if CPPUTEST_USE_STD_CPP_LIB
        throw CppUTestFailedException();
    #else
        TestTerminatorWithoutExceptions().exitCurrentTest();
 80158b4:	2300      	movs	r3, #0
 80158b6:	60fb      	str	r3, [r7, #12]
 80158b8:	f107 030c 	add.w	r3, r7, #12
 80158bc:	4618      	mov	r0, r3
 80158be:	f7f6 f975 	bl	800bbac <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 80158c2:	f107 030c 	add.w	r3, r7, #12
 80158c6:	4618      	mov	r0, r3
 80158c8:	f000 f82c 	bl	8015924 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>
 80158cc:	f107 030c 	add.w	r3, r7, #12
 80158d0:	4618      	mov	r0, r3
 80158d2:	f000 f835 	bl	8015940 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
    #endif
}
 80158d6:	bf00      	nop
 80158d8:	3710      	adds	r7, #16
 80158da:	46bd      	mov	sp, r7
 80158dc:	bd80      	pop	{r7, pc}
	...

080158e0 <_ZN20NormalTestTerminatorD1Ev>:

NormalTestTerminator::~NormalTestTerminator()
 80158e0:	b580      	push	{r7, lr}
 80158e2:	b082      	sub	sp, #8
 80158e4:	af00      	add	r7, sp, #0
 80158e6:	6078      	str	r0, [r7, #4]
 80158e8:	4a05      	ldr	r2, [pc, #20]	; (8015900 <_ZN20NormalTestTerminatorD1Ev+0x20>)
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	601a      	str	r2, [r3, #0]
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	4618      	mov	r0, r3
 80158f2:	f7ff ffcb 	bl	801588c <_ZN14TestTerminatorD1Ev>
{
}
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	4618      	mov	r0, r3
 80158fa:	3708      	adds	r7, #8
 80158fc:	46bd      	mov	sp, r7
 80158fe:	bd80      	pop	{r7, pc}
 8015900:	0802a6e0 	.word	0x0802a6e0

08015904 <_ZN20NormalTestTerminatorD0Ev>:
NormalTestTerminator::~NormalTestTerminator()
 8015904:	b580      	push	{r7, lr}
 8015906:	b082      	sub	sp, #8
 8015908:	af00      	add	r7, sp, #0
 801590a:	6078      	str	r0, [r7, #4]
}
 801590c:	6878      	ldr	r0, [r7, #4]
 801590e:	f7ff ffe7 	bl	80158e0 <_ZN20NormalTestTerminatorD1Ev>
 8015912:	2104      	movs	r1, #4
 8015914:	6878      	ldr	r0, [r7, #4]
 8015916:	f7f5 ff87 	bl	800b828 <_ZdlPvj>
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	4618      	mov	r0, r3
 801591e:	3708      	adds	r7, #8
 8015920:	46bd      	mov	sp, r7
 8015922:	bd80      	pop	{r7, pc}

08015924 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>:

void TestTerminatorWithoutExceptions::exitCurrentTest() const
{
 8015924:	b580      	push	{r7, lr}
 8015926:	b082      	sub	sp, #8
 8015928:	af00      	add	r7, sp, #0
 801592a:	6078      	str	r0, [r7, #4]
    PlatformSpecificLongJmp();
 801592c:	4b03      	ldr	r3, [pc, #12]	; (801593c <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv+0x18>)
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8015932:	bf00      	nop
 8015934:	3708      	adds	r7, #8
 8015936:	46bd      	mov	sp, r7
 8015938:	bd80      	pop	{r7, pc}
 801593a:	bf00      	nop
 801593c:	200000a0 	.word	0x200000a0

08015940 <_ZN31TestTerminatorWithoutExceptionsD1Ev>:

TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8015940:	b580      	push	{r7, lr}
 8015942:	b082      	sub	sp, #8
 8015944:	af00      	add	r7, sp, #0
 8015946:	6078      	str	r0, [r7, #4]
 8015948:	4a05      	ldr	r2, [pc, #20]	; (8015960 <_ZN31TestTerminatorWithoutExceptionsD1Ev+0x20>)
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	601a      	str	r2, [r3, #0]
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	4618      	mov	r0, r3
 8015952:	f7ff ff9b 	bl	801588c <_ZN14TestTerminatorD1Ev>
{
}
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	4618      	mov	r0, r3
 801595a:	3708      	adds	r7, #8
 801595c:	46bd      	mov	sp, r7
 801595e:	bd80      	pop	{r7, pc}
 8015960:	0802a6cc 	.word	0x0802a6cc

08015964 <_ZN31TestTerminatorWithoutExceptionsD0Ev>:
TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8015964:	b580      	push	{r7, lr}
 8015966:	b082      	sub	sp, #8
 8015968:	af00      	add	r7, sp, #0
 801596a:	6078      	str	r0, [r7, #4]
}
 801596c:	6878      	ldr	r0, [r7, #4]
 801596e:	f7ff ffe7 	bl	8015940 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 8015972:	2104      	movs	r1, #4
 8015974:	6878      	ldr	r0, [r7, #4]
 8015976:	f7f5 ff57 	bl	800b828 <_ZdlPvj>
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	4618      	mov	r0, r3
 801597e:	3708      	adds	r7, #8
 8015980:	46bd      	mov	sp, r7
 8015982:	bd80      	pop	{r7, pc}

08015984 <_ZNK22CrashingTestTerminator15exitCurrentTestEv>:

void CrashingTestTerminator::exitCurrentTest() const
{
 8015984:	b580      	push	{r7, lr}
 8015986:	b082      	sub	sp, #8
 8015988:	af00      	add	r7, sp, #0
 801598a:	6078      	str	r0, [r7, #4]
    UtestShell::crash();
 801598c:	f7fe fbaa 	bl	80140e4 <_ZN10UtestShell5crashEv>
    NormalTestTerminator::exitCurrentTest();
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	4618      	mov	r0, r3
 8015994:	f7ff ff8a 	bl	80158ac <_ZNK20NormalTestTerminator15exitCurrentTestEv>
}
 8015998:	bf00      	nop
 801599a:	3708      	adds	r7, #8
 801599c:	46bd      	mov	sp, r7
 801599e:	bd80      	pop	{r7, pc}

080159a0 <_ZN22CrashingTestTerminatorD1Ev>:

CrashingTestTerminator::~CrashingTestTerminator()
 80159a0:	b580      	push	{r7, lr}
 80159a2:	b082      	sub	sp, #8
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	6078      	str	r0, [r7, #4]
 80159a8:	4a05      	ldr	r2, [pc, #20]	; (80159c0 <_ZN22CrashingTestTerminatorD1Ev+0x20>)
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	601a      	str	r2, [r3, #0]
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	4618      	mov	r0, r3
 80159b2:	f7ff ff95 	bl	80158e0 <_ZN20NormalTestTerminatorD1Ev>
{
}
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	4618      	mov	r0, r3
 80159ba:	3708      	adds	r7, #8
 80159bc:	46bd      	mov	sp, r7
 80159be:	bd80      	pop	{r7, pc}
 80159c0:	0802a6b8 	.word	0x0802a6b8

080159c4 <_ZN22CrashingTestTerminatorD0Ev>:
CrashingTestTerminator::~CrashingTestTerminator()
 80159c4:	b580      	push	{r7, lr}
 80159c6:	b082      	sub	sp, #8
 80159c8:	af00      	add	r7, sp, #0
 80159ca:	6078      	str	r0, [r7, #4]
}
 80159cc:	6878      	ldr	r0, [r7, #4]
 80159ce:	f7ff ffe7 	bl	80159a0 <_ZN22CrashingTestTerminatorD1Ev>
 80159d2:	2104      	movs	r1, #4
 80159d4:	6878      	ldr	r0, [r7, #4]
 80159d6:	f7f5 ff27 	bl	800b828 <_ZdlPvj>
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	4618      	mov	r0, r3
 80159de:	3708      	adds	r7, #8
 80159e0:	46bd      	mov	sp, r7
 80159e2:	bd80      	pop	{r7, pc}

080159e4 <_ZN22UtestShellPointerArrayC1EP10UtestShell>:
    runIgnored_ = true;
}

//////////////////// UtestShellPointerArray

UtestShellPointerArray::UtestShellPointerArray(UtestShell* firstTest)
 80159e4:	b580      	push	{r7, lr}
 80159e6:	b084      	sub	sp, #16
 80159e8:	af00      	add	r7, sp, #0
 80159ea:	6078      	str	r0, [r7, #4]
 80159ec:	6039      	str	r1, [r7, #0]
    : arrayOfTests_(NULLPTR), count_(0)
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	2200      	movs	r2, #0
 80159f2:	601a      	str	r2, [r3, #0]
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	2200      	movs	r2, #0
 80159f8:	605a      	str	r2, [r3, #4]
{
    count_ = (firstTest) ? firstTest->countTests() : 0;
 80159fa:	683b      	ldr	r3, [r7, #0]
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d007      	beq.n	8015a10 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2c>
 8015a00:	683b      	ldr	r3, [r7, #0]
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	3310      	adds	r3, #16
 8015a06:	681b      	ldr	r3, [r3, #0]
 8015a08:	6838      	ldr	r0, [r7, #0]
 8015a0a:	4798      	blx	r3
 8015a0c:	4603      	mov	r3, r0
 8015a0e:	e000      	b.n	8015a12 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2e>
 8015a10:	2300      	movs	r3, #0
 8015a12:	687a      	ldr	r2, [r7, #4]
 8015a14:	6053      	str	r3, [r2, #4]
    if (count_ == 0) return;
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	685b      	ldr	r3, [r3, #4]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d02d      	beq.n	8015a7a <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x96>

    arrayOfTests_ = new UtestShell*[count_];
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	685b      	ldr	r3, [r3, #4]
 8015a22:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8015a26:	4293      	cmp	r3, r2
 8015a28:	d201      	bcs.n	8015a2e <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4a>
 8015a2a:	009b      	lsls	r3, r3, #2
 8015a2c:	e001      	b.n	8015a32 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4e>
 8015a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8015a32:	f240 3237 	movw	r2, #823	; 0x337
 8015a36:	4914      	ldr	r1, [pc, #80]	; (8015a88 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0xa4>)
 8015a38:	4618      	mov	r0, r3
 8015a3a:	f7f5 ff05 	bl	800b848 <_ZnajPKci>
 8015a3e:	4602      	mov	r2, r0
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	601a      	str	r2, [r3, #0]

    UtestShell*currentTest = firstTest;
 8015a44:	683b      	ldr	r3, [r7, #0]
 8015a46:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8015a48:	2300      	movs	r3, #0
 8015a4a:	60bb      	str	r3, [r7, #8]
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	685b      	ldr	r3, [r3, #4]
 8015a50:	68ba      	ldr	r2, [r7, #8]
 8015a52:	429a      	cmp	r2, r3
 8015a54:	d212      	bcs.n	8015a7c <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x98>
    {
        arrayOfTests_[i] = currentTest;
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	681a      	ldr	r2, [r3, #0]
 8015a5a:	68bb      	ldr	r3, [r7, #8]
 8015a5c:	009b      	lsls	r3, r3, #2
 8015a5e:	4413      	add	r3, r2
 8015a60:	68fa      	ldr	r2, [r7, #12]
 8015a62:	601a      	str	r2, [r3, #0]
        currentTest = currentTest->getNext();
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	681b      	ldr	r3, [r3, #0]
 8015a68:	330c      	adds	r3, #12
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	68f8      	ldr	r0, [r7, #12]
 8015a6e:	4798      	blx	r3
 8015a70:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8015a72:	68bb      	ldr	r3, [r7, #8]
 8015a74:	3301      	adds	r3, #1
 8015a76:	60bb      	str	r3, [r7, #8]
 8015a78:	e7e8      	b.n	8015a4c <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x68>
    if (count_ == 0) return;
 8015a7a:	bf00      	nop
    }
}
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	4618      	mov	r0, r3
 8015a80:	3710      	adds	r7, #16
 8015a82:	46bd      	mov	sp, r7
 8015a84:	bd80      	pop	{r7, pc}
 8015a86:	bf00      	nop
 8015a88:	0802696c 	.word	0x0802696c

08015a8c <_ZN22UtestShellPointerArrayD1Ev>:

UtestShellPointerArray::~UtestShellPointerArray()
 8015a8c:	b580      	push	{r7, lr}
 8015a8e:	b082      	sub	sp, #8
 8015a90:	af00      	add	r7, sp, #0
 8015a92:	6078      	str	r0, [r7, #4]
{
    delete [] arrayOfTests_;
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	681b      	ldr	r3, [r3, #0]
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d004      	beq.n	8015aa6 <_ZN22UtestShellPointerArrayD1Ev+0x1a>
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	681b      	ldr	r3, [r3, #0]
 8015aa0:	4618      	mov	r0, r3
 8015aa2:	f7f5 fee5 	bl	800b870 <_ZdaPv>
}
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	3708      	adds	r7, #8
 8015aac:	46bd      	mov	sp, r7
 8015aae:	bd80      	pop	{r7, pc}

08015ab0 <_ZN22UtestShellPointerArray4swapEjj>:

void UtestShellPointerArray::swap(size_t index1, size_t index2)
{
 8015ab0:	b480      	push	{r7}
 8015ab2:	b087      	sub	sp, #28
 8015ab4:	af00      	add	r7, sp, #0
 8015ab6:	60f8      	str	r0, [r7, #12]
 8015ab8:	60b9      	str	r1, [r7, #8]
 8015aba:	607a      	str	r2, [r7, #4]
        UtestShell* e2 = arrayOfTests_[index2];
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	681a      	ldr	r2, [r3, #0]
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	009b      	lsls	r3, r3, #2
 8015ac4:	4413      	add	r3, r2
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	617b      	str	r3, [r7, #20]
        UtestShell* e1 = arrayOfTests_[index1];
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	681a      	ldr	r2, [r3, #0]
 8015ace:	68bb      	ldr	r3, [r7, #8]
 8015ad0:	009b      	lsls	r3, r3, #2
 8015ad2:	4413      	add	r3, r2
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	613b      	str	r3, [r7, #16]
        arrayOfTests_[index1] = e2;
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	681a      	ldr	r2, [r3, #0]
 8015adc:	68bb      	ldr	r3, [r7, #8]
 8015ade:	009b      	lsls	r3, r3, #2
 8015ae0:	4413      	add	r3, r2
 8015ae2:	697a      	ldr	r2, [r7, #20]
 8015ae4:	601a      	str	r2, [r3, #0]
        arrayOfTests_[index2] = e1;
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	681a      	ldr	r2, [r3, #0]
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	009b      	lsls	r3, r3, #2
 8015aee:	4413      	add	r3, r2
 8015af0:	693a      	ldr	r2, [r7, #16]
 8015af2:	601a      	str	r2, [r3, #0]
}
 8015af4:	bf00      	nop
 8015af6:	371c      	adds	r7, #28
 8015af8:	46bd      	mov	sp, r7
 8015afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015afe:	4770      	bx	lr

08015b00 <_ZN22UtestShellPointerArray7shuffleEj>:

void UtestShellPointerArray::shuffle(size_t seed)
{
 8015b00:	b580      	push	{r7, lr}
 8015b02:	b084      	sub	sp, #16
 8015b04:	af00      	add	r7, sp, #0
 8015b06:	6078      	str	r0, [r7, #4]
 8015b08:	6039      	str	r1, [r7, #0]
    if (count_ == 0) return;
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	685b      	ldr	r3, [r3, #4]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d028      	beq.n	8015b64 <_ZN22UtestShellPointerArray7shuffleEj+0x64>

    PlatformSpecificSrand((unsigned int) seed);
 8015b12:	4b17      	ldr	r3, [pc, #92]	; (8015b70 <_ZN22UtestShellPointerArray7shuffleEj+0x70>)
 8015b14:	681b      	ldr	r3, [r3, #0]
 8015b16:	6838      	ldr	r0, [r7, #0]
 8015b18:	4798      	blx	r3

    for (size_t i = count_ - 1; i >= 1; --i)
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	685b      	ldr	r3, [r3, #4]
 8015b1e:	3b01      	subs	r3, #1
 8015b20:	60fb      	str	r3, [r7, #12]
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d019      	beq.n	8015b5c <_ZN22UtestShellPointerArray7shuffleEj+0x5c>
    {
        if (count_ == 0) return;
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	685b      	ldr	r3, [r3, #4]
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d01b      	beq.n	8015b68 <_ZN22UtestShellPointerArray7shuffleEj+0x68>

        const size_t j = ((size_t)PlatformSpecificRand()) % (i + 1); // distribution biased by modulo, but good enough for shuffling
 8015b30:	4b10      	ldr	r3, [pc, #64]	; (8015b74 <_ZN22UtestShellPointerArray7shuffleEj+0x74>)
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	4798      	blx	r3
 8015b36:	4603      	mov	r3, r0
 8015b38:	461a      	mov	r2, r3
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	3301      	adds	r3, #1
 8015b3e:	fbb2 f1f3 	udiv	r1, r2, r3
 8015b42:	fb03 f301 	mul.w	r3, r3, r1
 8015b46:	1ad3      	subs	r3, r2, r3
 8015b48:	60bb      	str	r3, [r7, #8]
        swap(i, j);
 8015b4a:	68ba      	ldr	r2, [r7, #8]
 8015b4c:	68f9      	ldr	r1, [r7, #12]
 8015b4e:	6878      	ldr	r0, [r7, #4]
 8015b50:	f7ff ffae 	bl	8015ab0 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = count_ - 1; i >= 1; --i)
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	3b01      	subs	r3, #1
 8015b58:	60fb      	str	r3, [r7, #12]
 8015b5a:	e7e2      	b.n	8015b22 <_ZN22UtestShellPointerArray7shuffleEj+0x22>
   }
   relinkTestsInOrder();
 8015b5c:	6878      	ldr	r0, [r7, #4]
 8015b5e:	f000 f834 	bl	8015bca <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 8015b62:	e002      	b.n	8015b6a <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
    if (count_ == 0) return;
 8015b64:	bf00      	nop
 8015b66:	e000      	b.n	8015b6a <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
        if (count_ == 0) return;
 8015b68:	bf00      	nop
}
 8015b6a:	3710      	adds	r7, #16
 8015b6c:	46bd      	mov	sp, r7
 8015b6e:	bd80      	pop	{r7, pc}
 8015b70:	200000e0 	.word	0x200000e0
 8015b74:	200000e4 	.word	0x200000e4

08015b78 <_ZN22UtestShellPointerArray7reverseEv>:

void UtestShellPointerArray::reverse()
{
 8015b78:	b580      	push	{r7, lr}
 8015b7a:	b086      	sub	sp, #24
 8015b7c:	af00      	add	r7, sp, #0
 8015b7e:	6078      	str	r0, [r7, #4]
    if (count_ == 0) return;
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	685b      	ldr	r3, [r3, #4]
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d01c      	beq.n	8015bc2 <_ZN22UtestShellPointerArray7reverseEv+0x4a>

    size_t halfCount = count_ / 2;
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	685b      	ldr	r3, [r3, #4]
 8015b8c:	085b      	lsrs	r3, r3, #1
 8015b8e:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < halfCount; i++)
 8015b90:	2300      	movs	r3, #0
 8015b92:	617b      	str	r3, [r7, #20]
 8015b94:	697a      	ldr	r2, [r7, #20]
 8015b96:	693b      	ldr	r3, [r7, #16]
 8015b98:	429a      	cmp	r2, r3
 8015b9a:	d20e      	bcs.n	8015bba <_ZN22UtestShellPointerArray7reverseEv+0x42>
    {
        size_t j = count_ - i - 1;
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	685a      	ldr	r2, [r3, #4]
 8015ba0:	697b      	ldr	r3, [r7, #20]
 8015ba2:	1ad3      	subs	r3, r2, r3
 8015ba4:	3b01      	subs	r3, #1
 8015ba6:	60fb      	str	r3, [r7, #12]
        swap(i, j);
 8015ba8:	68fa      	ldr	r2, [r7, #12]
 8015baa:	6979      	ldr	r1, [r7, #20]
 8015bac:	6878      	ldr	r0, [r7, #4]
 8015bae:	f7ff ff7f 	bl	8015ab0 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = 0; i < halfCount; i++)
 8015bb2:	697b      	ldr	r3, [r7, #20]
 8015bb4:	3301      	adds	r3, #1
 8015bb6:	617b      	str	r3, [r7, #20]
 8015bb8:	e7ec      	b.n	8015b94 <_ZN22UtestShellPointerArray7reverseEv+0x1c>
   }
   relinkTestsInOrder();
 8015bba:	6878      	ldr	r0, [r7, #4]
 8015bbc:	f000 f805 	bl	8015bca <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 8015bc0:	e000      	b.n	8015bc4 <_ZN22UtestShellPointerArray7reverseEv+0x4c>
    if (count_ == 0) return;
 8015bc2:	bf00      	nop
}
 8015bc4:	3718      	adds	r7, #24
 8015bc6:	46bd      	mov	sp, r7
 8015bc8:	bd80      	pop	{r7, pc}

08015bca <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>:

void UtestShellPointerArray::relinkTestsInOrder()
{
 8015bca:	b580      	push	{r7, lr}
 8015bcc:	b084      	sub	sp, #16
 8015bce:	af00      	add	r7, sp, #0
 8015bd0:	6078      	str	r0, [r7, #4]
    UtestShell *tests = NULLPTR;
 8015bd2:	2300      	movs	r3, #0
 8015bd4:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8015bd6:	2300      	movs	r3, #0
 8015bd8:	60bb      	str	r3, [r7, #8]
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	685b      	ldr	r3, [r3, #4]
 8015bde:	68ba      	ldr	r2, [r7, #8]
 8015be0:	429a      	cmp	r2, r3
 8015be2:	d221      	bcs.n	8015c28 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x5e>
        tests = arrayOfTests_[count_ - i - 1]->addTest(tests);
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	681a      	ldr	r2, [r3, #0]
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	6859      	ldr	r1, [r3, #4]
 8015bec:	68bb      	ldr	r3, [r7, #8]
 8015bee:	1acb      	subs	r3, r1, r3
 8015bf0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015bf4:	3b01      	subs	r3, #1
 8015bf6:	009b      	lsls	r3, r3, #2
 8015bf8:	4413      	add	r3, r2
 8015bfa:	6818      	ldr	r0, [r3, #0]
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	681a      	ldr	r2, [r3, #0]
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	6859      	ldr	r1, [r3, #4]
 8015c04:	68bb      	ldr	r3, [r7, #8]
 8015c06:	1acb      	subs	r3, r1, r3
 8015c08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015c0c:	3b01      	subs	r3, #1
 8015c0e:	009b      	lsls	r3, r3, #2
 8015c10:	4413      	add	r3, r2
 8015c12:	681b      	ldr	r3, [r3, #0]
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	3308      	adds	r3, #8
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	68f9      	ldr	r1, [r7, #12]
 8015c1c:	4798      	blx	r3
 8015c1e:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8015c20:	68bb      	ldr	r3, [r7, #8]
 8015c22:	3301      	adds	r3, #1
 8015c24:	60bb      	str	r3, [r7, #8]
 8015c26:	e7d8      	b.n	8015bda <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x10>
}
 8015c28:	bf00      	nop
 8015c2a:	3710      	adds	r7, #16
 8015c2c:	46bd      	mov	sp, r7
 8015c2e:	bd80      	pop	{r7, pc}

08015c30 <_ZNK22UtestShellPointerArray12getFirstTestEv>:

UtestShell* UtestShellPointerArray::getFirstTest() const
{
 8015c30:	b580      	push	{r7, lr}
 8015c32:	b082      	sub	sp, #8
 8015c34:	af00      	add	r7, sp, #0
 8015c36:	6078      	str	r0, [r7, #4]
    return get(0);
 8015c38:	2100      	movs	r1, #0
 8015c3a:	6878      	ldr	r0, [r7, #4]
 8015c3c:	f000 f805 	bl	8015c4a <_ZNK22UtestShellPointerArray3getEj>
 8015c40:	4603      	mov	r3, r0
}
 8015c42:	4618      	mov	r0, r3
 8015c44:	3708      	adds	r7, #8
 8015c46:	46bd      	mov	sp, r7
 8015c48:	bd80      	pop	{r7, pc}

08015c4a <_ZNK22UtestShellPointerArray3getEj>:

UtestShell* UtestShellPointerArray::get(size_t index) const
{
 8015c4a:	b480      	push	{r7}
 8015c4c:	b083      	sub	sp, #12
 8015c4e:	af00      	add	r7, sp, #0
 8015c50:	6078      	str	r0, [r7, #4]
 8015c52:	6039      	str	r1, [r7, #0]
    if (index >= count_) return NULLPTR;
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	685b      	ldr	r3, [r3, #4]
 8015c58:	683a      	ldr	r2, [r7, #0]
 8015c5a:	429a      	cmp	r2, r3
 8015c5c:	d301      	bcc.n	8015c62 <_ZNK22UtestShellPointerArray3getEj+0x18>
 8015c5e:	2300      	movs	r3, #0
 8015c60:	e005      	b.n	8015c6e <_ZNK22UtestShellPointerArray3getEj+0x24>
    return arrayOfTests_[index];
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	681a      	ldr	r2, [r3, #0]
 8015c66:	683b      	ldr	r3, [r7, #0]
 8015c68:	009b      	lsls	r3, r3, #2
 8015c6a:	4413      	add	r3, r2
 8015c6c:	681b      	ldr	r3, [r3, #0]
}
 8015c6e:	4618      	mov	r0, r3
 8015c70:	370c      	adds	r7, #12
 8015c72:	46bd      	mov	sp, r7
 8015c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c78:	4770      	bx	lr
	...

08015c7c <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>:



////////////// TestInstaller ////////////

TestInstaller::TestInstaller(UtestShell& shell, const char* groupName, const char* testName, const char* fileName, size_t lineNumber)
 8015c7c:	b580      	push	{r7, lr}
 8015c7e:	b084      	sub	sp, #16
 8015c80:	af00      	add	r7, sp, #0
 8015c82:	60f8      	str	r0, [r7, #12]
 8015c84:	60b9      	str	r1, [r7, #8]
 8015c86:	607a      	str	r2, [r7, #4]
 8015c88:	603b      	str	r3, [r7, #0]
 8015c8a:	4a10      	ldr	r2, [pc, #64]	; (8015ccc <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j+0x50>)
 8015c8c:	68fb      	ldr	r3, [r7, #12]
 8015c8e:	601a      	str	r2, [r3, #0]
{
    shell.setGroupName(groupName);
 8015c90:	6879      	ldr	r1, [r7, #4]
 8015c92:	68b8      	ldr	r0, [r7, #8]
 8015c94:	f7fe fc27 	bl	80144e6 <_ZN10UtestShell12setGroupNameEPKc>
    shell.setTestName(testName);
 8015c98:	6839      	ldr	r1, [r7, #0]
 8015c9a:	68b8      	ldr	r0, [r7, #8]
 8015c9c:	f7fe fc31 	bl	8014502 <_ZN10UtestShell11setTestNameEPKc>
    shell.setFileName(fileName);
 8015ca0:	69b9      	ldr	r1, [r7, #24]
 8015ca2:	68b8      	ldr	r0, [r7, #8]
 8015ca4:	f7fe fc03 	bl	80144ae <_ZN10UtestShell11setFileNameEPKc>
    shell.setLineNumber(lineNumber);
 8015ca8:	69f9      	ldr	r1, [r7, #28]
 8015caa:	68b8      	ldr	r0, [r7, #8]
 8015cac:	f7fe fc0d 	bl	80144ca <_ZN10UtestShell13setLineNumberEj>
    TestRegistry::getCurrentRegistry()->addTest(&shell);
 8015cb0:	f7fd fc20 	bl	80134f4 <_ZN12TestRegistry18getCurrentRegistryEv>
 8015cb4:	4603      	mov	r3, r0
 8015cb6:	681a      	ldr	r2, [r3, #0]
 8015cb8:	3208      	adds	r2, #8
 8015cba:	6812      	ldr	r2, [r2, #0]
 8015cbc:	68b9      	ldr	r1, [r7, #8]
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	4790      	blx	r2
}
 8015cc2:	68fb      	ldr	r3, [r7, #12]
 8015cc4:	4618      	mov	r0, r3
 8015cc6:	3710      	adds	r7, #16
 8015cc8:	46bd      	mov	sp, r7
 8015cca:	bd80      	pop	{r7, pc}
 8015ccc:	0802a5fc 	.word	0x0802a5fc

08015cd0 <_ZN13TestInstallerD1Ev>:

TestInstaller::~TestInstaller()
 8015cd0:	b480      	push	{r7}
 8015cd2:	b083      	sub	sp, #12
 8015cd4:	af00      	add	r7, sp, #0
 8015cd6:	6078      	str	r0, [r7, #4]
 8015cd8:	4a04      	ldr	r2, [pc, #16]	; (8015cec <_ZN13TestInstallerD1Ev+0x1c>)
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	601a      	str	r2, [r3, #0]
{
}
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	370c      	adds	r7, #12
 8015ce4:	46bd      	mov	sp, r7
 8015ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cea:	4770      	bx	lr
 8015cec:	0802a5fc 	.word	0x0802a5fc

08015cf0 <_ZN13TestInstallerD0Ev>:
TestInstaller::~TestInstaller()
 8015cf0:	b580      	push	{r7, lr}
 8015cf2:	b082      	sub	sp, #8
 8015cf4:	af00      	add	r7, sp, #0
 8015cf6:	6078      	str	r0, [r7, #4]
}
 8015cf8:	6878      	ldr	r0, [r7, #4]
 8015cfa:	f7ff ffe9 	bl	8015cd0 <_ZN13TestInstallerD1Ev>
 8015cfe:	2104      	movs	r1, #4
 8015d00:	6878      	ldr	r0, [r7, #4]
 8015d02:	f7f5 fd91 	bl	800b828 <_ZdlPvj>
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	4618      	mov	r0, r3
 8015d0a:	3708      	adds	r7, #8
 8015d0c:	46bd      	mov	sp, r7
 8015d0e:	bd80      	pop	{r7, pc}

08015d10 <_Z41__static_initialization_and_destruction_0ii>:

void TestInstaller::unDo()
{
    TestRegistry::getCurrentRegistry()->unDoLastAddTest();
}
 8015d10:	b580      	push	{r7, lr}
 8015d12:	b082      	sub	sp, #8
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	6078      	str	r0, [r7, #4]
 8015d18:	6039      	str	r1, [r7, #0]
static const CrashingTestTerminator crashingTestTerminator;
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d10a      	bne.n	8015d36 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8015d20:	683b      	ldr	r3, [r7, #0]
 8015d22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015d26:	4293      	cmp	r3, r2
 8015d28:	d105      	bne.n	8015d36 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8015d2a:	4805      	ldr	r0, [pc, #20]	; (8015d40 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8015d2c:	f7ff fe38 	bl	80159a0 <_ZN22CrashingTestTerminatorD1Ev>
static const NormalTestTerminator normalTestTerminator;
 8015d30:	4804      	ldr	r0, [pc, #16]	; (8015d44 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8015d32:	f7ff fdd5 	bl	80158e0 <_ZN20NormalTestTerminatorD1Ev>
}
 8015d36:	bf00      	nop
 8015d38:	3708      	adds	r7, #8
 8015d3a:	46bd      	mov	sp, r7
 8015d3c:	bd80      	pop	{r7, pc}
 8015d3e:	bf00      	nop
 8015d40:	20000090 	.word	0x20000090
 8015d44:	2000008c 	.word	0x2000008c

08015d48 <_GLOBAL__sub_I__Z13doubles_equalddd>:
 8015d48:	b580      	push	{r7, lr}
 8015d4a:	af00      	add	r7, sp, #0
 8015d4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015d50:	2001      	movs	r0, #1
 8015d52:	f7ff ffdd 	bl	8015d10 <_Z41__static_initialization_and_destruction_0ii>
 8015d56:	bd80      	pop	{r7, pc}

08015d58 <_GLOBAL__sub_D__Z13doubles_equalddd>:
 8015d58:	b580      	push	{r7, lr}
 8015d5a:	af00      	add	r7, sp, #0
 8015d5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015d60:	2000      	movs	r0, #0
 8015d62:	f7ff ffd5 	bl	8015d10 <_Z41__static_initialization_and_destruction_0ii>
 8015d66:	bd80      	pop	{r7, pc}

08015d68 <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 8015d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d6a:	b083      	sub	sp, #12
 8015d6c:	af00      	add	r7, sp, #0
 8015d6e:	ed87 0b00 	vstr	d0, [r7]
 8015d72:	683c      	ldr	r4, [r7, #0]
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8015d7a:	2301      	movs	r3, #1
 8015d7c:	461e      	mov	r6, r3
 8015d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8015d82:	4b10      	ldr	r3, [pc, #64]	; (8015dc4 <_ZSt5isinfd+0x5c>)
 8015d84:	4620      	mov	r0, r4
 8015d86:	4629      	mov	r1, r5
 8015d88:	f7ea fcfe 	bl	8000788 <__aeabi_dcmpun>
 8015d8c:	4603      	mov	r3, r0
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d10b      	bne.n	8015daa <_ZSt5isinfd+0x42>
 8015d92:	f04f 32ff 	mov.w	r2, #4294967295
 8015d96:	4b0b      	ldr	r3, [pc, #44]	; (8015dc4 <_ZSt5isinfd+0x5c>)
 8015d98:	4620      	mov	r0, r4
 8015d9a:	4629      	mov	r1, r5
 8015d9c:	f7ea fcd6 	bl	800074c <__aeabi_dcmple>
 8015da0:	4603      	mov	r3, r0
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d101      	bne.n	8015daa <_ZSt5isinfd+0x42>
 8015da6:	2300      	movs	r3, #0
 8015da8:	461e      	mov	r6, r3
 8015daa:	b2f3      	uxtb	r3, r6
 8015dac:	f083 0301 	eor.w	r3, r3, #1
 8015db0:	b2db      	uxtb	r3, r3
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	bf14      	ite	ne
 8015db6:	2301      	movne	r3, #1
 8015db8:	2300      	moveq	r3, #0
 8015dba:	b2db      	uxtb	r3, r3
 8015dbc:	4618      	mov	r0, r3
 8015dbe:	370c      	adds	r7, #12
 8015dc0:	46bd      	mov	sp, r7
 8015dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015dc4:	7fefffff 	.word	0x7fefffff

08015dc8 <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 8015dc8:	b590      	push	{r4, r7, lr}
 8015dca:	b083      	sub	sp, #12
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	ed87 0b00 	vstr	d0, [r7]
 8015dd2:	2301      	movs	r3, #1
 8015dd4:	461c      	mov	r4, r3
 8015dd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015dda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8015dde:	f7ea fcd3 	bl	8000788 <__aeabi_dcmpun>
 8015de2:	4603      	mov	r3, r0
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d101      	bne.n	8015dec <_ZSt5isnand+0x24>
 8015de8:	2300      	movs	r3, #0
 8015dea:	461c      	mov	r4, r3
 8015dec:	b2e3      	uxtb	r3, r4
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	bf14      	ite	ne
 8015df2:	2301      	movne	r3, #1
 8015df4:	2300      	moveq	r3, #0
 8015df6:	b2db      	uxtb	r3, r3
 8015df8:	4618      	mov	r0, r3
 8015dfa:	370c      	adds	r7, #12
 8015dfc:	46bd      	mov	sp, r7
 8015dfe:	bd90      	pop	{r4, r7, pc}

08015e00 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult>:

// There is a possibility that a compiler provides fork but not waitpid.
#if !defined(CPPUTEST_HAVE_FORK) || !defined(CPPUTEST_HAVE_WAITPID)

static void GccPlatformSpecificRunTestInASeperateProcess(UtestShell* shell, TestPlugin*, TestResult* result)
{
 8015e00:	b590      	push	{r4, r7, lr}
 8015e02:	b095      	sub	sp, #84	; 0x54
 8015e04:	af00      	add	r7, sp, #0
 8015e06:	60f8      	str	r0, [r7, #12]
 8015e08:	60b9      	str	r1, [r7, #8]
 8015e0a:	607a      	str	r2, [r7, #4]
    result->addFailure(TestFailure(shell, "-p doesn't work on this platform, as it is lacking fork.\b"));
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	681b      	ldr	r3, [r3, #0]
 8015e10:	3334      	adds	r3, #52	; 0x34
 8015e12:	681c      	ldr	r4, [r3, #0]
 8015e14:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015e18:	490f      	ldr	r1, [pc, #60]	; (8015e58 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult+0x58>)
 8015e1a:	4618      	mov	r0, r3
 8015e1c:	f7f8 f8b3 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8015e20:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8015e24:	f107 0314 	add.w	r3, r7, #20
 8015e28:	68f9      	ldr	r1, [r7, #12]
 8015e2a:	4618      	mov	r0, r3
 8015e2c:	f7f9 ff0a 	bl	800fc44 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 8015e30:	f107 0314 	add.w	r3, r7, #20
 8015e34:	4619      	mov	r1, r3
 8015e36:	6878      	ldr	r0, [r7, #4]
 8015e38:	47a0      	blx	r4
 8015e3a:	f107 0314 	add.w	r3, r7, #20
 8015e3e:	4618      	mov	r0, r3
 8015e40:	f7f9 ffc0 	bl	800fdc4 <_ZN11TestFailureD1Ev>
 8015e44:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015e48:	4618      	mov	r0, r3
 8015e4a:	f7f8 fc54 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 8015e4e:	bf00      	nop
 8015e50:	3754      	adds	r7, #84	; 0x54
 8015e52:	46bd      	mov	sp, r7
 8015e54:	bd90      	pop	{r4, r7, pc}
 8015e56:	bf00      	nop
 8015e58:	08026af4 	.word	0x08026af4

08015e5c <_Z37PlatformSpecificGetWorkingEnvironmentv>:
}

#endif

TestOutput::WorkingEnvironment PlatformSpecificGetWorkingEnvironment()
{
 8015e5c:	b480      	push	{r7}
 8015e5e:	af00      	add	r7, sp, #0
    return TestOutput::eclipse;
 8015e60:	2301      	movs	r3, #1
}
 8015e62:	4618      	mov	r0, r3
 8015e64:	46bd      	mov	sp, r7
 8015e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e6a:	4770      	bx	lr

08015e6c <PlatformSpecificSetJmpImplementation>:
int (*PlatformSpecificWaitPid)(int, int*, int) = PlatformSpecificWaitPidImplementation;

extern "C" {

static int PlatformSpecificSetJmpImplementation(void (*function) (void* data), void* data)
{
 8015e6c:	b580      	push	{r7, lr}
 8015e6e:	b082      	sub	sp, #8
 8015e70:	af00      	add	r7, sp, #0
 8015e72:	6078      	str	r0, [r7, #4]
 8015e74:	6039      	str	r1, [r7, #0]
    if (0 == setjmp(test_exit_jmp_buf[jmp_buf_index])) {
 8015e76:	4b13      	ldr	r3, [pc, #76]	; (8015ec4 <PlatformSpecificSetJmpImplementation+0x58>)
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	225c      	movs	r2, #92	; 0x5c
 8015e7c:	fb02 f303 	mul.w	r3, r2, r3
 8015e80:	4a11      	ldr	r2, [pc, #68]	; (8015ec8 <PlatformSpecificSetJmpImplementation+0x5c>)
 8015e82:	4413      	add	r3, r2
 8015e84:	4618      	mov	r0, r3
 8015e86:	f7ea f9cb 	bl	8000220 <setjmp>
 8015e8a:	4603      	mov	r3, r0
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	bf0c      	ite	eq
 8015e90:	2301      	moveq	r3, #1
 8015e92:	2300      	movne	r3, #0
 8015e94:	b2db      	uxtb	r3, r3
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d00e      	beq.n	8015eb8 <PlatformSpecificSetJmpImplementation+0x4c>
        jmp_buf_index++;
 8015e9a:	4b0a      	ldr	r3, [pc, #40]	; (8015ec4 <PlatformSpecificSetJmpImplementation+0x58>)
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	3301      	adds	r3, #1
 8015ea0:	4a08      	ldr	r2, [pc, #32]	; (8015ec4 <PlatformSpecificSetJmpImplementation+0x58>)
 8015ea2:	6013      	str	r3, [r2, #0]
        function(data);
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	6838      	ldr	r0, [r7, #0]
 8015ea8:	4798      	blx	r3
        jmp_buf_index--;
 8015eaa:	4b06      	ldr	r3, [pc, #24]	; (8015ec4 <PlatformSpecificSetJmpImplementation+0x58>)
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	3b01      	subs	r3, #1
 8015eb0:	4a04      	ldr	r2, [pc, #16]	; (8015ec4 <PlatformSpecificSetJmpImplementation+0x58>)
 8015eb2:	6013      	str	r3, [r2, #0]
        return 1;
 8015eb4:	2301      	movs	r3, #1
 8015eb6:	e000      	b.n	8015eba <PlatformSpecificSetJmpImplementation+0x4e>
    }
    return 0;
 8015eb8:	2300      	movs	r3, #0
}
 8015eba:	4618      	mov	r0, r3
 8015ebc:	3708      	adds	r7, #8
 8015ebe:	46bd      	mov	sp, r7
 8015ec0:	bd80      	pop	{r7, pc}
 8015ec2:	bf00      	nop
 8015ec4:	20000f1c 	.word	0x20000f1c
 8015ec8:	20000b84 	.word	0x20000b84

08015ecc <PlatformSpecificLongJmpImplementation>:
 #if !((__clang_major__ == 3) && (__clang_minor__ == 0))
 _no_return_
 #endif
#endif
static void PlatformSpecificLongJmpImplementation()
{
 8015ecc:	b580      	push	{r7, lr}
 8015ece:	af00      	add	r7, sp, #0
    jmp_buf_index--;
 8015ed0:	4b07      	ldr	r3, [pc, #28]	; (8015ef0 <PlatformSpecificLongJmpImplementation+0x24>)
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	3b01      	subs	r3, #1
 8015ed6:	4a06      	ldr	r2, [pc, #24]	; (8015ef0 <PlatformSpecificLongJmpImplementation+0x24>)
 8015ed8:	6013      	str	r3, [r2, #0]
    longjmp(test_exit_jmp_buf[jmp_buf_index], 1);
 8015eda:	4b05      	ldr	r3, [pc, #20]	; (8015ef0 <PlatformSpecificLongJmpImplementation+0x24>)
 8015edc:	681b      	ldr	r3, [r3, #0]
 8015ede:	225c      	movs	r2, #92	; 0x5c
 8015ee0:	fb02 f303 	mul.w	r3, r2, r3
 8015ee4:	4a03      	ldr	r2, [pc, #12]	; (8015ef4 <PlatformSpecificLongJmpImplementation+0x28>)
 8015ee6:	4413      	add	r3, r2
 8015ee8:	2101      	movs	r1, #1
 8015eea:	4618      	mov	r0, r3
 8015eec:	f7ea f99e 	bl	800022c <longjmp>
 8015ef0:	20000f1c 	.word	0x20000f1c
 8015ef4:	20000b84 	.word	0x20000b84

08015ef8 <TimeInMillisImplementation>:
void (*PlatformSpecificRestoreJumpBuffer)() = PlatformSpecificRestoreJumpBufferImplementation;

///////////// Time in millis

static long TimeInMillisImplementation()
{
 8015ef8:	b480      	push	{r7}
 8015efa:	af00      	add	r7, sp, #0
    struct timeval tv;
    struct timezone tz;
    gettimeofday(&tv, &tz);
    return (tv.tv_sec * 1000) + (long)((double)tv.tv_usec * 0.001);
#else
    return 0;
 8015efc:	2300      	movs	r3, #0
#endif
}
 8015efe:	4618      	mov	r0, r3
 8015f00:	46bd      	mov	sp, r7
 8015f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f06:	4770      	bx	lr

08015f08 <TimeStringImplementation>:

static const char* TimeStringImplementation()
{
 8015f08:	b580      	push	{r7, lr}
 8015f0a:	b084      	sub	sp, #16
 8015f0c:	af00      	add	r7, sp, #0
    time_t theTime = time(NULLPTR);
 8015f0e:	2000      	movs	r0, #0
 8015f10:	f00e ec4e 	blx	80247b0 <__time_veneer>
 8015f14:	4602      	mov	r2, r0
 8015f16:	460b      	mov	r3, r1
 8015f18:	e9c7 2300 	strd	r2, r3, [r7]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
    static struct tm lastlocaltime;
    localtime_s(&lastlocaltime, &theTime);
    struct tm *tmp = &lastlocaltime;
#else
    struct tm *tmp = localtime(&theTime);
 8015f1c:	463b      	mov	r3, r7
 8015f1e:	4618      	mov	r0, r3
 8015f20:	f00b fb7a 	bl	8021618 <localtime>
 8015f24:	60f8      	str	r0, [r7, #12]
#endif
    strftime(dateTime, 80, "%Y-%m-%dT%H:%M:%S", tmp);
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	4a04      	ldr	r2, [pc, #16]	; (8015f3c <TimeStringImplementation+0x34>)
 8015f2a:	2150      	movs	r1, #80	; 0x50
 8015f2c:	4804      	ldr	r0, [pc, #16]	; (8015f40 <TimeStringImplementation+0x38>)
 8015f2e:	f00c fc83 	bl	8022838 <strftime>
    return dateTime;
 8015f32:	4b03      	ldr	r3, [pc, #12]	; (8015f40 <TimeStringImplementation+0x38>)
}
 8015f34:	4618      	mov	r0, r3
 8015f36:	3710      	adds	r7, #16
 8015f38:	46bd      	mov	sp, r7
 8015f3a:	bd80      	pop	{r7, pc}
 8015f3c:	08026b30 	.word	0x08026b30
 8015f40:	20000f20 	.word	0x20000f20

08015f44 <PlatformSpecificFOpenImplementation>:
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
#endif
int (*PlatformSpecificVSNprintf)(char *str, size_t size, const char* format, va_list va_args_list) = vsnprintf;

static PlatformSpecificFile PlatformSpecificFOpenImplementation(const char* filename, const char* flag)
{
 8015f44:	b580      	push	{r7, lr}
 8015f46:	b082      	sub	sp, #8
 8015f48:	af00      	add	r7, sp, #0
 8015f4a:	6078      	str	r0, [r7, #4]
 8015f4c:	6039      	str	r1, [r7, #0]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
  FILE* file;
   fopen_s(&file, filename, flag);
   return file;
#else
   return fopen(filename, flag);
 8015f4e:	6839      	ldr	r1, [r7, #0]
 8015f50:	6878      	ldr	r0, [r7, #4]
 8015f52:	f00b f997 	bl	8021284 <fopen>
 8015f56:	4603      	mov	r3, r0
#endif
}
 8015f58:	4618      	mov	r0, r3
 8015f5a:	3708      	adds	r7, #8
 8015f5c:	46bd      	mov	sp, r7
 8015f5e:	bd80      	pop	{r7, pc}

08015f60 <PlatformSpecificFPutsImplementation>:

static void PlatformSpecificFPutsImplementation(const char* str, PlatformSpecificFile file)
{
 8015f60:	b580      	push	{r7, lr}
 8015f62:	b082      	sub	sp, #8
 8015f64:	af00      	add	r7, sp, #0
 8015f66:	6078      	str	r0, [r7, #4]
 8015f68:	6039      	str	r1, [r7, #0]
   fputs(str, (FILE*)file);
 8015f6a:	6839      	ldr	r1, [r7, #0]
 8015f6c:	6878      	ldr	r0, [r7, #4]
 8015f6e:	f00b f9f7 	bl	8021360 <fputs>
}
 8015f72:	bf00      	nop
 8015f74:	3708      	adds	r7, #8
 8015f76:	46bd      	mov	sp, r7
 8015f78:	bd80      	pop	{r7, pc}

08015f7a <PlatformSpecificFCloseImplementation>:

static void PlatformSpecificFCloseImplementation(PlatformSpecificFile file)
{
 8015f7a:	b580      	push	{r7, lr}
 8015f7c:	b082      	sub	sp, #8
 8015f7e:	af00      	add	r7, sp, #0
 8015f80:	6078      	str	r0, [r7, #4]
   fclose((FILE*)file);
 8015f82:	6878      	ldr	r0, [r7, #4]
 8015f84:	f00a ff78 	bl	8020e78 <fclose>
}
 8015f88:	bf00      	nop
 8015f8a:	3708      	adds	r7, #8
 8015f8c:	46bd      	mov	sp, r7
 8015f8e:	bd80      	pop	{r7, pc}

08015f90 <PlatformSpecificFlushImplementation>:

static void PlatformSpecificFlushImplementation()
{
 8015f90:	b580      	push	{r7, lr}
 8015f92:	af00      	add	r7, sp, #0
  fflush(stdout);
 8015f94:	4b03      	ldr	r3, [pc, #12]	; (8015fa4 <PlatformSpecificFlushImplementation+0x14>)
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	689b      	ldr	r3, [r3, #8]
 8015f9a:	4618      	mov	r0, r3
 8015f9c:	f00b f836 	bl	802100c <fflush>
}
 8015fa0:	bf00      	nop
 8015fa2:	bd80      	pop	{r7, pc}
 8015fa4:	20000108 	.word	0x20000108

08015fa8 <IsNanImplementation>:
#if defined(__GNUC__) && (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ > 8))
#pragma GCC diagnostic ignored "-Wfloat-conversion"
#endif

static int IsNanImplementation(double d)
{
 8015fa8:	b580      	push	{r7, lr}
 8015faa:	b082      	sub	sp, #8
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	ed87 0b00 	vstr	d0, [r7]
    return isnan(d);
 8015fb2:	ed97 0b00 	vldr	d0, [r7]
 8015fb6:	f7ff ff07 	bl	8015dc8 <_ZSt5isnand>
 8015fba:	4603      	mov	r3, r0
}
 8015fbc:	4618      	mov	r0, r3
 8015fbe:	3708      	adds	r7, #8
 8015fc0:	46bd      	mov	sp, r7
 8015fc2:	bd80      	pop	{r7, pc}

08015fc4 <IsInfImplementation>:

static int IsInfImplementation(double d)
{
 8015fc4:	b580      	push	{r7, lr}
 8015fc6:	b082      	sub	sp, #8
 8015fc8:	af00      	add	r7, sp, #0
 8015fca:	ed87 0b00 	vstr	d0, [r7]
    return isinf(d);
 8015fce:	ed97 0b00 	vldr	d0, [r7]
 8015fd2:	f7ff fec9 	bl	8015d68 <_ZSt5isinfd>
 8015fd6:	4603      	mov	r3, r0
}
 8015fd8:	4618      	mov	r0, r3
 8015fda:	3708      	adds	r7, #8
 8015fdc:	46bd      	mov	sp, r7
 8015fde:	bd80      	pop	{r7, pc}

08015fe0 <PThreadMutexCreate>:
int (*PlatformSpecificIsNan)(double) = IsNanImplementation;
int (*PlatformSpecificIsInf)(double) = IsInfImplementation;
int (*PlatformSpecificAtExit)(void(*func)(void)) = atexit;  /// this was undefined before

static PlatformSpecificMutex PThreadMutexCreate(void)
{
 8015fe0:	b480      	push	{r7}
 8015fe2:	af00      	add	r7, sp, #0
    pthread_mutex_t *mutex = new pthread_mutex_t;

    pthread_mutex_init(mutex, NULLPTR);
    return (PlatformSpecificMutex)mutex;
#else
    return NULLPTR;
 8015fe4:	2300      	movs	r3, #0
#endif

}
 8015fe6:	4618      	mov	r0, r3
 8015fe8:	46bd      	mov	sp, r7
 8015fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fee:	4770      	bx	lr

08015ff0 <PThreadMutexLock>:
{
    pthread_mutex_lock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexLock(PlatformSpecificMutex)
{
 8015ff0:	b480      	push	{r7}
 8015ff2:	b083      	sub	sp, #12
 8015ff4:	af00      	add	r7, sp, #0
 8015ff6:	6078      	str	r0, [r7, #4]
}
 8015ff8:	bf00      	nop
 8015ffa:	370c      	adds	r7, #12
 8015ffc:	46bd      	mov	sp, r7
 8015ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016002:	4770      	bx	lr

08016004 <PThreadMutexUnlock>:
{
    pthread_mutex_unlock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexUnlock(PlatformSpecificMutex)
{
 8016004:	b480      	push	{r7}
 8016006:	b083      	sub	sp, #12
 8016008:	af00      	add	r7, sp, #0
 801600a:	6078      	str	r0, [r7, #4]
}
 801600c:	bf00      	nop
 801600e:	370c      	adds	r7, #12
 8016010:	46bd      	mov	sp, r7
 8016012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016016:	4770      	bx	lr

08016018 <PThreadMutexDestroy>:
    pthread_mutex_destroy(mutex);
    delete mutex;
}
#else
static void PThreadMutexDestroy(PlatformSpecificMutex)
{
 8016018:	b480      	push	{r7}
 801601a:	b083      	sub	sp, #12
 801601c:	af00      	add	r7, sp, #0
 801601e:	6078      	str	r0, [r7, #4]
}
 8016020:	bf00      	nop
 8016022:	370c      	adds	r7, #12
 8016024:	46bd      	mov	sp, r7
 8016026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801602a:	4770      	bx	lr

0801602c <_ZN20CommandLineArgumentsC1EiPKPKc>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/CommandLineArguments.h"
#include "CppUTest/PlatformSpecificFunctions.h"

CommandLineArguments::CommandLineArguments(int ac, const char *const *av) :
 801602c:	b580      	push	{r7, lr}
 801602e:	b084      	sub	sp, #16
 8016030:	af00      	add	r7, sp, #0
 8016032:	60f8      	str	r0, [r7, #12]
 8016034:	60b9      	str	r1, [r7, #8]
 8016036:	607a      	str	r2, [r7, #4]
    ac_(ac), av_(av), needHelp_(false), verbose_(false), veryVerbose_(false), color_(false), runTestsAsSeperateProcess_(false), listTestGroupNames_(false), listTestGroupAndCaseNames_(false), listTestLocations_(false), runIgnored_(false), reversing_(false), crashOnFail_(false), shuffling_(false), shufflingPreSeeded_(false), repeat_(1), shuffleSeed_(0), groupFilters_(NULLPTR), nameFilters_(NULLPTR), outputType_(OUTPUT_ECLIPSE)
 8016038:	4a25      	ldr	r2, [pc, #148]	; (80160d0 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa4>)
 801603a:	68fb      	ldr	r3, [r7, #12]
 801603c:	601a      	str	r2, [r3, #0]
 801603e:	68fb      	ldr	r3, [r7, #12]
 8016040:	68ba      	ldr	r2, [r7, #8]
 8016042:	605a      	str	r2, [r3, #4]
 8016044:	68fb      	ldr	r3, [r7, #12]
 8016046:	687a      	ldr	r2, [r7, #4]
 8016048:	609a      	str	r2, [r3, #8]
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	2200      	movs	r2, #0
 801604e:	731a      	strb	r2, [r3, #12]
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	2200      	movs	r2, #0
 8016054:	735a      	strb	r2, [r3, #13]
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	2200      	movs	r2, #0
 801605a:	739a      	strb	r2, [r3, #14]
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	2200      	movs	r2, #0
 8016060:	73da      	strb	r2, [r3, #15]
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	2200      	movs	r2, #0
 8016066:	741a      	strb	r2, [r3, #16]
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	2200      	movs	r2, #0
 801606c:	745a      	strb	r2, [r3, #17]
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	2200      	movs	r2, #0
 8016072:	749a      	strb	r2, [r3, #18]
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	2200      	movs	r2, #0
 8016078:	74da      	strb	r2, [r3, #19]
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	2200      	movs	r2, #0
 801607e:	751a      	strb	r2, [r3, #20]
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	2200      	movs	r2, #0
 8016084:	755a      	strb	r2, [r3, #21]
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	2200      	movs	r2, #0
 801608a:	759a      	strb	r2, [r3, #22]
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	2200      	movs	r2, #0
 8016090:	75da      	strb	r2, [r3, #23]
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	2200      	movs	r2, #0
 8016096:	761a      	strb	r2, [r3, #24]
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	2201      	movs	r2, #1
 801609c:	61da      	str	r2, [r3, #28]
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	2200      	movs	r2, #0
 80160a2:	621a      	str	r2, [r3, #32]
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	2200      	movs	r2, #0
 80160a8:	625a      	str	r2, [r3, #36]	; 0x24
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	2200      	movs	r2, #0
 80160ae:	629a      	str	r2, [r3, #40]	; 0x28
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	2200      	movs	r2, #0
 80160b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	3330      	adds	r3, #48	; 0x30
 80160bc:	4905      	ldr	r1, [pc, #20]	; (80160d4 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa8>)
 80160be:	4618      	mov	r0, r3
 80160c0:	f7f7 ff61 	bl	800df86 <_ZN12SimpleStringC1EPKc>
{
}
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	4618      	mov	r0, r3
 80160c8:	3710      	adds	r7, #16
 80160ca:	46bd      	mov	sp, r7
 80160cc:	bd80      	pop	{r7, pc}
 80160ce:	bf00      	nop
 80160d0:	0802a728 	.word	0x0802a728
 80160d4:	08026b44 	.word	0x08026b44

080160d8 <_ZN10TestFilterD1Ev>:
#ifndef TESTFILTER_H_
#define TESTFILTER_H_

#include "SimpleString.h"

class TestFilter
 80160d8:	b580      	push	{r7, lr}
 80160da:	b082      	sub	sp, #8
 80160dc:	af00      	add	r7, sp, #0
 80160de:	6078      	str	r0, [r7, #4]
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	4618      	mov	r0, r3
 80160e4:	f7f8 fb07 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	4618      	mov	r0, r3
 80160ec:	3708      	adds	r7, #8
 80160ee:	46bd      	mov	sp, r7
 80160f0:	bd80      	pop	{r7, pc}
	...

080160f4 <_ZN20CommandLineArgumentsD1Ev>:

CommandLineArguments::~CommandLineArguments()
 80160f4:	b590      	push	{r4, r7, lr}
 80160f6:	b085      	sub	sp, #20
 80160f8:	af00      	add	r7, sp, #0
 80160fa:	6078      	str	r0, [r7, #4]
 80160fc:	4a20      	ldr	r2, [pc, #128]	; (8016180 <_ZN20CommandLineArgumentsD1Ev+0x8c>)
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	601a      	str	r2, [r3, #0]
{
    while(groupFilters_) {
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016106:	2b00      	cmp	r3, #0
 8016108:	d015      	beq.n	8016136 <_ZN20CommandLineArgumentsD1Ev+0x42>
        TestFilter* current = groupFilters_;
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801610e:	60fb      	str	r3, [r7, #12]
        groupFilters_ = groupFilters_->getNext();
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016114:	4618      	mov	r0, r3
 8016116:	f00a fda4 	bl	8020c62 <_ZNK10TestFilter7getNextEv>
 801611a:	4602      	mov	r2, r0
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	625a      	str	r2, [r3, #36]	; 0x24
        delete current;
 8016120:	68fc      	ldr	r4, [r7, #12]
 8016122:	2c00      	cmp	r4, #0
 8016124:	d0ed      	beq.n	8016102 <_ZN20CommandLineArgumentsD1Ev+0xe>
 8016126:	4620      	mov	r0, r4
 8016128:	f7ff ffd6 	bl	80160d8 <_ZN10TestFilterD1Ev>
 801612c:	2110      	movs	r1, #16
 801612e:	4620      	mov	r0, r4
 8016130:	f7f5 fb7a 	bl	800b828 <_ZdlPvj>
    while(groupFilters_) {
 8016134:	e7e5      	b.n	8016102 <_ZN20CommandLineArgumentsD1Ev+0xe>
    }
    while(nameFilters_) {
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801613a:	2b00      	cmp	r3, #0
 801613c:	d015      	beq.n	801616a <_ZN20CommandLineArgumentsD1Ev+0x76>
        TestFilter* current = nameFilters_;
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016142:	60bb      	str	r3, [r7, #8]
        nameFilters_ = nameFilters_->getNext();
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016148:	4618      	mov	r0, r3
 801614a:	f00a fd8a 	bl	8020c62 <_ZNK10TestFilter7getNextEv>
 801614e:	4602      	mov	r2, r0
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	629a      	str	r2, [r3, #40]	; 0x28
        delete current;
 8016154:	68bc      	ldr	r4, [r7, #8]
 8016156:	2c00      	cmp	r4, #0
 8016158:	d0ed      	beq.n	8016136 <_ZN20CommandLineArgumentsD1Ev+0x42>
 801615a:	4620      	mov	r0, r4
 801615c:	f7ff ffbc 	bl	80160d8 <_ZN10TestFilterD1Ev>
 8016160:	2110      	movs	r1, #16
 8016162:	4620      	mov	r0, r4
 8016164:	f7f5 fb60 	bl	800b828 <_ZdlPvj>
    while(nameFilters_) {
 8016168:	e7e5      	b.n	8016136 <_ZN20CommandLineArgumentsD1Ev+0x42>
CommandLineArguments::~CommandLineArguments()
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	3330      	adds	r3, #48	; 0x30
 801616e:	4618      	mov	r0, r3
 8016170:	f7f8 fac1 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    }
}
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	4618      	mov	r0, r3
 8016178:	3714      	adds	r7, #20
 801617a:	46bd      	mov	sp, r7
 801617c:	bd90      	pop	{r4, r7, pc}
 801617e:	bf00      	nop
 8016180:	0802a728 	.word	0x0802a728

08016184 <_ZN20CommandLineArgumentsD0Ev>:
CommandLineArguments::~CommandLineArguments()
 8016184:	b580      	push	{r7, lr}
 8016186:	b082      	sub	sp, #8
 8016188:	af00      	add	r7, sp, #0
 801618a:	6078      	str	r0, [r7, #4]
}
 801618c:	6878      	ldr	r0, [r7, #4]
 801618e:	f7ff ffb1 	bl	80160f4 <_ZN20CommandLineArgumentsD1Ev>
 8016192:	2138      	movs	r1, #56	; 0x38
 8016194:	6878      	ldr	r0, [r7, #4]
 8016196:	f7f5 fb47 	bl	800b828 <_ZdlPvj>
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	4618      	mov	r0, r3
 801619e:	3708      	adds	r7, #8
 80161a0:	46bd      	mov	sp, r7
 80161a2:	bd80      	pop	{r7, pc}

080161a4 <_ZN20CommandLineArguments5parseEP10TestPlugin>:

bool CommandLineArguments::parse(TestPlugin* plugin)
{
 80161a4:	b5b0      	push	{r4, r5, r7, lr}
 80161a6:	b0be      	sub	sp, #248	; 0xf8
 80161a8:	af02      	add	r7, sp, #8
 80161aa:	6078      	str	r0, [r7, #4]
 80161ac:	6039      	str	r1, [r7, #0]
 80161ae:	2400      	movs	r4, #0
    bool correctParameters = true;
 80161b0:	2301      	movs	r3, #1
 80161b2:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    for (int i = 1; i < ac_; i++) {
 80161b6:	2301      	movs	r3, #1
 80161b8:	613b      	str	r3, [r7, #16]
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	685a      	ldr	r2, [r3, #4]
 80161be:	693b      	ldr	r3, [r7, #16]
 80161c0:	429a      	cmp	r2, r3
 80161c2:	f340 83a4 	ble.w	801690e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76a>
        SimpleString argument = av_[i];
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	689a      	ldr	r2, [r3, #8]
 80161ca:	693b      	ldr	r3, [r7, #16]
 80161cc:	009b      	lsls	r3, r3, #2
 80161ce:	4413      	add	r3, r2
 80161d0:	681a      	ldr	r2, [r3, #0]
 80161d2:	f107 0308 	add.w	r3, r7, #8
 80161d6:	4611      	mov	r1, r2
 80161d8:	4618      	mov	r0, r3
 80161da:	f7f7 fed4 	bl	800df86 <_ZN12SimpleStringC1EPKc>

        if (argument == "-h") {
 80161de:	f107 0314 	add.w	r3, r7, #20
 80161e2:	49c8      	ldr	r1, [pc, #800]	; (8016504 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x360>)
 80161e4:	4618      	mov	r0, r3
 80161e6:	f7f7 fece 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80161ea:	f107 0214 	add.w	r2, r7, #20
 80161ee:	f107 0308 	add.w	r3, r7, #8
 80161f2:	4611      	mov	r1, r2
 80161f4:	4618      	mov	r0, r3
 80161f6:	f7f8 fa8a 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 80161fa:	4603      	mov	r3, r0
 80161fc:	461d      	mov	r5, r3
 80161fe:	f107 0314 	add.w	r3, r7, #20
 8016202:	4618      	mov	r0, r3
 8016204:	f7f8 fa77 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8016208:	2d00      	cmp	r5, #0
 801620a:	d006      	beq.n	801621a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76>
            needHelp_ = true;
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	2201      	movs	r2, #1
 8016210:	731a      	strb	r2, [r3, #12]
            correctParameters = false;
 8016212:	2300      	movs	r3, #0
 8016214:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8016218:	e366      	b.n	80168e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        }
        else if (argument == "-v") verbose_ = true;
 801621a:	f107 031c 	add.w	r3, r7, #28
 801621e:	49ba      	ldr	r1, [pc, #744]	; (8016508 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x364>)
 8016220:	4618      	mov	r0, r3
 8016222:	f7f7 feb0 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8016226:	f107 021c 	add.w	r2, r7, #28
 801622a:	f107 0308 	add.w	r3, r7, #8
 801622e:	4611      	mov	r1, r2
 8016230:	4618      	mov	r0, r3
 8016232:	f7f8 fa6c 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 8016236:	4603      	mov	r3, r0
 8016238:	461d      	mov	r5, r3
 801623a:	f107 031c 	add.w	r3, r7, #28
 801623e:	4618      	mov	r0, r3
 8016240:	f7f8 fa59 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8016244:	2d00      	cmp	r5, #0
 8016246:	d003      	beq.n	8016250 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xac>
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	2201      	movs	r2, #1
 801624c:	735a      	strb	r2, [r3, #13]
 801624e:	e34b      	b.n	80168e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-vv") veryVerbose_ = true;
 8016250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016254:	49ad      	ldr	r1, [pc, #692]	; (801650c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x368>)
 8016256:	4618      	mov	r0, r3
 8016258:	f7f7 fe95 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801625c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8016260:	f107 0308 	add.w	r3, r7, #8
 8016264:	4611      	mov	r1, r2
 8016266:	4618      	mov	r0, r3
 8016268:	f7f8 fa51 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801626c:	4603      	mov	r3, r0
 801626e:	461d      	mov	r5, r3
 8016270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016274:	4618      	mov	r0, r3
 8016276:	f7f8 fa3e 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801627a:	2d00      	cmp	r5, #0
 801627c:	d003      	beq.n	8016286 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xe2>
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	2201      	movs	r2, #1
 8016282:	739a      	strb	r2, [r3, #14]
 8016284:	e330      	b.n	80168e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-c") color_ = true;
 8016286:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801628a:	49a1      	ldr	r1, [pc, #644]	; (8016510 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x36c>)
 801628c:	4618      	mov	r0, r3
 801628e:	f7f7 fe7a 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8016292:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8016296:	f107 0308 	add.w	r3, r7, #8
 801629a:	4611      	mov	r1, r2
 801629c:	4618      	mov	r0, r3
 801629e:	f7f8 fa36 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 80162a2:	4603      	mov	r3, r0
 80162a4:	461d      	mov	r5, r3
 80162a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80162aa:	4618      	mov	r0, r3
 80162ac:	f7f8 fa23 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80162b0:	2d00      	cmp	r5, #0
 80162b2:	d003      	beq.n	80162bc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x118>
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	2201      	movs	r2, #1
 80162b8:	73da      	strb	r2, [r3, #15]
 80162ba:	e315      	b.n	80168e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-p") runTestsAsSeperateProcess_ = true;
 80162bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80162c0:	4994      	ldr	r1, [pc, #592]	; (8016514 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x370>)
 80162c2:	4618      	mov	r0, r3
 80162c4:	f7f7 fe5f 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80162c8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80162cc:	f107 0308 	add.w	r3, r7, #8
 80162d0:	4611      	mov	r1, r2
 80162d2:	4618      	mov	r0, r3
 80162d4:	f7f8 fa1b 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 80162d8:	4603      	mov	r3, r0
 80162da:	461d      	mov	r5, r3
 80162dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80162e0:	4618      	mov	r0, r3
 80162e2:	f7f8 fa08 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80162e6:	2d00      	cmp	r5, #0
 80162e8:	d003      	beq.n	80162f2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x14e>
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	2201      	movs	r2, #1
 80162ee:	741a      	strb	r2, [r3, #16]
 80162f0:	e2fa      	b.n	80168e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-b") reversing_ = true;
 80162f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80162f6:	4988      	ldr	r1, [pc, #544]	; (8016518 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x374>)
 80162f8:	4618      	mov	r0, r3
 80162fa:	f7f7 fe44 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80162fe:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8016302:	f107 0308 	add.w	r3, r7, #8
 8016306:	4611      	mov	r1, r2
 8016308:	4618      	mov	r0, r3
 801630a:	f7f8 fa00 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801630e:	4603      	mov	r3, r0
 8016310:	461d      	mov	r5, r3
 8016312:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016316:	4618      	mov	r0, r3
 8016318:	f7f8 f9ed 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801631c:	2d00      	cmp	r5, #0
 801631e:	d003      	beq.n	8016328 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x184>
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	2201      	movs	r2, #1
 8016324:	755a      	strb	r2, [r3, #21]
 8016326:	e2df      	b.n	80168e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-lg") listTestGroupNames_ = true;
 8016328:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801632c:	497b      	ldr	r1, [pc, #492]	; (801651c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x378>)
 801632e:	4618      	mov	r0, r3
 8016330:	f7f7 fe29 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8016334:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8016338:	f107 0308 	add.w	r3, r7, #8
 801633c:	4611      	mov	r1, r2
 801633e:	4618      	mov	r0, r3
 8016340:	f7f8 f9e5 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 8016344:	4603      	mov	r3, r0
 8016346:	461d      	mov	r5, r3
 8016348:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801634c:	4618      	mov	r0, r3
 801634e:	f7f8 f9d2 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8016352:	2d00      	cmp	r5, #0
 8016354:	d003      	beq.n	801635e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1ba>
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	2201      	movs	r2, #1
 801635a:	745a      	strb	r2, [r3, #17]
 801635c:	e2c4      	b.n	80168e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ln") listTestGroupAndCaseNames_ = true;
 801635e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8016362:	496f      	ldr	r1, [pc, #444]	; (8016520 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x37c>)
 8016364:	4618      	mov	r0, r3
 8016366:	f7f7 fe0e 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801636a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801636e:	f107 0308 	add.w	r3, r7, #8
 8016372:	4611      	mov	r1, r2
 8016374:	4618      	mov	r0, r3
 8016376:	f7f8 f9ca 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801637a:	4603      	mov	r3, r0
 801637c:	461d      	mov	r5, r3
 801637e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8016382:	4618      	mov	r0, r3
 8016384:	f7f8 f9b7 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8016388:	2d00      	cmp	r5, #0
 801638a:	d003      	beq.n	8016394 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1f0>
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	2201      	movs	r2, #1
 8016390:	749a      	strb	r2, [r3, #18]
 8016392:	e2a9      	b.n	80168e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ll") listTestLocations_ = true;
 8016394:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8016398:	4962      	ldr	r1, [pc, #392]	; (8016524 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x380>)
 801639a:	4618      	mov	r0, r3
 801639c:	f7f7 fdf3 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80163a0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80163a4:	f107 0308 	add.w	r3, r7, #8
 80163a8:	4611      	mov	r1, r2
 80163aa:	4618      	mov	r0, r3
 80163ac:	f7f8 f9af 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 80163b0:	4603      	mov	r3, r0
 80163b2:	461d      	mov	r5, r3
 80163b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80163b8:	4618      	mov	r0, r3
 80163ba:	f7f8 f99c 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80163be:	2d00      	cmp	r5, #0
 80163c0:	d003      	beq.n	80163ca <_ZN20CommandLineArguments5parseEP10TestPlugin+0x226>
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	2201      	movs	r2, #1
 80163c6:	74da      	strb	r2, [r3, #19]
 80163c8:	e28e      	b.n	80168e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ri") runIgnored_ = true;
 80163ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80163ce:	4956      	ldr	r1, [pc, #344]	; (8016528 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x384>)
 80163d0:	4618      	mov	r0, r3
 80163d2:	f7f7 fdd8 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80163d6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80163da:	f107 0308 	add.w	r3, r7, #8
 80163de:	4611      	mov	r1, r2
 80163e0:	4618      	mov	r0, r3
 80163e2:	f7f8 f994 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 80163e6:	4603      	mov	r3, r0
 80163e8:	461d      	mov	r5, r3
 80163ea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80163ee:	4618      	mov	r0, r3
 80163f0:	f7f8 f981 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80163f4:	2d00      	cmp	r5, #0
 80163f6:	d003      	beq.n	8016400 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x25c>
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	2201      	movs	r2, #1
 80163fc:	751a      	strb	r2, [r3, #20]
 80163fe:	e273      	b.n	80168e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-f") crashOnFail_ = true;
 8016400:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016404:	4949      	ldr	r1, [pc, #292]	; (801652c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x388>)
 8016406:	4618      	mov	r0, r3
 8016408:	f7f7 fdbd 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801640c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8016410:	f107 0308 	add.w	r3, r7, #8
 8016414:	4611      	mov	r1, r2
 8016416:	4618      	mov	r0, r3
 8016418:	f7f8 f979 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801641c:	4603      	mov	r3, r0
 801641e:	461d      	mov	r5, r3
 8016420:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016424:	4618      	mov	r0, r3
 8016426:	f7f8 f966 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801642a:	2d00      	cmp	r5, #0
 801642c:	d003      	beq.n	8016436 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x292>
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	2201      	movs	r2, #1
 8016432:	759a      	strb	r2, [r3, #22]
 8016434:	e258      	b.n	80168e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-r")) setRepeatCount(ac_, av_, i);
 8016436:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801643a:	493d      	ldr	r1, [pc, #244]	; (8016530 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x38c>)
 801643c:	4618      	mov	r0, r3
 801643e:	f7f7 fda2 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8016442:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8016446:	f107 0308 	add.w	r3, r7, #8
 801644a:	4611      	mov	r1, r2
 801644c:	4618      	mov	r0, r3
 801644e:	f7f7 fe5e 	bl	800e10e <_ZNK12SimpleString10startsWithERKS_>
 8016452:	4603      	mov	r3, r0
 8016454:	461d      	mov	r5, r3
 8016456:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801645a:	4618      	mov	r0, r3
 801645c:	f7f8 f94b 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8016460:	2d00      	cmp	r5, #0
 8016462:	d009      	beq.n	8016478 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x2d4>
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	6859      	ldr	r1, [r3, #4]
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	689a      	ldr	r2, [r3, #8]
 801646c:	f107 0310 	add.w	r3, r7, #16
 8016470:	6878      	ldr	r0, [r7, #4]
 8016472:	f000 fb33 	bl	8016adc <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>
 8016476:	e237      	b.n	80168e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-g")) addGroupFilter(ac_, av_, i);
 8016478:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801647c:	492d      	ldr	r1, [pc, #180]	; (8016534 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x390>)
 801647e:	4618      	mov	r0, r3
 8016480:	f7f7 fd81 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8016484:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8016488:	f107 0308 	add.w	r3, r7, #8
 801648c:	4611      	mov	r1, r2
 801648e:	4618      	mov	r0, r3
 8016490:	f7f7 fe3d 	bl	800e10e <_ZNK12SimpleString10startsWithERKS_>
 8016494:	4603      	mov	r3, r0
 8016496:	461d      	mov	r5, r3
 8016498:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801649c:	4618      	mov	r0, r3
 801649e:	f7f8 f92a 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80164a2:	2d00      	cmp	r5, #0
 80164a4:	d009      	beq.n	80164ba <_ZN20CommandLineArguments5parseEP10TestPlugin+0x316>
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	6859      	ldr	r1, [r3, #4]
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	689a      	ldr	r2, [r3, #8]
 80164ae:	f107 0310 	add.w	r3, r7, #16
 80164b2:	6878      	ldr	r0, [r7, #4]
 80164b4:	f000 fc40 	bl	8016d38 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>
 80164b8:	e216      	b.n	80168e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-t")) correctParameters = addGroupDotNameFilter(ac_, av_, i);
 80164ba:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80164be:	491e      	ldr	r1, [pc, #120]	; (8016538 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x394>)
 80164c0:	4618      	mov	r0, r3
 80164c2:	f7f7 fd60 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80164c6:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80164ca:	f107 0308 	add.w	r3, r7, #8
 80164ce:	4611      	mov	r1, r2
 80164d0:	4618      	mov	r0, r3
 80164d2:	f7f7 fe1c 	bl	800e10e <_ZNK12SimpleString10startsWithERKS_>
 80164d6:	4603      	mov	r3, r0
 80164d8:	461d      	mov	r5, r3
 80164da:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80164de:	4618      	mov	r0, r3
 80164e0:	f7f8 f909 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80164e4:	2d00      	cmp	r5, #0
 80164e6:	d029      	beq.n	801653c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x398>
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	6859      	ldr	r1, [r3, #4]
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	689a      	ldr	r2, [r3, #8]
 80164f0:	f107 0310 	add.w	r3, r7, #16
 80164f4:	6878      	ldr	r0, [r7, #4]
 80164f6:	f000 fc61 	bl	8016dbc <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>
 80164fa:	4603      	mov	r3, r0
 80164fc:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8016500:	e1f2      	b.n	80168e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 8016502:	bf00      	nop
 8016504:	08026b48 	.word	0x08026b48
 8016508:	08026b4c 	.word	0x08026b4c
 801650c:	08026b50 	.word	0x08026b50
 8016510:	08026b54 	.word	0x08026b54
 8016514:	08026b58 	.word	0x08026b58
 8016518:	08026b5c 	.word	0x08026b5c
 801651c:	08026b60 	.word	0x08026b60
 8016520:	08026b64 	.word	0x08026b64
 8016524:	08026b68 	.word	0x08026b68
 8016528:	08026b6c 	.word	0x08026b6c
 801652c:	08026b70 	.word	0x08026b70
 8016530:	08026b74 	.word	0x08026b74
 8016534:	08026b78 	.word	0x08026b78
 8016538:	08026b7c 	.word	0x08026b7c
        else if (argument.startsWith("-sg")) addStrictGroupFilter(ac_, av_, i);
 801653c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8016540:	49b9      	ldr	r1, [pc, #740]	; (8016828 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x684>)
 8016542:	4618      	mov	r0, r3
 8016544:	f7f7 fd1f 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8016548:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801654c:	f107 0308 	add.w	r3, r7, #8
 8016550:	4611      	mov	r1, r2
 8016552:	4618      	mov	r0, r3
 8016554:	f7f7 fddb 	bl	800e10e <_ZNK12SimpleString10startsWithERKS_>
 8016558:	4603      	mov	r3, r0
 801655a:	461d      	mov	r5, r3
 801655c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8016560:	4618      	mov	r0, r3
 8016562:	f7f8 f8c8 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8016566:	2d00      	cmp	r5, #0
 8016568:	d009      	beq.n	801657e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x3da>
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	6859      	ldr	r1, [r3, #4]
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	689a      	ldr	r2, [r3, #8]
 8016572:	f107 0310 	add.w	r3, r7, #16
 8016576:	6878      	ldr	r0, [r7, #4]
 8016578:	f000 fccc 	bl	8016f14 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>
 801657c:	e1b4      	b.n	80168e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xg")) addExcludeGroupFilter(ac_, av_, i);
 801657e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8016582:	49aa      	ldr	r1, [pc, #680]	; (801682c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x688>)
 8016584:	4618      	mov	r0, r3
 8016586:	f7f7 fcfe 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801658a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 801658e:	f107 0308 	add.w	r3, r7, #8
 8016592:	4611      	mov	r1, r2
 8016594:	4618      	mov	r0, r3
 8016596:	f7f7 fdba 	bl	800e10e <_ZNK12SimpleString10startsWithERKS_>
 801659a:	4603      	mov	r3, r0
 801659c:	461d      	mov	r5, r3
 801659e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80165a2:	4618      	mov	r0, r3
 80165a4:	f7f8 f8a7 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80165a8:	2d00      	cmp	r5, #0
 80165aa:	d009      	beq.n	80165c0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x41c>
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	6859      	ldr	r1, [r3, #4]
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	689a      	ldr	r2, [r3, #8]
 80165b4:	f107 0310 	add.w	r3, r7, #16
 80165b8:	6878      	ldr	r0, [r7, #4]
 80165ba:	f000 fcf1 	bl	8016fa0 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>
 80165be:	e193      	b.n	80168e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsg")) addExcludeStrictGroupFilter(ac_, av_, i);
 80165c0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80165c4:	499a      	ldr	r1, [pc, #616]	; (8016830 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x68c>)
 80165c6:	4618      	mov	r0, r3
 80165c8:	f7f7 fcdd 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80165cc:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80165d0:	f107 0308 	add.w	r3, r7, #8
 80165d4:	4611      	mov	r1, r2
 80165d6:	4618      	mov	r0, r3
 80165d8:	f7f7 fd99 	bl	800e10e <_ZNK12SimpleString10startsWithERKS_>
 80165dc:	4603      	mov	r3, r0
 80165de:	461d      	mov	r5, r3
 80165e0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80165e4:	4618      	mov	r0, r3
 80165e6:	f7f8 f886 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80165ea:	2d00      	cmp	r5, #0
 80165ec:	d009      	beq.n	8016602 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x45e>
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	6859      	ldr	r1, [r3, #4]
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	689a      	ldr	r2, [r3, #8]
 80165f6:	f107 0310 	add.w	r3, r7, #16
 80165fa:	6878      	ldr	r0, [r7, #4]
 80165fc:	f000 fd16 	bl	801702c <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>
 8016600:	e172      	b.n	80168e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-n")) addNameFilter(ac_, av_, i);
 8016602:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8016606:	498b      	ldr	r1, [pc, #556]	; (8016834 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x690>)
 8016608:	4618      	mov	r0, r3
 801660a:	f7f7 fcbc 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801660e:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8016612:	f107 0308 	add.w	r3, r7, #8
 8016616:	4611      	mov	r1, r2
 8016618:	4618      	mov	r0, r3
 801661a:	f7f7 fd78 	bl	800e10e <_ZNK12SimpleString10startsWithERKS_>
 801661e:	4603      	mov	r3, r0
 8016620:	461d      	mov	r5, r3
 8016622:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8016626:	4618      	mov	r0, r3
 8016628:	f7f8 f865 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801662c:	2d00      	cmp	r5, #0
 801662e:	d009      	beq.n	8016644 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4a0>
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	6859      	ldr	r1, [r3, #4]
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	689a      	ldr	r2, [r3, #8]
 8016638:	f107 0310 	add.w	r3, r7, #16
 801663c:	6878      	ldr	r0, [r7, #4]
 801663e:	f000 fd3d 	bl	80170bc <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>
 8016642:	e151      	b.n	80168e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-sn")) addStrictNameFilter(ac_, av_, i);
 8016644:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8016648:	497b      	ldr	r1, [pc, #492]	; (8016838 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x694>)
 801664a:	4618      	mov	r0, r3
 801664c:	f7f7 fc9b 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8016650:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8016654:	f107 0308 	add.w	r3, r7, #8
 8016658:	4611      	mov	r1, r2
 801665a:	4618      	mov	r0, r3
 801665c:	f7f7 fd57 	bl	800e10e <_ZNK12SimpleString10startsWithERKS_>
 8016660:	4603      	mov	r3, r0
 8016662:	461d      	mov	r5, r3
 8016664:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8016668:	4618      	mov	r0, r3
 801666a:	f7f8 f844 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801666e:	2d00      	cmp	r5, #0
 8016670:	d009      	beq.n	8016686 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4e2>
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	6859      	ldr	r1, [r3, #4]
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	689a      	ldr	r2, [r3, #8]
 801667a:	f107 0310 	add.w	r3, r7, #16
 801667e:	6878      	ldr	r0, [r7, #4]
 8016680:	f000 fd5e 	bl	8017140 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>
 8016684:	e130      	b.n	80168e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xn")) addExcludeNameFilter(ac_, av_, i);
 8016686:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801668a:	496c      	ldr	r1, [pc, #432]	; (801683c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x698>)
 801668c:	4618      	mov	r0, r3
 801668e:	f7f7 fc7a 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8016692:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8016696:	f107 0308 	add.w	r3, r7, #8
 801669a:	4611      	mov	r1, r2
 801669c:	4618      	mov	r0, r3
 801669e:	f7f7 fd36 	bl	800e10e <_ZNK12SimpleString10startsWithERKS_>
 80166a2:	4603      	mov	r3, r0
 80166a4:	461d      	mov	r5, r3
 80166a6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80166aa:	4618      	mov	r0, r3
 80166ac:	f7f8 f823 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80166b0:	2d00      	cmp	r5, #0
 80166b2:	d009      	beq.n	80166c8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x524>
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	6859      	ldr	r1, [r3, #4]
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	689a      	ldr	r2, [r3, #8]
 80166bc:	f107 0310 	add.w	r3, r7, #16
 80166c0:	6878      	ldr	r0, [r7, #4]
 80166c2:	f000 fd83 	bl	80171cc <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>
 80166c6:	e10f      	b.n	80168e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsn")) addExcludeStrictNameFilter(ac_, av_, i);
 80166c8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80166cc:	495c      	ldr	r1, [pc, #368]	; (8016840 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x69c>)
 80166ce:	4618      	mov	r0, r3
 80166d0:	f7f7 fc59 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80166d4:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80166d8:	f107 0308 	add.w	r3, r7, #8
 80166dc:	4611      	mov	r1, r2
 80166de:	4618      	mov	r0, r3
 80166e0:	f7f7 fd15 	bl	800e10e <_ZNK12SimpleString10startsWithERKS_>
 80166e4:	4603      	mov	r3, r0
 80166e6:	461d      	mov	r5, r3
 80166e8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80166ec:	4618      	mov	r0, r3
 80166ee:	f7f8 f802 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80166f2:	2d00      	cmp	r5, #0
 80166f4:	d009      	beq.n	801670a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x566>
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	6859      	ldr	r1, [r3, #4]
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	689a      	ldr	r2, [r3, #8]
 80166fe:	f107 0310 	add.w	r3, r7, #16
 8016702:	6878      	ldr	r0, [r7, #4]
 8016704:	f000 fda8 	bl	8017258 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>
 8016708:	e0ee      	b.n	80168e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-s")) correctParameters = setShuffle(ac_, av_, i);
 801670a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801670e:	494d      	ldr	r1, [pc, #308]	; (8016844 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a0>)
 8016710:	4618      	mov	r0, r3
 8016712:	f7f7 fc38 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8016716:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 801671a:	f107 0308 	add.w	r3, r7, #8
 801671e:	4611      	mov	r1, r2
 8016720:	4618      	mov	r0, r3
 8016722:	f7f7 fcf4 	bl	800e10e <_ZNK12SimpleString10startsWithERKS_>
 8016726:	4603      	mov	r3, r0
 8016728:	461d      	mov	r5, r3
 801672a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801672e:	4618      	mov	r0, r3
 8016730:	f7f7 ffe1 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8016734:	2d00      	cmp	r5, #0
 8016736:	d00c      	beq.n	8016752 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5ae>
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	6859      	ldr	r1, [r3, #4]
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	689a      	ldr	r2, [r3, #8]
 8016740:	f107 0310 	add.w	r3, r7, #16
 8016744:	6878      	ldr	r0, [r7, #4]
 8016746:	f000 fa29 	bl	8016b9c <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>
 801674a:	4603      	mov	r3, r0
 801674c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8016750:	e0ca      	b.n	80168e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "TEST(");
 8016752:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8016756:	493c      	ldr	r1, [pc, #240]	; (8016848 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 8016758:	4618      	mov	r0, r3
 801675a:	f7f7 fc14 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801675e:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8016762:	f107 0308 	add.w	r3, r7, #8
 8016766:	4611      	mov	r1, r2
 8016768:	4618      	mov	r0, r3
 801676a:	f7f7 fcd0 	bl	800e10e <_ZNK12SimpleString10startsWithERKS_>
 801676e:	4603      	mov	r3, r0
 8016770:	461d      	mov	r5, r3
 8016772:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8016776:	4618      	mov	r0, r3
 8016778:	f7f7 ffbd 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801677c:	2d00      	cmp	r5, #0
 801677e:	d00b      	beq.n	8016798 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5f4>
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	6859      	ldr	r1, [r3, #4]
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	689a      	ldr	r2, [r3, #8]
 8016788:	f107 0310 	add.w	r3, r7, #16
 801678c:	482e      	ldr	r0, [pc, #184]	; (8016848 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 801678e:	9000      	str	r0, [sp, #0]
 8016790:	6878      	ldr	r0, [r7, #4]
 8016792:	f000 fda9 	bl	80172e8 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 8016796:	e0a7      	b.n	80168e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("IGNORE_TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "IGNORE_TEST(");
 8016798:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801679c:	492b      	ldr	r1, [pc, #172]	; (801684c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 801679e:	4618      	mov	r0, r3
 80167a0:	f7f7 fbf1 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80167a4:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80167a8:	f107 0308 	add.w	r3, r7, #8
 80167ac:	4611      	mov	r1, r2
 80167ae:	4618      	mov	r0, r3
 80167b0:	f7f7 fcad 	bl	800e10e <_ZNK12SimpleString10startsWithERKS_>
 80167b4:	4603      	mov	r3, r0
 80167b6:	461d      	mov	r5, r3
 80167b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80167bc:	4618      	mov	r0, r3
 80167be:	f7f7 ff9a 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80167c2:	2d00      	cmp	r5, #0
 80167c4:	d00b      	beq.n	80167de <_ZN20CommandLineArguments5parseEP10TestPlugin+0x63a>
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	6859      	ldr	r1, [r3, #4]
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	689a      	ldr	r2, [r3, #8]
 80167ce:	f107 0310 	add.w	r3, r7, #16
 80167d2:	481e      	ldr	r0, [pc, #120]	; (801684c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 80167d4:	9000      	str	r0, [sp, #0]
 80167d6:	6878      	ldr	r0, [r7, #4]
 80167d8:	f000 fd86 	bl	80172e8 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 80167dc:	e084      	b.n	80168e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-o")) correctParameters = setOutputType(ac_, av_, i);
 80167de:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80167e2:	491b      	ldr	r1, [pc, #108]	; (8016850 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6ac>)
 80167e4:	4618      	mov	r0, r3
 80167e6:	f7f7 fbce 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80167ea:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 80167ee:	f107 0308 	add.w	r3, r7, #8
 80167f2:	4611      	mov	r1, r2
 80167f4:	4618      	mov	r0, r3
 80167f6:	f7f7 fc8a 	bl	800e10e <_ZNK12SimpleString10startsWithERKS_>
 80167fa:	4603      	mov	r3, r0
 80167fc:	461d      	mov	r5, r3
 80167fe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8016802:	4618      	mov	r0, r3
 8016804:	f7f7 ff77 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8016808:	2d00      	cmp	r5, #0
 801680a:	d023      	beq.n	8016854 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6b0>
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	6859      	ldr	r1, [r3, #4]
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	689a      	ldr	r2, [r3, #8]
 8016814:	f107 0310 	add.w	r3, r7, #16
 8016818:	6878      	ldr	r0, [r7, #4]
 801681a:	f000 fe3b 	bl	8017494 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>
 801681e:	4603      	mov	r3, r0
 8016820:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8016824:	e060      	b.n	80168e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 8016826:	bf00      	nop
 8016828:	08026b80 	.word	0x08026b80
 801682c:	08026b84 	.word	0x08026b84
 8016830:	08026b88 	.word	0x08026b88
 8016834:	08026b90 	.word	0x08026b90
 8016838:	08026b94 	.word	0x08026b94
 801683c:	08026b98 	.word	0x08026b98
 8016840:	08026b9c 	.word	0x08026b9c
 8016844:	08026ba4 	.word	0x08026ba4
 8016848:	08026ba8 	.word	0x08026ba8
 801684c:	08026bb0 	.word	0x08026bb0
 8016850:	08026bc0 	.word	0x08026bc0
        else if (argument.startsWith("-p")) correctParameters = plugin->parseAllArguments(ac_, av_, i);
 8016854:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8016858:	4930      	ldr	r1, [pc, #192]	; (801691c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x778>)
 801685a:	4618      	mov	r0, r3
 801685c:	f7f7 fb93 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8016860:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8016864:	f107 0308 	add.w	r3, r7, #8
 8016868:	4611      	mov	r1, r2
 801686a:	4618      	mov	r0, r3
 801686c:	f7f7 fc4f 	bl	800e10e <_ZNK12SimpleString10startsWithERKS_>
 8016870:	4603      	mov	r3, r0
 8016872:	461d      	mov	r5, r3
 8016874:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8016878:	4618      	mov	r0, r3
 801687a:	f7f7 ff3c 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801687e:	2d00      	cmp	r5, #0
 8016880:	d00e      	beq.n	80168a0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6fc>
 8016882:	683b      	ldr	r3, [r7, #0]
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	331c      	adds	r3, #28
 8016888:	681d      	ldr	r5, [r3, #0]
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	6859      	ldr	r1, [r3, #4]
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	689a      	ldr	r2, [r3, #8]
 8016892:	693b      	ldr	r3, [r7, #16]
 8016894:	6838      	ldr	r0, [r7, #0]
 8016896:	47a8      	blx	r5
 8016898:	4603      	mov	r3, r0
 801689a:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 801689e:	e023      	b.n	80168e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-k")) setPackageName(ac_, av_, i);
 80168a0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80168a4:	491e      	ldr	r1, [pc, #120]	; (8016920 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x77c>)
 80168a6:	4618      	mov	r0, r3
 80168a8:	f7f7 fb6d 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80168ac:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 80168b0:	f107 0308 	add.w	r3, r7, #8
 80168b4:	4611      	mov	r1, r2
 80168b6:	4618      	mov	r0, r3
 80168b8:	f7f7 fc29 	bl	800e10e <_ZNK12SimpleString10startsWithERKS_>
 80168bc:	4603      	mov	r3, r0
 80168be:	461d      	mov	r5, r3
 80168c0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80168c4:	4618      	mov	r0, r3
 80168c6:	f7f7 ff16 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80168ca:	2d00      	cmp	r5, #0
 80168cc:	d009      	beq.n	80168e2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x73e>
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	6859      	ldr	r1, [r3, #4]
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	689a      	ldr	r2, [r3, #8]
 80168d6:	f107 0310 	add.w	r3, r7, #16
 80168da:	6878      	ldr	r0, [r7, #4]
 80168dc:	f000 fd98 	bl	8017410 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>
 80168e0:	e002      	b.n	80168e8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else correctParameters = false;
 80168e2:	2300      	movs	r3, #0
 80168e4:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

        if (correctParameters == false) {
 80168e8:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d102      	bne.n	80168f6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x752>
            return false;
 80168f0:	2400      	movs	r4, #0
 80168f2:	2500      	movs	r5, #0
 80168f4:	e000      	b.n	80168f8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x754>
        SimpleString argument = av_[i];
 80168f6:	2501      	movs	r5, #1
 80168f8:	f107 0308 	add.w	r3, r7, #8
 80168fc:	4618      	mov	r0, r3
 80168fe:	f7f7 fefa 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8016902:	2d01      	cmp	r5, #1
 8016904:	d104      	bne.n	8016910 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76c>
    for (int i = 1; i < ac_; i++) {
 8016906:	693b      	ldr	r3, [r7, #16]
 8016908:	3301      	adds	r3, #1
 801690a:	613b      	str	r3, [r7, #16]
 801690c:	e455      	b.n	80161ba <_ZN20CommandLineArguments5parseEP10TestPlugin+0x16>
        }
    }
    return true;
 801690e:	2401      	movs	r4, #1
 8016910:	4623      	mov	r3, r4
}
 8016912:	4618      	mov	r0, r3
 8016914:	37f0      	adds	r7, #240	; 0xf0
 8016916:	46bd      	mov	sp, r7
 8016918:	bdb0      	pop	{r4, r5, r7, pc}
 801691a:	bf00      	nop
 801691c:	08026b58 	.word	0x08026b58
 8016920:	08026bc4 	.word	0x08026bc4

08016924 <_ZNK20CommandLineArguments5usageEv>:

const char* CommandLineArguments::usage() const
{
 8016924:	b480      	push	{r7}
 8016926:	b083      	sub	sp, #12
 8016928:	af00      	add	r7, sp, #0
 801692a:	6078      	str	r0, [r7, #4]
    return "use -h for more extensive help\n"
           "usage [-h] [-v] [-vv] [-c] [-p] [-lg] [-ln] [-ri] [-r#] [-f]\n"
           "      [-g|sg|xg|xsg groupName]... [-n|sn|xn|xsn testName]... [-t groupName.testName]...\n"
           "      [-b] [-s [randomizerSeed>0]] [\"TEST(groupName, testName)\"]...\n"
           "      [-o{normal, junit, teamcity}] [-k packageName]\n";
 801692c:	4b03      	ldr	r3, [pc, #12]	; (801693c <_ZNK20CommandLineArguments5usageEv+0x18>)
}
 801692e:	4618      	mov	r0, r3
 8016930:	370c      	adds	r7, #12
 8016932:	46bd      	mov	sp, r7
 8016934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016938:	4770      	bx	lr
 801693a:	bf00      	nop
 801693c:	08026bc8 	.word	0x08026bc8

08016940 <_ZNK20CommandLineArguments4helpEv>:

const char* CommandLineArguments::help() const
{
 8016940:	b480      	push	{r7}
 8016942:	b083      	sub	sp, #12
 8016944:	af00      	add	r7, sp, #0
 8016946:	6078      	str	r0, [r7, #4]
      "Options that control how the tests are run:\n"
      "  -p               - run tests in a separate process.\n"
      "  -b               - run the tests backwards, reversing the normal way\n"
      "  -s [seed]        - shuffle tests randomly. Seed is optional\n"
      "  -r#              - repeat the tests some number (#) of times, or twice if # is not specified.\n"
      "  -f               - Cause the tests to crash on failure (to allow the test to be debugged if necessary)\n";
 8016948:	4b03      	ldr	r3, [pc, #12]	; (8016958 <_ZNK20CommandLineArguments4helpEv+0x18>)
}
 801694a:	4618      	mov	r0, r3
 801694c:	370c      	adds	r7, #12
 801694e:	46bd      	mov	sp, r7
 8016950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016954:	4770      	bx	lr
 8016956:	bf00      	nop
 8016958:	08026cf8 	.word	0x08026cf8

0801695c <_ZNK20CommandLineArguments8needHelpEv>:

bool CommandLineArguments::needHelp() const
{
 801695c:	b480      	push	{r7}
 801695e:	b083      	sub	sp, #12
 8016960:	af00      	add	r7, sp, #0
 8016962:	6078      	str	r0, [r7, #4]
    return needHelp_;
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	7b1b      	ldrb	r3, [r3, #12]
}
 8016968:	4618      	mov	r0, r3
 801696a:	370c      	adds	r7, #12
 801696c:	46bd      	mov	sp, r7
 801696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016972:	4770      	bx	lr

08016974 <_ZNK20CommandLineArguments9isVerboseEv>:

bool CommandLineArguments::isVerbose() const
{
 8016974:	b480      	push	{r7}
 8016976:	b083      	sub	sp, #12
 8016978:	af00      	add	r7, sp, #0
 801697a:	6078      	str	r0, [r7, #4]
    return verbose_;
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	7b5b      	ldrb	r3, [r3, #13]
}
 8016980:	4618      	mov	r0, r3
 8016982:	370c      	adds	r7, #12
 8016984:	46bd      	mov	sp, r7
 8016986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801698a:	4770      	bx	lr

0801698c <_ZNK20CommandLineArguments13isVeryVerboseEv>:

bool CommandLineArguments::isVeryVerbose() const
{
 801698c:	b480      	push	{r7}
 801698e:	b083      	sub	sp, #12
 8016990:	af00      	add	r7, sp, #0
 8016992:	6078      	str	r0, [r7, #4]
    return veryVerbose_;
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	7b9b      	ldrb	r3, [r3, #14]
}
 8016998:	4618      	mov	r0, r3
 801699a:	370c      	adds	r7, #12
 801699c:	46bd      	mov	sp, r7
 801699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169a2:	4770      	bx	lr

080169a4 <_ZNK20CommandLineArguments7isColorEv>:

bool CommandLineArguments::isColor() const
{
 80169a4:	b480      	push	{r7}
 80169a6:	b083      	sub	sp, #12
 80169a8:	af00      	add	r7, sp, #0
 80169aa:	6078      	str	r0, [r7, #4]
    return color_;
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	7bdb      	ldrb	r3, [r3, #15]
}
 80169b0:	4618      	mov	r0, r3
 80169b2:	370c      	adds	r7, #12
 80169b4:	46bd      	mov	sp, r7
 80169b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169ba:	4770      	bx	lr

080169bc <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>:

bool CommandLineArguments::isListingTestGroupNames() const
{
 80169bc:	b480      	push	{r7}
 80169be:	b083      	sub	sp, #12
 80169c0:	af00      	add	r7, sp, #0
 80169c2:	6078      	str	r0, [r7, #4]
    return listTestGroupNames_;
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	7c5b      	ldrb	r3, [r3, #17]
}
 80169c8:	4618      	mov	r0, r3
 80169ca:	370c      	adds	r7, #12
 80169cc:	46bd      	mov	sp, r7
 80169ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169d2:	4770      	bx	lr

080169d4 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>:

bool CommandLineArguments::isListingTestGroupAndCaseNames() const
{
 80169d4:	b480      	push	{r7}
 80169d6:	b083      	sub	sp, #12
 80169d8:	af00      	add	r7, sp, #0
 80169da:	6078      	str	r0, [r7, #4]
    return listTestGroupAndCaseNames_;
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	7c9b      	ldrb	r3, [r3, #18]
}
 80169e0:	4618      	mov	r0, r3
 80169e2:	370c      	adds	r7, #12
 80169e4:	46bd      	mov	sp, r7
 80169e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169ea:	4770      	bx	lr

080169ec <_ZNK20CommandLineArguments22isListingTestLocationsEv>:

bool CommandLineArguments::isListingTestLocations() const
{
 80169ec:	b480      	push	{r7}
 80169ee:	b083      	sub	sp, #12
 80169f0:	af00      	add	r7, sp, #0
 80169f2:	6078      	str	r0, [r7, #4]
    return listTestLocations_;
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	7cdb      	ldrb	r3, [r3, #19]
}
 80169f8:	4618      	mov	r0, r3
 80169fa:	370c      	adds	r7, #12
 80169fc:	46bd      	mov	sp, r7
 80169fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a02:	4770      	bx	lr

08016a04 <_ZNK20CommandLineArguments12isRunIgnoredEv>:

bool CommandLineArguments::isRunIgnored() const
{
 8016a04:	b480      	push	{r7}
 8016a06:	b083      	sub	sp, #12
 8016a08:	af00      	add	r7, sp, #0
 8016a0a:	6078      	str	r0, [r7, #4]
    return runIgnored_;
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	7d1b      	ldrb	r3, [r3, #20]
}
 8016a10:	4618      	mov	r0, r3
 8016a12:	370c      	adds	r7, #12
 8016a14:	46bd      	mov	sp, r7
 8016a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a1a:	4770      	bx	lr

08016a1c <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>:

bool CommandLineArguments::runTestsInSeperateProcess() const
{
 8016a1c:	b480      	push	{r7}
 8016a1e:	b083      	sub	sp, #12
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	6078      	str	r0, [r7, #4]
    return runTestsAsSeperateProcess_;
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	7c1b      	ldrb	r3, [r3, #16]
}
 8016a28:	4618      	mov	r0, r3
 8016a2a:	370c      	adds	r7, #12
 8016a2c:	46bd      	mov	sp, r7
 8016a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a32:	4770      	bx	lr

08016a34 <_ZNK20CommandLineArguments14getRepeatCountEv>:


size_t CommandLineArguments::getRepeatCount() const
{
 8016a34:	b480      	push	{r7}
 8016a36:	b083      	sub	sp, #12
 8016a38:	af00      	add	r7, sp, #0
 8016a3a:	6078      	str	r0, [r7, #4]
    return repeat_;
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	69db      	ldr	r3, [r3, #28]
}
 8016a40:	4618      	mov	r0, r3
 8016a42:	370c      	adds	r7, #12
 8016a44:	46bd      	mov	sp, r7
 8016a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a4a:	4770      	bx	lr

08016a4c <_ZNK20CommandLineArguments11isReversingEv>:

bool CommandLineArguments::isReversing() const
{
 8016a4c:	b480      	push	{r7}
 8016a4e:	b083      	sub	sp, #12
 8016a50:	af00      	add	r7, sp, #0
 8016a52:	6078      	str	r0, [r7, #4]
    return reversing_;
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	7d5b      	ldrb	r3, [r3, #21]
}
 8016a58:	4618      	mov	r0, r3
 8016a5a:	370c      	adds	r7, #12
 8016a5c:	46bd      	mov	sp, r7
 8016a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a62:	4770      	bx	lr

08016a64 <_ZNK20CommandLineArguments16isCrashingOnFailEv>:

bool CommandLineArguments::isCrashingOnFail() const
{
 8016a64:	b480      	push	{r7}
 8016a66:	b083      	sub	sp, #12
 8016a68:	af00      	add	r7, sp, #0
 8016a6a:	6078      	str	r0, [r7, #4]
    return crashOnFail_;
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	7d9b      	ldrb	r3, [r3, #22]
}
 8016a70:	4618      	mov	r0, r3
 8016a72:	370c      	adds	r7, #12
 8016a74:	46bd      	mov	sp, r7
 8016a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a7a:	4770      	bx	lr

08016a7c <_ZNK20CommandLineArguments11isShufflingEv>:

bool CommandLineArguments::isShuffling() const
{
 8016a7c:	b480      	push	{r7}
 8016a7e:	b083      	sub	sp, #12
 8016a80:	af00      	add	r7, sp, #0
 8016a82:	6078      	str	r0, [r7, #4]
    return shuffling_;
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	7ddb      	ldrb	r3, [r3, #23]
}
 8016a88:	4618      	mov	r0, r3
 8016a8a:	370c      	adds	r7, #12
 8016a8c:	46bd      	mov	sp, r7
 8016a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a92:	4770      	bx	lr

08016a94 <_ZNK20CommandLineArguments14getShuffleSeedEv>:

size_t CommandLineArguments::getShuffleSeed() const
{
 8016a94:	b480      	push	{r7}
 8016a96:	b083      	sub	sp, #12
 8016a98:	af00      	add	r7, sp, #0
 8016a9a:	6078      	str	r0, [r7, #4]
    return shuffleSeed_;
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	6a1b      	ldr	r3, [r3, #32]
}
 8016aa0:	4618      	mov	r0, r3
 8016aa2:	370c      	adds	r7, #12
 8016aa4:	46bd      	mov	sp, r7
 8016aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aaa:	4770      	bx	lr

08016aac <_ZNK20CommandLineArguments15getGroupFiltersEv>:

const TestFilter* CommandLineArguments::getGroupFilters() const
{
 8016aac:	b480      	push	{r7}
 8016aae:	b083      	sub	sp, #12
 8016ab0:	af00      	add	r7, sp, #0
 8016ab2:	6078      	str	r0, [r7, #4]
    return groupFilters_;
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8016ab8:	4618      	mov	r0, r3
 8016aba:	370c      	adds	r7, #12
 8016abc:	46bd      	mov	sp, r7
 8016abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ac2:	4770      	bx	lr

08016ac4 <_ZNK20CommandLineArguments14getNameFiltersEv>:

const TestFilter* CommandLineArguments::getNameFilters() const
{
 8016ac4:	b480      	push	{r7}
 8016ac6:	b083      	sub	sp, #12
 8016ac8:	af00      	add	r7, sp, #0
 8016aca:	6078      	str	r0, [r7, #4]
    return nameFilters_;
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8016ad0:	4618      	mov	r0, r3
 8016ad2:	370c      	adds	r7, #12
 8016ad4:	46bd      	mov	sp, r7
 8016ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ada:	4770      	bx	lr

08016adc <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>:

void CommandLineArguments::setRepeatCount(int ac, const char *const *av, int& i)
{
 8016adc:	b580      	push	{r7, lr}
 8016ade:	b086      	sub	sp, #24
 8016ae0:	af00      	add	r7, sp, #0
 8016ae2:	60f8      	str	r0, [r7, #12]
 8016ae4:	60b9      	str	r1, [r7, #8]
 8016ae6:	607a      	str	r2, [r7, #4]
 8016ae8:	603b      	str	r3, [r7, #0]
    repeat_ = 0;
 8016aea:	68fb      	ldr	r3, [r7, #12]
 8016aec:	2200      	movs	r2, #0
 8016aee:	61da      	str	r2, [r3, #28]

    SimpleString repeatParameter(av[i]);
 8016af0:	683b      	ldr	r3, [r7, #0]
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	009b      	lsls	r3, r3, #2
 8016af6:	687a      	ldr	r2, [r7, #4]
 8016af8:	4413      	add	r3, r2
 8016afa:	681a      	ldr	r2, [r3, #0]
 8016afc:	f107 0310 	add.w	r3, r7, #16
 8016b00:	4611      	mov	r1, r2
 8016b02:	4618      	mov	r0, r3
 8016b04:	f7f7 fa3f 	bl	800df86 <_ZN12SimpleStringC1EPKc>
    if (repeatParameter.size() > 2) repeat_ = (size_t) (SimpleString::AtoI(av[i] + 2));
 8016b08:	f107 0310 	add.w	r3, r7, #16
 8016b0c:	4618      	mov	r0, r3
 8016b0e:	f7f7 fdd1 	bl	800e6b4 <_ZNK12SimpleString4sizeEv>
 8016b12:	4603      	mov	r3, r0
 8016b14:	2b02      	cmp	r3, #2
 8016b16:	bf8c      	ite	hi
 8016b18:	2301      	movhi	r3, #1
 8016b1a:	2300      	movls	r3, #0
 8016b1c:	b2db      	uxtb	r3, r3
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d00e      	beq.n	8016b40 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x64>
 8016b22:	683b      	ldr	r3, [r7, #0]
 8016b24:	681b      	ldr	r3, [r3, #0]
 8016b26:	009b      	lsls	r3, r3, #2
 8016b28:	687a      	ldr	r2, [r7, #4]
 8016b2a:	4413      	add	r3, r2
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	3302      	adds	r3, #2
 8016b30:	4618      	mov	r0, r3
 8016b32:	f7f7 f824 	bl	800db7e <_ZN12SimpleString4AtoIEPKc>
 8016b36:	4603      	mov	r3, r0
 8016b38:	461a      	mov	r2, r3
 8016b3a:	68fb      	ldr	r3, [r7, #12]
 8016b3c:	61da      	str	r2, [r3, #28]
 8016b3e:	e01c      	b.n	8016b7a <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
    else if (i + 1 < ac) {
 8016b40:	683b      	ldr	r3, [r7, #0]
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	3301      	adds	r3, #1
 8016b46:	68ba      	ldr	r2, [r7, #8]
 8016b48:	429a      	cmp	r2, r3
 8016b4a:	dd16      	ble.n	8016b7a <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
        repeat_ = (size_t) (SimpleString::AtoI(av[i + 1]));
 8016b4c:	683b      	ldr	r3, [r7, #0]
 8016b4e:	681b      	ldr	r3, [r3, #0]
 8016b50:	3301      	adds	r3, #1
 8016b52:	009b      	lsls	r3, r3, #2
 8016b54:	687a      	ldr	r2, [r7, #4]
 8016b56:	4413      	add	r3, r2
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	4618      	mov	r0, r3
 8016b5c:	f7f7 f80f 	bl	800db7e <_ZN12SimpleString4AtoIEPKc>
 8016b60:	4603      	mov	r3, r0
 8016b62:	461a      	mov	r2, r3
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	61da      	str	r2, [r3, #28]
        if (repeat_ != 0) i++;
 8016b68:	68fb      	ldr	r3, [r7, #12]
 8016b6a:	69db      	ldr	r3, [r3, #28]
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d004      	beq.n	8016b7a <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
 8016b70:	683b      	ldr	r3, [r7, #0]
 8016b72:	681b      	ldr	r3, [r3, #0]
 8016b74:	1c5a      	adds	r2, r3, #1
 8016b76:	683b      	ldr	r3, [r7, #0]
 8016b78:	601a      	str	r2, [r3, #0]
    }

    if (0 == repeat_) repeat_ = 2;
 8016b7a:	68fb      	ldr	r3, [r7, #12]
 8016b7c:	69db      	ldr	r3, [r3, #28]
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d102      	bne.n	8016b88 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0xac>
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	2202      	movs	r2, #2
 8016b86:	61da      	str	r2, [r3, #28]
    SimpleString repeatParameter(av[i]);
 8016b88:	f107 0310 	add.w	r3, r7, #16
 8016b8c:	4618      	mov	r0, r3
 8016b8e:	f7f7 fdb2 	bl	800e6f6 <_ZN12SimpleStringD1Ev>

}
 8016b92:	bf00      	nop
 8016b94:	3718      	adds	r7, #24
 8016b96:	46bd      	mov	sp, r7
 8016b98:	bd80      	pop	{r7, pc}
	...

08016b9c <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>:

bool CommandLineArguments::setShuffle(int ac, const char * const *av, int& i)
{
 8016b9c:	b590      	push	{r4, r7, lr}
 8016b9e:	b089      	sub	sp, #36	; 0x24
 8016ba0:	af00      	add	r7, sp, #0
 8016ba2:	60f8      	str	r0, [r7, #12]
 8016ba4:	60b9      	str	r1, [r7, #8]
 8016ba6:	607a      	str	r2, [r7, #4]
 8016ba8:	603b      	str	r3, [r7, #0]
    shuffling_ = true;
 8016baa:	68fb      	ldr	r3, [r7, #12]
 8016bac:	2201      	movs	r2, #1
 8016bae:	75da      	strb	r2, [r3, #23]
    shuffleSeed_ = (unsigned int)GetPlatformSpecificTimeInMillis();
 8016bb0:	4b34      	ldr	r3, [pc, #208]	; (8016c84 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xe8>)
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	4798      	blx	r3
 8016bb6:	4603      	mov	r3, r0
 8016bb8:	461a      	mov	r2, r3
 8016bba:	68fb      	ldr	r3, [r7, #12]
 8016bbc:	621a      	str	r2, [r3, #32]
    if (shuffleSeed_ == 0) shuffleSeed_++;
 8016bbe:	68fb      	ldr	r3, [r7, #12]
 8016bc0:	6a1b      	ldr	r3, [r3, #32]
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d104      	bne.n	8016bd0 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x34>
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	6a1b      	ldr	r3, [r3, #32]
 8016bca:	1c5a      	adds	r2, r3, #1
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	621a      	str	r2, [r3, #32]

    SimpleString shuffleParameter = av[i];
 8016bd0:	683b      	ldr	r3, [r7, #0]
 8016bd2:	681b      	ldr	r3, [r3, #0]
 8016bd4:	009b      	lsls	r3, r3, #2
 8016bd6:	687a      	ldr	r2, [r7, #4]
 8016bd8:	4413      	add	r3, r2
 8016bda:	681a      	ldr	r2, [r3, #0]
 8016bdc:	f107 0314 	add.w	r3, r7, #20
 8016be0:	4611      	mov	r1, r2
 8016be2:	4618      	mov	r0, r3
 8016be4:	f7f7 f9cf 	bl	800df86 <_ZN12SimpleStringC1EPKc>
    if (shuffleParameter.size() > 2) {
 8016be8:	f107 0314 	add.w	r3, r7, #20
 8016bec:	4618      	mov	r0, r3
 8016bee:	f7f7 fd61 	bl	800e6b4 <_ZNK12SimpleString4sizeEv>
 8016bf2:	4603      	mov	r3, r0
 8016bf4:	2b02      	cmp	r3, #2
 8016bf6:	bf8c      	ite	hi
 8016bf8:	2301      	movhi	r3, #1
 8016bfa:	2300      	movls	r3, #0
 8016bfc:	b2db      	uxtb	r3, r3
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d010      	beq.n	8016c24 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x88>
        shufflingPreSeeded_ = true;
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	2201      	movs	r2, #1
 8016c06:	761a      	strb	r2, [r3, #24]
        shuffleSeed_ = SimpleString::AtoU(av[i] + 2);
 8016c08:	683b      	ldr	r3, [r7, #0]
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	009b      	lsls	r3, r3, #2
 8016c0e:	687a      	ldr	r2, [r7, #4]
 8016c10:	4413      	add	r3, r2
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	3302      	adds	r3, #2
 8016c16:	4618      	mov	r0, r3
 8016c18:	f7f6 ff78 	bl	800db0c <_ZN12SimpleString4AtoUEPKc>
 8016c1c:	4602      	mov	r2, r0
 8016c1e:	68fb      	ldr	r3, [r7, #12]
 8016c20:	621a      	str	r2, [r3, #32]
 8016c22:	e01e      	b.n	8016c62 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
    } else if (i + 1 < ac) {
 8016c24:	683b      	ldr	r3, [r7, #0]
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	3301      	adds	r3, #1
 8016c2a:	68ba      	ldr	r2, [r7, #8]
 8016c2c:	429a      	cmp	r2, r3
 8016c2e:	dd18      	ble.n	8016c62 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        unsigned int parsedParameter = SimpleString::AtoU(av[i + 1]);
 8016c30:	683b      	ldr	r3, [r7, #0]
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	3301      	adds	r3, #1
 8016c36:	009b      	lsls	r3, r3, #2
 8016c38:	687a      	ldr	r2, [r7, #4]
 8016c3a:	4413      	add	r3, r2
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	4618      	mov	r0, r3
 8016c40:	f7f6 ff64 	bl	800db0c <_ZN12SimpleString4AtoUEPKc>
 8016c44:	61f8      	str	r0, [r7, #28]
        if (parsedParameter != 0)
 8016c46:	69fb      	ldr	r3, [r7, #28]
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d00a      	beq.n	8016c62 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        {
            shufflingPreSeeded_ = true;
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	2201      	movs	r2, #1
 8016c50:	761a      	strb	r2, [r3, #24]
            shuffleSeed_ = parsedParameter;
 8016c52:	68fb      	ldr	r3, [r7, #12]
 8016c54:	69fa      	ldr	r2, [r7, #28]
 8016c56:	621a      	str	r2, [r3, #32]
            i++;
 8016c58:	683b      	ldr	r3, [r7, #0]
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	1c5a      	adds	r2, r3, #1
 8016c5e:	683b      	ldr	r3, [r7, #0]
 8016c60:	601a      	str	r2, [r3, #0]
        }
    }
    return (shuffleSeed_ != 0);
 8016c62:	68fb      	ldr	r3, [r7, #12]
 8016c64:	6a1b      	ldr	r3, [r3, #32]
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	bf14      	ite	ne
 8016c6a:	2301      	movne	r3, #1
 8016c6c:	2300      	moveq	r3, #0
 8016c6e:	b2dc      	uxtb	r4, r3
    SimpleString shuffleParameter = av[i];
 8016c70:	f107 0314 	add.w	r3, r7, #20
 8016c74:	4618      	mov	r0, r3
 8016c76:	f7f7 fd3e 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    return (shuffleSeed_ != 0);
 8016c7a:	4623      	mov	r3, r4
}
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	3724      	adds	r7, #36	; 0x24
 8016c80:	46bd      	mov	sp, r7
 8016c82:	bd90      	pop	{r4, r7, pc}
 8016c84:	200000a8 	.word	0x200000a8

08016c88 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>:

SimpleString CommandLineArguments::getParameterField(int ac, const char * const *av, int& i, const SimpleString& parameterName)
{
 8016c88:	b580      	push	{r7, lr}
 8016c8a:	b088      	sub	sp, #32
 8016c8c:	af00      	add	r7, sp, #0
 8016c8e:	60f8      	str	r0, [r7, #12]
 8016c90:	60b9      	str	r1, [r7, #8]
 8016c92:	607a      	str	r2, [r7, #4]
 8016c94:	603b      	str	r3, [r7, #0]
    size_t parameterLength = parameterName.size();
 8016c96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016c98:	f7f7 fd0c 	bl	800e6b4 <_ZNK12SimpleString4sizeEv>
 8016c9c:	61f8      	str	r0, [r7, #28]
    SimpleString parameter(av[i]);
 8016c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ca0:	681b      	ldr	r3, [r3, #0]
 8016ca2:	009b      	lsls	r3, r3, #2
 8016ca4:	683a      	ldr	r2, [r7, #0]
 8016ca6:	4413      	add	r3, r2
 8016ca8:	681a      	ldr	r2, [r3, #0]
 8016caa:	f107 0314 	add.w	r3, r7, #20
 8016cae:	4611      	mov	r1, r2
 8016cb0:	4618      	mov	r0, r3
 8016cb2:	f7f7 f968 	bl	800df86 <_ZN12SimpleStringC1EPKc>
    if (parameter.size() >  parameterLength) return av[i] + parameterLength;
 8016cb6:	f107 0314 	add.w	r3, r7, #20
 8016cba:	4618      	mov	r0, r3
 8016cbc:	f7f7 fcfa 	bl	800e6b4 <_ZNK12SimpleString4sizeEv>
 8016cc0:	4602      	mov	r2, r0
 8016cc2:	69fb      	ldr	r3, [r7, #28]
 8016cc4:	4293      	cmp	r3, r2
 8016cc6:	bf34      	ite	cc
 8016cc8:	2301      	movcc	r3, #1
 8016cca:	2300      	movcs	r3, #0
 8016ccc:	b2db      	uxtb	r3, r3
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d00c      	beq.n	8016cec <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x64>
 8016cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cd4:	681b      	ldr	r3, [r3, #0]
 8016cd6:	009b      	lsls	r3, r3, #2
 8016cd8:	683a      	ldr	r2, [r7, #0]
 8016cda:	4413      	add	r3, r2
 8016cdc:	681a      	ldr	r2, [r3, #0]
 8016cde:	69fb      	ldr	r3, [r7, #28]
 8016ce0:	4413      	add	r3, r2
 8016ce2:	4619      	mov	r1, r3
 8016ce4:	68f8      	ldr	r0, [r7, #12]
 8016ce6:	f7f7 f94e 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8016cea:	e019      	b.n	8016d20 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    else if (i + 1 < ac) return av[++i];
 8016cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cee:	681b      	ldr	r3, [r3, #0]
 8016cf0:	3301      	adds	r3, #1
 8016cf2:	687a      	ldr	r2, [r7, #4]
 8016cf4:	429a      	cmp	r2, r3
 8016cf6:	dd0f      	ble.n	8016d18 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x90>
 8016cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cfa:	681b      	ldr	r3, [r3, #0]
 8016cfc:	1c5a      	adds	r2, r3, #1
 8016cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d00:	601a      	str	r2, [r3, #0]
 8016d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	009b      	lsls	r3, r3, #2
 8016d08:	683a      	ldr	r2, [r7, #0]
 8016d0a:	4413      	add	r3, r2
 8016d0c:	681b      	ldr	r3, [r3, #0]
 8016d0e:	4619      	mov	r1, r3
 8016d10:	68f8      	ldr	r0, [r7, #12]
 8016d12:	f7f7 f938 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8016d16:	e003      	b.n	8016d20 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    return "";
 8016d18:	4906      	ldr	r1, [pc, #24]	; (8016d34 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0xac>)
 8016d1a:	68f8      	ldr	r0, [r7, #12]
 8016d1c:	f7f7 f933 	bl	800df86 <_ZN12SimpleStringC1EPKc>
    SimpleString parameter(av[i]);
 8016d20:	f107 0314 	add.w	r3, r7, #20
 8016d24:	4618      	mov	r0, r3
 8016d26:	f7f7 fce6 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 8016d2a:	68f8      	ldr	r0, [r7, #12]
 8016d2c:	3720      	adds	r7, #32
 8016d2e:	46bd      	mov	sp, r7
 8016d30:	bd80      	pop	{r7, pc}
 8016d32:	bf00      	nop
 8016d34:	08026b44 	.word	0x08026b44

08016d38 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>:

void CommandLineArguments::addGroupFilter(int ac, const char *const *av, int& i)
{
 8016d38:	b5b0      	push	{r4, r5, r7, lr}
 8016d3a:	b08c      	sub	sp, #48	; 0x30
 8016d3c:	af02      	add	r7, sp, #8
 8016d3e:	60f8      	str	r0, [r7, #12]
 8016d40:	60b9      	str	r1, [r7, #8]
 8016d42:	607a      	str	r2, [r7, #4]
 8016d44:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-g"));
 8016d46:	f107 031c 	add.w	r3, r7, #28
 8016d4a:	491a      	ldr	r1, [pc, #104]	; (8016db4 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x7c>)
 8016d4c:	4618      	mov	r0, r3
 8016d4e:	f7f7 f91a 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8016d52:	f107 0014 	add.w	r0, r7, #20
 8016d56:	f107 031c 	add.w	r3, r7, #28
 8016d5a:	9301      	str	r3, [sp, #4]
 8016d5c:	683b      	ldr	r3, [r7, #0]
 8016d5e:	9300      	str	r3, [sp, #0]
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	68ba      	ldr	r2, [r7, #8]
 8016d64:	68f9      	ldr	r1, [r7, #12]
 8016d66:	f7ff ff8f 	bl	8016c88 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8016d6a:	f107 0514 	add.w	r5, r7, #20
 8016d6e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8016d72:	4911      	ldr	r1, [pc, #68]	; (8016db8 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x80>)
 8016d74:	2010      	movs	r0, #16
 8016d76:	f7f4 fd43 	bl	800b800 <_ZnwjPKci>
 8016d7a:	4604      	mov	r4, r0
 8016d7c:	4629      	mov	r1, r5
 8016d7e:	4620      	mov	r0, r4
 8016d80:	f009 ff40 	bl	8020c04 <_ZN10TestFilterC1ERK12SimpleString>
 8016d84:	627c      	str	r4, [r7, #36]	; 0x24
 8016d86:	f107 0314 	add.w	r3, r7, #20
 8016d8a:	4618      	mov	r0, r3
 8016d8c:	f7f7 fcb3 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8016d90:	f107 031c 	add.w	r3, r7, #28
 8016d94:	4618      	mov	r0, r3
 8016d96:	f7f7 fcae 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    groupFilters_ = groupFilter->add(groupFilters_);
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d9e:	4619      	mov	r1, r3
 8016da0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016da2:	f009 ff4f 	bl	8020c44 <_ZN10TestFilter3addEPS_>
 8016da6:	4602      	mov	r2, r0
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	625a      	str	r2, [r3, #36]	; 0x24
}
 8016dac:	bf00      	nop
 8016dae:	3728      	adds	r7, #40	; 0x28
 8016db0:	46bd      	mov	sp, r7
 8016db2:	bdb0      	pop	{r4, r5, r7, pc}
 8016db4:	08026b78 	.word	0x08026b78
 8016db8:	0802750c 	.word	0x0802750c

08016dbc <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>:

bool CommandLineArguments::addGroupDotNameFilter(int ac, const char *const *av, int& i)
{
 8016dbc:	b5b0      	push	{r4, r5, r7, lr}
 8016dbe:	b092      	sub	sp, #72	; 0x48
 8016dc0:	af02      	add	r7, sp, #8
 8016dc2:	60f8      	str	r0, [r7, #12]
 8016dc4:	60b9      	str	r1, [r7, #8]
 8016dc6:	607a      	str	r2, [r7, #4]
 8016dc8:	603b      	str	r3, [r7, #0]
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 8016dca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016dce:	494e      	ldr	r1, [pc, #312]	; (8016f08 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x14c>)
 8016dd0:	4618      	mov	r0, r3
 8016dd2:	f7f7 f8d8 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8016dd6:	f107 0020 	add.w	r0, r7, #32
 8016dda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016dde:	9301      	str	r3, [sp, #4]
 8016de0:	683b      	ldr	r3, [r7, #0]
 8016de2:	9300      	str	r3, [sp, #0]
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	68ba      	ldr	r2, [r7, #8]
 8016de8:	68f9      	ldr	r1, [r7, #12]
 8016dea:	f7ff ff4d 	bl	8016c88 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8016dee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016df2:	4618      	mov	r0, r3
 8016df4:	f7f7 fc7f 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    SimpleStringCollection collection;
 8016df8:	f107 0310 	add.w	r3, r7, #16
 8016dfc:	4618      	mov	r0, r3
 8016dfe:	f7f8 fb8f 	bl	800f520 <_ZN22SimpleStringCollectionC1Ev>
    groupDotName.split(".", collection);
 8016e02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016e06:	4941      	ldr	r1, [pc, #260]	; (8016f0c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x150>)
 8016e08:	4618      	mov	r0, r3
 8016e0a:	f7f7 f8bc 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8016e0e:	f107 0210 	add.w	r2, r7, #16
 8016e12:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8016e16:	f107 0320 	add.w	r3, r7, #32
 8016e1a:	4618      	mov	r0, r3
 8016e1c:	f7f7 fa1f 	bl	800e25e <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>
 8016e20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016e24:	4618      	mov	r0, r3
 8016e26:	f7f7 fc66 	bl	800e6f6 <_ZN12SimpleStringD1Ev>

    if (collection.size() != 2) return false;
 8016e2a:	f107 0310 	add.w	r3, r7, #16
 8016e2e:	4618      	mov	r0, r3
 8016e30:	f7f8 fc1b 	bl	800f66a <_ZNK22SimpleStringCollection4sizeEv>
 8016e34:	4603      	mov	r3, r0
 8016e36:	2b02      	cmp	r3, #2
 8016e38:	bf14      	ite	ne
 8016e3a:	2301      	movne	r3, #1
 8016e3c:	2300      	moveq	r3, #0
 8016e3e:	b2db      	uxtb	r3, r3
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d001      	beq.n	8016e48 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x8c>
 8016e44:	2400      	movs	r4, #0
 8016e46:	e04f      	b.n	8016ee8 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x12c>

    groupFilters_ = (new TestFilter(collection[0].subString(0, collection[0].size()-1)))->add(groupFilters_);
 8016e48:	f107 0310 	add.w	r3, r7, #16
 8016e4c:	2100      	movs	r1, #0
 8016e4e:	4618      	mov	r0, r3
 8016e50:	f7f8 fc18 	bl	800f684 <_ZN22SimpleStringCollectionixEj>
 8016e54:	4604      	mov	r4, r0
 8016e56:	f107 0310 	add.w	r3, r7, #16
 8016e5a:	2100      	movs	r1, #0
 8016e5c:	4618      	mov	r0, r3
 8016e5e:	f7f8 fc11 	bl	800f684 <_ZN22SimpleStringCollectionixEj>
 8016e62:	4603      	mov	r3, r0
 8016e64:	4618      	mov	r0, r3
 8016e66:	f7f7 fc25 	bl	800e6b4 <_ZNK12SimpleString4sizeEv>
 8016e6a:	4603      	mov	r3, r0
 8016e6c:	3b01      	subs	r3, #1
 8016e6e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8016e72:	2200      	movs	r2, #0
 8016e74:	4621      	mov	r1, r4
 8016e76:	f7f7 fd47 	bl	800e908 <_ZNK12SimpleString9subStringEjj>
 8016e7a:	f107 0538 	add.w	r5, r7, #56	; 0x38
 8016e7e:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8016e82:	4923      	ldr	r1, [pc, #140]	; (8016f10 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8016e84:	2010      	movs	r0, #16
 8016e86:	f7f4 fcbb 	bl	800b800 <_ZnwjPKci>
 8016e8a:	4604      	mov	r4, r0
 8016e8c:	4629      	mov	r1, r5
 8016e8e:	4620      	mov	r0, r4
 8016e90:	f009 feb8 	bl	8020c04 <_ZN10TestFilterC1ERK12SimpleString>
 8016e94:	68fb      	ldr	r3, [r7, #12]
 8016e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e98:	4619      	mov	r1, r3
 8016e9a:	4620      	mov	r0, r4
 8016e9c:	f009 fed2 	bl	8020c44 <_ZN10TestFilter3addEPS_>
 8016ea0:	4602      	mov	r2, r0
 8016ea2:	68fb      	ldr	r3, [r7, #12]
 8016ea4:	625a      	str	r2, [r3, #36]	; 0x24
 8016ea6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016eaa:	4618      	mov	r0, r3
 8016eac:	f7f7 fc23 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    nameFilters_ = (new TestFilter(collection[1]))->add(nameFilters_);
 8016eb0:	f107 0310 	add.w	r3, r7, #16
 8016eb4:	2101      	movs	r1, #1
 8016eb6:	4618      	mov	r0, r3
 8016eb8:	f7f8 fbe4 	bl	800f684 <_ZN22SimpleStringCollectionixEj>
 8016ebc:	4605      	mov	r5, r0
 8016ebe:	f240 121f 	movw	r2, #287	; 0x11f
 8016ec2:	4913      	ldr	r1, [pc, #76]	; (8016f10 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8016ec4:	2010      	movs	r0, #16
 8016ec6:	f7f4 fc9b 	bl	800b800 <_ZnwjPKci>
 8016eca:	4604      	mov	r4, r0
 8016ecc:	4629      	mov	r1, r5
 8016ece:	4620      	mov	r0, r4
 8016ed0:	f009 fe98 	bl	8020c04 <_ZN10TestFilterC1ERK12SimpleString>
 8016ed4:	68fb      	ldr	r3, [r7, #12]
 8016ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016ed8:	4619      	mov	r1, r3
 8016eda:	4620      	mov	r0, r4
 8016edc:	f009 feb2 	bl	8020c44 <_ZN10TestFilter3addEPS_>
 8016ee0:	4602      	mov	r2, r0
 8016ee2:	68fb      	ldr	r3, [r7, #12]
 8016ee4:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 8016ee6:	2401      	movs	r4, #1
    SimpleStringCollection collection;
 8016ee8:	f107 0310 	add.w	r3, r7, #16
 8016eec:	4618      	mov	r0, r3
 8016eee:	f7f8 fb8b 	bl	800f608 <_ZN22SimpleStringCollectionD1Ev>
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 8016ef2:	f107 0320 	add.w	r3, r7, #32
 8016ef6:	4618      	mov	r0, r3
 8016ef8:	f7f7 fbfd 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8016efc:	4623      	mov	r3, r4
}
 8016efe:	4618      	mov	r0, r3
 8016f00:	3740      	adds	r7, #64	; 0x40
 8016f02:	46bd      	mov	sp, r7
 8016f04:	bdb0      	pop	{r4, r5, r7, pc}
 8016f06:	bf00      	nop
 8016f08:	08026b7c 	.word	0x08026b7c
 8016f0c:	0802752c 	.word	0x0802752c
 8016f10:	0802750c 	.word	0x0802750c

08016f14 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8016f14:	b5b0      	push	{r4, r5, r7, lr}
 8016f16:	b08c      	sub	sp, #48	; 0x30
 8016f18:	af02      	add	r7, sp, #8
 8016f1a:	60f8      	str	r0, [r7, #12]
 8016f1c:	60b9      	str	r1, [r7, #8]
 8016f1e:	607a      	str	r2, [r7, #4]
 8016f20:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-sg"));
 8016f22:	f107 031c 	add.w	r3, r7, #28
 8016f26:	491c      	ldr	r1, [pc, #112]	; (8016f98 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x84>)
 8016f28:	4618      	mov	r0, r3
 8016f2a:	f7f7 f82c 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8016f2e:	f107 0014 	add.w	r0, r7, #20
 8016f32:	f107 031c 	add.w	r3, r7, #28
 8016f36:	9301      	str	r3, [sp, #4]
 8016f38:	683b      	ldr	r3, [r7, #0]
 8016f3a:	9300      	str	r3, [sp, #0]
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	68ba      	ldr	r2, [r7, #8]
 8016f40:	68f9      	ldr	r1, [r7, #12]
 8016f42:	f7ff fea1 	bl	8016c88 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8016f46:	f107 0514 	add.w	r5, r7, #20
 8016f4a:	f240 1225 	movw	r2, #293	; 0x125
 8016f4e:	4913      	ldr	r1, [pc, #76]	; (8016f9c <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x88>)
 8016f50:	2010      	movs	r0, #16
 8016f52:	f7f4 fc55 	bl	800b800 <_ZnwjPKci>
 8016f56:	4604      	mov	r4, r0
 8016f58:	4629      	mov	r1, r5
 8016f5a:	4620      	mov	r0, r4
 8016f5c:	f009 fe52 	bl	8020c04 <_ZN10TestFilterC1ERK12SimpleString>
 8016f60:	627c      	str	r4, [r7, #36]	; 0x24
 8016f62:	f107 0314 	add.w	r3, r7, #20
 8016f66:	4618      	mov	r0, r3
 8016f68:	f7f7 fbc5 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8016f6c:	f107 031c 	add.w	r3, r7, #28
 8016f70:	4618      	mov	r0, r3
 8016f72:	f7f7 fbc0 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8016f76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016f78:	f009 fe7f 	bl	8020c7a <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8016f7c:	68fb      	ldr	r3, [r7, #12]
 8016f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f80:	4619      	mov	r1, r3
 8016f82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016f84:	f009 fe5e 	bl	8020c44 <_ZN10TestFilter3addEPS_>
 8016f88:	4602      	mov	r2, r0
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8016f8e:	bf00      	nop
 8016f90:	3728      	adds	r7, #40	; 0x28
 8016f92:	46bd      	mov	sp, r7
 8016f94:	bdb0      	pop	{r4, r5, r7, pc}
 8016f96:	bf00      	nop
 8016f98:	08026b80 	.word	0x08026b80
 8016f9c:	0802750c 	.word	0x0802750c

08016fa0 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeGroupFilter(int ac, const char *const *av, int& i)
{
 8016fa0:	b5b0      	push	{r4, r5, r7, lr}
 8016fa2:	b08c      	sub	sp, #48	; 0x30
 8016fa4:	af02      	add	r7, sp, #8
 8016fa6:	60f8      	str	r0, [r7, #12]
 8016fa8:	60b9      	str	r1, [r7, #8]
 8016faa:	607a      	str	r2, [r7, #4]
 8016fac:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xg"));
 8016fae:	f107 031c 	add.w	r3, r7, #28
 8016fb2:	491c      	ldr	r1, [pc, #112]	; (8017024 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x84>)
 8016fb4:	4618      	mov	r0, r3
 8016fb6:	f7f6 ffe6 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8016fba:	f107 0014 	add.w	r0, r7, #20
 8016fbe:	f107 031c 	add.w	r3, r7, #28
 8016fc2:	9301      	str	r3, [sp, #4]
 8016fc4:	683b      	ldr	r3, [r7, #0]
 8016fc6:	9300      	str	r3, [sp, #0]
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	68ba      	ldr	r2, [r7, #8]
 8016fcc:	68f9      	ldr	r1, [r7, #12]
 8016fce:	f7ff fe5b 	bl	8016c88 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8016fd2:	f107 0514 	add.w	r5, r7, #20
 8016fd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8016fda:	4913      	ldr	r1, [pc, #76]	; (8017028 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x88>)
 8016fdc:	2010      	movs	r0, #16
 8016fde:	f7f4 fc0f 	bl	800b800 <_ZnwjPKci>
 8016fe2:	4604      	mov	r4, r0
 8016fe4:	4629      	mov	r1, r5
 8016fe6:	4620      	mov	r0, r4
 8016fe8:	f009 fe0c 	bl	8020c04 <_ZN10TestFilterC1ERK12SimpleString>
 8016fec:	627c      	str	r4, [r7, #36]	; 0x24
 8016fee:	f107 0314 	add.w	r3, r7, #20
 8016ff2:	4618      	mov	r0, r3
 8016ff4:	f7f7 fb7f 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8016ff8:	f107 031c 	add.w	r3, r7, #28
 8016ffc:	4618      	mov	r0, r3
 8016ffe:	f7f7 fb7a 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    groupFilter->invertMatching();
 8017002:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017004:	f009 fe46 	bl	8020c94 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801700c:	4619      	mov	r1, r3
 801700e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017010:	f009 fe18 	bl	8020c44 <_ZN10TestFilter3addEPS_>
 8017014:	4602      	mov	r2, r0
 8017016:	68fb      	ldr	r3, [r7, #12]
 8017018:	625a      	str	r2, [r3, #36]	; 0x24
}
 801701a:	bf00      	nop
 801701c:	3728      	adds	r7, #40	; 0x28
 801701e:	46bd      	mov	sp, r7
 8017020:	bdb0      	pop	{r4, r5, r7, pc}
 8017022:	bf00      	nop
 8017024:	08026b84 	.word	0x08026b84
 8017028:	0802750c 	.word	0x0802750c

0801702c <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictGroupFilter(int ac, const char *const *av, int& i)
{
 801702c:	b5b0      	push	{r4, r5, r7, lr}
 801702e:	b08c      	sub	sp, #48	; 0x30
 8017030:	af02      	add	r7, sp, #8
 8017032:	60f8      	str	r0, [r7, #12]
 8017034:	60b9      	str	r1, [r7, #8]
 8017036:	607a      	str	r2, [r7, #4]
 8017038:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xsg"));
 801703a:	f107 031c 	add.w	r3, r7, #28
 801703e:	491d      	ldr	r1, [pc, #116]	; (80170b4 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x88>)
 8017040:	4618      	mov	r0, r3
 8017042:	f7f6 ffa0 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8017046:	f107 0014 	add.w	r0, r7, #20
 801704a:	f107 031c 	add.w	r3, r7, #28
 801704e:	9301      	str	r3, [sp, #4]
 8017050:	683b      	ldr	r3, [r7, #0]
 8017052:	9300      	str	r3, [sp, #0]
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	68ba      	ldr	r2, [r7, #8]
 8017058:	68f9      	ldr	r1, [r7, #12]
 801705a:	f7ff fe15 	bl	8016c88 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801705e:	f107 0514 	add.w	r5, r7, #20
 8017062:	f240 1233 	movw	r2, #307	; 0x133
 8017066:	4914      	ldr	r1, [pc, #80]	; (80170b8 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x8c>)
 8017068:	2010      	movs	r0, #16
 801706a:	f7f4 fbc9 	bl	800b800 <_ZnwjPKci>
 801706e:	4604      	mov	r4, r0
 8017070:	4629      	mov	r1, r5
 8017072:	4620      	mov	r0, r4
 8017074:	f009 fdc6 	bl	8020c04 <_ZN10TestFilterC1ERK12SimpleString>
 8017078:	627c      	str	r4, [r7, #36]	; 0x24
 801707a:	f107 0314 	add.w	r3, r7, #20
 801707e:	4618      	mov	r0, r3
 8017080:	f7f7 fb39 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8017084:	f107 031c 	add.w	r3, r7, #28
 8017088:	4618      	mov	r0, r3
 801708a:	f7f7 fb34 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 801708e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017090:	f009 fdf3 	bl	8020c7a <_ZN10TestFilter14strictMatchingEv>
    groupFilter->invertMatching();
 8017094:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017096:	f009 fdfd 	bl	8020c94 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 801709a:	68fb      	ldr	r3, [r7, #12]
 801709c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801709e:	4619      	mov	r1, r3
 80170a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80170a2:	f009 fdcf 	bl	8020c44 <_ZN10TestFilter3addEPS_>
 80170a6:	4602      	mov	r2, r0
 80170a8:	68fb      	ldr	r3, [r7, #12]
 80170aa:	625a      	str	r2, [r3, #36]	; 0x24
}
 80170ac:	bf00      	nop
 80170ae:	3728      	adds	r7, #40	; 0x28
 80170b0:	46bd      	mov	sp, r7
 80170b2:	bdb0      	pop	{r4, r5, r7, pc}
 80170b4:	08026b88 	.word	0x08026b88
 80170b8:	0802750c 	.word	0x0802750c

080170bc <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>:

void CommandLineArguments::addNameFilter(int ac, const char *const *av, int& i)
{
 80170bc:	b5b0      	push	{r4, r5, r7, lr}
 80170be:	b08c      	sub	sp, #48	; 0x30
 80170c0:	af02      	add	r7, sp, #8
 80170c2:	60f8      	str	r0, [r7, #12]
 80170c4:	60b9      	str	r1, [r7, #8]
 80170c6:	607a      	str	r2, [r7, #4]
 80170c8:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, i, "-n"));
 80170ca:	f107 031c 	add.w	r3, r7, #28
 80170ce:	491a      	ldr	r1, [pc, #104]	; (8017138 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x7c>)
 80170d0:	4618      	mov	r0, r3
 80170d2:	f7f6 ff58 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80170d6:	f107 0014 	add.w	r0, r7, #20
 80170da:	f107 031c 	add.w	r3, r7, #28
 80170de:	9301      	str	r3, [sp, #4]
 80170e0:	683b      	ldr	r3, [r7, #0]
 80170e2:	9300      	str	r3, [sp, #0]
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	68ba      	ldr	r2, [r7, #8]
 80170e8:	68f9      	ldr	r1, [r7, #12]
 80170ea:	f7ff fdcd 	bl	8016c88 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80170ee:	f107 0514 	add.w	r5, r7, #20
 80170f2:	f240 123b 	movw	r2, #315	; 0x13b
 80170f6:	4911      	ldr	r1, [pc, #68]	; (801713c <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x80>)
 80170f8:	2010      	movs	r0, #16
 80170fa:	f7f4 fb81 	bl	800b800 <_ZnwjPKci>
 80170fe:	4604      	mov	r4, r0
 8017100:	4629      	mov	r1, r5
 8017102:	4620      	mov	r0, r4
 8017104:	f009 fd7e 	bl	8020c04 <_ZN10TestFilterC1ERK12SimpleString>
 8017108:	627c      	str	r4, [r7, #36]	; 0x24
 801710a:	f107 0314 	add.w	r3, r7, #20
 801710e:	4618      	mov	r0, r3
 8017110:	f7f7 faf1 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8017114:	f107 031c 	add.w	r3, r7, #28
 8017118:	4618      	mov	r0, r3
 801711a:	f7f7 faec 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    nameFilters_ = nameFilter->add(nameFilters_);
 801711e:	68fb      	ldr	r3, [r7, #12]
 8017120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017122:	4619      	mov	r1, r3
 8017124:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017126:	f009 fd8d 	bl	8020c44 <_ZN10TestFilter3addEPS_>
 801712a:	4602      	mov	r2, r0
 801712c:	68fb      	ldr	r3, [r7, #12]
 801712e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8017130:	bf00      	nop
 8017132:	3728      	adds	r7, #40	; 0x28
 8017134:	46bd      	mov	sp, r7
 8017136:	bdb0      	pop	{r4, r5, r7, pc}
 8017138:	08026b90 	.word	0x08026b90
 801713c:	0802750c 	.word	0x0802750c

08017140 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addStrictNameFilter(int ac, const char *const *av, int& index)
{
 8017140:	b5b0      	push	{r4, r5, r7, lr}
 8017142:	b08c      	sub	sp, #48	; 0x30
 8017144:	af02      	add	r7, sp, #8
 8017146:	60f8      	str	r0, [r7, #12]
 8017148:	60b9      	str	r1, [r7, #8]
 801714a:	607a      	str	r2, [r7, #4]
 801714c:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-sn"));
 801714e:	f107 031c 	add.w	r3, r7, #28
 8017152:	491c      	ldr	r1, [pc, #112]	; (80171c4 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x84>)
 8017154:	4618      	mov	r0, r3
 8017156:	f7f6 ff16 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801715a:	f107 0014 	add.w	r0, r7, #20
 801715e:	f107 031c 	add.w	r3, r7, #28
 8017162:	9301      	str	r3, [sp, #4]
 8017164:	683b      	ldr	r3, [r7, #0]
 8017166:	9300      	str	r3, [sp, #0]
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	68ba      	ldr	r2, [r7, #8]
 801716c:	68f9      	ldr	r1, [r7, #12]
 801716e:	f7ff fd8b 	bl	8016c88 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8017172:	f107 0514 	add.w	r5, r7, #20
 8017176:	f240 1241 	movw	r2, #321	; 0x141
 801717a:	4913      	ldr	r1, [pc, #76]	; (80171c8 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x88>)
 801717c:	2010      	movs	r0, #16
 801717e:	f7f4 fb3f 	bl	800b800 <_ZnwjPKci>
 8017182:	4604      	mov	r4, r0
 8017184:	4629      	mov	r1, r5
 8017186:	4620      	mov	r0, r4
 8017188:	f009 fd3c 	bl	8020c04 <_ZN10TestFilterC1ERK12SimpleString>
 801718c:	627c      	str	r4, [r7, #36]	; 0x24
 801718e:	f107 0314 	add.w	r3, r7, #20
 8017192:	4618      	mov	r0, r3
 8017194:	f7f7 faaf 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8017198:	f107 031c 	add.w	r3, r7, #28
 801719c:	4618      	mov	r0, r3
 801719e:	f7f7 faaa 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    nameFilter->strictMatching();
 80171a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80171a4:	f009 fd69 	bl	8020c7a <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 80171a8:	68fb      	ldr	r3, [r7, #12]
 80171aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80171ac:	4619      	mov	r1, r3
 80171ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80171b0:	f009 fd48 	bl	8020c44 <_ZN10TestFilter3addEPS_>
 80171b4:	4602      	mov	r2, r0
 80171b6:	68fb      	ldr	r3, [r7, #12]
 80171b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80171ba:	bf00      	nop
 80171bc:	3728      	adds	r7, #40	; 0x28
 80171be:	46bd      	mov	sp, r7
 80171c0:	bdb0      	pop	{r4, r5, r7, pc}
 80171c2:	bf00      	nop
 80171c4:	08026b94 	.word	0x08026b94
 80171c8:	0802750c 	.word	0x0802750c

080171cc <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeNameFilter(int ac, const char *const *av, int& index)
{
 80171cc:	b5b0      	push	{r4, r5, r7, lr}
 80171ce:	b08c      	sub	sp, #48	; 0x30
 80171d0:	af02      	add	r7, sp, #8
 80171d2:	60f8      	str	r0, [r7, #12]
 80171d4:	60b9      	str	r1, [r7, #8]
 80171d6:	607a      	str	r2, [r7, #4]
 80171d8:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xn"));
 80171da:	f107 031c 	add.w	r3, r7, #28
 80171de:	491c      	ldr	r1, [pc, #112]	; (8017250 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x84>)
 80171e0:	4618      	mov	r0, r3
 80171e2:	f7f6 fed0 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80171e6:	f107 0014 	add.w	r0, r7, #20
 80171ea:	f107 031c 	add.w	r3, r7, #28
 80171ee:	9301      	str	r3, [sp, #4]
 80171f0:	683b      	ldr	r3, [r7, #0]
 80171f2:	9300      	str	r3, [sp, #0]
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	68ba      	ldr	r2, [r7, #8]
 80171f8:	68f9      	ldr	r1, [r7, #12]
 80171fa:	f7ff fd45 	bl	8016c88 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80171fe:	f107 0514 	add.w	r5, r7, #20
 8017202:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8017206:	4913      	ldr	r1, [pc, #76]	; (8017254 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x88>)
 8017208:	2010      	movs	r0, #16
 801720a:	f7f4 faf9 	bl	800b800 <_ZnwjPKci>
 801720e:	4604      	mov	r4, r0
 8017210:	4629      	mov	r1, r5
 8017212:	4620      	mov	r0, r4
 8017214:	f009 fcf6 	bl	8020c04 <_ZN10TestFilterC1ERK12SimpleString>
 8017218:	627c      	str	r4, [r7, #36]	; 0x24
 801721a:	f107 0314 	add.w	r3, r7, #20
 801721e:	4618      	mov	r0, r3
 8017220:	f7f7 fa69 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8017224:	f107 031c 	add.w	r3, r7, #28
 8017228:	4618      	mov	r0, r3
 801722a:	f7f7 fa64 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 801722e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017230:	f009 fd30 	bl	8020c94 <_ZN10TestFilter14invertMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017238:	4619      	mov	r1, r3
 801723a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801723c:	f009 fd02 	bl	8020c44 <_ZN10TestFilter3addEPS_>
 8017240:	4602      	mov	r2, r0
 8017242:	68fb      	ldr	r3, [r7, #12]
 8017244:	629a      	str	r2, [r3, #40]	; 0x28
}
 8017246:	bf00      	nop
 8017248:	3728      	adds	r7, #40	; 0x28
 801724a:	46bd      	mov	sp, r7
 801724c:	bdb0      	pop	{r4, r5, r7, pc}
 801724e:	bf00      	nop
 8017250:	08026b98 	.word	0x08026b98
 8017254:	0802750c 	.word	0x0802750c

08017258 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictNameFilter(int ac, const char *const *av, int& index)
{
 8017258:	b5b0      	push	{r4, r5, r7, lr}
 801725a:	b08c      	sub	sp, #48	; 0x30
 801725c:	af02      	add	r7, sp, #8
 801725e:	60f8      	str	r0, [r7, #12]
 8017260:	60b9      	str	r1, [r7, #8]
 8017262:	607a      	str	r2, [r7, #4]
 8017264:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xsn"));
 8017266:	f107 031c 	add.w	r3, r7, #28
 801726a:	491d      	ldr	r1, [pc, #116]	; (80172e0 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x88>)
 801726c:	4618      	mov	r0, r3
 801726e:	f7f6 fe8a 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8017272:	f107 0014 	add.w	r0, r7, #20
 8017276:	f107 031c 	add.w	r3, r7, #28
 801727a:	9301      	str	r3, [sp, #4]
 801727c:	683b      	ldr	r3, [r7, #0]
 801727e:	9300      	str	r3, [sp, #0]
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	68ba      	ldr	r2, [r7, #8]
 8017284:	68f9      	ldr	r1, [r7, #12]
 8017286:	f7ff fcff 	bl	8016c88 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801728a:	f107 0514 	add.w	r5, r7, #20
 801728e:	f240 124f 	movw	r2, #335	; 0x14f
 8017292:	4914      	ldr	r1, [pc, #80]	; (80172e4 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x8c>)
 8017294:	2010      	movs	r0, #16
 8017296:	f7f4 fab3 	bl	800b800 <_ZnwjPKci>
 801729a:	4604      	mov	r4, r0
 801729c:	4629      	mov	r1, r5
 801729e:	4620      	mov	r0, r4
 80172a0:	f009 fcb0 	bl	8020c04 <_ZN10TestFilterC1ERK12SimpleString>
 80172a4:	627c      	str	r4, [r7, #36]	; 0x24
 80172a6:	f107 0314 	add.w	r3, r7, #20
 80172aa:	4618      	mov	r0, r3
 80172ac:	f7f7 fa23 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80172b0:	f107 031c 	add.w	r3, r7, #28
 80172b4:	4618      	mov	r0, r3
 80172b6:	f7f7 fa1e 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 80172ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80172bc:	f009 fcea 	bl	8020c94 <_ZN10TestFilter14invertMatchingEv>
    nameFilter->strictMatching();
 80172c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80172c2:	f009 fcda 	bl	8020c7a <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 80172c6:	68fb      	ldr	r3, [r7, #12]
 80172c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80172ca:	4619      	mov	r1, r3
 80172cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80172ce:	f009 fcb9 	bl	8020c44 <_ZN10TestFilter3addEPS_>
 80172d2:	4602      	mov	r2, r0
 80172d4:	68fb      	ldr	r3, [r7, #12]
 80172d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80172d8:	bf00      	nop
 80172da:	3728      	adds	r7, #40	; 0x28
 80172dc:	46bd      	mov	sp, r7
 80172de:	bdb0      	pop	{r4, r5, r7, pc}
 80172e0:	08026b9c 	.word	0x08026b9c
 80172e4:	0802750c 	.word	0x0802750c

080172e8 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>:

void CommandLineArguments::addTestToRunBasedOnVerboseOutput(int ac, const char *const *av, int& index, const char* parameterName)
{
 80172e8:	b5b0      	push	{r4, r5, r7, lr}
 80172ea:	b092      	sub	sp, #72	; 0x48
 80172ec:	af02      	add	r7, sp, #8
 80172ee:	60f8      	str	r0, [r7, #12]
 80172f0:	60b9      	str	r1, [r7, #8]
 80172f2:	607a      	str	r2, [r7, #4]
 80172f4:	603b      	str	r3, [r7, #0]
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 80172f6:	f107 0320 	add.w	r3, r7, #32
 80172fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80172fc:	4618      	mov	r0, r3
 80172fe:	f7f6 fe42 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8017302:	f107 0018 	add.w	r0, r7, #24
 8017306:	f107 0320 	add.w	r3, r7, #32
 801730a:	9301      	str	r3, [sp, #4]
 801730c:	683b      	ldr	r3, [r7, #0]
 801730e:	9300      	str	r3, [sp, #0]
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	68ba      	ldr	r2, [r7, #8]
 8017314:	68f9      	ldr	r1, [r7, #12]
 8017316:	f7ff fcb7 	bl	8016c88 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801731a:	f107 0320 	add.w	r3, r7, #32
 801731e:	4618      	mov	r0, r3
 8017320:	f7f7 f9e9 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8017324:	f107 0010 	add.w	r0, r7, #16
 8017328:	f107 0118 	add.w	r1, r7, #24
 801732c:	2329      	movs	r3, #41	; 0x29
 801732e:	222c      	movs	r2, #44	; 0x2c
 8017330:	f7f7 fb92 	bl	800ea58 <_ZNK12SimpleString17subStringFromTillEcc>
    testname = testname.subString(2);
 8017334:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017338:	f107 0110 	add.w	r1, r7, #16
 801733c:	2202      	movs	r2, #2
 801733e:	4618      	mov	r0, r3
 8017340:	f7f7 fb2c 	bl	800e99c <_ZNK12SimpleString9subStringEj>
 8017344:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8017348:	f107 0310 	add.w	r3, r7, #16
 801734c:	4611      	mov	r1, r2
 801734e:	4618      	mov	r0, r3
 8017350:	f7f6 fe85 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 8017354:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017358:	4618      	mov	r0, r3
 801735a:	f7f7 f9cc 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    TestFilter* namefilter = new TestFilter(testname);
 801735e:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8017362:	492a      	ldr	r1, [pc, #168]	; (801740c <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 8017364:	2010      	movs	r0, #16
 8017366:	f7f4 fa4b 	bl	800b800 <_ZnwjPKci>
 801736a:	4604      	mov	r4, r0
 801736c:	f107 0310 	add.w	r3, r7, #16
 8017370:	4619      	mov	r1, r3
 8017372:	4620      	mov	r0, r4
 8017374:	f009 fc46 	bl	8020c04 <_ZN10TestFilterC1ERK12SimpleString>
 8017378:	63fc      	str	r4, [r7, #60]	; 0x3c
    TestFilter* groupfilter = new TestFilter(wholename.subStringFromTill(wholename.at(0), ','));
 801737a:	f107 0318 	add.w	r3, r7, #24
 801737e:	2100      	movs	r1, #0
 8017380:	4618      	mov	r0, r3
 8017382:	f7f7 fb1c 	bl	800e9be <_ZNK12SimpleString2atEj>
 8017386:	4603      	mov	r3, r0
 8017388:	461a      	mov	r2, r3
 801738a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 801738e:	f107 0118 	add.w	r1, r7, #24
 8017392:	232c      	movs	r3, #44	; 0x2c
 8017394:	f7f7 fb60 	bl	800ea58 <_ZNK12SimpleString17subStringFromTillEcc>
 8017398:	f107 0530 	add.w	r5, r7, #48	; 0x30
 801739c:	f240 125b 	movw	r2, #347	; 0x15b
 80173a0:	491a      	ldr	r1, [pc, #104]	; (801740c <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 80173a2:	2010      	movs	r0, #16
 80173a4:	f7f4 fa2c 	bl	800b800 <_ZnwjPKci>
 80173a8:	4604      	mov	r4, r0
 80173aa:	4629      	mov	r1, r5
 80173ac:	4620      	mov	r0, r4
 80173ae:	f009 fc29 	bl	8020c04 <_ZN10TestFilterC1ERK12SimpleString>
 80173b2:	63bc      	str	r4, [r7, #56]	; 0x38
 80173b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80173b8:	4618      	mov	r0, r3
 80173ba:	f7f7 f99c 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    namefilter->strictMatching();
 80173be:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80173c0:	f009 fc5b 	bl	8020c7a <_ZN10TestFilter14strictMatchingEv>
    groupfilter->strictMatching();
 80173c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80173c6:	f009 fc58 	bl	8020c7a <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupfilter->add(groupFilters_);
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173ce:	4619      	mov	r1, r3
 80173d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80173d2:	f009 fc37 	bl	8020c44 <_ZN10TestFilter3addEPS_>
 80173d6:	4602      	mov	r2, r0
 80173d8:	68fb      	ldr	r3, [r7, #12]
 80173da:	625a      	str	r2, [r3, #36]	; 0x24
    nameFilters_ = namefilter->add(nameFilters_);
 80173dc:	68fb      	ldr	r3, [r7, #12]
 80173de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80173e0:	4619      	mov	r1, r3
 80173e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80173e4:	f009 fc2e 	bl	8020c44 <_ZN10TestFilter3addEPS_>
 80173e8:	4602      	mov	r2, r0
 80173ea:	68fb      	ldr	r3, [r7, #12]
 80173ec:	629a      	str	r2, [r3, #40]	; 0x28
    SimpleString testname = wholename.subStringFromTill(',', ')');
 80173ee:	f107 0310 	add.w	r3, r7, #16
 80173f2:	4618      	mov	r0, r3
 80173f4:	f7f7 f97f 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 80173f8:	f107 0318 	add.w	r3, r7, #24
 80173fc:	4618      	mov	r0, r3
 80173fe:	f7f7 f97a 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 8017402:	bf00      	nop
 8017404:	3740      	adds	r7, #64	; 0x40
 8017406:	46bd      	mov	sp, r7
 8017408:	bdb0      	pop	{r4, r5, r7, pc}
 801740a:	bf00      	nop
 801740c:	0802750c 	.word	0x0802750c

08017410 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>:

void CommandLineArguments::setPackageName(int ac, const char *const *av, int& i)
{
 8017410:	b590      	push	{r4, r7, lr}
 8017412:	b08b      	sub	sp, #44	; 0x2c
 8017414:	af02      	add	r7, sp, #8
 8017416:	60f8      	str	r0, [r7, #12]
 8017418:	60b9      	str	r1, [r7, #8]
 801741a:	607a      	str	r2, [r7, #4]
 801741c:	603b      	str	r3, [r7, #0]
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 801741e:	f107 0318 	add.w	r3, r7, #24
 8017422:	491b      	ldr	r1, [pc, #108]	; (8017490 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x80>)
 8017424:	4618      	mov	r0, r3
 8017426:	f7f6 fdae 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801742a:	f107 0010 	add.w	r0, r7, #16
 801742e:	f107 0318 	add.w	r3, r7, #24
 8017432:	9301      	str	r3, [sp, #4]
 8017434:	683b      	ldr	r3, [r7, #0]
 8017436:	9300      	str	r3, [sp, #0]
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	68ba      	ldr	r2, [r7, #8]
 801743c:	68f9      	ldr	r1, [r7, #12]
 801743e:	f7ff fc23 	bl	8016c88 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8017442:	f107 0318 	add.w	r3, r7, #24
 8017446:	4618      	mov	r0, r3
 8017448:	f7f7 f955 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    if (packageName.size() == 0) return;
 801744c:	f107 0310 	add.w	r3, r7, #16
 8017450:	4618      	mov	r0, r3
 8017452:	f7f7 f92f 	bl	800e6b4 <_ZNK12SimpleString4sizeEv>
 8017456:	4603      	mov	r3, r0
 8017458:	2b00      	cmp	r3, #0
 801745a:	bf0c      	ite	eq
 801745c:	2301      	moveq	r3, #1
 801745e:	2300      	movne	r3, #0
 8017460:	b2db      	uxtb	r3, r3
 8017462:	2b00      	cmp	r3, #0
 8017464:	d001      	beq.n	801746a <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x5a>
 8017466:	2400      	movs	r4, #0
 8017468:	e008      	b.n	801747c <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x6c>

    packageName_ = packageName;
 801746a:	68fb      	ldr	r3, [r7, #12]
 801746c:	3330      	adds	r3, #48	; 0x30
 801746e:	f107 0210 	add.w	r2, r7, #16
 8017472:	4611      	mov	r1, r2
 8017474:	4618      	mov	r0, r3
 8017476:	f7f6 fdf2 	bl	800e05e <_ZN12SimpleStringaSERKS_>
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 801747a:	2401      	movs	r4, #1
 801747c:	f107 0310 	add.w	r3, r7, #16
 8017480:	4618      	mov	r0, r3
 8017482:	f7f7 f938 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8017486:	2c01      	cmp	r4, #1
}
 8017488:	3724      	adds	r7, #36	; 0x24
 801748a:	46bd      	mov	sp, r7
 801748c:	bd90      	pop	{r4, r7, pc}
 801748e:	bf00      	nop
 8017490:	08026bc4 	.word	0x08026bc4

08017494 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>:

bool CommandLineArguments::setOutputType(int ac, const char *const *av, int& i)
{
 8017494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017496:	b093      	sub	sp, #76	; 0x4c
 8017498:	af02      	add	r7, sp, #8
 801749a:	60f8      	str	r0, [r7, #12]
 801749c:	60b9      	str	r1, [r7, #8]
 801749e:	607a      	str	r2, [r7, #4]
 80174a0:	603b      	str	r3, [r7, #0]
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 80174a2:	f107 0318 	add.w	r3, r7, #24
 80174a6:	4953      	ldr	r1, [pc, #332]	; (80175f4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x160>)
 80174a8:	4618      	mov	r0, r3
 80174aa:	f7f6 fd6c 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80174ae:	f107 0010 	add.w	r0, r7, #16
 80174b2:	f107 0318 	add.w	r3, r7, #24
 80174b6:	9301      	str	r3, [sp, #4]
 80174b8:	683b      	ldr	r3, [r7, #0]
 80174ba:	9300      	str	r3, [sp, #0]
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	68ba      	ldr	r2, [r7, #8]
 80174c0:	68f9      	ldr	r1, [r7, #12]
 80174c2:	f7ff fbe1 	bl	8016c88 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80174c6:	f107 0318 	add.w	r3, r7, #24
 80174ca:	4618      	mov	r0, r3
 80174cc:	f7f7 f913 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    if (outputType.size() == 0) return false;
 80174d0:	f107 0310 	add.w	r3, r7, #16
 80174d4:	4618      	mov	r0, r3
 80174d6:	f7f7 f8ed 	bl	800e6b4 <_ZNK12SimpleString4sizeEv>
 80174da:	4603      	mov	r3, r0
 80174dc:	2b00      	cmp	r3, #0
 80174de:	bf0c      	ite	eq
 80174e0:	2301      	moveq	r3, #1
 80174e2:	2300      	movne	r3, #0
 80174e4:	b2db      	uxtb	r3, r3
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d001      	beq.n	80174ee <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x5a>
 80174ea:	2400      	movs	r4, #0
 80174ec:	e078      	b.n	80175e0 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>

    if (outputType == "normal" || outputType == "eclipse") {
 80174ee:	2500      	movs	r5, #0
 80174f0:	f107 0320 	add.w	r3, r7, #32
 80174f4:	4940      	ldr	r1, [pc, #256]	; (80175f8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x164>)
 80174f6:	4618      	mov	r0, r3
 80174f8:	f7f6 fd45 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80174fc:	2601      	movs	r6, #1
 80174fe:	f107 0220 	add.w	r2, r7, #32
 8017502:	f107 0310 	add.w	r3, r7, #16
 8017506:	4611      	mov	r1, r2
 8017508:	4618      	mov	r0, r3
 801750a:	f7f7 f900 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801750e:	4603      	mov	r3, r0
 8017510:	2b00      	cmp	r3, #0
 8017512:	d111      	bne.n	8017538 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa4>
 8017514:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017518:	4938      	ldr	r1, [pc, #224]	; (80175fc <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x168>)
 801751a:	4618      	mov	r0, r3
 801751c:	f7f6 fd33 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8017520:	2501      	movs	r5, #1
 8017522:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8017526:	f107 0310 	add.w	r3, r7, #16
 801752a:	4611      	mov	r1, r2
 801752c:	4618      	mov	r0, r3
 801752e:	f7f7 f8ee 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 8017532:	4603      	mov	r3, r0
 8017534:	2b00      	cmp	r3, #0
 8017536:	d001      	beq.n	801753c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa8>
 8017538:	2401      	movs	r4, #1
 801753a:	e000      	b.n	801753e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xaa>
 801753c:	2400      	movs	r4, #0
 801753e:	2d00      	cmp	r5, #0
 8017540:	d004      	beq.n	801754c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xb8>
 8017542:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017546:	4618      	mov	r0, r3
 8017548:	f7f7 f8d5 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801754c:	2e00      	cmp	r6, #0
 801754e:	d004      	beq.n	801755a <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xc6>
 8017550:	f107 0320 	add.w	r3, r7, #32
 8017554:	4618      	mov	r0, r3
 8017556:	f7f7 f8ce 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801755a:	2c00      	cmp	r4, #0
 801755c:	d005      	beq.n	801756a <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xd6>
        outputType_ = OUTPUT_ECLIPSE;
 801755e:	68fb      	ldr	r3, [r7, #12]
 8017560:	2200      	movs	r2, #0
 8017562:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8017566:	2401      	movs	r4, #1
 8017568:	e03a      	b.n	80175e0 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "junit") {
 801756a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801756e:	4924      	ldr	r1, [pc, #144]	; (8017600 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x16c>)
 8017570:	4618      	mov	r0, r3
 8017572:	f7f6 fd08 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8017576:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801757a:	f107 0310 	add.w	r3, r7, #16
 801757e:	4611      	mov	r1, r2
 8017580:	4618      	mov	r0, r3
 8017582:	f7f7 f8c4 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 8017586:	4603      	mov	r3, r0
 8017588:	461c      	mov	r4, r3
 801758a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801758e:	4618      	mov	r0, r3
 8017590:	f7f7 f8b1 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8017594:	2c00      	cmp	r4, #0
 8017596:	d005      	beq.n	80175a4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x110>
        outputType_ = OUTPUT_JUNIT;
 8017598:	68fb      	ldr	r3, [r7, #12]
 801759a:	2201      	movs	r2, #1
 801759c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 80175a0:	2401      	movs	r4, #1
 80175a2:	e01d      	b.n	80175e0 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "teamcity") {
 80175a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80175a8:	4916      	ldr	r1, [pc, #88]	; (8017604 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x170>)
 80175aa:	4618      	mov	r0, r3
 80175ac:	f7f6 fceb 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80175b0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80175b4:	f107 0310 	add.w	r3, r7, #16
 80175b8:	4611      	mov	r1, r2
 80175ba:	4618      	mov	r0, r3
 80175bc:	f7f7 f8a7 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 80175c0:	4603      	mov	r3, r0
 80175c2:	461c      	mov	r4, r3
 80175c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80175c8:	4618      	mov	r0, r3
 80175ca:	f7f7 f894 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80175ce:	2c00      	cmp	r4, #0
 80175d0:	d005      	beq.n	80175de <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14a>
        outputType_ = OUTPUT_TEAMCITY;
 80175d2:	68fb      	ldr	r3, [r7, #12]
 80175d4:	2202      	movs	r2, #2
 80175d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 80175da:	2401      	movs	r4, #1
 80175dc:	e000      	b.n	80175e0 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }

    return false;
 80175de:	2400      	movs	r4, #0
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 80175e0:	f107 0310 	add.w	r3, r7, #16
 80175e4:	4618      	mov	r0, r3
 80175e6:	f7f7 f886 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80175ea:	4623      	mov	r3, r4
}
 80175ec:	4618      	mov	r0, r3
 80175ee:	3744      	adds	r7, #68	; 0x44
 80175f0:	46bd      	mov	sp, r7
 80175f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80175f4:	08026bc0 	.word	0x08026bc0
 80175f8:	08027530 	.word	0x08027530
 80175fc:	08027538 	.word	0x08027538
 8017600:	08027540 	.word	0x08027540
 8017604:	08027548 	.word	0x08027548

08017608 <_ZNK20CommandLineArguments13isJUnitOutputEv>:
{
    return outputType_ == OUTPUT_ECLIPSE;
}

bool CommandLineArguments::isJUnitOutput() const
{
 8017608:	b480      	push	{r7}
 801760a:	b083      	sub	sp, #12
 801760c:	af00      	add	r7, sp, #0
 801760e:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_JUNIT;
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017616:	2b01      	cmp	r3, #1
 8017618:	bf0c      	ite	eq
 801761a:	2301      	moveq	r3, #1
 801761c:	2300      	movne	r3, #0
 801761e:	b2db      	uxtb	r3, r3
}
 8017620:	4618      	mov	r0, r3
 8017622:	370c      	adds	r7, #12
 8017624:	46bd      	mov	sp, r7
 8017626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801762a:	4770      	bx	lr

0801762c <_ZNK20CommandLineArguments16isTeamCityOutputEv>:

bool CommandLineArguments::isTeamCityOutput() const
{
 801762c:	b480      	push	{r7}
 801762e:	b083      	sub	sp, #12
 8017630:	af00      	add	r7, sp, #0
 8017632:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_TEAMCITY;
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801763a:	2b02      	cmp	r3, #2
 801763c:	bf0c      	ite	eq
 801763e:	2301      	moveq	r3, #1
 8017640:	2300      	movne	r3, #0
 8017642:	b2db      	uxtb	r3, r3
}
 8017644:	4618      	mov	r0, r3
 8017646:	370c      	adds	r7, #12
 8017648:	46bd      	mov	sp, r7
 801764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801764e:	4770      	bx	lr

08017650 <_ZNK20CommandLineArguments14getPackageNameEv>:

const SimpleString& CommandLineArguments::getPackageName() const
{
 8017650:	b480      	push	{r7}
 8017652:	b083      	sub	sp, #12
 8017654:	af00      	add	r7, sp, #0
 8017656:	6078      	str	r0, [r7, #4]
    return packageName_;
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	3330      	adds	r3, #48	; 0x30
}
 801765c:	4618      	mov	r0, r3
 801765e:	370c      	adds	r7, #12
 8017660:	46bd      	mov	sp, r7
 8017662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017666:	4770      	bx	lr

08017668 <_ZN22MemoryLeakDetectorListC1Ev>:
    MemoryLeakDetectorNode* next_;
};

struct MemoryLeakDetectorList
{
    MemoryLeakDetectorList() :
 8017668:	b480      	push	{r7}
 801766a:	b083      	sub	sp, #12
 801766c:	af00      	add	r7, sp, #0
 801766e:	6078      	str	r0, [r7, #4]
        head_(NULLPTR)
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	2200      	movs	r2, #0
 8017674:	601a      	str	r2, [r3, #0]
    {}
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	4618      	mov	r0, r3
 801767a:	370c      	adds	r7, #12
 801767c:	46bd      	mov	sp, r7
 801767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017682:	4770      	bx	lr

08017684 <_ZN18SimpleStringBufferC1Ev>:

static const char* UNKNOWN = "<unknown>";

static const char GuardBytes[] = {'B','A','S'};

SimpleStringBuffer::SimpleStringBuffer() :
 8017684:	b480      	push	{r7}
 8017686:	b083      	sub	sp, #12
 8017688:	af00      	add	r7, sp, #0
 801768a:	6078      	str	r0, [r7, #4]
    positions_filled_(0), write_limit_(SIMPLE_STRING_BUFFER_LEN-1)
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017692:	2200      	movs	r2, #0
 8017694:	601a      	str	r2, [r3, #0]
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801769c:	3304      	adds	r3, #4
 801769e:	f640 72ff 	movw	r2, #4095	; 0xfff
 80176a2:	601a      	str	r2, [r3, #0]
{
    buffer_[0] = '\0';
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	2200      	movs	r2, #0
 80176a8:	701a      	strb	r2, [r3, #0]
}
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	4618      	mov	r0, r3
 80176ae:	370c      	adds	r7, #12
 80176b0:	46bd      	mov	sp, r7
 80176b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176b6:	4770      	bx	lr

080176b8 <_ZN18SimpleStringBuffer5clearEv>:

void SimpleStringBuffer::clear()
{
 80176b8:	b480      	push	{r7}
 80176ba:	b083      	sub	sp, #12
 80176bc:	af00      	add	r7, sp, #0
 80176be:	6078      	str	r0, [r7, #4]
    positions_filled_ = 0;
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80176c6:	2200      	movs	r2, #0
 80176c8:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	2200      	movs	r2, #0
 80176ce:	701a      	strb	r2, [r3, #0]
}
 80176d0:	bf00      	nop
 80176d2:	370c      	adds	r7, #12
 80176d4:	46bd      	mov	sp, r7
 80176d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176da:	4770      	bx	lr

080176dc <_ZN18SimpleStringBuffer3addEPKcz>:

void SimpleStringBuffer::add(const char* format, ...)
{
 80176dc:	b40e      	push	{r1, r2, r3}
 80176de:	b590      	push	{r4, r7, lr}
 80176e0:	b086      	sub	sp, #24
 80176e2:	af00      	add	r7, sp, #0
 80176e4:	6078      	str	r0, [r7, #4]
    const size_t positions_left = write_limit_ - positions_filled_;
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80176ec:	3304      	adds	r3, #4
 80176ee:	681a      	ldr	r2, [r3, #0]
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80176f6:	681b      	ldr	r3, [r3, #0]
 80176f8:	1ad3      	subs	r3, r2, r3
 80176fa:	617b      	str	r3, [r7, #20]
    if (positions_left == 0) return;
 80176fc:	697b      	ldr	r3, [r7, #20]
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d032      	beq.n	8017768 <_ZN18SimpleStringBuffer3addEPKcz+0x8c>

    va_list arguments;
    va_start(arguments, format);
 8017702:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017706:	60fb      	str	r3, [r7, #12]
    const int count = PlatformSpecificVSNprintf(buffer_ + positions_filled_, positions_left+1, format, arguments);
 8017708:	4b1b      	ldr	r3, [pc, #108]	; (8017778 <_ZN18SimpleStringBuffer3addEPKcz+0x9c>)
 801770a:	681c      	ldr	r4, [r3, #0]
 801770c:	687a      	ldr	r2, [r7, #4]
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017714:	681b      	ldr	r3, [r3, #0]
 8017716:	18d0      	adds	r0, r2, r3
 8017718:	697b      	ldr	r3, [r7, #20]
 801771a:	1c59      	adds	r1, r3, #1
 801771c:	68fb      	ldr	r3, [r7, #12]
 801771e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017720:	47a0      	blx	r4
 8017722:	6138      	str	r0, [r7, #16]
    if (count > 0) positions_filled_ += (size_t) count;
 8017724:	693b      	ldr	r3, [r7, #16]
 8017726:	2b00      	cmp	r3, #0
 8017728:	dd09      	ble.n	801773e <_ZN18SimpleStringBuffer3addEPKcz+0x62>
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017730:	681a      	ldr	r2, [r3, #0]
 8017732:	693b      	ldr	r3, [r7, #16]
 8017734:	441a      	add	r2, r3
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801773c:	601a      	str	r2, [r3, #0]
    if (positions_filled_ > write_limit_) positions_filled_ = write_limit_;
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017744:	681a      	ldr	r2, [r3, #0]
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801774c:	3304      	adds	r3, #4
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	429a      	cmp	r2, r3
 8017752:	d90a      	bls.n	801776a <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801775a:	3304      	adds	r3, #4
 801775c:	681a      	ldr	r2, [r3, #0]
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017764:	601a      	str	r2, [r3, #0]
 8017766:	e000      	b.n	801776a <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
    if (positions_left == 0) return;
 8017768:	bf00      	nop
    va_end(arguments);
}
 801776a:	3718      	adds	r7, #24
 801776c:	46bd      	mov	sp, r7
 801776e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8017772:	b003      	add	sp, #12
 8017774:	4770      	bx	lr
 8017776:	bf00      	nop
 8017778:	200000b0 	.word	0x200000b0

0801777c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>:

void SimpleStringBuffer::addMemoryDump(const void* memory, size_t memorySize)
{
 801777c:	b580      	push	{r7, lr}
 801777e:	b08c      	sub	sp, #48	; 0x30
 8017780:	af00      	add	r7, sp, #0
 8017782:	60f8      	str	r0, [r7, #12]
 8017784:	60b9      	str	r1, [r7, #8]
 8017786:	607a      	str	r2, [r7, #4]
    const unsigned char* byteMemory = (const unsigned char*)memory;
 8017788:	68bb      	ldr	r3, [r7, #8]
 801778a:	61fb      	str	r3, [r7, #28]
    const size_t maxLineBytes = 16;
 801778c:	2310      	movs	r3, #16
 801778e:	61bb      	str	r3, [r7, #24]
    size_t currentPos = 0;
 8017790:	2300      	movs	r3, #0
 8017792:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t p;

    while (currentPos < memorySize) {
 8017794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	429a      	cmp	r2, r3
 801779a:	d273      	bcs.n	8017884 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x108>
        add("    %04lx: ", (unsigned long) currentPos);
 801779c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801779e:	493b      	ldr	r1, [pc, #236]	; (801788c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x110>)
 80177a0:	68f8      	ldr	r0, [r7, #12]
 80177a2:	f7ff ff9b 	bl	80176dc <_ZN18SimpleStringBuffer3addEPKcz>
        size_t bytesInLine = memorySize - currentPos;
 80177a6:	687a      	ldr	r2, [r7, #4]
 80177a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177aa:	1ad3      	subs	r3, r2, r3
 80177ac:	627b      	str	r3, [r7, #36]	; 0x24
        if (bytesInLine > maxLineBytes) {
 80177ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177b0:	2b10      	cmp	r3, #16
 80177b2:	d901      	bls.n	80177b8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x3c>
            bytesInLine = maxLineBytes;
 80177b4:	2310      	movs	r3, #16
 80177b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
        const size_t leftoverBytes = maxLineBytes - bytesInLine;
 80177b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177ba:	f1c3 0310 	rsb	r3, r3, #16
 80177be:	617b      	str	r3, [r7, #20]

        for (p = 0; p < bytesInLine; p++) {
 80177c0:	2300      	movs	r3, #0
 80177c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80177c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80177c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177c8:	429a      	cmp	r2, r3
 80177ca:	d215      	bcs.n	80177f8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x7c>
            add("%02hx ", (unsigned short) byteMemory[currentPos + p]);
 80177cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80177ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177d0:	4413      	add	r3, r2
 80177d2:	69fa      	ldr	r2, [r7, #28]
 80177d4:	4413      	add	r3, r2
 80177d6:	781b      	ldrb	r3, [r3, #0]
 80177d8:	461a      	mov	r2, r3
 80177da:	492d      	ldr	r1, [pc, #180]	; (8017890 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x114>)
 80177dc:	68f8      	ldr	r0, [r7, #12]
 80177de:	f7ff ff7d 	bl	80176dc <_ZN18SimpleStringBuffer3addEPKcz>
            if (p == ((maxLineBytes / 2) - 1)) {
 80177e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177e4:	2b07      	cmp	r3, #7
 80177e6:	d103      	bne.n	80177f0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x74>
                add(" ");
 80177e8:	492a      	ldr	r1, [pc, #168]	; (8017894 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 80177ea:	68f8      	ldr	r0, [r7, #12]
 80177ec:	f7ff ff76 	bl	80176dc <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 80177f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177f2:	3301      	adds	r3, #1
 80177f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80177f6:	e7e5      	b.n	80177c4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x48>
            }
        }
        for (p = 0; p < leftoverBytes; p++) {
 80177f8:	2300      	movs	r3, #0
 80177fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80177fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80177fe:	697b      	ldr	r3, [r7, #20]
 8017800:	429a      	cmp	r2, r3
 8017802:	d207      	bcs.n	8017814 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x98>
            add("   ");
 8017804:	4924      	ldr	r1, [pc, #144]	; (8017898 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x11c>)
 8017806:	68f8      	ldr	r0, [r7, #12]
 8017808:	f7ff ff68 	bl	80176dc <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < leftoverBytes; p++) {
 801780c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801780e:	3301      	adds	r3, #1
 8017810:	62bb      	str	r3, [r7, #40]	; 0x28
 8017812:	e7f3      	b.n	80177fc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x80>
        }
        if (leftoverBytes > (maxLineBytes/2)) {
 8017814:	697b      	ldr	r3, [r7, #20]
 8017816:	2b08      	cmp	r3, #8
 8017818:	d903      	bls.n	8017822 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xa6>
            add(" ");
 801781a:	491e      	ldr	r1, [pc, #120]	; (8017894 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 801781c:	68f8      	ldr	r0, [r7, #12]
 801781e:	f7ff ff5d 	bl	80176dc <_ZN18SimpleStringBuffer3addEPKcz>
        }

        add("|");
 8017822:	491e      	ldr	r1, [pc, #120]	; (801789c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x120>)
 8017824:	68f8      	ldr	r0, [r7, #12]
 8017826:	f7ff ff59 	bl	80176dc <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 801782a:	2300      	movs	r3, #0
 801782c:	62bb      	str	r3, [r7, #40]	; 0x28
 801782e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017832:	429a      	cmp	r2, r3
 8017834:	d21d      	bcs.n	8017872 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xf6>
            char toAdd = (char)byteMemory[currentPos + p];
 8017836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801783a:	4413      	add	r3, r2
 801783c:	69fa      	ldr	r2, [r7, #28]
 801783e:	4413      	add	r3, r2
 8017840:	781b      	ldrb	r3, [r3, #0]
 8017842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (toAdd < ' ' || toAdd > '~') {
 8017846:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801784a:	2b1f      	cmp	r3, #31
 801784c:	d903      	bls.n	8017856 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xda>
 801784e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017852:	2b7e      	cmp	r3, #126	; 0x7e
 8017854:	d902      	bls.n	801785c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xe0>
                toAdd = '.';
 8017856:	232e      	movs	r3, #46	; 0x2e
 8017858:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }
            add("%c", (int)toAdd);
 801785c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017860:	461a      	mov	r2, r3
 8017862:	490f      	ldr	r1, [pc, #60]	; (80178a0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x124>)
 8017864:	68f8      	ldr	r0, [r7, #12]
 8017866:	f7ff ff39 	bl	80176dc <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 801786a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801786c:	3301      	adds	r3, #1
 801786e:	62bb      	str	r3, [r7, #40]	; 0x28
 8017870:	e7dd      	b.n	801782e <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xb2>
        }
        add("|\n");
 8017872:	490c      	ldr	r1, [pc, #48]	; (80178a4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x128>)
 8017874:	68f8      	ldr	r0, [r7, #12]
 8017876:	f7ff ff31 	bl	80176dc <_ZN18SimpleStringBuffer3addEPKcz>
        currentPos += bytesInLine;
 801787a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801787c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801787e:	4413      	add	r3, r2
 8017880:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (currentPos < memorySize) {
 8017882:	e787      	b.n	8017794 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x18>
    }
}
 8017884:	bf00      	nop
 8017886:	3730      	adds	r7, #48	; 0x30
 8017888:	46bd      	mov	sp, r7
 801788a:	bd80      	pop	{r7, pc}
 801788c:	08027560 	.word	0x08027560
 8017890:	0802756c 	.word	0x0802756c
 8017894:	08027574 	.word	0x08027574
 8017898:	08027578 	.word	0x08027578
 801789c:	0802757c 	.word	0x0802757c
 80178a0:	08027580 	.word	0x08027580
 80178a4:	08027584 	.word	0x08027584

080178a8 <_ZN18SimpleStringBuffer8toStringEv>:

char* SimpleStringBuffer::toString()
{
 80178a8:	b480      	push	{r7}
 80178aa:	b083      	sub	sp, #12
 80178ac:	af00      	add	r7, sp, #0
 80178ae:	6078      	str	r0, [r7, #4]
    return buffer_;
 80178b0:	687b      	ldr	r3, [r7, #4]
}
 80178b2:	4618      	mov	r0, r3
 80178b4:	370c      	adds	r7, #12
 80178b6:	46bd      	mov	sp, r7
 80178b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178bc:	4770      	bx	lr

080178be <_ZN18SimpleStringBuffer13setWriteLimitEj>:

void SimpleStringBuffer::setWriteLimit(size_t write_limit)
{
 80178be:	b480      	push	{r7}
 80178c0:	b083      	sub	sp, #12
 80178c2:	af00      	add	r7, sp, #0
 80178c4:	6078      	str	r0, [r7, #4]
 80178c6:	6039      	str	r1, [r7, #0]
    write_limit_ = write_limit;
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80178ce:	3304      	adds	r3, #4
 80178d0:	683a      	ldr	r2, [r7, #0]
 80178d2:	601a      	str	r2, [r3, #0]
    if (write_limit_ > SIMPLE_STRING_BUFFER_LEN-1)
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80178da:	3304      	adds	r3, #4
 80178dc:	681b      	ldr	r3, [r3, #0]
 80178de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80178e2:	d306      	bcc.n	80178f2 <_ZN18SimpleStringBuffer13setWriteLimitEj+0x34>
        write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80178ea:	3304      	adds	r3, #4
 80178ec:	f640 72ff 	movw	r2, #4095	; 0xfff
 80178f0:	601a      	str	r2, [r3, #0]
}
 80178f2:	bf00      	nop
 80178f4:	370c      	adds	r7, #12
 80178f6:	46bd      	mov	sp, r7
 80178f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178fc:	4770      	bx	lr

080178fe <_ZN18SimpleStringBuffer15resetWriteLimitEv>:
void SimpleStringBuffer::resetWriteLimit()
{
 80178fe:	b480      	push	{r7}
 8017900:	b083      	sub	sp, #12
 8017902:	af00      	add	r7, sp, #0
 8017904:	6078      	str	r0, [r7, #4]
    write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801790c:	3304      	adds	r3, #4
 801790e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8017912:	601a      	str	r2, [r3, #0]
}
 8017914:	bf00      	nop
 8017916:	370c      	adds	r7, #12
 8017918:	46bd      	mov	sp, r7
 801791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801791e:	4770      	bx	lr

08017920 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>:

bool SimpleStringBuffer::reachedItsCapacity()
{
 8017920:	b480      	push	{r7}
 8017922:	b083      	sub	sp, #12
 8017924:	af00      	add	r7, sp, #0
 8017926:	6078      	str	r0, [r7, #4]
    return positions_filled_ >= write_limit_;
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801792e:	681a      	ldr	r2, [r3, #0]
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017936:	3304      	adds	r3, #4
 8017938:	681b      	ldr	r3, [r3, #0]
 801793a:	429a      	cmp	r2, r3
 801793c:	bf2c      	ite	cs
 801793e:	2301      	movcs	r3, #1
 8017940:	2300      	movcc	r3, #0
 8017942:	b2db      	uxtb	r3, r3
}
 8017944:	4618      	mov	r0, r3
 8017946:	370c      	adds	r7, #12
 8017948:	46bd      	mov	sp, r7
 801794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801794e:	4770      	bx	lr

08017950 <_ZN28MemoryLeakOutputStringBufferC1Ev>:
#define MEM_LEAK_ADDITION_MALLOC_WARNING "NOTE:\n" \
                                         "\tMemory leak reports about malloc and free can be caused by allocating using the cpputest version of malloc,\n" \
                                         "\tbut deallocate using the standard free.\n" \
                                         "\tIf this is the case, check whether your malloc/free replacements are working (#define malloc cpputest_malloc etc).\n"

MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
 8017950:	b580      	push	{r7, lr}
 8017952:	b082      	sub	sp, #8
 8017954:	af00      	add	r7, sp, #0
 8017956:	6078      	str	r0, [r7, #4]
    : total_leaks_(0), giveWarningOnUsingMalloc_(false)
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	2200      	movs	r2, #0
 801795c:	601a      	str	r2, [r3, #0]
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	2200      	movs	r2, #0
 8017962:	711a      	strb	r2, [r3, #4]
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	3308      	adds	r3, #8
 8017968:	4618      	mov	r0, r3
 801796a:	f7ff fe8b 	bl	8017684 <_ZN18SimpleStringBufferC1Ev>
{
}
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	4618      	mov	r0, r3
 8017972:	3708      	adds	r7, #8
 8017974:	46bd      	mov	sp, r7
 8017976:	bd80      	pop	{r7, pc}

08017978 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addAllocationLocation(const char* allocationFile, size_t allocationLineNumber, size_t allocationSize, TestMemoryAllocator* allocator)
{
 8017978:	b5b0      	push	{r4, r5, r7, lr}
 801797a:	b086      	sub	sp, #24
 801797c:	af02      	add	r7, sp, #8
 801797e:	60f8      	str	r0, [r7, #12]
 8017980:	60b9      	str	r1, [r7, #8]
 8017982:	607a      	str	r2, [r7, #4]
 8017984:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   allocated at file: %s line: %d size: %lu type: %s\n", allocationFile, (int) allocationLineNumber, (unsigned long) allocationSize, allocator->alloc_name());
 8017986:	68fb      	ldr	r3, [r7, #12]
 8017988:	f103 0408 	add.w	r4, r3, #8
 801798c:	687d      	ldr	r5, [r7, #4]
 801798e:	6a3b      	ldr	r3, [r7, #32]
 8017990:	681b      	ldr	r3, [r3, #0]
 8017992:	3314      	adds	r3, #20
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	6a38      	ldr	r0, [r7, #32]
 8017998:	4798      	blx	r3
 801799a:	4603      	mov	r3, r0
 801799c:	9301      	str	r3, [sp, #4]
 801799e:	683b      	ldr	r3, [r7, #0]
 80179a0:	9300      	str	r3, [sp, #0]
 80179a2:	462b      	mov	r3, r5
 80179a4:	68ba      	ldr	r2, [r7, #8]
 80179a6:	4904      	ldr	r1, [pc, #16]	; (80179b8 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator+0x40>)
 80179a8:	4620      	mov	r0, r4
 80179aa:	f7ff fe97 	bl	80176dc <_ZN18SimpleStringBuffer3addEPKcz>
}
 80179ae:	bf00      	nop
 80179b0:	3710      	adds	r7, #16
 80179b2:	46bd      	mov	sp, r7
 80179b4:	bdb0      	pop	{r4, r5, r7, pc}
 80179b6:	bf00      	nop
 80179b8:	08027588 	.word	0x08027588

080179bc <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addDeallocationLocation(const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* allocator)
{
 80179bc:	b5b0      	push	{r4, r5, r7, lr}
 80179be:	b086      	sub	sp, #24
 80179c0:	af02      	add	r7, sp, #8
 80179c2:	60f8      	str	r0, [r7, #12]
 80179c4:	60b9      	str	r1, [r7, #8]
 80179c6:	607a      	str	r2, [r7, #4]
 80179c8:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   deallocated at file: %s line: %d type: %s\n", freeFile, (int) freeLineNumber, allocator->free_name());
 80179ca:	68fb      	ldr	r3, [r7, #12]
 80179cc:	f103 0408 	add.w	r4, r3, #8
 80179d0:	687d      	ldr	r5, [r7, #4]
 80179d2:	683b      	ldr	r3, [r7, #0]
 80179d4:	681b      	ldr	r3, [r3, #0]
 80179d6:	3318      	adds	r3, #24
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	6838      	ldr	r0, [r7, #0]
 80179dc:	4798      	blx	r3
 80179de:	4603      	mov	r3, r0
 80179e0:	9300      	str	r3, [sp, #0]
 80179e2:	462b      	mov	r3, r5
 80179e4:	68ba      	ldr	r2, [r7, #8]
 80179e6:	4904      	ldr	r1, [pc, #16]	; (80179f8 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator+0x3c>)
 80179e8:	4620      	mov	r0, r4
 80179ea:	f7ff fe77 	bl	80176dc <_ZN18SimpleStringBuffer3addEPKcz>
}
 80179ee:	bf00      	nop
 80179f0:	3710      	adds	r7, #16
 80179f2:	46bd      	mov	sp, r7
 80179f4:	bdb0      	pop	{r4, r5, r7, pc}
 80179f6:	bf00      	nop
 80179f8:	080275c0 	.word	0x080275c0

080179fc <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>:

void MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
{
 80179fc:	b580      	push	{r7, lr}
 80179fe:	b082      	sub	sp, #8
 8017a00:	af00      	add	r7, sp, #0
 8017a02:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("No memory leaks were detected.");
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	3308      	adds	r3, #8
 8017a08:	4903      	ldr	r1, [pc, #12]	; (8017a18 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv+0x1c>)
 8017a0a:	4618      	mov	r0, r3
 8017a0c:	f7ff fe66 	bl	80176dc <_ZN18SimpleStringBuffer3addEPKcz>
}
 8017a10:	bf00      	nop
 8017a12:	3708      	adds	r7, #8
 8017a14:	46bd      	mov	sp, r7
 8017a16:	bd80      	pop	{r7, pc}
 8017a18:	080275f0 	.word	0x080275f0

08017a1c <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
{
 8017a1c:	b580      	push	{r7, lr}
 8017a1e:	b084      	sub	sp, #16
 8017a20:	af00      	add	r7, sp, #0
 8017a22:	6078      	str	r0, [r7, #4]
    giveWarningOnUsingMalloc_ = false;
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	2200      	movs	r2, #0
 8017a28:	711a      	strb	r2, [r3, #4]
    total_leaks_ = 0;
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	2200      	movs	r2, #0
 8017a2e:	601a      	str	r2, [r3, #0]

    size_t memory_leak_normal_footer_size = sizeof(MEM_LEAK_FOOTER) + 10 + sizeof(MEM_LEAK_TOO_MUCH); /* the number of leaks */
 8017a30:	2367      	movs	r3, #103	; 0x67
 8017a32:	60fb      	str	r3, [r7, #12]
    size_t memory_leak_foot_size_with_malloc_warning = memory_leak_normal_footer_size + sizeof(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8017a34:	68fb      	ldr	r3, [r7, #12]
 8017a36:	f203 1311 	addw	r3, r3, #273	; 0x111
 8017a3a:	60bb      	str	r3, [r7, #8]

    outputBuffer_.setWriteLimit(SimpleStringBuffer::SIMPLE_STRING_BUFFER_LEN - memory_leak_foot_size_with_malloc_warning);
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	f103 0208 	add.w	r2, r3, #8
 8017a42:	68bb      	ldr	r3, [r7, #8]
 8017a44:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8017a48:	4619      	mov	r1, r3
 8017a4a:	4610      	mov	r0, r2
 8017a4c:	f7ff ff37 	bl	80178be <_ZN18SimpleStringBuffer13setWriteLimitEj>
}
 8017a50:	bf00      	nop
 8017a52:	3710      	adds	r7, #16
 8017a54:	46bd      	mov	sp, r7
 8017a56:	bd80      	pop	{r7, pc}

08017a58 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>:

void MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode* leak)
{
 8017a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a5a:	b089      	sub	sp, #36	; 0x24
 8017a5c:	af04      	add	r7, sp, #16
 8017a5e:	60f8      	str	r0, [r7, #12]
 8017a60:	60b9      	str	r1, [r7, #8]
    if (total_leaks_ == 0) {
 8017a62:	68fb      	ldr	r3, [r7, #12]
 8017a64:	681b      	ldr	r3, [r3, #0]
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	d102      	bne.n	8017a70 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0x18>
        addMemoryLeakHeader();
 8017a6a:	68f8      	ldr	r0, [r7, #12]
 8017a6c:	f000 f882 	bl	8017b74 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>
    }

    total_leaks_++;
 8017a70:	68fb      	ldr	r3, [r7, #12]
 8017a72:	681b      	ldr	r3, [r3, #0]
 8017a74:	1c5a      	adds	r2, r3, #1
 8017a76:	68fb      	ldr	r3, [r7, #12]
 8017a78:	601a      	str	r2, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8017a7a:	68fb      	ldr	r3, [r7, #12]
 8017a7c:	f103 0508 	add.w	r5, r3, #8
 8017a80:	68bb      	ldr	r3, [r7, #8]
 8017a82:	685e      	ldr	r6, [r3, #4]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8017a84:	68bb      	ldr	r3, [r7, #8]
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	607b      	str	r3, [r7, #4]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8017a8a:	68bb      	ldr	r3, [r7, #8]
 8017a8c:	68dc      	ldr	r4, [r3, #12]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8017a8e:	68bb      	ldr	r3, [r7, #8]
 8017a90:	691b      	ldr	r3, [r3, #16]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8017a92:	603b      	str	r3, [r7, #0]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8017a94:	68bb      	ldr	r3, [r7, #8]
 8017a96:	695a      	ldr	r2, [r3, #20]
 8017a98:	68bb      	ldr	r3, [r7, #8]
 8017a9a:	695b      	ldr	r3, [r3, #20]
 8017a9c:	681b      	ldr	r3, [r3, #0]
 8017a9e:	3314      	adds	r3, #20
 8017aa0:	681b      	ldr	r3, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8017aa2:	4610      	mov	r0, r2
 8017aa4:	4798      	blx	r3
 8017aa6:	4602      	mov	r2, r0
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8017aa8:	68bb      	ldr	r3, [r7, #8]
 8017aaa:	689b      	ldr	r3, [r3, #8]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8017aac:	9303      	str	r3, [sp, #12]
 8017aae:	9202      	str	r2, [sp, #8]
 8017ab0:	683a      	ldr	r2, [r7, #0]
 8017ab2:	9201      	str	r2, [sp, #4]
 8017ab4:	9400      	str	r4, [sp, #0]
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	4632      	mov	r2, r6
 8017aba:	4915      	ldr	r1, [pc, #84]	; (8017b10 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb8>)
 8017abc:	4628      	mov	r0, r5
 8017abe:	f7ff fe0d 	bl	80176dc <_ZN18SimpleStringBuffer3addEPKcz>
    outputBuffer_.addMemoryDump(leak->memory_, leak->size_);
 8017ac2:	68fb      	ldr	r3, [r7, #12]
 8017ac4:	f103 0008 	add.w	r0, r3, #8
 8017ac8:	68bb      	ldr	r3, [r7, #8]
 8017aca:	6899      	ldr	r1, [r3, #8]
 8017acc:	68bb      	ldr	r3, [r7, #8]
 8017ace:	681b      	ldr	r3, [r3, #0]
 8017ad0:	461a      	mov	r2, r3
 8017ad2:	f7ff fe53 	bl	801777c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>

    if (SimpleString::StrCmp(leak->allocator_->alloc_name(), (const char*) "malloc") == 0)
 8017ad6:	68bb      	ldr	r3, [r7, #8]
 8017ad8:	695a      	ldr	r2, [r3, #20]
 8017ada:	68bb      	ldr	r3, [r7, #8]
 8017adc:	695b      	ldr	r3, [r3, #20]
 8017ade:	681b      	ldr	r3, [r3, #0]
 8017ae0:	3314      	adds	r3, #20
 8017ae2:	681b      	ldr	r3, [r3, #0]
 8017ae4:	4610      	mov	r0, r2
 8017ae6:	4798      	blx	r3
 8017ae8:	4603      	mov	r3, r0
 8017aea:	490a      	ldr	r1, [pc, #40]	; (8017b14 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xbc>)
 8017aec:	4618      	mov	r0, r3
 8017aee:	f7f6 f887 	bl	800dc00 <_ZN12SimpleString6StrCmpEPKcS1_>
 8017af2:	4603      	mov	r3, r0
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	bf0c      	ite	eq
 8017af8:	2301      	moveq	r3, #1
 8017afa:	2300      	movne	r3, #0
 8017afc:	b2db      	uxtb	r3, r3
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	d002      	beq.n	8017b08 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb0>
        giveWarningOnUsingMalloc_ = true;
 8017b02:	68fb      	ldr	r3, [r7, #12]
 8017b04:	2201      	movs	r2, #1
 8017b06:	711a      	strb	r2, [r3, #4]
}
 8017b08:	bf00      	nop
 8017b0a:	3714      	adds	r7, #20
 8017b0c:	46bd      	mov	sp, r7
 8017b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b10:	08027610 	.word	0x08027610
 8017b14:	08027670 	.word	0x08027670

08017b18 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
{
 8017b18:	b580      	push	{r7, lr}
 8017b1a:	b084      	sub	sp, #16
 8017b1c:	af00      	add	r7, sp, #0
 8017b1e:	6078      	str	r0, [r7, #4]
    if (total_leaks_ == 0) {
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	681b      	ldr	r3, [r3, #0]
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d103      	bne.n	8017b30 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x18>
        addNoMemoryLeaksMessage();
 8017b28:	6878      	ldr	r0, [r7, #4]
 8017b2a:	f7ff ff67 	bl	80179fc <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>
        return;
 8017b2e:	e01e      	b.n	8017b6e <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
    }

    bool buffer_reached_its_capacity = outputBuffer_.reachedItsCapacity();
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	3308      	adds	r3, #8
 8017b34:	4618      	mov	r0, r3
 8017b36:	f7ff fef3 	bl	8017920 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>
 8017b3a:	4603      	mov	r3, r0
 8017b3c:	73fb      	strb	r3, [r7, #15]
    outputBuffer_.resetWriteLimit();
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	3308      	adds	r3, #8
 8017b42:	4618      	mov	r0, r3
 8017b44:	f7ff fedb 	bl	80178fe <_ZN18SimpleStringBuffer15resetWriteLimitEv>

    if (buffer_reached_its_capacity)
 8017b48:	7bfb      	ldrb	r3, [r7, #15]
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d002      	beq.n	8017b54 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x3c>
        addErrorMessageForTooMuchLeaks();
 8017b4e:	6878      	ldr	r0, [r7, #4]
 8017b50:	f000 f820 	bl	8017b94 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>

    addMemoryLeakFooter(total_leaks_);
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	681b      	ldr	r3, [r3, #0]
 8017b58:	4619      	mov	r1, r3
 8017b5a:	6878      	ldr	r0, [r7, #4]
 8017b5c:	f000 f82a 	bl	8017bb4 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>

    if (giveWarningOnUsingMalloc_)
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	791b      	ldrb	r3, [r3, #4]
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	d002      	beq.n	8017b6e <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
        addWarningForUsingMalloc();
 8017b68:	6878      	ldr	r0, [r7, #4]
 8017b6a:	f000 f839 	bl	8017be0 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>

}
 8017b6e:	3710      	adds	r7, #16
 8017b70:	46bd      	mov	sp, r7
 8017b72:	bd80      	pop	{r7, pc}

08017b74 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>:

void MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
{
 8017b74:	b580      	push	{r7, lr}
 8017b76:	b082      	sub	sp, #8
 8017b78:	af00      	add	r7, sp, #0
 8017b7a:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("Memory leak(s) found.\n");
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	3308      	adds	r3, #8
 8017b80:	4903      	ldr	r1, [pc, #12]	; (8017b90 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv+0x1c>)
 8017b82:	4618      	mov	r0, r3
 8017b84:	f7ff fdaa 	bl	80176dc <_ZN18SimpleStringBuffer3addEPKcz>
}
 8017b88:	bf00      	nop
 8017b8a:	3708      	adds	r7, #8
 8017b8c:	46bd      	mov	sp, r7
 8017b8e:	bd80      	pop	{r7, pc}
 8017b90:	08027678 	.word	0x08027678

08017b94 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>:

void MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
{
 8017b94:	b580      	push	{r7, lr}
 8017b96:	b082      	sub	sp, #8
 8017b98:	af00      	add	r7, sp, #0
 8017b9a:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_TOO_MUCH);
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	3308      	adds	r3, #8
 8017ba0:	4903      	ldr	r1, [pc, #12]	; (8017bb0 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv+0x1c>)
 8017ba2:	4618      	mov	r0, r3
 8017ba4:	f7ff fd9a 	bl	80176dc <_ZN18SimpleStringBuffer3addEPKcz>
}
 8017ba8:	bf00      	nop
 8017baa:	3708      	adds	r7, #8
 8017bac:	46bd      	mov	sp, r7
 8017bae:	bd80      	pop	{r7, pc}
 8017bb0:	08027690 	.word	0x08027690

08017bb4 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>:

void MemoryLeakOutputStringBuffer::addMemoryLeakFooter(size_t amountOfLeaks)
{
 8017bb4:	b580      	push	{r7, lr}
 8017bb6:	b082      	sub	sp, #8
 8017bb8:	af00      	add	r7, sp, #0
 8017bba:	6078      	str	r0, [r7, #4]
 8017bbc:	6039      	str	r1, [r7, #0]
    outputBuffer_.add("%s %d\n", MEM_LEAK_FOOTER, (int) amountOfLeaks);
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	f103 0008 	add.w	r0, r3, #8
 8017bc4:	683b      	ldr	r3, [r7, #0]
 8017bc6:	4a04      	ldr	r2, [pc, #16]	; (8017bd8 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x24>)
 8017bc8:	4904      	ldr	r1, [pc, #16]	; (8017bdc <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x28>)
 8017bca:	f7ff fd87 	bl	80176dc <_ZN18SimpleStringBuffer3addEPKcz>
}
 8017bce:	bf00      	nop
 8017bd0:	3708      	adds	r7, #8
 8017bd2:	46bd      	mov	sp, r7
 8017bd4:	bd80      	pop	{r7, pc}
 8017bd6:	bf00      	nop
 8017bd8:	080276d8 	.word	0x080276d8
 8017bdc:	080276f0 	.word	0x080276f0

08017be0 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>:

void MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
{
 8017be0:	b580      	push	{r7, lr}
 8017be2:	b082      	sub	sp, #8
 8017be4:	af00      	add	r7, sp, #0
 8017be6:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	3308      	adds	r3, #8
 8017bec:	4903      	ldr	r1, [pc, #12]	; (8017bfc <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv+0x1c>)
 8017bee:	4618      	mov	r0, r3
 8017bf0:	f7ff fd74 	bl	80176dc <_ZN18SimpleStringBuffer3addEPKcz>
}
 8017bf4:	bf00      	nop
 8017bf6:	3708      	adds	r7, #8
 8017bf8:	46bd      	mov	sp, r7
 8017bfa:	bd80      	pop	{r7, pc}
 8017bfc:	080276f8 	.word	0x080276f8

08017c00 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char* freeFile, size_t freeLine, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8017c00:	b580      	push	{r7, lr}
 8017c02:	b08a      	sub	sp, #40	; 0x28
 8017c04:	af06      	add	r7, sp, #24
 8017c06:	60f8      	str	r0, [r7, #12]
 8017c08:	60b9      	str	r1, [r7, #8]
 8017c0a:	607a      	str	r2, [r7, #4]
 8017c0c:	603b      	str	r3, [r7, #0]
    reportFailure("Deallocating non-allocated memory\n", "<unknown>", 0, 0, NullUnknownAllocator::defaultAllocator(), freeFile, freeLine, freeAllocator, reporter);
 8017c0e:	f7f9 fe8d 	bl	801192c <_ZN20NullUnknownAllocator16defaultAllocatorEv>
 8017c12:	4602      	mov	r2, r0
 8017c14:	69bb      	ldr	r3, [r7, #24]
 8017c16:	9305      	str	r3, [sp, #20]
 8017c18:	683b      	ldr	r3, [r7, #0]
 8017c1a:	9304      	str	r3, [sp, #16]
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	9303      	str	r3, [sp, #12]
 8017c20:	68bb      	ldr	r3, [r7, #8]
 8017c22:	9302      	str	r3, [sp, #8]
 8017c24:	9201      	str	r2, [sp, #4]
 8017c26:	2300      	movs	r3, #0
 8017c28:	9300      	str	r3, [sp, #0]
 8017c2a:	2300      	movs	r3, #0
 8017c2c:	4a04      	ldr	r2, [pc, #16]	; (8017c40 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x40>)
 8017c2e:	4905      	ldr	r1, [pc, #20]	; (8017c44 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x44>)
 8017c30:	68f8      	ldr	r0, [r7, #12]
 8017c32:	f000 f855 	bl	8017ce0 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8017c36:	bf00      	nop
 8017c38:	3710      	adds	r7, #16
 8017c3a:	46bd      	mov	sp, r7
 8017c3c:	bd80      	pop	{r7, pc}
 8017c3e:	bf00      	nop
 8017c40:	08027554 	.word	0x08027554
 8017c44:	0802780c 	.word	0x0802780c

08017c48 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8017c48:	b590      	push	{r4, r7, lr}
 8017c4a:	b08b      	sub	sp, #44	; 0x2c
 8017c4c:	af06      	add	r7, sp, #24
 8017c4e:	60f8      	str	r0, [r7, #12]
 8017c50:	60b9      	str	r1, [r7, #8]
 8017c52:	607a      	str	r2, [r7, #4]
 8017c54:	603b      	str	r3, [r7, #0]
    reportFailure("Allocation/deallocation type mismatch\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8017c56:	68bb      	ldr	r3, [r7, #8]
 8017c58:	68d8      	ldr	r0, [r3, #12]
 8017c5a:	68bb      	ldr	r3, [r7, #8]
 8017c5c:	691c      	ldr	r4, [r3, #16]
 8017c5e:	68bb      	ldr	r3, [r7, #8]
 8017c60:	681b      	ldr	r3, [r3, #0]
 8017c62:	68ba      	ldr	r2, [r7, #8]
 8017c64:	6952      	ldr	r2, [r2, #20]
 8017c66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017c68:	9105      	str	r1, [sp, #20]
 8017c6a:	6a39      	ldr	r1, [r7, #32]
 8017c6c:	9104      	str	r1, [sp, #16]
 8017c6e:	6839      	ldr	r1, [r7, #0]
 8017c70:	9103      	str	r1, [sp, #12]
 8017c72:	6879      	ldr	r1, [r7, #4]
 8017c74:	9102      	str	r1, [sp, #8]
 8017c76:	9201      	str	r2, [sp, #4]
 8017c78:	9300      	str	r3, [sp, #0]
 8017c7a:	4623      	mov	r3, r4
 8017c7c:	4602      	mov	r2, r0
 8017c7e:	4904      	ldr	r1, [pc, #16]	; (8017c90 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8017c80:	68f8      	ldr	r0, [r7, #12]
 8017c82:	f000 f82d 	bl	8017ce0 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8017c86:	bf00      	nop
 8017c88:	3714      	adds	r7, #20
 8017c8a:	46bd      	mov	sp, r7
 8017c8c:	bd90      	pop	{r4, r7, pc}
 8017c8e:	bf00      	nop
 8017c90:	08027830 	.word	0x08027830

08017c94 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8017c94:	b590      	push	{r4, r7, lr}
 8017c96:	b08b      	sub	sp, #44	; 0x2c
 8017c98:	af06      	add	r7, sp, #24
 8017c9a:	60f8      	str	r0, [r7, #12]
 8017c9c:	60b9      	str	r1, [r7, #8]
 8017c9e:	607a      	str	r2, [r7, #4]
 8017ca0:	603b      	str	r3, [r7, #0]
        reportFailure("Memory corruption (written out of bounds?)\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8017ca2:	68bb      	ldr	r3, [r7, #8]
 8017ca4:	68d8      	ldr	r0, [r3, #12]
 8017ca6:	68bb      	ldr	r3, [r7, #8]
 8017ca8:	691c      	ldr	r4, [r3, #16]
 8017caa:	68bb      	ldr	r3, [r7, #8]
 8017cac:	681b      	ldr	r3, [r3, #0]
 8017cae:	68ba      	ldr	r2, [r7, #8]
 8017cb0:	6952      	ldr	r2, [r2, #20]
 8017cb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017cb4:	9105      	str	r1, [sp, #20]
 8017cb6:	6a39      	ldr	r1, [r7, #32]
 8017cb8:	9104      	str	r1, [sp, #16]
 8017cba:	6839      	ldr	r1, [r7, #0]
 8017cbc:	9103      	str	r1, [sp, #12]
 8017cbe:	6879      	ldr	r1, [r7, #4]
 8017cc0:	9102      	str	r1, [sp, #8]
 8017cc2:	9201      	str	r2, [sp, #4]
 8017cc4:	9300      	str	r3, [sp, #0]
 8017cc6:	4623      	mov	r3, r4
 8017cc8:	4602      	mov	r2, r0
 8017cca:	4904      	ldr	r1, [pc, #16]	; (8017cdc <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8017ccc:	68f8      	ldr	r0, [r7, #12]
 8017cce:	f000 f807 	bl	8017ce0 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8017cd2:	bf00      	nop
 8017cd4:	3714      	adds	r7, #20
 8017cd6:	46bd      	mov	sp, r7
 8017cd8:	bd90      	pop	{r4, r7, pc}
 8017cda:	bf00      	nop
 8017cdc:	08027858 	.word	0x08027858

08017ce0 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportFailure(const char* message, const char* allocFile, size_t allocLine, size_t allocSize, TestMemoryAllocator* allocAllocator, const char* freeFile, size_t freeLine,
        TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8017ce0:	b590      	push	{r4, r7, lr}
 8017ce2:	b087      	sub	sp, #28
 8017ce4:	af02      	add	r7, sp, #8
 8017ce6:	60f8      	str	r0, [r7, #12]
 8017ce8:	60b9      	str	r1, [r7, #8]
 8017cea:	607a      	str	r2, [r7, #4]
 8017cec:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("%s", message);
 8017cee:	68fb      	ldr	r3, [r7, #12]
 8017cf0:	3308      	adds	r3, #8
 8017cf2:	68ba      	ldr	r2, [r7, #8]
 8017cf4:	4910      	ldr	r1, [pc, #64]	; (8017d38 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure+0x58>)
 8017cf6:	4618      	mov	r0, r3
 8017cf8:	f7ff fcf0 	bl	80176dc <_ZN18SimpleStringBuffer3addEPKcz>
    addAllocationLocation(allocFile, allocLine, allocSize, allocAllocator);
 8017cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cfe:	9300      	str	r3, [sp, #0]
 8017d00:	6a3b      	ldr	r3, [r7, #32]
 8017d02:	683a      	ldr	r2, [r7, #0]
 8017d04:	6879      	ldr	r1, [r7, #4]
 8017d06:	68f8      	ldr	r0, [r7, #12]
 8017d08:	f7ff fe36 	bl	8017978 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>
    addDeallocationLocation(freeFile, freeLine, freeAllocator);
 8017d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017d12:	68f8      	ldr	r0, [r7, #12]
 8017d14:	f7ff fe52 	bl	80179bc <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>
    reporter->fail(toString());
 8017d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d1a:	681b      	ldr	r3, [r3, #0]
 8017d1c:	3308      	adds	r3, #8
 8017d1e:	681c      	ldr	r4, [r3, #0]
 8017d20:	68f8      	ldr	r0, [r7, #12]
 8017d22:	f000 f80b 	bl	8017d3c <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8017d26:	4603      	mov	r3, r0
 8017d28:	4619      	mov	r1, r3
 8017d2a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017d2c:	47a0      	blx	r4
}
 8017d2e:	bf00      	nop
 8017d30:	3714      	adds	r7, #20
 8017d32:	46bd      	mov	sp, r7
 8017d34:	bd90      	pop	{r4, r7, pc}
 8017d36:	bf00      	nop
 8017d38:	08027884 	.word	0x08027884

08017d3c <_ZN28MemoryLeakOutputStringBuffer8toStringEv>:


char* MemoryLeakOutputStringBuffer::toString()
{
 8017d3c:	b580      	push	{r7, lr}
 8017d3e:	b082      	sub	sp, #8
 8017d40:	af00      	add	r7, sp, #0
 8017d42:	6078      	str	r0, [r7, #4]
    return outputBuffer_.toString();
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	3308      	adds	r3, #8
 8017d48:	4618      	mov	r0, r3
 8017d4a:	f7ff fdad 	bl	80178a8 <_ZN18SimpleStringBuffer8toStringEv>
 8017d4e:	4603      	mov	r3, r0
}
 8017d50:	4618      	mov	r0, r3
 8017d52:	3708      	adds	r7, #8
 8017d54:	46bd      	mov	sp, r7
 8017d56:	bd80      	pop	{r7, pc}

08017d58 <_ZN28MemoryLeakOutputStringBuffer5clearEv>:

void MemoryLeakOutputStringBuffer::clear()
{
 8017d58:	b580      	push	{r7, lr}
 8017d5a:	b082      	sub	sp, #8
 8017d5c:	af00      	add	r7, sp, #0
 8017d5e:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	3308      	adds	r3, #8
 8017d64:	4618      	mov	r0, r3
 8017d66:	f7ff fca7 	bl	80176b8 <_ZN18SimpleStringBuffer5clearEv>
}
 8017d6a:	bf00      	nop
 8017d6c:	3708      	adds	r7, #8
 8017d6e:	46bd      	mov	sp, r7
 8017d70:	bd80      	pop	{r7, pc}

08017d72 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>:

////////////////////////

void MemoryLeakDetectorNode::init(char* memory, unsigned number, size_t size, TestMemoryAllocator* allocator, MemLeakPeriod period, unsigned char allocation_stage, const char* file, size_t line)
{
 8017d72:	b480      	push	{r7}
 8017d74:	b085      	sub	sp, #20
 8017d76:	af00      	add	r7, sp, #0
 8017d78:	60f8      	str	r0, [r7, #12]
 8017d7a:	60b9      	str	r1, [r7, #8]
 8017d7c:	607a      	str	r2, [r7, #4]
 8017d7e:	603b      	str	r3, [r7, #0]
    number_ = number;
 8017d80:	68fb      	ldr	r3, [r7, #12]
 8017d82:	687a      	ldr	r2, [r7, #4]
 8017d84:	605a      	str	r2, [r3, #4]
    memory_ = memory;
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	68ba      	ldr	r2, [r7, #8]
 8017d8a:	609a      	str	r2, [r3, #8]
    size_ = size;
 8017d8c:	68fb      	ldr	r3, [r7, #12]
 8017d8e:	683a      	ldr	r2, [r7, #0]
 8017d90:	601a      	str	r2, [r3, #0]
    allocator_ = allocator;
 8017d92:	68fb      	ldr	r3, [r7, #12]
 8017d94:	69ba      	ldr	r2, [r7, #24]
 8017d96:	615a      	str	r2, [r3, #20]
    period_ = period;
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	7f3a      	ldrb	r2, [r7, #28]
 8017d9c:	761a      	strb	r2, [r3, #24]
    allocation_stage_ = allocation_stage;
 8017d9e:	68fb      	ldr	r3, [r7, #12]
 8017da0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8017da4:	765a      	strb	r2, [r3, #25]
    file_ = file;
 8017da6:	68fb      	ldr	r3, [r7, #12]
 8017da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017daa:	60da      	str	r2, [r3, #12]
    line_ = line;
 8017dac:	68fb      	ldr	r3, [r7, #12]
 8017dae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017db0:	611a      	str	r2, [r3, #16]
}
 8017db2:	bf00      	nop
 8017db4:	3714      	adds	r7, #20
 8017db6:	46bd      	mov	sp, r7
 8017db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dbc:	4770      	bx	lr

08017dbe <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>:

///////////////////////

bool MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8017dbe:	b480      	push	{r7}
 8017dc0:	b085      	sub	sp, #20
 8017dc2:	af00      	add	r7, sp, #0
 8017dc4:	60f8      	str	r0, [r7, #12]
 8017dc6:	60b9      	str	r1, [r7, #8]
 8017dc8:	4613      	mov	r3, r2
 8017dca:	71fb      	strb	r3, [r7, #7]
    return period == mem_leak_period_all || node->period_ == period || (node->period_ != mem_leak_period_disabled && period == mem_leak_period_enabled);
 8017dcc:	79fb      	ldrb	r3, [r7, #7]
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d00b      	beq.n	8017dea <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 8017dd2:	68bb      	ldr	r3, [r7, #8]
 8017dd4:	7e1b      	ldrb	r3, [r3, #24]
 8017dd6:	79fa      	ldrb	r2, [r7, #7]
 8017dd8:	429a      	cmp	r2, r3
 8017dda:	d006      	beq.n	8017dea <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 8017ddc:	68bb      	ldr	r3, [r7, #8]
 8017dde:	7e1b      	ldrb	r3, [r3, #24]
 8017de0:	2b01      	cmp	r3, #1
 8017de2:	d004      	beq.n	8017dee <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 8017de4:	79fb      	ldrb	r3, [r7, #7]
 8017de6:	2b02      	cmp	r3, #2
 8017de8:	d101      	bne.n	8017dee <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 8017dea:	2301      	movs	r3, #1
 8017dec:	e000      	b.n	8017df0 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x32>
 8017dee:	2300      	movs	r3, #0
}
 8017df0:	4618      	mov	r0, r3
 8017df2:	3714      	adds	r7, #20
 8017df4:	46bd      	mov	sp, r7
 8017df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dfa:	4770      	bx	lr

08017dfc <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>:
        cur = cur->next_;
    }
}

void MemoryLeakDetectorList::addNewNode(MemoryLeakDetectorNode* node)
{
 8017dfc:	b480      	push	{r7}
 8017dfe:	b083      	sub	sp, #12
 8017e00:	af00      	add	r7, sp, #0
 8017e02:	6078      	str	r0, [r7, #4]
 8017e04:	6039      	str	r1, [r7, #0]
    node->next_ = head_;
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	681a      	ldr	r2, [r3, #0]
 8017e0a:	683b      	ldr	r3, [r7, #0]
 8017e0c:	61da      	str	r2, [r3, #28]
    head_ = node;
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	683a      	ldr	r2, [r7, #0]
 8017e12:	601a      	str	r2, [r3, #0]
}
 8017e14:	bf00      	nop
 8017e16:	370c      	adds	r7, #12
 8017e18:	46bd      	mov	sp, r7
 8017e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e1e:	4770      	bx	lr

08017e20 <_ZN22MemoryLeakDetectorList10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::removeNode(char* memory)
{
 8017e20:	b480      	push	{r7}
 8017e22:	b085      	sub	sp, #20
 8017e24:	af00      	add	r7, sp, #0
 8017e26:	6078      	str	r0, [r7, #4]
 8017e28:	6039      	str	r1, [r7, #0]
    MemoryLeakDetectorNode* cur = head_;
 8017e2a:	687b      	ldr	r3, [r7, #4]
 8017e2c:	681b      	ldr	r3, [r3, #0]
 8017e2e:	60fb      	str	r3, [r7, #12]
    MemoryLeakDetectorNode* prev = NULLPTR;
 8017e30:	2300      	movs	r3, #0
 8017e32:	60bb      	str	r3, [r7, #8]
    while (cur) {
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d019      	beq.n	8017e6e <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x4e>
        if (cur->memory_ == memory) {
 8017e3a:	68fb      	ldr	r3, [r7, #12]
 8017e3c:	689b      	ldr	r3, [r3, #8]
 8017e3e:	683a      	ldr	r2, [r7, #0]
 8017e40:	429a      	cmp	r2, r3
 8017e42:	d10e      	bne.n	8017e62 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x42>
            if (prev) {
 8017e44:	68bb      	ldr	r3, [r7, #8]
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	d005      	beq.n	8017e56 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x36>
                prev->next_ = cur->next_;
 8017e4a:	68fb      	ldr	r3, [r7, #12]
 8017e4c:	69da      	ldr	r2, [r3, #28]
 8017e4e:	68bb      	ldr	r3, [r7, #8]
 8017e50:	61da      	str	r2, [r3, #28]
                return cur;
 8017e52:	68fb      	ldr	r3, [r7, #12]
 8017e54:	e00c      	b.n	8017e70 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
            else {
                head_ = cur->next_;
 8017e56:	68fb      	ldr	r3, [r7, #12]
 8017e58:	69da      	ldr	r2, [r3, #28]
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	601a      	str	r2, [r3, #0]
                return cur;
 8017e5e:	68fb      	ldr	r3, [r7, #12]
 8017e60:	e006      	b.n	8017e70 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
        }
        prev = cur;
 8017e62:	68fb      	ldr	r3, [r7, #12]
 8017e64:	60bb      	str	r3, [r7, #8]
        cur = cur->next_;
 8017e66:	68fb      	ldr	r3, [r7, #12]
 8017e68:	69db      	ldr	r3, [r3, #28]
 8017e6a:	60fb      	str	r3, [r7, #12]
    while (cur) {
 8017e6c:	e7e2      	b.n	8017e34 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x14>
    }
    return NULLPTR;
 8017e6e:	2300      	movs	r3, #0
}
 8017e70:	4618      	mov	r0, r3
 8017e72:	3714      	adds	r7, #20
 8017e74:	46bd      	mov	sp, r7
 8017e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e7a:	4770      	bx	lr

08017e7c <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::retrieveNode(char* memory)
{
 8017e7c:	b480      	push	{r7}
 8017e7e:	b085      	sub	sp, #20
 8017e80:	af00      	add	r7, sp, #0
 8017e82:	6078      	str	r0, [r7, #4]
 8017e84:	6039      	str	r1, [r7, #0]
  MemoryLeakDetectorNode* cur = head_;
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	681b      	ldr	r3, [r3, #0]
 8017e8a:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8017e8c:	68fb      	ldr	r3, [r7, #12]
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d00a      	beq.n	8017ea8 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2c>
    if (cur->memory_ == memory)
 8017e92:	68fb      	ldr	r3, [r7, #12]
 8017e94:	689b      	ldr	r3, [r3, #8]
 8017e96:	683a      	ldr	r2, [r7, #0]
 8017e98:	429a      	cmp	r2, r3
 8017e9a:	d101      	bne.n	8017ea0 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x24>
      return cur;
 8017e9c:	68fb      	ldr	r3, [r7, #12]
 8017e9e:	e004      	b.n	8017eaa <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2e>
    cur = cur->next_;
 8017ea0:	68fb      	ldr	r3, [r7, #12]
 8017ea2:	69db      	ldr	r3, [r3, #28]
 8017ea4:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8017ea6:	e7f1      	b.n	8017e8c <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x10>
  }
  return NULLPTR;
 8017ea8:	2300      	movs	r3, #0
}
 8017eaa:	4618      	mov	r0, r3
 8017eac:	3714      	adds	r7, #20
 8017eae:	46bd      	mov	sp, r7
 8017eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eb4:	4770      	bx	lr

08017eb6 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8017eb6:	b580      	push	{r7, lr}
 8017eb8:	b086      	sub	sp, #24
 8017eba:	af00      	add	r7, sp, #0
 8017ebc:	60f8      	str	r0, [r7, #12]
 8017ebe:	60b9      	str	r1, [r7, #8]
 8017ec0:	4613      	mov	r3, r2
 8017ec2:	71fb      	strb	r3, [r7, #7]
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8017ec4:	68bb      	ldr	r3, [r7, #8]
 8017ec6:	617b      	str	r3, [r7, #20]
 8017ec8:	697b      	ldr	r3, [r7, #20]
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d00e      	beq.n	8017eec <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x36>
        if (isInPeriod(cur, period)) return cur;
 8017ece:	79fb      	ldrb	r3, [r7, #7]
 8017ed0:	461a      	mov	r2, r3
 8017ed2:	6979      	ldr	r1, [r7, #20]
 8017ed4:	68f8      	ldr	r0, [r7, #12]
 8017ed6:	f7ff ff72 	bl	8017dbe <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8017eda:	4603      	mov	r3, r0
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d001      	beq.n	8017ee4 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2e>
 8017ee0:	697b      	ldr	r3, [r7, #20]
 8017ee2:	e004      	b.n	8017eee <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x38>
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8017ee4:	697b      	ldr	r3, [r7, #20]
 8017ee6:	69db      	ldr	r3, [r3, #28]
 8017ee8:	617b      	str	r3, [r7, #20]
 8017eea:	e7ed      	b.n	8017ec8 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x12>
    return NULLPTR;
 8017eec:	2300      	movs	r3, #0
}
 8017eee:	4618      	mov	r0, r3
 8017ef0:	3718      	adds	r7, #24
 8017ef2:	46bd      	mov	sp, r7
 8017ef4:	bd80      	pop	{r7, pc}

08017ef6 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>:
        if (isInAllocationStage(cur, allocation_stage)) return cur;
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod period)
{
 8017ef6:	b580      	push	{r7, lr}
 8017ef8:	b082      	sub	sp, #8
 8017efa:	af00      	add	r7, sp, #0
 8017efc:	6078      	str	r0, [r7, #4]
 8017efe:	460b      	mov	r3, r1
 8017f00:	70fb      	strb	r3, [r7, #3]
    return getLeakFrom(head_, period);
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	681b      	ldr	r3, [r3, #0]
 8017f06:	78fa      	ldrb	r2, [r7, #3]
 8017f08:	4619      	mov	r1, r3
 8017f0a:	6878      	ldr	r0, [r7, #4]
 8017f0c:	f7ff ffd3 	bl	8017eb6 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8017f10:	4603      	mov	r3, r0
}
 8017f12:	4618      	mov	r0, r3
 8017f14:	3708      	adds	r7, #8
 8017f16:	46bd      	mov	sp, r7
 8017f18:	bd80      	pop	{r7, pc}

08017f1a <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
{
    return getLeakForAllocationStageFrom(head_, allocation_stage);
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8017f1a:	b580      	push	{r7, lr}
 8017f1c:	b084      	sub	sp, #16
 8017f1e:	af00      	add	r7, sp, #0
 8017f20:	60f8      	str	r0, [r7, #12]
 8017f22:	60b9      	str	r1, [r7, #8]
 8017f24:	4613      	mov	r3, r2
 8017f26:	71fb      	strb	r3, [r7, #7]
    return getLeakFrom(node->next_, period);
 8017f28:	68bb      	ldr	r3, [r7, #8]
 8017f2a:	69db      	ldr	r3, [r3, #28]
 8017f2c:	79fa      	ldrb	r2, [r7, #7]
 8017f2e:	4619      	mov	r1, r3
 8017f30:	68f8      	ldr	r0, [r7, #12]
 8017f32:	f7ff ffc0 	bl	8017eb6 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8017f36:	4603      	mov	r3, r0
}
 8017f38:	4618      	mov	r0, r3
 8017f3a:	3710      	adds	r7, #16
 8017f3c:	46bd      	mov	sp, r7
 8017f3e:	bd80      	pop	{r7, pc}

08017f40 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>:
}



size_t MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod period)
{
 8017f40:	b580      	push	{r7, lr}
 8017f42:	b084      	sub	sp, #16
 8017f44:	af00      	add	r7, sp, #0
 8017f46:	6078      	str	r0, [r7, #4]
 8017f48:	460b      	mov	r3, r1
 8017f4a:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8017f4c:	2300      	movs	r3, #0
 8017f4e:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	681b      	ldr	r3, [r3, #0]
 8017f54:	60bb      	str	r3, [r7, #8]
 8017f56:	68bb      	ldr	r3, [r7, #8]
 8017f58:	2b00      	cmp	r3, #0
 8017f5a:	d00f      	beq.n	8017f7c <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x3c>
        if (isInPeriod(node, period)) total_leaks++;
 8017f5c:	78fb      	ldrb	r3, [r7, #3]
 8017f5e:	461a      	mov	r2, r3
 8017f60:	68b9      	ldr	r1, [r7, #8]
 8017f62:	6878      	ldr	r0, [r7, #4]
 8017f64:	f7ff ff2b 	bl	8017dbe <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8017f68:	4603      	mov	r3, r0
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d002      	beq.n	8017f74 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x34>
 8017f6e:	68fb      	ldr	r3, [r7, #12]
 8017f70:	3301      	adds	r3, #1
 8017f72:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8017f74:	68bb      	ldr	r3, [r7, #8]
 8017f76:	69db      	ldr	r3, [r3, #28]
 8017f78:	60bb      	str	r3, [r7, #8]
 8017f7a:	e7ec      	b.n	8017f56 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x16>
    }
    return total_leaks;
 8017f7c:	68fb      	ldr	r3, [r7, #12]
}
 8017f7e:	4618      	mov	r0, r3
 8017f80:	3710      	adds	r7, #16
 8017f82:	46bd      	mov	sp, r7
 8017f84:	bd80      	pop	{r7, pc}
	...

08017f88 <_ZN23MemoryLeakDetectorTable4hashEPc>:

/////////////////////////////////////////////////////////////

unsigned long MemoryLeakDetectorTable::hash(char* memory)
{
 8017f88:	b480      	push	{r7}
 8017f8a:	b083      	sub	sp, #12
 8017f8c:	af00      	add	r7, sp, #0
 8017f8e:	6078      	str	r0, [r7, #4]
 8017f90:	6039      	str	r1, [r7, #0]
    return (unsigned long)((size_t)memory % hash_prime);
 8017f92:	6839      	ldr	r1, [r7, #0]
 8017f94:	4b09      	ldr	r3, [pc, #36]	; (8017fbc <_ZN23MemoryLeakDetectorTable4hashEPc+0x34>)
 8017f96:	fba3 2301 	umull	r2, r3, r3, r1
 8017f9a:	1aca      	subs	r2, r1, r3
 8017f9c:	0852      	lsrs	r2, r2, #1
 8017f9e:	4413      	add	r3, r2
 8017fa0:	099a      	lsrs	r2, r3, #6
 8017fa2:	4613      	mov	r3, r2
 8017fa4:	00db      	lsls	r3, r3, #3
 8017fa6:	4413      	add	r3, r2
 8017fa8:	00db      	lsls	r3, r3, #3
 8017faa:	4413      	add	r3, r2
 8017fac:	1aca      	subs	r2, r1, r3
 8017fae:	4613      	mov	r3, r2
}
 8017fb0:	4618      	mov	r0, r3
 8017fb2:	370c      	adds	r7, #12
 8017fb4:	46bd      	mov	sp, r7
 8017fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fba:	4770      	bx	lr
 8017fbc:	c0e07039 	.word	0xc0e07039

08017fc0 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>:
    for (int i = 0; i < hash_prime; i++)
        table_[i].clearAllAccounting(period);
}

void MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode* node)
{
 8017fc0:	b580      	push	{r7, lr}
 8017fc2:	b082      	sub	sp, #8
 8017fc4:	af00      	add	r7, sp, #0
 8017fc6:	6078      	str	r0, [r7, #4]
 8017fc8:	6039      	str	r1, [r7, #0]
    table_[hash(node->memory_)].addNewNode(node);
 8017fca:	683b      	ldr	r3, [r7, #0]
 8017fcc:	689b      	ldr	r3, [r3, #8]
 8017fce:	4619      	mov	r1, r3
 8017fd0:	6878      	ldr	r0, [r7, #4]
 8017fd2:	f7ff ffd9 	bl	8017f88 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8017fd6:	4603      	mov	r3, r0
 8017fd8:	009b      	lsls	r3, r3, #2
 8017fda:	687a      	ldr	r2, [r7, #4]
 8017fdc:	4413      	add	r3, r2
 8017fde:	6839      	ldr	r1, [r7, #0]
 8017fe0:	4618      	mov	r0, r3
 8017fe2:	f7ff ff0b 	bl	8017dfc <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>
}
 8017fe6:	bf00      	nop
 8017fe8:	3708      	adds	r7, #8
 8017fea:	46bd      	mov	sp, r7
 8017fec:	bd80      	pop	{r7, pc}

08017fee <_ZN23MemoryLeakDetectorTable10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::removeNode(char* memory)
{
 8017fee:	b580      	push	{r7, lr}
 8017ff0:	b082      	sub	sp, #8
 8017ff2:	af00      	add	r7, sp, #0
 8017ff4:	6078      	str	r0, [r7, #4]
 8017ff6:	6039      	str	r1, [r7, #0]
    return table_[hash(memory)].removeNode(memory);
 8017ff8:	6839      	ldr	r1, [r7, #0]
 8017ffa:	6878      	ldr	r0, [r7, #4]
 8017ffc:	f7ff ffc4 	bl	8017f88 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8018000:	4603      	mov	r3, r0
 8018002:	009b      	lsls	r3, r3, #2
 8018004:	687a      	ldr	r2, [r7, #4]
 8018006:	4413      	add	r3, r2
 8018008:	6839      	ldr	r1, [r7, #0]
 801800a:	4618      	mov	r0, r3
 801800c:	f7ff ff08 	bl	8017e20 <_ZN22MemoryLeakDetectorList10removeNodeEPc>
 8018010:	4603      	mov	r3, r0
}
 8018012:	4618      	mov	r0, r3
 8018014:	3708      	adds	r7, #8
 8018016:	46bd      	mov	sp, r7
 8018018:	bd80      	pop	{r7, pc}

0801801a <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::retrieveNode(char* memory)
{
 801801a:	b580      	push	{r7, lr}
 801801c:	b082      	sub	sp, #8
 801801e:	af00      	add	r7, sp, #0
 8018020:	6078      	str	r0, [r7, #4]
 8018022:	6039      	str	r1, [r7, #0]
  return table_[hash(memory)].retrieveNode(memory);
 8018024:	6839      	ldr	r1, [r7, #0]
 8018026:	6878      	ldr	r0, [r7, #4]
 8018028:	f7ff ffae 	bl	8017f88 <_ZN23MemoryLeakDetectorTable4hashEPc>
 801802c:	4603      	mov	r3, r0
 801802e:	009b      	lsls	r3, r3, #2
 8018030:	687a      	ldr	r2, [r7, #4]
 8018032:	4413      	add	r3, r2
 8018034:	6839      	ldr	r1, [r7, #0]
 8018036:	4618      	mov	r0, r3
 8018038:	f7ff ff20 	bl	8017e7c <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>
 801803c:	4603      	mov	r3, r0
}
 801803e:	4618      	mov	r0, r3
 8018040:	3708      	adds	r7, #8
 8018042:	46bd      	mov	sp, r7
 8018044:	bd80      	pop	{r7, pc}

08018046 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod period)
{
 8018046:	b580      	push	{r7, lr}
 8018048:	b084      	sub	sp, #16
 801804a:	af00      	add	r7, sp, #0
 801804c:	6078      	str	r0, [r7, #4]
 801804e:	460b      	mov	r3, r1
 8018050:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8018052:	2300      	movs	r3, #0
 8018054:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8018056:	2300      	movs	r3, #0
 8018058:	60bb      	str	r3, [r7, #8]
 801805a:	68bb      	ldr	r3, [r7, #8]
 801805c:	2b48      	cmp	r3, #72	; 0x48
 801805e:	dc10      	bgt.n	8018082 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x3c>
        total_leaks += table_[i].getTotalLeaks(period);
 8018060:	68bb      	ldr	r3, [r7, #8]
 8018062:	009b      	lsls	r3, r3, #2
 8018064:	687a      	ldr	r2, [r7, #4]
 8018066:	4413      	add	r3, r2
 8018068:	78fa      	ldrb	r2, [r7, #3]
 801806a:	4611      	mov	r1, r2
 801806c:	4618      	mov	r0, r3
 801806e:	f7ff ff67 	bl	8017f40 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>
 8018072:	4602      	mov	r2, r0
 8018074:	68fb      	ldr	r3, [r7, #12]
 8018076:	4413      	add	r3, r2
 8018078:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 801807a:	68bb      	ldr	r3, [r7, #8]
 801807c:	3301      	adds	r3, #1
 801807e:	60bb      	str	r3, [r7, #8]
 8018080:	e7eb      	b.n	801805a <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x14>
    return total_leaks;
 8018082:	68fb      	ldr	r3, [r7, #12]
}
 8018084:	4618      	mov	r0, r3
 8018086:	3710      	adds	r7, #16
 8018088:	46bd      	mov	sp, r7
 801808a:	bd80      	pop	{r7, pc}

0801808c <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod period)
{
 801808c:	b580      	push	{r7, lr}
 801808e:	b084      	sub	sp, #16
 8018090:	af00      	add	r7, sp, #0
 8018092:	6078      	str	r0, [r7, #4]
 8018094:	460b      	mov	r3, r1
 8018096:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < hash_prime; i++) {
 8018098:	2300      	movs	r3, #0
 801809a:	60fb      	str	r3, [r7, #12]
 801809c:	68fb      	ldr	r3, [r7, #12]
 801809e:	2b48      	cmp	r3, #72	; 0x48
 80180a0:	dc12      	bgt.n	80180c8 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3c>
        MemoryLeakDetectorNode* node = table_[i].getFirstLeak(period);
 80180a2:	68fb      	ldr	r3, [r7, #12]
 80180a4:	009b      	lsls	r3, r3, #2
 80180a6:	687a      	ldr	r2, [r7, #4]
 80180a8:	4413      	add	r3, r2
 80180aa:	78fa      	ldrb	r2, [r7, #3]
 80180ac:	4611      	mov	r1, r2
 80180ae:	4618      	mov	r0, r3
 80180b0:	f7ff ff21 	bl	8017ef6 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 80180b4:	60b8      	str	r0, [r7, #8]
        if (node) return node;
 80180b6:	68bb      	ldr	r3, [r7, #8]
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d001      	beq.n	80180c0 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x34>
 80180bc:	68bb      	ldr	r3, [r7, #8]
 80180be:	e004      	b.n	80180ca <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3e>
    for (int i = 0; i < hash_prime; i++) {
 80180c0:	68fb      	ldr	r3, [r7, #12]
 80180c2:	3301      	adds	r3, #1
 80180c4:	60fb      	str	r3, [r7, #12]
 80180c6:	e7e9      	b.n	801809c <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x10>
    }
    return NULLPTR;
 80180c8:	2300      	movs	r3, #0
}
 80180ca:	4618      	mov	r0, r3
 80180cc:	3710      	adds	r7, #16
 80180ce:	46bd      	mov	sp, r7
 80180d0:	bd80      	pop	{r7, pc}

080180d2 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
    }
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode* leak, MemLeakPeriod period)
{
 80180d2:	b580      	push	{r7, lr}
 80180d4:	b086      	sub	sp, #24
 80180d6:	af00      	add	r7, sp, #0
 80180d8:	60f8      	str	r0, [r7, #12]
 80180da:	60b9      	str	r1, [r7, #8]
 80180dc:	4613      	mov	r3, r2
 80180de:	71fb      	strb	r3, [r7, #7]
    unsigned long i = hash(leak->memory_);
 80180e0:	68bb      	ldr	r3, [r7, #8]
 80180e2:	689b      	ldr	r3, [r3, #8]
 80180e4:	4619      	mov	r1, r3
 80180e6:	68f8      	ldr	r0, [r7, #12]
 80180e8:	f7ff ff4e 	bl	8017f88 <_ZN23MemoryLeakDetectorTable4hashEPc>
 80180ec:	6178      	str	r0, [r7, #20]
    MemoryLeakDetectorNode* node = table_[i].getNextLeak(leak, period);
 80180ee:	697b      	ldr	r3, [r7, #20]
 80180f0:	009b      	lsls	r3, r3, #2
 80180f2:	68fa      	ldr	r2, [r7, #12]
 80180f4:	4413      	add	r3, r2
 80180f6:	79fa      	ldrb	r2, [r7, #7]
 80180f8:	68b9      	ldr	r1, [r7, #8]
 80180fa:	4618      	mov	r0, r3
 80180fc:	f7ff ff0d 	bl	8017f1a <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8018100:	6138      	str	r0, [r7, #16]
    if (node) return node;
 8018102:	693b      	ldr	r3, [r7, #16]
 8018104:	2b00      	cmp	r3, #0
 8018106:	d001      	beq.n	801810c <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x3a>
 8018108:	693b      	ldr	r3, [r7, #16]
 801810a:	e019      	b.n	8018140 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>

    for (++i; i < hash_prime; i++) {
 801810c:	697b      	ldr	r3, [r7, #20]
 801810e:	3301      	adds	r3, #1
 8018110:	617b      	str	r3, [r7, #20]
 8018112:	697b      	ldr	r3, [r7, #20]
 8018114:	2b48      	cmp	r3, #72	; 0x48
 8018116:	d812      	bhi.n	801813e <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6c>
        node = table_[i].getFirstLeak(period);
 8018118:	697b      	ldr	r3, [r7, #20]
 801811a:	009b      	lsls	r3, r3, #2
 801811c:	68fa      	ldr	r2, [r7, #12]
 801811e:	4413      	add	r3, r2
 8018120:	79fa      	ldrb	r2, [r7, #7]
 8018122:	4611      	mov	r1, r2
 8018124:	4618      	mov	r0, r3
 8018126:	f7ff fee6 	bl	8017ef6 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 801812a:	6138      	str	r0, [r7, #16]
        if (node) return node;
 801812c:	693b      	ldr	r3, [r7, #16]
 801812e:	2b00      	cmp	r3, #0
 8018130:	d001      	beq.n	8018136 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x64>
 8018132:	693b      	ldr	r3, [r7, #16]
 8018134:	e004      	b.n	8018140 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>
    for (++i; i < hash_prime; i++) {
 8018136:	697b      	ldr	r3, [r7, #20]
 8018138:	3301      	adds	r3, #1
 801813a:	617b      	str	r3, [r7, #20]
 801813c:	e7e9      	b.n	8018112 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x40>
    }
    return NULLPTR;
 801813e:	2300      	movs	r3, #0
}
 8018140:	4618      	mov	r0, r3
 8018142:	3718      	adds	r7, #24
 8018144:	46bd      	mov	sp, r7
 8018146:	bd80      	pop	{r7, pc}

08018148 <_ZN23MemoryLeakDetectorTableC1Ev>:

private:
    MemoryLeakDetectorNode* head_;
};

struct MemoryLeakDetectorTable
 8018148:	b5b0      	push	{r4, r5, r7, lr}
 801814a:	b082      	sub	sp, #8
 801814c:	af00      	add	r7, sp, #0
 801814e:	6078      	str	r0, [r7, #4]
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	2448      	movs	r4, #72	; 0x48
 8018154:	461d      	mov	r5, r3
 8018156:	2c00      	cmp	r4, #0
 8018158:	db05      	blt.n	8018166 <_ZN23MemoryLeakDetectorTableC1Ev+0x1e>
 801815a:	4628      	mov	r0, r5
 801815c:	f7ff fa84 	bl	8017668 <_ZN22MemoryLeakDetectorListC1Ev>
 8018160:	3504      	adds	r5, #4
 8018162:	3c01      	subs	r4, #1
 8018164:	e7f7      	b.n	8018156 <_ZN23MemoryLeakDetectorTableC1Ev+0xe>
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	4618      	mov	r0, r3
 801816a:	3708      	adds	r7, #8
 801816c:	46bd      	mov	sp, r7
 801816e:	bdb0      	pop	{r4, r5, r7, pc}

08018170 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>:
    return NULLPTR;
}

/////////////////////////////////////////////////////////////

MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure* reporter)
 8018170:	b590      	push	{r4, r7, lr}
 8018172:	b083      	sub	sp, #12
 8018174:	af00      	add	r7, sp, #0
 8018176:	6078      	str	r0, [r7, #4]
 8018178:	6039      	str	r1, [r7, #0]
 801817a:	4a1d      	ldr	r2, [pc, #116]	; (80181f0 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x80>)
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	601a      	str	r2, [r3, #0]
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	330c      	adds	r3, #12
 8018184:	4618      	mov	r0, r3
 8018186:	f7ff fbe3 	bl	8017950 <_ZN28MemoryLeakOutputStringBufferC1Ev>
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018190:	331c      	adds	r3, #28
 8018192:	4618      	mov	r0, r3
 8018194:	f7ff ffd8 	bl	8018148 <_ZN23MemoryLeakDetectorTableC1Ev>
{
    doAllocationTypeChecking_ = true;
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801819e:	2201      	movs	r2, #1
 80181a0:	701a      	strb	r2, [r3, #0]
    allocationSequenceNumber_ = 1;
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80181a8:	3304      	adds	r3, #4
 80181aa:	2201      	movs	r2, #1
 80181ac:	601a      	str	r2, [r3, #0]
    current_period_ = mem_leak_period_disabled;
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	2201      	movs	r2, #1
 80181b2:	721a      	strb	r2, [r3, #8]
    current_allocation_stage_ = 0;
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80181ba:	3308      	adds	r3, #8
 80181bc:	2200      	movs	r2, #0
 80181be:	701a      	strb	r2, [r3, #0]
    reporter_ = reporter;
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	683a      	ldr	r2, [r7, #0]
 80181c4:	605a      	str	r2, [r3, #4]
    mutex_ = new SimpleMutex;
 80181c6:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 80181ca:	490a      	ldr	r1, [pc, #40]	; (80181f4 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x84>)
 80181cc:	2004      	movs	r0, #4
 80181ce:	f7f3 fb17 	bl	800b800 <_ZnwjPKci>
 80181d2:	4604      	mov	r4, r0
 80181d4:	4620      	mov	r0, r4
 80181d6:	f7f5 fbe7 	bl	800d9a8 <_ZN11SimpleMutexC1Ev>
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80181e0:	330c      	adds	r3, #12
 80181e2:	601c      	str	r4, [r3, #0]
}
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	4618      	mov	r0, r3
 80181e8:	370c      	adds	r7, #12
 80181ea:	46bd      	mov	sp, r7
 80181ec:	bd90      	pop	{r4, r7, pc}
 80181ee:	bf00      	nop
 80181f0:	0802a73c 	.word	0x0802a73c
 80181f4:	08027888 	.word	0x08027888

080181f8 <_ZN18MemoryLeakDetectorD1Ev>:

MemoryLeakDetector::~MemoryLeakDetector()
 80181f8:	b590      	push	{r4, r7, lr}
 80181fa:	b083      	sub	sp, #12
 80181fc:	af00      	add	r7, sp, #0
 80181fe:	6078      	str	r0, [r7, #4]
 8018200:	4a0e      	ldr	r2, [pc, #56]	; (801823c <_ZN18MemoryLeakDetectorD1Ev+0x44>)
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	601a      	str	r2, [r3, #0]
{
    if (mutex_)
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801820c:	330c      	adds	r3, #12
 801820e:	681b      	ldr	r3, [r3, #0]
 8018210:	2b00      	cmp	r3, #0
 8018212:	d00d      	beq.n	8018230 <_ZN18MemoryLeakDetectorD1Ev+0x38>
    {
        delete mutex_;
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801821a:	330c      	adds	r3, #12
 801821c:	681c      	ldr	r4, [r3, #0]
 801821e:	2c00      	cmp	r4, #0
 8018220:	d006      	beq.n	8018230 <_ZN18MemoryLeakDetectorD1Ev+0x38>
 8018222:	4620      	mov	r0, r4
 8018224:	f7f5 fbd2 	bl	800d9cc <_ZN11SimpleMutexD1Ev>
 8018228:	2104      	movs	r1, #4
 801822a:	4620      	mov	r0, r4
 801822c:	f7f3 fafc 	bl	800b828 <_ZdlPvj>
    }
}
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	4618      	mov	r0, r3
 8018234:	370c      	adds	r7, #12
 8018236:	46bd      	mov	sp, r7
 8018238:	bd90      	pop	{r4, r7, pc}
 801823a:	bf00      	nop
 801823c:	0802a73c 	.word	0x0802a73c

08018240 <_ZN18MemoryLeakDetectorD0Ev>:
MemoryLeakDetector::~MemoryLeakDetector()
 8018240:	b580      	push	{r7, lr}
 8018242:	b082      	sub	sp, #8
 8018244:	af00      	add	r7, sp, #0
 8018246:	6078      	str	r0, [r7, #4]
}
 8018248:	6878      	ldr	r0, [r7, #4]
 801824a:	f7ff ffd5 	bl	80181f8 <_ZN18MemoryLeakDetectorD1Ev>
 801824e:	f241 1150 	movw	r1, #4432	; 0x1150
 8018252:	6878      	ldr	r0, [r7, #4]
 8018254:	f7f3 fae8 	bl	800b828 <_ZdlPvj>
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	4618      	mov	r0, r3
 801825c:	3708      	adds	r7, #8
 801825e:	46bd      	mov	sp, r7
 8018260:	bd80      	pop	{r7, pc}

08018262 <_ZN18MemoryLeakDetector13startCheckingEv>:
{
    memoryTable_.clearAllAccounting(period);
}

void MemoryLeakDetector::startChecking()
{
 8018262:	b580      	push	{r7, lr}
 8018264:	b082      	sub	sp, #8
 8018266:	af00      	add	r7, sp, #0
 8018268:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	330c      	adds	r3, #12
 801826e:	4618      	mov	r0, r3
 8018270:	f7ff fd72 	bl	8017d58 <_ZN28MemoryLeakOutputStringBuffer5clearEv>
    current_period_ = mem_leak_period_checking;
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	2203      	movs	r2, #3
 8018278:	721a      	strb	r2, [r3, #8]
}
 801827a:	bf00      	nop
 801827c:	3708      	adds	r7, #8
 801827e:	46bd      	mov	sp, r7
 8018280:	bd80      	pop	{r7, pc}

08018282 <_ZN18MemoryLeakDetector12stopCheckingEv>:

void MemoryLeakDetector::stopChecking()
{
 8018282:	b480      	push	{r7}
 8018284:	b083      	sub	sp, #12
 8018286:	af00      	add	r7, sp, #0
 8018288:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	2202      	movs	r2, #2
 801828e:	721a      	strb	r2, [r3, #8]
}
 8018290:	bf00      	nop
 8018292:	370c      	adds	r7, #12
 8018294:	46bd      	mov	sp, r7
 8018296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801829a:	4770      	bx	lr

0801829c <_ZN18MemoryLeakDetector6enableEv>:
{
    return current_allocation_stage_;
}

void MemoryLeakDetector::enable()
{
 801829c:	b480      	push	{r7}
 801829e:	b083      	sub	sp, #12
 80182a0:	af00      	add	r7, sp, #0
 80182a2:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	2202      	movs	r2, #2
 80182a8:	721a      	strb	r2, [r3, #8]
}
 80182aa:	bf00      	nop
 80182ac:	370c      	adds	r7, #12
 80182ae:	46bd      	mov	sp, r7
 80182b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182b4:	4770      	bx	lr

080182b6 <_ZN18MemoryLeakDetector8getMutexEv>:
{
    current_allocation_stage_--;
}

SimpleMutex *MemoryLeakDetector::getMutex()
{
 80182b6:	b480      	push	{r7}
 80182b8:	b083      	sub	sp, #12
 80182ba:	af00      	add	r7, sp, #0
 80182bc:	6078      	str	r0, [r7, #4]
    return mutex_;
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80182c4:	330c      	adds	r3, #12
 80182c6:	681b      	ldr	r3, [r3, #0]
}
 80182c8:	4618      	mov	r0, r3
 80182ca:	370c      	adds	r7, #12
 80182cc:	46bd      	mov	sp, r7
 80182ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182d2:	4770      	bx	lr

080182d4 <_ZL31calculateVoidPointerAlignedSizej>:

static size_t calculateVoidPointerAlignedSize(size_t size)
{
 80182d4:	b480      	push	{r7}
 80182d6:	b083      	sub	sp, #12
 80182d8:	af00      	add	r7, sp, #0
 80182da:	6078      	str	r0, [r7, #4]
#ifndef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
    return (sizeof(void*) - (size % sizeof(void*))) + size;
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	f023 0303 	bic.w	r3, r3, #3
 80182e2:	3304      	adds	r3, #4
#else
   return size;
#endif
}
 80182e4:	4618      	mov	r0, r3
 80182e6:	370c      	adds	r7, #12
 80182e8:	46bd      	mov	sp, r7
 80182ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182ee:	4770      	bx	lr

080182f0 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>:

size_t MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(size_t size)
{
 80182f0:	b580      	push	{r7, lr}
 80182f2:	b082      	sub	sp, #8
 80182f4:	af00      	add	r7, sp, #0
 80182f6:	6078      	str	r0, [r7, #4]
 80182f8:	6039      	str	r1, [r7, #0]
    return calculateVoidPointerAlignedSize(size + memory_corruption_buffer_size);
 80182fa:	683b      	ldr	r3, [r7, #0]
 80182fc:	3303      	adds	r3, #3
 80182fe:	4618      	mov	r0, r3
 8018300:	f7ff ffe8 	bl	80182d4 <_ZL31calculateVoidPointerAlignedSizej>
 8018304:	4603      	mov	r3, r0
}
 8018306:	4618      	mov	r0, r3
 8018308:	3708      	adds	r7, #8
 801830a:	46bd      	mov	sp, r7
 801830c:	bd80      	pop	{r7, pc}

0801830e <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>:

MemoryLeakDetectorNode* MemoryLeakDetector::getNodeFromMemoryPointer(char* memory, size_t memory_size)
{
 801830e:	b580      	push	{r7, lr}
 8018310:	b084      	sub	sp, #16
 8018312:	af00      	add	r7, sp, #0
 8018314:	60f8      	str	r0, [r7, #12]
 8018316:	60b9      	str	r1, [r7, #8]
 8018318:	607a      	str	r2, [r7, #4]
    return (MemoryLeakDetectorNode*) (void*) (memory + sizeOfMemoryWithCorruptionInfo(memory_size));
 801831a:	6879      	ldr	r1, [r7, #4]
 801831c:	68f8      	ldr	r0, [r7, #12]
 801831e:	f7ff ffe7 	bl	80182f0 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8018322:	4602      	mov	r2, r0
 8018324:	68bb      	ldr	r3, [r7, #8]
 8018326:	4413      	add	r3, r2
}
 8018328:	4618      	mov	r0, r3
 801832a:	3710      	adds	r7, #16
 801832c:	46bd      	mov	sp, r7
 801832e:	bd80      	pop	{r7, pc}

08018330 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>:

void MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode * node, char *new_memory, size_t size, TestMemoryAllocator *allocator, const char *file, size_t line)
{
 8018330:	b580      	push	{r7, lr}
 8018332:	b08a      	sub	sp, #40	; 0x28
 8018334:	af06      	add	r7, sp, #24
 8018336:	60f8      	str	r0, [r7, #12]
 8018338:	60b9      	str	r1, [r7, #8]
 801833a:	607a      	str	r2, [r7, #4]
 801833c:	603b      	str	r3, [r7, #0]
    node->init(new_memory, allocationSequenceNumber_++, size, allocator, current_period_, current_allocation_stage_, file, line);
 801833e:	68fb      	ldr	r3, [r7, #12]
 8018340:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8018344:	3304      	adds	r3, #4
 8018346:	681a      	ldr	r2, [r3, #0]
 8018348:	1c51      	adds	r1, r2, #1
 801834a:	68fb      	ldr	r3, [r7, #12]
 801834c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8018350:	3304      	adds	r3, #4
 8018352:	6019      	str	r1, [r3, #0]
 8018354:	68fb      	ldr	r3, [r7, #12]
 8018356:	7a19      	ldrb	r1, [r3, #8]
 8018358:	68fb      	ldr	r3, [r7, #12]
 801835a:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801835e:	3308      	adds	r3, #8
 8018360:	781b      	ldrb	r3, [r3, #0]
 8018362:	6a38      	ldr	r0, [r7, #32]
 8018364:	9004      	str	r0, [sp, #16]
 8018366:	69f8      	ldr	r0, [r7, #28]
 8018368:	9003      	str	r0, [sp, #12]
 801836a:	9302      	str	r3, [sp, #8]
 801836c:	9101      	str	r1, [sp, #4]
 801836e:	69bb      	ldr	r3, [r7, #24]
 8018370:	9300      	str	r3, [sp, #0]
 8018372:	683b      	ldr	r3, [r7, #0]
 8018374:	6879      	ldr	r1, [r7, #4]
 8018376:	68b8      	ldr	r0, [r7, #8]
 8018378:	f7ff fcfb 	bl	8017d72 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>
    addMemoryCorruptionInformation(node->memory_ + node->size_);
 801837c:	68bb      	ldr	r3, [r7, #8]
 801837e:	689a      	ldr	r2, [r3, #8]
 8018380:	68bb      	ldr	r3, [r7, #8]
 8018382:	681b      	ldr	r3, [r3, #0]
 8018384:	4413      	add	r3, r2
 8018386:	4619      	mov	r1, r3
 8018388:	68f8      	ldr	r0, [r7, #12]
 801838a:	f000 f861 	bl	8018450 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>
    memoryTable_.addNewNode(node);
 801838e:	68fb      	ldr	r3, [r7, #12]
 8018390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018394:	331c      	adds	r3, #28
 8018396:	68b9      	ldr	r1, [r7, #8]
 8018398:	4618      	mov	r0, r3
 801839a:	f7ff fe11 	bl	8017fc0 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>
}
 801839e:	bf00      	nop
 80183a0:	3710      	adds	r7, #16
 80183a2:	46bd      	mov	sp, r7
 80183a4:	bd80      	pop	{r7, pc}

080183a6 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 80183a6:	b580      	push	{r7, lr}
 80183a8:	b08a      	sub	sp, #40	; 0x28
 80183aa:	af04      	add	r7, sp, #16
 80183ac:	60f8      	str	r0, [r7, #12]
 80183ae:	60b9      	str	r1, [r7, #8]
 80183b0:	607a      	str	r2, [r7, #4]
 80183b2:	603b      	str	r3, [r7, #0]
    char* new_memory = reallocateMemoryWithAccountingInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 80183b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80183b8:	9302      	str	r3, [sp, #8]
 80183ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183bc:	9301      	str	r3, [sp, #4]
 80183be:	6a3b      	ldr	r3, [r7, #32]
 80183c0:	9300      	str	r3, [sp, #0]
 80183c2:	683b      	ldr	r3, [r7, #0]
 80183c4:	687a      	ldr	r2, [r7, #4]
 80183c6:	68b9      	ldr	r1, [r7, #8]
 80183c8:	68f8      	ldr	r0, [r7, #12]
 80183ca:	f000 f96f 	bl	80186ac <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>
 80183ce:	6178      	str	r0, [r7, #20]
    if (new_memory == NULLPTR) return NULLPTR;
 80183d0:	697b      	ldr	r3, [r7, #20]
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	d101      	bne.n	80183da <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x34>
 80183d6:	2300      	movs	r3, #0
 80183d8:	e017      	b.n	801840a <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x64>

    MemoryLeakDetectorNode *node = createMemoryLeakAccountingInformation(allocator, size, new_memory, allocatNodesSeperately);
 80183da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80183de:	9300      	str	r3, [sp, #0]
 80183e0:	697b      	ldr	r3, [r7, #20]
 80183e2:	683a      	ldr	r2, [r7, #0]
 80183e4:	68b9      	ldr	r1, [r7, #8]
 80183e6:	68f8      	ldr	r0, [r7, #12]
 80183e8:	f000 f98a 	bl	8018700 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 80183ec:	6138      	str	r0, [r7, #16]
    storeLeakInformation(node, new_memory, size, allocator, file, line);
 80183ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183f0:	9302      	str	r3, [sp, #8]
 80183f2:	6a3b      	ldr	r3, [r7, #32]
 80183f4:	9301      	str	r3, [sp, #4]
 80183f6:	68bb      	ldr	r3, [r7, #8]
 80183f8:	9300      	str	r3, [sp, #0]
 80183fa:	683b      	ldr	r3, [r7, #0]
 80183fc:	697a      	ldr	r2, [r7, #20]
 80183fe:	6939      	ldr	r1, [r7, #16]
 8018400:	68f8      	ldr	r0, [r7, #12]
 8018402:	f7ff ff95 	bl	8018330 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8018406:	693b      	ldr	r3, [r7, #16]
 8018408:	689b      	ldr	r3, [r3, #8]
}
 801840a:	4618      	mov	r0, r3
 801840c:	3718      	adds	r7, #24
 801840e:	46bd      	mov	sp, r7
 8018410:	bd80      	pop	{r7, pc}
	...

08018414 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>:

void MemoryLeakDetector::invalidateMemory(char* memory)
{
 8018414:	b580      	push	{r7, lr}
 8018416:	b084      	sub	sp, #16
 8018418:	af00      	add	r7, sp, #0
 801841a:	6078      	str	r0, [r7, #4]
 801841c:	6039      	str	r1, [r7, #0]
#ifndef CPPUTEST_DISABLE_HEAP_POISON
  MemoryLeakDetectorNode* node = memoryTable_.retrieveNode(memory);
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018424:	331c      	adds	r3, #28
 8018426:	6839      	ldr	r1, [r7, #0]
 8018428:	4618      	mov	r0, r3
 801842a:	f7ff fdf6 	bl	801801a <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>
 801842e:	60f8      	str	r0, [r7, #12]
  if (node)
 8018430:	68fb      	ldr	r3, [r7, #12]
 8018432:	2b00      	cmp	r3, #0
 8018434:	d006      	beq.n	8018444 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x30>
    PlatformSpecificMemset(memory, 0xCD, node->size_);
 8018436:	4b05      	ldr	r3, [pc, #20]	; (801844c <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x38>)
 8018438:	681b      	ldr	r3, [r3, #0]
 801843a:	68fa      	ldr	r2, [r7, #12]
 801843c:	6812      	ldr	r2, [r2, #0]
 801843e:	21cd      	movs	r1, #205	; 0xcd
 8018440:	6838      	ldr	r0, [r7, #0]
 8018442:	4798      	blx	r3
#endif
}
 8018444:	bf00      	nop
 8018446:	3710      	adds	r7, #16
 8018448:	46bd      	mov	sp, r7
 801844a:	bd80      	pop	{r7, pc}
 801844c:	200000d8 	.word	0x200000d8

08018450 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>:

void MemoryLeakDetector::addMemoryCorruptionInformation(char* memory)
{
 8018450:	b480      	push	{r7}
 8018452:	b085      	sub	sp, #20
 8018454:	af00      	add	r7, sp, #0
 8018456:	6078      	str	r0, [r7, #4]
 8018458:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 801845a:	2300      	movs	r3, #0
 801845c:	60fb      	str	r3, [r7, #12]
 801845e:	68fb      	ldr	r3, [r7, #12]
 8018460:	2b02      	cmp	r3, #2
 8018462:	d812      	bhi.n	801848a <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x3a>
      memory[i] = GuardBytes[i % sizeof(GuardBytes)];
 8018464:	68f9      	ldr	r1, [r7, #12]
 8018466:	4b0c      	ldr	r3, [pc, #48]	; (8018498 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x48>)
 8018468:	fba3 2301 	umull	r2, r3, r3, r1
 801846c:	085a      	lsrs	r2, r3, #1
 801846e:	4613      	mov	r3, r2
 8018470:	005b      	lsls	r3, r3, #1
 8018472:	4413      	add	r3, r2
 8018474:	1aca      	subs	r2, r1, r3
 8018476:	6839      	ldr	r1, [r7, #0]
 8018478:	68fb      	ldr	r3, [r7, #12]
 801847a:	440b      	add	r3, r1
 801847c:	4907      	ldr	r1, [pc, #28]	; (801849c <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x4c>)
 801847e:	5c8a      	ldrb	r2, [r1, r2]
 8018480:	701a      	strb	r2, [r3, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8018482:	68fb      	ldr	r3, [r7, #12]
 8018484:	3301      	adds	r3, #1
 8018486:	60fb      	str	r3, [r7, #12]
 8018488:	e7e9      	b.n	801845e <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0xe>
}
 801848a:	bf00      	nop
 801848c:	3714      	adds	r7, #20
 801848e:	46bd      	mov	sp, r7
 8018490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018494:	4770      	bx	lr
 8018496:	bf00      	nop
 8018498:	aaaaaaab 	.word	0xaaaaaaab
 801849c:	0802a730 	.word	0x0802a730

080184a0 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>:

bool MemoryLeakDetector::validMemoryCorruptionInformation(char* memory)
{
 80184a0:	b480      	push	{r7}
 80184a2:	b085      	sub	sp, #20
 80184a4:	af00      	add	r7, sp, #0
 80184a6:	6078      	str	r0, [r7, #4]
 80184a8:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80184aa:	2300      	movs	r3, #0
 80184ac:	60fb      	str	r3, [r7, #12]
 80184ae:	68fb      	ldr	r3, [r7, #12]
 80184b0:	2b02      	cmp	r3, #2
 80184b2:	d816      	bhi.n	80184e2 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x42>
      if (memory[i] != GuardBytes[i % sizeof(GuardBytes)])
 80184b4:	683a      	ldr	r2, [r7, #0]
 80184b6:	68fb      	ldr	r3, [r7, #12]
 80184b8:	4413      	add	r3, r2
 80184ba:	7818      	ldrb	r0, [r3, #0]
 80184bc:	68f9      	ldr	r1, [r7, #12]
 80184be:	4b0c      	ldr	r3, [pc, #48]	; (80184f0 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x50>)
 80184c0:	fba3 2301 	umull	r2, r3, r3, r1
 80184c4:	085a      	lsrs	r2, r3, #1
 80184c6:	4613      	mov	r3, r2
 80184c8:	005b      	lsls	r3, r3, #1
 80184ca:	4413      	add	r3, r2
 80184cc:	1aca      	subs	r2, r1, r3
 80184ce:	4b09      	ldr	r3, [pc, #36]	; (80184f4 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x54>)
 80184d0:	5c9b      	ldrb	r3, [r3, r2]
 80184d2:	4298      	cmp	r0, r3
 80184d4:	d001      	beq.n	80184da <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x3a>
          return false;
 80184d6:	2300      	movs	r3, #0
 80184d8:	e004      	b.n	80184e4 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x44>
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80184da:	68fb      	ldr	r3, [r7, #12]
 80184dc:	3301      	adds	r3, #1
 80184de:	60fb      	str	r3, [r7, #12]
 80184e0:	e7e5      	b.n	80184ae <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0xe>
   return true;
 80184e2:	2301      	movs	r3, #1
}
 80184e4:	4618      	mov	r0, r3
 80184e6:	3714      	adds	r7, #20
 80184e8:	46bd      	mov	sp, r7
 80184ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184ee:	4770      	bx	lr
 80184f0:	aaaaaaab 	.word	0xaaaaaaab
 80184f4:	0802a730 	.word	0x0802a730

080184f8 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>:

bool MemoryLeakDetector::matchingAllocation(TestMemoryAllocator *alloc_allocator, TestMemoryAllocator *free_allocator)
{
 80184f8:	b580      	push	{r7, lr}
 80184fa:	b084      	sub	sp, #16
 80184fc:	af00      	add	r7, sp, #0
 80184fe:	60f8      	str	r0, [r7, #12]
 8018500:	60b9      	str	r1, [r7, #8]
 8018502:	607a      	str	r2, [r7, #4]
    if (alloc_allocator == free_allocator) return true;
 8018504:	68ba      	ldr	r2, [r7, #8]
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	429a      	cmp	r2, r3
 801850a:	d101      	bne.n	8018510 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x18>
 801850c:	2301      	movs	r3, #1
 801850e:	e013      	b.n	8018538 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    if (!doAllocationTypeChecking_) return true;
 8018510:	68fb      	ldr	r3, [r7, #12]
 8018512:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8018516:	781b      	ldrb	r3, [r3, #0]
 8018518:	f083 0301 	eor.w	r3, r3, #1
 801851c:	b2db      	uxtb	r3, r3
 801851e:	2b00      	cmp	r3, #0
 8018520:	d001      	beq.n	8018526 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x2e>
 8018522:	2301      	movs	r3, #1
 8018524:	e008      	b.n	8018538 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    return free_allocator->isOfEqualType(alloc_allocator);
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	681b      	ldr	r3, [r3, #0]
 801852a:	331c      	adds	r3, #28
 801852c:	681b      	ldr	r3, [r3, #0]
 801852e:	68b9      	ldr	r1, [r7, #8]
 8018530:	6878      	ldr	r0, [r7, #4]
 8018532:	4798      	blx	r3
 8018534:	4603      	mov	r3, r0
 8018536:	bf00      	nop
}
 8018538:	4618      	mov	r0, r3
 801853a:	3710      	adds	r7, #16
 801853c:	46bd      	mov	sp, r7
 801853e:	bd80      	pop	{r7, pc}

08018540 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>:

void MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode* node, const char* file, size_t line, TestMemoryAllocator* allocator, bool allocateNodesSeperately)
{
 8018540:	b590      	push	{r4, r7, lr}
 8018542:	b087      	sub	sp, #28
 8018544:	af02      	add	r7, sp, #8
 8018546:	60f8      	str	r0, [r7, #12]
 8018548:	60b9      	str	r1, [r7, #8]
 801854a:	607a      	str	r2, [r7, #4]
 801854c:	603b      	str	r3, [r7, #0]
    if (!matchingAllocation(node->allocator_->actualAllocator(), allocator->actualAllocator()))
 801854e:	68bb      	ldr	r3, [r7, #8]
 8018550:	695a      	ldr	r2, [r3, #20]
 8018552:	68bb      	ldr	r3, [r7, #8]
 8018554:	695b      	ldr	r3, [r3, #20]
 8018556:	681b      	ldr	r3, [r3, #0]
 8018558:	3328      	adds	r3, #40	; 0x28
 801855a:	681b      	ldr	r3, [r3, #0]
 801855c:	4610      	mov	r0, r2
 801855e:	4798      	blx	r3
 8018560:	4604      	mov	r4, r0
 8018562:	6a3b      	ldr	r3, [r7, #32]
 8018564:	681b      	ldr	r3, [r3, #0]
 8018566:	3328      	adds	r3, #40	; 0x28
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	6a38      	ldr	r0, [r7, #32]
 801856c:	4798      	blx	r3
 801856e:	4603      	mov	r3, r0
 8018570:	461a      	mov	r2, r3
 8018572:	4621      	mov	r1, r4
 8018574:	68f8      	ldr	r0, [r7, #12]
 8018576:	f7ff ffbf 	bl	80184f8 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>
 801857a:	4603      	mov	r3, r0
 801857c:	f083 0301 	eor.w	r3, r3, #1
 8018580:	b2db      	uxtb	r3, r3
 8018582:	2b00      	cmp	r3, #0
 8018584:	d014      	beq.n	80185b0 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0x70>
        outputBuffer_.reportAllocationDeallocationMismatchFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8018586:	68fb      	ldr	r3, [r7, #12]
 8018588:	f103 040c 	add.w	r4, r3, #12
 801858c:	6a3b      	ldr	r3, [r7, #32]
 801858e:	681b      	ldr	r3, [r3, #0]
 8018590:	3328      	adds	r3, #40	; 0x28
 8018592:	681b      	ldr	r3, [r3, #0]
 8018594:	6a38      	ldr	r0, [r7, #32]
 8018596:	4798      	blx	r3
 8018598:	4602      	mov	r2, r0
 801859a:	68fb      	ldr	r3, [r7, #12]
 801859c:	685b      	ldr	r3, [r3, #4]
 801859e:	9301      	str	r3, [sp, #4]
 80185a0:	9200      	str	r2, [sp, #0]
 80185a2:	683b      	ldr	r3, [r7, #0]
 80185a4:	687a      	ldr	r2, [r7, #4]
 80185a6:	68b9      	ldr	r1, [r7, #8]
 80185a8:	4620      	mov	r0, r4
 80185aa:	f7ff fb4d 	bl	8017c48 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
    else if (allocateNodesSeperately)
        allocator->freeMemoryLeakNode((char*) node);
}
 80185ae:	e02e      	b.n	801860e <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
 80185b0:	68bb      	ldr	r3, [r7, #8]
 80185b2:	689a      	ldr	r2, [r3, #8]
 80185b4:	68bb      	ldr	r3, [r7, #8]
 80185b6:	681b      	ldr	r3, [r3, #0]
 80185b8:	4413      	add	r3, r2
 80185ba:	4619      	mov	r1, r3
 80185bc:	68f8      	ldr	r0, [r7, #12]
 80185be:	f7ff ff6f 	bl	80184a0 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>
 80185c2:	4603      	mov	r3, r0
 80185c4:	f083 0301 	eor.w	r3, r3, #1
 80185c8:	b2db      	uxtb	r3, r3
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d014      	beq.n	80185f8 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xb8>
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
 80185ce:	68fb      	ldr	r3, [r7, #12]
 80185d0:	f103 040c 	add.w	r4, r3, #12
 80185d4:	6a3b      	ldr	r3, [r7, #32]
 80185d6:	681b      	ldr	r3, [r3, #0]
 80185d8:	3328      	adds	r3, #40	; 0x28
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	6a38      	ldr	r0, [r7, #32]
 80185de:	4798      	blx	r3
 80185e0:	4602      	mov	r2, r0
 80185e2:	68fb      	ldr	r3, [r7, #12]
 80185e4:	685b      	ldr	r3, [r3, #4]
 80185e6:	9301      	str	r3, [sp, #4]
 80185e8:	9200      	str	r2, [sp, #0]
 80185ea:	683b      	ldr	r3, [r7, #0]
 80185ec:	687a      	ldr	r2, [r7, #4]
 80185ee:	68b9      	ldr	r1, [r7, #8]
 80185f0:	4620      	mov	r0, r4
 80185f2:	f7ff fb4f 	bl	8017c94 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
}
 80185f6:	e00a      	b.n	801860e <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (allocateNodesSeperately)
 80185f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	d006      	beq.n	801860e <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
        allocator->freeMemoryLeakNode((char*) node);
 8018600:	6a3b      	ldr	r3, [r7, #32]
 8018602:	681b      	ldr	r3, [r3, #0]
 8018604:	3324      	adds	r3, #36	; 0x24
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	68b9      	ldr	r1, [r7, #8]
 801860a:	6a38      	ldr	r0, [r7, #32]
 801860c:	4798      	blx	r3
}
 801860e:	bf00      	nop
 8018610:	3714      	adds	r7, #20
 8018612:	46bd      	mov	sp, r7
 8018614:	bd90      	pop	{r4, r7, pc}
	...

08018618 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, bool allocatNodesSeperately)
{
 8018618:	b580      	push	{r7, lr}
 801861a:	b086      	sub	sp, #24
 801861c:	af02      	add	r7, sp, #8
 801861e:	60f8      	str	r0, [r7, #12]
 8018620:	60b9      	str	r1, [r7, #8]
 8018622:	607a      	str	r2, [r7, #4]
 8018624:	70fb      	strb	r3, [r7, #3]
    return allocMemory(allocator, size, UNKNOWN, 0, allocatNodesSeperately);
 8018626:	4b08      	ldr	r3, [pc, #32]	; (8018648 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb+0x30>)
 8018628:	681a      	ldr	r2, [r3, #0]
 801862a:	78fb      	ldrb	r3, [r7, #3]
 801862c:	9301      	str	r3, [sp, #4]
 801862e:	2300      	movs	r3, #0
 8018630:	9300      	str	r3, [sp, #0]
 8018632:	4613      	mov	r3, r2
 8018634:	687a      	ldr	r2, [r7, #4]
 8018636:	68b9      	ldr	r1, [r7, #8]
 8018638:	68f8      	ldr	r0, [r7, #12]
 801863a:	f000 f87f 	bl	801873c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 801863e:	4603      	mov	r3, r0
}
 8018640:	4618      	mov	r0, r3
 8018642:	3710      	adds	r7, #16
 8018644:	46bd      	mov	sp, r7
 8018646:	bd80      	pop	{r7, pc}
 8018648:	20000100 	.word	0x20000100

0801864c <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 801864c:	b590      	push	{r4, r7, lr}
 801864e:	b085      	sub	sp, #20
 8018650:	af00      	add	r7, sp, #0
 8018652:	60f8      	str	r0, [r7, #12]
 8018654:	60b9      	str	r1, [r7, #8]
 8018656:	607a      	str	r2, [r7, #4]
 8018658:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size), file, line);
 801865a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801865e:	2b00      	cmp	r3, #0
 8018660:	d00e      	beq.n	8018680 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x34>
 8018662:	68bb      	ldr	r3, [r7, #8]
 8018664:	681b      	ldr	r3, [r3, #0]
 8018666:	3308      	adds	r3, #8
 8018668:	681c      	ldr	r4, [r3, #0]
 801866a:	6879      	ldr	r1, [r7, #4]
 801866c:	68f8      	ldr	r0, [r7, #12]
 801866e:	f7ff fe3f 	bl	80182f0 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8018672:	4601      	mov	r1, r0
 8018674:	6a3b      	ldr	r3, [r7, #32]
 8018676:	683a      	ldr	r2, [r7, #0]
 8018678:	68b8      	ldr	r0, [r7, #8]
 801867a:	47a0      	blx	r4
 801867c:	4603      	mov	r3, r0
 801867e:	e010      	b.n	80186a2 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x56>
    else return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode), file, line);
 8018680:	68bb      	ldr	r3, [r7, #8]
 8018682:	681b      	ldr	r3, [r3, #0]
 8018684:	3308      	adds	r3, #8
 8018686:	681c      	ldr	r4, [r3, #0]
 8018688:	6879      	ldr	r1, [r7, #4]
 801868a:	68f8      	ldr	r0, [r7, #12]
 801868c:	f7ff fe30 	bl	80182f0 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8018690:	4603      	mov	r3, r0
 8018692:	f103 0120 	add.w	r1, r3, #32
 8018696:	6a3b      	ldr	r3, [r7, #32]
 8018698:	683a      	ldr	r2, [r7, #0]
 801869a:	68b8      	ldr	r0, [r7, #8]
 801869c:	47a0      	blx	r4
 801869e:	4603      	mov	r3, r0
 80186a0:	bf00      	nop
}
 80186a2:	4618      	mov	r0, r3
 80186a4:	3714      	adds	r7, #20
 80186a6:	46bd      	mov	sp, r7
 80186a8:	bd90      	pop	{r4, r7, pc}
	...

080186ac <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator* /*allocator*/, char* memory, size_t size, const char* /*file*/, size_t /*line*/, bool allocatNodesSeperately)
{
 80186ac:	b590      	push	{r4, r7, lr}
 80186ae:	b085      	sub	sp, #20
 80186b0:	af00      	add	r7, sp, #0
 80186b2:	60f8      	str	r0, [r7, #12]
 80186b4:	60b9      	str	r1, [r7, #8]
 80186b6:	607a      	str	r2, [r7, #4]
 80186b8:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size));
 80186ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80186be:	2b00      	cmp	r3, #0
 80186c0:	d00b      	beq.n	80186da <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x2e>
 80186c2:	4b0e      	ldr	r3, [pc, #56]	; (80186fc <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 80186c4:	681c      	ldr	r4, [r3, #0]
 80186c6:	6839      	ldr	r1, [r7, #0]
 80186c8:	68f8      	ldr	r0, [r7, #12]
 80186ca:	f7ff fe11 	bl	80182f0 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 80186ce:	4603      	mov	r3, r0
 80186d0:	4619      	mov	r1, r3
 80186d2:	6878      	ldr	r0, [r7, #4]
 80186d4:	47a0      	blx	r4
 80186d6:	4603      	mov	r3, r0
 80186d8:	e00c      	b.n	80186f4 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x48>
    else return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode));
 80186da:	4b08      	ldr	r3, [pc, #32]	; (80186fc <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 80186dc:	681c      	ldr	r4, [r3, #0]
 80186de:	6839      	ldr	r1, [r7, #0]
 80186e0:	68f8      	ldr	r0, [r7, #12]
 80186e2:	f7ff fe05 	bl	80182f0 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 80186e6:	4603      	mov	r3, r0
 80186e8:	3320      	adds	r3, #32
 80186ea:	4619      	mov	r1, r3
 80186ec:	6878      	ldr	r0, [r7, #4]
 80186ee:	47a0      	blx	r4
 80186f0:	4603      	mov	r3, r0
 80186f2:	bf00      	nop
}
 80186f4:	4618      	mov	r0, r3
 80186f6:	3714      	adds	r7, #20
 80186f8:	46bd      	mov	sp, r7
 80186fa:	bd90      	pop	{r4, r7, pc}
 80186fc:	200000cc 	.word	0x200000cc

08018700 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>:

MemoryLeakDetectorNode* MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator* allocator, size_t size, char* memory, bool allocatNodesSeperately)
{
 8018700:	b580      	push	{r7, lr}
 8018702:	b084      	sub	sp, #16
 8018704:	af00      	add	r7, sp, #0
 8018706:	60f8      	str	r0, [r7, #12]
 8018708:	60b9      	str	r1, [r7, #8]
 801870a:	607a      	str	r2, [r7, #4]
 801870c:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (MemoryLeakDetectorNode*) (void*) allocator->allocMemoryLeakNode(sizeof(MemoryLeakDetectorNode));
 801870e:	7e3b      	ldrb	r3, [r7, #24]
 8018710:	2b00      	cmp	r3, #0
 8018712:	d008      	beq.n	8018726 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x26>
 8018714:	68bb      	ldr	r3, [r7, #8]
 8018716:	681b      	ldr	r3, [r3, #0]
 8018718:	3320      	adds	r3, #32
 801871a:	681b      	ldr	r3, [r3, #0]
 801871c:	2120      	movs	r1, #32
 801871e:	68b8      	ldr	r0, [r7, #8]
 8018720:	4798      	blx	r3
 8018722:	4603      	mov	r3, r0
 8018724:	e006      	b.n	8018734 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x34>
    else return getNodeFromMemoryPointer(memory, size);
 8018726:	687a      	ldr	r2, [r7, #4]
 8018728:	6839      	ldr	r1, [r7, #0]
 801872a:	68f8      	ldr	r0, [r7, #12]
 801872c:	f7ff fdef 	bl	801830e <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>
 8018730:	4603      	mov	r3, r0
 8018732:	bf00      	nop
}
 8018734:	4618      	mov	r0, r3
 8018736:	3710      	adds	r7, #16
 8018738:	46bd      	mov	sp, r7
 801873a:	bd80      	pop	{r7, pc}

0801873c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 801873c:	b580      	push	{r7, lr}
 801873e:	b08a      	sub	sp, #40	; 0x28
 8018740:	af04      	add	r7, sp, #16
 8018742:	60f8      	str	r0, [r7, #12]
 8018744:	60b9      	str	r1, [r7, #8]
 8018746:	607a      	str	r2, [r7, #4]
 8018748:	603b      	str	r3, [r7, #0]
     * If the same allocation is used and the wrong free is called, it will deallocate the memory leak information
     * without the memory leak detector ever noticing it!
     * So, for malloc, we'll allocate the memory separately so we can detect this and give a proper error.
     */

    char* memory = allocateMemoryWithAccountingInformation(allocator, size, file, line, allocatNodesSeperately);
 801874a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801874e:	9301      	str	r3, [sp, #4]
 8018750:	6a3b      	ldr	r3, [r7, #32]
 8018752:	9300      	str	r3, [sp, #0]
 8018754:	683b      	ldr	r3, [r7, #0]
 8018756:	687a      	ldr	r2, [r7, #4]
 8018758:	68b9      	ldr	r1, [r7, #8]
 801875a:	68f8      	ldr	r0, [r7, #12]
 801875c:	f7ff ff76 	bl	801864c <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>
 8018760:	6178      	str	r0, [r7, #20]
    if (memory == NULLPTR) return NULLPTR;
 8018762:	697b      	ldr	r3, [r7, #20]
 8018764:	2b00      	cmp	r3, #0
 8018766:	d101      	bne.n	801876c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x30>
 8018768:	2300      	movs	r3, #0
 801876a:	e017      	b.n	801879c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x60>
    MemoryLeakDetectorNode* node = createMemoryLeakAccountingInformation(allocator, size, memory, allocatNodesSeperately);
 801876c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018770:	9300      	str	r3, [sp, #0]
 8018772:	697b      	ldr	r3, [r7, #20]
 8018774:	687a      	ldr	r2, [r7, #4]
 8018776:	68b9      	ldr	r1, [r7, #8]
 8018778:	68f8      	ldr	r0, [r7, #12]
 801877a:	f7ff ffc1 	bl	8018700 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 801877e:	6138      	str	r0, [r7, #16]

    storeLeakInformation(node, memory, size, allocator, file, line);
 8018780:	6a3b      	ldr	r3, [r7, #32]
 8018782:	9302      	str	r3, [sp, #8]
 8018784:	683b      	ldr	r3, [r7, #0]
 8018786:	9301      	str	r3, [sp, #4]
 8018788:	68bb      	ldr	r3, [r7, #8]
 801878a:	9300      	str	r3, [sp, #0]
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	697a      	ldr	r2, [r7, #20]
 8018790:	6939      	ldr	r1, [r7, #16]
 8018792:	68f8      	ldr	r0, [r7, #12]
 8018794:	f7ff fdcc 	bl	8018330 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8018798:	693b      	ldr	r3, [r7, #16]
 801879a:	689b      	ldr	r3, [r3, #8]
}
 801879c:	4618      	mov	r0, r3
 801879e:	3718      	adds	r7, #24
 80187a0:	46bd      	mov	sp, r7
 80187a2:	bd80      	pop	{r7, pc}

080187a4 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>:
    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
    if (allocatNodesSeperately) allocator->freeMemoryLeakNode( (char*) node);
}

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, const char* file, size_t line, bool allocatNodesSeperately)
{
 80187a4:	b590      	push	{r4, r7, lr}
 80187a6:	b089      	sub	sp, #36	; 0x24
 80187a8:	af02      	add	r7, sp, #8
 80187aa:	60f8      	str	r0, [r7, #12]
 80187ac:	60b9      	str	r1, [r7, #8]
 80187ae:	607a      	str	r2, [r7, #4]
 80187b0:	603b      	str	r3, [r7, #0]
    if (memory == NULLPTR) return;
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	d03a      	beq.n	801882e <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8a>

    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
 80187b8:	68fb      	ldr	r3, [r7, #12]
 80187ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80187be:	331c      	adds	r3, #28
 80187c0:	6879      	ldr	r1, [r7, #4]
 80187c2:	4618      	mov	r0, r3
 80187c4:	f7ff fc13 	bl	8017fee <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 80187c8:	6178      	str	r0, [r7, #20]
    if (node == NULLPTR) {
 80187ca:	697b      	ldr	r3, [r7, #20]
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d10b      	bne.n	80187e8 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x44>
        outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 80187d0:	68fb      	ldr	r3, [r7, #12]
 80187d2:	f103 000c 	add.w	r0, r3, #12
 80187d6:	68fb      	ldr	r3, [r7, #12]
 80187d8:	685b      	ldr	r3, [r3, #4]
 80187da:	9300      	str	r3, [sp, #0]
 80187dc:	68bb      	ldr	r3, [r7, #8]
 80187de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80187e0:	6839      	ldr	r1, [r7, #0]
 80187e2:	f7ff fa0d 	bl	8017c00 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
        return;
 80187e6:	e023      	b.n	8018830 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    }
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (!allocator->hasBeenDestroyed()) {
 80187e8:	68b8      	ldr	r0, [r7, #8]
 80187ea:	f7f8 ff95 	bl	8011718 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>
 80187ee:	4603      	mov	r3, r0
 80187f0:	f083 0301 	eor.w	r3, r3, #1
 80187f4:	b2db      	uxtb	r3, r3
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	d01a      	beq.n	8018830 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
        size_t size = node->size_;
 80187fa:	697b      	ldr	r3, [r7, #20]
 80187fc:	681b      	ldr	r3, [r3, #0]
 80187fe:	613b      	str	r3, [r7, #16]
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8018800:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018804:	9301      	str	r3, [sp, #4]
 8018806:	68bb      	ldr	r3, [r7, #8]
 8018808:	9300      	str	r3, [sp, #0]
 801880a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801880c:	683a      	ldr	r2, [r7, #0]
 801880e:	6979      	ldr	r1, [r7, #20]
 8018810:	68f8      	ldr	r0, [r7, #12]
 8018812:	f7ff fe95 	bl	8018540 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
        allocator->free_memory((char*) memory, size, file, line);
 8018816:	68bb      	ldr	r3, [r7, #8]
 8018818:	681b      	ldr	r3, [r3, #0]
 801881a:	330c      	adds	r3, #12
 801881c:	681c      	ldr	r4, [r3, #0]
 801881e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018820:	9300      	str	r3, [sp, #0]
 8018822:	683b      	ldr	r3, [r7, #0]
 8018824:	693a      	ldr	r2, [r7, #16]
 8018826:	6879      	ldr	r1, [r7, #4]
 8018828:	68b8      	ldr	r0, [r7, #8]
 801882a:	47a0      	blx	r4
 801882c:	e000      	b.n	8018830 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    if (memory == NULLPTR) return;
 801882e:	bf00      	nop
    }
}
 8018830:	371c      	adds	r7, #28
 8018832:	46bd      	mov	sp, r7
 8018834:	bd90      	pop	{r4, r7, pc}
	...

08018838 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>:

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, bool allocatNodesSeperately)
{
 8018838:	b580      	push	{r7, lr}
 801883a:	b086      	sub	sp, #24
 801883c:	af02      	add	r7, sp, #8
 801883e:	60f8      	str	r0, [r7, #12]
 8018840:	60b9      	str	r1, [r7, #8]
 8018842:	607a      	str	r2, [r7, #4]
 8018844:	70fb      	strb	r3, [r7, #3]
    deallocMemory(allocator, (char*) memory, UNKNOWN, 0, allocatNodesSeperately);
 8018846:	4b08      	ldr	r3, [pc, #32]	; (8018868 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb+0x30>)
 8018848:	681a      	ldr	r2, [r3, #0]
 801884a:	78fb      	ldrb	r3, [r7, #3]
 801884c:	9301      	str	r3, [sp, #4]
 801884e:	2300      	movs	r3, #0
 8018850:	9300      	str	r3, [sp, #0]
 8018852:	4613      	mov	r3, r2
 8018854:	687a      	ldr	r2, [r7, #4]
 8018856:	68b9      	ldr	r1, [r7, #8]
 8018858:	68f8      	ldr	r0, [r7, #12]
 801885a:	f7ff ffa3 	bl	80187a4 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 801885e:	bf00      	nop
 8018860:	3710      	adds	r7, #16
 8018862:	46bd      	mov	sp, r7
 8018864:	bd80      	pop	{r7, pc}
 8018866:	bf00      	nop
 8018868:	20000100 	.word	0x20000100

0801886c <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>:
        deallocMemory(allocator, memory, __FILE__, __LINE__);
    }
}

char* MemoryLeakDetector::reallocMemory(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 801886c:	b580      	push	{r7, lr}
 801886e:	b08a      	sub	sp, #40	; 0x28
 8018870:	af04      	add	r7, sp, #16
 8018872:	60f8      	str	r0, [r7, #12]
 8018874:	60b9      	str	r1, [r7, #8]
 8018876:	607a      	str	r2, [r7, #4]
 8018878:	603b      	str	r3, [r7, #0]
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (memory) {
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	2b00      	cmp	r3, #0
 801887e:	d023      	beq.n	80188c8 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x5c>
        MemoryLeakDetectorNode* node = memoryTable_.removeNode(memory);
 8018880:	68fb      	ldr	r3, [r7, #12]
 8018882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018886:	331c      	adds	r3, #28
 8018888:	6879      	ldr	r1, [r7, #4]
 801888a:	4618      	mov	r0, r3
 801888c:	f7ff fbaf 	bl	8017fee <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8018890:	6178      	str	r0, [r7, #20]
        if (node == NULLPTR) {
 8018892:	697b      	ldr	r3, [r7, #20]
 8018894:	2b00      	cmp	r3, #0
 8018896:	d10c      	bne.n	80188b2 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x46>
            outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8018898:	68fb      	ldr	r3, [r7, #12]
 801889a:	f103 000c 	add.w	r0, r3, #12
 801889e:	68fb      	ldr	r3, [r7, #12]
 80188a0:	685b      	ldr	r3, [r3, #4]
 80188a2:	9300      	str	r3, [sp, #0]
 80188a4:	68bb      	ldr	r3, [r7, #8]
 80188a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80188a8:	6a39      	ldr	r1, [r7, #32]
 80188aa:	f7ff f9a9 	bl	8017c00 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
            return NULLPTR;
 80188ae:	2300      	movs	r3, #0
 80188b0:	e019      	b.n	80188e6 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x7a>
        }
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 80188b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80188b6:	9301      	str	r3, [sp, #4]
 80188b8:	68bb      	ldr	r3, [r7, #8]
 80188ba:	9300      	str	r3, [sp, #0]
 80188bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188be:	6a3a      	ldr	r2, [r7, #32]
 80188c0:	6979      	ldr	r1, [r7, #20]
 80188c2:	68f8      	ldr	r0, [r7, #12]
 80188c4:	f7ff fe3c 	bl	8018540 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
    }
    return reallocateMemoryAndLeakInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 80188c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80188cc:	9302      	str	r3, [sp, #8]
 80188ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188d0:	9301      	str	r3, [sp, #4]
 80188d2:	6a3b      	ldr	r3, [r7, #32]
 80188d4:	9300      	str	r3, [sp, #0]
 80188d6:	683b      	ldr	r3, [r7, #0]
 80188d8:	687a      	ldr	r2, [r7, #4]
 80188da:	68b9      	ldr	r1, [r7, #8]
 80188dc:	68f8      	ldr	r0, [r7, #12]
 80188de:	f7ff fd62 	bl	80183a6 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>
 80188e2:	4603      	mov	r3, r0
 80188e4:	bf00      	nop
}
 80188e6:	4618      	mov	r0, r3
 80188e8:	3718      	adds	r7, #24
 80188ea:	46bd      	mov	sp, r7
 80188ec:	bd80      	pop	{r7, pc}

080188ee <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>:

void MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod period)
{
 80188ee:	b580      	push	{r7, lr}
 80188f0:	b084      	sub	sp, #16
 80188f2:	af00      	add	r7, sp, #0
 80188f4:	6078      	str	r0, [r7, #4]
 80188f6:	460b      	mov	r3, r1
 80188f8:	70fb      	strb	r3, [r7, #3]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(period);
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018900:	331c      	adds	r3, #28
 8018902:	78fa      	ldrb	r2, [r7, #3]
 8018904:	4611      	mov	r1, r2
 8018906:	4618      	mov	r0, r3
 8018908:	f7ff fbc0 	bl	801808c <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 801890c:	60f8      	str	r0, [r7, #12]

    outputBuffer_.startMemoryLeakReporting();
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	330c      	adds	r3, #12
 8018912:	4618      	mov	r0, r3
 8018914:	f7ff f882 	bl	8017a1c <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>

    while (leak) {
 8018918:	68fb      	ldr	r3, [r7, #12]
 801891a:	2b00      	cmp	r3, #0
 801891c:	d010      	beq.n	8018940 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x52>
        outputBuffer_.reportMemoryLeak(leak);
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	330c      	adds	r3, #12
 8018922:	68f9      	ldr	r1, [r7, #12]
 8018924:	4618      	mov	r0, r3
 8018926:	f7ff f897 	bl	8017a58 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>
        leak = memoryTable_.getNextLeak(leak, period);
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018930:	331c      	adds	r3, #28
 8018932:	78fa      	ldrb	r2, [r7, #3]
 8018934:	68f9      	ldr	r1, [r7, #12]
 8018936:	4618      	mov	r0, r3
 8018938:	f7ff fbcb 	bl	80180d2 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 801893c:	60f8      	str	r0, [r7, #12]
    while (leak) {
 801893e:	e7eb      	b.n	8018918 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x2a>
    }

    outputBuffer_.stopMemoryLeakReporting();
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	330c      	adds	r3, #12
 8018944:	4618      	mov	r0, r3
 8018946:	f7ff f8e7 	bl	8017b18 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>
}
 801894a:	bf00      	nop
 801894c:	3710      	adds	r7, #16
 801894e:	46bd      	mov	sp, r7
 8018950:	bd80      	pop	{r7, pc}

08018952 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>:

const char* MemoryLeakDetector::report(MemLeakPeriod period)
{
 8018952:	b580      	push	{r7, lr}
 8018954:	b082      	sub	sp, #8
 8018956:	af00      	add	r7, sp, #0
 8018958:	6078      	str	r0, [r7, #4]
 801895a:	460b      	mov	r3, r1
 801895c:	70fb      	strb	r3, [r7, #3]
    ConstructMemoryLeakReport(period);
 801895e:	78fb      	ldrb	r3, [r7, #3]
 8018960:	4619      	mov	r1, r3
 8018962:	6878      	ldr	r0, [r7, #4]
 8018964:	f7ff ffc3 	bl	80188ee <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>

    return outputBuffer_.toString();
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	330c      	adds	r3, #12
 801896c:	4618      	mov	r0, r3
 801896e:	f7ff f9e5 	bl	8017d3c <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8018972:	4603      	mov	r3, r0
}
 8018974:	4618      	mov	r0, r3
 8018976:	3708      	adds	r7, #8
 8018978:	46bd      	mov	sp, r7
 801897a:	bd80      	pop	{r7, pc}

0801897c <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>:

void MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
{
 801897c:	b580      	push	{r7, lr}
 801897e:	b084      	sub	sp, #16
 8018980:	af00      	add	r7, sp, #0
 8018982:	6078      	str	r0, [r7, #4]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(mem_leak_period_checking);
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801898a:	331c      	adds	r3, #28
 801898c:	2103      	movs	r1, #3
 801898e:	4618      	mov	r0, r3
 8018990:	f7ff fb7c 	bl	801808c <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8018994:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8018996:	68fb      	ldr	r3, [r7, #12]
 8018998:	2b00      	cmp	r3, #0
 801899a:	d011      	beq.n	80189c0 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x44>
        if (leak->period_ == mem_leak_period_checking) leak->period_ = mem_leak_period_enabled;
 801899c:	68fb      	ldr	r3, [r7, #12]
 801899e:	7e1b      	ldrb	r3, [r3, #24]
 80189a0:	2b03      	cmp	r3, #3
 80189a2:	d102      	bne.n	80189aa <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x2e>
 80189a4:	68fb      	ldr	r3, [r7, #12]
 80189a6:	2202      	movs	r2, #2
 80189a8:	761a      	strb	r2, [r3, #24]
        leak = memoryTable_.getNextLeak(leak, mem_leak_period_checking);
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80189b0:	331c      	adds	r3, #28
 80189b2:	2203      	movs	r2, #3
 80189b4:	68f9      	ldr	r1, [r7, #12]
 80189b6:	4618      	mov	r0, r3
 80189b8:	f7ff fb8b 	bl	80180d2 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80189bc:	60f8      	str	r0, [r7, #12]
    while (leak) {
 80189be:	e7ea      	b.n	8018996 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x1a>
    }
}
 80189c0:	bf00      	nop
 80189c2:	3710      	adds	r7, #16
 80189c4:	46bd      	mov	sp, r7
 80189c6:	bd80      	pop	{r7, pc}

080189c8 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod period)
{
 80189c8:	b580      	push	{r7, lr}
 80189ca:	b082      	sub	sp, #8
 80189cc:	af00      	add	r7, sp, #0
 80189ce:	6078      	str	r0, [r7, #4]
 80189d0:	460b      	mov	r3, r1
 80189d2:	70fb      	strb	r3, [r7, #3]
    return memoryTable_.getTotalLeaks(period);
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80189da:	331c      	adds	r3, #28
 80189dc:	78fa      	ldrb	r2, [r7, #3]
 80189de:	4611      	mov	r1, r2
 80189e0:	4618      	mov	r0, r3
 80189e2:	f7ff fb30 	bl	8018046 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>
 80189e6:	4603      	mov	r3, r0
}
 80189e8:	4618      	mov	r0, r3
 80189ea:	3708      	adds	r7, #8
 80189ec:	46bd      	mov	sp, r7
 80189ee:	bd80      	pop	{r7, pc}

080189f0 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>:
        SimpleString name_;
        SimpleString type_;
        void* ptr_;

        MockOutputParametersListNode* next_;
        MockOutputParametersListNode(const SimpleString& name, const SimpleString& type, void* ptr)
 80189f0:	b580      	push	{r7, lr}
 80189f2:	b084      	sub	sp, #16
 80189f4:	af00      	add	r7, sp, #0
 80189f6:	60f8      	str	r0, [r7, #12]
 80189f8:	60b9      	str	r1, [r7, #8]
 80189fa:	607a      	str	r2, [r7, #4]
 80189fc:	603b      	str	r3, [r7, #0]
            : name_(name), type_(type), ptr_(ptr), next_(NULLPTR) {}
 80189fe:	68fb      	ldr	r3, [r7, #12]
 8018a00:	68b9      	ldr	r1, [r7, #8]
 8018a02:	4618      	mov	r0, r3
 8018a04:	f7f5 fb13 	bl	800e02e <_ZN12SimpleStringC1ERKS_>
 8018a08:	68fb      	ldr	r3, [r7, #12]
 8018a0a:	3308      	adds	r3, #8
 8018a0c:	6879      	ldr	r1, [r7, #4]
 8018a0e:	4618      	mov	r0, r3
 8018a10:	f7f5 fb0d 	bl	800e02e <_ZN12SimpleStringC1ERKS_>
 8018a14:	68fb      	ldr	r3, [r7, #12]
 8018a16:	683a      	ldr	r2, [r7, #0]
 8018a18:	611a      	str	r2, [r3, #16]
 8018a1a:	68fb      	ldr	r3, [r7, #12]
 8018a1c:	2200      	movs	r2, #0
 8018a1e:	615a      	str	r2, [r3, #20]
 8018a20:	68fb      	ldr	r3, [r7, #12]
 8018a22:	4618      	mov	r0, r3
 8018a24:	3710      	adds	r7, #16
 8018a26:	46bd      	mov	sp, r7
 8018a28:	bd80      	pop	{r7, pc}

08018a2a <_ZN21MockIgnoredActualCall8withNameERK12SimpleString>:
};

class MockIgnoredActualCall: public MockActualCall
{
public:
    virtual MockActualCall& withName(const SimpleString&) _override { return *this;}
 8018a2a:	b480      	push	{r7}
 8018a2c:	b083      	sub	sp, #12
 8018a2e:	af00      	add	r7, sp, #0
 8018a30:	6078      	str	r0, [r7, #4]
 8018a32:	6039      	str	r1, [r7, #0]
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	4618      	mov	r0, r3
 8018a38:	370c      	adds	r7, #12
 8018a3a:	46bd      	mov	sp, r7
 8018a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a40:	4770      	bx	lr

08018a42 <_ZN21MockIgnoredActualCall13withCallOrderEj>:
    virtual MockActualCall& withCallOrder(unsigned int) _override { return *this; }
 8018a42:	b480      	push	{r7}
 8018a44:	b083      	sub	sp, #12
 8018a46:	af00      	add	r7, sp, #0
 8018a48:	6078      	str	r0, [r7, #4]
 8018a4a:	6039      	str	r1, [r7, #0]
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	4618      	mov	r0, r3
 8018a50:	370c      	adds	r7, #12
 8018a52:	46bd      	mov	sp, r7
 8018a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a58:	4770      	bx	lr

08018a5a <_ZN21MockIgnoredActualCall17withBoolParameterERK12SimpleStringb>:
    virtual MockActualCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 8018a5a:	b480      	push	{r7}
 8018a5c:	b085      	sub	sp, #20
 8018a5e:	af00      	add	r7, sp, #0
 8018a60:	60f8      	str	r0, [r7, #12]
 8018a62:	60b9      	str	r1, [r7, #8]
 8018a64:	4613      	mov	r3, r2
 8018a66:	71fb      	strb	r3, [r7, #7]
 8018a68:	68fb      	ldr	r3, [r7, #12]
 8018a6a:	4618      	mov	r0, r3
 8018a6c:	3714      	adds	r7, #20
 8018a6e:	46bd      	mov	sp, r7
 8018a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a74:	4770      	bx	lr

08018a76 <_ZN21MockIgnoredActualCall16withIntParameterERK12SimpleStringi>:
    virtual MockActualCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 8018a76:	b480      	push	{r7}
 8018a78:	b085      	sub	sp, #20
 8018a7a:	af00      	add	r7, sp, #0
 8018a7c:	60f8      	str	r0, [r7, #12]
 8018a7e:	60b9      	str	r1, [r7, #8]
 8018a80:	607a      	str	r2, [r7, #4]
 8018a82:	68fb      	ldr	r3, [r7, #12]
 8018a84:	4618      	mov	r0, r3
 8018a86:	3714      	adds	r7, #20
 8018a88:	46bd      	mov	sp, r7
 8018a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a8e:	4770      	bx	lr

08018a90 <_ZN21MockIgnoredActualCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockActualCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override { return *this; }
 8018a90:	b480      	push	{r7}
 8018a92:	b085      	sub	sp, #20
 8018a94:	af00      	add	r7, sp, #0
 8018a96:	60f8      	str	r0, [r7, #12]
 8018a98:	60b9      	str	r1, [r7, #8]
 8018a9a:	607a      	str	r2, [r7, #4]
 8018a9c:	68fb      	ldr	r3, [r7, #12]
 8018a9e:	4618      	mov	r0, r3
 8018aa0:	3714      	adds	r7, #20
 8018aa2:	46bd      	mov	sp, r7
 8018aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aa8:	4770      	bx	lr

08018aaa <_ZN21MockIgnoredActualCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockActualCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 8018aaa:	b480      	push	{r7}
 8018aac:	b085      	sub	sp, #20
 8018aae:	af00      	add	r7, sp, #0
 8018ab0:	60f8      	str	r0, [r7, #12]
 8018ab2:	60b9      	str	r1, [r7, #8]
 8018ab4:	607a      	str	r2, [r7, #4]
 8018ab6:	68fb      	ldr	r3, [r7, #12]
 8018ab8:	4618      	mov	r0, r3
 8018aba:	3714      	adds	r7, #20
 8018abc:	46bd      	mov	sp, r7
 8018abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ac2:	4770      	bx	lr

08018ac4 <_ZN21MockIgnoredActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockActualCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 8018ac4:	b480      	push	{r7}
 8018ac6:	b085      	sub	sp, #20
 8018ac8:	af00      	add	r7, sp, #0
 8018aca:	60f8      	str	r0, [r7, #12]
 8018acc:	60b9      	str	r1, [r7, #8]
 8018ace:	607a      	str	r2, [r7, #4]
 8018ad0:	68fb      	ldr	r3, [r7, #12]
 8018ad2:	4618      	mov	r0, r3
 8018ad4:	3714      	adds	r7, #20
 8018ad6:	46bd      	mov	sp, r7
 8018ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018adc:	4770      	bx	lr

08018ade <_ZN21MockIgnoredActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockActualCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 8018ade:	b480      	push	{r7}
 8018ae0:	b085      	sub	sp, #20
 8018ae2:	af00      	add	r7, sp, #0
 8018ae4:	60f8      	str	r0, [r7, #12]
 8018ae6:	60b9      	str	r1, [r7, #8]
 8018ae8:	4639      	mov	r1, r7
 8018aea:	e881 000c 	stmia.w	r1, {r2, r3}
 8018aee:	68fb      	ldr	r3, [r7, #12]
 8018af0:	4618      	mov	r0, r3
 8018af2:	3714      	adds	r7, #20
 8018af4:	46bd      	mov	sp, r7
 8018af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018afa:	4770      	bx	lr

08018afc <_ZN21MockIgnoredActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockActualCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 8018afc:	b480      	push	{r7}
 8018afe:	b085      	sub	sp, #20
 8018b00:	af00      	add	r7, sp, #0
 8018b02:	60f8      	str	r0, [r7, #12]
 8018b04:	60b9      	str	r1, [r7, #8]
 8018b06:	4639      	mov	r1, r7
 8018b08:	e881 000c 	stmia.w	r1, {r2, r3}
 8018b0c:	68fb      	ldr	r3, [r7, #12]
 8018b0e:	4618      	mov	r0, r3
 8018b10:	3714      	adds	r7, #20
 8018b12:	46bd      	mov	sp, r7
 8018b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b18:	4770      	bx	lr

08018b1a <_ZN21MockIgnoredActualCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockActualCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 8018b1a:	b480      	push	{r7}
 8018b1c:	b085      	sub	sp, #20
 8018b1e:	af00      	add	r7, sp, #0
 8018b20:	60f8      	str	r0, [r7, #12]
 8018b22:	60b9      	str	r1, [r7, #8]
 8018b24:	ed87 0b00 	vstr	d0, [r7]
 8018b28:	68fb      	ldr	r3, [r7, #12]
 8018b2a:	4618      	mov	r0, r3
 8018b2c:	3714      	adds	r7, #20
 8018b2e:	46bd      	mov	sp, r7
 8018b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b34:	4770      	bx	lr

08018b36 <_ZN21MockIgnoredActualCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockActualCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 8018b36:	b480      	push	{r7}
 8018b38:	b085      	sub	sp, #20
 8018b3a:	af00      	add	r7, sp, #0
 8018b3c:	60f8      	str	r0, [r7, #12]
 8018b3e:	60b9      	str	r1, [r7, #8]
 8018b40:	607a      	str	r2, [r7, #4]
 8018b42:	68fb      	ldr	r3, [r7, #12]
 8018b44:	4618      	mov	r0, r3
 8018b46:	3714      	adds	r7, #20
 8018b48:	46bd      	mov	sp, r7
 8018b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b4e:	4770      	bx	lr

08018b50 <_ZN21MockIgnoredActualCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockActualCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 8018b50:	b480      	push	{r7}
 8018b52:	b085      	sub	sp, #20
 8018b54:	af00      	add	r7, sp, #0
 8018b56:	60f8      	str	r0, [r7, #12]
 8018b58:	60b9      	str	r1, [r7, #8]
 8018b5a:	607a      	str	r2, [r7, #4]
 8018b5c:	68fb      	ldr	r3, [r7, #12]
 8018b5e:	4618      	mov	r0, r3
 8018b60:	3714      	adds	r7, #20
 8018b62:	46bd      	mov	sp, r7
 8018b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b68:	4770      	bx	lr

08018b6a <_ZN21MockIgnoredActualCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockActualCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 8018b6a:	b480      	push	{r7}
 8018b6c:	b085      	sub	sp, #20
 8018b6e:	af00      	add	r7, sp, #0
 8018b70:	60f8      	str	r0, [r7, #12]
 8018b72:	60b9      	str	r1, [r7, #8]
 8018b74:	607a      	str	r2, [r7, #4]
 8018b76:	68fb      	ldr	r3, [r7, #12]
 8018b78:	4618      	mov	r0, r3
 8018b7a:	3714      	adds	r7, #20
 8018b7c:	46bd      	mov	sp, r7
 8018b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b82:	4770      	bx	lr

08018b84 <_ZN21MockIgnoredActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockActualCall& withFunctionPointerParameter(const SimpleString& , void (*)()) _override { return *this; }
 8018b84:	b480      	push	{r7}
 8018b86:	b085      	sub	sp, #20
 8018b88:	af00      	add	r7, sp, #0
 8018b8a:	60f8      	str	r0, [r7, #12]
 8018b8c:	60b9      	str	r1, [r7, #8]
 8018b8e:	607a      	str	r2, [r7, #4]
 8018b90:	68fb      	ldr	r3, [r7, #12]
 8018b92:	4618      	mov	r0, r3
 8018b94:	3714      	adds	r7, #20
 8018b96:	46bd      	mov	sp, r7
 8018b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b9c:	4770      	bx	lr

08018b9e <_ZN21MockIgnoredActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockActualCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override  { return *this; }
 8018b9e:	b480      	push	{r7}
 8018ba0:	b085      	sub	sp, #20
 8018ba2:	af00      	add	r7, sp, #0
 8018ba4:	60f8      	str	r0, [r7, #12]
 8018ba6:	60b9      	str	r1, [r7, #8]
 8018ba8:	607a      	str	r2, [r7, #4]
 8018baa:	603b      	str	r3, [r7, #0]
 8018bac:	68fb      	ldr	r3, [r7, #12]
 8018bae:	4618      	mov	r0, r3
 8018bb0:	3714      	adds	r7, #20
 8018bb2:	46bd      	mov	sp, r7
 8018bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bb8:	4770      	bx	lr

08018bba <_ZN21MockIgnoredActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockActualCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 8018bba:	b480      	push	{r7}
 8018bbc:	b085      	sub	sp, #20
 8018bbe:	af00      	add	r7, sp, #0
 8018bc0:	60f8      	str	r0, [r7, #12]
 8018bc2:	60b9      	str	r1, [r7, #8]
 8018bc4:	607a      	str	r2, [r7, #4]
 8018bc6:	603b      	str	r3, [r7, #0]
 8018bc8:	68fb      	ldr	r3, [r7, #12]
 8018bca:	4618      	mov	r0, r3
 8018bcc:	3714      	adds	r7, #20
 8018bce:	46bd      	mov	sp, r7
 8018bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bd4:	4770      	bx	lr

08018bd6 <_ZN21MockIgnoredActualCall19withOutputParameterERK12SimpleStringPv>:
    virtual MockActualCall& withOutputParameter(const SimpleString&, void*) _override { return *this; }
 8018bd6:	b480      	push	{r7}
 8018bd8:	b085      	sub	sp, #20
 8018bda:	af00      	add	r7, sp, #0
 8018bdc:	60f8      	str	r0, [r7, #12]
 8018bde:	60b9      	str	r1, [r7, #8]
 8018be0:	607a      	str	r2, [r7, #4]
 8018be2:	68fb      	ldr	r3, [r7, #12]
 8018be4:	4618      	mov	r0, r3
 8018be6:	3714      	adds	r7, #20
 8018be8:	46bd      	mov	sp, r7
 8018bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bee:	4770      	bx	lr

08018bf0 <_ZN21MockIgnoredActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:
    virtual MockActualCall& withOutputParameterOfType(const SimpleString&, const SimpleString&, void*) _override { return *this; }
 8018bf0:	b480      	push	{r7}
 8018bf2:	b085      	sub	sp, #20
 8018bf4:	af00      	add	r7, sp, #0
 8018bf6:	60f8      	str	r0, [r7, #12]
 8018bf8:	60b9      	str	r1, [r7, #8]
 8018bfa:	607a      	str	r2, [r7, #4]
 8018bfc:	603b      	str	r3, [r7, #0]
 8018bfe:	68fb      	ldr	r3, [r7, #12]
 8018c00:	4618      	mov	r0, r3
 8018c02:	3714      	adds	r7, #20
 8018c04:	46bd      	mov	sp, r7
 8018c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c0a:	4770      	bx	lr

08018c0c <_ZN21MockIgnoredActualCall14hasReturnValueEv>:

    virtual bool hasReturnValue() _override { return false; }
 8018c0c:	b480      	push	{r7}
 8018c0e:	b083      	sub	sp, #12
 8018c10:	af00      	add	r7, sp, #0
 8018c12:	6078      	str	r0, [r7, #4]
 8018c14:	2300      	movs	r3, #0
 8018c16:	4618      	mov	r0, r3
 8018c18:	370c      	adds	r7, #12
 8018c1a:	46bd      	mov	sp, r7
 8018c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c20:	4770      	bx	lr
	...

08018c24 <_ZN21MockIgnoredActualCall11returnValueEv>:
    virtual MockNamedValue returnValue() _override { return MockNamedValue(""); }
 8018c24:	b580      	push	{r7, lr}
 8018c26:	b084      	sub	sp, #16
 8018c28:	af00      	add	r7, sp, #0
 8018c2a:	6078      	str	r0, [r7, #4]
 8018c2c:	6039      	str	r1, [r7, #0]
 8018c2e:	f107 0308 	add.w	r3, r7, #8
 8018c32:	4909      	ldr	r1, [pc, #36]	; (8018c58 <_ZN21MockIgnoredActualCall11returnValueEv+0x34>)
 8018c34:	4618      	mov	r0, r3
 8018c36:	f7f5 f9a6 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8018c3a:	f107 0308 	add.w	r3, r7, #8
 8018c3e:	4619      	mov	r1, r3
 8018c40:	6878      	ldr	r0, [r7, #4]
 8018c42:	f005 fec5 	bl	801e9d0 <_ZN14MockNamedValueC1ERK12SimpleString>
 8018c46:	f107 0308 	add.w	r3, r7, #8
 8018c4a:	4618      	mov	r0, r3
 8018c4c:	f7f5 fd53 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8018c50:	6878      	ldr	r0, [r7, #4]
 8018c52:	3710      	adds	r7, #16
 8018c54:	46bd      	mov	sp, r7
 8018c56:	bd80      	pop	{r7, pc}
 8018c58:	080278a8 	.word	0x080278a8

08018c5c <_ZN21MockIgnoredActualCall24returnBoolValueOrDefaultEb>:

    virtual bool returnBoolValueOrDefault(bool value) _override { return value; }
 8018c5c:	b480      	push	{r7}
 8018c5e:	b083      	sub	sp, #12
 8018c60:	af00      	add	r7, sp, #0
 8018c62:	6078      	str	r0, [r7, #4]
 8018c64:	460b      	mov	r3, r1
 8018c66:	70fb      	strb	r3, [r7, #3]
 8018c68:	78fb      	ldrb	r3, [r7, #3]
 8018c6a:	4618      	mov	r0, r3
 8018c6c:	370c      	adds	r7, #12
 8018c6e:	46bd      	mov	sp, r7
 8018c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c74:	4770      	bx	lr

08018c76 <_ZN21MockIgnoredActualCall15returnBoolValueEv>:
    virtual bool returnBoolValue() _override { return false; }
 8018c76:	b480      	push	{r7}
 8018c78:	b083      	sub	sp, #12
 8018c7a:	af00      	add	r7, sp, #0
 8018c7c:	6078      	str	r0, [r7, #4]
 8018c7e:	2300      	movs	r3, #0
 8018c80:	4618      	mov	r0, r3
 8018c82:	370c      	adds	r7, #12
 8018c84:	46bd      	mov	sp, r7
 8018c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c8a:	4770      	bx	lr

08018c8c <_ZN21MockIgnoredActualCall14returnIntValueEv>:

    virtual int returnIntValue() _override { return 0; }
 8018c8c:	b480      	push	{r7}
 8018c8e:	b083      	sub	sp, #12
 8018c90:	af00      	add	r7, sp, #0
 8018c92:	6078      	str	r0, [r7, #4]
 8018c94:	2300      	movs	r3, #0
 8018c96:	4618      	mov	r0, r3
 8018c98:	370c      	adds	r7, #12
 8018c9a:	46bd      	mov	sp, r7
 8018c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ca0:	4770      	bx	lr

08018ca2 <_ZN21MockIgnoredActualCall23returnIntValueOrDefaultEi>:
    virtual int returnIntValueOrDefault(int value) _override { return value; }
 8018ca2:	b480      	push	{r7}
 8018ca4:	b083      	sub	sp, #12
 8018ca6:	af00      	add	r7, sp, #0
 8018ca8:	6078      	str	r0, [r7, #4]
 8018caa:	6039      	str	r1, [r7, #0]
 8018cac:	683b      	ldr	r3, [r7, #0]
 8018cae:	4618      	mov	r0, r3
 8018cb0:	370c      	adds	r7, #12
 8018cb2:	46bd      	mov	sp, r7
 8018cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cb8:	4770      	bx	lr

08018cba <_ZN21MockIgnoredActualCall26returnUnsignedLongIntValueEv>:

    virtual unsigned long int returnUnsignedLongIntValue() _override { return 0; }
 8018cba:	b480      	push	{r7}
 8018cbc:	b083      	sub	sp, #12
 8018cbe:	af00      	add	r7, sp, #0
 8018cc0:	6078      	str	r0, [r7, #4]
 8018cc2:	2300      	movs	r3, #0
 8018cc4:	4618      	mov	r0, r3
 8018cc6:	370c      	adds	r7, #12
 8018cc8:	46bd      	mov	sp, r7
 8018cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cce:	4770      	bx	lr

08018cd0 <_ZN21MockIgnoredActualCall35returnUnsignedLongIntValueOrDefaultEm>:
    virtual unsigned long int returnUnsignedLongIntValueOrDefault(unsigned long int value) _override { return value; }
 8018cd0:	b480      	push	{r7}
 8018cd2:	b083      	sub	sp, #12
 8018cd4:	af00      	add	r7, sp, #0
 8018cd6:	6078      	str	r0, [r7, #4]
 8018cd8:	6039      	str	r1, [r7, #0]
 8018cda:	683b      	ldr	r3, [r7, #0]
 8018cdc:	4618      	mov	r0, r3
 8018cde:	370c      	adds	r7, #12
 8018ce0:	46bd      	mov	sp, r7
 8018ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ce6:	4770      	bx	lr

08018ce8 <_ZN21MockIgnoredActualCall18returnLongIntValueEv>:

    virtual long int returnLongIntValue() _override { return 0; }
 8018ce8:	b480      	push	{r7}
 8018cea:	b083      	sub	sp, #12
 8018cec:	af00      	add	r7, sp, #0
 8018cee:	6078      	str	r0, [r7, #4]
 8018cf0:	2300      	movs	r3, #0
 8018cf2:	4618      	mov	r0, r3
 8018cf4:	370c      	adds	r7, #12
 8018cf6:	46bd      	mov	sp, r7
 8018cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cfc:	4770      	bx	lr

08018cfe <_ZN21MockIgnoredActualCall27returnLongIntValueOrDefaultEl>:
    virtual long int returnLongIntValueOrDefault(long int value) _override { return value; }
 8018cfe:	b480      	push	{r7}
 8018d00:	b083      	sub	sp, #12
 8018d02:	af00      	add	r7, sp, #0
 8018d04:	6078      	str	r0, [r7, #4]
 8018d06:	6039      	str	r1, [r7, #0]
 8018d08:	683b      	ldr	r3, [r7, #0]
 8018d0a:	4618      	mov	r0, r3
 8018d0c:	370c      	adds	r7, #12
 8018d0e:	46bd      	mov	sp, r7
 8018d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d14:	4770      	bx	lr

08018d16 <_ZN21MockIgnoredActualCall30returnUnsignedLongLongIntValueEv>:

    virtual cpputest_ulonglong returnUnsignedLongLongIntValue() _override { return 0; }
 8018d16:	b580      	push	{r7, lr}
 8018d18:	b082      	sub	sp, #8
 8018d1a:	af00      	add	r7, sp, #0
 8018d1c:	6078      	str	r0, [r7, #4]
 8018d1e:	6039      	str	r1, [r7, #0]
 8018d20:	2100      	movs	r1, #0
 8018d22:	6878      	ldr	r0, [r7, #4]
 8018d24:	f7f3 f972 	bl	800c00c <_ZN18cpputest_ulonglongC1Ei>
 8018d28:	6878      	ldr	r0, [r7, #4]
 8018d2a:	3708      	adds	r7, #8
 8018d2c:	46bd      	mov	sp, r7
 8018d2e:	bd80      	pop	{r7, pc}

08018d30 <_ZN21MockIgnoredActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:
    virtual cpputest_ulonglong returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong value) _override { return value; }
 8018d30:	b480      	push	{r7}
 8018d32:	b085      	sub	sp, #20
 8018d34:	af00      	add	r7, sp, #0
 8018d36:	60f8      	str	r0, [r7, #12]
 8018d38:	60b9      	str	r1, [r7, #8]
 8018d3a:	4639      	mov	r1, r7
 8018d3c:	e881 000c 	stmia.w	r1, {r2, r3}
 8018d40:	68fb      	ldr	r3, [r7, #12]
 8018d42:	461a      	mov	r2, r3
 8018d44:	463b      	mov	r3, r7
 8018d46:	cb03      	ldmia	r3!, {r0, r1}
 8018d48:	6010      	str	r0, [r2, #0]
 8018d4a:	6051      	str	r1, [r2, #4]
 8018d4c:	68f8      	ldr	r0, [r7, #12]
 8018d4e:	3714      	adds	r7, #20
 8018d50:	46bd      	mov	sp, r7
 8018d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d56:	4770      	bx	lr

08018d58 <_ZN21MockIgnoredActualCall22returnLongLongIntValueEv>:

    virtual cpputest_longlong returnLongLongIntValue() _override { return 0; }
 8018d58:	b580      	push	{r7, lr}
 8018d5a:	b082      	sub	sp, #8
 8018d5c:	af00      	add	r7, sp, #0
 8018d5e:	6078      	str	r0, [r7, #4]
 8018d60:	6039      	str	r1, [r7, #0]
 8018d62:	2100      	movs	r1, #0
 8018d64:	6878      	ldr	r0, [r7, #4]
 8018d66:	f7f3 f945 	bl	800bff4 <_ZN17cpputest_longlongC1Ei>
 8018d6a:	6878      	ldr	r0, [r7, #4]
 8018d6c:	3708      	adds	r7, #8
 8018d6e:	46bd      	mov	sp, r7
 8018d70:	bd80      	pop	{r7, pc}

08018d72 <_ZN21MockIgnoredActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:
    virtual cpputest_longlong returnLongLongIntValueOrDefault(cpputest_longlong value) _override { return value; }
 8018d72:	b480      	push	{r7}
 8018d74:	b085      	sub	sp, #20
 8018d76:	af00      	add	r7, sp, #0
 8018d78:	60f8      	str	r0, [r7, #12]
 8018d7a:	60b9      	str	r1, [r7, #8]
 8018d7c:	4639      	mov	r1, r7
 8018d7e:	e881 000c 	stmia.w	r1, {r2, r3}
 8018d82:	68fb      	ldr	r3, [r7, #12]
 8018d84:	461a      	mov	r2, r3
 8018d86:	463b      	mov	r3, r7
 8018d88:	cb03      	ldmia	r3!, {r0, r1}
 8018d8a:	6010      	str	r0, [r2, #0]
 8018d8c:	6051      	str	r1, [r2, #4]
 8018d8e:	68f8      	ldr	r0, [r7, #12]
 8018d90:	3714      	adds	r7, #20
 8018d92:	46bd      	mov	sp, r7
 8018d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d98:	4770      	bx	lr

08018d9a <_ZN21MockIgnoredActualCall22returnUnsignedIntValueEv>:

    virtual unsigned int returnUnsignedIntValue() _override { return 0; }
 8018d9a:	b480      	push	{r7}
 8018d9c:	b083      	sub	sp, #12
 8018d9e:	af00      	add	r7, sp, #0
 8018da0:	6078      	str	r0, [r7, #4]
 8018da2:	2300      	movs	r3, #0
 8018da4:	4618      	mov	r0, r3
 8018da6:	370c      	adds	r7, #12
 8018da8:	46bd      	mov	sp, r7
 8018daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dae:	4770      	bx	lr

08018db0 <_ZN21MockIgnoredActualCall31returnUnsignedIntValueOrDefaultEj>:
    virtual unsigned int returnUnsignedIntValueOrDefault(unsigned int value) _override { return value; }
 8018db0:	b480      	push	{r7}
 8018db2:	b083      	sub	sp, #12
 8018db4:	af00      	add	r7, sp, #0
 8018db6:	6078      	str	r0, [r7, #4]
 8018db8:	6039      	str	r1, [r7, #0]
 8018dba:	683b      	ldr	r3, [r7, #0]
 8018dbc:	4618      	mov	r0, r3
 8018dbe:	370c      	adds	r7, #12
 8018dc0:	46bd      	mov	sp, r7
 8018dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dc6:	4770      	bx	lr

08018dc8 <_ZN21MockIgnoredActualCall17returnDoubleValueEv>:

    virtual double returnDoubleValue() _override { return 0.0; }
 8018dc8:	b480      	push	{r7}
 8018dca:	b083      	sub	sp, #12
 8018dcc:	af00      	add	r7, sp, #0
 8018dce:	6078      	str	r0, [r7, #4]
 8018dd0:	f04f 0200 	mov.w	r2, #0
 8018dd4:	f04f 0300 	mov.w	r3, #0
 8018dd8:	ec43 2b17 	vmov	d7, r2, r3
 8018ddc:	eeb0 0a47 	vmov.f32	s0, s14
 8018de0:	eef0 0a67 	vmov.f32	s1, s15
 8018de4:	370c      	adds	r7, #12
 8018de6:	46bd      	mov	sp, r7
 8018de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dec:	4770      	bx	lr

08018dee <_ZN21MockIgnoredActualCall26returnDoubleValueOrDefaultEd>:
    virtual double returnDoubleValueOrDefault(double value) _override { return value; }
 8018dee:	b480      	push	{r7}
 8018df0:	b085      	sub	sp, #20
 8018df2:	af00      	add	r7, sp, #0
 8018df4:	60f8      	str	r0, [r7, #12]
 8018df6:	ed87 0b00 	vstr	d0, [r7]
 8018dfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018dfe:	ec43 2b17 	vmov	d7, r2, r3
 8018e02:	eeb0 0a47 	vmov.f32	s0, s14
 8018e06:	eef0 0a67 	vmov.f32	s1, s15
 8018e0a:	3714      	adds	r7, #20
 8018e0c:	46bd      	mov	sp, r7
 8018e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e12:	4770      	bx	lr

08018e14 <_ZN21MockIgnoredActualCall17returnStringValueEv>:

    virtual const char * returnStringValue() _override { return ""; }
 8018e14:	b480      	push	{r7}
 8018e16:	b083      	sub	sp, #12
 8018e18:	af00      	add	r7, sp, #0
 8018e1a:	6078      	str	r0, [r7, #4]
 8018e1c:	4b03      	ldr	r3, [pc, #12]	; (8018e2c <_ZN21MockIgnoredActualCall17returnStringValueEv+0x18>)
 8018e1e:	4618      	mov	r0, r3
 8018e20:	370c      	adds	r7, #12
 8018e22:	46bd      	mov	sp, r7
 8018e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e28:	4770      	bx	lr
 8018e2a:	bf00      	nop
 8018e2c:	080278a8 	.word	0x080278a8

08018e30 <_ZN21MockIgnoredActualCall26returnStringValueOrDefaultEPKc>:
    virtual const char * returnStringValueOrDefault(const char * value) _override { return value; }
 8018e30:	b480      	push	{r7}
 8018e32:	b083      	sub	sp, #12
 8018e34:	af00      	add	r7, sp, #0
 8018e36:	6078      	str	r0, [r7, #4]
 8018e38:	6039      	str	r1, [r7, #0]
 8018e3a:	683b      	ldr	r3, [r7, #0]
 8018e3c:	4618      	mov	r0, r3
 8018e3e:	370c      	adds	r7, #12
 8018e40:	46bd      	mov	sp, r7
 8018e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e46:	4770      	bx	lr

08018e48 <_ZN21MockIgnoredActualCall18returnPointerValueEv>:

    virtual void * returnPointerValue() _override { return NULLPTR; }
 8018e48:	b480      	push	{r7}
 8018e4a:	b083      	sub	sp, #12
 8018e4c:	af00      	add	r7, sp, #0
 8018e4e:	6078      	str	r0, [r7, #4]
 8018e50:	2300      	movs	r3, #0
 8018e52:	4618      	mov	r0, r3
 8018e54:	370c      	adds	r7, #12
 8018e56:	46bd      	mov	sp, r7
 8018e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e5c:	4770      	bx	lr

08018e5e <_ZN21MockIgnoredActualCall27returnPointerValueOrDefaultEPv>:
    virtual void * returnPointerValueOrDefault(void * value) _override { return value; }
 8018e5e:	b480      	push	{r7}
 8018e60:	b083      	sub	sp, #12
 8018e62:	af00      	add	r7, sp, #0
 8018e64:	6078      	str	r0, [r7, #4]
 8018e66:	6039      	str	r1, [r7, #0]
 8018e68:	683b      	ldr	r3, [r7, #0]
 8018e6a:	4618      	mov	r0, r3
 8018e6c:	370c      	adds	r7, #12
 8018e6e:	46bd      	mov	sp, r7
 8018e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e74:	4770      	bx	lr

08018e76 <_ZN21MockIgnoredActualCall23returnConstPointerValueEv>:

    virtual const void * returnConstPointerValue() _override { return NULLPTR; }
 8018e76:	b480      	push	{r7}
 8018e78:	b083      	sub	sp, #12
 8018e7a:	af00      	add	r7, sp, #0
 8018e7c:	6078      	str	r0, [r7, #4]
 8018e7e:	2300      	movs	r3, #0
 8018e80:	4618      	mov	r0, r3
 8018e82:	370c      	adds	r7, #12
 8018e84:	46bd      	mov	sp, r7
 8018e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e8a:	4770      	bx	lr

08018e8c <_ZN21MockIgnoredActualCall32returnConstPointerValueOrDefaultEPKv>:
    virtual const void * returnConstPointerValueOrDefault(const void * value) _override { return value; }
 8018e8c:	b480      	push	{r7}
 8018e8e:	b083      	sub	sp, #12
 8018e90:	af00      	add	r7, sp, #0
 8018e92:	6078      	str	r0, [r7, #4]
 8018e94:	6039      	str	r1, [r7, #0]
 8018e96:	683b      	ldr	r3, [r7, #0]
 8018e98:	4618      	mov	r0, r3
 8018e9a:	370c      	adds	r7, #12
 8018e9c:	46bd      	mov	sp, r7
 8018e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ea2:	4770      	bx	lr

08018ea4 <_ZN21MockIgnoredActualCall26returnFunctionPointerValueEv>:

    virtual void (*returnFunctionPointerValue())() _override { return NULLPTR; }
 8018ea4:	b480      	push	{r7}
 8018ea6:	b083      	sub	sp, #12
 8018ea8:	af00      	add	r7, sp, #0
 8018eaa:	6078      	str	r0, [r7, #4]
 8018eac:	2300      	movs	r3, #0
 8018eae:	4618      	mov	r0, r3
 8018eb0:	370c      	adds	r7, #12
 8018eb2:	46bd      	mov	sp, r7
 8018eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eb8:	4770      	bx	lr

08018eba <_ZN21MockIgnoredActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:
    virtual void (*returnFunctionPointerValueOrDefault(void (*value)()))() _override { return value; }
 8018eba:	b480      	push	{r7}
 8018ebc:	b083      	sub	sp, #12
 8018ebe:	af00      	add	r7, sp, #0
 8018ec0:	6078      	str	r0, [r7, #4]
 8018ec2:	6039      	str	r1, [r7, #0]
 8018ec4:	683b      	ldr	r3, [r7, #0]
 8018ec6:	4618      	mov	r0, r3
 8018ec8:	370c      	adds	r7, #12
 8018eca:	46bd      	mov	sp, r7
 8018ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ed0:	4770      	bx	lr

08018ed2 <_ZN21MockIgnoredActualCall8onObjectEPKv>:

    virtual MockActualCall& onObject(const void* ) _override { return *this; }
 8018ed2:	b480      	push	{r7}
 8018ed4:	b083      	sub	sp, #12
 8018ed6:	af00      	add	r7, sp, #0
 8018ed8:	6078      	str	r0, [r7, #4]
 8018eda:	6039      	str	r1, [r7, #0]
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	4618      	mov	r0, r3
 8018ee0:	370c      	adds	r7, #12
 8018ee2:	46bd      	mov	sp, r7
 8018ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ee8:	4770      	bx	lr
	...

08018eec <_ZN14MockActualCallC1Ev>:
#include "CppUTestExt/MockCheckedActualCall.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"
#include "CppUTestExt/MockFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

MockActualCall::MockActualCall()
 8018eec:	b480      	push	{r7}
 8018eee:	b083      	sub	sp, #12
 8018ef0:	af00      	add	r7, sp, #0
 8018ef2:	6078      	str	r0, [r7, #4]
 8018ef4:	4a04      	ldr	r2, [pc, #16]	; (8018f08 <_ZN14MockActualCallC1Ev+0x1c>)
 8018ef6:	687b      	ldr	r3, [r7, #4]
 8018ef8:	601a      	str	r2, [r3, #0]
{
}
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	4618      	mov	r0, r3
 8018efe:	370c      	adds	r7, #12
 8018f00:	46bd      	mov	sp, r7
 8018f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f06:	4770      	bx	lr
 8018f08:	0802ab34 	.word	0x0802ab34

08018f0c <_ZN14MockActualCallD1Ev>:

MockActualCall::~MockActualCall()
 8018f0c:	b480      	push	{r7}
 8018f0e:	b083      	sub	sp, #12
 8018f10:	af00      	add	r7, sp, #0
 8018f12:	6078      	str	r0, [r7, #4]
 8018f14:	4a04      	ldr	r2, [pc, #16]	; (8018f28 <_ZN14MockActualCallD1Ev+0x1c>)
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	601a      	str	r2, [r3, #0]
{
}
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	4618      	mov	r0, r3
 8018f1e:	370c      	adds	r7, #12
 8018f20:	46bd      	mov	sp, r7
 8018f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f26:	4770      	bx	lr
 8018f28:	0802ab34 	.word	0x0802ab34

08018f2c <_ZN21MockCheckedActualCall7setNameERK12SimpleString>:

void MockCheckedActualCall::setName(const SimpleString& name)
{
 8018f2c:	b580      	push	{r7, lr}
 8018f2e:	b082      	sub	sp, #8
 8018f30:	af00      	add	r7, sp, #0
 8018f32:	6078      	str	r0, [r7, #4]
 8018f34:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	3304      	adds	r3, #4
 8018f3a:	6839      	ldr	r1, [r7, #0]
 8018f3c:	4618      	mov	r0, r3
 8018f3e:	f7f5 f88e 	bl	800e05e <_ZN12SimpleStringaSERKS_>
}
 8018f42:	bf00      	nop
 8018f44:	3708      	adds	r7, #8
 8018f46:	46bd      	mov	sp, r7
 8018f48:	bd80      	pop	{r7, pc}

08018f4a <_ZNK21MockCheckedActualCall7getNameEv>:

SimpleString MockCheckedActualCall::getName() const
{
 8018f4a:	b580      	push	{r7, lr}
 8018f4c:	b082      	sub	sp, #8
 8018f4e:	af00      	add	r7, sp, #0
 8018f50:	6078      	str	r0, [r7, #4]
 8018f52:	6039      	str	r1, [r7, #0]
    return functionName_;
 8018f54:	683b      	ldr	r3, [r7, #0]
 8018f56:	3304      	adds	r3, #4
 8018f58:	4619      	mov	r1, r3
 8018f5a:	6878      	ldr	r0, [r7, #4]
 8018f5c:	f7f5 f867 	bl	800e02e <_ZN12SimpleStringC1ERKS_>
}
 8018f60:	6878      	ldr	r0, [r7, #4]
 8018f62:	3708      	adds	r7, #8
 8018f64:	46bd      	mov	sp, r7
 8018f66:	bd80      	pop	{r7, pc}

08018f68 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>:

MockCheckedActualCall::MockCheckedActualCall(unsigned int callOrder, MockFailureReporter* reporter, const MockExpectedCallsList& allExpectations)
 8018f68:	b580      	push	{r7, lr}
 8018f6a:	b084      	sub	sp, #16
 8018f6c:	af00      	add	r7, sp, #0
 8018f6e:	60f8      	str	r0, [r7, #12]
 8018f70:	60b9      	str	r1, [r7, #8]
 8018f72:	607a      	str	r2, [r7, #4]
 8018f74:	603b      	str	r3, [r7, #0]
    : callOrder_(callOrder), reporter_(reporter), state_(CALL_SUCCEED), expectationsChecked_(false), matchingExpectation_(NULLPTR),
      allExpectations_(allExpectations), outputParameterExpectations_(NULLPTR)
 8018f76:	68fb      	ldr	r3, [r7, #12]
 8018f78:	4618      	mov	r0, r3
 8018f7a:	f7ff ffb7 	bl	8018eec <_ZN14MockActualCallC1Ev>
 8018f7e:	4a17      	ldr	r2, [pc, #92]	; (8018fdc <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x74>)
 8018f80:	68fb      	ldr	r3, [r7, #12]
 8018f82:	601a      	str	r2, [r3, #0]
 8018f84:	68fb      	ldr	r3, [r7, #12]
 8018f86:	3304      	adds	r3, #4
 8018f88:	4915      	ldr	r1, [pc, #84]	; (8018fe0 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x78>)
 8018f8a:	4618      	mov	r0, r3
 8018f8c:	f7f4 fffb 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8018f90:	68fb      	ldr	r3, [r7, #12]
 8018f92:	68ba      	ldr	r2, [r7, #8]
 8018f94:	60da      	str	r2, [r3, #12]
 8018f96:	68fb      	ldr	r3, [r7, #12]
 8018f98:	687a      	ldr	r2, [r7, #4]
 8018f9a:	611a      	str	r2, [r3, #16]
 8018f9c:	68fb      	ldr	r3, [r7, #12]
 8018f9e:	2202      	movs	r2, #2
 8018fa0:	751a      	strb	r2, [r3, #20]
 8018fa2:	68fb      	ldr	r3, [r7, #12]
 8018fa4:	2200      	movs	r2, #0
 8018fa6:	755a      	strb	r2, [r3, #21]
 8018fa8:	68fb      	ldr	r3, [r7, #12]
 8018faa:	2200      	movs	r2, #0
 8018fac:	619a      	str	r2, [r3, #24]
 8018fae:	68fb      	ldr	r3, [r7, #12]
 8018fb0:	331c      	adds	r3, #28
 8018fb2:	4618      	mov	r0, r3
 8018fb4:	f004 f814 	bl	801cfe0 <_ZN21MockExpectedCallsListC1Ev>
 8018fb8:	68fb      	ldr	r3, [r7, #12]
 8018fba:	683a      	ldr	r2, [r7, #0]
 8018fbc:	625a      	str	r2, [r3, #36]	; 0x24
 8018fbe:	68fb      	ldr	r3, [r7, #12]
 8018fc0:	2200      	movs	r2, #0
 8018fc2:	629a      	str	r2, [r3, #40]	; 0x28
{
    potentiallyMatchingExpectations_.addPotentiallyMatchingExpectations(allExpectations);
 8018fc4:	68fb      	ldr	r3, [r7, #12]
 8018fc6:	331c      	adds	r3, #28
 8018fc8:	6839      	ldr	r1, [r7, #0]
 8018fca:	4618      	mov	r0, r3
 8018fcc:	f004 f986 	bl	801d2dc <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>
}
 8018fd0:	68fb      	ldr	r3, [r7, #12]
 8018fd2:	4618      	mov	r0, r3
 8018fd4:	3710      	adds	r7, #16
 8018fd6:	46bd      	mov	sp, r7
 8018fd8:	bd80      	pop	{r7, pc}
 8018fda:	bf00      	nop
 8018fdc:	0802aa34 	.word	0x0802aa34
 8018fe0:	080278a8 	.word	0x080278a8

08018fe4 <_ZN21MockCheckedActualCallD1Ev>:

MockCheckedActualCall::~MockCheckedActualCall()
 8018fe4:	b580      	push	{r7, lr}
 8018fe6:	b082      	sub	sp, #8
 8018fe8:	af00      	add	r7, sp, #0
 8018fea:	6078      	str	r0, [r7, #4]
 8018fec:	4a0c      	ldr	r2, [pc, #48]	; (8019020 <_ZN21MockCheckedActualCallD1Ev+0x3c>)
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	601a      	str	r2, [r3, #0]
{
    cleanUpOutputParameterList();
 8018ff2:	6878      	ldr	r0, [r7, #4]
 8018ff4:	f001 fae4 	bl	801a5c0 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>
MockCheckedActualCall::~MockCheckedActualCall()
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	331c      	adds	r3, #28
 8018ffc:	4618      	mov	r0, r3
 8018ffe:	f004 f803 	bl	801d008 <_ZN21MockExpectedCallsListD1Ev>
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	3304      	adds	r3, #4
 8019006:	4618      	mov	r0, r3
 8019008:	f7f5 fb75 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	4618      	mov	r0, r3
 8019010:	f7ff ff7c 	bl	8018f0c <_ZN14MockActualCallD1Ev>
}
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	4618      	mov	r0, r3
 8019018:	3708      	adds	r7, #8
 801901a:	46bd      	mov	sp, r7
 801901c:	bd80      	pop	{r7, pc}
 801901e:	bf00      	nop
 8019020:	0802aa34 	.word	0x0802aa34

08019024 <_ZN21MockCheckedActualCallD0Ev>:
MockCheckedActualCall::~MockCheckedActualCall()
 8019024:	b580      	push	{r7, lr}
 8019026:	b082      	sub	sp, #8
 8019028:	af00      	add	r7, sp, #0
 801902a:	6078      	str	r0, [r7, #4]
}
 801902c:	6878      	ldr	r0, [r7, #4]
 801902e:	f7ff ffd9 	bl	8018fe4 <_ZN21MockCheckedActualCallD1Ev>
 8019032:	212c      	movs	r1, #44	; 0x2c
 8019034:	6878      	ldr	r0, [r7, #4]
 8019036:	f7f2 fbf7 	bl	800b828 <_ZdlPvj>
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	4618      	mov	r0, r3
 801903e:	3708      	adds	r7, #8
 8019040:	46bd      	mov	sp, r7
 8019042:	bd80      	pop	{r7, pc}

08019044 <_ZN21MockCheckedActualCall22setMockFailureReporterEP19MockFailureReporter>:

void MockCheckedActualCall::setMockFailureReporter(MockFailureReporter* reporter)
{
 8019044:	b480      	push	{r7}
 8019046:	b083      	sub	sp, #12
 8019048:	af00      	add	r7, sp, #0
 801904a:	6078      	str	r0, [r7, #4]
 801904c:	6039      	str	r1, [r7, #0]
    reporter_ = reporter;
 801904e:	687b      	ldr	r3, [r7, #4]
 8019050:	683a      	ldr	r2, [r7, #0]
 8019052:	611a      	str	r2, [r3, #16]
}
 8019054:	bf00      	nop
 8019056:	370c      	adds	r7, #12
 8019058:	46bd      	mov	sp, r7
 801905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801905e:	4770      	bx	lr

08019060 <_ZNK21MockCheckedActualCall7getTestEv>:

UtestShell* MockCheckedActualCall::getTest() const
{
 8019060:	b580      	push	{r7, lr}
 8019062:	b082      	sub	sp, #8
 8019064:	af00      	add	r7, sp, #0
 8019066:	6078      	str	r0, [r7, #4]
    return reporter_->getTestToFail();
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	691a      	ldr	r2, [r3, #16]
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	691b      	ldr	r3, [r3, #16]
 8019070:	681b      	ldr	r3, [r3, #0]
 8019072:	330c      	adds	r3, #12
 8019074:	681b      	ldr	r3, [r3, #0]
 8019076:	4610      	mov	r0, r2
 8019078:	4798      	blx	r3
 801907a:	4603      	mov	r3, r0
}
 801907c:	4618      	mov	r0, r3
 801907e:	3708      	adds	r7, #8
 8019080:	46bd      	mov	sp, r7
 8019082:	bd80      	pop	{r7, pc}

08019084 <_ZN21MockCheckedActualCall8failTestERK11MockFailure>:

void MockCheckedActualCall::failTest(const MockFailure& failure)
{
 8019084:	b580      	push	{r7, lr}
 8019086:	b082      	sub	sp, #8
 8019088:	af00      	add	r7, sp, #0
 801908a:	6078      	str	r0, [r7, #4]
 801908c:	6039      	str	r1, [r7, #0]
    if (!hasFailed()) {
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	681b      	ldr	r3, [r3, #0]
 8019092:	33c0      	adds	r3, #192	; 0xc0
 8019094:	681b      	ldr	r3, [r3, #0]
 8019096:	6878      	ldr	r0, [r7, #4]
 8019098:	4798      	blx	r3
 801909a:	4603      	mov	r3, r0
 801909c:	f083 0301 	eor.w	r3, r3, #1
 80190a0:	b2db      	uxtb	r3, r3
 80190a2:	2b00      	cmp	r3, #0
 80190a4:	d010      	beq.n	80190c8 <_ZN21MockCheckedActualCall8failTestERK11MockFailure+0x44>
        setState(CALL_FAILED);
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	681b      	ldr	r3, [r3, #0]
 80190aa:	33ec      	adds	r3, #236	; 0xec
 80190ac:	681b      	ldr	r3, [r3, #0]
 80190ae:	2101      	movs	r1, #1
 80190b0:	6878      	ldr	r0, [r7, #4]
 80190b2:	4798      	blx	r3
        reporter_->failTest(failure);
 80190b4:	687b      	ldr	r3, [r7, #4]
 80190b6:	691a      	ldr	r2, [r3, #16]
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	691b      	ldr	r3, [r3, #16]
 80190bc:	681b      	ldr	r3, [r3, #0]
 80190be:	3308      	adds	r3, #8
 80190c0:	681b      	ldr	r3, [r3, #0]
 80190c2:	6839      	ldr	r1, [r7, #0]
 80190c4:	4610      	mov	r0, r2
 80190c6:	4798      	blx	r3
    }
}
 80190c8:	bf00      	nop
 80190ca:	3708      	adds	r7, #8
 80190cc:	46bd      	mov	sp, r7
 80190ce:	bd80      	pop	{r7, pc}

080190d0 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall>:

void MockCheckedActualCall::copyOutputParameters(MockCheckedExpectedCall* expectedCall)
{
 80190d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190d4:	b0bc      	sub	sp, #240	; 0xf0
 80190d6:	af00      	add	r7, sp, #0
 80190d8:	6078      	str	r0, [r7, #4]
 80190da:	6039      	str	r1, [r7, #0]
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80190e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80190e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	f000 80f5 	beq.w	80192d8 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x208>
    {
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 80190ee:	683b      	ldr	r3, [r7, #0]
 80190f0:	681b      	ldr	r3, [r3, #0]
 80190f2:	339c      	adds	r3, #156	; 0x9c
 80190f4:	681b      	ldr	r3, [r3, #0]
 80190f6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80190fa:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80190fe:	6839      	ldr	r1, [r7, #0]
 8019100:	4798      	blx	r3
        MockNamedValueCopier* copier = outputParameter.getCopier();
 8019102:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019106:	4618      	mov	r0, r3
 8019108:	f006 fa6e 	bl	801f5e8 <_ZNK14MockNamedValue9getCopierEv>
 801910c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        if (copier)
 8019110:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8019114:	2b00      	cmp	r3, #0
 8019116:	d013      	beq.n	8019140 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x70>
        {
            copier->copy(p->ptr_, outputParameter.getConstObjectPointer());
 8019118:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801911c:	681b      	ldr	r3, [r3, #0]
 801911e:	3308      	adds	r3, #8
 8019120:	681c      	ldr	r4, [r3, #0]
 8019122:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8019126:	691d      	ldr	r5, [r3, #16]
 8019128:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801912c:	4618      	mov	r0, r3
 801912e:	f006 fa2b 	bl	801f588 <_ZNK14MockNamedValue21getConstObjectPointerEv>
 8019132:	4603      	mov	r3, r0
 8019134:	461a      	mov	r2, r3
 8019136:	4629      	mov	r1, r5
 8019138:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 801913c:	47a0      	blx	r4
 801913e:	e0c0      	b.n	80192c2 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if ((outputParameter.getType() == "const void*") && (p->type_ == "void*"))
 8019140:	2500      	movs	r5, #0
 8019142:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8019146:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801914a:	4611      	mov	r1, r2
 801914c:	4618      	mov	r0, r3
 801914e:	f005 ff0e 	bl	801ef6e <_ZNK14MockNamedValue7getTypeEv>
 8019152:	2601      	movs	r6, #1
 8019154:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8019158:	4962      	ldr	r1, [pc, #392]	; (80192e4 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x214>)
 801915a:	4618      	mov	r0, r3
 801915c:	f7f4 ff13 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8019160:	f04f 0801 	mov.w	r8, #1
 8019164:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8019168:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801916c:	4611      	mov	r1, r2
 801916e:	4618      	mov	r0, r3
 8019170:	f7f5 facd 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 8019174:	4603      	mov	r3, r0
 8019176:	2b00      	cmp	r3, #0
 8019178:	d015      	beq.n	80191a6 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 801917a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801917e:	f103 0408 	add.w	r4, r3, #8
 8019182:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8019186:	4958      	ldr	r1, [pc, #352]	; (80192e8 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x218>)
 8019188:	4618      	mov	r0, r3
 801918a:	f7f4 fefc 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801918e:	2501      	movs	r5, #1
 8019190:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8019194:	4619      	mov	r1, r3
 8019196:	4620      	mov	r0, r4
 8019198:	f7f5 fab9 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801919c:	4603      	mov	r3, r0
 801919e:	2b00      	cmp	r3, #0
 80191a0:	d001      	beq.n	80191a6 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 80191a2:	2401      	movs	r4, #1
 80191a4:	e000      	b.n	80191a8 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd8>
 80191a6:	2400      	movs	r4, #0
 80191a8:	2d00      	cmp	r5, #0
 80191aa:	d004      	beq.n	80191b6 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xe6>
 80191ac:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80191b0:	4618      	mov	r0, r3
 80191b2:	f7f5 faa0 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80191b6:	f1b8 0f00 	cmp.w	r8, #0
 80191ba:	d004      	beq.n	80191c6 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xf6>
 80191bc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80191c0:	4618      	mov	r0, r3
 80191c2:	f7f5 fa98 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80191c6:	2e00      	cmp	r6, #0
 80191c8:	d004      	beq.n	80191d4 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x104>
 80191ca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80191ce:	4618      	mov	r0, r3
 80191d0:	f7f5 fa91 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80191d4:	2c00      	cmp	r4, #0
 80191d6:	d018      	beq.n	801920a <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x13a>
        {
            const void* data = outputParameter.getConstPointerValue();
 80191d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80191dc:	4618      	mov	r0, r3
 80191de:	f006 f95b 	bl	801f498 <_ZNK14MockNamedValue20getConstPointerValueEv>
 80191e2:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
            size_t size = outputParameter.getSize();
 80191e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80191ea:	4618      	mov	r0, r3
 80191ec:	f006 f9e4 	bl	801f5b8 <_ZNK14MockNamedValue7getSizeEv>
 80191f0:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
            PlatformSpecificMemCpy(p->ptr_, data, size);
 80191f4:	4b3d      	ldr	r3, [pc, #244]	; (80192ec <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x21c>)
 80191f6:	681b      	ldr	r3, [r3, #0]
 80191f8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80191fc:	6910      	ldr	r0, [r2, #16]
 80191fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8019202:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8019206:	4798      	blx	r3
 8019208:	e05b      	b.n	80192c2 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if (outputParameter.getName() != "")
 801920a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801920e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8019212:	4611      	mov	r1, r2
 8019214:	4618      	mov	r0, r3
 8019216:	f005 fe9b 	bl	801ef50 <_ZNK14MockNamedValue7getNameEv>
 801921a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801921e:	4934      	ldr	r1, [pc, #208]	; (80192f0 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x220>)
 8019220:	4618      	mov	r0, r3
 8019222:	f7f4 feb0 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8019226:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801922a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801922e:	4611      	mov	r1, r2
 8019230:	4618      	mov	r0, r3
 8019232:	f7f5 fab1 	bl	800e798 <_ZneRK12SimpleStringS1_>
 8019236:	4603      	mov	r3, r0
 8019238:	461c      	mov	r4, r3
 801923a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801923e:	4618      	mov	r0, r3
 8019240:	f7f5 fa59 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8019244:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8019248:	4618      	mov	r0, r3
 801924a:	f7f5 fa54 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801924e:	2c00      	cmp	r4, #0
 8019250:	d037      	beq.n	80192c2 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        {
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 8019252:	683b      	ldr	r3, [r7, #0]
 8019254:	681b      	ldr	r3, [r3, #0]
 8019256:	339c      	adds	r3, #156	; 0x9c
 8019258:	681b      	ldr	r3, [r3, #0]
 801925a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801925e:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8019262:	6839      	ldr	r1, [r7, #0]
 8019264:	4798      	blx	r3
 8019266:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801926a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801926e:	4611      	mov	r1, r2
 8019270:	4618      	mov	r0, r3
 8019272:	f005 fe7c 	bl	801ef6e <_ZNK14MockNamedValue7getTypeEv>
 8019276:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801927a:	4618      	mov	r0, r3
 801927c:	f005 fbd2 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	681b      	ldr	r3, [r3, #0]
 8019284:	33cc      	adds	r3, #204	; 0xcc
 8019286:	681b      	ldr	r3, [r3, #0]
 8019288:	6878      	ldr	r0, [r7, #4]
 801928a:	4798      	blx	r3
 801928c:	4601      	mov	r1, r0
 801928e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8019292:	f107 030c 	add.w	r3, r7, #12
 8019296:	4618      	mov	r0, r3
 8019298:	f005 faee 	bl	801e878 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>
            failTest(failure);
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	681b      	ldr	r3, [r3, #0]
 80192a0:	33dc      	adds	r3, #220	; 0xdc
 80192a2:	681b      	ldr	r3, [r3, #0]
 80192a4:	f107 020c 	add.w	r2, r7, #12
 80192a8:	4611      	mov	r1, r2
 80192aa:	6878      	ldr	r0, [r7, #4]
 80192ac:	4798      	blx	r3
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 80192ae:	f107 030c 	add.w	r3, r7, #12
 80192b2:	4618      	mov	r0, r3
 80192b4:	f001 ffe2 	bl	801b27c <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 80192b8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80192bc:	4618      	mov	r0, r3
 80192be:	f7f5 fa1a 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 80192c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80192c6:	4618      	mov	r0, r3
 80192c8:	f005 fbac 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 80192cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80192d0:	695b      	ldr	r3, [r3, #20]
 80192d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80192d6:	e705      	b.n	80190e4 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x14>
        }
    }
}
 80192d8:	bf00      	nop
 80192da:	37f0      	adds	r7, #240	; 0xf0
 80192dc:	46bd      	mov	sp, r7
 80192de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192e2:	bf00      	nop
 80192e4:	080278ac 	.word	0x080278ac
 80192e8:	080278b8 	.word	0x080278b8
 80192ec:	200000d4 	.word	0x200000d4
 80192f0:	080278a8 	.word	0x080278a8

080192f4 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv>:

void MockCheckedActualCall::completeCallWhenMatchIsFound()
{
 80192f4:	b580      	push	{r7, lr}
 80192f6:	b084      	sub	sp, #16
 80192f8:	af00      	add	r7, sp, #0
 80192fa:	6078      	str	r0, [r7, #4]
    // Expectations that don't ignore parameters have higher fulfillment preference than those that ignore parameters

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstFinalizedMatchingExpectation();
 80192fc:	687b      	ldr	r3, [r7, #4]
 80192fe:	331c      	adds	r3, #28
 8019300:	4618      	mov	r0, r3
 8019302:	f004 f9bb 	bl	801d67c <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>
 8019306:	4602      	mov	r2, r0
 8019308:	687b      	ldr	r3, [r7, #4]
 801930a:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 801930c:	687b      	ldr	r3, [r7, #4]
 801930e:	699b      	ldr	r3, [r3, #24]
 8019310:	2b00      	cmp	r3, #0
 8019312:	d00f      	beq.n	8019334 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x40>
        copyOutputParameters(matchingExpectation_);
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	681b      	ldr	r3, [r3, #0]
 8019318:	33d4      	adds	r3, #212	; 0xd4
 801931a:	681b      	ldr	r3, [r3, #0]
 801931c:	687a      	ldr	r2, [r7, #4]
 801931e:	6992      	ldr	r2, [r2, #24]
 8019320:	4611      	mov	r1, r2
 8019322:	6878      	ldr	r0, [r7, #4]
 8019324:	4798      	blx	r3
        callHasSucceeded();
 8019326:	687b      	ldr	r3, [r7, #4]
 8019328:	681b      	ldr	r3, [r3, #0]
 801932a:	33d0      	adds	r3, #208	; 0xd0
 801932c:	681b      	ldr	r3, [r3, #0]
 801932e:	6878      	ldr	r0, [r7, #4]
 8019330:	4798      	blx	r3
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
        if (matchingExpectationWithIgnoredParameters) {
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
        }
    }
}
 8019332:	e00f      	b.n	8019354 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	331c      	adds	r3, #28
 8019338:	4618      	mov	r0, r3
 801933a:	f004 f9cc 	bl	801d6d6 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>
 801933e:	60f8      	str	r0, [r7, #12]
        if (matchingExpectationWithIgnoredParameters) {
 8019340:	68fb      	ldr	r3, [r7, #12]
 8019342:	2b00      	cmp	r3, #0
 8019344:	d006      	beq.n	8019354 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
 8019346:	687b      	ldr	r3, [r7, #4]
 8019348:	681b      	ldr	r3, [r3, #0]
 801934a:	33d4      	adds	r3, #212	; 0xd4
 801934c:	681b      	ldr	r3, [r3, #0]
 801934e:	68f9      	ldr	r1, [r7, #12]
 8019350:	6878      	ldr	r0, [r7, #4]
 8019352:	4798      	blx	r3
}
 8019354:	bf00      	nop
 8019356:	3710      	adds	r7, #16
 8019358:	46bd      	mov	sp, r7
 801935a:	bd80      	pop	{r7, pc}

0801935c <_ZN21MockCheckedActualCall16callHasSucceededEv>:

void MockCheckedActualCall::callHasSucceeded()
{
 801935c:	b580      	push	{r7, lr}
 801935e:	b082      	sub	sp, #8
 8019360:	af00      	add	r7, sp, #0
 8019362:	6078      	str	r0, [r7, #4]
    setState(CALL_SUCCEED);
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	681b      	ldr	r3, [r3, #0]
 8019368:	33ec      	adds	r3, #236	; 0xec
 801936a:	681b      	ldr	r3, [r3, #0]
 801936c:	2102      	movs	r1, #2
 801936e:	6878      	ldr	r0, [r7, #4]
 8019370:	4798      	blx	r3
}
 8019372:	bf00      	nop
 8019374:	3708      	adds	r7, #8
 8019376:	46bd      	mov	sp, r7
 8019378:	bd80      	pop	{r7, pc}

0801937a <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv>:

void MockCheckedActualCall::discardCurrentlyMatchingExpectations()
{
 801937a:	b580      	push	{r7, lr}
 801937c:	b082      	sub	sp, #8
 801937e:	af00      	add	r7, sp, #0
 8019380:	6078      	str	r0, [r7, #4]
    if (matchingExpectation_)
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	699b      	ldr	r3, [r3, #24]
 8019386:	2b00      	cmp	r3, #0
 8019388:	d00b      	beq.n	80193a2 <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv+0x28>
    {
        matchingExpectation_->resetActualCallMatchingState();
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	699a      	ldr	r2, [r3, #24]
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	699b      	ldr	r3, [r3, #24]
 8019392:	681b      	ldr	r3, [r3, #0]
 8019394:	33ec      	adds	r3, #236	; 0xec
 8019396:	681b      	ldr	r3, [r3, #0]
 8019398:	4610      	mov	r0, r2
 801939a:	4798      	blx	r3
        matchingExpectation_ = NULLPTR;
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	2200      	movs	r2, #0
 80193a0:	619a      	str	r2, [r3, #24]
    }
    potentiallyMatchingExpectations_.onlyKeepUnmatchingExpectations();
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	331c      	adds	r3, #28
 80193a6:	4618      	mov	r0, r3
 80193a8:	f004 f85c 	bl	801d464 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>
}
 80193ac:	bf00      	nop
 80193ae:	3708      	adds	r7, #8
 80193b0:	46bd      	mov	sp, r7
 80193b2:	bd80      	pop	{r7, pc}

080193b4 <_ZN21MockCheckedActualCall8withNameERK12SimpleString>:

MockActualCall& MockCheckedActualCall::withName(const SimpleString& name)
{
 80193b4:	b590      	push	{r4, r7, lr}
 80193b6:	b091      	sub	sp, #68	; 0x44
 80193b8:	af00      	add	r7, sp, #0
 80193ba:	6078      	str	r0, [r7, #4]
 80193bc:	6039      	str	r1, [r7, #0]
    setName(name);
 80193be:	6839      	ldr	r1, [r7, #0]
 80193c0:	6878      	ldr	r0, [r7, #4]
 80193c2:	f7ff fdb3 	bl	8018f2c <_ZN21MockCheckedActualCall7setNameERK12SimpleString>
    setState(CALL_IN_PROGRESS);
 80193c6:	687b      	ldr	r3, [r7, #4]
 80193c8:	681b      	ldr	r3, [r3, #0]
 80193ca:	33ec      	adds	r3, #236	; 0xec
 80193cc:	681b      	ldr	r3, [r3, #0]
 80193ce:	2100      	movs	r1, #0
 80193d0:	6878      	ldr	r0, [r7, #4]
 80193d2:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsRelatedTo(name);
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	331c      	adds	r3, #28
 80193d8:	6839      	ldr	r1, [r7, #0]
 80193da:	4618      	mov	r0, r3
 80193dc:	f003 ffec 	bl	801d3b8 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>
    if (potentiallyMatchingExpectations_.isEmpty()) {
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	331c      	adds	r3, #28
 80193e4:	4618      	mov	r0, r3
 80193e6:	f003 fe7c 	bl	801d0e2 <_ZNK21MockExpectedCallsList7isEmptyEv>
 80193ea:	4603      	mov	r3, r0
 80193ec:	2b00      	cmp	r3, #0
 80193ee:	d01d      	beq.n	801942c <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x78>
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	681b      	ldr	r3, [r3, #0]
 80193f4:	33cc      	adds	r3, #204	; 0xcc
 80193f6:	681b      	ldr	r3, [r3, #0]
 80193f8:	6878      	ldr	r0, [r7, #4]
 80193fa:	4798      	blx	r3
 80193fc:	4601      	mov	r1, r0
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019402:	f107 000c 	add.w	r0, r7, #12
 8019406:	683a      	ldr	r2, [r7, #0]
 8019408:	f004 fe24 	bl	801e054 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
        failTest(failure);
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	681b      	ldr	r3, [r3, #0]
 8019410:	33dc      	adds	r3, #220	; 0xdc
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	f107 020c 	add.w	r2, r7, #12
 8019418:	4611      	mov	r1, r2
 801941a:	6878      	ldr	r0, [r7, #4]
 801941c:	4798      	blx	r3
        return *this;
 801941e:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 8019420:	f107 030c 	add.w	r3, r7, #12
 8019424:	4618      	mov	r0, r3
 8019426:	f001 ff4b 	bl	801b2c0 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 801942a:	e006      	b.n	801943a <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x86>
    }

    completeCallWhenMatchIsFound();
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	681b      	ldr	r3, [r3, #0]
 8019430:	33d8      	adds	r3, #216	; 0xd8
 8019432:	681b      	ldr	r3, [r3, #0]
 8019434:	6878      	ldr	r0, [r7, #4]
 8019436:	4798      	blx	r3

    return *this;
 8019438:	687c      	ldr	r4, [r7, #4]
 801943a:	4623      	mov	r3, r4
}
 801943c:	4618      	mov	r0, r3
 801943e:	3744      	adds	r7, #68	; 0x44
 8019440:	46bd      	mov	sp, r7
 8019442:	bd90      	pop	{r4, r7, pc}

08019444 <_ZN21MockCheckedActualCall13withCallOrderEj>:

MockActualCall& MockCheckedActualCall::withCallOrder(unsigned int)
{
 8019444:	b480      	push	{r7}
 8019446:	b083      	sub	sp, #12
 8019448:	af00      	add	r7, sp, #0
 801944a:	6078      	str	r0, [r7, #4]
 801944c:	6039      	str	r1, [r7, #0]
    return *this;
 801944e:	687b      	ldr	r3, [r7, #4]
}
 8019450:	4618      	mov	r0, r3
 8019452:	370c      	adds	r7, #12
 8019454:	46bd      	mov	sp, r7
 8019456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801945a:	4770      	bx	lr

0801945c <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkInputParameter(const MockNamedValue& actualParameter)
{
 801945c:	b590      	push	{r4, r7, lr}
 801945e:	b097      	sub	sp, #92	; 0x5c
 8019460:	af02      	add	r7, sp, #8
 8019462:	6078      	str	r0, [r7, #4]
 8019464:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 8019466:	687b      	ldr	r3, [r7, #4]
 8019468:	681b      	ldr	r3, [r3, #0]
 801946a:	33c0      	adds	r3, #192	; 0xc0
 801946c:	681b      	ldr	r3, [r3, #0]
 801946e:	6878      	ldr	r0, [r7, #4]
 8019470:	4798      	blx	r3
 8019472:	4603      	mov	r3, r0
 8019474:	2b00      	cmp	r3, #0
 8019476:	d164      	bne.n	8019542 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	681b      	ldr	r3, [r3, #0]
 801947c:	33ec      	adds	r3, #236	; 0xec
 801947e:	681b      	ldr	r3, [r3, #0]
 8019480:	2100      	movs	r1, #0
 8019482:	6878      	ldr	r0, [r7, #4]
 8019484:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	681b      	ldr	r3, [r3, #0]
 801948a:	33e8      	adds	r3, #232	; 0xe8
 801948c:	681b      	ldr	r3, [r3, #0]
 801948e:	6878      	ldr	r0, [r7, #4]
 8019490:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithInputParameter(actualParameter);
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	331c      	adds	r3, #28
 8019496:	6839      	ldr	r1, [r7, #0]
 8019498:	4618      	mov	r0, r3
 801949a:	f004 f86b 	bl	801d574 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	331c      	adds	r3, #28
 80194a2:	4618      	mov	r0, r3
 80194a4:	f003 fe1d 	bl	801d0e2 <_ZNK21MockExpectedCallsList7isEmptyEv>
 80194a8:	4603      	mov	r3, r0
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	d02b      	beq.n	8019506 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	681b      	ldr	r3, [r3, #0]
 80194b2:	33cc      	adds	r3, #204	; 0xcc
 80194b4:	681b      	ldr	r3, [r3, #0]
 80194b6:	6878      	ldr	r0, [r7, #4]
 80194b8:	4798      	blx	r3
 80194ba:	4604      	mov	r4, r0
 80194bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80194c0:	6879      	ldr	r1, [r7, #4]
 80194c2:	4618      	mov	r0, r3
 80194c4:	f7ff fd41 	bl	8018f4a <_ZNK21MockCheckedActualCall7getNameEv>
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194cc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80194d0:	f107 000c 	add.w	r0, r7, #12
 80194d4:	9300      	str	r3, [sp, #0]
 80194d6:	683b      	ldr	r3, [r7, #0]
 80194d8:	4621      	mov	r1, r4
 80194da:	f004 fe7f 	bl	801e1dc <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 80194de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80194e2:	4618      	mov	r0, r3
 80194e4:	f7f5 f907 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 80194e8:	687b      	ldr	r3, [r7, #4]
 80194ea:	681b      	ldr	r3, [r3, #0]
 80194ec:	33dc      	adds	r3, #220	; 0xdc
 80194ee:	681b      	ldr	r3, [r3, #0]
 80194f0:	f107 020c 	add.w	r2, r7, #12
 80194f4:	4611      	mov	r1, r2
 80194f6:	6878      	ldr	r0, [r7, #4]
 80194f8:	4798      	blx	r3
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 80194fa:	f107 030c 	add.w	r3, r7, #12
 80194fe:	4618      	mov	r0, r3
 8019500:	f001 ff00 	bl	801b304 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 8019504:	e01e      	b.n	8019544 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.parameterWasPassed(actualParameter.getName());
 8019506:	687b      	ldr	r3, [r7, #4]
 8019508:	f103 041c 	add.w	r4, r3, #28
 801950c:	683b      	ldr	r3, [r7, #0]
 801950e:	681b      	ldr	r3, [r3, #0]
 8019510:	335c      	adds	r3, #92	; 0x5c
 8019512:	681b      	ldr	r3, [r3, #0]
 8019514:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8019518:	6839      	ldr	r1, [r7, #0]
 801951a:	4610      	mov	r0, r2
 801951c:	4798      	blx	r3
 801951e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019522:	4619      	mov	r1, r3
 8019524:	4620      	mov	r0, r4
 8019526:	f004 f9b8 	bl	801d89a <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>
 801952a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801952e:	4618      	mov	r0, r3
 8019530:	f7f5 f8e1 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	681b      	ldr	r3, [r3, #0]
 8019538:	33d8      	adds	r3, #216	; 0xd8
 801953a:	681b      	ldr	r3, [r3, #0]
 801953c:	6878      	ldr	r0, [r7, #4]
 801953e:	4798      	blx	r3
 8019540:	e000      	b.n	8019544 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
 8019542:	bf00      	nop
}
 8019544:	3754      	adds	r7, #84	; 0x54
 8019546:	46bd      	mov	sp, r7
 8019548:	bd90      	pop	{r4, r7, pc}

0801954a <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkOutputParameter(const MockNamedValue& outputParameter)
{
 801954a:	b590      	push	{r4, r7, lr}
 801954c:	b097      	sub	sp, #92	; 0x5c
 801954e:	af02      	add	r7, sp, #8
 8019550:	6078      	str	r0, [r7, #4]
 8019552:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	681b      	ldr	r3, [r3, #0]
 8019558:	33c0      	adds	r3, #192	; 0xc0
 801955a:	681b      	ldr	r3, [r3, #0]
 801955c:	6878      	ldr	r0, [r7, #4]
 801955e:	4798      	blx	r3
 8019560:	4603      	mov	r3, r0
 8019562:	2b00      	cmp	r3, #0
 8019564:	d164      	bne.n	8019630 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	681b      	ldr	r3, [r3, #0]
 801956a:	33ec      	adds	r3, #236	; 0xec
 801956c:	681b      	ldr	r3, [r3, #0]
 801956e:	2100      	movs	r1, #0
 8019570:	6878      	ldr	r0, [r7, #4]
 8019572:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	681b      	ldr	r3, [r3, #0]
 8019578:	33e8      	adds	r3, #232	; 0xe8
 801957a:	681b      	ldr	r3, [r3, #0]
 801957c:	6878      	ldr	r0, [r7, #4]
 801957e:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithOutputParameter(outputParameter);
 8019580:	687b      	ldr	r3, [r7, #4]
 8019582:	331c      	adds	r3, #28
 8019584:	6839      	ldr	r1, [r7, #0]
 8019586:	4618      	mov	r0, r3
 8019588:	f004 f820 	bl	801d5cc <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	331c      	adds	r3, #28
 8019590:	4618      	mov	r0, r3
 8019592:	f003 fda6 	bl	801d0e2 <_ZNK21MockExpectedCallsList7isEmptyEv>
 8019596:	4603      	mov	r3, r0
 8019598:	2b00      	cmp	r3, #0
 801959a:	d02b      	beq.n	80195f4 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	681b      	ldr	r3, [r3, #0]
 80195a0:	33cc      	adds	r3, #204	; 0xcc
 80195a2:	681b      	ldr	r3, [r3, #0]
 80195a4:	6878      	ldr	r0, [r7, #4]
 80195a6:	4798      	blx	r3
 80195a8:	4604      	mov	r4, r0
 80195aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80195ae:	6879      	ldr	r1, [r7, #4]
 80195b0:	4618      	mov	r0, r3
 80195b2:	f7ff fcca 	bl	8018f4a <_ZNK21MockCheckedActualCall7getNameEv>
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195ba:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80195be:	f107 000c 	add.w	r0, r7, #12
 80195c2:	9300      	str	r3, [sp, #0]
 80195c4:	683b      	ldr	r3, [r7, #0]
 80195c6:	4621      	mov	r1, r4
 80195c8:	f004 ff6a 	bl	801e4a0 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 80195cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80195d0:	4618      	mov	r0, r3
 80195d2:	f7f5 f890 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 80195d6:	687b      	ldr	r3, [r7, #4]
 80195d8:	681b      	ldr	r3, [r3, #0]
 80195da:	33dc      	adds	r3, #220	; 0xdc
 80195dc:	681b      	ldr	r3, [r3, #0]
 80195de:	f107 020c 	add.w	r2, r7, #12
 80195e2:	4611      	mov	r1, r2
 80195e4:	6878      	ldr	r0, [r7, #4]
 80195e6:	4798      	blx	r3
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 80195e8:	f107 030c 	add.w	r3, r7, #12
 80195ec:	4618      	mov	r0, r3
 80195ee:	f001 feab 	bl	801b348 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 80195f2:	e01e      	b.n	8019632 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.outputParameterWasPassed(outputParameter.getName());
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	f103 041c 	add.w	r4, r3, #28
 80195fa:	683b      	ldr	r3, [r7, #0]
 80195fc:	681b      	ldr	r3, [r3, #0]
 80195fe:	335c      	adds	r3, #92	; 0x5c
 8019600:	681b      	ldr	r3, [r3, #0]
 8019602:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8019606:	6839      	ldr	r1, [r7, #0]
 8019608:	4610      	mov	r0, r2
 801960a:	4798      	blx	r3
 801960c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019610:	4619      	mov	r1, r3
 8019612:	4620      	mov	r0, r4
 8019614:	f004 f95e 	bl	801d8d4 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>
 8019618:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801961c:	4618      	mov	r0, r3
 801961e:	f7f5 f86a 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	681b      	ldr	r3, [r3, #0]
 8019626:	33d8      	adds	r3, #216	; 0xd8
 8019628:	681b      	ldr	r3, [r3, #0]
 801962a:	6878      	ldr	r0, [r7, #4]
 801962c:	4798      	blx	r3
 801962e:	e000      	b.n	8019632 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
 8019630:	bf00      	nop
}
 8019632:	3754      	adds	r7, #84	; 0x54
 8019634:	46bd      	mov	sp, r7
 8019636:	bd90      	pop	{r4, r7, pc}

08019638 <_ZN21MockCheckedActualCall17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockCheckedActualCall::withBoolParameter(const SimpleString& name, bool value)
{
 8019638:	b590      	push	{r4, r7, lr}
 801963a:	b093      	sub	sp, #76	; 0x4c
 801963c:	af00      	add	r7, sp, #0
 801963e:	60f8      	str	r0, [r7, #12]
 8019640:	60b9      	str	r1, [r7, #8]
 8019642:	4613      	mov	r3, r2
 8019644:	71fb      	strb	r3, [r7, #7]
    MockNamedValue actualParameter(name);
 8019646:	f107 0310 	add.w	r3, r7, #16
 801964a:	68b9      	ldr	r1, [r7, #8]
 801964c:	4618      	mov	r0, r3
 801964e:	f005 f9bf 	bl	801e9d0 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8019652:	79fa      	ldrb	r2, [r7, #7]
 8019654:	f107 0310 	add.w	r3, r7, #16
 8019658:	4611      	mov	r1, r2
 801965a:	4618      	mov	r0, r3
 801965c:	f005 fa0a 	bl	801ea74 <_ZN14MockNamedValue8setValueEb>
    checkInputParameter(actualParameter);
 8019660:	68fb      	ldr	r3, [r7, #12]
 8019662:	681b      	ldr	r3, [r3, #0]
 8019664:	33e0      	adds	r3, #224	; 0xe0
 8019666:	681b      	ldr	r3, [r3, #0]
 8019668:	f107 0210 	add.w	r2, r7, #16
 801966c:	4611      	mov	r1, r2
 801966e:	68f8      	ldr	r0, [r7, #12]
 8019670:	4798      	blx	r3
    return *this;
 8019672:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8019674:	f107 0310 	add.w	r3, r7, #16
 8019678:	4618      	mov	r0, r3
 801967a:	f005 f9d3 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
    return *this;
 801967e:	4623      	mov	r3, r4
}
 8019680:	4618      	mov	r0, r3
 8019682:	374c      	adds	r7, #76	; 0x4c
 8019684:	46bd      	mov	sp, r7
 8019686:	bd90      	pop	{r4, r7, pc}

08019688 <_ZN21MockCheckedActualCall24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockCheckedActualCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 8019688:	b590      	push	{r4, r7, lr}
 801968a:	b093      	sub	sp, #76	; 0x4c
 801968c:	af00      	add	r7, sp, #0
 801968e:	60f8      	str	r0, [r7, #12]
 8019690:	60b9      	str	r1, [r7, #8]
 8019692:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8019694:	f107 0310 	add.w	r3, r7, #16
 8019698:	68b9      	ldr	r1, [r7, #8]
 801969a:	4618      	mov	r0, r3
 801969c:	f005 f998 	bl	801e9d0 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80196a0:	f107 0310 	add.w	r3, r7, #16
 80196a4:	6879      	ldr	r1, [r7, #4]
 80196a6:	4618      	mov	r0, r3
 80196a8:	f005 fa08 	bl	801eabc <_ZN14MockNamedValue8setValueEj>
    checkInputParameter(actualParameter);
 80196ac:	68fb      	ldr	r3, [r7, #12]
 80196ae:	681b      	ldr	r3, [r3, #0]
 80196b0:	33e0      	adds	r3, #224	; 0xe0
 80196b2:	681b      	ldr	r3, [r3, #0]
 80196b4:	f107 0210 	add.w	r2, r7, #16
 80196b8:	4611      	mov	r1, r2
 80196ba:	68f8      	ldr	r0, [r7, #12]
 80196bc:	4798      	blx	r3
    return *this;
 80196be:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80196c0:	f107 0310 	add.w	r3, r7, #16
 80196c4:	4618      	mov	r0, r3
 80196c6:	f005 f9ad 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
    return *this;
 80196ca:	4623      	mov	r3, r4
}
 80196cc:	4618      	mov	r0, r3
 80196ce:	374c      	adds	r7, #76	; 0x4c
 80196d0:	46bd      	mov	sp, r7
 80196d2:	bd90      	pop	{r4, r7, pc}

080196d4 <_ZN21MockCheckedActualCall16withIntParameterERK12SimpleStringi>:

MockActualCall& MockCheckedActualCall::withIntParameter(const SimpleString& name, int value)
{
 80196d4:	b590      	push	{r4, r7, lr}
 80196d6:	b093      	sub	sp, #76	; 0x4c
 80196d8:	af00      	add	r7, sp, #0
 80196da:	60f8      	str	r0, [r7, #12]
 80196dc:	60b9      	str	r1, [r7, #8]
 80196de:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80196e0:	f107 0310 	add.w	r3, r7, #16
 80196e4:	68b9      	ldr	r1, [r7, #8]
 80196e6:	4618      	mov	r0, r3
 80196e8:	f005 f972 	bl	801e9d0 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80196ec:	f107 0310 	add.w	r3, r7, #16
 80196f0:	6879      	ldr	r1, [r7, #4]
 80196f2:	4618      	mov	r0, r3
 80196f4:	f005 fa04 	bl	801eb00 <_ZN14MockNamedValue8setValueEi>
    checkInputParameter(actualParameter);
 80196f8:	68fb      	ldr	r3, [r7, #12]
 80196fa:	681b      	ldr	r3, [r3, #0]
 80196fc:	33e0      	adds	r3, #224	; 0xe0
 80196fe:	681b      	ldr	r3, [r3, #0]
 8019700:	f107 0210 	add.w	r2, r7, #16
 8019704:	4611      	mov	r1, r2
 8019706:	68f8      	ldr	r0, [r7, #12]
 8019708:	4798      	blx	r3
    return *this;
 801970a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801970c:	f107 0310 	add.w	r3, r7, #16
 8019710:	4618      	mov	r0, r3
 8019712:	f005 f987 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
    return *this;
 8019716:	4623      	mov	r3, r4
}
 8019718:	4618      	mov	r0, r3
 801971a:	374c      	adds	r7, #76	; 0x4c
 801971c:	46bd      	mov	sp, r7
 801971e:	bd90      	pop	{r4, r7, pc}

08019720 <_ZN21MockCheckedActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockCheckedActualCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8019720:	b590      	push	{r4, r7, lr}
 8019722:	b093      	sub	sp, #76	; 0x4c
 8019724:	af00      	add	r7, sp, #0
 8019726:	60f8      	str	r0, [r7, #12]
 8019728:	60b9      	str	r1, [r7, #8]
 801972a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801972c:	f107 0310 	add.w	r3, r7, #16
 8019730:	68b9      	ldr	r1, [r7, #8]
 8019732:	4618      	mov	r0, r3
 8019734:	f005 f94c 	bl	801e9d0 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8019738:	f107 0310 	add.w	r3, r7, #16
 801973c:	6879      	ldr	r1, [r7, #4]
 801973e:	4618      	mov	r0, r3
 8019740:	f005 fa22 	bl	801eb88 <_ZN14MockNamedValue8setValueEm>
    checkInputParameter(actualParameter);
 8019744:	68fb      	ldr	r3, [r7, #12]
 8019746:	681b      	ldr	r3, [r3, #0]
 8019748:	33e0      	adds	r3, #224	; 0xe0
 801974a:	681b      	ldr	r3, [r3, #0]
 801974c:	f107 0210 	add.w	r2, r7, #16
 8019750:	4611      	mov	r1, r2
 8019752:	68f8      	ldr	r0, [r7, #12]
 8019754:	4798      	blx	r3
    return *this;
 8019756:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8019758:	f107 0310 	add.w	r3, r7, #16
 801975c:	4618      	mov	r0, r3
 801975e:	f005 f961 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
    return *this;
 8019762:	4623      	mov	r3, r4
}
 8019764:	4618      	mov	r0, r3
 8019766:	374c      	adds	r7, #76	; 0x4c
 8019768:	46bd      	mov	sp, r7
 801976a:	bd90      	pop	{r4, r7, pc}

0801976c <_ZN21MockCheckedActualCall20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockCheckedActualCall::withLongIntParameter(const SimpleString& name, long int value)
{
 801976c:	b590      	push	{r4, r7, lr}
 801976e:	b093      	sub	sp, #76	; 0x4c
 8019770:	af00      	add	r7, sp, #0
 8019772:	60f8      	str	r0, [r7, #12]
 8019774:	60b9      	str	r1, [r7, #8]
 8019776:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8019778:	f107 0310 	add.w	r3, r7, #16
 801977c:	68b9      	ldr	r1, [r7, #8]
 801977e:	4618      	mov	r0, r3
 8019780:	f005 f926 	bl	801e9d0 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8019784:	f107 0310 	add.w	r3, r7, #16
 8019788:	6879      	ldr	r1, [r7, #4]
 801978a:	4618      	mov	r0, r3
 801978c:	f005 f9da 	bl	801eb44 <_ZN14MockNamedValue8setValueEl>
    checkInputParameter(actualParameter);
 8019790:	68fb      	ldr	r3, [r7, #12]
 8019792:	681b      	ldr	r3, [r3, #0]
 8019794:	33e0      	adds	r3, #224	; 0xe0
 8019796:	681b      	ldr	r3, [r3, #0]
 8019798:	f107 0210 	add.w	r2, r7, #16
 801979c:	4611      	mov	r1, r2
 801979e:	68f8      	ldr	r0, [r7, #12]
 80197a0:	4798      	blx	r3
    return *this;
 80197a2:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80197a4:	f107 0310 	add.w	r3, r7, #16
 80197a8:	4618      	mov	r0, r3
 80197aa:	f005 f93b 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
    return *this;
 80197ae:	4623      	mov	r3, r4
}
 80197b0:	4618      	mov	r0, r3
 80197b2:	374c      	adds	r7, #76	; 0x4c
 80197b4:	46bd      	mov	sp, r7
 80197b6:	bd90      	pop	{r4, r7, pc}

080197b8 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockCheckedActualCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 80197b8:	b5b0      	push	{r4, r5, r7, lr}
 80197ba:	b086      	sub	sp, #24
 80197bc:	af02      	add	r7, sp, #8
 80197be:	60f8      	str	r0, [r7, #12]
 80197c0:	60b9      	str	r1, [r7, #8]
 80197c2:	4639      	mov	r1, r7
 80197c4:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 80197c8:	f7fb ffc0 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 80197cc:	4604      	mov	r4, r0
 80197ce:	6823      	ldr	r3, [r4, #0]
 80197d0:	3368      	adds	r3, #104	; 0x68
 80197d2:	681d      	ldr	r5, [r3, #0]
 80197d4:	f7fb ffca 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80197d8:	4603      	mov	r3, r0
 80197da:	9300      	str	r3, [sp, #0]
 80197dc:	f44f 7385 	mov.w	r3, #266	; 0x10a
 80197e0:	4a04      	ldr	r2, [pc, #16]	; (80197f4 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 80197e2:	4905      	ldr	r1, [pc, #20]	; (80197f8 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 80197e4:	4620      	mov	r0, r4
 80197e6:	47a8      	blx	r5
    return *this;
 80197e8:	68fb      	ldr	r3, [r7, #12]
}
 80197ea:	4618      	mov	r0, r3
 80197ec:	3710      	adds	r7, #16
 80197ee:	46bd      	mov	sp, r7
 80197f0:	bdb0      	pop	{r4, r5, r7, pc}
 80197f2:	bf00      	nop
 80197f4:	080278c0 	.word	0x080278c0
 80197f8:	080278dc 	.word	0x080278dc

080197fc <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockCheckedActualCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 80197fc:	b5b0      	push	{r4, r5, r7, lr}
 80197fe:	b086      	sub	sp, #24
 8019800:	af02      	add	r7, sp, #8
 8019802:	60f8      	str	r0, [r7, #12]
 8019804:	60b9      	str	r1, [r7, #8]
 8019806:	4639      	mov	r1, r7
 8019808:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801980c:	f7fb ff9e 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8019810:	4604      	mov	r4, r0
 8019812:	6823      	ldr	r3, [r4, #0]
 8019814:	3368      	adds	r3, #104	; 0x68
 8019816:	681d      	ldr	r5, [r3, #0]
 8019818:	f7fb ffa8 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801981c:	4603      	mov	r3, r0
 801981e:	9300      	str	r3, [sp, #0]
 8019820:	f44f 7388 	mov.w	r3, #272	; 0x110
 8019824:	4a04      	ldr	r2, [pc, #16]	; (8019838 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 8019826:	4905      	ldr	r1, [pc, #20]	; (801983c <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 8019828:	4620      	mov	r0, r4
 801982a:	47a8      	blx	r5
    return *this;
 801982c:	68fb      	ldr	r3, [r7, #12]
}
 801982e:	4618      	mov	r0, r3
 8019830:	3710      	adds	r7, #16
 8019832:	46bd      	mov	sp, r7
 8019834:	bdb0      	pop	{r4, r5, r7, pc}
 8019836:	bf00      	nop
 8019838:	080278c0 	.word	0x080278c0
 801983c:	08027908 	.word	0x08027908

08019840 <_ZN21MockCheckedActualCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockCheckedActualCall::withDoubleParameter(const SimpleString& name, double value)
{
 8019840:	b590      	push	{r4, r7, lr}
 8019842:	b093      	sub	sp, #76	; 0x4c
 8019844:	af00      	add	r7, sp, #0
 8019846:	60f8      	str	r0, [r7, #12]
 8019848:	60b9      	str	r1, [r7, #8]
 801984a:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue actualParameter(name);
 801984e:	f107 0310 	add.w	r3, r7, #16
 8019852:	68b9      	ldr	r1, [r7, #8]
 8019854:	4618      	mov	r0, r3
 8019856:	f005 f8bb 	bl	801e9d0 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801985a:	f107 0310 	add.w	r3, r7, #16
 801985e:	ed97 0b00 	vldr	d0, [r7]
 8019862:	4618      	mov	r0, r3
 8019864:	f005 f9f0 	bl	801ec48 <_ZN14MockNamedValue8setValueEd>
    checkInputParameter(actualParameter);
 8019868:	68fb      	ldr	r3, [r7, #12]
 801986a:	681b      	ldr	r3, [r3, #0]
 801986c:	33e0      	adds	r3, #224	; 0xe0
 801986e:	681b      	ldr	r3, [r3, #0]
 8019870:	f107 0210 	add.w	r2, r7, #16
 8019874:	4611      	mov	r1, r2
 8019876:	68f8      	ldr	r0, [r7, #12]
 8019878:	4798      	blx	r3
    return *this;
 801987a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801987c:	f107 0310 	add.w	r3, r7, #16
 8019880:	4618      	mov	r0, r3
 8019882:	f005 f8cf 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
    return *this;
 8019886:	4623      	mov	r3, r4
}
 8019888:	4618      	mov	r0, r3
 801988a:	374c      	adds	r7, #76	; 0x4c
 801988c:	46bd      	mov	sp, r7
 801988e:	bd90      	pop	{r4, r7, pc}

08019890 <_ZN21MockCheckedActualCall19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockCheckedActualCall::withStringParameter(const SimpleString& name, const char* value)
{
 8019890:	b590      	push	{r4, r7, lr}
 8019892:	b093      	sub	sp, #76	; 0x4c
 8019894:	af00      	add	r7, sp, #0
 8019896:	60f8      	str	r0, [r7, #12]
 8019898:	60b9      	str	r1, [r7, #8]
 801989a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801989c:	f107 0310 	add.w	r3, r7, #16
 80198a0:	68b9      	ldr	r1, [r7, #8]
 80198a2:	4618      	mov	r0, r3
 80198a4:	f005 f894 	bl	801e9d0 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80198a8:	f107 0310 	add.w	r3, r7, #16
 80198ac:	6879      	ldr	r1, [r7, #4]
 80198ae:	4618      	mov	r0, r3
 80198b0:	f005 fa74 	bl	801ed9c <_ZN14MockNamedValue8setValueEPKc>
    checkInputParameter(actualParameter);
 80198b4:	68fb      	ldr	r3, [r7, #12]
 80198b6:	681b      	ldr	r3, [r3, #0]
 80198b8:	33e0      	adds	r3, #224	; 0xe0
 80198ba:	681b      	ldr	r3, [r3, #0]
 80198bc:	f107 0210 	add.w	r2, r7, #16
 80198c0:	4611      	mov	r1, r2
 80198c2:	68f8      	ldr	r0, [r7, #12]
 80198c4:	4798      	blx	r3
    return *this;
 80198c6:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80198c8:	f107 0310 	add.w	r3, r7, #16
 80198cc:	4618      	mov	r0, r3
 80198ce:	f005 f8a9 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
    return *this;
 80198d2:	4623      	mov	r3, r4
}
 80198d4:	4618      	mov	r0, r3
 80198d6:	374c      	adds	r7, #76	; 0x4c
 80198d8:	46bd      	mov	sp, r7
 80198da:	bd90      	pop	{r4, r7, pc}

080198dc <_ZN21MockCheckedActualCall20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withPointerParameter(const SimpleString& name, void* value)
{
 80198dc:	b590      	push	{r4, r7, lr}
 80198de:	b093      	sub	sp, #76	; 0x4c
 80198e0:	af00      	add	r7, sp, #0
 80198e2:	60f8      	str	r0, [r7, #12]
 80198e4:	60b9      	str	r1, [r7, #8]
 80198e6:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80198e8:	f107 0310 	add.w	r3, r7, #16
 80198ec:	68b9      	ldr	r1, [r7, #8]
 80198ee:	4618      	mov	r0, r3
 80198f0:	f005 f86e 	bl	801e9d0 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80198f4:	f107 0310 	add.w	r3, r7, #16
 80198f8:	6879      	ldr	r1, [r7, #4]
 80198fa:	4618      	mov	r0, r3
 80198fc:	f005 f9e8 	bl	801ecd0 <_ZN14MockNamedValue8setValueEPv>
    checkInputParameter(actualParameter);
 8019900:	68fb      	ldr	r3, [r7, #12]
 8019902:	681b      	ldr	r3, [r3, #0]
 8019904:	33e0      	adds	r3, #224	; 0xe0
 8019906:	681b      	ldr	r3, [r3, #0]
 8019908:	f107 0210 	add.w	r2, r7, #16
 801990c:	4611      	mov	r1, r2
 801990e:	68f8      	ldr	r0, [r7, #12]
 8019910:	4798      	blx	r3
    return *this;
 8019912:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8019914:	f107 0310 	add.w	r3, r7, #16
 8019918:	4618      	mov	r0, r3
 801991a:	f005 f883 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
    return *this;
 801991e:	4623      	mov	r3, r4
}
 8019920:	4618      	mov	r0, r3
 8019922:	374c      	adds	r7, #76	; 0x4c
 8019924:	46bd      	mov	sp, r7
 8019926:	bd90      	pop	{r4, r7, pc}

08019928 <_ZN21MockCheckedActualCall25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockCheckedActualCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 8019928:	b590      	push	{r4, r7, lr}
 801992a:	b093      	sub	sp, #76	; 0x4c
 801992c:	af00      	add	r7, sp, #0
 801992e:	60f8      	str	r0, [r7, #12]
 8019930:	60b9      	str	r1, [r7, #8]
 8019932:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8019934:	f107 0310 	add.w	r3, r7, #16
 8019938:	68b9      	ldr	r1, [r7, #8]
 801993a:	4618      	mov	r0, r3
 801993c:	f005 f848 	bl	801e9d0 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8019940:	f107 0310 	add.w	r3, r7, #16
 8019944:	6879      	ldr	r1, [r7, #4]
 8019946:	4618      	mov	r0, r3
 8019948:	f005 f9e4 	bl	801ed14 <_ZN14MockNamedValue8setValueEPKv>
    checkInputParameter(actualParameter);
 801994c:	68fb      	ldr	r3, [r7, #12]
 801994e:	681b      	ldr	r3, [r3, #0]
 8019950:	33e0      	adds	r3, #224	; 0xe0
 8019952:	681b      	ldr	r3, [r3, #0]
 8019954:	f107 0210 	add.w	r2, r7, #16
 8019958:	4611      	mov	r1, r2
 801995a:	68f8      	ldr	r0, [r7, #12]
 801995c:	4798      	blx	r3
    return *this;
 801995e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8019960:	f107 0310 	add.w	r3, r7, #16
 8019964:	4618      	mov	r0, r3
 8019966:	f005 f85d 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
    return *this;
 801996a:	4623      	mov	r3, r4
}
 801996c:	4618      	mov	r0, r3
 801996e:	374c      	adds	r7, #76	; 0x4c
 8019970:	46bd      	mov	sp, r7
 8019972:	bd90      	pop	{r4, r7, pc}

08019974 <_ZN21MockCheckedActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockCheckedActualCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 8019974:	b590      	push	{r4, r7, lr}
 8019976:	b093      	sub	sp, #76	; 0x4c
 8019978:	af00      	add	r7, sp, #0
 801997a:	60f8      	str	r0, [r7, #12]
 801997c:	60b9      	str	r1, [r7, #8]
 801997e:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8019980:	f107 0310 	add.w	r3, r7, #16
 8019984:	68b9      	ldr	r1, [r7, #8]
 8019986:	4618      	mov	r0, r3
 8019988:	f005 f822 	bl	801e9d0 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801998c:	f107 0310 	add.w	r3, r7, #16
 8019990:	6879      	ldr	r1, [r7, #4]
 8019992:	4618      	mov	r0, r3
 8019994:	f005 f9e0 	bl	801ed58 <_ZN14MockNamedValue8setValueEPFvvE>
    checkInputParameter(actualParameter);
 8019998:	68fb      	ldr	r3, [r7, #12]
 801999a:	681b      	ldr	r3, [r3, #0]
 801999c:	33e0      	adds	r3, #224	; 0xe0
 801999e:	681b      	ldr	r3, [r3, #0]
 80199a0:	f107 0210 	add.w	r2, r7, #16
 80199a4:	4611      	mov	r1, r2
 80199a6:	68f8      	ldr	r0, [r7, #12]
 80199a8:	4798      	blx	r3
    return *this;
 80199aa:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80199ac:	f107 0310 	add.w	r3, r7, #16
 80199b0:	4618      	mov	r0, r3
 80199b2:	f005 f837 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
    return *this;
 80199b6:	4623      	mov	r3, r4
}
 80199b8:	4618      	mov	r0, r3
 80199ba:	374c      	adds	r7, #76	; 0x4c
 80199bc:	46bd      	mov	sp, r7
 80199be:	bd90      	pop	{r4, r7, pc}

080199c0 <_ZN21MockCheckedActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockCheckedActualCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 80199c0:	b590      	push	{r4, r7, lr}
 80199c2:	b093      	sub	sp, #76	; 0x4c
 80199c4:	af00      	add	r7, sp, #0
 80199c6:	60f8      	str	r0, [r7, #12]
 80199c8:	60b9      	str	r1, [r7, #8]
 80199ca:	607a      	str	r2, [r7, #4]
 80199cc:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 80199ce:	f107 0310 	add.w	r3, r7, #16
 80199d2:	68b9      	ldr	r1, [r7, #8]
 80199d4:	4618      	mov	r0, r3
 80199d6:	f004 fffb 	bl	801e9d0 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setMemoryBuffer(value, size);
 80199da:	f107 0310 	add.w	r3, r7, #16
 80199de:	683a      	ldr	r2, [r7, #0]
 80199e0:	6879      	ldr	r1, [r7, #4]
 80199e2:	4618      	mov	r0, r3
 80199e4:	f005 f9fc 	bl	801ede0 <_ZN14MockNamedValue15setMemoryBufferEPKhj>
    checkInputParameter(actualParameter);
 80199e8:	68fb      	ldr	r3, [r7, #12]
 80199ea:	681b      	ldr	r3, [r3, #0]
 80199ec:	33e0      	adds	r3, #224	; 0xe0
 80199ee:	681b      	ldr	r3, [r3, #0]
 80199f0:	f107 0210 	add.w	r2, r7, #16
 80199f4:	4611      	mov	r1, r2
 80199f6:	68f8      	ldr	r0, [r7, #12]
 80199f8:	4798      	blx	r3
    return *this;
 80199fa:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80199fc:	f107 0310 	add.w	r3, r7, #16
 8019a00:	4618      	mov	r0, r3
 8019a02:	f005 f80f 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
    return *this;
 8019a06:	4623      	mov	r3, r4
}
 8019a08:	4618      	mov	r0, r3
 8019a0a:	374c      	adds	r7, #76	; 0x4c
 8019a0c:	46bd      	mov	sp, r7
 8019a0e:	bd90      	pop	{r4, r7, pc}

08019a10 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockCheckedActualCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 8019a10:	b590      	push	{r4, r7, lr}
 8019a12:	b0a1      	sub	sp, #132	; 0x84
 8019a14:	af00      	add	r7, sp, #0
 8019a16:	60f8      	str	r0, [r7, #12]
 8019a18:	60b9      	str	r1, [r7, #8]
 8019a1a:	607a      	str	r2, [r7, #4]
 8019a1c:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 8019a1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019a22:	6879      	ldr	r1, [r7, #4]
 8019a24:	4618      	mov	r0, r3
 8019a26:	f004 ffd3 	bl	801e9d0 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setConstObjectPointer(type, value);
 8019a2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019a2e:	683a      	ldr	r2, [r7, #0]
 8019a30:	68b9      	ldr	r1, [r7, #8]
 8019a32:	4618      	mov	r0, r3
 8019a34:	f005 f9fa 	bl	801ee2c <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>

    if (actualParameter.getComparator() == NULLPTR) {
 8019a38:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019a3c:	4618      	mov	r0, r3
 8019a3e:	f005 fdc7 	bl	801f5d0 <_ZNK14MockNamedValue13getComparatorEv>
 8019a42:	4603      	mov	r3, r0
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	bf0c      	ite	eq
 8019a48:	2301      	moveq	r3, #1
 8019a4a:	2300      	movne	r3, #0
 8019a4c:	b2db      	uxtb	r3, r3
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	d01c      	beq.n	8019a8c <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x7c>
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 8019a52:	68fb      	ldr	r3, [r7, #12]
 8019a54:	681b      	ldr	r3, [r3, #0]
 8019a56:	33cc      	adds	r3, #204	; 0xcc
 8019a58:	681b      	ldr	r3, [r3, #0]
 8019a5a:	68f8      	ldr	r0, [r7, #12]
 8019a5c:	4798      	blx	r3
 8019a5e:	4601      	mov	r1, r0
 8019a60:	f107 0314 	add.w	r3, r7, #20
 8019a64:	68ba      	ldr	r2, [r7, #8]
 8019a66:	4618      	mov	r0, r3
 8019a68:	f004 fed6 	bl	801e818 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>
        failTest(failure);
 8019a6c:	68fb      	ldr	r3, [r7, #12]
 8019a6e:	681b      	ldr	r3, [r3, #0]
 8019a70:	33dc      	adds	r3, #220	; 0xdc
 8019a72:	681b      	ldr	r3, [r3, #0]
 8019a74:	f107 0214 	add.w	r2, r7, #20
 8019a78:	4611      	mov	r1, r2
 8019a7a:	68f8      	ldr	r0, [r7, #12]
 8019a7c:	4798      	blx	r3
        return *this;
 8019a7e:	68fc      	ldr	r4, [r7, #12]
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 8019a80:	f107 0314 	add.w	r3, r7, #20
 8019a84:	4618      	mov	r0, r3
 8019a86:	f001 fc81 	bl	801b38c <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 8019a8a:	e009      	b.n	8019aa0 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x90>
    }
    checkInputParameter(actualParameter);
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	681b      	ldr	r3, [r3, #0]
 8019a90:	33e0      	adds	r3, #224	; 0xe0
 8019a92:	681b      	ldr	r3, [r3, #0]
 8019a94:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8019a98:	4611      	mov	r1, r2
 8019a9a:	68f8      	ldr	r0, [r7, #12]
 8019a9c:	4798      	blx	r3
    return *this;
 8019a9e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8019aa0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019aa4:	4618      	mov	r0, r3
 8019aa6:	f004 ffbd 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
 8019aaa:	4623      	mov	r3, r4
}
 8019aac:	4618      	mov	r0, r3
 8019aae:	3784      	adds	r7, #132	; 0x84
 8019ab0:	46bd      	mov	sp, r7
 8019ab2:	bd90      	pop	{r4, r7, pc}

08019ab4 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withOutputParameter(const SimpleString& name, void* output)
{
 8019ab4:	b590      	push	{r4, r7, lr}
 8019ab6:	b095      	sub	sp, #84	; 0x54
 8019ab8:	af00      	add	r7, sp, #0
 8019aba:	60f8      	str	r0, [r7, #12]
 8019abc:	60b9      	str	r1, [r7, #8]
 8019abe:	607a      	str	r2, [r7, #4]
    addOutputParameter(name, "void*", output);
 8019ac0:	68fb      	ldr	r3, [r7, #12]
 8019ac2:	681b      	ldr	r3, [r3, #0]
 8019ac4:	33f0      	adds	r3, #240	; 0xf0
 8019ac6:	681c      	ldr	r4, [r3, #0]
 8019ac8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019acc:	4917      	ldr	r1, [pc, #92]	; (8019b2c <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv+0x78>)
 8019ace:	4618      	mov	r0, r3
 8019ad0:	f7f4 fa59 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8019ad4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	68b9      	ldr	r1, [r7, #8]
 8019adc:	68f8      	ldr	r0, [r7, #12]
 8019ade:	47a0      	blx	r4
 8019ae0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019ae4:	4618      	mov	r0, r3
 8019ae6:	f7f4 fe06 	bl	800e6f6 <_ZN12SimpleStringD1Ev>

    MockNamedValue outputParameter(name);
 8019aea:	f107 0310 	add.w	r3, r7, #16
 8019aee:	68b9      	ldr	r1, [r7, #8]
 8019af0:	4618      	mov	r0, r3
 8019af2:	f004 ff6d 	bl	801e9d0 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setValue(output);
 8019af6:	f107 0310 	add.w	r3, r7, #16
 8019afa:	6879      	ldr	r1, [r7, #4]
 8019afc:	4618      	mov	r0, r3
 8019afe:	f005 f8e7 	bl	801ecd0 <_ZN14MockNamedValue8setValueEPv>
    checkOutputParameter(outputParameter);
 8019b02:	68fb      	ldr	r3, [r7, #12]
 8019b04:	681b      	ldr	r3, [r3, #0]
 8019b06:	33e4      	adds	r3, #228	; 0xe4
 8019b08:	681b      	ldr	r3, [r3, #0]
 8019b0a:	f107 0210 	add.w	r2, r7, #16
 8019b0e:	4611      	mov	r1, r2
 8019b10:	68f8      	ldr	r0, [r7, #12]
 8019b12:	4798      	blx	r3

    return *this;
 8019b14:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 8019b16:	f107 0310 	add.w	r3, r7, #16
 8019b1a:	4618      	mov	r0, r3
 8019b1c:	f004 ff82 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
    return *this;
 8019b20:	4623      	mov	r3, r4
}
 8019b22:	4618      	mov	r0, r3
 8019b24:	3754      	adds	r7, #84	; 0x54
 8019b26:	46bd      	mov	sp, r7
 8019b28:	bd90      	pop	{r4, r7, pc}
 8019b2a:	bf00      	nop
 8019b2c:	080278b8 	.word	0x080278b8

08019b30 <_ZN21MockCheckedActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockCheckedActualCall::withOutputParameterOfType(const SimpleString& type, const SimpleString& name, void* output)
{
 8019b30:	b590      	push	{r4, r7, lr}
 8019b32:	b093      	sub	sp, #76	; 0x4c
 8019b34:	af00      	add	r7, sp, #0
 8019b36:	60f8      	str	r0, [r7, #12]
 8019b38:	60b9      	str	r1, [r7, #8]
 8019b3a:	607a      	str	r2, [r7, #4]
 8019b3c:	603b      	str	r3, [r7, #0]
    addOutputParameter(name, type, output);
 8019b3e:	68fb      	ldr	r3, [r7, #12]
 8019b40:	681b      	ldr	r3, [r3, #0]
 8019b42:	33f0      	adds	r3, #240	; 0xf0
 8019b44:	681c      	ldr	r4, [r3, #0]
 8019b46:	683b      	ldr	r3, [r7, #0]
 8019b48:	68ba      	ldr	r2, [r7, #8]
 8019b4a:	6879      	ldr	r1, [r7, #4]
 8019b4c:	68f8      	ldr	r0, [r7, #12]
 8019b4e:	47a0      	blx	r4

    MockNamedValue outputParameter(name);
 8019b50:	f107 0310 	add.w	r3, r7, #16
 8019b54:	6879      	ldr	r1, [r7, #4]
 8019b56:	4618      	mov	r0, r3
 8019b58:	f004 ff3a 	bl	801e9d0 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setConstObjectPointer(type, output);
 8019b5c:	f107 0310 	add.w	r3, r7, #16
 8019b60:	683a      	ldr	r2, [r7, #0]
 8019b62:	68b9      	ldr	r1, [r7, #8]
 8019b64:	4618      	mov	r0, r3
 8019b66:	f005 f961 	bl	801ee2c <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>
    checkOutputParameter(outputParameter);
 8019b6a:	68fb      	ldr	r3, [r7, #12]
 8019b6c:	681b      	ldr	r3, [r3, #0]
 8019b6e:	33e4      	adds	r3, #228	; 0xe4
 8019b70:	681b      	ldr	r3, [r3, #0]
 8019b72:	f107 0210 	add.w	r2, r7, #16
 8019b76:	4611      	mov	r1, r2
 8019b78:	68f8      	ldr	r0, [r7, #12]
 8019b7a:	4798      	blx	r3

    return *this;
 8019b7c:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 8019b7e:	f107 0310 	add.w	r3, r7, #16
 8019b82:	4618      	mov	r0, r3
 8019b84:	f004 ff4e 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
    return *this;
 8019b88:	4623      	mov	r3, r4
}
 8019b8a:	4618      	mov	r0, r3
 8019b8c:	374c      	adds	r7, #76	; 0x4c
 8019b8e:	46bd      	mov	sp, r7
 8019b90:	bd90      	pop	{r4, r7, pc}

08019b92 <_ZNK21MockCheckedActualCall11isFulfilledEv>:

bool MockCheckedActualCall::isFulfilled() const
{
 8019b92:	b480      	push	{r7}
 8019b94:	b083      	sub	sp, #12
 8019b96:	af00      	add	r7, sp, #0
 8019b98:	6078      	str	r0, [r7, #4]
    return state_ == CALL_SUCCEED;
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	7d1b      	ldrb	r3, [r3, #20]
 8019b9e:	2b02      	cmp	r3, #2
 8019ba0:	bf0c      	ite	eq
 8019ba2:	2301      	moveq	r3, #1
 8019ba4:	2300      	movne	r3, #0
 8019ba6:	b2db      	uxtb	r3, r3
}
 8019ba8:	4618      	mov	r0, r3
 8019baa:	370c      	adds	r7, #12
 8019bac:	46bd      	mov	sp, r7
 8019bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bb2:	4770      	bx	lr

08019bb4 <_ZNK21MockCheckedActualCall9hasFailedEv>:

bool MockCheckedActualCall::hasFailed() const
{
 8019bb4:	b480      	push	{r7}
 8019bb6:	b083      	sub	sp, #12
 8019bb8:	af00      	add	r7, sp, #0
 8019bba:	6078      	str	r0, [r7, #4]
    return state_ == CALL_FAILED;
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	7d1b      	ldrb	r3, [r3, #20]
 8019bc0:	2b01      	cmp	r3, #1
 8019bc2:	bf0c      	ite	eq
 8019bc4:	2301      	moveq	r3, #1
 8019bc6:	2300      	movne	r3, #0
 8019bc8:	b2db      	uxtb	r3, r3
}
 8019bca:	4618      	mov	r0, r3
 8019bcc:	370c      	adds	r7, #12
 8019bce:	46bd      	mov	sp, r7
 8019bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bd4:	4770      	bx	lr
	...

08019bd8 <_ZN21MockCheckedActualCall17checkExpectationsEv>:

void MockCheckedActualCall::checkExpectations()
{
 8019bd8:	b5b0      	push	{r4, r5, r7, lr}
 8019bda:	b096      	sub	sp, #88	; 0x58
 8019bdc:	af02      	add	r7, sp, #8
 8019bde:	6078      	str	r0, [r7, #4]
    if(expectationsChecked_) {
 8019be0:	687b      	ldr	r3, [r7, #4]
 8019be2:	7d5b      	ldrb	r3, [r3, #21]
 8019be4:	2b00      	cmp	r3, #0
 8019be6:	f040 80bc 	bne.w	8019d62 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18a>
        return;
    }

    expectationsChecked_ = true;
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	2201      	movs	r2, #1
 8019bee:	755a      	strb	r2, [r3, #21]

    if (state_ != CALL_IN_PROGRESS) {
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	7d1b      	ldrb	r3, [r3, #20]
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	d014      	beq.n	8019c22 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x4a>
        if(state_ == CALL_SUCCEED) {
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	7d1b      	ldrb	r3, [r3, #20]
 8019bfc:	2b02      	cmp	r3, #2
 8019bfe:	d10a      	bne.n	8019c16 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x3e>
            matchingExpectation_->callWasMade(callOrder_);
 8019c00:	687b      	ldr	r3, [r7, #4]
 8019c02:	6998      	ldr	r0, [r3, #24]
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	699b      	ldr	r3, [r3, #24]
 8019c08:	681b      	ldr	r3, [r3, #0]
 8019c0a:	33d8      	adds	r3, #216	; 0xd8
 8019c0c:	681b      	ldr	r3, [r3, #0]
 8019c0e:	687a      	ldr	r2, [r7, #4]
 8019c10:	68d2      	ldr	r2, [r2, #12]
 8019c12:	4611      	mov	r1, r2
 8019c14:	4798      	blx	r3
        }
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 8019c16:	687b      	ldr	r3, [r7, #4]
 8019c18:	331c      	adds	r3, #28
 8019c1a:	4618      	mov	r0, r3
 8019c1c:	f003 fe07 	bl	801d82e <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 8019c20:	e0a0      	b.n	8019d64 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasFinalizedMatchingExpectations())
 8019c22:	687b      	ldr	r3, [r7, #4]
 8019c24:	331c      	adds	r3, #28
 8019c26:	4618      	mov	r0, r3
 8019c28:	f003 fac3 	bl	801d1b2 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>
 8019c2c:	4603      	mov	r3, r0
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	d00f      	beq.n	8019c52 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x7a>
        FAIL("Actual call is in progress, but there are finalized matching expectations when checking expectations. This cannot happen."); // LCOV_EXCL_LINE
 8019c32:	f7fb fd8b 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8019c36:	4604      	mov	r4, r0
 8019c38:	6823      	ldr	r3, [r4, #0]
 8019c3a:	3368      	adds	r3, #104	; 0x68
 8019c3c:	681d      	ldr	r5, [r3, #0]
 8019c3e:	f7fb fd95 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019c42:	4603      	mov	r3, r0
 8019c44:	9300      	str	r3, [sp, #0]
 8019c46:	f240 1385 	movw	r3, #389	; 0x185
 8019c4a:	4a48      	ldr	r2, [pc, #288]	; (8019d6c <_ZN21MockCheckedActualCall17checkExpectationsEv+0x194>)
 8019c4c:	4948      	ldr	r1, [pc, #288]	; (8019d70 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x198>)
 8019c4e:	4620      	mov	r0, r4
 8019c50:	47a8      	blx	r5

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstMatchingExpectation();
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	331c      	adds	r3, #28
 8019c56:	4618      	mov	r0, r3
 8019c58:	f003 fd5f 	bl	801d71a <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>
 8019c5c:	4602      	mov	r2, r0
 8019c5e:	687b      	ldr	r3, [r7, #4]
 8019c60:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 8019c62:	687b      	ldr	r3, [r7, #4]
 8019c64:	699b      	ldr	r3, [r3, #24]
 8019c66:	2b00      	cmp	r3, #0
 8019c68:	d01f      	beq.n	8019caa <_ZN21MockCheckedActualCall17checkExpectationsEv+0xd2>
        matchingExpectation_->finalizeActualCallMatch();
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	699a      	ldr	r2, [r3, #24]
 8019c6e:	687b      	ldr	r3, [r7, #4]
 8019c70:	699b      	ldr	r3, [r3, #24]
 8019c72:	681b      	ldr	r3, [r3, #0]
 8019c74:	33e4      	adds	r3, #228	; 0xe4
 8019c76:	681b      	ldr	r3, [r3, #0]
 8019c78:	4610      	mov	r0, r2
 8019c7a:	4798      	blx	r3
        callHasSucceeded();
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	681b      	ldr	r3, [r3, #0]
 8019c80:	33d0      	adds	r3, #208	; 0xd0
 8019c82:	681b      	ldr	r3, [r3, #0]
 8019c84:	6878      	ldr	r0, [r7, #4]
 8019c86:	4798      	blx	r3
        matchingExpectation_->callWasMade(callOrder_);
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	6998      	ldr	r0, [r3, #24]
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	699b      	ldr	r3, [r3, #24]
 8019c90:	681b      	ldr	r3, [r3, #0]
 8019c92:	33d8      	adds	r3, #216	; 0xd8
 8019c94:	681b      	ldr	r3, [r3, #0]
 8019c96:	687a      	ldr	r2, [r7, #4]
 8019c98:	68d2      	ldr	r2, [r2, #12]
 8019c9a:	4611      	mov	r1, r2
 8019c9c:	4798      	blx	r3
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	331c      	adds	r3, #28
 8019ca2:	4618      	mov	r0, r3
 8019ca4:	f003 fdc3 	bl	801d82e <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 8019ca8:	e05c      	b.n	8019d64 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasUnmatchingExpectationsBecauseOfMissingParameters()) {
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	331c      	adds	r3, #28
 8019cae:	4618      	mov	r0, r3
 8019cb0:	f003 ffc4 	bl	801dc3c <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>
 8019cb4:	4603      	mov	r3, r0
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	d029      	beq.n	8019d0e <_ZN21MockCheckedActualCall17checkExpectationsEv+0x136>
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	681b      	ldr	r3, [r3, #0]
 8019cbe:	33cc      	adds	r3, #204	; 0xcc
 8019cc0:	681b      	ldr	r3, [r3, #0]
 8019cc2:	6878      	ldr	r0, [r7, #4]
 8019cc4:	4798      	blx	r3
 8019cc6:	4604      	mov	r4, r0
 8019cc8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019ccc:	6879      	ldr	r1, [r7, #4]
 8019cce:	4618      	mov	r0, r3
 8019cd0:	f7ff f93b 	bl	8018f4a <_ZNK21MockCheckedActualCall7getNameEv>
 8019cd4:	687b      	ldr	r3, [r7, #4]
 8019cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019cd8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8019cdc:	f107 000c 	add.w	r0, r7, #12
 8019ce0:	4621      	mov	r1, r4
 8019ce2:	f004 fd21 	bl	801e728 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 8019ce6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019cea:	4618      	mov	r0, r3
 8019cec:	f7f4 fd03 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	681b      	ldr	r3, [r3, #0]
 8019cf4:	33dc      	adds	r3, #220	; 0xdc
 8019cf6:	681b      	ldr	r3, [r3, #0]
 8019cf8:	f107 020c 	add.w	r2, r7, #12
 8019cfc:	4611      	mov	r1, r2
 8019cfe:	6878      	ldr	r0, [r7, #4]
 8019d00:	4798      	blx	r3
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8019d02:	f107 030c 	add.w	r3, r7, #12
 8019d06:	4618      	mov	r0, r3
 8019d08:	f001 fb62 	bl	801b3d0 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 8019d0c:	e02a      	b.n	8019d64 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }
    else {
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8019d0e:	687b      	ldr	r3, [r7, #4]
 8019d10:	681b      	ldr	r3, [r3, #0]
 8019d12:	33cc      	adds	r3, #204	; 0xcc
 8019d14:	681b      	ldr	r3, [r3, #0]
 8019d16:	6878      	ldr	r0, [r7, #4]
 8019d18:	4798      	blx	r3
 8019d1a:	4604      	mov	r4, r0
 8019d1c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019d20:	6879      	ldr	r1, [r7, #4]
 8019d22:	4618      	mov	r0, r3
 8019d24:	f7ff f911 	bl	8018f4a <_ZNK21MockCheckedActualCall7getNameEv>
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d2c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8019d30:	f107 000c 	add.w	r0, r7, #12
 8019d34:	4621      	mov	r1, r4
 8019d36:	f004 fe05 	bl	801e944 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 8019d3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019d3e:	4618      	mov	r0, r3
 8019d40:	f7f4 fcd9 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8019d44:	687b      	ldr	r3, [r7, #4]
 8019d46:	681b      	ldr	r3, [r3, #0]
 8019d48:	33dc      	adds	r3, #220	; 0xdc
 8019d4a:	681b      	ldr	r3, [r3, #0]
 8019d4c:	f107 020c 	add.w	r2, r7, #12
 8019d50:	4611      	mov	r1, r2
 8019d52:	6878      	ldr	r0, [r7, #4]
 8019d54:	4798      	blx	r3
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8019d56:	f107 030c 	add.w	r3, r7, #12
 8019d5a:	4618      	mov	r0, r3
 8019d5c:	f001 fb5a 	bl	801b414 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 8019d60:	e000      	b.n	8019d64 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
        return;
 8019d62:	bf00      	nop
    }
}
 8019d64:	3750      	adds	r7, #80	; 0x50
 8019d66:	46bd      	mov	sp, r7
 8019d68:	bdb0      	pop	{r4, r5, r7, pc}
 8019d6a:	bf00      	nop
 8019d6c:	080278c0 	.word	0x080278c0
 8019d70:	08027928 	.word	0x08027928

08019d74 <_ZN21MockCheckedActualCall8setStateENS_15ActualCallStateE>:

void MockCheckedActualCall::setState(ActualCallState state)
{
 8019d74:	b480      	push	{r7}
 8019d76:	b083      	sub	sp, #12
 8019d78:	af00      	add	r7, sp, #0
 8019d7a:	6078      	str	r0, [r7, #4]
 8019d7c:	460b      	mov	r3, r1
 8019d7e:	70fb      	strb	r3, [r7, #3]
    state_ = state;
 8019d80:	687b      	ldr	r3, [r7, #4]
 8019d82:	78fa      	ldrb	r2, [r7, #3]
 8019d84:	751a      	strb	r2, [r3, #20]
}
 8019d86:	bf00      	nop
 8019d88:	370c      	adds	r7, #12
 8019d8a:	46bd      	mov	sp, r7
 8019d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d90:	4770      	bx	lr
	...

08019d94 <_ZN21MockCheckedActualCall11returnValueEv>:

MockNamedValue MockCheckedActualCall::returnValue()
{
 8019d94:	b580      	push	{r7, lr}
 8019d96:	b084      	sub	sp, #16
 8019d98:	af00      	add	r7, sp, #0
 8019d9a:	6078      	str	r0, [r7, #4]
 8019d9c:	6039      	str	r1, [r7, #0]
    checkExpectations();
 8019d9e:	683b      	ldr	r3, [r7, #0]
 8019da0:	681b      	ldr	r3, [r3, #0]
 8019da2:	33c4      	adds	r3, #196	; 0xc4
 8019da4:	681b      	ldr	r3, [r3, #0]
 8019da6:	6838      	ldr	r0, [r7, #0]
 8019da8:	4798      	blx	r3
    if (matchingExpectation_)
 8019daa:	683b      	ldr	r3, [r7, #0]
 8019dac:	699b      	ldr	r3, [r3, #24]
 8019dae:	2b00      	cmp	r3, #0
 8019db0:	d00a      	beq.n	8019dc8 <_ZN21MockCheckedActualCall11returnValueEv+0x34>
        return matchingExpectation_->returnValue();
 8019db2:	683b      	ldr	r3, [r7, #0]
 8019db4:	6999      	ldr	r1, [r3, #24]
 8019db6:	683b      	ldr	r3, [r7, #0]
 8019db8:	699b      	ldr	r3, [r3, #24]
 8019dba:	681b      	ldr	r3, [r3, #0]
 8019dbc:	3394      	adds	r3, #148	; 0x94
 8019dbe:	681b      	ldr	r3, [r3, #0]
 8019dc0:	687a      	ldr	r2, [r7, #4]
 8019dc2:	4610      	mov	r0, r2
 8019dc4:	4798      	blx	r3
 8019dc6:	e010      	b.n	8019dea <_ZN21MockCheckedActualCall11returnValueEv+0x56>
    return MockNamedValue("no return value");
 8019dc8:	f107 0308 	add.w	r3, r7, #8
 8019dcc:	4909      	ldr	r1, [pc, #36]	; (8019df4 <_ZN21MockCheckedActualCall11returnValueEv+0x60>)
 8019dce:	4618      	mov	r0, r3
 8019dd0:	f7f4 f8d9 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8019dd4:	f107 0308 	add.w	r3, r7, #8
 8019dd8:	4619      	mov	r1, r3
 8019dda:	6878      	ldr	r0, [r7, #4]
 8019ddc:	f004 fdf8 	bl	801e9d0 <_ZN14MockNamedValueC1ERK12SimpleString>
 8019de0:	f107 0308 	add.w	r3, r7, #8
 8019de4:	4618      	mov	r0, r3
 8019de6:	f7f4 fc86 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 8019dea:	6878      	ldr	r0, [r7, #4]
 8019dec:	3710      	adds	r7, #16
 8019dee:	46bd      	mov	sp, r7
 8019df0:	bd80      	pop	{r7, pc}
 8019df2:	bf00      	nop
 8019df4:	080279a4 	.word	0x080279a4

08019df8 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb>:

bool MockCheckedActualCall::returnBoolValueOrDefault(bool default_value)
{
 8019df8:	b580      	push	{r7, lr}
 8019dfa:	b082      	sub	sp, #8
 8019dfc:	af00      	add	r7, sp, #0
 8019dfe:	6078      	str	r0, [r7, #4]
 8019e00:	460b      	mov	r3, r1
 8019e02:	70fb      	strb	r3, [r7, #3]
    if (!hasReturnValue()) {
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	681b      	ldr	r3, [r3, #0]
 8019e08:	3350      	adds	r3, #80	; 0x50
 8019e0a:	681b      	ldr	r3, [r3, #0]
 8019e0c:	6878      	ldr	r0, [r7, #4]
 8019e0e:	4798      	blx	r3
 8019e10:	4603      	mov	r3, r0
 8019e12:	f083 0301 	eor.w	r3, r3, #1
 8019e16:	b2db      	uxtb	r3, r3
 8019e18:	2b00      	cmp	r3, #0
 8019e1a:	d001      	beq.n	8019e20 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x28>
        return default_value;
 8019e1c:	78fb      	ldrb	r3, [r7, #3]
 8019e1e:	e007      	b.n	8019e30 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x38>
    }
    return returnBoolValue();
 8019e20:	687b      	ldr	r3, [r7, #4]
 8019e22:	681b      	ldr	r3, [r3, #0]
 8019e24:	335c      	adds	r3, #92	; 0x5c
 8019e26:	681b      	ldr	r3, [r3, #0]
 8019e28:	6878      	ldr	r0, [r7, #4]
 8019e2a:	4798      	blx	r3
 8019e2c:	4603      	mov	r3, r0
 8019e2e:	bf00      	nop
}
 8019e30:	4618      	mov	r0, r3
 8019e32:	3708      	adds	r7, #8
 8019e34:	46bd      	mov	sp, r7
 8019e36:	bd80      	pop	{r7, pc}

08019e38 <_ZN21MockCheckedActualCall15returnBoolValueEv>:

bool MockCheckedActualCall::returnBoolValue()
{
 8019e38:	b590      	push	{r4, r7, lr}
 8019e3a:	b091      	sub	sp, #68	; 0x44
 8019e3c:	af00      	add	r7, sp, #0
 8019e3e:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 8019e40:	687b      	ldr	r3, [r7, #4]
 8019e42:	681b      	ldr	r3, [r3, #0]
 8019e44:	3354      	adds	r3, #84	; 0x54
 8019e46:	681b      	ldr	r3, [r3, #0]
 8019e48:	f107 0208 	add.w	r2, r7, #8
 8019e4c:	6879      	ldr	r1, [r7, #4]
 8019e4e:	4610      	mov	r0, r2
 8019e50:	4798      	blx	r3
 8019e52:	f107 0308 	add.w	r3, r7, #8
 8019e56:	4618      	mov	r0, r3
 8019e58:	f005 f898 	bl	801ef8c <_ZNK14MockNamedValue12getBoolValueEv>
 8019e5c:	4603      	mov	r3, r0
 8019e5e:	461c      	mov	r4, r3
 8019e60:	bf00      	nop
 8019e62:	f107 0308 	add.w	r3, r7, #8
 8019e66:	4618      	mov	r0, r3
 8019e68:	f004 fddc 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
 8019e6c:	4623      	mov	r3, r4
}
 8019e6e:	4618      	mov	r0, r3
 8019e70:	3744      	adds	r7, #68	; 0x44
 8019e72:	46bd      	mov	sp, r7
 8019e74:	bd90      	pop	{r4, r7, pc}

08019e76 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi>:

int MockCheckedActualCall::returnIntValueOrDefault(int default_value)
{
 8019e76:	b580      	push	{r7, lr}
 8019e78:	b082      	sub	sp, #8
 8019e7a:	af00      	add	r7, sp, #0
 8019e7c:	6078      	str	r0, [r7, #4]
 8019e7e:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	681b      	ldr	r3, [r3, #0]
 8019e84:	3350      	adds	r3, #80	; 0x50
 8019e86:	681b      	ldr	r3, [r3, #0]
 8019e88:	6878      	ldr	r0, [r7, #4]
 8019e8a:	4798      	blx	r3
 8019e8c:	4603      	mov	r3, r0
 8019e8e:	f083 0301 	eor.w	r3, r3, #1
 8019e92:	b2db      	uxtb	r3, r3
 8019e94:	2b00      	cmp	r3, #0
 8019e96:	d001      	beq.n	8019e9c <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x26>
        return default_value;
 8019e98:	683b      	ldr	r3, [r7, #0]
 8019e9a:	e007      	b.n	8019eac <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x36>
    }
    return returnIntValue();
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	681b      	ldr	r3, [r3, #0]
 8019ea0:	3364      	adds	r3, #100	; 0x64
 8019ea2:	681b      	ldr	r3, [r3, #0]
 8019ea4:	6878      	ldr	r0, [r7, #4]
 8019ea6:	4798      	blx	r3
 8019ea8:	4603      	mov	r3, r0
 8019eaa:	bf00      	nop
}
 8019eac:	4618      	mov	r0, r3
 8019eae:	3708      	adds	r7, #8
 8019eb0:	46bd      	mov	sp, r7
 8019eb2:	bd80      	pop	{r7, pc}

08019eb4 <_ZN21MockCheckedActualCall14returnIntValueEv>:

int MockCheckedActualCall::returnIntValue()
{
 8019eb4:	b590      	push	{r4, r7, lr}
 8019eb6:	b091      	sub	sp, #68	; 0x44
 8019eb8:	af00      	add	r7, sp, #0
 8019eba:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 8019ebc:	687b      	ldr	r3, [r7, #4]
 8019ebe:	681b      	ldr	r3, [r3, #0]
 8019ec0:	3354      	adds	r3, #84	; 0x54
 8019ec2:	681b      	ldr	r3, [r3, #0]
 8019ec4:	f107 0208 	add.w	r2, r7, #8
 8019ec8:	6879      	ldr	r1, [r7, #4]
 8019eca:	4610      	mov	r0, r2
 8019ecc:	4798      	blx	r3
 8019ece:	f107 0308 	add.w	r3, r7, #8
 8019ed2:	4618      	mov	r0, r3
 8019ed4:	f005 f8d2 	bl	801f07c <_ZNK14MockNamedValue11getIntValueEv>
 8019ed8:	4604      	mov	r4, r0
 8019eda:	bf00      	nop
 8019edc:	f107 0308 	add.w	r3, r7, #8
 8019ee0:	4618      	mov	r0, r3
 8019ee2:	f004 fd9f 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
 8019ee6:	4623      	mov	r3, r4
}
 8019ee8:	4618      	mov	r0, r3
 8019eea:	3744      	adds	r7, #68	; 0x44
 8019eec:	46bd      	mov	sp, r7
 8019eee:	bd90      	pop	{r4, r7, pc}

08019ef0 <_ZN21MockCheckedActualCall26returnUnsignedLongIntValueEv>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValue()
{
 8019ef0:	b590      	push	{r4, r7, lr}
 8019ef2:	b091      	sub	sp, #68	; 0x44
 8019ef4:	af00      	add	r7, sp, #0
 8019ef6:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	681b      	ldr	r3, [r3, #0]
 8019efc:	3354      	adds	r3, #84	; 0x54
 8019efe:	681b      	ldr	r3, [r3, #0]
 8019f00:	f107 0208 	add.w	r2, r7, #8
 8019f04:	6879      	ldr	r1, [r7, #4]
 8019f06:	4610      	mov	r0, r2
 8019f08:	4798      	blx	r3
 8019f0a:	f107 0308 	add.w	r3, r7, #8
 8019f0e:	4618      	mov	r0, r3
 8019f10:	f005 f93e 	bl	801f190 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 8019f14:	4604      	mov	r4, r0
 8019f16:	bf00      	nop
 8019f18:	f107 0308 	add.w	r3, r7, #8
 8019f1c:	4618      	mov	r0, r3
 8019f1e:	f004 fd81 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
 8019f22:	4623      	mov	r3, r4
}
 8019f24:	4618      	mov	r0, r3
 8019f26:	3744      	adds	r7, #68	; 0x44
 8019f28:	46bd      	mov	sp, r7
 8019f2a:	bd90      	pop	{r4, r7, pc}

08019f2c <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValueOrDefault(unsigned long int default_value)
{
 8019f2c:	b580      	push	{r7, lr}
 8019f2e:	b082      	sub	sp, #8
 8019f30:	af00      	add	r7, sp, #0
 8019f32:	6078      	str	r0, [r7, #4]
 8019f34:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	681b      	ldr	r3, [r3, #0]
 8019f3a:	3350      	adds	r3, #80	; 0x50
 8019f3c:	681b      	ldr	r3, [r3, #0]
 8019f3e:	6878      	ldr	r0, [r7, #4]
 8019f40:	4798      	blx	r3
 8019f42:	4603      	mov	r3, r0
 8019f44:	f083 0301 	eor.w	r3, r3, #1
 8019f48:	b2db      	uxtb	r3, r3
 8019f4a:	2b00      	cmp	r3, #0
 8019f4c:	d001      	beq.n	8019f52 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x26>
        return default_value;
 8019f4e:	683b      	ldr	r3, [r7, #0]
 8019f50:	e007      	b.n	8019f62 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x36>
    }
    return returnUnsignedLongIntValue();
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	681b      	ldr	r3, [r3, #0]
 8019f56:	3368      	adds	r3, #104	; 0x68
 8019f58:	681b      	ldr	r3, [r3, #0]
 8019f5a:	6878      	ldr	r0, [r7, #4]
 8019f5c:	4798      	blx	r3
 8019f5e:	4603      	mov	r3, r0
 8019f60:	bf00      	nop
}
 8019f62:	4618      	mov	r0, r3
 8019f64:	3708      	adds	r7, #8
 8019f66:	46bd      	mov	sp, r7
 8019f68:	bd80      	pop	{r7, pc}

08019f6a <_ZN21MockCheckedActualCall18returnLongIntValueEv>:

long int MockCheckedActualCall::returnLongIntValue()
{
 8019f6a:	b590      	push	{r4, r7, lr}
 8019f6c:	b091      	sub	sp, #68	; 0x44
 8019f6e:	af00      	add	r7, sp, #0
 8019f70:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 8019f72:	687b      	ldr	r3, [r7, #4]
 8019f74:	681b      	ldr	r3, [r3, #0]
 8019f76:	3354      	adds	r3, #84	; 0x54
 8019f78:	681b      	ldr	r3, [r3, #0]
 8019f7a:	f107 0208 	add.w	r2, r7, #8
 8019f7e:	6879      	ldr	r1, [r7, #4]
 8019f80:	4610      	mov	r0, r2
 8019f82:	4798      	blx	r3
 8019f84:	f107 0308 	add.w	r3, r7, #8
 8019f88:	4618      	mov	r0, r3
 8019f8a:	f005 f89f 	bl	801f0cc <_ZNK14MockNamedValue15getLongIntValueEv>
 8019f8e:	4604      	mov	r4, r0
 8019f90:	bf00      	nop
 8019f92:	f107 0308 	add.w	r3, r7, #8
 8019f96:	4618      	mov	r0, r3
 8019f98:	f004 fd44 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
 8019f9c:	4623      	mov	r3, r4
}
 8019f9e:	4618      	mov	r0, r3
 8019fa0:	3744      	adds	r7, #68	; 0x44
 8019fa2:	46bd      	mov	sp, r7
 8019fa4:	bd90      	pop	{r4, r7, pc}

08019fa6 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl>:

long int MockCheckedActualCall::returnLongIntValueOrDefault(long int default_value)
{
 8019fa6:	b580      	push	{r7, lr}
 8019fa8:	b082      	sub	sp, #8
 8019faa:	af00      	add	r7, sp, #0
 8019fac:	6078      	str	r0, [r7, #4]
 8019fae:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	681b      	ldr	r3, [r3, #0]
 8019fb4:	3350      	adds	r3, #80	; 0x50
 8019fb6:	681b      	ldr	r3, [r3, #0]
 8019fb8:	6878      	ldr	r0, [r7, #4]
 8019fba:	4798      	blx	r3
 8019fbc:	4603      	mov	r3, r0
 8019fbe:	f083 0301 	eor.w	r3, r3, #1
 8019fc2:	b2db      	uxtb	r3, r3
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	d001      	beq.n	8019fcc <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x26>
        return default_value;
 8019fc8:	683b      	ldr	r3, [r7, #0]
 8019fca:	e007      	b.n	8019fdc <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x36>
    }
    return returnLongIntValue();
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	681b      	ldr	r3, [r3, #0]
 8019fd0:	3370      	adds	r3, #112	; 0x70
 8019fd2:	681b      	ldr	r3, [r3, #0]
 8019fd4:	6878      	ldr	r0, [r7, #4]
 8019fd6:	4798      	blx	r3
 8019fd8:	4603      	mov	r3, r0
 8019fda:	bf00      	nop
}
 8019fdc:	4618      	mov	r0, r3
 8019fde:	3708      	adds	r7, #8
 8019fe0:	46bd      	mov	sp, r7
 8019fe2:	bd80      	pop	{r7, pc}

08019fe4 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv>:
}

#else

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValue()
{
 8019fe4:	b5b0      	push	{r4, r5, r7, lr}
 8019fe6:	b084      	sub	sp, #16
 8019fe8:	af02      	add	r7, sp, #8
 8019fea:	6078      	str	r0, [r7, #4]
 8019fec:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 8019fee:	f7fb fbad 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 8019ff2:	4604      	mov	r4, r0
 8019ff4:	6823      	ldr	r3, [r4, #0]
 8019ff6:	3368      	adds	r3, #104	; 0x68
 8019ff8:	681d      	ldr	r5, [r3, #0]
 8019ffa:	f7fb fbb7 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019ffe:	4603      	mov	r3, r0
 801a000:	9300      	str	r3, [sp, #0]
 801a002:	f240 13fb 	movw	r3, #507	; 0x1fb
 801a006:	4a06      	ldr	r2, [pc, #24]	; (801a020 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x3c>)
 801a008:	4906      	ldr	r1, [pc, #24]	; (801a024 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x40>)
 801a00a:	4620      	mov	r0, r4
 801a00c:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801a00e:	2100      	movs	r1, #0
 801a010:	6878      	ldr	r0, [r7, #4]
 801a012:	f7f1 fffb 	bl	800c00c <_ZN18cpputest_ulonglongC1Ei>
}
 801a016:	6878      	ldr	r0, [r7, #4]
 801a018:	3708      	adds	r7, #8
 801a01a:	46bd      	mov	sp, r7
 801a01c:	bdb0      	pop	{r4, r5, r7, pc}
 801a01e:	bf00      	nop
 801a020:	080278c0 	.word	0x080278c0
 801a024:	080278dc 	.word	0x080278dc

0801a028 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong default_value)
{
 801a028:	b5b0      	push	{r4, r5, r7, lr}
 801a02a:	b086      	sub	sp, #24
 801a02c:	af02      	add	r7, sp, #8
 801a02e:	60f8      	str	r0, [r7, #12]
 801a030:	60b9      	str	r1, [r7, #8]
 801a032:	4639      	mov	r1, r7
 801a034:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801a038:	f7fb fb88 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 801a03c:	4604      	mov	r4, r0
 801a03e:	6823      	ldr	r3, [r4, #0]
 801a040:	3368      	adds	r3, #104	; 0x68
 801a042:	681d      	ldr	r5, [r3, #0]
 801a044:	f7fb fb92 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a048:	4603      	mov	r3, r0
 801a04a:	9300      	str	r3, [sp, #0]
 801a04c:	f240 2301 	movw	r3, #513	; 0x201
 801a050:	4a06      	ldr	r2, [pc, #24]	; (801a06c <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 801a052:	4907      	ldr	r1, [pc, #28]	; (801a070 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 801a054:	4620      	mov	r0, r4
 801a056:	47a8      	blx	r5
    return default_value;
 801a058:	68fb      	ldr	r3, [r7, #12]
 801a05a:	461a      	mov	r2, r3
 801a05c:	463b      	mov	r3, r7
 801a05e:	cb03      	ldmia	r3!, {r0, r1}
 801a060:	6010      	str	r0, [r2, #0]
 801a062:	6051      	str	r1, [r2, #4]
}
 801a064:	68f8      	ldr	r0, [r7, #12]
 801a066:	3710      	adds	r7, #16
 801a068:	46bd      	mov	sp, r7
 801a06a:	bdb0      	pop	{r4, r5, r7, pc}
 801a06c:	080278c0 	.word	0x080278c0
 801a070:	080278dc 	.word	0x080278dc

0801a074 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValue()
{
 801a074:	b5b0      	push	{r4, r5, r7, lr}
 801a076:	b084      	sub	sp, #16
 801a078:	af02      	add	r7, sp, #8
 801a07a:	6078      	str	r0, [r7, #4]
 801a07c:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801a07e:	f7fb fb65 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 801a082:	4604      	mov	r4, r0
 801a084:	6823      	ldr	r3, [r4, #0]
 801a086:	3368      	adds	r3, #104	; 0x68
 801a088:	681d      	ldr	r5, [r3, #0]
 801a08a:	f7fb fb6f 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a08e:	4603      	mov	r3, r0
 801a090:	9300      	str	r3, [sp, #0]
 801a092:	f240 2307 	movw	r3, #519	; 0x207
 801a096:	4a06      	ldr	r2, [pc, #24]	; (801a0b0 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x3c>)
 801a098:	4906      	ldr	r1, [pc, #24]	; (801a0b4 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x40>)
 801a09a:	4620      	mov	r0, r4
 801a09c:	47a8      	blx	r5
    return cpputest_longlong(0);
 801a09e:	2100      	movs	r1, #0
 801a0a0:	6878      	ldr	r0, [r7, #4]
 801a0a2:	f7f1 ffa7 	bl	800bff4 <_ZN17cpputest_longlongC1Ei>
}
 801a0a6:	6878      	ldr	r0, [r7, #4]
 801a0a8:	3708      	adds	r7, #8
 801a0aa:	46bd      	mov	sp, r7
 801a0ac:	bdb0      	pop	{r4, r5, r7, pc}
 801a0ae:	bf00      	nop
 801a0b0:	080278c0 	.word	0x080278c0
 801a0b4:	08027908 	.word	0x08027908

0801a0b8 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValueOrDefault(cpputest_longlong default_value)
{
 801a0b8:	b5b0      	push	{r4, r5, r7, lr}
 801a0ba:	b086      	sub	sp, #24
 801a0bc:	af02      	add	r7, sp, #8
 801a0be:	60f8      	str	r0, [r7, #12]
 801a0c0:	60b9      	str	r1, [r7, #8]
 801a0c2:	4639      	mov	r1, r7
 801a0c4:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801a0c8:	f7fb fb40 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 801a0cc:	4604      	mov	r4, r0
 801a0ce:	6823      	ldr	r3, [r4, #0]
 801a0d0:	3368      	adds	r3, #104	; 0x68
 801a0d2:	681d      	ldr	r5, [r3, #0]
 801a0d4:	f7fb fb4a 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a0d8:	4603      	mov	r3, r0
 801a0da:	9300      	str	r3, [sp, #0]
 801a0dc:	f240 230d 	movw	r3, #525	; 0x20d
 801a0e0:	4a06      	ldr	r2, [pc, #24]	; (801a0fc <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 801a0e2:	4907      	ldr	r1, [pc, #28]	; (801a100 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 801a0e4:	4620      	mov	r0, r4
 801a0e6:	47a8      	blx	r5
    return default_value;
 801a0e8:	68fb      	ldr	r3, [r7, #12]
 801a0ea:	461a      	mov	r2, r3
 801a0ec:	463b      	mov	r3, r7
 801a0ee:	cb03      	ldmia	r3!, {r0, r1}
 801a0f0:	6010      	str	r0, [r2, #0]
 801a0f2:	6051      	str	r1, [r2, #4]
}
 801a0f4:	68f8      	ldr	r0, [r7, #12]
 801a0f6:	3710      	adds	r7, #16
 801a0f8:	46bd      	mov	sp, r7
 801a0fa:	bdb0      	pop	{r4, r5, r7, pc}
 801a0fc:	080278c0 	.word	0x080278c0
 801a100:	08027908 	.word	0x08027908

0801a104 <_ZN21MockCheckedActualCall17returnDoubleValueEv>:

#endif

double MockCheckedActualCall::returnDoubleValue()
{
 801a104:	b580      	push	{r7, lr}
 801a106:	ed2d 8b02 	vpush	{d8}
 801a10a:	b090      	sub	sp, #64	; 0x40
 801a10c:	af00      	add	r7, sp, #0
 801a10e:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	681b      	ldr	r3, [r3, #0]
 801a114:	3354      	adds	r3, #84	; 0x54
 801a116:	681b      	ldr	r3, [r3, #0]
 801a118:	f107 0208 	add.w	r2, r7, #8
 801a11c:	6879      	ldr	r1, [r7, #4]
 801a11e:	4610      	mov	r0, r2
 801a120:	4798      	blx	r3
 801a122:	f107 0308 	add.w	r3, r7, #8
 801a126:	4618      	mov	r0, r3
 801a128:	f005 f90a 	bl	801f340 <_ZNK14MockNamedValue14getDoubleValueEv>
 801a12c:	eeb0 8a40 	vmov.f32	s16, s0
 801a130:	eef0 8a60 	vmov.f32	s17, s1
 801a134:	bf00      	nop
 801a136:	f107 0308 	add.w	r3, r7, #8
 801a13a:	4618      	mov	r0, r3
 801a13c:	f004 fc72 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
 801a140:	eeb0 7a48 	vmov.f32	s14, s16
 801a144:	eef0 7a68 	vmov.f32	s15, s17
}
 801a148:	eeb0 0a47 	vmov.f32	s0, s14
 801a14c:	eef0 0a67 	vmov.f32	s1, s15
 801a150:	3740      	adds	r7, #64	; 0x40
 801a152:	46bd      	mov	sp, r7
 801a154:	ecbd 8b02 	vpop	{d8}
 801a158:	bd80      	pop	{r7, pc}

0801a15a <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd>:

double MockCheckedActualCall::returnDoubleValueOrDefault(double default_value)
{
 801a15a:	b580      	push	{r7, lr}
 801a15c:	b084      	sub	sp, #16
 801a15e:	af00      	add	r7, sp, #0
 801a160:	60f8      	str	r0, [r7, #12]
 801a162:	ed87 0b00 	vstr	d0, [r7]
    if (!hasReturnValue()) {
 801a166:	68fb      	ldr	r3, [r7, #12]
 801a168:	681b      	ldr	r3, [r3, #0]
 801a16a:	3350      	adds	r3, #80	; 0x50
 801a16c:	681b      	ldr	r3, [r3, #0]
 801a16e:	68f8      	ldr	r0, [r7, #12]
 801a170:	4798      	blx	r3
 801a172:	4603      	mov	r3, r0
 801a174:	f083 0301 	eor.w	r3, r3, #1
 801a178:	b2db      	uxtb	r3, r3
 801a17a:	2b00      	cmp	r3, #0
 801a17c:	d002      	beq.n	801a184 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x2a>
        return default_value;
 801a17e:	ed97 7b00 	vldr	d7, [r7]
 801a182:	e00a      	b.n	801a19a <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x40>
    }
    return returnDoubleValue();
 801a184:	68fb      	ldr	r3, [r7, #12]
 801a186:	681b      	ldr	r3, [r3, #0]
 801a188:	3398      	adds	r3, #152	; 0x98
 801a18a:	681b      	ldr	r3, [r3, #0]
 801a18c:	68f8      	ldr	r0, [r7, #12]
 801a18e:	4798      	blx	r3
 801a190:	eeb0 7a40 	vmov.f32	s14, s0
 801a194:	eef0 7a60 	vmov.f32	s15, s1
 801a198:	bf00      	nop
}
 801a19a:	eeb0 0a47 	vmov.f32	s0, s14
 801a19e:	eef0 0a67 	vmov.f32	s1, s15
 801a1a2:	3710      	adds	r7, #16
 801a1a4:	46bd      	mov	sp, r7
 801a1a6:	bd80      	pop	{r7, pc}

0801a1a8 <_ZN21MockCheckedActualCall22returnUnsignedIntValueEv>:

unsigned int MockCheckedActualCall::returnUnsignedIntValue()
{
 801a1a8:	b590      	push	{r4, r7, lr}
 801a1aa:	b091      	sub	sp, #68	; 0x44
 801a1ac:	af00      	add	r7, sp, #0
 801a1ae:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	681b      	ldr	r3, [r3, #0]
 801a1b4:	3354      	adds	r3, #84	; 0x54
 801a1b6:	681b      	ldr	r3, [r3, #0]
 801a1b8:	f107 0208 	add.w	r2, r7, #8
 801a1bc:	6879      	ldr	r1, [r7, #4]
 801a1be:	4610      	mov	r0, r2
 801a1c0:	4798      	blx	r3
 801a1c2:	f107 0308 	add.w	r3, r7, #8
 801a1c6:	4618      	mov	r0, r3
 801a1c8:	f004 ff08 	bl	801efdc <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 801a1cc:	4604      	mov	r4, r0
 801a1ce:	bf00      	nop
 801a1d0:	f107 0308 	add.w	r3, r7, #8
 801a1d4:	4618      	mov	r0, r3
 801a1d6:	f004 fc25 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
 801a1da:	4623      	mov	r3, r4
}
 801a1dc:	4618      	mov	r0, r3
 801a1de:	3744      	adds	r7, #68	; 0x44
 801a1e0:	46bd      	mov	sp, r7
 801a1e2:	bd90      	pop	{r4, r7, pc}

0801a1e4 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockCheckedActualCall::returnUnsignedIntValueOrDefault(unsigned int default_value)
{
 801a1e4:	b580      	push	{r7, lr}
 801a1e6:	b082      	sub	sp, #8
 801a1e8:	af00      	add	r7, sp, #0
 801a1ea:	6078      	str	r0, [r7, #4]
 801a1ec:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801a1ee:	687b      	ldr	r3, [r7, #4]
 801a1f0:	681b      	ldr	r3, [r3, #0]
 801a1f2:	3350      	adds	r3, #80	; 0x50
 801a1f4:	681b      	ldr	r3, [r3, #0]
 801a1f6:	6878      	ldr	r0, [r7, #4]
 801a1f8:	4798      	blx	r3
 801a1fa:	4603      	mov	r3, r0
 801a1fc:	f083 0301 	eor.w	r3, r3, #1
 801a200:	b2db      	uxtb	r3, r3
 801a202:	2b00      	cmp	r3, #0
 801a204:	d001      	beq.n	801a20a <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x26>
        return default_value;
 801a206:	683b      	ldr	r3, [r7, #0]
 801a208:	e007      	b.n	801a21a <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x36>
    }
    return returnUnsignedIntValue();
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	681b      	ldr	r3, [r3, #0]
 801a20e:	3388      	adds	r3, #136	; 0x88
 801a210:	681b      	ldr	r3, [r3, #0]
 801a212:	6878      	ldr	r0, [r7, #4]
 801a214:	4798      	blx	r3
 801a216:	4603      	mov	r3, r0
 801a218:	bf00      	nop
}
 801a21a:	4618      	mov	r0, r3
 801a21c:	3708      	adds	r7, #8
 801a21e:	46bd      	mov	sp, r7
 801a220:	bd80      	pop	{r7, pc}

0801a222 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv>:

void * MockCheckedActualCall::returnPointerValueOrDefault(void * default_value)
{
 801a222:	b580      	push	{r7, lr}
 801a224:	b082      	sub	sp, #8
 801a226:	af00      	add	r7, sp, #0
 801a228:	6078      	str	r0, [r7, #4]
 801a22a:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801a22c:	687b      	ldr	r3, [r7, #4]
 801a22e:	681b      	ldr	r3, [r3, #0]
 801a230:	3350      	adds	r3, #80	; 0x50
 801a232:	681b      	ldr	r3, [r3, #0]
 801a234:	6878      	ldr	r0, [r7, #4]
 801a236:	4798      	blx	r3
 801a238:	4603      	mov	r3, r0
 801a23a:	f083 0301 	eor.w	r3, r3, #1
 801a23e:	b2db      	uxtb	r3, r3
 801a240:	2b00      	cmp	r3, #0
 801a242:	d001      	beq.n	801a248 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x26>
        return default_value;
 801a244:	683b      	ldr	r3, [r7, #0]
 801a246:	e007      	b.n	801a258 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x36>
    }
    return returnPointerValue();
 801a248:	687b      	ldr	r3, [r7, #4]
 801a24a:	681b      	ldr	r3, [r3, #0]
 801a24c:	33a0      	adds	r3, #160	; 0xa0
 801a24e:	681b      	ldr	r3, [r3, #0]
 801a250:	6878      	ldr	r0, [r7, #4]
 801a252:	4798      	blx	r3
 801a254:	4603      	mov	r3, r0
 801a256:	bf00      	nop
}
 801a258:	4618      	mov	r0, r3
 801a25a:	3708      	adds	r7, #8
 801a25c:	46bd      	mov	sp, r7
 801a25e:	bd80      	pop	{r7, pc}

0801a260 <_ZN21MockCheckedActualCall18returnPointerValueEv>:

void * MockCheckedActualCall::returnPointerValue()
{
 801a260:	b590      	push	{r4, r7, lr}
 801a262:	b091      	sub	sp, #68	; 0x44
 801a264:	af00      	add	r7, sp, #0
 801a266:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 801a268:	687b      	ldr	r3, [r7, #4]
 801a26a:	681b      	ldr	r3, [r3, #0]
 801a26c:	3354      	adds	r3, #84	; 0x54
 801a26e:	681b      	ldr	r3, [r3, #0]
 801a270:	f107 0208 	add.w	r2, r7, #8
 801a274:	6879      	ldr	r1, [r7, #4]
 801a276:	4610      	mov	r0, r2
 801a278:	4798      	blx	r3
 801a27a:	f107 0308 	add.w	r3, r7, #8
 801a27e:	4618      	mov	r0, r3
 801a280:	f005 f8e2 	bl	801f448 <_ZNK14MockNamedValue15getPointerValueEv>
 801a284:	4604      	mov	r4, r0
 801a286:	bf00      	nop
 801a288:	f107 0308 	add.w	r3, r7, #8
 801a28c:	4618      	mov	r0, r3
 801a28e:	f004 fbc9 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
 801a292:	4623      	mov	r3, r4
}
 801a294:	4618      	mov	r0, r3
 801a296:	3744      	adds	r7, #68	; 0x44
 801a298:	46bd      	mov	sp, r7
 801a29a:	bd90      	pop	{r4, r7, pc}

0801a29c <_ZN21MockCheckedActualCall23returnConstPointerValueEv>:

const void * MockCheckedActualCall::returnConstPointerValue()
{
 801a29c:	b590      	push	{r4, r7, lr}
 801a29e:	b091      	sub	sp, #68	; 0x44
 801a2a0:	af00      	add	r7, sp, #0
 801a2a2:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	681b      	ldr	r3, [r3, #0]
 801a2a8:	3354      	adds	r3, #84	; 0x54
 801a2aa:	681b      	ldr	r3, [r3, #0]
 801a2ac:	f107 0208 	add.w	r2, r7, #8
 801a2b0:	6879      	ldr	r1, [r7, #4]
 801a2b2:	4610      	mov	r0, r2
 801a2b4:	4798      	blx	r3
 801a2b6:	f107 0308 	add.w	r3, r7, #8
 801a2ba:	4618      	mov	r0, r3
 801a2bc:	f005 f8ec 	bl	801f498 <_ZNK14MockNamedValue20getConstPointerValueEv>
 801a2c0:	4604      	mov	r4, r0
 801a2c2:	bf00      	nop
 801a2c4:	f107 0308 	add.w	r3, r7, #8
 801a2c8:	4618      	mov	r0, r3
 801a2ca:	f004 fbab 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
 801a2ce:	4623      	mov	r3, r4
}
 801a2d0:	4618      	mov	r0, r3
 801a2d2:	3744      	adds	r7, #68	; 0x44
 801a2d4:	46bd      	mov	sp, r7
 801a2d6:	bd90      	pop	{r4, r7, pc}

0801a2d8 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv>:

const void * MockCheckedActualCall::returnConstPointerValueOrDefault(const void * default_value)
{
 801a2d8:	b580      	push	{r7, lr}
 801a2da:	b082      	sub	sp, #8
 801a2dc:	af00      	add	r7, sp, #0
 801a2de:	6078      	str	r0, [r7, #4]
 801a2e0:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	681b      	ldr	r3, [r3, #0]
 801a2e6:	3350      	adds	r3, #80	; 0x50
 801a2e8:	681b      	ldr	r3, [r3, #0]
 801a2ea:	6878      	ldr	r0, [r7, #4]
 801a2ec:	4798      	blx	r3
 801a2ee:	4603      	mov	r3, r0
 801a2f0:	f083 0301 	eor.w	r3, r3, #1
 801a2f4:	b2db      	uxtb	r3, r3
 801a2f6:	2b00      	cmp	r3, #0
 801a2f8:	d001      	beq.n	801a2fe <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x26>
        return default_value;
 801a2fa:	683b      	ldr	r3, [r7, #0]
 801a2fc:	e007      	b.n	801a30e <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x36>
    }
    return returnConstPointerValue();
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	681b      	ldr	r3, [r3, #0]
 801a302:	33a8      	adds	r3, #168	; 0xa8
 801a304:	681b      	ldr	r3, [r3, #0]
 801a306:	6878      	ldr	r0, [r7, #4]
 801a308:	4798      	blx	r3
 801a30a:	4603      	mov	r3, r0
 801a30c:	bf00      	nop
}
 801a30e:	4618      	mov	r0, r3
 801a310:	3708      	adds	r7, #8
 801a312:	46bd      	mov	sp, r7
 801a314:	bd80      	pop	{r7, pc}

0801a316 <_ZN21MockCheckedActualCall26returnFunctionPointerValueEv>:

void (*MockCheckedActualCall::returnFunctionPointerValue())()
{
 801a316:	b590      	push	{r4, r7, lr}
 801a318:	b091      	sub	sp, #68	; 0x44
 801a31a:	af00      	add	r7, sp, #0
 801a31c:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	681b      	ldr	r3, [r3, #0]
 801a322:	3354      	adds	r3, #84	; 0x54
 801a324:	681b      	ldr	r3, [r3, #0]
 801a326:	f107 0208 	add.w	r2, r7, #8
 801a32a:	6879      	ldr	r1, [r7, #4]
 801a32c:	4610      	mov	r0, r2
 801a32e:	4798      	blx	r3
 801a330:	f107 0308 	add.w	r3, r7, #8
 801a334:	4618      	mov	r0, r3
 801a336:	f005 f8d7 	bl	801f4e8 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 801a33a:	4604      	mov	r4, r0
 801a33c:	bf00      	nop
 801a33e:	f107 0308 	add.w	r3, r7, #8
 801a342:	4618      	mov	r0, r3
 801a344:	f004 fb6e 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
 801a348:	4623      	mov	r3, r4
}
 801a34a:	4618      	mov	r0, r3
 801a34c:	3744      	adds	r7, #68	; 0x44
 801a34e:	46bd      	mov	sp, r7
 801a350:	bd90      	pop	{r4, r7, pc}

0801a352 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockCheckedActualCall::returnFunctionPointerValueOrDefault(void (*default_value)()))()
{
 801a352:	b580      	push	{r7, lr}
 801a354:	b082      	sub	sp, #8
 801a356:	af00      	add	r7, sp, #0
 801a358:	6078      	str	r0, [r7, #4]
 801a35a:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801a35c:	687b      	ldr	r3, [r7, #4]
 801a35e:	681b      	ldr	r3, [r3, #0]
 801a360:	3350      	adds	r3, #80	; 0x50
 801a362:	681b      	ldr	r3, [r3, #0]
 801a364:	6878      	ldr	r0, [r7, #4]
 801a366:	4798      	blx	r3
 801a368:	4603      	mov	r3, r0
 801a36a:	f083 0301 	eor.w	r3, r3, #1
 801a36e:	b2db      	uxtb	r3, r3
 801a370:	2b00      	cmp	r3, #0
 801a372:	d001      	beq.n	801a378 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x26>
        return default_value;
 801a374:	683b      	ldr	r3, [r7, #0]
 801a376:	e007      	b.n	801a388 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x36>
    }
    return returnFunctionPointerValue();
 801a378:	687b      	ldr	r3, [r7, #4]
 801a37a:	681b      	ldr	r3, [r3, #0]
 801a37c:	33b0      	adds	r3, #176	; 0xb0
 801a37e:	681b      	ldr	r3, [r3, #0]
 801a380:	6878      	ldr	r0, [r7, #4]
 801a382:	4798      	blx	r3
 801a384:	4603      	mov	r3, r0
 801a386:	bf00      	nop
}
 801a388:	4618      	mov	r0, r3
 801a38a:	3708      	adds	r7, #8
 801a38c:	46bd      	mov	sp, r7
 801a38e:	bd80      	pop	{r7, pc}

0801a390 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc>:

const char * MockCheckedActualCall::returnStringValueOrDefault(const char * default_value)
{
 801a390:	b580      	push	{r7, lr}
 801a392:	b082      	sub	sp, #8
 801a394:	af00      	add	r7, sp, #0
 801a396:	6078      	str	r0, [r7, #4]
 801a398:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801a39a:	687b      	ldr	r3, [r7, #4]
 801a39c:	681b      	ldr	r3, [r3, #0]
 801a39e:	3350      	adds	r3, #80	; 0x50
 801a3a0:	681b      	ldr	r3, [r3, #0]
 801a3a2:	6878      	ldr	r0, [r7, #4]
 801a3a4:	4798      	blx	r3
 801a3a6:	4603      	mov	r3, r0
 801a3a8:	f083 0301 	eor.w	r3, r3, #1
 801a3ac:	b2db      	uxtb	r3, r3
 801a3ae:	2b00      	cmp	r3, #0
 801a3b0:	d001      	beq.n	801a3b6 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x26>
        return default_value;
 801a3b2:	683b      	ldr	r3, [r7, #0]
 801a3b4:	e007      	b.n	801a3c6 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x36>
    }
    return returnStringValue();
 801a3b6:	687b      	ldr	r3, [r7, #4]
 801a3b8:	681b      	ldr	r3, [r3, #0]
 801a3ba:	3394      	adds	r3, #148	; 0x94
 801a3bc:	681b      	ldr	r3, [r3, #0]
 801a3be:	6878      	ldr	r0, [r7, #4]
 801a3c0:	4798      	blx	r3
 801a3c2:	4603      	mov	r3, r0
 801a3c4:	bf00      	nop
}
 801a3c6:	4618      	mov	r0, r3
 801a3c8:	3708      	adds	r7, #8
 801a3ca:	46bd      	mov	sp, r7
 801a3cc:	bd80      	pop	{r7, pc}

0801a3ce <_ZN21MockCheckedActualCall17returnStringValueEv>:

const char * MockCheckedActualCall::returnStringValue()
{
 801a3ce:	b590      	push	{r4, r7, lr}
 801a3d0:	b091      	sub	sp, #68	; 0x44
 801a3d2:	af00      	add	r7, sp, #0
 801a3d4:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 801a3d6:	687b      	ldr	r3, [r7, #4]
 801a3d8:	681b      	ldr	r3, [r3, #0]
 801a3da:	3354      	adds	r3, #84	; 0x54
 801a3dc:	681b      	ldr	r3, [r3, #0]
 801a3de:	f107 0208 	add.w	r2, r7, #8
 801a3e2:	6879      	ldr	r1, [r7, #4]
 801a3e4:	4610      	mov	r0, r2
 801a3e6:	4798      	blx	r3
 801a3e8:	f107 0308 	add.w	r3, r7, #8
 801a3ec:	4618      	mov	r0, r3
 801a3ee:	f005 f803 	bl	801f3f8 <_ZNK14MockNamedValue14getStringValueEv>
 801a3f2:	4604      	mov	r4, r0
 801a3f4:	bf00      	nop
 801a3f6:	f107 0308 	add.w	r3, r7, #8
 801a3fa:	4618      	mov	r0, r3
 801a3fc:	f004 fb12 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
 801a400:	4623      	mov	r3, r4
}
 801a402:	4618      	mov	r0, r3
 801a404:	3744      	adds	r7, #68	; 0x44
 801a406:	46bd      	mov	sp, r7
 801a408:	bd90      	pop	{r4, r7, pc}

0801a40a <_ZN21MockCheckedActualCall14hasReturnValueEv>:

bool MockCheckedActualCall::hasReturnValue()
{
 801a40a:	b590      	push	{r4, r7, lr}
 801a40c:	b093      	sub	sp, #76	; 0x4c
 801a40e:	af00      	add	r7, sp, #0
 801a410:	6078      	str	r0, [r7, #4]
    return ! returnValue().getName().isEmpty();
 801a412:	687b      	ldr	r3, [r7, #4]
 801a414:	681b      	ldr	r3, [r3, #0]
 801a416:	3354      	adds	r3, #84	; 0x54
 801a418:	681b      	ldr	r3, [r3, #0]
 801a41a:	f107 0210 	add.w	r2, r7, #16
 801a41e:	6879      	ldr	r1, [r7, #4]
 801a420:	4610      	mov	r0, r2
 801a422:	4798      	blx	r3
 801a424:	f107 0308 	add.w	r3, r7, #8
 801a428:	f107 0210 	add.w	r2, r7, #16
 801a42c:	4611      	mov	r1, r2
 801a42e:	4618      	mov	r0, r3
 801a430:	f004 fd8e 	bl	801ef50 <_ZNK14MockNamedValue7getNameEv>
 801a434:	f107 0308 	add.w	r3, r7, #8
 801a438:	4618      	mov	r0, r3
 801a43a:	f7f4 f94b 	bl	800e6d4 <_ZNK12SimpleString7isEmptyEv>
 801a43e:	4603      	mov	r3, r0
 801a440:	f083 0301 	eor.w	r3, r3, #1
 801a444:	b2dc      	uxtb	r4, r3
 801a446:	f107 0308 	add.w	r3, r7, #8
 801a44a:	4618      	mov	r0, r3
 801a44c:	f7f4 f953 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801a450:	f107 0310 	add.w	r3, r7, #16
 801a454:	4618      	mov	r0, r3
 801a456:	f004 fae5 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
 801a45a:	4623      	mov	r3, r4
}
 801a45c:	4618      	mov	r0, r3
 801a45e:	374c      	adds	r7, #76	; 0x4c
 801a460:	46bd      	mov	sp, r7
 801a462:	bd90      	pop	{r4, r7, pc}

0801a464 <_ZN21MockCheckedActualCall8onObjectEPKv>:

MockActualCall& MockCheckedActualCall::onObject(const void* objectPtr)
{
 801a464:	b590      	push	{r4, r7, lr}
 801a466:	b095      	sub	sp, #84	; 0x54
 801a468:	af02      	add	r7, sp, #8
 801a46a:	6078      	str	r0, [r7, #4]
 801a46c:	6039      	str	r1, [r7, #0]
    if(hasFailed()) {
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	681b      	ldr	r3, [r3, #0]
 801a472:	33c0      	adds	r3, #192	; 0xc0
 801a474:	681b      	ldr	r3, [r3, #0]
 801a476:	6878      	ldr	r0, [r7, #4]
 801a478:	4798      	blx	r3
 801a47a:	4603      	mov	r3, r0
 801a47c:	2b00      	cmp	r3, #0
 801a47e:	d001      	beq.n	801a484 <_ZN21MockCheckedActualCall8onObjectEPKv+0x20>
        return *this;
 801a480:	687c      	ldr	r4, [r7, #4]
 801a482:	e053      	b.n	801a52c <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    // Currently matching expectations are not discarded because the passed object
    // is ignored if not specifically set in the expectation

    potentiallyMatchingExpectations_.onlyKeepExpectationsOnObject(objectPtr);
 801a484:	687b      	ldr	r3, [r7, #4]
 801a486:	331c      	adds	r3, #28
 801a488:	6839      	ldr	r1, [r7, #0]
 801a48a:	4618      	mov	r0, r3
 801a48c:	f003 f8ca 	bl	801d624 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>

    if ((!matchingExpectation_) && potentiallyMatchingExpectations_.isEmpty()) {
 801a490:	687b      	ldr	r3, [r7, #4]
 801a492:	699b      	ldr	r3, [r3, #24]
 801a494:	2b00      	cmp	r3, #0
 801a496:	d109      	bne.n	801a4ac <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	331c      	adds	r3, #28
 801a49c:	4618      	mov	r0, r3
 801a49e:	f002 fe20 	bl	801d0e2 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801a4a2:	4603      	mov	r3, r0
 801a4a4:	2b00      	cmp	r3, #0
 801a4a6:	d001      	beq.n	801a4ac <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 801a4a8:	2301      	movs	r3, #1
 801a4aa:	e000      	b.n	801a4ae <_ZN21MockCheckedActualCall8onObjectEPKv+0x4a>
 801a4ac:	2300      	movs	r3, #0
 801a4ae:	2b00      	cmp	r3, #0
 801a4b0:	d02c      	beq.n	801a50c <_ZN21MockCheckedActualCall8onObjectEPKv+0xa8>
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 801a4b2:	687b      	ldr	r3, [r7, #4]
 801a4b4:	681b      	ldr	r3, [r3, #0]
 801a4b6:	33cc      	adds	r3, #204	; 0xcc
 801a4b8:	681b      	ldr	r3, [r3, #0]
 801a4ba:	6878      	ldr	r0, [r7, #4]
 801a4bc:	4798      	blx	r3
 801a4be:	4604      	mov	r4, r0
 801a4c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a4c4:	6879      	ldr	r1, [r7, #4]
 801a4c6:	4618      	mov	r0, r3
 801a4c8:	f7fe fd3f 	bl	8018f4a <_ZNK21MockCheckedActualCall7getNameEv>
 801a4cc:	687b      	ldr	r3, [r7, #4]
 801a4ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4d0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801a4d4:	f107 000c 	add.w	r0, r7, #12
 801a4d8:	9300      	str	r3, [sp, #0]
 801a4da:	683b      	ldr	r3, [r7, #0]
 801a4dc:	4621      	mov	r1, r4
 801a4de:	f004 f9fb 	bl	801e8d8 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>
 801a4e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a4e6:	4618      	mov	r0, r3
 801a4e8:	f7f4 f905 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 801a4ec:	687b      	ldr	r3, [r7, #4]
 801a4ee:	681b      	ldr	r3, [r3, #0]
 801a4f0:	33dc      	adds	r3, #220	; 0xdc
 801a4f2:	681b      	ldr	r3, [r3, #0]
 801a4f4:	f107 020c 	add.w	r2, r7, #12
 801a4f8:	4611      	mov	r1, r2
 801a4fa:	6878      	ldr	r0, [r7, #4]
 801a4fc:	4798      	blx	r3
        return *this;
 801a4fe:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 801a500:	f107 030c 	add.w	r3, r7, #12
 801a504:	4618      	mov	r0, r3
 801a506:	f000 ffa7 	bl	801b458 <_ZN27MockUnexpectedObjectFailureD1Ev>
 801a50a:	e00f      	b.n	801a52c <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    potentiallyMatchingExpectations_.wasPassedToObject();
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	331c      	adds	r3, #28
 801a510:	4618      	mov	r0, r3
 801a512:	f003 f9a7 	bl	801d864 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>

    if (!matchingExpectation_) {
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	699b      	ldr	r3, [r3, #24]
 801a51a:	2b00      	cmp	r3, #0
 801a51c:	d105      	bne.n	801a52a <_ZN21MockCheckedActualCall8onObjectEPKv+0xc6>
        completeCallWhenMatchIsFound();
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	681b      	ldr	r3, [r3, #0]
 801a522:	33d8      	adds	r3, #216	; 0xd8
 801a524:	681b      	ldr	r3, [r3, #0]
 801a526:	6878      	ldr	r0, [r7, #4]
 801a528:	4798      	blx	r3
    }

    return *this;
 801a52a:	687c      	ldr	r4, [r7, #4]
 801a52c:	4623      	mov	r3, r4
}
 801a52e:	4618      	mov	r0, r3
 801a530:	374c      	adds	r7, #76	; 0x4c
 801a532:	46bd      	mov	sp, r7
 801a534:	bd90      	pop	{r4, r7, pc}
	...

0801a538 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv>:

void MockCheckedActualCall::addOutputParameter(const SimpleString& name, const SimpleString& type, void* ptr)
{
 801a538:	b590      	push	{r4, r7, lr}
 801a53a:	b087      	sub	sp, #28
 801a53c:	af00      	add	r7, sp, #0
 801a53e:	60f8      	str	r0, [r7, #12]
 801a540:	60b9      	str	r1, [r7, #8]
 801a542:	607a      	str	r2, [r7, #4]
 801a544:	603b      	str	r3, [r7, #0]
    MockOutputParametersListNode* newNode = new MockOutputParametersListNode(name, type, ptr);
 801a546:	f240 2282 	movw	r2, #642	; 0x282
 801a54a:	4913      	ldr	r1, [pc, #76]	; (801a598 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x60>)
 801a54c:	2018      	movs	r0, #24
 801a54e:	f7f1 f957 	bl	800b800 <_ZnwjPKci>
 801a552:	4604      	mov	r4, r0
 801a554:	683b      	ldr	r3, [r7, #0]
 801a556:	687a      	ldr	r2, [r7, #4]
 801a558:	68b9      	ldr	r1, [r7, #8]
 801a55a:	4620      	mov	r0, r4
 801a55c:	f7fe fa48 	bl	80189f0 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>
 801a560:	613c      	str	r4, [r7, #16]

    if (outputParameterExpectations_ == NULLPTR)
 801a562:	68fb      	ldr	r3, [r7, #12]
 801a564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a566:	2b00      	cmp	r3, #0
 801a568:	d103      	bne.n	801a572 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x3a>
        outputParameterExpectations_ = newNode;
 801a56a:	68fb      	ldr	r3, [r7, #12]
 801a56c:	693a      	ldr	r2, [r7, #16]
 801a56e:	629a      	str	r2, [r3, #40]	; 0x28
    else {
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
        while (lastNode->next_) lastNode = lastNode->next_;
        lastNode->next_ = newNode;
    }
}
 801a570:	e00d      	b.n	801a58e <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x56>
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
 801a572:	68fb      	ldr	r3, [r7, #12]
 801a574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a576:	617b      	str	r3, [r7, #20]
        while (lastNode->next_) lastNode = lastNode->next_;
 801a578:	697b      	ldr	r3, [r7, #20]
 801a57a:	695b      	ldr	r3, [r3, #20]
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	d003      	beq.n	801a588 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x50>
 801a580:	697b      	ldr	r3, [r7, #20]
 801a582:	695b      	ldr	r3, [r3, #20]
 801a584:	617b      	str	r3, [r7, #20]
 801a586:	e7f7      	b.n	801a578 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x40>
        lastNode->next_ = newNode;
 801a588:	697b      	ldr	r3, [r7, #20]
 801a58a:	693a      	ldr	r2, [r7, #16]
 801a58c:	615a      	str	r2, [r3, #20]
}
 801a58e:	bf00      	nop
 801a590:	371c      	adds	r7, #28
 801a592:	46bd      	mov	sp, r7
 801a594:	bd90      	pop	{r4, r7, pc}
 801a596:	bf00      	nop
 801a598:	080278c0 	.word	0x080278c0

0801a59c <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>:
    class MockOutputParametersListNode
 801a59c:	b580      	push	{r7, lr}
 801a59e:	b082      	sub	sp, #8
 801a5a0:	af00      	add	r7, sp, #0
 801a5a2:	6078      	str	r0, [r7, #4]
 801a5a4:	687b      	ldr	r3, [r7, #4]
 801a5a6:	3308      	adds	r3, #8
 801a5a8:	4618      	mov	r0, r3
 801a5aa:	f7f4 f8a4 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	4618      	mov	r0, r3
 801a5b2:	f7f4 f8a0 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	4618      	mov	r0, r3
 801a5ba:	3708      	adds	r7, #8
 801a5bc:	46bd      	mov	sp, r7
 801a5be:	bd80      	pop	{r7, pc}

0801a5c0 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>:

void MockCheckedActualCall::cleanUpOutputParameterList()
{
 801a5c0:	b590      	push	{r4, r7, lr}
 801a5c2:	b085      	sub	sp, #20
 801a5c4:	af00      	add	r7, sp, #0
 801a5c6:	6078      	str	r0, [r7, #4]
    MockOutputParametersListNode* current = outputParameterExpectations_;
 801a5c8:	687b      	ldr	r3, [r7, #4]
 801a5ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a5cc:	60fb      	str	r3, [r7, #12]
    MockOutputParametersListNode* toBeDeleted = NULLPTR;
 801a5ce:	2300      	movs	r3, #0
 801a5d0:	60bb      	str	r3, [r7, #8]

    while (current) {
 801a5d2:	68fb      	ldr	r3, [r7, #12]
 801a5d4:	2b00      	cmp	r3, #0
 801a5d6:	d012      	beq.n	801a5fe <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x3e>
        toBeDeleted = current;
 801a5d8:	68fb      	ldr	r3, [r7, #12]
 801a5da:	60bb      	str	r3, [r7, #8]
        outputParameterExpectations_ = current = current->next_;
 801a5dc:	68fb      	ldr	r3, [r7, #12]
 801a5de:	695b      	ldr	r3, [r3, #20]
 801a5e0:	60fb      	str	r3, [r7, #12]
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	68fa      	ldr	r2, [r7, #12]
 801a5e6:	629a      	str	r2, [r3, #40]	; 0x28
        delete toBeDeleted;
 801a5e8:	68bc      	ldr	r4, [r7, #8]
 801a5ea:	2c00      	cmp	r4, #0
 801a5ec:	d0f1      	beq.n	801a5d2 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
 801a5ee:	4620      	mov	r0, r4
 801a5f0:	f7ff ffd4 	bl	801a59c <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>
 801a5f4:	2118      	movs	r1, #24
 801a5f6:	4620      	mov	r0, r4
 801a5f8:	f7f1 f916 	bl	800b828 <_ZdlPvj>
    while (current) {
 801a5fc:	e7e9      	b.n	801a5d2 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
    }
}
 801a5fe:	bf00      	nop
 801a600:	3714      	adds	r7, #20
 801a602:	46bd      	mov	sp, r7
 801a604:	bd90      	pop	{r4, r7, pc}
	...

0801a608 <_ZN19MockActualCallTraceC1Ev>:


MockActualCallTrace::MockActualCallTrace()
 801a608:	b580      	push	{r7, lr}
 801a60a:	b082      	sub	sp, #8
 801a60c:	af00      	add	r7, sp, #0
 801a60e:	6078      	str	r0, [r7, #4]
 801a610:	687b      	ldr	r3, [r7, #4]
 801a612:	4618      	mov	r0, r3
 801a614:	f7fe fc6a 	bl	8018eec <_ZN14MockActualCallC1Ev>
 801a618:	4a06      	ldr	r2, [pc, #24]	; (801a634 <_ZN19MockActualCallTraceC1Ev+0x2c>)
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	601a      	str	r2, [r3, #0]
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	3304      	adds	r3, #4
 801a622:	4905      	ldr	r1, [pc, #20]	; (801a638 <_ZN19MockActualCallTraceC1Ev+0x30>)
 801a624:	4618      	mov	r0, r3
 801a626:	f7f3 fcae 	bl	800df86 <_ZN12SimpleStringC1EPKc>
{
}
 801a62a:	687b      	ldr	r3, [r7, #4]
 801a62c:	4618      	mov	r0, r3
 801a62e:	3708      	adds	r7, #8
 801a630:	46bd      	mov	sp, r7
 801a632:	bd80      	pop	{r7, pc}
 801a634:	0802a970 	.word	0x0802a970
 801a638:	080278a8 	.word	0x080278a8

0801a63c <_ZN19MockActualCallTraceD1Ev>:

MockActualCallTrace::~MockActualCallTrace()
 801a63c:	b580      	push	{r7, lr}
 801a63e:	b082      	sub	sp, #8
 801a640:	af00      	add	r7, sp, #0
 801a642:	6078      	str	r0, [r7, #4]
 801a644:	4a08      	ldr	r2, [pc, #32]	; (801a668 <_ZN19MockActualCallTraceD1Ev+0x2c>)
 801a646:	687b      	ldr	r3, [r7, #4]
 801a648:	601a      	str	r2, [r3, #0]
 801a64a:	687b      	ldr	r3, [r7, #4]
 801a64c:	3304      	adds	r3, #4
 801a64e:	4618      	mov	r0, r3
 801a650:	f7f4 f851 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801a654:	687b      	ldr	r3, [r7, #4]
 801a656:	4618      	mov	r0, r3
 801a658:	f7fe fc58 	bl	8018f0c <_ZN14MockActualCallD1Ev>
{
}
 801a65c:	687b      	ldr	r3, [r7, #4]
 801a65e:	4618      	mov	r0, r3
 801a660:	3708      	adds	r7, #8
 801a662:	46bd      	mov	sp, r7
 801a664:	bd80      	pop	{r7, pc}
 801a666:	bf00      	nop
 801a668:	0802a970 	.word	0x0802a970

0801a66c <_ZN19MockActualCallTraceD0Ev>:
MockActualCallTrace::~MockActualCallTrace()
 801a66c:	b580      	push	{r7, lr}
 801a66e:	b082      	sub	sp, #8
 801a670:	af00      	add	r7, sp, #0
 801a672:	6078      	str	r0, [r7, #4]
}
 801a674:	6878      	ldr	r0, [r7, #4]
 801a676:	f7ff ffe1 	bl	801a63c <_ZN19MockActualCallTraceD1Ev>
 801a67a:	210c      	movs	r1, #12
 801a67c:	6878      	ldr	r0, [r7, #4]
 801a67e:	f7f1 f8d3 	bl	800b828 <_ZdlPvj>
 801a682:	687b      	ldr	r3, [r7, #4]
 801a684:	4618      	mov	r0, r3
 801a686:	3708      	adds	r7, #8
 801a688:	46bd      	mov	sp, r7
 801a68a:	bd80      	pop	{r7, pc}

0801a68c <_ZN19MockActualCallTrace8withNameERK12SimpleString>:

MockActualCall& MockActualCallTrace::withName(const SimpleString& name)
{
 801a68c:	b580      	push	{r7, lr}
 801a68e:	b082      	sub	sp, #8
 801a690:	af00      	add	r7, sp, #0
 801a692:	6078      	str	r0, [r7, #4]
 801a694:	6039      	str	r1, [r7, #0]
    traceBuffer_ += "\nFunction name:";
 801a696:	687b      	ldr	r3, [r7, #4]
 801a698:	3304      	adds	r3, #4
 801a69a:	4907      	ldr	r1, [pc, #28]	; (801a6b8 <_ZN19MockActualCallTrace8withNameERK12SimpleString+0x2c>)
 801a69c:	4618      	mov	r0, r3
 801a69e:	f7f4 f8b9 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 801a6a2:	687b      	ldr	r3, [r7, #4]
 801a6a4:	3304      	adds	r3, #4
 801a6a6:	6839      	ldr	r1, [r7, #0]
 801a6a8:	4618      	mov	r0, r3
 801a6aa:	f7f4 f8a1 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
    return *this;
 801a6ae:	687b      	ldr	r3, [r7, #4]
}
 801a6b0:	4618      	mov	r0, r3
 801a6b2:	3708      	adds	r7, #8
 801a6b4:	46bd      	mov	sp, r7
 801a6b6:	bd80      	pop	{r7, pc}
 801a6b8:	080279b4 	.word	0x080279b4

0801a6bc <_ZN19MockActualCallTrace13withCallOrderEj>:

MockActualCall& MockActualCallTrace::withCallOrder(unsigned int callOrder)
{
 801a6bc:	b590      	push	{r4, r7, lr}
 801a6be:	b085      	sub	sp, #20
 801a6c0:	af00      	add	r7, sp, #0
 801a6c2:	6078      	str	r0, [r7, #4]
 801a6c4:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " withCallOrder:";
 801a6c6:	687b      	ldr	r3, [r7, #4]
 801a6c8:	3304      	adds	r3, #4
 801a6ca:	490e      	ldr	r1, [pc, #56]	; (801a704 <_ZN19MockActualCallTrace13withCallOrderEj+0x48>)
 801a6cc:	4618      	mov	r0, r3
 801a6ce:	f7f4 f8a1 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(callOrder);
 801a6d2:	687b      	ldr	r3, [r7, #4]
 801a6d4:	1d1c      	adds	r4, r3, #4
 801a6d6:	f107 0308 	add.w	r3, r7, #8
 801a6da:	6839      	ldr	r1, [r7, #0]
 801a6dc:	4618      	mov	r0, r3
 801a6de:	f7f4 fd39 	bl	800f154 <_Z10StringFromj>
 801a6e2:	f107 0308 	add.w	r3, r7, #8
 801a6e6:	4619      	mov	r1, r3
 801a6e8:	4620      	mov	r0, r4
 801a6ea:	f7f4 f881 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801a6ee:	f107 0308 	add.w	r3, r7, #8
 801a6f2:	4618      	mov	r0, r3
 801a6f4:	f7f3 ffff 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    return *this;
 801a6f8:	687b      	ldr	r3, [r7, #4]
}
 801a6fa:	4618      	mov	r0, r3
 801a6fc:	3714      	adds	r7, #20
 801a6fe:	46bd      	mov	sp, r7
 801a700:	bd90      	pop	{r4, r7, pc}
 801a702:	bf00      	nop
 801a704:	080279c4 	.word	0x080279c4

0801a708 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>:

void MockActualCallTrace::addParameterName(const SimpleString& name)
{
 801a708:	b580      	push	{r7, lr}
 801a70a:	b082      	sub	sp, #8
 801a70c:	af00      	add	r7, sp, #0
 801a70e:	6078      	str	r0, [r7, #4]
 801a710:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " ";
 801a712:	687b      	ldr	r3, [r7, #4]
 801a714:	3304      	adds	r3, #4
 801a716:	490a      	ldr	r1, [pc, #40]	; (801a740 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x38>)
 801a718:	4618      	mov	r0, r3
 801a71a:	f7f4 f87b 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 801a71e:	687b      	ldr	r3, [r7, #4]
 801a720:	3304      	adds	r3, #4
 801a722:	6839      	ldr	r1, [r7, #0]
 801a724:	4618      	mov	r0, r3
 801a726:	f7f4 f863 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
    traceBuffer_ += ":";
 801a72a:	687b      	ldr	r3, [r7, #4]
 801a72c:	3304      	adds	r3, #4
 801a72e:	4905      	ldr	r1, [pc, #20]	; (801a744 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x3c>)
 801a730:	4618      	mov	r0, r3
 801a732:	f7f4 f86f 	bl	800e814 <_ZN12SimpleStringpLEPKc>
}
 801a736:	bf00      	nop
 801a738:	3708      	adds	r7, #8
 801a73a:	46bd      	mov	sp, r7
 801a73c:	bd80      	pop	{r7, pc}
 801a73e:	bf00      	nop
 801a740:	080279d4 	.word	0x080279d4
 801a744:	080279d8 	.word	0x080279d8

0801a748 <_ZN19MockActualCallTrace17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockActualCallTrace::withBoolParameter(const SimpleString& name, bool value)
{
 801a748:	b590      	push	{r4, r7, lr}
 801a74a:	b087      	sub	sp, #28
 801a74c:	af00      	add	r7, sp, #0
 801a74e:	60f8      	str	r0, [r7, #12]
 801a750:	60b9      	str	r1, [r7, #8]
 801a752:	4613      	mov	r3, r2
 801a754:	71fb      	strb	r3, [r7, #7]
    addParameterName(name);
 801a756:	68b9      	ldr	r1, [r7, #8]
 801a758:	68f8      	ldr	r0, [r7, #12]
 801a75a:	f7ff ffd5 	bl	801a708 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801a75e:	68fb      	ldr	r3, [r7, #12]
 801a760:	1d1c      	adds	r4, r3, #4
 801a762:	f107 0310 	add.w	r3, r7, #16
 801a766:	79fa      	ldrb	r2, [r7, #7]
 801a768:	4611      	mov	r1, r2
 801a76a:	4618      	mov	r0, r3
 801a76c:	f7f4 fa34 	bl	800ebd8 <_Z10StringFromb>
 801a770:	f107 0310 	add.w	r3, r7, #16
 801a774:	4619      	mov	r1, r3
 801a776:	4620      	mov	r0, r4
 801a778:	f7f4 f83a 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801a77c:	f107 0310 	add.w	r3, r7, #16
 801a780:	4618      	mov	r0, r3
 801a782:	f7f3 ffb8 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    return *this;
 801a786:	68fb      	ldr	r3, [r7, #12]
}
 801a788:	4618      	mov	r0, r3
 801a78a:	371c      	adds	r7, #28
 801a78c:	46bd      	mov	sp, r7
 801a78e:	bd90      	pop	{r4, r7, pc}

0801a790 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockActualCallTrace::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 801a790:	b590      	push	{r4, r7, lr}
 801a792:	b08f      	sub	sp, #60	; 0x3c
 801a794:	af00      	add	r7, sp, #0
 801a796:	60f8      	str	r0, [r7, #12]
 801a798:	60b9      	str	r1, [r7, #8]
 801a79a:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801a79c:	68b9      	ldr	r1, [r7, #8]
 801a79e:	68f8      	ldr	r0, [r7, #12]
 801a7a0:	f7ff ffb2 	bl	801a708 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 801a7a4:	68fb      	ldr	r3, [r7, #12]
 801a7a6:	1d1c      	adds	r4, r3, #4
 801a7a8:	f107 0320 	add.w	r3, r7, #32
 801a7ac:	6879      	ldr	r1, [r7, #4]
 801a7ae:	4618      	mov	r0, r3
 801a7b0:	f7f4 fcd0 	bl	800f154 <_Z10StringFromj>
 801a7b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a7b8:	491f      	ldr	r1, [pc, #124]	; (801a838 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj+0xa8>)
 801a7ba:	4618      	mov	r0, r3
 801a7bc:	f7f3 fbe3 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801a7c0:	f107 0318 	add.w	r3, r7, #24
 801a7c4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801a7c8:	f107 0120 	add.w	r1, r7, #32
 801a7cc:	4618      	mov	r0, r3
 801a7ce:	f7f3 fff4 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 801a7d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a7d6:	6879      	ldr	r1, [r7, #4]
 801a7d8:	4618      	mov	r0, r3
 801a7da:	f7f4 fb5f 	bl	800ee9c <_Z30BracketsFormattedHexStringFromj>
 801a7de:	f107 0310 	add.w	r3, r7, #16
 801a7e2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801a7e6:	f107 0118 	add.w	r1, r7, #24
 801a7ea:	4618      	mov	r0, r3
 801a7ec:	f7f3 ffe5 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 801a7f0:	f107 0310 	add.w	r3, r7, #16
 801a7f4:	4619      	mov	r1, r3
 801a7f6:	4620      	mov	r0, r4
 801a7f8:	f7f3 fffa 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801a7fc:	f107 0310 	add.w	r3, r7, #16
 801a800:	4618      	mov	r0, r3
 801a802:	f7f3 ff78 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801a806:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a80a:	4618      	mov	r0, r3
 801a80c:	f7f3 ff73 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801a810:	f107 0318 	add.w	r3, r7, #24
 801a814:	4618      	mov	r0, r3
 801a816:	f7f3 ff6e 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801a81a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a81e:	4618      	mov	r0, r3
 801a820:	f7f3 ff69 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801a824:	f107 0320 	add.w	r3, r7, #32
 801a828:	4618      	mov	r0, r3
 801a82a:	f7f3 ff64 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    return *this;
 801a82e:	68fb      	ldr	r3, [r7, #12]
}
 801a830:	4618      	mov	r0, r3
 801a832:	373c      	adds	r7, #60	; 0x3c
 801a834:	46bd      	mov	sp, r7
 801a836:	bd90      	pop	{r4, r7, pc}
 801a838:	080279d4 	.word	0x080279d4

0801a83c <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi>:

MockActualCall& MockActualCallTrace::withIntParameter(const SimpleString& name, int value)
{
 801a83c:	b590      	push	{r4, r7, lr}
 801a83e:	b08f      	sub	sp, #60	; 0x3c
 801a840:	af00      	add	r7, sp, #0
 801a842:	60f8      	str	r0, [r7, #12]
 801a844:	60b9      	str	r1, [r7, #8]
 801a846:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801a848:	68b9      	ldr	r1, [r7, #8]
 801a84a:	68f8      	ldr	r0, [r7, #12]
 801a84c:	f7ff ff5c 	bl	801a708 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 801a850:	68fb      	ldr	r3, [r7, #12]
 801a852:	1d1c      	adds	r4, r3, #4
 801a854:	f107 0320 	add.w	r3, r7, #32
 801a858:	6879      	ldr	r1, [r7, #4]
 801a85a:	4618      	mov	r0, r3
 801a85c:	f7f4 fa12 	bl	800ec84 <_Z10StringFromi>
 801a860:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a864:	491f      	ldr	r1, [pc, #124]	; (801a8e4 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi+0xa8>)
 801a866:	4618      	mov	r0, r3
 801a868:	f7f3 fb8d 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801a86c:	f107 0318 	add.w	r3, r7, #24
 801a870:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801a874:	f107 0120 	add.w	r1, r7, #32
 801a878:	4618      	mov	r0, r3
 801a87a:	f7f3 ff9e 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 801a87e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a882:	6879      	ldr	r1, [r7, #4]
 801a884:	4618      	mov	r0, r3
 801a886:	f7f4 faed 	bl	800ee64 <_Z30BracketsFormattedHexStringFromi>
 801a88a:	f107 0310 	add.w	r3, r7, #16
 801a88e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801a892:	f107 0118 	add.w	r1, r7, #24
 801a896:	4618      	mov	r0, r3
 801a898:	f7f3 ff8f 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 801a89c:	f107 0310 	add.w	r3, r7, #16
 801a8a0:	4619      	mov	r1, r3
 801a8a2:	4620      	mov	r0, r4
 801a8a4:	f7f3 ffa4 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801a8a8:	f107 0310 	add.w	r3, r7, #16
 801a8ac:	4618      	mov	r0, r3
 801a8ae:	f7f3 ff22 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801a8b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a8b6:	4618      	mov	r0, r3
 801a8b8:	f7f3 ff1d 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801a8bc:	f107 0318 	add.w	r3, r7, #24
 801a8c0:	4618      	mov	r0, r3
 801a8c2:	f7f3 ff18 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801a8c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a8ca:	4618      	mov	r0, r3
 801a8cc:	f7f3 ff13 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801a8d0:	f107 0320 	add.w	r3, r7, #32
 801a8d4:	4618      	mov	r0, r3
 801a8d6:	f7f3 ff0e 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    return *this;
 801a8da:	68fb      	ldr	r3, [r7, #12]
}
 801a8dc:	4618      	mov	r0, r3
 801a8de:	373c      	adds	r7, #60	; 0x3c
 801a8e0:	46bd      	mov	sp, r7
 801a8e2:	bd90      	pop	{r4, r7, pc}
 801a8e4:	080279d4 	.word	0x080279d4

0801a8e8 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockActualCallTrace::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 801a8e8:	b590      	push	{r4, r7, lr}
 801a8ea:	b08f      	sub	sp, #60	; 0x3c
 801a8ec:	af00      	add	r7, sp, #0
 801a8ee:	60f8      	str	r0, [r7, #12]
 801a8f0:	60b9      	str	r1, [r7, #8]
 801a8f2:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801a8f4:	68b9      	ldr	r1, [r7, #8]
 801a8f6:	68f8      	ldr	r0, [r7, #12]
 801a8f8:	f7ff ff06 	bl	801a708 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 801a8fc:	68fb      	ldr	r3, [r7, #12]
 801a8fe:	1d1c      	adds	r4, r3, #4
 801a900:	f107 0320 	add.w	r3, r7, #32
 801a904:	6879      	ldr	r1, [r7, #4]
 801a906:	4618      	mov	r0, r3
 801a908:	f7f4 fc36 	bl	800f178 <_Z10StringFromm>
 801a90c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a910:	491f      	ldr	r1, [pc, #124]	; (801a990 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm+0xa8>)
 801a912:	4618      	mov	r0, r3
 801a914:	f7f3 fb37 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801a918:	f107 0318 	add.w	r3, r7, #24
 801a91c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801a920:	f107 0120 	add.w	r1, r7, #32
 801a924:	4618      	mov	r0, r3
 801a926:	f7f3 ff48 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 801a92a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a92e:	6879      	ldr	r1, [r7, #4]
 801a930:	4618      	mov	r0, r3
 801a932:	f7f4 faeb 	bl	800ef0c <_Z30BracketsFormattedHexStringFromm>
 801a936:	f107 0310 	add.w	r3, r7, #16
 801a93a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801a93e:	f107 0118 	add.w	r1, r7, #24
 801a942:	4618      	mov	r0, r3
 801a944:	f7f3 ff39 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 801a948:	f107 0310 	add.w	r3, r7, #16
 801a94c:	4619      	mov	r1, r3
 801a94e:	4620      	mov	r0, r4
 801a950:	f7f3 ff4e 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801a954:	f107 0310 	add.w	r3, r7, #16
 801a958:	4618      	mov	r0, r3
 801a95a:	f7f3 fecc 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801a95e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a962:	4618      	mov	r0, r3
 801a964:	f7f3 fec7 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801a968:	f107 0318 	add.w	r3, r7, #24
 801a96c:	4618      	mov	r0, r3
 801a96e:	f7f3 fec2 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801a972:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a976:	4618      	mov	r0, r3
 801a978:	f7f3 febd 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801a97c:	f107 0320 	add.w	r3, r7, #32
 801a980:	4618      	mov	r0, r3
 801a982:	f7f3 feb8 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    return *this;
 801a986:	68fb      	ldr	r3, [r7, #12]
}
 801a988:	4618      	mov	r0, r3
 801a98a:	373c      	adds	r7, #60	; 0x3c
 801a98c:	46bd      	mov	sp, r7
 801a98e:	bd90      	pop	{r4, r7, pc}
 801a990:	080279d4 	.word	0x080279d4

0801a994 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockActualCallTrace::withLongIntParameter(const SimpleString& name, long int value)
{
 801a994:	b590      	push	{r4, r7, lr}
 801a996:	b08f      	sub	sp, #60	; 0x3c
 801a998:	af00      	add	r7, sp, #0
 801a99a:	60f8      	str	r0, [r7, #12]
 801a99c:	60b9      	str	r1, [r7, #8]
 801a99e:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801a9a0:	68b9      	ldr	r1, [r7, #8]
 801a9a2:	68f8      	ldr	r0, [r7, #12]
 801a9a4:	f7ff feb0 	bl	801a708 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 801a9a8:	68fb      	ldr	r3, [r7, #12]
 801a9aa:	1d1c      	adds	r4, r3, #4
 801a9ac:	f107 0320 	add.w	r3, r7, #32
 801a9b0:	6879      	ldr	r1, [r7, #4]
 801a9b2:	4618      	mov	r0, r3
 801a9b4:	f7f4 f978 	bl	800eca8 <_Z10StringFroml>
 801a9b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a9bc:	491f      	ldr	r1, [pc, #124]	; (801aa3c <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl+0xa8>)
 801a9be:	4618      	mov	r0, r3
 801a9c0:	f7f3 fae1 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801a9c4:	f107 0318 	add.w	r3, r7, #24
 801a9c8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801a9cc:	f107 0120 	add.w	r1, r7, #32
 801a9d0:	4618      	mov	r0, r3
 801a9d2:	f7f3 fef2 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 801a9d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a9da:	6879      	ldr	r1, [r7, #4]
 801a9dc:	4618      	mov	r0, r3
 801a9de:	f7f4 fa79 	bl	800eed4 <_Z30BracketsFormattedHexStringFroml>
 801a9e2:	f107 0310 	add.w	r3, r7, #16
 801a9e6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801a9ea:	f107 0118 	add.w	r1, r7, #24
 801a9ee:	4618      	mov	r0, r3
 801a9f0:	f7f3 fee3 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 801a9f4:	f107 0310 	add.w	r3, r7, #16
 801a9f8:	4619      	mov	r1, r3
 801a9fa:	4620      	mov	r0, r4
 801a9fc:	f7f3 fef8 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801aa00:	f107 0310 	add.w	r3, r7, #16
 801aa04:	4618      	mov	r0, r3
 801aa06:	f7f3 fe76 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801aa0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801aa0e:	4618      	mov	r0, r3
 801aa10:	f7f3 fe71 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801aa14:	f107 0318 	add.w	r3, r7, #24
 801aa18:	4618      	mov	r0, r3
 801aa1a:	f7f3 fe6c 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801aa1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801aa22:	4618      	mov	r0, r3
 801aa24:	f7f3 fe67 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801aa28:	f107 0320 	add.w	r3, r7, #32
 801aa2c:	4618      	mov	r0, r3
 801aa2e:	f7f3 fe62 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    return *this;
 801aa32:	68fb      	ldr	r3, [r7, #12]
}
 801aa34:	4618      	mov	r0, r3
 801aa36:	373c      	adds	r7, #60	; 0x3c
 801aa38:	46bd      	mov	sp, r7
 801aa3a:	bd90      	pop	{r4, r7, pc}
 801aa3c:	080279d4 	.word	0x080279d4

0801aa40 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockActualCallTrace::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 801aa40:	b5b0      	push	{r4, r5, r7, lr}
 801aa42:	b086      	sub	sp, #24
 801aa44:	af02      	add	r7, sp, #8
 801aa46:	60f8      	str	r0, [r7, #12]
 801aa48:	60b9      	str	r1, [r7, #8]
 801aa4a:	4639      	mov	r1, r7
 801aa4c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801aa50:	f7fa fe7c 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 801aa54:	4604      	mov	r4, r0
 801aa56:	6823      	ldr	r3, [r4, #0]
 801aa58:	3368      	adds	r3, #104	; 0x68
 801aa5a:	681d      	ldr	r5, [r3, #0]
 801aa5c:	f7fa fe86 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801aa60:	4603      	mov	r3, r0
 801aa62:	9300      	str	r3, [sp, #0]
 801aa64:	f240 23ee 	movw	r3, #750	; 0x2ee
 801aa68:	4a04      	ldr	r2, [pc, #16]	; (801aa7c <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 801aa6a:	4905      	ldr	r1, [pc, #20]	; (801aa80 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 801aa6c:	4620      	mov	r0, r4
 801aa6e:	47a8      	blx	r5
    return *this;
 801aa70:	68fb      	ldr	r3, [r7, #12]
}
 801aa72:	4618      	mov	r0, r3
 801aa74:	3710      	adds	r7, #16
 801aa76:	46bd      	mov	sp, r7
 801aa78:	bdb0      	pop	{r4, r5, r7, pc}
 801aa7a:	bf00      	nop
 801aa7c:	080278c0 	.word	0x080278c0
 801aa80:	080278dc 	.word	0x080278dc

0801aa84 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockActualCallTrace::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 801aa84:	b5b0      	push	{r4, r5, r7, lr}
 801aa86:	b086      	sub	sp, #24
 801aa88:	af02      	add	r7, sp, #8
 801aa8a:	60f8      	str	r0, [r7, #12]
 801aa8c:	60b9      	str	r1, [r7, #8]
 801aa8e:	4639      	mov	r1, r7
 801aa90:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801aa94:	f7fa fe5a 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 801aa98:	4604      	mov	r4, r0
 801aa9a:	6823      	ldr	r3, [r4, #0]
 801aa9c:	3368      	adds	r3, #104	; 0x68
 801aa9e:	681d      	ldr	r5, [r3, #0]
 801aaa0:	f7fa fe64 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801aaa4:	4603      	mov	r3, r0
 801aaa6:	9300      	str	r3, [sp, #0]
 801aaa8:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 801aaac:	4a04      	ldr	r2, [pc, #16]	; (801aac0 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801aaae:	4905      	ldr	r1, [pc, #20]	; (801aac4 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 801aab0:	4620      	mov	r0, r4
 801aab2:	47a8      	blx	r5
    return *this;
 801aab4:	68fb      	ldr	r3, [r7, #12]
}
 801aab6:	4618      	mov	r0, r3
 801aab8:	3710      	adds	r7, #16
 801aaba:	46bd      	mov	sp, r7
 801aabc:	bdb0      	pop	{r4, r5, r7, pc}
 801aabe:	bf00      	nop
 801aac0:	080278c0 	.word	0x080278c0
 801aac4:	08027908 	.word	0x08027908

0801aac8 <_ZN19MockActualCallTrace19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockActualCallTrace::withDoubleParameter(const SimpleString& name, double value)
{
 801aac8:	b590      	push	{r4, r7, lr}
 801aaca:	b087      	sub	sp, #28
 801aacc:	af00      	add	r7, sp, #0
 801aace:	60f8      	str	r0, [r7, #12]
 801aad0:	60b9      	str	r1, [r7, #8]
 801aad2:	ed87 0b00 	vstr	d0, [r7]
    addParameterName(name);
 801aad6:	68b9      	ldr	r1, [r7, #8]
 801aad8:	68f8      	ldr	r0, [r7, #12]
 801aada:	f7ff fe15 	bl	801a708 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801aade:	68fb      	ldr	r3, [r7, #12]
 801aae0:	1d1c      	adds	r4, r3, #4
 801aae2:	f107 0310 	add.w	r3, r7, #16
 801aae6:	2106      	movs	r1, #6
 801aae8:	ed97 0b00 	vldr	d0, [r7]
 801aaec:	4618      	mov	r0, r3
 801aaee:	f7f4 fac7 	bl	800f080 <_Z10StringFromdi>
 801aaf2:	f107 0310 	add.w	r3, r7, #16
 801aaf6:	4619      	mov	r1, r3
 801aaf8:	4620      	mov	r0, r4
 801aafa:	f7f3 fe79 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801aafe:	f107 0310 	add.w	r3, r7, #16
 801ab02:	4618      	mov	r0, r3
 801ab04:	f7f3 fdf7 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    return *this;
 801ab08:	68fb      	ldr	r3, [r7, #12]
}
 801ab0a:	4618      	mov	r0, r3
 801ab0c:	371c      	adds	r7, #28
 801ab0e:	46bd      	mov	sp, r7
 801ab10:	bd90      	pop	{r4, r7, pc}

0801ab12 <_ZN19MockActualCallTrace19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockActualCallTrace::withStringParameter(const SimpleString& name, const char* value)
{
 801ab12:	b590      	push	{r4, r7, lr}
 801ab14:	b087      	sub	sp, #28
 801ab16:	af00      	add	r7, sp, #0
 801ab18:	60f8      	str	r0, [r7, #12]
 801ab1a:	60b9      	str	r1, [r7, #8]
 801ab1c:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801ab1e:	68b9      	ldr	r1, [r7, #8]
 801ab20:	68f8      	ldr	r0, [r7, #12]
 801ab22:	f7ff fdf1 	bl	801a708 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801ab26:	68fb      	ldr	r3, [r7, #12]
 801ab28:	1d1c      	adds	r4, r3, #4
 801ab2a:	f107 0310 	add.w	r3, r7, #16
 801ab2e:	6879      	ldr	r1, [r7, #4]
 801ab30:	4618      	mov	r0, r3
 801ab32:	f7f4 f86d 	bl	800ec10 <_Z10StringFromPKc>
 801ab36:	f107 0310 	add.w	r3, r7, #16
 801ab3a:	4619      	mov	r1, r3
 801ab3c:	4620      	mov	r0, r4
 801ab3e:	f7f3 fe57 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801ab42:	f107 0310 	add.w	r3, r7, #16
 801ab46:	4618      	mov	r0, r3
 801ab48:	f7f3 fdd5 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    return *this;
 801ab4c:	68fb      	ldr	r3, [r7, #12]
}
 801ab4e:	4618      	mov	r0, r3
 801ab50:	371c      	adds	r7, #28
 801ab52:	46bd      	mov	sp, r7
 801ab54:	bd90      	pop	{r4, r7, pc}

0801ab56 <_ZN19MockActualCallTrace20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withPointerParameter(const SimpleString& name, void* value)
{
 801ab56:	b590      	push	{r4, r7, lr}
 801ab58:	b087      	sub	sp, #28
 801ab5a:	af00      	add	r7, sp, #0
 801ab5c:	60f8      	str	r0, [r7, #12]
 801ab5e:	60b9      	str	r1, [r7, #8]
 801ab60:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801ab62:	68b9      	ldr	r1, [r7, #8]
 801ab64:	68f8      	ldr	r0, [r7, #12]
 801ab66:	f7ff fdcf 	bl	801a708 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801ab6a:	68fb      	ldr	r3, [r7, #12]
 801ab6c:	1d1c      	adds	r4, r3, #4
 801ab6e:	f107 0310 	add.w	r3, r7, #16
 801ab72:	6879      	ldr	r1, [r7, #4]
 801ab74:	4618      	mov	r0, r3
 801ab76:	f7f4 f8a9 	bl	800eccc <_Z10StringFromPKv>
 801ab7a:	f107 0310 	add.w	r3, r7, #16
 801ab7e:	4619      	mov	r1, r3
 801ab80:	4620      	mov	r0, r4
 801ab82:	f7f3 fe35 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801ab86:	f107 0310 	add.w	r3, r7, #16
 801ab8a:	4618      	mov	r0, r3
 801ab8c:	f7f3 fdb3 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    return *this;
 801ab90:	68fb      	ldr	r3, [r7, #12]
}
 801ab92:	4618      	mov	r0, r3
 801ab94:	371c      	adds	r7, #28
 801ab96:	46bd      	mov	sp, r7
 801ab98:	bd90      	pop	{r4, r7, pc}

0801ab9a <_ZN19MockActualCallTrace25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockActualCallTrace::withConstPointerParameter(const SimpleString& name, const void* value)
{
 801ab9a:	b590      	push	{r4, r7, lr}
 801ab9c:	b087      	sub	sp, #28
 801ab9e:	af00      	add	r7, sp, #0
 801aba0:	60f8      	str	r0, [r7, #12]
 801aba2:	60b9      	str	r1, [r7, #8]
 801aba4:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801aba6:	68b9      	ldr	r1, [r7, #8]
 801aba8:	68f8      	ldr	r0, [r7, #12]
 801abaa:	f7ff fdad 	bl	801a708 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801abae:	68fb      	ldr	r3, [r7, #12]
 801abb0:	1d1c      	adds	r4, r3, #4
 801abb2:	f107 0310 	add.w	r3, r7, #16
 801abb6:	6879      	ldr	r1, [r7, #4]
 801abb8:	4618      	mov	r0, r3
 801abba:	f7f4 f887 	bl	800eccc <_Z10StringFromPKv>
 801abbe:	f107 0310 	add.w	r3, r7, #16
 801abc2:	4619      	mov	r1, r3
 801abc4:	4620      	mov	r0, r4
 801abc6:	f7f3 fe13 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801abca:	f107 0310 	add.w	r3, r7, #16
 801abce:	4618      	mov	r0, r3
 801abd0:	f7f3 fd91 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    return *this;
 801abd4:	68fb      	ldr	r3, [r7, #12]
}
 801abd6:	4618      	mov	r0, r3
 801abd8:	371c      	adds	r7, #28
 801abda:	46bd      	mov	sp, r7
 801abdc:	bd90      	pop	{r4, r7, pc}

0801abde <_ZN19MockActualCallTrace28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockActualCallTrace::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 801abde:	b590      	push	{r4, r7, lr}
 801abe0:	b087      	sub	sp, #28
 801abe2:	af00      	add	r7, sp, #0
 801abe4:	60f8      	str	r0, [r7, #12]
 801abe6:	60b9      	str	r1, [r7, #8]
 801abe8:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801abea:	68b9      	ldr	r1, [r7, #8]
 801abec:	68f8      	ldr	r0, [r7, #12]
 801abee:	f7ff fd8b 	bl	801a708 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801abf2:	68fb      	ldr	r3, [r7, #12]
 801abf4:	1d1c      	adds	r4, r3, #4
 801abf6:	f107 0310 	add.w	r3, r7, #16
 801abfa:	6879      	ldr	r1, [r7, #4]
 801abfc:	4618      	mov	r0, r3
 801abfe:	f7f4 f88f 	bl	800ed20 <_Z10StringFromPFvvE>
 801ac02:	f107 0310 	add.w	r3, r7, #16
 801ac06:	4619      	mov	r1, r3
 801ac08:	4620      	mov	r0, r4
 801ac0a:	f7f3 fdf1 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801ac0e:	f107 0310 	add.w	r3, r7, #16
 801ac12:	4618      	mov	r0, r3
 801ac14:	f7f3 fd6f 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    return *this;
 801ac18:	68fb      	ldr	r3, [r7, #12]
}
 801ac1a:	4618      	mov	r0, r3
 801ac1c:	371c      	adds	r7, #28
 801ac1e:	46bd      	mov	sp, r7
 801ac20:	bd90      	pop	{r4, r7, pc}

0801ac22 <_ZN19MockActualCallTrace25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockActualCallTrace::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 801ac22:	b590      	push	{r4, r7, lr}
 801ac24:	b087      	sub	sp, #28
 801ac26:	af00      	add	r7, sp, #0
 801ac28:	60f8      	str	r0, [r7, #12]
 801ac2a:	60b9      	str	r1, [r7, #8]
 801ac2c:	607a      	str	r2, [r7, #4]
 801ac2e:	603b      	str	r3, [r7, #0]
    addParameterName(name);
 801ac30:	68b9      	ldr	r1, [r7, #8]
 801ac32:	68f8      	ldr	r0, [r7, #12]
 801ac34:	f7ff fd68 	bl	801a708 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFromBinaryWithSizeOrNull(value, size);
 801ac38:	68fb      	ldr	r3, [r7, #12]
 801ac3a:	1d1c      	adds	r4, r3, #4
 801ac3c:	f107 0310 	add.w	r3, r7, #16
 801ac40:	683a      	ldr	r2, [r7, #0]
 801ac42:	6879      	ldr	r1, [r7, #4]
 801ac44:	4618      	mov	r0, r3
 801ac46:	f7f4 fbaf 	bl	800f3a8 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 801ac4a:	f107 0310 	add.w	r3, r7, #16
 801ac4e:	4619      	mov	r1, r3
 801ac50:	4620      	mov	r0, r4
 801ac52:	f7f3 fdcd 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801ac56:	f107 0310 	add.w	r3, r7, #16
 801ac5a:	4618      	mov	r0, r3
 801ac5c:	f7f3 fd4b 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    return *this;
 801ac60:	68fb      	ldr	r3, [r7, #12]
}
 801ac62:	4618      	mov	r0, r3
 801ac64:	371c      	adds	r7, #28
 801ac66:	46bd      	mov	sp, r7
 801ac68:	bd90      	pop	{r4, r7, pc}
	...

0801ac6c <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockActualCallTrace::withParameterOfType(const SimpleString& typeName, const SimpleString& name, const void* value)
{
 801ac6c:	b590      	push	{r4, r7, lr}
 801ac6e:	b087      	sub	sp, #28
 801ac70:	af00      	add	r7, sp, #0
 801ac72:	60f8      	str	r0, [r7, #12]
 801ac74:	60b9      	str	r1, [r7, #8]
 801ac76:	607a      	str	r2, [r7, #4]
 801ac78:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 801ac7a:	68fb      	ldr	r3, [r7, #12]
 801ac7c:	3304      	adds	r3, #4
 801ac7e:	4913      	ldr	r1, [pc, #76]	; (801accc <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv+0x60>)
 801ac80:	4618      	mov	r0, r3
 801ac82:	f7f3 fdc7 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 801ac86:	68fb      	ldr	r3, [r7, #12]
 801ac88:	3304      	adds	r3, #4
 801ac8a:	68b9      	ldr	r1, [r7, #8]
 801ac8c:	4618      	mov	r0, r3
 801ac8e:	f7f3 fdaf 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 801ac92:	6879      	ldr	r1, [r7, #4]
 801ac94:	68f8      	ldr	r0, [r7, #12]
 801ac96:	f7ff fd37 	bl	801a708 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801ac9a:	68fb      	ldr	r3, [r7, #12]
 801ac9c:	1d1c      	adds	r4, r3, #4
 801ac9e:	f107 0310 	add.w	r3, r7, #16
 801aca2:	6839      	ldr	r1, [r7, #0]
 801aca4:	4618      	mov	r0, r3
 801aca6:	f7f4 f811 	bl	800eccc <_Z10StringFromPKv>
 801acaa:	f107 0310 	add.w	r3, r7, #16
 801acae:	4619      	mov	r1, r3
 801acb0:	4620      	mov	r0, r4
 801acb2:	f7f3 fd9d 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801acb6:	f107 0310 	add.w	r3, r7, #16
 801acba:	4618      	mov	r0, r3
 801acbc:	f7f3 fd1b 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    return *this;
 801acc0:	68fb      	ldr	r3, [r7, #12]
}
 801acc2:	4618      	mov	r0, r3
 801acc4:	371c      	adds	r7, #28
 801acc6:	46bd      	mov	sp, r7
 801acc8:	bd90      	pop	{r4, r7, pc}
 801acca:	bf00      	nop
 801accc:	080279d4 	.word	0x080279d4

0801acd0 <_ZN19MockActualCallTrace19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withOutputParameter(const SimpleString& name, void* output)
{
 801acd0:	b590      	push	{r4, r7, lr}
 801acd2:	b087      	sub	sp, #28
 801acd4:	af00      	add	r7, sp, #0
 801acd6:	60f8      	str	r0, [r7, #12]
 801acd8:	60b9      	str	r1, [r7, #8]
 801acda:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801acdc:	68b9      	ldr	r1, [r7, #8]
 801acde:	68f8      	ldr	r0, [r7, #12]
 801ace0:	f7ff fd12 	bl	801a708 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 801ace4:	68fb      	ldr	r3, [r7, #12]
 801ace6:	1d1c      	adds	r4, r3, #4
 801ace8:	f107 0310 	add.w	r3, r7, #16
 801acec:	6879      	ldr	r1, [r7, #4]
 801acee:	4618      	mov	r0, r3
 801acf0:	f7f3 ffec 	bl	800eccc <_Z10StringFromPKv>
 801acf4:	f107 0310 	add.w	r3, r7, #16
 801acf8:	4619      	mov	r1, r3
 801acfa:	4620      	mov	r0, r4
 801acfc:	f7f3 fd78 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801ad00:	f107 0310 	add.w	r3, r7, #16
 801ad04:	4618      	mov	r0, r3
 801ad06:	f7f3 fcf6 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    return *this;
 801ad0a:	68fb      	ldr	r3, [r7, #12]
}
 801ad0c:	4618      	mov	r0, r3
 801ad0e:	371c      	adds	r7, #28
 801ad10:	46bd      	mov	sp, r7
 801ad12:	bd90      	pop	{r4, r7, pc}

0801ad14 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockActualCallTrace::withOutputParameterOfType(const SimpleString& typeName, const SimpleString& name, void* output)
{
 801ad14:	b590      	push	{r4, r7, lr}
 801ad16:	b087      	sub	sp, #28
 801ad18:	af00      	add	r7, sp, #0
 801ad1a:	60f8      	str	r0, [r7, #12]
 801ad1c:	60b9      	str	r1, [r7, #8]
 801ad1e:	607a      	str	r2, [r7, #4]
 801ad20:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 801ad22:	68fb      	ldr	r3, [r7, #12]
 801ad24:	3304      	adds	r3, #4
 801ad26:	4913      	ldr	r1, [pc, #76]	; (801ad74 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv+0x60>)
 801ad28:	4618      	mov	r0, r3
 801ad2a:	f7f3 fd73 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 801ad2e:	68fb      	ldr	r3, [r7, #12]
 801ad30:	3304      	adds	r3, #4
 801ad32:	68b9      	ldr	r1, [r7, #8]
 801ad34:	4618      	mov	r0, r3
 801ad36:	f7f3 fd5b 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 801ad3a:	6879      	ldr	r1, [r7, #4]
 801ad3c:	68f8      	ldr	r0, [r7, #12]
 801ad3e:	f7ff fce3 	bl	801a708 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 801ad42:	68fb      	ldr	r3, [r7, #12]
 801ad44:	1d1c      	adds	r4, r3, #4
 801ad46:	f107 0310 	add.w	r3, r7, #16
 801ad4a:	6839      	ldr	r1, [r7, #0]
 801ad4c:	4618      	mov	r0, r3
 801ad4e:	f7f3 ffbd 	bl	800eccc <_Z10StringFromPKv>
 801ad52:	f107 0310 	add.w	r3, r7, #16
 801ad56:	4619      	mov	r1, r3
 801ad58:	4620      	mov	r0, r4
 801ad5a:	f7f3 fd49 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801ad5e:	f107 0310 	add.w	r3, r7, #16
 801ad62:	4618      	mov	r0, r3
 801ad64:	f7f3 fcc7 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    return *this;
 801ad68:	68fb      	ldr	r3, [r7, #12]
}
 801ad6a:	4618      	mov	r0, r3
 801ad6c:	371c      	adds	r7, #28
 801ad6e:	46bd      	mov	sp, r7
 801ad70:	bd90      	pop	{r4, r7, pc}
 801ad72:	bf00      	nop
 801ad74:	080279d4 	.word	0x080279d4

0801ad78 <_ZN19MockActualCallTrace14hasReturnValueEv>:

bool MockActualCallTrace::hasReturnValue()
{
 801ad78:	b480      	push	{r7}
 801ad7a:	b083      	sub	sp, #12
 801ad7c:	af00      	add	r7, sp, #0
 801ad7e:	6078      	str	r0, [r7, #4]
    return false;
 801ad80:	2300      	movs	r3, #0
}
 801ad82:	4618      	mov	r0, r3
 801ad84:	370c      	adds	r7, #12
 801ad86:	46bd      	mov	sp, r7
 801ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad8c:	4770      	bx	lr
	...

0801ad90 <_ZN19MockActualCallTrace11returnValueEv>:

MockNamedValue MockActualCallTrace::returnValue()
{
 801ad90:	b580      	push	{r7, lr}
 801ad92:	b084      	sub	sp, #16
 801ad94:	af00      	add	r7, sp, #0
 801ad96:	6078      	str	r0, [r7, #4]
 801ad98:	6039      	str	r1, [r7, #0]
    return MockNamedValue("");
 801ad9a:	f107 0308 	add.w	r3, r7, #8
 801ad9e:	4909      	ldr	r1, [pc, #36]	; (801adc4 <_ZN19MockActualCallTrace11returnValueEv+0x34>)
 801ada0:	4618      	mov	r0, r3
 801ada2:	f7f3 f8f0 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801ada6:	f107 0308 	add.w	r3, r7, #8
 801adaa:	4619      	mov	r1, r3
 801adac:	6878      	ldr	r0, [r7, #4]
 801adae:	f003 fe0f 	bl	801e9d0 <_ZN14MockNamedValueC1ERK12SimpleString>
 801adb2:	f107 0308 	add.w	r3, r7, #8
 801adb6:	4618      	mov	r0, r3
 801adb8:	f7f3 fc9d 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 801adbc:	6878      	ldr	r0, [r7, #4]
 801adbe:	3710      	adds	r7, #16
 801adc0:	46bd      	mov	sp, r7
 801adc2:	bd80      	pop	{r7, pc}
 801adc4:	080278a8 	.word	0x080278a8

0801adc8 <_ZN19MockActualCallTrace18returnLongIntValueEv>:

long int MockActualCallTrace::returnLongIntValue()
{
 801adc8:	b480      	push	{r7}
 801adca:	b083      	sub	sp, #12
 801adcc:	af00      	add	r7, sp, #0
 801adce:	6078      	str	r0, [r7, #4]
    return 0;
 801add0:	2300      	movs	r3, #0
}
 801add2:	4618      	mov	r0, r3
 801add4:	370c      	adds	r7, #12
 801add6:	46bd      	mov	sp, r7
 801add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801addc:	4770      	bx	lr

0801adde <_ZN19MockActualCallTrace26returnUnsignedLongIntValueEv>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValue()
{
 801adde:	b480      	push	{r7}
 801ade0:	b083      	sub	sp, #12
 801ade2:	af00      	add	r7, sp, #0
 801ade4:	6078      	str	r0, [r7, #4]
    return 0;
 801ade6:	2300      	movs	r3, #0
}
 801ade8:	4618      	mov	r0, r3
 801adea:	370c      	adds	r7, #12
 801adec:	46bd      	mov	sp, r7
 801adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adf2:	4770      	bx	lr

0801adf4 <_ZN19MockActualCallTrace35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValueOrDefault(unsigned long)
{
 801adf4:	b480      	push	{r7}
 801adf6:	b083      	sub	sp, #12
 801adf8:	af00      	add	r7, sp, #0
 801adfa:	6078      	str	r0, [r7, #4]
 801adfc:	6039      	str	r1, [r7, #0]
    return 0;
 801adfe:	2300      	movs	r3, #0
}
 801ae00:	4618      	mov	r0, r3
 801ae02:	370c      	adds	r7, #12
 801ae04:	46bd      	mov	sp, r7
 801ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae0a:	4770      	bx	lr

0801ae0c <_ZN19MockActualCallTrace27returnLongIntValueOrDefaultEl>:

long int MockActualCallTrace::returnLongIntValueOrDefault(long int)
{
 801ae0c:	b480      	push	{r7}
 801ae0e:	b083      	sub	sp, #12
 801ae10:	af00      	add	r7, sp, #0
 801ae12:	6078      	str	r0, [r7, #4]
 801ae14:	6039      	str	r1, [r7, #0]
    return 0;
 801ae16:	2300      	movs	r3, #0
}
 801ae18:	4618      	mov	r0, r3
 801ae1a:	370c      	adds	r7, #12
 801ae1c:	46bd      	mov	sp, r7
 801ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae22:	4770      	bx	lr

0801ae24 <_ZN19MockActualCallTrace22returnLongLongIntValueEv>:
}

#else

cpputest_longlong MockActualCallTrace::returnLongLongIntValue()
{
 801ae24:	b5b0      	push	{r4, r5, r7, lr}
 801ae26:	b084      	sub	sp, #16
 801ae28:	af02      	add	r7, sp, #8
 801ae2a:	6078      	str	r0, [r7, #4]
 801ae2c:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801ae2e:	f7fa fc8d 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 801ae32:	4604      	mov	r4, r0
 801ae34:	6823      	ldr	r3, [r4, #0]
 801ae36:	3368      	adds	r3, #104	; 0x68
 801ae38:	681d      	ldr	r5, [r3, #0]
 801ae3a:	f7fa fc97 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ae3e:	4603      	mov	r3, r0
 801ae40:	9300      	str	r3, [sp, #0]
 801ae42:	f240 3375 	movw	r3, #885	; 0x375
 801ae46:	4a06      	ldr	r2, [pc, #24]	; (801ae60 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x3c>)
 801ae48:	4906      	ldr	r1, [pc, #24]	; (801ae64 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x40>)
 801ae4a:	4620      	mov	r0, r4
 801ae4c:	47a8      	blx	r5
    return cpputest_longlong(0);
 801ae4e:	2100      	movs	r1, #0
 801ae50:	6878      	ldr	r0, [r7, #4]
 801ae52:	f7f1 f8cf 	bl	800bff4 <_ZN17cpputest_longlongC1Ei>
}
 801ae56:	6878      	ldr	r0, [r7, #4]
 801ae58:	3708      	adds	r7, #8
 801ae5a:	46bd      	mov	sp, r7
 801ae5c:	bdb0      	pop	{r4, r5, r7, pc}
 801ae5e:	bf00      	nop
 801ae60:	080278c0 	.word	0x080278c0
 801ae64:	08027908 	.word	0x08027908

0801ae68 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValue()
{
 801ae68:	b5b0      	push	{r4, r5, r7, lr}
 801ae6a:	b084      	sub	sp, #16
 801ae6c:	af02      	add	r7, sp, #8
 801ae6e:	6078      	str	r0, [r7, #4]
 801ae70:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801ae72:	f7fa fc6b 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 801ae76:	4604      	mov	r4, r0
 801ae78:	6823      	ldr	r3, [r4, #0]
 801ae7a:	3368      	adds	r3, #104	; 0x68
 801ae7c:	681d      	ldr	r5, [r3, #0]
 801ae7e:	f7fa fc75 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ae82:	4603      	mov	r3, r0
 801ae84:	9300      	str	r3, [sp, #0]
 801ae86:	f240 337b 	movw	r3, #891	; 0x37b
 801ae8a:	4a06      	ldr	r2, [pc, #24]	; (801aea4 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x3c>)
 801ae8c:	4906      	ldr	r1, [pc, #24]	; (801aea8 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x40>)
 801ae8e:	4620      	mov	r0, r4
 801ae90:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801ae92:	2100      	movs	r1, #0
 801ae94:	6878      	ldr	r0, [r7, #4]
 801ae96:	f7f1 f8b9 	bl	800c00c <_ZN18cpputest_ulonglongC1Ei>
}
 801ae9a:	6878      	ldr	r0, [r7, #4]
 801ae9c:	3708      	adds	r7, #8
 801ae9e:	46bd      	mov	sp, r7
 801aea0:	bdb0      	pop	{r4, r5, r7, pc}
 801aea2:	bf00      	nop
 801aea4:	080278c0 	.word	0x080278c0
 801aea8:	080278dc 	.word	0x080278dc

0801aeac <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong)
{
 801aeac:	b5b0      	push	{r4, r5, r7, lr}
 801aeae:	b086      	sub	sp, #24
 801aeb0:	af02      	add	r7, sp, #8
 801aeb2:	60f8      	str	r0, [r7, #12]
 801aeb4:	60b9      	str	r1, [r7, #8]
 801aeb6:	4639      	mov	r1, r7
 801aeb8:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801aebc:	f7fa fc46 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 801aec0:	4604      	mov	r4, r0
 801aec2:	6823      	ldr	r3, [r4, #0]
 801aec4:	3368      	adds	r3, #104	; 0x68
 801aec6:	681d      	ldr	r5, [r3, #0]
 801aec8:	f7fa fc50 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801aecc:	4603      	mov	r3, r0
 801aece:	9300      	str	r3, [sp, #0]
 801aed0:	f240 3381 	movw	r3, #897	; 0x381
 801aed4:	4a05      	ldr	r2, [pc, #20]	; (801aeec <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x40>)
 801aed6:	4906      	ldr	r1, [pc, #24]	; (801aef0 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 801aed8:	4620      	mov	r0, r4
 801aeda:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801aedc:	2100      	movs	r1, #0
 801aede:	68f8      	ldr	r0, [r7, #12]
 801aee0:	f7f1 f894 	bl	800c00c <_ZN18cpputest_ulonglongC1Ei>
}
 801aee4:	68f8      	ldr	r0, [r7, #12]
 801aee6:	3710      	adds	r7, #16
 801aee8:	46bd      	mov	sp, r7
 801aeea:	bdb0      	pop	{r4, r5, r7, pc}
 801aeec:	080278c0 	.word	0x080278c0
 801aef0:	080278dc 	.word	0x080278dc

0801aef4 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockActualCallTrace::returnLongLongIntValueOrDefault(cpputest_longlong)
{
 801aef4:	b5b0      	push	{r4, r5, r7, lr}
 801aef6:	b086      	sub	sp, #24
 801aef8:	af02      	add	r7, sp, #8
 801aefa:	60f8      	str	r0, [r7, #12]
 801aefc:	60b9      	str	r1, [r7, #8]
 801aefe:	4639      	mov	r1, r7
 801af00:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801af04:	f7fa fc22 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 801af08:	4604      	mov	r4, r0
 801af0a:	6823      	ldr	r3, [r4, #0]
 801af0c:	3368      	adds	r3, #104	; 0x68
 801af0e:	681d      	ldr	r5, [r3, #0]
 801af10:	f7fa fc2c 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801af14:	4603      	mov	r3, r0
 801af16:	9300      	str	r3, [sp, #0]
 801af18:	f240 3387 	movw	r3, #903	; 0x387
 801af1c:	4a05      	ldr	r2, [pc, #20]	; (801af34 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x40>)
 801af1e:	4906      	ldr	r1, [pc, #24]	; (801af38 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 801af20:	4620      	mov	r0, r4
 801af22:	47a8      	blx	r5
    return cpputest_longlong(0);
 801af24:	2100      	movs	r1, #0
 801af26:	68f8      	ldr	r0, [r7, #12]
 801af28:	f7f1 f864 	bl	800bff4 <_ZN17cpputest_longlongC1Ei>
}
 801af2c:	68f8      	ldr	r0, [r7, #12]
 801af2e:	3710      	adds	r7, #16
 801af30:	46bd      	mov	sp, r7
 801af32:	bdb0      	pop	{r4, r5, r7, pc}
 801af34:	080278c0 	.word	0x080278c0
 801af38:	08027908 	.word	0x08027908

0801af3c <_ZN19MockActualCallTrace15returnBoolValueEv>:

#endif

bool MockActualCallTrace::returnBoolValue()
{
 801af3c:	b480      	push	{r7}
 801af3e:	b083      	sub	sp, #12
 801af40:	af00      	add	r7, sp, #0
 801af42:	6078      	str	r0, [r7, #4]
    return false;
 801af44:	2300      	movs	r3, #0
}
 801af46:	4618      	mov	r0, r3
 801af48:	370c      	adds	r7, #12
 801af4a:	46bd      	mov	sp, r7
 801af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af50:	4770      	bx	lr

0801af52 <_ZN19MockActualCallTrace24returnBoolValueOrDefaultEb>:

bool MockActualCallTrace::returnBoolValueOrDefault(bool)
{
 801af52:	b480      	push	{r7}
 801af54:	b083      	sub	sp, #12
 801af56:	af00      	add	r7, sp, #0
 801af58:	6078      	str	r0, [r7, #4]
 801af5a:	460b      	mov	r3, r1
 801af5c:	70fb      	strb	r3, [r7, #3]
    return false;
 801af5e:	2300      	movs	r3, #0
}
 801af60:	4618      	mov	r0, r3
 801af62:	370c      	adds	r7, #12
 801af64:	46bd      	mov	sp, r7
 801af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af6a:	4770      	bx	lr

0801af6c <_ZN19MockActualCallTrace14returnIntValueEv>:

int MockActualCallTrace::returnIntValue()
{
 801af6c:	b480      	push	{r7}
 801af6e:	b083      	sub	sp, #12
 801af70:	af00      	add	r7, sp, #0
 801af72:	6078      	str	r0, [r7, #4]
    return 0;
 801af74:	2300      	movs	r3, #0
}
 801af76:	4618      	mov	r0, r3
 801af78:	370c      	adds	r7, #12
 801af7a:	46bd      	mov	sp, r7
 801af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af80:	4770      	bx	lr

0801af82 <_ZN19MockActualCallTrace17returnDoubleValueEv>:

double MockActualCallTrace::returnDoubleValue()
{
 801af82:	b480      	push	{r7}
 801af84:	b083      	sub	sp, #12
 801af86:	af00      	add	r7, sp, #0
 801af88:	6078      	str	r0, [r7, #4]
    return 0.0;
 801af8a:	f04f 0200 	mov.w	r2, #0
 801af8e:	f04f 0300 	mov.w	r3, #0
 801af92:	ec43 2b17 	vmov	d7, r2, r3
}
 801af96:	eeb0 0a47 	vmov.f32	s0, s14
 801af9a:	eef0 0a67 	vmov.f32	s1, s15
 801af9e:	370c      	adds	r7, #12
 801afa0:	46bd      	mov	sp, r7
 801afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afa6:	4770      	bx	lr

0801afa8 <_ZN19MockActualCallTrace26returnDoubleValueOrDefaultEd>:

double MockActualCallTrace::returnDoubleValueOrDefault(double)
{
 801afa8:	b580      	push	{r7, lr}
 801afaa:	b084      	sub	sp, #16
 801afac:	af00      	add	r7, sp, #0
 801afae:	60f8      	str	r0, [r7, #12]
 801afb0:	ed87 0b00 	vstr	d0, [r7]
    return returnDoubleValue();
 801afb4:	68fb      	ldr	r3, [r7, #12]
 801afb6:	681b      	ldr	r3, [r3, #0]
 801afb8:	3398      	adds	r3, #152	; 0x98
 801afba:	681b      	ldr	r3, [r3, #0]
 801afbc:	68f8      	ldr	r0, [r7, #12]
 801afbe:	4798      	blx	r3
 801afc0:	eeb0 7a40 	vmov.f32	s14, s0
 801afc4:	eef0 7a60 	vmov.f32	s15, s1
}
 801afc8:	eeb0 0a47 	vmov.f32	s0, s14
 801afcc:	eef0 0a67 	vmov.f32	s1, s15
 801afd0:	3710      	adds	r7, #16
 801afd2:	46bd      	mov	sp, r7
 801afd4:	bd80      	pop	{r7, pc}

0801afd6 <_ZN19MockActualCallTrace22returnUnsignedIntValueEv>:

unsigned int MockActualCallTrace::returnUnsignedIntValue()
{
 801afd6:	b480      	push	{r7}
 801afd8:	b083      	sub	sp, #12
 801afda:	af00      	add	r7, sp, #0
 801afdc:	6078      	str	r0, [r7, #4]
    return 0;
 801afde:	2300      	movs	r3, #0
}
 801afe0:	4618      	mov	r0, r3
 801afe2:	370c      	adds	r7, #12
 801afe4:	46bd      	mov	sp, r7
 801afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afea:	4770      	bx	lr

0801afec <_ZN19MockActualCallTrace18returnPointerValueEv>:

void * MockActualCallTrace::returnPointerValue()
{
 801afec:	b480      	push	{r7}
 801afee:	b083      	sub	sp, #12
 801aff0:	af00      	add	r7, sp, #0
 801aff2:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 801aff4:	2300      	movs	r3, #0
}
 801aff6:	4618      	mov	r0, r3
 801aff8:	370c      	adds	r7, #12
 801affa:	46bd      	mov	sp, r7
 801affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b000:	4770      	bx	lr

0801b002 <_ZN19MockActualCallTrace23returnConstPointerValueEv>:

const void * MockActualCallTrace::returnConstPointerValue()
{
 801b002:	b480      	push	{r7}
 801b004:	b083      	sub	sp, #12
 801b006:	af00      	add	r7, sp, #0
 801b008:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 801b00a:	2300      	movs	r3, #0
}
 801b00c:	4618      	mov	r0, r3
 801b00e:	370c      	adds	r7, #12
 801b010:	46bd      	mov	sp, r7
 801b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b016:	4770      	bx	lr

0801b018 <_ZN19MockActualCallTrace26returnFunctionPointerValueEv>:

void (*MockActualCallTrace::returnFunctionPointerValue())()
{
 801b018:	b480      	push	{r7}
 801b01a:	b083      	sub	sp, #12
 801b01c:	af00      	add	r7, sp, #0
 801b01e:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 801b020:	2300      	movs	r3, #0
}
 801b022:	4618      	mov	r0, r3
 801b024:	370c      	adds	r7, #12
 801b026:	46bd      	mov	sp, r7
 801b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b02c:	4770      	bx	lr

0801b02e <_ZN19MockActualCallTrace32returnConstPointerValueOrDefaultEPKv>:

const void * MockActualCallTrace::returnConstPointerValueOrDefault(const void *)
{
 801b02e:	b580      	push	{r7, lr}
 801b030:	b082      	sub	sp, #8
 801b032:	af00      	add	r7, sp, #0
 801b034:	6078      	str	r0, [r7, #4]
 801b036:	6039      	str	r1, [r7, #0]
    return returnConstPointerValue();
 801b038:	687b      	ldr	r3, [r7, #4]
 801b03a:	681b      	ldr	r3, [r3, #0]
 801b03c:	33a8      	adds	r3, #168	; 0xa8
 801b03e:	681b      	ldr	r3, [r3, #0]
 801b040:	6878      	ldr	r0, [r7, #4]
 801b042:	4798      	blx	r3
 801b044:	4603      	mov	r3, r0
}
 801b046:	4618      	mov	r0, r3
 801b048:	3708      	adds	r7, #8
 801b04a:	46bd      	mov	sp, r7
 801b04c:	bd80      	pop	{r7, pc}

0801b04e <_ZN19MockActualCallTrace27returnPointerValueOrDefaultEPv>:

void * MockActualCallTrace::returnPointerValueOrDefault(void *)
{
 801b04e:	b580      	push	{r7, lr}
 801b050:	b082      	sub	sp, #8
 801b052:	af00      	add	r7, sp, #0
 801b054:	6078      	str	r0, [r7, #4]
 801b056:	6039      	str	r1, [r7, #0]
    return returnPointerValue();
 801b058:	687b      	ldr	r3, [r7, #4]
 801b05a:	681b      	ldr	r3, [r3, #0]
 801b05c:	33a0      	adds	r3, #160	; 0xa0
 801b05e:	681b      	ldr	r3, [r3, #0]
 801b060:	6878      	ldr	r0, [r7, #4]
 801b062:	4798      	blx	r3
 801b064:	4603      	mov	r3, r0
}
 801b066:	4618      	mov	r0, r3
 801b068:	3708      	adds	r7, #8
 801b06a:	46bd      	mov	sp, r7
 801b06c:	bd80      	pop	{r7, pc}

0801b06e <_ZN19MockActualCallTrace35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockActualCallTrace::returnFunctionPointerValueOrDefault(void (*)()))()
{
 801b06e:	b580      	push	{r7, lr}
 801b070:	b082      	sub	sp, #8
 801b072:	af00      	add	r7, sp, #0
 801b074:	6078      	str	r0, [r7, #4]
 801b076:	6039      	str	r1, [r7, #0]
    return returnFunctionPointerValue();
 801b078:	687b      	ldr	r3, [r7, #4]
 801b07a:	681b      	ldr	r3, [r3, #0]
 801b07c:	33b0      	adds	r3, #176	; 0xb0
 801b07e:	681b      	ldr	r3, [r3, #0]
 801b080:	6878      	ldr	r0, [r7, #4]
 801b082:	4798      	blx	r3
 801b084:	4603      	mov	r3, r0
}
 801b086:	4618      	mov	r0, r3
 801b088:	3708      	adds	r7, #8
 801b08a:	46bd      	mov	sp, r7
 801b08c:	bd80      	pop	{r7, pc}
	...

0801b090 <_ZN19MockActualCallTrace17returnStringValueEv>:

const char * MockActualCallTrace::returnStringValue()
{
 801b090:	b480      	push	{r7}
 801b092:	b083      	sub	sp, #12
 801b094:	af00      	add	r7, sp, #0
 801b096:	6078      	str	r0, [r7, #4]
    return "";
 801b098:	4b03      	ldr	r3, [pc, #12]	; (801b0a8 <_ZN19MockActualCallTrace17returnStringValueEv+0x18>)
}
 801b09a:	4618      	mov	r0, r3
 801b09c:	370c      	adds	r7, #12
 801b09e:	46bd      	mov	sp, r7
 801b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0a4:	4770      	bx	lr
 801b0a6:	bf00      	nop
 801b0a8:	080278a8 	.word	0x080278a8

0801b0ac <_ZN19MockActualCallTrace26returnStringValueOrDefaultEPKc>:

const char * MockActualCallTrace::returnStringValueOrDefault(const char *)
{
 801b0ac:	b580      	push	{r7, lr}
 801b0ae:	b082      	sub	sp, #8
 801b0b0:	af00      	add	r7, sp, #0
 801b0b2:	6078      	str	r0, [r7, #4]
 801b0b4:	6039      	str	r1, [r7, #0]
    return returnStringValue();
 801b0b6:	687b      	ldr	r3, [r7, #4]
 801b0b8:	681b      	ldr	r3, [r3, #0]
 801b0ba:	3394      	adds	r3, #148	; 0x94
 801b0bc:	681b      	ldr	r3, [r3, #0]
 801b0be:	6878      	ldr	r0, [r7, #4]
 801b0c0:	4798      	blx	r3
 801b0c2:	4603      	mov	r3, r0
}
 801b0c4:	4618      	mov	r0, r3
 801b0c6:	3708      	adds	r7, #8
 801b0c8:	46bd      	mov	sp, r7
 801b0ca:	bd80      	pop	{r7, pc}

0801b0cc <_ZN19MockActualCallTrace23returnIntValueOrDefaultEi>:

int MockActualCallTrace::returnIntValueOrDefault(int)
{
 801b0cc:	b480      	push	{r7}
 801b0ce:	b083      	sub	sp, #12
 801b0d0:	af00      	add	r7, sp, #0
 801b0d2:	6078      	str	r0, [r7, #4]
 801b0d4:	6039      	str	r1, [r7, #0]
    return 0;
 801b0d6:	2300      	movs	r3, #0
}
 801b0d8:	4618      	mov	r0, r3
 801b0da:	370c      	adds	r7, #12
 801b0dc:	46bd      	mov	sp, r7
 801b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0e2:	4770      	bx	lr

0801b0e4 <_ZN19MockActualCallTrace31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockActualCallTrace::returnUnsignedIntValueOrDefault(unsigned int)
{
 801b0e4:	b580      	push	{r7, lr}
 801b0e6:	b082      	sub	sp, #8
 801b0e8:	af00      	add	r7, sp, #0
 801b0ea:	6078      	str	r0, [r7, #4]
 801b0ec:	6039      	str	r1, [r7, #0]
    return returnUnsignedIntValue();
 801b0ee:	687b      	ldr	r3, [r7, #4]
 801b0f0:	681b      	ldr	r3, [r3, #0]
 801b0f2:	3388      	adds	r3, #136	; 0x88
 801b0f4:	681b      	ldr	r3, [r3, #0]
 801b0f6:	6878      	ldr	r0, [r7, #4]
 801b0f8:	4798      	blx	r3
 801b0fa:	4603      	mov	r3, r0
}
 801b0fc:	4618      	mov	r0, r3
 801b0fe:	3708      	adds	r7, #8
 801b100:	46bd      	mov	sp, r7
 801b102:	bd80      	pop	{r7, pc}

0801b104 <_ZN19MockActualCallTrace8onObjectEPKv>:

MockActualCall& MockActualCallTrace::onObject(const void* objectPtr)
{
 801b104:	b590      	push	{r4, r7, lr}
 801b106:	b085      	sub	sp, #20
 801b108:	af00      	add	r7, sp, #0
 801b10a:	6078      	str	r0, [r7, #4]
 801b10c:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " onObject:";
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	3304      	adds	r3, #4
 801b112:	490e      	ldr	r1, [pc, #56]	; (801b14c <_ZN19MockActualCallTrace8onObjectEPKv+0x48>)
 801b114:	4618      	mov	r0, r3
 801b116:	f7f3 fb7d 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(objectPtr);
 801b11a:	687b      	ldr	r3, [r7, #4]
 801b11c:	1d1c      	adds	r4, r3, #4
 801b11e:	f107 0308 	add.w	r3, r7, #8
 801b122:	6839      	ldr	r1, [r7, #0]
 801b124:	4618      	mov	r0, r3
 801b126:	f7f3 fdd1 	bl	800eccc <_Z10StringFromPKv>
 801b12a:	f107 0308 	add.w	r3, r7, #8
 801b12e:	4619      	mov	r1, r3
 801b130:	4620      	mov	r0, r4
 801b132:	f7f3 fb5d 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801b136:	f107 0308 	add.w	r3, r7, #8
 801b13a:	4618      	mov	r0, r3
 801b13c:	f7f3 fadb 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    return *this;
 801b140:	687b      	ldr	r3, [r7, #4]
}
 801b142:	4618      	mov	r0, r3
 801b144:	3714      	adds	r7, #20
 801b146:	46bd      	mov	sp, r7
 801b148:	bd90      	pop	{r4, r7, pc}
 801b14a:	bf00      	nop
 801b14c:	080279dc 	.word	0x080279dc

0801b150 <_ZN19MockActualCallTrace8instanceEv>:
}

MockActualCallTrace* MockActualCallTrace::instance_ = NULLPTR;

MockActualCallTrace& MockActualCallTrace::instance()
{
 801b150:	b598      	push	{r3, r4, r7, lr}
 801b152:	af00      	add	r7, sp, #0
    if (instance_ == NULLPTR)
 801b154:	4b09      	ldr	r3, [pc, #36]	; (801b17c <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 801b156:	681b      	ldr	r3, [r3, #0]
 801b158:	2b00      	cmp	r3, #0
 801b15a:	d10b      	bne.n	801b174 <_ZN19MockActualCallTrace8instanceEv+0x24>
        instance_ = new MockActualCallTrace;
 801b15c:	f240 32f3 	movw	r2, #1011	; 0x3f3
 801b160:	4907      	ldr	r1, [pc, #28]	; (801b180 <_ZN19MockActualCallTrace8instanceEv+0x30>)
 801b162:	200c      	movs	r0, #12
 801b164:	f7f0 fb4c 	bl	800b800 <_ZnwjPKci>
 801b168:	4604      	mov	r4, r0
 801b16a:	4620      	mov	r0, r4
 801b16c:	f7ff fa4c 	bl	801a608 <_ZN19MockActualCallTraceC1Ev>
 801b170:	4b02      	ldr	r3, [pc, #8]	; (801b17c <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 801b172:	601c      	str	r4, [r3, #0]
    return *instance_;
 801b174:	4b01      	ldr	r3, [pc, #4]	; (801b17c <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 801b176:	681b      	ldr	r3, [r3, #0]
}
 801b178:	4618      	mov	r0, r3
 801b17a:	bd98      	pop	{r3, r4, r7, pc}
 801b17c:	20000f70 	.word	0x20000f70
 801b180:	080278c0 	.word	0x080278c0

0801b184 <_ZN19MockActualCallTrace13clearInstanceEv>:

void MockActualCallTrace::clearInstance()
{
 801b184:	b580      	push	{r7, lr}
 801b186:	af00      	add	r7, sp, #0
    delete instance_;
 801b188:	4b06      	ldr	r3, [pc, #24]	; (801b1a4 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 801b18a:	681b      	ldr	r3, [r3, #0]
 801b18c:	2b00      	cmp	r3, #0
 801b18e:	d004      	beq.n	801b19a <_ZN19MockActualCallTrace13clearInstanceEv+0x16>
 801b190:	681a      	ldr	r2, [r3, #0]
 801b192:	3204      	adds	r2, #4
 801b194:	6812      	ldr	r2, [r2, #0]
 801b196:	4618      	mov	r0, r3
 801b198:	4790      	blx	r2
    instance_ = NULLPTR;
 801b19a:	4b02      	ldr	r3, [pc, #8]	; (801b1a4 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 801b19c:	2200      	movs	r2, #0
 801b19e:	601a      	str	r2, [r3, #0]
}
 801b1a0:	bf00      	nop
 801b1a2:	bd80      	pop	{r7, pc}
 801b1a4:	20000f70 	.word	0x20000f70

0801b1a8 <_ZN21MockIgnoredActualCallC1Ev>:
class MockIgnoredActualCall: public MockActualCall
 801b1a8:	b580      	push	{r7, lr}
 801b1aa:	b082      	sub	sp, #8
 801b1ac:	af00      	add	r7, sp, #0
 801b1ae:	6078      	str	r0, [r7, #4]
 801b1b0:	687b      	ldr	r3, [r7, #4]
 801b1b2:	4618      	mov	r0, r3
 801b1b4:	f7fd fe9a 	bl	8018eec <_ZN14MockActualCallC1Ev>
 801b1b8:	4a03      	ldr	r2, [pc, #12]	; (801b1c8 <_ZN21MockIgnoredActualCallC1Ev+0x20>)
 801b1ba:	687b      	ldr	r3, [r7, #4]
 801b1bc:	601a      	str	r2, [r3, #0]
 801b1be:	687b      	ldr	r3, [r7, #4]
 801b1c0:	4618      	mov	r0, r3
 801b1c2:	3708      	adds	r7, #8
 801b1c4:	46bd      	mov	sp, r7
 801b1c6:	bd80      	pop	{r7, pc}
 801b1c8:	0802a8ac 	.word	0x0802a8ac

0801b1cc <__tcf_0>:

MockIgnoredActualCall& MockIgnoredActualCall::instance()
{
    static MockIgnoredActualCall call;
 801b1cc:	b580      	push	{r7, lr}
 801b1ce:	af00      	add	r7, sp, #0
 801b1d0:	4801      	ldr	r0, [pc, #4]	; (801b1d8 <__tcf_0+0xc>)
 801b1d2:	f000 f831 	bl	801b238 <_ZN21MockIgnoredActualCallD1Ev>
 801b1d6:	bd80      	pop	{r7, pc}
 801b1d8:	20000f74 	.word	0x20000f74

0801b1dc <_ZN21MockIgnoredActualCall8instanceEv>:
{
 801b1dc:	b580      	push	{r7, lr}
 801b1de:	af00      	add	r7, sp, #0
    static MockIgnoredActualCall call;
 801b1e0:	4b12      	ldr	r3, [pc, #72]	; (801b22c <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 801b1e2:	781b      	ldrb	r3, [r3, #0]
 801b1e4:	f3bf 8f5b 	dmb	ish
 801b1e8:	b2db      	uxtb	r3, r3
 801b1ea:	f003 0301 	and.w	r3, r3, #1
 801b1ee:	2b00      	cmp	r3, #0
 801b1f0:	bf0c      	ite	eq
 801b1f2:	2301      	moveq	r3, #1
 801b1f4:	2300      	movne	r3, #0
 801b1f6:	b2db      	uxtb	r3, r3
 801b1f8:	2b00      	cmp	r3, #0
 801b1fa:	d013      	beq.n	801b224 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 801b1fc:	480b      	ldr	r0, [pc, #44]	; (801b22c <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 801b1fe:	f005 fd83 	bl	8020d08 <__cxa_guard_acquire>
 801b202:	4603      	mov	r3, r0
 801b204:	2b00      	cmp	r3, #0
 801b206:	bf14      	ite	ne
 801b208:	2301      	movne	r3, #1
 801b20a:	2300      	moveq	r3, #0
 801b20c:	b2db      	uxtb	r3, r3
 801b20e:	2b00      	cmp	r3, #0
 801b210:	d008      	beq.n	801b224 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 801b212:	4807      	ldr	r0, [pc, #28]	; (801b230 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
 801b214:	f7ff ffc8 	bl	801b1a8 <_ZN21MockIgnoredActualCallC1Ev>
 801b218:	4804      	ldr	r0, [pc, #16]	; (801b22c <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 801b21a:	f005 fd81 	bl	8020d20 <__cxa_guard_release>
 801b21e:	4805      	ldr	r0, [pc, #20]	; (801b234 <_ZN21MockIgnoredActualCall8instanceEv+0x58>)
 801b220:	f005 fda5 	bl	8020d6e <atexit>
    return call;
 801b224:	4b02      	ldr	r3, [pc, #8]	; (801b230 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
}
 801b226:	4618      	mov	r0, r3
 801b228:	bd80      	pop	{r7, pc}
 801b22a:	bf00      	nop
 801b22c:	20000f78 	.word	0x20000f78
 801b230:	20000f74 	.word	0x20000f74
 801b234:	0801b1cd 	.word	0x0801b1cd

0801b238 <_ZN21MockIgnoredActualCallD1Ev>:
 801b238:	b580      	push	{r7, lr}
 801b23a:	b082      	sub	sp, #8
 801b23c:	af00      	add	r7, sp, #0
 801b23e:	6078      	str	r0, [r7, #4]
 801b240:	4a05      	ldr	r2, [pc, #20]	; (801b258 <_ZN21MockIgnoredActualCallD1Ev+0x20>)
 801b242:	687b      	ldr	r3, [r7, #4]
 801b244:	601a      	str	r2, [r3, #0]
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	4618      	mov	r0, r3
 801b24a:	f7fd fe5f 	bl	8018f0c <_ZN14MockActualCallD1Ev>
 801b24e:	687b      	ldr	r3, [r7, #4]
 801b250:	4618      	mov	r0, r3
 801b252:	3708      	adds	r7, #8
 801b254:	46bd      	mov	sp, r7
 801b256:	bd80      	pop	{r7, pc}
 801b258:	0802a8ac 	.word	0x0802a8ac

0801b25c <_ZN21MockIgnoredActualCallD0Ev>:
 801b25c:	b580      	push	{r7, lr}
 801b25e:	b082      	sub	sp, #8
 801b260:	af00      	add	r7, sp, #0
 801b262:	6078      	str	r0, [r7, #4]
 801b264:	6878      	ldr	r0, [r7, #4]
 801b266:	f7ff ffe7 	bl	801b238 <_ZN21MockIgnoredActualCallD1Ev>
 801b26a:	2104      	movs	r1, #4
 801b26c:	6878      	ldr	r0, [r7, #4]
 801b26e:	f7f0 fadb 	bl	800b828 <_ZdlPvj>
 801b272:	687b      	ldr	r3, [r7, #4]
 801b274:	4618      	mov	r0, r3
 801b276:	3708      	adds	r7, #8
 801b278:	46bd      	mov	sp, r7
 801b27a:	bd80      	pop	{r7, pc}

0801b27c <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>:
{
public:
    MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName);
};

class MockNoWayToCopyCustomTypeFailure : public MockFailure
 801b27c:	b580      	push	{r7, lr}
 801b27e:	b082      	sub	sp, #8
 801b280:	af00      	add	r7, sp, #0
 801b282:	6078      	str	r0, [r7, #4]
 801b284:	4a05      	ldr	r2, [pc, #20]	; (801b29c <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev+0x20>)
 801b286:	687b      	ldr	r3, [r7, #4]
 801b288:	601a      	str	r2, [r3, #0]
 801b28a:	687b      	ldr	r3, [r7, #4]
 801b28c:	4618      	mov	r0, r3
 801b28e:	f7f0 fefd 	bl	800c08c <_ZN11MockFailureD1Ev>
 801b292:	687b      	ldr	r3, [r7, #4]
 801b294:	4618      	mov	r0, r3
 801b296:	3708      	adds	r7, #8
 801b298:	46bd      	mov	sp, r7
 801b29a:	bd80      	pop	{r7, pc}
 801b29c:	0802a7a4 	.word	0x0802a7a4

0801b2a0 <_ZN32MockNoWayToCopyCustomTypeFailureD0Ev>:
 801b2a0:	b580      	push	{r7, lr}
 801b2a2:	b082      	sub	sp, #8
 801b2a4:	af00      	add	r7, sp, #0
 801b2a6:	6078      	str	r0, [r7, #4]
 801b2a8:	6878      	ldr	r0, [r7, #4]
 801b2aa:	f7ff ffe7 	bl	801b27c <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
 801b2ae:	2134      	movs	r1, #52	; 0x34
 801b2b0:	6878      	ldr	r0, [r7, #4]
 801b2b2:	f7f0 fab9 	bl	800b828 <_ZdlPvj>
 801b2b6:	687b      	ldr	r3, [r7, #4]
 801b2b8:	4618      	mov	r0, r3
 801b2ba:	3708      	adds	r7, #8
 801b2bc:	46bd      	mov	sp, r7
 801b2be:	bd80      	pop	{r7, pc}

0801b2c0 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>:
class MockUnexpectedCallHappenedFailure : public MockFailure
 801b2c0:	b580      	push	{r7, lr}
 801b2c2:	b082      	sub	sp, #8
 801b2c4:	af00      	add	r7, sp, #0
 801b2c6:	6078      	str	r0, [r7, #4]
 801b2c8:	4a05      	ldr	r2, [pc, #20]	; (801b2e0 <_ZN33MockUnexpectedCallHappenedFailureD1Ev+0x20>)
 801b2ca:	687b      	ldr	r3, [r7, #4]
 801b2cc:	601a      	str	r2, [r3, #0]
 801b2ce:	687b      	ldr	r3, [r7, #4]
 801b2d0:	4618      	mov	r0, r3
 801b2d2:	f7f0 fedb 	bl	800c08c <_ZN11MockFailureD1Ev>
 801b2d6:	687b      	ldr	r3, [r7, #4]
 801b2d8:	4618      	mov	r0, r3
 801b2da:	3708      	adds	r7, #8
 801b2dc:	46bd      	mov	sp, r7
 801b2de:	bd80      	pop	{r7, pc}
 801b2e0:	0802a880 	.word	0x0802a880

0801b2e4 <_ZN33MockUnexpectedCallHappenedFailureD0Ev>:
 801b2e4:	b580      	push	{r7, lr}
 801b2e6:	b082      	sub	sp, #8
 801b2e8:	af00      	add	r7, sp, #0
 801b2ea:	6078      	str	r0, [r7, #4]
 801b2ec:	6878      	ldr	r0, [r7, #4]
 801b2ee:	f7ff ffe7 	bl	801b2c0 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 801b2f2:	2134      	movs	r1, #52	; 0x34
 801b2f4:	6878      	ldr	r0, [r7, #4]
 801b2f6:	f7f0 fa97 	bl	800b828 <_ZdlPvj>
 801b2fa:	687b      	ldr	r3, [r7, #4]
 801b2fc:	4618      	mov	r0, r3
 801b2fe:	3708      	adds	r7, #8
 801b300:	46bd      	mov	sp, r7
 801b302:	bd80      	pop	{r7, pc}

0801b304 <_ZN35MockUnexpectedInputParameterFailureD1Ev>:
class MockUnexpectedInputParameterFailure : public MockFailure
 801b304:	b580      	push	{r7, lr}
 801b306:	b082      	sub	sp, #8
 801b308:	af00      	add	r7, sp, #0
 801b30a:	6078      	str	r0, [r7, #4]
 801b30c:	4a05      	ldr	r2, [pc, #20]	; (801b324 <_ZN35MockUnexpectedInputParameterFailureD1Ev+0x20>)
 801b30e:	687b      	ldr	r3, [r7, #4]
 801b310:	601a      	str	r2, [r3, #0]
 801b312:	687b      	ldr	r3, [r7, #4]
 801b314:	4618      	mov	r0, r3
 801b316:	f7f0 feb9 	bl	800c08c <_ZN11MockFailureD1Ev>
 801b31a:	687b      	ldr	r3, [r7, #4]
 801b31c:	4618      	mov	r0, r3
 801b31e:	3708      	adds	r7, #8
 801b320:	46bd      	mov	sp, r7
 801b322:	bd80      	pop	{r7, pc}
 801b324:	0802a854 	.word	0x0802a854

0801b328 <_ZN35MockUnexpectedInputParameterFailureD0Ev>:
 801b328:	b580      	push	{r7, lr}
 801b32a:	b082      	sub	sp, #8
 801b32c:	af00      	add	r7, sp, #0
 801b32e:	6078      	str	r0, [r7, #4]
 801b330:	6878      	ldr	r0, [r7, #4]
 801b332:	f7ff ffe7 	bl	801b304 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 801b336:	2134      	movs	r1, #52	; 0x34
 801b338:	6878      	ldr	r0, [r7, #4]
 801b33a:	f7f0 fa75 	bl	800b828 <_ZdlPvj>
 801b33e:	687b      	ldr	r3, [r7, #4]
 801b340:	4618      	mov	r0, r3
 801b342:	3708      	adds	r7, #8
 801b344:	46bd      	mov	sp, r7
 801b346:	bd80      	pop	{r7, pc}

0801b348 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>:
class MockUnexpectedOutputParameterFailure : public MockFailure
 801b348:	b580      	push	{r7, lr}
 801b34a:	b082      	sub	sp, #8
 801b34c:	af00      	add	r7, sp, #0
 801b34e:	6078      	str	r0, [r7, #4]
 801b350:	4a05      	ldr	r2, [pc, #20]	; (801b368 <_ZN36MockUnexpectedOutputParameterFailureD1Ev+0x20>)
 801b352:	687b      	ldr	r3, [r7, #4]
 801b354:	601a      	str	r2, [r3, #0]
 801b356:	687b      	ldr	r3, [r7, #4]
 801b358:	4618      	mov	r0, r3
 801b35a:	f7f0 fe97 	bl	800c08c <_ZN11MockFailureD1Ev>
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	4618      	mov	r0, r3
 801b362:	3708      	adds	r7, #8
 801b364:	46bd      	mov	sp, r7
 801b366:	bd80      	pop	{r7, pc}
 801b368:	0802a828 	.word	0x0802a828

0801b36c <_ZN36MockUnexpectedOutputParameterFailureD0Ev>:
 801b36c:	b580      	push	{r7, lr}
 801b36e:	b082      	sub	sp, #8
 801b370:	af00      	add	r7, sp, #0
 801b372:	6078      	str	r0, [r7, #4]
 801b374:	6878      	ldr	r0, [r7, #4]
 801b376:	f7ff ffe7 	bl	801b348 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 801b37a:	2134      	movs	r1, #52	; 0x34
 801b37c:	6878      	ldr	r0, [r7, #4]
 801b37e:	f7f0 fa53 	bl	800b828 <_ZdlPvj>
 801b382:	687b      	ldr	r3, [r7, #4]
 801b384:	4618      	mov	r0, r3
 801b386:	3708      	adds	r7, #8
 801b388:	46bd      	mov	sp, r7
 801b38a:	bd80      	pop	{r7, pc}

0801b38c <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>:
class MockNoWayToCompareCustomTypeFailure : public MockFailure
 801b38c:	b580      	push	{r7, lr}
 801b38e:	b082      	sub	sp, #8
 801b390:	af00      	add	r7, sp, #0
 801b392:	6078      	str	r0, [r7, #4]
 801b394:	4a05      	ldr	r2, [pc, #20]	; (801b3ac <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev+0x20>)
 801b396:	687b      	ldr	r3, [r7, #4]
 801b398:	601a      	str	r2, [r3, #0]
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	4618      	mov	r0, r3
 801b39e:	f7f0 fe75 	bl	800c08c <_ZN11MockFailureD1Ev>
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	4618      	mov	r0, r3
 801b3a6:	3708      	adds	r7, #8
 801b3a8:	46bd      	mov	sp, r7
 801b3aa:	bd80      	pop	{r7, pc}
 801b3ac:	0802a7d0 	.word	0x0802a7d0

0801b3b0 <_ZN35MockNoWayToCompareCustomTypeFailureD0Ev>:
 801b3b0:	b580      	push	{r7, lr}
 801b3b2:	b082      	sub	sp, #8
 801b3b4:	af00      	add	r7, sp, #0
 801b3b6:	6078      	str	r0, [r7, #4]
 801b3b8:	6878      	ldr	r0, [r7, #4]
 801b3ba:	f7ff ffe7 	bl	801b38c <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 801b3be:	2134      	movs	r1, #52	; 0x34
 801b3c0:	6878      	ldr	r0, [r7, #4]
 801b3c2:	f7f0 fa31 	bl	800b828 <_ZdlPvj>
 801b3c6:	687b      	ldr	r3, [r7, #4]
 801b3c8:	4618      	mov	r0, r3
 801b3ca:	3708      	adds	r7, #8
 801b3cc:	46bd      	mov	sp, r7
 801b3ce:	bd80      	pop	{r7, pc}

0801b3d0 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>:
class MockExpectedParameterDidntHappenFailure : public MockFailure
 801b3d0:	b580      	push	{r7, lr}
 801b3d2:	b082      	sub	sp, #8
 801b3d4:	af00      	add	r7, sp, #0
 801b3d6:	6078      	str	r0, [r7, #4]
 801b3d8:	4a05      	ldr	r2, [pc, #20]	; (801b3f0 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev+0x20>)
 801b3da:	687b      	ldr	r3, [r7, #4]
 801b3dc:	601a      	str	r2, [r3, #0]
 801b3de:	687b      	ldr	r3, [r7, #4]
 801b3e0:	4618      	mov	r0, r3
 801b3e2:	f7f0 fe53 	bl	800c08c <_ZN11MockFailureD1Ev>
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	4618      	mov	r0, r3
 801b3ea:	3708      	adds	r7, #8
 801b3ec:	46bd      	mov	sp, r7
 801b3ee:	bd80      	pop	{r7, pc}
 801b3f0:	0802a7fc 	.word	0x0802a7fc

0801b3f4 <_ZN39MockExpectedParameterDidntHappenFailureD0Ev>:
 801b3f4:	b580      	push	{r7, lr}
 801b3f6:	b082      	sub	sp, #8
 801b3f8:	af00      	add	r7, sp, #0
 801b3fa:	6078      	str	r0, [r7, #4]
 801b3fc:	6878      	ldr	r0, [r7, #4]
 801b3fe:	f7ff ffe7 	bl	801b3d0 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 801b402:	2134      	movs	r1, #52	; 0x34
 801b404:	6878      	ldr	r0, [r7, #4]
 801b406:	f7f0 fa0f 	bl	800b828 <_ZdlPvj>
 801b40a:	687b      	ldr	r3, [r7, #4]
 801b40c:	4618      	mov	r0, r3
 801b40e:	3708      	adds	r7, #8
 801b410:	46bd      	mov	sp, r7
 801b412:	bd80      	pop	{r7, pc}

0801b414 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>:
{
public:
    MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* expected, const MockExpectedCallsList& expectations);
};

class MockExpectedObjectDidntHappenFailure : public MockFailure
 801b414:	b580      	push	{r7, lr}
 801b416:	b082      	sub	sp, #8
 801b418:	af00      	add	r7, sp, #0
 801b41a:	6078      	str	r0, [r7, #4]
 801b41c:	4a05      	ldr	r2, [pc, #20]	; (801b434 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev+0x20>)
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	601a      	str	r2, [r3, #0]
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	4618      	mov	r0, r3
 801b426:	f7f0 fe31 	bl	800c08c <_ZN11MockFailureD1Ev>
 801b42a:	687b      	ldr	r3, [r7, #4]
 801b42c:	4618      	mov	r0, r3
 801b42e:	3708      	adds	r7, #8
 801b430:	46bd      	mov	sp, r7
 801b432:	bd80      	pop	{r7, pc}
 801b434:	0802a74c 	.word	0x0802a74c

0801b438 <_ZN36MockExpectedObjectDidntHappenFailureD0Ev>:
 801b438:	b580      	push	{r7, lr}
 801b43a:	b082      	sub	sp, #8
 801b43c:	af00      	add	r7, sp, #0
 801b43e:	6078      	str	r0, [r7, #4]
 801b440:	6878      	ldr	r0, [r7, #4]
 801b442:	f7ff ffe7 	bl	801b414 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 801b446:	2134      	movs	r1, #52	; 0x34
 801b448:	6878      	ldr	r0, [r7, #4]
 801b44a:	f7f0 f9ed 	bl	800b828 <_ZdlPvj>
 801b44e:	687b      	ldr	r3, [r7, #4]
 801b450:	4618      	mov	r0, r3
 801b452:	3708      	adds	r7, #8
 801b454:	46bd      	mov	sp, r7
 801b456:	bd80      	pop	{r7, pc}

0801b458 <_ZN27MockUnexpectedObjectFailureD1Ev>:
class MockUnexpectedObjectFailure : public MockFailure
 801b458:	b580      	push	{r7, lr}
 801b45a:	b082      	sub	sp, #8
 801b45c:	af00      	add	r7, sp, #0
 801b45e:	6078      	str	r0, [r7, #4]
 801b460:	4a05      	ldr	r2, [pc, #20]	; (801b478 <_ZN27MockUnexpectedObjectFailureD1Ev+0x20>)
 801b462:	687b      	ldr	r3, [r7, #4]
 801b464:	601a      	str	r2, [r3, #0]
 801b466:	687b      	ldr	r3, [r7, #4]
 801b468:	4618      	mov	r0, r3
 801b46a:	f7f0 fe0f 	bl	800c08c <_ZN11MockFailureD1Ev>
 801b46e:	687b      	ldr	r3, [r7, #4]
 801b470:	4618      	mov	r0, r3
 801b472:	3708      	adds	r7, #8
 801b474:	46bd      	mov	sp, r7
 801b476:	bd80      	pop	{r7, pc}
 801b478:	0802a778 	.word	0x0802a778

0801b47c <_ZN27MockUnexpectedObjectFailureD0Ev>:
 801b47c:	b580      	push	{r7, lr}
 801b47e:	b082      	sub	sp, #8
 801b480:	af00      	add	r7, sp, #0
 801b482:	6078      	str	r0, [r7, #4]
 801b484:	6878      	ldr	r0, [r7, #4]
 801b486:	f7ff ffe7 	bl	801b458 <_ZN27MockUnexpectedObjectFailureD1Ev>
 801b48a:	2134      	movs	r1, #52	; 0x34
 801b48c:	6878      	ldr	r0, [r7, #4]
 801b48e:	f7f0 f9cb 	bl	800b828 <_ZdlPvj>
 801b492:	687b      	ldr	r3, [r7, #4]
 801b494:	4618      	mov	r0, r3
 801b496:	3708      	adds	r7, #8
 801b498:	46bd      	mov	sp, r7
 801b49a:	bd80      	pop	{r7, pc}

0801b49c <_ZN23MockCheckedExpectedCall13withCallOrderEj>:
    MockCheckedExpectedCall();
    MockCheckedExpectedCall(unsigned int numCalls);
    virtual ~MockCheckedExpectedCall() _destructor_override;

    virtual MockExpectedCall& withName(const SimpleString& name) _override;
    virtual MockExpectedCall& withCallOrder(unsigned int callOrder) _override { return withCallOrder(callOrder, callOrder); }
 801b49c:	b580      	push	{r7, lr}
 801b49e:	b082      	sub	sp, #8
 801b4a0:	af00      	add	r7, sp, #0
 801b4a2:	6078      	str	r0, [r7, #4]
 801b4a4:	6039      	str	r1, [r7, #0]
 801b4a6:	687b      	ldr	r3, [r7, #4]
 801b4a8:	681b      	ldr	r3, [r3, #0]
 801b4aa:	3310      	adds	r3, #16
 801b4ac:	681b      	ldr	r3, [r3, #0]
 801b4ae:	683a      	ldr	r2, [r7, #0]
 801b4b0:	6839      	ldr	r1, [r7, #0]
 801b4b2:	6878      	ldr	r0, [r7, #4]
 801b4b4:	4798      	blx	r3
 801b4b6:	4603      	mov	r3, r0
 801b4b8:	4618      	mov	r0, r3
 801b4ba:	3708      	adds	r7, #8
 801b4bc:	46bd      	mov	sp, r7
 801b4be:	bd80      	pop	{r7, pc}

0801b4c0 <_ZN23MockIgnoredExpectedCall8withNameERK12SimpleString>:

class MockIgnoredExpectedCall: public MockExpectedCall
{
public:

    virtual MockExpectedCall& withName(const SimpleString&) _override { return *this;}
 801b4c0:	b480      	push	{r7}
 801b4c2:	b083      	sub	sp, #12
 801b4c4:	af00      	add	r7, sp, #0
 801b4c6:	6078      	str	r0, [r7, #4]
 801b4c8:	6039      	str	r1, [r7, #0]
 801b4ca:	687b      	ldr	r3, [r7, #4]
 801b4cc:	4618      	mov	r0, r3
 801b4ce:	370c      	adds	r7, #12
 801b4d0:	46bd      	mov	sp, r7
 801b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4d6:	4770      	bx	lr

0801b4d8 <_ZN23MockIgnoredExpectedCall13withCallOrderEj>:
    virtual MockExpectedCall& withCallOrder(unsigned int) _override { return *this; }
 801b4d8:	b480      	push	{r7}
 801b4da:	b083      	sub	sp, #12
 801b4dc:	af00      	add	r7, sp, #0
 801b4de:	6078      	str	r0, [r7, #4]
 801b4e0:	6039      	str	r1, [r7, #0]
 801b4e2:	687b      	ldr	r3, [r7, #4]
 801b4e4:	4618      	mov	r0, r3
 801b4e6:	370c      	adds	r7, #12
 801b4e8:	46bd      	mov	sp, r7
 801b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4ee:	4770      	bx	lr

0801b4f0 <_ZN23MockIgnoredExpectedCall13withCallOrderEjj>:
    virtual MockExpectedCall& withCallOrder(unsigned int, unsigned int) _override { return *this; }
 801b4f0:	b480      	push	{r7}
 801b4f2:	b085      	sub	sp, #20
 801b4f4:	af00      	add	r7, sp, #0
 801b4f6:	60f8      	str	r0, [r7, #12]
 801b4f8:	60b9      	str	r1, [r7, #8]
 801b4fa:	607a      	str	r2, [r7, #4]
 801b4fc:	68fb      	ldr	r3, [r7, #12]
 801b4fe:	4618      	mov	r0, r3
 801b500:	3714      	adds	r7, #20
 801b502:	46bd      	mov	sp, r7
 801b504:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b508:	4770      	bx	lr

0801b50a <_ZN23MockIgnoredExpectedCall17withBoolParameterERK12SimpleStringb>:
    virtual MockExpectedCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 801b50a:	b480      	push	{r7}
 801b50c:	b085      	sub	sp, #20
 801b50e:	af00      	add	r7, sp, #0
 801b510:	60f8      	str	r0, [r7, #12]
 801b512:	60b9      	str	r1, [r7, #8]
 801b514:	4613      	mov	r3, r2
 801b516:	71fb      	strb	r3, [r7, #7]
 801b518:	68fb      	ldr	r3, [r7, #12]
 801b51a:	4618      	mov	r0, r3
 801b51c:	3714      	adds	r7, #20
 801b51e:	46bd      	mov	sp, r7
 801b520:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b524:	4770      	bx	lr

0801b526 <_ZN23MockIgnoredExpectedCall16withIntParameterERK12SimpleStringi>:
    virtual MockExpectedCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 801b526:	b480      	push	{r7}
 801b528:	b085      	sub	sp, #20
 801b52a:	af00      	add	r7, sp, #0
 801b52c:	60f8      	str	r0, [r7, #12]
 801b52e:	60b9      	str	r1, [r7, #8]
 801b530:	607a      	str	r2, [r7, #4]
 801b532:	68fb      	ldr	r3, [r7, #12]
 801b534:	4618      	mov	r0, r3
 801b536:	3714      	adds	r7, #20
 801b538:	46bd      	mov	sp, r7
 801b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b53e:	4770      	bx	lr

0801b540 <_ZN23MockIgnoredExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockExpectedCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override{ return *this; }
 801b540:	b480      	push	{r7}
 801b542:	b085      	sub	sp, #20
 801b544:	af00      	add	r7, sp, #0
 801b546:	60f8      	str	r0, [r7, #12]
 801b548:	60b9      	str	r1, [r7, #8]
 801b54a:	607a      	str	r2, [r7, #4]
 801b54c:	68fb      	ldr	r3, [r7, #12]
 801b54e:	4618      	mov	r0, r3
 801b550:	3714      	adds	r7, #20
 801b552:	46bd      	mov	sp, r7
 801b554:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b558:	4770      	bx	lr

0801b55a <_ZN23MockIgnoredExpectedCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockExpectedCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 801b55a:	b480      	push	{r7}
 801b55c:	b085      	sub	sp, #20
 801b55e:	af00      	add	r7, sp, #0
 801b560:	60f8      	str	r0, [r7, #12]
 801b562:	60b9      	str	r1, [r7, #8]
 801b564:	607a      	str	r2, [r7, #4]
 801b566:	68fb      	ldr	r3, [r7, #12]
 801b568:	4618      	mov	r0, r3
 801b56a:	3714      	adds	r7, #20
 801b56c:	46bd      	mov	sp, r7
 801b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b572:	4770      	bx	lr

0801b574 <_ZN23MockIgnoredExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockExpectedCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 801b574:	b480      	push	{r7}
 801b576:	b085      	sub	sp, #20
 801b578:	af00      	add	r7, sp, #0
 801b57a:	60f8      	str	r0, [r7, #12]
 801b57c:	60b9      	str	r1, [r7, #8]
 801b57e:	607a      	str	r2, [r7, #4]
 801b580:	68fb      	ldr	r3, [r7, #12]
 801b582:	4618      	mov	r0, r3
 801b584:	3714      	adds	r7, #20
 801b586:	46bd      	mov	sp, r7
 801b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b58c:	4770      	bx	lr

0801b58e <_ZN23MockIgnoredExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockExpectedCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 801b58e:	b480      	push	{r7}
 801b590:	b085      	sub	sp, #20
 801b592:	af00      	add	r7, sp, #0
 801b594:	60f8      	str	r0, [r7, #12]
 801b596:	60b9      	str	r1, [r7, #8]
 801b598:	4639      	mov	r1, r7
 801b59a:	e881 000c 	stmia.w	r1, {r2, r3}
 801b59e:	68fb      	ldr	r3, [r7, #12]
 801b5a0:	4618      	mov	r0, r3
 801b5a2:	3714      	adds	r7, #20
 801b5a4:	46bd      	mov	sp, r7
 801b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5aa:	4770      	bx	lr

0801b5ac <_ZN23MockIgnoredExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockExpectedCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 801b5ac:	b480      	push	{r7}
 801b5ae:	b085      	sub	sp, #20
 801b5b0:	af00      	add	r7, sp, #0
 801b5b2:	60f8      	str	r0, [r7, #12]
 801b5b4:	60b9      	str	r1, [r7, #8]
 801b5b6:	4639      	mov	r1, r7
 801b5b8:	e881 000c 	stmia.w	r1, {r2, r3}
 801b5bc:	68fb      	ldr	r3, [r7, #12]
 801b5be:	4618      	mov	r0, r3
 801b5c0:	3714      	adds	r7, #20
 801b5c2:	46bd      	mov	sp, r7
 801b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5c8:	4770      	bx	lr

0801b5ca <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 801b5ca:	b480      	push	{r7}
 801b5cc:	b085      	sub	sp, #20
 801b5ce:	af00      	add	r7, sp, #0
 801b5d0:	60f8      	str	r0, [r7, #12]
 801b5d2:	60b9      	str	r1, [r7, #8]
 801b5d4:	ed87 0b00 	vstr	d0, [r7]
 801b5d8:	68fb      	ldr	r3, [r7, #12]
 801b5da:	4618      	mov	r0, r3
 801b5dc:	3714      	adds	r7, #20
 801b5de:	46bd      	mov	sp, r7
 801b5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5e4:	4770      	bx	lr

0801b5e6 <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringdd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double, double) _override { return *this; }
 801b5e6:	b480      	push	{r7}
 801b5e8:	b087      	sub	sp, #28
 801b5ea:	af00      	add	r7, sp, #0
 801b5ec:	6178      	str	r0, [r7, #20]
 801b5ee:	6139      	str	r1, [r7, #16]
 801b5f0:	ed87 0b02 	vstr	d0, [r7, #8]
 801b5f4:	ed87 1b00 	vstr	d1, [r7]
 801b5f8:	697b      	ldr	r3, [r7, #20]
 801b5fa:	4618      	mov	r0, r3
 801b5fc:	371c      	adds	r7, #28
 801b5fe:	46bd      	mov	sp, r7
 801b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b604:	4770      	bx	lr

0801b606 <_ZN23MockIgnoredExpectedCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockExpectedCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 801b606:	b480      	push	{r7}
 801b608:	b085      	sub	sp, #20
 801b60a:	af00      	add	r7, sp, #0
 801b60c:	60f8      	str	r0, [r7, #12]
 801b60e:	60b9      	str	r1, [r7, #8]
 801b610:	607a      	str	r2, [r7, #4]
 801b612:	68fb      	ldr	r3, [r7, #12]
 801b614:	4618      	mov	r0, r3
 801b616:	3714      	adds	r7, #20
 801b618:	46bd      	mov	sp, r7
 801b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b61e:	4770      	bx	lr

0801b620 <_ZN23MockIgnoredExpectedCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockExpectedCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 801b620:	b480      	push	{r7}
 801b622:	b085      	sub	sp, #20
 801b624:	af00      	add	r7, sp, #0
 801b626:	60f8      	str	r0, [r7, #12]
 801b628:	60b9      	str	r1, [r7, #8]
 801b62a:	607a      	str	r2, [r7, #4]
 801b62c:	68fb      	ldr	r3, [r7, #12]
 801b62e:	4618      	mov	r0, r3
 801b630:	3714      	adds	r7, #20
 801b632:	46bd      	mov	sp, r7
 801b634:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b638:	4770      	bx	lr

0801b63a <_ZN23MockIgnoredExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockExpectedCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 801b63a:	b480      	push	{r7}
 801b63c:	b085      	sub	sp, #20
 801b63e:	af00      	add	r7, sp, #0
 801b640:	60f8      	str	r0, [r7, #12]
 801b642:	60b9      	str	r1, [r7, #8]
 801b644:	607a      	str	r2, [r7, #4]
 801b646:	68fb      	ldr	r3, [r7, #12]
 801b648:	4618      	mov	r0, r3
 801b64a:	3714      	adds	r7, #20
 801b64c:	46bd      	mov	sp, r7
 801b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b652:	4770      	bx	lr

0801b654 <_ZN23MockIgnoredExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockExpectedCall& withFunctionPointerParameter(const SimpleString& , void(*)()) _override { return *this; }
 801b654:	b480      	push	{r7}
 801b656:	b085      	sub	sp, #20
 801b658:	af00      	add	r7, sp, #0
 801b65a:	60f8      	str	r0, [r7, #12]
 801b65c:	60b9      	str	r1, [r7, #8]
 801b65e:	607a      	str	r2, [r7, #4]
 801b660:	68fb      	ldr	r3, [r7, #12]
 801b662:	4618      	mov	r0, r3
 801b664:	3714      	adds	r7, #20
 801b666:	46bd      	mov	sp, r7
 801b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b66c:	4770      	bx	lr

0801b66e <_ZN23MockIgnoredExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockExpectedCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override { return *this; }
 801b66e:	b480      	push	{r7}
 801b670:	b085      	sub	sp, #20
 801b672:	af00      	add	r7, sp, #0
 801b674:	60f8      	str	r0, [r7, #12]
 801b676:	60b9      	str	r1, [r7, #8]
 801b678:	607a      	str	r2, [r7, #4]
 801b67a:	603b      	str	r3, [r7, #0]
 801b67c:	68fb      	ldr	r3, [r7, #12]
 801b67e:	4618      	mov	r0, r3
 801b680:	3714      	adds	r7, #20
 801b682:	46bd      	mov	sp, r7
 801b684:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b688:	4770      	bx	lr

0801b68a <_ZN23MockIgnoredExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 801b68a:	b480      	push	{r7}
 801b68c:	b085      	sub	sp, #20
 801b68e:	af00      	add	r7, sp, #0
 801b690:	60f8      	str	r0, [r7, #12]
 801b692:	60b9      	str	r1, [r7, #8]
 801b694:	607a      	str	r2, [r7, #4]
 801b696:	603b      	str	r3, [r7, #0]
 801b698:	68fb      	ldr	r3, [r7, #12]
 801b69a:	4618      	mov	r0, r3
 801b69c:	3714      	adds	r7, #20
 801b69e:	46bd      	mov	sp, r7
 801b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6a4:	4770      	bx	lr

0801b6a6 <_ZN23MockIgnoredExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:
    virtual MockExpectedCall& withOutputParameterReturning(const SimpleString&, const void*, size_t) _override { return *this; }
 801b6a6:	b480      	push	{r7}
 801b6a8:	b085      	sub	sp, #20
 801b6aa:	af00      	add	r7, sp, #0
 801b6ac:	60f8      	str	r0, [r7, #12]
 801b6ae:	60b9      	str	r1, [r7, #8]
 801b6b0:	607a      	str	r2, [r7, #4]
 801b6b2:	603b      	str	r3, [r7, #0]
 801b6b4:	68fb      	ldr	r3, [r7, #12]
 801b6b6:	4618      	mov	r0, r3
 801b6b8:	3714      	adds	r7, #20
 801b6ba:	46bd      	mov	sp, r7
 801b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6c0:	4770      	bx	lr

0801b6c2 <_ZN23MockIgnoredExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withOutputParameterOfTypeReturning(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 801b6c2:	b480      	push	{r7}
 801b6c4:	b085      	sub	sp, #20
 801b6c6:	af00      	add	r7, sp, #0
 801b6c8:	60f8      	str	r0, [r7, #12]
 801b6ca:	60b9      	str	r1, [r7, #8]
 801b6cc:	607a      	str	r2, [r7, #4]
 801b6ce:	603b      	str	r3, [r7, #0]
 801b6d0:	68fb      	ldr	r3, [r7, #12]
 801b6d2:	4618      	mov	r0, r3
 801b6d4:	3714      	adds	r7, #20
 801b6d6:	46bd      	mov	sp, r7
 801b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6dc:	4770      	bx	lr

0801b6de <_ZN23MockIgnoredExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:
    virtual MockExpectedCall& withUnmodifiedOutputParameter(const SimpleString&) _override { return *this; }
 801b6de:	b480      	push	{r7}
 801b6e0:	b083      	sub	sp, #12
 801b6e2:	af00      	add	r7, sp, #0
 801b6e4:	6078      	str	r0, [r7, #4]
 801b6e6:	6039      	str	r1, [r7, #0]
 801b6e8:	687b      	ldr	r3, [r7, #4]
 801b6ea:	4618      	mov	r0, r3
 801b6ec:	370c      	adds	r7, #12
 801b6ee:	46bd      	mov	sp, r7
 801b6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6f4:	4770      	bx	lr

0801b6f6 <_ZN23MockIgnoredExpectedCall21ignoreOtherParametersEv>:
    virtual MockExpectedCall& ignoreOtherParameters() _override { return *this;}
 801b6f6:	b480      	push	{r7}
 801b6f8:	b083      	sub	sp, #12
 801b6fa:	af00      	add	r7, sp, #0
 801b6fc:	6078      	str	r0, [r7, #4]
 801b6fe:	687b      	ldr	r3, [r7, #4]
 801b700:	4618      	mov	r0, r3
 801b702:	370c      	adds	r7, #12
 801b704:	46bd      	mov	sp, r7
 801b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b70a:	4770      	bx	lr

0801b70c <_ZN23MockIgnoredExpectedCall14andReturnValueEb>:

    virtual MockExpectedCall& andReturnValue(bool) _override { return *this; }
 801b70c:	b480      	push	{r7}
 801b70e:	b083      	sub	sp, #12
 801b710:	af00      	add	r7, sp, #0
 801b712:	6078      	str	r0, [r7, #4]
 801b714:	460b      	mov	r3, r1
 801b716:	70fb      	strb	r3, [r7, #3]
 801b718:	687b      	ldr	r3, [r7, #4]
 801b71a:	4618      	mov	r0, r3
 801b71c:	370c      	adds	r7, #12
 801b71e:	46bd      	mov	sp, r7
 801b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b724:	4770      	bx	lr

0801b726 <_ZN23MockIgnoredExpectedCall14andReturnValueEi>:
    virtual MockExpectedCall& andReturnValue(int) _override { return *this; }
 801b726:	b480      	push	{r7}
 801b728:	b083      	sub	sp, #12
 801b72a:	af00      	add	r7, sp, #0
 801b72c:	6078      	str	r0, [r7, #4]
 801b72e:	6039      	str	r1, [r7, #0]
 801b730:	687b      	ldr	r3, [r7, #4]
 801b732:	4618      	mov	r0, r3
 801b734:	370c      	adds	r7, #12
 801b736:	46bd      	mov	sp, r7
 801b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b73c:	4770      	bx	lr

0801b73e <_ZN23MockIgnoredExpectedCall14andReturnValueEj>:
    virtual MockExpectedCall& andReturnValue(unsigned int) _override { return *this; }
 801b73e:	b480      	push	{r7}
 801b740:	b083      	sub	sp, #12
 801b742:	af00      	add	r7, sp, #0
 801b744:	6078      	str	r0, [r7, #4]
 801b746:	6039      	str	r1, [r7, #0]
 801b748:	687b      	ldr	r3, [r7, #4]
 801b74a:	4618      	mov	r0, r3
 801b74c:	370c      	adds	r7, #12
 801b74e:	46bd      	mov	sp, r7
 801b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b754:	4770      	bx	lr

0801b756 <_ZN23MockIgnoredExpectedCall14andReturnValueEl>:
    virtual MockExpectedCall& andReturnValue(long int) _override { return *this; }
 801b756:	b480      	push	{r7}
 801b758:	b083      	sub	sp, #12
 801b75a:	af00      	add	r7, sp, #0
 801b75c:	6078      	str	r0, [r7, #4]
 801b75e:	6039      	str	r1, [r7, #0]
 801b760:	687b      	ldr	r3, [r7, #4]
 801b762:	4618      	mov	r0, r3
 801b764:	370c      	adds	r7, #12
 801b766:	46bd      	mov	sp, r7
 801b768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b76c:	4770      	bx	lr

0801b76e <_ZN23MockIgnoredExpectedCall14andReturnValueEm>:
    virtual MockExpectedCall& andReturnValue(unsigned long int) _override { return *this; }
 801b76e:	b480      	push	{r7}
 801b770:	b083      	sub	sp, #12
 801b772:	af00      	add	r7, sp, #0
 801b774:	6078      	str	r0, [r7, #4]
 801b776:	6039      	str	r1, [r7, #0]
 801b778:	687b      	ldr	r3, [r7, #4]
 801b77a:	4618      	mov	r0, r3
 801b77c:	370c      	adds	r7, #12
 801b77e:	46bd      	mov	sp, r7
 801b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b784:	4770      	bx	lr

0801b786 <_ZN23MockIgnoredExpectedCall14andReturnValueE17cpputest_longlong>:
    virtual MockExpectedCall& andReturnValue(cpputest_longlong) _override { return *this; }
 801b786:	b480      	push	{r7}
 801b788:	b085      	sub	sp, #20
 801b78a:	af00      	add	r7, sp, #0
 801b78c:	60f8      	str	r0, [r7, #12]
 801b78e:	1d3b      	adds	r3, r7, #4
 801b790:	e883 0006 	stmia.w	r3, {r1, r2}
 801b794:	68fb      	ldr	r3, [r7, #12]
 801b796:	4618      	mov	r0, r3
 801b798:	3714      	adds	r7, #20
 801b79a:	46bd      	mov	sp, r7
 801b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7a0:	4770      	bx	lr

0801b7a2 <_ZN23MockIgnoredExpectedCall14andReturnValueE18cpputest_ulonglong>:
    virtual MockExpectedCall& andReturnValue(cpputest_ulonglong) _override { return *this; }
 801b7a2:	b480      	push	{r7}
 801b7a4:	b085      	sub	sp, #20
 801b7a6:	af00      	add	r7, sp, #0
 801b7a8:	60f8      	str	r0, [r7, #12]
 801b7aa:	1d3b      	adds	r3, r7, #4
 801b7ac:	e883 0006 	stmia.w	r3, {r1, r2}
 801b7b0:	68fb      	ldr	r3, [r7, #12]
 801b7b2:	4618      	mov	r0, r3
 801b7b4:	3714      	adds	r7, #20
 801b7b6:	46bd      	mov	sp, r7
 801b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7bc:	4770      	bx	lr

0801b7be <_ZN23MockIgnoredExpectedCall14andReturnValueEd>:
    virtual MockExpectedCall& andReturnValue(double) _override { return *this;}
 801b7be:	b480      	push	{r7}
 801b7c0:	b085      	sub	sp, #20
 801b7c2:	af00      	add	r7, sp, #0
 801b7c4:	60f8      	str	r0, [r7, #12]
 801b7c6:	ed87 0b00 	vstr	d0, [r7]
 801b7ca:	68fb      	ldr	r3, [r7, #12]
 801b7cc:	4618      	mov	r0, r3
 801b7ce:	3714      	adds	r7, #20
 801b7d0:	46bd      	mov	sp, r7
 801b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7d6:	4770      	bx	lr

0801b7d8 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKc>:
    virtual MockExpectedCall& andReturnValue(const char*) _override { return *this; }
 801b7d8:	b480      	push	{r7}
 801b7da:	b083      	sub	sp, #12
 801b7dc:	af00      	add	r7, sp, #0
 801b7de:	6078      	str	r0, [r7, #4]
 801b7e0:	6039      	str	r1, [r7, #0]
 801b7e2:	687b      	ldr	r3, [r7, #4]
 801b7e4:	4618      	mov	r0, r3
 801b7e6:	370c      	adds	r7, #12
 801b7e8:	46bd      	mov	sp, r7
 801b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7ee:	4770      	bx	lr

0801b7f0 <_ZN23MockIgnoredExpectedCall14andReturnValueEPv>:
    virtual MockExpectedCall& andReturnValue(void*) _override { return *this; }
 801b7f0:	b480      	push	{r7}
 801b7f2:	b083      	sub	sp, #12
 801b7f4:	af00      	add	r7, sp, #0
 801b7f6:	6078      	str	r0, [r7, #4]
 801b7f8:	6039      	str	r1, [r7, #0]
 801b7fa:	687b      	ldr	r3, [r7, #4]
 801b7fc:	4618      	mov	r0, r3
 801b7fe:	370c      	adds	r7, #12
 801b800:	46bd      	mov	sp, r7
 801b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b806:	4770      	bx	lr

0801b808 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKv>:
    virtual MockExpectedCall& andReturnValue(const void*) _override { return *this; }
 801b808:	b480      	push	{r7}
 801b80a:	b083      	sub	sp, #12
 801b80c:	af00      	add	r7, sp, #0
 801b80e:	6078      	str	r0, [r7, #4]
 801b810:	6039      	str	r1, [r7, #0]
 801b812:	687b      	ldr	r3, [r7, #4]
 801b814:	4618      	mov	r0, r3
 801b816:	370c      	adds	r7, #12
 801b818:	46bd      	mov	sp, r7
 801b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b81e:	4770      	bx	lr

0801b820 <_ZN23MockIgnoredExpectedCall14andReturnValueEPFvvE>:
    virtual MockExpectedCall& andReturnValue(void (*)()) _override { return *this; }
 801b820:	b480      	push	{r7}
 801b822:	b083      	sub	sp, #12
 801b824:	af00      	add	r7, sp, #0
 801b826:	6078      	str	r0, [r7, #4]
 801b828:	6039      	str	r1, [r7, #0]
 801b82a:	687b      	ldr	r3, [r7, #4]
 801b82c:	4618      	mov	r0, r3
 801b82e:	370c      	adds	r7, #12
 801b830:	46bd      	mov	sp, r7
 801b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b836:	4770      	bx	lr

0801b838 <_ZN23MockIgnoredExpectedCall8onObjectEPv>:

    virtual MockExpectedCall& onObject(void*) _override { return *this; }
 801b838:	b480      	push	{r7}
 801b83a:	b083      	sub	sp, #12
 801b83c:	af00      	add	r7, sp, #0
 801b83e:	6078      	str	r0, [r7, #4]
 801b840:	6039      	str	r1, [r7, #0]
 801b842:	687b      	ldr	r3, [r7, #4]
 801b844:	4618      	mov	r0, r3
 801b846:	370c      	adds	r7, #12
 801b848:	46bd      	mov	sp, r7
 801b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b84e:	4770      	bx	lr

0801b850 <_ZN16MockExpectedCallC1Ev>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCall::MockExpectedCall()
 801b850:	b480      	push	{r7}
 801b852:	b083      	sub	sp, #12
 801b854:	af00      	add	r7, sp, #0
 801b856:	6078      	str	r0, [r7, #4]
 801b858:	4a04      	ldr	r2, [pc, #16]	; (801b86c <_ZN16MockExpectedCallC1Ev+0x1c>)
 801b85a:	687b      	ldr	r3, [r7, #4]
 801b85c:	601a      	str	r2, [r3, #0]
{
}
 801b85e:	687b      	ldr	r3, [r7, #4]
 801b860:	4618      	mov	r0, r3
 801b862:	370c      	adds	r7, #12
 801b864:	46bd      	mov	sp, r7
 801b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b86a:	4770      	bx	lr
 801b86c:	0802ae50 	.word	0x0802ae50

0801b870 <_ZN16MockExpectedCallD1Ev>:

MockExpectedCall::~MockExpectedCall()
 801b870:	b480      	push	{r7}
 801b872:	b083      	sub	sp, #12
 801b874:	af00      	add	r7, sp, #0
 801b876:	6078      	str	r0, [r7, #4]
 801b878:	4a04      	ldr	r2, [pc, #16]	; (801b88c <_ZN16MockExpectedCallD1Ev+0x1c>)
 801b87a:	687b      	ldr	r3, [r7, #4]
 801b87c:	601a      	str	r2, [r3, #0]
{
}
 801b87e:	687b      	ldr	r3, [r7, #4]
 801b880:	4618      	mov	r0, r3
 801b882:	370c      	adds	r7, #12
 801b884:	46bd      	mov	sp, r7
 801b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b88a:	4770      	bx	lr
 801b88c:	0802ae50 	.word	0x0802ae50

0801b890 <_Z10StringFromRK14MockNamedValue>:

SimpleString StringFrom(const MockNamedValue& parameter)
{
 801b890:	b580      	push	{r7, lr}
 801b892:	b082      	sub	sp, #8
 801b894:	af00      	add	r7, sp, #0
 801b896:	6078      	str	r0, [r7, #4]
 801b898:	6039      	str	r1, [r7, #0]
    return parameter.toString();
 801b89a:	683b      	ldr	r3, [r7, #0]
 801b89c:	681b      	ldr	r3, [r3, #0]
 801b89e:	3358      	adds	r3, #88	; 0x58
 801b8a0:	681b      	ldr	r3, [r3, #0]
 801b8a2:	687a      	ldr	r2, [r7, #4]
 801b8a4:	6839      	ldr	r1, [r7, #0]
 801b8a6:	4610      	mov	r0, r2
 801b8a8:	4798      	blx	r3
}
 801b8aa:	6878      	ldr	r0, [r7, #4]
 801b8ac:	3708      	adds	r7, #8
 801b8ae:	46bd      	mov	sp, r7
 801b8b0:	bd80      	pop	{r7, pc}

0801b8b2 <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>:

void MockCheckedExpectedCall::setName(const SimpleString& name)
{
 801b8b2:	b580      	push	{r7, lr}
 801b8b4:	b082      	sub	sp, #8
 801b8b6:	af00      	add	r7, sp, #0
 801b8b8:	6078      	str	r0, [r7, #4]
 801b8ba:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 801b8bc:	687b      	ldr	r3, [r7, #4]
 801b8be:	3304      	adds	r3, #4
 801b8c0:	6839      	ldr	r1, [r7, #0]
 801b8c2:	4618      	mov	r0, r3
 801b8c4:	f7f2 fbcb 	bl	800e05e <_ZN12SimpleStringaSERKS_>
}
 801b8c8:	bf00      	nop
 801b8ca:	3708      	adds	r7, #8
 801b8cc:	46bd      	mov	sp, r7
 801b8ce:	bd80      	pop	{r7, pc}

0801b8d0 <_ZNK23MockCheckedExpectedCall7getNameEv>:

SimpleString MockCheckedExpectedCall::getName() const
{
 801b8d0:	b580      	push	{r7, lr}
 801b8d2:	b082      	sub	sp, #8
 801b8d4:	af00      	add	r7, sp, #0
 801b8d6:	6078      	str	r0, [r7, #4]
 801b8d8:	6039      	str	r1, [r7, #0]
    return functionName_;
 801b8da:	683b      	ldr	r3, [r7, #0]
 801b8dc:	3304      	adds	r3, #4
 801b8de:	4619      	mov	r1, r3
 801b8e0:	6878      	ldr	r0, [r7, #4]
 801b8e2:	f7f2 fba4 	bl	800e02e <_ZN12SimpleStringC1ERKS_>
}
 801b8e6:	6878      	ldr	r0, [r7, #4]
 801b8e8:	3708      	adds	r7, #8
 801b8ea:	46bd      	mov	sp, r7
 801b8ec:	bd80      	pop	{r7, pc}
	...

0801b8f0 <_ZN23MockCheckedExpectedCallC1Ej>:
{
    inputParameters_ = new MockNamedValueList();
    outputParameters_ = new MockNamedValueList();
}

MockCheckedExpectedCall::MockCheckedExpectedCall(unsigned int numCalls)
 801b8f0:	b590      	push	{r4, r7, lr}
 801b8f2:	b085      	sub	sp, #20
 801b8f4:	af00      	add	r7, sp, #0
 801b8f6:	6078      	str	r0, [r7, #4]
 801b8f8:	6039      	str	r1, [r7, #0]
    : ignoreOtherParameters_(false), isActualCallMatchFinalized_(false),
      initialExpectedCallOrder_(NO_EXPECTED_CALL_ORDER), finalExpectedCallOrder_(NO_EXPECTED_CALL_ORDER),
      outOfOrder_(false), returnValue_(""), objectPtr_(NULLPTR), isSpecificObjectExpected_(false), wasPassedToObject_(true),
      actualCalls_(0), expectedCalls_(numCalls)
 801b8fa:	687b      	ldr	r3, [r7, #4]
 801b8fc:	4618      	mov	r0, r3
 801b8fe:	f7ff ffa7 	bl	801b850 <_ZN16MockExpectedCallC1Ev>
 801b902:	4a2c      	ldr	r2, [pc, #176]	; (801b9b4 <_ZN23MockCheckedExpectedCallC1Ej+0xc4>)
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	601a      	str	r2, [r3, #0]
 801b908:	687b      	ldr	r3, [r7, #4]
 801b90a:	3304      	adds	r3, #4
 801b90c:	492a      	ldr	r1, [pc, #168]	; (801b9b8 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 801b90e:	4618      	mov	r0, r3
 801b910:	f7f2 fb39 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801b914:	687b      	ldr	r3, [r7, #4]
 801b916:	2200      	movs	r2, #0
 801b918:	731a      	strb	r2, [r3, #12]
 801b91a:	687b      	ldr	r3, [r7, #4]
 801b91c:	2200      	movs	r2, #0
 801b91e:	735a      	strb	r2, [r3, #13]
 801b920:	687b      	ldr	r3, [r7, #4]
 801b922:	2200      	movs	r2, #0
 801b924:	611a      	str	r2, [r3, #16]
 801b926:	687b      	ldr	r3, [r7, #4]
 801b928:	2200      	movs	r2, #0
 801b92a:	615a      	str	r2, [r3, #20]
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	2200      	movs	r2, #0
 801b930:	761a      	strb	r2, [r3, #24]
 801b932:	687b      	ldr	r3, [r7, #4]
 801b934:	f103 0428 	add.w	r4, r3, #40	; 0x28
 801b938:	f107 0308 	add.w	r3, r7, #8
 801b93c:	491e      	ldr	r1, [pc, #120]	; (801b9b8 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 801b93e:	4618      	mov	r0, r3
 801b940:	f7f2 fb21 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801b944:	f107 0308 	add.w	r3, r7, #8
 801b948:	4619      	mov	r1, r3
 801b94a:	4620      	mov	r0, r4
 801b94c:	f003 f840 	bl	801e9d0 <_ZN14MockNamedValueC1ERK12SimpleString>
 801b950:	f107 0308 	add.w	r3, r7, #8
 801b954:	4618      	mov	r0, r3
 801b956:	f7f2 fece 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801b95a:	687b      	ldr	r3, [r7, #4]
 801b95c:	2200      	movs	r2, #0
 801b95e:	661a      	str	r2, [r3, #96]	; 0x60
 801b960:	687b      	ldr	r3, [r7, #4]
 801b962:	2200      	movs	r2, #0
 801b964:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 801b968:	687b      	ldr	r3, [r7, #4]
 801b96a:	2201      	movs	r2, #1
 801b96c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 801b970:	687b      	ldr	r3, [r7, #4]
 801b972:	2200      	movs	r2, #0
 801b974:	669a      	str	r2, [r3, #104]	; 0x68
 801b976:	687b      	ldr	r3, [r7, #4]
 801b978:	683a      	ldr	r2, [r7, #0]
 801b97a:	66da      	str	r2, [r3, #108]	; 0x6c
{
    inputParameters_ = new MockNamedValueList();
 801b97c:	2246      	movs	r2, #70	; 0x46
 801b97e:	490f      	ldr	r1, [pc, #60]	; (801b9bc <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 801b980:	2004      	movs	r0, #4
 801b982:	f7ef ff3d 	bl	800b800 <_ZnwjPKci>
 801b986:	4604      	mov	r4, r0
 801b988:	4620      	mov	r0, r4
 801b98a:	f004 ff36 	bl	80207fa <_ZN18MockNamedValueListC1Ev>
 801b98e:	687b      	ldr	r3, [r7, #4]
 801b990:	61dc      	str	r4, [r3, #28]
    outputParameters_ = new MockNamedValueList();
 801b992:	2247      	movs	r2, #71	; 0x47
 801b994:	4909      	ldr	r1, [pc, #36]	; (801b9bc <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 801b996:	2004      	movs	r0, #4
 801b998:	f7ef ff32 	bl	800b800 <_ZnwjPKci>
 801b99c:	4604      	mov	r4, r0
 801b99e:	4620      	mov	r0, r4
 801b9a0:	f004 ff2b 	bl	80207fa <_ZN18MockNamedValueListC1Ev>
 801b9a4:	687b      	ldr	r3, [r7, #4]
 801b9a6:	621c      	str	r4, [r3, #32]
}
 801b9a8:	687b      	ldr	r3, [r7, #4]
 801b9aa:	4618      	mov	r0, r3
 801b9ac:	3714      	adds	r7, #20
 801b9ae:	46bd      	mov	sp, r7
 801b9b0:	bd90      	pop	{r4, r7, pc}
 801b9b2:	bf00      	nop
 801b9b4:	0802ac94 	.word	0x0802ac94
 801b9b8:	080279e8 	.word	0x080279e8
 801b9bc:	080279ec 	.word	0x080279ec

0801b9c0 <_ZN23MockCheckedExpectedCallD1Ev>:

MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801b9c0:	b580      	push	{r7, lr}
 801b9c2:	b082      	sub	sp, #8
 801b9c4:	af00      	add	r7, sp, #0
 801b9c6:	6078      	str	r0, [r7, #4]
 801b9c8:	4a17      	ldr	r2, [pc, #92]	; (801ba28 <_ZN23MockCheckedExpectedCallD1Ev+0x68>)
 801b9ca:	687b      	ldr	r3, [r7, #4]
 801b9cc:	601a      	str	r2, [r3, #0]
{
    inputParameters_->clear();
 801b9ce:	687b      	ldr	r3, [r7, #4]
 801b9d0:	69db      	ldr	r3, [r3, #28]
 801b9d2:	4618      	mov	r0, r3
 801b9d4:	f004 ff1f 	bl	8020816 <_ZN18MockNamedValueList5clearEv>
    delete inputParameters_;
 801b9d8:	687b      	ldr	r3, [r7, #4]
 801b9da:	69db      	ldr	r3, [r3, #28]
 801b9dc:	2b00      	cmp	r3, #0
 801b9de:	d003      	beq.n	801b9e8 <_ZN23MockCheckedExpectedCallD1Ev+0x28>
 801b9e0:	2104      	movs	r1, #4
 801b9e2:	4618      	mov	r0, r3
 801b9e4:	f7ef ff20 	bl	800b828 <_ZdlPvj>
    outputParameters_->clear();
 801b9e8:	687b      	ldr	r3, [r7, #4]
 801b9ea:	6a1b      	ldr	r3, [r3, #32]
 801b9ec:	4618      	mov	r0, r3
 801b9ee:	f004 ff12 	bl	8020816 <_ZN18MockNamedValueList5clearEv>
    delete outputParameters_;
 801b9f2:	687b      	ldr	r3, [r7, #4]
 801b9f4:	6a1b      	ldr	r3, [r3, #32]
 801b9f6:	2b00      	cmp	r3, #0
 801b9f8:	d003      	beq.n	801ba02 <_ZN23MockCheckedExpectedCallD1Ev+0x42>
 801b9fa:	2104      	movs	r1, #4
 801b9fc:	4618      	mov	r0, r3
 801b9fe:	f7ef ff13 	bl	800b828 <_ZdlPvj>
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801ba02:	687b      	ldr	r3, [r7, #4]
 801ba04:	3328      	adds	r3, #40	; 0x28
 801ba06:	4618      	mov	r0, r3
 801ba08:	f003 f80c 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
 801ba0c:	687b      	ldr	r3, [r7, #4]
 801ba0e:	3304      	adds	r3, #4
 801ba10:	4618      	mov	r0, r3
 801ba12:	f7f2 fe70 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801ba16:	687b      	ldr	r3, [r7, #4]
 801ba18:	4618      	mov	r0, r3
 801ba1a:	f7ff ff29 	bl	801b870 <_ZN16MockExpectedCallD1Ev>
}
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	4618      	mov	r0, r3
 801ba22:	3708      	adds	r7, #8
 801ba24:	46bd      	mov	sp, r7
 801ba26:	bd80      	pop	{r7, pc}
 801ba28:	0802ac94 	.word	0x0802ac94

0801ba2c <_ZN23MockCheckedExpectedCallD0Ev>:
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801ba2c:	b580      	push	{r7, lr}
 801ba2e:	b082      	sub	sp, #8
 801ba30:	af00      	add	r7, sp, #0
 801ba32:	6078      	str	r0, [r7, #4]
}
 801ba34:	6878      	ldr	r0, [r7, #4]
 801ba36:	f7ff ffc3 	bl	801b9c0 <_ZN23MockCheckedExpectedCallD1Ev>
 801ba3a:	2170      	movs	r1, #112	; 0x70
 801ba3c:	6878      	ldr	r0, [r7, #4]
 801ba3e:	f7ef fef3 	bl	800b828 <_ZdlPvj>
 801ba42:	687b      	ldr	r3, [r7, #4]
 801ba44:	4618      	mov	r0, r3
 801ba46:	3708      	adds	r7, #8
 801ba48:	46bd      	mov	sp, r7
 801ba4a:	bd80      	pop	{r7, pc}

0801ba4c <_ZN23MockCheckedExpectedCall8withNameERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withName(const SimpleString& name)
{
 801ba4c:	b580      	push	{r7, lr}
 801ba4e:	b082      	sub	sp, #8
 801ba50:	af00      	add	r7, sp, #0
 801ba52:	6078      	str	r0, [r7, #4]
 801ba54:	6039      	str	r1, [r7, #0]
    setName(name);
 801ba56:	6839      	ldr	r1, [r7, #0]
 801ba58:	6878      	ldr	r0, [r7, #4]
 801ba5a:	f7ff ff2a 	bl	801b8b2 <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>
    return *this;
 801ba5e:	687b      	ldr	r3, [r7, #4]
}
 801ba60:	4618      	mov	r0, r3
 801ba62:	3708      	adds	r7, #8
 801ba64:	46bd      	mov	sp, r7
 801ba66:	bd80      	pop	{r7, pc}

0801ba68 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb>:

MockExpectedCall& MockCheckedExpectedCall::withBoolParameter(const SimpleString& name, bool value)
{
 801ba68:	b590      	push	{r4, r7, lr}
 801ba6a:	b087      	sub	sp, #28
 801ba6c:	af00      	add	r7, sp, #0
 801ba6e:	60f8      	str	r0, [r7, #12]
 801ba70:	60b9      	str	r1, [r7, #8]
 801ba72:	4613      	mov	r3, r2
 801ba74:	71fb      	strb	r3, [r7, #7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801ba76:	225a      	movs	r2, #90	; 0x5a
 801ba78:	490e      	ldr	r1, [pc, #56]	; (801bab4 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb+0x4c>)
 801ba7a:	2038      	movs	r0, #56	; 0x38
 801ba7c:	f7ef fec0 	bl	800b800 <_ZnwjPKci>
 801ba80:	4604      	mov	r4, r0
 801ba82:	68b9      	ldr	r1, [r7, #8]
 801ba84:	4620      	mov	r0, r4
 801ba86:	f001 f851 	bl	801cb2c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801ba8a:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801ba8c:	68fb      	ldr	r3, [r7, #12]
 801ba8e:	69db      	ldr	r3, [r3, #28]
 801ba90:	6979      	ldr	r1, [r7, #20]
 801ba92:	4618      	mov	r0, r3
 801ba94:	f004 fee2 	bl	802085c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801ba98:	697b      	ldr	r3, [r7, #20]
 801ba9a:	681b      	ldr	r3, [r3, #0]
 801ba9c:	3308      	adds	r3, #8
 801ba9e:	681b      	ldr	r3, [r3, #0]
 801baa0:	79fa      	ldrb	r2, [r7, #7]
 801baa2:	4611      	mov	r1, r2
 801baa4:	6978      	ldr	r0, [r7, #20]
 801baa6:	4798      	blx	r3
    return *this;
 801baa8:	68fb      	ldr	r3, [r7, #12]
}
 801baaa:	4618      	mov	r0, r3
 801baac:	371c      	adds	r7, #28
 801baae:	46bd      	mov	sp, r7
 801bab0:	bd90      	pop	{r4, r7, pc}
 801bab2:	bf00      	nop
 801bab4:	080279ec 	.word	0x080279ec

0801bab8 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 801bab8:	b590      	push	{r4, r7, lr}
 801baba:	b087      	sub	sp, #28
 801babc:	af00      	add	r7, sp, #0
 801babe:	60f8      	str	r0, [r7, #12]
 801bac0:	60b9      	str	r1, [r7, #8]
 801bac2:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801bac4:	2262      	movs	r2, #98	; 0x62
 801bac6:	490e      	ldr	r1, [pc, #56]	; (801bb00 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj+0x48>)
 801bac8:	2038      	movs	r0, #56	; 0x38
 801baca:	f7ef fe99 	bl	800b800 <_ZnwjPKci>
 801bace:	4604      	mov	r4, r0
 801bad0:	68b9      	ldr	r1, [r7, #8]
 801bad2:	4620      	mov	r0, r4
 801bad4:	f001 f82a 	bl	801cb2c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801bad8:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801bada:	68fb      	ldr	r3, [r7, #12]
 801badc:	69db      	ldr	r3, [r3, #28]
 801bade:	6979      	ldr	r1, [r7, #20]
 801bae0:	4618      	mov	r0, r3
 801bae2:	f004 febb 	bl	802085c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801bae6:	697b      	ldr	r3, [r7, #20]
 801bae8:	681b      	ldr	r3, [r3, #0]
 801baea:	3310      	adds	r3, #16
 801baec:	681b      	ldr	r3, [r3, #0]
 801baee:	6879      	ldr	r1, [r7, #4]
 801baf0:	6978      	ldr	r0, [r7, #20]
 801baf2:	4798      	blx	r3
    return *this;
 801baf4:	68fb      	ldr	r3, [r7, #12]
}
 801baf6:	4618      	mov	r0, r3
 801baf8:	371c      	adds	r7, #28
 801bafa:	46bd      	mov	sp, r7
 801bafc:	bd90      	pop	{r4, r7, pc}
 801bafe:	bf00      	nop
 801bb00:	080279ec 	.word	0x080279ec

0801bb04 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi>:

MockExpectedCall& MockCheckedExpectedCall::withIntParameter(const SimpleString& name, int value)
{
 801bb04:	b590      	push	{r4, r7, lr}
 801bb06:	b087      	sub	sp, #28
 801bb08:	af00      	add	r7, sp, #0
 801bb0a:	60f8      	str	r0, [r7, #12]
 801bb0c:	60b9      	str	r1, [r7, #8]
 801bb0e:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801bb10:	226a      	movs	r2, #106	; 0x6a
 801bb12:	490e      	ldr	r1, [pc, #56]	; (801bb4c <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi+0x48>)
 801bb14:	2038      	movs	r0, #56	; 0x38
 801bb16:	f7ef fe73 	bl	800b800 <_ZnwjPKci>
 801bb1a:	4604      	mov	r4, r0
 801bb1c:	68b9      	ldr	r1, [r7, #8]
 801bb1e:	4620      	mov	r0, r4
 801bb20:	f001 f804 	bl	801cb2c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801bb24:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801bb26:	68fb      	ldr	r3, [r7, #12]
 801bb28:	69db      	ldr	r3, [r3, #28]
 801bb2a:	6979      	ldr	r1, [r7, #20]
 801bb2c:	4618      	mov	r0, r3
 801bb2e:	f004 fe95 	bl	802085c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801bb32:	697b      	ldr	r3, [r7, #20]
 801bb34:	681b      	ldr	r3, [r3, #0]
 801bb36:	330c      	adds	r3, #12
 801bb38:	681b      	ldr	r3, [r3, #0]
 801bb3a:	6879      	ldr	r1, [r7, #4]
 801bb3c:	6978      	ldr	r0, [r7, #20]
 801bb3e:	4798      	blx	r3
    return *this;
 801bb40:	68fb      	ldr	r3, [r7, #12]
}
 801bb42:	4618      	mov	r0, r3
 801bb44:	371c      	adds	r7, #28
 801bb46:	46bd      	mov	sp, r7
 801bb48:	bd90      	pop	{r4, r7, pc}
 801bb4a:	bf00      	nop
 801bb4c:	080279ec 	.word	0x080279ec

0801bb50 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl>:

MockExpectedCall& MockCheckedExpectedCall::withLongIntParameter(const SimpleString& name, long int value)
{
 801bb50:	b590      	push	{r4, r7, lr}
 801bb52:	b087      	sub	sp, #28
 801bb54:	af00      	add	r7, sp, #0
 801bb56:	60f8      	str	r0, [r7, #12]
 801bb58:	60b9      	str	r1, [r7, #8]
 801bb5a:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801bb5c:	2272      	movs	r2, #114	; 0x72
 801bb5e:	490e      	ldr	r1, [pc, #56]	; (801bb98 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl+0x48>)
 801bb60:	2038      	movs	r0, #56	; 0x38
 801bb62:	f7ef fe4d 	bl	800b800 <_ZnwjPKci>
 801bb66:	4604      	mov	r4, r0
 801bb68:	68b9      	ldr	r1, [r7, #8]
 801bb6a:	4620      	mov	r0, r4
 801bb6c:	f000 ffde 	bl	801cb2c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801bb70:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801bb72:	68fb      	ldr	r3, [r7, #12]
 801bb74:	69db      	ldr	r3, [r3, #28]
 801bb76:	6979      	ldr	r1, [r7, #20]
 801bb78:	4618      	mov	r0, r3
 801bb7a:	f004 fe6f 	bl	802085c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801bb7e:	697b      	ldr	r3, [r7, #20]
 801bb80:	681b      	ldr	r3, [r3, #0]
 801bb82:	3314      	adds	r3, #20
 801bb84:	681b      	ldr	r3, [r3, #0]
 801bb86:	6879      	ldr	r1, [r7, #4]
 801bb88:	6978      	ldr	r0, [r7, #20]
 801bb8a:	4798      	blx	r3
    return *this;
 801bb8c:	68fb      	ldr	r3, [r7, #12]
}
 801bb8e:	4618      	mov	r0, r3
 801bb90:	371c      	adds	r7, #28
 801bb92:	46bd      	mov	sp, r7
 801bb94:	bd90      	pop	{r4, r7, pc}
 801bb96:	bf00      	nop
 801bb98:	080279ec 	.word	0x080279ec

0801bb9c <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 801bb9c:	b590      	push	{r4, r7, lr}
 801bb9e:	b087      	sub	sp, #28
 801bba0:	af00      	add	r7, sp, #0
 801bba2:	60f8      	str	r0, [r7, #12]
 801bba4:	60b9      	str	r1, [r7, #8]
 801bba6:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801bba8:	227a      	movs	r2, #122	; 0x7a
 801bbaa:	490e      	ldr	r1, [pc, #56]	; (801bbe4 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm+0x48>)
 801bbac:	2038      	movs	r0, #56	; 0x38
 801bbae:	f7ef fe27 	bl	800b800 <_ZnwjPKci>
 801bbb2:	4604      	mov	r4, r0
 801bbb4:	68b9      	ldr	r1, [r7, #8]
 801bbb6:	4620      	mov	r0, r4
 801bbb8:	f000 ffb8 	bl	801cb2c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801bbbc:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801bbbe:	68fb      	ldr	r3, [r7, #12]
 801bbc0:	69db      	ldr	r3, [r3, #28]
 801bbc2:	6979      	ldr	r1, [r7, #20]
 801bbc4:	4618      	mov	r0, r3
 801bbc6:	f004 fe49 	bl	802085c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801bbca:	697b      	ldr	r3, [r7, #20]
 801bbcc:	681b      	ldr	r3, [r3, #0]
 801bbce:	3318      	adds	r3, #24
 801bbd0:	681b      	ldr	r3, [r3, #0]
 801bbd2:	6879      	ldr	r1, [r7, #4]
 801bbd4:	6978      	ldr	r0, [r7, #20]
 801bbd6:	4798      	blx	r3
    return *this;
 801bbd8:	68fb      	ldr	r3, [r7, #12]
}
 801bbda:	4618      	mov	r0, r3
 801bbdc:	371c      	adds	r7, #28
 801bbde:	46bd      	mov	sp, r7
 801bbe0:	bd90      	pop	{r4, r7, pc}
 801bbe2:	bf00      	nop
 801bbe4:	080279ec 	.word	0x080279ec

0801bbe8 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 801bbe8:	b5b0      	push	{r4, r5, r7, lr}
 801bbea:	b086      	sub	sp, #24
 801bbec:	af02      	add	r7, sp, #8
 801bbee:	60f8      	str	r0, [r7, #12]
 801bbf0:	60b9      	str	r1, [r7, #8]
 801bbf2:	4639      	mov	r1, r7
 801bbf4:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801bbf8:	f7f9 fda8 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 801bbfc:	4604      	mov	r4, r0
 801bbfe:	6823      	ldr	r3, [r4, #0]
 801bc00:	3368      	adds	r3, #104	; 0x68
 801bc02:	681d      	ldr	r5, [r3, #0]
 801bc04:	f7f9 fdb2 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801bc08:	4603      	mov	r3, r0
 801bc0a:	9300      	str	r3, [sp, #0]
 801bc0c:	2396      	movs	r3, #150	; 0x96
 801bc0e:	4a04      	ldr	r2, [pc, #16]	; (801bc20 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x38>)
 801bc10:	4904      	ldr	r1, [pc, #16]	; (801bc24 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801bc12:	4620      	mov	r0, r4
 801bc14:	47a8      	blx	r5
    return *this;
 801bc16:	68fb      	ldr	r3, [r7, #12]
}
 801bc18:	4618      	mov	r0, r3
 801bc1a:	3710      	adds	r7, #16
 801bc1c:	46bd      	mov	sp, r7
 801bc1e:	bdb0      	pop	{r4, r5, r7, pc}
 801bc20:	080279ec 	.word	0x080279ec
 801bc24:	08027a08 	.word	0x08027a08

0801bc28 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 801bc28:	b5b0      	push	{r4, r5, r7, lr}
 801bc2a:	b086      	sub	sp, #24
 801bc2c:	af02      	add	r7, sp, #8
 801bc2e:	60f8      	str	r0, [r7, #12]
 801bc30:	60b9      	str	r1, [r7, #8]
 801bc32:	4639      	mov	r1, r7
 801bc34:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801bc38:	f7f9 fd88 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 801bc3c:	4604      	mov	r4, r0
 801bc3e:	6823      	ldr	r3, [r4, #0]
 801bc40:	3368      	adds	r3, #104	; 0x68
 801bc42:	681d      	ldr	r5, [r3, #0]
 801bc44:	f7f9 fd92 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801bc48:	4603      	mov	r3, r0
 801bc4a:	9300      	str	r3, [sp, #0]
 801bc4c:	239c      	movs	r3, #156	; 0x9c
 801bc4e:	4a04      	ldr	r2, [pc, #16]	; (801bc60 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x38>)
 801bc50:	4904      	ldr	r1, [pc, #16]	; (801bc64 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 801bc52:	4620      	mov	r0, r4
 801bc54:	47a8      	blx	r5
    return *this;
 801bc56:	68fb      	ldr	r3, [r7, #12]
}
 801bc58:	4618      	mov	r0, r3
 801bc5a:	3710      	adds	r7, #16
 801bc5c:	46bd      	mov	sp, r7
 801bc5e:	bdb0      	pop	{r4, r5, r7, pc}
 801bc60:	080279ec 	.word	0x080279ec
 801bc64:	08027a28 	.word	0x08027a28

0801bc68 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value)
{
 801bc68:	b590      	push	{r4, r7, lr}
 801bc6a:	b087      	sub	sp, #28
 801bc6c:	af00      	add	r7, sp, #0
 801bc6e:	60f8      	str	r0, [r7, #12]
 801bc70:	60b9      	str	r1, [r7, #8]
 801bc72:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801bc76:	22a4      	movs	r2, #164	; 0xa4
 801bc78:	490e      	ldr	r1, [pc, #56]	; (801bcb4 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd+0x4c>)
 801bc7a:	2038      	movs	r0, #56	; 0x38
 801bc7c:	f7ef fdc0 	bl	800b800 <_ZnwjPKci>
 801bc80:	4604      	mov	r4, r0
 801bc82:	68b9      	ldr	r1, [r7, #8]
 801bc84:	4620      	mov	r0, r4
 801bc86:	f000 ff51 	bl	801cb2c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801bc8a:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801bc8c:	68fb      	ldr	r3, [r7, #12]
 801bc8e:	69db      	ldr	r3, [r3, #28]
 801bc90:	6979      	ldr	r1, [r7, #20]
 801bc92:	4618      	mov	r0, r3
 801bc94:	f004 fde2 	bl	802085c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801bc98:	697b      	ldr	r3, [r7, #20]
 801bc9a:	681b      	ldr	r3, [r3, #0]
 801bc9c:	3324      	adds	r3, #36	; 0x24
 801bc9e:	681b      	ldr	r3, [r3, #0]
 801bca0:	ed97 0b00 	vldr	d0, [r7]
 801bca4:	6978      	ldr	r0, [r7, #20]
 801bca6:	4798      	blx	r3
    return *this;
 801bca8:	68fb      	ldr	r3, [r7, #12]
}
 801bcaa:	4618      	mov	r0, r3
 801bcac:	371c      	adds	r7, #28
 801bcae:	46bd      	mov	sp, r7
 801bcb0:	bd90      	pop	{r4, r7, pc}
 801bcb2:	bf00      	nop
 801bcb4:	080279ec 	.word	0x080279ec

0801bcb8 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd>:

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value, double tolerance)
{
 801bcb8:	b590      	push	{r4, r7, lr}
 801bcba:	b089      	sub	sp, #36	; 0x24
 801bcbc:	af00      	add	r7, sp, #0
 801bcbe:	6178      	str	r0, [r7, #20]
 801bcc0:	6139      	str	r1, [r7, #16]
 801bcc2:	ed87 0b02 	vstr	d0, [r7, #8]
 801bcc6:	ed87 1b00 	vstr	d1, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801bcca:	22ac      	movs	r2, #172	; 0xac
 801bccc:	490f      	ldr	r1, [pc, #60]	; (801bd0c <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd+0x54>)
 801bcce:	2038      	movs	r0, #56	; 0x38
 801bcd0:	f7ef fd96 	bl	800b800 <_ZnwjPKci>
 801bcd4:	4604      	mov	r4, r0
 801bcd6:	6939      	ldr	r1, [r7, #16]
 801bcd8:	4620      	mov	r0, r4
 801bcda:	f000 ff27 	bl	801cb2c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801bcde:	61fc      	str	r4, [r7, #28]
    inputParameters_->add(newParameter);
 801bce0:	697b      	ldr	r3, [r7, #20]
 801bce2:	69db      	ldr	r3, [r3, #28]
 801bce4:	69f9      	ldr	r1, [r7, #28]
 801bce6:	4618      	mov	r0, r3
 801bce8:	f004 fdb8 	bl	802085c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value, tolerance);
 801bcec:	69fb      	ldr	r3, [r7, #28]
 801bcee:	681b      	ldr	r3, [r3, #0]
 801bcf0:	3328      	adds	r3, #40	; 0x28
 801bcf2:	681b      	ldr	r3, [r3, #0]
 801bcf4:	ed97 1b00 	vldr	d1, [r7]
 801bcf8:	ed97 0b02 	vldr	d0, [r7, #8]
 801bcfc:	69f8      	ldr	r0, [r7, #28]
 801bcfe:	4798      	blx	r3
    return *this;
 801bd00:	697b      	ldr	r3, [r7, #20]
}
 801bd02:	4618      	mov	r0, r3
 801bd04:	3724      	adds	r7, #36	; 0x24
 801bd06:	46bd      	mov	sp, r7
 801bd08:	bd90      	pop	{r4, r7, pc}
 801bd0a:	bf00      	nop
 801bd0c:	080279ec 	.word	0x080279ec

0801bd10 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc>:

MockExpectedCall& MockCheckedExpectedCall::withStringParameter(const SimpleString& name, const char* value)
{
 801bd10:	b590      	push	{r4, r7, lr}
 801bd12:	b087      	sub	sp, #28
 801bd14:	af00      	add	r7, sp, #0
 801bd16:	60f8      	str	r0, [r7, #12]
 801bd18:	60b9      	str	r1, [r7, #8]
 801bd1a:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801bd1c:	22b4      	movs	r2, #180	; 0xb4
 801bd1e:	490e      	ldr	r1, [pc, #56]	; (801bd58 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc+0x48>)
 801bd20:	2038      	movs	r0, #56	; 0x38
 801bd22:	f7ef fd6d 	bl	800b800 <_ZnwjPKci>
 801bd26:	4604      	mov	r4, r0
 801bd28:	68b9      	ldr	r1, [r7, #8]
 801bd2a:	4620      	mov	r0, r4
 801bd2c:	f000 fefe 	bl	801cb2c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801bd30:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801bd32:	68fb      	ldr	r3, [r7, #12]
 801bd34:	69db      	ldr	r3, [r3, #28]
 801bd36:	6979      	ldr	r1, [r7, #20]
 801bd38:	4618      	mov	r0, r3
 801bd3a:	f004 fd8f 	bl	802085c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801bd3e:	697b      	ldr	r3, [r7, #20]
 801bd40:	681b      	ldr	r3, [r3, #0]
 801bd42:	3338      	adds	r3, #56	; 0x38
 801bd44:	681b      	ldr	r3, [r3, #0]
 801bd46:	6879      	ldr	r1, [r7, #4]
 801bd48:	6978      	ldr	r0, [r7, #20]
 801bd4a:	4798      	blx	r3
    return *this;
 801bd4c:	68fb      	ldr	r3, [r7, #12]
}
 801bd4e:	4618      	mov	r0, r3
 801bd50:	371c      	adds	r7, #28
 801bd52:	46bd      	mov	sp, r7
 801bd54:	bd90      	pop	{r4, r7, pc}
 801bd56:	bf00      	nop
 801bd58:	080279ec 	.word	0x080279ec

0801bd5c <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv>:

MockExpectedCall& MockCheckedExpectedCall::withPointerParameter(const SimpleString& name, void* value)
{
 801bd5c:	b590      	push	{r4, r7, lr}
 801bd5e:	b087      	sub	sp, #28
 801bd60:	af00      	add	r7, sp, #0
 801bd62:	60f8      	str	r0, [r7, #12]
 801bd64:	60b9      	str	r1, [r7, #8]
 801bd66:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801bd68:	22bc      	movs	r2, #188	; 0xbc
 801bd6a:	490e      	ldr	r1, [pc, #56]	; (801bda4 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv+0x48>)
 801bd6c:	2038      	movs	r0, #56	; 0x38
 801bd6e:	f7ef fd47 	bl	800b800 <_ZnwjPKci>
 801bd72:	4604      	mov	r4, r0
 801bd74:	68b9      	ldr	r1, [r7, #8]
 801bd76:	4620      	mov	r0, r4
 801bd78:	f000 fed8 	bl	801cb2c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801bd7c:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801bd7e:	68fb      	ldr	r3, [r7, #12]
 801bd80:	69db      	ldr	r3, [r3, #28]
 801bd82:	6979      	ldr	r1, [r7, #20]
 801bd84:	4618      	mov	r0, r3
 801bd86:	f004 fd69 	bl	802085c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801bd8a:	697b      	ldr	r3, [r7, #20]
 801bd8c:	681b      	ldr	r3, [r3, #0]
 801bd8e:	332c      	adds	r3, #44	; 0x2c
 801bd90:	681b      	ldr	r3, [r3, #0]
 801bd92:	6879      	ldr	r1, [r7, #4]
 801bd94:	6978      	ldr	r0, [r7, #20]
 801bd96:	4798      	blx	r3
    return *this;
 801bd98:	68fb      	ldr	r3, [r7, #12]
}
 801bd9a:	4618      	mov	r0, r3
 801bd9c:	371c      	adds	r7, #28
 801bd9e:	46bd      	mov	sp, r7
 801bda0:	bd90      	pop	{r4, r7, pc}
 801bda2:	bf00      	nop
 801bda4:	080279ec 	.word	0x080279ec

0801bda8 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:

MockExpectedCall& MockCheckedExpectedCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 801bda8:	b590      	push	{r4, r7, lr}
 801bdaa:	b087      	sub	sp, #28
 801bdac:	af00      	add	r7, sp, #0
 801bdae:	60f8      	str	r0, [r7, #12]
 801bdb0:	60b9      	str	r1, [r7, #8]
 801bdb2:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801bdb4:	22c4      	movs	r2, #196	; 0xc4
 801bdb6:	490e      	ldr	r1, [pc, #56]	; (801bdf0 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv+0x48>)
 801bdb8:	2038      	movs	r0, #56	; 0x38
 801bdba:	f7ef fd21 	bl	800b800 <_ZnwjPKci>
 801bdbe:	4604      	mov	r4, r0
 801bdc0:	68b9      	ldr	r1, [r7, #8]
 801bdc2:	4620      	mov	r0, r4
 801bdc4:	f000 feb2 	bl	801cb2c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801bdc8:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801bdca:	68fb      	ldr	r3, [r7, #12]
 801bdcc:	69db      	ldr	r3, [r3, #28]
 801bdce:	6979      	ldr	r1, [r7, #20]
 801bdd0:	4618      	mov	r0, r3
 801bdd2:	f004 fd43 	bl	802085c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801bdd6:	697b      	ldr	r3, [r7, #20]
 801bdd8:	681b      	ldr	r3, [r3, #0]
 801bdda:	3330      	adds	r3, #48	; 0x30
 801bddc:	681b      	ldr	r3, [r3, #0]
 801bdde:	6879      	ldr	r1, [r7, #4]
 801bde0:	6978      	ldr	r0, [r7, #20]
 801bde2:	4798      	blx	r3
    return *this;
 801bde4:	68fb      	ldr	r3, [r7, #12]
}
 801bde6:	4618      	mov	r0, r3
 801bde8:	371c      	adds	r7, #28
 801bdea:	46bd      	mov	sp, r7
 801bdec:	bd90      	pop	{r4, r7, pc}
 801bdee:	bf00      	nop
 801bdf0:	080279ec 	.word	0x080279ec

0801bdf4 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 801bdf4:	b590      	push	{r4, r7, lr}
 801bdf6:	b087      	sub	sp, #28
 801bdf8:	af00      	add	r7, sp, #0
 801bdfa:	60f8      	str	r0, [r7, #12]
 801bdfc:	60b9      	str	r1, [r7, #8]
 801bdfe:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801be00:	22cc      	movs	r2, #204	; 0xcc
 801be02:	490e      	ldr	r1, [pc, #56]	; (801be3c <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE+0x48>)
 801be04:	2038      	movs	r0, #56	; 0x38
 801be06:	f7ef fcfb 	bl	800b800 <_ZnwjPKci>
 801be0a:	4604      	mov	r4, r0
 801be0c:	68b9      	ldr	r1, [r7, #8]
 801be0e:	4620      	mov	r0, r4
 801be10:	f000 fe8c 	bl	801cb2c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801be14:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801be16:	68fb      	ldr	r3, [r7, #12]
 801be18:	69db      	ldr	r3, [r3, #28]
 801be1a:	6979      	ldr	r1, [r7, #20]
 801be1c:	4618      	mov	r0, r3
 801be1e:	f004 fd1d 	bl	802085c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801be22:	697b      	ldr	r3, [r7, #20]
 801be24:	681b      	ldr	r3, [r3, #0]
 801be26:	3334      	adds	r3, #52	; 0x34
 801be28:	681b      	ldr	r3, [r3, #0]
 801be2a:	6879      	ldr	r1, [r7, #4]
 801be2c:	6978      	ldr	r0, [r7, #20]
 801be2e:	4798      	blx	r3
    return *this;
 801be30:	68fb      	ldr	r3, [r7, #12]
}
 801be32:	4618      	mov	r0, r3
 801be34:	371c      	adds	r7, #28
 801be36:	46bd      	mov	sp, r7
 801be38:	bd90      	pop	{r4, r7, pc}
 801be3a:	bf00      	nop
 801be3c:	080279ec 	.word	0x080279ec

0801be40 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockExpectedCall& MockCheckedExpectedCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 801be40:	b590      	push	{r4, r7, lr}
 801be42:	b087      	sub	sp, #28
 801be44:	af00      	add	r7, sp, #0
 801be46:	60f8      	str	r0, [r7, #12]
 801be48:	60b9      	str	r1, [r7, #8]
 801be4a:	607a      	str	r2, [r7, #4]
 801be4c:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801be4e:	22d4      	movs	r2, #212	; 0xd4
 801be50:	490e      	ldr	r1, [pc, #56]	; (801be8c <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj+0x4c>)
 801be52:	2038      	movs	r0, #56	; 0x38
 801be54:	f7ef fcd4 	bl	800b800 <_ZnwjPKci>
 801be58:	4604      	mov	r4, r0
 801be5a:	68b9      	ldr	r1, [r7, #8]
 801be5c:	4620      	mov	r0, r4
 801be5e:	f000 fe65 	bl	801cb2c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801be62:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801be64:	68fb      	ldr	r3, [r7, #12]
 801be66:	69db      	ldr	r3, [r3, #28]
 801be68:	6979      	ldr	r1, [r7, #20]
 801be6a:	4618      	mov	r0, r3
 801be6c:	f004 fcf6 	bl	802085c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setMemoryBuffer(value, size);
 801be70:	697b      	ldr	r3, [r7, #20]
 801be72:	681b      	ldr	r3, [r3, #0]
 801be74:	333c      	adds	r3, #60	; 0x3c
 801be76:	681b      	ldr	r3, [r3, #0]
 801be78:	683a      	ldr	r2, [r7, #0]
 801be7a:	6879      	ldr	r1, [r7, #4]
 801be7c:	6978      	ldr	r0, [r7, #20]
 801be7e:	4798      	blx	r3
    return *this;
 801be80:	68fb      	ldr	r3, [r7, #12]
}
 801be82:	4618      	mov	r0, r3
 801be84:	371c      	adds	r7, #28
 801be86:	46bd      	mov	sp, r7
 801be88:	bd90      	pop	{r4, r7, pc}
 801be8a:	bf00      	nop
 801be8c:	080279ec 	.word	0x080279ec

0801be90 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 801be90:	b590      	push	{r4, r7, lr}
 801be92:	b087      	sub	sp, #28
 801be94:	af00      	add	r7, sp, #0
 801be96:	60f8      	str	r0, [r7, #12]
 801be98:	60b9      	str	r1, [r7, #8]
 801be9a:	607a      	str	r2, [r7, #4]
 801be9c:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801be9e:	22dc      	movs	r2, #220	; 0xdc
 801bea0:	490e      	ldr	r1, [pc, #56]	; (801bedc <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x4c>)
 801bea2:	2038      	movs	r0, #56	; 0x38
 801bea4:	f7ef fcac 	bl	800b800 <_ZnwjPKci>
 801bea8:	4604      	mov	r4, r0
 801beaa:	6879      	ldr	r1, [r7, #4]
 801beac:	4620      	mov	r0, r4
 801beae:	f000 fe3d 	bl	801cb2c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801beb2:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801beb4:	68fb      	ldr	r3, [r7, #12]
 801beb6:	69db      	ldr	r3, [r3, #28]
 801beb8:	6979      	ldr	r1, [r7, #20]
 801beba:	4618      	mov	r0, r3
 801bebc:	f004 fcce 	bl	802085c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 801bec0:	697b      	ldr	r3, [r7, #20]
 801bec2:	681b      	ldr	r3, [r3, #0]
 801bec4:	3340      	adds	r3, #64	; 0x40
 801bec6:	681b      	ldr	r3, [r3, #0]
 801bec8:	683a      	ldr	r2, [r7, #0]
 801beca:	68b9      	ldr	r1, [r7, #8]
 801becc:	6978      	ldr	r0, [r7, #20]
 801bece:	4798      	blx	r3
    return *this;
 801bed0:	68fb      	ldr	r3, [r7, #12]
}
 801bed2:	4618      	mov	r0, r3
 801bed4:	371c      	adds	r7, #28
 801bed6:	46bd      	mov	sp, r7
 801bed8:	bd90      	pop	{r4, r7, pc}
 801beda:	bf00      	nop
 801bedc:	080279ec 	.word	0x080279ec

0801bee0 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterReturning(const SimpleString& name, const void* value, size_t size)
{
 801bee0:	b590      	push	{r4, r7, lr}
 801bee2:	b087      	sub	sp, #28
 801bee4:	af00      	add	r7, sp, #0
 801bee6:	60f8      	str	r0, [r7, #12]
 801bee8:	60b9      	str	r1, [r7, #8]
 801beea:	607a      	str	r2, [r7, #4]
 801beec:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801beee:	22e4      	movs	r2, #228	; 0xe4
 801bef0:	4911      	ldr	r1, [pc, #68]	; (801bf38 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj+0x58>)
 801bef2:	2038      	movs	r0, #56	; 0x38
 801bef4:	f7ef fc84 	bl	800b800 <_ZnwjPKci>
 801bef8:	4604      	mov	r4, r0
 801befa:	68b9      	ldr	r1, [r7, #8]
 801befc:	4620      	mov	r0, r4
 801befe:	f000 fe15 	bl	801cb2c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801bf02:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 801bf04:	68fb      	ldr	r3, [r7, #12]
 801bf06:	6a1b      	ldr	r3, [r3, #32]
 801bf08:	6979      	ldr	r1, [r7, #20]
 801bf0a:	4618      	mov	r0, r3
 801bf0c:	f004 fca6 	bl	802085c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801bf10:	697b      	ldr	r3, [r7, #20]
 801bf12:	681b      	ldr	r3, [r3, #0]
 801bf14:	3330      	adds	r3, #48	; 0x30
 801bf16:	681b      	ldr	r3, [r3, #0]
 801bf18:	6879      	ldr	r1, [r7, #4]
 801bf1a:	6978      	ldr	r0, [r7, #20]
 801bf1c:	4798      	blx	r3
    newParameter->setSize(size);
 801bf1e:	697b      	ldr	r3, [r7, #20]
 801bf20:	681b      	ldr	r3, [r3, #0]
 801bf22:	3348      	adds	r3, #72	; 0x48
 801bf24:	681b      	ldr	r3, [r3, #0]
 801bf26:	6839      	ldr	r1, [r7, #0]
 801bf28:	6978      	ldr	r0, [r7, #20]
 801bf2a:	4798      	blx	r3
    return *this;
 801bf2c:	68fb      	ldr	r3, [r7, #12]
}
 801bf2e:	4618      	mov	r0, r3
 801bf30:	371c      	adds	r7, #28
 801bf32:	46bd      	mov	sp, r7
 801bf34:	bd90      	pop	{r4, r7, pc}
 801bf36:	bf00      	nop
 801bf38:	080279ec 	.word	0x080279ec

0801bf3c <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterOfTypeReturning(const SimpleString& type, const SimpleString& name, const void* value)
{
 801bf3c:	b590      	push	{r4, r7, lr}
 801bf3e:	b087      	sub	sp, #28
 801bf40:	af00      	add	r7, sp, #0
 801bf42:	60f8      	str	r0, [r7, #12]
 801bf44:	60b9      	str	r1, [r7, #8]
 801bf46:	607a      	str	r2, [r7, #4]
 801bf48:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801bf4a:	22ed      	movs	r2, #237	; 0xed
 801bf4c:	490e      	ldr	r1, [pc, #56]	; (801bf88 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv+0x4c>)
 801bf4e:	2038      	movs	r0, #56	; 0x38
 801bf50:	f7ef fc56 	bl	800b800 <_ZnwjPKci>
 801bf54:	4604      	mov	r4, r0
 801bf56:	6879      	ldr	r1, [r7, #4]
 801bf58:	4620      	mov	r0, r4
 801bf5a:	f000 fde7 	bl	801cb2c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801bf5e:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 801bf60:	68fb      	ldr	r3, [r7, #12]
 801bf62:	6a1b      	ldr	r3, [r3, #32]
 801bf64:	6979      	ldr	r1, [r7, #20]
 801bf66:	4618      	mov	r0, r3
 801bf68:	f004 fc78 	bl	802085c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 801bf6c:	697b      	ldr	r3, [r7, #20]
 801bf6e:	681b      	ldr	r3, [r3, #0]
 801bf70:	3340      	adds	r3, #64	; 0x40
 801bf72:	681b      	ldr	r3, [r3, #0]
 801bf74:	683a      	ldr	r2, [r7, #0]
 801bf76:	68b9      	ldr	r1, [r7, #8]
 801bf78:	6978      	ldr	r0, [r7, #20]
 801bf7a:	4798      	blx	r3
    return *this;
 801bf7c:	68fb      	ldr	r3, [r7, #12]
}
 801bf7e:	4618      	mov	r0, r3
 801bf80:	371c      	adds	r7, #28
 801bf82:	46bd      	mov	sp, r7
 801bf84:	bd90      	pop	{r4, r7, pc}
 801bf86:	bf00      	nop
 801bf88:	080279ec 	.word	0x080279ec

0801bf8c <_ZN23MockCheckedExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withUnmodifiedOutputParameter(const SimpleString& name)
{
 801bf8c:	b590      	push	{r4, r7, lr}
 801bf8e:	b083      	sub	sp, #12
 801bf90:	af00      	add	r7, sp, #0
 801bf92:	6078      	str	r0, [r7, #4]
 801bf94:	6039      	str	r1, [r7, #0]
    return withOutputParameterReturning(name, NULLPTR, 0);
 801bf96:	687b      	ldr	r3, [r7, #4]
 801bf98:	681b      	ldr	r3, [r3, #0]
 801bf9a:	3318      	adds	r3, #24
 801bf9c:	681c      	ldr	r4, [r3, #0]
 801bf9e:	2300      	movs	r3, #0
 801bfa0:	2200      	movs	r2, #0
 801bfa2:	6839      	ldr	r1, [r7, #0]
 801bfa4:	6878      	ldr	r0, [r7, #4]
 801bfa6:	47a0      	blx	r4
 801bfa8:	4603      	mov	r3, r0
}
 801bfaa:	4618      	mov	r0, r3
 801bfac:	370c      	adds	r7, #12
 801bfae:	46bd      	mov	sp, r7
 801bfb0:	bd90      	pop	{r4, r7, pc}
	...

0801bfb4 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterType(const SimpleString& name)
{
 801bfb4:	b580      	push	{r7, lr}
 801bfb6:	b086      	sub	sp, #24
 801bfb8:	af00      	add	r7, sp, #0
 801bfba:	60f8      	str	r0, [r7, #12]
 801bfbc:	60b9      	str	r1, [r7, #8]
 801bfbe:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801bfc0:	68bb      	ldr	r3, [r7, #8]
 801bfc2:	69db      	ldr	r3, [r3, #28]
 801bfc4:	6879      	ldr	r1, [r7, #4]
 801bfc6:	4618      	mov	r0, r3
 801bfc8:	f004 fc7e 	bl	80208c8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801bfcc:	6178      	str	r0, [r7, #20]
    return (p) ? p->getType() : StringFrom("");
 801bfce:	697b      	ldr	r3, [r7, #20]
 801bfd0:	2b00      	cmp	r3, #0
 801bfd2:	d008      	beq.n	801bfe6 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x32>
 801bfd4:	697b      	ldr	r3, [r7, #20]
 801bfd6:	681b      	ldr	r3, [r3, #0]
 801bfd8:	3360      	adds	r3, #96	; 0x60
 801bfda:	681b      	ldr	r3, [r3, #0]
 801bfdc:	68fa      	ldr	r2, [r7, #12]
 801bfde:	6979      	ldr	r1, [r7, #20]
 801bfe0:	4610      	mov	r0, r2
 801bfe2:	4798      	blx	r3
 801bfe4:	e004      	b.n	801bff0 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x3c>
 801bfe6:	68fb      	ldr	r3, [r7, #12]
 801bfe8:	4903      	ldr	r1, [pc, #12]	; (801bff8 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x44>)
 801bfea:	4618      	mov	r0, r3
 801bfec:	f7f2 fe10 	bl	800ec10 <_Z10StringFromPKc>
}
 801bff0:	68f8      	ldr	r0, [r7, #12]
 801bff2:	3718      	adds	r7, #24
 801bff4:	46bd      	mov	sp, r7
 801bff6:	bd80      	pop	{r7, pc}
 801bff8:	080279e8 	.word	0x080279e8

0801bffc <_ZN23MockCheckedExpectedCall25hasInputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasInputParameterWithName(const SimpleString& name)
{
 801bffc:	b580      	push	{r7, lr}
 801bffe:	b084      	sub	sp, #16
 801c000:	af00      	add	r7, sp, #0
 801c002:	6078      	str	r0, [r7, #4]
 801c004:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801c006:	687b      	ldr	r3, [r7, #4]
 801c008:	69db      	ldr	r3, [r3, #28]
 801c00a:	6839      	ldr	r1, [r7, #0]
 801c00c:	4618      	mov	r0, r3
 801c00e:	f004 fc5b 	bl	80208c8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801c012:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 801c014:	68fb      	ldr	r3, [r7, #12]
 801c016:	2b00      	cmp	r3, #0
 801c018:	bf14      	ite	ne
 801c01a:	2301      	movne	r3, #1
 801c01c:	2300      	moveq	r3, #0
 801c01e:	b2db      	uxtb	r3, r3
}
 801c020:	4618      	mov	r0, r3
 801c022:	3710      	adds	r7, #16
 801c024:	46bd      	mov	sp, r7
 801c026:	bd80      	pop	{r7, pc}

0801c028 <_ZN23MockCheckedExpectedCall26hasOutputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasOutputParameterWithName(const SimpleString& name)
{
 801c028:	b580      	push	{r7, lr}
 801c02a:	b084      	sub	sp, #16
 801c02c:	af00      	add	r7, sp, #0
 801c02e:	6078      	str	r0, [r7, #4]
 801c030:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 801c032:	687b      	ldr	r3, [r7, #4]
 801c034:	6a1b      	ldr	r3, [r3, #32]
 801c036:	6839      	ldr	r1, [r7, #0]
 801c038:	4618      	mov	r0, r3
 801c03a:	f004 fc45 	bl	80208c8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801c03e:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 801c040:	68fb      	ldr	r3, [r7, #12]
 801c042:	2b00      	cmp	r3, #0
 801c044:	bf14      	ite	ne
 801c046:	2301      	movne	r3, #1
 801c048:	2300      	moveq	r3, #0
 801c04a:	b2db      	uxtb	r3, r3
}
 801c04c:	4618      	mov	r0, r3
 801c04e:	3710      	adds	r7, #16
 801c050:	46bd      	mov	sp, r7
 801c052:	bd80      	pop	{r7, pc}

0801c054 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getInputParameter(const SimpleString& name)
{
 801c054:	b590      	push	{r4, r7, lr}
 801c056:	b089      	sub	sp, #36	; 0x24
 801c058:	af00      	add	r7, sp, #0
 801c05a:	60f8      	str	r0, [r7, #12]
 801c05c:	60b9      	str	r1, [r7, #8]
 801c05e:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801c060:	68bb      	ldr	r3, [r7, #8]
 801c062:	69db      	ldr	r3, [r3, #28]
 801c064:	6879      	ldr	r1, [r7, #4]
 801c066:	4618      	mov	r0, r3
 801c068:	f004 fc2e 	bl	80208c8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801c06c:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 801c06e:	2400      	movs	r4, #0
 801c070:	69fb      	ldr	r3, [r7, #28]
 801c072:	2b00      	cmp	r3, #0
 801c074:	d004      	beq.n	801c080 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x2c>
 801c076:	69f9      	ldr	r1, [r7, #28]
 801c078:	68f8      	ldr	r0, [r7, #12]
 801c07a:	f7f0 f829 	bl	800c0d0 <_ZN14MockNamedValueC1ERKS_>
 801c07e:	e00c      	b.n	801c09a <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x46>
 801c080:	f107 0314 	add.w	r3, r7, #20
 801c084:	490a      	ldr	r1, [pc, #40]	; (801c0b0 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x5c>)
 801c086:	4618      	mov	r0, r3
 801c088:	f7f1 ff7d 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801c08c:	2401      	movs	r4, #1
 801c08e:	f107 0314 	add.w	r3, r7, #20
 801c092:	4619      	mov	r1, r3
 801c094:	68f8      	ldr	r0, [r7, #12]
 801c096:	f002 fc9b 	bl	801e9d0 <_ZN14MockNamedValueC1ERK12SimpleString>
 801c09a:	2c00      	cmp	r4, #0
 801c09c:	d004      	beq.n	801c0a8 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x54>
 801c09e:	f107 0314 	add.w	r3, r7, #20
 801c0a2:	4618      	mov	r0, r3
 801c0a4:	f7f2 fb27 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 801c0a8:	68f8      	ldr	r0, [r7, #12]
 801c0aa:	3724      	adds	r7, #36	; 0x24
 801c0ac:	46bd      	mov	sp, r7
 801c0ae:	bd90      	pop	{r4, r7, pc}
 801c0b0:	080279e8 	.word	0x080279e8

0801c0b4 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getOutputParameter(const SimpleString& name)
{
 801c0b4:	b590      	push	{r4, r7, lr}
 801c0b6:	b089      	sub	sp, #36	; 0x24
 801c0b8:	af00      	add	r7, sp, #0
 801c0ba:	60f8      	str	r0, [r7, #12]
 801c0bc:	60b9      	str	r1, [r7, #8]
 801c0be:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 801c0c0:	68bb      	ldr	r3, [r7, #8]
 801c0c2:	6a1b      	ldr	r3, [r3, #32]
 801c0c4:	6879      	ldr	r1, [r7, #4]
 801c0c6:	4618      	mov	r0, r3
 801c0c8:	f004 fbfe 	bl	80208c8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801c0cc:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 801c0ce:	2400      	movs	r4, #0
 801c0d0:	69fb      	ldr	r3, [r7, #28]
 801c0d2:	2b00      	cmp	r3, #0
 801c0d4:	d004      	beq.n	801c0e0 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x2c>
 801c0d6:	69f9      	ldr	r1, [r7, #28]
 801c0d8:	68f8      	ldr	r0, [r7, #12]
 801c0da:	f7ef fff9 	bl	800c0d0 <_ZN14MockNamedValueC1ERKS_>
 801c0de:	e00c      	b.n	801c0fa <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x46>
 801c0e0:	f107 0314 	add.w	r3, r7, #20
 801c0e4:	490a      	ldr	r1, [pc, #40]	; (801c110 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x5c>)
 801c0e6:	4618      	mov	r0, r3
 801c0e8:	f7f1 ff4d 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801c0ec:	2401      	movs	r4, #1
 801c0ee:	f107 0314 	add.w	r3, r7, #20
 801c0f2:	4619      	mov	r1, r3
 801c0f4:	68f8      	ldr	r0, [r7, #12]
 801c0f6:	f002 fc6b 	bl	801e9d0 <_ZN14MockNamedValueC1ERK12SimpleString>
 801c0fa:	2c00      	cmp	r4, #0
 801c0fc:	d004      	beq.n	801c108 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x54>
 801c0fe:	f107 0314 	add.w	r3, r7, #20
 801c102:	4618      	mov	r0, r3
 801c104:	f7f2 faf7 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 801c108:	68f8      	ldr	r0, [r7, #12]
 801c10a:	3724      	adds	r7, #36	; 0x24
 801c10c:	46bd      	mov	sp, r7
 801c10e:	bd90      	pop	{r4, r7, pc}
 801c110:	080279e8 	.word	0x080279e8

0801c114 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv>:

bool MockCheckedExpectedCall::areParametersMatchingActualCall()
{
 801c114:	b580      	push	{r7, lr}
 801c116:	b084      	sub	sp, #16
 801c118:	af00      	add	r7, sp, #0
 801c11a:	6078      	str	r0, [r7, #4]
    MockNamedValueListNode* p;
    for (p = inputParameters_->begin(); p; p = p->next())
 801c11c:	687b      	ldr	r3, [r7, #4]
 801c11e:	69db      	ldr	r3, [r3, #28]
 801c120:	4618      	mov	r0, r3
 801c122:	f004 fc00 	bl	8020926 <_ZN18MockNamedValueList5beginEv>
 801c126:	60f8      	str	r0, [r7, #12]
 801c128:	68fb      	ldr	r3, [r7, #12]
 801c12a:	2b00      	cmp	r3, #0
 801c12c:	d014      	beq.n	801c158 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x44>
        if (! item(p)->isMatchingActualCall())
 801c12e:	68f9      	ldr	r1, [r7, #12]
 801c130:	6878      	ldr	r0, [r7, #4]
 801c132:	f000 fced 	bl	801cb10 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801c136:	4603      	mov	r3, r0
 801c138:	4618      	mov	r0, r3
 801c13a:	f000 fd1f 	bl	801cb7c <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801c13e:	4603      	mov	r3, r0
 801c140:	f083 0301 	eor.w	r3, r3, #1
 801c144:	b2db      	uxtb	r3, r3
 801c146:	2b00      	cmp	r3, #0
 801c148:	d001      	beq.n	801c14e <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x3a>
            return false;
 801c14a:	2300      	movs	r3, #0
 801c14c:	e023      	b.n	801c196 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = inputParameters_->begin(); p; p = p->next())
 801c14e:	68f8      	ldr	r0, [r7, #12]
 801c150:	f004 faf2 	bl	8020738 <_ZN22MockNamedValueListNode4nextEv>
 801c154:	60f8      	str	r0, [r7, #12]
 801c156:	e7e7      	b.n	801c128 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x14>
    for (p = outputParameters_->begin(); p; p = p->next())
 801c158:	687b      	ldr	r3, [r7, #4]
 801c15a:	6a1b      	ldr	r3, [r3, #32]
 801c15c:	4618      	mov	r0, r3
 801c15e:	f004 fbe2 	bl	8020926 <_ZN18MockNamedValueList5beginEv>
 801c162:	60f8      	str	r0, [r7, #12]
 801c164:	68fb      	ldr	r3, [r7, #12]
 801c166:	2b00      	cmp	r3, #0
 801c168:	d014      	beq.n	801c194 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x80>
        if (! item(p)->isMatchingActualCall())
 801c16a:	68f9      	ldr	r1, [r7, #12]
 801c16c:	6878      	ldr	r0, [r7, #4]
 801c16e:	f000 fccf 	bl	801cb10 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801c172:	4603      	mov	r3, r0
 801c174:	4618      	mov	r0, r3
 801c176:	f000 fd01 	bl	801cb7c <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801c17a:	4603      	mov	r3, r0
 801c17c:	f083 0301 	eor.w	r3, r3, #1
 801c180:	b2db      	uxtb	r3, r3
 801c182:	2b00      	cmp	r3, #0
 801c184:	d001      	beq.n	801c18a <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x76>
            return false;
 801c186:	2300      	movs	r3, #0
 801c188:	e005      	b.n	801c196 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = outputParameters_->begin(); p; p = p->next())
 801c18a:	68f8      	ldr	r0, [r7, #12]
 801c18c:	f004 fad4 	bl	8020738 <_ZN22MockNamedValueListNode4nextEv>
 801c190:	60f8      	str	r0, [r7, #12]
 801c192:	e7e7      	b.n	801c164 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x50>
    return true;
 801c194:	2301      	movs	r3, #1
}
 801c196:	4618      	mov	r0, r3
 801c198:	3710      	adds	r7, #16
 801c19a:	46bd      	mov	sp, r7
 801c19c:	bd80      	pop	{r7, pc}

0801c19e <_ZN23MockCheckedExpectedCall21ignoreOtherParametersEv>:

MockExpectedCall& MockCheckedExpectedCall::ignoreOtherParameters()
{
 801c19e:	b480      	push	{r7}
 801c1a0:	b083      	sub	sp, #12
 801c1a2:	af00      	add	r7, sp, #0
 801c1a4:	6078      	str	r0, [r7, #4]
    ignoreOtherParameters_ = true;
 801c1a6:	687b      	ldr	r3, [r7, #4]
 801c1a8:	2201      	movs	r2, #1
 801c1aa:	731a      	strb	r2, [r3, #12]
    return *this;
 801c1ac:	687b      	ldr	r3, [r7, #4]
}
 801c1ae:	4618      	mov	r0, r3
 801c1b0:	370c      	adds	r7, #12
 801c1b2:	46bd      	mov	sp, r7
 801c1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1b8:	4770      	bx	lr

0801c1ba <_ZN23MockCheckedExpectedCall11isFulfilledEv>:

bool MockCheckedExpectedCall::isFulfilled()
{
 801c1ba:	b480      	push	{r7}
 801c1bc:	b083      	sub	sp, #12
 801c1be:	af00      	add	r7, sp, #0
 801c1c0:	6078      	str	r0, [r7, #4]
    return (actualCalls_ == expectedCalls_);
 801c1c2:	687b      	ldr	r3, [r7, #4]
 801c1c4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801c1c6:	687b      	ldr	r3, [r7, #4]
 801c1c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c1ca:	429a      	cmp	r2, r3
 801c1cc:	bf0c      	ite	eq
 801c1ce:	2301      	moveq	r3, #1
 801c1d0:	2300      	movne	r3, #0
 801c1d2:	b2db      	uxtb	r3, r3
}
 801c1d4:	4618      	mov	r0, r3
 801c1d6:	370c      	adds	r7, #12
 801c1d8:	46bd      	mov	sp, r7
 801c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1de:	4770      	bx	lr

0801c1e0 <_ZN23MockCheckedExpectedCall19canMatchActualCallsEv>:

bool MockCheckedExpectedCall::canMatchActualCalls()
{
 801c1e0:	b480      	push	{r7}
 801c1e2:	b083      	sub	sp, #12
 801c1e4:	af00      	add	r7, sp, #0
 801c1e6:	6078      	str	r0, [r7, #4]
    return (actualCalls_ < expectedCalls_);
 801c1e8:	687b      	ldr	r3, [r7, #4]
 801c1ea:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801c1ec:	687b      	ldr	r3, [r7, #4]
 801c1ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c1f0:	429a      	cmp	r2, r3
 801c1f2:	bf34      	ite	cc
 801c1f4:	2301      	movcc	r3, #1
 801c1f6:	2300      	movcs	r3, #0
 801c1f8:	b2db      	uxtb	r3, r3
}
 801c1fa:	4618      	mov	r0, r3
 801c1fc:	370c      	adds	r7, #12
 801c1fe:	46bd      	mov	sp, r7
 801c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c204:	4770      	bx	lr

0801c206 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv>:

bool MockCheckedExpectedCall::isMatchingActualCallAndFinalized()
{
 801c206:	b580      	push	{r7, lr}
 801c208:	b082      	sub	sp, #8
 801c20a:	af00      	add	r7, sp, #0
 801c20c:	6078      	str	r0, [r7, #4]
    return isMatchingActualCall() && (!ignoreOtherParameters_ || isActualCallMatchFinalized_);
 801c20e:	687b      	ldr	r3, [r7, #4]
 801c210:	681b      	ldr	r3, [r3, #0]
 801c212:	33cc      	adds	r3, #204	; 0xcc
 801c214:	681b      	ldr	r3, [r3, #0]
 801c216:	6878      	ldr	r0, [r7, #4]
 801c218:	4798      	blx	r3
 801c21a:	4603      	mov	r3, r0
 801c21c:	2b00      	cmp	r3, #0
 801c21e:	d00c      	beq.n	801c23a <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 801c220:	687b      	ldr	r3, [r7, #4]
 801c222:	7b1b      	ldrb	r3, [r3, #12]
 801c224:	f083 0301 	eor.w	r3, r3, #1
 801c228:	b2db      	uxtb	r3, r3
 801c22a:	2b00      	cmp	r3, #0
 801c22c:	d103      	bne.n	801c236 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x30>
 801c22e:	687b      	ldr	r3, [r7, #4]
 801c230:	7b5b      	ldrb	r3, [r3, #13]
 801c232:	2b00      	cmp	r3, #0
 801c234:	d001      	beq.n	801c23a <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 801c236:	2301      	movs	r3, #1
 801c238:	e000      	b.n	801c23c <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x36>
 801c23a:	2300      	movs	r3, #0
}
 801c23c:	4618      	mov	r0, r3
 801c23e:	3708      	adds	r7, #8
 801c240:	46bd      	mov	sp, r7
 801c242:	bd80      	pop	{r7, pc}

0801c244 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::isMatchingActualCall()
{
 801c244:	b580      	push	{r7, lr}
 801c246:	b082      	sub	sp, #8
 801c248:	af00      	add	r7, sp, #0
 801c24a:	6078      	str	r0, [r7, #4]
    return areParametersMatchingActualCall() && wasPassedToObject_;
 801c24c:	687b      	ldr	r3, [r7, #4]
 801c24e:	681b      	ldr	r3, [r3, #0]
 801c250:	33d0      	adds	r3, #208	; 0xd0
 801c252:	681b      	ldr	r3, [r3, #0]
 801c254:	6878      	ldr	r0, [r7, #4]
 801c256:	4798      	blx	r3
 801c258:	4603      	mov	r3, r0
 801c25a:	2b00      	cmp	r3, #0
 801c25c:	d006      	beq.n	801c26c <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 801c25e:	687b      	ldr	r3, [r7, #4]
 801c260:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 801c264:	2b00      	cmp	r3, #0
 801c266:	d001      	beq.n	801c26c <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 801c268:	2301      	movs	r3, #1
 801c26a:	e000      	b.n	801c26e <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x2a>
 801c26c:	2300      	movs	r3, #0
}
 801c26e:	4618      	mov	r0, r3
 801c270:	3708      	adds	r7, #8
 801c272:	46bd      	mov	sp, r7
 801c274:	bd80      	pop	{r7, pc}

0801c276 <_ZN23MockCheckedExpectedCall11callWasMadeEj>:

void MockCheckedExpectedCall::callWasMade(unsigned int callOrder)
{
 801c276:	b580      	push	{r7, lr}
 801c278:	b082      	sub	sp, #8
 801c27a:	af00      	add	r7, sp, #0
 801c27c:	6078      	str	r0, [r7, #4]
 801c27e:	6039      	str	r1, [r7, #0]
    actualCalls_++;
 801c280:	687b      	ldr	r3, [r7, #4]
 801c282:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801c284:	1c5a      	adds	r2, r3, #1
 801c286:	687b      	ldr	r3, [r7, #4]
 801c288:	669a      	str	r2, [r3, #104]	; 0x68

    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801c28a:	687b      	ldr	r3, [r7, #4]
 801c28c:	691b      	ldr	r3, [r3, #16]
 801c28e:	2b00      	cmp	r3, #0
 801c290:	d00c      	beq.n	801c2ac <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 801c292:	687b      	ldr	r3, [r7, #4]
 801c294:	691b      	ldr	r3, [r3, #16]
    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801c296:	683a      	ldr	r2, [r7, #0]
 801c298:	429a      	cmp	r2, r3
 801c29a:	d304      	bcc.n	801c2a6 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x30>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 801c29c:	687b      	ldr	r3, [r7, #4]
 801c29e:	695b      	ldr	r3, [r3, #20]
 801c2a0:	683a      	ldr	r2, [r7, #0]
 801c2a2:	429a      	cmp	r2, r3
 801c2a4:	d902      	bls.n	801c2ac <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
        outOfOrder_ = true;
 801c2a6:	687b      	ldr	r3, [r7, #4]
 801c2a8:	2201      	movs	r2, #1
 801c2aa:	761a      	strb	r2, [r3, #24]
    }

    resetActualCallMatchingState();
 801c2ac:	687b      	ldr	r3, [r7, #4]
 801c2ae:	681b      	ldr	r3, [r3, #0]
 801c2b0:	33ec      	adds	r3, #236	; 0xec
 801c2b2:	681b      	ldr	r3, [r3, #0]
 801c2b4:	6878      	ldr	r0, [r7, #4]
 801c2b6:	4798      	blx	r3
}
 801c2b8:	bf00      	nop
 801c2ba:	3708      	adds	r7, #8
 801c2bc:	46bd      	mov	sp, r7
 801c2be:	bd80      	pop	{r7, pc}

0801c2c0 <_ZN23MockCheckedExpectedCall23finalizeActualCallMatchEv>:

void MockCheckedExpectedCall::finalizeActualCallMatch()
{
 801c2c0:	b480      	push	{r7}
 801c2c2:	b083      	sub	sp, #12
 801c2c4:	af00      	add	r7, sp, #0
 801c2c6:	6078      	str	r0, [r7, #4]
    isActualCallMatchFinalized_ = true;
 801c2c8:	687b      	ldr	r3, [r7, #4]
 801c2ca:	2201      	movs	r2, #1
 801c2cc:	735a      	strb	r2, [r3, #13]
}
 801c2ce:	bf00      	nop
 801c2d0:	370c      	adds	r7, #12
 801c2d2:	46bd      	mov	sp, r7
 801c2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2d8:	4770      	bx	lr

0801c2da <_ZN23MockCheckedExpectedCall17wasPassedToObjectEv>:


void MockCheckedExpectedCall::wasPassedToObject()
{
 801c2da:	b480      	push	{r7}
 801c2dc:	b083      	sub	sp, #12
 801c2de:	af00      	add	r7, sp, #0
 801c2e0:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = true;
 801c2e2:	687b      	ldr	r3, [r7, #4]
 801c2e4:	2201      	movs	r2, #1
 801c2e6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
}
 801c2ea:	bf00      	nop
 801c2ec:	370c      	adds	r7, #12
 801c2ee:	46bd      	mov	sp, r7
 801c2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2f4:	4770      	bx	lr

0801c2f6 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv>:

void MockCheckedExpectedCall::resetActualCallMatchingState()
{
 801c2f6:	b580      	push	{r7, lr}
 801c2f8:	b084      	sub	sp, #16
 801c2fa:	af00      	add	r7, sp, #0
 801c2fc:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = !isSpecificObjectExpected_;
 801c2fe:	687b      	ldr	r3, [r7, #4]
 801c300:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801c304:	f083 0301 	eor.w	r3, r3, #1
 801c308:	b2da      	uxtb	r2, r3
 801c30a:	687b      	ldr	r3, [r7, #4]
 801c30c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    isActualCallMatchFinalized_ = false;
 801c310:	687b      	ldr	r3, [r7, #4]
 801c312:	2200      	movs	r2, #0
 801c314:	735a      	strb	r2, [r3, #13]

    MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next())
 801c316:	687b      	ldr	r3, [r7, #4]
 801c318:	69db      	ldr	r3, [r3, #28]
 801c31a:	4618      	mov	r0, r3
 801c31c:	f004 fb03 	bl	8020926 <_ZN18MockNamedValueList5beginEv>
 801c320:	60f8      	str	r0, [r7, #12]
 801c322:	68fb      	ldr	r3, [r7, #12]
 801c324:	2b00      	cmp	r3, #0
 801c326:	d00d      	beq.n	801c344 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x4e>
        item(p)->setMatchesActualCall(false);
 801c328:	68f9      	ldr	r1, [r7, #12]
 801c32a:	6878      	ldr	r0, [r7, #4]
 801c32c:	f000 fbf0 	bl	801cb10 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801c330:	4603      	mov	r3, r0
 801c332:	2100      	movs	r1, #0
 801c334:	4618      	mov	r0, r3
 801c336:	f000 fc11 	bl	801cb5c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = inputParameters_->begin(); p; p = p->next())
 801c33a:	68f8      	ldr	r0, [r7, #12]
 801c33c:	f004 f9fc 	bl	8020738 <_ZN22MockNamedValueListNode4nextEv>
 801c340:	60f8      	str	r0, [r7, #12]
 801c342:	e7ee      	b.n	801c322 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x2c>
    for (p = outputParameters_->begin(); p; p = p->next())
 801c344:	687b      	ldr	r3, [r7, #4]
 801c346:	6a1b      	ldr	r3, [r3, #32]
 801c348:	4618      	mov	r0, r3
 801c34a:	f004 faec 	bl	8020926 <_ZN18MockNamedValueList5beginEv>
 801c34e:	60f8      	str	r0, [r7, #12]
 801c350:	68fb      	ldr	r3, [r7, #12]
 801c352:	2b00      	cmp	r3, #0
 801c354:	d00d      	beq.n	801c372 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x7c>
        item(p)->setMatchesActualCall(false);
 801c356:	68f9      	ldr	r1, [r7, #12]
 801c358:	6878      	ldr	r0, [r7, #4]
 801c35a:	f000 fbd9 	bl	801cb10 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801c35e:	4603      	mov	r3, r0
 801c360:	2100      	movs	r1, #0
 801c362:	4618      	mov	r0, r3
 801c364:	f000 fbfa 	bl	801cb5c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = outputParameters_->begin(); p; p = p->next())
 801c368:	68f8      	ldr	r0, [r7, #12]
 801c36a:	f004 f9e5 	bl	8020738 <_ZN22MockNamedValueListNode4nextEv>
 801c36e:	60f8      	str	r0, [r7, #12]
 801c370:	e7ee      	b.n	801c350 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x5a>
}
 801c372:	bf00      	nop
 801c374:	3710      	adds	r7, #16
 801c376:	46bd      	mov	sp, r7
 801c378:	bd80      	pop	{r7, pc}

0801c37a <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::inputParameterWasPassed(const SimpleString& name)
{
 801c37a:	b590      	push	{r4, r7, lr}
 801c37c:	b087      	sub	sp, #28
 801c37e:	af00      	add	r7, sp, #0
 801c380:	6078      	str	r0, [r7, #4]
 801c382:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 801c384:	687b      	ldr	r3, [r7, #4]
 801c386:	69db      	ldr	r3, [r3, #28]
 801c388:	4618      	mov	r0, r3
 801c38a:	f004 facc 	bl	8020926 <_ZN18MockNamedValueList5beginEv>
 801c38e:	6178      	str	r0, [r7, #20]
 801c390:	697b      	ldr	r3, [r7, #20]
 801c392:	2b00      	cmp	r3, #0
 801c394:	d022      	beq.n	801c3dc <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 801c396:	f107 030c 	add.w	r3, r7, #12
 801c39a:	6979      	ldr	r1, [r7, #20]
 801c39c:	4618      	mov	r0, r3
 801c39e:	f004 fa06 	bl	80207ae <_ZNK22MockNamedValueListNode7getNameEv>
 801c3a2:	f107 030c 	add.w	r3, r7, #12
 801c3a6:	6839      	ldr	r1, [r7, #0]
 801c3a8:	4618      	mov	r0, r3
 801c3aa:	f7f2 f9b0 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801c3ae:	4603      	mov	r3, r0
 801c3b0:	461c      	mov	r4, r3
 801c3b2:	f107 030c 	add.w	r3, r7, #12
 801c3b6:	4618      	mov	r0, r3
 801c3b8:	f7f2 f99d 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801c3bc:	2c00      	cmp	r4, #0
 801c3be:	d008      	beq.n	801c3d2 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 801c3c0:	6979      	ldr	r1, [r7, #20]
 801c3c2:	6878      	ldr	r0, [r7, #4]
 801c3c4:	f000 fba4 	bl	801cb10 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801c3c8:	4603      	mov	r3, r0
 801c3ca:	2101      	movs	r1, #1
 801c3cc:	4618      	mov	r0, r3
 801c3ce:	f000 fbc5 	bl	801cb5c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 801c3d2:	6978      	ldr	r0, [r7, #20]
 801c3d4:	f004 f9b0 	bl	8020738 <_ZN22MockNamedValueListNode4nextEv>
 801c3d8:	6178      	str	r0, [r7, #20]
 801c3da:	e7d9      	b.n	801c390 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x16>
    }
}
 801c3dc:	bf00      	nop
 801c3de:	371c      	adds	r7, #28
 801c3e0:	46bd      	mov	sp, r7
 801c3e2:	bd90      	pop	{r4, r7, pc}

0801c3e4 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::outputParameterWasPassed(const SimpleString& name)
{
 801c3e4:	b590      	push	{r4, r7, lr}
 801c3e6:	b087      	sub	sp, #28
 801c3e8:	af00      	add	r7, sp, #0
 801c3ea:	6078      	str	r0, [r7, #4]
 801c3ec:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 801c3ee:	687b      	ldr	r3, [r7, #4]
 801c3f0:	6a1b      	ldr	r3, [r3, #32]
 801c3f2:	4618      	mov	r0, r3
 801c3f4:	f004 fa97 	bl	8020926 <_ZN18MockNamedValueList5beginEv>
 801c3f8:	6178      	str	r0, [r7, #20]
 801c3fa:	697b      	ldr	r3, [r7, #20]
 801c3fc:	2b00      	cmp	r3, #0
 801c3fe:	d022      	beq.n	801c446 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 801c400:	f107 030c 	add.w	r3, r7, #12
 801c404:	6979      	ldr	r1, [r7, #20]
 801c406:	4618      	mov	r0, r3
 801c408:	f004 f9d1 	bl	80207ae <_ZNK22MockNamedValueListNode7getNameEv>
 801c40c:	f107 030c 	add.w	r3, r7, #12
 801c410:	6839      	ldr	r1, [r7, #0]
 801c412:	4618      	mov	r0, r3
 801c414:	f7f2 f97b 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801c418:	4603      	mov	r3, r0
 801c41a:	461c      	mov	r4, r3
 801c41c:	f107 030c 	add.w	r3, r7, #12
 801c420:	4618      	mov	r0, r3
 801c422:	f7f2 f968 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801c426:	2c00      	cmp	r4, #0
 801c428:	d008      	beq.n	801c43c <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 801c42a:	6979      	ldr	r1, [r7, #20]
 801c42c:	6878      	ldr	r0, [r7, #4]
 801c42e:	f000 fb6f 	bl	801cb10 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801c432:	4603      	mov	r3, r0
 801c434:	2101      	movs	r1, #1
 801c436:	4618      	mov	r0, r3
 801c438:	f000 fb90 	bl	801cb5c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 801c43c:	6978      	ldr	r0, [r7, #20]
 801c43e:	f004 f97b 	bl	8020738 <_ZN22MockNamedValueListNode4nextEv>
 801c442:	6178      	str	r0, [r7, #20]
 801c444:	e7d9      	b.n	801c3fa <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x16>
    }
}
 801c446:	bf00      	nop
 801c448:	371c      	adds	r7, #28
 801c44a:	46bd      	mov	sp, r7
 801c44c:	bd90      	pop	{r4, r7, pc}
	...

0801c450 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterValueString(const SimpleString& name)
{
 801c450:	b580      	push	{r7, lr}
 801c452:	b086      	sub	sp, #24
 801c454:	af00      	add	r7, sp, #0
 801c456:	60f8      	str	r0, [r7, #12]
 801c458:	60b9      	str	r1, [r7, #8]
 801c45a:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801c45c:	68bb      	ldr	r3, [r7, #8]
 801c45e:	69db      	ldr	r3, [r3, #28]
 801c460:	6879      	ldr	r1, [r7, #4]
 801c462:	4618      	mov	r0, r3
 801c464:	f004 fa30 	bl	80208c8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801c468:	6178      	str	r0, [r7, #20]
    return (p) ? StringFrom(*p) : "failed";
 801c46a:	697b      	ldr	r3, [r7, #20]
 801c46c:	2b00      	cmp	r3, #0
 801c46e:	d005      	beq.n	801c47c <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x2c>
 801c470:	68fb      	ldr	r3, [r7, #12]
 801c472:	6979      	ldr	r1, [r7, #20]
 801c474:	4618      	mov	r0, r3
 801c476:	f7ff fa0b 	bl	801b890 <_Z10StringFromRK14MockNamedValue>
 801c47a:	e003      	b.n	801c484 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x34>
 801c47c:	4903      	ldr	r1, [pc, #12]	; (801c48c <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x3c>)
 801c47e:	68f8      	ldr	r0, [r7, #12]
 801c480:	f7f1 fd81 	bl	800df86 <_ZN12SimpleStringC1EPKc>
}
 801c484:	68f8      	ldr	r0, [r7, #12]
 801c486:	3718      	adds	r7, #24
 801c488:	46bd      	mov	sp, r7
 801c48a:	bd80      	pop	{r7, pc}
 801c48c:	08027a54 	.word	0x08027a54

0801c490 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasInputParameter(const MockNamedValue& parameter)
{
 801c490:	b590      	push	{r4, r7, lr}
 801c492:	b087      	sub	sp, #28
 801c494:	af00      	add	r7, sp, #0
 801c496:	6078      	str	r0, [r7, #4]
 801c498:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(parameter.getName());
 801c49a:	687b      	ldr	r3, [r7, #4]
 801c49c:	69dc      	ldr	r4, [r3, #28]
 801c49e:	683b      	ldr	r3, [r7, #0]
 801c4a0:	681b      	ldr	r3, [r3, #0]
 801c4a2:	335c      	adds	r3, #92	; 0x5c
 801c4a4:	681b      	ldr	r3, [r3, #0]
 801c4a6:	f107 020c 	add.w	r2, r7, #12
 801c4aa:	6839      	ldr	r1, [r7, #0]
 801c4ac:	4610      	mov	r0, r2
 801c4ae:	4798      	blx	r3
 801c4b0:	f107 030c 	add.w	r3, r7, #12
 801c4b4:	4619      	mov	r1, r3
 801c4b6:	4620      	mov	r0, r4
 801c4b8:	f004 fa06 	bl	80208c8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801c4bc:	6178      	str	r0, [r7, #20]
 801c4be:	f107 030c 	add.w	r3, r7, #12
 801c4c2:	4618      	mov	r0, r3
 801c4c4:	f7f2 f917 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    return (p) ? p->equals(parameter) : ignoreOtherParameters_;
 801c4c8:	697b      	ldr	r3, [r7, #20]
 801c4ca:	2b00      	cmp	r3, #0
 801c4cc:	d00d      	beq.n	801c4ea <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x5a>
 801c4ce:	697b      	ldr	r3, [r7, #20]
 801c4d0:	681b      	ldr	r3, [r3, #0]
 801c4d2:	3350      	adds	r3, #80	; 0x50
 801c4d4:	681b      	ldr	r3, [r3, #0]
 801c4d6:	6839      	ldr	r1, [r7, #0]
 801c4d8:	6978      	ldr	r0, [r7, #20]
 801c4da:	4798      	blx	r3
 801c4dc:	4603      	mov	r3, r0
 801c4de:	2b00      	cmp	r3, #0
 801c4e0:	bf14      	ite	ne
 801c4e2:	2301      	movne	r3, #1
 801c4e4:	2300      	moveq	r3, #0
 801c4e6:	b2db      	uxtb	r3, r3
 801c4e8:	e006      	b.n	801c4f8 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x68>
 801c4ea:	687b      	ldr	r3, [r7, #4]
 801c4ec:	7b1b      	ldrb	r3, [r3, #12]
 801c4ee:	2b00      	cmp	r3, #0
 801c4f0:	bf14      	ite	ne
 801c4f2:	2301      	movne	r3, #1
 801c4f4:	2300      	moveq	r3, #0
 801c4f6:	b2db      	uxtb	r3, r3
}
 801c4f8:	4618      	mov	r0, r3
 801c4fa:	371c      	adds	r7, #28
 801c4fc:	46bd      	mov	sp, r7
 801c4fe:	bd90      	pop	{r4, r7, pc}

0801c500 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasOutputParameter(const MockNamedValue& parameter)
{
 801c500:	b590      	push	{r4, r7, lr}
 801c502:	b087      	sub	sp, #28
 801c504:	af00      	add	r7, sp, #0
 801c506:	6078      	str	r0, [r7, #4]
 801c508:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(parameter.getName());
 801c50a:	687b      	ldr	r3, [r7, #4]
 801c50c:	6a1c      	ldr	r4, [r3, #32]
 801c50e:	683b      	ldr	r3, [r7, #0]
 801c510:	681b      	ldr	r3, [r3, #0]
 801c512:	335c      	adds	r3, #92	; 0x5c
 801c514:	681b      	ldr	r3, [r3, #0]
 801c516:	f107 020c 	add.w	r2, r7, #12
 801c51a:	6839      	ldr	r1, [r7, #0]
 801c51c:	4610      	mov	r0, r2
 801c51e:	4798      	blx	r3
 801c520:	f107 030c 	add.w	r3, r7, #12
 801c524:	4619      	mov	r1, r3
 801c526:	4620      	mov	r0, r4
 801c528:	f004 f9ce 	bl	80208c8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801c52c:	6178      	str	r0, [r7, #20]
 801c52e:	f107 030c 	add.w	r3, r7, #12
 801c532:	4618      	mov	r0, r3
 801c534:	f7f2 f8df 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    return (p) ? p->compatibleForCopying(parameter) : ignoreOtherParameters_;
 801c538:	697b      	ldr	r3, [r7, #20]
 801c53a:	2b00      	cmp	r3, #0
 801c53c:	d00d      	beq.n	801c55a <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x5a>
 801c53e:	697b      	ldr	r3, [r7, #20]
 801c540:	681b      	ldr	r3, [r3, #0]
 801c542:	3354      	adds	r3, #84	; 0x54
 801c544:	681b      	ldr	r3, [r3, #0]
 801c546:	6839      	ldr	r1, [r7, #0]
 801c548:	6978      	ldr	r0, [r7, #20]
 801c54a:	4798      	blx	r3
 801c54c:	4603      	mov	r3, r0
 801c54e:	2b00      	cmp	r3, #0
 801c550:	bf14      	ite	ne
 801c552:	2301      	movne	r3, #1
 801c554:	2300      	moveq	r3, #0
 801c556:	b2db      	uxtb	r3, r3
 801c558:	e006      	b.n	801c568 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x68>
 801c55a:	687b      	ldr	r3, [r7, #4]
 801c55c:	7b1b      	ldrb	r3, [r3, #12]
 801c55e:	2b00      	cmp	r3, #0
 801c560:	bf14      	ite	ne
 801c562:	2301      	movne	r3, #1
 801c564:	2300      	moveq	r3, #0
 801c566:	b2db      	uxtb	r3, r3
}
 801c568:	4618      	mov	r0, r3
 801c56a:	371c      	adds	r7, #28
 801c56c:	46bd      	mov	sp, r7
 801c56e:	bd90      	pop	{r4, r7, pc}

0801c570 <_ZN23MockCheckedExpectedCall12callToStringEv>:

SimpleString MockCheckedExpectedCall::callToString()
{
 801c570:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c572:	b0a1      	sub	sp, #132	; 0x84
 801c574:	af02      	add	r7, sp, #8
 801c576:	6078      	str	r0, [r7, #4]
 801c578:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801c57a:	49bc      	ldr	r1, [pc, #752]	; (801c86c <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801c57c:	6878      	ldr	r0, [r7, #4]
 801c57e:	f7f1 fd02 	bl	800df86 <_ZN12SimpleStringC1EPKc>
    if (isSpecificObjectExpected_)
 801c582:	683b      	ldr	r3, [r7, #0]
 801c584:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801c588:	2b00      	cmp	r3, #0
 801c58a:	d012      	beq.n	801c5b2 <_ZN23MockCheckedExpectedCall12callToStringEv+0x42>
        str = StringFromFormat("(object address: %p)::", objectPtr_);
 801c58c:	683b      	ldr	r3, [r7, #0]
 801c58e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801c590:	f107 030c 	add.w	r3, r7, #12
 801c594:	49b6      	ldr	r1, [pc, #728]	; (801c870 <_ZN23MockCheckedExpectedCall12callToStringEv+0x300>)
 801c596:	4618      	mov	r0, r3
 801c598:	f7f2 fdb4 	bl	800f104 <_Z16StringFromFormatPKcz>
 801c59c:	f107 030c 	add.w	r3, r7, #12
 801c5a0:	4619      	mov	r1, r3
 801c5a2:	6878      	ldr	r0, [r7, #4]
 801c5a4:	f7f1 fd5b 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 801c5a8:	f107 030c 	add.w	r3, r7, #12
 801c5ac:	4618      	mov	r0, r3
 801c5ae:	f7f2 f8a2 	bl	800e6f6 <_ZN12SimpleStringD1Ev>

    str += getName();
 801c5b2:	f107 0314 	add.w	r3, r7, #20
 801c5b6:	6839      	ldr	r1, [r7, #0]
 801c5b8:	4618      	mov	r0, r3
 801c5ba:	f7ff f989 	bl	801b8d0 <_ZNK23MockCheckedExpectedCall7getNameEv>
 801c5be:	f107 0314 	add.w	r3, r7, #20
 801c5c2:	4619      	mov	r1, r3
 801c5c4:	6878      	ldr	r0, [r7, #4]
 801c5c6:	f7f2 f913 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801c5ca:	f107 0314 	add.w	r3, r7, #20
 801c5ce:	4618      	mov	r0, r3
 801c5d0:	f7f2 f891 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    str += " -> ";
 801c5d4:	49a7      	ldr	r1, [pc, #668]	; (801c874 <_ZN23MockCheckedExpectedCall12callToStringEv+0x304>)
 801c5d6:	6878      	ldr	r0, [r7, #4]
 801c5d8:	f7f2 f91c 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    if (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) {
 801c5dc:	683b      	ldr	r3, [r7, #0]
 801c5de:	691b      	ldr	r3, [r3, #16]
 801c5e0:	2b00      	cmp	r3, #0
 801c5e2:	d02d      	beq.n	801c640 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        if (initialExpectedCallOrder_ == finalExpectedCallOrder_) {
 801c5e4:	683b      	ldr	r3, [r7, #0]
 801c5e6:	691a      	ldr	r2, [r3, #16]
 801c5e8:	683b      	ldr	r3, [r7, #0]
 801c5ea:	695b      	ldr	r3, [r3, #20]
 801c5ec:	429a      	cmp	r2, r3
 801c5ee:	d113      	bne.n	801c618 <_ZN23MockCheckedExpectedCall12callToStringEv+0xa8>
            str += StringFromFormat("expected call order: <%u> -> ", initialExpectedCallOrder_);
 801c5f0:	683b      	ldr	r3, [r7, #0]
 801c5f2:	691a      	ldr	r2, [r3, #16]
 801c5f4:	f107 031c 	add.w	r3, r7, #28
 801c5f8:	499f      	ldr	r1, [pc, #636]	; (801c878 <_ZN23MockCheckedExpectedCall12callToStringEv+0x308>)
 801c5fa:	4618      	mov	r0, r3
 801c5fc:	f7f2 fd82 	bl	800f104 <_Z16StringFromFormatPKcz>
 801c600:	f107 031c 	add.w	r3, r7, #28
 801c604:	4619      	mov	r1, r3
 801c606:	6878      	ldr	r0, [r7, #4]
 801c608:	f7f2 f8f2 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801c60c:	f107 031c 	add.w	r3, r7, #28
 801c610:	4618      	mov	r0, r3
 801c612:	f7f2 f870 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801c616:	e013      	b.n	801c640 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        } else {
            str += StringFromFormat("expected calls order: <%u..%u> -> ", initialExpectedCallOrder_, finalExpectedCallOrder_);
 801c618:	683b      	ldr	r3, [r7, #0]
 801c61a:	691a      	ldr	r2, [r3, #16]
 801c61c:	683b      	ldr	r3, [r7, #0]
 801c61e:	695b      	ldr	r3, [r3, #20]
 801c620:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801c624:	4995      	ldr	r1, [pc, #596]	; (801c87c <_ZN23MockCheckedExpectedCall12callToStringEv+0x30c>)
 801c626:	f7f2 fd6d 	bl	800f104 <_Z16StringFromFormatPKcz>
 801c62a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c62e:	4619      	mov	r1, r3
 801c630:	6878      	ldr	r0, [r7, #4]
 801c632:	f7f2 f8dd 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801c636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c63a:	4618      	mov	r0, r3
 801c63c:	f7f2 f85b 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
        }
    }

    if (inputParameters_->begin() == NULLPTR && outputParameters_->begin() == NULLPTR) {
 801c640:	683b      	ldr	r3, [r7, #0]
 801c642:	69db      	ldr	r3, [r3, #28]
 801c644:	4618      	mov	r0, r3
 801c646:	f004 f96e 	bl	8020926 <_ZN18MockNamedValueList5beginEv>
 801c64a:	4603      	mov	r3, r0
 801c64c:	2b00      	cmp	r3, #0
 801c64e:	d109      	bne.n	801c664 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 801c650:	683b      	ldr	r3, [r7, #0]
 801c652:	6a1b      	ldr	r3, [r3, #32]
 801c654:	4618      	mov	r0, r3
 801c656:	f004 f966 	bl	8020926 <_ZN18MockNamedValueList5beginEv>
 801c65a:	4603      	mov	r3, r0
 801c65c:	2b00      	cmp	r3, #0
 801c65e:	d101      	bne.n	801c664 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 801c660:	2301      	movs	r3, #1
 801c662:	e000      	b.n	801c666 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf6>
 801c664:	2300      	movs	r3, #0
 801c666:	2b00      	cmp	r3, #0
 801c668:	d00b      	beq.n	801c682 <_ZN23MockCheckedExpectedCall12callToStringEv+0x112>
        str += (ignoreOtherParameters_) ? "all parameters ignored" : "no parameters";
 801c66a:	683b      	ldr	r3, [r7, #0]
 801c66c:	7b1b      	ldrb	r3, [r3, #12]
 801c66e:	2b00      	cmp	r3, #0
 801c670:	d001      	beq.n	801c676 <_ZN23MockCheckedExpectedCall12callToStringEv+0x106>
 801c672:	4b83      	ldr	r3, [pc, #524]	; (801c880 <_ZN23MockCheckedExpectedCall12callToStringEv+0x310>)
 801c674:	e000      	b.n	801c678 <_ZN23MockCheckedExpectedCall12callToStringEv+0x108>
 801c676:	4b83      	ldr	r3, [pc, #524]	; (801c884 <_ZN23MockCheckedExpectedCall12callToStringEv+0x314>)
 801c678:	4619      	mov	r1, r3
 801c67a:	6878      	ldr	r0, [r7, #4]
 801c67c:	f7f2 f8ca 	bl	800e814 <_ZN12SimpleStringpLEPKc>
 801c680:	e0e3      	b.n	801c84a <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
    } else {
        MockNamedValueListNode* p;

        for (p = inputParameters_->begin(); p; p = p->next()) {
 801c682:	683b      	ldr	r3, [r7, #0]
 801c684:	69db      	ldr	r3, [r3, #28]
 801c686:	4618      	mov	r0, r3
 801c688:	f004 f94d 	bl	8020926 <_ZN18MockNamedValueList5beginEv>
 801c68c:	6778      	str	r0, [r7, #116]	; 0x74
 801c68e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c690:	2b00      	cmp	r3, #0
 801c692:	d069      	beq.n	801c768 <_ZN23MockCheckedExpectedCall12callToStringEv+0x1f8>
            str += StringFromFormat("%s %s: <%s>", p->getType().asCharString(), p->getName().asCharString(), getInputParameterValueString(p->getName()).asCharString());
 801c694:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801c698:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801c69a:	4618      	mov	r0, r3
 801c69c:	f004 f89a 	bl	80207d4 <_ZNK22MockNamedValueListNode7getTypeEv>
 801c6a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801c6a4:	4618      	mov	r0, r3
 801c6a6:	f7f1 fff9 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 801c6aa:	4605      	mov	r5, r0
 801c6ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801c6b0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801c6b2:	4618      	mov	r0, r3
 801c6b4:	f004 f87b 	bl	80207ae <_ZNK22MockNamedValueListNode7getNameEv>
 801c6b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801c6bc:	4618      	mov	r0, r3
 801c6be:	f7f1 ffed 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 801c6c2:	4606      	mov	r6, r0
 801c6c4:	683b      	ldr	r3, [r7, #0]
 801c6c6:	681b      	ldr	r3, [r3, #0]
 801c6c8:	33a4      	adds	r3, #164	; 0xa4
 801c6ca:	681c      	ldr	r4, [r3, #0]
 801c6cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c6d0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801c6d2:	4618      	mov	r0, r3
 801c6d4:	f004 f86b 	bl	80207ae <_ZNK22MockNamedValueListNode7getNameEv>
 801c6d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801c6dc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801c6e0:	6839      	ldr	r1, [r7, #0]
 801c6e2:	4618      	mov	r0, r3
 801c6e4:	47a0      	blx	r4
 801c6e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801c6ea:	4618      	mov	r0, r3
 801c6ec:	f7f1 ffd6 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 801c6f0:	4603      	mov	r3, r0
 801c6f2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801c6f6:	9300      	str	r3, [sp, #0]
 801c6f8:	4633      	mov	r3, r6
 801c6fa:	462a      	mov	r2, r5
 801c6fc:	4962      	ldr	r1, [pc, #392]	; (801c888 <_ZN23MockCheckedExpectedCall12callToStringEv+0x318>)
 801c6fe:	f7f2 fd01 	bl	800f104 <_Z16StringFromFormatPKcz>
 801c702:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c706:	4619      	mov	r1, r3
 801c708:	6878      	ldr	r0, [r7, #4]
 801c70a:	f7f2 f871 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801c70e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c712:	4618      	mov	r0, r3
 801c714:	f7f1 ffef 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801c718:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801c71c:	4618      	mov	r0, r3
 801c71e:	f7f1 ffea 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801c722:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801c726:	4618      	mov	r0, r3
 801c728:	f7f1 ffe5 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801c72c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801c730:	4618      	mov	r0, r3
 801c732:	f7f1 ffe0 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801c736:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801c73a:	4618      	mov	r0, r3
 801c73c:	f7f1 ffdb 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 801c740:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801c742:	f003 fff9 	bl	8020738 <_ZN22MockNamedValueListNode4nextEv>
 801c746:	4603      	mov	r3, r0
 801c748:	2b00      	cmp	r3, #0
 801c74a:	bf14      	ite	ne
 801c74c:	2301      	movne	r3, #1
 801c74e:	2300      	moveq	r3, #0
 801c750:	b2db      	uxtb	r3, r3
 801c752:	2b00      	cmp	r3, #0
 801c754:	d003      	beq.n	801c75e <_ZN23MockCheckedExpectedCall12callToStringEv+0x1ee>
 801c756:	494d      	ldr	r1, [pc, #308]	; (801c88c <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801c758:	6878      	ldr	r0, [r7, #4]
 801c75a:	f7f2 f85b 	bl	800e814 <_ZN12SimpleStringpLEPKc>
        for (p = inputParameters_->begin(); p; p = p->next()) {
 801c75e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801c760:	f003 ffea 	bl	8020738 <_ZN22MockNamedValueListNode4nextEv>
 801c764:	6778      	str	r0, [r7, #116]	; 0x74
 801c766:	e792      	b.n	801c68e <_ZN23MockCheckedExpectedCall12callToStringEv+0x11e>
        }

        if (inputParameters_->begin() && outputParameters_->begin())
 801c768:	683b      	ldr	r3, [r7, #0]
 801c76a:	69db      	ldr	r3, [r3, #28]
 801c76c:	4618      	mov	r0, r3
 801c76e:	f004 f8da 	bl	8020926 <_ZN18MockNamedValueList5beginEv>
 801c772:	4603      	mov	r3, r0
 801c774:	2b00      	cmp	r3, #0
 801c776:	d009      	beq.n	801c78c <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 801c778:	683b      	ldr	r3, [r7, #0]
 801c77a:	6a1b      	ldr	r3, [r3, #32]
 801c77c:	4618      	mov	r0, r3
 801c77e:	f004 f8d2 	bl	8020926 <_ZN18MockNamedValueList5beginEv>
 801c782:	4603      	mov	r3, r0
 801c784:	2b00      	cmp	r3, #0
 801c786:	d001      	beq.n	801c78c <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 801c788:	2301      	movs	r3, #1
 801c78a:	e000      	b.n	801c78e <_ZN23MockCheckedExpectedCall12callToStringEv+0x21e>
 801c78c:	2300      	movs	r3, #0
 801c78e:	2b00      	cmp	r3, #0
 801c790:	d003      	beq.n	801c79a <_ZN23MockCheckedExpectedCall12callToStringEv+0x22a>
        {
            str += ", ";
 801c792:	493e      	ldr	r1, [pc, #248]	; (801c88c <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801c794:	6878      	ldr	r0, [r7, #4]
 801c796:	f7f2 f83d 	bl	800e814 <_ZN12SimpleStringpLEPKc>
        }

        for (p = outputParameters_->begin(); p; p = p->next()) {
 801c79a:	683b      	ldr	r3, [r7, #0]
 801c79c:	6a1b      	ldr	r3, [r3, #32]
 801c79e:	4618      	mov	r0, r3
 801c7a0:	f004 f8c1 	bl	8020926 <_ZN18MockNamedValueList5beginEv>
 801c7a4:	6778      	str	r0, [r7, #116]	; 0x74
 801c7a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c7a8:	2b00      	cmp	r3, #0
 801c7aa:	d046      	beq.n	801c83a <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ca>
            str += StringFromFormat("%s %s: <output>", p->getType().asCharString(), p->getName().asCharString());
 801c7ac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801c7b0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801c7b2:	4618      	mov	r0, r3
 801c7b4:	f004 f80e 	bl	80207d4 <_ZNK22MockNamedValueListNode7getTypeEv>
 801c7b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801c7bc:	4618      	mov	r0, r3
 801c7be:	f7f1 ff6d 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 801c7c2:	4604      	mov	r4, r0
 801c7c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801c7c8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801c7ca:	4618      	mov	r0, r3
 801c7cc:	f003 ffef 	bl	80207ae <_ZNK22MockNamedValueListNode7getNameEv>
 801c7d0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801c7d4:	4618      	mov	r0, r3
 801c7d6:	f7f1 ff61 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 801c7da:	4603      	mov	r3, r0
 801c7dc:	f107 0054 	add.w	r0, r7, #84	; 0x54
 801c7e0:	4622      	mov	r2, r4
 801c7e2:	492b      	ldr	r1, [pc, #172]	; (801c890 <_ZN23MockCheckedExpectedCall12callToStringEv+0x320>)
 801c7e4:	f7f2 fc8e 	bl	800f104 <_Z16StringFromFormatPKcz>
 801c7e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c7ec:	4619      	mov	r1, r3
 801c7ee:	6878      	ldr	r0, [r7, #4]
 801c7f0:	f7f1 fffe 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801c7f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c7f8:	4618      	mov	r0, r3
 801c7fa:	f7f1 ff7c 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801c7fe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801c802:	4618      	mov	r0, r3
 801c804:	f7f1 ff77 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801c808:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801c80c:	4618      	mov	r0, r3
 801c80e:	f7f1 ff72 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 801c812:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801c814:	f003 ff90 	bl	8020738 <_ZN22MockNamedValueListNode4nextEv>
 801c818:	4603      	mov	r3, r0
 801c81a:	2b00      	cmp	r3, #0
 801c81c:	bf14      	ite	ne
 801c81e:	2301      	movne	r3, #1
 801c820:	2300      	moveq	r3, #0
 801c822:	b2db      	uxtb	r3, r3
 801c824:	2b00      	cmp	r3, #0
 801c826:	d003      	beq.n	801c830 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2c0>
 801c828:	4918      	ldr	r1, [pc, #96]	; (801c88c <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801c82a:	6878      	ldr	r0, [r7, #4]
 801c82c:	f7f1 fff2 	bl	800e814 <_ZN12SimpleStringpLEPKc>
        for (p = outputParameters_->begin(); p; p = p->next()) {
 801c830:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801c832:	f003 ff81 	bl	8020738 <_ZN22MockNamedValueListNode4nextEv>
 801c836:	6778      	str	r0, [r7, #116]	; 0x74
 801c838:	e7b5      	b.n	801c7a6 <_ZN23MockCheckedExpectedCall12callToStringEv+0x236>
        }

        if (ignoreOtherParameters_)
 801c83a:	683b      	ldr	r3, [r7, #0]
 801c83c:	7b1b      	ldrb	r3, [r3, #12]
 801c83e:	2b00      	cmp	r3, #0
 801c840:	d003      	beq.n	801c84a <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
            str += ", other parameters are ignored";
 801c842:	4914      	ldr	r1, [pc, #80]	; (801c894 <_ZN23MockCheckedExpectedCall12callToStringEv+0x324>)
 801c844:	6878      	ldr	r0, [r7, #4]
 801c846:	f7f1 ffe5 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    }

    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801c84a:	683b      	ldr	r3, [r7, #0]
 801c84c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801c84e:	683b      	ldr	r3, [r7, #0]
 801c850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801c852:	2b01      	cmp	r3, #1
 801c854:	d101      	bne.n	801c85a <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ea>
 801c856:	4c05      	ldr	r4, [pc, #20]	; (801c86c <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801c858:	e000      	b.n	801c85c <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ec>
 801c85a:	4c0f      	ldr	r4, [pc, #60]	; (801c898 <_ZN23MockCheckedExpectedCall12callToStringEv+0x328>)
 801c85c:	683b      	ldr	r3, [r7, #0]
 801c85e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801c860:	683a      	ldr	r2, [r7, #0]
 801c862:	6e92      	ldr	r2, [r2, #104]	; 0x68
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801c864:	2a01      	cmp	r2, #1
 801c866:	d119      	bne.n	801c89c <_ZN23MockCheckedExpectedCall12callToStringEv+0x32c>
 801c868:	4a00      	ldr	r2, [pc, #0]	; (801c86c <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801c86a:	e018      	b.n	801c89e <_ZN23MockCheckedExpectedCall12callToStringEv+0x32e>
 801c86c:	080279e8 	.word	0x080279e8
 801c870:	08027a5c 	.word	0x08027a5c
 801c874:	08027a74 	.word	0x08027a74
 801c878:	08027a7c 	.word	0x08027a7c
 801c87c:	08027a9c 	.word	0x08027a9c
 801c880:	08027ac0 	.word	0x08027ac0
 801c884:	08027ad8 	.word	0x08027ad8
 801c888:	08027ae8 	.word	0x08027ae8
 801c88c:	08027af4 	.word	0x08027af4
 801c890:	08027af8 	.word	0x08027af8
 801c894:	08027b08 	.word	0x08027b08
 801c898:	08027b28 	.word	0x08027b28
 801c89c:	4a0c      	ldr	r2, [pc, #48]	; (801c8d0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x360>)
 801c89e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 801c8a2:	9201      	str	r2, [sp, #4]
 801c8a4:	9300      	str	r3, [sp, #0]
 801c8a6:	4623      	mov	r3, r4
 801c8a8:	460a      	mov	r2, r1
 801c8aa:	490a      	ldr	r1, [pc, #40]	; (801c8d4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x364>)
 801c8ac:	f7f2 fc2a 	bl	800f104 <_Z16StringFromFormatPKcz>
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801c8b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801c8b4:	4619      	mov	r1, r3
 801c8b6:	6878      	ldr	r0, [r7, #4]
 801c8b8:	f7f1 ff9a 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801c8bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801c8c0:	4618      	mov	r0, r3
 801c8c2:	f7f1 ff18 	bl	800e6f6 <_ZN12SimpleStringD1Ev>

    return str;
 801c8c6:	bf00      	nop
}
 801c8c8:	6878      	ldr	r0, [r7, #4]
 801c8ca:	377c      	adds	r7, #124	; 0x7c
 801c8cc:	46bd      	mov	sp, r7
 801c8ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c8d0:	08027b28 	.word	0x08027b28
 801c8d4:	08027b2c 	.word	0x08027b2c

0801c8d8 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv>:

SimpleString MockCheckedExpectedCall::missingParametersToString()
{
 801c8d8:	b590      	push	{r4, r7, lr}
 801c8da:	b095      	sub	sp, #84	; 0x54
 801c8dc:	af00      	add	r7, sp, #0
 801c8de:	6078      	str	r0, [r7, #4]
 801c8e0:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801c8e2:	496c      	ldr	r1, [pc, #432]	; (801ca94 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801c8e4:	6878      	ldr	r0, [r7, #4]
 801c8e6:	f7f1 fb4e 	bl	800df86 <_ZN12SimpleStringC1EPKc>
	MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next()) {
 801c8ea:	683b      	ldr	r3, [r7, #0]
 801c8ec:	69db      	ldr	r3, [r3, #28]
 801c8ee:	4618      	mov	r0, r3
 801c8f0:	f004 f819 	bl	8020926 <_ZN18MockNamedValueList5beginEv>
 801c8f4:	64f8      	str	r0, [r7, #76]	; 0x4c
 801c8f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c8f8:	2b00      	cmp	r3, #0
 801c8fa:	d05e      	beq.n	801c9ba <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xe2>
        if (! item(p)->isMatchingActualCall()) {
 801c8fc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801c8fe:	6838      	ldr	r0, [r7, #0]
 801c900:	f000 f906 	bl	801cb10 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801c904:	4603      	mov	r3, r0
 801c906:	4618      	mov	r0, r3
 801c908:	f000 f938 	bl	801cb7c <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801c90c:	4603      	mov	r3, r0
 801c90e:	f083 0301 	eor.w	r3, r3, #1
 801c912:	b2db      	uxtb	r3, r3
 801c914:	2b00      	cmp	r3, #0
 801c916:	d04b      	beq.n	801c9b0 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xd8>
            if (str != "") str += ", ";
 801c918:	f107 030c 	add.w	r3, r7, #12
 801c91c:	495d      	ldr	r1, [pc, #372]	; (801ca94 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801c91e:	4618      	mov	r0, r3
 801c920:	f7f1 fb31 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801c924:	f107 030c 	add.w	r3, r7, #12
 801c928:	4619      	mov	r1, r3
 801c92a:	6878      	ldr	r0, [r7, #4]
 801c92c:	f7f1 ff34 	bl	800e798 <_ZneRK12SimpleStringS1_>
 801c930:	4603      	mov	r3, r0
 801c932:	461c      	mov	r4, r3
 801c934:	f107 030c 	add.w	r3, r7, #12
 801c938:	4618      	mov	r0, r3
 801c93a:	f7f1 fedc 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801c93e:	2c00      	cmp	r4, #0
 801c940:	d003      	beq.n	801c94a <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x72>
 801c942:	4955      	ldr	r1, [pc, #340]	; (801ca98 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 801c944:	6878      	ldr	r0, [r7, #4]
 801c946:	f7f1 ff65 	bl	800e814 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801c94a:	f107 031c 	add.w	r3, r7, #28
 801c94e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801c950:	4618      	mov	r0, r3
 801c952:	f003 ff3f 	bl	80207d4 <_ZNK22MockNamedValueListNode7getTypeEv>
 801c956:	f107 031c 	add.w	r3, r7, #28
 801c95a:	4618      	mov	r0, r3
 801c95c:	f7f1 fe9e 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 801c960:	4604      	mov	r4, r0
 801c962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c966:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801c968:	4618      	mov	r0, r3
 801c96a:	f003 ff20 	bl	80207ae <_ZNK22MockNamedValueListNode7getNameEv>
 801c96e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c972:	4618      	mov	r0, r3
 801c974:	f7f1 fe92 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 801c978:	4603      	mov	r3, r0
 801c97a:	f107 0014 	add.w	r0, r7, #20
 801c97e:	4622      	mov	r2, r4
 801c980:	4946      	ldr	r1, [pc, #280]	; (801ca9c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 801c982:	f7f2 fbbf 	bl	800f104 <_Z16StringFromFormatPKcz>
 801c986:	f107 0314 	add.w	r3, r7, #20
 801c98a:	4619      	mov	r1, r3
 801c98c:	6878      	ldr	r0, [r7, #4]
 801c98e:	f7f1 ff2f 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801c992:	f107 0314 	add.w	r3, r7, #20
 801c996:	4618      	mov	r0, r3
 801c998:	f7f1 fead 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801c99c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c9a0:	4618      	mov	r0, r3
 801c9a2:	f7f1 fea8 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801c9a6:	f107 031c 	add.w	r3, r7, #28
 801c9aa:	4618      	mov	r0, r3
 801c9ac:	f7f1 fea3 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    for (p = inputParameters_->begin(); p; p = p->next()) {
 801c9b0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801c9b2:	f003 fec1 	bl	8020738 <_ZN22MockNamedValueListNode4nextEv>
 801c9b6:	64f8      	str	r0, [r7, #76]	; 0x4c
 801c9b8:	e79d      	b.n	801c8f6 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1e>
        }
    }
    for (p = outputParameters_->begin(); p; p = p->next()) {
 801c9ba:	683b      	ldr	r3, [r7, #0]
 801c9bc:	6a1b      	ldr	r3, [r3, #32]
 801c9be:	4618      	mov	r0, r3
 801c9c0:	f003 ffb1 	bl	8020926 <_ZN18MockNamedValueList5beginEv>
 801c9c4:	64f8      	str	r0, [r7, #76]	; 0x4c
 801c9c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c9c8:	2b00      	cmp	r3, #0
 801c9ca:	d05e      	beq.n	801ca8a <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1b2>
        if (! item(p)->isMatchingActualCall()) {
 801c9cc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801c9ce:	6838      	ldr	r0, [r7, #0]
 801c9d0:	f000 f89e 	bl	801cb10 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801c9d4:	4603      	mov	r3, r0
 801c9d6:	4618      	mov	r0, r3
 801c9d8:	f000 f8d0 	bl	801cb7c <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801c9dc:	4603      	mov	r3, r0
 801c9de:	f083 0301 	eor.w	r3, r3, #1
 801c9e2:	b2db      	uxtb	r3, r3
 801c9e4:	2b00      	cmp	r3, #0
 801c9e6:	d04b      	beq.n	801ca80 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1a8>
            if (str != "") str += ", ";
 801c9e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c9ec:	4929      	ldr	r1, [pc, #164]	; (801ca94 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801c9ee:	4618      	mov	r0, r3
 801c9f0:	f7f1 fac9 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801c9f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c9f8:	4619      	mov	r1, r3
 801c9fa:	6878      	ldr	r0, [r7, #4]
 801c9fc:	f7f1 fecc 	bl	800e798 <_ZneRK12SimpleStringS1_>
 801ca00:	4603      	mov	r3, r0
 801ca02:	461c      	mov	r4, r3
 801ca04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ca08:	4618      	mov	r0, r3
 801ca0a:	f7f1 fe74 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801ca0e:	2c00      	cmp	r4, #0
 801ca10:	d003      	beq.n	801ca1a <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x142>
 801ca12:	4921      	ldr	r1, [pc, #132]	; (801ca98 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 801ca14:	6878      	ldr	r0, [r7, #4]
 801ca16:	f7f1 fefd 	bl	800e814 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801ca1a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801ca1e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801ca20:	4618      	mov	r0, r3
 801ca22:	f003 fed7 	bl	80207d4 <_ZNK22MockNamedValueListNode7getTypeEv>
 801ca26:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801ca2a:	4618      	mov	r0, r3
 801ca2c:	f7f1 fe36 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 801ca30:	4604      	mov	r4, r0
 801ca32:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801ca36:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801ca38:	4618      	mov	r0, r3
 801ca3a:	f003 feb8 	bl	80207ae <_ZNK22MockNamedValueListNode7getNameEv>
 801ca3e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801ca42:	4618      	mov	r0, r3
 801ca44:	f7f1 fe2a 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 801ca48:	4603      	mov	r3, r0
 801ca4a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801ca4e:	4622      	mov	r2, r4
 801ca50:	4912      	ldr	r1, [pc, #72]	; (801ca9c <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 801ca52:	f7f2 fb57 	bl	800f104 <_Z16StringFromFormatPKcz>
 801ca56:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801ca5a:	4619      	mov	r1, r3
 801ca5c:	6878      	ldr	r0, [r7, #4]
 801ca5e:	f7f1 fec7 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801ca62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801ca66:	4618      	mov	r0, r3
 801ca68:	f7f1 fe45 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801ca6c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801ca70:	4618      	mov	r0, r3
 801ca72:	f7f1 fe40 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801ca76:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801ca7a:	4618      	mov	r0, r3
 801ca7c:	f7f1 fe3b 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    for (p = outputParameters_->begin(); p; p = p->next()) {
 801ca80:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801ca82:	f003 fe59 	bl	8020738 <_ZN22MockNamedValueListNode4nextEv>
 801ca86:	64f8      	str	r0, [r7, #76]	; 0x4c
 801ca88:	e79d      	b.n	801c9c6 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xee>
        }
    }
    return str;
 801ca8a:	bf00      	nop
}
 801ca8c:	6878      	ldr	r0, [r7, #4]
 801ca8e:	3754      	adds	r7, #84	; 0x54
 801ca90:	46bd      	mov	sp, r7
 801ca92:	bd90      	pop	{r4, r7, pc}
 801ca94:	080279e8 	.word	0x080279e8
 801ca98:	08027af4 	.word	0x08027af4
 801ca9c:	08027b54 	.word	0x08027b54

0801caa0 <_ZN23MockCheckedExpectedCall9relatesToERK12SimpleString>:

bool MockCheckedExpectedCall::relatesTo(const SimpleString& functionName)
{
 801caa0:	b590      	push	{r4, r7, lr}
 801caa2:	b085      	sub	sp, #20
 801caa4:	af00      	add	r7, sp, #0
 801caa6:	6078      	str	r0, [r7, #4]
 801caa8:	6039      	str	r1, [r7, #0]
    return functionName == getName();
 801caaa:	f107 0308 	add.w	r3, r7, #8
 801caae:	6879      	ldr	r1, [r7, #4]
 801cab0:	4618      	mov	r0, r3
 801cab2:	f7fe ff0d 	bl	801b8d0 <_ZNK23MockCheckedExpectedCall7getNameEv>
 801cab6:	f107 0308 	add.w	r3, r7, #8
 801caba:	4619      	mov	r1, r3
 801cabc:	6838      	ldr	r0, [r7, #0]
 801cabe:	f7f1 fe26 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801cac2:	4603      	mov	r3, r0
 801cac4:	461c      	mov	r4, r3
 801cac6:	f107 0308 	add.w	r3, r7, #8
 801caca:	4618      	mov	r0, r3
 801cacc:	f7f1 fe13 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801cad0:	4623      	mov	r3, r4
}
 801cad2:	4618      	mov	r0, r3
 801cad4:	3714      	adds	r7, #20
 801cad6:	46bd      	mov	sp, r7
 801cad8:	bd90      	pop	{r4, r7, pc}

0801cada <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv>:

bool MockCheckedExpectedCall::relatesToObject(const void* objectPtr) const
{
 801cada:	b480      	push	{r7}
 801cadc:	b083      	sub	sp, #12
 801cade:	af00      	add	r7, sp, #0
 801cae0:	6078      	str	r0, [r7, #4]
 801cae2:	6039      	str	r1, [r7, #0]
    return (!isSpecificObjectExpected_) || (objectPtr_ == objectPtr);
 801cae4:	687b      	ldr	r3, [r7, #4]
 801cae6:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801caea:	f083 0301 	eor.w	r3, r3, #1
 801caee:	b2db      	uxtb	r3, r3
 801caf0:	2b00      	cmp	r3, #0
 801caf2:	d104      	bne.n	801cafe <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x24>
 801caf4:	687b      	ldr	r3, [r7, #4]
 801caf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801caf8:	683a      	ldr	r2, [r7, #0]
 801cafa:	429a      	cmp	r2, r3
 801cafc:	d101      	bne.n	801cb02 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x28>
 801cafe:	2301      	movs	r3, #1
 801cb00:	e000      	b.n	801cb04 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x2a>
 801cb02:	2300      	movs	r3, #0
}
 801cb04:	4618      	mov	r0, r3
 801cb06:	370c      	adds	r7, #12
 801cb08:	46bd      	mov	sp, r7
 801cb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb0e:	4770      	bx	lr

0801cb10 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>:

MockCheckedExpectedCall::MockExpectedFunctionParameter* MockCheckedExpectedCall::item(MockNamedValueListNode* node)
{
 801cb10:	b580      	push	{r7, lr}
 801cb12:	b082      	sub	sp, #8
 801cb14:	af00      	add	r7, sp, #0
 801cb16:	6078      	str	r0, [r7, #4]
 801cb18:	6039      	str	r1, [r7, #0]
    return (MockExpectedFunctionParameter*) node->item();
 801cb1a:	6838      	ldr	r0, [r7, #0]
 801cb1c:	f003 fe18 	bl	8020750 <_ZN22MockNamedValueListNode4itemEv>
 801cb20:	4603      	mov	r3, r0
}
 801cb22:	4618      	mov	r0, r3
 801cb24:	3708      	adds	r7, #8
 801cb26:	46bd      	mov	sp, r7
 801cb28:	bd80      	pop	{r7, pc}
	...

0801cb2c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>:

MockCheckedExpectedCall::MockExpectedFunctionParameter::MockExpectedFunctionParameter(const SimpleString& name)
 801cb2c:	b580      	push	{r7, lr}
 801cb2e:	b082      	sub	sp, #8
 801cb30:	af00      	add	r7, sp, #0
 801cb32:	6078      	str	r0, [r7, #4]
 801cb34:	6039      	str	r1, [r7, #0]
            : MockNamedValue(name), matchesActualCall_(false)
 801cb36:	687b      	ldr	r3, [r7, #4]
 801cb38:	6839      	ldr	r1, [r7, #0]
 801cb3a:	4618      	mov	r0, r3
 801cb3c:	f001 ff48 	bl	801e9d0 <_ZN14MockNamedValueC1ERK12SimpleString>
 801cb40:	4a05      	ldr	r2, [pc, #20]	; (801cb58 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString+0x2c>)
 801cb42:	687b      	ldr	r3, [r7, #4]
 801cb44:	601a      	str	r2, [r3, #0]
 801cb46:	687b      	ldr	r3, [r7, #4]
 801cb48:	2200      	movs	r2, #0
 801cb4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
{
}
 801cb4e:	687b      	ldr	r3, [r7, #4]
 801cb50:	4618      	mov	r0, r3
 801cb52:	3708      	adds	r7, #8
 801cb54:	46bd      	mov	sp, r7
 801cb56:	bd80      	pop	{r7, pc}
 801cb58:	0802ad98 	.word	0x0802ad98

0801cb5c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>:

void MockCheckedExpectedCall::MockExpectedFunctionParameter::setMatchesActualCall(bool b)
{
 801cb5c:	b480      	push	{r7}
 801cb5e:	b083      	sub	sp, #12
 801cb60:	af00      	add	r7, sp, #0
 801cb62:	6078      	str	r0, [r7, #4]
 801cb64:	460b      	mov	r3, r1
 801cb66:	70fb      	strb	r3, [r7, #3]
    matchesActualCall_ = b;
 801cb68:	687b      	ldr	r3, [r7, #4]
 801cb6a:	78fa      	ldrb	r2, [r7, #3]
 801cb6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 801cb70:	bf00      	nop
 801cb72:	370c      	adds	r7, #12
 801cb74:	46bd      	mov	sp, r7
 801cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb7a:	4770      	bx	lr

0801cb7c <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::MockExpectedFunctionParameter::isMatchingActualCall() const
{
 801cb7c:	b480      	push	{r7}
 801cb7e:	b083      	sub	sp, #12
 801cb80:	af00      	add	r7, sp, #0
 801cb82:	6078      	str	r0, [r7, #4]
    return matchesActualCall_;
 801cb84:	687b      	ldr	r3, [r7, #4]
 801cb86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 801cb8a:	4618      	mov	r0, r3
 801cb8c:	370c      	adds	r7, #12
 801cb8e:	46bd      	mov	sp, r7
 801cb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb94:	4770      	bx	lr
	...

0801cb98 <_ZN23MockCheckedExpectedCall14andReturnValueEb>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(bool value)
{
 801cb98:	b580      	push	{r7, lr}
 801cb9a:	b082      	sub	sp, #8
 801cb9c:	af00      	add	r7, sp, #0
 801cb9e:	6078      	str	r0, [r7, #4]
 801cba0:	460b      	mov	r3, r1
 801cba2:	70fb      	strb	r3, [r7, #3]
    returnValue_.setName("returnValue");
 801cba4:	687b      	ldr	r3, [r7, #4]
 801cba6:	3328      	adds	r3, #40	; 0x28
 801cba8:	4907      	ldr	r1, [pc, #28]	; (801cbc8 <_ZN23MockCheckedExpectedCall14andReturnValueEb+0x30>)
 801cbaa:	4618      	mov	r0, r3
 801cbac:	f002 f9b4 	bl	801ef18 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801cbb0:	687b      	ldr	r3, [r7, #4]
 801cbb2:	3328      	adds	r3, #40	; 0x28
 801cbb4:	78fa      	ldrb	r2, [r7, #3]
 801cbb6:	4611      	mov	r1, r2
 801cbb8:	4618      	mov	r0, r3
 801cbba:	f001 ff5b 	bl	801ea74 <_ZN14MockNamedValue8setValueEb>
    return *this;
 801cbbe:	687b      	ldr	r3, [r7, #4]
}
 801cbc0:	4618      	mov	r0, r3
 801cbc2:	3708      	adds	r7, #8
 801cbc4:	46bd      	mov	sp, r7
 801cbc6:	bd80      	pop	{r7, pc}
 801cbc8:	08027b5c 	.word	0x08027b5c

0801cbcc <_ZN23MockCheckedExpectedCall14andReturnValueEj>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned int value)
{
 801cbcc:	b580      	push	{r7, lr}
 801cbce:	b082      	sub	sp, #8
 801cbd0:	af00      	add	r7, sp, #0
 801cbd2:	6078      	str	r0, [r7, #4]
 801cbd4:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801cbd6:	687b      	ldr	r3, [r7, #4]
 801cbd8:	3328      	adds	r3, #40	; 0x28
 801cbda:	4907      	ldr	r1, [pc, #28]	; (801cbf8 <_ZN23MockCheckedExpectedCall14andReturnValueEj+0x2c>)
 801cbdc:	4618      	mov	r0, r3
 801cbde:	f002 f99b 	bl	801ef18 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801cbe2:	687b      	ldr	r3, [r7, #4]
 801cbe4:	3328      	adds	r3, #40	; 0x28
 801cbe6:	6839      	ldr	r1, [r7, #0]
 801cbe8:	4618      	mov	r0, r3
 801cbea:	f001 ff67 	bl	801eabc <_ZN14MockNamedValue8setValueEj>
    return *this;
 801cbee:	687b      	ldr	r3, [r7, #4]
}
 801cbf0:	4618      	mov	r0, r3
 801cbf2:	3708      	adds	r7, #8
 801cbf4:	46bd      	mov	sp, r7
 801cbf6:	bd80      	pop	{r7, pc}
 801cbf8:	08027b5c 	.word	0x08027b5c

0801cbfc <_ZN23MockCheckedExpectedCall14andReturnValueEi>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(int value)
{
 801cbfc:	b580      	push	{r7, lr}
 801cbfe:	b082      	sub	sp, #8
 801cc00:	af00      	add	r7, sp, #0
 801cc02:	6078      	str	r0, [r7, #4]
 801cc04:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801cc06:	687b      	ldr	r3, [r7, #4]
 801cc08:	3328      	adds	r3, #40	; 0x28
 801cc0a:	4907      	ldr	r1, [pc, #28]	; (801cc28 <_ZN23MockCheckedExpectedCall14andReturnValueEi+0x2c>)
 801cc0c:	4618      	mov	r0, r3
 801cc0e:	f002 f983 	bl	801ef18 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801cc12:	687b      	ldr	r3, [r7, #4]
 801cc14:	3328      	adds	r3, #40	; 0x28
 801cc16:	6839      	ldr	r1, [r7, #0]
 801cc18:	4618      	mov	r0, r3
 801cc1a:	f001 ff71 	bl	801eb00 <_ZN14MockNamedValue8setValueEi>
    return *this;
 801cc1e:	687b      	ldr	r3, [r7, #4]
}
 801cc20:	4618      	mov	r0, r3
 801cc22:	3708      	adds	r7, #8
 801cc24:	46bd      	mov	sp, r7
 801cc26:	bd80      	pop	{r7, pc}
 801cc28:	08027b5c 	.word	0x08027b5c

0801cc2c <_ZN23MockCheckedExpectedCall14andReturnValueEl>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(long int value)
{
 801cc2c:	b580      	push	{r7, lr}
 801cc2e:	b082      	sub	sp, #8
 801cc30:	af00      	add	r7, sp, #0
 801cc32:	6078      	str	r0, [r7, #4]
 801cc34:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801cc36:	687b      	ldr	r3, [r7, #4]
 801cc38:	3328      	adds	r3, #40	; 0x28
 801cc3a:	4907      	ldr	r1, [pc, #28]	; (801cc58 <_ZN23MockCheckedExpectedCall14andReturnValueEl+0x2c>)
 801cc3c:	4618      	mov	r0, r3
 801cc3e:	f002 f96b 	bl	801ef18 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801cc42:	687b      	ldr	r3, [r7, #4]
 801cc44:	3328      	adds	r3, #40	; 0x28
 801cc46:	6839      	ldr	r1, [r7, #0]
 801cc48:	4618      	mov	r0, r3
 801cc4a:	f001 ff7b 	bl	801eb44 <_ZN14MockNamedValue8setValueEl>
    return *this;
 801cc4e:	687b      	ldr	r3, [r7, #4]
}
 801cc50:	4618      	mov	r0, r3
 801cc52:	3708      	adds	r7, #8
 801cc54:	46bd      	mov	sp, r7
 801cc56:	bd80      	pop	{r7, pc}
 801cc58:	08027b5c 	.word	0x08027b5c

0801cc5c <_ZN23MockCheckedExpectedCall14andReturnValueEm>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned long int value)
{
 801cc5c:	b580      	push	{r7, lr}
 801cc5e:	b082      	sub	sp, #8
 801cc60:	af00      	add	r7, sp, #0
 801cc62:	6078      	str	r0, [r7, #4]
 801cc64:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801cc66:	687b      	ldr	r3, [r7, #4]
 801cc68:	3328      	adds	r3, #40	; 0x28
 801cc6a:	4907      	ldr	r1, [pc, #28]	; (801cc88 <_ZN23MockCheckedExpectedCall14andReturnValueEm+0x2c>)
 801cc6c:	4618      	mov	r0, r3
 801cc6e:	f002 f953 	bl	801ef18 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801cc72:	687b      	ldr	r3, [r7, #4]
 801cc74:	3328      	adds	r3, #40	; 0x28
 801cc76:	6839      	ldr	r1, [r7, #0]
 801cc78:	4618      	mov	r0, r3
 801cc7a:	f001 ff85 	bl	801eb88 <_ZN14MockNamedValue8setValueEm>
    return *this;
 801cc7e:	687b      	ldr	r3, [r7, #4]
}
 801cc80:	4618      	mov	r0, r3
 801cc82:	3708      	adds	r7, #8
 801cc84:	46bd      	mov	sp, r7
 801cc86:	bd80      	pop	{r7, pc}
 801cc88:	08027b5c 	.word	0x08027b5c

0801cc8c <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_longlong)
{
 801cc8c:	b5b0      	push	{r4, r5, r7, lr}
 801cc8e:	b086      	sub	sp, #24
 801cc90:	af02      	add	r7, sp, #8
 801cc92:	60f8      	str	r0, [r7, #12]
 801cc94:	1d3b      	adds	r3, r7, #4
 801cc96:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801cc9a:	f7f8 fd57 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 801cc9e:	4604      	mov	r4, r0
 801cca0:	6823      	ldr	r3, [r4, #0]
 801cca2:	3368      	adds	r3, #104	; 0x68
 801cca4:	681d      	ldr	r5, [r3, #0]
 801cca6:	f7f8 fd61 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ccaa:	4603      	mov	r3, r0
 801ccac:	9300      	str	r3, [sp, #0]
 801ccae:	f240 2319 	movw	r3, #537	; 0x219
 801ccb2:	4a04      	ldr	r2, [pc, #16]	; (801ccc4 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x38>)
 801ccb4:	4904      	ldr	r1, [pc, #16]	; (801ccc8 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x3c>)
 801ccb6:	4620      	mov	r0, r4
 801ccb8:	47a8      	blx	r5
    return *this;
 801ccba:	68fb      	ldr	r3, [r7, #12]
}
 801ccbc:	4618      	mov	r0, r3
 801ccbe:	3710      	adds	r7, #16
 801ccc0:	46bd      	mov	sp, r7
 801ccc2:	bdb0      	pop	{r4, r5, r7, pc}
 801ccc4:	080279ec 	.word	0x080279ec
 801ccc8:	08027a08 	.word	0x08027a08

0801cccc <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_ulonglong)
{
 801cccc:	b5b0      	push	{r4, r5, r7, lr}
 801ccce:	b086      	sub	sp, #24
 801ccd0:	af02      	add	r7, sp, #8
 801ccd2:	60f8      	str	r0, [r7, #12]
 801ccd4:	1d3b      	adds	r3, r7, #4
 801ccd6:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801ccda:	f7f8 fd37 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 801ccde:	4604      	mov	r4, r0
 801cce0:	6823      	ldr	r3, [r4, #0]
 801cce2:	3368      	adds	r3, #104	; 0x68
 801cce4:	681d      	ldr	r5, [r3, #0]
 801cce6:	f7f8 fd41 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ccea:	4603      	mov	r3, r0
 801ccec:	9300      	str	r3, [sp, #0]
 801ccee:	f240 231f 	movw	r3, #543	; 0x21f
 801ccf2:	4a04      	ldr	r2, [pc, #16]	; (801cd04 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x38>)
 801ccf4:	4904      	ldr	r1, [pc, #16]	; (801cd08 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x3c>)
 801ccf6:	4620      	mov	r0, r4
 801ccf8:	47a8      	blx	r5
    return *this;
 801ccfa:	68fb      	ldr	r3, [r7, #12]
}
 801ccfc:	4618      	mov	r0, r3
 801ccfe:	3710      	adds	r7, #16
 801cd00:	46bd      	mov	sp, r7
 801cd02:	bdb0      	pop	{r4, r5, r7, pc}
 801cd04:	080279ec 	.word	0x080279ec
 801cd08:	08027a28 	.word	0x08027a28

0801cd0c <_ZN23MockCheckedExpectedCall14andReturnValueEPKc>:

#endif

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const char* value)
{
 801cd0c:	b580      	push	{r7, lr}
 801cd0e:	b082      	sub	sp, #8
 801cd10:	af00      	add	r7, sp, #0
 801cd12:	6078      	str	r0, [r7, #4]
 801cd14:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801cd16:	687b      	ldr	r3, [r7, #4]
 801cd18:	3328      	adds	r3, #40	; 0x28
 801cd1a:	4907      	ldr	r1, [pc, #28]	; (801cd38 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc+0x2c>)
 801cd1c:	4618      	mov	r0, r3
 801cd1e:	f002 f8fb 	bl	801ef18 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801cd22:	687b      	ldr	r3, [r7, #4]
 801cd24:	3328      	adds	r3, #40	; 0x28
 801cd26:	6839      	ldr	r1, [r7, #0]
 801cd28:	4618      	mov	r0, r3
 801cd2a:	f002 f837 	bl	801ed9c <_ZN14MockNamedValue8setValueEPKc>
    return *this;
 801cd2e:	687b      	ldr	r3, [r7, #4]
}
 801cd30:	4618      	mov	r0, r3
 801cd32:	3708      	adds	r7, #8
 801cd34:	46bd      	mov	sp, r7
 801cd36:	bd80      	pop	{r7, pc}
 801cd38:	08027b5c 	.word	0x08027b5c

0801cd3c <_ZN23MockCheckedExpectedCall14andReturnValueEd>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(double value)
{
 801cd3c:	b580      	push	{r7, lr}
 801cd3e:	b084      	sub	sp, #16
 801cd40:	af00      	add	r7, sp, #0
 801cd42:	60f8      	str	r0, [r7, #12]
 801cd44:	ed87 0b00 	vstr	d0, [r7]
    returnValue_.setName("returnValue");
 801cd48:	68fb      	ldr	r3, [r7, #12]
 801cd4a:	3328      	adds	r3, #40	; 0x28
 801cd4c:	4907      	ldr	r1, [pc, #28]	; (801cd6c <_ZN23MockCheckedExpectedCall14andReturnValueEd+0x30>)
 801cd4e:	4618      	mov	r0, r3
 801cd50:	f002 f8e2 	bl	801ef18 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801cd54:	68fb      	ldr	r3, [r7, #12]
 801cd56:	3328      	adds	r3, #40	; 0x28
 801cd58:	ed97 0b00 	vldr	d0, [r7]
 801cd5c:	4618      	mov	r0, r3
 801cd5e:	f001 ff73 	bl	801ec48 <_ZN14MockNamedValue8setValueEd>
    return *this;
 801cd62:	68fb      	ldr	r3, [r7, #12]
}
 801cd64:	4618      	mov	r0, r3
 801cd66:	3710      	adds	r7, #16
 801cd68:	46bd      	mov	sp, r7
 801cd6a:	bd80      	pop	{r7, pc}
 801cd6c:	08027b5c 	.word	0x08027b5c

0801cd70 <_ZN23MockCheckedExpectedCall14andReturnValueEPv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void* value)
{
 801cd70:	b580      	push	{r7, lr}
 801cd72:	b082      	sub	sp, #8
 801cd74:	af00      	add	r7, sp, #0
 801cd76:	6078      	str	r0, [r7, #4]
 801cd78:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801cd7a:	687b      	ldr	r3, [r7, #4]
 801cd7c:	3328      	adds	r3, #40	; 0x28
 801cd7e:	4907      	ldr	r1, [pc, #28]	; (801cd9c <_ZN23MockCheckedExpectedCall14andReturnValueEPv+0x2c>)
 801cd80:	4618      	mov	r0, r3
 801cd82:	f002 f8c9 	bl	801ef18 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801cd86:	687b      	ldr	r3, [r7, #4]
 801cd88:	3328      	adds	r3, #40	; 0x28
 801cd8a:	6839      	ldr	r1, [r7, #0]
 801cd8c:	4618      	mov	r0, r3
 801cd8e:	f001 ff9f 	bl	801ecd0 <_ZN14MockNamedValue8setValueEPv>
    return *this;
 801cd92:	687b      	ldr	r3, [r7, #4]
}
 801cd94:	4618      	mov	r0, r3
 801cd96:	3708      	adds	r7, #8
 801cd98:	46bd      	mov	sp, r7
 801cd9a:	bd80      	pop	{r7, pc}
 801cd9c:	08027b5c 	.word	0x08027b5c

0801cda0 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const void* value)
{
 801cda0:	b580      	push	{r7, lr}
 801cda2:	b082      	sub	sp, #8
 801cda4:	af00      	add	r7, sp, #0
 801cda6:	6078      	str	r0, [r7, #4]
 801cda8:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801cdaa:	687b      	ldr	r3, [r7, #4]
 801cdac:	3328      	adds	r3, #40	; 0x28
 801cdae:	4907      	ldr	r1, [pc, #28]	; (801cdcc <_ZN23MockCheckedExpectedCall14andReturnValueEPKv+0x2c>)
 801cdb0:	4618      	mov	r0, r3
 801cdb2:	f002 f8b1 	bl	801ef18 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801cdb6:	687b      	ldr	r3, [r7, #4]
 801cdb8:	3328      	adds	r3, #40	; 0x28
 801cdba:	6839      	ldr	r1, [r7, #0]
 801cdbc:	4618      	mov	r0, r3
 801cdbe:	f001 ffa9 	bl	801ed14 <_ZN14MockNamedValue8setValueEPKv>
    return *this;
 801cdc2:	687b      	ldr	r3, [r7, #4]
}
 801cdc4:	4618      	mov	r0, r3
 801cdc6:	3708      	adds	r7, #8
 801cdc8:	46bd      	mov	sp, r7
 801cdca:	bd80      	pop	{r7, pc}
 801cdcc:	08027b5c 	.word	0x08027b5c

0801cdd0 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void (*value)())
{
 801cdd0:	b580      	push	{r7, lr}
 801cdd2:	b082      	sub	sp, #8
 801cdd4:	af00      	add	r7, sp, #0
 801cdd6:	6078      	str	r0, [r7, #4]
 801cdd8:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801cdda:	687b      	ldr	r3, [r7, #4]
 801cddc:	3328      	adds	r3, #40	; 0x28
 801cdde:	4907      	ldr	r1, [pc, #28]	; (801cdfc <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE+0x2c>)
 801cde0:	4618      	mov	r0, r3
 801cde2:	f002 f899 	bl	801ef18 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801cde6:	687b      	ldr	r3, [r7, #4]
 801cde8:	3328      	adds	r3, #40	; 0x28
 801cdea:	6839      	ldr	r1, [r7, #0]
 801cdec:	4618      	mov	r0, r3
 801cdee:	f001 ffb3 	bl	801ed58 <_ZN14MockNamedValue8setValueEPFvvE>
    return *this;
 801cdf2:	687b      	ldr	r3, [r7, #4]
}
 801cdf4:	4618      	mov	r0, r3
 801cdf6:	3708      	adds	r7, #8
 801cdf8:	46bd      	mov	sp, r7
 801cdfa:	bd80      	pop	{r7, pc}
 801cdfc:	08027b5c 	.word	0x08027b5c

0801ce00 <_ZN23MockCheckedExpectedCall8onObjectEPv>:

MockExpectedCall& MockCheckedExpectedCall::onObject(void* objectPtr)
{
 801ce00:	b480      	push	{r7}
 801ce02:	b083      	sub	sp, #12
 801ce04:	af00      	add	r7, sp, #0
 801ce06:	6078      	str	r0, [r7, #4]
 801ce08:	6039      	str	r1, [r7, #0]
    isSpecificObjectExpected_ = true;
 801ce0a:	687b      	ldr	r3, [r7, #4]
 801ce0c:	2201      	movs	r2, #1
 801ce0e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    wasPassedToObject_ = false;
 801ce12:	687b      	ldr	r3, [r7, #4]
 801ce14:	2200      	movs	r2, #0
 801ce16:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    objectPtr_ = objectPtr;
 801ce1a:	687b      	ldr	r3, [r7, #4]
 801ce1c:	683a      	ldr	r2, [r7, #0]
 801ce1e:	661a      	str	r2, [r3, #96]	; 0x60
    return *this;
 801ce20:	687b      	ldr	r3, [r7, #4]
}
 801ce22:	4618      	mov	r0, r3
 801ce24:	370c      	adds	r7, #12
 801ce26:	46bd      	mov	sp, r7
 801ce28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce2c:	4770      	bx	lr

0801ce2e <_ZN23MockCheckedExpectedCall11returnValueEv>:

MockNamedValue MockCheckedExpectedCall::returnValue()
{
 801ce2e:	b580      	push	{r7, lr}
 801ce30:	b082      	sub	sp, #8
 801ce32:	af00      	add	r7, sp, #0
 801ce34:	6078      	str	r0, [r7, #4]
 801ce36:	6039      	str	r1, [r7, #0]
    return returnValue_;
 801ce38:	683b      	ldr	r3, [r7, #0]
 801ce3a:	3328      	adds	r3, #40	; 0x28
 801ce3c:	4619      	mov	r1, r3
 801ce3e:	6878      	ldr	r0, [r7, #4]
 801ce40:	f7ef f946 	bl	800c0d0 <_ZN14MockNamedValueC1ERKS_>
}
 801ce44:	6878      	ldr	r0, [r7, #4]
 801ce46:	3708      	adds	r7, #8
 801ce48:	46bd      	mov	sp, r7
 801ce4a:	bd80      	pop	{r7, pc}

0801ce4c <_ZN23MockCheckedExpectedCall13withCallOrderEjj>:

MockExpectedCall& MockCheckedExpectedCall::withCallOrder(unsigned int initialCallOrder, unsigned int finalCallOrder)
{
 801ce4c:	b480      	push	{r7}
 801ce4e:	b085      	sub	sp, #20
 801ce50:	af00      	add	r7, sp, #0
 801ce52:	60f8      	str	r0, [r7, #12]
 801ce54:	60b9      	str	r1, [r7, #8]
 801ce56:	607a      	str	r2, [r7, #4]
    initialExpectedCallOrder_ = initialCallOrder;
 801ce58:	68fb      	ldr	r3, [r7, #12]
 801ce5a:	68ba      	ldr	r2, [r7, #8]
 801ce5c:	611a      	str	r2, [r3, #16]
    finalExpectedCallOrder_ = finalCallOrder;
 801ce5e:	68fb      	ldr	r3, [r7, #12]
 801ce60:	687a      	ldr	r2, [r7, #4]
 801ce62:	615a      	str	r2, [r3, #20]
    return *this;
 801ce64:	68fb      	ldr	r3, [r7, #12]
}
 801ce66:	4618      	mov	r0, r3
 801ce68:	3714      	adds	r7, #20
 801ce6a:	46bd      	mov	sp, r7
 801ce6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce70:	4770      	bx	lr

0801ce72 <_ZNK23MockCheckedExpectedCall12isOutOfOrderEv>:

bool MockCheckedExpectedCall::isOutOfOrder() const
{
 801ce72:	b480      	push	{r7}
 801ce74:	b083      	sub	sp, #12
 801ce76:	af00      	add	r7, sp, #0
 801ce78:	6078      	str	r0, [r7, #4]
    return outOfOrder_;
 801ce7a:	687b      	ldr	r3, [r7, #4]
 801ce7c:	7e1b      	ldrb	r3, [r3, #24]
}
 801ce7e:	4618      	mov	r0, r3
 801ce80:	370c      	adds	r7, #12
 801ce82:	46bd      	mov	sp, r7
 801ce84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce88:	4770      	bx	lr

0801ce8a <_ZNK23MockCheckedExpectedCall23getActualCallsFulfilledEv>:

unsigned int MockCheckedExpectedCall::getActualCallsFulfilled() const
{
 801ce8a:	b480      	push	{r7}
 801ce8c:	b083      	sub	sp, #12
 801ce8e:	af00      	add	r7, sp, #0
 801ce90:	6078      	str	r0, [r7, #4]
    return actualCalls_;
 801ce92:	687b      	ldr	r3, [r7, #4]
 801ce94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
 801ce96:	4618      	mov	r0, r3
 801ce98:	370c      	adds	r7, #12
 801ce9a:	46bd      	mov	sp, r7
 801ce9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cea0:	4770      	bx	lr
	...

0801cea4 <_ZN23MockIgnoredExpectedCallC1Ev>:
class MockIgnoredExpectedCall: public MockExpectedCall
 801cea4:	b580      	push	{r7, lr}
 801cea6:	b082      	sub	sp, #8
 801cea8:	af00      	add	r7, sp, #0
 801ceaa:	6078      	str	r0, [r7, #4]
 801ceac:	687b      	ldr	r3, [r7, #4]
 801ceae:	4618      	mov	r0, r3
 801ceb0:	f7fe fcce 	bl	801b850 <_ZN16MockExpectedCallC1Ev>
 801ceb4:	4a03      	ldr	r2, [pc, #12]	; (801cec4 <_ZN23MockIgnoredExpectedCallC1Ev+0x20>)
 801ceb6:	687b      	ldr	r3, [r7, #4]
 801ceb8:	601a      	str	r2, [r3, #0]
 801ceba:	687b      	ldr	r3, [r7, #4]
 801cebc:	4618      	mov	r0, r3
 801cebe:	3708      	adds	r7, #8
 801cec0:	46bd      	mov	sp, r7
 801cec2:	bd80      	pop	{r7, pc}
 801cec4:	0802abf8 	.word	0x0802abf8

0801cec8 <__tcf_0>:

MockExpectedCall& MockIgnoredExpectedCall::instance()
{
    static MockIgnoredExpectedCall call;
 801cec8:	b580      	push	{r7, lr}
 801ceca:	af00      	add	r7, sp, #0
 801cecc:	4801      	ldr	r0, [pc, #4]	; (801ced4 <__tcf_0+0xc>)
 801cece:	f000 f831 	bl	801cf34 <_ZN23MockIgnoredExpectedCallD1Ev>
 801ced2:	bd80      	pop	{r7, pc}
 801ced4:	20000f7c 	.word	0x20000f7c

0801ced8 <_ZN23MockIgnoredExpectedCall8instanceEv>:
{
 801ced8:	b580      	push	{r7, lr}
 801ceda:	af00      	add	r7, sp, #0
    static MockIgnoredExpectedCall call;
 801cedc:	4b12      	ldr	r3, [pc, #72]	; (801cf28 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801cede:	781b      	ldrb	r3, [r3, #0]
 801cee0:	f3bf 8f5b 	dmb	ish
 801cee4:	b2db      	uxtb	r3, r3
 801cee6:	f003 0301 	and.w	r3, r3, #1
 801ceea:	2b00      	cmp	r3, #0
 801ceec:	bf0c      	ite	eq
 801ceee:	2301      	moveq	r3, #1
 801cef0:	2300      	movne	r3, #0
 801cef2:	b2db      	uxtb	r3, r3
 801cef4:	2b00      	cmp	r3, #0
 801cef6:	d013      	beq.n	801cf20 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801cef8:	480b      	ldr	r0, [pc, #44]	; (801cf28 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801cefa:	f003 ff05 	bl	8020d08 <__cxa_guard_acquire>
 801cefe:	4603      	mov	r3, r0
 801cf00:	2b00      	cmp	r3, #0
 801cf02:	bf14      	ite	ne
 801cf04:	2301      	movne	r3, #1
 801cf06:	2300      	moveq	r3, #0
 801cf08:	b2db      	uxtb	r3, r3
 801cf0a:	2b00      	cmp	r3, #0
 801cf0c:	d008      	beq.n	801cf20 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801cf0e:	4807      	ldr	r0, [pc, #28]	; (801cf2c <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
 801cf10:	f7ff ffc8 	bl	801cea4 <_ZN23MockIgnoredExpectedCallC1Ev>
 801cf14:	4804      	ldr	r0, [pc, #16]	; (801cf28 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801cf16:	f003 ff03 	bl	8020d20 <__cxa_guard_release>
 801cf1a:	4805      	ldr	r0, [pc, #20]	; (801cf30 <_ZN23MockIgnoredExpectedCall8instanceEv+0x58>)
 801cf1c:	f003 ff27 	bl	8020d6e <atexit>
    return call;
 801cf20:	4b02      	ldr	r3, [pc, #8]	; (801cf2c <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
}
 801cf22:	4618      	mov	r0, r3
 801cf24:	bd80      	pop	{r7, pc}
 801cf26:	bf00      	nop
 801cf28:	20000f80 	.word	0x20000f80
 801cf2c:	20000f7c 	.word	0x20000f7c
 801cf30:	0801cec9 	.word	0x0801cec9

0801cf34 <_ZN23MockIgnoredExpectedCallD1Ev>:
 801cf34:	b580      	push	{r7, lr}
 801cf36:	b082      	sub	sp, #8
 801cf38:	af00      	add	r7, sp, #0
 801cf3a:	6078      	str	r0, [r7, #4]
 801cf3c:	4a05      	ldr	r2, [pc, #20]	; (801cf54 <_ZN23MockIgnoredExpectedCallD1Ev+0x20>)
 801cf3e:	687b      	ldr	r3, [r7, #4]
 801cf40:	601a      	str	r2, [r3, #0]
 801cf42:	687b      	ldr	r3, [r7, #4]
 801cf44:	4618      	mov	r0, r3
 801cf46:	f7fe fc93 	bl	801b870 <_ZN16MockExpectedCallD1Ev>
 801cf4a:	687b      	ldr	r3, [r7, #4]
 801cf4c:	4618      	mov	r0, r3
 801cf4e:	3708      	adds	r7, #8
 801cf50:	46bd      	mov	sp, r7
 801cf52:	bd80      	pop	{r7, pc}
 801cf54:	0802abf8 	.word	0x0802abf8

0801cf58 <_ZN23MockIgnoredExpectedCallD0Ev>:
 801cf58:	b580      	push	{r7, lr}
 801cf5a:	b082      	sub	sp, #8
 801cf5c:	af00      	add	r7, sp, #0
 801cf5e:	6078      	str	r0, [r7, #4]
 801cf60:	6878      	ldr	r0, [r7, #4]
 801cf62:	f7ff ffe7 	bl	801cf34 <_ZN23MockIgnoredExpectedCallD1Ev>
 801cf66:	2104      	movs	r1, #4
 801cf68:	6878      	ldr	r0, [r7, #4]
 801cf6a:	f7ee fc5d 	bl	800b828 <_ZdlPvj>
 801cf6e:	687b      	ldr	r3, [r7, #4]
 801cf70:	4618      	mov	r0, r3
 801cf72:	3708      	adds	r7, #8
 801cf74:	46bd      	mov	sp, r7
 801cf76:	bd80      	pop	{r7, pc}

0801cf78 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>:
    class MockExpectedFunctionParameter : public MockNamedValue
 801cf78:	b580      	push	{r7, lr}
 801cf7a:	b082      	sub	sp, #8
 801cf7c:	af00      	add	r7, sp, #0
 801cf7e:	6078      	str	r0, [r7, #4]
 801cf80:	4a05      	ldr	r2, [pc, #20]	; (801cf98 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev+0x20>)
 801cf82:	687b      	ldr	r3, [r7, #4]
 801cf84:	601a      	str	r2, [r3, #0]
 801cf86:	687b      	ldr	r3, [r7, #4]
 801cf88:	4618      	mov	r0, r3
 801cf8a:	f001 fd4b 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
 801cf8e:	687b      	ldr	r3, [r7, #4]
 801cf90:	4618      	mov	r0, r3
 801cf92:	3708      	adds	r7, #8
 801cf94:	46bd      	mov	sp, r7
 801cf96:	bd80      	pop	{r7, pc}
 801cf98:	0802ad98 	.word	0x0802ad98

0801cf9c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD0Ev>:
 801cf9c:	b580      	push	{r7, lr}
 801cf9e:	b082      	sub	sp, #8
 801cfa0:	af00      	add	r7, sp, #0
 801cfa2:	6078      	str	r0, [r7, #4]
 801cfa4:	6878      	ldr	r0, [r7, #4]
 801cfa6:	f7ff ffe7 	bl	801cf78 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>
 801cfaa:	2138      	movs	r1, #56	; 0x38
 801cfac:	6878      	ldr	r0, [r7, #4]
 801cfae:	f7ee fc3b 	bl	800b828 <_ZdlPvj>
 801cfb2:	687b      	ldr	r3, [r7, #4]
 801cfb4:	4618      	mov	r0, r3
 801cfb6:	3708      	adds	r7, #8
 801cfb8:	46bd      	mov	sp, r7
 801cfba:	bd80      	pop	{r7, pc}

0801cfbc <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>:
    {
    public:
        MockCheckedExpectedCall* expectedCall_;

        MockExpectedCallsListNode* next_;
        MockExpectedCallsListNode(MockCheckedExpectedCall* expectedCall)
 801cfbc:	b480      	push	{r7}
 801cfbe:	b083      	sub	sp, #12
 801cfc0:	af00      	add	r7, sp, #0
 801cfc2:	6078      	str	r0, [r7, #4]
 801cfc4:	6039      	str	r1, [r7, #0]
            : expectedCall_(expectedCall), next_(NULLPTR) {}
 801cfc6:	687b      	ldr	r3, [r7, #4]
 801cfc8:	683a      	ldr	r2, [r7, #0]
 801cfca:	601a      	str	r2, [r3, #0]
 801cfcc:	687b      	ldr	r3, [r7, #4]
 801cfce:	2200      	movs	r2, #0
 801cfd0:	605a      	str	r2, [r3, #4]
 801cfd2:	687b      	ldr	r3, [r7, #4]
 801cfd4:	4618      	mov	r0, r3
 801cfd6:	370c      	adds	r7, #12
 801cfd8:	46bd      	mov	sp, r7
 801cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfde:	4770      	bx	lr

0801cfe0 <_ZN21MockExpectedCallsListC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockExpectedCallsList.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCallsList::MockExpectedCallsList() : head_(NULLPTR)
 801cfe0:	b480      	push	{r7}
 801cfe2:	b083      	sub	sp, #12
 801cfe4:	af00      	add	r7, sp, #0
 801cfe6:	6078      	str	r0, [r7, #4]
 801cfe8:	4a06      	ldr	r2, [pc, #24]	; (801d004 <_ZN21MockExpectedCallsListC1Ev+0x24>)
 801cfea:	687b      	ldr	r3, [r7, #4]
 801cfec:	601a      	str	r2, [r3, #0]
 801cfee:	687b      	ldr	r3, [r7, #4]
 801cff0:	2200      	movs	r2, #0
 801cff2:	605a      	str	r2, [r3, #4]
{
}
 801cff4:	687b      	ldr	r3, [r7, #4]
 801cff6:	4618      	mov	r0, r3
 801cff8:	370c      	adds	r7, #12
 801cffa:	46bd      	mov	sp, r7
 801cffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d000:	4770      	bx	lr
 801d002:	bf00      	nop
 801d004:	0802aeec 	.word	0x0802aeec

0801d008 <_ZN21MockExpectedCallsListD1Ev>:

MockExpectedCallsList::~MockExpectedCallsList()
 801d008:	b580      	push	{r7, lr}
 801d00a:	b084      	sub	sp, #16
 801d00c:	af00      	add	r7, sp, #0
 801d00e:	6078      	str	r0, [r7, #4]
 801d010:	4a0d      	ldr	r2, [pc, #52]	; (801d048 <_ZN21MockExpectedCallsListD1Ev+0x40>)
 801d012:	687b      	ldr	r3, [r7, #4]
 801d014:	601a      	str	r2, [r3, #0]
{
    while (head_) {
 801d016:	687b      	ldr	r3, [r7, #4]
 801d018:	685b      	ldr	r3, [r3, #4]
 801d01a:	2b00      	cmp	r3, #0
 801d01c:	d00f      	beq.n	801d03e <_ZN21MockExpectedCallsListD1Ev+0x36>
        MockExpectedCallsListNode* next = head_->next_;
 801d01e:	687b      	ldr	r3, [r7, #4]
 801d020:	685b      	ldr	r3, [r3, #4]
 801d022:	685b      	ldr	r3, [r3, #4]
 801d024:	60fb      	str	r3, [r7, #12]
        delete head_;
 801d026:	687b      	ldr	r3, [r7, #4]
 801d028:	685b      	ldr	r3, [r3, #4]
 801d02a:	2b00      	cmp	r3, #0
 801d02c:	d003      	beq.n	801d036 <_ZN21MockExpectedCallsListD1Ev+0x2e>
 801d02e:	2108      	movs	r1, #8
 801d030:	4618      	mov	r0, r3
 801d032:	f7ee fbf9 	bl	800b828 <_ZdlPvj>
        head_ = next;
 801d036:	687b      	ldr	r3, [r7, #4]
 801d038:	68fa      	ldr	r2, [r7, #12]
 801d03a:	605a      	str	r2, [r3, #4]
    while (head_) {
 801d03c:	e7eb      	b.n	801d016 <_ZN21MockExpectedCallsListD1Ev+0xe>
    }
}
 801d03e:	687b      	ldr	r3, [r7, #4]
 801d040:	4618      	mov	r0, r3
 801d042:	3710      	adds	r7, #16
 801d044:	46bd      	mov	sp, r7
 801d046:	bd80      	pop	{r7, pc}
 801d048:	0802aeec 	.word	0x0802aeec

0801d04c <_ZN21MockExpectedCallsListD0Ev>:
MockExpectedCallsList::~MockExpectedCallsList()
 801d04c:	b580      	push	{r7, lr}
 801d04e:	b082      	sub	sp, #8
 801d050:	af00      	add	r7, sp, #0
 801d052:	6078      	str	r0, [r7, #4]
}
 801d054:	6878      	ldr	r0, [r7, #4]
 801d056:	f7ff ffd7 	bl	801d008 <_ZN21MockExpectedCallsListD1Ev>
 801d05a:	2108      	movs	r1, #8
 801d05c:	6878      	ldr	r0, [r7, #4]
 801d05e:	f7ee fbe3 	bl	800b828 <_ZdlPvj>
 801d062:	687b      	ldr	r3, [r7, #4]
 801d064:	4618      	mov	r0, r3
 801d066:	3708      	adds	r7, #8
 801d068:	46bd      	mov	sp, r7
 801d06a:	bd80      	pop	{r7, pc}

0801d06c <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>:

bool MockExpectedCallsList::hasCallsOutOfOrder() const
{
 801d06c:	b580      	push	{r7, lr}
 801d06e:	b084      	sub	sp, #16
 801d070:	af00      	add	r7, sp, #0
 801d072:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d074:	687b      	ldr	r3, [r7, #4]
 801d076:	685b      	ldr	r3, [r3, #4]
 801d078:	60fb      	str	r3, [r7, #12]
 801d07a:	68fb      	ldr	r3, [r7, #12]
 801d07c:	2b00      	cmp	r3, #0
 801d07e:	d011      	beq.n	801d0a4 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x38>
        if (p->expectedCall_->isOutOfOrder())
 801d080:	68fb      	ldr	r3, [r7, #12]
 801d082:	681a      	ldr	r2, [r3, #0]
 801d084:	68fb      	ldr	r3, [r7, #12]
 801d086:	681b      	ldr	r3, [r3, #0]
 801d088:	681b      	ldr	r3, [r3, #0]
 801d08a:	33d4      	adds	r3, #212	; 0xd4
 801d08c:	681b      	ldr	r3, [r3, #0]
 801d08e:	4610      	mov	r0, r2
 801d090:	4798      	blx	r3
 801d092:	4603      	mov	r3, r0
 801d094:	2b00      	cmp	r3, #0
 801d096:	d001      	beq.n	801d09c <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x30>
            return true;
 801d098:	2301      	movs	r3, #1
 801d09a:	e004      	b.n	801d0a6 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d09c:	68fb      	ldr	r3, [r7, #12]
 801d09e:	685b      	ldr	r3, [r3, #4]
 801d0a0:	60fb      	str	r3, [r7, #12]
 801d0a2:	e7ea      	b.n	801d07a <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0xe>
    return false;
 801d0a4:	2300      	movs	r3, #0
}
 801d0a6:	4618      	mov	r0, r3
 801d0a8:	3710      	adds	r7, #16
 801d0aa:	46bd      	mov	sp, r7
 801d0ac:	bd80      	pop	{r7, pc}

0801d0ae <_ZNK21MockExpectedCallsList4sizeEv>:

unsigned int MockExpectedCallsList::size() const
{
 801d0ae:	b480      	push	{r7}
 801d0b0:	b085      	sub	sp, #20
 801d0b2:	af00      	add	r7, sp, #0
 801d0b4:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801d0b6:	2300      	movs	r3, #0
 801d0b8:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d0ba:	687b      	ldr	r3, [r7, #4]
 801d0bc:	685b      	ldr	r3, [r3, #4]
 801d0be:	60bb      	str	r3, [r7, #8]
 801d0c0:	68bb      	ldr	r3, [r7, #8]
 801d0c2:	2b00      	cmp	r3, #0
 801d0c4:	d006      	beq.n	801d0d4 <_ZNK21MockExpectedCallsList4sizeEv+0x26>
        count++;
 801d0c6:	68fb      	ldr	r3, [r7, #12]
 801d0c8:	3301      	adds	r3, #1
 801d0ca:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d0cc:	68bb      	ldr	r3, [r7, #8]
 801d0ce:	685b      	ldr	r3, [r3, #4]
 801d0d0:	60bb      	str	r3, [r7, #8]
 801d0d2:	e7f5      	b.n	801d0c0 <_ZNK21MockExpectedCallsList4sizeEv+0x12>
    return count;
 801d0d4:	68fb      	ldr	r3, [r7, #12]
}
 801d0d6:	4618      	mov	r0, r3
 801d0d8:	3714      	adds	r7, #20
 801d0da:	46bd      	mov	sp, r7
 801d0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0e0:	4770      	bx	lr

0801d0e2 <_ZNK21MockExpectedCallsList7isEmptyEv>:

bool MockExpectedCallsList::isEmpty() const
{
 801d0e2:	b480      	push	{r7}
 801d0e4:	b083      	sub	sp, #12
 801d0e6:	af00      	add	r7, sp, #0
 801d0e8:	6078      	str	r0, [r7, #4]
    return head_ == NULLPTR;
 801d0ea:	687b      	ldr	r3, [r7, #4]
 801d0ec:	685b      	ldr	r3, [r3, #4]
 801d0ee:	2b00      	cmp	r3, #0
 801d0f0:	bf0c      	ite	eq
 801d0f2:	2301      	moveq	r3, #1
 801d0f4:	2300      	movne	r3, #0
 801d0f6:	b2db      	uxtb	r3, r3
}
 801d0f8:	4618      	mov	r0, r3
 801d0fa:	370c      	adds	r7, #12
 801d0fc:	46bd      	mov	sp, r7
 801d0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d102:	4770      	bx	lr

0801d104 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString>:

unsigned int MockExpectedCallsList::amountOfActualCallsFulfilledFor(const SimpleString& name) const
{
 801d104:	b580      	push	{r7, lr}
 801d106:	b084      	sub	sp, #16
 801d108:	af00      	add	r7, sp, #0
 801d10a:	6078      	str	r0, [r7, #4]
 801d10c:	6039      	str	r1, [r7, #0]
    unsigned int count = 0;
 801d10e:	2300      	movs	r3, #0
 801d110:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801d112:	687b      	ldr	r3, [r7, #4]
 801d114:	685b      	ldr	r3, [r3, #4]
 801d116:	60bb      	str	r3, [r7, #8]
 801d118:	68bb      	ldr	r3, [r7, #8]
 801d11a:	2b00      	cmp	r3, #0
 801d11c:	d01d      	beq.n	801d15a <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x56>
        if (p->expectedCall_->relatesTo(name)) {
 801d11e:	68bb      	ldr	r3, [r7, #8]
 801d120:	681a      	ldr	r2, [r3, #0]
 801d122:	68bb      	ldr	r3, [r7, #8]
 801d124:	681b      	ldr	r3, [r3, #0]
 801d126:	681b      	ldr	r3, [r3, #0]
 801d128:	33b8      	adds	r3, #184	; 0xb8
 801d12a:	681b      	ldr	r3, [r3, #0]
 801d12c:	6839      	ldr	r1, [r7, #0]
 801d12e:	4610      	mov	r0, r2
 801d130:	4798      	blx	r3
 801d132:	4603      	mov	r3, r0
 801d134:	2b00      	cmp	r3, #0
 801d136:	d00c      	beq.n	801d152 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x4e>
            count += p->expectedCall_->getActualCallsFulfilled();
 801d138:	68bb      	ldr	r3, [r7, #8]
 801d13a:	681a      	ldr	r2, [r3, #0]
 801d13c:	68bb      	ldr	r3, [r7, #8]
 801d13e:	681b      	ldr	r3, [r3, #0]
 801d140:	681b      	ldr	r3, [r3, #0]
 801d142:	33f8      	adds	r3, #248	; 0xf8
 801d144:	681b      	ldr	r3, [r3, #0]
 801d146:	4610      	mov	r0, r2
 801d148:	4798      	blx	r3
 801d14a:	4602      	mov	r2, r0
 801d14c:	68fb      	ldr	r3, [r7, #12]
 801d14e:	4413      	add	r3, r2
 801d150:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801d152:	68bb      	ldr	r3, [r7, #8]
 801d154:	685b      	ldr	r3, [r3, #4]
 801d156:	60bb      	str	r3, [r7, #8]
 801d158:	e7de      	b.n	801d118 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x14>
        }
    }
    return count;
 801d15a:	68fb      	ldr	r3, [r7, #12]
}
 801d15c:	4618      	mov	r0, r3
 801d15e:	3710      	adds	r7, #16
 801d160:	46bd      	mov	sp, r7
 801d162:	bd80      	pop	{r7, pc}

0801d164 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv>:

unsigned int MockExpectedCallsList::amountOfUnfulfilledExpectations() const
{
 801d164:	b580      	push	{r7, lr}
 801d166:	b084      	sub	sp, #16
 801d168:	af00      	add	r7, sp, #0
 801d16a:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801d16c:	2300      	movs	r3, #0
 801d16e:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d170:	687b      	ldr	r3, [r7, #4]
 801d172:	685b      	ldr	r3, [r3, #4]
 801d174:	60bb      	str	r3, [r7, #8]
 801d176:	68bb      	ldr	r3, [r7, #8]
 801d178:	2b00      	cmp	r3, #0
 801d17a:	d015      	beq.n	801d1a8 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x44>
        if (! p->expectedCall_->isFulfilled()) count++;
 801d17c:	68bb      	ldr	r3, [r7, #8]
 801d17e:	681a      	ldr	r2, [r3, #0]
 801d180:	68bb      	ldr	r3, [r7, #8]
 801d182:	681b      	ldr	r3, [r3, #0]
 801d184:	681b      	ldr	r3, [r3, #0]
 801d186:	33c0      	adds	r3, #192	; 0xc0
 801d188:	681b      	ldr	r3, [r3, #0]
 801d18a:	4610      	mov	r0, r2
 801d18c:	4798      	blx	r3
 801d18e:	4603      	mov	r3, r0
 801d190:	f083 0301 	eor.w	r3, r3, #1
 801d194:	b2db      	uxtb	r3, r3
 801d196:	2b00      	cmp	r3, #0
 801d198:	d002      	beq.n	801d1a0 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x3c>
 801d19a:	68fb      	ldr	r3, [r7, #12]
 801d19c:	3301      	adds	r3, #1
 801d19e:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d1a0:	68bb      	ldr	r3, [r7, #8]
 801d1a2:	685b      	ldr	r3, [r3, #4]
 801d1a4:	60bb      	str	r3, [r7, #8]
 801d1a6:	e7e6      	b.n	801d176 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x12>
    return count;
 801d1a8:	68fb      	ldr	r3, [r7, #12]
}
 801d1aa:	4618      	mov	r0, r3
 801d1ac:	3710      	adds	r7, #16
 801d1ae:	46bd      	mov	sp, r7
 801d1b0:	bd80      	pop	{r7, pc}

0801d1b2 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>:

bool MockExpectedCallsList::hasFinalizedMatchingExpectations() const
{
 801d1b2:	b580      	push	{r7, lr}
 801d1b4:	b084      	sub	sp, #16
 801d1b6:	af00      	add	r7, sp, #0
 801d1b8:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801d1ba:	687b      	ldr	r3, [r7, #4]
 801d1bc:	685b      	ldr	r3, [r3, #4]
 801d1be:	60fb      	str	r3, [r7, #12]
 801d1c0:	68fb      	ldr	r3, [r7, #12]
 801d1c2:	2b00      	cmp	r3, #0
 801d1c4:	d011      	beq.n	801d1ea <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x38>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801d1c6:	68fb      	ldr	r3, [r7, #12]
 801d1c8:	681a      	ldr	r2, [r3, #0]
 801d1ca:	68fb      	ldr	r3, [r7, #12]
 801d1cc:	681b      	ldr	r3, [r3, #0]
 801d1ce:	681b      	ldr	r3, [r3, #0]
 801d1d0:	33c8      	adds	r3, #200	; 0xc8
 801d1d2:	681b      	ldr	r3, [r3, #0]
 801d1d4:	4610      	mov	r0, r2
 801d1d6:	4798      	blx	r3
 801d1d8:	4603      	mov	r3, r0
 801d1da:	2b00      	cmp	r3, #0
 801d1dc:	d001      	beq.n	801d1e2 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x30>
            return true;
 801d1de:	2301      	movs	r3, #1
 801d1e0:	e004      	b.n	801d1ec <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801d1e2:	68fb      	ldr	r3, [r7, #12]
 801d1e4:	685b      	ldr	r3, [r3, #4]
 801d1e6:	60fb      	str	r3, [r7, #12]
 801d1e8:	e7ea      	b.n	801d1c0 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0xe>
        }
    }
    return false;
 801d1ea:	2300      	movs	r3, #0
}
 801d1ec:	4618      	mov	r0, r3
 801d1ee:	3710      	adds	r7, #16
 801d1f0:	46bd      	mov	sp, r7
 801d1f2:	bd80      	pop	{r7, pc}

0801d1f4 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>:

bool MockExpectedCallsList::hasUnfulfilledExpectations() const
{
 801d1f4:	b580      	push	{r7, lr}
 801d1f6:	b084      	sub	sp, #16
 801d1f8:	af00      	add	r7, sp, #0
 801d1fa:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801d1fc:	687b      	ldr	r3, [r7, #4]
 801d1fe:	685b      	ldr	r3, [r3, #4]
 801d200:	60fb      	str	r3, [r7, #12]
 801d202:	68fb      	ldr	r3, [r7, #12]
 801d204:	2b00      	cmp	r3, #0
 801d206:	d014      	beq.n	801d232 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x3e>
        if (!p->expectedCall_->isFulfilled()) {
 801d208:	68fb      	ldr	r3, [r7, #12]
 801d20a:	681a      	ldr	r2, [r3, #0]
 801d20c:	68fb      	ldr	r3, [r7, #12]
 801d20e:	681b      	ldr	r3, [r3, #0]
 801d210:	681b      	ldr	r3, [r3, #0]
 801d212:	33c0      	adds	r3, #192	; 0xc0
 801d214:	681b      	ldr	r3, [r3, #0]
 801d216:	4610      	mov	r0, r2
 801d218:	4798      	blx	r3
 801d21a:	4603      	mov	r3, r0
 801d21c:	f083 0301 	eor.w	r3, r3, #1
 801d220:	b2db      	uxtb	r3, r3
 801d222:	2b00      	cmp	r3, #0
 801d224:	d001      	beq.n	801d22a <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x36>
            return true;
 801d226:	2301      	movs	r3, #1
 801d228:	e004      	b.n	801d234 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801d22a:	68fb      	ldr	r3, [r7, #12]
 801d22c:	685b      	ldr	r3, [r3, #4]
 801d22e:	60fb      	str	r3, [r7, #12]
 801d230:	e7e7      	b.n	801d202 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0xe>
        }
    }
    return false;
 801d232:	2300      	movs	r3, #0
}
 801d234:	4618      	mov	r0, r3
 801d236:	3710      	adds	r7, #16
 801d238:	46bd      	mov	sp, r7
 801d23a:	bd80      	pop	{r7, pc}

0801d23c <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>:

bool MockExpectedCallsList::hasExpectationWithName(const SimpleString& name) const
{
 801d23c:	b580      	push	{r7, lr}
 801d23e:	b084      	sub	sp, #16
 801d240:	af00      	add	r7, sp, #0
 801d242:	6078      	str	r0, [r7, #4]
 801d244:	6039      	str	r1, [r7, #0]
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d246:	687b      	ldr	r3, [r7, #4]
 801d248:	685b      	ldr	r3, [r3, #4]
 801d24a:	60fb      	str	r3, [r7, #12]
 801d24c:	68fb      	ldr	r3, [r7, #12]
 801d24e:	2b00      	cmp	r3, #0
 801d250:	d012      	beq.n	801d278 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3c>
            if (p->expectedCall_->relatesTo(name))
 801d252:	68fb      	ldr	r3, [r7, #12]
 801d254:	681a      	ldr	r2, [r3, #0]
 801d256:	68fb      	ldr	r3, [r7, #12]
 801d258:	681b      	ldr	r3, [r3, #0]
 801d25a:	681b      	ldr	r3, [r3, #0]
 801d25c:	33b8      	adds	r3, #184	; 0xb8
 801d25e:	681b      	ldr	r3, [r3, #0]
 801d260:	6839      	ldr	r1, [r7, #0]
 801d262:	4610      	mov	r0, r2
 801d264:	4798      	blx	r3
 801d266:	4603      	mov	r3, r0
 801d268:	2b00      	cmp	r3, #0
 801d26a:	d001      	beq.n	801d270 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x34>
                return true;
 801d26c:	2301      	movs	r3, #1
 801d26e:	e004      	b.n	801d27a <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3e>
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d270:	68fb      	ldr	r3, [r7, #12]
 801d272:	685b      	ldr	r3, [r3, #4]
 801d274:	60fb      	str	r3, [r7, #12]
 801d276:	e7e9      	b.n	801d24c <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x10>
    return false;
 801d278:	2300      	movs	r3, #0
}
 801d27a:	4618      	mov	r0, r3
 801d27c:	3710      	adds	r7, #16
 801d27e:	46bd      	mov	sp, r7
 801d280:	bd80      	pop	{r7, pc}
	...

0801d284 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>:

void MockExpectedCallsList::addExpectedCall(MockCheckedExpectedCall* call)
{
 801d284:	b590      	push	{r4, r7, lr}
 801d286:	b085      	sub	sp, #20
 801d288:	af00      	add	r7, sp, #0
 801d28a:	6078      	str	r0, [r7, #4]
 801d28c:	6039      	str	r1, [r7, #0]
    MockExpectedCallsListNode* newCall = new MockExpectedCallsListNode(call);
 801d28e:	2273      	movs	r2, #115	; 0x73
 801d290:	4911      	ldr	r1, [pc, #68]	; (801d2d8 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x54>)
 801d292:	2008      	movs	r0, #8
 801d294:	f7ee fab4 	bl	800b800 <_ZnwjPKci>
 801d298:	4604      	mov	r4, r0
 801d29a:	6839      	ldr	r1, [r7, #0]
 801d29c:	4620      	mov	r0, r4
 801d29e:	f7ff fe8d 	bl	801cfbc <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>
 801d2a2:	60bc      	str	r4, [r7, #8]

    if (head_ == NULLPTR)
 801d2a4:	687b      	ldr	r3, [r7, #4]
 801d2a6:	685b      	ldr	r3, [r3, #4]
 801d2a8:	2b00      	cmp	r3, #0
 801d2aa:	d103      	bne.n	801d2b4 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x30>
        head_ = newCall;
 801d2ac:	687b      	ldr	r3, [r7, #4]
 801d2ae:	68ba      	ldr	r2, [r7, #8]
 801d2b0:	605a      	str	r2, [r3, #4]
    else {
        MockExpectedCallsListNode* lastCall = head_;
        while (lastCall->next_) lastCall = lastCall->next_;
        lastCall->next_ = newCall;
    }
}
 801d2b2:	e00d      	b.n	801d2d0 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x4c>
        MockExpectedCallsListNode* lastCall = head_;
 801d2b4:	687b      	ldr	r3, [r7, #4]
 801d2b6:	685b      	ldr	r3, [r3, #4]
 801d2b8:	60fb      	str	r3, [r7, #12]
        while (lastCall->next_) lastCall = lastCall->next_;
 801d2ba:	68fb      	ldr	r3, [r7, #12]
 801d2bc:	685b      	ldr	r3, [r3, #4]
 801d2be:	2b00      	cmp	r3, #0
 801d2c0:	d003      	beq.n	801d2ca <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x46>
 801d2c2:	68fb      	ldr	r3, [r7, #12]
 801d2c4:	685b      	ldr	r3, [r3, #4]
 801d2c6:	60fb      	str	r3, [r7, #12]
 801d2c8:	e7f7      	b.n	801d2ba <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x36>
        lastCall->next_ = newCall;
 801d2ca:	68fb      	ldr	r3, [r7, #12]
 801d2cc:	68ba      	ldr	r2, [r7, #8]
 801d2ce:	605a      	str	r2, [r3, #4]
}
 801d2d0:	bf00      	nop
 801d2d2:	3714      	adds	r7, #20
 801d2d4:	46bd      	mov	sp, r7
 801d2d6:	bd90      	pop	{r4, r7, pc}
 801d2d8:	08027b68 	.word	0x08027b68

0801d2dc <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>:

void MockExpectedCallsList::addPotentiallyMatchingExpectations(const MockExpectedCallsList& list)
{
 801d2dc:	b580      	push	{r7, lr}
 801d2de:	b084      	sub	sp, #16
 801d2e0:	af00      	add	r7, sp, #0
 801d2e2:	6078      	str	r0, [r7, #4]
 801d2e4:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801d2e6:	683b      	ldr	r3, [r7, #0]
 801d2e8:	685b      	ldr	r3, [r3, #4]
 801d2ea:	60fb      	str	r3, [r7, #12]
 801d2ec:	68fb      	ldr	r3, [r7, #12]
 801d2ee:	2b00      	cmp	r3, #0
 801d2f0:	d018      	beq.n	801d324 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x48>
        if (p->expectedCall_->canMatchActualCalls())
 801d2f2:	68fb      	ldr	r3, [r7, #12]
 801d2f4:	681a      	ldr	r2, [r3, #0]
 801d2f6:	68fb      	ldr	r3, [r7, #12]
 801d2f8:	681b      	ldr	r3, [r3, #0]
 801d2fa:	681b      	ldr	r3, [r3, #0]
 801d2fc:	33c4      	adds	r3, #196	; 0xc4
 801d2fe:	681b      	ldr	r3, [r3, #0]
 801d300:	4610      	mov	r0, r2
 801d302:	4798      	blx	r3
 801d304:	4603      	mov	r3, r0
 801d306:	2b00      	cmp	r3, #0
 801d308:	d008      	beq.n	801d31c <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x40>
            addExpectedCall(p->expectedCall_);
 801d30a:	687b      	ldr	r3, [r7, #4]
 801d30c:	681b      	ldr	r3, [r3, #0]
 801d30e:	3330      	adds	r3, #48	; 0x30
 801d310:	681b      	ldr	r3, [r3, #0]
 801d312:	68fa      	ldr	r2, [r7, #12]
 801d314:	6812      	ldr	r2, [r2, #0]
 801d316:	4611      	mov	r1, r2
 801d318:	6878      	ldr	r0, [r7, #4]
 801d31a:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801d31c:	68fb      	ldr	r3, [r7, #12]
 801d31e:	685b      	ldr	r3, [r3, #4]
 801d320:	60fb      	str	r3, [r7, #12]
 801d322:	e7e3      	b.n	801d2ec <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x10>
}
 801d324:	bf00      	nop
 801d326:	3710      	adds	r7, #16
 801d328:	46bd      	mov	sp, r7
 801d32a:	bd80      	pop	{r7, pc}

0801d32c <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>:

void MockExpectedCallsList::addExpectationsRelatedTo(const SimpleString& name, const MockExpectedCallsList& list)
{
 801d32c:	b580      	push	{r7, lr}
 801d32e:	b086      	sub	sp, #24
 801d330:	af00      	add	r7, sp, #0
 801d332:	60f8      	str	r0, [r7, #12]
 801d334:	60b9      	str	r1, [r7, #8]
 801d336:	607a      	str	r2, [r7, #4]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801d338:	687b      	ldr	r3, [r7, #4]
 801d33a:	685b      	ldr	r3, [r3, #4]
 801d33c:	617b      	str	r3, [r7, #20]
 801d33e:	697b      	ldr	r3, [r7, #20]
 801d340:	2b00      	cmp	r3, #0
 801d342:	d019      	beq.n	801d378 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x4c>
        if (p->expectedCall_->relatesTo(name))
 801d344:	697b      	ldr	r3, [r7, #20]
 801d346:	681a      	ldr	r2, [r3, #0]
 801d348:	697b      	ldr	r3, [r7, #20]
 801d34a:	681b      	ldr	r3, [r3, #0]
 801d34c:	681b      	ldr	r3, [r3, #0]
 801d34e:	33b8      	adds	r3, #184	; 0xb8
 801d350:	681b      	ldr	r3, [r3, #0]
 801d352:	68b9      	ldr	r1, [r7, #8]
 801d354:	4610      	mov	r0, r2
 801d356:	4798      	blx	r3
 801d358:	4603      	mov	r3, r0
 801d35a:	2b00      	cmp	r3, #0
 801d35c:	d008      	beq.n	801d370 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x44>
            addExpectedCall(p->expectedCall_);
 801d35e:	68fb      	ldr	r3, [r7, #12]
 801d360:	681b      	ldr	r3, [r3, #0]
 801d362:	3330      	adds	r3, #48	; 0x30
 801d364:	681b      	ldr	r3, [r3, #0]
 801d366:	697a      	ldr	r2, [r7, #20]
 801d368:	6812      	ldr	r2, [r2, #0]
 801d36a:	4611      	mov	r1, r2
 801d36c:	68f8      	ldr	r0, [r7, #12]
 801d36e:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801d370:	697b      	ldr	r3, [r7, #20]
 801d372:	685b      	ldr	r3, [r3, #4]
 801d374:	617b      	str	r3, [r7, #20]
 801d376:	e7e2      	b.n	801d33e <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x12>
}
 801d378:	bf00      	nop
 801d37a:	3718      	adds	r7, #24
 801d37c:	46bd      	mov	sp, r7
 801d37e:	bd80      	pop	{r7, pc}

0801d380 <_ZN21MockExpectedCallsList15addExpectationsERKS_>:

void MockExpectedCallsList::addExpectations(const MockExpectedCallsList& list)
{
 801d380:	b580      	push	{r7, lr}
 801d382:	b084      	sub	sp, #16
 801d384:	af00      	add	r7, sp, #0
 801d386:	6078      	str	r0, [r7, #4]
 801d388:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801d38a:	683b      	ldr	r3, [r7, #0]
 801d38c:	685b      	ldr	r3, [r3, #4]
 801d38e:	60fb      	str	r3, [r7, #12]
 801d390:	68fb      	ldr	r3, [r7, #12]
 801d392:	2b00      	cmp	r3, #0
 801d394:	d00c      	beq.n	801d3b0 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x30>
        addExpectedCall(p->expectedCall_);
 801d396:	687b      	ldr	r3, [r7, #4]
 801d398:	681b      	ldr	r3, [r3, #0]
 801d39a:	3330      	adds	r3, #48	; 0x30
 801d39c:	681b      	ldr	r3, [r3, #0]
 801d39e:	68fa      	ldr	r2, [r7, #12]
 801d3a0:	6812      	ldr	r2, [r2, #0]
 801d3a2:	4611      	mov	r1, r2
 801d3a4:	6878      	ldr	r0, [r7, #4]
 801d3a6:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801d3a8:	68fb      	ldr	r3, [r7, #12]
 801d3aa:	685b      	ldr	r3, [r3, #4]
 801d3ac:	60fb      	str	r3, [r7, #12]
 801d3ae:	e7ef      	b.n	801d390 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x10>
}
 801d3b0:	bf00      	nop
 801d3b2:	3710      	adds	r7, #16
 801d3b4:	46bd      	mov	sp, r7
 801d3b6:	bd80      	pop	{r7, pc}

0801d3b8 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsRelatedTo(const SimpleString& name)
{
 801d3b8:	b580      	push	{r7, lr}
 801d3ba:	b084      	sub	sp, #16
 801d3bc:	af00      	add	r7, sp, #0
 801d3be:	6078      	str	r0, [r7, #4]
 801d3c0:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d3c2:	687b      	ldr	r3, [r7, #4]
 801d3c4:	685b      	ldr	r3, [r3, #4]
 801d3c6:	60fb      	str	r3, [r7, #12]
 801d3c8:	68fb      	ldr	r3, [r7, #12]
 801d3ca:	2b00      	cmp	r3, #0
 801d3cc:	d016      	beq.n	801d3fc <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x44>
        if (! p->expectedCall_->relatesTo(name))
 801d3ce:	68fb      	ldr	r3, [r7, #12]
 801d3d0:	681a      	ldr	r2, [r3, #0]
 801d3d2:	68fb      	ldr	r3, [r7, #12]
 801d3d4:	681b      	ldr	r3, [r3, #0]
 801d3d6:	681b      	ldr	r3, [r3, #0]
 801d3d8:	33b8      	adds	r3, #184	; 0xb8
 801d3da:	681b      	ldr	r3, [r3, #0]
 801d3dc:	6839      	ldr	r1, [r7, #0]
 801d3de:	4610      	mov	r0, r2
 801d3e0:	4798      	blx	r3
 801d3e2:	4603      	mov	r3, r0
 801d3e4:	f083 0301 	eor.w	r3, r3, #1
 801d3e8:	b2db      	uxtb	r3, r3
 801d3ea:	2b00      	cmp	r3, #0
 801d3ec:	d002      	beq.n	801d3f4 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801d3ee:	68fb      	ldr	r3, [r7, #12]
 801d3f0:	2200      	movs	r2, #0
 801d3f2:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d3f4:	68fb      	ldr	r3, [r7, #12]
 801d3f6:	685b      	ldr	r3, [r3, #4]
 801d3f8:	60fb      	str	r3, [r7, #12]
 801d3fa:	e7e5      	b.n	801d3c8 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x10>

    pruneEmptyNodeFromList();
 801d3fc:	687b      	ldr	r3, [r7, #4]
 801d3fe:	681b      	ldr	r3, [r3, #0]
 801d400:	3388      	adds	r3, #136	; 0x88
 801d402:	681b      	ldr	r3, [r3, #0]
 801d404:	6878      	ldr	r0, [r7, #4]
 801d406:	4798      	blx	r3
}
 801d408:	bf00      	nop
 801d40a:	3710      	adds	r7, #16
 801d40c:	46bd      	mov	sp, r7
 801d40e:	bd80      	pop	{r7, pc}

0801d410 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>:

void MockExpectedCallsList::onlyKeepOutOfOrderExpectations()
{
 801d410:	b580      	push	{r7, lr}
 801d412:	b084      	sub	sp, #16
 801d414:	af00      	add	r7, sp, #0
 801d416:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d418:	687b      	ldr	r3, [r7, #4]
 801d41a:	685b      	ldr	r3, [r3, #4]
 801d41c:	60fb      	str	r3, [r7, #12]
 801d41e:	68fb      	ldr	r3, [r7, #12]
 801d420:	2b00      	cmp	r3, #0
 801d422:	d015      	beq.n	801d450 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x40>
        if (!p->expectedCall_->isOutOfOrder())
 801d424:	68fb      	ldr	r3, [r7, #12]
 801d426:	681a      	ldr	r2, [r3, #0]
 801d428:	68fb      	ldr	r3, [r7, #12]
 801d42a:	681b      	ldr	r3, [r3, #0]
 801d42c:	681b      	ldr	r3, [r3, #0]
 801d42e:	33d4      	adds	r3, #212	; 0xd4
 801d430:	681b      	ldr	r3, [r3, #0]
 801d432:	4610      	mov	r0, r2
 801d434:	4798      	blx	r3
 801d436:	4603      	mov	r3, r0
 801d438:	f083 0301 	eor.w	r3, r3, #1
 801d43c:	b2db      	uxtb	r3, r3
 801d43e:	2b00      	cmp	r3, #0
 801d440:	d002      	beq.n	801d448 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x38>
            p->expectedCall_ = NULLPTR;
 801d442:	68fb      	ldr	r3, [r7, #12]
 801d444:	2200      	movs	r2, #0
 801d446:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d448:	68fb      	ldr	r3, [r7, #12]
 801d44a:	685b      	ldr	r3, [r3, #4]
 801d44c:	60fb      	str	r3, [r7, #12]
 801d44e:	e7e6      	b.n	801d41e <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0xe>
    pruneEmptyNodeFromList();
 801d450:	687b      	ldr	r3, [r7, #4]
 801d452:	681b      	ldr	r3, [r3, #0]
 801d454:	3388      	adds	r3, #136	; 0x88
 801d456:	681b      	ldr	r3, [r3, #0]
 801d458:	6878      	ldr	r0, [r7, #4]
 801d45a:	4798      	blx	r3
}
 801d45c:	bf00      	nop
 801d45e:	3710      	adds	r7, #16
 801d460:	46bd      	mov	sp, r7
 801d462:	bd80      	pop	{r7, pc}

0801d464 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>:

void MockExpectedCallsList::onlyKeepUnmatchingExpectations()
{
 801d464:	b580      	push	{r7, lr}
 801d466:	b084      	sub	sp, #16
 801d468:	af00      	add	r7, sp, #0
 801d46a:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d46c:	687b      	ldr	r3, [r7, #4]
 801d46e:	685b      	ldr	r3, [r3, #4]
 801d470:	60fb      	str	r3, [r7, #12]
 801d472:	68fb      	ldr	r3, [r7, #12]
 801d474:	2b00      	cmp	r3, #0
 801d476:	d01b      	beq.n	801d4b0 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x4c>
        if (p->expectedCall_->isMatchingActualCallAndFinalized())
 801d478:	68fb      	ldr	r3, [r7, #12]
 801d47a:	681a      	ldr	r2, [r3, #0]
 801d47c:	68fb      	ldr	r3, [r7, #12]
 801d47e:	681b      	ldr	r3, [r3, #0]
 801d480:	681b      	ldr	r3, [r3, #0]
 801d482:	33c8      	adds	r3, #200	; 0xc8
 801d484:	681b      	ldr	r3, [r3, #0]
 801d486:	4610      	mov	r0, r2
 801d488:	4798      	blx	r3
 801d48a:	4603      	mov	r3, r0
 801d48c:	2b00      	cmp	r3, #0
 801d48e:	d00b      	beq.n	801d4a8 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x44>
        {
            p->expectedCall_->resetActualCallMatchingState();
 801d490:	68fb      	ldr	r3, [r7, #12]
 801d492:	681a      	ldr	r2, [r3, #0]
 801d494:	68fb      	ldr	r3, [r7, #12]
 801d496:	681b      	ldr	r3, [r3, #0]
 801d498:	681b      	ldr	r3, [r3, #0]
 801d49a:	33ec      	adds	r3, #236	; 0xec
 801d49c:	681b      	ldr	r3, [r3, #0]
 801d49e:	4610      	mov	r0, r2
 801d4a0:	4798      	blx	r3
            p->expectedCall_ = NULLPTR;
 801d4a2:	68fb      	ldr	r3, [r7, #12]
 801d4a4:	2200      	movs	r2, #0
 801d4a6:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d4a8:	68fb      	ldr	r3, [r7, #12]
 801d4aa:	685b      	ldr	r3, [r3, #4]
 801d4ac:	60fb      	str	r3, [r7, #12]
 801d4ae:	e7e0      	b.n	801d472 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0xe>
        }

    pruneEmptyNodeFromList();
 801d4b0:	687b      	ldr	r3, [r7, #4]
 801d4b2:	681b      	ldr	r3, [r3, #0]
 801d4b4:	3388      	adds	r3, #136	; 0x88
 801d4b6:	681b      	ldr	r3, [r3, #0]
 801d4b8:	6878      	ldr	r0, [r7, #4]
 801d4ba:	4798      	blx	r3
}
 801d4bc:	bf00      	nop
 801d4be:	3710      	adds	r7, #16
 801d4c0:	46bd      	mov	sp, r7
 801d4c2:	bd80      	pop	{r7, pc}

0801d4c4 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameterName(const SimpleString& name)
{
 801d4c4:	b580      	push	{r7, lr}
 801d4c6:	b084      	sub	sp, #16
 801d4c8:	af00      	add	r7, sp, #0
 801d4ca:	6078      	str	r0, [r7, #4]
 801d4cc:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d4ce:	687b      	ldr	r3, [r7, #4]
 801d4d0:	685b      	ldr	r3, [r3, #4]
 801d4d2:	60fb      	str	r3, [r7, #12]
 801d4d4:	68fb      	ldr	r3, [r7, #12]
 801d4d6:	2b00      	cmp	r3, #0
 801d4d8:	d016      	beq.n	801d508 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasInputParameterWithName(name))
 801d4da:	68fb      	ldr	r3, [r7, #12]
 801d4dc:	681a      	ldr	r2, [r3, #0]
 801d4de:	68fb      	ldr	r3, [r7, #12]
 801d4e0:	681b      	ldr	r3, [r3, #0]
 801d4e2:	681b      	ldr	r3, [r3, #0]
 801d4e4:	33a8      	adds	r3, #168	; 0xa8
 801d4e6:	681b      	ldr	r3, [r3, #0]
 801d4e8:	6839      	ldr	r1, [r7, #0]
 801d4ea:	4610      	mov	r0, r2
 801d4ec:	4798      	blx	r3
 801d4ee:	4603      	mov	r3, r0
 801d4f0:	f083 0301 	eor.w	r3, r3, #1
 801d4f4:	b2db      	uxtb	r3, r3
 801d4f6:	2b00      	cmp	r3, #0
 801d4f8:	d002      	beq.n	801d500 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801d4fa:	68fb      	ldr	r3, [r7, #12]
 801d4fc:	2200      	movs	r2, #0
 801d4fe:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d500:	68fb      	ldr	r3, [r7, #12]
 801d502:	685b      	ldr	r3, [r3, #4]
 801d504:	60fb      	str	r3, [r7, #12]
 801d506:	e7e5      	b.n	801d4d4 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801d508:	687b      	ldr	r3, [r7, #4]
 801d50a:	681b      	ldr	r3, [r3, #0]
 801d50c:	3388      	adds	r3, #136	; 0x88
 801d50e:	681b      	ldr	r3, [r3, #0]
 801d510:	6878      	ldr	r0, [r7, #4]
 801d512:	4798      	blx	r3
}
 801d514:	bf00      	nop
 801d516:	3710      	adds	r7, #16
 801d518:	46bd      	mov	sp, r7
 801d51a:	bd80      	pop	{r7, pc}

0801d51c <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameterName(const SimpleString& name)
{
 801d51c:	b580      	push	{r7, lr}
 801d51e:	b084      	sub	sp, #16
 801d520:	af00      	add	r7, sp, #0
 801d522:	6078      	str	r0, [r7, #4]
 801d524:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d526:	687b      	ldr	r3, [r7, #4]
 801d528:	685b      	ldr	r3, [r3, #4]
 801d52a:	60fb      	str	r3, [r7, #12]
 801d52c:	68fb      	ldr	r3, [r7, #12]
 801d52e:	2b00      	cmp	r3, #0
 801d530:	d016      	beq.n	801d560 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasOutputParameterWithName(name))
 801d532:	68fb      	ldr	r3, [r7, #12]
 801d534:	681a      	ldr	r2, [r3, #0]
 801d536:	68fb      	ldr	r3, [r7, #12]
 801d538:	681b      	ldr	r3, [r3, #0]
 801d53a:	681b      	ldr	r3, [r3, #0]
 801d53c:	33b0      	adds	r3, #176	; 0xb0
 801d53e:	681b      	ldr	r3, [r3, #0]
 801d540:	6839      	ldr	r1, [r7, #0]
 801d542:	4610      	mov	r0, r2
 801d544:	4798      	blx	r3
 801d546:	4603      	mov	r3, r0
 801d548:	f083 0301 	eor.w	r3, r3, #1
 801d54c:	b2db      	uxtb	r3, r3
 801d54e:	2b00      	cmp	r3, #0
 801d550:	d002      	beq.n	801d558 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801d552:	68fb      	ldr	r3, [r7, #12]
 801d554:	2200      	movs	r2, #0
 801d556:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d558:	68fb      	ldr	r3, [r7, #12]
 801d55a:	685b      	ldr	r3, [r3, #4]
 801d55c:	60fb      	str	r3, [r7, #12]
 801d55e:	e7e5      	b.n	801d52c <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801d560:	687b      	ldr	r3, [r7, #4]
 801d562:	681b      	ldr	r3, [r3, #0]
 801d564:	3388      	adds	r3, #136	; 0x88
 801d566:	681b      	ldr	r3, [r3, #0]
 801d568:	6878      	ldr	r0, [r7, #4]
 801d56a:	4798      	blx	r3
}
 801d56c:	bf00      	nop
 801d56e:	3710      	adds	r7, #16
 801d570:	46bd      	mov	sp, r7
 801d572:	bd80      	pop	{r7, pc}

0801d574 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameter(const MockNamedValue& parameter)
{
 801d574:	b580      	push	{r7, lr}
 801d576:	b084      	sub	sp, #16
 801d578:	af00      	add	r7, sp, #0
 801d57a:	6078      	str	r0, [r7, #4]
 801d57c:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d57e:	687b      	ldr	r3, [r7, #4]
 801d580:	685b      	ldr	r3, [r3, #4]
 801d582:	60fb      	str	r3, [r7, #12]
 801d584:	68fb      	ldr	r3, [r7, #12]
 801d586:	2b00      	cmp	r3, #0
 801d588:	d016      	beq.n	801d5b8 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasInputParameter(parameter))
 801d58a:	68fb      	ldr	r3, [r7, #12]
 801d58c:	681a      	ldr	r2, [r3, #0]
 801d58e:	68fb      	ldr	r3, [r7, #12]
 801d590:	681b      	ldr	r3, [r3, #0]
 801d592:	681b      	ldr	r3, [r3, #0]
 801d594:	33ac      	adds	r3, #172	; 0xac
 801d596:	681b      	ldr	r3, [r3, #0]
 801d598:	6839      	ldr	r1, [r7, #0]
 801d59a:	4610      	mov	r0, r2
 801d59c:	4798      	blx	r3
 801d59e:	4603      	mov	r3, r0
 801d5a0:	f083 0301 	eor.w	r3, r3, #1
 801d5a4:	b2db      	uxtb	r3, r3
 801d5a6:	2b00      	cmp	r3, #0
 801d5a8:	d002      	beq.n	801d5b0 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801d5aa:	68fb      	ldr	r3, [r7, #12]
 801d5ac:	2200      	movs	r2, #0
 801d5ae:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d5b0:	68fb      	ldr	r3, [r7, #12]
 801d5b2:	685b      	ldr	r3, [r3, #4]
 801d5b4:	60fb      	str	r3, [r7, #12]
 801d5b6:	e7e5      	b.n	801d584 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801d5b8:	687b      	ldr	r3, [r7, #4]
 801d5ba:	681b      	ldr	r3, [r3, #0]
 801d5bc:	3388      	adds	r3, #136	; 0x88
 801d5be:	681b      	ldr	r3, [r3, #0]
 801d5c0:	6878      	ldr	r0, [r7, #4]
 801d5c2:	4798      	blx	r3
}
 801d5c4:	bf00      	nop
 801d5c6:	3710      	adds	r7, #16
 801d5c8:	46bd      	mov	sp, r7
 801d5ca:	bd80      	pop	{r7, pc}

0801d5cc <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameter(const MockNamedValue& parameter)
{
 801d5cc:	b580      	push	{r7, lr}
 801d5ce:	b084      	sub	sp, #16
 801d5d0:	af00      	add	r7, sp, #0
 801d5d2:	6078      	str	r0, [r7, #4]
 801d5d4:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d5d6:	687b      	ldr	r3, [r7, #4]
 801d5d8:	685b      	ldr	r3, [r3, #4]
 801d5da:	60fb      	str	r3, [r7, #12]
 801d5dc:	68fb      	ldr	r3, [r7, #12]
 801d5de:	2b00      	cmp	r3, #0
 801d5e0:	d016      	beq.n	801d610 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasOutputParameter(parameter))
 801d5e2:	68fb      	ldr	r3, [r7, #12]
 801d5e4:	681a      	ldr	r2, [r3, #0]
 801d5e6:	68fb      	ldr	r3, [r7, #12]
 801d5e8:	681b      	ldr	r3, [r3, #0]
 801d5ea:	681b      	ldr	r3, [r3, #0]
 801d5ec:	33b4      	adds	r3, #180	; 0xb4
 801d5ee:	681b      	ldr	r3, [r3, #0]
 801d5f0:	6839      	ldr	r1, [r7, #0]
 801d5f2:	4610      	mov	r0, r2
 801d5f4:	4798      	blx	r3
 801d5f6:	4603      	mov	r3, r0
 801d5f8:	f083 0301 	eor.w	r3, r3, #1
 801d5fc:	b2db      	uxtb	r3, r3
 801d5fe:	2b00      	cmp	r3, #0
 801d600:	d002      	beq.n	801d608 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801d602:	68fb      	ldr	r3, [r7, #12]
 801d604:	2200      	movs	r2, #0
 801d606:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d608:	68fb      	ldr	r3, [r7, #12]
 801d60a:	685b      	ldr	r3, [r3, #4]
 801d60c:	60fb      	str	r3, [r7, #12]
 801d60e:	e7e5      	b.n	801d5dc <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801d610:	687b      	ldr	r3, [r7, #4]
 801d612:	681b      	ldr	r3, [r3, #0]
 801d614:	3388      	adds	r3, #136	; 0x88
 801d616:	681b      	ldr	r3, [r3, #0]
 801d618:	6878      	ldr	r0, [r7, #4]
 801d61a:	4798      	blx	r3
}
 801d61c:	bf00      	nop
 801d61e:	3710      	adds	r7, #16
 801d620:	46bd      	mov	sp, r7
 801d622:	bd80      	pop	{r7, pc}

0801d624 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>:

void MockExpectedCallsList::onlyKeepExpectationsOnObject(const void* objectPtr)
{
 801d624:	b580      	push	{r7, lr}
 801d626:	b084      	sub	sp, #16
 801d628:	af00      	add	r7, sp, #0
 801d62a:	6078      	str	r0, [r7, #4]
 801d62c:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d62e:	687b      	ldr	r3, [r7, #4]
 801d630:	685b      	ldr	r3, [r3, #4]
 801d632:	60fb      	str	r3, [r7, #12]
 801d634:	68fb      	ldr	r3, [r7, #12]
 801d636:	2b00      	cmp	r3, #0
 801d638:	d016      	beq.n	801d668 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x44>
        if (! p->expectedCall_->relatesToObject(objectPtr))
 801d63a:	68fb      	ldr	r3, [r7, #12]
 801d63c:	681a      	ldr	r2, [r3, #0]
 801d63e:	68fb      	ldr	r3, [r7, #12]
 801d640:	681b      	ldr	r3, [r3, #0]
 801d642:	681b      	ldr	r3, [r3, #0]
 801d644:	33bc      	adds	r3, #188	; 0xbc
 801d646:	681b      	ldr	r3, [r3, #0]
 801d648:	6839      	ldr	r1, [r7, #0]
 801d64a:	4610      	mov	r0, r2
 801d64c:	4798      	blx	r3
 801d64e:	4603      	mov	r3, r0
 801d650:	f083 0301 	eor.w	r3, r3, #1
 801d654:	b2db      	uxtb	r3, r3
 801d656:	2b00      	cmp	r3, #0
 801d658:	d002      	beq.n	801d660 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x3c>
            p->expectedCall_ = NULLPTR;
 801d65a:	68fb      	ldr	r3, [r7, #12]
 801d65c:	2200      	movs	r2, #0
 801d65e:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d660:	68fb      	ldr	r3, [r7, #12]
 801d662:	685b      	ldr	r3, [r3, #4]
 801d664:	60fb      	str	r3, [r7, #12]
 801d666:	e7e5      	b.n	801d634 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x10>
    pruneEmptyNodeFromList();
 801d668:	687b      	ldr	r3, [r7, #4]
 801d66a:	681b      	ldr	r3, [r3, #0]
 801d66c:	3388      	adds	r3, #136	; 0x88
 801d66e:	681b      	ldr	r3, [r3, #0]
 801d670:	6878      	ldr	r0, [r7, #4]
 801d672:	4798      	blx	r3
}
 801d674:	bf00      	nop
 801d676:	3710      	adds	r7, #16
 801d678:	46bd      	mov	sp, r7
 801d67a:	bd80      	pop	{r7, pc}

0801d67c <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstFinalizedMatchingExpectation()
{
 801d67c:	b580      	push	{r7, lr}
 801d67e:	b084      	sub	sp, #16
 801d680:	af00      	add	r7, sp, #0
 801d682:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801d684:	687b      	ldr	r3, [r7, #4]
 801d686:	685b      	ldr	r3, [r3, #4]
 801d688:	60fb      	str	r3, [r7, #12]
 801d68a:	68fb      	ldr	r3, [r7, #12]
 801d68c:	2b00      	cmp	r3, #0
 801d68e:	d01d      	beq.n	801d6cc <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801d690:	68fb      	ldr	r3, [r7, #12]
 801d692:	681a      	ldr	r2, [r3, #0]
 801d694:	68fb      	ldr	r3, [r7, #12]
 801d696:	681b      	ldr	r3, [r3, #0]
 801d698:	681b      	ldr	r3, [r3, #0]
 801d69a:	33c8      	adds	r3, #200	; 0xc8
 801d69c:	681b      	ldr	r3, [r3, #0]
 801d69e:	4610      	mov	r0, r2
 801d6a0:	4798      	blx	r3
 801d6a2:	4603      	mov	r3, r0
 801d6a4:	2b00      	cmp	r3, #0
 801d6a6:	d00d      	beq.n	801d6c4 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801d6a8:	68fb      	ldr	r3, [r7, #12]
 801d6aa:	681b      	ldr	r3, [r3, #0]
 801d6ac:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801d6ae:	68fb      	ldr	r3, [r7, #12]
 801d6b0:	2200      	movs	r2, #0
 801d6b2:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801d6b4:	687b      	ldr	r3, [r7, #4]
 801d6b6:	681b      	ldr	r3, [r3, #0]
 801d6b8:	3388      	adds	r3, #136	; 0x88
 801d6ba:	681b      	ldr	r3, [r3, #0]
 801d6bc:	6878      	ldr	r0, [r7, #4]
 801d6be:	4798      	blx	r3
            return matchingCall;
 801d6c0:	68bb      	ldr	r3, [r7, #8]
 801d6c2:	e004      	b.n	801d6ce <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801d6c4:	68fb      	ldr	r3, [r7, #12]
 801d6c6:	685b      	ldr	r3, [r3, #4]
 801d6c8:	60fb      	str	r3, [r7, #12]
 801d6ca:	e7de      	b.n	801d68a <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801d6cc:	2300      	movs	r3, #0
}
 801d6ce:	4618      	mov	r0, r3
 801d6d0:	3710      	adds	r7, #16
 801d6d2:	46bd      	mov	sp, r7
 801d6d4:	bd80      	pop	{r7, pc}

0801d6d6 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::getFirstMatchingExpectation()
{
 801d6d6:	b580      	push	{r7, lr}
 801d6d8:	b084      	sub	sp, #16
 801d6da:	af00      	add	r7, sp, #0
 801d6dc:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801d6de:	687b      	ldr	r3, [r7, #4]
 801d6e0:	685b      	ldr	r3, [r3, #4]
 801d6e2:	60fb      	str	r3, [r7, #12]
 801d6e4:	68fb      	ldr	r3, [r7, #12]
 801d6e6:	2b00      	cmp	r3, #0
 801d6e8:	d012      	beq.n	801d710 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3a>
        if (p->expectedCall_->isMatchingActualCall()) {
 801d6ea:	68fb      	ldr	r3, [r7, #12]
 801d6ec:	681a      	ldr	r2, [r3, #0]
 801d6ee:	68fb      	ldr	r3, [r7, #12]
 801d6f0:	681b      	ldr	r3, [r3, #0]
 801d6f2:	681b      	ldr	r3, [r3, #0]
 801d6f4:	33cc      	adds	r3, #204	; 0xcc
 801d6f6:	681b      	ldr	r3, [r3, #0]
 801d6f8:	4610      	mov	r0, r2
 801d6fa:	4798      	blx	r3
 801d6fc:	4603      	mov	r3, r0
 801d6fe:	2b00      	cmp	r3, #0
 801d700:	d002      	beq.n	801d708 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x32>
            return p->expectedCall_;
 801d702:	68fb      	ldr	r3, [r7, #12]
 801d704:	681b      	ldr	r3, [r3, #0]
 801d706:	e004      	b.n	801d712 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3c>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801d708:	68fb      	ldr	r3, [r7, #12]
 801d70a:	685b      	ldr	r3, [r3, #4]
 801d70c:	60fb      	str	r3, [r7, #12]
 801d70e:	e7e9      	b.n	801d6e4 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801d710:	2300      	movs	r3, #0
}
 801d712:	4618      	mov	r0, r3
 801d714:	3710      	adds	r7, #16
 801d716:	46bd      	mov	sp, r7
 801d718:	bd80      	pop	{r7, pc}

0801d71a <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstMatchingExpectation()
{
 801d71a:	b580      	push	{r7, lr}
 801d71c:	b084      	sub	sp, #16
 801d71e:	af00      	add	r7, sp, #0
 801d720:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801d722:	687b      	ldr	r3, [r7, #4]
 801d724:	685b      	ldr	r3, [r3, #4]
 801d726:	60fb      	str	r3, [r7, #12]
 801d728:	68fb      	ldr	r3, [r7, #12]
 801d72a:	2b00      	cmp	r3, #0
 801d72c:	d01d      	beq.n	801d76a <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCall()) {
 801d72e:	68fb      	ldr	r3, [r7, #12]
 801d730:	681a      	ldr	r2, [r3, #0]
 801d732:	68fb      	ldr	r3, [r7, #12]
 801d734:	681b      	ldr	r3, [r3, #0]
 801d736:	681b      	ldr	r3, [r3, #0]
 801d738:	33cc      	adds	r3, #204	; 0xcc
 801d73a:	681b      	ldr	r3, [r3, #0]
 801d73c:	4610      	mov	r0, r2
 801d73e:	4798      	blx	r3
 801d740:	4603      	mov	r3, r0
 801d742:	2b00      	cmp	r3, #0
 801d744:	d00d      	beq.n	801d762 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801d746:	68fb      	ldr	r3, [r7, #12]
 801d748:	681b      	ldr	r3, [r3, #0]
 801d74a:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801d74c:	68fb      	ldr	r3, [r7, #12]
 801d74e:	2200      	movs	r2, #0
 801d750:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801d752:	687b      	ldr	r3, [r7, #4]
 801d754:	681b      	ldr	r3, [r3, #0]
 801d756:	3388      	adds	r3, #136	; 0x88
 801d758:	681b      	ldr	r3, [r3, #0]
 801d75a:	6878      	ldr	r0, [r7, #4]
 801d75c:	4798      	blx	r3
            return matchingCall;
 801d75e:	68bb      	ldr	r3, [r7, #8]
 801d760:	e004      	b.n	801d76c <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801d762:	68fb      	ldr	r3, [r7, #12]
 801d764:	685b      	ldr	r3, [r3, #4]
 801d766:	60fb      	str	r3, [r7, #12]
 801d768:	e7de      	b.n	801d728 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801d76a:	2300      	movs	r3, #0
}
 801d76c:	4618      	mov	r0, r3
 801d76e:	3710      	adds	r7, #16
 801d770:	46bd      	mov	sp, r7
 801d772:	bd80      	pop	{r7, pc}

0801d774 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv>:

void MockExpectedCallsList::pruneEmptyNodeFromList()
{
 801d774:	b580      	push	{r7, lr}
 801d776:	b086      	sub	sp, #24
 801d778:	af00      	add	r7, sp, #0
 801d77a:	6078      	str	r0, [r7, #4]
    MockExpectedCallsListNode* current = head_;
 801d77c:	687b      	ldr	r3, [r7, #4]
 801d77e:	685b      	ldr	r3, [r3, #4]
 801d780:	617b      	str	r3, [r7, #20]
    MockExpectedCallsListNode* previous = NULLPTR;
 801d782:	2300      	movs	r3, #0
 801d784:	613b      	str	r3, [r7, #16]
    MockExpectedCallsListNode* toBeDeleted = NULLPTR;
 801d786:	2300      	movs	r3, #0
 801d788:	60fb      	str	r3, [r7, #12]

    while (current) {
 801d78a:	697b      	ldr	r3, [r7, #20]
 801d78c:	2b00      	cmp	r3, #0
 801d78e:	d024      	beq.n	801d7da <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x66>
        if (current->expectedCall_ == NULLPTR) {
 801d790:	697b      	ldr	r3, [r7, #20]
 801d792:	681b      	ldr	r3, [r3, #0]
 801d794:	2b00      	cmp	r3, #0
 801d796:	d11a      	bne.n	801d7ce <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x5a>
            toBeDeleted = current;
 801d798:	697b      	ldr	r3, [r7, #20]
 801d79a:	60fb      	str	r3, [r7, #12]
            if (previous == NULLPTR)
 801d79c:	693b      	ldr	r3, [r7, #16]
 801d79e:	2b00      	cmp	r3, #0
 801d7a0:	d106      	bne.n	801d7b0 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x3c>
                head_ = current = current->next_;
 801d7a2:	697b      	ldr	r3, [r7, #20]
 801d7a4:	685b      	ldr	r3, [r3, #4]
 801d7a6:	617b      	str	r3, [r7, #20]
 801d7a8:	687b      	ldr	r3, [r7, #4]
 801d7aa:	697a      	ldr	r2, [r7, #20]
 801d7ac:	605a      	str	r2, [r3, #4]
 801d7ae:	e006      	b.n	801d7be <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x4a>
            else
                current = previous->next_ = current->next_;
 801d7b0:	697b      	ldr	r3, [r7, #20]
 801d7b2:	685a      	ldr	r2, [r3, #4]
 801d7b4:	693b      	ldr	r3, [r7, #16]
 801d7b6:	605a      	str	r2, [r3, #4]
 801d7b8:	693b      	ldr	r3, [r7, #16]
 801d7ba:	685b      	ldr	r3, [r3, #4]
 801d7bc:	617b      	str	r3, [r7, #20]
            delete toBeDeleted;
 801d7be:	68fb      	ldr	r3, [r7, #12]
 801d7c0:	2b00      	cmp	r3, #0
 801d7c2:	d0e2      	beq.n	801d78a <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
 801d7c4:	2108      	movs	r1, #8
 801d7c6:	4618      	mov	r0, r3
 801d7c8:	f7ee f82e 	bl	800b828 <_ZdlPvj>
 801d7cc:	e7dd      	b.n	801d78a <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
        else {
            previous = current;
 801d7ce:	697b      	ldr	r3, [r7, #20]
 801d7d0:	613b      	str	r3, [r7, #16]
            current = current->next_;
 801d7d2:	697b      	ldr	r3, [r7, #20]
 801d7d4:	685b      	ldr	r3, [r3, #4]
 801d7d6:	617b      	str	r3, [r7, #20]
    while (current) {
 801d7d8:	e7d7      	b.n	801d78a <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
    }
}
 801d7da:	bf00      	nop
 801d7dc:	3718      	adds	r7, #24
 801d7de:	46bd      	mov	sp, r7
 801d7e0:	bd80      	pop	{r7, pc}

0801d7e2 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>:

void MockExpectedCallsList::deleteAllExpectationsAndClearList()
{
 801d7e2:	b580      	push	{r7, lr}
 801d7e4:	b084      	sub	sp, #16
 801d7e6:	af00      	add	r7, sp, #0
 801d7e8:	6078      	str	r0, [r7, #4]
    while (head_) {
 801d7ea:	687b      	ldr	r3, [r7, #4]
 801d7ec:	685b      	ldr	r3, [r3, #4]
 801d7ee:	2b00      	cmp	r3, #0
 801d7f0:	d019      	beq.n	801d826 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x44>
        MockExpectedCallsListNode* next = head_->next_;
 801d7f2:	687b      	ldr	r3, [r7, #4]
 801d7f4:	685b      	ldr	r3, [r3, #4]
 801d7f6:	685b      	ldr	r3, [r3, #4]
 801d7f8:	60fb      	str	r3, [r7, #12]
        delete head_->expectedCall_;
 801d7fa:	687b      	ldr	r3, [r7, #4]
 801d7fc:	685b      	ldr	r3, [r3, #4]
 801d7fe:	681b      	ldr	r3, [r3, #0]
 801d800:	2b00      	cmp	r3, #0
 801d802:	d004      	beq.n	801d80e <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x2c>
 801d804:	681a      	ldr	r2, [r3, #0]
 801d806:	3204      	adds	r2, #4
 801d808:	6812      	ldr	r2, [r2, #0]
 801d80a:	4618      	mov	r0, r3
 801d80c:	4790      	blx	r2
        delete head_;
 801d80e:	687b      	ldr	r3, [r7, #4]
 801d810:	685b      	ldr	r3, [r3, #4]
 801d812:	2b00      	cmp	r3, #0
 801d814:	d003      	beq.n	801d81e <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x3c>
 801d816:	2108      	movs	r1, #8
 801d818:	4618      	mov	r0, r3
 801d81a:	f7ee f805 	bl	800b828 <_ZdlPvj>
        head_ = next;
 801d81e:	687b      	ldr	r3, [r7, #4]
 801d820:	68fa      	ldr	r2, [r7, #12]
 801d822:	605a      	str	r2, [r3, #4]
    while (head_) {
 801d824:	e7e1      	b.n	801d7ea <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x8>
    }
}
 801d826:	bf00      	nop
 801d828:	3710      	adds	r7, #16
 801d82a:	46bd      	mov	sp, r7
 801d82c:	bd80      	pop	{r7, pc}

0801d82e <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>:

void MockExpectedCallsList::resetActualCallMatchingState()
{
 801d82e:	b580      	push	{r7, lr}
 801d830:	b084      	sub	sp, #16
 801d832:	af00      	add	r7, sp, #0
 801d834:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d836:	687b      	ldr	r3, [r7, #4]
 801d838:	685b      	ldr	r3, [r3, #4]
 801d83a:	60fb      	str	r3, [r7, #12]
 801d83c:	68fb      	ldr	r3, [r7, #12]
 801d83e:	2b00      	cmp	r3, #0
 801d840:	d00c      	beq.n	801d85c <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0x2e>
        p->expectedCall_->resetActualCallMatchingState();
 801d842:	68fb      	ldr	r3, [r7, #12]
 801d844:	681a      	ldr	r2, [r3, #0]
 801d846:	68fb      	ldr	r3, [r7, #12]
 801d848:	681b      	ldr	r3, [r3, #0]
 801d84a:	681b      	ldr	r3, [r3, #0]
 801d84c:	33ec      	adds	r3, #236	; 0xec
 801d84e:	681b      	ldr	r3, [r3, #0]
 801d850:	4610      	mov	r0, r2
 801d852:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d854:	68fb      	ldr	r3, [r7, #12]
 801d856:	685b      	ldr	r3, [r3, #4]
 801d858:	60fb      	str	r3, [r7, #12]
 801d85a:	e7ef      	b.n	801d83c <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0xe>
}
 801d85c:	bf00      	nop
 801d85e:	3710      	adds	r7, #16
 801d860:	46bd      	mov	sp, r7
 801d862:	bd80      	pop	{r7, pc}

0801d864 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>:

void MockExpectedCallsList::wasPassedToObject()
{
 801d864:	b580      	push	{r7, lr}
 801d866:	b084      	sub	sp, #16
 801d868:	af00      	add	r7, sp, #0
 801d86a:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d86c:	687b      	ldr	r3, [r7, #4]
 801d86e:	685b      	ldr	r3, [r3, #4]
 801d870:	60fb      	str	r3, [r7, #12]
 801d872:	68fb      	ldr	r3, [r7, #12]
 801d874:	2b00      	cmp	r3, #0
 801d876:	d00c      	beq.n	801d892 <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0x2e>
        p->expectedCall_->wasPassedToObject();
 801d878:	68fb      	ldr	r3, [r7, #12]
 801d87a:	681a      	ldr	r2, [r3, #0]
 801d87c:	68fb      	ldr	r3, [r7, #12]
 801d87e:	681b      	ldr	r3, [r3, #0]
 801d880:	681b      	ldr	r3, [r3, #0]
 801d882:	33e8      	adds	r3, #232	; 0xe8
 801d884:	681b      	ldr	r3, [r3, #0]
 801d886:	4610      	mov	r0, r2
 801d888:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d88a:	68fb      	ldr	r3, [r7, #12]
 801d88c:	685b      	ldr	r3, [r3, #4]
 801d88e:	60fb      	str	r3, [r7, #12]
 801d890:	e7ef      	b.n	801d872 <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0xe>
}
 801d892:	bf00      	nop
 801d894:	3710      	adds	r7, #16
 801d896:	46bd      	mov	sp, r7
 801d898:	bd80      	pop	{r7, pc}

0801d89a <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>:


void MockExpectedCallsList::parameterWasPassed(const SimpleString& parameterName)
{
 801d89a:	b580      	push	{r7, lr}
 801d89c:	b084      	sub	sp, #16
 801d89e:	af00      	add	r7, sp, #0
 801d8a0:	6078      	str	r0, [r7, #4]
 801d8a2:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d8a4:	687b      	ldr	r3, [r7, #4]
 801d8a6:	685b      	ldr	r3, [r3, #4]
 801d8a8:	60fb      	str	r3, [r7, #12]
 801d8aa:	68fb      	ldr	r3, [r7, #12]
 801d8ac:	2b00      	cmp	r3, #0
 801d8ae:	d00d      	beq.n	801d8cc <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->inputParameterWasPassed(parameterName);
 801d8b0:	68fb      	ldr	r3, [r7, #12]
 801d8b2:	681a      	ldr	r2, [r3, #0]
 801d8b4:	68fb      	ldr	r3, [r7, #12]
 801d8b6:	681b      	ldr	r3, [r3, #0]
 801d8b8:	681b      	ldr	r3, [r3, #0]
 801d8ba:	33dc      	adds	r3, #220	; 0xdc
 801d8bc:	681b      	ldr	r3, [r3, #0]
 801d8be:	6839      	ldr	r1, [r7, #0]
 801d8c0:	4610      	mov	r0, r2
 801d8c2:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d8c4:	68fb      	ldr	r3, [r7, #12]
 801d8c6:	685b      	ldr	r3, [r3, #4]
 801d8c8:	60fb      	str	r3, [r7, #12]
 801d8ca:	e7ee      	b.n	801d8aa <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x10>
}
 801d8cc:	bf00      	nop
 801d8ce:	3710      	adds	r7, #16
 801d8d0:	46bd      	mov	sp, r7
 801d8d2:	bd80      	pop	{r7, pc}

0801d8d4 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>:

void MockExpectedCallsList::outputParameterWasPassed(const SimpleString& parameterName)
{
 801d8d4:	b580      	push	{r7, lr}
 801d8d6:	b084      	sub	sp, #16
 801d8d8:	af00      	add	r7, sp, #0
 801d8da:	6078      	str	r0, [r7, #4]
 801d8dc:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d8de:	687b      	ldr	r3, [r7, #4]
 801d8e0:	685b      	ldr	r3, [r3, #4]
 801d8e2:	60fb      	str	r3, [r7, #12]
 801d8e4:	68fb      	ldr	r3, [r7, #12]
 801d8e6:	2b00      	cmp	r3, #0
 801d8e8:	d00d      	beq.n	801d906 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->outputParameterWasPassed(parameterName);
 801d8ea:	68fb      	ldr	r3, [r7, #12]
 801d8ec:	681a      	ldr	r2, [r3, #0]
 801d8ee:	68fb      	ldr	r3, [r7, #12]
 801d8f0:	681b      	ldr	r3, [r3, #0]
 801d8f2:	681b      	ldr	r3, [r3, #0]
 801d8f4:	33e0      	adds	r3, #224	; 0xe0
 801d8f6:	681b      	ldr	r3, [r3, #0]
 801d8f8:	6839      	ldr	r1, [r7, #0]
 801d8fa:	4610      	mov	r0, r2
 801d8fc:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d8fe:	68fb      	ldr	r3, [r7, #12]
 801d900:	685b      	ldr	r3, [r3, #4]
 801d902:	60fb      	str	r3, [r7, #12]
 801d904:	e7ee      	b.n	801d8e4 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x10>
}
 801d906:	bf00      	nop
 801d908:	3710      	adds	r7, #16
 801d90a:	46bd      	mov	sp, r7
 801d90c:	bd80      	pop	{r7, pc}
	...

0801d910 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>:

static SimpleString stringOrNoneTextWhenEmpty(const SimpleString& inputString, const SimpleString& linePrefix)
{
 801d910:	b590      	push	{r4, r7, lr}
 801d912:	b087      	sub	sp, #28
 801d914:	af00      	add	r7, sp, #0
 801d916:	60f8      	str	r0, [r7, #12]
 801d918:	60b9      	str	r1, [r7, #8]
 801d91a:	607a      	str	r2, [r7, #4]
    SimpleString str = inputString;
 801d91c:	68b9      	ldr	r1, [r7, #8]
 801d91e:	68f8      	ldr	r0, [r7, #12]
 801d920:	f7f0 fb85 	bl	800e02e <_ZN12SimpleStringC1ERKS_>
    if (str == "") {
 801d924:	f107 0310 	add.w	r3, r7, #16
 801d928:	490f      	ldr	r1, [pc, #60]	; (801d968 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x58>)
 801d92a:	4618      	mov	r0, r3
 801d92c:	f7f0 fb2b 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801d930:	f107 0310 	add.w	r3, r7, #16
 801d934:	4619      	mov	r1, r3
 801d936:	68f8      	ldr	r0, [r7, #12]
 801d938:	f7f0 fee9 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801d93c:	4603      	mov	r3, r0
 801d93e:	461c      	mov	r4, r3
 801d940:	f107 0310 	add.w	r3, r7, #16
 801d944:	4618      	mov	r0, r3
 801d946:	f7f0 fed6 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801d94a:	2c00      	cmp	r4, #0
 801d94c:	d007      	beq.n	801d95e <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x4e>
        str += linePrefix;
 801d94e:	6879      	ldr	r1, [r7, #4]
 801d950:	68f8      	ldr	r0, [r7, #12]
 801d952:	f7f0 ff4d 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
        str += "<none>";
 801d956:	4905      	ldr	r1, [pc, #20]	; (801d96c <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x5c>)
 801d958:	68f8      	ldr	r0, [r7, #12]
 801d95a:	f7f0 ff5b 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    }
    return str;
 801d95e:	bf00      	nop
}
 801d960:	68f8      	ldr	r0, [r7, #12]
 801d962:	371c      	adds	r7, #28
 801d964:	46bd      	mov	sp, r7
 801d966:	bd90      	pop	{r4, r7, pc}
 801d968:	08027b8c 	.word	0x08027b8c
 801d96c:	08027b90 	.word	0x08027b90

0801d970 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>:

static SimpleString appendStringOnANewLine(const SimpleString& inputString, const SimpleString& linePrefix, const SimpleString& stringToAppend)
{
 801d970:	b590      	push	{r4, r7, lr}
 801d972:	b087      	sub	sp, #28
 801d974:	af00      	add	r7, sp, #0
 801d976:	60f8      	str	r0, [r7, #12]
 801d978:	60b9      	str	r1, [r7, #8]
 801d97a:	607a      	str	r2, [r7, #4]
 801d97c:	603b      	str	r3, [r7, #0]
    SimpleString str = inputString;
 801d97e:	68b9      	ldr	r1, [r7, #8]
 801d980:	68f8      	ldr	r0, [r7, #12]
 801d982:	f7f0 fb54 	bl	800e02e <_ZN12SimpleStringC1ERKS_>
    if (str != "") str += "\n";
 801d986:	f107 0310 	add.w	r3, r7, #16
 801d98a:	4912      	ldr	r1, [pc, #72]	; (801d9d4 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x64>)
 801d98c:	4618      	mov	r0, r3
 801d98e:	f7f0 fafa 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801d992:	f107 0310 	add.w	r3, r7, #16
 801d996:	4619      	mov	r1, r3
 801d998:	68f8      	ldr	r0, [r7, #12]
 801d99a:	f7f0 fefd 	bl	800e798 <_ZneRK12SimpleStringS1_>
 801d99e:	4603      	mov	r3, r0
 801d9a0:	461c      	mov	r4, r3
 801d9a2:	f107 0310 	add.w	r3, r7, #16
 801d9a6:	4618      	mov	r0, r3
 801d9a8:	f7f0 fea5 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801d9ac:	2c00      	cmp	r4, #0
 801d9ae:	d003      	beq.n	801d9b8 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x48>
 801d9b0:	4909      	ldr	r1, [pc, #36]	; (801d9d8 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x68>)
 801d9b2:	68f8      	ldr	r0, [r7, #12]
 801d9b4:	f7f0 ff2e 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    str += linePrefix;
 801d9b8:	6879      	ldr	r1, [r7, #4]
 801d9ba:	68f8      	ldr	r0, [r7, #12]
 801d9bc:	f7f0 ff18 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
    str += stringToAppend;
 801d9c0:	6839      	ldr	r1, [r7, #0]
 801d9c2:	68f8      	ldr	r0, [r7, #12]
 801d9c4:	f7f0 ff14 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
    return str;
 801d9c8:	bf00      	nop
}
 801d9ca:	68f8      	ldr	r0, [r7, #12]
 801d9cc:	371c      	adds	r7, #28
 801d9ce:	46bd      	mov	sp, r7
 801d9d0:	bd90      	pop	{r4, r7, pc}
 801d9d2:	bf00      	nop
 801d9d4:	08027b8c 	.word	0x08027b8c
 801d9d8:	08027b98 	.word	0x08027b98

0801d9dc <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::unfulfilledCallsToString(const SimpleString& linePrefix) const
{
 801d9dc:	b580      	push	{r7, lr}
 801d9de:	b08c      	sub	sp, #48	; 0x30
 801d9e0:	af00      	add	r7, sp, #0
 801d9e2:	60f8      	str	r0, [r7, #12]
 801d9e4:	60b9      	str	r1, [r7, #8]
 801d9e6:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801d9e8:	f107 0314 	add.w	r3, r7, #20
 801d9ec:	4929      	ldr	r1, [pc, #164]	; (801da94 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0xb8>)
 801d9ee:	4618      	mov	r0, r3
 801d9f0:	f7f0 fac9 	bl	800df86 <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801d9f4:	68bb      	ldr	r3, [r7, #8]
 801d9f6:	685b      	ldr	r3, [r3, #4]
 801d9f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d9fc:	2b00      	cmp	r3, #0
 801d9fe:	d038      	beq.n	801da72 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x96>
        if (!p->expectedCall_->isFulfilled())
 801da00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da02:	681a      	ldr	r2, [r3, #0]
 801da04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da06:	681b      	ldr	r3, [r3, #0]
 801da08:	681b      	ldr	r3, [r3, #0]
 801da0a:	33c0      	adds	r3, #192	; 0xc0
 801da0c:	681b      	ldr	r3, [r3, #0]
 801da0e:	4610      	mov	r0, r2
 801da10:	4798      	blx	r3
 801da12:	4603      	mov	r3, r0
 801da14:	f083 0301 	eor.w	r3, r3, #1
 801da18:	b2db      	uxtb	r3, r3
 801da1a:	2b00      	cmp	r3, #0
 801da1c:	d025      	beq.n	801da6a <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x8e>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801da1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da20:	6819      	ldr	r1, [r3, #0]
 801da22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da24:	681b      	ldr	r3, [r3, #0]
 801da26:	681b      	ldr	r3, [r3, #0]
 801da28:	33f0      	adds	r3, #240	; 0xf0
 801da2a:	681b      	ldr	r3, [r3, #0]
 801da2c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801da30:	4610      	mov	r0, r2
 801da32:	4798      	blx	r3
 801da34:	f107 001c 	add.w	r0, r7, #28
 801da38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801da3c:	f107 0114 	add.w	r1, r7, #20
 801da40:	687a      	ldr	r2, [r7, #4]
 801da42:	f7ff ff95 	bl	801d970 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801da46:	f107 021c 	add.w	r2, r7, #28
 801da4a:	f107 0314 	add.w	r3, r7, #20
 801da4e:	4611      	mov	r1, r2
 801da50:	4618      	mov	r0, r3
 801da52:	f7f0 fb04 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 801da56:	f107 031c 	add.w	r3, r7, #28
 801da5a:	4618      	mov	r0, r3
 801da5c:	f7f0 fe4b 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801da60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801da64:	4618      	mov	r0, r3
 801da66:	f7f0 fe46 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801da6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da6c:	685b      	ldr	r3, [r3, #4]
 801da6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801da70:	e7c3      	b.n	801d9fa <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x1e>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801da72:	68fb      	ldr	r3, [r7, #12]
 801da74:	f107 0114 	add.w	r1, r7, #20
 801da78:	687a      	ldr	r2, [r7, #4]
 801da7a:	4618      	mov	r0, r3
 801da7c:	f7ff ff48 	bl	801d910 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801da80:	f107 0314 	add.w	r3, r7, #20
 801da84:	4618      	mov	r0, r3
 801da86:	f7f0 fe36 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801da8a:	bf00      	nop
}
 801da8c:	68f8      	ldr	r0, [r7, #12]
 801da8e:	3730      	adds	r7, #48	; 0x30
 801da90:	46bd      	mov	sp, r7
 801da92:	bd80      	pop	{r7, pc}
 801da94:	08027b8c 	.word	0x08027b8c

0801da98 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::fulfilledCallsToString(const SimpleString& linePrefix) const
{
 801da98:	b580      	push	{r7, lr}
 801da9a:	b08c      	sub	sp, #48	; 0x30
 801da9c:	af00      	add	r7, sp, #0
 801da9e:	60f8      	str	r0, [r7, #12]
 801daa0:	60b9      	str	r1, [r7, #8]
 801daa2:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801daa4:	f107 0314 	add.w	r3, r7, #20
 801daa8:	4928      	ldr	r1, [pc, #160]	; (801db4c <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0xb4>)
 801daaa:	4618      	mov	r0, r3
 801daac:	f7f0 fa6b 	bl	800df86 <_ZN12SimpleStringC1EPKc>

    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801dab0:	68bb      	ldr	r3, [r7, #8]
 801dab2:	685b      	ldr	r3, [r3, #4]
 801dab4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801dab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dab8:	2b00      	cmp	r3, #0
 801daba:	d035      	beq.n	801db28 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x90>
        if (p->expectedCall_->isFulfilled())
 801dabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dabe:	681a      	ldr	r2, [r3, #0]
 801dac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dac2:	681b      	ldr	r3, [r3, #0]
 801dac4:	681b      	ldr	r3, [r3, #0]
 801dac6:	33c0      	adds	r3, #192	; 0xc0
 801dac8:	681b      	ldr	r3, [r3, #0]
 801daca:	4610      	mov	r0, r2
 801dacc:	4798      	blx	r3
 801dace:	4603      	mov	r3, r0
 801dad0:	2b00      	cmp	r3, #0
 801dad2:	d025      	beq.n	801db20 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x88>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801dad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dad6:	6819      	ldr	r1, [r3, #0]
 801dad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dada:	681b      	ldr	r3, [r3, #0]
 801dadc:	681b      	ldr	r3, [r3, #0]
 801dade:	33f0      	adds	r3, #240	; 0xf0
 801dae0:	681b      	ldr	r3, [r3, #0]
 801dae2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801dae6:	4610      	mov	r0, r2
 801dae8:	4798      	blx	r3
 801daea:	f107 001c 	add.w	r0, r7, #28
 801daee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801daf2:	f107 0114 	add.w	r1, r7, #20
 801daf6:	687a      	ldr	r2, [r7, #4]
 801daf8:	f7ff ff3a 	bl	801d970 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801dafc:	f107 021c 	add.w	r2, r7, #28
 801db00:	f107 0314 	add.w	r3, r7, #20
 801db04:	4611      	mov	r1, r2
 801db06:	4618      	mov	r0, r3
 801db08:	f7f0 faa9 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 801db0c:	f107 031c 	add.w	r3, r7, #28
 801db10:	4618      	mov	r0, r3
 801db12:	f7f0 fdf0 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801db16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801db1a:	4618      	mov	r0, r3
 801db1c:	f7f0 fdeb 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801db20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db22:	685b      	ldr	r3, [r3, #4]
 801db24:	62fb      	str	r3, [r7, #44]	; 0x2c
 801db26:	e7c6      	b.n	801dab6 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x1e>

    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801db28:	68fb      	ldr	r3, [r7, #12]
 801db2a:	f107 0114 	add.w	r1, r7, #20
 801db2e:	687a      	ldr	r2, [r7, #4]
 801db30:	4618      	mov	r0, r3
 801db32:	f7ff feed 	bl	801d910 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801db36:	f107 0314 	add.w	r3, r7, #20
 801db3a:	4618      	mov	r0, r3
 801db3c:	f7f0 fddb 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801db40:	bf00      	nop
}
 801db42:	68f8      	ldr	r0, [r7, #12]
 801db44:	3730      	adds	r7, #48	; 0x30
 801db46:	46bd      	mov	sp, r7
 801db48:	bd80      	pop	{r7, pc}
 801db4a:	bf00      	nop
 801db4c:	08027b8c 	.word	0x08027b8c

0801db50 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>:

SimpleString MockExpectedCallsList::missingParametersToString() const
{
 801db50:	b580      	push	{r7, lr}
 801db52:	b08e      	sub	sp, #56	; 0x38
 801db54:	af00      	add	r7, sp, #0
 801db56:	6078      	str	r0, [r7, #4]
 801db58:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801db5a:	f107 030c 	add.w	r3, r7, #12
 801db5e:	4936      	ldr	r1, [pc, #216]	; (801dc38 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801db60:	4618      	mov	r0, r3
 801db62:	f7f0 fa10 	bl	800df86 <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801db66:	683b      	ldr	r3, [r7, #0]
 801db68:	685b      	ldr	r3, [r3, #4]
 801db6a:	637b      	str	r3, [r7, #52]	; 0x34
 801db6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801db6e:	2b00      	cmp	r3, #0
 801db70:	d044      	beq.n	801dbfc <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xac>
        if (! p->expectedCall_->isMatchingActualCall())
 801db72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801db74:	681a      	ldr	r2, [r3, #0]
 801db76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801db78:	681b      	ldr	r3, [r3, #0]
 801db7a:	681b      	ldr	r3, [r3, #0]
 801db7c:	33cc      	adds	r3, #204	; 0xcc
 801db7e:	681b      	ldr	r3, [r3, #0]
 801db80:	4610      	mov	r0, r2
 801db82:	4798      	blx	r3
 801db84:	4603      	mov	r3, r0
 801db86:	f083 0301 	eor.w	r3, r3, #1
 801db8a:	b2db      	uxtb	r3, r3
 801db8c:	2b00      	cmp	r3, #0
 801db8e:	d031      	beq.n	801dbf4 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xa4>
            str = appendStringOnANewLine(str, "", p->expectedCall_->missingParametersToString());
 801db90:	f107 031c 	add.w	r3, r7, #28
 801db94:	4928      	ldr	r1, [pc, #160]	; (801dc38 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801db96:	4618      	mov	r0, r3
 801db98:	f7f0 f9f5 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801db9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801db9e:	6819      	ldr	r1, [r3, #0]
 801dba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dba2:	681b      	ldr	r3, [r3, #0]
 801dba4:	681b      	ldr	r3, [r3, #0]
 801dba6:	33f4      	adds	r3, #244	; 0xf4
 801dba8:	681b      	ldr	r3, [r3, #0]
 801dbaa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801dbae:	4610      	mov	r0, r2
 801dbb0:	4798      	blx	r3
 801dbb2:	f107 0014 	add.w	r0, r7, #20
 801dbb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801dbba:	f107 021c 	add.w	r2, r7, #28
 801dbbe:	f107 010c 	add.w	r1, r7, #12
 801dbc2:	f7ff fed5 	bl	801d970 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801dbc6:	f107 0214 	add.w	r2, r7, #20
 801dbca:	f107 030c 	add.w	r3, r7, #12
 801dbce:	4611      	mov	r1, r2
 801dbd0:	4618      	mov	r0, r3
 801dbd2:	f7f0 fa44 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 801dbd6:	f107 0314 	add.w	r3, r7, #20
 801dbda:	4618      	mov	r0, r3
 801dbdc:	f7f0 fd8b 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801dbe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801dbe4:	4618      	mov	r0, r3
 801dbe6:	f7f0 fd86 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801dbea:	f107 031c 	add.w	r3, r7, #28
 801dbee:	4618      	mov	r0, r3
 801dbf0:	f7f0 fd81 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801dbf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dbf6:	685b      	ldr	r3, [r3, #4]
 801dbf8:	637b      	str	r3, [r7, #52]	; 0x34
 801dbfa:	e7b7      	b.n	801db6c <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0x1c>

    return stringOrNoneTextWhenEmpty(str, "");
 801dbfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801dc00:	490d      	ldr	r1, [pc, #52]	; (801dc38 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801dc02:	4618      	mov	r0, r3
 801dc04:	f7f0 f9bf 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801dc08:	687b      	ldr	r3, [r7, #4]
 801dc0a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801dc0e:	f107 010c 	add.w	r1, r7, #12
 801dc12:	4618      	mov	r0, r3
 801dc14:	f7ff fe7c 	bl	801d910 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
 801dc18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801dc1c:	4618      	mov	r0, r3
 801dc1e:	f7f0 fd6a 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    SimpleString str;
 801dc22:	f107 030c 	add.w	r3, r7, #12
 801dc26:	4618      	mov	r0, r3
 801dc28:	f7f0 fd65 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, "");
 801dc2c:	bf00      	nop
}
 801dc2e:	6878      	ldr	r0, [r7, #4]
 801dc30:	3738      	adds	r7, #56	; 0x38
 801dc32:	46bd      	mov	sp, r7
 801dc34:	bd80      	pop	{r7, pc}
 801dc36:	bf00      	nop
 801dc38:	08027b8c 	.word	0x08027b8c

0801dc3c <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>:

bool MockExpectedCallsList::hasUnmatchingExpectationsBecauseOfMissingParameters() const
{
 801dc3c:	b580      	push	{r7, lr}
 801dc3e:	b084      	sub	sp, #16
 801dc40:	af00      	add	r7, sp, #0
 801dc42:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801dc44:	687b      	ldr	r3, [r7, #4]
 801dc46:	685b      	ldr	r3, [r3, #4]
 801dc48:	60fb      	str	r3, [r7, #12]
 801dc4a:	68fb      	ldr	r3, [r7, #12]
 801dc4c:	2b00      	cmp	r3, #0
 801dc4e:	d014      	beq.n	801dc7a <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x3e>
        if (! p->expectedCall_->areParametersMatchingActualCall())
 801dc50:	68fb      	ldr	r3, [r7, #12]
 801dc52:	681a      	ldr	r2, [r3, #0]
 801dc54:	68fb      	ldr	r3, [r7, #12]
 801dc56:	681b      	ldr	r3, [r3, #0]
 801dc58:	681b      	ldr	r3, [r3, #0]
 801dc5a:	33d0      	adds	r3, #208	; 0xd0
 801dc5c:	681b      	ldr	r3, [r3, #0]
 801dc5e:	4610      	mov	r0, r2
 801dc60:	4798      	blx	r3
 801dc62:	4603      	mov	r3, r0
 801dc64:	f083 0301 	eor.w	r3, r3, #1
 801dc68:	b2db      	uxtb	r3, r3
 801dc6a:	2b00      	cmp	r3, #0
 801dc6c:	d001      	beq.n	801dc72 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x36>
            return true;
 801dc6e:	2301      	movs	r3, #1
 801dc70:	e004      	b.n	801dc7c <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801dc72:	68fb      	ldr	r3, [r7, #12]
 801dc74:	685b      	ldr	r3, [r3, #4]
 801dc76:	60fb      	str	r3, [r7, #12]
 801dc78:	e7e7      	b.n	801dc4a <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0xe>
    return false;
 801dc7a:	2300      	movs	r3, #0
}
 801dc7c:	4618      	mov	r0, r3
 801dc7e:	3710      	adds	r7, #16
 801dc80:	46bd      	mov	sp, r7
 801dc82:	bd80      	pop	{r7, pc}

0801dc84 <_ZN19MockFailureReporter14crashOnFailureEb>:
    virtual void crashOnFailure(bool shouldCrash) { crashOnFailure_ = shouldCrash; }
 801dc84:	b480      	push	{r7}
 801dc86:	b083      	sub	sp, #12
 801dc88:	af00      	add	r7, sp, #0
 801dc8a:	6078      	str	r0, [r7, #4]
 801dc8c:	460b      	mov	r3, r1
 801dc8e:	70fb      	strb	r3, [r7, #3]
 801dc90:	687b      	ldr	r3, [r7, #4]
 801dc92:	78fa      	ldrb	r2, [r7, #3]
 801dc94:	711a      	strb	r2, [r3, #4]
 801dc96:	bf00      	nop
 801dc98:	370c      	adds	r7, #12
 801dc9a:	46bd      	mov	sp, r7
 801dc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dca0:	4770      	bx	lr
	...

0801dca4 <_ZN33MockFailureReporterTestTerminatorC1Eb>:
#include "CppUTestExt/MockNamedValue.h"

class MockFailureReporterTestTerminator : public TestTerminator
{
public:
    MockFailureReporterTestTerminator(bool crashOnFailure) : crashOnFailure_(crashOnFailure)
 801dca4:	b580      	push	{r7, lr}
 801dca6:	b082      	sub	sp, #8
 801dca8:	af00      	add	r7, sp, #0
 801dcaa:	6078      	str	r0, [r7, #4]
 801dcac:	460b      	mov	r3, r1
 801dcae:	70fb      	strb	r3, [r7, #3]
 801dcb0:	687b      	ldr	r3, [r7, #4]
 801dcb2:	4618      	mov	r0, r3
 801dcb4:	f7ed ff6a 	bl	800bb8c <_ZN14TestTerminatorC1Ev>
 801dcb8:	4a05      	ldr	r2, [pc, #20]	; (801dcd0 <_ZN33MockFailureReporterTestTerminatorC1Eb+0x2c>)
 801dcba:	687b      	ldr	r3, [r7, #4]
 801dcbc:	601a      	str	r2, [r3, #0]
 801dcbe:	687b      	ldr	r3, [r7, #4]
 801dcc0:	78fa      	ldrb	r2, [r7, #3]
 801dcc2:	711a      	strb	r2, [r3, #4]
    {
    }
 801dcc4:	687b      	ldr	r3, [r7, #4]
 801dcc6:	4618      	mov	r0, r3
 801dcc8:	3708      	adds	r7, #8
 801dcca:	46bd      	mov	sp, r7
 801dccc:	bd80      	pop	{r7, pc}
 801dcce:	bf00      	nop
 801dcd0:	0802af80 	.word	0x0802af80

0801dcd4 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv>:

    virtual void exitCurrentTest() const _override
 801dcd4:	b580      	push	{r7, lr}
 801dcd6:	b082      	sub	sp, #8
 801dcd8:	af00      	add	r7, sp, #0
 801dcda:	6078      	str	r0, [r7, #4]
    {
        if (crashOnFailure_)
 801dcdc:	687b      	ldr	r3, [r7, #4]
 801dcde:	791b      	ldrb	r3, [r3, #4]
 801dce0:	2b00      	cmp	r3, #0
 801dce2:	d001      	beq.n	801dce8 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv+0x14>
            UT_CRASH();
 801dce4:	f7f6 f9fe 	bl	80140e4 <_ZN10UtestShell5crashEv>

        UtestShell::getCurrentTestTerminator().exitCurrentTest();
 801dce8:	f7f7 fd40 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801dcec:	4603      	mov	r3, r0
 801dcee:	681a      	ldr	r2, [r3, #0]
 801dcf0:	6812      	ldr	r2, [r2, #0]
 801dcf2:	4618      	mov	r0, r3
 801dcf4:	4790      	blx	r2
    } // LCOV_EXCL_LINE
 801dcf6:	bf00      	nop
 801dcf8:	3708      	adds	r7, #8
 801dcfa:	46bd      	mov	sp, r7
 801dcfc:	bd80      	pop	{r7, pc}
	...

0801dd00 <_ZN33MockFailureReporterTestTerminatorD1Ev>:

    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801dd00:	b580      	push	{r7, lr}
 801dd02:	b082      	sub	sp, #8
 801dd04:	af00      	add	r7, sp, #0
 801dd06:	6078      	str	r0, [r7, #4]
    {
 801dd08:	4a05      	ldr	r2, [pc, #20]	; (801dd20 <_ZN33MockFailureReporterTestTerminatorD1Ev+0x20>)
 801dd0a:	687b      	ldr	r3, [r7, #4]
 801dd0c:	601a      	str	r2, [r3, #0]
 801dd0e:	687b      	ldr	r3, [r7, #4]
 801dd10:	4618      	mov	r0, r3
 801dd12:	f7f7 fdbb 	bl	801588c <_ZN14TestTerminatorD1Ev>
    }
 801dd16:	687b      	ldr	r3, [r7, #4]
 801dd18:	4618      	mov	r0, r3
 801dd1a:	3708      	adds	r7, #8
 801dd1c:	46bd      	mov	sp, r7
 801dd1e:	bd80      	pop	{r7, pc}
 801dd20:	0802af80 	.word	0x0802af80

0801dd24 <_ZN33MockFailureReporterTestTerminatorD0Ev>:
    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801dd24:	b580      	push	{r7, lr}
 801dd26:	b082      	sub	sp, #8
 801dd28:	af00      	add	r7, sp, #0
 801dd2a:	6078      	str	r0, [r7, #4]
    }
 801dd2c:	6878      	ldr	r0, [r7, #4]
 801dd2e:	f7ff ffe7 	bl	801dd00 <_ZN33MockFailureReporterTestTerminatorD1Ev>
 801dd32:	2108      	movs	r1, #8
 801dd34:	6878      	ldr	r0, [r7, #4]
 801dd36:	f7ed fd77 	bl	800b828 <_ZdlPvj>
 801dd3a:	687b      	ldr	r3, [r7, #4]
 801dd3c:	4618      	mov	r0, r3
 801dd3e:	3708      	adds	r7, #8
 801dd40:	46bd      	mov	sp, r7
 801dd42:	bd80      	pop	{r7, pc}

0801dd44 <_ZN19MockFailureReporter8failTestERK11MockFailure>:
    bool crashOnFailure_;

};

void MockFailureReporter::failTest(const MockFailure& failure)
{
 801dd44:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dd46:	b085      	sub	sp, #20
 801dd48:	af00      	add	r7, sp, #0
 801dd4a:	6078      	str	r0, [r7, #4]
 801dd4c:	6039      	str	r1, [r7, #0]
    if (!getTestToFail()->hasFailed())
 801dd4e:	687b      	ldr	r3, [r7, #4]
 801dd50:	681b      	ldr	r3, [r3, #0]
 801dd52:	330c      	adds	r3, #12
 801dd54:	681b      	ldr	r3, [r3, #0]
 801dd56:	6878      	ldr	r0, [r7, #4]
 801dd58:	4798      	blx	r3
 801dd5a:	4603      	mov	r3, r0
 801dd5c:	681a      	ldr	r2, [r3, #0]
 801dd5e:	321c      	adds	r2, #28
 801dd60:	6812      	ldr	r2, [r2, #0]
 801dd62:	4618      	mov	r0, r3
 801dd64:	4790      	blx	r2
 801dd66:	4603      	mov	r3, r0
 801dd68:	f083 0301 	eor.w	r3, r3, #1
 801dd6c:	b2db      	uxtb	r3, r3
 801dd6e:	2b00      	cmp	r3, #0
 801dd70:	d01d      	beq.n	801ddae <_ZN19MockFailureReporter8failTestERK11MockFailure+0x6a>
        getTestToFail()->failWith(failure, MockFailureReporterTestTerminator(crashOnFailure_));
 801dd72:	687b      	ldr	r3, [r7, #4]
 801dd74:	681b      	ldr	r3, [r3, #0]
 801dd76:	330c      	adds	r3, #12
 801dd78:	681b      	ldr	r3, [r3, #0]
 801dd7a:	6878      	ldr	r0, [r7, #4]
 801dd7c:	4798      	blx	r3
 801dd7e:	4604      	mov	r4, r0
 801dd80:	6823      	ldr	r3, [r4, #0]
 801dd82:	339c      	adds	r3, #156	; 0x9c
 801dd84:	681d      	ldr	r5, [r3, #0]
 801dd86:	683e      	ldr	r6, [r7, #0]
 801dd88:	687b      	ldr	r3, [r7, #4]
 801dd8a:	791a      	ldrb	r2, [r3, #4]
 801dd8c:	f107 0308 	add.w	r3, r7, #8
 801dd90:	4611      	mov	r1, r2
 801dd92:	4618      	mov	r0, r3
 801dd94:	f7ff ff86 	bl	801dca4 <_ZN33MockFailureReporterTestTerminatorC1Eb>
 801dd98:	f107 0308 	add.w	r3, r7, #8
 801dd9c:	461a      	mov	r2, r3
 801dd9e:	4631      	mov	r1, r6
 801dda0:	4620      	mov	r0, r4
 801dda2:	47a8      	blx	r5
 801dda4:	f107 0308 	add.w	r3, r7, #8
 801dda8:	4618      	mov	r0, r3
 801ddaa:	f7ff ffa9 	bl	801dd00 <_ZN33MockFailureReporterTestTerminatorD1Ev>
} // LCOV_EXCL_LINE
 801ddae:	bf00      	nop
 801ddb0:	3714      	adds	r7, #20
 801ddb2:	46bd      	mov	sp, r7
 801ddb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ddb6 <_ZN19MockFailureReporter13getTestToFailEv>:

UtestShell* MockFailureReporter::getTestToFail()
{
 801ddb6:	b580      	push	{r7, lr}
 801ddb8:	b082      	sub	sp, #8
 801ddba:	af00      	add	r7, sp, #0
 801ddbc:	6078      	str	r0, [r7, #4]
    return UtestShell::getCurrent();
 801ddbe:	f7f7 fcc5 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 801ddc2:	4603      	mov	r3, r0
}
 801ddc4:	4618      	mov	r0, r3
 801ddc6:	3708      	adds	r7, #8
 801ddc8:	46bd      	mov	sp, r7
 801ddca:	bd80      	pop	{r7, pc}

0801ddcc <_ZN11MockFailureC1EP10UtestShell>:

MockFailure::MockFailure(UtestShell* test) : TestFailure(test, "Test failed with MockFailure without an error! Something went seriously wrong.")
 801ddcc:	b590      	push	{r4, r7, lr}
 801ddce:	b085      	sub	sp, #20
 801ddd0:	af00      	add	r7, sp, #0
 801ddd2:	6078      	str	r0, [r7, #4]
 801ddd4:	6039      	str	r1, [r7, #0]
 801ddd6:	687c      	ldr	r4, [r7, #4]
 801ddd8:	f107 0308 	add.w	r3, r7, #8
 801dddc:	490b      	ldr	r1, [pc, #44]	; (801de0c <_ZN11MockFailureC1EP10UtestShell+0x40>)
 801ddde:	4618      	mov	r0, r3
 801dde0:	f7f0 f8d1 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801dde4:	f107 0308 	add.w	r3, r7, #8
 801dde8:	461a      	mov	r2, r3
 801ddea:	6839      	ldr	r1, [r7, #0]
 801ddec:	4620      	mov	r0, r4
 801ddee:	f7f1 ff29 	bl	800fc44 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 801ddf2:	f107 0308 	add.w	r3, r7, #8
 801ddf6:	4618      	mov	r0, r3
 801ddf8:	f7f0 fc7d 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801ddfc:	4a04      	ldr	r2, [pc, #16]	; (801de10 <_ZN11MockFailureC1EP10UtestShell+0x44>)
 801ddfe:	687b      	ldr	r3, [r7, #4]
 801de00:	601a      	str	r2, [r3, #0]
{
}
 801de02:	687b      	ldr	r3, [r7, #4]
 801de04:	4618      	mov	r0, r3
 801de06:	3714      	adds	r7, #20
 801de08:	46bd      	mov	sp, r7
 801de0a:	bd90      	pop	{r4, r7, pc}
 801de0c:	08027b9c 	.word	0x08027b9c
 801de10:	08029f0c 	.word	0x08029f0c

0801de14 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistory(const MockExpectedCallsList& expectations)
{
 801de14:	b5b0      	push	{r4, r5, r7, lr}
 801de16:	b08a      	sub	sp, #40	; 0x28
 801de18:	af00      	add	r7, sp, #0
 801de1a:	6078      	str	r0, [r7, #4]
 801de1c:	6039      	str	r1, [r7, #0]
    message_ += "\tEXPECTED calls that WERE NOT fulfilled:\n";
 801de1e:	687b      	ldr	r3, [r7, #4]
 801de20:	332c      	adds	r3, #44	; 0x2c
 801de22:	492b      	ldr	r1, [pc, #172]	; (801ded0 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xbc>)
 801de24:	4618      	mov	r0, r3
 801de26:	f7f0 fcf5 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.unfulfilledCallsToString("\t\t");
 801de2a:	687b      	ldr	r3, [r7, #4]
 801de2c:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801de30:	683b      	ldr	r3, [r7, #0]
 801de32:	681b      	ldr	r3, [r3, #0]
 801de34:	337c      	adds	r3, #124	; 0x7c
 801de36:	681c      	ldr	r4, [r3, #0]
 801de38:	f107 0310 	add.w	r3, r7, #16
 801de3c:	4925      	ldr	r1, [pc, #148]	; (801ded4 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801de3e:	4618      	mov	r0, r3
 801de40:	f7f0 f8a1 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801de44:	f107 0308 	add.w	r3, r7, #8
 801de48:	f107 0210 	add.w	r2, r7, #16
 801de4c:	6839      	ldr	r1, [r7, #0]
 801de4e:	4618      	mov	r0, r3
 801de50:	47a0      	blx	r4
 801de52:	f107 0308 	add.w	r3, r7, #8
 801de56:	4619      	mov	r1, r3
 801de58:	4628      	mov	r0, r5
 801de5a:	f7f0 fcc9 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801de5e:	f107 0308 	add.w	r3, r7, #8
 801de62:	4618      	mov	r0, r3
 801de64:	f7f0 fc47 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801de68:	f107 0310 	add.w	r3, r7, #16
 801de6c:	4618      	mov	r0, r3
 801de6e:	f7f0 fc42 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    message_ += "\n\tEXPECTED calls that WERE fulfilled:\n";
 801de72:	687b      	ldr	r3, [r7, #4]
 801de74:	332c      	adds	r3, #44	; 0x2c
 801de76:	4918      	ldr	r1, [pc, #96]	; (801ded8 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc4>)
 801de78:	4618      	mov	r0, r3
 801de7a:	f7f0 fccb 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.fulfilledCallsToString("\t\t");
 801de7e:	687b      	ldr	r3, [r7, #4]
 801de80:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801de84:	683b      	ldr	r3, [r7, #0]
 801de86:	681b      	ldr	r3, [r3, #0]
 801de88:	3380      	adds	r3, #128	; 0x80
 801de8a:	681c      	ldr	r4, [r3, #0]
 801de8c:	f107 0320 	add.w	r3, r7, #32
 801de90:	4910      	ldr	r1, [pc, #64]	; (801ded4 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801de92:	4618      	mov	r0, r3
 801de94:	f7f0 f877 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801de98:	f107 0318 	add.w	r3, r7, #24
 801de9c:	f107 0220 	add.w	r2, r7, #32
 801dea0:	6839      	ldr	r1, [r7, #0]
 801dea2:	4618      	mov	r0, r3
 801dea4:	47a0      	blx	r4
 801dea6:	f107 0318 	add.w	r3, r7, #24
 801deaa:	4619      	mov	r1, r3
 801deac:	4628      	mov	r0, r5
 801deae:	f7f0 fc9f 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801deb2:	f107 0318 	add.w	r3, r7, #24
 801deb6:	4618      	mov	r0, r3
 801deb8:	f7f0 fc1d 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801debc:	f107 0320 	add.w	r3, r7, #32
 801dec0:	4618      	mov	r0, r3
 801dec2:	f7f0 fc18 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 801dec6:	bf00      	nop
 801dec8:	3728      	adds	r7, #40	; 0x28
 801deca:	46bd      	mov	sp, r7
 801decc:	bdb0      	pop	{r4, r5, r7, pc}
 801dece:	bf00      	nop
 801ded0:	08027bec 	.word	0x08027bec
 801ded4:	08027c18 	.word	0x08027c18
 801ded8:	08027c1c 	.word	0x08027c1c

0801dedc <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistoryRelatedTo(const SimpleString& name, const MockExpectedCallsList& expectations)
{
 801dedc:	b590      	push	{r4, r7, lr}
 801dede:	b08f      	sub	sp, #60	; 0x3c
 801dee0:	af00      	add	r7, sp, #0
 801dee2:	60f8      	str	r0, [r7, #12]
 801dee4:	60b9      	str	r1, [r7, #8]
 801dee6:	607a      	str	r2, [r7, #4]
    MockExpectedCallsList expectationsForFunction;
 801dee8:	f107 0310 	add.w	r3, r7, #16
 801deec:	4618      	mov	r0, r3
 801deee:	f7ff f877 	bl	801cfe0 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(name, expectations);
 801def2:	f107 0310 	add.w	r3, r7, #16
 801def6:	687a      	ldr	r2, [r7, #4]
 801def8:	68b9      	ldr	r1, [r7, #8]
 801defa:	4618      	mov	r0, r3
 801defc:	f7ff fa16 	bl	801d32c <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ += "\tEXPECTED calls that WERE NOT fulfilled related to function: ";
 801df00:	68fb      	ldr	r3, [r7, #12]
 801df02:	332c      	adds	r3, #44	; 0x2c
 801df04:	4937      	ldr	r1, [pc, #220]	; (801dfe4 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x108>)
 801df06:	4618      	mov	r0, r3
 801df08:	f7f0 fc84 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801df0c:	68fb      	ldr	r3, [r7, #12]
 801df0e:	332c      	adds	r3, #44	; 0x2c
 801df10:	68b9      	ldr	r1, [r7, #8]
 801df12:	4618      	mov	r0, r3
 801df14:	f7f0 fc6c 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801df18:	68fb      	ldr	r3, [r7, #12]
 801df1a:	332c      	adds	r3, #44	; 0x2c
 801df1c:	4932      	ldr	r1, [pc, #200]	; (801dfe8 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801df1e:	4618      	mov	r0, r3
 801df20:	f7f0 fc78 	bl	800e814 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.unfulfilledCallsToString("\t\t");
 801df24:	68fb      	ldr	r3, [r7, #12]
 801df26:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801df2a:	f107 0320 	add.w	r3, r7, #32
 801df2e:	492f      	ldr	r1, [pc, #188]	; (801dfec <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801df30:	4618      	mov	r0, r3
 801df32:	f7f0 f828 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801df36:	f107 0318 	add.w	r3, r7, #24
 801df3a:	f107 0220 	add.w	r2, r7, #32
 801df3e:	f107 0110 	add.w	r1, r7, #16
 801df42:	4618      	mov	r0, r3
 801df44:	f7ff fd4a 	bl	801d9dc <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>
 801df48:	f107 0318 	add.w	r3, r7, #24
 801df4c:	4619      	mov	r1, r3
 801df4e:	4620      	mov	r0, r4
 801df50:	f7f0 fc4e 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801df54:	f107 0318 	add.w	r3, r7, #24
 801df58:	4618      	mov	r0, r3
 801df5a:	f7f0 fbcc 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801df5e:	f107 0320 	add.w	r3, r7, #32
 801df62:	4618      	mov	r0, r3
 801df64:	f7f0 fbc7 	bl	800e6f6 <_ZN12SimpleStringD1Ev>

    message_ += "\n\tEXPECTED calls that WERE fulfilled related to function: ";
 801df68:	68fb      	ldr	r3, [r7, #12]
 801df6a:	332c      	adds	r3, #44	; 0x2c
 801df6c:	4920      	ldr	r1, [pc, #128]	; (801dff0 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x114>)
 801df6e:	4618      	mov	r0, r3
 801df70:	f7f0 fc50 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801df74:	68fb      	ldr	r3, [r7, #12]
 801df76:	332c      	adds	r3, #44	; 0x2c
 801df78:	68b9      	ldr	r1, [r7, #8]
 801df7a:	4618      	mov	r0, r3
 801df7c:	f7f0 fc38 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801df80:	68fb      	ldr	r3, [r7, #12]
 801df82:	332c      	adds	r3, #44	; 0x2c
 801df84:	4918      	ldr	r1, [pc, #96]	; (801dfe8 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801df86:	4618      	mov	r0, r3
 801df88:	f7f0 fc44 	bl	800e814 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.fulfilledCallsToString("\t\t");
 801df8c:	68fb      	ldr	r3, [r7, #12]
 801df8e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801df92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801df96:	4915      	ldr	r1, [pc, #84]	; (801dfec <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801df98:	4618      	mov	r0, r3
 801df9a:	f7ef fff4 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801df9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801dfa2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801dfa6:	f107 0110 	add.w	r1, r7, #16
 801dfaa:	4618      	mov	r0, r3
 801dfac:	f7ff fd74 	bl	801da98 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>
 801dfb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801dfb4:	4619      	mov	r1, r3
 801dfb6:	4620      	mov	r0, r4
 801dfb8:	f7f0 fc1a 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801dfbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801dfc0:	4618      	mov	r0, r3
 801dfc2:	f7f0 fb98 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801dfc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801dfca:	4618      	mov	r0, r3
 801dfcc:	f7f0 fb93 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801dfd0:	f107 0310 	add.w	r3, r7, #16
 801dfd4:	4618      	mov	r0, r3
 801dfd6:	f7ff f817 	bl	801d008 <_ZN21MockExpectedCallsListD1Ev>
}
 801dfda:	bf00      	nop
 801dfdc:	373c      	adds	r7, #60	; 0x3c
 801dfde:	46bd      	mov	sp, r7
 801dfe0:	bd90      	pop	{r4, r7, pc}
 801dfe2:	bf00      	nop
 801dfe4:	08027c44 	.word	0x08027c44
 801dfe8:	08027c84 	.word	0x08027c84
 801dfec:	08027c18 	.word	0x08027c18
 801dff0:	08027c88 	.word	0x08027c88

0801dff4 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockExpectedCallsDidntHappenFailure::MockExpectedCallsDidntHappenFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801dff4:	b590      	push	{r4, r7, lr}
 801dff6:	b087      	sub	sp, #28
 801dff8:	af00      	add	r7, sp, #0
 801dffa:	60f8      	str	r0, [r7, #12]
 801dffc:	60b9      	str	r1, [r7, #8]
 801dffe:	607a      	str	r2, [r7, #4]
 801e000:	68fb      	ldr	r3, [r7, #12]
 801e002:	68b9      	ldr	r1, [r7, #8]
 801e004:	4618      	mov	r0, r3
 801e006:	f7ff fee1 	bl	801ddcc <_ZN11MockFailureC1EP10UtestShell>
 801e00a:	4a10      	ldr	r2, [pc, #64]	; (801e04c <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x58>)
 801e00c:	68fb      	ldr	r3, [r7, #12]
 801e00e:	601a      	str	r2, [r3, #0]
{
    message_ = "Mock Failure: Expected call WAS NOT fulfilled.\n";
 801e010:	68fb      	ldr	r3, [r7, #12]
 801e012:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e016:	f107 0310 	add.w	r3, r7, #16
 801e01a:	490d      	ldr	r1, [pc, #52]	; (801e050 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x5c>)
 801e01c:	4618      	mov	r0, r3
 801e01e:	f7ef ffb2 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801e022:	f107 0310 	add.w	r3, r7, #16
 801e026:	4619      	mov	r1, r3
 801e028:	4620      	mov	r0, r4
 801e02a:	f7f0 f818 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 801e02e:	f107 0310 	add.w	r3, r7, #16
 801e032:	4618      	mov	r0, r3
 801e034:	f7f0 fb5f 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistory(expectations);
 801e038:	68fb      	ldr	r3, [r7, #12]
 801e03a:	6879      	ldr	r1, [r7, #4]
 801e03c:	4618      	mov	r0, r3
 801e03e:	f7ff fee9 	bl	801de14 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801e042:	68fb      	ldr	r3, [r7, #12]
 801e044:	4618      	mov	r0, r3
 801e046:	371c      	adds	r7, #28
 801e048:	46bd      	mov	sp, r7
 801e04a:	bd90      	pop	{r4, r7, pc}
 801e04c:	08029ee0 	.word	0x08029ee0
 801e050:	08027cc4 	.word	0x08027cc4

0801e054 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockUnexpectedCallHappenedFailure::MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations) : MockFailure(test)
 801e054:	b590      	push	{r4, r7, lr}
 801e056:	b08d      	sub	sp, #52	; 0x34
 801e058:	af00      	add	r7, sp, #0
 801e05a:	60f8      	str	r0, [r7, #12]
 801e05c:	60b9      	str	r1, [r7, #8]
 801e05e:	607a      	str	r2, [r7, #4]
 801e060:	603b      	str	r3, [r7, #0]
 801e062:	68fb      	ldr	r3, [r7, #12]
 801e064:	68b9      	ldr	r1, [r7, #8]
 801e066:	4618      	mov	r0, r3
 801e068:	f7ff feb0 	bl	801ddcc <_ZN11MockFailureC1EP10UtestShell>
 801e06c:	4a2f      	ldr	r2, [pc, #188]	; (801e12c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xd8>)
 801e06e:	68fb      	ldr	r3, [r7, #12]
 801e070:	601a      	str	r2, [r3, #0]
{
    unsigned int amountOfActualCalls = expectations.amountOfActualCallsFulfilledFor(name);
 801e072:	683b      	ldr	r3, [r7, #0]
 801e074:	681b      	ldr	r3, [r3, #0]
 801e076:	3310      	adds	r3, #16
 801e078:	681b      	ldr	r3, [r3, #0]
 801e07a:	6879      	ldr	r1, [r7, #4]
 801e07c:	6838      	ldr	r0, [r7, #0]
 801e07e:	4798      	blx	r3
 801e080:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (amountOfActualCalls > 0) {
 801e082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e084:	2b00      	cmp	r3, #0
 801e086:	d027      	beq.n	801e0d8 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x84>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801e088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e08a:	1c5a      	adds	r2, r3, #1
 801e08c:	f107 0314 	add.w	r3, r7, #20
 801e090:	4611      	mov	r1, r2
 801e092:	4618      	mov	r0, r3
 801e094:	f7f1 fa00 	bl	800f498 <_Z23StringFromOrdinalNumberj>
        message_ = StringFromFormat("Mock Failure: Unexpected additional (%s) call to function: ", ordinalNumber.asCharString());
 801e098:	68fb      	ldr	r3, [r7, #12]
 801e09a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e09e:	f107 0314 	add.w	r3, r7, #20
 801e0a2:	4618      	mov	r0, r3
 801e0a4:	f7f0 fafa 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 801e0a8:	4602      	mov	r2, r0
 801e0aa:	f107 031c 	add.w	r3, r7, #28
 801e0ae:	4920      	ldr	r1, [pc, #128]	; (801e130 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801e0b0:	4618      	mov	r0, r3
 801e0b2:	f7f1 f827 	bl	800f104 <_Z16StringFromFormatPKcz>
 801e0b6:	f107 031c 	add.w	r3, r7, #28
 801e0ba:	4619      	mov	r1, r3
 801e0bc:	4620      	mov	r0, r4
 801e0be:	f7ef ffce 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 801e0c2:	f107 031c 	add.w	r3, r7, #28
 801e0c6:	4618      	mov	r0, r3
 801e0c8:	f7f0 fb15 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801e0cc:	f107 0314 	add.w	r3, r7, #20
 801e0d0:	4618      	mov	r0, r3
 801e0d2:	f7f0 fb10 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801e0d6:	e013      	b.n	801e100 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xac>
    } else {
        message_ = "Mock Failure: Unexpected call to function: ";
 801e0d8:	68fb      	ldr	r3, [r7, #12]
 801e0da:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e0de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e0e2:	4914      	ldr	r1, [pc, #80]	; (801e134 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801e0e4:	4618      	mov	r0, r3
 801e0e6:	f7ef ff4e 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801e0ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e0ee:	4619      	mov	r1, r3
 801e0f0:	4620      	mov	r0, r4
 801e0f2:	f7ef ffb4 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 801e0f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e0fa:	4618      	mov	r0, r3
 801e0fc:	f7f0 fafb 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    }
    message_ += name;
 801e100:	68fb      	ldr	r3, [r7, #12]
 801e102:	332c      	adds	r3, #44	; 0x2c
 801e104:	6879      	ldr	r1, [r7, #4]
 801e106:	4618      	mov	r0, r3
 801e108:	f7f0 fb72 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801e10c:	68fb      	ldr	r3, [r7, #12]
 801e10e:	332c      	adds	r3, #44	; 0x2c
 801e110:	4909      	ldr	r1, [pc, #36]	; (801e138 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801e112:	4618      	mov	r0, r3
 801e114:	f7f0 fb7e 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectations);
 801e118:	68fb      	ldr	r3, [r7, #12]
 801e11a:	6839      	ldr	r1, [r7, #0]
 801e11c:	4618      	mov	r0, r3
 801e11e:	f7ff fe79 	bl	801de14 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801e122:	68fb      	ldr	r3, [r7, #12]
 801e124:	4618      	mov	r0, r3
 801e126:	3734      	adds	r7, #52	; 0x34
 801e128:	46bd      	mov	sp, r7
 801e12a:	bd90      	pop	{r4, r7, pc}
 801e12c:	0802a880 	.word	0x0802a880
 801e130:	08027cf4 	.word	0x08027cf4
 801e134:	08027d30 	.word	0x08027d30
 801e138:	08027c84 	.word	0x08027c84

0801e13c <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockCallOrderFailure::MockCallOrderFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801e13c:	b590      	push	{r4, r7, lr}
 801e13e:	b089      	sub	sp, #36	; 0x24
 801e140:	af00      	add	r7, sp, #0
 801e142:	60f8      	str	r0, [r7, #12]
 801e144:	60b9      	str	r1, [r7, #8]
 801e146:	607a      	str	r2, [r7, #4]
 801e148:	68fb      	ldr	r3, [r7, #12]
 801e14a:	68b9      	ldr	r1, [r7, #8]
 801e14c:	4618      	mov	r0, r3
 801e14e:	f7ff fe3d 	bl	801ddcc <_ZN11MockFailureC1EP10UtestShell>
 801e152:	4a1f      	ldr	r2, [pc, #124]	; (801e1d0 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x94>)
 801e154:	68fb      	ldr	r3, [r7, #12]
 801e156:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForOutOfOrder;
 801e158:	f107 0310 	add.w	r3, r7, #16
 801e15c:	4618      	mov	r0, r3
 801e15e:	f7fe ff3f 	bl	801cfe0 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForOutOfOrder.addExpectations(expectations);
 801e162:	f107 0310 	add.w	r3, r7, #16
 801e166:	6879      	ldr	r1, [r7, #4]
 801e168:	4618      	mov	r0, r3
 801e16a:	f7ff f909 	bl	801d380 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    expectationsForOutOfOrder.onlyKeepOutOfOrderExpectations();
 801e16e:	f107 0310 	add.w	r3, r7, #16
 801e172:	4618      	mov	r0, r3
 801e174:	f7ff f94c 	bl	801d410 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>

    message_ = "Mock Failure: Out of order calls";
 801e178:	68fb      	ldr	r3, [r7, #12]
 801e17a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e17e:	f107 0318 	add.w	r3, r7, #24
 801e182:	4914      	ldr	r1, [pc, #80]	; (801e1d4 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x98>)
 801e184:	4618      	mov	r0, r3
 801e186:	f7ef fefe 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801e18a:	f107 0318 	add.w	r3, r7, #24
 801e18e:	4619      	mov	r1, r3
 801e190:	4620      	mov	r0, r4
 801e192:	f7ef ff64 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 801e196:	f107 0318 	add.w	r3, r7, #24
 801e19a:	4618      	mov	r0, r3
 801e19c:	f7f0 faab 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    message_ += "\n";
 801e1a0:	68fb      	ldr	r3, [r7, #12]
 801e1a2:	332c      	adds	r3, #44	; 0x2c
 801e1a4:	490c      	ldr	r1, [pc, #48]	; (801e1d8 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x9c>)
 801e1a6:	4618      	mov	r0, r3
 801e1a8:	f7f0 fb34 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectationsForOutOfOrder);
 801e1ac:	68fb      	ldr	r3, [r7, #12]
 801e1ae:	f107 0210 	add.w	r2, r7, #16
 801e1b2:	4611      	mov	r1, r2
 801e1b4:	4618      	mov	r0, r3
 801e1b6:	f7ff fe2d 	bl	801de14 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
    MockExpectedCallsList expectationsForOutOfOrder;
 801e1ba:	f107 0310 	add.w	r3, r7, #16
 801e1be:	4618      	mov	r0, r3
 801e1c0:	f7fe ff22 	bl	801d008 <_ZN21MockExpectedCallsListD1Ev>
}
 801e1c4:	68fb      	ldr	r3, [r7, #12]
 801e1c6:	4618      	mov	r0, r3
 801e1c8:	3724      	adds	r7, #36	; 0x24
 801e1ca:	46bd      	mov	sp, r7
 801e1cc:	bd90      	pop	{r4, r7, pc}
 801e1ce:	bf00      	nop
 801e1d0:	08029eb4 	.word	0x08029eb4
 801e1d4:	08027d5c 	.word	0x08027d5c
 801e1d8:	08027c84 	.word	0x08027c84

0801e1dc <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedInputParameterFailure::MockUnexpectedInputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801e1dc:	b590      	push	{r4, r7, lr}
 801e1de:	b099      	sub	sp, #100	; 0x64
 801e1e0:	af00      	add	r7, sp, #0
 801e1e2:	60f8      	str	r0, [r7, #12]
 801e1e4:	60b9      	str	r1, [r7, #8]
 801e1e6:	607a      	str	r2, [r7, #4]
 801e1e8:	603b      	str	r3, [r7, #0]
 801e1ea:	68fb      	ldr	r3, [r7, #12]
 801e1ec:	68b9      	ldr	r1, [r7, #8]
 801e1ee:	4618      	mov	r0, r3
 801e1f0:	f7ff fdec 	bl	801ddcc <_ZN11MockFailureC1EP10UtestShell>
 801e1f4:	4a9e      	ldr	r2, [pc, #632]	; (801e470 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x294>)
 801e1f6:	68fb      	ldr	r3, [r7, #12]
 801e1f8:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801e1fa:	f107 0310 	add.w	r3, r7, #16
 801e1fe:	4618      	mov	r0, r3
 801e200:	f7fe feee 	bl	801cfe0 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801e204:	f107 0310 	add.w	r3, r7, #16
 801e208:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801e20a:	6879      	ldr	r1, [r7, #4]
 801e20c:	4618      	mov	r0, r3
 801e20e:	f7ff f88d 	bl	801d32c <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithInputParameterName(parameter.getName());
 801e212:	683b      	ldr	r3, [r7, #0]
 801e214:	681b      	ldr	r3, [r3, #0]
 801e216:	335c      	adds	r3, #92	; 0x5c
 801e218:	681b      	ldr	r3, [r3, #0]
 801e21a:	f107 0218 	add.w	r2, r7, #24
 801e21e:	6839      	ldr	r1, [r7, #0]
 801e220:	4610      	mov	r0, r2
 801e222:	4798      	blx	r3
 801e224:	f107 0218 	add.w	r2, r7, #24
 801e228:	f107 0310 	add.w	r3, r7, #16
 801e22c:	4611      	mov	r1, r2
 801e22e:	4618      	mov	r0, r3
 801e230:	f7ff f948 	bl	801d4c4 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>
 801e234:	f107 0318 	add.w	r3, r7, #24
 801e238:	4618      	mov	r0, r3
 801e23a:	f7f0 fa5c 	bl	800e6f6 <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801e23e:	f107 0310 	add.w	r3, r7, #16
 801e242:	4618      	mov	r0, r3
 801e244:	f7fe ff4d 	bl	801d0e2 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801e248:	4603      	mov	r3, r0
 801e24a:	2b00      	cmp	r3, #0
 801e24c:	d037      	beq.n	801e2be <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected parameter name to function \"";
 801e24e:	68fb      	ldr	r3, [r7, #12]
 801e250:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e254:	f107 0320 	add.w	r3, r7, #32
 801e258:	4986      	ldr	r1, [pc, #536]	; (801e474 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x298>)
 801e25a:	4618      	mov	r0, r3
 801e25c:	f7ef fe93 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801e260:	f107 0320 	add.w	r3, r7, #32
 801e264:	4619      	mov	r1, r3
 801e266:	4620      	mov	r0, r4
 801e268:	f7ef fef9 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 801e26c:	f107 0320 	add.w	r3, r7, #32
 801e270:	4618      	mov	r0, r3
 801e272:	f7f0 fa40 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801e276:	68fb      	ldr	r3, [r7, #12]
 801e278:	332c      	adds	r3, #44	; 0x2c
 801e27a:	6879      	ldr	r1, [r7, #4]
 801e27c:	4618      	mov	r0, r3
 801e27e:	f7f0 fab7 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801e282:	68fb      	ldr	r3, [r7, #12]
 801e284:	332c      	adds	r3, #44	; 0x2c
 801e286:	497c      	ldr	r1, [pc, #496]	; (801e478 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x29c>)
 801e288:	4618      	mov	r0, r3
 801e28a:	f7f0 fac3 	bl	800e814 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801e28e:	68fb      	ldr	r3, [r7, #12]
 801e290:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e294:	683b      	ldr	r3, [r7, #0]
 801e296:	681b      	ldr	r3, [r3, #0]
 801e298:	335c      	adds	r3, #92	; 0x5c
 801e29a:	681b      	ldr	r3, [r3, #0]
 801e29c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801e2a0:	6839      	ldr	r1, [r7, #0]
 801e2a2:	4610      	mov	r0, r2
 801e2a4:	4798      	blx	r3
 801e2a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e2aa:	4619      	mov	r1, r3
 801e2ac:	4620      	mov	r0, r4
 801e2ae:	f7f0 fa9f 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801e2b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e2b6:	4618      	mov	r0, r3
 801e2b8:	f7f0 fa1d 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801e2bc:	e056      	b.n	801e36c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x190>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter value to parameter \"";
 801e2be:	68fb      	ldr	r3, [r7, #12]
 801e2c0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e2c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e2c8:	496c      	ldr	r1, [pc, #432]	; (801e47c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a0>)
 801e2ca:	4618      	mov	r0, r3
 801e2cc:	f7ef fe5b 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801e2d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e2d4:	4619      	mov	r1, r3
 801e2d6:	4620      	mov	r0, r4
 801e2d8:	f7ef fec1 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 801e2dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e2e0:	4618      	mov	r0, r3
 801e2e2:	f7f0 fa08 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
        message_ += parameter.getName();
 801e2e6:	68fb      	ldr	r3, [r7, #12]
 801e2e8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e2ec:	683b      	ldr	r3, [r7, #0]
 801e2ee:	681b      	ldr	r3, [r3, #0]
 801e2f0:	335c      	adds	r3, #92	; 0x5c
 801e2f2:	681b      	ldr	r3, [r3, #0]
 801e2f4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801e2f8:	6839      	ldr	r1, [r7, #0]
 801e2fa:	4610      	mov	r0, r2
 801e2fc:	4798      	blx	r3
 801e2fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e302:	4619      	mov	r1, r3
 801e304:	4620      	mov	r0, r4
 801e306:	f7f0 fa73 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801e30a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e30e:	4618      	mov	r0, r3
 801e310:	f7f0 f9f1 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801e314:	68fb      	ldr	r3, [r7, #12]
 801e316:	332c      	adds	r3, #44	; 0x2c
 801e318:	4959      	ldr	r1, [pc, #356]	; (801e480 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a4>)
 801e31a:	4618      	mov	r0, r3
 801e31c:	f7f0 fa7a 	bl	800e814 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801e320:	68fb      	ldr	r3, [r7, #12]
 801e322:	332c      	adds	r3, #44	; 0x2c
 801e324:	6879      	ldr	r1, [r7, #4]
 801e326:	4618      	mov	r0, r3
 801e328:	f7f0 fa62 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
        message_ += "\": <";
 801e32c:	68fb      	ldr	r3, [r7, #12]
 801e32e:	332c      	adds	r3, #44	; 0x2c
 801e330:	4954      	ldr	r1, [pc, #336]	; (801e484 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a8>)
 801e332:	4618      	mov	r0, r3
 801e334:	f7f0 fa6e 	bl	800e814 <_ZN12SimpleStringpLEPKc>
        message_ += StringFrom(parameter);
 801e338:	68fb      	ldr	r3, [r7, #12]
 801e33a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e33e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e342:	6839      	ldr	r1, [r7, #0]
 801e344:	4618      	mov	r0, r3
 801e346:	f7fd faa3 	bl	801b890 <_Z10StringFromRK14MockNamedValue>
 801e34a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e34e:	4619      	mov	r1, r3
 801e350:	4620      	mov	r0, r4
 801e352:	f7f0 fa4d 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801e356:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e35a:	4618      	mov	r0, r3
 801e35c:	f7f0 f9cb 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
        message_ += ">";
 801e360:	68fb      	ldr	r3, [r7, #12]
 801e362:	332c      	adds	r3, #44	; 0x2c
 801e364:	4948      	ldr	r1, [pc, #288]	; (801e488 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801e366:	4618      	mov	r0, r3
 801e368:	f7f0 fa54 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801e36c:	68fb      	ldr	r3, [r7, #12]
 801e36e:	332c      	adds	r3, #44	; 0x2c
 801e370:	4946      	ldr	r1, [pc, #280]	; (801e48c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801e372:	4618      	mov	r0, r3
 801e374:	f7f0 fa4e 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801e378:	68fb      	ldr	r3, [r7, #12]
 801e37a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801e37c:	6879      	ldr	r1, [r7, #4]
 801e37e:	4618      	mov	r0, r3
 801e380:	f7ff fdac 	bl	801dedc <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected parameter passed to function: ";
 801e384:	68fb      	ldr	r3, [r7, #12]
 801e386:	332c      	adds	r3, #44	; 0x2c
 801e388:	4941      	ldr	r1, [pc, #260]	; (801e490 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b4>)
 801e38a:	4618      	mov	r0, r3
 801e38c:	f7f0 fa42 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801e390:	68fb      	ldr	r3, [r7, #12]
 801e392:	332c      	adds	r3, #44	; 0x2c
 801e394:	6879      	ldr	r1, [r7, #4]
 801e396:	4618      	mov	r0, r3
 801e398:	f7f0 fa2a 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801e39c:	68fb      	ldr	r3, [r7, #12]
 801e39e:	332c      	adds	r3, #44	; 0x2c
 801e3a0:	493a      	ldr	r1, [pc, #232]	; (801e48c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801e3a2:	4618      	mov	r0, r3
 801e3a4:	f7f0 fa36 	bl	800e814 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801e3a8:	68fb      	ldr	r3, [r7, #12]
 801e3aa:	332c      	adds	r3, #44	; 0x2c
 801e3ac:	4939      	ldr	r1, [pc, #228]	; (801e494 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b8>)
 801e3ae:	4618      	mov	r0, r3
 801e3b0:	f7f0 fa30 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801e3b4:	68fb      	ldr	r3, [r7, #12]
 801e3b6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e3ba:	683b      	ldr	r3, [r7, #0]
 801e3bc:	681b      	ldr	r3, [r3, #0]
 801e3be:	3360      	adds	r3, #96	; 0x60
 801e3c0:	681b      	ldr	r3, [r3, #0]
 801e3c2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801e3c6:	6839      	ldr	r1, [r7, #0]
 801e3c8:	4610      	mov	r0, r2
 801e3ca:	4798      	blx	r3
 801e3cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801e3d0:	4619      	mov	r1, r3
 801e3d2:	4620      	mov	r0, r4
 801e3d4:	f7f0 fa0c 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801e3d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801e3dc:	4618      	mov	r0, r3
 801e3de:	f7f0 f98a 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801e3e2:	68fb      	ldr	r3, [r7, #12]
 801e3e4:	332c      	adds	r3, #44	; 0x2c
 801e3e6:	492c      	ldr	r1, [pc, #176]	; (801e498 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2bc>)
 801e3e8:	4618      	mov	r0, r3
 801e3ea:	f7f0 fa13 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801e3ee:	68fb      	ldr	r3, [r7, #12]
 801e3f0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e3f4:	683b      	ldr	r3, [r7, #0]
 801e3f6:	681b      	ldr	r3, [r3, #0]
 801e3f8:	335c      	adds	r3, #92	; 0x5c
 801e3fa:	681b      	ldr	r3, [r3, #0]
 801e3fc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801e400:	6839      	ldr	r1, [r7, #0]
 801e402:	4610      	mov	r0, r2
 801e404:	4798      	blx	r3
 801e406:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801e40a:	4619      	mov	r1, r3
 801e40c:	4620      	mov	r0, r4
 801e40e:	f7f0 f9ef 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801e412:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801e416:	4618      	mov	r0, r3
 801e418:	f7f0 f96d 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    message_ += ": <";
 801e41c:	68fb      	ldr	r3, [r7, #12]
 801e41e:	332c      	adds	r3, #44	; 0x2c
 801e420:	491e      	ldr	r1, [pc, #120]	; (801e49c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2c0>)
 801e422:	4618      	mov	r0, r3
 801e424:	f7f0 f9f6 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(parameter);
 801e428:	68fb      	ldr	r3, [r7, #12]
 801e42a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e42e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e432:	6839      	ldr	r1, [r7, #0]
 801e434:	4618      	mov	r0, r3
 801e436:	f7fd fa2b 	bl	801b890 <_Z10StringFromRK14MockNamedValue>
 801e43a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e43e:	4619      	mov	r1, r3
 801e440:	4620      	mov	r0, r4
 801e442:	f7f0 f9d5 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801e446:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801e44a:	4618      	mov	r0, r3
 801e44c:	f7f0 f953 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    message_ += ">";
 801e450:	68fb      	ldr	r3, [r7, #12]
 801e452:	332c      	adds	r3, #44	; 0x2c
 801e454:	490c      	ldr	r1, [pc, #48]	; (801e488 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801e456:	4618      	mov	r0, r3
 801e458:	f7f0 f9dc 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801e45c:	f107 0310 	add.w	r3, r7, #16
 801e460:	4618      	mov	r0, r3
 801e462:	f7fe fdd1 	bl	801d008 <_ZN21MockExpectedCallsListD1Ev>
}
 801e466:	68fb      	ldr	r3, [r7, #12]
 801e468:	4618      	mov	r0, r3
 801e46a:	3764      	adds	r7, #100	; 0x64
 801e46c:	46bd      	mov	sp, r7
 801e46e:	bd90      	pop	{r4, r7, pc}
 801e470:	0802a854 	.word	0x0802a854
 801e474:	08027d80 	.word	0x08027d80
 801e478:	08027db8 	.word	0x08027db8
 801e47c:	08027dbc 	.word	0x08027dbc
 801e480:	08027df4 	.word	0x08027df4
 801e484:	08027e04 	.word	0x08027e04
 801e488:	08027e0c 	.word	0x08027e0c
 801e48c:	08027c84 	.word	0x08027c84
 801e490:	08027e10 	.word	0x08027e10
 801e494:	08027c18 	.word	0x08027c18
 801e498:	08027e44 	.word	0x08027e44
 801e49c:	08027e48 	.word	0x08027e48

0801e4a0 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedOutputParameterFailure::MockUnexpectedOutputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801e4a0:	b590      	push	{r4, r7, lr}
 801e4a2:	b097      	sub	sp, #92	; 0x5c
 801e4a4:	af00      	add	r7, sp, #0
 801e4a6:	60f8      	str	r0, [r7, #12]
 801e4a8:	60b9      	str	r1, [r7, #8]
 801e4aa:	607a      	str	r2, [r7, #4]
 801e4ac:	603b      	str	r3, [r7, #0]
 801e4ae:	68fb      	ldr	r3, [r7, #12]
 801e4b0:	68b9      	ldr	r1, [r7, #8]
 801e4b2:	4618      	mov	r0, r3
 801e4b4:	f7ff fc8a 	bl	801ddcc <_ZN11MockFailureC1EP10UtestShell>
 801e4b8:	4a90      	ldr	r2, [pc, #576]	; (801e6fc <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x25c>)
 801e4ba:	68fb      	ldr	r3, [r7, #12]
 801e4bc:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801e4be:	f107 0310 	add.w	r3, r7, #16
 801e4c2:	4618      	mov	r0, r3
 801e4c4:	f7fe fd8c 	bl	801cfe0 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801e4c8:	f107 0310 	add.w	r3, r7, #16
 801e4cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801e4ce:	6879      	ldr	r1, [r7, #4]
 801e4d0:	4618      	mov	r0, r3
 801e4d2:	f7fe ff2b 	bl	801d32c <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithOutputParameterName(parameter.getName());
 801e4d6:	683b      	ldr	r3, [r7, #0]
 801e4d8:	681b      	ldr	r3, [r3, #0]
 801e4da:	335c      	adds	r3, #92	; 0x5c
 801e4dc:	681b      	ldr	r3, [r3, #0]
 801e4de:	f107 0218 	add.w	r2, r7, #24
 801e4e2:	6839      	ldr	r1, [r7, #0]
 801e4e4:	4610      	mov	r0, r2
 801e4e6:	4798      	blx	r3
 801e4e8:	f107 0218 	add.w	r2, r7, #24
 801e4ec:	f107 0310 	add.w	r3, r7, #16
 801e4f0:	4611      	mov	r1, r2
 801e4f2:	4618      	mov	r0, r3
 801e4f4:	f7ff f812 	bl	801d51c <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>
 801e4f8:	f107 0318 	add.w	r3, r7, #24
 801e4fc:	4618      	mov	r0, r3
 801e4fe:	f7f0 f8fa 	bl	800e6f6 <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801e502:	f107 0310 	add.w	r3, r7, #16
 801e506:	4618      	mov	r0, r3
 801e508:	f7fe fdeb 	bl	801d0e2 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801e50c:	4603      	mov	r3, r0
 801e50e:	2b00      	cmp	r3, #0
 801e510:	d037      	beq.n	801e582 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected output parameter name to function \"";
 801e512:	68fb      	ldr	r3, [r7, #12]
 801e514:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e518:	f107 0320 	add.w	r3, r7, #32
 801e51c:	4978      	ldr	r1, [pc, #480]	; (801e700 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x260>)
 801e51e:	4618      	mov	r0, r3
 801e520:	f7ef fd31 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801e524:	f107 0320 	add.w	r3, r7, #32
 801e528:	4619      	mov	r1, r3
 801e52a:	4620      	mov	r0, r4
 801e52c:	f7ef fd97 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 801e530:	f107 0320 	add.w	r3, r7, #32
 801e534:	4618      	mov	r0, r3
 801e536:	f7f0 f8de 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801e53a:	68fb      	ldr	r3, [r7, #12]
 801e53c:	332c      	adds	r3, #44	; 0x2c
 801e53e:	6879      	ldr	r1, [r7, #4]
 801e540:	4618      	mov	r0, r3
 801e542:	f7f0 f955 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801e546:	68fb      	ldr	r3, [r7, #12]
 801e548:	332c      	adds	r3, #44	; 0x2c
 801e54a:	496e      	ldr	r1, [pc, #440]	; (801e704 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x264>)
 801e54c:	4618      	mov	r0, r3
 801e54e:	f7f0 f961 	bl	800e814 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801e552:	68fb      	ldr	r3, [r7, #12]
 801e554:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e558:	683b      	ldr	r3, [r7, #0]
 801e55a:	681b      	ldr	r3, [r3, #0]
 801e55c:	335c      	adds	r3, #92	; 0x5c
 801e55e:	681b      	ldr	r3, [r3, #0]
 801e560:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801e564:	6839      	ldr	r1, [r7, #0]
 801e566:	4610      	mov	r0, r2
 801e568:	4798      	blx	r3
 801e56a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e56e:	4619      	mov	r1, r3
 801e570:	4620      	mov	r0, r4
 801e572:	f7f0 f93d 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801e576:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e57a:	4618      	mov	r0, r3
 801e57c:	f7f0 f8bb 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801e580:	e059      	b.n	801e636 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x196>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter type \"";
 801e582:	68fb      	ldr	r3, [r7, #12]
 801e584:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e588:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e58c:	495e      	ldr	r1, [pc, #376]	; (801e708 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x268>)
 801e58e:	4618      	mov	r0, r3
 801e590:	f7ef fcf9 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801e594:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e598:	4619      	mov	r1, r3
 801e59a:	4620      	mov	r0, r4
 801e59c:	f7ef fd5f 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 801e5a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e5a4:	4618      	mov	r0, r3
 801e5a6:	f7f0 f8a6 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
        message_ += parameter.getType();
 801e5aa:	68fb      	ldr	r3, [r7, #12]
 801e5ac:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e5b0:	683b      	ldr	r3, [r7, #0]
 801e5b2:	681b      	ldr	r3, [r3, #0]
 801e5b4:	3360      	adds	r3, #96	; 0x60
 801e5b6:	681b      	ldr	r3, [r3, #0]
 801e5b8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801e5bc:	6839      	ldr	r1, [r7, #0]
 801e5be:	4610      	mov	r0, r2
 801e5c0:	4798      	blx	r3
 801e5c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e5c6:	4619      	mov	r1, r3
 801e5c8:	4620      	mov	r0, r4
 801e5ca:	f7f0 f911 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801e5ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801e5d2:	4618      	mov	r0, r3
 801e5d4:	f7f0 f88f 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
        message_ += "\" to output parameter \"";
 801e5d8:	68fb      	ldr	r3, [r7, #12]
 801e5da:	332c      	adds	r3, #44	; 0x2c
 801e5dc:	494b      	ldr	r1, [pc, #300]	; (801e70c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x26c>)
 801e5de:	4618      	mov	r0, r3
 801e5e0:	f7f0 f918 	bl	800e814 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801e5e4:	68fb      	ldr	r3, [r7, #12]
 801e5e6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e5ea:	683b      	ldr	r3, [r7, #0]
 801e5ec:	681b      	ldr	r3, [r3, #0]
 801e5ee:	335c      	adds	r3, #92	; 0x5c
 801e5f0:	681b      	ldr	r3, [r3, #0]
 801e5f2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801e5f6:	6839      	ldr	r1, [r7, #0]
 801e5f8:	4610      	mov	r0, r2
 801e5fa:	4798      	blx	r3
 801e5fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e600:	4619      	mov	r1, r3
 801e602:	4620      	mov	r0, r4
 801e604:	f7f0 f8f4 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801e608:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e60c:	4618      	mov	r0, r3
 801e60e:	f7f0 f872 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801e612:	68fb      	ldr	r3, [r7, #12]
 801e614:	332c      	adds	r3, #44	; 0x2c
 801e616:	493e      	ldr	r1, [pc, #248]	; (801e710 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x270>)
 801e618:	4618      	mov	r0, r3
 801e61a:	f7f0 f8fb 	bl	800e814 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801e61e:	68fb      	ldr	r3, [r7, #12]
 801e620:	332c      	adds	r3, #44	; 0x2c
 801e622:	6879      	ldr	r1, [r7, #4]
 801e624:	4618      	mov	r0, r3
 801e626:	f7f0 f8e3 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
        message_ += "\"";
 801e62a:	68fb      	ldr	r3, [r7, #12]
 801e62c:	332c      	adds	r3, #44	; 0x2c
 801e62e:	4939      	ldr	r1, [pc, #228]	; (801e714 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x274>)
 801e630:	4618      	mov	r0, r3
 801e632:	f7f0 f8ef 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801e636:	68fb      	ldr	r3, [r7, #12]
 801e638:	332c      	adds	r3, #44	; 0x2c
 801e63a:	4937      	ldr	r1, [pc, #220]	; (801e718 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801e63c:	4618      	mov	r0, r3
 801e63e:	f7f0 f8e9 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801e642:	68fb      	ldr	r3, [r7, #12]
 801e644:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801e646:	6879      	ldr	r1, [r7, #4]
 801e648:	4618      	mov	r0, r3
 801e64a:	f7ff fc47 	bl	801dedc <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected output parameter passed to function: ";
 801e64e:	68fb      	ldr	r3, [r7, #12]
 801e650:	332c      	adds	r3, #44	; 0x2c
 801e652:	4932      	ldr	r1, [pc, #200]	; (801e71c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x27c>)
 801e654:	4618      	mov	r0, r3
 801e656:	f7f0 f8dd 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801e65a:	68fb      	ldr	r3, [r7, #12]
 801e65c:	332c      	adds	r3, #44	; 0x2c
 801e65e:	6879      	ldr	r1, [r7, #4]
 801e660:	4618      	mov	r0, r3
 801e662:	f7f0 f8c5 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801e666:	68fb      	ldr	r3, [r7, #12]
 801e668:	332c      	adds	r3, #44	; 0x2c
 801e66a:	492b      	ldr	r1, [pc, #172]	; (801e718 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801e66c:	4618      	mov	r0, r3
 801e66e:	f7f0 f8d1 	bl	800e814 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801e672:	68fb      	ldr	r3, [r7, #12]
 801e674:	332c      	adds	r3, #44	; 0x2c
 801e676:	492a      	ldr	r1, [pc, #168]	; (801e720 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x280>)
 801e678:	4618      	mov	r0, r3
 801e67a:	f7f0 f8cb 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801e67e:	68fb      	ldr	r3, [r7, #12]
 801e680:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e684:	683b      	ldr	r3, [r7, #0]
 801e686:	681b      	ldr	r3, [r3, #0]
 801e688:	3360      	adds	r3, #96	; 0x60
 801e68a:	681b      	ldr	r3, [r3, #0]
 801e68c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801e690:	6839      	ldr	r1, [r7, #0]
 801e692:	4610      	mov	r0, r2
 801e694:	4798      	blx	r3
 801e696:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801e69a:	4619      	mov	r1, r3
 801e69c:	4620      	mov	r0, r4
 801e69e:	f7f0 f8a7 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801e6a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801e6a6:	4618      	mov	r0, r3
 801e6a8:	f7f0 f825 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801e6ac:	68fb      	ldr	r3, [r7, #12]
 801e6ae:	332c      	adds	r3, #44	; 0x2c
 801e6b0:	491c      	ldr	r1, [pc, #112]	; (801e724 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x284>)
 801e6b2:	4618      	mov	r0, r3
 801e6b4:	f7f0 f8ae 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801e6b8:	68fb      	ldr	r3, [r7, #12]
 801e6ba:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e6be:	683b      	ldr	r3, [r7, #0]
 801e6c0:	681b      	ldr	r3, [r3, #0]
 801e6c2:	335c      	adds	r3, #92	; 0x5c
 801e6c4:	681b      	ldr	r3, [r3, #0]
 801e6c6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801e6ca:	6839      	ldr	r1, [r7, #0]
 801e6cc:	4610      	mov	r0, r2
 801e6ce:	4798      	blx	r3
 801e6d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801e6d4:	4619      	mov	r1, r3
 801e6d6:	4620      	mov	r0, r4
 801e6d8:	f7f0 f88a 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801e6dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801e6e0:	4618      	mov	r0, r3
 801e6e2:	f7f0 f808 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801e6e6:	f107 0310 	add.w	r3, r7, #16
 801e6ea:	4618      	mov	r0, r3
 801e6ec:	f7fe fc8c 	bl	801d008 <_ZN21MockExpectedCallsListD1Ev>
}
 801e6f0:	68fb      	ldr	r3, [r7, #12]
 801e6f2:	4618      	mov	r0, r3
 801e6f4:	375c      	adds	r7, #92	; 0x5c
 801e6f6:	46bd      	mov	sp, r7
 801e6f8:	bd90      	pop	{r4, r7, pc}
 801e6fa:	bf00      	nop
 801e6fc:	0802a828 	.word	0x0802a828
 801e700:	08027e4c 	.word	0x08027e4c
 801e704:	08027db8 	.word	0x08027db8
 801e708:	08027e8c 	.word	0x08027e8c
 801e70c:	08027eb8 	.word	0x08027eb8
 801e710:	08027df4 	.word	0x08027df4
 801e714:	08027ed0 	.word	0x08027ed0
 801e718:	08027c84 	.word	0x08027c84
 801e71c:	08027ed4 	.word	0x08027ed4
 801e720:	08027c18 	.word	0x08027c18
 801e724:	08027e44 	.word	0x08027e44

0801e728 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedParameterDidntHappenFailure::MockExpectedParameterDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801e728:	b590      	push	{r4, r7, lr}
 801e72a:	b08b      	sub	sp, #44	; 0x2c
 801e72c:	af00      	add	r7, sp, #0
 801e72e:	60f8      	str	r0, [r7, #12]
 801e730:	60b9      	str	r1, [r7, #8]
 801e732:	607a      	str	r2, [r7, #4]
 801e734:	603b      	str	r3, [r7, #0]
 801e736:	68fb      	ldr	r3, [r7, #12]
 801e738:	68b9      	ldr	r1, [r7, #8]
 801e73a:	4618      	mov	r0, r3
 801e73c:	f7ff fb46 	bl	801ddcc <_ZN11MockFailureC1EP10UtestShell>
 801e740:	4a30      	ldr	r2, [pc, #192]	; (801e804 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801e742:	68fb      	ldr	r3, [r7, #12]
 801e744:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunction;
 801e746:	f107 0310 	add.w	r3, r7, #16
 801e74a:	4618      	mov	r0, r3
 801e74c:	f7fe fc48 	bl	801cfe0 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(functionName, expectations);
 801e750:	f107 0310 	add.w	r3, r7, #16
 801e754:	683a      	ldr	r2, [r7, #0]
 801e756:	6879      	ldr	r1, [r7, #4]
 801e758:	4618      	mov	r0, r3
 801e75a:	f7fe fde7 	bl	801d32c <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ = "Mock Failure: Expected parameter for function \"";
 801e75e:	68fb      	ldr	r3, [r7, #12]
 801e760:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e764:	f107 0318 	add.w	r3, r7, #24
 801e768:	4927      	ldr	r1, [pc, #156]	; (801e808 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801e76a:	4618      	mov	r0, r3
 801e76c:	f7ef fc0b 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801e770:	f107 0318 	add.w	r3, r7, #24
 801e774:	4619      	mov	r1, r3
 801e776:	4620      	mov	r0, r4
 801e778:	f7ef fc71 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 801e77c:	f107 0318 	add.w	r3, r7, #24
 801e780:	4618      	mov	r0, r3
 801e782:	f7ef ffb8 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    message_ += functionName;
 801e786:	68fb      	ldr	r3, [r7, #12]
 801e788:	332c      	adds	r3, #44	; 0x2c
 801e78a:	6879      	ldr	r1, [r7, #4]
 801e78c:	4618      	mov	r0, r3
 801e78e:	f7f0 f82f 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
    message_ += "\" did not happen.\n";
 801e792:	68fb      	ldr	r3, [r7, #12]
 801e794:	332c      	adds	r3, #44	; 0x2c
 801e796:	491d      	ldr	r1, [pc, #116]	; (801e80c <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801e798:	4618      	mov	r0, r3
 801e79a:	f7f0 f83b 	bl	800e814 <_ZN12SimpleStringpLEPKc>

    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801e79e:	68fb      	ldr	r3, [r7, #12]
 801e7a0:	683a      	ldr	r2, [r7, #0]
 801e7a2:	6879      	ldr	r1, [r7, #4]
 801e7a4:	4618      	mov	r0, r3
 801e7a6:	f7ff fb99 	bl	801dedc <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tMISSING parameters that didn't happen:\n";
 801e7aa:	68fb      	ldr	r3, [r7, #12]
 801e7ac:	332c      	adds	r3, #44	; 0x2c
 801e7ae:	4918      	ldr	r1, [pc, #96]	; (801e810 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe8>)
 801e7b0:	4618      	mov	r0, r3
 801e7b2:	f7f0 f82f 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    message_ += "\t\t";
 801e7b6:	68fb      	ldr	r3, [r7, #12]
 801e7b8:	332c      	adds	r3, #44	; 0x2c
 801e7ba:	4916      	ldr	r1, [pc, #88]	; (801e814 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xec>)
 801e7bc:	4618      	mov	r0, r3
 801e7be:	f7f0 f829 	bl	800e814 <_ZN12SimpleStringpLEPKc>
    message_ += expectationsForFunction.missingParametersToString();
 801e7c2:	68fb      	ldr	r3, [r7, #12]
 801e7c4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e7c8:	f107 0320 	add.w	r3, r7, #32
 801e7cc:	f107 0210 	add.w	r2, r7, #16
 801e7d0:	4611      	mov	r1, r2
 801e7d2:	4618      	mov	r0, r3
 801e7d4:	f7ff f9bc 	bl	801db50 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>
 801e7d8:	f107 0320 	add.w	r3, r7, #32
 801e7dc:	4619      	mov	r1, r3
 801e7de:	4620      	mov	r0, r4
 801e7e0:	f7f0 f806 	bl	800e7f0 <_ZN12SimpleStringpLERKS_>
 801e7e4:	f107 0320 	add.w	r3, r7, #32
 801e7e8:	4618      	mov	r0, r3
 801e7ea:	f7ef ff84 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801e7ee:	f107 0310 	add.w	r3, r7, #16
 801e7f2:	4618      	mov	r0, r3
 801e7f4:	f7fe fc08 	bl	801d008 <_ZN21MockExpectedCallsListD1Ev>
}
 801e7f8:	68fb      	ldr	r3, [r7, #12]
 801e7fa:	4618      	mov	r0, r3
 801e7fc:	372c      	adds	r7, #44	; 0x2c
 801e7fe:	46bd      	mov	sp, r7
 801e800:	bd90      	pop	{r4, r7, pc}
 801e802:	bf00      	nop
 801e804:	0802a7fc 	.word	0x0802a7fc
 801e808:	08027f10 	.word	0x08027f10
 801e80c:	08027f40 	.word	0x08027f40
 801e810:	08027f54 	.word	0x08027f54
 801e814:	08027c18 	.word	0x08027c18

0801e818 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCompareCustomTypeFailure::MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801e818:	b590      	push	{r4, r7, lr}
 801e81a:	b087      	sub	sp, #28
 801e81c:	af00      	add	r7, sp, #0
 801e81e:	60f8      	str	r0, [r7, #12]
 801e820:	60b9      	str	r1, [r7, #8]
 801e822:	607a      	str	r2, [r7, #4]
 801e824:	68fb      	ldr	r3, [r7, #12]
 801e826:	68b9      	ldr	r1, [r7, #8]
 801e828:	4618      	mov	r0, r3
 801e82a:	f7ff facf 	bl	801ddcc <_ZN11MockFailureC1EP10UtestShell>
 801e82e:	4a10      	ldr	r2, [pc, #64]	; (801e870 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801e830:	68fb      	ldr	r3, [r7, #12]
 801e832:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to compare type <%s>. Please install a MockNamedValueComparator.", typeName.asCharString());
 801e834:	68fb      	ldr	r3, [r7, #12]
 801e836:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e83a:	6878      	ldr	r0, [r7, #4]
 801e83c:	f7ef ff2e 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 801e840:	4602      	mov	r2, r0
 801e842:	f107 0310 	add.w	r3, r7, #16
 801e846:	490b      	ldr	r1, [pc, #44]	; (801e874 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801e848:	4618      	mov	r0, r3
 801e84a:	f7f0 fc5b 	bl	800f104 <_Z16StringFromFormatPKcz>
 801e84e:	f107 0310 	add.w	r3, r7, #16
 801e852:	4619      	mov	r1, r3
 801e854:	4620      	mov	r0, r4
 801e856:	f7ef fc02 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 801e85a:	f107 0310 	add.w	r3, r7, #16
 801e85e:	4618      	mov	r0, r3
 801e860:	f7ef ff49 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 801e864:	68fb      	ldr	r3, [r7, #12]
 801e866:	4618      	mov	r0, r3
 801e868:	371c      	adds	r7, #28
 801e86a:	46bd      	mov	sp, r7
 801e86c:	bd90      	pop	{r4, r7, pc}
 801e86e:	bf00      	nop
 801e870:	0802a7d0 	.word	0x0802a7d0
 801e874:	08027f80 	.word	0x08027f80

0801e878 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCopyCustomTypeFailure::MockNoWayToCopyCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801e878:	b590      	push	{r4, r7, lr}
 801e87a:	b087      	sub	sp, #28
 801e87c:	af00      	add	r7, sp, #0
 801e87e:	60f8      	str	r0, [r7, #12]
 801e880:	60b9      	str	r1, [r7, #8]
 801e882:	607a      	str	r2, [r7, #4]
 801e884:	68fb      	ldr	r3, [r7, #12]
 801e886:	68b9      	ldr	r1, [r7, #8]
 801e888:	4618      	mov	r0, r3
 801e88a:	f7ff fa9f 	bl	801ddcc <_ZN11MockFailureC1EP10UtestShell>
 801e88e:	4a10      	ldr	r2, [pc, #64]	; (801e8d0 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801e890:	68fb      	ldr	r3, [r7, #12]
 801e892:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to copy type <%s>. Please install a MockNamedValueCopier.", typeName.asCharString());
 801e894:	68fb      	ldr	r3, [r7, #12]
 801e896:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e89a:	6878      	ldr	r0, [r7, #4]
 801e89c:	f7ef fefe 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 801e8a0:	4602      	mov	r2, r0
 801e8a2:	f107 0310 	add.w	r3, r7, #16
 801e8a6:	490b      	ldr	r1, [pc, #44]	; (801e8d4 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801e8a8:	4618      	mov	r0, r3
 801e8aa:	f7f0 fc2b 	bl	800f104 <_Z16StringFromFormatPKcz>
 801e8ae:	f107 0310 	add.w	r3, r7, #16
 801e8b2:	4619      	mov	r1, r3
 801e8b4:	4620      	mov	r0, r4
 801e8b6:	f7ef fbd2 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 801e8ba:	f107 0310 	add.w	r3, r7, #16
 801e8be:	4618      	mov	r0, r3
 801e8c0:	f7ef ff19 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 801e8c4:	68fb      	ldr	r3, [r7, #12]
 801e8c6:	4618      	mov	r0, r3
 801e8c8:	371c      	adds	r7, #28
 801e8ca:	46bd      	mov	sp, r7
 801e8cc:	bd90      	pop	{r4, r7, pc}
 801e8ce:	bf00      	nop
 801e8d0:	0802a7a4 	.word	0x0802a7a4
 801e8d4:	08027fd8 	.word	0x08027fd8

0801e8d8 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>:

MockUnexpectedObjectFailure::MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* actual, const MockExpectedCallsList& expectations) : MockFailure(test)
 801e8d8:	b590      	push	{r4, r7, lr}
 801e8da:	b087      	sub	sp, #28
 801e8dc:	af00      	add	r7, sp, #0
 801e8de:	60f8      	str	r0, [r7, #12]
 801e8e0:	60b9      	str	r1, [r7, #8]
 801e8e2:	607a      	str	r2, [r7, #4]
 801e8e4:	603b      	str	r3, [r7, #0]
 801e8e6:	68fb      	ldr	r3, [r7, #12]
 801e8e8:	68b9      	ldr	r1, [r7, #8]
 801e8ea:	4618      	mov	r0, r3
 801e8ec:	f7ff fa6e 	bl	801ddcc <_ZN11MockFailureC1EP10UtestShell>
 801e8f0:	4a12      	ldr	r2, [pc, #72]	; (801e93c <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x64>)
 801e8f2:	68fb      	ldr	r3, [r7, #12]
 801e8f4:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801e8f6:	68fb      	ldr	r3, [r7, #12]
 801e8f8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
 801e8fc:	6878      	ldr	r0, [r7, #4]
 801e8fe:	f7ef fecd 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 801e902:	4602      	mov	r2, r0
 801e904:	f107 0010 	add.w	r0, r7, #16
 801e908:	683b      	ldr	r3, [r7, #0]
 801e90a:	490d      	ldr	r1, [pc, #52]	; (801e940 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x68>)
 801e90c:	f7f0 fbfa 	bl	800f104 <_Z16StringFromFormatPKcz>
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801e910:	f107 0310 	add.w	r3, r7, #16
 801e914:	4619      	mov	r1, r3
 801e916:	4620      	mov	r0, r4
 801e918:	f7ef fba1 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 801e91c:	f107 0310 	add.w	r3, r7, #16
 801e920:	4618      	mov	r0, r3
 801e922:	f7ef fee8 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801e926:	68fb      	ldr	r3, [r7, #12]
 801e928:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e92a:	6879      	ldr	r1, [r7, #4]
 801e92c:	4618      	mov	r0, r3
 801e92e:	f7ff fad5 	bl	801dedc <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801e932:	68fb      	ldr	r3, [r7, #12]
 801e934:	4618      	mov	r0, r3
 801e936:	371c      	adds	r7, #28
 801e938:	46bd      	mov	sp, r7
 801e93a:	bd90      	pop	{r4, r7, pc}
 801e93c:	0802a778 	.word	0x0802a778
 801e940:	08028028 	.word	0x08028028

0801e944 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedObjectDidntHappenFailure::MockExpectedObjectDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801e944:	b590      	push	{r4, r7, lr}
 801e946:	b087      	sub	sp, #28
 801e948:	af00      	add	r7, sp, #0
 801e94a:	60f8      	str	r0, [r7, #12]
 801e94c:	60b9      	str	r1, [r7, #8]
 801e94e:	607a      	str	r2, [r7, #4]
 801e950:	603b      	str	r3, [r7, #0]
 801e952:	68fb      	ldr	r3, [r7, #12]
 801e954:	68b9      	ldr	r1, [r7, #8]
 801e956:	4618      	mov	r0, r3
 801e958:	f7ff fa38 	bl	801ddcc <_ZN11MockFailureC1EP10UtestShell>
 801e95c:	4a12      	ldr	r2, [pc, #72]	; (801e9a8 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x64>)
 801e95e:	68fb      	ldr	r3, [r7, #12]
 801e960:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("Mock Failure: Expected call on object for function \"%s\" but it did not happen.\n", functionName.asCharString());
 801e962:	68fb      	ldr	r3, [r7, #12]
 801e964:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801e968:	6878      	ldr	r0, [r7, #4]
 801e96a:	f7ef fe97 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 801e96e:	4602      	mov	r2, r0
 801e970:	f107 0310 	add.w	r3, r7, #16
 801e974:	490d      	ldr	r1, [pc, #52]	; (801e9ac <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x68>)
 801e976:	4618      	mov	r0, r3
 801e978:	f7f0 fbc4 	bl	800f104 <_Z16StringFromFormatPKcz>
 801e97c:	f107 0310 	add.w	r3, r7, #16
 801e980:	4619      	mov	r1, r3
 801e982:	4620      	mov	r0, r4
 801e984:	f7ef fb6b 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 801e988:	f107 0310 	add.w	r3, r7, #16
 801e98c:	4618      	mov	r0, r3
 801e98e:	f7ef feb2 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801e992:	68fb      	ldr	r3, [r7, #12]
 801e994:	683a      	ldr	r2, [r7, #0]
 801e996:	6879      	ldr	r1, [r7, #4]
 801e998:	4618      	mov	r0, r3
 801e99a:	f7ff fa9f 	bl	801dedc <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801e99e:	68fb      	ldr	r3, [r7, #12]
 801e9a0:	4618      	mov	r0, r3
 801e9a2:	371c      	adds	r7, #28
 801e9a4:	46bd      	mov	sp, r7
 801e9a6:	bd90      	pop	{r4, r7, pc}
 801e9a8:	0802a74c 	.word	0x0802a74c
 801e9ac:	0802808c 	.word	0x0802808c

0801e9b0 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>:

MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::defaultRepository_ = NULLPTR;
const double MockNamedValue::defaultDoubleTolerance = 0.005;

void MockNamedValue::setDefaultComparatorsAndCopiersRepository(MockNamedValueComparatorsAndCopiersRepository* repository)
{
 801e9b0:	b480      	push	{r7}
 801e9b2:	b083      	sub	sp, #12
 801e9b4:	af00      	add	r7, sp, #0
 801e9b6:	6078      	str	r0, [r7, #4]
    defaultRepository_ = repository;
 801e9b8:	4a04      	ldr	r2, [pc, #16]	; (801e9cc <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository+0x1c>)
 801e9ba:	687b      	ldr	r3, [r7, #4]
 801e9bc:	6013      	str	r3, [r2, #0]
}
 801e9be:	bf00      	nop
 801e9c0:	370c      	adds	r7, #12
 801e9c2:	46bd      	mov	sp, r7
 801e9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9c8:	4770      	bx	lr
 801e9ca:	bf00      	nop
 801e9cc:	20000f84 	.word	0x20000f84

0801e9d0 <_ZN14MockNamedValueC1ERK12SimpleString>:
MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::getDefaultComparatorsAndCopiersRepository()
{
    return defaultRepository_;
}

MockNamedValue::MockNamedValue(const SimpleString& name) : name_(name), type_("int"), size_(0), comparator_(NULLPTR), copier_(NULLPTR)
 801e9d0:	b580      	push	{r7, lr}
 801e9d2:	b082      	sub	sp, #8
 801e9d4:	af00      	add	r7, sp, #0
 801e9d6:	6078      	str	r0, [r7, #4]
 801e9d8:	6039      	str	r1, [r7, #0]
 801e9da:	4a10      	ldr	r2, [pc, #64]	; (801ea1c <_ZN14MockNamedValueC1ERK12SimpleString+0x4c>)
 801e9dc:	687b      	ldr	r3, [r7, #4]
 801e9de:	601a      	str	r2, [r3, #0]
 801e9e0:	687b      	ldr	r3, [r7, #4]
 801e9e2:	3304      	adds	r3, #4
 801e9e4:	6839      	ldr	r1, [r7, #0]
 801e9e6:	4618      	mov	r0, r3
 801e9e8:	f7ef fb21 	bl	800e02e <_ZN12SimpleStringC1ERKS_>
 801e9ec:	687b      	ldr	r3, [r7, #4]
 801e9ee:	330c      	adds	r3, #12
 801e9f0:	490b      	ldr	r1, [pc, #44]	; (801ea20 <_ZN14MockNamedValueC1ERK12SimpleString+0x50>)
 801e9f2:	4618      	mov	r0, r3
 801e9f4:	f7ef fac7 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801e9f8:	687b      	ldr	r3, [r7, #4]
 801e9fa:	2200      	movs	r2, #0
 801e9fc:	629a      	str	r2, [r3, #40]	; 0x28
 801e9fe:	687b      	ldr	r3, [r7, #4]
 801ea00:	2200      	movs	r2, #0
 801ea02:	62da      	str	r2, [r3, #44]	; 0x2c
 801ea04:	687b      	ldr	r3, [r7, #4]
 801ea06:	2200      	movs	r2, #0
 801ea08:	631a      	str	r2, [r3, #48]	; 0x30
{
    value_.intValue_ = 0;
 801ea0a:	687b      	ldr	r3, [r7, #4]
 801ea0c:	2200      	movs	r2, #0
 801ea0e:	619a      	str	r2, [r3, #24]
}
 801ea10:	687b      	ldr	r3, [r7, #4]
 801ea12:	4618      	mov	r0, r3
 801ea14:	3708      	adds	r7, #8
 801ea16:	46bd      	mov	sp, r7
 801ea18:	bd80      	pop	{r7, pc}
 801ea1a:	bf00      	nop
 801ea1c:	0802afd4 	.word	0x0802afd4
 801ea20:	080280dc 	.word	0x080280dc

0801ea24 <_ZN14MockNamedValueD1Ev>:

MockNamedValue::~MockNamedValue()
 801ea24:	b580      	push	{r7, lr}
 801ea26:	b082      	sub	sp, #8
 801ea28:	af00      	add	r7, sp, #0
 801ea2a:	6078      	str	r0, [r7, #4]
 801ea2c:	4a08      	ldr	r2, [pc, #32]	; (801ea50 <_ZN14MockNamedValueD1Ev+0x2c>)
 801ea2e:	687b      	ldr	r3, [r7, #4]
 801ea30:	601a      	str	r2, [r3, #0]
 801ea32:	687b      	ldr	r3, [r7, #4]
 801ea34:	330c      	adds	r3, #12
 801ea36:	4618      	mov	r0, r3
 801ea38:	f7ef fe5d 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801ea3c:	687b      	ldr	r3, [r7, #4]
 801ea3e:	3304      	adds	r3, #4
 801ea40:	4618      	mov	r0, r3
 801ea42:	f7ef fe58 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
{
}
 801ea46:	687b      	ldr	r3, [r7, #4]
 801ea48:	4618      	mov	r0, r3
 801ea4a:	3708      	adds	r7, #8
 801ea4c:	46bd      	mov	sp, r7
 801ea4e:	bd80      	pop	{r7, pc}
 801ea50:	0802afd4 	.word	0x0802afd4

0801ea54 <_ZN14MockNamedValueD0Ev>:
MockNamedValue::~MockNamedValue()
 801ea54:	b580      	push	{r7, lr}
 801ea56:	b082      	sub	sp, #8
 801ea58:	af00      	add	r7, sp, #0
 801ea5a:	6078      	str	r0, [r7, #4]
}
 801ea5c:	6878      	ldr	r0, [r7, #4]
 801ea5e:	f7ff ffe1 	bl	801ea24 <_ZN14MockNamedValueD1Ev>
 801ea62:	2138      	movs	r1, #56	; 0x38
 801ea64:	6878      	ldr	r0, [r7, #4]
 801ea66:	f7ec fedf 	bl	800b828 <_ZdlPvj>
 801ea6a:	687b      	ldr	r3, [r7, #4]
 801ea6c:	4618      	mov	r0, r3
 801ea6e:	3708      	adds	r7, #8
 801ea70:	46bd      	mov	sp, r7
 801ea72:	bd80      	pop	{r7, pc}

0801ea74 <_ZN14MockNamedValue8setValueEb>:

void MockNamedValue::setValue(bool value)
{
 801ea74:	b590      	push	{r4, r7, lr}
 801ea76:	b085      	sub	sp, #20
 801ea78:	af00      	add	r7, sp, #0
 801ea7a:	6078      	str	r0, [r7, #4]
 801ea7c:	460b      	mov	r3, r1
 801ea7e:	70fb      	strb	r3, [r7, #3]
    type_ = "bool";
 801ea80:	687b      	ldr	r3, [r7, #4]
 801ea82:	f103 040c 	add.w	r4, r3, #12
 801ea86:	f107 0308 	add.w	r3, r7, #8
 801ea8a:	490b      	ldr	r1, [pc, #44]	; (801eab8 <_ZN14MockNamedValue8setValueEb+0x44>)
 801ea8c:	4618      	mov	r0, r3
 801ea8e:	f7ef fa7a 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801ea92:	f107 0308 	add.w	r3, r7, #8
 801ea96:	4619      	mov	r1, r3
 801ea98:	4620      	mov	r0, r4
 801ea9a:	f7ef fae0 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 801ea9e:	f107 0308 	add.w	r3, r7, #8
 801eaa2:	4618      	mov	r0, r3
 801eaa4:	f7ef fe27 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    value_.boolValue_ = value;
 801eaa8:	687b      	ldr	r3, [r7, #4]
 801eaaa:	78fa      	ldrb	r2, [r7, #3]
 801eaac:	761a      	strb	r2, [r3, #24]
}
 801eaae:	bf00      	nop
 801eab0:	3714      	adds	r7, #20
 801eab2:	46bd      	mov	sp, r7
 801eab4:	bd90      	pop	{r4, r7, pc}
 801eab6:	bf00      	nop
 801eab8:	080280e0 	.word	0x080280e0

0801eabc <_ZN14MockNamedValue8setValueEj>:

void MockNamedValue::setValue(unsigned int value)
{
 801eabc:	b590      	push	{r4, r7, lr}
 801eabe:	b085      	sub	sp, #20
 801eac0:	af00      	add	r7, sp, #0
 801eac2:	6078      	str	r0, [r7, #4]
 801eac4:	6039      	str	r1, [r7, #0]
    type_ = "unsigned int";
 801eac6:	687b      	ldr	r3, [r7, #4]
 801eac8:	f103 040c 	add.w	r4, r3, #12
 801eacc:	f107 0308 	add.w	r3, r7, #8
 801ead0:	490a      	ldr	r1, [pc, #40]	; (801eafc <_ZN14MockNamedValue8setValueEj+0x40>)
 801ead2:	4618      	mov	r0, r3
 801ead4:	f7ef fa57 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801ead8:	f107 0308 	add.w	r3, r7, #8
 801eadc:	4619      	mov	r1, r3
 801eade:	4620      	mov	r0, r4
 801eae0:	f7ef fabd 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 801eae4:	f107 0308 	add.w	r3, r7, #8
 801eae8:	4618      	mov	r0, r3
 801eaea:	f7ef fe04 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    value_.unsignedIntValue_ = value;
 801eaee:	687b      	ldr	r3, [r7, #4]
 801eaf0:	683a      	ldr	r2, [r7, #0]
 801eaf2:	619a      	str	r2, [r3, #24]
}
 801eaf4:	bf00      	nop
 801eaf6:	3714      	adds	r7, #20
 801eaf8:	46bd      	mov	sp, r7
 801eafa:	bd90      	pop	{r4, r7, pc}
 801eafc:	080280e8 	.word	0x080280e8

0801eb00 <_ZN14MockNamedValue8setValueEi>:

void MockNamedValue::setValue(int value)
{
 801eb00:	b590      	push	{r4, r7, lr}
 801eb02:	b085      	sub	sp, #20
 801eb04:	af00      	add	r7, sp, #0
 801eb06:	6078      	str	r0, [r7, #4]
 801eb08:	6039      	str	r1, [r7, #0]
    type_ = "int";
 801eb0a:	687b      	ldr	r3, [r7, #4]
 801eb0c:	f103 040c 	add.w	r4, r3, #12
 801eb10:	f107 0308 	add.w	r3, r7, #8
 801eb14:	490a      	ldr	r1, [pc, #40]	; (801eb40 <_ZN14MockNamedValue8setValueEi+0x40>)
 801eb16:	4618      	mov	r0, r3
 801eb18:	f7ef fa35 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801eb1c:	f107 0308 	add.w	r3, r7, #8
 801eb20:	4619      	mov	r1, r3
 801eb22:	4620      	mov	r0, r4
 801eb24:	f7ef fa9b 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 801eb28:	f107 0308 	add.w	r3, r7, #8
 801eb2c:	4618      	mov	r0, r3
 801eb2e:	f7ef fde2 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    value_.intValue_ = value;
 801eb32:	687b      	ldr	r3, [r7, #4]
 801eb34:	683a      	ldr	r2, [r7, #0]
 801eb36:	619a      	str	r2, [r3, #24]
}
 801eb38:	bf00      	nop
 801eb3a:	3714      	adds	r7, #20
 801eb3c:	46bd      	mov	sp, r7
 801eb3e:	bd90      	pop	{r4, r7, pc}
 801eb40:	080280dc 	.word	0x080280dc

0801eb44 <_ZN14MockNamedValue8setValueEl>:

void MockNamedValue::setValue(long int value)
{
 801eb44:	b590      	push	{r4, r7, lr}
 801eb46:	b085      	sub	sp, #20
 801eb48:	af00      	add	r7, sp, #0
 801eb4a:	6078      	str	r0, [r7, #4]
 801eb4c:	6039      	str	r1, [r7, #0]
    type_ = "long int";
 801eb4e:	687b      	ldr	r3, [r7, #4]
 801eb50:	f103 040c 	add.w	r4, r3, #12
 801eb54:	f107 0308 	add.w	r3, r7, #8
 801eb58:	490a      	ldr	r1, [pc, #40]	; (801eb84 <_ZN14MockNamedValue8setValueEl+0x40>)
 801eb5a:	4618      	mov	r0, r3
 801eb5c:	f7ef fa13 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801eb60:	f107 0308 	add.w	r3, r7, #8
 801eb64:	4619      	mov	r1, r3
 801eb66:	4620      	mov	r0, r4
 801eb68:	f7ef fa79 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 801eb6c:	f107 0308 	add.w	r3, r7, #8
 801eb70:	4618      	mov	r0, r3
 801eb72:	f7ef fdc0 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    value_.longIntValue_ = value;
 801eb76:	687b      	ldr	r3, [r7, #4]
 801eb78:	683a      	ldr	r2, [r7, #0]
 801eb7a:	619a      	str	r2, [r3, #24]
}
 801eb7c:	bf00      	nop
 801eb7e:	3714      	adds	r7, #20
 801eb80:	46bd      	mov	sp, r7
 801eb82:	bd90      	pop	{r4, r7, pc}
 801eb84:	080280f8 	.word	0x080280f8

0801eb88 <_ZN14MockNamedValue8setValueEm>:

void MockNamedValue::setValue(unsigned long int value)
{
 801eb88:	b590      	push	{r4, r7, lr}
 801eb8a:	b085      	sub	sp, #20
 801eb8c:	af00      	add	r7, sp, #0
 801eb8e:	6078      	str	r0, [r7, #4]
 801eb90:	6039      	str	r1, [r7, #0]
    type_ = "unsigned long int";
 801eb92:	687b      	ldr	r3, [r7, #4]
 801eb94:	f103 040c 	add.w	r4, r3, #12
 801eb98:	f107 0308 	add.w	r3, r7, #8
 801eb9c:	490a      	ldr	r1, [pc, #40]	; (801ebc8 <_ZN14MockNamedValue8setValueEm+0x40>)
 801eb9e:	4618      	mov	r0, r3
 801eba0:	f7ef f9f1 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801eba4:	f107 0308 	add.w	r3, r7, #8
 801eba8:	4619      	mov	r1, r3
 801ebaa:	4620      	mov	r0, r4
 801ebac:	f7ef fa57 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 801ebb0:	f107 0308 	add.w	r3, r7, #8
 801ebb4:	4618      	mov	r0, r3
 801ebb6:	f7ef fd9e 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    value_.unsignedLongIntValue_ = value;
 801ebba:	687b      	ldr	r3, [r7, #4]
 801ebbc:	683a      	ldr	r2, [r7, #0]
 801ebbe:	619a      	str	r2, [r3, #24]
}
 801ebc0:	bf00      	nop
 801ebc2:	3714      	adds	r7, #20
 801ebc4:	46bd      	mov	sp, r7
 801ebc6:	bd90      	pop	{r4, r7, pc}
 801ebc8:	08028104 	.word	0x08028104

0801ebcc <_ZN14MockNamedValue8setValueE17cpputest_longlong>:
}

#else

void MockNamedValue::setValue(cpputest_longlong)
{
 801ebcc:	b5b0      	push	{r4, r5, r7, lr}
 801ebce:	b086      	sub	sp, #24
 801ebd0:	af02      	add	r7, sp, #8
 801ebd2:	60f8      	str	r0, [r7, #12]
 801ebd4:	1d3b      	adds	r3, r7, #4
 801ebd6:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801ebda:	f7f6 fdb7 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 801ebde:	4604      	mov	r4, r0
 801ebe0:	6823      	ldr	r3, [r4, #0]
 801ebe2:	3368      	adds	r3, #104	; 0x68
 801ebe4:	681d      	ldr	r5, [r3, #0]
 801ebe6:	f7f6 fdc1 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ebea:	4603      	mov	r3, r0
 801ebec:	9300      	str	r3, [sp, #0]
 801ebee:	2367      	movs	r3, #103	; 0x67
 801ebf0:	4a03      	ldr	r2, [pc, #12]	; (801ec00 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x34>)
 801ebf2:	4904      	ldr	r1, [pc, #16]	; (801ec04 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x38>)
 801ebf4:	4620      	mov	r0, r4
 801ebf6:	47a8      	blx	r5
}
 801ebf8:	bf00      	nop
 801ebfa:	3710      	adds	r7, #16
 801ebfc:	46bd      	mov	sp, r7
 801ebfe:	bdb0      	pop	{r4, r5, r7, pc}
 801ec00:	08028118 	.word	0x08028118
 801ec04:	08028134 	.word	0x08028134

0801ec08 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong>:

void MockNamedValue::setValue(cpputest_ulonglong)
{
 801ec08:	b5b0      	push	{r4, r5, r7, lr}
 801ec0a:	b086      	sub	sp, #24
 801ec0c:	af02      	add	r7, sp, #8
 801ec0e:	60f8      	str	r0, [r7, #12]
 801ec10:	1d3b      	adds	r3, r7, #4
 801ec12:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801ec16:	f7f6 fd99 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 801ec1a:	4604      	mov	r4, r0
 801ec1c:	6823      	ldr	r3, [r4, #0]
 801ec1e:	3368      	adds	r3, #104	; 0x68
 801ec20:	681d      	ldr	r5, [r3, #0]
 801ec22:	f7f6 fda3 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ec26:	4603      	mov	r3, r0
 801ec28:	9300      	str	r3, [sp, #0]
 801ec2a:	236c      	movs	r3, #108	; 0x6c
 801ec2c:	4a03      	ldr	r2, [pc, #12]	; (801ec3c <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x34>)
 801ec2e:	4904      	ldr	r1, [pc, #16]	; (801ec40 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x38>)
 801ec30:	4620      	mov	r0, r4
 801ec32:	47a8      	blx	r5
}
 801ec34:	bf00      	nop
 801ec36:	3710      	adds	r7, #16
 801ec38:	46bd      	mov	sp, r7
 801ec3a:	bdb0      	pop	{r4, r5, r7, pc}
 801ec3c:	08028118 	.word	0x08028118
 801ec40:	08028154 	.word	0x08028154
 801ec44:	00000000 	.word	0x00000000

0801ec48 <_ZN14MockNamedValue8setValueEd>:

#endif

void MockNamedValue::setValue(double value)
{
 801ec48:	b580      	push	{r7, lr}
 801ec4a:	b084      	sub	sp, #16
 801ec4c:	af00      	add	r7, sp, #0
 801ec4e:	60f8      	str	r0, [r7, #12]
 801ec50:	ed87 0b00 	vstr	d0, [r7]
    setValue(value, defaultDoubleTolerance);
 801ec54:	68fb      	ldr	r3, [r7, #12]
 801ec56:	681b      	ldr	r3, [r3, #0]
 801ec58:	3328      	adds	r3, #40	; 0x28
 801ec5a:	681b      	ldr	r3, [r3, #0]
 801ec5c:	ed9f 1b04 	vldr	d1, [pc, #16]	; 801ec70 <_ZN14MockNamedValue8setValueEd+0x28>
 801ec60:	ed97 0b00 	vldr	d0, [r7]
 801ec64:	68f8      	ldr	r0, [r7, #12]
 801ec66:	4798      	blx	r3
}
 801ec68:	bf00      	nop
 801ec6a:	3710      	adds	r7, #16
 801ec6c:	46bd      	mov	sp, r7
 801ec6e:	bd80      	pop	{r7, pc}
 801ec70:	47ae147b 	.word	0x47ae147b
 801ec74:	3f747ae1 	.word	0x3f747ae1

0801ec78 <_ZN14MockNamedValue8setValueEdd>:

void MockNamedValue::setValue(double value, double tolerance)
{
 801ec78:	b590      	push	{r4, r7, lr}
 801ec7a:	b089      	sub	sp, #36	; 0x24
 801ec7c:	af00      	add	r7, sp, #0
 801ec7e:	6178      	str	r0, [r7, #20]
 801ec80:	ed87 0b02 	vstr	d0, [r7, #8]
 801ec84:	ed87 1b00 	vstr	d1, [r7]
    type_ = "double";
 801ec88:	697b      	ldr	r3, [r7, #20]
 801ec8a:	f103 040c 	add.w	r4, r3, #12
 801ec8e:	f107 0318 	add.w	r3, r7, #24
 801ec92:	490e      	ldr	r1, [pc, #56]	; (801eccc <_ZN14MockNamedValue8setValueEdd+0x54>)
 801ec94:	4618      	mov	r0, r3
 801ec96:	f7ef f976 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801ec9a:	f107 0318 	add.w	r3, r7, #24
 801ec9e:	4619      	mov	r1, r3
 801eca0:	4620      	mov	r0, r4
 801eca2:	f7ef f9dc 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 801eca6:	f107 0318 	add.w	r3, r7, #24
 801ecaa:	4618      	mov	r0, r3
 801ecac:	f7ef fd23 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    value_.doubleValue_.value = value;
 801ecb0:	6979      	ldr	r1, [r7, #20]
 801ecb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801ecb6:	e9c1 2306 	strd	r2, r3, [r1, #24]
    value_.doubleValue_.tolerance = tolerance;
 801ecba:	6979      	ldr	r1, [r7, #20]
 801ecbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ecc0:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 801ecc4:	bf00      	nop
 801ecc6:	3724      	adds	r7, #36	; 0x24
 801ecc8:	46bd      	mov	sp, r7
 801ecca:	bd90      	pop	{r4, r7, pc}
 801eccc:	08028180 	.word	0x08028180

0801ecd0 <_ZN14MockNamedValue8setValueEPv>:

void MockNamedValue::setValue(void* value)
{
 801ecd0:	b590      	push	{r4, r7, lr}
 801ecd2:	b085      	sub	sp, #20
 801ecd4:	af00      	add	r7, sp, #0
 801ecd6:	6078      	str	r0, [r7, #4]
 801ecd8:	6039      	str	r1, [r7, #0]
    type_ = "void*";
 801ecda:	687b      	ldr	r3, [r7, #4]
 801ecdc:	f103 040c 	add.w	r4, r3, #12
 801ece0:	f107 0308 	add.w	r3, r7, #8
 801ece4:	490a      	ldr	r1, [pc, #40]	; (801ed10 <_ZN14MockNamedValue8setValueEPv+0x40>)
 801ece6:	4618      	mov	r0, r3
 801ece8:	f7ef f94d 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801ecec:	f107 0308 	add.w	r3, r7, #8
 801ecf0:	4619      	mov	r1, r3
 801ecf2:	4620      	mov	r0, r4
 801ecf4:	f7ef f9b3 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 801ecf8:	f107 0308 	add.w	r3, r7, #8
 801ecfc:	4618      	mov	r0, r3
 801ecfe:	f7ef fcfa 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    value_.pointerValue_ = value;
 801ed02:	687b      	ldr	r3, [r7, #4]
 801ed04:	683a      	ldr	r2, [r7, #0]
 801ed06:	619a      	str	r2, [r3, #24]
}
 801ed08:	bf00      	nop
 801ed0a:	3714      	adds	r7, #20
 801ed0c:	46bd      	mov	sp, r7
 801ed0e:	bd90      	pop	{r4, r7, pc}
 801ed10:	08028188 	.word	0x08028188

0801ed14 <_ZN14MockNamedValue8setValueEPKv>:

void MockNamedValue::setValue(const void* value)
{
 801ed14:	b590      	push	{r4, r7, lr}
 801ed16:	b085      	sub	sp, #20
 801ed18:	af00      	add	r7, sp, #0
 801ed1a:	6078      	str	r0, [r7, #4]
 801ed1c:	6039      	str	r1, [r7, #0]
    type_ = "const void*";
 801ed1e:	687b      	ldr	r3, [r7, #4]
 801ed20:	f103 040c 	add.w	r4, r3, #12
 801ed24:	f107 0308 	add.w	r3, r7, #8
 801ed28:	490a      	ldr	r1, [pc, #40]	; (801ed54 <_ZN14MockNamedValue8setValueEPKv+0x40>)
 801ed2a:	4618      	mov	r0, r3
 801ed2c:	f7ef f92b 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801ed30:	f107 0308 	add.w	r3, r7, #8
 801ed34:	4619      	mov	r1, r3
 801ed36:	4620      	mov	r0, r4
 801ed38:	f7ef f991 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 801ed3c:	f107 0308 	add.w	r3, r7, #8
 801ed40:	4618      	mov	r0, r3
 801ed42:	f7ef fcd8 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    value_.constPointerValue_ = value;
 801ed46:	687b      	ldr	r3, [r7, #4]
 801ed48:	683a      	ldr	r2, [r7, #0]
 801ed4a:	619a      	str	r2, [r3, #24]
}
 801ed4c:	bf00      	nop
 801ed4e:	3714      	adds	r7, #20
 801ed50:	46bd      	mov	sp, r7
 801ed52:	bd90      	pop	{r4, r7, pc}
 801ed54:	08028190 	.word	0x08028190

0801ed58 <_ZN14MockNamedValue8setValueEPFvvE>:

void MockNamedValue::setValue(void (*value)())
{
 801ed58:	b590      	push	{r4, r7, lr}
 801ed5a:	b085      	sub	sp, #20
 801ed5c:	af00      	add	r7, sp, #0
 801ed5e:	6078      	str	r0, [r7, #4]
 801ed60:	6039      	str	r1, [r7, #0]
    type_ = "void (*)()";
 801ed62:	687b      	ldr	r3, [r7, #4]
 801ed64:	f103 040c 	add.w	r4, r3, #12
 801ed68:	f107 0308 	add.w	r3, r7, #8
 801ed6c:	490a      	ldr	r1, [pc, #40]	; (801ed98 <_ZN14MockNamedValue8setValueEPFvvE+0x40>)
 801ed6e:	4618      	mov	r0, r3
 801ed70:	f7ef f909 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801ed74:	f107 0308 	add.w	r3, r7, #8
 801ed78:	4619      	mov	r1, r3
 801ed7a:	4620      	mov	r0, r4
 801ed7c:	f7ef f96f 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 801ed80:	f107 0308 	add.w	r3, r7, #8
 801ed84:	4618      	mov	r0, r3
 801ed86:	f7ef fcb6 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    value_.functionPointerValue_ = value;
 801ed8a:	687b      	ldr	r3, [r7, #4]
 801ed8c:	683a      	ldr	r2, [r7, #0]
 801ed8e:	619a      	str	r2, [r3, #24]
}
 801ed90:	bf00      	nop
 801ed92:	3714      	adds	r7, #20
 801ed94:	46bd      	mov	sp, r7
 801ed96:	bd90      	pop	{r4, r7, pc}
 801ed98:	0802819c 	.word	0x0802819c

0801ed9c <_ZN14MockNamedValue8setValueEPKc>:

void MockNamedValue::setValue(const char* value)
{
 801ed9c:	b590      	push	{r4, r7, lr}
 801ed9e:	b085      	sub	sp, #20
 801eda0:	af00      	add	r7, sp, #0
 801eda2:	6078      	str	r0, [r7, #4]
 801eda4:	6039      	str	r1, [r7, #0]
    type_ = "const char*";
 801eda6:	687b      	ldr	r3, [r7, #4]
 801eda8:	f103 040c 	add.w	r4, r3, #12
 801edac:	f107 0308 	add.w	r3, r7, #8
 801edb0:	490a      	ldr	r1, [pc, #40]	; (801eddc <_ZN14MockNamedValue8setValueEPKc+0x40>)
 801edb2:	4618      	mov	r0, r3
 801edb4:	f7ef f8e7 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801edb8:	f107 0308 	add.w	r3, r7, #8
 801edbc:	4619      	mov	r1, r3
 801edbe:	4620      	mov	r0, r4
 801edc0:	f7ef f94d 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 801edc4:	f107 0308 	add.w	r3, r7, #8
 801edc8:	4618      	mov	r0, r3
 801edca:	f7ef fc94 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    value_.stringValue_ = value;
 801edce:	687b      	ldr	r3, [r7, #4]
 801edd0:	683a      	ldr	r2, [r7, #0]
 801edd2:	619a      	str	r2, [r3, #24]
}
 801edd4:	bf00      	nop
 801edd6:	3714      	adds	r7, #20
 801edd8:	46bd      	mov	sp, r7
 801edda:	bd90      	pop	{r4, r7, pc}
 801eddc:	080281a8 	.word	0x080281a8

0801ede0 <_ZN14MockNamedValue15setMemoryBufferEPKhj>:

void MockNamedValue::setMemoryBuffer(const unsigned char* value, size_t size)
{
 801ede0:	b590      	push	{r4, r7, lr}
 801ede2:	b087      	sub	sp, #28
 801ede4:	af00      	add	r7, sp, #0
 801ede6:	60f8      	str	r0, [r7, #12]
 801ede8:	60b9      	str	r1, [r7, #8]
 801edea:	607a      	str	r2, [r7, #4]
    type_ = "const unsigned char*";
 801edec:	68fb      	ldr	r3, [r7, #12]
 801edee:	f103 040c 	add.w	r4, r3, #12
 801edf2:	f107 0310 	add.w	r3, r7, #16
 801edf6:	490c      	ldr	r1, [pc, #48]	; (801ee28 <_ZN14MockNamedValue15setMemoryBufferEPKhj+0x48>)
 801edf8:	4618      	mov	r0, r3
 801edfa:	f7ef f8c4 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801edfe:	f107 0310 	add.w	r3, r7, #16
 801ee02:	4619      	mov	r1, r3
 801ee04:	4620      	mov	r0, r4
 801ee06:	f7ef f92a 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 801ee0a:	f107 0310 	add.w	r3, r7, #16
 801ee0e:	4618      	mov	r0, r3
 801ee10:	f7ef fc71 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
    value_.memoryBufferValue_ = value;
 801ee14:	68fb      	ldr	r3, [r7, #12]
 801ee16:	68ba      	ldr	r2, [r7, #8]
 801ee18:	619a      	str	r2, [r3, #24]
    size_ = size;
 801ee1a:	68fb      	ldr	r3, [r7, #12]
 801ee1c:	687a      	ldr	r2, [r7, #4]
 801ee1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 801ee20:	bf00      	nop
 801ee22:	371c      	adds	r7, #28
 801ee24:	46bd      	mov	sp, r7
 801ee26:	bd90      	pop	{r4, r7, pc}
 801ee28:	080281b4 	.word	0x080281b4

0801ee2c <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>:

void MockNamedValue::setConstObjectPointer(const SimpleString& type, const void* objectPtr)
{
 801ee2c:	b580      	push	{r7, lr}
 801ee2e:	b084      	sub	sp, #16
 801ee30:	af00      	add	r7, sp, #0
 801ee32:	60f8      	str	r0, [r7, #12]
 801ee34:	60b9      	str	r1, [r7, #8]
 801ee36:	607a      	str	r2, [r7, #4]
    type_ = type;
 801ee38:	68fb      	ldr	r3, [r7, #12]
 801ee3a:	330c      	adds	r3, #12
 801ee3c:	68b9      	ldr	r1, [r7, #8]
 801ee3e:	4618      	mov	r0, r3
 801ee40:	f7ef f90d 	bl	800e05e <_ZN12SimpleStringaSERKS_>
    value_.constObjectPointerValue_ = objectPtr;
 801ee44:	68fb      	ldr	r3, [r7, #12]
 801ee46:	687a      	ldr	r2, [r7, #4]
 801ee48:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801ee4a:	4b11      	ldr	r3, [pc, #68]	; (801ee90 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801ee4c:	681b      	ldr	r3, [r3, #0]
 801ee4e:	2b00      	cmp	r3, #0
 801ee50:	d019      	beq.n	801ee86 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801ee52:	4b0f      	ldr	r3, [pc, #60]	; (801ee90 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801ee54:	681a      	ldr	r2, [r3, #0]
 801ee56:	4b0e      	ldr	r3, [pc, #56]	; (801ee90 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801ee58:	681b      	ldr	r3, [r3, #0]
 801ee5a:	681b      	ldr	r3, [r3, #0]
 801ee5c:	3314      	adds	r3, #20
 801ee5e:	681b      	ldr	r3, [r3, #0]
 801ee60:	68b9      	ldr	r1, [r7, #8]
 801ee62:	4610      	mov	r0, r2
 801ee64:	4798      	blx	r3
 801ee66:	4602      	mov	r2, r0
 801ee68:	68fb      	ldr	r3, [r7, #12]
 801ee6a:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801ee6c:	4b08      	ldr	r3, [pc, #32]	; (801ee90 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801ee6e:	681a      	ldr	r2, [r3, #0]
 801ee70:	4b07      	ldr	r3, [pc, #28]	; (801ee90 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801ee72:	681b      	ldr	r3, [r3, #0]
 801ee74:	681b      	ldr	r3, [r3, #0]
 801ee76:	3318      	adds	r3, #24
 801ee78:	681b      	ldr	r3, [r3, #0]
 801ee7a:	68b9      	ldr	r1, [r7, #8]
 801ee7c:	4610      	mov	r0, r2
 801ee7e:	4798      	blx	r3
 801ee80:	4602      	mov	r2, r0
 801ee82:	68fb      	ldr	r3, [r7, #12]
 801ee84:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801ee86:	bf00      	nop
 801ee88:	3710      	adds	r7, #16
 801ee8a:	46bd      	mov	sp, r7
 801ee8c:	bd80      	pop	{r7, pc}
 801ee8e:	bf00      	nop
 801ee90:	20000f84 	.word	0x20000f84

0801ee94 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv>:

void MockNamedValue::setObjectPointer(const SimpleString& type, void* objectPtr)
{
 801ee94:	b580      	push	{r7, lr}
 801ee96:	b084      	sub	sp, #16
 801ee98:	af00      	add	r7, sp, #0
 801ee9a:	60f8      	str	r0, [r7, #12]
 801ee9c:	60b9      	str	r1, [r7, #8]
 801ee9e:	607a      	str	r2, [r7, #4]
    type_ = type;
 801eea0:	68fb      	ldr	r3, [r7, #12]
 801eea2:	330c      	adds	r3, #12
 801eea4:	68b9      	ldr	r1, [r7, #8]
 801eea6:	4618      	mov	r0, r3
 801eea8:	f7ef f8d9 	bl	800e05e <_ZN12SimpleStringaSERKS_>
    value_.objectPointerValue_ = objectPtr;
 801eeac:	68fb      	ldr	r3, [r7, #12]
 801eeae:	687a      	ldr	r2, [r7, #4]
 801eeb0:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801eeb2:	4b11      	ldr	r3, [pc, #68]	; (801eef8 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801eeb4:	681b      	ldr	r3, [r3, #0]
 801eeb6:	2b00      	cmp	r3, #0
 801eeb8:	d019      	beq.n	801eeee <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801eeba:	4b0f      	ldr	r3, [pc, #60]	; (801eef8 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801eebc:	681a      	ldr	r2, [r3, #0]
 801eebe:	4b0e      	ldr	r3, [pc, #56]	; (801eef8 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801eec0:	681b      	ldr	r3, [r3, #0]
 801eec2:	681b      	ldr	r3, [r3, #0]
 801eec4:	3314      	adds	r3, #20
 801eec6:	681b      	ldr	r3, [r3, #0]
 801eec8:	68b9      	ldr	r1, [r7, #8]
 801eeca:	4610      	mov	r0, r2
 801eecc:	4798      	blx	r3
 801eece:	4602      	mov	r2, r0
 801eed0:	68fb      	ldr	r3, [r7, #12]
 801eed2:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801eed4:	4b08      	ldr	r3, [pc, #32]	; (801eef8 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801eed6:	681a      	ldr	r2, [r3, #0]
 801eed8:	4b07      	ldr	r3, [pc, #28]	; (801eef8 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801eeda:	681b      	ldr	r3, [r3, #0]
 801eedc:	681b      	ldr	r3, [r3, #0]
 801eede:	3318      	adds	r3, #24
 801eee0:	681b      	ldr	r3, [r3, #0]
 801eee2:	68b9      	ldr	r1, [r7, #8]
 801eee4:	4610      	mov	r0, r2
 801eee6:	4798      	blx	r3
 801eee8:	4602      	mov	r2, r0
 801eeea:	68fb      	ldr	r3, [r7, #12]
 801eeec:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801eeee:	bf00      	nop
 801eef0:	3710      	adds	r7, #16
 801eef2:	46bd      	mov	sp, r7
 801eef4:	bd80      	pop	{r7, pc}
 801eef6:	bf00      	nop
 801eef8:	20000f84 	.word	0x20000f84

0801eefc <_ZN14MockNamedValue7setSizeEj>:

void MockNamedValue::setSize(size_t size)
{
 801eefc:	b480      	push	{r7}
 801eefe:	b083      	sub	sp, #12
 801ef00:	af00      	add	r7, sp, #0
 801ef02:	6078      	str	r0, [r7, #4]
 801ef04:	6039      	str	r1, [r7, #0]
    size_ = size;
 801ef06:	687b      	ldr	r3, [r7, #4]
 801ef08:	683a      	ldr	r2, [r7, #0]
 801ef0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 801ef0c:	bf00      	nop
 801ef0e:	370c      	adds	r7, #12
 801ef10:	46bd      	mov	sp, r7
 801ef12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef16:	4770      	bx	lr

0801ef18 <_ZN14MockNamedValue7setNameEPKc>:

void MockNamedValue::setName(const char* name)
{
 801ef18:	b590      	push	{r4, r7, lr}
 801ef1a:	b085      	sub	sp, #20
 801ef1c:	af00      	add	r7, sp, #0
 801ef1e:	6078      	str	r0, [r7, #4]
 801ef20:	6039      	str	r1, [r7, #0]
    name_ = name;
 801ef22:	687b      	ldr	r3, [r7, #4]
 801ef24:	1d1c      	adds	r4, r3, #4
 801ef26:	f107 0308 	add.w	r3, r7, #8
 801ef2a:	6839      	ldr	r1, [r7, #0]
 801ef2c:	4618      	mov	r0, r3
 801ef2e:	f7ef f82a 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801ef32:	f107 0308 	add.w	r3, r7, #8
 801ef36:	4619      	mov	r1, r3
 801ef38:	4620      	mov	r0, r4
 801ef3a:	f7ef f890 	bl	800e05e <_ZN12SimpleStringaSERKS_>
 801ef3e:	f107 0308 	add.w	r3, r7, #8
 801ef42:	4618      	mov	r0, r3
 801ef44:	f7ef fbd7 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
}
 801ef48:	bf00      	nop
 801ef4a:	3714      	adds	r7, #20
 801ef4c:	46bd      	mov	sp, r7
 801ef4e:	bd90      	pop	{r4, r7, pc}

0801ef50 <_ZNK14MockNamedValue7getNameEv>:

SimpleString MockNamedValue::getName() const
{
 801ef50:	b580      	push	{r7, lr}
 801ef52:	b082      	sub	sp, #8
 801ef54:	af00      	add	r7, sp, #0
 801ef56:	6078      	str	r0, [r7, #4]
 801ef58:	6039      	str	r1, [r7, #0]
    return name_;
 801ef5a:	683b      	ldr	r3, [r7, #0]
 801ef5c:	3304      	adds	r3, #4
 801ef5e:	4619      	mov	r1, r3
 801ef60:	6878      	ldr	r0, [r7, #4]
 801ef62:	f7ef f864 	bl	800e02e <_ZN12SimpleStringC1ERKS_>
}
 801ef66:	6878      	ldr	r0, [r7, #4]
 801ef68:	3708      	adds	r7, #8
 801ef6a:	46bd      	mov	sp, r7
 801ef6c:	bd80      	pop	{r7, pc}

0801ef6e <_ZNK14MockNamedValue7getTypeEv>:

SimpleString MockNamedValue::getType() const
{
 801ef6e:	b580      	push	{r7, lr}
 801ef70:	b082      	sub	sp, #8
 801ef72:	af00      	add	r7, sp, #0
 801ef74:	6078      	str	r0, [r7, #4]
 801ef76:	6039      	str	r1, [r7, #0]
    return type_;
 801ef78:	683b      	ldr	r3, [r7, #0]
 801ef7a:	330c      	adds	r3, #12
 801ef7c:	4619      	mov	r1, r3
 801ef7e:	6878      	ldr	r0, [r7, #4]
 801ef80:	f7ef f855 	bl	800e02e <_ZN12SimpleStringC1ERKS_>
}
 801ef84:	6878      	ldr	r0, [r7, #4]
 801ef86:	3708      	adds	r7, #8
 801ef88:	46bd      	mov	sp, r7
 801ef8a:	bd80      	pop	{r7, pc}

0801ef8c <_ZNK14MockNamedValue12getBoolValueEv>:

bool MockNamedValue::getBoolValue() const
{
 801ef8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ef8e:	b087      	sub	sp, #28
 801ef90:	af04      	add	r7, sp, #16
 801ef92:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("bool", type_.asCharString());
 801ef94:	f7f6 fbda 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 801ef98:	4604      	mov	r4, r0
 801ef9a:	6823      	ldr	r3, [r4, #0]
 801ef9c:	3324      	adds	r3, #36	; 0x24
 801ef9e:	681d      	ldr	r5, [r3, #0]
 801efa0:	687b      	ldr	r3, [r7, #4]
 801efa2:	330c      	adds	r3, #12
 801efa4:	4618      	mov	r0, r3
 801efa6:	f7ef fb79 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 801efaa:	4606      	mov	r6, r0
 801efac:	f7f6 fbde 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801efb0:	4603      	mov	r3, r0
 801efb2:	9302      	str	r3, [sp, #8]
 801efb4:	23c8      	movs	r3, #200	; 0xc8
 801efb6:	9301      	str	r3, [sp, #4]
 801efb8:	4b06      	ldr	r3, [pc, #24]	; (801efd4 <_ZNK14MockNamedValue12getBoolValueEv+0x48>)
 801efba:	9300      	str	r3, [sp, #0]
 801efbc:	2300      	movs	r3, #0
 801efbe:	4632      	mov	r2, r6
 801efc0:	4905      	ldr	r1, [pc, #20]	; (801efd8 <_ZNK14MockNamedValue12getBoolValueEv+0x4c>)
 801efc2:	4620      	mov	r0, r4
 801efc4:	47a8      	blx	r5
    return value_.boolValue_;
 801efc6:	687b      	ldr	r3, [r7, #4]
 801efc8:	7e1b      	ldrb	r3, [r3, #24]
}
 801efca:	4618      	mov	r0, r3
 801efcc:	370c      	adds	r7, #12
 801efce:	46bd      	mov	sp, r7
 801efd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801efd2:	bf00      	nop
 801efd4:	08028118 	.word	0x08028118
 801efd8:	080280e0 	.word	0x080280e0

0801efdc <_ZNK14MockNamedValue19getUnsignedIntValueEv>:

unsigned int MockNamedValue::getUnsignedIntValue() const
{
 801efdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801efde:	b089      	sub	sp, #36	; 0x24
 801efe0:	af04      	add	r7, sp, #16
 801efe2:	6078      	str	r0, [r7, #4]
    if(type_ == "int" && value_.intValue_ >= 0)
 801efe4:	687b      	ldr	r3, [r7, #4]
 801efe6:	f103 040c 	add.w	r4, r3, #12
 801efea:	f107 0308 	add.w	r3, r7, #8
 801efee:	4920      	ldr	r1, [pc, #128]	; (801f070 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x94>)
 801eff0:	4618      	mov	r0, r3
 801eff2:	f7ee ffc8 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801eff6:	2501      	movs	r5, #1
 801eff8:	f107 0308 	add.w	r3, r7, #8
 801effc:	4619      	mov	r1, r3
 801effe:	4620      	mov	r0, r4
 801f000:	f7ef fb85 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801f004:	4603      	mov	r3, r0
 801f006:	2b00      	cmp	r3, #0
 801f008:	d005      	beq.n	801f016 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801f00a:	687b      	ldr	r3, [r7, #4]
 801f00c:	699b      	ldr	r3, [r3, #24]
 801f00e:	2b00      	cmp	r3, #0
 801f010:	db01      	blt.n	801f016 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801f012:	2401      	movs	r4, #1
 801f014:	e000      	b.n	801f018 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3c>
 801f016:	2400      	movs	r4, #0
 801f018:	2d00      	cmp	r5, #0
 801f01a:	d004      	beq.n	801f026 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x4a>
 801f01c:	f107 0308 	add.w	r3, r7, #8
 801f020:	4618      	mov	r0, r3
 801f022:	f7ef fb68 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801f026:	2c00      	cmp	r4, #0
 801f028:	d002      	beq.n	801f030 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x54>
        return (unsigned int)value_.intValue_;
 801f02a:	687b      	ldr	r3, [r7, #4]
 801f02c:	699b      	ldr	r3, [r3, #24]
 801f02e:	e01a      	b.n	801f066 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x8a>
    else
    {
        STRCMP_EQUAL("unsigned int", type_.asCharString());
 801f030:	f7f6 fb8c 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 801f034:	4604      	mov	r4, r0
 801f036:	6823      	ldr	r3, [r4, #0]
 801f038:	3324      	adds	r3, #36	; 0x24
 801f03a:	681d      	ldr	r5, [r3, #0]
 801f03c:	687b      	ldr	r3, [r7, #4]
 801f03e:	330c      	adds	r3, #12
 801f040:	4618      	mov	r0, r3
 801f042:	f7ef fb2b 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 801f046:	4606      	mov	r6, r0
 801f048:	f7f6 fb90 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801f04c:	4603      	mov	r3, r0
 801f04e:	9302      	str	r3, [sp, #8]
 801f050:	23d2      	movs	r3, #210	; 0xd2
 801f052:	9301      	str	r3, [sp, #4]
 801f054:	4b07      	ldr	r3, [pc, #28]	; (801f074 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x98>)
 801f056:	9300      	str	r3, [sp, #0]
 801f058:	2300      	movs	r3, #0
 801f05a:	4632      	mov	r2, r6
 801f05c:	4906      	ldr	r1, [pc, #24]	; (801f078 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x9c>)
 801f05e:	4620      	mov	r0, r4
 801f060:	47a8      	blx	r5
        return value_.unsignedIntValue_;
 801f062:	687b      	ldr	r3, [r7, #4]
 801f064:	699b      	ldr	r3, [r3, #24]
    }
}
 801f066:	4618      	mov	r0, r3
 801f068:	3714      	adds	r7, #20
 801f06a:	46bd      	mov	sp, r7
 801f06c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f06e:	bf00      	nop
 801f070:	080280dc 	.word	0x080280dc
 801f074:	08028118 	.word	0x08028118
 801f078:	080280e8 	.word	0x080280e8

0801f07c <_ZNK14MockNamedValue11getIntValueEv>:

int MockNamedValue::getIntValue() const
{
 801f07c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f07e:	b087      	sub	sp, #28
 801f080:	af04      	add	r7, sp, #16
 801f082:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("int", type_.asCharString());
 801f084:	f7f6 fb62 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 801f088:	4604      	mov	r4, r0
 801f08a:	6823      	ldr	r3, [r4, #0]
 801f08c:	3324      	adds	r3, #36	; 0x24
 801f08e:	681d      	ldr	r5, [r3, #0]
 801f090:	687b      	ldr	r3, [r7, #4]
 801f092:	330c      	adds	r3, #12
 801f094:	4618      	mov	r0, r3
 801f096:	f7ef fb01 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 801f09a:	4606      	mov	r6, r0
 801f09c:	f7f6 fb66 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801f0a0:	4603      	mov	r3, r0
 801f0a2:	9302      	str	r3, [sp, #8]
 801f0a4:	23d9      	movs	r3, #217	; 0xd9
 801f0a6:	9301      	str	r3, [sp, #4]
 801f0a8:	4b06      	ldr	r3, [pc, #24]	; (801f0c4 <_ZNK14MockNamedValue11getIntValueEv+0x48>)
 801f0aa:	9300      	str	r3, [sp, #0]
 801f0ac:	2300      	movs	r3, #0
 801f0ae:	4632      	mov	r2, r6
 801f0b0:	4905      	ldr	r1, [pc, #20]	; (801f0c8 <_ZNK14MockNamedValue11getIntValueEv+0x4c>)
 801f0b2:	4620      	mov	r0, r4
 801f0b4:	47a8      	blx	r5
    return value_.intValue_;
 801f0b6:	687b      	ldr	r3, [r7, #4]
 801f0b8:	699b      	ldr	r3, [r3, #24]
}
 801f0ba:	4618      	mov	r0, r3
 801f0bc:	370c      	adds	r7, #12
 801f0be:	46bd      	mov	sp, r7
 801f0c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f0c2:	bf00      	nop
 801f0c4:	08028118 	.word	0x08028118
 801f0c8:	080280dc 	.word	0x080280dc

0801f0cc <_ZNK14MockNamedValue15getLongIntValueEv>:

long int MockNamedValue::getLongIntValue() const
{
 801f0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f0ce:	b08b      	sub	sp, #44	; 0x2c
 801f0d0:	af04      	add	r7, sp, #16
 801f0d2:	6078      	str	r0, [r7, #4]
    if(type_ == "int")
 801f0d4:	687b      	ldr	r3, [r7, #4]
 801f0d6:	f103 040c 	add.w	r4, r3, #12
 801f0da:	f107 0308 	add.w	r3, r7, #8
 801f0de:	4928      	ldr	r1, [pc, #160]	; (801f180 <_ZNK14MockNamedValue15getLongIntValueEv+0xb4>)
 801f0e0:	4618      	mov	r0, r3
 801f0e2:	f7ee ff50 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801f0e6:	f107 0308 	add.w	r3, r7, #8
 801f0ea:	4619      	mov	r1, r3
 801f0ec:	4620      	mov	r0, r4
 801f0ee:	f7ef fb0e 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801f0f2:	4603      	mov	r3, r0
 801f0f4:	461c      	mov	r4, r3
 801f0f6:	f107 0308 	add.w	r3, r7, #8
 801f0fa:	4618      	mov	r0, r3
 801f0fc:	f7ef fafb 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801f100:	2c00      	cmp	r4, #0
 801f102:	d002      	beq.n	801f10a <_ZNK14MockNamedValue15getLongIntValueEv+0x3e>
        return value_.intValue_;
 801f104:	687b      	ldr	r3, [r7, #4]
 801f106:	699b      	ldr	r3, [r3, #24]
 801f108:	e035      	b.n	801f176 <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else if(type_ == "unsigned int")
 801f10a:	687b      	ldr	r3, [r7, #4]
 801f10c:	f103 040c 	add.w	r4, r3, #12
 801f110:	f107 0310 	add.w	r3, r7, #16
 801f114:	491b      	ldr	r1, [pc, #108]	; (801f184 <_ZNK14MockNamedValue15getLongIntValueEv+0xb8>)
 801f116:	4618      	mov	r0, r3
 801f118:	f7ee ff35 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801f11c:	f107 0310 	add.w	r3, r7, #16
 801f120:	4619      	mov	r1, r3
 801f122:	4620      	mov	r0, r4
 801f124:	f7ef faf3 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801f128:	4603      	mov	r3, r0
 801f12a:	461c      	mov	r4, r3
 801f12c:	f107 0310 	add.w	r3, r7, #16
 801f130:	4618      	mov	r0, r3
 801f132:	f7ef fae0 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801f136:	2c00      	cmp	r4, #0
 801f138:	d002      	beq.n	801f140 <_ZNK14MockNamedValue15getLongIntValueEv+0x74>
        return (long int)value_.unsignedIntValue_;
 801f13a:	687b      	ldr	r3, [r7, #4]
 801f13c:	699b      	ldr	r3, [r3, #24]
 801f13e:	e01a      	b.n	801f176 <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else
    {
        STRCMP_EQUAL("long int", type_.asCharString());
 801f140:	f7f6 fb04 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 801f144:	4604      	mov	r4, r0
 801f146:	6823      	ldr	r3, [r4, #0]
 801f148:	3324      	adds	r3, #36	; 0x24
 801f14a:	681d      	ldr	r5, [r3, #0]
 801f14c:	687b      	ldr	r3, [r7, #4]
 801f14e:	330c      	adds	r3, #12
 801f150:	4618      	mov	r0, r3
 801f152:	f7ef faa3 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 801f156:	4606      	mov	r6, r0
 801f158:	f7f6 fb08 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801f15c:	4603      	mov	r3, r0
 801f15e:	9302      	str	r3, [sp, #8]
 801f160:	23e5      	movs	r3, #229	; 0xe5
 801f162:	9301      	str	r3, [sp, #4]
 801f164:	4b08      	ldr	r3, [pc, #32]	; (801f188 <_ZNK14MockNamedValue15getLongIntValueEv+0xbc>)
 801f166:	9300      	str	r3, [sp, #0]
 801f168:	2300      	movs	r3, #0
 801f16a:	4632      	mov	r2, r6
 801f16c:	4907      	ldr	r1, [pc, #28]	; (801f18c <_ZNK14MockNamedValue15getLongIntValueEv+0xc0>)
 801f16e:	4620      	mov	r0, r4
 801f170:	47a8      	blx	r5
        return value_.longIntValue_;
 801f172:	687b      	ldr	r3, [r7, #4]
 801f174:	699b      	ldr	r3, [r3, #24]
    }
}
 801f176:	4618      	mov	r0, r3
 801f178:	371c      	adds	r7, #28
 801f17a:	46bd      	mov	sp, r7
 801f17c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f17e:	bf00      	nop
 801f180:	080280dc 	.word	0x080280dc
 801f184:	080280e8 	.word	0x080280e8
 801f188:	08028118 	.word	0x08028118
 801f18c:	080280f8 	.word	0x080280f8

0801f190 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>:

unsigned long int MockNamedValue::getUnsignedLongIntValue() const
{
 801f190:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f192:	b08d      	sub	sp, #52	; 0x34
 801f194:	af04      	add	r7, sp, #16
 801f196:	6078      	str	r0, [r7, #4]
    if(type_ == "unsigned int")
 801f198:	687b      	ldr	r3, [r7, #4]
 801f19a:	f103 040c 	add.w	r4, r3, #12
 801f19e:	f107 0308 	add.w	r3, r7, #8
 801f1a2:	4940      	ldr	r1, [pc, #256]	; (801f2a4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x114>)
 801f1a4:	4618      	mov	r0, r3
 801f1a6:	f7ee feee 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801f1aa:	f107 0308 	add.w	r3, r7, #8
 801f1ae:	4619      	mov	r1, r3
 801f1b0:	4620      	mov	r0, r4
 801f1b2:	f7ef faac 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801f1b6:	4603      	mov	r3, r0
 801f1b8:	461c      	mov	r4, r3
 801f1ba:	f107 0308 	add.w	r3, r7, #8
 801f1be:	4618      	mov	r0, r3
 801f1c0:	f7ef fa99 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801f1c4:	2c00      	cmp	r4, #0
 801f1c6:	d002      	beq.n	801f1ce <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x3e>
        return value_.unsignedIntValue_;
 801f1c8:	687b      	ldr	r3, [r7, #4]
 801f1ca:	699b      	ldr	r3, [r3, #24]
 801f1cc:	e066      	b.n	801f29c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "int" && value_.intValue_ >= 0)
 801f1ce:	687b      	ldr	r3, [r7, #4]
 801f1d0:	f103 040c 	add.w	r4, r3, #12
 801f1d4:	f107 0310 	add.w	r3, r7, #16
 801f1d8:	4933      	ldr	r1, [pc, #204]	; (801f2a8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x118>)
 801f1da:	4618      	mov	r0, r3
 801f1dc:	f7ee fed3 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801f1e0:	2501      	movs	r5, #1
 801f1e2:	f107 0310 	add.w	r3, r7, #16
 801f1e6:	4619      	mov	r1, r3
 801f1e8:	4620      	mov	r0, r4
 801f1ea:	f7ef fa90 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801f1ee:	4603      	mov	r3, r0
 801f1f0:	2b00      	cmp	r3, #0
 801f1f2:	d005      	beq.n	801f200 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801f1f4:	687b      	ldr	r3, [r7, #4]
 801f1f6:	699b      	ldr	r3, [r3, #24]
 801f1f8:	2b00      	cmp	r3, #0
 801f1fa:	db01      	blt.n	801f200 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801f1fc:	2401      	movs	r4, #1
 801f1fe:	e000      	b.n	801f202 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x72>
 801f200:	2400      	movs	r4, #0
 801f202:	2d00      	cmp	r5, #0
 801f204:	d004      	beq.n	801f210 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x80>
 801f206:	f107 0310 	add.w	r3, r7, #16
 801f20a:	4618      	mov	r0, r3
 801f20c:	f7ef fa73 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801f210:	2c00      	cmp	r4, #0
 801f212:	d002      	beq.n	801f21a <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x8a>
        return (unsigned long int)value_.intValue_;
 801f214:	687b      	ldr	r3, [r7, #4]
 801f216:	699b      	ldr	r3, [r3, #24]
 801f218:	e040      	b.n	801f29c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "long int" && value_.longIntValue_ >= 0)
 801f21a:	687b      	ldr	r3, [r7, #4]
 801f21c:	f103 040c 	add.w	r4, r3, #12
 801f220:	f107 0318 	add.w	r3, r7, #24
 801f224:	4921      	ldr	r1, [pc, #132]	; (801f2ac <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x11c>)
 801f226:	4618      	mov	r0, r3
 801f228:	f7ee fead 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801f22c:	2501      	movs	r5, #1
 801f22e:	f107 0318 	add.w	r3, r7, #24
 801f232:	4619      	mov	r1, r3
 801f234:	4620      	mov	r0, r4
 801f236:	f7ef fa6a 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801f23a:	4603      	mov	r3, r0
 801f23c:	2b00      	cmp	r3, #0
 801f23e:	d005      	beq.n	801f24c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801f240:	687b      	ldr	r3, [r7, #4]
 801f242:	699b      	ldr	r3, [r3, #24]
 801f244:	2b00      	cmp	r3, #0
 801f246:	db01      	blt.n	801f24c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801f248:	2401      	movs	r4, #1
 801f24a:	e000      	b.n	801f24e <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbe>
 801f24c:	2400      	movs	r4, #0
 801f24e:	2d00      	cmp	r5, #0
 801f250:	d004      	beq.n	801f25c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xcc>
 801f252:	f107 0318 	add.w	r3, r7, #24
 801f256:	4618      	mov	r0, r3
 801f258:	f7ef fa4d 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801f25c:	2c00      	cmp	r4, #0
 801f25e:	d002      	beq.n	801f266 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xd6>
        return (unsigned long int)value_.longIntValue_;
 801f260:	687b      	ldr	r3, [r7, #4]
 801f262:	699b      	ldr	r3, [r3, #24]
 801f264:	e01a      	b.n	801f29c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else
    {
        STRCMP_EQUAL("unsigned long int", type_.asCharString());
 801f266:	f7f6 fa71 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 801f26a:	4604      	mov	r4, r0
 801f26c:	6823      	ldr	r3, [r4, #0]
 801f26e:	3324      	adds	r3, #36	; 0x24
 801f270:	681d      	ldr	r5, [r3, #0]
 801f272:	687b      	ldr	r3, [r7, #4]
 801f274:	330c      	adds	r3, #12
 801f276:	4618      	mov	r0, r3
 801f278:	f7ef fa10 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 801f27c:	4606      	mov	r6, r0
 801f27e:	f7f6 fa75 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801f282:	4603      	mov	r3, r0
 801f284:	9302      	str	r3, [sp, #8]
 801f286:	23f4      	movs	r3, #244	; 0xf4
 801f288:	9301      	str	r3, [sp, #4]
 801f28a:	4b09      	ldr	r3, [pc, #36]	; (801f2b0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x120>)
 801f28c:	9300      	str	r3, [sp, #0]
 801f28e:	2300      	movs	r3, #0
 801f290:	4632      	mov	r2, r6
 801f292:	4908      	ldr	r1, [pc, #32]	; (801f2b4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x124>)
 801f294:	4620      	mov	r0, r4
 801f296:	47a8      	blx	r5
        return value_.unsignedLongIntValue_;
 801f298:	687b      	ldr	r3, [r7, #4]
 801f29a:	699b      	ldr	r3, [r3, #24]
    }
}
 801f29c:	4618      	mov	r0, r3
 801f29e:	3724      	adds	r7, #36	; 0x24
 801f2a0:	46bd      	mov	sp, r7
 801f2a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f2a4:	080280e8 	.word	0x080280e8
 801f2a8:	080280dc 	.word	0x080280dc
 801f2ac:	080280f8 	.word	0x080280f8
 801f2b0:	08028118 	.word	0x08028118
 801f2b4:	08028104 	.word	0x08028104

0801f2b8 <_ZNK14MockNamedValue19getLongLongIntValueEv>:
}

#else

cpputest_longlong MockNamedValue::getLongLongIntValue() const
{
 801f2b8:	b5b0      	push	{r4, r5, r7, lr}
 801f2ba:	b084      	sub	sp, #16
 801f2bc:	af02      	add	r7, sp, #8
 801f2be:	6078      	str	r0, [r7, #4]
 801f2c0:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801f2c2:	f7f6 fa43 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 801f2c6:	4604      	mov	r4, r0
 801f2c8:	6823      	ldr	r3, [r4, #0]
 801f2ca:	3368      	adds	r3, #104	; 0x68
 801f2cc:	681d      	ldr	r5, [r3, #0]
 801f2ce:	f7f6 fa4d 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801f2d2:	4603      	mov	r3, r0
 801f2d4:	9300      	str	r3, [sp, #0]
 801f2d6:	f240 1323 	movw	r3, #291	; 0x123
 801f2da:	4a06      	ldr	r2, [pc, #24]	; (801f2f4 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x3c>)
 801f2dc:	4906      	ldr	r1, [pc, #24]	; (801f2f8 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x40>)
 801f2de:	4620      	mov	r0, r4
 801f2e0:	47a8      	blx	r5
    return cpputest_longlong(0);
 801f2e2:	2100      	movs	r1, #0
 801f2e4:	6878      	ldr	r0, [r7, #4]
 801f2e6:	f7ec fe85 	bl	800bff4 <_ZN17cpputest_longlongC1Ei>
}
 801f2ea:	6878      	ldr	r0, [r7, #4]
 801f2ec:	3708      	adds	r7, #8
 801f2ee:	46bd      	mov	sp, r7
 801f2f0:	bdb0      	pop	{r4, r5, r7, pc}
 801f2f2:	bf00      	nop
 801f2f4:	08028118 	.word	0x08028118
 801f2f8:	08028134 	.word	0x08028134

0801f2fc <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockNamedValue::getUnsignedLongLongIntValue() const
{
 801f2fc:	b5b0      	push	{r4, r5, r7, lr}
 801f2fe:	b084      	sub	sp, #16
 801f300:	af02      	add	r7, sp, #8
 801f302:	6078      	str	r0, [r7, #4]
 801f304:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801f306:	f7f6 fa21 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 801f30a:	4604      	mov	r4, r0
 801f30c:	6823      	ldr	r3, [r4, #0]
 801f30e:	3368      	adds	r3, #104	; 0x68
 801f310:	681d      	ldr	r5, [r3, #0]
 801f312:	f7f6 fa2b 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801f316:	4603      	mov	r3, r0
 801f318:	9300      	str	r3, [sp, #0]
 801f31a:	f240 1329 	movw	r3, #297	; 0x129
 801f31e:	4a06      	ldr	r2, [pc, #24]	; (801f338 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x3c>)
 801f320:	4906      	ldr	r1, [pc, #24]	; (801f33c <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x40>)
 801f322:	4620      	mov	r0, r4
 801f324:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801f326:	2100      	movs	r1, #0
 801f328:	6878      	ldr	r0, [r7, #4]
 801f32a:	f7ec fe6f 	bl	800c00c <_ZN18cpputest_ulonglongC1Ei>
}
 801f32e:	6878      	ldr	r0, [r7, #4]
 801f330:	3708      	adds	r7, #8
 801f332:	46bd      	mov	sp, r7
 801f334:	bdb0      	pop	{r4, r5, r7, pc}
 801f336:	bf00      	nop
 801f338:	08028118 	.word	0x08028118
 801f33c:	08028154 	.word	0x08028154

0801f340 <_ZNK14MockNamedValue14getDoubleValueEv>:

#endif

double MockNamedValue::getDoubleValue() const
{
 801f340:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f342:	b087      	sub	sp, #28
 801f344:	af04      	add	r7, sp, #16
 801f346:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801f348:	f7f6 fa00 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 801f34c:	4604      	mov	r4, r0
 801f34e:	6823      	ldr	r3, [r4, #0]
 801f350:	3324      	adds	r3, #36	; 0x24
 801f352:	681d      	ldr	r5, [r3, #0]
 801f354:	687b      	ldr	r3, [r7, #4]
 801f356:	330c      	adds	r3, #12
 801f358:	4618      	mov	r0, r3
 801f35a:	f7ef f99f 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 801f35e:	4606      	mov	r6, r0
 801f360:	f7f6 fa04 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801f364:	4603      	mov	r3, r0
 801f366:	9302      	str	r3, [sp, #8]
 801f368:	f240 1331 	movw	r3, #305	; 0x131
 801f36c:	9301      	str	r3, [sp, #4]
 801f36e:	4b09      	ldr	r3, [pc, #36]	; (801f394 <_ZNK14MockNamedValue14getDoubleValueEv+0x54>)
 801f370:	9300      	str	r3, [sp, #0]
 801f372:	2300      	movs	r3, #0
 801f374:	4632      	mov	r2, r6
 801f376:	4908      	ldr	r1, [pc, #32]	; (801f398 <_ZNK14MockNamedValue14getDoubleValueEv+0x58>)
 801f378:	4620      	mov	r0, r4
 801f37a:	47a8      	blx	r5
    return value_.doubleValue_.value;
 801f37c:	687b      	ldr	r3, [r7, #4]
 801f37e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801f382:	ec43 2b17 	vmov	d7, r2, r3
}
 801f386:	eeb0 0a47 	vmov.f32	s0, s14
 801f38a:	eef0 0a67 	vmov.f32	s1, s15
 801f38e:	370c      	adds	r7, #12
 801f390:	46bd      	mov	sp, r7
 801f392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f394:	08028118 	.word	0x08028118
 801f398:	08028180 	.word	0x08028180

0801f39c <_ZNK14MockNamedValue18getDoubleToleranceEv>:

double MockNamedValue::getDoubleTolerance() const
{
 801f39c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f39e:	b087      	sub	sp, #28
 801f3a0:	af04      	add	r7, sp, #16
 801f3a2:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801f3a4:	f7f6 f9d2 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 801f3a8:	4604      	mov	r4, r0
 801f3aa:	6823      	ldr	r3, [r4, #0]
 801f3ac:	3324      	adds	r3, #36	; 0x24
 801f3ae:	681d      	ldr	r5, [r3, #0]
 801f3b0:	687b      	ldr	r3, [r7, #4]
 801f3b2:	330c      	adds	r3, #12
 801f3b4:	4618      	mov	r0, r3
 801f3b6:	f7ef f971 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 801f3ba:	4606      	mov	r6, r0
 801f3bc:	f7f6 f9d6 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801f3c0:	4603      	mov	r3, r0
 801f3c2:	9302      	str	r3, [sp, #8]
 801f3c4:	f240 1337 	movw	r3, #311	; 0x137
 801f3c8:	9301      	str	r3, [sp, #4]
 801f3ca:	4b09      	ldr	r3, [pc, #36]	; (801f3f0 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x54>)
 801f3cc:	9300      	str	r3, [sp, #0]
 801f3ce:	2300      	movs	r3, #0
 801f3d0:	4632      	mov	r2, r6
 801f3d2:	4908      	ldr	r1, [pc, #32]	; (801f3f4 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x58>)
 801f3d4:	4620      	mov	r0, r4
 801f3d6:	47a8      	blx	r5
    return value_.doubleValue_.tolerance;
 801f3d8:	687b      	ldr	r3, [r7, #4]
 801f3da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801f3de:	ec43 2b17 	vmov	d7, r2, r3
}
 801f3e2:	eeb0 0a47 	vmov.f32	s0, s14
 801f3e6:	eef0 0a67 	vmov.f32	s1, s15
 801f3ea:	370c      	adds	r7, #12
 801f3ec:	46bd      	mov	sp, r7
 801f3ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f3f0:	08028118 	.word	0x08028118
 801f3f4:	08028180 	.word	0x08028180

0801f3f8 <_ZNK14MockNamedValue14getStringValueEv>:

const char* MockNamedValue::getStringValue() const
{
 801f3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f3fa:	b087      	sub	sp, #28
 801f3fc:	af04      	add	r7, sp, #16
 801f3fe:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const char*", type_.asCharString());
 801f400:	f7f6 f9a4 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 801f404:	4604      	mov	r4, r0
 801f406:	6823      	ldr	r3, [r4, #0]
 801f408:	3324      	adds	r3, #36	; 0x24
 801f40a:	681d      	ldr	r5, [r3, #0]
 801f40c:	687b      	ldr	r3, [r7, #4]
 801f40e:	330c      	adds	r3, #12
 801f410:	4618      	mov	r0, r3
 801f412:	f7ef f943 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 801f416:	4606      	mov	r6, r0
 801f418:	f7f6 f9a8 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801f41c:	4603      	mov	r3, r0
 801f41e:	9302      	str	r3, [sp, #8]
 801f420:	f240 133d 	movw	r3, #317	; 0x13d
 801f424:	9301      	str	r3, [sp, #4]
 801f426:	4b06      	ldr	r3, [pc, #24]	; (801f440 <_ZNK14MockNamedValue14getStringValueEv+0x48>)
 801f428:	9300      	str	r3, [sp, #0]
 801f42a:	2300      	movs	r3, #0
 801f42c:	4632      	mov	r2, r6
 801f42e:	4905      	ldr	r1, [pc, #20]	; (801f444 <_ZNK14MockNamedValue14getStringValueEv+0x4c>)
 801f430:	4620      	mov	r0, r4
 801f432:	47a8      	blx	r5
    return value_.stringValue_;
 801f434:	687b      	ldr	r3, [r7, #4]
 801f436:	699b      	ldr	r3, [r3, #24]
}
 801f438:	4618      	mov	r0, r3
 801f43a:	370c      	adds	r7, #12
 801f43c:	46bd      	mov	sp, r7
 801f43e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f440:	08028118 	.word	0x08028118
 801f444:	080281a8 	.word	0x080281a8

0801f448 <_ZNK14MockNamedValue15getPointerValueEv>:

void* MockNamedValue::getPointerValue() const
{
 801f448:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f44a:	b087      	sub	sp, #28
 801f44c:	af04      	add	r7, sp, #16
 801f44e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void*", type_.asCharString());
 801f450:	f7f6 f97c 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 801f454:	4604      	mov	r4, r0
 801f456:	6823      	ldr	r3, [r4, #0]
 801f458:	3324      	adds	r3, #36	; 0x24
 801f45a:	681d      	ldr	r5, [r3, #0]
 801f45c:	687b      	ldr	r3, [r7, #4]
 801f45e:	330c      	adds	r3, #12
 801f460:	4618      	mov	r0, r3
 801f462:	f7ef f91b 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 801f466:	4606      	mov	r6, r0
 801f468:	f7f6 f980 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801f46c:	4603      	mov	r3, r0
 801f46e:	9302      	str	r3, [sp, #8]
 801f470:	f240 1343 	movw	r3, #323	; 0x143
 801f474:	9301      	str	r3, [sp, #4]
 801f476:	4b06      	ldr	r3, [pc, #24]	; (801f490 <_ZNK14MockNamedValue15getPointerValueEv+0x48>)
 801f478:	9300      	str	r3, [sp, #0]
 801f47a:	2300      	movs	r3, #0
 801f47c:	4632      	mov	r2, r6
 801f47e:	4905      	ldr	r1, [pc, #20]	; (801f494 <_ZNK14MockNamedValue15getPointerValueEv+0x4c>)
 801f480:	4620      	mov	r0, r4
 801f482:	47a8      	blx	r5
    return value_.pointerValue_;
 801f484:	687b      	ldr	r3, [r7, #4]
 801f486:	699b      	ldr	r3, [r3, #24]
}
 801f488:	4618      	mov	r0, r3
 801f48a:	370c      	adds	r7, #12
 801f48c:	46bd      	mov	sp, r7
 801f48e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f490:	08028118 	.word	0x08028118
 801f494:	08028188 	.word	0x08028188

0801f498 <_ZNK14MockNamedValue20getConstPointerValueEv>:

const void* MockNamedValue::getConstPointerValue() const
{
 801f498:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f49a:	b087      	sub	sp, #28
 801f49c:	af04      	add	r7, sp, #16
 801f49e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const void*", type_.asCharString());
 801f4a0:	f7f6 f954 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 801f4a4:	4604      	mov	r4, r0
 801f4a6:	6823      	ldr	r3, [r4, #0]
 801f4a8:	3324      	adds	r3, #36	; 0x24
 801f4aa:	681d      	ldr	r5, [r3, #0]
 801f4ac:	687b      	ldr	r3, [r7, #4]
 801f4ae:	330c      	adds	r3, #12
 801f4b0:	4618      	mov	r0, r3
 801f4b2:	f7ef f8f3 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 801f4b6:	4606      	mov	r6, r0
 801f4b8:	f7f6 f958 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801f4bc:	4603      	mov	r3, r0
 801f4be:	9302      	str	r3, [sp, #8]
 801f4c0:	f240 1349 	movw	r3, #329	; 0x149
 801f4c4:	9301      	str	r3, [sp, #4]
 801f4c6:	4b06      	ldr	r3, [pc, #24]	; (801f4e0 <_ZNK14MockNamedValue20getConstPointerValueEv+0x48>)
 801f4c8:	9300      	str	r3, [sp, #0]
 801f4ca:	2300      	movs	r3, #0
 801f4cc:	4632      	mov	r2, r6
 801f4ce:	4905      	ldr	r1, [pc, #20]	; (801f4e4 <_ZNK14MockNamedValue20getConstPointerValueEv+0x4c>)
 801f4d0:	4620      	mov	r0, r4
 801f4d2:	47a8      	blx	r5
    return value_.pointerValue_;
 801f4d4:	687b      	ldr	r3, [r7, #4]
 801f4d6:	699b      	ldr	r3, [r3, #24]
}
 801f4d8:	4618      	mov	r0, r3
 801f4da:	370c      	adds	r7, #12
 801f4dc:	46bd      	mov	sp, r7
 801f4de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f4e0:	08028118 	.word	0x08028118
 801f4e4:	08028190 	.word	0x08028190

0801f4e8 <_ZNK14MockNamedValue23getFunctionPointerValueEv>:

void (*MockNamedValue::getFunctionPointerValue() const)()
{
 801f4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f4ea:	b087      	sub	sp, #28
 801f4ec:	af04      	add	r7, sp, #16
 801f4ee:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void (*)()", type_.asCharString());
 801f4f0:	f7f6 f92c 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 801f4f4:	4604      	mov	r4, r0
 801f4f6:	6823      	ldr	r3, [r4, #0]
 801f4f8:	3324      	adds	r3, #36	; 0x24
 801f4fa:	681d      	ldr	r5, [r3, #0]
 801f4fc:	687b      	ldr	r3, [r7, #4]
 801f4fe:	330c      	adds	r3, #12
 801f500:	4618      	mov	r0, r3
 801f502:	f7ef f8cb 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 801f506:	4606      	mov	r6, r0
 801f508:	f7f6 f930 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801f50c:	4603      	mov	r3, r0
 801f50e:	9302      	str	r3, [sp, #8]
 801f510:	f240 134f 	movw	r3, #335	; 0x14f
 801f514:	9301      	str	r3, [sp, #4]
 801f516:	4b06      	ldr	r3, [pc, #24]	; (801f530 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x48>)
 801f518:	9300      	str	r3, [sp, #0]
 801f51a:	2300      	movs	r3, #0
 801f51c:	4632      	mov	r2, r6
 801f51e:	4905      	ldr	r1, [pc, #20]	; (801f534 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x4c>)
 801f520:	4620      	mov	r0, r4
 801f522:	47a8      	blx	r5
    return value_.functionPointerValue_;
 801f524:	687b      	ldr	r3, [r7, #4]
 801f526:	699b      	ldr	r3, [r3, #24]
}
 801f528:	4618      	mov	r0, r3
 801f52a:	370c      	adds	r7, #12
 801f52c:	46bd      	mov	sp, r7
 801f52e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f530:	08028118 	.word	0x08028118
 801f534:	0802819c 	.word	0x0802819c

0801f538 <_ZNK14MockNamedValue15getMemoryBufferEv>:

const unsigned char* MockNamedValue::getMemoryBuffer() const
{
 801f538:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f53a:	b087      	sub	sp, #28
 801f53c:	af04      	add	r7, sp, #16
 801f53e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const unsigned char*", type_.asCharString());
 801f540:	f7f6 f904 	bl	801574c <_ZN10UtestShell10getCurrentEv>
 801f544:	4604      	mov	r4, r0
 801f546:	6823      	ldr	r3, [r4, #0]
 801f548:	3324      	adds	r3, #36	; 0x24
 801f54a:	681d      	ldr	r5, [r3, #0]
 801f54c:	687b      	ldr	r3, [r7, #4]
 801f54e:	330c      	adds	r3, #12
 801f550:	4618      	mov	r0, r3
 801f552:	f7ef f8a3 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 801f556:	4606      	mov	r6, r0
 801f558:	f7f6 f908 	bl	801576c <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801f55c:	4603      	mov	r3, r0
 801f55e:	9302      	str	r3, [sp, #8]
 801f560:	f240 1355 	movw	r3, #341	; 0x155
 801f564:	9301      	str	r3, [sp, #4]
 801f566:	4b06      	ldr	r3, [pc, #24]	; (801f580 <_ZNK14MockNamedValue15getMemoryBufferEv+0x48>)
 801f568:	9300      	str	r3, [sp, #0]
 801f56a:	2300      	movs	r3, #0
 801f56c:	4632      	mov	r2, r6
 801f56e:	4905      	ldr	r1, [pc, #20]	; (801f584 <_ZNK14MockNamedValue15getMemoryBufferEv+0x4c>)
 801f570:	4620      	mov	r0, r4
 801f572:	47a8      	blx	r5
    return value_.memoryBufferValue_;
 801f574:	687b      	ldr	r3, [r7, #4]
 801f576:	699b      	ldr	r3, [r3, #24]
}
 801f578:	4618      	mov	r0, r3
 801f57a:	370c      	adds	r7, #12
 801f57c:	46bd      	mov	sp, r7
 801f57e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f580:	08028118 	.word	0x08028118
 801f584:	080281b4 	.word	0x080281b4

0801f588 <_ZNK14MockNamedValue21getConstObjectPointerEv>:

const void* MockNamedValue::getConstObjectPointer() const
{
 801f588:	b480      	push	{r7}
 801f58a:	b083      	sub	sp, #12
 801f58c:	af00      	add	r7, sp, #0
 801f58e:	6078      	str	r0, [r7, #4]
    return value_.constObjectPointerValue_;
 801f590:	687b      	ldr	r3, [r7, #4]
 801f592:	699b      	ldr	r3, [r3, #24]
}
 801f594:	4618      	mov	r0, r3
 801f596:	370c      	adds	r7, #12
 801f598:	46bd      	mov	sp, r7
 801f59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f59e:	4770      	bx	lr

0801f5a0 <_ZNK14MockNamedValue16getObjectPointerEv>:

void* MockNamedValue::getObjectPointer() const
{
 801f5a0:	b480      	push	{r7}
 801f5a2:	b083      	sub	sp, #12
 801f5a4:	af00      	add	r7, sp, #0
 801f5a6:	6078      	str	r0, [r7, #4]
    return value_.objectPointerValue_;
 801f5a8:	687b      	ldr	r3, [r7, #4]
 801f5aa:	699b      	ldr	r3, [r3, #24]
}
 801f5ac:	4618      	mov	r0, r3
 801f5ae:	370c      	adds	r7, #12
 801f5b0:	46bd      	mov	sp, r7
 801f5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5b6:	4770      	bx	lr

0801f5b8 <_ZNK14MockNamedValue7getSizeEv>:

size_t MockNamedValue::getSize() const
{
 801f5b8:	b480      	push	{r7}
 801f5ba:	b083      	sub	sp, #12
 801f5bc:	af00      	add	r7, sp, #0
 801f5be:	6078      	str	r0, [r7, #4]
    return size_;
 801f5c0:	687b      	ldr	r3, [r7, #4]
 801f5c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801f5c4:	4618      	mov	r0, r3
 801f5c6:	370c      	adds	r7, #12
 801f5c8:	46bd      	mov	sp, r7
 801f5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5ce:	4770      	bx	lr

0801f5d0 <_ZNK14MockNamedValue13getComparatorEv>:

MockNamedValueComparator* MockNamedValue::getComparator() const
{
 801f5d0:	b480      	push	{r7}
 801f5d2:	b083      	sub	sp, #12
 801f5d4:	af00      	add	r7, sp, #0
 801f5d6:	6078      	str	r0, [r7, #4]
    return comparator_;
 801f5d8:	687b      	ldr	r3, [r7, #4]
 801f5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 801f5dc:	4618      	mov	r0, r3
 801f5de:	370c      	adds	r7, #12
 801f5e0:	46bd      	mov	sp, r7
 801f5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5e6:	4770      	bx	lr

0801f5e8 <_ZNK14MockNamedValue9getCopierEv>:

MockNamedValueCopier* MockNamedValue::getCopier() const
{
 801f5e8:	b480      	push	{r7}
 801f5ea:	b083      	sub	sp, #12
 801f5ec:	af00      	add	r7, sp, #0
 801f5ee:	6078      	str	r0, [r7, #4]
    return copier_;
 801f5f0:	687b      	ldr	r3, [r7, #4]
 801f5f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 801f5f4:	4618      	mov	r0, r3
 801f5f6:	370c      	adds	r7, #12
 801f5f8:	46bd      	mov	sp, r7
 801f5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5fe:	4770      	bx	lr

0801f600 <_ZNK14MockNamedValue6equalsERKS_>:

bool MockNamedValue::equals(const MockNamedValue& p) const
{
 801f600:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f602:	b0cd      	sub	sp, #308	; 0x134
 801f604:	af00      	add	r7, sp, #0
 801f606:	1d3b      	adds	r3, r7, #4
 801f608:	6018      	str	r0, [r3, #0]
 801f60a:	463b      	mov	r3, r7
 801f60c:	6019      	str	r1, [r3, #0]
    if((type_ == "long int") && (p.type_ == "int"))
 801f60e:	2500      	movs	r5, #0
 801f610:	1d3b      	adds	r3, r7, #4
 801f612:	681b      	ldr	r3, [r3, #0]
 801f614:	f103 040c 	add.w	r4, r3, #12
 801f618:	f107 0308 	add.w	r3, r7, #8
 801f61c:	49bb      	ldr	r1, [pc, #748]	; (801f90c <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801f61e:	4618      	mov	r0, r3
 801f620:	f7ee fcb1 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801f624:	2601      	movs	r6, #1
 801f626:	f107 0308 	add.w	r3, r7, #8
 801f62a:	4619      	mov	r1, r3
 801f62c:	4620      	mov	r0, r4
 801f62e:	f7ef f86e 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801f632:	4603      	mov	r3, r0
 801f634:	2b00      	cmp	r3, #0
 801f636:	d015      	beq.n	801f664 <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801f638:	463b      	mov	r3, r7
 801f63a:	681b      	ldr	r3, [r3, #0]
 801f63c:	f103 040c 	add.w	r4, r3, #12
 801f640:	f107 0310 	add.w	r3, r7, #16
 801f644:	49b2      	ldr	r1, [pc, #712]	; (801f910 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801f646:	4618      	mov	r0, r3
 801f648:	f7ee fc9d 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801f64c:	2501      	movs	r5, #1
 801f64e:	f107 0310 	add.w	r3, r7, #16
 801f652:	4619      	mov	r1, r3
 801f654:	4620      	mov	r0, r4
 801f656:	f7ef f85a 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801f65a:	4603      	mov	r3, r0
 801f65c:	2b00      	cmp	r3, #0
 801f65e:	d001      	beq.n	801f664 <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801f660:	2401      	movs	r4, #1
 801f662:	e000      	b.n	801f666 <_ZNK14MockNamedValue6equalsERKS_+0x66>
 801f664:	2400      	movs	r4, #0
 801f666:	2d00      	cmp	r5, #0
 801f668:	d004      	beq.n	801f674 <_ZNK14MockNamedValue6equalsERKS_+0x74>
 801f66a:	f107 0310 	add.w	r3, r7, #16
 801f66e:	4618      	mov	r0, r3
 801f670:	f7ef f841 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801f674:	2e00      	cmp	r6, #0
 801f676:	d004      	beq.n	801f682 <_ZNK14MockNamedValue6equalsERKS_+0x82>
 801f678:	f107 0308 	add.w	r3, r7, #8
 801f67c:	4618      	mov	r0, r3
 801f67e:	f7ef f83a 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801f682:	2c00      	cmp	r4, #0
 801f684:	d00c      	beq.n	801f6a0 <_ZNK14MockNamedValue6equalsERKS_+0xa0>
        return value_.longIntValue_ == p.value_.intValue_;
 801f686:	1d3b      	adds	r3, r7, #4
 801f688:	681b      	ldr	r3, [r3, #0]
 801f68a:	699a      	ldr	r2, [r3, #24]
 801f68c:	463b      	mov	r3, r7
 801f68e:	681b      	ldr	r3, [r3, #0]
 801f690:	699b      	ldr	r3, [r3, #24]
 801f692:	429a      	cmp	r2, r3
 801f694:	bf0c      	ite	eq
 801f696:	2301      	moveq	r3, #1
 801f698:	2300      	movne	r3, #0
 801f69a:	b2dc      	uxtb	r4, r3
 801f69c:	f000 bd60 	b.w	8020160 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "long int"))
 801f6a0:	2500      	movs	r5, #0
 801f6a2:	1d3b      	adds	r3, r7, #4
 801f6a4:	681b      	ldr	r3, [r3, #0]
 801f6a6:	f103 040c 	add.w	r4, r3, #12
 801f6aa:	f107 0318 	add.w	r3, r7, #24
 801f6ae:	4998      	ldr	r1, [pc, #608]	; (801f910 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801f6b0:	4618      	mov	r0, r3
 801f6b2:	f7ee fc68 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801f6b6:	2601      	movs	r6, #1
 801f6b8:	f107 0318 	add.w	r3, r7, #24
 801f6bc:	4619      	mov	r1, r3
 801f6be:	4620      	mov	r0, r4
 801f6c0:	f7ef f825 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801f6c4:	4603      	mov	r3, r0
 801f6c6:	2b00      	cmp	r3, #0
 801f6c8:	d015      	beq.n	801f6f6 <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801f6ca:	463b      	mov	r3, r7
 801f6cc:	681b      	ldr	r3, [r3, #0]
 801f6ce:	f103 040c 	add.w	r4, r3, #12
 801f6d2:	f107 0320 	add.w	r3, r7, #32
 801f6d6:	498d      	ldr	r1, [pc, #564]	; (801f90c <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801f6d8:	4618      	mov	r0, r3
 801f6da:	f7ee fc54 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801f6de:	2501      	movs	r5, #1
 801f6e0:	f107 0320 	add.w	r3, r7, #32
 801f6e4:	4619      	mov	r1, r3
 801f6e6:	4620      	mov	r0, r4
 801f6e8:	f7ef f811 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801f6ec:	4603      	mov	r3, r0
 801f6ee:	2b00      	cmp	r3, #0
 801f6f0:	d001      	beq.n	801f6f6 <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801f6f2:	2401      	movs	r4, #1
 801f6f4:	e000      	b.n	801f6f8 <_ZNK14MockNamedValue6equalsERKS_+0xf8>
 801f6f6:	2400      	movs	r4, #0
 801f6f8:	2d00      	cmp	r5, #0
 801f6fa:	d004      	beq.n	801f706 <_ZNK14MockNamedValue6equalsERKS_+0x106>
 801f6fc:	f107 0320 	add.w	r3, r7, #32
 801f700:	4618      	mov	r0, r3
 801f702:	f7ee fff8 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801f706:	2e00      	cmp	r6, #0
 801f708:	d004      	beq.n	801f714 <_ZNK14MockNamedValue6equalsERKS_+0x114>
 801f70a:	f107 0318 	add.w	r3, r7, #24
 801f70e:	4618      	mov	r0, r3
 801f710:	f7ee fff1 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801f714:	2c00      	cmp	r4, #0
 801f716:	d00c      	beq.n	801f732 <_ZNK14MockNamedValue6equalsERKS_+0x132>
        return value_.intValue_ == p.value_.longIntValue_;
 801f718:	1d3b      	adds	r3, r7, #4
 801f71a:	681b      	ldr	r3, [r3, #0]
 801f71c:	699a      	ldr	r2, [r3, #24]
 801f71e:	463b      	mov	r3, r7
 801f720:	681b      	ldr	r3, [r3, #0]
 801f722:	699b      	ldr	r3, [r3, #24]
 801f724:	429a      	cmp	r2, r3
 801f726:	bf0c      	ite	eq
 801f728:	2301      	moveq	r3, #1
 801f72a:	2300      	movne	r3, #0
 801f72c:	b2dc      	uxtb	r4, r3
 801f72e:	f000 bd17 	b.w	8020160 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "int"))
 801f732:	2500      	movs	r5, #0
 801f734:	1d3b      	adds	r3, r7, #4
 801f736:	681b      	ldr	r3, [r3, #0]
 801f738:	f103 040c 	add.w	r4, r3, #12
 801f73c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f740:	4974      	ldr	r1, [pc, #464]	; (801f914 <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801f742:	4618      	mov	r0, r3
 801f744:	f7ee fc1f 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801f748:	2601      	movs	r6, #1
 801f74a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f74e:	4619      	mov	r1, r3
 801f750:	4620      	mov	r0, r4
 801f752:	f7ee ffdc 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801f756:	4603      	mov	r3, r0
 801f758:	2b00      	cmp	r3, #0
 801f75a:	d015      	beq.n	801f788 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801f75c:	463b      	mov	r3, r7
 801f75e:	681b      	ldr	r3, [r3, #0]
 801f760:	f103 040c 	add.w	r4, r3, #12
 801f764:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f768:	4969      	ldr	r1, [pc, #420]	; (801f910 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801f76a:	4618      	mov	r0, r3
 801f76c:	f7ee fc0b 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801f770:	2501      	movs	r5, #1
 801f772:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f776:	4619      	mov	r1, r3
 801f778:	4620      	mov	r0, r4
 801f77a:	f7ee ffc8 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801f77e:	4603      	mov	r3, r0
 801f780:	2b00      	cmp	r3, #0
 801f782:	d001      	beq.n	801f788 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801f784:	2401      	movs	r4, #1
 801f786:	e000      	b.n	801f78a <_ZNK14MockNamedValue6equalsERKS_+0x18a>
 801f788:	2400      	movs	r4, #0
 801f78a:	2d00      	cmp	r5, #0
 801f78c:	d004      	beq.n	801f798 <_ZNK14MockNamedValue6equalsERKS_+0x198>
 801f78e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f792:	4618      	mov	r0, r3
 801f794:	f7ee ffaf 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801f798:	2e00      	cmp	r6, #0
 801f79a:	d004      	beq.n	801f7a6 <_ZNK14MockNamedValue6equalsERKS_+0x1a6>
 801f79c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f7a0:	4618      	mov	r0, r3
 801f7a2:	f7ee ffa8 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801f7a6:	2c00      	cmp	r4, #0
 801f7a8:	d012      	beq.n	801f7d0 <_ZNK14MockNamedValue6equalsERKS_+0x1d0>
        return (p.value_.intValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned int)p.value_.intValue_);
 801f7aa:	463b      	mov	r3, r7
 801f7ac:	681b      	ldr	r3, [r3, #0]
 801f7ae:	699b      	ldr	r3, [r3, #24]
 801f7b0:	2b00      	cmp	r3, #0
 801f7b2:	db0a      	blt.n	801f7ca <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801f7b4:	1d3b      	adds	r3, r7, #4
 801f7b6:	681b      	ldr	r3, [r3, #0]
 801f7b8:	699b      	ldr	r3, [r3, #24]
 801f7ba:	463a      	mov	r2, r7
 801f7bc:	6812      	ldr	r2, [r2, #0]
 801f7be:	6992      	ldr	r2, [r2, #24]
 801f7c0:	4293      	cmp	r3, r2
 801f7c2:	d102      	bne.n	801f7ca <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801f7c4:	2401      	movs	r4, #1
 801f7c6:	f000 bccb 	b.w	8020160 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801f7ca:	2400      	movs	r4, #0
 801f7cc:	f000 bcc8 	b.w	8020160 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "unsigned int"))
 801f7d0:	2500      	movs	r5, #0
 801f7d2:	1d3b      	adds	r3, r7, #4
 801f7d4:	681b      	ldr	r3, [r3, #0]
 801f7d6:	f103 040c 	add.w	r4, r3, #12
 801f7da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801f7de:	494c      	ldr	r1, [pc, #304]	; (801f910 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801f7e0:	4618      	mov	r0, r3
 801f7e2:	f7ee fbd0 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801f7e6:	2601      	movs	r6, #1
 801f7e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801f7ec:	4619      	mov	r1, r3
 801f7ee:	4620      	mov	r0, r4
 801f7f0:	f7ee ff8d 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801f7f4:	4603      	mov	r3, r0
 801f7f6:	2b00      	cmp	r3, #0
 801f7f8:	d015      	beq.n	801f826 <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801f7fa:	463b      	mov	r3, r7
 801f7fc:	681b      	ldr	r3, [r3, #0]
 801f7fe:	f103 040c 	add.w	r4, r3, #12
 801f802:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801f806:	4943      	ldr	r1, [pc, #268]	; (801f914 <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801f808:	4618      	mov	r0, r3
 801f80a:	f7ee fbbc 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801f80e:	2501      	movs	r5, #1
 801f810:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801f814:	4619      	mov	r1, r3
 801f816:	4620      	mov	r0, r4
 801f818:	f7ee ff79 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801f81c:	4603      	mov	r3, r0
 801f81e:	2b00      	cmp	r3, #0
 801f820:	d001      	beq.n	801f826 <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801f822:	2401      	movs	r4, #1
 801f824:	e000      	b.n	801f828 <_ZNK14MockNamedValue6equalsERKS_+0x228>
 801f826:	2400      	movs	r4, #0
 801f828:	2d00      	cmp	r5, #0
 801f82a:	d004      	beq.n	801f836 <_ZNK14MockNamedValue6equalsERKS_+0x236>
 801f82c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801f830:	4618      	mov	r0, r3
 801f832:	f7ee ff60 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801f836:	2e00      	cmp	r6, #0
 801f838:	d004      	beq.n	801f844 <_ZNK14MockNamedValue6equalsERKS_+0x244>
 801f83a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801f83e:	4618      	mov	r0, r3
 801f840:	f7ee ff59 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801f844:	2c00      	cmp	r4, #0
 801f846:	d012      	beq.n	801f86e <_ZNK14MockNamedValue6equalsERKS_+0x26e>
        return (value_.intValue_ >= 0) && ((unsigned int)value_.intValue_ == p.value_.unsignedIntValue_);
 801f848:	1d3b      	adds	r3, r7, #4
 801f84a:	681b      	ldr	r3, [r3, #0]
 801f84c:	699b      	ldr	r3, [r3, #24]
 801f84e:	2b00      	cmp	r3, #0
 801f850:	db0a      	blt.n	801f868 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801f852:	1d3b      	adds	r3, r7, #4
 801f854:	681b      	ldr	r3, [r3, #0]
 801f856:	699b      	ldr	r3, [r3, #24]
 801f858:	463a      	mov	r2, r7
 801f85a:	6812      	ldr	r2, [r2, #0]
 801f85c:	6992      	ldr	r2, [r2, #24]
 801f85e:	4293      	cmp	r3, r2
 801f860:	d102      	bne.n	801f868 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801f862:	2401      	movs	r4, #1
 801f864:	f000 bc7c 	b.w	8020160 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801f868:	2400      	movs	r4, #0
 801f86a:	f000 bc79 	b.w	8020160 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "int"))
 801f86e:	2500      	movs	r5, #0
 801f870:	1d3b      	adds	r3, r7, #4
 801f872:	681b      	ldr	r3, [r3, #0]
 801f874:	f103 040c 	add.w	r4, r3, #12
 801f878:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801f87c:	4926      	ldr	r1, [pc, #152]	; (801f918 <_ZNK14MockNamedValue6equalsERKS_+0x318>)
 801f87e:	4618      	mov	r0, r3
 801f880:	f7ee fb81 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801f884:	2601      	movs	r6, #1
 801f886:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801f88a:	4619      	mov	r1, r3
 801f88c:	4620      	mov	r0, r4
 801f88e:	f7ee ff3e 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801f892:	4603      	mov	r3, r0
 801f894:	2b00      	cmp	r3, #0
 801f896:	d015      	beq.n	801f8c4 <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801f898:	463b      	mov	r3, r7
 801f89a:	681b      	ldr	r3, [r3, #0]
 801f89c:	f103 040c 	add.w	r4, r3, #12
 801f8a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801f8a4:	491a      	ldr	r1, [pc, #104]	; (801f910 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801f8a6:	4618      	mov	r0, r3
 801f8a8:	f7ee fb6d 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801f8ac:	2501      	movs	r5, #1
 801f8ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801f8b2:	4619      	mov	r1, r3
 801f8b4:	4620      	mov	r0, r4
 801f8b6:	f7ee ff2a 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801f8ba:	4603      	mov	r3, r0
 801f8bc:	2b00      	cmp	r3, #0
 801f8be:	d001      	beq.n	801f8c4 <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801f8c0:	2401      	movs	r4, #1
 801f8c2:	e000      	b.n	801f8c6 <_ZNK14MockNamedValue6equalsERKS_+0x2c6>
 801f8c4:	2400      	movs	r4, #0
 801f8c6:	2d00      	cmp	r5, #0
 801f8c8:	d004      	beq.n	801f8d4 <_ZNK14MockNamedValue6equalsERKS_+0x2d4>
 801f8ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801f8ce:	4618      	mov	r0, r3
 801f8d0:	f7ee ff11 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801f8d4:	2e00      	cmp	r6, #0
 801f8d6:	d004      	beq.n	801f8e2 <_ZNK14MockNamedValue6equalsERKS_+0x2e2>
 801f8d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801f8dc:	4618      	mov	r0, r3
 801f8de:	f7ee ff0a 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801f8e2:	2c00      	cmp	r4, #0
 801f8e4:	d01a      	beq.n	801f91c <_ZNK14MockNamedValue6equalsERKS_+0x31c>
        return (p.value_.intValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long)p.value_.intValue_);
 801f8e6:	463b      	mov	r3, r7
 801f8e8:	681b      	ldr	r3, [r3, #0]
 801f8ea:	699b      	ldr	r3, [r3, #24]
 801f8ec:	2b00      	cmp	r3, #0
 801f8ee:	db0a      	blt.n	801f906 <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801f8f0:	1d3b      	adds	r3, r7, #4
 801f8f2:	681b      	ldr	r3, [r3, #0]
 801f8f4:	699b      	ldr	r3, [r3, #24]
 801f8f6:	463a      	mov	r2, r7
 801f8f8:	6812      	ldr	r2, [r2, #0]
 801f8fa:	6992      	ldr	r2, [r2, #24]
 801f8fc:	4293      	cmp	r3, r2
 801f8fe:	d102      	bne.n	801f906 <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801f900:	2401      	movs	r4, #1
 801f902:	f000 bc2d 	b.w	8020160 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801f906:	2400      	movs	r4, #0
 801f908:	f000 bc2a 	b.w	8020160 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801f90c:	080280f8 	.word	0x080280f8
 801f910:	080280dc 	.word	0x080280dc
 801f914:	080280e8 	.word	0x080280e8
 801f918:	08028104 	.word	0x08028104
    else if((type_ == "int") && (p.type_ == "unsigned long int"))
 801f91c:	2500      	movs	r5, #0
 801f91e:	1d3b      	adds	r3, r7, #4
 801f920:	681b      	ldr	r3, [r3, #0]
 801f922:	f103 040c 	add.w	r4, r3, #12
 801f926:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801f92a:	49b8      	ldr	r1, [pc, #736]	; (801fc0c <_ZNK14MockNamedValue6equalsERKS_+0x60c>)
 801f92c:	4618      	mov	r0, r3
 801f92e:	f7ee fb2a 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801f932:	2601      	movs	r6, #1
 801f934:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801f938:	4619      	mov	r1, r3
 801f93a:	4620      	mov	r0, r4
 801f93c:	f7ee fee7 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801f940:	4603      	mov	r3, r0
 801f942:	2b00      	cmp	r3, #0
 801f944:	d015      	beq.n	801f972 <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801f946:	463b      	mov	r3, r7
 801f948:	681b      	ldr	r3, [r3, #0]
 801f94a:	f103 040c 	add.w	r4, r3, #12
 801f94e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801f952:	49af      	ldr	r1, [pc, #700]	; (801fc10 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801f954:	4618      	mov	r0, r3
 801f956:	f7ee fb16 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801f95a:	2501      	movs	r5, #1
 801f95c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801f960:	4619      	mov	r1, r3
 801f962:	4620      	mov	r0, r4
 801f964:	f7ee fed3 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801f968:	4603      	mov	r3, r0
 801f96a:	2b00      	cmp	r3, #0
 801f96c:	d001      	beq.n	801f972 <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801f96e:	2401      	movs	r4, #1
 801f970:	e000      	b.n	801f974 <_ZNK14MockNamedValue6equalsERKS_+0x374>
 801f972:	2400      	movs	r4, #0
 801f974:	2d00      	cmp	r5, #0
 801f976:	d004      	beq.n	801f982 <_ZNK14MockNamedValue6equalsERKS_+0x382>
 801f978:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801f97c:	4618      	mov	r0, r3
 801f97e:	f7ee feba 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801f982:	2e00      	cmp	r6, #0
 801f984:	d004      	beq.n	801f990 <_ZNK14MockNamedValue6equalsERKS_+0x390>
 801f986:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801f98a:	4618      	mov	r0, r3
 801f98c:	f7ee feb3 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801f990:	2c00      	cmp	r4, #0
 801f992:	d010      	beq.n	801f9b6 <_ZNK14MockNamedValue6equalsERKS_+0x3b6>
        return (value_.intValue_ >= 0) && ((unsigned long)value_.intValue_ == p.value_.unsignedLongIntValue_);
 801f994:	1d3b      	adds	r3, r7, #4
 801f996:	681b      	ldr	r3, [r3, #0]
 801f998:	699b      	ldr	r3, [r3, #24]
 801f99a:	2b00      	cmp	r3, #0
 801f99c:	db09      	blt.n	801f9b2 <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801f99e:	1d3b      	adds	r3, r7, #4
 801f9a0:	681b      	ldr	r3, [r3, #0]
 801f9a2:	699b      	ldr	r3, [r3, #24]
 801f9a4:	463a      	mov	r2, r7
 801f9a6:	6812      	ldr	r2, [r2, #0]
 801f9a8:	6992      	ldr	r2, [r2, #24]
 801f9aa:	4293      	cmp	r3, r2
 801f9ac:	d101      	bne.n	801f9b2 <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801f9ae:	2401      	movs	r4, #1
 801f9b0:	e3d6      	b.n	8020160 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801f9b2:	2400      	movs	r4, #0
 801f9b4:	e3d4      	b.n	8020160 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "long int"))
 801f9b6:	2500      	movs	r5, #0
 801f9b8:	1d3b      	adds	r3, r7, #4
 801f9ba:	681b      	ldr	r3, [r3, #0]
 801f9bc:	f103 040c 	add.w	r4, r3, #12
 801f9c0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801f9c4:	4993      	ldr	r1, [pc, #588]	; (801fc14 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801f9c6:	4618      	mov	r0, r3
 801f9c8:	f7ee fadd 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801f9cc:	2601      	movs	r6, #1
 801f9ce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801f9d2:	4619      	mov	r1, r3
 801f9d4:	4620      	mov	r0, r4
 801f9d6:	f7ee fe9a 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801f9da:	4603      	mov	r3, r0
 801f9dc:	2b00      	cmp	r3, #0
 801f9de:	d015      	beq.n	801fa0c <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801f9e0:	463b      	mov	r3, r7
 801f9e2:	681b      	ldr	r3, [r3, #0]
 801f9e4:	f103 040c 	add.w	r4, r3, #12
 801f9e8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801f9ec:	498a      	ldr	r1, [pc, #552]	; (801fc18 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801f9ee:	4618      	mov	r0, r3
 801f9f0:	f7ee fac9 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801f9f4:	2501      	movs	r5, #1
 801f9f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801f9fa:	4619      	mov	r1, r3
 801f9fc:	4620      	mov	r0, r4
 801f9fe:	f7ee fe86 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801fa02:	4603      	mov	r3, r0
 801fa04:	2b00      	cmp	r3, #0
 801fa06:	d001      	beq.n	801fa0c <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801fa08:	2401      	movs	r4, #1
 801fa0a:	e000      	b.n	801fa0e <_ZNK14MockNamedValue6equalsERKS_+0x40e>
 801fa0c:	2400      	movs	r4, #0
 801fa0e:	2d00      	cmp	r5, #0
 801fa10:	d004      	beq.n	801fa1c <_ZNK14MockNamedValue6equalsERKS_+0x41c>
 801fa12:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801fa16:	4618      	mov	r0, r3
 801fa18:	f7ee fe6d 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801fa1c:	2e00      	cmp	r6, #0
 801fa1e:	d004      	beq.n	801fa2a <_ZNK14MockNamedValue6equalsERKS_+0x42a>
 801fa20:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801fa24:	4618      	mov	r0, r3
 801fa26:	f7ee fe66 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801fa2a:	2c00      	cmp	r4, #0
 801fa2c:	d010      	beq.n	801fa50 <_ZNK14MockNamedValue6equalsERKS_+0x450>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned long)p.value_.longIntValue_);
 801fa2e:	463b      	mov	r3, r7
 801fa30:	681b      	ldr	r3, [r3, #0]
 801fa32:	699b      	ldr	r3, [r3, #24]
 801fa34:	2b00      	cmp	r3, #0
 801fa36:	db09      	blt.n	801fa4c <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801fa38:	1d3b      	adds	r3, r7, #4
 801fa3a:	681b      	ldr	r3, [r3, #0]
 801fa3c:	699b      	ldr	r3, [r3, #24]
 801fa3e:	463a      	mov	r2, r7
 801fa40:	6812      	ldr	r2, [r2, #0]
 801fa42:	6992      	ldr	r2, [r2, #24]
 801fa44:	4293      	cmp	r3, r2
 801fa46:	d101      	bne.n	801fa4c <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801fa48:	2401      	movs	r4, #1
 801fa4a:	e389      	b.n	8020160 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801fa4c:	2400      	movs	r4, #0
 801fa4e:	e387      	b.n	8020160 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "long int") && (p.type_ == "unsigned int"))
 801fa50:	2500      	movs	r5, #0
 801fa52:	1d3b      	adds	r3, r7, #4
 801fa54:	681b      	ldr	r3, [r3, #0]
 801fa56:	f103 040c 	add.w	r4, r3, #12
 801fa5a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801fa5e:	496e      	ldr	r1, [pc, #440]	; (801fc18 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801fa60:	4618      	mov	r0, r3
 801fa62:	f7ee fa90 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801fa66:	2601      	movs	r6, #1
 801fa68:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801fa6c:	4619      	mov	r1, r3
 801fa6e:	4620      	mov	r0, r4
 801fa70:	f7ee fe4d 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801fa74:	4603      	mov	r3, r0
 801fa76:	2b00      	cmp	r3, #0
 801fa78:	d015      	beq.n	801faa6 <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801fa7a:	463b      	mov	r3, r7
 801fa7c:	681b      	ldr	r3, [r3, #0]
 801fa7e:	f103 040c 	add.w	r4, r3, #12
 801fa82:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801fa86:	4963      	ldr	r1, [pc, #396]	; (801fc14 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801fa88:	4618      	mov	r0, r3
 801fa8a:	f7ee fa7c 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801fa8e:	2501      	movs	r5, #1
 801fa90:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801fa94:	4619      	mov	r1, r3
 801fa96:	4620      	mov	r0, r4
 801fa98:	f7ee fe39 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801fa9c:	4603      	mov	r3, r0
 801fa9e:	2b00      	cmp	r3, #0
 801faa0:	d001      	beq.n	801faa6 <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801faa2:	2401      	movs	r4, #1
 801faa4:	e000      	b.n	801faa8 <_ZNK14MockNamedValue6equalsERKS_+0x4a8>
 801faa6:	2400      	movs	r4, #0
 801faa8:	2d00      	cmp	r5, #0
 801faaa:	d004      	beq.n	801fab6 <_ZNK14MockNamedValue6equalsERKS_+0x4b6>
 801faac:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801fab0:	4618      	mov	r0, r3
 801fab2:	f7ee fe20 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801fab6:	2e00      	cmp	r6, #0
 801fab8:	d004      	beq.n	801fac4 <_ZNK14MockNamedValue6equalsERKS_+0x4c4>
 801faba:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801fabe:	4618      	mov	r0, r3
 801fac0:	f7ee fe19 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801fac4:	2c00      	cmp	r4, #0
 801fac6:	d010      	beq.n	801faea <_ZNK14MockNamedValue6equalsERKS_+0x4ea>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedIntValue_);
 801fac8:	1d3b      	adds	r3, r7, #4
 801faca:	681b      	ldr	r3, [r3, #0]
 801facc:	699b      	ldr	r3, [r3, #24]
 801face:	2b00      	cmp	r3, #0
 801fad0:	db09      	blt.n	801fae6 <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801fad2:	1d3b      	adds	r3, r7, #4
 801fad4:	681b      	ldr	r3, [r3, #0]
 801fad6:	699b      	ldr	r3, [r3, #24]
 801fad8:	463a      	mov	r2, r7
 801fada:	6812      	ldr	r2, [r2, #0]
 801fadc:	6992      	ldr	r2, [r2, #24]
 801fade:	4293      	cmp	r3, r2
 801fae0:	d101      	bne.n	801fae6 <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801fae2:	2401      	movs	r4, #1
 801fae4:	e33c      	b.n	8020160 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801fae6:	2400      	movs	r4, #0
 801fae8:	e33a      	b.n	8020160 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "unsigned long int"))
 801faea:	2500      	movs	r5, #0
 801faec:	1d3b      	adds	r3, r7, #4
 801faee:	681b      	ldr	r3, [r3, #0]
 801faf0:	f103 040c 	add.w	r4, r3, #12
 801faf4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801faf8:	4946      	ldr	r1, [pc, #280]	; (801fc14 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801fafa:	4618      	mov	r0, r3
 801fafc:	f7ee fa43 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801fb00:	2601      	movs	r6, #1
 801fb02:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801fb06:	4619      	mov	r1, r3
 801fb08:	4620      	mov	r0, r4
 801fb0a:	f7ee fe00 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801fb0e:	4603      	mov	r3, r0
 801fb10:	2b00      	cmp	r3, #0
 801fb12:	d015      	beq.n	801fb40 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801fb14:	463b      	mov	r3, r7
 801fb16:	681b      	ldr	r3, [r3, #0]
 801fb18:	f103 040c 	add.w	r4, r3, #12
 801fb1c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801fb20:	493b      	ldr	r1, [pc, #236]	; (801fc10 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801fb22:	4618      	mov	r0, r3
 801fb24:	f7ee fa2f 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801fb28:	2501      	movs	r5, #1
 801fb2a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801fb2e:	4619      	mov	r1, r3
 801fb30:	4620      	mov	r0, r4
 801fb32:	f7ee fdec 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801fb36:	4603      	mov	r3, r0
 801fb38:	2b00      	cmp	r3, #0
 801fb3a:	d001      	beq.n	801fb40 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801fb3c:	2401      	movs	r4, #1
 801fb3e:	e000      	b.n	801fb42 <_ZNK14MockNamedValue6equalsERKS_+0x542>
 801fb40:	2400      	movs	r4, #0
 801fb42:	2d00      	cmp	r5, #0
 801fb44:	d004      	beq.n	801fb50 <_ZNK14MockNamedValue6equalsERKS_+0x550>
 801fb46:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801fb4a:	4618      	mov	r0, r3
 801fb4c:	f7ee fdd3 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801fb50:	2e00      	cmp	r6, #0
 801fb52:	d004      	beq.n	801fb5e <_ZNK14MockNamedValue6equalsERKS_+0x55e>
 801fb54:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801fb58:	4618      	mov	r0, r3
 801fb5a:	f7ee fdcc 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801fb5e:	2c00      	cmp	r4, #0
 801fb60:	d00b      	beq.n	801fb7a <_ZNK14MockNamedValue6equalsERKS_+0x57a>
        return value_.unsignedIntValue_ == p.value_.unsignedLongIntValue_;
 801fb62:	1d3b      	adds	r3, r7, #4
 801fb64:	681b      	ldr	r3, [r3, #0]
 801fb66:	699a      	ldr	r2, [r3, #24]
 801fb68:	463b      	mov	r3, r7
 801fb6a:	681b      	ldr	r3, [r3, #0]
 801fb6c:	699b      	ldr	r3, [r3, #24]
 801fb6e:	429a      	cmp	r2, r3
 801fb70:	bf0c      	ite	eq
 801fb72:	2301      	moveq	r3, #1
 801fb74:	2300      	movne	r3, #0
 801fb76:	b2dc      	uxtb	r4, r3
 801fb78:	e2f2      	b.n	8020160 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "unsigned int"))
 801fb7a:	2500      	movs	r5, #0
 801fb7c:	1d3b      	adds	r3, r7, #4
 801fb7e:	681b      	ldr	r3, [r3, #0]
 801fb80:	f103 040c 	add.w	r4, r3, #12
 801fb84:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801fb88:	4921      	ldr	r1, [pc, #132]	; (801fc10 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801fb8a:	4618      	mov	r0, r3
 801fb8c:	f7ee f9fb 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801fb90:	2601      	movs	r6, #1
 801fb92:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801fb96:	4619      	mov	r1, r3
 801fb98:	4620      	mov	r0, r4
 801fb9a:	f7ee fdb8 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801fb9e:	4603      	mov	r3, r0
 801fba0:	2b00      	cmp	r3, #0
 801fba2:	d015      	beq.n	801fbd0 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801fba4:	463b      	mov	r3, r7
 801fba6:	681b      	ldr	r3, [r3, #0]
 801fba8:	f103 040c 	add.w	r4, r3, #12
 801fbac:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801fbb0:	4918      	ldr	r1, [pc, #96]	; (801fc14 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801fbb2:	4618      	mov	r0, r3
 801fbb4:	f7ee f9e7 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801fbb8:	2501      	movs	r5, #1
 801fbba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801fbbe:	4619      	mov	r1, r3
 801fbc0:	4620      	mov	r0, r4
 801fbc2:	f7ee fda4 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801fbc6:	4603      	mov	r3, r0
 801fbc8:	2b00      	cmp	r3, #0
 801fbca:	d001      	beq.n	801fbd0 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801fbcc:	2401      	movs	r4, #1
 801fbce:	e000      	b.n	801fbd2 <_ZNK14MockNamedValue6equalsERKS_+0x5d2>
 801fbd0:	2400      	movs	r4, #0
 801fbd2:	2d00      	cmp	r5, #0
 801fbd4:	d004      	beq.n	801fbe0 <_ZNK14MockNamedValue6equalsERKS_+0x5e0>
 801fbd6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801fbda:	4618      	mov	r0, r3
 801fbdc:	f7ee fd8b 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801fbe0:	2e00      	cmp	r6, #0
 801fbe2:	d004      	beq.n	801fbee <_ZNK14MockNamedValue6equalsERKS_+0x5ee>
 801fbe4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801fbe8:	4618      	mov	r0, r3
 801fbea:	f7ee fd84 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801fbee:	2c00      	cmp	r4, #0
 801fbf0:	d014      	beq.n	801fc1c <_ZNK14MockNamedValue6equalsERKS_+0x61c>
        return value_.unsignedLongIntValue_ == p.value_.unsignedIntValue_;
 801fbf2:	1d3b      	adds	r3, r7, #4
 801fbf4:	681b      	ldr	r3, [r3, #0]
 801fbf6:	699a      	ldr	r2, [r3, #24]
 801fbf8:	463b      	mov	r3, r7
 801fbfa:	681b      	ldr	r3, [r3, #0]
 801fbfc:	699b      	ldr	r3, [r3, #24]
 801fbfe:	429a      	cmp	r2, r3
 801fc00:	bf0c      	ite	eq
 801fc02:	2301      	moveq	r3, #1
 801fc04:	2300      	movne	r3, #0
 801fc06:	b2dc      	uxtb	r4, r3
 801fc08:	e2aa      	b.n	8020160 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801fc0a:	bf00      	nop
 801fc0c:	080280dc 	.word	0x080280dc
 801fc10:	08028104 	.word	0x08028104
 801fc14:	080280e8 	.word	0x080280e8
 801fc18:	080280f8 	.word	0x080280f8
    else if((type_ == "long int") && (p.type_ == "unsigned long int"))
 801fc1c:	2500      	movs	r5, #0
 801fc1e:	1d3b      	adds	r3, r7, #4
 801fc20:	681b      	ldr	r3, [r3, #0]
 801fc22:	f103 040c 	add.w	r4, r3, #12
 801fc26:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801fc2a:	49ae      	ldr	r1, [pc, #696]	; (801fee4 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801fc2c:	4618      	mov	r0, r3
 801fc2e:	f7ee f9aa 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801fc32:	2601      	movs	r6, #1
 801fc34:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801fc38:	4619      	mov	r1, r3
 801fc3a:	4620      	mov	r0, r4
 801fc3c:	f7ee fd67 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801fc40:	4603      	mov	r3, r0
 801fc42:	2b00      	cmp	r3, #0
 801fc44:	d015      	beq.n	801fc72 <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801fc46:	463b      	mov	r3, r7
 801fc48:	681b      	ldr	r3, [r3, #0]
 801fc4a:	f103 040c 	add.w	r4, r3, #12
 801fc4e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801fc52:	49a5      	ldr	r1, [pc, #660]	; (801fee8 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801fc54:	4618      	mov	r0, r3
 801fc56:	f7ee f996 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801fc5a:	2501      	movs	r5, #1
 801fc5c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801fc60:	4619      	mov	r1, r3
 801fc62:	4620      	mov	r0, r4
 801fc64:	f7ee fd53 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801fc68:	4603      	mov	r3, r0
 801fc6a:	2b00      	cmp	r3, #0
 801fc6c:	d001      	beq.n	801fc72 <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801fc6e:	2401      	movs	r4, #1
 801fc70:	e000      	b.n	801fc74 <_ZNK14MockNamedValue6equalsERKS_+0x674>
 801fc72:	2400      	movs	r4, #0
 801fc74:	2d00      	cmp	r5, #0
 801fc76:	d004      	beq.n	801fc82 <_ZNK14MockNamedValue6equalsERKS_+0x682>
 801fc78:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801fc7c:	4618      	mov	r0, r3
 801fc7e:	f7ee fd3a 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801fc82:	2e00      	cmp	r6, #0
 801fc84:	d004      	beq.n	801fc90 <_ZNK14MockNamedValue6equalsERKS_+0x690>
 801fc86:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801fc8a:	4618      	mov	r0, r3
 801fc8c:	f7ee fd33 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801fc90:	2c00      	cmp	r4, #0
 801fc92:	d010      	beq.n	801fcb6 <_ZNK14MockNamedValue6equalsERKS_+0x6b6>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedLongIntValue_);
 801fc94:	1d3b      	adds	r3, r7, #4
 801fc96:	681b      	ldr	r3, [r3, #0]
 801fc98:	699b      	ldr	r3, [r3, #24]
 801fc9a:	2b00      	cmp	r3, #0
 801fc9c:	db09      	blt.n	801fcb2 <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801fc9e:	1d3b      	adds	r3, r7, #4
 801fca0:	681b      	ldr	r3, [r3, #0]
 801fca2:	699b      	ldr	r3, [r3, #24]
 801fca4:	463a      	mov	r2, r7
 801fca6:	6812      	ldr	r2, [r2, #0]
 801fca8:	6992      	ldr	r2, [r2, #24]
 801fcaa:	4293      	cmp	r3, r2
 801fcac:	d101      	bne.n	801fcb2 <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801fcae:	2401      	movs	r4, #1
 801fcb0:	e256      	b.n	8020160 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801fcb2:	2400      	movs	r4, #0
 801fcb4:	e254      	b.n	8020160 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "long int"))
 801fcb6:	2500      	movs	r5, #0
 801fcb8:	1d3b      	adds	r3, r7, #4
 801fcba:	681b      	ldr	r3, [r3, #0]
 801fcbc:	f103 040c 	add.w	r4, r3, #12
 801fcc0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801fcc4:	4988      	ldr	r1, [pc, #544]	; (801fee8 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801fcc6:	4618      	mov	r0, r3
 801fcc8:	f7ee f95d 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801fccc:	2601      	movs	r6, #1
 801fcce:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801fcd2:	4619      	mov	r1, r3
 801fcd4:	4620      	mov	r0, r4
 801fcd6:	f7ee fd1a 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801fcda:	4603      	mov	r3, r0
 801fcdc:	2b00      	cmp	r3, #0
 801fcde:	d015      	beq.n	801fd0c <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801fce0:	463b      	mov	r3, r7
 801fce2:	681b      	ldr	r3, [r3, #0]
 801fce4:	f103 040c 	add.w	r4, r3, #12
 801fce8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801fcec:	497d      	ldr	r1, [pc, #500]	; (801fee4 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801fcee:	4618      	mov	r0, r3
 801fcf0:	f7ee f949 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801fcf4:	2501      	movs	r5, #1
 801fcf6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801fcfa:	4619      	mov	r1, r3
 801fcfc:	4620      	mov	r0, r4
 801fcfe:	f7ee fd06 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801fd02:	4603      	mov	r3, r0
 801fd04:	2b00      	cmp	r3, #0
 801fd06:	d001      	beq.n	801fd0c <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801fd08:	2401      	movs	r4, #1
 801fd0a:	e000      	b.n	801fd0e <_ZNK14MockNamedValue6equalsERKS_+0x70e>
 801fd0c:	2400      	movs	r4, #0
 801fd0e:	2d00      	cmp	r5, #0
 801fd10:	d004      	beq.n	801fd1c <_ZNK14MockNamedValue6equalsERKS_+0x71c>
 801fd12:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801fd16:	4618      	mov	r0, r3
 801fd18:	f7ee fced 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801fd1c:	2e00      	cmp	r6, #0
 801fd1e:	d004      	beq.n	801fd2a <_ZNK14MockNamedValue6equalsERKS_+0x72a>
 801fd20:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801fd24:	4618      	mov	r0, r3
 801fd26:	f7ee fce6 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801fd2a:	2c00      	cmp	r4, #0
 801fd2c:	d010      	beq.n	801fd50 <_ZNK14MockNamedValue6equalsERKS_+0x750>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long) p.value_.longIntValue_);
 801fd2e:	463b      	mov	r3, r7
 801fd30:	681b      	ldr	r3, [r3, #0]
 801fd32:	699b      	ldr	r3, [r3, #24]
 801fd34:	2b00      	cmp	r3, #0
 801fd36:	db09      	blt.n	801fd4c <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801fd38:	1d3b      	adds	r3, r7, #4
 801fd3a:	681b      	ldr	r3, [r3, #0]
 801fd3c:	699b      	ldr	r3, [r3, #24]
 801fd3e:	463a      	mov	r2, r7
 801fd40:	6812      	ldr	r2, [r2, #0]
 801fd42:	6992      	ldr	r2, [r2, #24]
 801fd44:	4293      	cmp	r3, r2
 801fd46:	d101      	bne.n	801fd4c <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801fd48:	2401      	movs	r4, #1
 801fd4a:	e209      	b.n	8020160 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801fd4c:	2400      	movs	r4, #0
 801fd4e:	e207      	b.n	8020160 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongIntValue_;
    else if ((type_ == "unsigned long int") && (p.type_ == "unsigned long long int"))
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif

    if (type_ != p.type_) return false;
 801fd50:	1d3b      	adds	r3, r7, #4
 801fd52:	681b      	ldr	r3, [r3, #0]
 801fd54:	f103 020c 	add.w	r2, r3, #12
 801fd58:	463b      	mov	r3, r7
 801fd5a:	681b      	ldr	r3, [r3, #0]
 801fd5c:	330c      	adds	r3, #12
 801fd5e:	4619      	mov	r1, r3
 801fd60:	4610      	mov	r0, r2
 801fd62:	f7ee fd19 	bl	800e798 <_ZneRK12SimpleStringS1_>
 801fd66:	4603      	mov	r3, r0
 801fd68:	2b00      	cmp	r3, #0
 801fd6a:	d001      	beq.n	801fd70 <_ZNK14MockNamedValue6equalsERKS_+0x770>
 801fd6c:	2400      	movs	r4, #0
 801fd6e:	e1f7      	b.n	8020160 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    if (type_ == "bool")
 801fd70:	1d3b      	adds	r3, r7, #4
 801fd72:	681b      	ldr	r3, [r3, #0]
 801fd74:	f103 040c 	add.w	r4, r3, #12
 801fd78:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801fd7c:	495b      	ldr	r1, [pc, #364]	; (801feec <_ZNK14MockNamedValue6equalsERKS_+0x8ec>)
 801fd7e:	4618      	mov	r0, r3
 801fd80:	f7ee f901 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801fd84:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801fd88:	4619      	mov	r1, r3
 801fd8a:	4620      	mov	r0, r4
 801fd8c:	f7ee fcbf 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801fd90:	4603      	mov	r3, r0
 801fd92:	461c      	mov	r4, r3
 801fd94:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801fd98:	4618      	mov	r0, r3
 801fd9a:	f7ee fcac 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801fd9e:	2c00      	cmp	r4, #0
 801fda0:	d00b      	beq.n	801fdba <_ZNK14MockNamedValue6equalsERKS_+0x7ba>
        return value_.boolValue_ == p.value_.boolValue_;
 801fda2:	1d3b      	adds	r3, r7, #4
 801fda4:	681b      	ldr	r3, [r3, #0]
 801fda6:	7e1a      	ldrb	r2, [r3, #24]
 801fda8:	463b      	mov	r3, r7
 801fdaa:	681b      	ldr	r3, [r3, #0]
 801fdac:	7e1b      	ldrb	r3, [r3, #24]
 801fdae:	429a      	cmp	r2, r3
 801fdb0:	bf0c      	ite	eq
 801fdb2:	2301      	moveq	r3, #1
 801fdb4:	2300      	movne	r3, #0
 801fdb6:	b2dc      	uxtb	r4, r3
 801fdb8:	e1d2      	b.n	8020160 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "int")
 801fdba:	1d3b      	adds	r3, r7, #4
 801fdbc:	681b      	ldr	r3, [r3, #0]
 801fdbe:	f103 040c 	add.w	r4, r3, #12
 801fdc2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801fdc6:	494a      	ldr	r1, [pc, #296]	; (801fef0 <_ZNK14MockNamedValue6equalsERKS_+0x8f0>)
 801fdc8:	4618      	mov	r0, r3
 801fdca:	f7ee f8dc 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801fdce:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801fdd2:	4619      	mov	r1, r3
 801fdd4:	4620      	mov	r0, r4
 801fdd6:	f7ee fc9a 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801fdda:	4603      	mov	r3, r0
 801fddc:	461c      	mov	r4, r3
 801fdde:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801fde2:	4618      	mov	r0, r3
 801fde4:	f7ee fc87 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801fde8:	2c00      	cmp	r4, #0
 801fdea:	d00b      	beq.n	801fe04 <_ZNK14MockNamedValue6equalsERKS_+0x804>
        return value_.intValue_ == p.value_.intValue_;
 801fdec:	1d3b      	adds	r3, r7, #4
 801fdee:	681b      	ldr	r3, [r3, #0]
 801fdf0:	699a      	ldr	r2, [r3, #24]
 801fdf2:	463b      	mov	r3, r7
 801fdf4:	681b      	ldr	r3, [r3, #0]
 801fdf6:	699b      	ldr	r3, [r3, #24]
 801fdf8:	429a      	cmp	r2, r3
 801fdfa:	bf0c      	ite	eq
 801fdfc:	2301      	moveq	r3, #1
 801fdfe:	2300      	movne	r3, #0
 801fe00:	b2dc      	uxtb	r4, r3
 801fe02:	e1ad      	b.n	8020160 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned int")
 801fe04:	1d3b      	adds	r3, r7, #4
 801fe06:	681b      	ldr	r3, [r3, #0]
 801fe08:	f103 040c 	add.w	r4, r3, #12
 801fe0c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801fe10:	4938      	ldr	r1, [pc, #224]	; (801fef4 <_ZNK14MockNamedValue6equalsERKS_+0x8f4>)
 801fe12:	4618      	mov	r0, r3
 801fe14:	f7ee f8b7 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801fe18:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801fe1c:	4619      	mov	r1, r3
 801fe1e:	4620      	mov	r0, r4
 801fe20:	f7ee fc75 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801fe24:	4603      	mov	r3, r0
 801fe26:	461c      	mov	r4, r3
 801fe28:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801fe2c:	4618      	mov	r0, r3
 801fe2e:	f7ee fc62 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801fe32:	2c00      	cmp	r4, #0
 801fe34:	d00b      	beq.n	801fe4e <_ZNK14MockNamedValue6equalsERKS_+0x84e>
        return value_.unsignedIntValue_ == p.value_.unsignedIntValue_;
 801fe36:	1d3b      	adds	r3, r7, #4
 801fe38:	681b      	ldr	r3, [r3, #0]
 801fe3a:	699a      	ldr	r2, [r3, #24]
 801fe3c:	463b      	mov	r3, r7
 801fe3e:	681b      	ldr	r3, [r3, #0]
 801fe40:	699b      	ldr	r3, [r3, #24]
 801fe42:	429a      	cmp	r2, r3
 801fe44:	bf0c      	ite	eq
 801fe46:	2301      	moveq	r3, #1
 801fe48:	2300      	movne	r3, #0
 801fe4a:	b2dc      	uxtb	r4, r3
 801fe4c:	e188      	b.n	8020160 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "long int")
 801fe4e:	1d3b      	adds	r3, r7, #4
 801fe50:	681b      	ldr	r3, [r3, #0]
 801fe52:	f103 040c 	add.w	r4, r3, #12
 801fe56:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801fe5a:	4922      	ldr	r1, [pc, #136]	; (801fee4 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801fe5c:	4618      	mov	r0, r3
 801fe5e:	f7ee f892 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801fe62:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801fe66:	4619      	mov	r1, r3
 801fe68:	4620      	mov	r0, r4
 801fe6a:	f7ee fc50 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801fe6e:	4603      	mov	r3, r0
 801fe70:	461c      	mov	r4, r3
 801fe72:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801fe76:	4618      	mov	r0, r3
 801fe78:	f7ee fc3d 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801fe7c:	2c00      	cmp	r4, #0
 801fe7e:	d00b      	beq.n	801fe98 <_ZNK14MockNamedValue6equalsERKS_+0x898>
        return value_.longIntValue_ == p.value_.longIntValue_;
 801fe80:	1d3b      	adds	r3, r7, #4
 801fe82:	681b      	ldr	r3, [r3, #0]
 801fe84:	699a      	ldr	r2, [r3, #24]
 801fe86:	463b      	mov	r3, r7
 801fe88:	681b      	ldr	r3, [r3, #0]
 801fe8a:	699b      	ldr	r3, [r3, #24]
 801fe8c:	429a      	cmp	r2, r3
 801fe8e:	bf0c      	ite	eq
 801fe90:	2301      	moveq	r3, #1
 801fe92:	2300      	movne	r3, #0
 801fe94:	b2dc      	uxtb	r4, r3
 801fe96:	e163      	b.n	8020160 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned long int")
 801fe98:	1d3b      	adds	r3, r7, #4
 801fe9a:	681b      	ldr	r3, [r3, #0]
 801fe9c:	f103 040c 	add.w	r4, r3, #12
 801fea0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801fea4:	4910      	ldr	r1, [pc, #64]	; (801fee8 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801fea6:	4618      	mov	r0, r3
 801fea8:	f7ee f86d 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801feac:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801feb0:	4619      	mov	r1, r3
 801feb2:	4620      	mov	r0, r4
 801feb4:	f7ee fc2b 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801feb8:	4603      	mov	r3, r0
 801feba:	461c      	mov	r4, r3
 801febc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801fec0:	4618      	mov	r0, r3
 801fec2:	f7ee fc18 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801fec6:	2c00      	cmp	r4, #0
 801fec8:	d016      	beq.n	801fef8 <_ZNK14MockNamedValue6equalsERKS_+0x8f8>
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongIntValue_;
 801feca:	1d3b      	adds	r3, r7, #4
 801fecc:	681b      	ldr	r3, [r3, #0]
 801fece:	699a      	ldr	r2, [r3, #24]
 801fed0:	463b      	mov	r3, r7
 801fed2:	681b      	ldr	r3, [r3, #0]
 801fed4:	699b      	ldr	r3, [r3, #24]
 801fed6:	429a      	cmp	r2, r3
 801fed8:	bf0c      	ite	eq
 801feda:	2301      	moveq	r3, #1
 801fedc:	2300      	movne	r3, #0
 801fede:	b2dc      	uxtb	r4, r3
 801fee0:	e13e      	b.n	8020160 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801fee2:	bf00      	nop
 801fee4:	080280f8 	.word	0x080280f8
 801fee8:	08028104 	.word	0x08028104
 801feec:	080280e0 	.word	0x080280e0
 801fef0:	080280dc 	.word	0x080280dc
 801fef4:	080280e8 	.word	0x080280e8
    else if (type_ == "long long int")
        return value_.longLongIntValue_ == p.value_.longLongIntValue_;
    else if (type_ == "unsigned long long int")
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif
    else if (type_ == "const char*")
 801fef8:	1d3b      	adds	r3, r7, #4
 801fefa:	681b      	ldr	r3, [r3, #0]
 801fefc:	f103 040c 	add.w	r4, r3, #12
 801ff00:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801ff04:	4999      	ldr	r1, [pc, #612]	; (802016c <_ZNK14MockNamedValue6equalsERKS_+0xb6c>)
 801ff06:	4618      	mov	r0, r3
 801ff08:	f7ee f83d 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801ff0c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801ff10:	4619      	mov	r1, r3
 801ff12:	4620      	mov	r0, r4
 801ff14:	f7ee fbfb 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801ff18:	4603      	mov	r3, r0
 801ff1a:	461c      	mov	r4, r3
 801ff1c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801ff20:	4618      	mov	r0, r3
 801ff22:	f7ee fbe8 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801ff26:	2c00      	cmp	r4, #0
 801ff28:	d026      	beq.n	801ff78 <_ZNK14MockNamedValue6equalsERKS_+0x978>
        return SimpleString(value_.stringValue_) == SimpleString(p.value_.stringValue_);
 801ff2a:	1d3b      	adds	r3, r7, #4
 801ff2c:	681b      	ldr	r3, [r3, #0]
 801ff2e:	699a      	ldr	r2, [r3, #24]
 801ff30:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801ff34:	4611      	mov	r1, r2
 801ff36:	4618      	mov	r0, r3
 801ff38:	f7ee f825 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801ff3c:	463b      	mov	r3, r7
 801ff3e:	681b      	ldr	r3, [r3, #0]
 801ff40:	699a      	ldr	r2, [r3, #24]
 801ff42:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801ff46:	4611      	mov	r1, r2
 801ff48:	4618      	mov	r0, r3
 801ff4a:	f7ee f81c 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801ff4e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801ff52:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801ff56:	4611      	mov	r1, r2
 801ff58:	4618      	mov	r0, r3
 801ff5a:	f7ee fbd8 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801ff5e:	4603      	mov	r3, r0
 801ff60:	461c      	mov	r4, r3
 801ff62:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801ff66:	4618      	mov	r0, r3
 801ff68:	f7ee fbc5 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801ff6c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801ff70:	4618      	mov	r0, r3
 801ff72:	f7ee fbc0 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801ff76:	e0f3      	b.n	8020160 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void*")
 801ff78:	1d3b      	adds	r3, r7, #4
 801ff7a:	681b      	ldr	r3, [r3, #0]
 801ff7c:	f103 040c 	add.w	r4, r3, #12
 801ff80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801ff84:	497a      	ldr	r1, [pc, #488]	; (8020170 <_ZNK14MockNamedValue6equalsERKS_+0xb70>)
 801ff86:	4618      	mov	r0, r3
 801ff88:	f7ed fffd 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801ff8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801ff90:	4619      	mov	r1, r3
 801ff92:	4620      	mov	r0, r4
 801ff94:	f7ee fbbb 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801ff98:	4603      	mov	r3, r0
 801ff9a:	461c      	mov	r4, r3
 801ff9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801ffa0:	4618      	mov	r0, r3
 801ffa2:	f7ee fba8 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801ffa6:	2c00      	cmp	r4, #0
 801ffa8:	d00b      	beq.n	801ffc2 <_ZNK14MockNamedValue6equalsERKS_+0x9c2>
        return value_.pointerValue_ == p.value_.pointerValue_;
 801ffaa:	1d3b      	adds	r3, r7, #4
 801ffac:	681b      	ldr	r3, [r3, #0]
 801ffae:	699a      	ldr	r2, [r3, #24]
 801ffb0:	463b      	mov	r3, r7
 801ffb2:	681b      	ldr	r3, [r3, #0]
 801ffb4:	699b      	ldr	r3, [r3, #24]
 801ffb6:	429a      	cmp	r2, r3
 801ffb8:	bf0c      	ite	eq
 801ffba:	2301      	moveq	r3, #1
 801ffbc:	2300      	movne	r3, #0
 801ffbe:	b2dc      	uxtb	r4, r3
 801ffc0:	e0ce      	b.n	8020160 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const void*")
 801ffc2:	1d3b      	adds	r3, r7, #4
 801ffc4:	681b      	ldr	r3, [r3, #0]
 801ffc6:	f103 040c 	add.w	r4, r3, #12
 801ffca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801ffce:	4969      	ldr	r1, [pc, #420]	; (8020174 <_ZNK14MockNamedValue6equalsERKS_+0xb74>)
 801ffd0:	4618      	mov	r0, r3
 801ffd2:	f7ed ffd8 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 801ffd6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801ffda:	4619      	mov	r1, r3
 801ffdc:	4620      	mov	r0, r4
 801ffde:	f7ee fb96 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 801ffe2:	4603      	mov	r3, r0
 801ffe4:	461c      	mov	r4, r3
 801ffe6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801ffea:	4618      	mov	r0, r3
 801ffec:	f7ee fb83 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 801fff0:	2c00      	cmp	r4, #0
 801fff2:	d00b      	beq.n	802000c <_ZNK14MockNamedValue6equalsERKS_+0xa0c>
        return value_.constPointerValue_ == p.value_.constPointerValue_;
 801fff4:	1d3b      	adds	r3, r7, #4
 801fff6:	681b      	ldr	r3, [r3, #0]
 801fff8:	699a      	ldr	r2, [r3, #24]
 801fffa:	463b      	mov	r3, r7
 801fffc:	681b      	ldr	r3, [r3, #0]
 801fffe:	699b      	ldr	r3, [r3, #24]
 8020000:	429a      	cmp	r2, r3
 8020002:	bf0c      	ite	eq
 8020004:	2301      	moveq	r3, #1
 8020006:	2300      	movne	r3, #0
 8020008:	b2dc      	uxtb	r4, r3
 802000a:	e0a9      	b.n	8020160 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void (*)()")
 802000c:	1d3b      	adds	r3, r7, #4
 802000e:	681b      	ldr	r3, [r3, #0]
 8020010:	f103 040c 	add.w	r4, r3, #12
 8020014:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8020018:	4957      	ldr	r1, [pc, #348]	; (8020178 <_ZNK14MockNamedValue6equalsERKS_+0xb78>)
 802001a:	4618      	mov	r0, r3
 802001c:	f7ed ffb3 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8020020:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8020024:	4619      	mov	r1, r3
 8020026:	4620      	mov	r0, r4
 8020028:	f7ee fb71 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 802002c:	4603      	mov	r3, r0
 802002e:	461c      	mov	r4, r3
 8020030:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8020034:	4618      	mov	r0, r3
 8020036:	f7ee fb5e 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 802003a:	2c00      	cmp	r4, #0
 802003c:	d00b      	beq.n	8020056 <_ZNK14MockNamedValue6equalsERKS_+0xa56>
        return value_.functionPointerValue_ == p.value_.functionPointerValue_;
 802003e:	1d3b      	adds	r3, r7, #4
 8020040:	681b      	ldr	r3, [r3, #0]
 8020042:	699a      	ldr	r2, [r3, #24]
 8020044:	463b      	mov	r3, r7
 8020046:	681b      	ldr	r3, [r3, #0]
 8020048:	699b      	ldr	r3, [r3, #24]
 802004a:	429a      	cmp	r2, r3
 802004c:	bf0c      	ite	eq
 802004e:	2301      	moveq	r3, #1
 8020050:	2300      	movne	r3, #0
 8020052:	b2dc      	uxtb	r4, r3
 8020054:	e084      	b.n	8020160 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "double")
 8020056:	1d3b      	adds	r3, r7, #4
 8020058:	681b      	ldr	r3, [r3, #0]
 802005a:	f103 040c 	add.w	r4, r3, #12
 802005e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8020062:	4946      	ldr	r1, [pc, #280]	; (802017c <_ZNK14MockNamedValue6equalsERKS_+0xb7c>)
 8020064:	4618      	mov	r0, r3
 8020066:	f7ed ff8e 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 802006a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 802006e:	4619      	mov	r1, r3
 8020070:	4620      	mov	r0, r4
 8020072:	f7ee fb4c 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 8020076:	4603      	mov	r3, r0
 8020078:	461c      	mov	r4, r3
 802007a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 802007e:	4618      	mov	r0, r3
 8020080:	f7ee fb39 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8020084:	2c00      	cmp	r4, #0
 8020086:	d01c      	beq.n	80200c2 <_ZNK14MockNamedValue6equalsERKS_+0xac2>
        return (doubles_equal(value_.doubleValue_.value, p.value_.doubleValue_.value, value_.doubleValue_.tolerance));
 8020088:	1d3b      	adds	r3, r7, #4
 802008a:	681b      	ldr	r3, [r3, #0]
 802008c:	ed93 7b06 	vldr	d7, [r3, #24]
 8020090:	463b      	mov	r3, r7
 8020092:	681b      	ldr	r3, [r3, #0]
 8020094:	ed93 6b06 	vldr	d6, [r3, #24]
 8020098:	1d3b      	adds	r3, r7, #4
 802009a:	681b      	ldr	r3, [r3, #0]
 802009c:	ed93 5b08 	vldr	d5, [r3, #32]
 80200a0:	eeb0 2a45 	vmov.f32	s4, s10
 80200a4:	eef0 2a65 	vmov.f32	s5, s11
 80200a8:	eeb0 1a46 	vmov.f32	s2, s12
 80200ac:	eef0 1a66 	vmov.f32	s3, s13
 80200b0:	eeb0 0a47 	vmov.f32	s0, s14
 80200b4:	eef0 0a67 	vmov.f32	s1, s15
 80200b8:	f7f3 fe18 	bl	8013cec <_Z13doubles_equalddd>
 80200bc:	4603      	mov	r3, r0
 80200be:	461c      	mov	r4, r3
 80200c0:	e04e      	b.n	8020160 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const unsigned char*")
 80200c2:	1d3b      	adds	r3, r7, #4
 80200c4:	681b      	ldr	r3, [r3, #0]
 80200c6:	f103 040c 	add.w	r4, r3, #12
 80200ca:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80200ce:	492c      	ldr	r1, [pc, #176]	; (8020180 <_ZNK14MockNamedValue6equalsERKS_+0xb80>)
 80200d0:	4618      	mov	r0, r3
 80200d2:	f7ed ff58 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80200d6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80200da:	4619      	mov	r1, r3
 80200dc:	4620      	mov	r0, r4
 80200de:	f7ee fb16 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 80200e2:	4603      	mov	r3, r0
 80200e4:	461c      	mov	r4, r3
 80200e6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80200ea:	4618      	mov	r0, r3
 80200ec:	f7ee fb03 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80200f0:	2c00      	cmp	r4, #0
 80200f2:	d01c      	beq.n	802012e <_ZNK14MockNamedValue6equalsERKS_+0xb2e>
    {
        if (size_ != p.size_) {
 80200f4:	1d3b      	adds	r3, r7, #4
 80200f6:	681b      	ldr	r3, [r3, #0]
 80200f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80200fa:	463b      	mov	r3, r7
 80200fc:	681b      	ldr	r3, [r3, #0]
 80200fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020100:	429a      	cmp	r2, r3
 8020102:	d001      	beq.n	8020108 <_ZNK14MockNamedValue6equalsERKS_+0xb08>
            return false;
 8020104:	2400      	movs	r4, #0
 8020106:	e02b      	b.n	8020160 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        }
        return SimpleString::MemCmp(value_.memoryBufferValue_, p.value_.memoryBufferValue_, size_) == 0;
 8020108:	1d3b      	adds	r3, r7, #4
 802010a:	681b      	ldr	r3, [r3, #0]
 802010c:	6998      	ldr	r0, [r3, #24]
 802010e:	463b      	mov	r3, r7
 8020110:	681b      	ldr	r3, [r3, #0]
 8020112:	6999      	ldr	r1, [r3, #24]
 8020114:	1d3b      	adds	r3, r7, #4
 8020116:	681b      	ldr	r3, [r3, #0]
 8020118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802011a:	461a      	mov	r2, r3
 802011c:	f7ed fe52 	bl	800ddc4 <_ZN12SimpleString6MemCmpEPKvS1_j>
 8020120:	4603      	mov	r3, r0
 8020122:	2b00      	cmp	r3, #0
 8020124:	bf0c      	ite	eq
 8020126:	2301      	moveq	r3, #1
 8020128:	2300      	movne	r3, #0
 802012a:	b2dc      	uxtb	r4, r3
 802012c:	e018      	b.n	8020160 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    }

    if (comparator_)
 802012e:	1d3b      	adds	r3, r7, #4
 8020130:	681b      	ldr	r3, [r3, #0]
 8020132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020134:	2b00      	cmp	r3, #0
 8020136:	d012      	beq.n	802015e <_ZNK14MockNamedValue6equalsERKS_+0xb5e>
        return comparator_->isEqual(value_.constObjectPointerValue_, p.value_.constObjectPointerValue_);
 8020138:	1d3b      	adds	r3, r7, #4
 802013a:	681b      	ldr	r3, [r3, #0]
 802013c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 802013e:	1d3b      	adds	r3, r7, #4
 8020140:	681b      	ldr	r3, [r3, #0]
 8020142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020144:	681b      	ldr	r3, [r3, #0]
 8020146:	3308      	adds	r3, #8
 8020148:	681b      	ldr	r3, [r3, #0]
 802014a:	1d3a      	adds	r2, r7, #4
 802014c:	6812      	ldr	r2, [r2, #0]
 802014e:	6991      	ldr	r1, [r2, #24]
 8020150:	463a      	mov	r2, r7
 8020152:	6812      	ldr	r2, [r2, #0]
 8020154:	6992      	ldr	r2, [r2, #24]
 8020156:	4798      	blx	r3
 8020158:	4603      	mov	r3, r0
 802015a:	461c      	mov	r4, r3
 802015c:	e000      	b.n	8020160 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    return false;
 802015e:	2400      	movs	r4, #0
 8020160:	4623      	mov	r3, r4
}
 8020162:	4618      	mov	r0, r3
 8020164:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8020168:	46bd      	mov	sp, r7
 802016a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802016c:	080281a8 	.word	0x080281a8
 8020170:	08028188 	.word	0x08028188
 8020174:	08028190 	.word	0x08028190
 8020178:	0802819c 	.word	0x0802819c
 802017c:	08028180 	.word	0x08028180
 8020180:	080281b4 	.word	0x080281b4

08020184 <_ZNK14MockNamedValue20compatibleForCopyingERKS_>:

bool MockNamedValue::compatibleForCopying(const MockNamedValue& p) const
{
 8020184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020186:	b087      	sub	sp, #28
 8020188:	af00      	add	r7, sp, #0
 802018a:	6078      	str	r0, [r7, #4]
 802018c:	6039      	str	r1, [r7, #0]
    if (type_ == p.type_) return true;
 802018e:	687b      	ldr	r3, [r7, #4]
 8020190:	f103 020c 	add.w	r2, r3, #12
 8020194:	683b      	ldr	r3, [r7, #0]
 8020196:	330c      	adds	r3, #12
 8020198:	4619      	mov	r1, r3
 802019a:	4610      	mov	r0, r2
 802019c:	f7ee fab7 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 80201a0:	4603      	mov	r3, r0
 80201a2:	2b00      	cmp	r3, #0
 80201a4:	d001      	beq.n	80201aa <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x26>
 80201a6:	2301      	movs	r3, #1
 80201a8:	e03c      	b.n	8020224 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    if ((type_ == "const void*") && (p.type_ == "void*"))
 80201aa:	2500      	movs	r5, #0
 80201ac:	687b      	ldr	r3, [r7, #4]
 80201ae:	f103 040c 	add.w	r4, r3, #12
 80201b2:	f107 0308 	add.w	r3, r7, #8
 80201b6:	491d      	ldr	r1, [pc, #116]	; (802022c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa8>)
 80201b8:	4618      	mov	r0, r3
 80201ba:	f7ed fee4 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80201be:	2601      	movs	r6, #1
 80201c0:	f107 0308 	add.w	r3, r7, #8
 80201c4:	4619      	mov	r1, r3
 80201c6:	4620      	mov	r0, r4
 80201c8:	f7ee faa1 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 80201cc:	4603      	mov	r3, r0
 80201ce:	2b00      	cmp	r3, #0
 80201d0:	d014      	beq.n	80201fc <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 80201d2:	683b      	ldr	r3, [r7, #0]
 80201d4:	f103 040c 	add.w	r4, r3, #12
 80201d8:	f107 0310 	add.w	r3, r7, #16
 80201dc:	4914      	ldr	r1, [pc, #80]	; (8020230 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xac>)
 80201de:	4618      	mov	r0, r3
 80201e0:	f7ed fed1 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80201e4:	2501      	movs	r5, #1
 80201e6:	f107 0310 	add.w	r3, r7, #16
 80201ea:	4619      	mov	r1, r3
 80201ec:	4620      	mov	r0, r4
 80201ee:	f7ee fa8e 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 80201f2:	4603      	mov	r3, r0
 80201f4:	2b00      	cmp	r3, #0
 80201f6:	d001      	beq.n	80201fc <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 80201f8:	2401      	movs	r4, #1
 80201fa:	e000      	b.n	80201fe <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x7a>
 80201fc:	2400      	movs	r4, #0
 80201fe:	2d00      	cmp	r5, #0
 8020200:	d004      	beq.n	802020c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x88>
 8020202:	f107 0310 	add.w	r3, r7, #16
 8020206:	4618      	mov	r0, r3
 8020208:	f7ee fa75 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 802020c:	2e00      	cmp	r6, #0
 802020e:	d004      	beq.n	802021a <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x96>
 8020210:	f107 0308 	add.w	r3, r7, #8
 8020214:	4618      	mov	r0, r3
 8020216:	f7ee fa6e 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 802021a:	2c00      	cmp	r4, #0
 802021c:	d001      	beq.n	8020222 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x9e>
        return true;
 802021e:	2301      	movs	r3, #1
 8020220:	e000      	b.n	8020224 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    return false;
 8020222:	2300      	movs	r3, #0
}
 8020224:	4618      	mov	r0, r3
 8020226:	371c      	adds	r7, #28
 8020228:	46bd      	mov	sp, r7
 802022a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802022c:	08028190 	.word	0x08028190
 8020230:	08028188 	.word	0x08028188

08020234 <_ZNK14MockNamedValue8toStringEv>:

SimpleString MockNamedValue::toString() const
{
 8020234:	b590      	push	{r4, r7, lr}
 8020236:	b0b9      	sub	sp, #228	; 0xe4
 8020238:	af00      	add	r7, sp, #0
 802023a:	6078      	str	r0, [r7, #4]
 802023c:	6039      	str	r1, [r7, #0]
    if (type_ == "bool")
 802023e:	683b      	ldr	r3, [r7, #0]
 8020240:	f103 040c 	add.w	r4, r3, #12
 8020244:	f107 0308 	add.w	r3, r7, #8
 8020248:	49d4      	ldr	r1, [pc, #848]	; (802059c <_ZNK14MockNamedValue8toStringEv+0x368>)
 802024a:	4618      	mov	r0, r3
 802024c:	f7ed fe9b 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8020250:	f107 0308 	add.w	r3, r7, #8
 8020254:	4619      	mov	r1, r3
 8020256:	4620      	mov	r0, r4
 8020258:	f7ee fa59 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 802025c:	4603      	mov	r3, r0
 802025e:	461c      	mov	r4, r3
 8020260:	f107 0308 	add.w	r3, r7, #8
 8020264:	4618      	mov	r0, r3
 8020266:	f7ee fa46 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 802026a:	2c00      	cmp	r4, #0
 802026c:	d007      	beq.n	802027e <_ZNK14MockNamedValue8toStringEv+0x4a>
        return StringFrom(value_.boolValue_);
 802026e:	683b      	ldr	r3, [r7, #0]
 8020270:	7e1a      	ldrb	r2, [r3, #24]
 8020272:	687b      	ldr	r3, [r7, #4]
 8020274:	4611      	mov	r1, r2
 8020276:	4618      	mov	r0, r3
 8020278:	f7ee fcae 	bl	800ebd8 <_Z10StringFromb>
 802027c:	e23f      	b.n	80206fe <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "int")
 802027e:	683b      	ldr	r3, [r7, #0]
 8020280:	f103 040c 	add.w	r4, r3, #12
 8020284:	f107 0310 	add.w	r3, r7, #16
 8020288:	49c5      	ldr	r1, [pc, #788]	; (80205a0 <_ZNK14MockNamedValue8toStringEv+0x36c>)
 802028a:	4618      	mov	r0, r3
 802028c:	f7ed fe7b 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8020290:	f107 0310 	add.w	r3, r7, #16
 8020294:	4619      	mov	r1, r3
 8020296:	4620      	mov	r0, r4
 8020298:	f7ee fa39 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 802029c:	4603      	mov	r3, r0
 802029e:	461c      	mov	r4, r3
 80202a0:	f107 0310 	add.w	r3, r7, #16
 80202a4:	4618      	mov	r0, r3
 80202a6:	f7ee fa26 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80202aa:	2c00      	cmp	r4, #0
 80202ac:	d03b      	beq.n	8020326 <_ZNK14MockNamedValue8toStringEv+0xf2>
        return StringFrom(value_.intValue_) + " " + BracketsFormattedHexStringFrom(value_.intValue_);
 80202ae:	683b      	ldr	r3, [r7, #0]
 80202b0:	699a      	ldr	r2, [r3, #24]
 80202b2:	f107 0320 	add.w	r3, r7, #32
 80202b6:	4611      	mov	r1, r2
 80202b8:	4618      	mov	r0, r3
 80202ba:	f7ee fce3 	bl	800ec84 <_Z10StringFromi>
 80202be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80202c2:	49b8      	ldr	r1, [pc, #736]	; (80205a4 <_ZNK14MockNamedValue8toStringEv+0x370>)
 80202c4:	4618      	mov	r0, r3
 80202c6:	f7ed fe5e 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80202ca:	f107 0318 	add.w	r3, r7, #24
 80202ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80202d2:	f107 0120 	add.w	r1, r7, #32
 80202d6:	4618      	mov	r0, r3
 80202d8:	f7ee fa6f 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 80202dc:	683b      	ldr	r3, [r7, #0]
 80202de:	699a      	ldr	r2, [r3, #24]
 80202e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80202e4:	4611      	mov	r1, r2
 80202e6:	4618      	mov	r0, r3
 80202e8:	f7ee fdbc 	bl	800ee64 <_Z30BracketsFormattedHexStringFromi>
 80202ec:	687b      	ldr	r3, [r7, #4]
 80202ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80202f2:	f107 0118 	add.w	r1, r7, #24
 80202f6:	4618      	mov	r0, r3
 80202f8:	f7ee fa5f 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 80202fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8020300:	4618      	mov	r0, r3
 8020302:	f7ee f9f8 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8020306:	f107 0318 	add.w	r3, r7, #24
 802030a:	4618      	mov	r0, r3
 802030c:	f7ee f9f3 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8020310:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8020314:	4618      	mov	r0, r3
 8020316:	f7ee f9ee 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 802031a:	f107 0320 	add.w	r3, r7, #32
 802031e:	4618      	mov	r0, r3
 8020320:	f7ee f9e9 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8020324:	e1eb      	b.n	80206fe <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned int")
 8020326:	683b      	ldr	r3, [r7, #0]
 8020328:	f103 040c 	add.w	r4, r3, #12
 802032c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8020330:	499d      	ldr	r1, [pc, #628]	; (80205a8 <_ZNK14MockNamedValue8toStringEv+0x374>)
 8020332:	4618      	mov	r0, r3
 8020334:	f7ed fe27 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8020338:	f107 0338 	add.w	r3, r7, #56	; 0x38
 802033c:	4619      	mov	r1, r3
 802033e:	4620      	mov	r0, r4
 8020340:	f7ee f9e5 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 8020344:	4603      	mov	r3, r0
 8020346:	461c      	mov	r4, r3
 8020348:	f107 0338 	add.w	r3, r7, #56	; 0x38
 802034c:	4618      	mov	r0, r3
 802034e:	f7ee f9d2 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8020352:	2c00      	cmp	r4, #0
 8020354:	d03b      	beq.n	80203ce <_ZNK14MockNamedValue8toStringEv+0x19a>
        return StringFrom(value_.unsignedIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedIntValue_);
 8020356:	683b      	ldr	r3, [r7, #0]
 8020358:	699a      	ldr	r2, [r3, #24]
 802035a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 802035e:	4611      	mov	r1, r2
 8020360:	4618      	mov	r0, r3
 8020362:	f7ee fef7 	bl	800f154 <_Z10StringFromj>
 8020366:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802036a:	498e      	ldr	r1, [pc, #568]	; (80205a4 <_ZNK14MockNamedValue8toStringEv+0x370>)
 802036c:	4618      	mov	r0, r3
 802036e:	f7ed fe0a 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8020372:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8020376:	f107 0250 	add.w	r2, r7, #80	; 0x50
 802037a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 802037e:	4618      	mov	r0, r3
 8020380:	f7ee fa1b 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 8020384:	683b      	ldr	r3, [r7, #0]
 8020386:	699a      	ldr	r2, [r3, #24]
 8020388:	f107 0358 	add.w	r3, r7, #88	; 0x58
 802038c:	4611      	mov	r1, r2
 802038e:	4618      	mov	r0, r3
 8020390:	f7ee fd84 	bl	800ee9c <_Z30BracketsFormattedHexStringFromj>
 8020394:	687b      	ldr	r3, [r7, #4]
 8020396:	f107 0258 	add.w	r2, r7, #88	; 0x58
 802039a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 802039e:	4618      	mov	r0, r3
 80203a0:	f7ee fa0b 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 80203a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80203a8:	4618      	mov	r0, r3
 80203aa:	f7ee f9a4 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80203ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80203b2:	4618      	mov	r0, r3
 80203b4:	f7ee f99f 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80203b8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80203bc:	4618      	mov	r0, r3
 80203be:	f7ee f99a 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80203c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80203c6:	4618      	mov	r0, r3
 80203c8:	f7ee f995 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80203cc:	e197      	b.n	80206fe <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long int")
 80203ce:	683b      	ldr	r3, [r7, #0]
 80203d0:	f103 040c 	add.w	r4, r3, #12
 80203d4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80203d8:	4974      	ldr	r1, [pc, #464]	; (80205ac <_ZNK14MockNamedValue8toStringEv+0x378>)
 80203da:	4618      	mov	r0, r3
 80203dc:	f7ed fdd3 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80203e0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80203e4:	4619      	mov	r1, r3
 80203e6:	4620      	mov	r0, r4
 80203e8:	f7ee f991 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 80203ec:	4603      	mov	r3, r0
 80203ee:	461c      	mov	r4, r3
 80203f0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80203f4:	4618      	mov	r0, r3
 80203f6:	f7ee f97e 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80203fa:	2c00      	cmp	r4, #0
 80203fc:	d03b      	beq.n	8020476 <_ZNK14MockNamedValue8toStringEv+0x242>
        return StringFrom(value_.longIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longIntValue_);
 80203fe:	683b      	ldr	r3, [r7, #0]
 8020400:	699a      	ldr	r2, [r3, #24]
 8020402:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8020406:	4611      	mov	r1, r2
 8020408:	4618      	mov	r0, r3
 802040a:	f7ee fc4d 	bl	800eca8 <_Z10StringFroml>
 802040e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8020412:	4964      	ldr	r1, [pc, #400]	; (80205a4 <_ZNK14MockNamedValue8toStringEv+0x370>)
 8020414:	4618      	mov	r0, r3
 8020416:	f7ed fdb6 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 802041a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 802041e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8020422:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8020426:	4618      	mov	r0, r3
 8020428:	f7ee f9c7 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 802042c:	683b      	ldr	r3, [r7, #0]
 802042e:	699a      	ldr	r2, [r3, #24]
 8020430:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8020434:	4611      	mov	r1, r2
 8020436:	4618      	mov	r0, r3
 8020438:	f7ee fd4c 	bl	800eed4 <_Z30BracketsFormattedHexStringFroml>
 802043c:	687b      	ldr	r3, [r7, #4]
 802043e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8020442:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8020446:	4618      	mov	r0, r3
 8020448:	f7ee f9b7 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 802044c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8020450:	4618      	mov	r0, r3
 8020452:	f7ee f950 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8020456:	f107 0368 	add.w	r3, r7, #104	; 0x68
 802045a:	4618      	mov	r0, r3
 802045c:	f7ee f94b 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8020460:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8020464:	4618      	mov	r0, r3
 8020466:	f7ee f946 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 802046a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 802046e:	4618      	mov	r0, r3
 8020470:	f7ee f941 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8020474:	e143      	b.n	80206fe <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned long int")
 8020476:	683b      	ldr	r3, [r7, #0]
 8020478:	f103 040c 	add.w	r4, r3, #12
 802047c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8020480:	494b      	ldr	r1, [pc, #300]	; (80205b0 <_ZNK14MockNamedValue8toStringEv+0x37c>)
 8020482:	4618      	mov	r0, r3
 8020484:	f7ed fd7f 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8020488:	f107 0388 	add.w	r3, r7, #136	; 0x88
 802048c:	4619      	mov	r1, r3
 802048e:	4620      	mov	r0, r4
 8020490:	f7ee f93d 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 8020494:	4603      	mov	r3, r0
 8020496:	461c      	mov	r4, r3
 8020498:	f107 0388 	add.w	r3, r7, #136	; 0x88
 802049c:	4618      	mov	r0, r3
 802049e:	f7ee f92a 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80204a2:	2c00      	cmp	r4, #0
 80204a4:	d03b      	beq.n	802051e <_ZNK14MockNamedValue8toStringEv+0x2ea>
        return StringFrom(value_.unsignedLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongIntValue_);
 80204a6:	683b      	ldr	r3, [r7, #0]
 80204a8:	699a      	ldr	r2, [r3, #24]
 80204aa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80204ae:	4611      	mov	r1, r2
 80204b0:	4618      	mov	r0, r3
 80204b2:	f7ee fe61 	bl	800f178 <_Z10StringFromm>
 80204b6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80204ba:	493a      	ldr	r1, [pc, #232]	; (80205a4 <_ZNK14MockNamedValue8toStringEv+0x370>)
 80204bc:	4618      	mov	r0, r3
 80204be:	f7ed fd62 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80204c2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80204c6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80204ca:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80204ce:	4618      	mov	r0, r3
 80204d0:	f7ee f973 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 80204d4:	683b      	ldr	r3, [r7, #0]
 80204d6:	699a      	ldr	r2, [r3, #24]
 80204d8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80204dc:	4611      	mov	r1, r2
 80204de:	4618      	mov	r0, r3
 80204e0:	f7ee fd14 	bl	800ef0c <_Z30BracketsFormattedHexStringFromm>
 80204e4:	687b      	ldr	r3, [r7, #4]
 80204e6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80204ea:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80204ee:	4618      	mov	r0, r3
 80204f0:	f7ee f963 	bl	800e7ba <_ZNK12SimpleStringplERKS_>
 80204f4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80204f8:	4618      	mov	r0, r3
 80204fa:	f7ee f8fc 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80204fe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8020502:	4618      	mov	r0, r3
 8020504:	f7ee f8f7 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8020508:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 802050c:	4618      	mov	r0, r3
 802050e:	f7ee f8f2 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8020512:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8020516:	4618      	mov	r0, r3
 8020518:	f7ee f8ed 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 802051c:	e0ef      	b.n	80206fe <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long long int")
        return StringFrom(value_.longLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longLongIntValue_);
    else if (type_ == "unsigned long long int")
        return StringFrom(value_.unsignedLongLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongLongIntValue_);
#endif
    else if (type_ == "const char*")
 802051e:	683b      	ldr	r3, [r7, #0]
 8020520:	f103 040c 	add.w	r4, r3, #12
 8020524:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8020528:	4922      	ldr	r1, [pc, #136]	; (80205b4 <_ZNK14MockNamedValue8toStringEv+0x380>)
 802052a:	4618      	mov	r0, r3
 802052c:	f7ed fd2b 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8020530:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8020534:	4619      	mov	r1, r3
 8020536:	4620      	mov	r0, r4
 8020538:	f7ee f8e9 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 802053c:	4603      	mov	r3, r0
 802053e:	461c      	mov	r4, r3
 8020540:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8020544:	4618      	mov	r0, r3
 8020546:	f7ee f8d6 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 802054a:	2c00      	cmp	r4, #0
 802054c:	d006      	beq.n	802055c <_ZNK14MockNamedValue8toStringEv+0x328>
        return value_.stringValue_;
 802054e:	683b      	ldr	r3, [r7, #0]
 8020550:	699b      	ldr	r3, [r3, #24]
 8020552:	4619      	mov	r1, r3
 8020554:	6878      	ldr	r0, [r7, #4]
 8020556:	f7ed fd16 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 802055a:	e0d0      	b.n	80206fe <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "void*")
 802055c:	683b      	ldr	r3, [r7, #0]
 802055e:	f103 040c 	add.w	r4, r3, #12
 8020562:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8020566:	4914      	ldr	r1, [pc, #80]	; (80205b8 <_ZNK14MockNamedValue8toStringEv+0x384>)
 8020568:	4618      	mov	r0, r3
 802056a:	f7ed fd0c 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 802056e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8020572:	4619      	mov	r1, r3
 8020574:	4620      	mov	r0, r4
 8020576:	f7ee f8ca 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 802057a:	4603      	mov	r3, r0
 802057c:	461c      	mov	r4, r3
 802057e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8020582:	4618      	mov	r0, r3
 8020584:	f7ee f8b7 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8020588:	2c00      	cmp	r4, #0
 802058a:	d017      	beq.n	80205bc <_ZNK14MockNamedValue8toStringEv+0x388>
        return StringFrom(value_.pointerValue_);
 802058c:	683b      	ldr	r3, [r7, #0]
 802058e:	699a      	ldr	r2, [r3, #24]
 8020590:	687b      	ldr	r3, [r7, #4]
 8020592:	4611      	mov	r1, r2
 8020594:	4618      	mov	r0, r3
 8020596:	f7ee fb99 	bl	800eccc <_Z10StringFromPKv>
 802059a:	e0b0      	b.n	80206fe <_ZNK14MockNamedValue8toStringEv+0x4ca>
 802059c:	080280e0 	.word	0x080280e0
 80205a0:	080280dc 	.word	0x080280dc
 80205a4:	080281cc 	.word	0x080281cc
 80205a8:	080280e8 	.word	0x080280e8
 80205ac:	080280f8 	.word	0x080280f8
 80205b0:	08028104 	.word	0x08028104
 80205b4:	080281a8 	.word	0x080281a8
 80205b8:	08028188 	.word	0x08028188
    else if (type_ == "void (*)()")
 80205bc:	683b      	ldr	r3, [r7, #0]
 80205be:	f103 040c 	add.w	r4, r3, #12
 80205c2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80205c6:	4950      	ldr	r1, [pc, #320]	; (8020708 <_ZNK14MockNamedValue8toStringEv+0x4d4>)
 80205c8:	4618      	mov	r0, r3
 80205ca:	f7ed fcdc 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 80205ce:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80205d2:	4619      	mov	r1, r3
 80205d4:	4620      	mov	r0, r4
 80205d6:	f7ee f89a 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 80205da:	4603      	mov	r3, r0
 80205dc:	461c      	mov	r4, r3
 80205de:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80205e2:	4618      	mov	r0, r3
 80205e4:	f7ee f887 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80205e8:	2c00      	cmp	r4, #0
 80205ea:	d007      	beq.n	80205fc <_ZNK14MockNamedValue8toStringEv+0x3c8>
        return StringFrom(value_.functionPointerValue_);
 80205ec:	683b      	ldr	r3, [r7, #0]
 80205ee:	699a      	ldr	r2, [r3, #24]
 80205f0:	687b      	ldr	r3, [r7, #4]
 80205f2:	4611      	mov	r1, r2
 80205f4:	4618      	mov	r0, r3
 80205f6:	f7ee fb93 	bl	800ed20 <_Z10StringFromPFvvE>
 80205fa:	e080      	b.n	80206fe <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const void*")
 80205fc:	683b      	ldr	r3, [r7, #0]
 80205fe:	f103 040c 	add.w	r4, r3, #12
 8020602:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8020606:	4941      	ldr	r1, [pc, #260]	; (802070c <_ZNK14MockNamedValue8toStringEv+0x4d8>)
 8020608:	4618      	mov	r0, r3
 802060a:	f7ed fcbc 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 802060e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8020612:	4619      	mov	r1, r3
 8020614:	4620      	mov	r0, r4
 8020616:	f7ee f87a 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 802061a:	4603      	mov	r3, r0
 802061c:	461c      	mov	r4, r3
 802061e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8020622:	4618      	mov	r0, r3
 8020624:	f7ee f867 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8020628:	2c00      	cmp	r4, #0
 802062a:	d007      	beq.n	802063c <_ZNK14MockNamedValue8toStringEv+0x408>
        return StringFrom(value_.constPointerValue_);
 802062c:	683b      	ldr	r3, [r7, #0]
 802062e:	699a      	ldr	r2, [r3, #24]
 8020630:	687b      	ldr	r3, [r7, #4]
 8020632:	4611      	mov	r1, r2
 8020634:	4618      	mov	r0, r3
 8020636:	f7ee fb49 	bl	800eccc <_Z10StringFromPKv>
 802063a:	e060      	b.n	80206fe <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "double")
 802063c:	683b      	ldr	r3, [r7, #0]
 802063e:	f103 040c 	add.w	r4, r3, #12
 8020642:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8020646:	4932      	ldr	r1, [pc, #200]	; (8020710 <_ZNK14MockNamedValue8toStringEv+0x4dc>)
 8020648:	4618      	mov	r0, r3
 802064a:	f7ed fc9c 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 802064e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8020652:	4619      	mov	r1, r3
 8020654:	4620      	mov	r0, r4
 8020656:	f7ee f85a 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 802065a:	4603      	mov	r3, r0
 802065c:	461c      	mov	r4, r3
 802065e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8020662:	4618      	mov	r0, r3
 8020664:	f7ee f847 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8020668:	2c00      	cmp	r4, #0
 802066a:	d00c      	beq.n	8020686 <_ZNK14MockNamedValue8toStringEv+0x452>
        return StringFrom(value_.doubleValue_.value);
 802066c:	683b      	ldr	r3, [r7, #0]
 802066e:	ed93 7b06 	vldr	d7, [r3, #24]
 8020672:	687b      	ldr	r3, [r7, #4]
 8020674:	2106      	movs	r1, #6
 8020676:	eeb0 0a47 	vmov.f32	s0, s14
 802067a:	eef0 0a67 	vmov.f32	s1, s15
 802067e:	4618      	mov	r0, r3
 8020680:	f7ee fcfe 	bl	800f080 <_Z10StringFromdi>
 8020684:	e03b      	b.n	80206fe <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const unsigned char*")
 8020686:	683b      	ldr	r3, [r7, #0]
 8020688:	f103 040c 	add.w	r4, r3, #12
 802068c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8020690:	4920      	ldr	r1, [pc, #128]	; (8020714 <_ZNK14MockNamedValue8toStringEv+0x4e0>)
 8020692:	4618      	mov	r0, r3
 8020694:	f7ed fc77 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8020698:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 802069c:	4619      	mov	r1, r3
 802069e:	4620      	mov	r0, r4
 80206a0:	f7ee f835 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 80206a4:	4603      	mov	r3, r0
 80206a6:	461c      	mov	r4, r3
 80206a8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80206ac:	4618      	mov	r0, r3
 80206ae:	f7ee f822 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 80206b2:	2c00      	cmp	r4, #0
 80206b4:	d008      	beq.n	80206c8 <_ZNK14MockNamedValue8toStringEv+0x494>
        return StringFromBinaryWithSizeOrNull(value_.memoryBufferValue_, size_);
 80206b6:	683b      	ldr	r3, [r7, #0]
 80206b8:	6999      	ldr	r1, [r3, #24]
 80206ba:	683b      	ldr	r3, [r7, #0]
 80206bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80206be:	687b      	ldr	r3, [r7, #4]
 80206c0:	4618      	mov	r0, r3
 80206c2:	f7ee fe71 	bl	800f3a8 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 80206c6:	e01a      	b.n	80206fe <_ZNK14MockNamedValue8toStringEv+0x4ca>

    if (comparator_)
 80206c8:	683b      	ldr	r3, [r7, #0]
 80206ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80206cc:	2b00      	cmp	r3, #0
 80206ce:	d00b      	beq.n	80206e8 <_ZNK14MockNamedValue8toStringEv+0x4b4>
        return comparator_->valueToString(value_.constObjectPointerValue_);
 80206d0:	683b      	ldr	r3, [r7, #0]
 80206d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80206d4:	683b      	ldr	r3, [r7, #0]
 80206d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80206d8:	681b      	ldr	r3, [r3, #0]
 80206da:	330c      	adds	r3, #12
 80206dc:	681b      	ldr	r3, [r3, #0]
 80206de:	683a      	ldr	r2, [r7, #0]
 80206e0:	6992      	ldr	r2, [r2, #24]
 80206e2:	6878      	ldr	r0, [r7, #4]
 80206e4:	4798      	blx	r3
 80206e6:	e00a      	b.n	80206fe <_ZNK14MockNamedValue8toStringEv+0x4ca>

    return StringFromFormat("No comparator found for type: \"%s\"", type_.asCharString());
 80206e8:	683b      	ldr	r3, [r7, #0]
 80206ea:	330c      	adds	r3, #12
 80206ec:	4618      	mov	r0, r3
 80206ee:	f7ed ffd5 	bl	800e69c <_ZNK12SimpleString12asCharStringEv>
 80206f2:	4602      	mov	r2, r0
 80206f4:	687b      	ldr	r3, [r7, #4]
 80206f6:	4908      	ldr	r1, [pc, #32]	; (8020718 <_ZNK14MockNamedValue8toStringEv+0x4e4>)
 80206f8:	4618      	mov	r0, r3
 80206fa:	f7ee fd03 	bl	800f104 <_Z16StringFromFormatPKcz>

}
 80206fe:	6878      	ldr	r0, [r7, #4]
 8020700:	37e4      	adds	r7, #228	; 0xe4
 8020702:	46bd      	mov	sp, r7
 8020704:	bd90      	pop	{r4, r7, pc}
 8020706:	bf00      	nop
 8020708:	0802819c 	.word	0x0802819c
 802070c:	08028190 	.word	0x08028190
 8020710:	08028180 	.word	0x08028180
 8020714:	080281b4 	.word	0x080281b4
 8020718:	080281d0 	.word	0x080281d0

0802071c <_ZN22MockNamedValueListNode7setNextEPS_>:

void MockNamedValueListNode::setNext(MockNamedValueListNode* node)
{
 802071c:	b480      	push	{r7}
 802071e:	b083      	sub	sp, #12
 8020720:	af00      	add	r7, sp, #0
 8020722:	6078      	str	r0, [r7, #4]
 8020724:	6039      	str	r1, [r7, #0]
    next_ = node;
 8020726:	687b      	ldr	r3, [r7, #4]
 8020728:	683a      	ldr	r2, [r7, #0]
 802072a:	605a      	str	r2, [r3, #4]
}
 802072c:	bf00      	nop
 802072e:	370c      	adds	r7, #12
 8020730:	46bd      	mov	sp, r7
 8020732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020736:	4770      	bx	lr

08020738 <_ZN22MockNamedValueListNode4nextEv>:

MockNamedValueListNode* MockNamedValueListNode::next()
{
 8020738:	b480      	push	{r7}
 802073a:	b083      	sub	sp, #12
 802073c:	af00      	add	r7, sp, #0
 802073e:	6078      	str	r0, [r7, #4]
    return next_;
 8020740:	687b      	ldr	r3, [r7, #4]
 8020742:	685b      	ldr	r3, [r3, #4]
}
 8020744:	4618      	mov	r0, r3
 8020746:	370c      	adds	r7, #12
 8020748:	46bd      	mov	sp, r7
 802074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802074e:	4770      	bx	lr

08020750 <_ZN22MockNamedValueListNode4itemEv>:

MockNamedValue* MockNamedValueListNode::item()
{
 8020750:	b480      	push	{r7}
 8020752:	b083      	sub	sp, #12
 8020754:	af00      	add	r7, sp, #0
 8020756:	6078      	str	r0, [r7, #4]
    return data_;
 8020758:	687b      	ldr	r3, [r7, #4]
 802075a:	681b      	ldr	r3, [r3, #0]
}
 802075c:	4618      	mov	r0, r3
 802075e:	370c      	adds	r7, #12
 8020760:	46bd      	mov	sp, r7
 8020762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020766:	4770      	bx	lr

08020768 <_ZN22MockNamedValueListNode7destroyEv>:

void MockNamedValueListNode::destroy()
{
 8020768:	b580      	push	{r7, lr}
 802076a:	b082      	sub	sp, #8
 802076c:	af00      	add	r7, sp, #0
 802076e:	6078      	str	r0, [r7, #4]
    delete data_;
 8020770:	687b      	ldr	r3, [r7, #4]
 8020772:	681b      	ldr	r3, [r3, #0]
 8020774:	2b00      	cmp	r3, #0
 8020776:	d004      	beq.n	8020782 <_ZN22MockNamedValueListNode7destroyEv+0x1a>
 8020778:	681a      	ldr	r2, [r3, #0]
 802077a:	3204      	adds	r2, #4
 802077c:	6812      	ldr	r2, [r2, #0]
 802077e:	4618      	mov	r0, r3
 8020780:	4790      	blx	r2
}
 8020782:	bf00      	nop
 8020784:	3708      	adds	r7, #8
 8020786:	46bd      	mov	sp, r7
 8020788:	bd80      	pop	{r7, pc}

0802078a <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>:

MockNamedValueListNode::MockNamedValueListNode(MockNamedValue* newValue)
 802078a:	b480      	push	{r7}
 802078c:	b083      	sub	sp, #12
 802078e:	af00      	add	r7, sp, #0
 8020790:	6078      	str	r0, [r7, #4]
 8020792:	6039      	str	r1, [r7, #0]
    : data_(newValue), next_(NULLPTR)
 8020794:	687b      	ldr	r3, [r7, #4]
 8020796:	683a      	ldr	r2, [r7, #0]
 8020798:	601a      	str	r2, [r3, #0]
 802079a:	687b      	ldr	r3, [r7, #4]
 802079c:	2200      	movs	r2, #0
 802079e:	605a      	str	r2, [r3, #4]
{
}
 80207a0:	687b      	ldr	r3, [r7, #4]
 80207a2:	4618      	mov	r0, r3
 80207a4:	370c      	adds	r7, #12
 80207a6:	46bd      	mov	sp, r7
 80207a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207ac:	4770      	bx	lr

080207ae <_ZNK22MockNamedValueListNode7getNameEv>:

SimpleString MockNamedValueListNode::getName() const
{
 80207ae:	b580      	push	{r7, lr}
 80207b0:	b082      	sub	sp, #8
 80207b2:	af00      	add	r7, sp, #0
 80207b4:	6078      	str	r0, [r7, #4]
 80207b6:	6039      	str	r1, [r7, #0]
    return data_->getName();
 80207b8:	683b      	ldr	r3, [r7, #0]
 80207ba:	6819      	ldr	r1, [r3, #0]
 80207bc:	683b      	ldr	r3, [r7, #0]
 80207be:	681b      	ldr	r3, [r3, #0]
 80207c0:	681b      	ldr	r3, [r3, #0]
 80207c2:	335c      	adds	r3, #92	; 0x5c
 80207c4:	681b      	ldr	r3, [r3, #0]
 80207c6:	687a      	ldr	r2, [r7, #4]
 80207c8:	4610      	mov	r0, r2
 80207ca:	4798      	blx	r3
}
 80207cc:	6878      	ldr	r0, [r7, #4]
 80207ce:	3708      	adds	r7, #8
 80207d0:	46bd      	mov	sp, r7
 80207d2:	bd80      	pop	{r7, pc}

080207d4 <_ZNK22MockNamedValueListNode7getTypeEv>:

SimpleString MockNamedValueListNode::getType() const
{
 80207d4:	b580      	push	{r7, lr}
 80207d6:	b082      	sub	sp, #8
 80207d8:	af00      	add	r7, sp, #0
 80207da:	6078      	str	r0, [r7, #4]
 80207dc:	6039      	str	r1, [r7, #0]
    return data_->getType();
 80207de:	683b      	ldr	r3, [r7, #0]
 80207e0:	6819      	ldr	r1, [r3, #0]
 80207e2:	683b      	ldr	r3, [r7, #0]
 80207e4:	681b      	ldr	r3, [r3, #0]
 80207e6:	681b      	ldr	r3, [r3, #0]
 80207e8:	3360      	adds	r3, #96	; 0x60
 80207ea:	681b      	ldr	r3, [r3, #0]
 80207ec:	687a      	ldr	r2, [r7, #4]
 80207ee:	4610      	mov	r0, r2
 80207f0:	4798      	blx	r3
}
 80207f2:	6878      	ldr	r0, [r7, #4]
 80207f4:	3708      	adds	r7, #8
 80207f6:	46bd      	mov	sp, r7
 80207f8:	bd80      	pop	{r7, pc}

080207fa <_ZN18MockNamedValueListC1Ev>:

MockNamedValueList::MockNamedValueList() : head_(NULLPTR)
 80207fa:	b480      	push	{r7}
 80207fc:	b083      	sub	sp, #12
 80207fe:	af00      	add	r7, sp, #0
 8020800:	6078      	str	r0, [r7, #4]
 8020802:	687b      	ldr	r3, [r7, #4]
 8020804:	2200      	movs	r2, #0
 8020806:	601a      	str	r2, [r3, #0]
{
}
 8020808:	687b      	ldr	r3, [r7, #4]
 802080a:	4618      	mov	r0, r3
 802080c:	370c      	adds	r7, #12
 802080e:	46bd      	mov	sp, r7
 8020810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020814:	4770      	bx	lr

08020816 <_ZN18MockNamedValueList5clearEv>:

void MockNamedValueList::clear()
{
 8020816:	b580      	push	{r7, lr}
 8020818:	b084      	sub	sp, #16
 802081a:	af00      	add	r7, sp, #0
 802081c:	6078      	str	r0, [r7, #4]
    while (head_) {
 802081e:	687b      	ldr	r3, [r7, #4]
 8020820:	681b      	ldr	r3, [r3, #0]
 8020822:	2b00      	cmp	r3, #0
 8020824:	d016      	beq.n	8020854 <_ZN18MockNamedValueList5clearEv+0x3e>
        MockNamedValueListNode* n = head_->next();
 8020826:	687b      	ldr	r3, [r7, #4]
 8020828:	681b      	ldr	r3, [r3, #0]
 802082a:	4618      	mov	r0, r3
 802082c:	f7ff ff84 	bl	8020738 <_ZN22MockNamedValueListNode4nextEv>
 8020830:	60f8      	str	r0, [r7, #12]
        head_->destroy();
 8020832:	687b      	ldr	r3, [r7, #4]
 8020834:	681b      	ldr	r3, [r3, #0]
 8020836:	4618      	mov	r0, r3
 8020838:	f7ff ff96 	bl	8020768 <_ZN22MockNamedValueListNode7destroyEv>
        delete head_;
 802083c:	687b      	ldr	r3, [r7, #4]
 802083e:	681b      	ldr	r3, [r3, #0]
 8020840:	2b00      	cmp	r3, #0
 8020842:	d003      	beq.n	802084c <_ZN18MockNamedValueList5clearEv+0x36>
 8020844:	2108      	movs	r1, #8
 8020846:	4618      	mov	r0, r3
 8020848:	f7ea ffee 	bl	800b828 <_ZdlPvj>
        head_ = n;
 802084c:	687b      	ldr	r3, [r7, #4]
 802084e:	68fa      	ldr	r2, [r7, #12]
 8020850:	601a      	str	r2, [r3, #0]
    while (head_) {
 8020852:	e7e4      	b.n	802081e <_ZN18MockNamedValueList5clearEv+0x8>
    }
}
 8020854:	bf00      	nop
 8020856:	3710      	adds	r7, #16
 8020858:	46bd      	mov	sp, r7
 802085a:	bd80      	pop	{r7, pc}

0802085c <_ZN18MockNamedValueList3addEP14MockNamedValue>:

void MockNamedValueList::add(MockNamedValue* newValue)
{
 802085c:	b590      	push	{r4, r7, lr}
 802085e:	b085      	sub	sp, #20
 8020860:	af00      	add	r7, sp, #0
 8020862:	6078      	str	r0, [r7, #4]
 8020864:	6039      	str	r1, [r7, #0]
    MockNamedValueListNode* newNode = new MockNamedValueListNode(newValue);
 8020866:	f44f 7210 	mov.w	r2, #576	; 0x240
 802086a:	4916      	ldr	r1, [pc, #88]	; (80208c4 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x68>)
 802086c:	2008      	movs	r0, #8
 802086e:	f7ea ffc7 	bl	800b800 <_ZnwjPKci>
 8020872:	4604      	mov	r4, r0
 8020874:	6839      	ldr	r1, [r7, #0]
 8020876:	4620      	mov	r0, r4
 8020878:	f7ff ff87 	bl	802078a <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>
 802087c:	60bc      	str	r4, [r7, #8]
    if (head_ == NULLPTR)
 802087e:	687b      	ldr	r3, [r7, #4]
 8020880:	681b      	ldr	r3, [r3, #0]
 8020882:	2b00      	cmp	r3, #0
 8020884:	d103      	bne.n	802088e <_ZN18MockNamedValueList3addEP14MockNamedValue+0x32>
        head_ = newNode;
 8020886:	687b      	ldr	r3, [r7, #4]
 8020888:	68ba      	ldr	r2, [r7, #8]
 802088a:	601a      	str	r2, [r3, #0]
    else {
        MockNamedValueListNode* lastNode = head_;
        while (lastNode->next()) lastNode = lastNode->next();
        lastNode->setNext(newNode);
    }
}
 802088c:	e016      	b.n	80208bc <_ZN18MockNamedValueList3addEP14MockNamedValue+0x60>
        MockNamedValueListNode* lastNode = head_;
 802088e:	687b      	ldr	r3, [r7, #4]
 8020890:	681b      	ldr	r3, [r3, #0]
 8020892:	60fb      	str	r3, [r7, #12]
        while (lastNode->next()) lastNode = lastNode->next();
 8020894:	68f8      	ldr	r0, [r7, #12]
 8020896:	f7ff ff4f 	bl	8020738 <_ZN22MockNamedValueListNode4nextEv>
 802089a:	4603      	mov	r3, r0
 802089c:	2b00      	cmp	r3, #0
 802089e:	bf14      	ite	ne
 80208a0:	2301      	movne	r3, #1
 80208a2:	2300      	moveq	r3, #0
 80208a4:	b2db      	uxtb	r3, r3
 80208a6:	2b00      	cmp	r3, #0
 80208a8:	d004      	beq.n	80208b4 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x58>
 80208aa:	68f8      	ldr	r0, [r7, #12]
 80208ac:	f7ff ff44 	bl	8020738 <_ZN22MockNamedValueListNode4nextEv>
 80208b0:	60f8      	str	r0, [r7, #12]
 80208b2:	e7ef      	b.n	8020894 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x38>
        lastNode->setNext(newNode);
 80208b4:	68b9      	ldr	r1, [r7, #8]
 80208b6:	68f8      	ldr	r0, [r7, #12]
 80208b8:	f7ff ff30 	bl	802071c <_ZN22MockNamedValueListNode7setNextEPS_>
}
 80208bc:	bf00      	nop
 80208be:	3714      	adds	r7, #20
 80208c0:	46bd      	mov	sp, r7
 80208c2:	bd90      	pop	{r4, r7, pc}
 80208c4:	08028118 	.word	0x08028118

080208c8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>:

MockNamedValue* MockNamedValueList::getValueByName(const SimpleString& name)
{
 80208c8:	b590      	push	{r4, r7, lr}
 80208ca:	b087      	sub	sp, #28
 80208cc:	af00      	add	r7, sp, #0
 80208ce:	6078      	str	r0, [r7, #4]
 80208d0:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 80208d2:	687b      	ldr	r3, [r7, #4]
 80208d4:	681b      	ldr	r3, [r3, #0]
 80208d6:	617b      	str	r3, [r7, #20]
 80208d8:	697b      	ldr	r3, [r7, #20]
 80208da:	2b00      	cmp	r3, #0
 80208dc:	d01e      	beq.n	802091c <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x54>
        if (p->getName() == name)
 80208de:	f107 030c 	add.w	r3, r7, #12
 80208e2:	6979      	ldr	r1, [r7, #20]
 80208e4:	4618      	mov	r0, r3
 80208e6:	f7ff ff62 	bl	80207ae <_ZNK22MockNamedValueListNode7getNameEv>
 80208ea:	f107 030c 	add.w	r3, r7, #12
 80208ee:	6839      	ldr	r1, [r7, #0]
 80208f0:	4618      	mov	r0, r3
 80208f2:	f7ed ff0c 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 80208f6:	4603      	mov	r3, r0
 80208f8:	461c      	mov	r4, r3
 80208fa:	f107 030c 	add.w	r3, r7, #12
 80208fe:	4618      	mov	r0, r3
 8020900:	f7ed fef9 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8020904:	2c00      	cmp	r4, #0
 8020906:	d004      	beq.n	8020912 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x4a>
            return p->item();
 8020908:	6978      	ldr	r0, [r7, #20]
 802090a:	f7ff ff21 	bl	8020750 <_ZN22MockNamedValueListNode4itemEv>
 802090e:	4603      	mov	r3, r0
 8020910:	e005      	b.n	802091e <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x56>
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 8020912:	6978      	ldr	r0, [r7, #20]
 8020914:	f7ff ff10 	bl	8020738 <_ZN22MockNamedValueListNode4nextEv>
 8020918:	6178      	str	r0, [r7, #20]
 802091a:	e7dd      	b.n	80208d8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x10>
    return NULLPTR;
 802091c:	2300      	movs	r3, #0
}
 802091e:	4618      	mov	r0, r3
 8020920:	371c      	adds	r7, #28
 8020922:	46bd      	mov	sp, r7
 8020924:	bd90      	pop	{r4, r7, pc}

08020926 <_ZN18MockNamedValueList5beginEv>:

MockNamedValueListNode* MockNamedValueList::begin()
{
 8020926:	b480      	push	{r7}
 8020928:	b083      	sub	sp, #12
 802092a:	af00      	add	r7, sp, #0
 802092c:	6078      	str	r0, [r7, #4]
    return head_;
 802092e:	687b      	ldr	r3, [r7, #4]
 8020930:	681b      	ldr	r3, [r3, #0]
}
 8020932:	4618      	mov	r0, r3
 8020934:	370c      	adds	r7, #12
 8020936:	46bd      	mov	sp, r7
 8020938:	f85d 7b04 	ldr.w	r7, [sp], #4
 802093c:	4770      	bx	lr

0802093e <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>:

struct MockNamedValueComparatorsAndCopiersRepositoryNode
{
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 802093e:	b580      	push	{r7, lr}
 8020940:	b084      	sub	sp, #16
 8020942:	af00      	add	r7, sp, #0
 8020944:	60f8      	str	r0, [r7, #12]
 8020946:	60b9      	str	r1, [r7, #8]
 8020948:	607a      	str	r2, [r7, #4]
 802094a:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(NULLPTR), next_(next) {}
 802094c:	68fb      	ldr	r3, [r7, #12]
 802094e:	68b9      	ldr	r1, [r7, #8]
 8020950:	4618      	mov	r0, r3
 8020952:	f7ed fb6c 	bl	800e02e <_ZN12SimpleStringC1ERKS_>
 8020956:	68fb      	ldr	r3, [r7, #12]
 8020958:	687a      	ldr	r2, [r7, #4]
 802095a:	609a      	str	r2, [r3, #8]
 802095c:	68fb      	ldr	r3, [r7, #12]
 802095e:	2200      	movs	r2, #0
 8020960:	60da      	str	r2, [r3, #12]
 8020962:	68fb      	ldr	r3, [r7, #12]
 8020964:	683a      	ldr	r2, [r7, #0]
 8020966:	611a      	str	r2, [r3, #16]
 8020968:	68fb      	ldr	r3, [r7, #12]
 802096a:	4618      	mov	r0, r3
 802096c:	3710      	adds	r7, #16
 802096e:	46bd      	mov	sp, r7
 8020970:	bd80      	pop	{r7, pc}

08020972 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 8020972:	b580      	push	{r7, lr}
 8020974:	b084      	sub	sp, #16
 8020976:	af00      	add	r7, sp, #0
 8020978:	60f8      	str	r0, [r7, #12]
 802097a:	60b9      	str	r1, [r7, #8]
 802097c:	607a      	str	r2, [r7, #4]
 802097e:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(NULLPTR), copier_(copier), next_(next) {}
 8020980:	68fb      	ldr	r3, [r7, #12]
 8020982:	68b9      	ldr	r1, [r7, #8]
 8020984:	4618      	mov	r0, r3
 8020986:	f7ed fb52 	bl	800e02e <_ZN12SimpleStringC1ERKS_>
 802098a:	68fb      	ldr	r3, [r7, #12]
 802098c:	2200      	movs	r2, #0
 802098e:	609a      	str	r2, [r3, #8]
 8020990:	68fb      	ldr	r3, [r7, #12]
 8020992:	687a      	ldr	r2, [r7, #4]
 8020994:	60da      	str	r2, [r3, #12]
 8020996:	68fb      	ldr	r3, [r7, #12]
 8020998:	683a      	ldr	r2, [r7, #0]
 802099a:	611a      	str	r2, [r3, #16]
 802099c:	68fb      	ldr	r3, [r7, #12]
 802099e:	4618      	mov	r0, r3
 80209a0:	3710      	adds	r7, #16
 80209a2:	46bd      	mov	sp, r7
 80209a4:	bd80      	pop	{r7, pc}

080209a6 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 80209a6:	b580      	push	{r7, lr}
 80209a8:	b084      	sub	sp, #16
 80209aa:	af00      	add	r7, sp, #0
 80209ac:	60f8      	str	r0, [r7, #12]
 80209ae:	60b9      	str	r1, [r7, #8]
 80209b0:	607a      	str	r2, [r7, #4]
 80209b2:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(copier), next_(next) {}
 80209b4:	68fb      	ldr	r3, [r7, #12]
 80209b6:	68b9      	ldr	r1, [r7, #8]
 80209b8:	4618      	mov	r0, r3
 80209ba:	f7ed fb38 	bl	800e02e <_ZN12SimpleStringC1ERKS_>
 80209be:	68fb      	ldr	r3, [r7, #12]
 80209c0:	687a      	ldr	r2, [r7, #4]
 80209c2:	609a      	str	r2, [r3, #8]
 80209c4:	68fb      	ldr	r3, [r7, #12]
 80209c6:	683a      	ldr	r2, [r7, #0]
 80209c8:	60da      	str	r2, [r3, #12]
 80209ca:	68fb      	ldr	r3, [r7, #12]
 80209cc:	69ba      	ldr	r2, [r7, #24]
 80209ce:	611a      	str	r2, [r3, #16]
 80209d0:	68fb      	ldr	r3, [r7, #12]
 80209d2:	4618      	mov	r0, r3
 80209d4:	3710      	adds	r7, #16
 80209d6:	46bd      	mov	sp, r7
 80209d8:	bd80      	pop	{r7, pc}
	...

080209dc <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>:
    MockNamedValueComparator* comparator_;
    MockNamedValueCopier* copier_;
    MockNamedValueComparatorsAndCopiersRepositoryNode* next_;
};

MockNamedValueComparatorsAndCopiersRepository::MockNamedValueComparatorsAndCopiersRepository() : head_(NULLPTR)
 80209dc:	b480      	push	{r7}
 80209de:	b083      	sub	sp, #12
 80209e0:	af00      	add	r7, sp, #0
 80209e2:	6078      	str	r0, [r7, #4]
 80209e4:	4a06      	ldr	r2, [pc, #24]	; (8020a00 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev+0x24>)
 80209e6:	687b      	ldr	r3, [r7, #4]
 80209e8:	601a      	str	r2, [r3, #0]
 80209ea:	687b      	ldr	r3, [r7, #4]
 80209ec:	2200      	movs	r2, #0
 80209ee:	605a      	str	r2, [r3, #4]
{

}
 80209f0:	687b      	ldr	r3, [r7, #4]
 80209f2:	4618      	mov	r0, r3
 80209f4:	370c      	adds	r7, #12
 80209f6:	46bd      	mov	sp, r7
 80209f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209fc:	4770      	bx	lr
 80209fe:	bf00      	nop
 8020a00:	0802afb0 	.word	0x0802afb0

08020a04 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>:

MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 8020a04:	b580      	push	{r7, lr}
 8020a06:	b082      	sub	sp, #8
 8020a08:	af00      	add	r7, sp, #0
 8020a0a:	6078      	str	r0, [r7, #4]
 8020a0c:	4a05      	ldr	r2, [pc, #20]	; (8020a24 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev+0x20>)
 8020a0e:	687b      	ldr	r3, [r7, #4]
 8020a10:	601a      	str	r2, [r3, #0]
{
    clear();
 8020a12:	6878      	ldr	r0, [r7, #4]
 8020a14:	f000 f825 	bl	8020a62 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
}
 8020a18:	687b      	ldr	r3, [r7, #4]
 8020a1a:	4618      	mov	r0, r3
 8020a1c:	3708      	adds	r7, #8
 8020a1e:	46bd      	mov	sp, r7
 8020a20:	bd80      	pop	{r7, pc}
 8020a22:	bf00      	nop
 8020a24:	0802afb0 	.word	0x0802afb0

08020a28 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD0Ev>:
MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 8020a28:	b580      	push	{r7, lr}
 8020a2a:	b082      	sub	sp, #8
 8020a2c:	af00      	add	r7, sp, #0
 8020a2e:	6078      	str	r0, [r7, #4]
}
 8020a30:	6878      	ldr	r0, [r7, #4]
 8020a32:	f7ff ffe7 	bl	8020a04 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 8020a36:	2108      	movs	r1, #8
 8020a38:	6878      	ldr	r0, [r7, #4]
 8020a3a:	f7ea fef5 	bl	800b828 <_ZdlPvj>
 8020a3e:	687b      	ldr	r3, [r7, #4]
 8020a40:	4618      	mov	r0, r3
 8020a42:	3708      	adds	r7, #8
 8020a44:	46bd      	mov	sp, r7
 8020a46:	bd80      	pop	{r7, pc}

08020a48 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>:
struct MockNamedValueComparatorsAndCopiersRepositoryNode
 8020a48:	b580      	push	{r7, lr}
 8020a4a:	b082      	sub	sp, #8
 8020a4c:	af00      	add	r7, sp, #0
 8020a4e:	6078      	str	r0, [r7, #4]
 8020a50:	687b      	ldr	r3, [r7, #4]
 8020a52:	4618      	mov	r0, r3
 8020a54:	f7ed fe4f 	bl	800e6f6 <_ZN12SimpleStringD1Ev>
 8020a58:	687b      	ldr	r3, [r7, #4]
 8020a5a:	4618      	mov	r0, r3
 8020a5c:	3708      	adds	r7, #8
 8020a5e:	46bd      	mov	sp, r7
 8020a60:	bd80      	pop	{r7, pc}

08020a62 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>:

void MockNamedValueComparatorsAndCopiersRepository::clear()
{
 8020a62:	b590      	push	{r4, r7, lr}
 8020a64:	b085      	sub	sp, #20
 8020a66:	af00      	add	r7, sp, #0
 8020a68:	6078      	str	r0, [r7, #4]
    while (head_) {
 8020a6a:	687b      	ldr	r3, [r7, #4]
 8020a6c:	685b      	ldr	r3, [r3, #4]
 8020a6e:	2b00      	cmp	r3, #0
 8020a70:	d012      	beq.n	8020a98 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x36>
        MockNamedValueComparatorsAndCopiersRepositoryNode* next = head_->next_;
 8020a72:	687b      	ldr	r3, [r7, #4]
 8020a74:	685b      	ldr	r3, [r3, #4]
 8020a76:	691b      	ldr	r3, [r3, #16]
 8020a78:	60fb      	str	r3, [r7, #12]
        delete head_;
 8020a7a:	687b      	ldr	r3, [r7, #4]
 8020a7c:	685c      	ldr	r4, [r3, #4]
 8020a7e:	2c00      	cmp	r4, #0
 8020a80:	d006      	beq.n	8020a90 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x2e>
 8020a82:	4620      	mov	r0, r4
 8020a84:	f7ff ffe0 	bl	8020a48 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>
 8020a88:	2114      	movs	r1, #20
 8020a8a:	4620      	mov	r0, r4
 8020a8c:	f7ea fecc 	bl	800b828 <_ZdlPvj>
        head_ = next;
 8020a90:	687b      	ldr	r3, [r7, #4]
 8020a92:	68fa      	ldr	r2, [r7, #12]
 8020a94:	605a      	str	r2, [r3, #4]
    while (head_) {
 8020a96:	e7e8      	b.n	8020a6a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x8>
    }
}
 8020a98:	bf00      	nop
 8020a9a:	3714      	adds	r7, #20
 8020a9c:	46bd      	mov	sp, r7
 8020a9e:	bd90      	pop	{r4, r7, pc}

08020aa0 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockNamedValueComparatorsAndCopiersRepository::installComparator(const SimpleString& name, MockNamedValueComparator& comparator)
{
 8020aa0:	b590      	push	{r4, r7, lr}
 8020aa2:	b085      	sub	sp, #20
 8020aa4:	af00      	add	r7, sp, #0
 8020aa6:	60f8      	str	r0, [r7, #12]
 8020aa8:	60b9      	str	r1, [r7, #8]
 8020aaa:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &comparator, head_);
 8020aac:	f240 227a 	movw	r2, #634	; 0x27a
 8020ab0:	4908      	ldr	r1, [pc, #32]	; (8020ad4 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x34>)
 8020ab2:	2014      	movs	r0, #20
 8020ab4:	f7ea fea4 	bl	800b800 <_ZnwjPKci>
 8020ab8:	4604      	mov	r4, r0
 8020aba:	68fb      	ldr	r3, [r7, #12]
 8020abc:	685b      	ldr	r3, [r3, #4]
 8020abe:	687a      	ldr	r2, [r7, #4]
 8020ac0:	68b9      	ldr	r1, [r7, #8]
 8020ac2:	4620      	mov	r0, r4
 8020ac4:	f7ff ff3b 	bl	802093e <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>
 8020ac8:	68fb      	ldr	r3, [r7, #12]
 8020aca:	605c      	str	r4, [r3, #4]
}
 8020acc:	bf00      	nop
 8020ace:	3714      	adds	r7, #20
 8020ad0:	46bd      	mov	sp, r7
 8020ad2:	bd90      	pop	{r4, r7, pc}
 8020ad4:	08028118 	.word	0x08028118

08020ad8 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockNamedValueComparatorsAndCopiersRepository::installCopier(const SimpleString& name, MockNamedValueCopier& copier)
{
 8020ad8:	b590      	push	{r4, r7, lr}
 8020ada:	b085      	sub	sp, #20
 8020adc:	af00      	add	r7, sp, #0
 8020ade:	60f8      	str	r0, [r7, #12]
 8020ae0:	60b9      	str	r1, [r7, #8]
 8020ae2:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &copier, head_);
 8020ae4:	f240 227f 	movw	r2, #639	; 0x27f
 8020ae8:	4908      	ldr	r1, [pc, #32]	; (8020b0c <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier+0x34>)
 8020aea:	2014      	movs	r0, #20
 8020aec:	f7ea fe88 	bl	800b800 <_ZnwjPKci>
 8020af0:	4604      	mov	r4, r0
 8020af2:	68fb      	ldr	r3, [r7, #12]
 8020af4:	685b      	ldr	r3, [r3, #4]
 8020af6:	687a      	ldr	r2, [r7, #4]
 8020af8:	68b9      	ldr	r1, [r7, #8]
 8020afa:	4620      	mov	r0, r4
 8020afc:	f7ff ff39 	bl	8020972 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>
 8020b00:	68fb      	ldr	r3, [r7, #12]
 8020b02:	605c      	str	r4, [r3, #4]
}
 8020b04:	bf00      	nop
 8020b06:	3714      	adds	r7, #20
 8020b08:	46bd      	mov	sp, r7
 8020b0a:	bd90      	pop	{r4, r7, pc}
 8020b0c:	08028118 	.word	0x08028118

08020b10 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString>:

MockNamedValueComparator* MockNamedValueComparatorsAndCopiersRepository::getComparatorForType(const SimpleString& name)
{
 8020b10:	b580      	push	{r7, lr}
 8020b12:	b084      	sub	sp, #16
 8020b14:	af00      	add	r7, sp, #0
 8020b16:	6078      	str	r0, [r7, #4]
 8020b18:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 8020b1a:	687b      	ldr	r3, [r7, #4]
 8020b1c:	685b      	ldr	r3, [r3, #4]
 8020b1e:	60fb      	str	r3, [r7, #12]
 8020b20:	68fb      	ldr	r3, [r7, #12]
 8020b22:	2b00      	cmp	r3, #0
 8020b24:	d017      	beq.n	8020b56 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->comparator_) return p->comparator_;
 8020b26:	68fb      	ldr	r3, [r7, #12]
 8020b28:	6839      	ldr	r1, [r7, #0]
 8020b2a:	4618      	mov	r0, r3
 8020b2c:	f7ed fdef 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 8020b30:	4603      	mov	r3, r0
 8020b32:	2b00      	cmp	r3, #0
 8020b34:	d005      	beq.n	8020b42 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 8020b36:	68fb      	ldr	r3, [r7, #12]
 8020b38:	689b      	ldr	r3, [r3, #8]
 8020b3a:	2b00      	cmp	r3, #0
 8020b3c:	d001      	beq.n	8020b42 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 8020b3e:	2301      	movs	r3, #1
 8020b40:	e000      	b.n	8020b44 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x34>
 8020b42:	2300      	movs	r3, #0
 8020b44:	2b00      	cmp	r3, #0
 8020b46:	d002      	beq.n	8020b4e <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x3e>
 8020b48:	68fb      	ldr	r3, [r7, #12]
 8020b4a:	689b      	ldr	r3, [r3, #8]
 8020b4c:	e004      	b.n	8020b58 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 8020b4e:	68fb      	ldr	r3, [r7, #12]
 8020b50:	691b      	ldr	r3, [r3, #16]
 8020b52:	60fb      	str	r3, [r7, #12]
 8020b54:	e7e4      	b.n	8020b20 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x10>
    return NULLPTR;
 8020b56:	2300      	movs	r3, #0
}
 8020b58:	4618      	mov	r0, r3
 8020b5a:	3710      	adds	r7, #16
 8020b5c:	46bd      	mov	sp, r7
 8020b5e:	bd80      	pop	{r7, pc}

08020b60 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString>:

MockNamedValueCopier* MockNamedValueComparatorsAndCopiersRepository::getCopierForType(const SimpleString& name)
{
 8020b60:	b580      	push	{r7, lr}
 8020b62:	b084      	sub	sp, #16
 8020b64:	af00      	add	r7, sp, #0
 8020b66:	6078      	str	r0, [r7, #4]
 8020b68:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 8020b6a:	687b      	ldr	r3, [r7, #4]
 8020b6c:	685b      	ldr	r3, [r3, #4]
 8020b6e:	60fb      	str	r3, [r7, #12]
 8020b70:	68fb      	ldr	r3, [r7, #12]
 8020b72:	2b00      	cmp	r3, #0
 8020b74:	d017      	beq.n	8020ba6 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->copier_) return p->copier_;
 8020b76:	68fb      	ldr	r3, [r7, #12]
 8020b78:	6839      	ldr	r1, [r7, #0]
 8020b7a:	4618      	mov	r0, r3
 8020b7c:	f7ed fdc7 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 8020b80:	4603      	mov	r3, r0
 8020b82:	2b00      	cmp	r3, #0
 8020b84:	d005      	beq.n	8020b92 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 8020b86:	68fb      	ldr	r3, [r7, #12]
 8020b88:	68db      	ldr	r3, [r3, #12]
 8020b8a:	2b00      	cmp	r3, #0
 8020b8c:	d001      	beq.n	8020b92 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 8020b8e:	2301      	movs	r3, #1
 8020b90:	e000      	b.n	8020b94 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x34>
 8020b92:	2300      	movs	r3, #0
 8020b94:	2b00      	cmp	r3, #0
 8020b96:	d002      	beq.n	8020b9e <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x3e>
 8020b98:	68fb      	ldr	r3, [r7, #12]
 8020b9a:	68db      	ldr	r3, [r3, #12]
 8020b9c:	e004      	b.n	8020ba8 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 8020b9e:	68fb      	ldr	r3, [r7, #12]
 8020ba0:	691b      	ldr	r3, [r3, #16]
 8020ba2:	60fb      	str	r3, [r7, #12]
 8020ba4:	e7e4      	b.n	8020b70 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x10>
    return NULLPTR;
 8020ba6:	2300      	movs	r3, #0
}
 8020ba8:	4618      	mov	r0, r3
 8020baa:	3710      	adds	r7, #16
 8020bac:	46bd      	mov	sp, r7
 8020bae:	bd80      	pop	{r7, pc}

08020bb0 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>:

void MockNamedValueComparatorsAndCopiersRepository::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 8020bb0:	b590      	push	{r4, r7, lr}
 8020bb2:	b087      	sub	sp, #28
 8020bb4:	af02      	add	r7, sp, #8
 8020bb6:	6078      	str	r0, [r7, #4]
 8020bb8:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 8020bba:	683b      	ldr	r3, [r7, #0]
 8020bbc:	685b      	ldr	r3, [r3, #4]
 8020bbe:	60fb      	str	r3, [r7, #12]
 8020bc0:	68fb      	ldr	r3, [r7, #12]
 8020bc2:	2b00      	cmp	r3, #0
 8020bc4:	d018      	beq.n	8020bf8 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x48>
      head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(p->name_, p->comparator_, p->copier_, head_);
 8020bc6:	f240 2293 	movw	r2, #659	; 0x293
 8020bca:	490d      	ldr	r1, [pc, #52]	; (8020c00 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x50>)
 8020bcc:	2014      	movs	r0, #20
 8020bce:	f7ea fe17 	bl	800b800 <_ZnwjPKci>
 8020bd2:	4604      	mov	r4, r0
 8020bd4:	68f9      	ldr	r1, [r7, #12]
 8020bd6:	68fb      	ldr	r3, [r7, #12]
 8020bd8:	689a      	ldr	r2, [r3, #8]
 8020bda:	68fb      	ldr	r3, [r7, #12]
 8020bdc:	68d8      	ldr	r0, [r3, #12]
 8020bde:	687b      	ldr	r3, [r7, #4]
 8020be0:	685b      	ldr	r3, [r3, #4]
 8020be2:	9300      	str	r3, [sp, #0]
 8020be4:	4603      	mov	r3, r0
 8020be6:	4620      	mov	r0, r4
 8020be8:	f7ff fedd 	bl	80209a6 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>
 8020bec:	687b      	ldr	r3, [r7, #4]
 8020bee:	605c      	str	r4, [r3, #4]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 8020bf0:	68fb      	ldr	r3, [r7, #12]
 8020bf2:	691b      	ldr	r3, [r3, #16]
 8020bf4:	60fb      	str	r3, [r7, #12]
 8020bf6:	e7e3      	b.n	8020bc0 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x10>
}
 8020bf8:	bf00      	nop
 8020bfa:	3714      	adds	r7, #20
 8020bfc:	46bd      	mov	sp, r7
 8020bfe:	bd90      	pop	{r4, r7, pc}
 8020c00:	08028118 	.word	0x08028118

08020c04 <_ZN10TestFilterC1ERK12SimpleString>:

TestFilter::TestFilter() : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
{
}

TestFilter::TestFilter(const SimpleString& filter) : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
 8020c04:	b580      	push	{r7, lr}
 8020c06:	b082      	sub	sp, #8
 8020c08:	af00      	add	r7, sp, #0
 8020c0a:	6078      	str	r0, [r7, #4]
 8020c0c:	6039      	str	r1, [r7, #0]
 8020c0e:	687b      	ldr	r3, [r7, #4]
 8020c10:	490b      	ldr	r1, [pc, #44]	; (8020c40 <_ZN10TestFilterC1ERK12SimpleString+0x3c>)
 8020c12:	4618      	mov	r0, r3
 8020c14:	f7ed f9b7 	bl	800df86 <_ZN12SimpleStringC1EPKc>
 8020c18:	687b      	ldr	r3, [r7, #4]
 8020c1a:	2200      	movs	r2, #0
 8020c1c:	721a      	strb	r2, [r3, #8]
 8020c1e:	687b      	ldr	r3, [r7, #4]
 8020c20:	2200      	movs	r2, #0
 8020c22:	725a      	strb	r2, [r3, #9]
 8020c24:	687b      	ldr	r3, [r7, #4]
 8020c26:	2200      	movs	r2, #0
 8020c28:	60da      	str	r2, [r3, #12]
{
    filter_ = filter;
 8020c2a:	687b      	ldr	r3, [r7, #4]
 8020c2c:	6839      	ldr	r1, [r7, #0]
 8020c2e:	4618      	mov	r0, r3
 8020c30:	f7ed fa15 	bl	800e05e <_ZN12SimpleStringaSERKS_>
}
 8020c34:	687b      	ldr	r3, [r7, #4]
 8020c36:	4618      	mov	r0, r3
 8020c38:	3708      	adds	r7, #8
 8020c3a:	46bd      	mov	sp, r7
 8020c3c:	bd80      	pop	{r7, pc}
 8020c3e:	bf00      	nop
 8020c40:	080281f4 	.word	0x080281f4

08020c44 <_ZN10TestFilter3addEPS_>:
{
    filter_ = filter;
}

TestFilter* TestFilter::add(TestFilter* filter)
{
 8020c44:	b480      	push	{r7}
 8020c46:	b083      	sub	sp, #12
 8020c48:	af00      	add	r7, sp, #0
 8020c4a:	6078      	str	r0, [r7, #4]
 8020c4c:	6039      	str	r1, [r7, #0]
    next_ = filter;
 8020c4e:	687b      	ldr	r3, [r7, #4]
 8020c50:	683a      	ldr	r2, [r7, #0]
 8020c52:	60da      	str	r2, [r3, #12]
    return this;
 8020c54:	687b      	ldr	r3, [r7, #4]
}
 8020c56:	4618      	mov	r0, r3
 8020c58:	370c      	adds	r7, #12
 8020c5a:	46bd      	mov	sp, r7
 8020c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c60:	4770      	bx	lr

08020c62 <_ZNK10TestFilter7getNextEv>:

TestFilter* TestFilter::getNext() const
{
 8020c62:	b480      	push	{r7}
 8020c64:	b083      	sub	sp, #12
 8020c66:	af00      	add	r7, sp, #0
 8020c68:	6078      	str	r0, [r7, #4]
    return next_;
 8020c6a:	687b      	ldr	r3, [r7, #4]
 8020c6c:	68db      	ldr	r3, [r3, #12]
}
 8020c6e:	4618      	mov	r0, r3
 8020c70:	370c      	adds	r7, #12
 8020c72:	46bd      	mov	sp, r7
 8020c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c78:	4770      	bx	lr

08020c7a <_ZN10TestFilter14strictMatchingEv>:

void TestFilter::strictMatching()
{
 8020c7a:	b480      	push	{r7}
 8020c7c:	b083      	sub	sp, #12
 8020c7e:	af00      	add	r7, sp, #0
 8020c80:	6078      	str	r0, [r7, #4]
    strictMatching_ = true;
 8020c82:	687b      	ldr	r3, [r7, #4]
 8020c84:	2201      	movs	r2, #1
 8020c86:	721a      	strb	r2, [r3, #8]
}
 8020c88:	bf00      	nop
 8020c8a:	370c      	adds	r7, #12
 8020c8c:	46bd      	mov	sp, r7
 8020c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c92:	4770      	bx	lr

08020c94 <_ZN10TestFilter14invertMatchingEv>:

void TestFilter::invertMatching()
{
 8020c94:	b480      	push	{r7}
 8020c96:	b083      	sub	sp, #12
 8020c98:	af00      	add	r7, sp, #0
 8020c9a:	6078      	str	r0, [r7, #4]
    invertMatching_ = true;
 8020c9c:	687b      	ldr	r3, [r7, #4]
 8020c9e:	2201      	movs	r2, #1
 8020ca0:	725a      	strb	r2, [r3, #9]
}
 8020ca2:	bf00      	nop
 8020ca4:	370c      	adds	r7, #12
 8020ca6:	46bd      	mov	sp, r7
 8020ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020cac:	4770      	bx	lr

08020cae <_ZNK10TestFilter5matchERK12SimpleString>:

bool TestFilter::match(const SimpleString& name) const
{
 8020cae:	b580      	push	{r7, lr}
 8020cb0:	b084      	sub	sp, #16
 8020cb2:	af00      	add	r7, sp, #0
 8020cb4:	6078      	str	r0, [r7, #4]
 8020cb6:	6039      	str	r1, [r7, #0]
    bool matches = false;
 8020cb8:	2300      	movs	r3, #0
 8020cba:	73fb      	strb	r3, [r7, #15]

    if(strictMatching_)
 8020cbc:	687b      	ldr	r3, [r7, #4]
 8020cbe:	7a1b      	ldrb	r3, [r3, #8]
 8020cc0:	2b00      	cmp	r3, #0
 8020cc2:	d007      	beq.n	8020cd4 <_ZNK10TestFilter5matchERK12SimpleString+0x26>
        matches = name == filter_;
 8020cc4:	687b      	ldr	r3, [r7, #4]
 8020cc6:	4619      	mov	r1, r3
 8020cc8:	6838      	ldr	r0, [r7, #0]
 8020cca:	f7ed fd20 	bl	800e70e <_ZeqRK12SimpleStringS1_>
 8020cce:	4603      	mov	r3, r0
 8020cd0:	73fb      	strb	r3, [r7, #15]
 8020cd2:	e006      	b.n	8020ce2 <_ZNK10TestFilter5matchERK12SimpleString+0x34>
    else
        matches = name.contains(filter_);
 8020cd4:	687b      	ldr	r3, [r7, #4]
 8020cd6:	4619      	mov	r1, r3
 8020cd8:	6838      	ldr	r0, [r7, #0]
 8020cda:	f7ed f9d2 	bl	800e082 <_ZNK12SimpleString8containsERKS_>
 8020cde:	4603      	mov	r3, r0
 8020ce0:	73fb      	strb	r3, [r7, #15]

    return invertMatching_ ? !matches : matches;
 8020ce2:	687b      	ldr	r3, [r7, #4]
 8020ce4:	7a5b      	ldrb	r3, [r3, #9]
 8020ce6:	2b00      	cmp	r3, #0
 8020ce8:	d004      	beq.n	8020cf4 <_ZNK10TestFilter5matchERK12SimpleString+0x46>
 8020cea:	7bfb      	ldrb	r3, [r7, #15]
 8020cec:	f083 0301 	eor.w	r3, r3, #1
 8020cf0:	b2db      	uxtb	r3, r3
 8020cf2:	e005      	b.n	8020d00 <_ZNK10TestFilter5matchERK12SimpleString+0x52>
 8020cf4:	7bfb      	ldrb	r3, [r7, #15]
 8020cf6:	2b00      	cmp	r3, #0
 8020cf8:	bf14      	ite	ne
 8020cfa:	2301      	movne	r3, #1
 8020cfc:	2300      	moveq	r3, #0
 8020cfe:	b2db      	uxtb	r3, r3
}
 8020d00:	4618      	mov	r0, r3
 8020d02:	3710      	adds	r7, #16
 8020d04:	46bd      	mov	sp, r7
 8020d06:	bd80      	pop	{r7, pc}

08020d08 <__cxa_guard_acquire>:
 8020d08:	6803      	ldr	r3, [r0, #0]
 8020d0a:	07db      	lsls	r3, r3, #31
 8020d0c:	d406      	bmi.n	8020d1c <__cxa_guard_acquire+0x14>
 8020d0e:	7843      	ldrb	r3, [r0, #1]
 8020d10:	b103      	cbz	r3, 8020d14 <__cxa_guard_acquire+0xc>
 8020d12:	deff      	udf	#255	; 0xff
 8020d14:	2301      	movs	r3, #1
 8020d16:	7043      	strb	r3, [r0, #1]
 8020d18:	4618      	mov	r0, r3
 8020d1a:	4770      	bx	lr
 8020d1c:	2000      	movs	r0, #0
 8020d1e:	4770      	bx	lr

08020d20 <__cxa_guard_release>:
 8020d20:	2301      	movs	r3, #1
 8020d22:	6003      	str	r3, [r0, #0]
 8020d24:	4770      	bx	lr

08020d26 <__cxa_pure_virtual>:
 8020d26:	b508      	push	{r3, lr}
 8020d28:	f000 f80c 	bl	8020d44 <_ZSt9terminatev>

08020d2c <_ZN10__cxxabiv111__terminateEPFvvE>:
 8020d2c:	b508      	push	{r3, lr}
 8020d2e:	4780      	blx	r0
 8020d30:	f000 f816 	bl	8020d60 <abort>

08020d34 <_ZSt13get_terminatev>:
 8020d34:	4b02      	ldr	r3, [pc, #8]	; (8020d40 <_ZSt13get_terminatev+0xc>)
 8020d36:	6818      	ldr	r0, [r3, #0]
 8020d38:	f3bf 8f5b 	dmb	ish
 8020d3c:	4770      	bx	lr
 8020d3e:	bf00      	nop
 8020d40:	20000104 	.word	0x20000104

08020d44 <_ZSt9terminatev>:
 8020d44:	b508      	push	{r3, lr}
 8020d46:	f7ff fff5 	bl	8020d34 <_ZSt13get_terminatev>
 8020d4a:	f7ff ffef 	bl	8020d2c <_ZN10__cxxabiv111__terminateEPFvvE>

08020d4e <fabs>:
 8020d4e:	ec51 0b10 	vmov	r0, r1, d0
 8020d52:	ee10 2a10 	vmov	r2, s0
 8020d56:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8020d5a:	ec43 2b10 	vmov	d0, r2, r3
 8020d5e:	4770      	bx	lr

08020d60 <abort>:
 8020d60:	b508      	push	{r3, lr}
 8020d62:	2006      	movs	r0, #6
 8020d64:	f000 ff8c 	bl	8021c80 <raise>
 8020d68:	2001      	movs	r0, #1
 8020d6a:	f7e0 f842 	bl	8000df2 <_exit>

08020d6e <atexit>:
 8020d6e:	2300      	movs	r3, #0
 8020d70:	4601      	mov	r1, r0
 8020d72:	461a      	mov	r2, r3
 8020d74:	4618      	mov	r0, r3
 8020d76:	f002 b9db 	b.w	8023130 <__register_exitproc>

08020d7a <atoi>:
 8020d7a:	220a      	movs	r2, #10
 8020d7c:	2100      	movs	r1, #0
 8020d7e:	f001 be03 	b.w	8022988 <strtol>
	...

08020d84 <calloc>:
 8020d84:	4b02      	ldr	r3, [pc, #8]	; (8020d90 <calloc+0xc>)
 8020d86:	460a      	mov	r2, r1
 8020d88:	4601      	mov	r1, r0
 8020d8a:	6818      	ldr	r0, [r3, #0]
 8020d8c:	f000 bde8 	b.w	8021960 <_calloc_r>
 8020d90:	20000108 	.word	0x20000108

08020d94 <__errno>:
 8020d94:	4b01      	ldr	r3, [pc, #4]	; (8020d9c <__errno+0x8>)
 8020d96:	6818      	ldr	r0, [r3, #0]
 8020d98:	4770      	bx	lr
 8020d9a:	bf00      	nop
 8020d9c:	20000108 	.word	0x20000108

08020da0 <_fclose_r>:
 8020da0:	b570      	push	{r4, r5, r6, lr}
 8020da2:	4605      	mov	r5, r0
 8020da4:	460c      	mov	r4, r1
 8020da6:	b911      	cbnz	r1, 8020dae <_fclose_r+0xe>
 8020da8:	2600      	movs	r6, #0
 8020daa:	4630      	mov	r0, r6
 8020dac:	bd70      	pop	{r4, r5, r6, pc}
 8020dae:	b118      	cbz	r0, 8020db8 <_fclose_r+0x18>
 8020db0:	6983      	ldr	r3, [r0, #24]
 8020db2:	b90b      	cbnz	r3, 8020db8 <_fclose_r+0x18>
 8020db4:	f000 f994 	bl	80210e0 <__sinit>
 8020db8:	4b2c      	ldr	r3, [pc, #176]	; (8020e6c <_fclose_r+0xcc>)
 8020dba:	429c      	cmp	r4, r3
 8020dbc:	d114      	bne.n	8020de8 <_fclose_r+0x48>
 8020dbe:	686c      	ldr	r4, [r5, #4]
 8020dc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020dc2:	07d8      	lsls	r0, r3, #31
 8020dc4:	d405      	bmi.n	8020dd2 <_fclose_r+0x32>
 8020dc6:	89a3      	ldrh	r3, [r4, #12]
 8020dc8:	0599      	lsls	r1, r3, #22
 8020dca:	d402      	bmi.n	8020dd2 <_fclose_r+0x32>
 8020dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020dce:	f000 fd3a 	bl	8021846 <__retarget_lock_acquire_recursive>
 8020dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020dd6:	b98b      	cbnz	r3, 8020dfc <_fclose_r+0x5c>
 8020dd8:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8020dda:	f016 0601 	ands.w	r6, r6, #1
 8020dde:	d1e3      	bne.n	8020da8 <_fclose_r+0x8>
 8020de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020de2:	f000 fd32 	bl	802184a <__retarget_lock_release_recursive>
 8020de6:	e7e0      	b.n	8020daa <_fclose_r+0xa>
 8020de8:	4b21      	ldr	r3, [pc, #132]	; (8020e70 <_fclose_r+0xd0>)
 8020dea:	429c      	cmp	r4, r3
 8020dec:	d101      	bne.n	8020df2 <_fclose_r+0x52>
 8020dee:	68ac      	ldr	r4, [r5, #8]
 8020df0:	e7e6      	b.n	8020dc0 <_fclose_r+0x20>
 8020df2:	4b20      	ldr	r3, [pc, #128]	; (8020e74 <_fclose_r+0xd4>)
 8020df4:	429c      	cmp	r4, r3
 8020df6:	bf08      	it	eq
 8020df8:	68ec      	ldreq	r4, [r5, #12]
 8020dfa:	e7e1      	b.n	8020dc0 <_fclose_r+0x20>
 8020dfc:	4621      	mov	r1, r4
 8020dfe:	4628      	mov	r0, r5
 8020e00:	f000 f842 	bl	8020e88 <__sflush_r>
 8020e04:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8020e06:	4606      	mov	r6, r0
 8020e08:	b133      	cbz	r3, 8020e18 <_fclose_r+0x78>
 8020e0a:	6a21      	ldr	r1, [r4, #32]
 8020e0c:	4628      	mov	r0, r5
 8020e0e:	4798      	blx	r3
 8020e10:	2800      	cmp	r0, #0
 8020e12:	bfb8      	it	lt
 8020e14:	f04f 36ff 	movlt.w	r6, #4294967295
 8020e18:	89a3      	ldrh	r3, [r4, #12]
 8020e1a:	061a      	lsls	r2, r3, #24
 8020e1c:	d503      	bpl.n	8020e26 <_fclose_r+0x86>
 8020e1e:	6921      	ldr	r1, [r4, #16]
 8020e20:	4628      	mov	r0, r5
 8020e22:	f000 fdad 	bl	8021980 <_free_r>
 8020e26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020e28:	b141      	cbz	r1, 8020e3c <_fclose_r+0x9c>
 8020e2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020e2e:	4299      	cmp	r1, r3
 8020e30:	d002      	beq.n	8020e38 <_fclose_r+0x98>
 8020e32:	4628      	mov	r0, r5
 8020e34:	f000 fda4 	bl	8021980 <_free_r>
 8020e38:	2300      	movs	r3, #0
 8020e3a:	6363      	str	r3, [r4, #52]	; 0x34
 8020e3c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8020e3e:	b121      	cbz	r1, 8020e4a <_fclose_r+0xaa>
 8020e40:	4628      	mov	r0, r5
 8020e42:	f000 fd9d 	bl	8021980 <_free_r>
 8020e46:	2300      	movs	r3, #0
 8020e48:	64a3      	str	r3, [r4, #72]	; 0x48
 8020e4a:	f000 f931 	bl	80210b0 <__sfp_lock_acquire>
 8020e4e:	2300      	movs	r3, #0
 8020e50:	81a3      	strh	r3, [r4, #12]
 8020e52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020e54:	07db      	lsls	r3, r3, #31
 8020e56:	d402      	bmi.n	8020e5e <_fclose_r+0xbe>
 8020e58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020e5a:	f000 fcf6 	bl	802184a <__retarget_lock_release_recursive>
 8020e5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020e60:	f000 fcef 	bl	8021842 <__retarget_lock_close_recursive>
 8020e64:	f000 f92a 	bl	80210bc <__sfp_lock_release>
 8020e68:	e79f      	b.n	8020daa <_fclose_r+0xa>
 8020e6a:	bf00      	nop
 8020e6c:	0802b0a4 	.word	0x0802b0a4
 8020e70:	0802b0c4 	.word	0x0802b0c4
 8020e74:	0802b084 	.word	0x0802b084

08020e78 <fclose>:
 8020e78:	4b02      	ldr	r3, [pc, #8]	; (8020e84 <fclose+0xc>)
 8020e7a:	4601      	mov	r1, r0
 8020e7c:	6818      	ldr	r0, [r3, #0]
 8020e7e:	f7ff bf8f 	b.w	8020da0 <_fclose_r>
 8020e82:	bf00      	nop
 8020e84:	20000108 	.word	0x20000108

08020e88 <__sflush_r>:
 8020e88:	898a      	ldrh	r2, [r1, #12]
 8020e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020e8e:	4605      	mov	r5, r0
 8020e90:	0710      	lsls	r0, r2, #28
 8020e92:	460c      	mov	r4, r1
 8020e94:	d458      	bmi.n	8020f48 <__sflush_r+0xc0>
 8020e96:	684b      	ldr	r3, [r1, #4]
 8020e98:	2b00      	cmp	r3, #0
 8020e9a:	dc05      	bgt.n	8020ea8 <__sflush_r+0x20>
 8020e9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8020e9e:	2b00      	cmp	r3, #0
 8020ea0:	dc02      	bgt.n	8020ea8 <__sflush_r+0x20>
 8020ea2:	2000      	movs	r0, #0
 8020ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020ea8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020eaa:	2e00      	cmp	r6, #0
 8020eac:	d0f9      	beq.n	8020ea2 <__sflush_r+0x1a>
 8020eae:	2300      	movs	r3, #0
 8020eb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020eb4:	682f      	ldr	r7, [r5, #0]
 8020eb6:	602b      	str	r3, [r5, #0]
 8020eb8:	d032      	beq.n	8020f20 <__sflush_r+0x98>
 8020eba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8020ebc:	89a3      	ldrh	r3, [r4, #12]
 8020ebe:	075a      	lsls	r2, r3, #29
 8020ec0:	d505      	bpl.n	8020ece <__sflush_r+0x46>
 8020ec2:	6863      	ldr	r3, [r4, #4]
 8020ec4:	1ac0      	subs	r0, r0, r3
 8020ec6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020ec8:	b10b      	cbz	r3, 8020ece <__sflush_r+0x46>
 8020eca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020ecc:	1ac0      	subs	r0, r0, r3
 8020ece:	2300      	movs	r3, #0
 8020ed0:	4602      	mov	r2, r0
 8020ed2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020ed4:	6a21      	ldr	r1, [r4, #32]
 8020ed6:	4628      	mov	r0, r5
 8020ed8:	47b0      	blx	r6
 8020eda:	1c43      	adds	r3, r0, #1
 8020edc:	89a3      	ldrh	r3, [r4, #12]
 8020ede:	d106      	bne.n	8020eee <__sflush_r+0x66>
 8020ee0:	6829      	ldr	r1, [r5, #0]
 8020ee2:	291d      	cmp	r1, #29
 8020ee4:	d82c      	bhi.n	8020f40 <__sflush_r+0xb8>
 8020ee6:	4a2a      	ldr	r2, [pc, #168]	; (8020f90 <__sflush_r+0x108>)
 8020ee8:	40ca      	lsrs	r2, r1
 8020eea:	07d6      	lsls	r6, r2, #31
 8020eec:	d528      	bpl.n	8020f40 <__sflush_r+0xb8>
 8020eee:	2200      	movs	r2, #0
 8020ef0:	6062      	str	r2, [r4, #4]
 8020ef2:	04d9      	lsls	r1, r3, #19
 8020ef4:	6922      	ldr	r2, [r4, #16]
 8020ef6:	6022      	str	r2, [r4, #0]
 8020ef8:	d504      	bpl.n	8020f04 <__sflush_r+0x7c>
 8020efa:	1c42      	adds	r2, r0, #1
 8020efc:	d101      	bne.n	8020f02 <__sflush_r+0x7a>
 8020efe:	682b      	ldr	r3, [r5, #0]
 8020f00:	b903      	cbnz	r3, 8020f04 <__sflush_r+0x7c>
 8020f02:	6560      	str	r0, [r4, #84]	; 0x54
 8020f04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020f06:	602f      	str	r7, [r5, #0]
 8020f08:	2900      	cmp	r1, #0
 8020f0a:	d0ca      	beq.n	8020ea2 <__sflush_r+0x1a>
 8020f0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020f10:	4299      	cmp	r1, r3
 8020f12:	d002      	beq.n	8020f1a <__sflush_r+0x92>
 8020f14:	4628      	mov	r0, r5
 8020f16:	f000 fd33 	bl	8021980 <_free_r>
 8020f1a:	2000      	movs	r0, #0
 8020f1c:	6360      	str	r0, [r4, #52]	; 0x34
 8020f1e:	e7c1      	b.n	8020ea4 <__sflush_r+0x1c>
 8020f20:	6a21      	ldr	r1, [r4, #32]
 8020f22:	2301      	movs	r3, #1
 8020f24:	4628      	mov	r0, r5
 8020f26:	47b0      	blx	r6
 8020f28:	1c41      	adds	r1, r0, #1
 8020f2a:	d1c7      	bne.n	8020ebc <__sflush_r+0x34>
 8020f2c:	682b      	ldr	r3, [r5, #0]
 8020f2e:	2b00      	cmp	r3, #0
 8020f30:	d0c4      	beq.n	8020ebc <__sflush_r+0x34>
 8020f32:	2b1d      	cmp	r3, #29
 8020f34:	d001      	beq.n	8020f3a <__sflush_r+0xb2>
 8020f36:	2b16      	cmp	r3, #22
 8020f38:	d101      	bne.n	8020f3e <__sflush_r+0xb6>
 8020f3a:	602f      	str	r7, [r5, #0]
 8020f3c:	e7b1      	b.n	8020ea2 <__sflush_r+0x1a>
 8020f3e:	89a3      	ldrh	r3, [r4, #12]
 8020f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020f44:	81a3      	strh	r3, [r4, #12]
 8020f46:	e7ad      	b.n	8020ea4 <__sflush_r+0x1c>
 8020f48:	690f      	ldr	r7, [r1, #16]
 8020f4a:	2f00      	cmp	r7, #0
 8020f4c:	d0a9      	beq.n	8020ea2 <__sflush_r+0x1a>
 8020f4e:	0793      	lsls	r3, r2, #30
 8020f50:	680e      	ldr	r6, [r1, #0]
 8020f52:	bf08      	it	eq
 8020f54:	694b      	ldreq	r3, [r1, #20]
 8020f56:	600f      	str	r7, [r1, #0]
 8020f58:	bf18      	it	ne
 8020f5a:	2300      	movne	r3, #0
 8020f5c:	eba6 0807 	sub.w	r8, r6, r7
 8020f60:	608b      	str	r3, [r1, #8]
 8020f62:	f1b8 0f00 	cmp.w	r8, #0
 8020f66:	dd9c      	ble.n	8020ea2 <__sflush_r+0x1a>
 8020f68:	6a21      	ldr	r1, [r4, #32]
 8020f6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020f6c:	4643      	mov	r3, r8
 8020f6e:	463a      	mov	r2, r7
 8020f70:	4628      	mov	r0, r5
 8020f72:	47b0      	blx	r6
 8020f74:	2800      	cmp	r0, #0
 8020f76:	dc06      	bgt.n	8020f86 <__sflush_r+0xfe>
 8020f78:	89a3      	ldrh	r3, [r4, #12]
 8020f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020f7e:	81a3      	strh	r3, [r4, #12]
 8020f80:	f04f 30ff 	mov.w	r0, #4294967295
 8020f84:	e78e      	b.n	8020ea4 <__sflush_r+0x1c>
 8020f86:	4407      	add	r7, r0
 8020f88:	eba8 0800 	sub.w	r8, r8, r0
 8020f8c:	e7e9      	b.n	8020f62 <__sflush_r+0xda>
 8020f8e:	bf00      	nop
 8020f90:	20400001 	.word	0x20400001

08020f94 <_fflush_r>:
 8020f94:	b538      	push	{r3, r4, r5, lr}
 8020f96:	690b      	ldr	r3, [r1, #16]
 8020f98:	4605      	mov	r5, r0
 8020f9a:	460c      	mov	r4, r1
 8020f9c:	b913      	cbnz	r3, 8020fa4 <_fflush_r+0x10>
 8020f9e:	2500      	movs	r5, #0
 8020fa0:	4628      	mov	r0, r5
 8020fa2:	bd38      	pop	{r3, r4, r5, pc}
 8020fa4:	b118      	cbz	r0, 8020fae <_fflush_r+0x1a>
 8020fa6:	6983      	ldr	r3, [r0, #24]
 8020fa8:	b90b      	cbnz	r3, 8020fae <_fflush_r+0x1a>
 8020faa:	f000 f899 	bl	80210e0 <__sinit>
 8020fae:	4b14      	ldr	r3, [pc, #80]	; (8021000 <_fflush_r+0x6c>)
 8020fb0:	429c      	cmp	r4, r3
 8020fb2:	d11b      	bne.n	8020fec <_fflush_r+0x58>
 8020fb4:	686c      	ldr	r4, [r5, #4]
 8020fb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020fba:	2b00      	cmp	r3, #0
 8020fbc:	d0ef      	beq.n	8020f9e <_fflush_r+0xa>
 8020fbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8020fc0:	07d0      	lsls	r0, r2, #31
 8020fc2:	d404      	bmi.n	8020fce <_fflush_r+0x3a>
 8020fc4:	0599      	lsls	r1, r3, #22
 8020fc6:	d402      	bmi.n	8020fce <_fflush_r+0x3a>
 8020fc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020fca:	f000 fc3c 	bl	8021846 <__retarget_lock_acquire_recursive>
 8020fce:	4628      	mov	r0, r5
 8020fd0:	4621      	mov	r1, r4
 8020fd2:	f7ff ff59 	bl	8020e88 <__sflush_r>
 8020fd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020fd8:	07da      	lsls	r2, r3, #31
 8020fda:	4605      	mov	r5, r0
 8020fdc:	d4e0      	bmi.n	8020fa0 <_fflush_r+0xc>
 8020fde:	89a3      	ldrh	r3, [r4, #12]
 8020fe0:	059b      	lsls	r3, r3, #22
 8020fe2:	d4dd      	bmi.n	8020fa0 <_fflush_r+0xc>
 8020fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020fe6:	f000 fc30 	bl	802184a <__retarget_lock_release_recursive>
 8020fea:	e7d9      	b.n	8020fa0 <_fflush_r+0xc>
 8020fec:	4b05      	ldr	r3, [pc, #20]	; (8021004 <_fflush_r+0x70>)
 8020fee:	429c      	cmp	r4, r3
 8020ff0:	d101      	bne.n	8020ff6 <_fflush_r+0x62>
 8020ff2:	68ac      	ldr	r4, [r5, #8]
 8020ff4:	e7df      	b.n	8020fb6 <_fflush_r+0x22>
 8020ff6:	4b04      	ldr	r3, [pc, #16]	; (8021008 <_fflush_r+0x74>)
 8020ff8:	429c      	cmp	r4, r3
 8020ffa:	bf08      	it	eq
 8020ffc:	68ec      	ldreq	r4, [r5, #12]
 8020ffe:	e7da      	b.n	8020fb6 <_fflush_r+0x22>
 8021000:	0802b0a4 	.word	0x0802b0a4
 8021004:	0802b0c4 	.word	0x0802b0c4
 8021008:	0802b084 	.word	0x0802b084

0802100c <fflush>:
 802100c:	4601      	mov	r1, r0
 802100e:	b920      	cbnz	r0, 802101a <fflush+0xe>
 8021010:	4b04      	ldr	r3, [pc, #16]	; (8021024 <fflush+0x18>)
 8021012:	4905      	ldr	r1, [pc, #20]	; (8021028 <fflush+0x1c>)
 8021014:	6818      	ldr	r0, [r3, #0]
 8021016:	f000 babb 	b.w	8021590 <_fwalk_reent>
 802101a:	4b04      	ldr	r3, [pc, #16]	; (802102c <fflush+0x20>)
 802101c:	6818      	ldr	r0, [r3, #0]
 802101e:	f7ff bfb9 	b.w	8020f94 <_fflush_r>
 8021022:	bf00      	nop
 8021024:	0802b0e4 	.word	0x0802b0e4
 8021028:	08020f95 	.word	0x08020f95
 802102c:	20000108 	.word	0x20000108

08021030 <std>:
 8021030:	2300      	movs	r3, #0
 8021032:	b510      	push	{r4, lr}
 8021034:	4604      	mov	r4, r0
 8021036:	e9c0 3300 	strd	r3, r3, [r0]
 802103a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802103e:	6083      	str	r3, [r0, #8]
 8021040:	8181      	strh	r1, [r0, #12]
 8021042:	6643      	str	r3, [r0, #100]	; 0x64
 8021044:	81c2      	strh	r2, [r0, #14]
 8021046:	6183      	str	r3, [r0, #24]
 8021048:	4619      	mov	r1, r3
 802104a:	2208      	movs	r2, #8
 802104c:	305c      	adds	r0, #92	; 0x5c
 802104e:	f000 fc7f 	bl	8021950 <memset>
 8021052:	4b05      	ldr	r3, [pc, #20]	; (8021068 <std+0x38>)
 8021054:	6263      	str	r3, [r4, #36]	; 0x24
 8021056:	4b05      	ldr	r3, [pc, #20]	; (802106c <std+0x3c>)
 8021058:	62a3      	str	r3, [r4, #40]	; 0x28
 802105a:	4b05      	ldr	r3, [pc, #20]	; (8021070 <std+0x40>)
 802105c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802105e:	4b05      	ldr	r3, [pc, #20]	; (8021074 <std+0x44>)
 8021060:	6224      	str	r4, [r4, #32]
 8021062:	6323      	str	r3, [r4, #48]	; 0x30
 8021064:	bd10      	pop	{r4, pc}
 8021066:	bf00      	nop
 8021068:	08021cf9 	.word	0x08021cf9
 802106c:	08021d1f 	.word	0x08021d1f
 8021070:	08021d57 	.word	0x08021d57
 8021074:	08021d7b 	.word	0x08021d7b

08021078 <_cleanup_r>:
 8021078:	4901      	ldr	r1, [pc, #4]	; (8021080 <_cleanup_r+0x8>)
 802107a:	f000 ba89 	b.w	8021590 <_fwalk_reent>
 802107e:	bf00      	nop
 8021080:	08020f95 	.word	0x08020f95

08021084 <__sfmoreglue>:
 8021084:	b570      	push	{r4, r5, r6, lr}
 8021086:	1e4a      	subs	r2, r1, #1
 8021088:	2568      	movs	r5, #104	; 0x68
 802108a:	4355      	muls	r5, r2
 802108c:	460e      	mov	r6, r1
 802108e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8021092:	f000 fcc5 	bl	8021a20 <_malloc_r>
 8021096:	4604      	mov	r4, r0
 8021098:	b140      	cbz	r0, 80210ac <__sfmoreglue+0x28>
 802109a:	2100      	movs	r1, #0
 802109c:	e9c0 1600 	strd	r1, r6, [r0]
 80210a0:	300c      	adds	r0, #12
 80210a2:	60a0      	str	r0, [r4, #8]
 80210a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80210a8:	f000 fc52 	bl	8021950 <memset>
 80210ac:	4620      	mov	r0, r4
 80210ae:	bd70      	pop	{r4, r5, r6, pc}

080210b0 <__sfp_lock_acquire>:
 80210b0:	4801      	ldr	r0, [pc, #4]	; (80210b8 <__sfp_lock_acquire+0x8>)
 80210b2:	f000 bbc8 	b.w	8021846 <__retarget_lock_acquire_recursive>
 80210b6:	bf00      	nop
 80210b8:	20001050 	.word	0x20001050

080210bc <__sfp_lock_release>:
 80210bc:	4801      	ldr	r0, [pc, #4]	; (80210c4 <__sfp_lock_release+0x8>)
 80210be:	f000 bbc4 	b.w	802184a <__retarget_lock_release_recursive>
 80210c2:	bf00      	nop
 80210c4:	20001050 	.word	0x20001050

080210c8 <__sinit_lock_acquire>:
 80210c8:	4801      	ldr	r0, [pc, #4]	; (80210d0 <__sinit_lock_acquire+0x8>)
 80210ca:	f000 bbbc 	b.w	8021846 <__retarget_lock_acquire_recursive>
 80210ce:	bf00      	nop
 80210d0:	2000104b 	.word	0x2000104b

080210d4 <__sinit_lock_release>:
 80210d4:	4801      	ldr	r0, [pc, #4]	; (80210dc <__sinit_lock_release+0x8>)
 80210d6:	f000 bbb8 	b.w	802184a <__retarget_lock_release_recursive>
 80210da:	bf00      	nop
 80210dc:	2000104b 	.word	0x2000104b

080210e0 <__sinit>:
 80210e0:	b510      	push	{r4, lr}
 80210e2:	4604      	mov	r4, r0
 80210e4:	f7ff fff0 	bl	80210c8 <__sinit_lock_acquire>
 80210e8:	69a3      	ldr	r3, [r4, #24]
 80210ea:	b11b      	cbz	r3, 80210f4 <__sinit+0x14>
 80210ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80210f0:	f7ff bff0 	b.w	80210d4 <__sinit_lock_release>
 80210f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80210f8:	6523      	str	r3, [r4, #80]	; 0x50
 80210fa:	4b13      	ldr	r3, [pc, #76]	; (8021148 <__sinit+0x68>)
 80210fc:	4a13      	ldr	r2, [pc, #76]	; (802114c <__sinit+0x6c>)
 80210fe:	681b      	ldr	r3, [r3, #0]
 8021100:	62a2      	str	r2, [r4, #40]	; 0x28
 8021102:	42a3      	cmp	r3, r4
 8021104:	bf04      	itt	eq
 8021106:	2301      	moveq	r3, #1
 8021108:	61a3      	streq	r3, [r4, #24]
 802110a:	4620      	mov	r0, r4
 802110c:	f000 f820 	bl	8021150 <__sfp>
 8021110:	6060      	str	r0, [r4, #4]
 8021112:	4620      	mov	r0, r4
 8021114:	f000 f81c 	bl	8021150 <__sfp>
 8021118:	60a0      	str	r0, [r4, #8]
 802111a:	4620      	mov	r0, r4
 802111c:	f000 f818 	bl	8021150 <__sfp>
 8021120:	2200      	movs	r2, #0
 8021122:	60e0      	str	r0, [r4, #12]
 8021124:	2104      	movs	r1, #4
 8021126:	6860      	ldr	r0, [r4, #4]
 8021128:	f7ff ff82 	bl	8021030 <std>
 802112c:	68a0      	ldr	r0, [r4, #8]
 802112e:	2201      	movs	r2, #1
 8021130:	2109      	movs	r1, #9
 8021132:	f7ff ff7d 	bl	8021030 <std>
 8021136:	68e0      	ldr	r0, [r4, #12]
 8021138:	2202      	movs	r2, #2
 802113a:	2112      	movs	r1, #18
 802113c:	f7ff ff78 	bl	8021030 <std>
 8021140:	2301      	movs	r3, #1
 8021142:	61a3      	str	r3, [r4, #24]
 8021144:	e7d2      	b.n	80210ec <__sinit+0xc>
 8021146:	bf00      	nop
 8021148:	0802b0e4 	.word	0x0802b0e4
 802114c:	08021079 	.word	0x08021079

08021150 <__sfp>:
 8021150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021152:	4607      	mov	r7, r0
 8021154:	f7ff ffac 	bl	80210b0 <__sfp_lock_acquire>
 8021158:	4b1e      	ldr	r3, [pc, #120]	; (80211d4 <__sfp+0x84>)
 802115a:	681e      	ldr	r6, [r3, #0]
 802115c:	69b3      	ldr	r3, [r6, #24]
 802115e:	b913      	cbnz	r3, 8021166 <__sfp+0x16>
 8021160:	4630      	mov	r0, r6
 8021162:	f7ff ffbd 	bl	80210e0 <__sinit>
 8021166:	3648      	adds	r6, #72	; 0x48
 8021168:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802116c:	3b01      	subs	r3, #1
 802116e:	d503      	bpl.n	8021178 <__sfp+0x28>
 8021170:	6833      	ldr	r3, [r6, #0]
 8021172:	b30b      	cbz	r3, 80211b8 <__sfp+0x68>
 8021174:	6836      	ldr	r6, [r6, #0]
 8021176:	e7f7      	b.n	8021168 <__sfp+0x18>
 8021178:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802117c:	b9d5      	cbnz	r5, 80211b4 <__sfp+0x64>
 802117e:	4b16      	ldr	r3, [pc, #88]	; (80211d8 <__sfp+0x88>)
 8021180:	60e3      	str	r3, [r4, #12]
 8021182:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8021186:	6665      	str	r5, [r4, #100]	; 0x64
 8021188:	f000 fb5a 	bl	8021840 <__retarget_lock_init_recursive>
 802118c:	f7ff ff96 	bl	80210bc <__sfp_lock_release>
 8021190:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8021194:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8021198:	6025      	str	r5, [r4, #0]
 802119a:	61a5      	str	r5, [r4, #24]
 802119c:	2208      	movs	r2, #8
 802119e:	4629      	mov	r1, r5
 80211a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80211a4:	f000 fbd4 	bl	8021950 <memset>
 80211a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80211ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80211b0:	4620      	mov	r0, r4
 80211b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80211b4:	3468      	adds	r4, #104	; 0x68
 80211b6:	e7d9      	b.n	802116c <__sfp+0x1c>
 80211b8:	2104      	movs	r1, #4
 80211ba:	4638      	mov	r0, r7
 80211bc:	f7ff ff62 	bl	8021084 <__sfmoreglue>
 80211c0:	4604      	mov	r4, r0
 80211c2:	6030      	str	r0, [r6, #0]
 80211c4:	2800      	cmp	r0, #0
 80211c6:	d1d5      	bne.n	8021174 <__sfp+0x24>
 80211c8:	f7ff ff78 	bl	80210bc <__sfp_lock_release>
 80211cc:	230c      	movs	r3, #12
 80211ce:	603b      	str	r3, [r7, #0]
 80211d0:	e7ee      	b.n	80211b0 <__sfp+0x60>
 80211d2:	bf00      	nop
 80211d4:	0802b0e4 	.word	0x0802b0e4
 80211d8:	ffff0001 	.word	0xffff0001

080211dc <_fopen_r>:
 80211dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80211de:	460f      	mov	r7, r1
 80211e0:	4611      	mov	r1, r2
 80211e2:	aa01      	add	r2, sp, #4
 80211e4:	4605      	mov	r5, r0
 80211e6:	f002 f837 	bl	8023258 <__sflags>
 80211ea:	4606      	mov	r6, r0
 80211ec:	b918      	cbnz	r0, 80211f6 <_fopen_r+0x1a>
 80211ee:	2400      	movs	r4, #0
 80211f0:	4620      	mov	r0, r4
 80211f2:	b003      	add	sp, #12
 80211f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80211f6:	4628      	mov	r0, r5
 80211f8:	f7ff ffaa 	bl	8021150 <__sfp>
 80211fc:	4604      	mov	r4, r0
 80211fe:	2800      	cmp	r0, #0
 8021200:	d0f5      	beq.n	80211ee <_fopen_r+0x12>
 8021202:	4639      	mov	r1, r7
 8021204:	9a01      	ldr	r2, [sp, #4]
 8021206:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 802120a:	4628      	mov	r0, r5
 802120c:	f000 fc62 	bl	8021ad4 <_open_r>
 8021210:	1e07      	subs	r7, r0, #0
 8021212:	da09      	bge.n	8021228 <_fopen_r+0x4c>
 8021214:	2500      	movs	r5, #0
 8021216:	f7ff ff4b 	bl	80210b0 <__sfp_lock_acquire>
 802121a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802121c:	81a5      	strh	r5, [r4, #12]
 802121e:	f000 fb10 	bl	8021842 <__retarget_lock_close_recursive>
 8021222:	f7ff ff4b 	bl	80210bc <__sfp_lock_release>
 8021226:	e7e2      	b.n	80211ee <_fopen_r+0x12>
 8021228:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802122a:	07db      	lsls	r3, r3, #31
 802122c:	d405      	bmi.n	802123a <_fopen_r+0x5e>
 802122e:	89a3      	ldrh	r3, [r4, #12]
 8021230:	0598      	lsls	r0, r3, #22
 8021232:	d402      	bmi.n	802123a <_fopen_r+0x5e>
 8021234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021236:	f000 fb06 	bl	8021846 <__retarget_lock_acquire_recursive>
 802123a:	4b0e      	ldr	r3, [pc, #56]	; (8021274 <_fopen_r+0x98>)
 802123c:	6263      	str	r3, [r4, #36]	; 0x24
 802123e:	4b0e      	ldr	r3, [pc, #56]	; (8021278 <_fopen_r+0x9c>)
 8021240:	62a3      	str	r3, [r4, #40]	; 0x28
 8021242:	4b0e      	ldr	r3, [pc, #56]	; (802127c <_fopen_r+0xa0>)
 8021244:	62e3      	str	r3, [r4, #44]	; 0x2c
 8021246:	05f1      	lsls	r1, r6, #23
 8021248:	4b0d      	ldr	r3, [pc, #52]	; (8021280 <_fopen_r+0xa4>)
 802124a:	81e7      	strh	r7, [r4, #14]
 802124c:	81a6      	strh	r6, [r4, #12]
 802124e:	6224      	str	r4, [r4, #32]
 8021250:	6323      	str	r3, [r4, #48]	; 0x30
 8021252:	d505      	bpl.n	8021260 <_fopen_r+0x84>
 8021254:	2302      	movs	r3, #2
 8021256:	2200      	movs	r2, #0
 8021258:	4621      	mov	r1, r4
 802125a:	4628      	mov	r0, r5
 802125c:	f000 f888 	bl	8021370 <_fseek_r>
 8021260:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021262:	07da      	lsls	r2, r3, #31
 8021264:	d4c4      	bmi.n	80211f0 <_fopen_r+0x14>
 8021266:	89a3      	ldrh	r3, [r4, #12]
 8021268:	059b      	lsls	r3, r3, #22
 802126a:	d4c1      	bmi.n	80211f0 <_fopen_r+0x14>
 802126c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802126e:	f000 faec 	bl	802184a <__retarget_lock_release_recursive>
 8021272:	e7bd      	b.n	80211f0 <_fopen_r+0x14>
 8021274:	08021cf9 	.word	0x08021cf9
 8021278:	08021d1f 	.word	0x08021d1f
 802127c:	08021d57 	.word	0x08021d57
 8021280:	08021d7b 	.word	0x08021d7b

08021284 <fopen>:
 8021284:	4b02      	ldr	r3, [pc, #8]	; (8021290 <fopen+0xc>)
 8021286:	460a      	mov	r2, r1
 8021288:	4601      	mov	r1, r0
 802128a:	6818      	ldr	r0, [r3, #0]
 802128c:	f7ff bfa6 	b.w	80211dc <_fopen_r>
 8021290:	20000108 	.word	0x20000108

08021294 <_fputs_r>:
 8021294:	b570      	push	{r4, r5, r6, lr}
 8021296:	460e      	mov	r6, r1
 8021298:	4614      	mov	r4, r2
 802129a:	4605      	mov	r5, r0
 802129c:	b118      	cbz	r0, 80212a6 <_fputs_r+0x12>
 802129e:	6983      	ldr	r3, [r0, #24]
 80212a0:	b90b      	cbnz	r3, 80212a6 <_fputs_r+0x12>
 80212a2:	f7ff ff1d 	bl	80210e0 <__sinit>
 80212a6:	4b2b      	ldr	r3, [pc, #172]	; (8021354 <_fputs_r+0xc0>)
 80212a8:	429c      	cmp	r4, r3
 80212aa:	d11e      	bne.n	80212ea <_fputs_r+0x56>
 80212ac:	686c      	ldr	r4, [r5, #4]
 80212ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80212b0:	07da      	lsls	r2, r3, #31
 80212b2:	d405      	bmi.n	80212c0 <_fputs_r+0x2c>
 80212b4:	89a3      	ldrh	r3, [r4, #12]
 80212b6:	059b      	lsls	r3, r3, #22
 80212b8:	d402      	bmi.n	80212c0 <_fputs_r+0x2c>
 80212ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80212bc:	f000 fac3 	bl	8021846 <__retarget_lock_acquire_recursive>
 80212c0:	89a3      	ldrh	r3, [r4, #12]
 80212c2:	0718      	lsls	r0, r3, #28
 80212c4:	d51b      	bpl.n	80212fe <_fputs_r+0x6a>
 80212c6:	6923      	ldr	r3, [r4, #16]
 80212c8:	b1cb      	cbz	r3, 80212fe <_fputs_r+0x6a>
 80212ca:	3e01      	subs	r6, #1
 80212cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80212d0:	bb39      	cbnz	r1, 8021322 <_fputs_r+0x8e>
 80212d2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80212d4:	f015 0501 	ands.w	r5, r5, #1
 80212d8:	d139      	bne.n	802134e <_fputs_r+0xba>
 80212da:	89a3      	ldrh	r3, [r4, #12]
 80212dc:	0599      	lsls	r1, r3, #22
 80212de:	d402      	bmi.n	80212e6 <_fputs_r+0x52>
 80212e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80212e2:	f000 fab2 	bl	802184a <__retarget_lock_release_recursive>
 80212e6:	4628      	mov	r0, r5
 80212e8:	bd70      	pop	{r4, r5, r6, pc}
 80212ea:	4b1b      	ldr	r3, [pc, #108]	; (8021358 <_fputs_r+0xc4>)
 80212ec:	429c      	cmp	r4, r3
 80212ee:	d101      	bne.n	80212f4 <_fputs_r+0x60>
 80212f0:	68ac      	ldr	r4, [r5, #8]
 80212f2:	e7dc      	b.n	80212ae <_fputs_r+0x1a>
 80212f4:	4b19      	ldr	r3, [pc, #100]	; (802135c <_fputs_r+0xc8>)
 80212f6:	429c      	cmp	r4, r3
 80212f8:	bf08      	it	eq
 80212fa:	68ec      	ldreq	r4, [r5, #12]
 80212fc:	e7d7      	b.n	80212ae <_fputs_r+0x1a>
 80212fe:	4621      	mov	r1, r4
 8021300:	4628      	mov	r0, r5
 8021302:	f001 fea7 	bl	8023054 <__swsetup_r>
 8021306:	2800      	cmp	r0, #0
 8021308:	d0df      	beq.n	80212ca <_fputs_r+0x36>
 802130a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802130c:	07da      	lsls	r2, r3, #31
 802130e:	d405      	bmi.n	802131c <_fputs_r+0x88>
 8021310:	89a3      	ldrh	r3, [r4, #12]
 8021312:	059b      	lsls	r3, r3, #22
 8021314:	d402      	bmi.n	802131c <_fputs_r+0x88>
 8021316:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021318:	f000 fa97 	bl	802184a <__retarget_lock_release_recursive>
 802131c:	f04f 35ff 	mov.w	r5, #4294967295
 8021320:	e7e1      	b.n	80212e6 <_fputs_r+0x52>
 8021322:	68a3      	ldr	r3, [r4, #8]
 8021324:	3b01      	subs	r3, #1
 8021326:	2b00      	cmp	r3, #0
 8021328:	60a3      	str	r3, [r4, #8]
 802132a:	da04      	bge.n	8021336 <_fputs_r+0xa2>
 802132c:	69a2      	ldr	r2, [r4, #24]
 802132e:	4293      	cmp	r3, r2
 8021330:	db06      	blt.n	8021340 <_fputs_r+0xac>
 8021332:	290a      	cmp	r1, #10
 8021334:	d004      	beq.n	8021340 <_fputs_r+0xac>
 8021336:	6823      	ldr	r3, [r4, #0]
 8021338:	1c5a      	adds	r2, r3, #1
 802133a:	6022      	str	r2, [r4, #0]
 802133c:	7019      	strb	r1, [r3, #0]
 802133e:	e7c5      	b.n	80212cc <_fputs_r+0x38>
 8021340:	4622      	mov	r2, r4
 8021342:	4628      	mov	r0, r5
 8021344:	f001 fe22 	bl	8022f8c <__swbuf_r>
 8021348:	3001      	adds	r0, #1
 802134a:	d1bf      	bne.n	80212cc <_fputs_r+0x38>
 802134c:	e7dd      	b.n	802130a <_fputs_r+0x76>
 802134e:	460d      	mov	r5, r1
 8021350:	e7c9      	b.n	80212e6 <_fputs_r+0x52>
 8021352:	bf00      	nop
 8021354:	0802b0a4 	.word	0x0802b0a4
 8021358:	0802b0c4 	.word	0x0802b0c4
 802135c:	0802b084 	.word	0x0802b084

08021360 <fputs>:
 8021360:	4b02      	ldr	r3, [pc, #8]	; (802136c <fputs+0xc>)
 8021362:	460a      	mov	r2, r1
 8021364:	4601      	mov	r1, r0
 8021366:	6818      	ldr	r0, [r3, #0]
 8021368:	f7ff bf94 	b.w	8021294 <_fputs_r>
 802136c:	20000108 	.word	0x20000108

08021370 <_fseek_r>:
 8021370:	f000 b800 	b.w	8021374 <_fseeko_r>

08021374 <_fseeko_r>:
 8021374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021378:	460c      	mov	r4, r1
 802137a:	4617      	mov	r7, r2
 802137c:	461e      	mov	r6, r3
 802137e:	4605      	mov	r5, r0
 8021380:	b118      	cbz	r0, 802138a <_fseeko_r+0x16>
 8021382:	6983      	ldr	r3, [r0, #24]
 8021384:	b90b      	cbnz	r3, 802138a <_fseeko_r+0x16>
 8021386:	f7ff feab 	bl	80210e0 <__sinit>
 802138a:	4b44      	ldr	r3, [pc, #272]	; (802149c <_fseeko_r+0x128>)
 802138c:	429c      	cmp	r4, r3
 802138e:	d122      	bne.n	80213d6 <_fseeko_r+0x62>
 8021390:	686c      	ldr	r4, [r5, #4]
 8021392:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021394:	07d9      	lsls	r1, r3, #31
 8021396:	d405      	bmi.n	80213a4 <_fseeko_r+0x30>
 8021398:	89a3      	ldrh	r3, [r4, #12]
 802139a:	059a      	lsls	r2, r3, #22
 802139c:	d402      	bmi.n	80213a4 <_fseeko_r+0x30>
 802139e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80213a0:	f000 fa51 	bl	8021846 <__retarget_lock_acquire_recursive>
 80213a4:	89a3      	ldrh	r3, [r4, #12]
 80213a6:	f403 7384 	and.w	r3, r3, #264	; 0x108
 80213aa:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 80213ae:	d103      	bne.n	80213b8 <_fseeko_r+0x44>
 80213b0:	4621      	mov	r1, r4
 80213b2:	4628      	mov	r0, r5
 80213b4:	f7ff fdee 	bl	8020f94 <_fflush_r>
 80213b8:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 80213bc:	f1b8 0f00 	cmp.w	r8, #0
 80213c0:	d113      	bne.n	80213ea <_fseeko_r+0x76>
 80213c2:	231d      	movs	r3, #29
 80213c4:	602b      	str	r3, [r5, #0]
 80213c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80213c8:	07d9      	lsls	r1, r3, #31
 80213ca:	d55d      	bpl.n	8021488 <_fseeko_r+0x114>
 80213cc:	f04f 36ff 	mov.w	r6, #4294967295
 80213d0:	4630      	mov	r0, r6
 80213d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80213d6:	4b32      	ldr	r3, [pc, #200]	; (80214a0 <_fseeko_r+0x12c>)
 80213d8:	429c      	cmp	r4, r3
 80213da:	d101      	bne.n	80213e0 <_fseeko_r+0x6c>
 80213dc:	68ac      	ldr	r4, [r5, #8]
 80213de:	e7d8      	b.n	8021392 <_fseeko_r+0x1e>
 80213e0:	4b30      	ldr	r3, [pc, #192]	; (80214a4 <_fseeko_r+0x130>)
 80213e2:	429c      	cmp	r4, r3
 80213e4:	bf08      	it	eq
 80213e6:	68ec      	ldreq	r4, [r5, #12]
 80213e8:	e7d3      	b.n	8021392 <_fseeko_r+0x1e>
 80213ea:	2e01      	cmp	r6, #1
 80213ec:	d036      	beq.n	802145c <_fseeko_r+0xe8>
 80213ee:	f036 0302 	bics.w	r3, r6, #2
 80213f2:	d147      	bne.n	8021484 <_fseeko_r+0x110>
 80213f4:	6923      	ldr	r3, [r4, #16]
 80213f6:	b91b      	cbnz	r3, 8021400 <_fseeko_r+0x8c>
 80213f8:	4621      	mov	r1, r4
 80213fa:	4628      	mov	r0, r5
 80213fc:	f000 fa4a 	bl	8021894 <__smakebuf_r>
 8021400:	4621      	mov	r1, r4
 8021402:	4628      	mov	r0, r5
 8021404:	f7ff fdc6 	bl	8020f94 <_fflush_r>
 8021408:	2800      	cmp	r0, #0
 802140a:	d1dc      	bne.n	80213c6 <_fseeko_r+0x52>
 802140c:	6a21      	ldr	r1, [r4, #32]
 802140e:	4633      	mov	r3, r6
 8021410:	463a      	mov	r2, r7
 8021412:	4628      	mov	r0, r5
 8021414:	47c0      	blx	r8
 8021416:	3001      	adds	r0, #1
 8021418:	d0d5      	beq.n	80213c6 <_fseeko_r+0x52>
 802141a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802141c:	b141      	cbz	r1, 8021430 <_fseeko_r+0xbc>
 802141e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021422:	4299      	cmp	r1, r3
 8021424:	d002      	beq.n	802142c <_fseeko_r+0xb8>
 8021426:	4628      	mov	r0, r5
 8021428:	f000 faaa 	bl	8021980 <_free_r>
 802142c:	2300      	movs	r3, #0
 802142e:	6363      	str	r3, [r4, #52]	; 0x34
 8021430:	6923      	ldr	r3, [r4, #16]
 8021432:	6023      	str	r3, [r4, #0]
 8021434:	89a3      	ldrh	r3, [r4, #12]
 8021436:	2500      	movs	r5, #0
 8021438:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 802143c:	6065      	str	r5, [r4, #4]
 802143e:	81a3      	strh	r3, [r4, #12]
 8021440:	2208      	movs	r2, #8
 8021442:	4629      	mov	r1, r5
 8021444:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8021448:	f000 fa82 	bl	8021950 <memset>
 802144c:	6e66      	ldr	r6, [r4, #100]	; 0x64
 802144e:	f016 0601 	ands.w	r6, r6, #1
 8021452:	d120      	bne.n	8021496 <_fseeko_r+0x122>
 8021454:	89a3      	ldrh	r3, [r4, #12]
 8021456:	059b      	lsls	r3, r3, #22
 8021458:	d4ba      	bmi.n	80213d0 <_fseeko_r+0x5c>
 802145a:	e00c      	b.n	8021476 <_fseeko_r+0x102>
 802145c:	4621      	mov	r1, r4
 802145e:	4628      	mov	r0, r5
 8021460:	f000 f822 	bl	80214a8 <_ftello_r>
 8021464:	1c43      	adds	r3, r0, #1
 8021466:	4606      	mov	r6, r0
 8021468:	d109      	bne.n	802147e <_fseeko_r+0x10a>
 802146a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802146c:	07dd      	lsls	r5, r3, #31
 802146e:	d4ad      	bmi.n	80213cc <_fseeko_r+0x58>
 8021470:	89a3      	ldrh	r3, [r4, #12]
 8021472:	0598      	lsls	r0, r3, #22
 8021474:	d4aa      	bmi.n	80213cc <_fseeko_r+0x58>
 8021476:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021478:	f000 f9e7 	bl	802184a <__retarget_lock_release_recursive>
 802147c:	e7a8      	b.n	80213d0 <_fseeko_r+0x5c>
 802147e:	4407      	add	r7, r0
 8021480:	2600      	movs	r6, #0
 8021482:	e7b7      	b.n	80213f4 <_fseeko_r+0x80>
 8021484:	2316      	movs	r3, #22
 8021486:	e79d      	b.n	80213c4 <_fseeko_r+0x50>
 8021488:	89a3      	ldrh	r3, [r4, #12]
 802148a:	059a      	lsls	r2, r3, #22
 802148c:	d49e      	bmi.n	80213cc <_fseeko_r+0x58>
 802148e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021490:	f000 f9db 	bl	802184a <__retarget_lock_release_recursive>
 8021494:	e79a      	b.n	80213cc <_fseeko_r+0x58>
 8021496:	462e      	mov	r6, r5
 8021498:	e79a      	b.n	80213d0 <_fseeko_r+0x5c>
 802149a:	bf00      	nop
 802149c:	0802b0a4 	.word	0x0802b0a4
 80214a0:	0802b0c4 	.word	0x0802b0c4
 80214a4:	0802b084 	.word	0x0802b084

080214a8 <_ftello_r>:
 80214a8:	b570      	push	{r4, r5, r6, lr}
 80214aa:	460c      	mov	r4, r1
 80214ac:	4605      	mov	r5, r0
 80214ae:	b118      	cbz	r0, 80214b8 <_ftello_r+0x10>
 80214b0:	6983      	ldr	r3, [r0, #24]
 80214b2:	b90b      	cbnz	r3, 80214b8 <_ftello_r+0x10>
 80214b4:	f7ff fe14 	bl	80210e0 <__sinit>
 80214b8:	4b32      	ldr	r3, [pc, #200]	; (8021584 <_ftello_r+0xdc>)
 80214ba:	429c      	cmp	r4, r3
 80214bc:	d114      	bne.n	80214e8 <_ftello_r+0x40>
 80214be:	686c      	ldr	r4, [r5, #4]
 80214c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80214c2:	07da      	lsls	r2, r3, #31
 80214c4:	d405      	bmi.n	80214d2 <_ftello_r+0x2a>
 80214c6:	89a3      	ldrh	r3, [r4, #12]
 80214c8:	059b      	lsls	r3, r3, #22
 80214ca:	d402      	bmi.n	80214d2 <_ftello_r+0x2a>
 80214cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80214ce:	f000 f9ba 	bl	8021846 <__retarget_lock_acquire_recursive>
 80214d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80214d4:	b9ce      	cbnz	r6, 802150a <_ftello_r+0x62>
 80214d6:	231d      	movs	r3, #29
 80214d8:	602b      	str	r3, [r5, #0]
 80214da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80214dc:	07de      	lsls	r6, r3, #31
 80214de:	d50d      	bpl.n	80214fc <_ftello_r+0x54>
 80214e0:	f04f 35ff 	mov.w	r5, #4294967295
 80214e4:	4628      	mov	r0, r5
 80214e6:	bd70      	pop	{r4, r5, r6, pc}
 80214e8:	4b27      	ldr	r3, [pc, #156]	; (8021588 <_ftello_r+0xe0>)
 80214ea:	429c      	cmp	r4, r3
 80214ec:	d101      	bne.n	80214f2 <_ftello_r+0x4a>
 80214ee:	68ac      	ldr	r4, [r5, #8]
 80214f0:	e7e6      	b.n	80214c0 <_ftello_r+0x18>
 80214f2:	4b26      	ldr	r3, [pc, #152]	; (802158c <_ftello_r+0xe4>)
 80214f4:	429c      	cmp	r4, r3
 80214f6:	bf08      	it	eq
 80214f8:	68ec      	ldreq	r4, [r5, #12]
 80214fa:	e7e1      	b.n	80214c0 <_ftello_r+0x18>
 80214fc:	89a3      	ldrh	r3, [r4, #12]
 80214fe:	059d      	lsls	r5, r3, #22
 8021500:	d4ee      	bmi.n	80214e0 <_ftello_r+0x38>
 8021502:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021504:	f000 f9a1 	bl	802184a <__retarget_lock_release_recursive>
 8021508:	e7ea      	b.n	80214e0 <_ftello_r+0x38>
 802150a:	89a2      	ldrh	r2, [r4, #12]
 802150c:	f002 030c 	and.w	r3, r2, #12
 8021510:	2b08      	cmp	r3, #8
 8021512:	d119      	bne.n	8021548 <_ftello_r+0xa0>
 8021514:	6823      	ldr	r3, [r4, #0]
 8021516:	b1bb      	cbz	r3, 8021548 <_ftello_r+0xa0>
 8021518:	6921      	ldr	r1, [r4, #16]
 802151a:	1a5b      	subs	r3, r3, r1
 802151c:	2b00      	cmp	r3, #0
 802151e:	dd13      	ble.n	8021548 <_ftello_r+0xa0>
 8021520:	05d0      	lsls	r0, r2, #23
 8021522:	d511      	bpl.n	8021548 <_ftello_r+0xa0>
 8021524:	2302      	movs	r3, #2
 8021526:	2200      	movs	r2, #0
 8021528:	6a21      	ldr	r1, [r4, #32]
 802152a:	4628      	mov	r0, r5
 802152c:	47b0      	blx	r6
 802152e:	1c41      	adds	r1, r0, #1
 8021530:	4605      	mov	r5, r0
 8021532:	d10d      	bne.n	8021550 <_ftello_r+0xa8>
 8021534:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021536:	07da      	lsls	r2, r3, #31
 8021538:	d4d2      	bmi.n	80214e0 <_ftello_r+0x38>
 802153a:	89a3      	ldrh	r3, [r4, #12]
 802153c:	059b      	lsls	r3, r3, #22
 802153e:	d4cf      	bmi.n	80214e0 <_ftello_r+0x38>
 8021540:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021542:	f000 f982 	bl	802184a <__retarget_lock_release_recursive>
 8021546:	e7cd      	b.n	80214e4 <_ftello_r+0x3c>
 8021548:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802154c:	d00f      	beq.n	802156e <_ftello_r+0xc6>
 802154e:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8021550:	89a2      	ldrh	r2, [r4, #12]
 8021552:	0756      	lsls	r6, r2, #29
 8021554:	d50d      	bpl.n	8021572 <_ftello_r+0xca>
 8021556:	6863      	ldr	r3, [r4, #4]
 8021558:	1aed      	subs	r5, r5, r3
 802155a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802155c:	b10b      	cbz	r3, 8021562 <_ftello_r+0xba>
 802155e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021560:	1aed      	subs	r5, r5, r3
 8021562:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021564:	07d9      	lsls	r1, r3, #31
 8021566:	d4bd      	bmi.n	80214e4 <_ftello_r+0x3c>
 8021568:	0593      	lsls	r3, r2, #22
 802156a:	d4bb      	bmi.n	80214e4 <_ftello_r+0x3c>
 802156c:	e7e8      	b.n	8021540 <_ftello_r+0x98>
 802156e:	2301      	movs	r3, #1
 8021570:	e7da      	b.n	8021528 <_ftello_r+0x80>
 8021572:	0710      	lsls	r0, r2, #28
 8021574:	d5f5      	bpl.n	8021562 <_ftello_r+0xba>
 8021576:	6823      	ldr	r3, [r4, #0]
 8021578:	2b00      	cmp	r3, #0
 802157a:	d0f2      	beq.n	8021562 <_ftello_r+0xba>
 802157c:	6921      	ldr	r1, [r4, #16]
 802157e:	1a5b      	subs	r3, r3, r1
 8021580:	441d      	add	r5, r3
 8021582:	e7ee      	b.n	8021562 <_ftello_r+0xba>
 8021584:	0802b0a4 	.word	0x0802b0a4
 8021588:	0802b0c4 	.word	0x0802b0c4
 802158c:	0802b084 	.word	0x0802b084

08021590 <_fwalk_reent>:
 8021590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021594:	4606      	mov	r6, r0
 8021596:	4688      	mov	r8, r1
 8021598:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802159c:	2700      	movs	r7, #0
 802159e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80215a2:	f1b9 0901 	subs.w	r9, r9, #1
 80215a6:	d505      	bpl.n	80215b4 <_fwalk_reent+0x24>
 80215a8:	6824      	ldr	r4, [r4, #0]
 80215aa:	2c00      	cmp	r4, #0
 80215ac:	d1f7      	bne.n	802159e <_fwalk_reent+0xe>
 80215ae:	4638      	mov	r0, r7
 80215b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80215b4:	89ab      	ldrh	r3, [r5, #12]
 80215b6:	2b01      	cmp	r3, #1
 80215b8:	d907      	bls.n	80215ca <_fwalk_reent+0x3a>
 80215ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80215be:	3301      	adds	r3, #1
 80215c0:	d003      	beq.n	80215ca <_fwalk_reent+0x3a>
 80215c2:	4629      	mov	r1, r5
 80215c4:	4630      	mov	r0, r6
 80215c6:	47c0      	blx	r8
 80215c8:	4307      	orrs	r7, r0
 80215ca:	3568      	adds	r5, #104	; 0x68
 80215cc:	e7e9      	b.n	80215a2 <_fwalk_reent+0x12>
	...

080215d0 <__libc_init_array>:
 80215d0:	b570      	push	{r4, r5, r6, lr}
 80215d2:	4d0d      	ldr	r5, [pc, #52]	; (8021608 <__libc_init_array+0x38>)
 80215d4:	4c0d      	ldr	r4, [pc, #52]	; (802160c <__libc_init_array+0x3c>)
 80215d6:	1b64      	subs	r4, r4, r5
 80215d8:	10a4      	asrs	r4, r4, #2
 80215da:	2600      	movs	r6, #0
 80215dc:	42a6      	cmp	r6, r4
 80215de:	d109      	bne.n	80215f4 <__libc_init_array+0x24>
 80215e0:	4d0b      	ldr	r5, [pc, #44]	; (8021610 <__libc_init_array+0x40>)
 80215e2:	4c0c      	ldr	r4, [pc, #48]	; (8021614 <__libc_init_array+0x44>)
 80215e4:	f003 f8d6 	bl	8024794 <_init>
 80215e8:	1b64      	subs	r4, r4, r5
 80215ea:	10a4      	asrs	r4, r4, #2
 80215ec:	2600      	movs	r6, #0
 80215ee:	42a6      	cmp	r6, r4
 80215f0:	d105      	bne.n	80215fe <__libc_init_array+0x2e>
 80215f2:	bd70      	pop	{r4, r5, r6, pc}
 80215f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80215f8:	4798      	blx	r3
 80215fa:	3601      	adds	r6, #1
 80215fc:	e7ee      	b.n	80215dc <__libc_init_array+0xc>
 80215fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8021602:	4798      	blx	r3
 8021604:	3601      	adds	r6, #1
 8021606:	e7f2      	b.n	80215ee <__libc_init_array+0x1e>
 8021608:	0802b67c 	.word	0x0802b67c
 802160c:	0802b67c 	.word	0x0802b67c
 8021610:	0802b67c 	.word	0x0802b67c
 8021614:	0802b690 	.word	0x0802b690

08021618 <localtime>:
 8021618:	b538      	push	{r3, r4, r5, lr}
 802161a:	4b0b      	ldr	r3, [pc, #44]	; (8021648 <localtime+0x30>)
 802161c:	681d      	ldr	r5, [r3, #0]
 802161e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8021620:	4604      	mov	r4, r0
 8021622:	b953      	cbnz	r3, 802163a <localtime+0x22>
 8021624:	2024      	movs	r0, #36	; 0x24
 8021626:	f000 f975 	bl	8021914 <malloc>
 802162a:	4602      	mov	r2, r0
 802162c:	63e8      	str	r0, [r5, #60]	; 0x3c
 802162e:	b920      	cbnz	r0, 802163a <localtime+0x22>
 8021630:	4b06      	ldr	r3, [pc, #24]	; (802164c <localtime+0x34>)
 8021632:	4807      	ldr	r0, [pc, #28]	; (8021650 <localtime+0x38>)
 8021634:	2132      	movs	r1, #50	; 0x32
 8021636:	f001 fde1 	bl	80231fc <__assert_func>
 802163a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 802163c:	4620      	mov	r0, r4
 802163e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021642:	f000 b807 	b.w	8021654 <localtime_r>
 8021646:	bf00      	nop
 8021648:	20000108 	.word	0x20000108
 802164c:	0802b0e8 	.word	0x0802b0e8
 8021650:	0802b0ff 	.word	0x0802b0ff

08021654 <localtime_r>:
 8021654:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8021658:	4607      	mov	r7, r0
 802165a:	9101      	str	r1, [sp, #4]
 802165c:	f001 fe98 	bl	8023390 <__gettzinfo>
 8021660:	9901      	ldr	r1, [sp, #4]
 8021662:	4680      	mov	r8, r0
 8021664:	4638      	mov	r0, r7
 8021666:	f001 fe97 	bl	8023398 <gmtime_r>
 802166a:	6943      	ldr	r3, [r0, #20]
 802166c:	079a      	lsls	r2, r3, #30
 802166e:	4604      	mov	r4, r0
 8021670:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 8021674:	d105      	bne.n	8021682 <localtime_r+0x2e>
 8021676:	2264      	movs	r2, #100	; 0x64
 8021678:	fb96 f3f2 	sdiv	r3, r6, r2
 802167c:	fb02 6313 	mls	r3, r2, r3, r6
 8021680:	bb7b      	cbnz	r3, 80216e2 <localtime_r+0x8e>
 8021682:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8021686:	fb96 f5f3 	sdiv	r5, r6, r3
 802168a:	fb03 6515 	mls	r5, r3, r5, r6
 802168e:	fab5 f585 	clz	r5, r5
 8021692:	096d      	lsrs	r5, r5, #5
 8021694:	4b68      	ldr	r3, [pc, #416]	; (8021838 <localtime_r+0x1e4>)
 8021696:	2230      	movs	r2, #48	; 0x30
 8021698:	fb02 3505 	mla	r5, r2, r5, r3
 802169c:	f001 faae 	bl	8022bfc <__tz_lock>
 80216a0:	f001 fab8 	bl	8022c14 <_tzset_unlocked>
 80216a4:	4b65      	ldr	r3, [pc, #404]	; (802183c <localtime_r+0x1e8>)
 80216a6:	681b      	ldr	r3, [r3, #0]
 80216a8:	b353      	cbz	r3, 8021700 <localtime_r+0xac>
 80216aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80216ae:	42b3      	cmp	r3, r6
 80216b0:	d119      	bne.n	80216e6 <localtime_r+0x92>
 80216b2:	f8d8 1000 	ldr.w	r1, [r8]
 80216b6:	e9d7 6700 	ldrd	r6, r7, [r7]
 80216ba:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 80216be:	b9d1      	cbnz	r1, 80216f6 <localtime_r+0xa2>
 80216c0:	4296      	cmp	r6, r2
 80216c2:	eb77 0303 	sbcs.w	r3, r7, r3
 80216c6:	da23      	bge.n	8021710 <localtime_r+0xbc>
 80216c8:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80216cc:	4296      	cmp	r6, r2
 80216ce:	eb77 0303 	sbcs.w	r3, r7, r3
 80216d2:	bfb4      	ite	lt
 80216d4:	2301      	movlt	r3, #1
 80216d6:	2300      	movge	r3, #0
 80216d8:	6223      	str	r3, [r4, #32]
 80216da:	db1b      	blt.n	8021714 <localtime_r+0xc0>
 80216dc:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 80216e0:	e01a      	b.n	8021718 <localtime_r+0xc4>
 80216e2:	2501      	movs	r5, #1
 80216e4:	e7d6      	b.n	8021694 <localtime_r+0x40>
 80216e6:	4630      	mov	r0, r6
 80216e8:	f001 f9e0 	bl	8022aac <__tzcalc_limits>
 80216ec:	2800      	cmp	r0, #0
 80216ee:	d1e0      	bne.n	80216b2 <localtime_r+0x5e>
 80216f0:	f04f 33ff 	mov.w	r3, #4294967295
 80216f4:	e004      	b.n	8021700 <localtime_r+0xac>
 80216f6:	4296      	cmp	r6, r2
 80216f8:	eb77 0303 	sbcs.w	r3, r7, r3
 80216fc:	da02      	bge.n	8021704 <localtime_r+0xb0>
 80216fe:	2300      	movs	r3, #0
 8021700:	6223      	str	r3, [r4, #32]
 8021702:	e7eb      	b.n	80216dc <localtime_r+0x88>
 8021704:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8021708:	4296      	cmp	r6, r2
 802170a:	eb77 0303 	sbcs.w	r3, r7, r3
 802170e:	daf6      	bge.n	80216fe <localtime_r+0xaa>
 8021710:	2301      	movs	r3, #1
 8021712:	6223      	str	r3, [r4, #32]
 8021714:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8021718:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 802171c:	203c      	movs	r0, #60	; 0x3c
 802171e:	fb91 f6f3 	sdiv	r6, r1, r3
 8021722:	fb03 1316 	mls	r3, r3, r6, r1
 8021726:	6861      	ldr	r1, [r4, #4]
 8021728:	fb93 f2f0 	sdiv	r2, r3, r0
 802172c:	fb00 3012 	mls	r0, r0, r2, r3
 8021730:	6823      	ldr	r3, [r4, #0]
 8021732:	1a89      	subs	r1, r1, r2
 8021734:	68a2      	ldr	r2, [r4, #8]
 8021736:	6061      	str	r1, [r4, #4]
 8021738:	1a1b      	subs	r3, r3, r0
 802173a:	1b92      	subs	r2, r2, r6
 802173c:	2b3b      	cmp	r3, #59	; 0x3b
 802173e:	6023      	str	r3, [r4, #0]
 8021740:	60a2      	str	r2, [r4, #8]
 8021742:	dd35      	ble.n	80217b0 <localtime_r+0x15c>
 8021744:	3101      	adds	r1, #1
 8021746:	6061      	str	r1, [r4, #4]
 8021748:	3b3c      	subs	r3, #60	; 0x3c
 802174a:	6023      	str	r3, [r4, #0]
 802174c:	6863      	ldr	r3, [r4, #4]
 802174e:	2b3b      	cmp	r3, #59	; 0x3b
 8021750:	dd34      	ble.n	80217bc <localtime_r+0x168>
 8021752:	3201      	adds	r2, #1
 8021754:	60a2      	str	r2, [r4, #8]
 8021756:	3b3c      	subs	r3, #60	; 0x3c
 8021758:	6063      	str	r3, [r4, #4]
 802175a:	68a3      	ldr	r3, [r4, #8]
 802175c:	2b17      	cmp	r3, #23
 802175e:	dd33      	ble.n	80217c8 <localtime_r+0x174>
 8021760:	69e2      	ldr	r2, [r4, #28]
 8021762:	3201      	adds	r2, #1
 8021764:	61e2      	str	r2, [r4, #28]
 8021766:	69a2      	ldr	r2, [r4, #24]
 8021768:	3201      	adds	r2, #1
 802176a:	2a06      	cmp	r2, #6
 802176c:	bfc8      	it	gt
 802176e:	2200      	movgt	r2, #0
 8021770:	61a2      	str	r2, [r4, #24]
 8021772:	68e2      	ldr	r2, [r4, #12]
 8021774:	3b18      	subs	r3, #24
 8021776:	3201      	adds	r2, #1
 8021778:	60a3      	str	r3, [r4, #8]
 802177a:	6923      	ldr	r3, [r4, #16]
 802177c:	60e2      	str	r2, [r4, #12]
 802177e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8021782:	428a      	cmp	r2, r1
 8021784:	dd0e      	ble.n	80217a4 <localtime_r+0x150>
 8021786:	2b0b      	cmp	r3, #11
 8021788:	eba2 0201 	sub.w	r2, r2, r1
 802178c:	60e2      	str	r2, [r4, #12]
 802178e:	f103 0201 	add.w	r2, r3, #1
 8021792:	bf09      	itett	eq
 8021794:	6963      	ldreq	r3, [r4, #20]
 8021796:	6122      	strne	r2, [r4, #16]
 8021798:	2200      	moveq	r2, #0
 802179a:	3301      	addeq	r3, #1
 802179c:	bf02      	ittt	eq
 802179e:	6122      	streq	r2, [r4, #16]
 80217a0:	6163      	streq	r3, [r4, #20]
 80217a2:	61e2      	streq	r2, [r4, #28]
 80217a4:	f001 fa30 	bl	8022c08 <__tz_unlock>
 80217a8:	4620      	mov	r0, r4
 80217aa:	b002      	add	sp, #8
 80217ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80217b0:	2b00      	cmp	r3, #0
 80217b2:	dacb      	bge.n	802174c <localtime_r+0xf8>
 80217b4:	3901      	subs	r1, #1
 80217b6:	6061      	str	r1, [r4, #4]
 80217b8:	333c      	adds	r3, #60	; 0x3c
 80217ba:	e7c6      	b.n	802174a <localtime_r+0xf6>
 80217bc:	2b00      	cmp	r3, #0
 80217be:	dacc      	bge.n	802175a <localtime_r+0x106>
 80217c0:	3a01      	subs	r2, #1
 80217c2:	60a2      	str	r2, [r4, #8]
 80217c4:	333c      	adds	r3, #60	; 0x3c
 80217c6:	e7c7      	b.n	8021758 <localtime_r+0x104>
 80217c8:	2b00      	cmp	r3, #0
 80217ca:	daeb      	bge.n	80217a4 <localtime_r+0x150>
 80217cc:	69e2      	ldr	r2, [r4, #28]
 80217ce:	3a01      	subs	r2, #1
 80217d0:	61e2      	str	r2, [r4, #28]
 80217d2:	69a2      	ldr	r2, [r4, #24]
 80217d4:	3a01      	subs	r2, #1
 80217d6:	bf48      	it	mi
 80217d8:	2206      	movmi	r2, #6
 80217da:	61a2      	str	r2, [r4, #24]
 80217dc:	68e2      	ldr	r2, [r4, #12]
 80217de:	3318      	adds	r3, #24
 80217e0:	3a01      	subs	r2, #1
 80217e2:	60e2      	str	r2, [r4, #12]
 80217e4:	60a3      	str	r3, [r4, #8]
 80217e6:	2a00      	cmp	r2, #0
 80217e8:	d1dc      	bne.n	80217a4 <localtime_r+0x150>
 80217ea:	6923      	ldr	r3, [r4, #16]
 80217ec:	3b01      	subs	r3, #1
 80217ee:	d405      	bmi.n	80217fc <localtime_r+0x1a8>
 80217f0:	6123      	str	r3, [r4, #16]
 80217f2:	6923      	ldr	r3, [r4, #16]
 80217f4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80217f8:	60e3      	str	r3, [r4, #12]
 80217fa:	e7d3      	b.n	80217a4 <localtime_r+0x150>
 80217fc:	230b      	movs	r3, #11
 80217fe:	6123      	str	r3, [r4, #16]
 8021800:	6963      	ldr	r3, [r4, #20]
 8021802:	1e5a      	subs	r2, r3, #1
 8021804:	6162      	str	r2, [r4, #20]
 8021806:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 802180a:	0793      	lsls	r3, r2, #30
 802180c:	d105      	bne.n	802181a <localtime_r+0x1c6>
 802180e:	2164      	movs	r1, #100	; 0x64
 8021810:	fb92 f3f1 	sdiv	r3, r2, r1
 8021814:	fb01 2313 	mls	r3, r1, r3, r2
 8021818:	b963      	cbnz	r3, 8021834 <localtime_r+0x1e0>
 802181a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 802181e:	fb92 f3f1 	sdiv	r3, r2, r1
 8021822:	fb01 2313 	mls	r3, r1, r3, r2
 8021826:	fab3 f383 	clz	r3, r3
 802182a:	095b      	lsrs	r3, r3, #5
 802182c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8021830:	61e3      	str	r3, [r4, #28]
 8021832:	e7de      	b.n	80217f2 <localtime_r+0x19e>
 8021834:	2301      	movs	r3, #1
 8021836:	e7f9      	b.n	802182c <localtime_r+0x1d8>
 8021838:	0802b160 	.word	0x0802b160
 802183c:	20000fac 	.word	0x20000fac

08021840 <__retarget_lock_init_recursive>:
 8021840:	4770      	bx	lr

08021842 <__retarget_lock_close_recursive>:
 8021842:	4770      	bx	lr

08021844 <__retarget_lock_acquire>:
 8021844:	4770      	bx	lr

08021846 <__retarget_lock_acquire_recursive>:
 8021846:	4770      	bx	lr

08021848 <__retarget_lock_release>:
 8021848:	4770      	bx	lr

0802184a <__retarget_lock_release_recursive>:
 802184a:	4770      	bx	lr

0802184c <__swhatbuf_r>:
 802184c:	b570      	push	{r4, r5, r6, lr}
 802184e:	460e      	mov	r6, r1
 8021850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021854:	2900      	cmp	r1, #0
 8021856:	b096      	sub	sp, #88	; 0x58
 8021858:	4614      	mov	r4, r2
 802185a:	461d      	mov	r5, r3
 802185c:	da07      	bge.n	802186e <__swhatbuf_r+0x22>
 802185e:	2300      	movs	r3, #0
 8021860:	602b      	str	r3, [r5, #0]
 8021862:	89b3      	ldrh	r3, [r6, #12]
 8021864:	061a      	lsls	r2, r3, #24
 8021866:	d410      	bmi.n	802188a <__swhatbuf_r+0x3e>
 8021868:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802186c:	e00e      	b.n	802188c <__swhatbuf_r+0x40>
 802186e:	466a      	mov	r2, sp
 8021870:	f001 fd3a 	bl	80232e8 <_fstat_r>
 8021874:	2800      	cmp	r0, #0
 8021876:	dbf2      	blt.n	802185e <__swhatbuf_r+0x12>
 8021878:	9a01      	ldr	r2, [sp, #4]
 802187a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802187e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8021882:	425a      	negs	r2, r3
 8021884:	415a      	adcs	r2, r3
 8021886:	602a      	str	r2, [r5, #0]
 8021888:	e7ee      	b.n	8021868 <__swhatbuf_r+0x1c>
 802188a:	2340      	movs	r3, #64	; 0x40
 802188c:	2000      	movs	r0, #0
 802188e:	6023      	str	r3, [r4, #0]
 8021890:	b016      	add	sp, #88	; 0x58
 8021892:	bd70      	pop	{r4, r5, r6, pc}

08021894 <__smakebuf_r>:
 8021894:	898b      	ldrh	r3, [r1, #12]
 8021896:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021898:	079d      	lsls	r5, r3, #30
 802189a:	4606      	mov	r6, r0
 802189c:	460c      	mov	r4, r1
 802189e:	d507      	bpl.n	80218b0 <__smakebuf_r+0x1c>
 80218a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80218a4:	6023      	str	r3, [r4, #0]
 80218a6:	6123      	str	r3, [r4, #16]
 80218a8:	2301      	movs	r3, #1
 80218aa:	6163      	str	r3, [r4, #20]
 80218ac:	b002      	add	sp, #8
 80218ae:	bd70      	pop	{r4, r5, r6, pc}
 80218b0:	ab01      	add	r3, sp, #4
 80218b2:	466a      	mov	r2, sp
 80218b4:	f7ff ffca 	bl	802184c <__swhatbuf_r>
 80218b8:	9900      	ldr	r1, [sp, #0]
 80218ba:	4605      	mov	r5, r0
 80218bc:	4630      	mov	r0, r6
 80218be:	f000 f8af 	bl	8021a20 <_malloc_r>
 80218c2:	b948      	cbnz	r0, 80218d8 <__smakebuf_r+0x44>
 80218c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80218c8:	059a      	lsls	r2, r3, #22
 80218ca:	d4ef      	bmi.n	80218ac <__smakebuf_r+0x18>
 80218cc:	f023 0303 	bic.w	r3, r3, #3
 80218d0:	f043 0302 	orr.w	r3, r3, #2
 80218d4:	81a3      	strh	r3, [r4, #12]
 80218d6:	e7e3      	b.n	80218a0 <__smakebuf_r+0xc>
 80218d8:	4b0d      	ldr	r3, [pc, #52]	; (8021910 <__smakebuf_r+0x7c>)
 80218da:	62b3      	str	r3, [r6, #40]	; 0x28
 80218dc:	89a3      	ldrh	r3, [r4, #12]
 80218de:	6020      	str	r0, [r4, #0]
 80218e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80218e4:	81a3      	strh	r3, [r4, #12]
 80218e6:	9b00      	ldr	r3, [sp, #0]
 80218e8:	6163      	str	r3, [r4, #20]
 80218ea:	9b01      	ldr	r3, [sp, #4]
 80218ec:	6120      	str	r0, [r4, #16]
 80218ee:	b15b      	cbz	r3, 8021908 <__smakebuf_r+0x74>
 80218f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80218f4:	4630      	mov	r0, r6
 80218f6:	f001 fdff 	bl	80234f8 <_isatty_r>
 80218fa:	b128      	cbz	r0, 8021908 <__smakebuf_r+0x74>
 80218fc:	89a3      	ldrh	r3, [r4, #12]
 80218fe:	f023 0303 	bic.w	r3, r3, #3
 8021902:	f043 0301 	orr.w	r3, r3, #1
 8021906:	81a3      	strh	r3, [r4, #12]
 8021908:	89a0      	ldrh	r0, [r4, #12]
 802190a:	4305      	orrs	r5, r0
 802190c:	81a5      	strh	r5, [r4, #12]
 802190e:	e7cd      	b.n	80218ac <__smakebuf_r+0x18>
 8021910:	08021079 	.word	0x08021079

08021914 <malloc>:
 8021914:	4b02      	ldr	r3, [pc, #8]	; (8021920 <malloc+0xc>)
 8021916:	4601      	mov	r1, r0
 8021918:	6818      	ldr	r0, [r3, #0]
 802191a:	f000 b881 	b.w	8021a20 <_malloc_r>
 802191e:	bf00      	nop
 8021920:	20000108 	.word	0x20000108

08021924 <free>:
 8021924:	4b02      	ldr	r3, [pc, #8]	; (8021930 <free+0xc>)
 8021926:	4601      	mov	r1, r0
 8021928:	6818      	ldr	r0, [r3, #0]
 802192a:	f000 b829 	b.w	8021980 <_free_r>
 802192e:	bf00      	nop
 8021930:	20000108 	.word	0x20000108

08021934 <memcpy>:
 8021934:	440a      	add	r2, r1
 8021936:	4291      	cmp	r1, r2
 8021938:	f100 33ff 	add.w	r3, r0, #4294967295
 802193c:	d100      	bne.n	8021940 <memcpy+0xc>
 802193e:	4770      	bx	lr
 8021940:	b510      	push	{r4, lr}
 8021942:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021946:	f803 4f01 	strb.w	r4, [r3, #1]!
 802194a:	4291      	cmp	r1, r2
 802194c:	d1f9      	bne.n	8021942 <memcpy+0xe>
 802194e:	bd10      	pop	{r4, pc}

08021950 <memset>:
 8021950:	4402      	add	r2, r0
 8021952:	4603      	mov	r3, r0
 8021954:	4293      	cmp	r3, r2
 8021956:	d100      	bne.n	802195a <memset+0xa>
 8021958:	4770      	bx	lr
 802195a:	f803 1b01 	strb.w	r1, [r3], #1
 802195e:	e7f9      	b.n	8021954 <memset+0x4>

08021960 <_calloc_r>:
 8021960:	b513      	push	{r0, r1, r4, lr}
 8021962:	434a      	muls	r2, r1
 8021964:	4611      	mov	r1, r2
 8021966:	9201      	str	r2, [sp, #4]
 8021968:	f000 f85a 	bl	8021a20 <_malloc_r>
 802196c:	4604      	mov	r4, r0
 802196e:	b118      	cbz	r0, 8021978 <_calloc_r+0x18>
 8021970:	9a01      	ldr	r2, [sp, #4]
 8021972:	2100      	movs	r1, #0
 8021974:	f7ff ffec 	bl	8021950 <memset>
 8021978:	4620      	mov	r0, r4
 802197a:	b002      	add	sp, #8
 802197c:	bd10      	pop	{r4, pc}
	...

08021980 <_free_r>:
 8021980:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021982:	2900      	cmp	r1, #0
 8021984:	d048      	beq.n	8021a18 <_free_r+0x98>
 8021986:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802198a:	9001      	str	r0, [sp, #4]
 802198c:	2b00      	cmp	r3, #0
 802198e:	f1a1 0404 	sub.w	r4, r1, #4
 8021992:	bfb8      	it	lt
 8021994:	18e4      	addlt	r4, r4, r3
 8021996:	f001 fde7 	bl	8023568 <__malloc_lock>
 802199a:	4a20      	ldr	r2, [pc, #128]	; (8021a1c <_free_r+0x9c>)
 802199c:	9801      	ldr	r0, [sp, #4]
 802199e:	6813      	ldr	r3, [r2, #0]
 80219a0:	4615      	mov	r5, r2
 80219a2:	b933      	cbnz	r3, 80219b2 <_free_r+0x32>
 80219a4:	6063      	str	r3, [r4, #4]
 80219a6:	6014      	str	r4, [r2, #0]
 80219a8:	b003      	add	sp, #12
 80219aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80219ae:	f001 bde1 	b.w	8023574 <__malloc_unlock>
 80219b2:	42a3      	cmp	r3, r4
 80219b4:	d90b      	bls.n	80219ce <_free_r+0x4e>
 80219b6:	6821      	ldr	r1, [r4, #0]
 80219b8:	1862      	adds	r2, r4, r1
 80219ba:	4293      	cmp	r3, r2
 80219bc:	bf04      	itt	eq
 80219be:	681a      	ldreq	r2, [r3, #0]
 80219c0:	685b      	ldreq	r3, [r3, #4]
 80219c2:	6063      	str	r3, [r4, #4]
 80219c4:	bf04      	itt	eq
 80219c6:	1852      	addeq	r2, r2, r1
 80219c8:	6022      	streq	r2, [r4, #0]
 80219ca:	602c      	str	r4, [r5, #0]
 80219cc:	e7ec      	b.n	80219a8 <_free_r+0x28>
 80219ce:	461a      	mov	r2, r3
 80219d0:	685b      	ldr	r3, [r3, #4]
 80219d2:	b10b      	cbz	r3, 80219d8 <_free_r+0x58>
 80219d4:	42a3      	cmp	r3, r4
 80219d6:	d9fa      	bls.n	80219ce <_free_r+0x4e>
 80219d8:	6811      	ldr	r1, [r2, #0]
 80219da:	1855      	adds	r5, r2, r1
 80219dc:	42a5      	cmp	r5, r4
 80219de:	d10b      	bne.n	80219f8 <_free_r+0x78>
 80219e0:	6824      	ldr	r4, [r4, #0]
 80219e2:	4421      	add	r1, r4
 80219e4:	1854      	adds	r4, r2, r1
 80219e6:	42a3      	cmp	r3, r4
 80219e8:	6011      	str	r1, [r2, #0]
 80219ea:	d1dd      	bne.n	80219a8 <_free_r+0x28>
 80219ec:	681c      	ldr	r4, [r3, #0]
 80219ee:	685b      	ldr	r3, [r3, #4]
 80219f0:	6053      	str	r3, [r2, #4]
 80219f2:	4421      	add	r1, r4
 80219f4:	6011      	str	r1, [r2, #0]
 80219f6:	e7d7      	b.n	80219a8 <_free_r+0x28>
 80219f8:	d902      	bls.n	8021a00 <_free_r+0x80>
 80219fa:	230c      	movs	r3, #12
 80219fc:	6003      	str	r3, [r0, #0]
 80219fe:	e7d3      	b.n	80219a8 <_free_r+0x28>
 8021a00:	6825      	ldr	r5, [r4, #0]
 8021a02:	1961      	adds	r1, r4, r5
 8021a04:	428b      	cmp	r3, r1
 8021a06:	bf04      	itt	eq
 8021a08:	6819      	ldreq	r1, [r3, #0]
 8021a0a:	685b      	ldreq	r3, [r3, #4]
 8021a0c:	6063      	str	r3, [r4, #4]
 8021a0e:	bf04      	itt	eq
 8021a10:	1949      	addeq	r1, r1, r5
 8021a12:	6021      	streq	r1, [r4, #0]
 8021a14:	6054      	str	r4, [r2, #4]
 8021a16:	e7c7      	b.n	80219a8 <_free_r+0x28>
 8021a18:	b003      	add	sp, #12
 8021a1a:	bd30      	pop	{r4, r5, pc}
 8021a1c:	20000f88 	.word	0x20000f88

08021a20 <_malloc_r>:
 8021a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021a22:	1ccd      	adds	r5, r1, #3
 8021a24:	f025 0503 	bic.w	r5, r5, #3
 8021a28:	3508      	adds	r5, #8
 8021a2a:	2d0c      	cmp	r5, #12
 8021a2c:	bf38      	it	cc
 8021a2e:	250c      	movcc	r5, #12
 8021a30:	2d00      	cmp	r5, #0
 8021a32:	4606      	mov	r6, r0
 8021a34:	db01      	blt.n	8021a3a <_malloc_r+0x1a>
 8021a36:	42a9      	cmp	r1, r5
 8021a38:	d903      	bls.n	8021a42 <_malloc_r+0x22>
 8021a3a:	230c      	movs	r3, #12
 8021a3c:	6033      	str	r3, [r6, #0]
 8021a3e:	2000      	movs	r0, #0
 8021a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021a42:	f001 fd91 	bl	8023568 <__malloc_lock>
 8021a46:	4921      	ldr	r1, [pc, #132]	; (8021acc <_malloc_r+0xac>)
 8021a48:	680a      	ldr	r2, [r1, #0]
 8021a4a:	4614      	mov	r4, r2
 8021a4c:	b99c      	cbnz	r4, 8021a76 <_malloc_r+0x56>
 8021a4e:	4f20      	ldr	r7, [pc, #128]	; (8021ad0 <_malloc_r+0xb0>)
 8021a50:	683b      	ldr	r3, [r7, #0]
 8021a52:	b923      	cbnz	r3, 8021a5e <_malloc_r+0x3e>
 8021a54:	4621      	mov	r1, r4
 8021a56:	4630      	mov	r0, r6
 8021a58:	f000 f8da 	bl	8021c10 <_sbrk_r>
 8021a5c:	6038      	str	r0, [r7, #0]
 8021a5e:	4629      	mov	r1, r5
 8021a60:	4630      	mov	r0, r6
 8021a62:	f000 f8d5 	bl	8021c10 <_sbrk_r>
 8021a66:	1c43      	adds	r3, r0, #1
 8021a68:	d123      	bne.n	8021ab2 <_malloc_r+0x92>
 8021a6a:	230c      	movs	r3, #12
 8021a6c:	6033      	str	r3, [r6, #0]
 8021a6e:	4630      	mov	r0, r6
 8021a70:	f001 fd80 	bl	8023574 <__malloc_unlock>
 8021a74:	e7e3      	b.n	8021a3e <_malloc_r+0x1e>
 8021a76:	6823      	ldr	r3, [r4, #0]
 8021a78:	1b5b      	subs	r3, r3, r5
 8021a7a:	d417      	bmi.n	8021aac <_malloc_r+0x8c>
 8021a7c:	2b0b      	cmp	r3, #11
 8021a7e:	d903      	bls.n	8021a88 <_malloc_r+0x68>
 8021a80:	6023      	str	r3, [r4, #0]
 8021a82:	441c      	add	r4, r3
 8021a84:	6025      	str	r5, [r4, #0]
 8021a86:	e004      	b.n	8021a92 <_malloc_r+0x72>
 8021a88:	6863      	ldr	r3, [r4, #4]
 8021a8a:	42a2      	cmp	r2, r4
 8021a8c:	bf0c      	ite	eq
 8021a8e:	600b      	streq	r3, [r1, #0]
 8021a90:	6053      	strne	r3, [r2, #4]
 8021a92:	4630      	mov	r0, r6
 8021a94:	f001 fd6e 	bl	8023574 <__malloc_unlock>
 8021a98:	f104 000b 	add.w	r0, r4, #11
 8021a9c:	1d23      	adds	r3, r4, #4
 8021a9e:	f020 0007 	bic.w	r0, r0, #7
 8021aa2:	1ac2      	subs	r2, r0, r3
 8021aa4:	d0cc      	beq.n	8021a40 <_malloc_r+0x20>
 8021aa6:	1a1b      	subs	r3, r3, r0
 8021aa8:	50a3      	str	r3, [r4, r2]
 8021aaa:	e7c9      	b.n	8021a40 <_malloc_r+0x20>
 8021aac:	4622      	mov	r2, r4
 8021aae:	6864      	ldr	r4, [r4, #4]
 8021ab0:	e7cc      	b.n	8021a4c <_malloc_r+0x2c>
 8021ab2:	1cc4      	adds	r4, r0, #3
 8021ab4:	f024 0403 	bic.w	r4, r4, #3
 8021ab8:	42a0      	cmp	r0, r4
 8021aba:	d0e3      	beq.n	8021a84 <_malloc_r+0x64>
 8021abc:	1a21      	subs	r1, r4, r0
 8021abe:	4630      	mov	r0, r6
 8021ac0:	f000 f8a6 	bl	8021c10 <_sbrk_r>
 8021ac4:	3001      	adds	r0, #1
 8021ac6:	d1dd      	bne.n	8021a84 <_malloc_r+0x64>
 8021ac8:	e7cf      	b.n	8021a6a <_malloc_r+0x4a>
 8021aca:	bf00      	nop
 8021acc:	20000f88 	.word	0x20000f88
 8021ad0:	20000f8c 	.word	0x20000f8c

08021ad4 <_open_r>:
 8021ad4:	b538      	push	{r3, r4, r5, lr}
 8021ad6:	4d07      	ldr	r5, [pc, #28]	; (8021af4 <_open_r+0x20>)
 8021ad8:	4604      	mov	r4, r0
 8021ada:	4608      	mov	r0, r1
 8021adc:	4611      	mov	r1, r2
 8021ade:	2200      	movs	r2, #0
 8021ae0:	602a      	str	r2, [r5, #0]
 8021ae2:	461a      	mov	r2, r3
 8021ae4:	f7df f9fc 	bl	8000ee0 <_open>
 8021ae8:	1c43      	adds	r3, r0, #1
 8021aea:	d102      	bne.n	8021af2 <_open_r+0x1e>
 8021aec:	682b      	ldr	r3, [r5, #0]
 8021aee:	b103      	cbz	r3, 8021af2 <_open_r+0x1e>
 8021af0:	6023      	str	r3, [r4, #0]
 8021af2:	bd38      	pop	{r3, r4, r5, pc}
 8021af4:	20001054 	.word	0x20001054

08021af8 <putchar>:
 8021af8:	4b09      	ldr	r3, [pc, #36]	; (8021b20 <putchar+0x28>)
 8021afa:	b513      	push	{r0, r1, r4, lr}
 8021afc:	681c      	ldr	r4, [r3, #0]
 8021afe:	4601      	mov	r1, r0
 8021b00:	b134      	cbz	r4, 8021b10 <putchar+0x18>
 8021b02:	69a3      	ldr	r3, [r4, #24]
 8021b04:	b923      	cbnz	r3, 8021b10 <putchar+0x18>
 8021b06:	9001      	str	r0, [sp, #4]
 8021b08:	4620      	mov	r0, r4
 8021b0a:	f7ff fae9 	bl	80210e0 <__sinit>
 8021b0e:	9901      	ldr	r1, [sp, #4]
 8021b10:	68a2      	ldr	r2, [r4, #8]
 8021b12:	4620      	mov	r0, r4
 8021b14:	b002      	add	sp, #8
 8021b16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021b1a:	f002 b9a1 	b.w	8023e60 <_putc_r>
 8021b1e:	bf00      	nop
 8021b20:	20000108 	.word	0x20000108

08021b24 <srand>:
 8021b24:	b538      	push	{r3, r4, r5, lr}
 8021b26:	4b10      	ldr	r3, [pc, #64]	; (8021b68 <srand+0x44>)
 8021b28:	681d      	ldr	r5, [r3, #0]
 8021b2a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8021b2c:	4604      	mov	r4, r0
 8021b2e:	b9b3      	cbnz	r3, 8021b5e <srand+0x3a>
 8021b30:	2018      	movs	r0, #24
 8021b32:	f7ff feef 	bl	8021914 <malloc>
 8021b36:	4602      	mov	r2, r0
 8021b38:	63a8      	str	r0, [r5, #56]	; 0x38
 8021b3a:	b920      	cbnz	r0, 8021b46 <srand+0x22>
 8021b3c:	4b0b      	ldr	r3, [pc, #44]	; (8021b6c <srand+0x48>)
 8021b3e:	480c      	ldr	r0, [pc, #48]	; (8021b70 <srand+0x4c>)
 8021b40:	2142      	movs	r1, #66	; 0x42
 8021b42:	f001 fb5b 	bl	80231fc <__assert_func>
 8021b46:	490b      	ldr	r1, [pc, #44]	; (8021b74 <srand+0x50>)
 8021b48:	4b0b      	ldr	r3, [pc, #44]	; (8021b78 <srand+0x54>)
 8021b4a:	e9c0 1300 	strd	r1, r3, [r0]
 8021b4e:	4b0b      	ldr	r3, [pc, #44]	; (8021b7c <srand+0x58>)
 8021b50:	6083      	str	r3, [r0, #8]
 8021b52:	230b      	movs	r3, #11
 8021b54:	8183      	strh	r3, [r0, #12]
 8021b56:	2100      	movs	r1, #0
 8021b58:	2001      	movs	r0, #1
 8021b5a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8021b5e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8021b60:	2200      	movs	r2, #0
 8021b62:	611c      	str	r4, [r3, #16]
 8021b64:	615a      	str	r2, [r3, #20]
 8021b66:	bd38      	pop	{r3, r4, r5, pc}
 8021b68:	20000108 	.word	0x20000108
 8021b6c:	0802b0e8 	.word	0x0802b0e8
 8021b70:	0802b1c0 	.word	0x0802b1c0
 8021b74:	abcd330e 	.word	0xabcd330e
 8021b78:	e66d1234 	.word	0xe66d1234
 8021b7c:	0005deec 	.word	0x0005deec

08021b80 <rand>:
 8021b80:	4b17      	ldr	r3, [pc, #92]	; (8021be0 <rand+0x60>)
 8021b82:	b510      	push	{r4, lr}
 8021b84:	681c      	ldr	r4, [r3, #0]
 8021b86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021b88:	b9b3      	cbnz	r3, 8021bb8 <rand+0x38>
 8021b8a:	2018      	movs	r0, #24
 8021b8c:	f7ff fec2 	bl	8021914 <malloc>
 8021b90:	63a0      	str	r0, [r4, #56]	; 0x38
 8021b92:	b928      	cbnz	r0, 8021ba0 <rand+0x20>
 8021b94:	4602      	mov	r2, r0
 8021b96:	4b13      	ldr	r3, [pc, #76]	; (8021be4 <rand+0x64>)
 8021b98:	4813      	ldr	r0, [pc, #76]	; (8021be8 <rand+0x68>)
 8021b9a:	214e      	movs	r1, #78	; 0x4e
 8021b9c:	f001 fb2e 	bl	80231fc <__assert_func>
 8021ba0:	4a12      	ldr	r2, [pc, #72]	; (8021bec <rand+0x6c>)
 8021ba2:	4b13      	ldr	r3, [pc, #76]	; (8021bf0 <rand+0x70>)
 8021ba4:	e9c0 2300 	strd	r2, r3, [r0]
 8021ba8:	4b12      	ldr	r3, [pc, #72]	; (8021bf4 <rand+0x74>)
 8021baa:	6083      	str	r3, [r0, #8]
 8021bac:	230b      	movs	r3, #11
 8021bae:	8183      	strh	r3, [r0, #12]
 8021bb0:	2201      	movs	r2, #1
 8021bb2:	2300      	movs	r3, #0
 8021bb4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8021bb8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8021bba:	480f      	ldr	r0, [pc, #60]	; (8021bf8 <rand+0x78>)
 8021bbc:	690a      	ldr	r2, [r1, #16]
 8021bbe:	694b      	ldr	r3, [r1, #20]
 8021bc0:	4c0e      	ldr	r4, [pc, #56]	; (8021bfc <rand+0x7c>)
 8021bc2:	4350      	muls	r0, r2
 8021bc4:	fb04 0003 	mla	r0, r4, r3, r0
 8021bc8:	fba2 3404 	umull	r3, r4, r2, r4
 8021bcc:	1c5a      	adds	r2, r3, #1
 8021bce:	4404      	add	r4, r0
 8021bd0:	f144 0000 	adc.w	r0, r4, #0
 8021bd4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8021bd8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8021bdc:	bd10      	pop	{r4, pc}
 8021bde:	bf00      	nop
 8021be0:	20000108 	.word	0x20000108
 8021be4:	0802b0e8 	.word	0x0802b0e8
 8021be8:	0802b1c0 	.word	0x0802b1c0
 8021bec:	abcd330e 	.word	0xabcd330e
 8021bf0:	e66d1234 	.word	0xe66d1234
 8021bf4:	0005deec 	.word	0x0005deec
 8021bf8:	5851f42d 	.word	0x5851f42d
 8021bfc:	4c957f2d 	.word	0x4c957f2d

08021c00 <realloc>:
 8021c00:	4b02      	ldr	r3, [pc, #8]	; (8021c0c <realloc+0xc>)
 8021c02:	460a      	mov	r2, r1
 8021c04:	4601      	mov	r1, r0
 8021c06:	6818      	ldr	r0, [r3, #0]
 8021c08:	f001 bcba 	b.w	8023580 <_realloc_r>
 8021c0c:	20000108 	.word	0x20000108

08021c10 <_sbrk_r>:
 8021c10:	b538      	push	{r3, r4, r5, lr}
 8021c12:	4d06      	ldr	r5, [pc, #24]	; (8021c2c <_sbrk_r+0x1c>)
 8021c14:	2300      	movs	r3, #0
 8021c16:	4604      	mov	r4, r0
 8021c18:	4608      	mov	r0, r1
 8021c1a:	602b      	str	r3, [r5, #0]
 8021c1c:	f7df f96e 	bl	8000efc <_sbrk>
 8021c20:	1c43      	adds	r3, r0, #1
 8021c22:	d102      	bne.n	8021c2a <_sbrk_r+0x1a>
 8021c24:	682b      	ldr	r3, [r5, #0]
 8021c26:	b103      	cbz	r3, 8021c2a <_sbrk_r+0x1a>
 8021c28:	6023      	str	r3, [r4, #0]
 8021c2a:	bd38      	pop	{r3, r4, r5, pc}
 8021c2c:	20001054 	.word	0x20001054

08021c30 <_raise_r>:
 8021c30:	291f      	cmp	r1, #31
 8021c32:	b538      	push	{r3, r4, r5, lr}
 8021c34:	4604      	mov	r4, r0
 8021c36:	460d      	mov	r5, r1
 8021c38:	d904      	bls.n	8021c44 <_raise_r+0x14>
 8021c3a:	2316      	movs	r3, #22
 8021c3c:	6003      	str	r3, [r0, #0]
 8021c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8021c42:	bd38      	pop	{r3, r4, r5, pc}
 8021c44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8021c46:	b112      	cbz	r2, 8021c4e <_raise_r+0x1e>
 8021c48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021c4c:	b94b      	cbnz	r3, 8021c62 <_raise_r+0x32>
 8021c4e:	4620      	mov	r0, r4
 8021c50:	f000 f830 	bl	8021cb4 <_getpid_r>
 8021c54:	462a      	mov	r2, r5
 8021c56:	4601      	mov	r1, r0
 8021c58:	4620      	mov	r0, r4
 8021c5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021c5e:	f000 b817 	b.w	8021c90 <_kill_r>
 8021c62:	2b01      	cmp	r3, #1
 8021c64:	d00a      	beq.n	8021c7c <_raise_r+0x4c>
 8021c66:	1c59      	adds	r1, r3, #1
 8021c68:	d103      	bne.n	8021c72 <_raise_r+0x42>
 8021c6a:	2316      	movs	r3, #22
 8021c6c:	6003      	str	r3, [r0, #0]
 8021c6e:	2001      	movs	r0, #1
 8021c70:	e7e7      	b.n	8021c42 <_raise_r+0x12>
 8021c72:	2400      	movs	r4, #0
 8021c74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8021c78:	4628      	mov	r0, r5
 8021c7a:	4798      	blx	r3
 8021c7c:	2000      	movs	r0, #0
 8021c7e:	e7e0      	b.n	8021c42 <_raise_r+0x12>

08021c80 <raise>:
 8021c80:	4b02      	ldr	r3, [pc, #8]	; (8021c8c <raise+0xc>)
 8021c82:	4601      	mov	r1, r0
 8021c84:	6818      	ldr	r0, [r3, #0]
 8021c86:	f7ff bfd3 	b.w	8021c30 <_raise_r>
 8021c8a:	bf00      	nop
 8021c8c:	20000108 	.word	0x20000108

08021c90 <_kill_r>:
 8021c90:	b538      	push	{r3, r4, r5, lr}
 8021c92:	4d07      	ldr	r5, [pc, #28]	; (8021cb0 <_kill_r+0x20>)
 8021c94:	2300      	movs	r3, #0
 8021c96:	4604      	mov	r4, r0
 8021c98:	4608      	mov	r0, r1
 8021c9a:	4611      	mov	r1, r2
 8021c9c:	602b      	str	r3, [r5, #0]
 8021c9e:	f7df f898 	bl	8000dd2 <_kill>
 8021ca2:	1c43      	adds	r3, r0, #1
 8021ca4:	d102      	bne.n	8021cac <_kill_r+0x1c>
 8021ca6:	682b      	ldr	r3, [r5, #0]
 8021ca8:	b103      	cbz	r3, 8021cac <_kill_r+0x1c>
 8021caa:	6023      	str	r3, [r4, #0]
 8021cac:	bd38      	pop	{r3, r4, r5, pc}
 8021cae:	bf00      	nop
 8021cb0:	20001054 	.word	0x20001054

08021cb4 <_getpid_r>:
 8021cb4:	f7df b885 	b.w	8000dc2 <_getpid>

08021cb8 <siprintf>:
 8021cb8:	b40e      	push	{r1, r2, r3}
 8021cba:	b500      	push	{lr}
 8021cbc:	b09c      	sub	sp, #112	; 0x70
 8021cbe:	ab1d      	add	r3, sp, #116	; 0x74
 8021cc0:	9002      	str	r0, [sp, #8]
 8021cc2:	9006      	str	r0, [sp, #24]
 8021cc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8021cc8:	4809      	ldr	r0, [pc, #36]	; (8021cf0 <siprintf+0x38>)
 8021cca:	9107      	str	r1, [sp, #28]
 8021ccc:	9104      	str	r1, [sp, #16]
 8021cce:	4909      	ldr	r1, [pc, #36]	; (8021cf4 <siprintf+0x3c>)
 8021cd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8021cd4:	9105      	str	r1, [sp, #20]
 8021cd6:	6800      	ldr	r0, [r0, #0]
 8021cd8:	9301      	str	r3, [sp, #4]
 8021cda:	a902      	add	r1, sp, #8
 8021cdc:	f001 fcd2 	bl	8023684 <_svfiprintf_r>
 8021ce0:	9b02      	ldr	r3, [sp, #8]
 8021ce2:	2200      	movs	r2, #0
 8021ce4:	701a      	strb	r2, [r3, #0]
 8021ce6:	b01c      	add	sp, #112	; 0x70
 8021ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8021cec:	b003      	add	sp, #12
 8021cee:	4770      	bx	lr
 8021cf0:	20000108 	.word	0x20000108
 8021cf4:	ffff0208 	.word	0xffff0208

08021cf8 <__sread>:
 8021cf8:	b510      	push	{r4, lr}
 8021cfa:	460c      	mov	r4, r1
 8021cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021d00:	f002 f8f6 	bl	8023ef0 <_read_r>
 8021d04:	2800      	cmp	r0, #0
 8021d06:	bfab      	itete	ge
 8021d08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8021d0a:	89a3      	ldrhlt	r3, [r4, #12]
 8021d0c:	181b      	addge	r3, r3, r0
 8021d0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8021d12:	bfac      	ite	ge
 8021d14:	6563      	strge	r3, [r4, #84]	; 0x54
 8021d16:	81a3      	strhlt	r3, [r4, #12]
 8021d18:	bd10      	pop	{r4, pc}

08021d1a <__seofread>:
 8021d1a:	2000      	movs	r0, #0
 8021d1c:	4770      	bx	lr

08021d1e <__swrite>:
 8021d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021d22:	461f      	mov	r7, r3
 8021d24:	898b      	ldrh	r3, [r1, #12]
 8021d26:	05db      	lsls	r3, r3, #23
 8021d28:	4605      	mov	r5, r0
 8021d2a:	460c      	mov	r4, r1
 8021d2c:	4616      	mov	r6, r2
 8021d2e:	d505      	bpl.n	8021d3c <__swrite+0x1e>
 8021d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021d34:	2302      	movs	r3, #2
 8021d36:	2200      	movs	r2, #0
 8021d38:	f001 fbf2 	bl	8023520 <_lseek_r>
 8021d3c:	89a3      	ldrh	r3, [r4, #12]
 8021d3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021d42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8021d46:	81a3      	strh	r3, [r4, #12]
 8021d48:	4632      	mov	r2, r6
 8021d4a:	463b      	mov	r3, r7
 8021d4c:	4628      	mov	r0, r5
 8021d4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021d52:	f001 b96d 	b.w	8023030 <_write_r>

08021d56 <__sseek>:
 8021d56:	b510      	push	{r4, lr}
 8021d58:	460c      	mov	r4, r1
 8021d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021d5e:	f001 fbdf 	bl	8023520 <_lseek_r>
 8021d62:	1c43      	adds	r3, r0, #1
 8021d64:	89a3      	ldrh	r3, [r4, #12]
 8021d66:	bf15      	itete	ne
 8021d68:	6560      	strne	r0, [r4, #84]	; 0x54
 8021d6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8021d6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8021d72:	81a3      	strheq	r3, [r4, #12]
 8021d74:	bf18      	it	ne
 8021d76:	81a3      	strhne	r3, [r4, #12]
 8021d78:	bd10      	pop	{r4, pc}

08021d7a <__sclose>:
 8021d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021d7e:	f001 ba5b 	b.w	8023238 <_close_r>

08021d82 <strcpy>:
 8021d82:	4603      	mov	r3, r0
 8021d84:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021d88:	f803 2b01 	strb.w	r2, [r3], #1
 8021d8c:	2a00      	cmp	r2, #0
 8021d8e:	d1f9      	bne.n	8021d84 <strcpy+0x2>
 8021d90:	4770      	bx	lr
	...

08021d94 <iso_year_adjust>:
 8021d94:	6941      	ldr	r1, [r0, #20]
 8021d96:	2900      	cmp	r1, #0
 8021d98:	f240 736c 	movw	r3, #1900	; 0x76c
 8021d9c:	bfa8      	it	ge
 8021d9e:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8021da2:	18ca      	adds	r2, r1, r3
 8021da4:	078b      	lsls	r3, r1, #30
 8021da6:	d105      	bne.n	8021db4 <iso_year_adjust+0x20>
 8021da8:	2164      	movs	r1, #100	; 0x64
 8021daa:	fb92 f3f1 	sdiv	r3, r2, r1
 8021dae:	fb01 2313 	mls	r3, r1, r3, r2
 8021db2:	b9db      	cbnz	r3, 8021dec <iso_year_adjust+0x58>
 8021db4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8021db8:	fb92 f3f1 	sdiv	r3, r2, r1
 8021dbc:	fb01 2313 	mls	r3, r1, r3, r2
 8021dc0:	fab3 f383 	clz	r3, r3
 8021dc4:	095b      	lsrs	r3, r3, #5
 8021dc6:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 8021dca:	0040      	lsls	r0, r0, #1
 8021dcc:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8021dd0:	4418      	add	r0, r3
 8021dd2:	f241 63a2 	movw	r3, #5794	; 0x16a2
 8021dd6:	4298      	cmp	r0, r3
 8021dd8:	d03a      	beq.n	8021e50 <iso_year_adjust+0xbc>
 8021dda:	dc21      	bgt.n	8021e20 <iso_year_adjust+0x8c>
 8021ddc:	2801      	cmp	r0, #1
 8021dde:	dc1a      	bgt.n	8021e16 <iso_year_adjust+0x82>
 8021de0:	2800      	cmp	r0, #0
 8021de2:	bfb4      	ite	lt
 8021de4:	2000      	movlt	r0, #0
 8021de6:	f04f 30ff 	movge.w	r0, #4294967295
 8021dea:	4770      	bx	lr
 8021dec:	2301      	movs	r3, #1
 8021dee:	e7ea      	b.n	8021dc6 <iso_year_adjust+0x32>
 8021df0:	2817      	cmp	r0, #23
 8021df2:	d813      	bhi.n	8021e1c <iso_year_adjust+0x88>
 8021df4:	e8df f000 	tbb	[pc, r0]
 8021df8:	0c0c0c0c 	.word	0x0c0c0c0c
 8021dfc:	0c0c1212 	.word	0x0c0c1212
 8021e00:	12121212 	.word	0x12121212
 8021e04:	12121212 	.word	0x12121212
 8021e08:	0c0c1212 	.word	0x0c0c1212
 8021e0c:	0c0c1212 	.word	0x0c0c1212
 8021e10:	f04f 30ff 	mov.w	r0, #4294967295
 8021e14:	4770      	bx	lr
 8021e16:	380a      	subs	r0, #10
 8021e18:	2817      	cmp	r0, #23
 8021e1a:	d9e9      	bls.n	8021df0 <iso_year_adjust+0x5c>
 8021e1c:	2000      	movs	r0, #0
 8021e1e:	4770      	bx	lr
 8021e20:	f241 63b4 	movw	r3, #5812	; 0x16b4
 8021e24:	4298      	cmp	r0, r3
 8021e26:	dc06      	bgt.n	8021e36 <iso_year_adjust+0xa2>
 8021e28:	f241 63b1 	movw	r3, #5809	; 0x16b1
 8021e2c:	4298      	cmp	r0, r3
 8021e2e:	bfd4      	ite	le
 8021e30:	2000      	movle	r0, #0
 8021e32:	2001      	movgt	r0, #1
 8021e34:	4770      	bx	lr
 8021e36:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 8021e3a:	3802      	subs	r0, #2
 8021e3c:	2815      	cmp	r0, #21
 8021e3e:	d8ed      	bhi.n	8021e1c <iso_year_adjust+0x88>
 8021e40:	2301      	movs	r3, #1
 8021e42:	4083      	lsls	r3, r0
 8021e44:	4803      	ldr	r0, [pc, #12]	; (8021e54 <iso_year_adjust+0xc0>)
 8021e46:	4018      	ands	r0, r3
 8021e48:	3800      	subs	r0, #0
 8021e4a:	bf18      	it	ne
 8021e4c:	2001      	movne	r0, #1
 8021e4e:	4770      	bx	lr
 8021e50:	2001      	movs	r0, #1
 8021e52:	4770      	bx	lr
 8021e54:	002a001f 	.word	0x002a001f

08021e58 <__strftime>:
 8021e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e5c:	b091      	sub	sp, #68	; 0x44
 8021e5e:	461d      	mov	r5, r3
 8021e60:	2300      	movs	r3, #0
 8021e62:	4681      	mov	r9, r0
 8021e64:	4688      	mov	r8, r1
 8021e66:	9304      	str	r3, [sp, #16]
 8021e68:	461c      	mov	r4, r3
 8021e6a:	7813      	ldrb	r3, [r2, #0]
 8021e6c:	2b00      	cmp	r3, #0
 8021e6e:	f000 84d1 	beq.w	8022814 <__strftime+0x9bc>
 8021e72:	2b25      	cmp	r3, #37	; 0x25
 8021e74:	d11b      	bne.n	8021eae <__strftime+0x56>
 8021e76:	7857      	ldrb	r7, [r2, #1]
 8021e78:	2f30      	cmp	r7, #48	; 0x30
 8021e7a:	d024      	beq.n	8021ec6 <__strftime+0x6e>
 8021e7c:	2f2b      	cmp	r7, #43	; 0x2b
 8021e7e:	d022      	beq.n	8021ec6 <__strftime+0x6e>
 8021e80:	f102 0b01 	add.w	fp, r2, #1
 8021e84:	2700      	movs	r7, #0
 8021e86:	f89b 3000 	ldrb.w	r3, [fp]
 8021e8a:	3b31      	subs	r3, #49	; 0x31
 8021e8c:	2b08      	cmp	r3, #8
 8021e8e:	d81d      	bhi.n	8021ecc <__strftime+0x74>
 8021e90:	4658      	mov	r0, fp
 8021e92:	220a      	movs	r2, #10
 8021e94:	a908      	add	r1, sp, #32
 8021e96:	f000 fdff 	bl	8022a98 <strtoul>
 8021e9a:	f8dd b020 	ldr.w	fp, [sp, #32]
 8021e9e:	4606      	mov	r6, r0
 8021ea0:	f89b 3000 	ldrb.w	r3, [fp]
 8021ea4:	2b45      	cmp	r3, #69	; 0x45
 8021ea6:	d113      	bne.n	8021ed0 <__strftime+0x78>
 8021ea8:	f10b 0b01 	add.w	fp, fp, #1
 8021eac:	e012      	b.n	8021ed4 <__strftime+0x7c>
 8021eae:	f108 31ff 	add.w	r1, r8, #4294967295
 8021eb2:	42a1      	cmp	r1, r4
 8021eb4:	d802      	bhi.n	8021ebc <__strftime+0x64>
 8021eb6:	2400      	movs	r4, #0
 8021eb8:	f000 bcb2 	b.w	8022820 <__strftime+0x9c8>
 8021ebc:	f809 3004 	strb.w	r3, [r9, r4]
 8021ec0:	3201      	adds	r2, #1
 8021ec2:	3401      	adds	r4, #1
 8021ec4:	e7d1      	b.n	8021e6a <__strftime+0x12>
 8021ec6:	f102 0b02 	add.w	fp, r2, #2
 8021eca:	e7dc      	b.n	8021e86 <__strftime+0x2e>
 8021ecc:	2600      	movs	r6, #0
 8021ece:	e7e7      	b.n	8021ea0 <__strftime+0x48>
 8021ed0:	2b4f      	cmp	r3, #79	; 0x4f
 8021ed2:	d0e9      	beq.n	8021ea8 <__strftime+0x50>
 8021ed4:	f89b 0000 	ldrb.w	r0, [fp]
 8021ed8:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 8021edc:	2b55      	cmp	r3, #85	; 0x55
 8021ede:	d8ea      	bhi.n	8021eb6 <__strftime+0x5e>
 8021ee0:	a201      	add	r2, pc, #4	; (adr r2, 8021ee8 <__strftime+0x90>)
 8021ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021ee6:	bf00      	nop
 8021ee8:	08022807 	.word	0x08022807
 8021eec:	08021eb7 	.word	0x08021eb7
 8021ef0:	08021eb7 	.word	0x08021eb7
 8021ef4:	08021eb7 	.word	0x08021eb7
 8021ef8:	08021eb7 	.word	0x08021eb7
 8021efc:	08021eb7 	.word	0x08021eb7
 8021f00:	08021eb7 	.word	0x08021eb7
 8021f04:	08021eb7 	.word	0x08021eb7
 8021f08:	08021eb7 	.word	0x08021eb7
 8021f0c:	08021eb7 	.word	0x08021eb7
 8021f10:	08021eb7 	.word	0x08021eb7
 8021f14:	08021eb7 	.word	0x08021eb7
 8021f18:	08021eb7 	.word	0x08021eb7
 8021f1c:	08021eb7 	.word	0x08021eb7
 8021f20:	08021eb7 	.word	0x08021eb7
 8021f24:	08021eb7 	.word	0x08021eb7
 8021f28:	08021eb7 	.word	0x08021eb7
 8021f2c:	08021eb7 	.word	0x08021eb7
 8021f30:	08021eb7 	.word	0x08021eb7
 8021f34:	08021eb7 	.word	0x08021eb7
 8021f38:	08021eb7 	.word	0x08021eb7
 8021f3c:	08021eb7 	.word	0x08021eb7
 8021f40:	08021eb7 	.word	0x08021eb7
 8021f44:	08021eb7 	.word	0x08021eb7
 8021f48:	08021eb7 	.word	0x08021eb7
 8021f4c:	08021eb7 	.word	0x08021eb7
 8021f50:	08021eb7 	.word	0x08021eb7
 8021f54:	08021eb7 	.word	0x08021eb7
 8021f58:	0802207f 	.word	0x0802207f
 8021f5c:	080220d9 	.word	0x080220d9
 8021f60:	0802214f 	.word	0x0802214f
 8021f64:	080221e9 	.word	0x080221e9
 8021f68:	08021eb7 	.word	0x08021eb7
 8021f6c:	08022235 	.word	0x08022235
 8021f70:	08022315 	.word	0x08022315
 8021f74:	08022417 	.word	0x08022417
 8021f78:	08022425 	.word	0x08022425
 8021f7c:	08021eb7 	.word	0x08021eb7
 8021f80:	08021eb7 	.word	0x08021eb7
 8021f84:	08021eb7 	.word	0x08021eb7
 8021f88:	08022455 	.word	0x08022455
 8021f8c:	08021eb7 	.word	0x08021eb7
 8021f90:	08021eb7 	.word	0x08021eb7
 8021f94:	0802246d 	.word	0x0802246d
 8021f98:	08021eb7 	.word	0x08021eb7
 8021f9c:	080224bb 	.word	0x080224bb
 8021fa0:	080225d1 	.word	0x080225d1
 8021fa4:	080225e3 	.word	0x080225e3
 8021fa8:	0802263b 	.word	0x0802263b
 8021fac:	0802264b 	.word	0x0802264b
 8021fb0:	080226c1 	.word	0x080226c1
 8021fb4:	08022147 	.word	0x08022147
 8021fb8:	080226f5 	.word	0x080226f5
 8021fbc:	080227b3 	.word	0x080227b3
 8021fc0:	08021eb7 	.word	0x08021eb7
 8021fc4:	08021eb7 	.word	0x08021eb7
 8021fc8:	08021eb7 	.word	0x08021eb7
 8021fcc:	08021eb7 	.word	0x08021eb7
 8021fd0:	08021eb7 	.word	0x08021eb7
 8021fd4:	08021eb7 	.word	0x08021eb7
 8021fd8:	08022041 	.word	0x08022041
 8021fdc:	080220ad 	.word	0x080220ad
 8021fe0:	08022107 	.word	0x08022107
 8021fe4:	080221c1 	.word	0x080221c1
 8021fe8:	080221c1 	.word	0x080221c1
 8021fec:	08021eb7 	.word	0x08021eb7
 8021ff0:	0802227d 	.word	0x0802227d
 8021ff4:	080220ad 	.word	0x080220ad
 8021ff8:	08021eb7 	.word	0x08021eb7
 8021ffc:	08022447 	.word	0x08022447
 8022000:	08022417 	.word	0x08022417
 8022004:	08022425 	.word	0x08022425
 8022008:	0802244f 	.word	0x0802244f
 802200c:	08022459 	.word	0x08022459
 8022010:	08021eb7 	.word	0x08021eb7
 8022014:	0802246d 	.word	0x0802246d
 8022018:	08021eb7 	.word	0x08021eb7
 802201c:	08022137 	.word	0x08022137
 8022020:	080224d1 	.word	0x080224d1
 8022024:	080225d5 	.word	0x080225d5
 8022028:	0802261d 	.word	0x0802261d
 802202c:	08021eb7 	.word	0x08021eb7
 8022030:	080226b1 	.word	0x080226b1
 8022034:	0802213f 	.word	0x0802213f
 8022038:	080226d9 	.word	0x080226d9
 802203c:	08022745 	.word	0x08022745
 8022040:	69ab      	ldr	r3, [r5, #24]
 8022042:	4aa7      	ldr	r2, [pc, #668]	; (80222e0 <__strftime+0x488>)
 8022044:	3318      	adds	r3, #24
 8022046:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 802204a:	4630      	mov	r0, r6
 802204c:	f7de f8f6 	bl	800023c <strlen>
 8022050:	3e01      	subs	r6, #1
 8022052:	4420      	add	r0, r4
 8022054:	f108 33ff 	add.w	r3, r8, #4294967295
 8022058:	42a0      	cmp	r0, r4
 802205a:	d107      	bne.n	802206c <__strftime+0x214>
 802205c:	f89b 3000 	ldrb.w	r3, [fp]
 8022060:	2b00      	cmp	r3, #0
 8022062:	f000 83d7 	beq.w	8022814 <__strftime+0x9bc>
 8022066:	f10b 0201 	add.w	r2, fp, #1
 802206a:	e6fe      	b.n	8021e6a <__strftime+0x12>
 802206c:	42a3      	cmp	r3, r4
 802206e:	f67f af22 	bls.w	8021eb6 <__strftime+0x5e>
 8022072:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8022076:	f809 2004 	strb.w	r2, [r9, r4]
 802207a:	3401      	adds	r4, #1
 802207c:	e7ec      	b.n	8022058 <__strftime+0x200>
 802207e:	69aa      	ldr	r2, [r5, #24]
 8022080:	4b97      	ldr	r3, [pc, #604]	; (80222e0 <__strftime+0x488>)
 8022082:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8022086:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 8022088:	4630      	mov	r0, r6
 802208a:	f7de f8d7 	bl	800023c <strlen>
 802208e:	3e01      	subs	r6, #1
 8022090:	4420      	add	r0, r4
 8022092:	f108 33ff 	add.w	r3, r8, #4294967295
 8022096:	42a0      	cmp	r0, r4
 8022098:	d0e0      	beq.n	802205c <__strftime+0x204>
 802209a:	42a3      	cmp	r3, r4
 802209c:	f67f af0b 	bls.w	8021eb6 <__strftime+0x5e>
 80220a0:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80220a4:	f809 2004 	strb.w	r2, [r9, r4]
 80220a8:	3401      	adds	r4, #1
 80220aa:	e7f4      	b.n	8022096 <__strftime+0x23e>
 80220ac:	4b8c      	ldr	r3, [pc, #560]	; (80222e0 <__strftime+0x488>)
 80220ae:	692a      	ldr	r2, [r5, #16]
 80220b0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80220b4:	4630      	mov	r0, r6
 80220b6:	f7de f8c1 	bl	800023c <strlen>
 80220ba:	3e01      	subs	r6, #1
 80220bc:	4420      	add	r0, r4
 80220be:	f108 33ff 	add.w	r3, r8, #4294967295
 80220c2:	42a0      	cmp	r0, r4
 80220c4:	d0ca      	beq.n	802205c <__strftime+0x204>
 80220c6:	42a3      	cmp	r3, r4
 80220c8:	f67f aef5 	bls.w	8021eb6 <__strftime+0x5e>
 80220cc:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80220d0:	f809 2004 	strb.w	r2, [r9, r4]
 80220d4:	3401      	adds	r4, #1
 80220d6:	e7f4      	b.n	80220c2 <__strftime+0x26a>
 80220d8:	692b      	ldr	r3, [r5, #16]
 80220da:	4a81      	ldr	r2, [pc, #516]	; (80222e0 <__strftime+0x488>)
 80220dc:	330c      	adds	r3, #12
 80220de:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80220e2:	4630      	mov	r0, r6
 80220e4:	f7de f8aa 	bl	800023c <strlen>
 80220e8:	3e01      	subs	r6, #1
 80220ea:	4420      	add	r0, r4
 80220ec:	f108 33ff 	add.w	r3, r8, #4294967295
 80220f0:	42a0      	cmp	r0, r4
 80220f2:	d0b3      	beq.n	802205c <__strftime+0x204>
 80220f4:	42a3      	cmp	r3, r4
 80220f6:	f67f aede 	bls.w	8021eb6 <__strftime+0x5e>
 80220fa:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80220fe:	f809 2004 	strb.w	r2, [r9, r4]
 8022102:	3401      	adds	r4, #1
 8022104:	e7f4      	b.n	80220f0 <__strftime+0x298>
 8022106:	4b76      	ldr	r3, [pc, #472]	; (80222e0 <__strftime+0x488>)
 8022108:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 802210c:	4630      	mov	r0, r6
 802210e:	f7de f895 	bl	800023c <strlen>
 8022112:	7833      	ldrb	r3, [r6, #0]
 8022114:	2b00      	cmp	r3, #0
 8022116:	d0a1      	beq.n	802205c <__strftime+0x204>
 8022118:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802211a:	9300      	str	r3, [sp, #0]
 802211c:	4632      	mov	r2, r6
 802211e:	462b      	mov	r3, r5
 8022120:	eba8 0104 	sub.w	r1, r8, r4
 8022124:	eb09 0004 	add.w	r0, r9, r4
 8022128:	f7ff fe96 	bl	8021e58 <__strftime>
 802212c:	2800      	cmp	r0, #0
 802212e:	f77f aec2 	ble.w	8021eb6 <__strftime+0x5e>
 8022132:	4404      	add	r4, r0
 8022134:	e792      	b.n	802205c <__strftime+0x204>
 8022136:	4b6a      	ldr	r3, [pc, #424]	; (80222e0 <__strftime+0x488>)
 8022138:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 802213c:	e7e6      	b.n	802210c <__strftime+0x2b4>
 802213e:	4b68      	ldr	r3, [pc, #416]	; (80222e0 <__strftime+0x488>)
 8022140:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 8022144:	e7e2      	b.n	802210c <__strftime+0x2b4>
 8022146:	4b66      	ldr	r3, [pc, #408]	; (80222e0 <__strftime+0x488>)
 8022148:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 802214c:	e7de      	b.n	802210c <__strftime+0x2b4>
 802214e:	4965      	ldr	r1, [pc, #404]	; (80222e4 <__strftime+0x48c>)
 8022150:	f8d5 a014 	ldr.w	sl, [r5, #20]
 8022154:	458a      	cmp	sl, r1
 8022156:	bfac      	ite	ge
 8022158:	2100      	movge	r1, #0
 802215a:	2101      	movlt	r1, #1
 802215c:	f1ba 0f00 	cmp.w	sl, #0
 8022160:	db0e      	blt.n	8022180 <__strftime+0x328>
 8022162:	2064      	movs	r0, #100	; 0x64
 8022164:	fb9a f0f0 	sdiv	r0, sl, r0
 8022168:	3013      	adds	r0, #19
 802216a:	b19f      	cbz	r7, 8022194 <__strftime+0x33c>
 802216c:	2863      	cmp	r0, #99	; 0x63
 802216e:	dd25      	ble.n	80221bc <__strftime+0x364>
 8022170:	4a5d      	ldr	r2, [pc, #372]	; (80222e8 <__strftime+0x490>)
 8022172:	4b5e      	ldr	r3, [pc, #376]	; (80222ec <__strftime+0x494>)
 8022174:	2f2b      	cmp	r7, #43	; 0x2b
 8022176:	bf14      	ite	ne
 8022178:	4617      	movne	r7, r2
 802217a:	461f      	moveq	r7, r3
 802217c:	4a5c      	ldr	r2, [pc, #368]	; (80222f0 <__strftime+0x498>)
 802217e:	e00b      	b.n	8022198 <__strftime+0x340>
 8022180:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 8022184:	9105      	str	r1, [sp, #20]
 8022186:	f001 f835 	bl	80231f4 <abs>
 802218a:	2364      	movs	r3, #100	; 0x64
 802218c:	9905      	ldr	r1, [sp, #20]
 802218e:	fb90 f0f3 	sdiv	r0, r0, r3
 8022192:	e7ea      	b.n	802216a <__strftime+0x312>
 8022194:	4f54      	ldr	r7, [pc, #336]	; (80222e8 <__strftime+0x490>)
 8022196:	4a57      	ldr	r2, [pc, #348]	; (80222f4 <__strftime+0x49c>)
 8022198:	4b57      	ldr	r3, [pc, #348]	; (80222f8 <__strftime+0x4a0>)
 802219a:	9001      	str	r0, [sp, #4]
 802219c:	2e02      	cmp	r6, #2
 802219e:	bf2c      	ite	cs
 80221a0:	ebc1 0606 	rsbcs	r6, r1, r6
 80221a4:	f1c1 0602 	rsbcc	r6, r1, #2
 80221a8:	494e      	ldr	r1, [pc, #312]	; (80222e4 <__strftime+0x48c>)
 80221aa:	9600      	str	r6, [sp, #0]
 80221ac:	458a      	cmp	sl, r1
 80221ae:	bfa8      	it	ge
 80221b0:	463b      	movge	r3, r7
 80221b2:	eba8 0104 	sub.w	r1, r8, r4
 80221b6:	eb09 0004 	add.w	r0, r9, r4
 80221ba:	e02a      	b.n	8022212 <__strftime+0x3ba>
 80221bc:	4f4a      	ldr	r7, [pc, #296]	; (80222e8 <__strftime+0x490>)
 80221be:	e7dd      	b.n	802217c <__strftime+0x324>
 80221c0:	494e      	ldr	r1, [pc, #312]	; (80222fc <__strftime+0x4a4>)
 80221c2:	4a4f      	ldr	r2, [pc, #316]	; (8022300 <__strftime+0x4a8>)
 80221c4:	68eb      	ldr	r3, [r5, #12]
 80221c6:	2864      	cmp	r0, #100	; 0x64
 80221c8:	bf08      	it	eq
 80221ca:	460a      	moveq	r2, r1
 80221cc:	eba8 0104 	sub.w	r1, r8, r4
 80221d0:	eb09 0004 	add.w	r0, r9, r4
 80221d4:	f001 fe9e 	bl	8023f14 <sniprintf>
 80221d8:	2800      	cmp	r0, #0
 80221da:	f6ff ae6c 	blt.w	8021eb6 <__strftime+0x5e>
 80221de:	4404      	add	r4, r0
 80221e0:	45a0      	cmp	r8, r4
 80221e2:	f63f af3b 	bhi.w	802205c <__strftime+0x204>
 80221e6:	e666      	b.n	8021eb6 <__strftime+0x5e>
 80221e8:	6968      	ldr	r0, [r5, #20]
 80221ea:	692b      	ldr	r3, [r5, #16]
 80221ec:	68ef      	ldr	r7, [r5, #12]
 80221ee:	2800      	cmp	r0, #0
 80221f0:	eb09 0604 	add.w	r6, r9, r4
 80221f4:	eba8 0104 	sub.w	r1, r8, r4
 80221f8:	f103 0301 	add.w	r3, r3, #1
 80221fc:	db0c      	blt.n	8022218 <__strftime+0x3c0>
 80221fe:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8022202:	fb90 f2fc 	sdiv	r2, r0, ip
 8022206:	fb0c 0212 	mls	r2, ip, r2, r0
 802220a:	e9cd 7200 	strd	r7, r2, [sp]
 802220e:	4a3d      	ldr	r2, [pc, #244]	; (8022304 <__strftime+0x4ac>)
 8022210:	4630      	mov	r0, r6
 8022212:	f001 fe7f 	bl	8023f14 <sniprintf>
 8022216:	e7df      	b.n	80221d8 <__strftime+0x380>
 8022218:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802221c:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8022220:	f000 ffe8 	bl	80231f4 <abs>
 8022224:	2264      	movs	r2, #100	; 0x64
 8022226:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 802222a:	fb90 fcf2 	sdiv	ip, r0, r2
 802222e:	fb0c 0212 	mls	r2, ip, r2, r0
 8022232:	e7ea      	b.n	802220a <__strftime+0x3b2>
 8022234:	2325      	movs	r3, #37	; 0x25
 8022236:	f88d 3020 	strb.w	r3, [sp, #32]
 802223a:	b187      	cbz	r7, 802225e <__strftime+0x406>
 802223c:	2e06      	cmp	r6, #6
 802223e:	bf38      	it	cc
 8022240:	2606      	movcc	r6, #6
 8022242:	1fb3      	subs	r3, r6, #6
 8022244:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 8022248:	d10c      	bne.n	8022264 <__strftime+0x40c>
 802224a:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 802224e:	492e      	ldr	r1, [pc, #184]	; (8022308 <__strftime+0x4b0>)
 8022250:	f7ff fd97 	bl	8021d82 <strcpy>
 8022254:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8022256:	9300      	str	r3, [sp, #0]
 8022258:	aa08      	add	r2, sp, #32
 802225a:	462b      	mov	r3, r5
 802225c:	e760      	b.n	8022120 <__strftime+0x2c8>
 802225e:	272b      	movs	r7, #43	; 0x2b
 8022260:	260a      	movs	r6, #10
 8022262:	e7ee      	b.n	8022242 <__strftime+0x3ea>
 8022264:	4a29      	ldr	r2, [pc, #164]	; (802230c <__strftime+0x4b4>)
 8022266:	211e      	movs	r1, #30
 8022268:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 802226c:	f001 fe52 	bl	8023f14 <sniprintf>
 8022270:	2800      	cmp	r0, #0
 8022272:	ddea      	ble.n	802224a <__strftime+0x3f2>
 8022274:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8022278:	4418      	add	r0, r3
 802227a:	e7e8      	b.n	802224e <__strftime+0x3f6>
 802227c:	4628      	mov	r0, r5
 802227e:	f7ff fd89 	bl	8021d94 <iso_year_adjust>
 8022282:	4606      	mov	r6, r0
 8022284:	6968      	ldr	r0, [r5, #20]
 8022286:	2800      	cmp	r0, #0
 8022288:	db11      	blt.n	80222ae <__strftime+0x456>
 802228a:	2264      	movs	r2, #100	; 0x64
 802228c:	fb90 f3f2 	sdiv	r3, r0, r2
 8022290:	fb02 0313 	mls	r3, r2, r3, r0
 8022294:	441e      	add	r6, r3
 8022296:	2364      	movs	r3, #100	; 0x64
 8022298:	fb96 f0f3 	sdiv	r0, r6, r3
 802229c:	fb03 6610 	mls	r6, r3, r0, r6
 80222a0:	441e      	add	r6, r3
 80222a2:	fbb6 f2f3 	udiv	r2, r6, r3
 80222a6:	fb03 6312 	mls	r3, r3, r2, r6
 80222aa:	4a14      	ldr	r2, [pc, #80]	; (80222fc <__strftime+0x4a4>)
 80222ac:	e78e      	b.n	80221cc <__strftime+0x374>
 80222ae:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80222b2:	f000 ff9f 	bl	80231f4 <abs>
 80222b6:	2364      	movs	r3, #100	; 0x64
 80222b8:	2e00      	cmp	r6, #0
 80222ba:	fb90 f2f3 	sdiv	r2, r0, r3
 80222be:	fb02 0313 	mls	r3, r2, r3, r0
 80222c2:	da05      	bge.n	80222d0 <__strftime+0x478>
 80222c4:	6969      	ldr	r1, [r5, #20]
 80222c6:	4a12      	ldr	r2, [pc, #72]	; (8022310 <__strftime+0x4b8>)
 80222c8:	4291      	cmp	r1, r2
 80222ca:	bfb8      	it	lt
 80222cc:	2601      	movlt	r6, #1
 80222ce:	e7e1      	b.n	8022294 <__strftime+0x43c>
 80222d0:	d0e0      	beq.n	8022294 <__strftime+0x43c>
 80222d2:	6969      	ldr	r1, [r5, #20]
 80222d4:	4a03      	ldr	r2, [pc, #12]	; (80222e4 <__strftime+0x48c>)
 80222d6:	4291      	cmp	r1, r2
 80222d8:	bfb8      	it	lt
 80222da:	f04f 36ff 	movlt.w	r6, #4294967295
 80222de:	e7d9      	b.n	8022294 <__strftime+0x43c>
 80222e0:	0802b3a4 	.word	0x0802b3a4
 80222e4:	fffff894 	.word	0xfffff894
 80222e8:	0802b517 	.word	0x0802b517
 80222ec:	0802b22e 	.word	0x0802b22e
 80222f0:	0802b226 	.word	0x0802b226
 80222f4:	0802b21f 	.word	0x0802b21f
 80222f8:	0802b657 	.word	0x0802b657
 80222fc:	0802b23e 	.word	0x0802b23e
 8022300:	0802b230 	.word	0x0802b230
 8022304:	0802b234 	.word	0x0802b234
 8022308:	0802b247 	.word	0x0802b247
 802230c:	0802b243 	.word	0x0802b243
 8022310:	fffff895 	.word	0xfffff895
 8022314:	4bb6      	ldr	r3, [pc, #728]	; (80225f0 <__strftime+0x798>)
 8022316:	6969      	ldr	r1, [r5, #20]
 8022318:	4299      	cmp	r1, r3
 802231a:	bfac      	ite	ge
 802231c:	2300      	movge	r3, #0
 802231e:	2301      	movlt	r3, #1
 8022320:	4628      	mov	r0, r5
 8022322:	e9cd 3105 	strd	r3, r1, [sp, #20]
 8022326:	f7ff fd35 	bl	8021d94 <iso_year_adjust>
 802232a:	9906      	ldr	r1, [sp, #24]
 802232c:	2900      	cmp	r1, #0
 802232e:	4682      	mov	sl, r0
 8022330:	db27      	blt.n	8022382 <__strftime+0x52a>
 8022332:	2264      	movs	r2, #100	; 0x64
 8022334:	fb91 f2f2 	sdiv	r2, r1, r2
 8022338:	3213      	adds	r2, #19
 802233a:	6968      	ldr	r0, [r5, #20]
 802233c:	2800      	cmp	r0, #0
 802233e:	db2b      	blt.n	8022398 <__strftime+0x540>
 8022340:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8022344:	fb90 fefc 	sdiv	lr, r0, ip
 8022348:	fb0c 001e 	mls	r0, ip, lr, r0
 802234c:	f1ba 0f00 	cmp.w	sl, #0
 8022350:	da31      	bge.n	80223b6 <__strftime+0x55e>
 8022352:	6969      	ldr	r1, [r5, #20]
 8022354:	4ba7      	ldr	r3, [pc, #668]	; (80225f4 <__strftime+0x79c>)
 8022356:	4299      	cmp	r1, r3
 8022358:	db38      	blt.n	80223cc <__strftime+0x574>
 802235a:	eb0a 0300 	add.w	r3, sl, r0
 802235e:	1c59      	adds	r1, r3, #1
 8022360:	d139      	bne.n	80223d6 <__strftime+0x57e>
 8022362:	3a01      	subs	r2, #1
 8022364:	2363      	movs	r3, #99	; 0x63
 8022366:	2064      	movs	r0, #100	; 0x64
 8022368:	fb00 3202 	mla	r2, r0, r2, r3
 802236c:	9b05      	ldr	r3, [sp, #20]
 802236e:	2b00      	cmp	r3, #0
 8022370:	d036      	beq.n	80223e0 <__strftime+0x588>
 8022372:	232d      	movs	r3, #45	; 0x2d
 8022374:	f88d 3020 	strb.w	r3, [sp, #32]
 8022378:	b106      	cbz	r6, 802237c <__strftime+0x524>
 802237a:	3e01      	subs	r6, #1
 802237c:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8022380:	e038      	b.n	80223f4 <__strftime+0x59c>
 8022382:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8022386:	9106      	str	r1, [sp, #24]
 8022388:	f000 ff34 	bl	80231f4 <abs>
 802238c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8022390:	9906      	ldr	r1, [sp, #24]
 8022392:	fb90 f2fc 	sdiv	r2, r0, ip
 8022396:	e7d0      	b.n	802233a <__strftime+0x4e2>
 8022398:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802239c:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80223a0:	f000 ff28 	bl	80231f4 <abs>
 80223a4:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80223a8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80223ac:	fb90 fefc 	sdiv	lr, r0, ip
 80223b0:	fb0e 001c 	mls	r0, lr, ip, r0
 80223b4:	e7ca      	b.n	802234c <__strftime+0x4f4>
 80223b6:	d0d0      	beq.n	802235a <__strftime+0x502>
 80223b8:	4b8d      	ldr	r3, [pc, #564]	; (80225f0 <__strftime+0x798>)
 80223ba:	4299      	cmp	r1, r3
 80223bc:	bfb4      	ite	lt
 80223be:	2301      	movlt	r3, #1
 80223c0:	2300      	movge	r3, #0
 80223c2:	9305      	str	r3, [sp, #20]
 80223c4:	bfb8      	it	lt
 80223c6:	f04f 3aff 	movlt.w	sl, #4294967295
 80223ca:	e7c6      	b.n	802235a <__strftime+0x502>
 80223cc:	f04f 0a01 	mov.w	sl, #1
 80223d0:	f8cd a014 	str.w	sl, [sp, #20]
 80223d4:	e7c1      	b.n	802235a <__strftime+0x502>
 80223d6:	2b64      	cmp	r3, #100	; 0x64
 80223d8:	bf04      	itt	eq
 80223da:	3201      	addeq	r2, #1
 80223dc:	2300      	moveq	r3, #0
 80223de:	e7c2      	b.n	8022366 <__strftime+0x50e>
 80223e0:	2f2b      	cmp	r7, #43	; 0x2b
 80223e2:	d106      	bne.n	80223f2 <__strftime+0x59a>
 80223e4:	f242 730f 	movw	r3, #9999	; 0x270f
 80223e8:	429a      	cmp	r2, r3
 80223ea:	d902      	bls.n	80223f2 <__strftime+0x59a>
 80223ec:	f88d 7020 	strb.w	r7, [sp, #32]
 80223f0:	e7c2      	b.n	8022378 <__strftime+0x520>
 80223f2:	ab08      	add	r3, sp, #32
 80223f4:	2125      	movs	r1, #37	; 0x25
 80223f6:	7019      	strb	r1, [r3, #0]
 80223f8:	b94f      	cbnz	r7, 802240e <__strftime+0x5b6>
 80223fa:	1c58      	adds	r0, r3, #1
 80223fc:	497e      	ldr	r1, [pc, #504]	; (80225f8 <__strftime+0x7a0>)
 80223fe:	9205      	str	r2, [sp, #20]
 8022400:	f7ff fcbf 	bl	8021d82 <strcpy>
 8022404:	9a05      	ldr	r2, [sp, #20]
 8022406:	9200      	str	r2, [sp, #0]
 8022408:	4633      	mov	r3, r6
 802240a:	aa08      	add	r2, sp, #32
 802240c:	e059      	b.n	80224c2 <__strftime+0x66a>
 802240e:	2130      	movs	r1, #48	; 0x30
 8022410:	1c98      	adds	r0, r3, #2
 8022412:	7059      	strb	r1, [r3, #1]
 8022414:	e7f2      	b.n	80223fc <__strftime+0x5a4>
 8022416:	4979      	ldr	r1, [pc, #484]	; (80225fc <__strftime+0x7a4>)
 8022418:	4a79      	ldr	r2, [pc, #484]	; (8022600 <__strftime+0x7a8>)
 802241a:	68ab      	ldr	r3, [r5, #8]
 802241c:	286b      	cmp	r0, #107	; 0x6b
 802241e:	bf08      	it	eq
 8022420:	460a      	moveq	r2, r1
 8022422:	e6d3      	b.n	80221cc <__strftime+0x374>
 8022424:	68ab      	ldr	r3, [r5, #8]
 8022426:	b163      	cbz	r3, 8022442 <__strftime+0x5ea>
 8022428:	2b0c      	cmp	r3, #12
 802242a:	d004      	beq.n	8022436 <__strftime+0x5de>
 802242c:	210c      	movs	r1, #12
 802242e:	fb93 f2f1 	sdiv	r2, r3, r1
 8022432:	fb01 3312 	mls	r3, r1, r2, r3
 8022436:	4972      	ldr	r1, [pc, #456]	; (8022600 <__strftime+0x7a8>)
 8022438:	4a70      	ldr	r2, [pc, #448]	; (80225fc <__strftime+0x7a4>)
 802243a:	2849      	cmp	r0, #73	; 0x49
 802243c:	bf08      	it	eq
 802243e:	460a      	moveq	r2, r1
 8022440:	e6c4      	b.n	80221cc <__strftime+0x374>
 8022442:	230c      	movs	r3, #12
 8022444:	e7f7      	b.n	8022436 <__strftime+0x5de>
 8022446:	69eb      	ldr	r3, [r5, #28]
 8022448:	4a6e      	ldr	r2, [pc, #440]	; (8022604 <__strftime+0x7ac>)
 802244a:	3301      	adds	r3, #1
 802244c:	e6be      	b.n	80221cc <__strftime+0x374>
 802244e:	692b      	ldr	r3, [r5, #16]
 8022450:	3301      	adds	r3, #1
 8022452:	e72a      	b.n	80222aa <__strftime+0x452>
 8022454:	686b      	ldr	r3, [r5, #4]
 8022456:	e728      	b.n	80222aa <__strftime+0x452>
 8022458:	f108 33ff 	add.w	r3, r8, #4294967295
 802245c:	42a3      	cmp	r3, r4
 802245e:	f67f ad2a 	bls.w	8021eb6 <__strftime+0x5e>
 8022462:	230a      	movs	r3, #10
 8022464:	f809 3004 	strb.w	r3, [r9, r4]
 8022468:	3401      	adds	r4, #1
 802246a:	e5f7      	b.n	802205c <__strftime+0x204>
 802246c:	68ab      	ldr	r3, [r5, #8]
 802246e:	2b0b      	cmp	r3, #11
 8022470:	bfcc      	ite	gt
 8022472:	22a4      	movgt	r2, #164	; 0xa4
 8022474:	22a0      	movle	r2, #160	; 0xa0
 8022476:	4b64      	ldr	r3, [pc, #400]	; (8022608 <__strftime+0x7b0>)
 8022478:	4413      	add	r3, r2
 802247a:	685e      	ldr	r6, [r3, #4]
 802247c:	4630      	mov	r0, r6
 802247e:	f7dd fedd 	bl	800023c <strlen>
 8022482:	1e72      	subs	r2, r6, #1
 8022484:	4420      	add	r0, r4
 8022486:	f108 36ff 	add.w	r6, r8, #4294967295
 802248a:	42a0      	cmp	r0, r4
 802248c:	f43f ade6 	beq.w	802205c <__strftime+0x204>
 8022490:	42a6      	cmp	r6, r4
 8022492:	f67f ad10 	bls.w	8021eb6 <__strftime+0x5e>
 8022496:	f89b 1000 	ldrb.w	r1, [fp]
 802249a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 802249e:	2950      	cmp	r1, #80	; 0x50
 80224a0:	d107      	bne.n	80224b2 <__strftime+0x65a>
 80224a2:	495a      	ldr	r1, [pc, #360]	; (802260c <__strftime+0x7b4>)
 80224a4:	5cc9      	ldrb	r1, [r1, r3]
 80224a6:	f001 0103 	and.w	r1, r1, #3
 80224aa:	2901      	cmp	r1, #1
 80224ac:	bf08      	it	eq
 80224ae:	3320      	addeq	r3, #32
 80224b0:	b2db      	uxtb	r3, r3
 80224b2:	f809 3004 	strb.w	r3, [r9, r4]
 80224b6:	3401      	adds	r4, #1
 80224b8:	e7e7      	b.n	802248a <__strftime+0x632>
 80224ba:	686b      	ldr	r3, [r5, #4]
 80224bc:	9300      	str	r3, [sp, #0]
 80224be:	4a54      	ldr	r2, [pc, #336]	; (8022610 <__strftime+0x7b8>)
 80224c0:	68ab      	ldr	r3, [r5, #8]
 80224c2:	eba8 0104 	sub.w	r1, r8, r4
 80224c6:	eb09 0004 	add.w	r0, r9, r4
 80224ca:	f001 fd23 	bl	8023f14 <sniprintf>
 80224ce:	e683      	b.n	80221d8 <__strftime+0x380>
 80224d0:	6a2b      	ldr	r3, [r5, #32]
 80224d2:	2b00      	cmp	r3, #0
 80224d4:	db79      	blt.n	80225ca <__strftime+0x772>
 80224d6:	f000 fb91 	bl	8022bfc <__tz_lock>
 80224da:	9b04      	ldr	r3, [sp, #16]
 80224dc:	b90b      	cbnz	r3, 80224e2 <__strftime+0x68a>
 80224de:	f000 fb99 	bl	8022c14 <_tzset_unlocked>
 80224e2:	f000 ff55 	bl	8023390 <__gettzinfo>
 80224e6:	6a2b      	ldr	r3, [r5, #32]
 80224e8:	2b00      	cmp	r3, #0
 80224ea:	bfcc      	ite	gt
 80224ec:	2350      	movgt	r3, #80	; 0x50
 80224ee:	2328      	movle	r3, #40	; 0x28
 80224f0:	58c3      	ldr	r3, [r0, r3]
 80224f2:	f1c3 0a00 	rsb	sl, r3, #0
 80224f6:	f000 fb87 	bl	8022c08 <__tz_unlock>
 80224fa:	2301      	movs	r3, #1
 80224fc:	9304      	str	r3, [sp, #16]
 80224fe:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8022502:	4662      	mov	r2, ip
 8022504:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 8022508:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802250c:	9602      	str	r6, [sp, #8]
 802250e:	f143 36ff 	adc.w	r6, r3, #4294967295
 8022512:	9603      	str	r6, [sp, #12]
 8022514:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8022518:	2e00      	cmp	r6, #0
 802251a:	f177 0600 	sbcs.w	r6, r7, #0
 802251e:	eba8 0104 	sub.w	r1, r8, r4
 8022522:	eb09 0004 	add.w	r0, r9, r4
 8022526:	da05      	bge.n	8022534 <__strftime+0x6dc>
 8022528:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 802252c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8022530:	9602      	str	r6, [sp, #8]
 8022532:	9303      	str	r3, [sp, #12]
 8022534:	9b02      	ldr	r3, [sp, #8]
 8022536:	089e      	lsrs	r6, r3, #2
 8022538:	9b03      	ldr	r3, [sp, #12]
 802253a:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 802253e:	f10c 32ff 	add.w	r2, ip, #4294967295
 8022542:	109f      	asrs	r7, r3, #2
 8022544:	2364      	movs	r3, #100	; 0x64
 8022546:	fb92 f3f3 	sdiv	r3, r2, r3
 802254a:	1af6      	subs	r6, r6, r3
 802254c:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 8022550:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 8022554:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8022558:	fb92 f3f3 	sdiv	r3, r2, r3
 802255c:	18f6      	adds	r6, r6, r3
 802255e:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8022562:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 8022566:	f240 136d 	movw	r3, #365	; 0x16d
 802256a:	fb03 fc0c 	mul.w	ip, r3, ip
 802256e:	69eb      	ldr	r3, [r5, #28]
 8022570:	eb16 060c 	adds.w	r6, r6, ip
 8022574:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 8022578:	18f6      	adds	r6, r6, r3
 802257a:	f04f 0c18 	mov.w	ip, #24
 802257e:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8022582:	fba6 230c 	umull	r2, r3, r6, ip
 8022586:	68ae      	ldr	r6, [r5, #8]
 8022588:	fb0c 3307 	mla	r3, ip, r7, r3
 802258c:	1992      	adds	r2, r2, r6
 802258e:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8022592:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 8022596:	fba2 670c 	umull	r6, r7, r2, ip
 802259a:	fb0c 7703 	mla	r7, ip, r3, r7
 802259e:	686b      	ldr	r3, [r5, #4]
 80225a0:	18f6      	adds	r6, r6, r3
 80225a2:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 80225a6:	fba6 230c 	umull	r2, r3, r6, ip
 80225aa:	682e      	ldr	r6, [r5, #0]
 80225ac:	fb0c 3307 	mla	r3, ip, r7, r3
 80225b0:	1992      	adds	r2, r2, r6
 80225b2:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 80225b6:	ebb2 020a 	subs.w	r2, r2, sl
 80225ba:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 80225be:	e9cd 2300 	strd	r2, r3, [sp]
 80225c2:	4a14      	ldr	r2, [pc, #80]	; (8022614 <__strftime+0x7bc>)
 80225c4:	f001 fca6 	bl	8023f14 <sniprintf>
 80225c8:	e606      	b.n	80221d8 <__strftime+0x380>
 80225ca:	f04f 0a00 	mov.w	sl, #0
 80225ce:	e796      	b.n	80224fe <__strftime+0x6a6>
 80225d0:	682b      	ldr	r3, [r5, #0]
 80225d2:	e66a      	b.n	80222aa <__strftime+0x452>
 80225d4:	f108 33ff 	add.w	r3, r8, #4294967295
 80225d8:	42a3      	cmp	r3, r4
 80225da:	f67f ac6c 	bls.w	8021eb6 <__strftime+0x5e>
 80225de:	2309      	movs	r3, #9
 80225e0:	e740      	b.n	8022464 <__strftime+0x60c>
 80225e2:	682b      	ldr	r3, [r5, #0]
 80225e4:	9301      	str	r3, [sp, #4]
 80225e6:	686b      	ldr	r3, [r5, #4]
 80225e8:	9300      	str	r3, [sp, #0]
 80225ea:	4a0b      	ldr	r2, [pc, #44]	; (8022618 <__strftime+0x7c0>)
 80225ec:	68ab      	ldr	r3, [r5, #8]
 80225ee:	e5e0      	b.n	80221b2 <__strftime+0x35a>
 80225f0:	fffff894 	.word	0xfffff894
 80225f4:	fffff895 	.word	0xfffff895
 80225f8:	0802b24f 	.word	0x0802b24f
 80225fc:	0802b230 	.word	0x0802b230
 8022600:	0802b23e 	.word	0x0802b23e
 8022604:	0802b253 	.word	0x0802b253
 8022608:	0802b3a4 	.word	0x0802b3a4
 802260c:	0802b519 	.word	0x0802b519
 8022610:	0802b262 	.word	0x0802b262
 8022614:	0802b258 	.word	0x0802b258
 8022618:	0802b25d 	.word	0x0802b25d
 802261c:	f108 33ff 	add.w	r3, r8, #4294967295
 8022620:	42a3      	cmp	r3, r4
 8022622:	f67f ac48 	bls.w	8021eb6 <__strftime+0x5e>
 8022626:	69ab      	ldr	r3, [r5, #24]
 8022628:	eb09 0204 	add.w	r2, r9, r4
 802262c:	3401      	adds	r4, #1
 802262e:	b913      	cbnz	r3, 8022636 <__strftime+0x7de>
 8022630:	2337      	movs	r3, #55	; 0x37
 8022632:	7013      	strb	r3, [r2, #0]
 8022634:	e512      	b.n	802205c <__strftime+0x204>
 8022636:	3330      	adds	r3, #48	; 0x30
 8022638:	e7fb      	b.n	8022632 <__strftime+0x7da>
 802263a:	69eb      	ldr	r3, [r5, #28]
 802263c:	69aa      	ldr	r2, [r5, #24]
 802263e:	3307      	adds	r3, #7
 8022640:	1a9b      	subs	r3, r3, r2
 8022642:	2207      	movs	r2, #7
 8022644:	fb93 f3f2 	sdiv	r3, r3, r2
 8022648:	e62f      	b.n	80222aa <__strftime+0x452>
 802264a:	4628      	mov	r0, r5
 802264c:	f7ff fba2 	bl	8021d94 <iso_year_adjust>
 8022650:	69aa      	ldr	r2, [r5, #24]
 8022652:	b132      	cbz	r2, 8022662 <__strftime+0x80a>
 8022654:	3a01      	subs	r2, #1
 8022656:	2800      	cmp	r0, #0
 8022658:	dc28      	bgt.n	80226ac <__strftime+0x854>
 802265a:	69eb      	ldr	r3, [r5, #28]
 802265c:	d103      	bne.n	8022666 <__strftime+0x80e>
 802265e:	330a      	adds	r3, #10
 8022660:	e7ee      	b.n	8022640 <__strftime+0x7e8>
 8022662:	2206      	movs	r2, #6
 8022664:	e7f7      	b.n	8022656 <__strftime+0x7fe>
 8022666:	6968      	ldr	r0, [r5, #20]
 8022668:	2800      	cmp	r0, #0
 802266a:	eba2 0303 	sub.w	r3, r2, r3
 802266e:	f240 726b 	movw	r2, #1899	; 0x76b
 8022672:	bfa8      	it	ge
 8022674:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 8022678:	4410      	add	r0, r2
 802267a:	0782      	lsls	r2, r0, #30
 802267c:	d105      	bne.n	802268a <__strftime+0x832>
 802267e:	2264      	movs	r2, #100	; 0x64
 8022680:	fb90 f1f2 	sdiv	r1, r0, r2
 8022684:	fb02 0111 	mls	r1, r2, r1, r0
 8022688:	b971      	cbnz	r1, 80226a8 <__strftime+0x850>
 802268a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 802268e:	fb90 f2f1 	sdiv	r2, r0, r1
 8022692:	fb01 0212 	mls	r2, r1, r2, r0
 8022696:	fab2 f282 	clz	r2, r2
 802269a:	0952      	lsrs	r2, r2, #5
 802269c:	1a9a      	subs	r2, r3, r2
 802269e:	2a05      	cmp	r2, #5
 80226a0:	bfb4      	ite	lt
 80226a2:	2335      	movlt	r3, #53	; 0x35
 80226a4:	2334      	movge	r3, #52	; 0x34
 80226a6:	e600      	b.n	80222aa <__strftime+0x452>
 80226a8:	2201      	movs	r2, #1
 80226aa:	e7f7      	b.n	802269c <__strftime+0x844>
 80226ac:	2301      	movs	r3, #1
 80226ae:	e5fc      	b.n	80222aa <__strftime+0x452>
 80226b0:	f108 33ff 	add.w	r3, r8, #4294967295
 80226b4:	42a3      	cmp	r3, r4
 80226b6:	f67f abfe 	bls.w	8021eb6 <__strftime+0x5e>
 80226ba:	69ab      	ldr	r3, [r5, #24]
 80226bc:	3330      	adds	r3, #48	; 0x30
 80226be:	e6d1      	b.n	8022464 <__strftime+0x60c>
 80226c0:	69ab      	ldr	r3, [r5, #24]
 80226c2:	b13b      	cbz	r3, 80226d4 <__strftime+0x87c>
 80226c4:	3b01      	subs	r3, #1
 80226c6:	69ea      	ldr	r2, [r5, #28]
 80226c8:	3207      	adds	r2, #7
 80226ca:	1ad2      	subs	r2, r2, r3
 80226cc:	2307      	movs	r3, #7
 80226ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80226d2:	e5ea      	b.n	80222aa <__strftime+0x452>
 80226d4:	2306      	movs	r3, #6
 80226d6:	e7f6      	b.n	80226c6 <__strftime+0x86e>
 80226d8:	6968      	ldr	r0, [r5, #20]
 80226da:	2800      	cmp	r0, #0
 80226dc:	db05      	blt.n	80226ea <__strftime+0x892>
 80226de:	2264      	movs	r2, #100	; 0x64
 80226e0:	fb90 f3f2 	sdiv	r3, r0, r2
 80226e4:	fb03 0312 	mls	r3, r3, r2, r0
 80226e8:	e5df      	b.n	80222aa <__strftime+0x452>
 80226ea:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80226ee:	f000 fd81 	bl	80231f4 <abs>
 80226f2:	e7f4      	b.n	80226de <__strftime+0x886>
 80226f4:	696b      	ldr	r3, [r5, #20]
 80226f6:	4a4c      	ldr	r2, [pc, #304]	; (8022828 <__strftime+0x9d0>)
 80226f8:	4293      	cmp	r3, r2
 80226fa:	da09      	bge.n	8022710 <__strftime+0x8b8>
 80226fc:	212d      	movs	r1, #45	; 0x2d
 80226fe:	f88d 1020 	strb.w	r1, [sp, #32]
 8022702:	eba2 0a03 	sub.w	sl, r2, r3
 8022706:	b106      	cbz	r6, 802270a <__strftime+0x8b2>
 8022708:	3e01      	subs	r6, #1
 802270a:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 802270e:	e00b      	b.n	8022728 <__strftime+0x8d0>
 8022710:	2f2b      	cmp	r7, #43	; 0x2b
 8022712:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 8022716:	d106      	bne.n	8022726 <__strftime+0x8ce>
 8022718:	f242 730f 	movw	r3, #9999	; 0x270f
 802271c:	459a      	cmp	sl, r3
 802271e:	d902      	bls.n	8022726 <__strftime+0x8ce>
 8022720:	f88d 7020 	strb.w	r7, [sp, #32]
 8022724:	e7ef      	b.n	8022706 <__strftime+0x8ae>
 8022726:	ab08      	add	r3, sp, #32
 8022728:	2225      	movs	r2, #37	; 0x25
 802272a:	701a      	strb	r2, [r3, #0]
 802272c:	b937      	cbnz	r7, 802273c <__strftime+0x8e4>
 802272e:	1c58      	adds	r0, r3, #1
 8022730:	493e      	ldr	r1, [pc, #248]	; (802282c <__strftime+0x9d4>)
 8022732:	f7ff fb26 	bl	8021d82 <strcpy>
 8022736:	f8cd a000 	str.w	sl, [sp]
 802273a:	e665      	b.n	8022408 <__strftime+0x5b0>
 802273c:	2230      	movs	r2, #48	; 0x30
 802273e:	1c98      	adds	r0, r3, #2
 8022740:	705a      	strb	r2, [r3, #1]
 8022742:	e7f5      	b.n	8022730 <__strftime+0x8d8>
 8022744:	6a2b      	ldr	r3, [r5, #32]
 8022746:	2b00      	cmp	r3, #0
 8022748:	f6ff ac88 	blt.w	802205c <__strftime+0x204>
 802274c:	f000 fa56 	bl	8022bfc <__tz_lock>
 8022750:	9b04      	ldr	r3, [sp, #16]
 8022752:	b90b      	cbnz	r3, 8022758 <__strftime+0x900>
 8022754:	f000 fa5e 	bl	8022c14 <_tzset_unlocked>
 8022758:	f000 fe1a 	bl	8023390 <__gettzinfo>
 802275c:	6a2b      	ldr	r3, [r5, #32]
 802275e:	2b00      	cmp	r3, #0
 8022760:	bfcc      	ite	gt
 8022762:	2350      	movgt	r3, #80	; 0x50
 8022764:	2328      	movle	r3, #40	; 0x28
 8022766:	eb09 0704 	add.w	r7, r9, r4
 802276a:	58c6      	ldr	r6, [r0, r3]
 802276c:	f000 fa4c 	bl	8022c08 <__tz_unlock>
 8022770:	4276      	negs	r6, r6
 8022772:	233c      	movs	r3, #60	; 0x3c
 8022774:	fb96 f0f3 	sdiv	r0, r6, r3
 8022778:	f000 fece 	bl	8023518 <labs>
 802277c:	233c      	movs	r3, #60	; 0x3c
 802277e:	eba8 0a04 	sub.w	sl, r8, r4
 8022782:	fb90 f2f3 	sdiv	r2, r0, r3
 8022786:	fb02 0013 	mls	r0, r2, r3, r0
 802278a:	9000      	str	r0, [sp, #0]
 802278c:	4a28      	ldr	r2, [pc, #160]	; (8022830 <__strftime+0x9d8>)
 802278e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8022792:	4651      	mov	r1, sl
 8022794:	4638      	mov	r0, r7
 8022796:	fb96 f3f3 	sdiv	r3, r6, r3
 802279a:	f001 fbbb 	bl	8023f14 <sniprintf>
 802279e:	2800      	cmp	r0, #0
 80227a0:	f6ff ab89 	blt.w	8021eb6 <__strftime+0x5e>
 80227a4:	4404      	add	r4, r0
 80227a6:	45a0      	cmp	r8, r4
 80227a8:	f67f ab85 	bls.w	8021eb6 <__strftime+0x5e>
 80227ac:	2301      	movs	r3, #1
 80227ae:	9304      	str	r3, [sp, #16]
 80227b0:	e454      	b.n	802205c <__strftime+0x204>
 80227b2:	6a2b      	ldr	r3, [r5, #32]
 80227b4:	2b00      	cmp	r3, #0
 80227b6:	f6ff ac51 	blt.w	802205c <__strftime+0x204>
 80227ba:	f000 fa1f 	bl	8022bfc <__tz_lock>
 80227be:	9b04      	ldr	r3, [sp, #16]
 80227c0:	b90b      	cbnz	r3, 80227c6 <__strftime+0x96e>
 80227c2:	f000 fa27 	bl	8022c14 <_tzset_unlocked>
 80227c6:	6a2b      	ldr	r3, [r5, #32]
 80227c8:	4a1a      	ldr	r2, [pc, #104]	; (8022834 <__strftime+0x9dc>)
 80227ca:	2b00      	cmp	r3, #0
 80227cc:	bfd4      	ite	le
 80227ce:	2300      	movle	r3, #0
 80227d0:	2301      	movgt	r3, #1
 80227d2:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80227d6:	4630      	mov	r0, r6
 80227d8:	f7dd fd30 	bl	800023c <strlen>
 80227dc:	3e01      	subs	r6, #1
 80227de:	4420      	add	r0, r4
 80227e0:	f108 33ff 	add.w	r3, r8, #4294967295
 80227e4:	42a0      	cmp	r0, r4
 80227e6:	d102      	bne.n	80227ee <__strftime+0x996>
 80227e8:	f000 fa0e 	bl	8022c08 <__tz_unlock>
 80227ec:	e7de      	b.n	80227ac <__strftime+0x954>
 80227ee:	42a3      	cmp	r3, r4
 80227f0:	d905      	bls.n	80227fe <__strftime+0x9a6>
 80227f2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 80227f6:	f809 2004 	strb.w	r2, [r9, r4]
 80227fa:	3401      	adds	r4, #1
 80227fc:	e7f2      	b.n	80227e4 <__strftime+0x98c>
 80227fe:	f000 fa03 	bl	8022c08 <__tz_unlock>
 8022802:	f7ff bb58 	b.w	8021eb6 <__strftime+0x5e>
 8022806:	f108 33ff 	add.w	r3, r8, #4294967295
 802280a:	42a3      	cmp	r3, r4
 802280c:	f67f ab53 	bls.w	8021eb6 <__strftime+0x5e>
 8022810:	2325      	movs	r3, #37	; 0x25
 8022812:	e627      	b.n	8022464 <__strftime+0x60c>
 8022814:	f1b8 0f00 	cmp.w	r8, #0
 8022818:	d002      	beq.n	8022820 <__strftime+0x9c8>
 802281a:	2300      	movs	r3, #0
 802281c:	f809 3004 	strb.w	r3, [r9, r4]
 8022820:	4620      	mov	r0, r4
 8022822:	b011      	add	sp, #68	; 0x44
 8022824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022828:	fffff894 	.word	0xfffff894
 802282c:	0802b24f 	.word	0x0802b24f
 8022830:	0802b26c 	.word	0x0802b26c
 8022834:	2000016c 	.word	0x2000016c

08022838 <strftime>:
 8022838:	b513      	push	{r0, r1, r4, lr}
 802283a:	4c03      	ldr	r4, [pc, #12]	; (8022848 <strftime+0x10>)
 802283c:	9400      	str	r4, [sp, #0]
 802283e:	f7ff fb0b 	bl	8021e58 <__strftime>
 8022842:	b002      	add	sp, #8
 8022844:	bd10      	pop	{r4, pc}
 8022846:	bf00      	nop
 8022848:	200001d0 	.word	0x200001d0

0802284c <strstr>:
 802284c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802284e:	780c      	ldrb	r4, [r1, #0]
 8022850:	b164      	cbz	r4, 802286c <strstr+0x20>
 8022852:	4603      	mov	r3, r0
 8022854:	781a      	ldrb	r2, [r3, #0]
 8022856:	4618      	mov	r0, r3
 8022858:	1c5e      	adds	r6, r3, #1
 802285a:	b90a      	cbnz	r2, 8022860 <strstr+0x14>
 802285c:	4610      	mov	r0, r2
 802285e:	e005      	b.n	802286c <strstr+0x20>
 8022860:	4294      	cmp	r4, r2
 8022862:	d108      	bne.n	8022876 <strstr+0x2a>
 8022864:	460d      	mov	r5, r1
 8022866:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 802286a:	b902      	cbnz	r2, 802286e <strstr+0x22>
 802286c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802286e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8022872:	4297      	cmp	r7, r2
 8022874:	d0f7      	beq.n	8022866 <strstr+0x1a>
 8022876:	4633      	mov	r3, r6
 8022878:	e7ec      	b.n	8022854 <strstr+0x8>
	...

0802287c <_strtol_l.isra.0>:
 802287c:	2b01      	cmp	r3, #1
 802287e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022882:	d001      	beq.n	8022888 <_strtol_l.isra.0+0xc>
 8022884:	2b24      	cmp	r3, #36	; 0x24
 8022886:	d906      	bls.n	8022896 <_strtol_l.isra.0+0x1a>
 8022888:	f7fe fa84 	bl	8020d94 <__errno>
 802288c:	2316      	movs	r3, #22
 802288e:	6003      	str	r3, [r0, #0]
 8022890:	2000      	movs	r0, #0
 8022892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022896:	4f3a      	ldr	r7, [pc, #232]	; (8022980 <_strtol_l.isra.0+0x104>)
 8022898:	468e      	mov	lr, r1
 802289a:	4676      	mov	r6, lr
 802289c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80228a0:	5de5      	ldrb	r5, [r4, r7]
 80228a2:	f015 0508 	ands.w	r5, r5, #8
 80228a6:	d1f8      	bne.n	802289a <_strtol_l.isra.0+0x1e>
 80228a8:	2c2d      	cmp	r4, #45	; 0x2d
 80228aa:	d134      	bne.n	8022916 <_strtol_l.isra.0+0x9a>
 80228ac:	f89e 4000 	ldrb.w	r4, [lr]
 80228b0:	f04f 0801 	mov.w	r8, #1
 80228b4:	f106 0e02 	add.w	lr, r6, #2
 80228b8:	2b00      	cmp	r3, #0
 80228ba:	d05c      	beq.n	8022976 <_strtol_l.isra.0+0xfa>
 80228bc:	2b10      	cmp	r3, #16
 80228be:	d10c      	bne.n	80228da <_strtol_l.isra.0+0x5e>
 80228c0:	2c30      	cmp	r4, #48	; 0x30
 80228c2:	d10a      	bne.n	80228da <_strtol_l.isra.0+0x5e>
 80228c4:	f89e 4000 	ldrb.w	r4, [lr]
 80228c8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80228cc:	2c58      	cmp	r4, #88	; 0x58
 80228ce:	d14d      	bne.n	802296c <_strtol_l.isra.0+0xf0>
 80228d0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80228d4:	2310      	movs	r3, #16
 80228d6:	f10e 0e02 	add.w	lr, lr, #2
 80228da:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80228de:	f10c 3cff 	add.w	ip, ip, #4294967295
 80228e2:	2600      	movs	r6, #0
 80228e4:	fbbc f9f3 	udiv	r9, ip, r3
 80228e8:	4635      	mov	r5, r6
 80228ea:	fb03 ca19 	mls	sl, r3, r9, ip
 80228ee:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80228f2:	2f09      	cmp	r7, #9
 80228f4:	d818      	bhi.n	8022928 <_strtol_l.isra.0+0xac>
 80228f6:	463c      	mov	r4, r7
 80228f8:	42a3      	cmp	r3, r4
 80228fa:	dd24      	ble.n	8022946 <_strtol_l.isra.0+0xca>
 80228fc:	2e00      	cmp	r6, #0
 80228fe:	db1f      	blt.n	8022940 <_strtol_l.isra.0+0xc4>
 8022900:	45a9      	cmp	r9, r5
 8022902:	d31d      	bcc.n	8022940 <_strtol_l.isra.0+0xc4>
 8022904:	d101      	bne.n	802290a <_strtol_l.isra.0+0x8e>
 8022906:	45a2      	cmp	sl, r4
 8022908:	db1a      	blt.n	8022940 <_strtol_l.isra.0+0xc4>
 802290a:	fb05 4503 	mla	r5, r5, r3, r4
 802290e:	2601      	movs	r6, #1
 8022910:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8022914:	e7eb      	b.n	80228ee <_strtol_l.isra.0+0x72>
 8022916:	2c2b      	cmp	r4, #43	; 0x2b
 8022918:	bf08      	it	eq
 802291a:	f89e 4000 	ldrbeq.w	r4, [lr]
 802291e:	46a8      	mov	r8, r5
 8022920:	bf08      	it	eq
 8022922:	f106 0e02 	addeq.w	lr, r6, #2
 8022926:	e7c7      	b.n	80228b8 <_strtol_l.isra.0+0x3c>
 8022928:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 802292c:	2f19      	cmp	r7, #25
 802292e:	d801      	bhi.n	8022934 <_strtol_l.isra.0+0xb8>
 8022930:	3c37      	subs	r4, #55	; 0x37
 8022932:	e7e1      	b.n	80228f8 <_strtol_l.isra.0+0x7c>
 8022934:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8022938:	2f19      	cmp	r7, #25
 802293a:	d804      	bhi.n	8022946 <_strtol_l.isra.0+0xca>
 802293c:	3c57      	subs	r4, #87	; 0x57
 802293e:	e7db      	b.n	80228f8 <_strtol_l.isra.0+0x7c>
 8022940:	f04f 36ff 	mov.w	r6, #4294967295
 8022944:	e7e4      	b.n	8022910 <_strtol_l.isra.0+0x94>
 8022946:	2e00      	cmp	r6, #0
 8022948:	da05      	bge.n	8022956 <_strtol_l.isra.0+0xda>
 802294a:	2322      	movs	r3, #34	; 0x22
 802294c:	6003      	str	r3, [r0, #0]
 802294e:	4665      	mov	r5, ip
 8022950:	b942      	cbnz	r2, 8022964 <_strtol_l.isra.0+0xe8>
 8022952:	4628      	mov	r0, r5
 8022954:	e79d      	b.n	8022892 <_strtol_l.isra.0+0x16>
 8022956:	f1b8 0f00 	cmp.w	r8, #0
 802295a:	d000      	beq.n	802295e <_strtol_l.isra.0+0xe2>
 802295c:	426d      	negs	r5, r5
 802295e:	2a00      	cmp	r2, #0
 8022960:	d0f7      	beq.n	8022952 <_strtol_l.isra.0+0xd6>
 8022962:	b10e      	cbz	r6, 8022968 <_strtol_l.isra.0+0xec>
 8022964:	f10e 31ff 	add.w	r1, lr, #4294967295
 8022968:	6011      	str	r1, [r2, #0]
 802296a:	e7f2      	b.n	8022952 <_strtol_l.isra.0+0xd6>
 802296c:	2430      	movs	r4, #48	; 0x30
 802296e:	2b00      	cmp	r3, #0
 8022970:	d1b3      	bne.n	80228da <_strtol_l.isra.0+0x5e>
 8022972:	2308      	movs	r3, #8
 8022974:	e7b1      	b.n	80228da <_strtol_l.isra.0+0x5e>
 8022976:	2c30      	cmp	r4, #48	; 0x30
 8022978:	d0a4      	beq.n	80228c4 <_strtol_l.isra.0+0x48>
 802297a:	230a      	movs	r3, #10
 802297c:	e7ad      	b.n	80228da <_strtol_l.isra.0+0x5e>
 802297e:	bf00      	nop
 8022980:	0802b519 	.word	0x0802b519

08022984 <_strtol_r>:
 8022984:	f7ff bf7a 	b.w	802287c <_strtol_l.isra.0>

08022988 <strtol>:
 8022988:	4613      	mov	r3, r2
 802298a:	460a      	mov	r2, r1
 802298c:	4601      	mov	r1, r0
 802298e:	4802      	ldr	r0, [pc, #8]	; (8022998 <strtol+0x10>)
 8022990:	6800      	ldr	r0, [r0, #0]
 8022992:	f7ff bf73 	b.w	802287c <_strtol_l.isra.0>
 8022996:	bf00      	nop
 8022998:	20000108 	.word	0x20000108

0802299c <_strtoul_l.isra.0>:
 802299c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80229a0:	4e3b      	ldr	r6, [pc, #236]	; (8022a90 <_strtoul_l.isra.0+0xf4>)
 80229a2:	4686      	mov	lr, r0
 80229a4:	468c      	mov	ip, r1
 80229a6:	4660      	mov	r0, ip
 80229a8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80229ac:	5da5      	ldrb	r5, [r4, r6]
 80229ae:	f015 0508 	ands.w	r5, r5, #8
 80229b2:	d1f8      	bne.n	80229a6 <_strtoul_l.isra.0+0xa>
 80229b4:	2c2d      	cmp	r4, #45	; 0x2d
 80229b6:	d134      	bne.n	8022a22 <_strtoul_l.isra.0+0x86>
 80229b8:	f89c 4000 	ldrb.w	r4, [ip]
 80229bc:	f04f 0801 	mov.w	r8, #1
 80229c0:	f100 0c02 	add.w	ip, r0, #2
 80229c4:	2b00      	cmp	r3, #0
 80229c6:	d05e      	beq.n	8022a86 <_strtoul_l.isra.0+0xea>
 80229c8:	2b10      	cmp	r3, #16
 80229ca:	d10c      	bne.n	80229e6 <_strtoul_l.isra.0+0x4a>
 80229cc:	2c30      	cmp	r4, #48	; 0x30
 80229ce:	d10a      	bne.n	80229e6 <_strtoul_l.isra.0+0x4a>
 80229d0:	f89c 0000 	ldrb.w	r0, [ip]
 80229d4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80229d8:	2858      	cmp	r0, #88	; 0x58
 80229da:	d14f      	bne.n	8022a7c <_strtoul_l.isra.0+0xe0>
 80229dc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80229e0:	2310      	movs	r3, #16
 80229e2:	f10c 0c02 	add.w	ip, ip, #2
 80229e6:	f04f 37ff 	mov.w	r7, #4294967295
 80229ea:	2500      	movs	r5, #0
 80229ec:	fbb7 f7f3 	udiv	r7, r7, r3
 80229f0:	fb03 f907 	mul.w	r9, r3, r7
 80229f4:	ea6f 0909 	mvn.w	r9, r9
 80229f8:	4628      	mov	r0, r5
 80229fa:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80229fe:	2e09      	cmp	r6, #9
 8022a00:	d818      	bhi.n	8022a34 <_strtoul_l.isra.0+0x98>
 8022a02:	4634      	mov	r4, r6
 8022a04:	42a3      	cmp	r3, r4
 8022a06:	dd24      	ble.n	8022a52 <_strtoul_l.isra.0+0xb6>
 8022a08:	2d00      	cmp	r5, #0
 8022a0a:	db1f      	blt.n	8022a4c <_strtoul_l.isra.0+0xb0>
 8022a0c:	4287      	cmp	r7, r0
 8022a0e:	d31d      	bcc.n	8022a4c <_strtoul_l.isra.0+0xb0>
 8022a10:	d101      	bne.n	8022a16 <_strtoul_l.isra.0+0x7a>
 8022a12:	45a1      	cmp	r9, r4
 8022a14:	db1a      	blt.n	8022a4c <_strtoul_l.isra.0+0xb0>
 8022a16:	fb00 4003 	mla	r0, r0, r3, r4
 8022a1a:	2501      	movs	r5, #1
 8022a1c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8022a20:	e7eb      	b.n	80229fa <_strtoul_l.isra.0+0x5e>
 8022a22:	2c2b      	cmp	r4, #43	; 0x2b
 8022a24:	bf08      	it	eq
 8022a26:	f89c 4000 	ldrbeq.w	r4, [ip]
 8022a2a:	46a8      	mov	r8, r5
 8022a2c:	bf08      	it	eq
 8022a2e:	f100 0c02 	addeq.w	ip, r0, #2
 8022a32:	e7c7      	b.n	80229c4 <_strtoul_l.isra.0+0x28>
 8022a34:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8022a38:	2e19      	cmp	r6, #25
 8022a3a:	d801      	bhi.n	8022a40 <_strtoul_l.isra.0+0xa4>
 8022a3c:	3c37      	subs	r4, #55	; 0x37
 8022a3e:	e7e1      	b.n	8022a04 <_strtoul_l.isra.0+0x68>
 8022a40:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8022a44:	2e19      	cmp	r6, #25
 8022a46:	d804      	bhi.n	8022a52 <_strtoul_l.isra.0+0xb6>
 8022a48:	3c57      	subs	r4, #87	; 0x57
 8022a4a:	e7db      	b.n	8022a04 <_strtoul_l.isra.0+0x68>
 8022a4c:	f04f 35ff 	mov.w	r5, #4294967295
 8022a50:	e7e4      	b.n	8022a1c <_strtoul_l.isra.0+0x80>
 8022a52:	2d00      	cmp	r5, #0
 8022a54:	da07      	bge.n	8022a66 <_strtoul_l.isra.0+0xca>
 8022a56:	2322      	movs	r3, #34	; 0x22
 8022a58:	f8ce 3000 	str.w	r3, [lr]
 8022a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8022a60:	b942      	cbnz	r2, 8022a74 <_strtoul_l.isra.0+0xd8>
 8022a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022a66:	f1b8 0f00 	cmp.w	r8, #0
 8022a6a:	d000      	beq.n	8022a6e <_strtoul_l.isra.0+0xd2>
 8022a6c:	4240      	negs	r0, r0
 8022a6e:	2a00      	cmp	r2, #0
 8022a70:	d0f7      	beq.n	8022a62 <_strtoul_l.isra.0+0xc6>
 8022a72:	b10d      	cbz	r5, 8022a78 <_strtoul_l.isra.0+0xdc>
 8022a74:	f10c 31ff 	add.w	r1, ip, #4294967295
 8022a78:	6011      	str	r1, [r2, #0]
 8022a7a:	e7f2      	b.n	8022a62 <_strtoul_l.isra.0+0xc6>
 8022a7c:	2430      	movs	r4, #48	; 0x30
 8022a7e:	2b00      	cmp	r3, #0
 8022a80:	d1b1      	bne.n	80229e6 <_strtoul_l.isra.0+0x4a>
 8022a82:	2308      	movs	r3, #8
 8022a84:	e7af      	b.n	80229e6 <_strtoul_l.isra.0+0x4a>
 8022a86:	2c30      	cmp	r4, #48	; 0x30
 8022a88:	d0a2      	beq.n	80229d0 <_strtoul_l.isra.0+0x34>
 8022a8a:	230a      	movs	r3, #10
 8022a8c:	e7ab      	b.n	80229e6 <_strtoul_l.isra.0+0x4a>
 8022a8e:	bf00      	nop
 8022a90:	0802b519 	.word	0x0802b519

08022a94 <_strtoul_r>:
 8022a94:	f7ff bf82 	b.w	802299c <_strtoul_l.isra.0>

08022a98 <strtoul>:
 8022a98:	4613      	mov	r3, r2
 8022a9a:	460a      	mov	r2, r1
 8022a9c:	4601      	mov	r1, r0
 8022a9e:	4802      	ldr	r0, [pc, #8]	; (8022aa8 <strtoul+0x10>)
 8022aa0:	6800      	ldr	r0, [r0, #0]
 8022aa2:	f7ff bf7b 	b.w	802299c <_strtoul_l.isra.0>
 8022aa6:	bf00      	nop
 8022aa8:	20000108 	.word	0x20000108

08022aac <__tzcalc_limits>:
 8022aac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ab0:	4680      	mov	r8, r0
 8022ab2:	f000 fc6d 	bl	8023390 <__gettzinfo>
 8022ab6:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8022aba:	4598      	cmp	r8, r3
 8022abc:	f340 8098 	ble.w	8022bf0 <__tzcalc_limits+0x144>
 8022ac0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8022ac4:	4443      	add	r3, r8
 8022ac6:	109b      	asrs	r3, r3, #2
 8022ac8:	f240 126d 	movw	r2, #365	; 0x16d
 8022acc:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8022ad0:	fb02 3505 	mla	r5, r2, r5, r3
 8022ad4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8022ad8:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8022adc:	fb93 f3f2 	sdiv	r3, r3, r2
 8022ae0:	441d      	add	r5, r3
 8022ae2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8022ae6:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8022aea:	fb98 f7f3 	sdiv	r7, r8, r3
 8022aee:	fb03 8717 	mls	r7, r3, r7, r8
 8022af2:	4442      	add	r2, r8
 8022af4:	fab7 fc87 	clz	ip, r7
 8022af8:	fbb2 f2f3 	udiv	r2, r2, r3
 8022afc:	f008 0303 	and.w	r3, r8, #3
 8022b00:	4415      	add	r5, r2
 8022b02:	2264      	movs	r2, #100	; 0x64
 8022b04:	f8c0 8004 	str.w	r8, [r0, #4]
 8022b08:	fb98 f6f2 	sdiv	r6, r8, r2
 8022b0c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8022b10:	fb02 8616 	mls	r6, r2, r6, r8
 8022b14:	4604      	mov	r4, r0
 8022b16:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8022b1a:	9300      	str	r3, [sp, #0]
 8022b1c:	f04f 0e07 	mov.w	lr, #7
 8022b20:	7a22      	ldrb	r2, [r4, #8]
 8022b22:	6963      	ldr	r3, [r4, #20]
 8022b24:	2a4a      	cmp	r2, #74	; 0x4a
 8022b26:	d128      	bne.n	8022b7a <__tzcalc_limits+0xce>
 8022b28:	9900      	ldr	r1, [sp, #0]
 8022b2a:	18ea      	adds	r2, r5, r3
 8022b2c:	b901      	cbnz	r1, 8022b30 <__tzcalc_limits+0x84>
 8022b2e:	b906      	cbnz	r6, 8022b32 <__tzcalc_limits+0x86>
 8022b30:	bb0f      	cbnz	r7, 8022b76 <__tzcalc_limits+0xca>
 8022b32:	2b3b      	cmp	r3, #59	; 0x3b
 8022b34:	bfd4      	ite	le
 8022b36:	2300      	movle	r3, #0
 8022b38:	2301      	movgt	r3, #1
 8022b3a:	4413      	add	r3, r2
 8022b3c:	1e5a      	subs	r2, r3, #1
 8022b3e:	69a3      	ldr	r3, [r4, #24]
 8022b40:	492c      	ldr	r1, [pc, #176]	; (8022bf4 <__tzcalc_limits+0x148>)
 8022b42:	fb01 3202 	mla	r2, r1, r2, r3
 8022b46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8022b48:	4413      	add	r3, r2
 8022b4a:	461a      	mov	r2, r3
 8022b4c:	17db      	asrs	r3, r3, #31
 8022b4e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8022b52:	3428      	adds	r4, #40	; 0x28
 8022b54:	45a3      	cmp	fp, r4
 8022b56:	d1e3      	bne.n	8022b20 <__tzcalc_limits+0x74>
 8022b58:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8022b5c:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8022b60:	4294      	cmp	r4, r2
 8022b62:	eb75 0303 	sbcs.w	r3, r5, r3
 8022b66:	bfb4      	ite	lt
 8022b68:	2301      	movlt	r3, #1
 8022b6a:	2300      	movge	r3, #0
 8022b6c:	6003      	str	r3, [r0, #0]
 8022b6e:	2001      	movs	r0, #1
 8022b70:	b003      	add	sp, #12
 8022b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b76:	2300      	movs	r3, #0
 8022b78:	e7df      	b.n	8022b3a <__tzcalc_limits+0x8e>
 8022b7a:	2a44      	cmp	r2, #68	; 0x44
 8022b7c:	d101      	bne.n	8022b82 <__tzcalc_limits+0xd6>
 8022b7e:	18ea      	adds	r2, r5, r3
 8022b80:	e7dd      	b.n	8022b3e <__tzcalc_limits+0x92>
 8022b82:	9a00      	ldr	r2, [sp, #0]
 8022b84:	bb72      	cbnz	r2, 8022be4 <__tzcalc_limits+0x138>
 8022b86:	2e00      	cmp	r6, #0
 8022b88:	bf0c      	ite	eq
 8022b8a:	46e0      	moveq	r8, ip
 8022b8c:	f04f 0801 	movne.w	r8, #1
 8022b90:	4919      	ldr	r1, [pc, #100]	; (8022bf8 <__tzcalc_limits+0x14c>)
 8022b92:	68e2      	ldr	r2, [r4, #12]
 8022b94:	9201      	str	r2, [sp, #4]
 8022b96:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8022b9a:	fb0a 1808 	mla	r8, sl, r8, r1
 8022b9e:	462a      	mov	r2, r5
 8022ba0:	f04f 0900 	mov.w	r9, #0
 8022ba4:	f1a8 0804 	sub.w	r8, r8, #4
 8022ba8:	9901      	ldr	r1, [sp, #4]
 8022baa:	f109 0901 	add.w	r9, r9, #1
 8022bae:	4549      	cmp	r1, r9
 8022bb0:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 8022bb4:	dc18      	bgt.n	8022be8 <__tzcalc_limits+0x13c>
 8022bb6:	f102 0804 	add.w	r8, r2, #4
 8022bba:	fb98 f9fe 	sdiv	r9, r8, lr
 8022bbe:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8022bc2:	eba8 0909 	sub.w	r9, r8, r9
 8022bc6:	ebb3 0909 	subs.w	r9, r3, r9
 8022bca:	6923      	ldr	r3, [r4, #16]
 8022bcc:	f103 33ff 	add.w	r3, r3, #4294967295
 8022bd0:	bf48      	it	mi
 8022bd2:	f109 0907 	addmi.w	r9, r9, #7
 8022bd6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8022bda:	444b      	add	r3, r9
 8022bdc:	4553      	cmp	r3, sl
 8022bde:	da05      	bge.n	8022bec <__tzcalc_limits+0x140>
 8022be0:	441a      	add	r2, r3
 8022be2:	e7ac      	b.n	8022b3e <__tzcalc_limits+0x92>
 8022be4:	46e0      	mov	r8, ip
 8022be6:	e7d3      	b.n	8022b90 <__tzcalc_limits+0xe4>
 8022be8:	4452      	add	r2, sl
 8022bea:	e7dd      	b.n	8022ba8 <__tzcalc_limits+0xfc>
 8022bec:	3b07      	subs	r3, #7
 8022bee:	e7f5      	b.n	8022bdc <__tzcalc_limits+0x130>
 8022bf0:	2000      	movs	r0, #0
 8022bf2:	e7bd      	b.n	8022b70 <__tzcalc_limits+0xc4>
 8022bf4:	00015180 	.word	0x00015180
 8022bf8:	0802b160 	.word	0x0802b160

08022bfc <__tz_lock>:
 8022bfc:	4801      	ldr	r0, [pc, #4]	; (8022c04 <__tz_lock+0x8>)
 8022bfe:	f7fe be21 	b.w	8021844 <__retarget_lock_acquire>
 8022c02:	bf00      	nop
 8022c04:	2000104f 	.word	0x2000104f

08022c08 <__tz_unlock>:
 8022c08:	4801      	ldr	r0, [pc, #4]	; (8022c10 <__tz_unlock+0x8>)
 8022c0a:	f7fe be1d 	b.w	8021848 <__retarget_lock_release>
 8022c0e:	bf00      	nop
 8022c10:	2000104f 	.word	0x2000104f

08022c14 <_tzset_unlocked>:
 8022c14:	4b01      	ldr	r3, [pc, #4]	; (8022c1c <_tzset_unlocked+0x8>)
 8022c16:	6818      	ldr	r0, [r3, #0]
 8022c18:	f000 b802 	b.w	8022c20 <_tzset_unlocked_r>
 8022c1c:	20000108 	.word	0x20000108

08022c20 <_tzset_unlocked_r>:
 8022c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c24:	b08d      	sub	sp, #52	; 0x34
 8022c26:	4607      	mov	r7, r0
 8022c28:	f000 fbb2 	bl	8023390 <__gettzinfo>
 8022c2c:	49ae      	ldr	r1, [pc, #696]	; (8022ee8 <_tzset_unlocked_r+0x2c8>)
 8022c2e:	4eaf      	ldr	r6, [pc, #700]	; (8022eec <_tzset_unlocked_r+0x2cc>)
 8022c30:	4605      	mov	r5, r0
 8022c32:	4638      	mov	r0, r7
 8022c34:	f000 fba4 	bl	8023380 <_getenv_r>
 8022c38:	4604      	mov	r4, r0
 8022c3a:	b970      	cbnz	r0, 8022c5a <_tzset_unlocked_r+0x3a>
 8022c3c:	4bac      	ldr	r3, [pc, #688]	; (8022ef0 <_tzset_unlocked_r+0x2d0>)
 8022c3e:	4aad      	ldr	r2, [pc, #692]	; (8022ef4 <_tzset_unlocked_r+0x2d4>)
 8022c40:	6018      	str	r0, [r3, #0]
 8022c42:	4bad      	ldr	r3, [pc, #692]	; (8022ef8 <_tzset_unlocked_r+0x2d8>)
 8022c44:	6018      	str	r0, [r3, #0]
 8022c46:	4bad      	ldr	r3, [pc, #692]	; (8022efc <_tzset_unlocked_r+0x2dc>)
 8022c48:	6830      	ldr	r0, [r6, #0]
 8022c4a:	e9c3 2200 	strd	r2, r2, [r3]
 8022c4e:	f7fe fe69 	bl	8021924 <free>
 8022c52:	6034      	str	r4, [r6, #0]
 8022c54:	b00d      	add	sp, #52	; 0x34
 8022c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c5a:	6831      	ldr	r1, [r6, #0]
 8022c5c:	2900      	cmp	r1, #0
 8022c5e:	d15f      	bne.n	8022d20 <_tzset_unlocked_r+0x100>
 8022c60:	6830      	ldr	r0, [r6, #0]
 8022c62:	f7fe fe5f 	bl	8021924 <free>
 8022c66:	4620      	mov	r0, r4
 8022c68:	f7dd fae8 	bl	800023c <strlen>
 8022c6c:	1c41      	adds	r1, r0, #1
 8022c6e:	4638      	mov	r0, r7
 8022c70:	f7fe fed6 	bl	8021a20 <_malloc_r>
 8022c74:	6030      	str	r0, [r6, #0]
 8022c76:	2800      	cmp	r0, #0
 8022c78:	d157      	bne.n	8022d2a <_tzset_unlocked_r+0x10a>
 8022c7a:	7823      	ldrb	r3, [r4, #0]
 8022c7c:	4aa0      	ldr	r2, [pc, #640]	; (8022f00 <_tzset_unlocked_r+0x2e0>)
 8022c7e:	49a1      	ldr	r1, [pc, #644]	; (8022f04 <_tzset_unlocked_r+0x2e4>)
 8022c80:	2b3a      	cmp	r3, #58	; 0x3a
 8022c82:	bf08      	it	eq
 8022c84:	3401      	addeq	r4, #1
 8022c86:	ae0a      	add	r6, sp, #40	; 0x28
 8022c88:	4633      	mov	r3, r6
 8022c8a:	4620      	mov	r0, r4
 8022c8c:	f001 f976 	bl	8023f7c <siscanf>
 8022c90:	2800      	cmp	r0, #0
 8022c92:	dddf      	ble.n	8022c54 <_tzset_unlocked_r+0x34>
 8022c94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022c96:	18e7      	adds	r7, r4, r3
 8022c98:	5ce3      	ldrb	r3, [r4, r3]
 8022c9a:	2b2d      	cmp	r3, #45	; 0x2d
 8022c9c:	d149      	bne.n	8022d32 <_tzset_unlocked_r+0x112>
 8022c9e:	3701      	adds	r7, #1
 8022ca0:	f04f 34ff 	mov.w	r4, #4294967295
 8022ca4:	f10d 0a20 	add.w	sl, sp, #32
 8022ca8:	f10d 0b1e 	add.w	fp, sp, #30
 8022cac:	f04f 0800 	mov.w	r8, #0
 8022cb0:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8022cb4:	4994      	ldr	r1, [pc, #592]	; (8022f08 <_tzset_unlocked_r+0x2e8>)
 8022cb6:	9603      	str	r6, [sp, #12]
 8022cb8:	f8cd b000 	str.w	fp, [sp]
 8022cbc:	4633      	mov	r3, r6
 8022cbe:	aa07      	add	r2, sp, #28
 8022cc0:	4638      	mov	r0, r7
 8022cc2:	f8ad 801e 	strh.w	r8, [sp, #30]
 8022cc6:	f8ad 8020 	strh.w	r8, [sp, #32]
 8022cca:	f001 f957 	bl	8023f7c <siscanf>
 8022cce:	4540      	cmp	r0, r8
 8022cd0:	ddc0      	ble.n	8022c54 <_tzset_unlocked_r+0x34>
 8022cd2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8022cd6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8022cda:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8022f14 <_tzset_unlocked_r+0x2f4>
 8022cde:	213c      	movs	r1, #60	; 0x3c
 8022ce0:	fb01 2203 	mla	r2, r1, r3, r2
 8022ce4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8022ce8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8022cec:	fb01 2303 	mla	r3, r1, r3, r2
 8022cf0:	435c      	muls	r4, r3
 8022cf2:	62ac      	str	r4, [r5, #40]	; 0x28
 8022cf4:	4c81      	ldr	r4, [pc, #516]	; (8022efc <_tzset_unlocked_r+0x2dc>)
 8022cf6:	4b82      	ldr	r3, [pc, #520]	; (8022f00 <_tzset_unlocked_r+0x2e0>)
 8022cf8:	6023      	str	r3, [r4, #0]
 8022cfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022cfc:	4981      	ldr	r1, [pc, #516]	; (8022f04 <_tzset_unlocked_r+0x2e4>)
 8022cfe:	441f      	add	r7, r3
 8022d00:	464a      	mov	r2, r9
 8022d02:	4633      	mov	r3, r6
 8022d04:	4638      	mov	r0, r7
 8022d06:	f001 f939 	bl	8023f7c <siscanf>
 8022d0a:	4540      	cmp	r0, r8
 8022d0c:	dc16      	bgt.n	8022d3c <_tzset_unlocked_r+0x11c>
 8022d0e:	6823      	ldr	r3, [r4, #0]
 8022d10:	6063      	str	r3, [r4, #4]
 8022d12:	4b77      	ldr	r3, [pc, #476]	; (8022ef0 <_tzset_unlocked_r+0x2d0>)
 8022d14:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8022d16:	601a      	str	r2, [r3, #0]
 8022d18:	4b77      	ldr	r3, [pc, #476]	; (8022ef8 <_tzset_unlocked_r+0x2d8>)
 8022d1a:	f8c3 8000 	str.w	r8, [r3]
 8022d1e:	e799      	b.n	8022c54 <_tzset_unlocked_r+0x34>
 8022d20:	f7dd fa94 	bl	800024c <strcmp>
 8022d24:	2800      	cmp	r0, #0
 8022d26:	d19b      	bne.n	8022c60 <_tzset_unlocked_r+0x40>
 8022d28:	e794      	b.n	8022c54 <_tzset_unlocked_r+0x34>
 8022d2a:	4621      	mov	r1, r4
 8022d2c:	f7ff f829 	bl	8021d82 <strcpy>
 8022d30:	e7a3      	b.n	8022c7a <_tzset_unlocked_r+0x5a>
 8022d32:	2b2b      	cmp	r3, #43	; 0x2b
 8022d34:	bf08      	it	eq
 8022d36:	3701      	addeq	r7, #1
 8022d38:	2401      	movs	r4, #1
 8022d3a:	e7b3      	b.n	8022ca4 <_tzset_unlocked_r+0x84>
 8022d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022d3e:	f8c4 9004 	str.w	r9, [r4, #4]
 8022d42:	18fc      	adds	r4, r7, r3
 8022d44:	5cfb      	ldrb	r3, [r7, r3]
 8022d46:	2b2d      	cmp	r3, #45	; 0x2d
 8022d48:	f040 808b 	bne.w	8022e62 <_tzset_unlocked_r+0x242>
 8022d4c:	3401      	adds	r4, #1
 8022d4e:	f04f 37ff 	mov.w	r7, #4294967295
 8022d52:	2300      	movs	r3, #0
 8022d54:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022d58:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022d5c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8022d60:	930a      	str	r3, [sp, #40]	; 0x28
 8022d62:	e9cd a602 	strd	sl, r6, [sp, #8]
 8022d66:	e9cd b600 	strd	fp, r6, [sp]
 8022d6a:	4967      	ldr	r1, [pc, #412]	; (8022f08 <_tzset_unlocked_r+0x2e8>)
 8022d6c:	4633      	mov	r3, r6
 8022d6e:	aa07      	add	r2, sp, #28
 8022d70:	4620      	mov	r0, r4
 8022d72:	f001 f903 	bl	8023f7c <siscanf>
 8022d76:	2800      	cmp	r0, #0
 8022d78:	dc78      	bgt.n	8022e6c <_tzset_unlocked_r+0x24c>
 8022d7a:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8022d7c:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8022d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022d82:	652f      	str	r7, [r5, #80]	; 0x50
 8022d84:	441c      	add	r4, r3
 8022d86:	462f      	mov	r7, r5
 8022d88:	f04f 0900 	mov.w	r9, #0
 8022d8c:	7823      	ldrb	r3, [r4, #0]
 8022d8e:	2b2c      	cmp	r3, #44	; 0x2c
 8022d90:	bf08      	it	eq
 8022d92:	3401      	addeq	r4, #1
 8022d94:	f894 8000 	ldrb.w	r8, [r4]
 8022d98:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8022d9c:	d178      	bne.n	8022e90 <_tzset_unlocked_r+0x270>
 8022d9e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8022da2:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8022da6:	ab09      	add	r3, sp, #36	; 0x24
 8022da8:	9300      	str	r3, [sp, #0]
 8022daa:	4958      	ldr	r1, [pc, #352]	; (8022f0c <_tzset_unlocked_r+0x2ec>)
 8022dac:	9603      	str	r6, [sp, #12]
 8022dae:	4633      	mov	r3, r6
 8022db0:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8022db4:	4620      	mov	r0, r4
 8022db6:	f001 f8e1 	bl	8023f7c <siscanf>
 8022dba:	2803      	cmp	r0, #3
 8022dbc:	f47f af4a 	bne.w	8022c54 <_tzset_unlocked_r+0x34>
 8022dc0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8022dc4:	1e4b      	subs	r3, r1, #1
 8022dc6:	2b0b      	cmp	r3, #11
 8022dc8:	f63f af44 	bhi.w	8022c54 <_tzset_unlocked_r+0x34>
 8022dcc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8022dd0:	1e53      	subs	r3, r2, #1
 8022dd2:	2b04      	cmp	r3, #4
 8022dd4:	f63f af3e 	bhi.w	8022c54 <_tzset_unlocked_r+0x34>
 8022dd8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8022ddc:	2b06      	cmp	r3, #6
 8022dde:	f63f af39 	bhi.w	8022c54 <_tzset_unlocked_r+0x34>
 8022de2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8022de6:	f887 8008 	strb.w	r8, [r7, #8]
 8022dea:	617b      	str	r3, [r7, #20]
 8022dec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022dee:	eb04 0803 	add.w	r8, r4, r3
 8022df2:	2302      	movs	r3, #2
 8022df4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022df8:	2300      	movs	r3, #0
 8022dfa:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022dfe:	f8ad 3020 	strh.w	r3, [sp, #32]
 8022e02:	930a      	str	r3, [sp, #40]	; 0x28
 8022e04:	f898 3000 	ldrb.w	r3, [r8]
 8022e08:	2b2f      	cmp	r3, #47	; 0x2f
 8022e0a:	d109      	bne.n	8022e20 <_tzset_unlocked_r+0x200>
 8022e0c:	e9cd a602 	strd	sl, r6, [sp, #8]
 8022e10:	e9cd b600 	strd	fp, r6, [sp]
 8022e14:	493e      	ldr	r1, [pc, #248]	; (8022f10 <_tzset_unlocked_r+0x2f0>)
 8022e16:	4633      	mov	r3, r6
 8022e18:	aa07      	add	r2, sp, #28
 8022e1a:	4640      	mov	r0, r8
 8022e1c:	f001 f8ae 	bl	8023f7c <siscanf>
 8022e20:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8022e24:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8022e28:	213c      	movs	r1, #60	; 0x3c
 8022e2a:	fb01 2203 	mla	r2, r1, r3, r2
 8022e2e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8022e32:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8022e36:	fb01 2303 	mla	r3, r1, r3, r2
 8022e3a:	61bb      	str	r3, [r7, #24]
 8022e3c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022e3e:	3728      	adds	r7, #40	; 0x28
 8022e40:	4444      	add	r4, r8
 8022e42:	f1b9 0f00 	cmp.w	r9, #0
 8022e46:	d020      	beq.n	8022e8a <_tzset_unlocked_r+0x26a>
 8022e48:	6868      	ldr	r0, [r5, #4]
 8022e4a:	f7ff fe2f 	bl	8022aac <__tzcalc_limits>
 8022e4e:	4b28      	ldr	r3, [pc, #160]	; (8022ef0 <_tzset_unlocked_r+0x2d0>)
 8022e50:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8022e52:	601a      	str	r2, [r3, #0]
 8022e54:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8022e56:	1a9b      	subs	r3, r3, r2
 8022e58:	4a27      	ldr	r2, [pc, #156]	; (8022ef8 <_tzset_unlocked_r+0x2d8>)
 8022e5a:	bf18      	it	ne
 8022e5c:	2301      	movne	r3, #1
 8022e5e:	6013      	str	r3, [r2, #0]
 8022e60:	e6f8      	b.n	8022c54 <_tzset_unlocked_r+0x34>
 8022e62:	2b2b      	cmp	r3, #43	; 0x2b
 8022e64:	bf08      	it	eq
 8022e66:	3401      	addeq	r4, #1
 8022e68:	2701      	movs	r7, #1
 8022e6a:	e772      	b.n	8022d52 <_tzset_unlocked_r+0x132>
 8022e6c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8022e70:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8022e74:	213c      	movs	r1, #60	; 0x3c
 8022e76:	fb01 2203 	mla	r2, r1, r3, r2
 8022e7a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8022e7e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8022e82:	fb01 2303 	mla	r3, r1, r3, r2
 8022e86:	435f      	muls	r7, r3
 8022e88:	e77a      	b.n	8022d80 <_tzset_unlocked_r+0x160>
 8022e8a:	f04f 0901 	mov.w	r9, #1
 8022e8e:	e77d      	b.n	8022d8c <_tzset_unlocked_r+0x16c>
 8022e90:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8022e94:	bf06      	itte	eq
 8022e96:	3401      	addeq	r4, #1
 8022e98:	4643      	moveq	r3, r8
 8022e9a:	2344      	movne	r3, #68	; 0x44
 8022e9c:	220a      	movs	r2, #10
 8022e9e:	a90b      	add	r1, sp, #44	; 0x2c
 8022ea0:	4620      	mov	r0, r4
 8022ea2:	9305      	str	r3, [sp, #20]
 8022ea4:	f7ff fdf8 	bl	8022a98 <strtoul>
 8022ea8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8022eac:	9b05      	ldr	r3, [sp, #20]
 8022eae:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8022eb2:	45a0      	cmp	r8, r4
 8022eb4:	d114      	bne.n	8022ee0 <_tzset_unlocked_r+0x2c0>
 8022eb6:	234d      	movs	r3, #77	; 0x4d
 8022eb8:	f1b9 0f00 	cmp.w	r9, #0
 8022ebc:	d107      	bne.n	8022ece <_tzset_unlocked_r+0x2ae>
 8022ebe:	722b      	strb	r3, [r5, #8]
 8022ec0:	2103      	movs	r1, #3
 8022ec2:	2302      	movs	r3, #2
 8022ec4:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8022ec8:	f8c5 9014 	str.w	r9, [r5, #20]
 8022ecc:	e791      	b.n	8022df2 <_tzset_unlocked_r+0x1d2>
 8022ece:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8022ed2:	220b      	movs	r2, #11
 8022ed4:	2301      	movs	r3, #1
 8022ed6:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8022eda:	2300      	movs	r3, #0
 8022edc:	63eb      	str	r3, [r5, #60]	; 0x3c
 8022ede:	e788      	b.n	8022df2 <_tzset_unlocked_r+0x1d2>
 8022ee0:	b280      	uxth	r0, r0
 8022ee2:	723b      	strb	r3, [r7, #8]
 8022ee4:	6178      	str	r0, [r7, #20]
 8022ee6:	e784      	b.n	8022df2 <_tzset_unlocked_r+0x1d2>
 8022ee8:	0802b4a0 	.word	0x0802b4a0
 8022eec:	20000fa8 	.word	0x20000fa8
 8022ef0:	20000fb0 	.word	0x20000fb0
 8022ef4:	0802b4a3 	.word	0x0802b4a3
 8022ef8:	20000fac 	.word	0x20000fac
 8022efc:	2000016c 	.word	0x2000016c
 8022f00:	20000f9b 	.word	0x20000f9b
 8022f04:	0802b4a7 	.word	0x0802b4a7
 8022f08:	0802b4ca 	.word	0x0802b4ca
 8022f0c:	0802b4b6 	.word	0x0802b4b6
 8022f10:	0802b4c9 	.word	0x0802b4c9
 8022f14:	20000f90 	.word	0x20000f90

08022f18 <_vsniprintf_r>:
 8022f18:	b530      	push	{r4, r5, lr}
 8022f1a:	1e14      	subs	r4, r2, #0
 8022f1c:	4605      	mov	r5, r0
 8022f1e:	b09b      	sub	sp, #108	; 0x6c
 8022f20:	4618      	mov	r0, r3
 8022f22:	da05      	bge.n	8022f30 <_vsniprintf_r+0x18>
 8022f24:	238b      	movs	r3, #139	; 0x8b
 8022f26:	602b      	str	r3, [r5, #0]
 8022f28:	f04f 30ff 	mov.w	r0, #4294967295
 8022f2c:	b01b      	add	sp, #108	; 0x6c
 8022f2e:	bd30      	pop	{r4, r5, pc}
 8022f30:	f44f 7302 	mov.w	r3, #520	; 0x208
 8022f34:	f8ad 300c 	strh.w	r3, [sp, #12]
 8022f38:	bf14      	ite	ne
 8022f3a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8022f3e:	4623      	moveq	r3, r4
 8022f40:	9302      	str	r3, [sp, #8]
 8022f42:	9305      	str	r3, [sp, #20]
 8022f44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022f48:	9100      	str	r1, [sp, #0]
 8022f4a:	9104      	str	r1, [sp, #16]
 8022f4c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022f50:	4602      	mov	r2, r0
 8022f52:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022f54:	4669      	mov	r1, sp
 8022f56:	4628      	mov	r0, r5
 8022f58:	f000 fb94 	bl	8023684 <_svfiprintf_r>
 8022f5c:	1c43      	adds	r3, r0, #1
 8022f5e:	bfbc      	itt	lt
 8022f60:	238b      	movlt	r3, #139	; 0x8b
 8022f62:	602b      	strlt	r3, [r5, #0]
 8022f64:	2c00      	cmp	r4, #0
 8022f66:	d0e1      	beq.n	8022f2c <_vsniprintf_r+0x14>
 8022f68:	9b00      	ldr	r3, [sp, #0]
 8022f6a:	2200      	movs	r2, #0
 8022f6c:	701a      	strb	r2, [r3, #0]
 8022f6e:	e7dd      	b.n	8022f2c <_vsniprintf_r+0x14>

08022f70 <vsniprintf>:
 8022f70:	b507      	push	{r0, r1, r2, lr}
 8022f72:	9300      	str	r3, [sp, #0]
 8022f74:	4613      	mov	r3, r2
 8022f76:	460a      	mov	r2, r1
 8022f78:	4601      	mov	r1, r0
 8022f7a:	4803      	ldr	r0, [pc, #12]	; (8022f88 <vsniprintf+0x18>)
 8022f7c:	6800      	ldr	r0, [r0, #0]
 8022f7e:	f7ff ffcb 	bl	8022f18 <_vsniprintf_r>
 8022f82:	b003      	add	sp, #12
 8022f84:	f85d fb04 	ldr.w	pc, [sp], #4
 8022f88:	20000108 	.word	0x20000108

08022f8c <__swbuf_r>:
 8022f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022f8e:	460e      	mov	r6, r1
 8022f90:	4614      	mov	r4, r2
 8022f92:	4605      	mov	r5, r0
 8022f94:	b118      	cbz	r0, 8022f9e <__swbuf_r+0x12>
 8022f96:	6983      	ldr	r3, [r0, #24]
 8022f98:	b90b      	cbnz	r3, 8022f9e <__swbuf_r+0x12>
 8022f9a:	f7fe f8a1 	bl	80210e0 <__sinit>
 8022f9e:	4b21      	ldr	r3, [pc, #132]	; (8023024 <__swbuf_r+0x98>)
 8022fa0:	429c      	cmp	r4, r3
 8022fa2:	d12b      	bne.n	8022ffc <__swbuf_r+0x70>
 8022fa4:	686c      	ldr	r4, [r5, #4]
 8022fa6:	69a3      	ldr	r3, [r4, #24]
 8022fa8:	60a3      	str	r3, [r4, #8]
 8022faa:	89a3      	ldrh	r3, [r4, #12]
 8022fac:	071a      	lsls	r2, r3, #28
 8022fae:	d52f      	bpl.n	8023010 <__swbuf_r+0x84>
 8022fb0:	6923      	ldr	r3, [r4, #16]
 8022fb2:	b36b      	cbz	r3, 8023010 <__swbuf_r+0x84>
 8022fb4:	6923      	ldr	r3, [r4, #16]
 8022fb6:	6820      	ldr	r0, [r4, #0]
 8022fb8:	1ac0      	subs	r0, r0, r3
 8022fba:	6963      	ldr	r3, [r4, #20]
 8022fbc:	b2f6      	uxtb	r6, r6
 8022fbe:	4283      	cmp	r3, r0
 8022fc0:	4637      	mov	r7, r6
 8022fc2:	dc04      	bgt.n	8022fce <__swbuf_r+0x42>
 8022fc4:	4621      	mov	r1, r4
 8022fc6:	4628      	mov	r0, r5
 8022fc8:	f7fd ffe4 	bl	8020f94 <_fflush_r>
 8022fcc:	bb30      	cbnz	r0, 802301c <__swbuf_r+0x90>
 8022fce:	68a3      	ldr	r3, [r4, #8]
 8022fd0:	3b01      	subs	r3, #1
 8022fd2:	60a3      	str	r3, [r4, #8]
 8022fd4:	6823      	ldr	r3, [r4, #0]
 8022fd6:	1c5a      	adds	r2, r3, #1
 8022fd8:	6022      	str	r2, [r4, #0]
 8022fda:	701e      	strb	r6, [r3, #0]
 8022fdc:	6963      	ldr	r3, [r4, #20]
 8022fde:	3001      	adds	r0, #1
 8022fe0:	4283      	cmp	r3, r0
 8022fe2:	d004      	beq.n	8022fee <__swbuf_r+0x62>
 8022fe4:	89a3      	ldrh	r3, [r4, #12]
 8022fe6:	07db      	lsls	r3, r3, #31
 8022fe8:	d506      	bpl.n	8022ff8 <__swbuf_r+0x6c>
 8022fea:	2e0a      	cmp	r6, #10
 8022fec:	d104      	bne.n	8022ff8 <__swbuf_r+0x6c>
 8022fee:	4621      	mov	r1, r4
 8022ff0:	4628      	mov	r0, r5
 8022ff2:	f7fd ffcf 	bl	8020f94 <_fflush_r>
 8022ff6:	b988      	cbnz	r0, 802301c <__swbuf_r+0x90>
 8022ff8:	4638      	mov	r0, r7
 8022ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022ffc:	4b0a      	ldr	r3, [pc, #40]	; (8023028 <__swbuf_r+0x9c>)
 8022ffe:	429c      	cmp	r4, r3
 8023000:	d101      	bne.n	8023006 <__swbuf_r+0x7a>
 8023002:	68ac      	ldr	r4, [r5, #8]
 8023004:	e7cf      	b.n	8022fa6 <__swbuf_r+0x1a>
 8023006:	4b09      	ldr	r3, [pc, #36]	; (802302c <__swbuf_r+0xa0>)
 8023008:	429c      	cmp	r4, r3
 802300a:	bf08      	it	eq
 802300c:	68ec      	ldreq	r4, [r5, #12]
 802300e:	e7ca      	b.n	8022fa6 <__swbuf_r+0x1a>
 8023010:	4621      	mov	r1, r4
 8023012:	4628      	mov	r0, r5
 8023014:	f000 f81e 	bl	8023054 <__swsetup_r>
 8023018:	2800      	cmp	r0, #0
 802301a:	d0cb      	beq.n	8022fb4 <__swbuf_r+0x28>
 802301c:	f04f 37ff 	mov.w	r7, #4294967295
 8023020:	e7ea      	b.n	8022ff8 <__swbuf_r+0x6c>
 8023022:	bf00      	nop
 8023024:	0802b0a4 	.word	0x0802b0a4
 8023028:	0802b0c4 	.word	0x0802b0c4
 802302c:	0802b084 	.word	0x0802b084

08023030 <_write_r>:
 8023030:	b538      	push	{r3, r4, r5, lr}
 8023032:	4d07      	ldr	r5, [pc, #28]	; (8023050 <_write_r+0x20>)
 8023034:	4604      	mov	r4, r0
 8023036:	4608      	mov	r0, r1
 8023038:	4611      	mov	r1, r2
 802303a:	2200      	movs	r2, #0
 802303c:	602a      	str	r2, [r5, #0]
 802303e:	461a      	mov	r2, r3
 8023040:	f7dd fefe 	bl	8000e40 <_write>
 8023044:	1c43      	adds	r3, r0, #1
 8023046:	d102      	bne.n	802304e <_write_r+0x1e>
 8023048:	682b      	ldr	r3, [r5, #0]
 802304a:	b103      	cbz	r3, 802304e <_write_r+0x1e>
 802304c:	6023      	str	r3, [r4, #0]
 802304e:	bd38      	pop	{r3, r4, r5, pc}
 8023050:	20001054 	.word	0x20001054

08023054 <__swsetup_r>:
 8023054:	4b32      	ldr	r3, [pc, #200]	; (8023120 <__swsetup_r+0xcc>)
 8023056:	b570      	push	{r4, r5, r6, lr}
 8023058:	681d      	ldr	r5, [r3, #0]
 802305a:	4606      	mov	r6, r0
 802305c:	460c      	mov	r4, r1
 802305e:	b125      	cbz	r5, 802306a <__swsetup_r+0x16>
 8023060:	69ab      	ldr	r3, [r5, #24]
 8023062:	b913      	cbnz	r3, 802306a <__swsetup_r+0x16>
 8023064:	4628      	mov	r0, r5
 8023066:	f7fe f83b 	bl	80210e0 <__sinit>
 802306a:	4b2e      	ldr	r3, [pc, #184]	; (8023124 <__swsetup_r+0xd0>)
 802306c:	429c      	cmp	r4, r3
 802306e:	d10f      	bne.n	8023090 <__swsetup_r+0x3c>
 8023070:	686c      	ldr	r4, [r5, #4]
 8023072:	89a3      	ldrh	r3, [r4, #12]
 8023074:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023078:	0719      	lsls	r1, r3, #28
 802307a:	d42c      	bmi.n	80230d6 <__swsetup_r+0x82>
 802307c:	06dd      	lsls	r5, r3, #27
 802307e:	d411      	bmi.n	80230a4 <__swsetup_r+0x50>
 8023080:	2309      	movs	r3, #9
 8023082:	6033      	str	r3, [r6, #0]
 8023084:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8023088:	81a3      	strh	r3, [r4, #12]
 802308a:	f04f 30ff 	mov.w	r0, #4294967295
 802308e:	e03e      	b.n	802310e <__swsetup_r+0xba>
 8023090:	4b25      	ldr	r3, [pc, #148]	; (8023128 <__swsetup_r+0xd4>)
 8023092:	429c      	cmp	r4, r3
 8023094:	d101      	bne.n	802309a <__swsetup_r+0x46>
 8023096:	68ac      	ldr	r4, [r5, #8]
 8023098:	e7eb      	b.n	8023072 <__swsetup_r+0x1e>
 802309a:	4b24      	ldr	r3, [pc, #144]	; (802312c <__swsetup_r+0xd8>)
 802309c:	429c      	cmp	r4, r3
 802309e:	bf08      	it	eq
 80230a0:	68ec      	ldreq	r4, [r5, #12]
 80230a2:	e7e6      	b.n	8023072 <__swsetup_r+0x1e>
 80230a4:	0758      	lsls	r0, r3, #29
 80230a6:	d512      	bpl.n	80230ce <__swsetup_r+0x7a>
 80230a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80230aa:	b141      	cbz	r1, 80230be <__swsetup_r+0x6a>
 80230ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80230b0:	4299      	cmp	r1, r3
 80230b2:	d002      	beq.n	80230ba <__swsetup_r+0x66>
 80230b4:	4630      	mov	r0, r6
 80230b6:	f7fe fc63 	bl	8021980 <_free_r>
 80230ba:	2300      	movs	r3, #0
 80230bc:	6363      	str	r3, [r4, #52]	; 0x34
 80230be:	89a3      	ldrh	r3, [r4, #12]
 80230c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80230c4:	81a3      	strh	r3, [r4, #12]
 80230c6:	2300      	movs	r3, #0
 80230c8:	6063      	str	r3, [r4, #4]
 80230ca:	6923      	ldr	r3, [r4, #16]
 80230cc:	6023      	str	r3, [r4, #0]
 80230ce:	89a3      	ldrh	r3, [r4, #12]
 80230d0:	f043 0308 	orr.w	r3, r3, #8
 80230d4:	81a3      	strh	r3, [r4, #12]
 80230d6:	6923      	ldr	r3, [r4, #16]
 80230d8:	b94b      	cbnz	r3, 80230ee <__swsetup_r+0x9a>
 80230da:	89a3      	ldrh	r3, [r4, #12]
 80230dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80230e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80230e4:	d003      	beq.n	80230ee <__swsetup_r+0x9a>
 80230e6:	4621      	mov	r1, r4
 80230e8:	4630      	mov	r0, r6
 80230ea:	f7fe fbd3 	bl	8021894 <__smakebuf_r>
 80230ee:	89a0      	ldrh	r0, [r4, #12]
 80230f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80230f4:	f010 0301 	ands.w	r3, r0, #1
 80230f8:	d00a      	beq.n	8023110 <__swsetup_r+0xbc>
 80230fa:	2300      	movs	r3, #0
 80230fc:	60a3      	str	r3, [r4, #8]
 80230fe:	6963      	ldr	r3, [r4, #20]
 8023100:	425b      	negs	r3, r3
 8023102:	61a3      	str	r3, [r4, #24]
 8023104:	6923      	ldr	r3, [r4, #16]
 8023106:	b943      	cbnz	r3, 802311a <__swsetup_r+0xc6>
 8023108:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802310c:	d1ba      	bne.n	8023084 <__swsetup_r+0x30>
 802310e:	bd70      	pop	{r4, r5, r6, pc}
 8023110:	0781      	lsls	r1, r0, #30
 8023112:	bf58      	it	pl
 8023114:	6963      	ldrpl	r3, [r4, #20]
 8023116:	60a3      	str	r3, [r4, #8]
 8023118:	e7f4      	b.n	8023104 <__swsetup_r+0xb0>
 802311a:	2000      	movs	r0, #0
 802311c:	e7f7      	b.n	802310e <__swsetup_r+0xba>
 802311e:	bf00      	nop
 8023120:	20000108 	.word	0x20000108
 8023124:	0802b0a4 	.word	0x0802b0a4
 8023128:	0802b0c4 	.word	0x0802b0c4
 802312c:	0802b084 	.word	0x0802b084

08023130 <__register_exitproc>:
 8023130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023134:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80231f0 <__register_exitproc+0xc0>
 8023138:	4606      	mov	r6, r0
 802313a:	f8d8 0000 	ldr.w	r0, [r8]
 802313e:	461f      	mov	r7, r3
 8023140:	460d      	mov	r5, r1
 8023142:	4691      	mov	r9, r2
 8023144:	f7fe fb7f 	bl	8021846 <__retarget_lock_acquire_recursive>
 8023148:	4b25      	ldr	r3, [pc, #148]	; (80231e0 <__register_exitproc+0xb0>)
 802314a:	681c      	ldr	r4, [r3, #0]
 802314c:	b934      	cbnz	r4, 802315c <__register_exitproc+0x2c>
 802314e:	4c25      	ldr	r4, [pc, #148]	; (80231e4 <__register_exitproc+0xb4>)
 8023150:	601c      	str	r4, [r3, #0]
 8023152:	4b25      	ldr	r3, [pc, #148]	; (80231e8 <__register_exitproc+0xb8>)
 8023154:	b113      	cbz	r3, 802315c <__register_exitproc+0x2c>
 8023156:	681b      	ldr	r3, [r3, #0]
 8023158:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802315c:	6863      	ldr	r3, [r4, #4]
 802315e:	2b1f      	cmp	r3, #31
 8023160:	dd07      	ble.n	8023172 <__register_exitproc+0x42>
 8023162:	f8d8 0000 	ldr.w	r0, [r8]
 8023166:	f7fe fb70 	bl	802184a <__retarget_lock_release_recursive>
 802316a:	f04f 30ff 	mov.w	r0, #4294967295
 802316e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023172:	b34e      	cbz	r6, 80231c8 <__register_exitproc+0x98>
 8023174:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8023178:	b988      	cbnz	r0, 802319e <__register_exitproc+0x6e>
 802317a:	4b1c      	ldr	r3, [pc, #112]	; (80231ec <__register_exitproc+0xbc>)
 802317c:	b923      	cbnz	r3, 8023188 <__register_exitproc+0x58>
 802317e:	f8d8 0000 	ldr.w	r0, [r8]
 8023182:	f7fe fb61 	bl	8021848 <__retarget_lock_release>
 8023186:	e7f0      	b.n	802316a <__register_exitproc+0x3a>
 8023188:	f44f 7084 	mov.w	r0, #264	; 0x108
 802318c:	f7fe fbc2 	bl	8021914 <malloc>
 8023190:	2800      	cmp	r0, #0
 8023192:	d0f4      	beq.n	802317e <__register_exitproc+0x4e>
 8023194:	2300      	movs	r3, #0
 8023196:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802319a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802319e:	6863      	ldr	r3, [r4, #4]
 80231a0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80231a4:	2201      	movs	r2, #1
 80231a6:	409a      	lsls	r2, r3
 80231a8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80231ac:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80231b0:	4313      	orrs	r3, r2
 80231b2:	2e02      	cmp	r6, #2
 80231b4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80231b8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80231bc:	bf02      	ittt	eq
 80231be:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80231c2:	431a      	orreq	r2, r3
 80231c4:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80231c8:	6863      	ldr	r3, [r4, #4]
 80231ca:	f8d8 0000 	ldr.w	r0, [r8]
 80231ce:	1c5a      	adds	r2, r3, #1
 80231d0:	3302      	adds	r3, #2
 80231d2:	6062      	str	r2, [r4, #4]
 80231d4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80231d8:	f7fe fb37 	bl	802184a <__retarget_lock_release_recursive>
 80231dc:	2000      	movs	r0, #0
 80231de:	e7c6      	b.n	802316e <__register_exitproc+0x3e>
 80231e0:	20001040 	.word	0x20001040
 80231e4:	20000fb4 	.word	0x20000fb4
 80231e8:	00000000 	.word	0x00000000
 80231ec:	08021915 	.word	0x08021915
 80231f0:	20000174 	.word	0x20000174

080231f4 <abs>:
 80231f4:	2800      	cmp	r0, #0
 80231f6:	bfb8      	it	lt
 80231f8:	4240      	neglt	r0, r0
 80231fa:	4770      	bx	lr

080231fc <__assert_func>:
 80231fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80231fe:	4614      	mov	r4, r2
 8023200:	461a      	mov	r2, r3
 8023202:	4b09      	ldr	r3, [pc, #36]	; (8023228 <__assert_func+0x2c>)
 8023204:	681b      	ldr	r3, [r3, #0]
 8023206:	4605      	mov	r5, r0
 8023208:	68d8      	ldr	r0, [r3, #12]
 802320a:	b14c      	cbz	r4, 8023220 <__assert_func+0x24>
 802320c:	4b07      	ldr	r3, [pc, #28]	; (802322c <__assert_func+0x30>)
 802320e:	9100      	str	r1, [sp, #0]
 8023210:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8023214:	4906      	ldr	r1, [pc, #24]	; (8023230 <__assert_func+0x34>)
 8023216:	462b      	mov	r3, r5
 8023218:	f000 f854 	bl	80232c4 <fiprintf>
 802321c:	f7fd fda0 	bl	8020d60 <abort>
 8023220:	4b04      	ldr	r3, [pc, #16]	; (8023234 <__assert_func+0x38>)
 8023222:	461c      	mov	r4, r3
 8023224:	e7f3      	b.n	802320e <__assert_func+0x12>
 8023226:	bf00      	nop
 8023228:	20000108 	.word	0x20000108
 802322c:	0802b4dc 	.word	0x0802b4dc
 8023230:	0802b4e9 	.word	0x0802b4e9
 8023234:	0802b517 	.word	0x0802b517

08023238 <_close_r>:
 8023238:	b538      	push	{r3, r4, r5, lr}
 802323a:	4d06      	ldr	r5, [pc, #24]	; (8023254 <_close_r+0x1c>)
 802323c:	2300      	movs	r3, #0
 802323e:	4604      	mov	r4, r0
 8023240:	4608      	mov	r0, r1
 8023242:	602b      	str	r3, [r5, #0]
 8023244:	f7dd fe18 	bl	8000e78 <_close>
 8023248:	1c43      	adds	r3, r0, #1
 802324a:	d102      	bne.n	8023252 <_close_r+0x1a>
 802324c:	682b      	ldr	r3, [r5, #0]
 802324e:	b103      	cbz	r3, 8023252 <_close_r+0x1a>
 8023250:	6023      	str	r3, [r4, #0]
 8023252:	bd38      	pop	{r3, r4, r5, pc}
 8023254:	20001054 	.word	0x20001054

08023258 <__sflags>:
 8023258:	780b      	ldrb	r3, [r1, #0]
 802325a:	2b72      	cmp	r3, #114	; 0x72
 802325c:	b530      	push	{r4, r5, lr}
 802325e:	d022      	beq.n	80232a6 <__sflags+0x4e>
 8023260:	2b77      	cmp	r3, #119	; 0x77
 8023262:	d024      	beq.n	80232ae <__sflags+0x56>
 8023264:	2b61      	cmp	r3, #97	; 0x61
 8023266:	d027      	beq.n	80232b8 <__sflags+0x60>
 8023268:	2316      	movs	r3, #22
 802326a:	6003      	str	r3, [r0, #0]
 802326c:	2000      	movs	r0, #0
 802326e:	bd30      	pop	{r4, r5, pc}
 8023270:	2d62      	cmp	r5, #98	; 0x62
 8023272:	d012      	beq.n	802329a <__sflags+0x42>
 8023274:	2d78      	cmp	r5, #120	; 0x78
 8023276:	d013      	beq.n	80232a0 <__sflags+0x48>
 8023278:	2d2b      	cmp	r5, #43	; 0x2b
 802327a:	d107      	bne.n	802328c <__sflags+0x34>
 802327c:	f020 001c 	bic.w	r0, r0, #28
 8023280:	f023 0303 	bic.w	r3, r3, #3
 8023284:	f040 0010 	orr.w	r0, r0, #16
 8023288:	f043 0302 	orr.w	r3, r3, #2
 802328c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8023290:	2d00      	cmp	r5, #0
 8023292:	d1ed      	bne.n	8023270 <__sflags+0x18>
 8023294:	4323      	orrs	r3, r4
 8023296:	6013      	str	r3, [r2, #0]
 8023298:	e7e9      	b.n	802326e <__sflags+0x16>
 802329a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802329e:	e7f5      	b.n	802328c <__sflags+0x34>
 80232a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80232a4:	e7f2      	b.n	802328c <__sflags+0x34>
 80232a6:	2400      	movs	r4, #0
 80232a8:	4623      	mov	r3, r4
 80232aa:	2004      	movs	r0, #4
 80232ac:	e7ee      	b.n	802328c <__sflags+0x34>
 80232ae:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 80232b2:	2301      	movs	r3, #1
 80232b4:	2008      	movs	r0, #8
 80232b6:	e7e9      	b.n	802328c <__sflags+0x34>
 80232b8:	f44f 7402 	mov.w	r4, #520	; 0x208
 80232bc:	2301      	movs	r3, #1
 80232be:	f44f 7084 	mov.w	r0, #264	; 0x108
 80232c2:	e7e3      	b.n	802328c <__sflags+0x34>

080232c4 <fiprintf>:
 80232c4:	b40e      	push	{r1, r2, r3}
 80232c6:	b503      	push	{r0, r1, lr}
 80232c8:	4601      	mov	r1, r0
 80232ca:	ab03      	add	r3, sp, #12
 80232cc:	4805      	ldr	r0, [pc, #20]	; (80232e4 <fiprintf+0x20>)
 80232ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80232d2:	6800      	ldr	r0, [r0, #0]
 80232d4:	9301      	str	r3, [sp, #4]
 80232d6:	f000 faff 	bl	80238d8 <_vfiprintf_r>
 80232da:	b002      	add	sp, #8
 80232dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80232e0:	b003      	add	sp, #12
 80232e2:	4770      	bx	lr
 80232e4:	20000108 	.word	0x20000108

080232e8 <_fstat_r>:
 80232e8:	b538      	push	{r3, r4, r5, lr}
 80232ea:	4d07      	ldr	r5, [pc, #28]	; (8023308 <_fstat_r+0x20>)
 80232ec:	2300      	movs	r3, #0
 80232ee:	4604      	mov	r4, r0
 80232f0:	4608      	mov	r0, r1
 80232f2:	4611      	mov	r1, r2
 80232f4:	602b      	str	r3, [r5, #0]
 80232f6:	f7dd fdcb 	bl	8000e90 <_fstat>
 80232fa:	1c43      	adds	r3, r0, #1
 80232fc:	d102      	bne.n	8023304 <_fstat_r+0x1c>
 80232fe:	682b      	ldr	r3, [r5, #0]
 8023300:	b103      	cbz	r3, 8023304 <_fstat_r+0x1c>
 8023302:	6023      	str	r3, [r4, #0]
 8023304:	bd38      	pop	{r3, r4, r5, pc}
 8023306:	bf00      	nop
 8023308:	20001054 	.word	0x20001054

0802330c <_findenv_r>:
 802330c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023310:	4607      	mov	r7, r0
 8023312:	4689      	mov	r9, r1
 8023314:	4616      	mov	r6, r2
 8023316:	f000 fe7d 	bl	8024014 <__env_lock>
 802331a:	4b18      	ldr	r3, [pc, #96]	; (802337c <_findenv_r+0x70>)
 802331c:	681c      	ldr	r4, [r3, #0]
 802331e:	469a      	mov	sl, r3
 8023320:	b134      	cbz	r4, 8023330 <_findenv_r+0x24>
 8023322:	464b      	mov	r3, r9
 8023324:	4698      	mov	r8, r3
 8023326:	f813 1b01 	ldrb.w	r1, [r3], #1
 802332a:	b139      	cbz	r1, 802333c <_findenv_r+0x30>
 802332c:	293d      	cmp	r1, #61	; 0x3d
 802332e:	d1f9      	bne.n	8023324 <_findenv_r+0x18>
 8023330:	4638      	mov	r0, r7
 8023332:	f000 fe75 	bl	8024020 <__env_unlock>
 8023336:	2000      	movs	r0, #0
 8023338:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802333c:	eba8 0809 	sub.w	r8, r8, r9
 8023340:	46a3      	mov	fp, r4
 8023342:	f854 0b04 	ldr.w	r0, [r4], #4
 8023346:	2800      	cmp	r0, #0
 8023348:	d0f2      	beq.n	8023330 <_findenv_r+0x24>
 802334a:	4642      	mov	r2, r8
 802334c:	4649      	mov	r1, r9
 802334e:	f000 fe41 	bl	8023fd4 <strncmp>
 8023352:	2800      	cmp	r0, #0
 8023354:	d1f4      	bne.n	8023340 <_findenv_r+0x34>
 8023356:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802335a:	eb03 0508 	add.w	r5, r3, r8
 802335e:	f813 3008 	ldrb.w	r3, [r3, r8]
 8023362:	2b3d      	cmp	r3, #61	; 0x3d
 8023364:	d1ec      	bne.n	8023340 <_findenv_r+0x34>
 8023366:	f8da 3000 	ldr.w	r3, [sl]
 802336a:	ebab 0303 	sub.w	r3, fp, r3
 802336e:	109b      	asrs	r3, r3, #2
 8023370:	4638      	mov	r0, r7
 8023372:	6033      	str	r3, [r6, #0]
 8023374:	f000 fe54 	bl	8024020 <__env_unlock>
 8023378:	1c68      	adds	r0, r5, #1
 802337a:	e7dd      	b.n	8023338 <_findenv_r+0x2c>
 802337c:	20000000 	.word	0x20000000

08023380 <_getenv_r>:
 8023380:	b507      	push	{r0, r1, r2, lr}
 8023382:	aa01      	add	r2, sp, #4
 8023384:	f7ff ffc2 	bl	802330c <_findenv_r>
 8023388:	b003      	add	sp, #12
 802338a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08023390 <__gettzinfo>:
 8023390:	4800      	ldr	r0, [pc, #0]	; (8023394 <__gettzinfo+0x4>)
 8023392:	4770      	bx	lr
 8023394:	20000178 	.word	0x20000178

08023398 <gmtime_r>:
 8023398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802339c:	e9d0 6700 	ldrd	r6, r7, [r0]
 80233a0:	460c      	mov	r4, r1
 80233a2:	4a51      	ldr	r2, [pc, #324]	; (80234e8 <gmtime_r+0x150>)
 80233a4:	2300      	movs	r3, #0
 80233a6:	4630      	mov	r0, r6
 80233a8:	4639      	mov	r1, r7
 80233aa:	f7dd fa03 	bl	80007b4 <__aeabi_ldivmod>
 80233ae:	4639      	mov	r1, r7
 80233b0:	4605      	mov	r5, r0
 80233b2:	4a4d      	ldr	r2, [pc, #308]	; (80234e8 <gmtime_r+0x150>)
 80233b4:	4630      	mov	r0, r6
 80233b6:	2300      	movs	r3, #0
 80233b8:	f7dd f9fc 	bl	80007b4 <__aeabi_ldivmod>
 80233bc:	2a00      	cmp	r2, #0
 80233be:	bfbc      	itt	lt
 80233c0:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80233c4:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80233c8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80233cc:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 80233d0:	fbb2 f3f1 	udiv	r3, r2, r1
 80233d4:	fb01 2213 	mls	r2, r1, r3, r2
 80233d8:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80233dc:	bfac      	ite	ge
 80233de:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 80233e2:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 80233e6:	60a3      	str	r3, [r4, #8]
 80233e8:	fbb2 f3f1 	udiv	r3, r2, r1
 80233ec:	fb01 2213 	mls	r2, r1, r3, r2
 80233f0:	6063      	str	r3, [r4, #4]
 80233f2:	6022      	str	r2, [r4, #0]
 80233f4:	1cc3      	adds	r3, r0, #3
 80233f6:	2207      	movs	r2, #7
 80233f8:	fb93 f2f2 	sdiv	r2, r3, r2
 80233fc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8023400:	1a9b      	subs	r3, r3, r2
 8023402:	bf48      	it	mi
 8023404:	3307      	addmi	r3, #7
 8023406:	2800      	cmp	r0, #0
 8023408:	61a3      	str	r3, [r4, #24]
 802340a:	bfb8      	it	lt
 802340c:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8023410:	4936      	ldr	r1, [pc, #216]	; (80234ec <gmtime_r+0x154>)
 8023412:	bfae      	itee	ge
 8023414:	fb90 f1f1 	sdivge	r1, r0, r1
 8023418:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 802341c:	fb93 f1f1 	sdivlt	r1, r3, r1
 8023420:	4b33      	ldr	r3, [pc, #204]	; (80234f0 <gmtime_r+0x158>)
 8023422:	fb03 0001 	mla	r0, r3, r1, r0
 8023426:	f648 62ac 	movw	r2, #36524	; 0x8eac
 802342a:	fbb0 f2f2 	udiv	r2, r0, r2
 802342e:	4402      	add	r2, r0
 8023430:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 8023434:	fbb0 f3fc 	udiv	r3, r0, ip
 8023438:	1ad2      	subs	r2, r2, r3
 802343a:	f240 176d 	movw	r7, #365	; 0x16d
 802343e:	4b2d      	ldr	r3, [pc, #180]	; (80234f4 <gmtime_r+0x15c>)
 8023440:	fbb0 f3f3 	udiv	r3, r0, r3
 8023444:	2664      	movs	r6, #100	; 0x64
 8023446:	1ad3      	subs	r3, r2, r3
 8023448:	fbb3 f5f7 	udiv	r5, r3, r7
 802344c:	fbb3 f3fc 	udiv	r3, r3, ip
 8023450:	fbb5 f2f6 	udiv	r2, r5, r6
 8023454:	1ad3      	subs	r3, r2, r3
 8023456:	4403      	add	r3, r0
 8023458:	fb07 3315 	mls	r3, r7, r5, r3
 802345c:	2099      	movs	r0, #153	; 0x99
 802345e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8023462:	f10c 0c02 	add.w	ip, ip, #2
 8023466:	f103 0e01 	add.w	lr, r3, #1
 802346a:	fbbc f7f0 	udiv	r7, ip, r0
 802346e:	4378      	muls	r0, r7
 8023470:	3002      	adds	r0, #2
 8023472:	f04f 0805 	mov.w	r8, #5
 8023476:	fbb0 f0f8 	udiv	r0, r0, r8
 802347a:	ebae 0000 	sub.w	r0, lr, r0
 802347e:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 8023482:	45f4      	cmp	ip, lr
 8023484:	bf94      	ite	ls
 8023486:	f04f 0c02 	movls.w	ip, #2
 802348a:	f06f 0c09 	mvnhi.w	ip, #9
 802348e:	4467      	add	r7, ip
 8023490:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8023494:	fb0c 5101 	mla	r1, ip, r1, r5
 8023498:	2f01      	cmp	r7, #1
 802349a:	bf98      	it	ls
 802349c:	3101      	addls	r1, #1
 802349e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80234a2:	d30c      	bcc.n	80234be <gmtime_r+0x126>
 80234a4:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80234a8:	61e3      	str	r3, [r4, #28]
 80234aa:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 80234ae:	2300      	movs	r3, #0
 80234b0:	60e0      	str	r0, [r4, #12]
 80234b2:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80234b6:	6223      	str	r3, [r4, #32]
 80234b8:	4620      	mov	r0, r4
 80234ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80234be:	f015 0f03 	tst.w	r5, #3
 80234c2:	d102      	bne.n	80234ca <gmtime_r+0x132>
 80234c4:	fb06 5212 	mls	r2, r6, r2, r5
 80234c8:	b95a      	cbnz	r2, 80234e2 <gmtime_r+0x14a>
 80234ca:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80234ce:	fbb5 f2f6 	udiv	r2, r5, r6
 80234d2:	fb06 5212 	mls	r2, r6, r2, r5
 80234d6:	fab2 f282 	clz	r2, r2
 80234da:	0952      	lsrs	r2, r2, #5
 80234dc:	333b      	adds	r3, #59	; 0x3b
 80234de:	4413      	add	r3, r2
 80234e0:	e7e2      	b.n	80234a8 <gmtime_r+0x110>
 80234e2:	2201      	movs	r2, #1
 80234e4:	e7fa      	b.n	80234dc <gmtime_r+0x144>
 80234e6:	bf00      	nop
 80234e8:	00015180 	.word	0x00015180
 80234ec:	00023ab1 	.word	0x00023ab1
 80234f0:	fffdc54f 	.word	0xfffdc54f
 80234f4:	00023ab0 	.word	0x00023ab0

080234f8 <_isatty_r>:
 80234f8:	b538      	push	{r3, r4, r5, lr}
 80234fa:	4d06      	ldr	r5, [pc, #24]	; (8023514 <_isatty_r+0x1c>)
 80234fc:	2300      	movs	r3, #0
 80234fe:	4604      	mov	r4, r0
 8023500:	4608      	mov	r0, r1
 8023502:	602b      	str	r3, [r5, #0]
 8023504:	f7dd fcd4 	bl	8000eb0 <_isatty>
 8023508:	1c43      	adds	r3, r0, #1
 802350a:	d102      	bne.n	8023512 <_isatty_r+0x1a>
 802350c:	682b      	ldr	r3, [r5, #0]
 802350e:	b103      	cbz	r3, 8023512 <_isatty_r+0x1a>
 8023510:	6023      	str	r3, [r4, #0]
 8023512:	bd38      	pop	{r3, r4, r5, pc}
 8023514:	20001054 	.word	0x20001054

08023518 <labs>:
 8023518:	2800      	cmp	r0, #0
 802351a:	bfb8      	it	lt
 802351c:	4240      	neglt	r0, r0
 802351e:	4770      	bx	lr

08023520 <_lseek_r>:
 8023520:	b538      	push	{r3, r4, r5, lr}
 8023522:	4d07      	ldr	r5, [pc, #28]	; (8023540 <_lseek_r+0x20>)
 8023524:	4604      	mov	r4, r0
 8023526:	4608      	mov	r0, r1
 8023528:	4611      	mov	r1, r2
 802352a:	2200      	movs	r2, #0
 802352c:	602a      	str	r2, [r5, #0]
 802352e:	461a      	mov	r2, r3
 8023530:	f7dd fcc9 	bl	8000ec6 <_lseek>
 8023534:	1c43      	adds	r3, r0, #1
 8023536:	d102      	bne.n	802353e <_lseek_r+0x1e>
 8023538:	682b      	ldr	r3, [r5, #0]
 802353a:	b103      	cbz	r3, 802353e <_lseek_r+0x1e>
 802353c:	6023      	str	r3, [r4, #0]
 802353e:	bd38      	pop	{r3, r4, r5, pc}
 8023540:	20001054 	.word	0x20001054

08023544 <__ascii_mbtowc>:
 8023544:	b082      	sub	sp, #8
 8023546:	b901      	cbnz	r1, 802354a <__ascii_mbtowc+0x6>
 8023548:	a901      	add	r1, sp, #4
 802354a:	b142      	cbz	r2, 802355e <__ascii_mbtowc+0x1a>
 802354c:	b14b      	cbz	r3, 8023562 <__ascii_mbtowc+0x1e>
 802354e:	7813      	ldrb	r3, [r2, #0]
 8023550:	600b      	str	r3, [r1, #0]
 8023552:	7812      	ldrb	r2, [r2, #0]
 8023554:	1e10      	subs	r0, r2, #0
 8023556:	bf18      	it	ne
 8023558:	2001      	movne	r0, #1
 802355a:	b002      	add	sp, #8
 802355c:	4770      	bx	lr
 802355e:	4610      	mov	r0, r2
 8023560:	e7fb      	b.n	802355a <__ascii_mbtowc+0x16>
 8023562:	f06f 0001 	mvn.w	r0, #1
 8023566:	e7f8      	b.n	802355a <__ascii_mbtowc+0x16>

08023568 <__malloc_lock>:
 8023568:	4801      	ldr	r0, [pc, #4]	; (8023570 <__malloc_lock+0x8>)
 802356a:	f7fe b96c 	b.w	8021846 <__retarget_lock_acquire_recursive>
 802356e:	bf00      	nop
 8023570:	2000104c 	.word	0x2000104c

08023574 <__malloc_unlock>:
 8023574:	4801      	ldr	r0, [pc, #4]	; (802357c <__malloc_unlock+0x8>)
 8023576:	f7fe b968 	b.w	802184a <__retarget_lock_release_recursive>
 802357a:	bf00      	nop
 802357c:	2000104c 	.word	0x2000104c

08023580 <_realloc_r>:
 8023580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023582:	4607      	mov	r7, r0
 8023584:	4614      	mov	r4, r2
 8023586:	460e      	mov	r6, r1
 8023588:	b921      	cbnz	r1, 8023594 <_realloc_r+0x14>
 802358a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802358e:	4611      	mov	r1, r2
 8023590:	f7fe ba46 	b.w	8021a20 <_malloc_r>
 8023594:	b922      	cbnz	r2, 80235a0 <_realloc_r+0x20>
 8023596:	f7fe f9f3 	bl	8021980 <_free_r>
 802359a:	4625      	mov	r5, r4
 802359c:	4628      	mov	r0, r5
 802359e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80235a0:	f000 fd5e 	bl	8024060 <_malloc_usable_size_r>
 80235a4:	42a0      	cmp	r0, r4
 80235a6:	d20f      	bcs.n	80235c8 <_realloc_r+0x48>
 80235a8:	4621      	mov	r1, r4
 80235aa:	4638      	mov	r0, r7
 80235ac:	f7fe fa38 	bl	8021a20 <_malloc_r>
 80235b0:	4605      	mov	r5, r0
 80235b2:	2800      	cmp	r0, #0
 80235b4:	d0f2      	beq.n	802359c <_realloc_r+0x1c>
 80235b6:	4631      	mov	r1, r6
 80235b8:	4622      	mov	r2, r4
 80235ba:	f7fe f9bb 	bl	8021934 <memcpy>
 80235be:	4631      	mov	r1, r6
 80235c0:	4638      	mov	r0, r7
 80235c2:	f7fe f9dd 	bl	8021980 <_free_r>
 80235c6:	e7e9      	b.n	802359c <_realloc_r+0x1c>
 80235c8:	4635      	mov	r5, r6
 80235ca:	e7e7      	b.n	802359c <_realloc_r+0x1c>

080235cc <__ssputs_r>:
 80235cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80235d0:	688e      	ldr	r6, [r1, #8]
 80235d2:	429e      	cmp	r6, r3
 80235d4:	4682      	mov	sl, r0
 80235d6:	460c      	mov	r4, r1
 80235d8:	4690      	mov	r8, r2
 80235da:	461f      	mov	r7, r3
 80235dc:	d838      	bhi.n	8023650 <__ssputs_r+0x84>
 80235de:	898a      	ldrh	r2, [r1, #12]
 80235e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80235e4:	d032      	beq.n	802364c <__ssputs_r+0x80>
 80235e6:	6825      	ldr	r5, [r4, #0]
 80235e8:	6909      	ldr	r1, [r1, #16]
 80235ea:	eba5 0901 	sub.w	r9, r5, r1
 80235ee:	6965      	ldr	r5, [r4, #20]
 80235f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80235f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80235f8:	3301      	adds	r3, #1
 80235fa:	444b      	add	r3, r9
 80235fc:	106d      	asrs	r5, r5, #1
 80235fe:	429d      	cmp	r5, r3
 8023600:	bf38      	it	cc
 8023602:	461d      	movcc	r5, r3
 8023604:	0553      	lsls	r3, r2, #21
 8023606:	d531      	bpl.n	802366c <__ssputs_r+0xa0>
 8023608:	4629      	mov	r1, r5
 802360a:	f7fe fa09 	bl	8021a20 <_malloc_r>
 802360e:	4606      	mov	r6, r0
 8023610:	b950      	cbnz	r0, 8023628 <__ssputs_r+0x5c>
 8023612:	230c      	movs	r3, #12
 8023614:	f8ca 3000 	str.w	r3, [sl]
 8023618:	89a3      	ldrh	r3, [r4, #12]
 802361a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802361e:	81a3      	strh	r3, [r4, #12]
 8023620:	f04f 30ff 	mov.w	r0, #4294967295
 8023624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023628:	6921      	ldr	r1, [r4, #16]
 802362a:	464a      	mov	r2, r9
 802362c:	f7fe f982 	bl	8021934 <memcpy>
 8023630:	89a3      	ldrh	r3, [r4, #12]
 8023632:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8023636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802363a:	81a3      	strh	r3, [r4, #12]
 802363c:	6126      	str	r6, [r4, #16]
 802363e:	6165      	str	r5, [r4, #20]
 8023640:	444e      	add	r6, r9
 8023642:	eba5 0509 	sub.w	r5, r5, r9
 8023646:	6026      	str	r6, [r4, #0]
 8023648:	60a5      	str	r5, [r4, #8]
 802364a:	463e      	mov	r6, r7
 802364c:	42be      	cmp	r6, r7
 802364e:	d900      	bls.n	8023652 <__ssputs_r+0x86>
 8023650:	463e      	mov	r6, r7
 8023652:	4632      	mov	r2, r6
 8023654:	6820      	ldr	r0, [r4, #0]
 8023656:	4641      	mov	r1, r8
 8023658:	f000 fce8 	bl	802402c <memmove>
 802365c:	68a3      	ldr	r3, [r4, #8]
 802365e:	6822      	ldr	r2, [r4, #0]
 8023660:	1b9b      	subs	r3, r3, r6
 8023662:	4432      	add	r2, r6
 8023664:	60a3      	str	r3, [r4, #8]
 8023666:	6022      	str	r2, [r4, #0]
 8023668:	2000      	movs	r0, #0
 802366a:	e7db      	b.n	8023624 <__ssputs_r+0x58>
 802366c:	462a      	mov	r2, r5
 802366e:	f7ff ff87 	bl	8023580 <_realloc_r>
 8023672:	4606      	mov	r6, r0
 8023674:	2800      	cmp	r0, #0
 8023676:	d1e1      	bne.n	802363c <__ssputs_r+0x70>
 8023678:	6921      	ldr	r1, [r4, #16]
 802367a:	4650      	mov	r0, sl
 802367c:	f7fe f980 	bl	8021980 <_free_r>
 8023680:	e7c7      	b.n	8023612 <__ssputs_r+0x46>
	...

08023684 <_svfiprintf_r>:
 8023684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023688:	4698      	mov	r8, r3
 802368a:	898b      	ldrh	r3, [r1, #12]
 802368c:	061b      	lsls	r3, r3, #24
 802368e:	b09d      	sub	sp, #116	; 0x74
 8023690:	4607      	mov	r7, r0
 8023692:	460d      	mov	r5, r1
 8023694:	4614      	mov	r4, r2
 8023696:	d50e      	bpl.n	80236b6 <_svfiprintf_r+0x32>
 8023698:	690b      	ldr	r3, [r1, #16]
 802369a:	b963      	cbnz	r3, 80236b6 <_svfiprintf_r+0x32>
 802369c:	2140      	movs	r1, #64	; 0x40
 802369e:	f7fe f9bf 	bl	8021a20 <_malloc_r>
 80236a2:	6028      	str	r0, [r5, #0]
 80236a4:	6128      	str	r0, [r5, #16]
 80236a6:	b920      	cbnz	r0, 80236b2 <_svfiprintf_r+0x2e>
 80236a8:	230c      	movs	r3, #12
 80236aa:	603b      	str	r3, [r7, #0]
 80236ac:	f04f 30ff 	mov.w	r0, #4294967295
 80236b0:	e0d1      	b.n	8023856 <_svfiprintf_r+0x1d2>
 80236b2:	2340      	movs	r3, #64	; 0x40
 80236b4:	616b      	str	r3, [r5, #20]
 80236b6:	2300      	movs	r3, #0
 80236b8:	9309      	str	r3, [sp, #36]	; 0x24
 80236ba:	2320      	movs	r3, #32
 80236bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80236c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80236c4:	2330      	movs	r3, #48	; 0x30
 80236c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8023870 <_svfiprintf_r+0x1ec>
 80236ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80236ce:	f04f 0901 	mov.w	r9, #1
 80236d2:	4623      	mov	r3, r4
 80236d4:	469a      	mov	sl, r3
 80236d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80236da:	b10a      	cbz	r2, 80236e0 <_svfiprintf_r+0x5c>
 80236dc:	2a25      	cmp	r2, #37	; 0x25
 80236de:	d1f9      	bne.n	80236d4 <_svfiprintf_r+0x50>
 80236e0:	ebba 0b04 	subs.w	fp, sl, r4
 80236e4:	d00b      	beq.n	80236fe <_svfiprintf_r+0x7a>
 80236e6:	465b      	mov	r3, fp
 80236e8:	4622      	mov	r2, r4
 80236ea:	4629      	mov	r1, r5
 80236ec:	4638      	mov	r0, r7
 80236ee:	f7ff ff6d 	bl	80235cc <__ssputs_r>
 80236f2:	3001      	adds	r0, #1
 80236f4:	f000 80aa 	beq.w	802384c <_svfiprintf_r+0x1c8>
 80236f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80236fa:	445a      	add	r2, fp
 80236fc:	9209      	str	r2, [sp, #36]	; 0x24
 80236fe:	f89a 3000 	ldrb.w	r3, [sl]
 8023702:	2b00      	cmp	r3, #0
 8023704:	f000 80a2 	beq.w	802384c <_svfiprintf_r+0x1c8>
 8023708:	2300      	movs	r3, #0
 802370a:	f04f 32ff 	mov.w	r2, #4294967295
 802370e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023712:	f10a 0a01 	add.w	sl, sl, #1
 8023716:	9304      	str	r3, [sp, #16]
 8023718:	9307      	str	r3, [sp, #28]
 802371a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802371e:	931a      	str	r3, [sp, #104]	; 0x68
 8023720:	4654      	mov	r4, sl
 8023722:	2205      	movs	r2, #5
 8023724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023728:	4851      	ldr	r0, [pc, #324]	; (8023870 <_svfiprintf_r+0x1ec>)
 802372a:	f7dc fd99 	bl	8000260 <memchr>
 802372e:	9a04      	ldr	r2, [sp, #16]
 8023730:	b9d8      	cbnz	r0, 802376a <_svfiprintf_r+0xe6>
 8023732:	06d0      	lsls	r0, r2, #27
 8023734:	bf44      	itt	mi
 8023736:	2320      	movmi	r3, #32
 8023738:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802373c:	0711      	lsls	r1, r2, #28
 802373e:	bf44      	itt	mi
 8023740:	232b      	movmi	r3, #43	; 0x2b
 8023742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023746:	f89a 3000 	ldrb.w	r3, [sl]
 802374a:	2b2a      	cmp	r3, #42	; 0x2a
 802374c:	d015      	beq.n	802377a <_svfiprintf_r+0xf6>
 802374e:	9a07      	ldr	r2, [sp, #28]
 8023750:	4654      	mov	r4, sl
 8023752:	2000      	movs	r0, #0
 8023754:	f04f 0c0a 	mov.w	ip, #10
 8023758:	4621      	mov	r1, r4
 802375a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802375e:	3b30      	subs	r3, #48	; 0x30
 8023760:	2b09      	cmp	r3, #9
 8023762:	d94e      	bls.n	8023802 <_svfiprintf_r+0x17e>
 8023764:	b1b0      	cbz	r0, 8023794 <_svfiprintf_r+0x110>
 8023766:	9207      	str	r2, [sp, #28]
 8023768:	e014      	b.n	8023794 <_svfiprintf_r+0x110>
 802376a:	eba0 0308 	sub.w	r3, r0, r8
 802376e:	fa09 f303 	lsl.w	r3, r9, r3
 8023772:	4313      	orrs	r3, r2
 8023774:	9304      	str	r3, [sp, #16]
 8023776:	46a2      	mov	sl, r4
 8023778:	e7d2      	b.n	8023720 <_svfiprintf_r+0x9c>
 802377a:	9b03      	ldr	r3, [sp, #12]
 802377c:	1d19      	adds	r1, r3, #4
 802377e:	681b      	ldr	r3, [r3, #0]
 8023780:	9103      	str	r1, [sp, #12]
 8023782:	2b00      	cmp	r3, #0
 8023784:	bfbb      	ittet	lt
 8023786:	425b      	neglt	r3, r3
 8023788:	f042 0202 	orrlt.w	r2, r2, #2
 802378c:	9307      	strge	r3, [sp, #28]
 802378e:	9307      	strlt	r3, [sp, #28]
 8023790:	bfb8      	it	lt
 8023792:	9204      	strlt	r2, [sp, #16]
 8023794:	7823      	ldrb	r3, [r4, #0]
 8023796:	2b2e      	cmp	r3, #46	; 0x2e
 8023798:	d10c      	bne.n	80237b4 <_svfiprintf_r+0x130>
 802379a:	7863      	ldrb	r3, [r4, #1]
 802379c:	2b2a      	cmp	r3, #42	; 0x2a
 802379e:	d135      	bne.n	802380c <_svfiprintf_r+0x188>
 80237a0:	9b03      	ldr	r3, [sp, #12]
 80237a2:	1d1a      	adds	r2, r3, #4
 80237a4:	681b      	ldr	r3, [r3, #0]
 80237a6:	9203      	str	r2, [sp, #12]
 80237a8:	2b00      	cmp	r3, #0
 80237aa:	bfb8      	it	lt
 80237ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80237b0:	3402      	adds	r4, #2
 80237b2:	9305      	str	r3, [sp, #20]
 80237b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8023880 <_svfiprintf_r+0x1fc>
 80237b8:	7821      	ldrb	r1, [r4, #0]
 80237ba:	2203      	movs	r2, #3
 80237bc:	4650      	mov	r0, sl
 80237be:	f7dc fd4f 	bl	8000260 <memchr>
 80237c2:	b140      	cbz	r0, 80237d6 <_svfiprintf_r+0x152>
 80237c4:	2340      	movs	r3, #64	; 0x40
 80237c6:	eba0 000a 	sub.w	r0, r0, sl
 80237ca:	fa03 f000 	lsl.w	r0, r3, r0
 80237ce:	9b04      	ldr	r3, [sp, #16]
 80237d0:	4303      	orrs	r3, r0
 80237d2:	3401      	adds	r4, #1
 80237d4:	9304      	str	r3, [sp, #16]
 80237d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80237da:	4826      	ldr	r0, [pc, #152]	; (8023874 <_svfiprintf_r+0x1f0>)
 80237dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80237e0:	2206      	movs	r2, #6
 80237e2:	f7dc fd3d 	bl	8000260 <memchr>
 80237e6:	2800      	cmp	r0, #0
 80237e8:	d038      	beq.n	802385c <_svfiprintf_r+0x1d8>
 80237ea:	4b23      	ldr	r3, [pc, #140]	; (8023878 <_svfiprintf_r+0x1f4>)
 80237ec:	bb1b      	cbnz	r3, 8023836 <_svfiprintf_r+0x1b2>
 80237ee:	9b03      	ldr	r3, [sp, #12]
 80237f0:	3307      	adds	r3, #7
 80237f2:	f023 0307 	bic.w	r3, r3, #7
 80237f6:	3308      	adds	r3, #8
 80237f8:	9303      	str	r3, [sp, #12]
 80237fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80237fc:	4433      	add	r3, r6
 80237fe:	9309      	str	r3, [sp, #36]	; 0x24
 8023800:	e767      	b.n	80236d2 <_svfiprintf_r+0x4e>
 8023802:	fb0c 3202 	mla	r2, ip, r2, r3
 8023806:	460c      	mov	r4, r1
 8023808:	2001      	movs	r0, #1
 802380a:	e7a5      	b.n	8023758 <_svfiprintf_r+0xd4>
 802380c:	2300      	movs	r3, #0
 802380e:	3401      	adds	r4, #1
 8023810:	9305      	str	r3, [sp, #20]
 8023812:	4619      	mov	r1, r3
 8023814:	f04f 0c0a 	mov.w	ip, #10
 8023818:	4620      	mov	r0, r4
 802381a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802381e:	3a30      	subs	r2, #48	; 0x30
 8023820:	2a09      	cmp	r2, #9
 8023822:	d903      	bls.n	802382c <_svfiprintf_r+0x1a8>
 8023824:	2b00      	cmp	r3, #0
 8023826:	d0c5      	beq.n	80237b4 <_svfiprintf_r+0x130>
 8023828:	9105      	str	r1, [sp, #20]
 802382a:	e7c3      	b.n	80237b4 <_svfiprintf_r+0x130>
 802382c:	fb0c 2101 	mla	r1, ip, r1, r2
 8023830:	4604      	mov	r4, r0
 8023832:	2301      	movs	r3, #1
 8023834:	e7f0      	b.n	8023818 <_svfiprintf_r+0x194>
 8023836:	ab03      	add	r3, sp, #12
 8023838:	9300      	str	r3, [sp, #0]
 802383a:	462a      	mov	r2, r5
 802383c:	4b0f      	ldr	r3, [pc, #60]	; (802387c <_svfiprintf_r+0x1f8>)
 802383e:	a904      	add	r1, sp, #16
 8023840:	4638      	mov	r0, r7
 8023842:	f3af 8000 	nop.w
 8023846:	1c42      	adds	r2, r0, #1
 8023848:	4606      	mov	r6, r0
 802384a:	d1d6      	bne.n	80237fa <_svfiprintf_r+0x176>
 802384c:	89ab      	ldrh	r3, [r5, #12]
 802384e:	065b      	lsls	r3, r3, #25
 8023850:	f53f af2c 	bmi.w	80236ac <_svfiprintf_r+0x28>
 8023854:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023856:	b01d      	add	sp, #116	; 0x74
 8023858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802385c:	ab03      	add	r3, sp, #12
 802385e:	9300      	str	r3, [sp, #0]
 8023860:	462a      	mov	r2, r5
 8023862:	4b06      	ldr	r3, [pc, #24]	; (802387c <_svfiprintf_r+0x1f8>)
 8023864:	a904      	add	r1, sp, #16
 8023866:	4638      	mov	r0, r7
 8023868:	f000 f9d4 	bl	8023c14 <_printf_i>
 802386c:	e7eb      	b.n	8023846 <_svfiprintf_r+0x1c2>
 802386e:	bf00      	nop
 8023870:	0802b623 	.word	0x0802b623
 8023874:	0802b62d 	.word	0x0802b62d
 8023878:	00000000 	.word	0x00000000
 802387c:	080235cd 	.word	0x080235cd
 8023880:	0802b629 	.word	0x0802b629

08023884 <__sfputc_r>:
 8023884:	6893      	ldr	r3, [r2, #8]
 8023886:	3b01      	subs	r3, #1
 8023888:	2b00      	cmp	r3, #0
 802388a:	b410      	push	{r4}
 802388c:	6093      	str	r3, [r2, #8]
 802388e:	da08      	bge.n	80238a2 <__sfputc_r+0x1e>
 8023890:	6994      	ldr	r4, [r2, #24]
 8023892:	42a3      	cmp	r3, r4
 8023894:	db01      	blt.n	802389a <__sfputc_r+0x16>
 8023896:	290a      	cmp	r1, #10
 8023898:	d103      	bne.n	80238a2 <__sfputc_r+0x1e>
 802389a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802389e:	f7ff bb75 	b.w	8022f8c <__swbuf_r>
 80238a2:	6813      	ldr	r3, [r2, #0]
 80238a4:	1c58      	adds	r0, r3, #1
 80238a6:	6010      	str	r0, [r2, #0]
 80238a8:	7019      	strb	r1, [r3, #0]
 80238aa:	4608      	mov	r0, r1
 80238ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80238b0:	4770      	bx	lr

080238b2 <__sfputs_r>:
 80238b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80238b4:	4606      	mov	r6, r0
 80238b6:	460f      	mov	r7, r1
 80238b8:	4614      	mov	r4, r2
 80238ba:	18d5      	adds	r5, r2, r3
 80238bc:	42ac      	cmp	r4, r5
 80238be:	d101      	bne.n	80238c4 <__sfputs_r+0x12>
 80238c0:	2000      	movs	r0, #0
 80238c2:	e007      	b.n	80238d4 <__sfputs_r+0x22>
 80238c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80238c8:	463a      	mov	r2, r7
 80238ca:	4630      	mov	r0, r6
 80238cc:	f7ff ffda 	bl	8023884 <__sfputc_r>
 80238d0:	1c43      	adds	r3, r0, #1
 80238d2:	d1f3      	bne.n	80238bc <__sfputs_r+0xa>
 80238d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080238d8 <_vfiprintf_r>:
 80238d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238dc:	460d      	mov	r5, r1
 80238de:	b09d      	sub	sp, #116	; 0x74
 80238e0:	4614      	mov	r4, r2
 80238e2:	4698      	mov	r8, r3
 80238e4:	4606      	mov	r6, r0
 80238e6:	b118      	cbz	r0, 80238f0 <_vfiprintf_r+0x18>
 80238e8:	6983      	ldr	r3, [r0, #24]
 80238ea:	b90b      	cbnz	r3, 80238f0 <_vfiprintf_r+0x18>
 80238ec:	f7fd fbf8 	bl	80210e0 <__sinit>
 80238f0:	4b89      	ldr	r3, [pc, #548]	; (8023b18 <_vfiprintf_r+0x240>)
 80238f2:	429d      	cmp	r5, r3
 80238f4:	d11b      	bne.n	802392e <_vfiprintf_r+0x56>
 80238f6:	6875      	ldr	r5, [r6, #4]
 80238f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80238fa:	07d9      	lsls	r1, r3, #31
 80238fc:	d405      	bmi.n	802390a <_vfiprintf_r+0x32>
 80238fe:	89ab      	ldrh	r3, [r5, #12]
 8023900:	059a      	lsls	r2, r3, #22
 8023902:	d402      	bmi.n	802390a <_vfiprintf_r+0x32>
 8023904:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023906:	f7fd ff9e 	bl	8021846 <__retarget_lock_acquire_recursive>
 802390a:	89ab      	ldrh	r3, [r5, #12]
 802390c:	071b      	lsls	r3, r3, #28
 802390e:	d501      	bpl.n	8023914 <_vfiprintf_r+0x3c>
 8023910:	692b      	ldr	r3, [r5, #16]
 8023912:	b9eb      	cbnz	r3, 8023950 <_vfiprintf_r+0x78>
 8023914:	4629      	mov	r1, r5
 8023916:	4630      	mov	r0, r6
 8023918:	f7ff fb9c 	bl	8023054 <__swsetup_r>
 802391c:	b1c0      	cbz	r0, 8023950 <_vfiprintf_r+0x78>
 802391e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023920:	07dc      	lsls	r4, r3, #31
 8023922:	d50e      	bpl.n	8023942 <_vfiprintf_r+0x6a>
 8023924:	f04f 30ff 	mov.w	r0, #4294967295
 8023928:	b01d      	add	sp, #116	; 0x74
 802392a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802392e:	4b7b      	ldr	r3, [pc, #492]	; (8023b1c <_vfiprintf_r+0x244>)
 8023930:	429d      	cmp	r5, r3
 8023932:	d101      	bne.n	8023938 <_vfiprintf_r+0x60>
 8023934:	68b5      	ldr	r5, [r6, #8]
 8023936:	e7df      	b.n	80238f8 <_vfiprintf_r+0x20>
 8023938:	4b79      	ldr	r3, [pc, #484]	; (8023b20 <_vfiprintf_r+0x248>)
 802393a:	429d      	cmp	r5, r3
 802393c:	bf08      	it	eq
 802393e:	68f5      	ldreq	r5, [r6, #12]
 8023940:	e7da      	b.n	80238f8 <_vfiprintf_r+0x20>
 8023942:	89ab      	ldrh	r3, [r5, #12]
 8023944:	0598      	lsls	r0, r3, #22
 8023946:	d4ed      	bmi.n	8023924 <_vfiprintf_r+0x4c>
 8023948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802394a:	f7fd ff7e 	bl	802184a <__retarget_lock_release_recursive>
 802394e:	e7e9      	b.n	8023924 <_vfiprintf_r+0x4c>
 8023950:	2300      	movs	r3, #0
 8023952:	9309      	str	r3, [sp, #36]	; 0x24
 8023954:	2320      	movs	r3, #32
 8023956:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802395a:	f8cd 800c 	str.w	r8, [sp, #12]
 802395e:	2330      	movs	r3, #48	; 0x30
 8023960:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8023b24 <_vfiprintf_r+0x24c>
 8023964:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023968:	f04f 0901 	mov.w	r9, #1
 802396c:	4623      	mov	r3, r4
 802396e:	469a      	mov	sl, r3
 8023970:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023974:	b10a      	cbz	r2, 802397a <_vfiprintf_r+0xa2>
 8023976:	2a25      	cmp	r2, #37	; 0x25
 8023978:	d1f9      	bne.n	802396e <_vfiprintf_r+0x96>
 802397a:	ebba 0b04 	subs.w	fp, sl, r4
 802397e:	d00b      	beq.n	8023998 <_vfiprintf_r+0xc0>
 8023980:	465b      	mov	r3, fp
 8023982:	4622      	mov	r2, r4
 8023984:	4629      	mov	r1, r5
 8023986:	4630      	mov	r0, r6
 8023988:	f7ff ff93 	bl	80238b2 <__sfputs_r>
 802398c:	3001      	adds	r0, #1
 802398e:	f000 80aa 	beq.w	8023ae6 <_vfiprintf_r+0x20e>
 8023992:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023994:	445a      	add	r2, fp
 8023996:	9209      	str	r2, [sp, #36]	; 0x24
 8023998:	f89a 3000 	ldrb.w	r3, [sl]
 802399c:	2b00      	cmp	r3, #0
 802399e:	f000 80a2 	beq.w	8023ae6 <_vfiprintf_r+0x20e>
 80239a2:	2300      	movs	r3, #0
 80239a4:	f04f 32ff 	mov.w	r2, #4294967295
 80239a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80239ac:	f10a 0a01 	add.w	sl, sl, #1
 80239b0:	9304      	str	r3, [sp, #16]
 80239b2:	9307      	str	r3, [sp, #28]
 80239b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80239b8:	931a      	str	r3, [sp, #104]	; 0x68
 80239ba:	4654      	mov	r4, sl
 80239bc:	2205      	movs	r2, #5
 80239be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80239c2:	4858      	ldr	r0, [pc, #352]	; (8023b24 <_vfiprintf_r+0x24c>)
 80239c4:	f7dc fc4c 	bl	8000260 <memchr>
 80239c8:	9a04      	ldr	r2, [sp, #16]
 80239ca:	b9d8      	cbnz	r0, 8023a04 <_vfiprintf_r+0x12c>
 80239cc:	06d1      	lsls	r1, r2, #27
 80239ce:	bf44      	itt	mi
 80239d0:	2320      	movmi	r3, #32
 80239d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80239d6:	0713      	lsls	r3, r2, #28
 80239d8:	bf44      	itt	mi
 80239da:	232b      	movmi	r3, #43	; 0x2b
 80239dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80239e0:	f89a 3000 	ldrb.w	r3, [sl]
 80239e4:	2b2a      	cmp	r3, #42	; 0x2a
 80239e6:	d015      	beq.n	8023a14 <_vfiprintf_r+0x13c>
 80239e8:	9a07      	ldr	r2, [sp, #28]
 80239ea:	4654      	mov	r4, sl
 80239ec:	2000      	movs	r0, #0
 80239ee:	f04f 0c0a 	mov.w	ip, #10
 80239f2:	4621      	mov	r1, r4
 80239f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80239f8:	3b30      	subs	r3, #48	; 0x30
 80239fa:	2b09      	cmp	r3, #9
 80239fc:	d94e      	bls.n	8023a9c <_vfiprintf_r+0x1c4>
 80239fe:	b1b0      	cbz	r0, 8023a2e <_vfiprintf_r+0x156>
 8023a00:	9207      	str	r2, [sp, #28]
 8023a02:	e014      	b.n	8023a2e <_vfiprintf_r+0x156>
 8023a04:	eba0 0308 	sub.w	r3, r0, r8
 8023a08:	fa09 f303 	lsl.w	r3, r9, r3
 8023a0c:	4313      	orrs	r3, r2
 8023a0e:	9304      	str	r3, [sp, #16]
 8023a10:	46a2      	mov	sl, r4
 8023a12:	e7d2      	b.n	80239ba <_vfiprintf_r+0xe2>
 8023a14:	9b03      	ldr	r3, [sp, #12]
 8023a16:	1d19      	adds	r1, r3, #4
 8023a18:	681b      	ldr	r3, [r3, #0]
 8023a1a:	9103      	str	r1, [sp, #12]
 8023a1c:	2b00      	cmp	r3, #0
 8023a1e:	bfbb      	ittet	lt
 8023a20:	425b      	neglt	r3, r3
 8023a22:	f042 0202 	orrlt.w	r2, r2, #2
 8023a26:	9307      	strge	r3, [sp, #28]
 8023a28:	9307      	strlt	r3, [sp, #28]
 8023a2a:	bfb8      	it	lt
 8023a2c:	9204      	strlt	r2, [sp, #16]
 8023a2e:	7823      	ldrb	r3, [r4, #0]
 8023a30:	2b2e      	cmp	r3, #46	; 0x2e
 8023a32:	d10c      	bne.n	8023a4e <_vfiprintf_r+0x176>
 8023a34:	7863      	ldrb	r3, [r4, #1]
 8023a36:	2b2a      	cmp	r3, #42	; 0x2a
 8023a38:	d135      	bne.n	8023aa6 <_vfiprintf_r+0x1ce>
 8023a3a:	9b03      	ldr	r3, [sp, #12]
 8023a3c:	1d1a      	adds	r2, r3, #4
 8023a3e:	681b      	ldr	r3, [r3, #0]
 8023a40:	9203      	str	r2, [sp, #12]
 8023a42:	2b00      	cmp	r3, #0
 8023a44:	bfb8      	it	lt
 8023a46:	f04f 33ff 	movlt.w	r3, #4294967295
 8023a4a:	3402      	adds	r4, #2
 8023a4c:	9305      	str	r3, [sp, #20]
 8023a4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8023b34 <_vfiprintf_r+0x25c>
 8023a52:	7821      	ldrb	r1, [r4, #0]
 8023a54:	2203      	movs	r2, #3
 8023a56:	4650      	mov	r0, sl
 8023a58:	f7dc fc02 	bl	8000260 <memchr>
 8023a5c:	b140      	cbz	r0, 8023a70 <_vfiprintf_r+0x198>
 8023a5e:	2340      	movs	r3, #64	; 0x40
 8023a60:	eba0 000a 	sub.w	r0, r0, sl
 8023a64:	fa03 f000 	lsl.w	r0, r3, r0
 8023a68:	9b04      	ldr	r3, [sp, #16]
 8023a6a:	4303      	orrs	r3, r0
 8023a6c:	3401      	adds	r4, #1
 8023a6e:	9304      	str	r3, [sp, #16]
 8023a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023a74:	482c      	ldr	r0, [pc, #176]	; (8023b28 <_vfiprintf_r+0x250>)
 8023a76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023a7a:	2206      	movs	r2, #6
 8023a7c:	f7dc fbf0 	bl	8000260 <memchr>
 8023a80:	2800      	cmp	r0, #0
 8023a82:	d03f      	beq.n	8023b04 <_vfiprintf_r+0x22c>
 8023a84:	4b29      	ldr	r3, [pc, #164]	; (8023b2c <_vfiprintf_r+0x254>)
 8023a86:	bb1b      	cbnz	r3, 8023ad0 <_vfiprintf_r+0x1f8>
 8023a88:	9b03      	ldr	r3, [sp, #12]
 8023a8a:	3307      	adds	r3, #7
 8023a8c:	f023 0307 	bic.w	r3, r3, #7
 8023a90:	3308      	adds	r3, #8
 8023a92:	9303      	str	r3, [sp, #12]
 8023a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023a96:	443b      	add	r3, r7
 8023a98:	9309      	str	r3, [sp, #36]	; 0x24
 8023a9a:	e767      	b.n	802396c <_vfiprintf_r+0x94>
 8023a9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8023aa0:	460c      	mov	r4, r1
 8023aa2:	2001      	movs	r0, #1
 8023aa4:	e7a5      	b.n	80239f2 <_vfiprintf_r+0x11a>
 8023aa6:	2300      	movs	r3, #0
 8023aa8:	3401      	adds	r4, #1
 8023aaa:	9305      	str	r3, [sp, #20]
 8023aac:	4619      	mov	r1, r3
 8023aae:	f04f 0c0a 	mov.w	ip, #10
 8023ab2:	4620      	mov	r0, r4
 8023ab4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023ab8:	3a30      	subs	r2, #48	; 0x30
 8023aba:	2a09      	cmp	r2, #9
 8023abc:	d903      	bls.n	8023ac6 <_vfiprintf_r+0x1ee>
 8023abe:	2b00      	cmp	r3, #0
 8023ac0:	d0c5      	beq.n	8023a4e <_vfiprintf_r+0x176>
 8023ac2:	9105      	str	r1, [sp, #20]
 8023ac4:	e7c3      	b.n	8023a4e <_vfiprintf_r+0x176>
 8023ac6:	fb0c 2101 	mla	r1, ip, r1, r2
 8023aca:	4604      	mov	r4, r0
 8023acc:	2301      	movs	r3, #1
 8023ace:	e7f0      	b.n	8023ab2 <_vfiprintf_r+0x1da>
 8023ad0:	ab03      	add	r3, sp, #12
 8023ad2:	9300      	str	r3, [sp, #0]
 8023ad4:	462a      	mov	r2, r5
 8023ad6:	4b16      	ldr	r3, [pc, #88]	; (8023b30 <_vfiprintf_r+0x258>)
 8023ad8:	a904      	add	r1, sp, #16
 8023ada:	4630      	mov	r0, r6
 8023adc:	f3af 8000 	nop.w
 8023ae0:	4607      	mov	r7, r0
 8023ae2:	1c78      	adds	r0, r7, #1
 8023ae4:	d1d6      	bne.n	8023a94 <_vfiprintf_r+0x1bc>
 8023ae6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023ae8:	07d9      	lsls	r1, r3, #31
 8023aea:	d405      	bmi.n	8023af8 <_vfiprintf_r+0x220>
 8023aec:	89ab      	ldrh	r3, [r5, #12]
 8023aee:	059a      	lsls	r2, r3, #22
 8023af0:	d402      	bmi.n	8023af8 <_vfiprintf_r+0x220>
 8023af2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023af4:	f7fd fea9 	bl	802184a <__retarget_lock_release_recursive>
 8023af8:	89ab      	ldrh	r3, [r5, #12]
 8023afa:	065b      	lsls	r3, r3, #25
 8023afc:	f53f af12 	bmi.w	8023924 <_vfiprintf_r+0x4c>
 8023b00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023b02:	e711      	b.n	8023928 <_vfiprintf_r+0x50>
 8023b04:	ab03      	add	r3, sp, #12
 8023b06:	9300      	str	r3, [sp, #0]
 8023b08:	462a      	mov	r2, r5
 8023b0a:	4b09      	ldr	r3, [pc, #36]	; (8023b30 <_vfiprintf_r+0x258>)
 8023b0c:	a904      	add	r1, sp, #16
 8023b0e:	4630      	mov	r0, r6
 8023b10:	f000 f880 	bl	8023c14 <_printf_i>
 8023b14:	e7e4      	b.n	8023ae0 <_vfiprintf_r+0x208>
 8023b16:	bf00      	nop
 8023b18:	0802b0a4 	.word	0x0802b0a4
 8023b1c:	0802b0c4 	.word	0x0802b0c4
 8023b20:	0802b084 	.word	0x0802b084
 8023b24:	0802b623 	.word	0x0802b623
 8023b28:	0802b62d 	.word	0x0802b62d
 8023b2c:	00000000 	.word	0x00000000
 8023b30:	080238b3 	.word	0x080238b3
 8023b34:	0802b629 	.word	0x0802b629

08023b38 <_printf_common>:
 8023b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023b3c:	4616      	mov	r6, r2
 8023b3e:	4699      	mov	r9, r3
 8023b40:	688a      	ldr	r2, [r1, #8]
 8023b42:	690b      	ldr	r3, [r1, #16]
 8023b44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8023b48:	4293      	cmp	r3, r2
 8023b4a:	bfb8      	it	lt
 8023b4c:	4613      	movlt	r3, r2
 8023b4e:	6033      	str	r3, [r6, #0]
 8023b50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8023b54:	4607      	mov	r7, r0
 8023b56:	460c      	mov	r4, r1
 8023b58:	b10a      	cbz	r2, 8023b5e <_printf_common+0x26>
 8023b5a:	3301      	adds	r3, #1
 8023b5c:	6033      	str	r3, [r6, #0]
 8023b5e:	6823      	ldr	r3, [r4, #0]
 8023b60:	0699      	lsls	r1, r3, #26
 8023b62:	bf42      	ittt	mi
 8023b64:	6833      	ldrmi	r3, [r6, #0]
 8023b66:	3302      	addmi	r3, #2
 8023b68:	6033      	strmi	r3, [r6, #0]
 8023b6a:	6825      	ldr	r5, [r4, #0]
 8023b6c:	f015 0506 	ands.w	r5, r5, #6
 8023b70:	d106      	bne.n	8023b80 <_printf_common+0x48>
 8023b72:	f104 0a19 	add.w	sl, r4, #25
 8023b76:	68e3      	ldr	r3, [r4, #12]
 8023b78:	6832      	ldr	r2, [r6, #0]
 8023b7a:	1a9b      	subs	r3, r3, r2
 8023b7c:	42ab      	cmp	r3, r5
 8023b7e:	dc26      	bgt.n	8023bce <_printf_common+0x96>
 8023b80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8023b84:	1e13      	subs	r3, r2, #0
 8023b86:	6822      	ldr	r2, [r4, #0]
 8023b88:	bf18      	it	ne
 8023b8a:	2301      	movne	r3, #1
 8023b8c:	0692      	lsls	r2, r2, #26
 8023b8e:	d42b      	bmi.n	8023be8 <_printf_common+0xb0>
 8023b90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8023b94:	4649      	mov	r1, r9
 8023b96:	4638      	mov	r0, r7
 8023b98:	47c0      	blx	r8
 8023b9a:	3001      	adds	r0, #1
 8023b9c:	d01e      	beq.n	8023bdc <_printf_common+0xa4>
 8023b9e:	6823      	ldr	r3, [r4, #0]
 8023ba0:	68e5      	ldr	r5, [r4, #12]
 8023ba2:	6832      	ldr	r2, [r6, #0]
 8023ba4:	f003 0306 	and.w	r3, r3, #6
 8023ba8:	2b04      	cmp	r3, #4
 8023baa:	bf08      	it	eq
 8023bac:	1aad      	subeq	r5, r5, r2
 8023bae:	68a3      	ldr	r3, [r4, #8]
 8023bb0:	6922      	ldr	r2, [r4, #16]
 8023bb2:	bf0c      	ite	eq
 8023bb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023bb8:	2500      	movne	r5, #0
 8023bba:	4293      	cmp	r3, r2
 8023bbc:	bfc4      	itt	gt
 8023bbe:	1a9b      	subgt	r3, r3, r2
 8023bc0:	18ed      	addgt	r5, r5, r3
 8023bc2:	2600      	movs	r6, #0
 8023bc4:	341a      	adds	r4, #26
 8023bc6:	42b5      	cmp	r5, r6
 8023bc8:	d11a      	bne.n	8023c00 <_printf_common+0xc8>
 8023bca:	2000      	movs	r0, #0
 8023bcc:	e008      	b.n	8023be0 <_printf_common+0xa8>
 8023bce:	2301      	movs	r3, #1
 8023bd0:	4652      	mov	r2, sl
 8023bd2:	4649      	mov	r1, r9
 8023bd4:	4638      	mov	r0, r7
 8023bd6:	47c0      	blx	r8
 8023bd8:	3001      	adds	r0, #1
 8023bda:	d103      	bne.n	8023be4 <_printf_common+0xac>
 8023bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8023be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023be4:	3501      	adds	r5, #1
 8023be6:	e7c6      	b.n	8023b76 <_printf_common+0x3e>
 8023be8:	18e1      	adds	r1, r4, r3
 8023bea:	1c5a      	adds	r2, r3, #1
 8023bec:	2030      	movs	r0, #48	; 0x30
 8023bee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8023bf2:	4422      	add	r2, r4
 8023bf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8023bf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8023bfc:	3302      	adds	r3, #2
 8023bfe:	e7c7      	b.n	8023b90 <_printf_common+0x58>
 8023c00:	2301      	movs	r3, #1
 8023c02:	4622      	mov	r2, r4
 8023c04:	4649      	mov	r1, r9
 8023c06:	4638      	mov	r0, r7
 8023c08:	47c0      	blx	r8
 8023c0a:	3001      	adds	r0, #1
 8023c0c:	d0e6      	beq.n	8023bdc <_printf_common+0xa4>
 8023c0e:	3601      	adds	r6, #1
 8023c10:	e7d9      	b.n	8023bc6 <_printf_common+0x8e>
	...

08023c14 <_printf_i>:
 8023c14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023c18:	460c      	mov	r4, r1
 8023c1a:	4691      	mov	r9, r2
 8023c1c:	7e27      	ldrb	r7, [r4, #24]
 8023c1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023c20:	2f78      	cmp	r7, #120	; 0x78
 8023c22:	4680      	mov	r8, r0
 8023c24:	469a      	mov	sl, r3
 8023c26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8023c2a:	d807      	bhi.n	8023c3c <_printf_i+0x28>
 8023c2c:	2f62      	cmp	r7, #98	; 0x62
 8023c2e:	d80a      	bhi.n	8023c46 <_printf_i+0x32>
 8023c30:	2f00      	cmp	r7, #0
 8023c32:	f000 80d8 	beq.w	8023de6 <_printf_i+0x1d2>
 8023c36:	2f58      	cmp	r7, #88	; 0x58
 8023c38:	f000 80a3 	beq.w	8023d82 <_printf_i+0x16e>
 8023c3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8023c40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8023c44:	e03a      	b.n	8023cbc <_printf_i+0xa8>
 8023c46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8023c4a:	2b15      	cmp	r3, #21
 8023c4c:	d8f6      	bhi.n	8023c3c <_printf_i+0x28>
 8023c4e:	a001      	add	r0, pc, #4	; (adr r0, 8023c54 <_printf_i+0x40>)
 8023c50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8023c54:	08023cad 	.word	0x08023cad
 8023c58:	08023cc1 	.word	0x08023cc1
 8023c5c:	08023c3d 	.word	0x08023c3d
 8023c60:	08023c3d 	.word	0x08023c3d
 8023c64:	08023c3d 	.word	0x08023c3d
 8023c68:	08023c3d 	.word	0x08023c3d
 8023c6c:	08023cc1 	.word	0x08023cc1
 8023c70:	08023c3d 	.word	0x08023c3d
 8023c74:	08023c3d 	.word	0x08023c3d
 8023c78:	08023c3d 	.word	0x08023c3d
 8023c7c:	08023c3d 	.word	0x08023c3d
 8023c80:	08023dcd 	.word	0x08023dcd
 8023c84:	08023cf1 	.word	0x08023cf1
 8023c88:	08023daf 	.word	0x08023daf
 8023c8c:	08023c3d 	.word	0x08023c3d
 8023c90:	08023c3d 	.word	0x08023c3d
 8023c94:	08023def 	.word	0x08023def
 8023c98:	08023c3d 	.word	0x08023c3d
 8023c9c:	08023cf1 	.word	0x08023cf1
 8023ca0:	08023c3d 	.word	0x08023c3d
 8023ca4:	08023c3d 	.word	0x08023c3d
 8023ca8:	08023db7 	.word	0x08023db7
 8023cac:	680b      	ldr	r3, [r1, #0]
 8023cae:	1d1a      	adds	r2, r3, #4
 8023cb0:	681b      	ldr	r3, [r3, #0]
 8023cb2:	600a      	str	r2, [r1, #0]
 8023cb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8023cb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8023cbc:	2301      	movs	r3, #1
 8023cbe:	e0a3      	b.n	8023e08 <_printf_i+0x1f4>
 8023cc0:	6825      	ldr	r5, [r4, #0]
 8023cc2:	6808      	ldr	r0, [r1, #0]
 8023cc4:	062e      	lsls	r6, r5, #24
 8023cc6:	f100 0304 	add.w	r3, r0, #4
 8023cca:	d50a      	bpl.n	8023ce2 <_printf_i+0xce>
 8023ccc:	6805      	ldr	r5, [r0, #0]
 8023cce:	600b      	str	r3, [r1, #0]
 8023cd0:	2d00      	cmp	r5, #0
 8023cd2:	da03      	bge.n	8023cdc <_printf_i+0xc8>
 8023cd4:	232d      	movs	r3, #45	; 0x2d
 8023cd6:	426d      	negs	r5, r5
 8023cd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023cdc:	485e      	ldr	r0, [pc, #376]	; (8023e58 <_printf_i+0x244>)
 8023cde:	230a      	movs	r3, #10
 8023ce0:	e019      	b.n	8023d16 <_printf_i+0x102>
 8023ce2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8023ce6:	6805      	ldr	r5, [r0, #0]
 8023ce8:	600b      	str	r3, [r1, #0]
 8023cea:	bf18      	it	ne
 8023cec:	b22d      	sxthne	r5, r5
 8023cee:	e7ef      	b.n	8023cd0 <_printf_i+0xbc>
 8023cf0:	680b      	ldr	r3, [r1, #0]
 8023cf2:	6825      	ldr	r5, [r4, #0]
 8023cf4:	1d18      	adds	r0, r3, #4
 8023cf6:	6008      	str	r0, [r1, #0]
 8023cf8:	0628      	lsls	r0, r5, #24
 8023cfa:	d501      	bpl.n	8023d00 <_printf_i+0xec>
 8023cfc:	681d      	ldr	r5, [r3, #0]
 8023cfe:	e002      	b.n	8023d06 <_printf_i+0xf2>
 8023d00:	0669      	lsls	r1, r5, #25
 8023d02:	d5fb      	bpl.n	8023cfc <_printf_i+0xe8>
 8023d04:	881d      	ldrh	r5, [r3, #0]
 8023d06:	4854      	ldr	r0, [pc, #336]	; (8023e58 <_printf_i+0x244>)
 8023d08:	2f6f      	cmp	r7, #111	; 0x6f
 8023d0a:	bf0c      	ite	eq
 8023d0c:	2308      	moveq	r3, #8
 8023d0e:	230a      	movne	r3, #10
 8023d10:	2100      	movs	r1, #0
 8023d12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8023d16:	6866      	ldr	r6, [r4, #4]
 8023d18:	60a6      	str	r6, [r4, #8]
 8023d1a:	2e00      	cmp	r6, #0
 8023d1c:	bfa2      	ittt	ge
 8023d1e:	6821      	ldrge	r1, [r4, #0]
 8023d20:	f021 0104 	bicge.w	r1, r1, #4
 8023d24:	6021      	strge	r1, [r4, #0]
 8023d26:	b90d      	cbnz	r5, 8023d2c <_printf_i+0x118>
 8023d28:	2e00      	cmp	r6, #0
 8023d2a:	d04d      	beq.n	8023dc8 <_printf_i+0x1b4>
 8023d2c:	4616      	mov	r6, r2
 8023d2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8023d32:	fb03 5711 	mls	r7, r3, r1, r5
 8023d36:	5dc7      	ldrb	r7, [r0, r7]
 8023d38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8023d3c:	462f      	mov	r7, r5
 8023d3e:	42bb      	cmp	r3, r7
 8023d40:	460d      	mov	r5, r1
 8023d42:	d9f4      	bls.n	8023d2e <_printf_i+0x11a>
 8023d44:	2b08      	cmp	r3, #8
 8023d46:	d10b      	bne.n	8023d60 <_printf_i+0x14c>
 8023d48:	6823      	ldr	r3, [r4, #0]
 8023d4a:	07df      	lsls	r7, r3, #31
 8023d4c:	d508      	bpl.n	8023d60 <_printf_i+0x14c>
 8023d4e:	6923      	ldr	r3, [r4, #16]
 8023d50:	6861      	ldr	r1, [r4, #4]
 8023d52:	4299      	cmp	r1, r3
 8023d54:	bfde      	ittt	le
 8023d56:	2330      	movle	r3, #48	; 0x30
 8023d58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8023d5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8023d60:	1b92      	subs	r2, r2, r6
 8023d62:	6122      	str	r2, [r4, #16]
 8023d64:	f8cd a000 	str.w	sl, [sp]
 8023d68:	464b      	mov	r3, r9
 8023d6a:	aa03      	add	r2, sp, #12
 8023d6c:	4621      	mov	r1, r4
 8023d6e:	4640      	mov	r0, r8
 8023d70:	f7ff fee2 	bl	8023b38 <_printf_common>
 8023d74:	3001      	adds	r0, #1
 8023d76:	d14c      	bne.n	8023e12 <_printf_i+0x1fe>
 8023d78:	f04f 30ff 	mov.w	r0, #4294967295
 8023d7c:	b004      	add	sp, #16
 8023d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023d82:	4835      	ldr	r0, [pc, #212]	; (8023e58 <_printf_i+0x244>)
 8023d84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8023d88:	6823      	ldr	r3, [r4, #0]
 8023d8a:	680e      	ldr	r6, [r1, #0]
 8023d8c:	061f      	lsls	r7, r3, #24
 8023d8e:	f856 5b04 	ldr.w	r5, [r6], #4
 8023d92:	600e      	str	r6, [r1, #0]
 8023d94:	d514      	bpl.n	8023dc0 <_printf_i+0x1ac>
 8023d96:	07d9      	lsls	r1, r3, #31
 8023d98:	bf44      	itt	mi
 8023d9a:	f043 0320 	orrmi.w	r3, r3, #32
 8023d9e:	6023      	strmi	r3, [r4, #0]
 8023da0:	b91d      	cbnz	r5, 8023daa <_printf_i+0x196>
 8023da2:	6823      	ldr	r3, [r4, #0]
 8023da4:	f023 0320 	bic.w	r3, r3, #32
 8023da8:	6023      	str	r3, [r4, #0]
 8023daa:	2310      	movs	r3, #16
 8023dac:	e7b0      	b.n	8023d10 <_printf_i+0xfc>
 8023dae:	6823      	ldr	r3, [r4, #0]
 8023db0:	f043 0320 	orr.w	r3, r3, #32
 8023db4:	6023      	str	r3, [r4, #0]
 8023db6:	2378      	movs	r3, #120	; 0x78
 8023db8:	4828      	ldr	r0, [pc, #160]	; (8023e5c <_printf_i+0x248>)
 8023dba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8023dbe:	e7e3      	b.n	8023d88 <_printf_i+0x174>
 8023dc0:	065e      	lsls	r6, r3, #25
 8023dc2:	bf48      	it	mi
 8023dc4:	b2ad      	uxthmi	r5, r5
 8023dc6:	e7e6      	b.n	8023d96 <_printf_i+0x182>
 8023dc8:	4616      	mov	r6, r2
 8023dca:	e7bb      	b.n	8023d44 <_printf_i+0x130>
 8023dcc:	680b      	ldr	r3, [r1, #0]
 8023dce:	6826      	ldr	r6, [r4, #0]
 8023dd0:	6960      	ldr	r0, [r4, #20]
 8023dd2:	1d1d      	adds	r5, r3, #4
 8023dd4:	600d      	str	r5, [r1, #0]
 8023dd6:	0635      	lsls	r5, r6, #24
 8023dd8:	681b      	ldr	r3, [r3, #0]
 8023dda:	d501      	bpl.n	8023de0 <_printf_i+0x1cc>
 8023ddc:	6018      	str	r0, [r3, #0]
 8023dde:	e002      	b.n	8023de6 <_printf_i+0x1d2>
 8023de0:	0671      	lsls	r1, r6, #25
 8023de2:	d5fb      	bpl.n	8023ddc <_printf_i+0x1c8>
 8023de4:	8018      	strh	r0, [r3, #0]
 8023de6:	2300      	movs	r3, #0
 8023de8:	6123      	str	r3, [r4, #16]
 8023dea:	4616      	mov	r6, r2
 8023dec:	e7ba      	b.n	8023d64 <_printf_i+0x150>
 8023dee:	680b      	ldr	r3, [r1, #0]
 8023df0:	1d1a      	adds	r2, r3, #4
 8023df2:	600a      	str	r2, [r1, #0]
 8023df4:	681e      	ldr	r6, [r3, #0]
 8023df6:	6862      	ldr	r2, [r4, #4]
 8023df8:	2100      	movs	r1, #0
 8023dfa:	4630      	mov	r0, r6
 8023dfc:	f7dc fa30 	bl	8000260 <memchr>
 8023e00:	b108      	cbz	r0, 8023e06 <_printf_i+0x1f2>
 8023e02:	1b80      	subs	r0, r0, r6
 8023e04:	6060      	str	r0, [r4, #4]
 8023e06:	6863      	ldr	r3, [r4, #4]
 8023e08:	6123      	str	r3, [r4, #16]
 8023e0a:	2300      	movs	r3, #0
 8023e0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023e10:	e7a8      	b.n	8023d64 <_printf_i+0x150>
 8023e12:	6923      	ldr	r3, [r4, #16]
 8023e14:	4632      	mov	r2, r6
 8023e16:	4649      	mov	r1, r9
 8023e18:	4640      	mov	r0, r8
 8023e1a:	47d0      	blx	sl
 8023e1c:	3001      	adds	r0, #1
 8023e1e:	d0ab      	beq.n	8023d78 <_printf_i+0x164>
 8023e20:	6823      	ldr	r3, [r4, #0]
 8023e22:	079b      	lsls	r3, r3, #30
 8023e24:	d413      	bmi.n	8023e4e <_printf_i+0x23a>
 8023e26:	68e0      	ldr	r0, [r4, #12]
 8023e28:	9b03      	ldr	r3, [sp, #12]
 8023e2a:	4298      	cmp	r0, r3
 8023e2c:	bfb8      	it	lt
 8023e2e:	4618      	movlt	r0, r3
 8023e30:	e7a4      	b.n	8023d7c <_printf_i+0x168>
 8023e32:	2301      	movs	r3, #1
 8023e34:	4632      	mov	r2, r6
 8023e36:	4649      	mov	r1, r9
 8023e38:	4640      	mov	r0, r8
 8023e3a:	47d0      	blx	sl
 8023e3c:	3001      	adds	r0, #1
 8023e3e:	d09b      	beq.n	8023d78 <_printf_i+0x164>
 8023e40:	3501      	adds	r5, #1
 8023e42:	68e3      	ldr	r3, [r4, #12]
 8023e44:	9903      	ldr	r1, [sp, #12]
 8023e46:	1a5b      	subs	r3, r3, r1
 8023e48:	42ab      	cmp	r3, r5
 8023e4a:	dcf2      	bgt.n	8023e32 <_printf_i+0x21e>
 8023e4c:	e7eb      	b.n	8023e26 <_printf_i+0x212>
 8023e4e:	2500      	movs	r5, #0
 8023e50:	f104 0619 	add.w	r6, r4, #25
 8023e54:	e7f5      	b.n	8023e42 <_printf_i+0x22e>
 8023e56:	bf00      	nop
 8023e58:	0802b634 	.word	0x0802b634
 8023e5c:	0802b645 	.word	0x0802b645

08023e60 <_putc_r>:
 8023e60:	b570      	push	{r4, r5, r6, lr}
 8023e62:	460d      	mov	r5, r1
 8023e64:	4614      	mov	r4, r2
 8023e66:	4606      	mov	r6, r0
 8023e68:	b118      	cbz	r0, 8023e72 <_putc_r+0x12>
 8023e6a:	6983      	ldr	r3, [r0, #24]
 8023e6c:	b90b      	cbnz	r3, 8023e72 <_putc_r+0x12>
 8023e6e:	f7fd f937 	bl	80210e0 <__sinit>
 8023e72:	4b1c      	ldr	r3, [pc, #112]	; (8023ee4 <_putc_r+0x84>)
 8023e74:	429c      	cmp	r4, r3
 8023e76:	d124      	bne.n	8023ec2 <_putc_r+0x62>
 8023e78:	6874      	ldr	r4, [r6, #4]
 8023e7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023e7c:	07d8      	lsls	r0, r3, #31
 8023e7e:	d405      	bmi.n	8023e8c <_putc_r+0x2c>
 8023e80:	89a3      	ldrh	r3, [r4, #12]
 8023e82:	0599      	lsls	r1, r3, #22
 8023e84:	d402      	bmi.n	8023e8c <_putc_r+0x2c>
 8023e86:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023e88:	f7fd fcdd 	bl	8021846 <__retarget_lock_acquire_recursive>
 8023e8c:	68a3      	ldr	r3, [r4, #8]
 8023e8e:	3b01      	subs	r3, #1
 8023e90:	2b00      	cmp	r3, #0
 8023e92:	60a3      	str	r3, [r4, #8]
 8023e94:	da05      	bge.n	8023ea2 <_putc_r+0x42>
 8023e96:	69a2      	ldr	r2, [r4, #24]
 8023e98:	4293      	cmp	r3, r2
 8023e9a:	db1c      	blt.n	8023ed6 <_putc_r+0x76>
 8023e9c:	b2eb      	uxtb	r3, r5
 8023e9e:	2b0a      	cmp	r3, #10
 8023ea0:	d019      	beq.n	8023ed6 <_putc_r+0x76>
 8023ea2:	6823      	ldr	r3, [r4, #0]
 8023ea4:	1c5a      	adds	r2, r3, #1
 8023ea6:	6022      	str	r2, [r4, #0]
 8023ea8:	701d      	strb	r5, [r3, #0]
 8023eaa:	b2ed      	uxtb	r5, r5
 8023eac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023eae:	07da      	lsls	r2, r3, #31
 8023eb0:	d405      	bmi.n	8023ebe <_putc_r+0x5e>
 8023eb2:	89a3      	ldrh	r3, [r4, #12]
 8023eb4:	059b      	lsls	r3, r3, #22
 8023eb6:	d402      	bmi.n	8023ebe <_putc_r+0x5e>
 8023eb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023eba:	f7fd fcc6 	bl	802184a <__retarget_lock_release_recursive>
 8023ebe:	4628      	mov	r0, r5
 8023ec0:	bd70      	pop	{r4, r5, r6, pc}
 8023ec2:	4b09      	ldr	r3, [pc, #36]	; (8023ee8 <_putc_r+0x88>)
 8023ec4:	429c      	cmp	r4, r3
 8023ec6:	d101      	bne.n	8023ecc <_putc_r+0x6c>
 8023ec8:	68b4      	ldr	r4, [r6, #8]
 8023eca:	e7d6      	b.n	8023e7a <_putc_r+0x1a>
 8023ecc:	4b07      	ldr	r3, [pc, #28]	; (8023eec <_putc_r+0x8c>)
 8023ece:	429c      	cmp	r4, r3
 8023ed0:	bf08      	it	eq
 8023ed2:	68f4      	ldreq	r4, [r6, #12]
 8023ed4:	e7d1      	b.n	8023e7a <_putc_r+0x1a>
 8023ed6:	4629      	mov	r1, r5
 8023ed8:	4622      	mov	r2, r4
 8023eda:	4630      	mov	r0, r6
 8023edc:	f7ff f856 	bl	8022f8c <__swbuf_r>
 8023ee0:	4605      	mov	r5, r0
 8023ee2:	e7e3      	b.n	8023eac <_putc_r+0x4c>
 8023ee4:	0802b0a4 	.word	0x0802b0a4
 8023ee8:	0802b0c4 	.word	0x0802b0c4
 8023eec:	0802b084 	.word	0x0802b084

08023ef0 <_read_r>:
 8023ef0:	b538      	push	{r3, r4, r5, lr}
 8023ef2:	4d07      	ldr	r5, [pc, #28]	; (8023f10 <_read_r+0x20>)
 8023ef4:	4604      	mov	r4, r0
 8023ef6:	4608      	mov	r0, r1
 8023ef8:	4611      	mov	r1, r2
 8023efa:	2200      	movs	r2, #0
 8023efc:	602a      	str	r2, [r5, #0]
 8023efe:	461a      	mov	r2, r3
 8023f00:	f7dc ff81 	bl	8000e06 <_read>
 8023f04:	1c43      	adds	r3, r0, #1
 8023f06:	d102      	bne.n	8023f0e <_read_r+0x1e>
 8023f08:	682b      	ldr	r3, [r5, #0]
 8023f0a:	b103      	cbz	r3, 8023f0e <_read_r+0x1e>
 8023f0c:	6023      	str	r3, [r4, #0]
 8023f0e:	bd38      	pop	{r3, r4, r5, pc}
 8023f10:	20001054 	.word	0x20001054

08023f14 <sniprintf>:
 8023f14:	b40c      	push	{r2, r3}
 8023f16:	b530      	push	{r4, r5, lr}
 8023f18:	4b17      	ldr	r3, [pc, #92]	; (8023f78 <sniprintf+0x64>)
 8023f1a:	1e0c      	subs	r4, r1, #0
 8023f1c:	681d      	ldr	r5, [r3, #0]
 8023f1e:	b09d      	sub	sp, #116	; 0x74
 8023f20:	da08      	bge.n	8023f34 <sniprintf+0x20>
 8023f22:	238b      	movs	r3, #139	; 0x8b
 8023f24:	602b      	str	r3, [r5, #0]
 8023f26:	f04f 30ff 	mov.w	r0, #4294967295
 8023f2a:	b01d      	add	sp, #116	; 0x74
 8023f2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8023f30:	b002      	add	sp, #8
 8023f32:	4770      	bx	lr
 8023f34:	f44f 7302 	mov.w	r3, #520	; 0x208
 8023f38:	f8ad 3014 	strh.w	r3, [sp, #20]
 8023f3c:	bf14      	ite	ne
 8023f3e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8023f42:	4623      	moveq	r3, r4
 8023f44:	9304      	str	r3, [sp, #16]
 8023f46:	9307      	str	r3, [sp, #28]
 8023f48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8023f4c:	9002      	str	r0, [sp, #8]
 8023f4e:	9006      	str	r0, [sp, #24]
 8023f50:	f8ad 3016 	strh.w	r3, [sp, #22]
 8023f54:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8023f56:	ab21      	add	r3, sp, #132	; 0x84
 8023f58:	a902      	add	r1, sp, #8
 8023f5a:	4628      	mov	r0, r5
 8023f5c:	9301      	str	r3, [sp, #4]
 8023f5e:	f7ff fb91 	bl	8023684 <_svfiprintf_r>
 8023f62:	1c43      	adds	r3, r0, #1
 8023f64:	bfbc      	itt	lt
 8023f66:	238b      	movlt	r3, #139	; 0x8b
 8023f68:	602b      	strlt	r3, [r5, #0]
 8023f6a:	2c00      	cmp	r4, #0
 8023f6c:	d0dd      	beq.n	8023f2a <sniprintf+0x16>
 8023f6e:	9b02      	ldr	r3, [sp, #8]
 8023f70:	2200      	movs	r2, #0
 8023f72:	701a      	strb	r2, [r3, #0]
 8023f74:	e7d9      	b.n	8023f2a <sniprintf+0x16>
 8023f76:	bf00      	nop
 8023f78:	20000108 	.word	0x20000108

08023f7c <siscanf>:
 8023f7c:	b40e      	push	{r1, r2, r3}
 8023f7e:	b510      	push	{r4, lr}
 8023f80:	b09f      	sub	sp, #124	; 0x7c
 8023f82:	ac21      	add	r4, sp, #132	; 0x84
 8023f84:	f44f 7101 	mov.w	r1, #516	; 0x204
 8023f88:	f854 2b04 	ldr.w	r2, [r4], #4
 8023f8c:	9201      	str	r2, [sp, #4]
 8023f8e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8023f92:	9004      	str	r0, [sp, #16]
 8023f94:	9008      	str	r0, [sp, #32]
 8023f96:	f7dc f951 	bl	800023c <strlen>
 8023f9a:	4b0c      	ldr	r3, [pc, #48]	; (8023fcc <siscanf+0x50>)
 8023f9c:	9005      	str	r0, [sp, #20]
 8023f9e:	9009      	str	r0, [sp, #36]	; 0x24
 8023fa0:	930d      	str	r3, [sp, #52]	; 0x34
 8023fa2:	480b      	ldr	r0, [pc, #44]	; (8023fd0 <siscanf+0x54>)
 8023fa4:	9a01      	ldr	r2, [sp, #4]
 8023fa6:	6800      	ldr	r0, [r0, #0]
 8023fa8:	9403      	str	r4, [sp, #12]
 8023faa:	2300      	movs	r3, #0
 8023fac:	9311      	str	r3, [sp, #68]	; 0x44
 8023fae:	9316      	str	r3, [sp, #88]	; 0x58
 8023fb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8023fb4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023fb8:	a904      	add	r1, sp, #16
 8023fba:	4623      	mov	r3, r4
 8023fbc:	f000 f8b2 	bl	8024124 <__ssvfiscanf_r>
 8023fc0:	b01f      	add	sp, #124	; 0x7c
 8023fc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023fc6:	b003      	add	sp, #12
 8023fc8:	4770      	bx	lr
 8023fca:	bf00      	nop
 8023fcc:	08021d1b 	.word	0x08021d1b
 8023fd0:	20000108 	.word	0x20000108

08023fd4 <strncmp>:
 8023fd4:	b510      	push	{r4, lr}
 8023fd6:	b16a      	cbz	r2, 8023ff4 <strncmp+0x20>
 8023fd8:	3901      	subs	r1, #1
 8023fda:	1884      	adds	r4, r0, r2
 8023fdc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8023fe0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8023fe4:	4293      	cmp	r3, r2
 8023fe6:	d103      	bne.n	8023ff0 <strncmp+0x1c>
 8023fe8:	42a0      	cmp	r0, r4
 8023fea:	d001      	beq.n	8023ff0 <strncmp+0x1c>
 8023fec:	2b00      	cmp	r3, #0
 8023fee:	d1f5      	bne.n	8023fdc <strncmp+0x8>
 8023ff0:	1a98      	subs	r0, r3, r2
 8023ff2:	bd10      	pop	{r4, pc}
 8023ff4:	4610      	mov	r0, r2
 8023ff6:	e7fc      	b.n	8023ff2 <strncmp+0x1e>

08023ff8 <__ascii_wctomb>:
 8023ff8:	b149      	cbz	r1, 802400e <__ascii_wctomb+0x16>
 8023ffa:	2aff      	cmp	r2, #255	; 0xff
 8023ffc:	bf85      	ittet	hi
 8023ffe:	238a      	movhi	r3, #138	; 0x8a
 8024000:	6003      	strhi	r3, [r0, #0]
 8024002:	700a      	strbls	r2, [r1, #0]
 8024004:	f04f 30ff 	movhi.w	r0, #4294967295
 8024008:	bf98      	it	ls
 802400a:	2001      	movls	r0, #1
 802400c:	4770      	bx	lr
 802400e:	4608      	mov	r0, r1
 8024010:	4770      	bx	lr
	...

08024014 <__env_lock>:
 8024014:	4801      	ldr	r0, [pc, #4]	; (802401c <__env_lock+0x8>)
 8024016:	f7fd bc16 	b.w	8021846 <__retarget_lock_acquire_recursive>
 802401a:	bf00      	nop
 802401c:	2000104a 	.word	0x2000104a

08024020 <__env_unlock>:
 8024020:	4801      	ldr	r0, [pc, #4]	; (8024028 <__env_unlock+0x8>)
 8024022:	f7fd bc12 	b.w	802184a <__retarget_lock_release_recursive>
 8024026:	bf00      	nop
 8024028:	2000104a 	.word	0x2000104a

0802402c <memmove>:
 802402c:	4288      	cmp	r0, r1
 802402e:	b510      	push	{r4, lr}
 8024030:	eb01 0402 	add.w	r4, r1, r2
 8024034:	d902      	bls.n	802403c <memmove+0x10>
 8024036:	4284      	cmp	r4, r0
 8024038:	4623      	mov	r3, r4
 802403a:	d807      	bhi.n	802404c <memmove+0x20>
 802403c:	1e43      	subs	r3, r0, #1
 802403e:	42a1      	cmp	r1, r4
 8024040:	d008      	beq.n	8024054 <memmove+0x28>
 8024042:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024046:	f803 2f01 	strb.w	r2, [r3, #1]!
 802404a:	e7f8      	b.n	802403e <memmove+0x12>
 802404c:	4402      	add	r2, r0
 802404e:	4601      	mov	r1, r0
 8024050:	428a      	cmp	r2, r1
 8024052:	d100      	bne.n	8024056 <memmove+0x2a>
 8024054:	bd10      	pop	{r4, pc}
 8024056:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802405a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802405e:	e7f7      	b.n	8024050 <memmove+0x24>

08024060 <_malloc_usable_size_r>:
 8024060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024064:	1f18      	subs	r0, r3, #4
 8024066:	2b00      	cmp	r3, #0
 8024068:	bfbc      	itt	lt
 802406a:	580b      	ldrlt	r3, [r1, r0]
 802406c:	18c0      	addlt	r0, r0, r3
 802406e:	4770      	bx	lr

08024070 <_sungetc_r>:
 8024070:	b538      	push	{r3, r4, r5, lr}
 8024072:	1c4b      	adds	r3, r1, #1
 8024074:	4614      	mov	r4, r2
 8024076:	d103      	bne.n	8024080 <_sungetc_r+0x10>
 8024078:	f04f 35ff 	mov.w	r5, #4294967295
 802407c:	4628      	mov	r0, r5
 802407e:	bd38      	pop	{r3, r4, r5, pc}
 8024080:	8993      	ldrh	r3, [r2, #12]
 8024082:	f023 0320 	bic.w	r3, r3, #32
 8024086:	8193      	strh	r3, [r2, #12]
 8024088:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802408a:	6852      	ldr	r2, [r2, #4]
 802408c:	b2cd      	uxtb	r5, r1
 802408e:	b18b      	cbz	r3, 80240b4 <_sungetc_r+0x44>
 8024090:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8024092:	4293      	cmp	r3, r2
 8024094:	dd08      	ble.n	80240a8 <_sungetc_r+0x38>
 8024096:	6823      	ldr	r3, [r4, #0]
 8024098:	1e5a      	subs	r2, r3, #1
 802409a:	6022      	str	r2, [r4, #0]
 802409c:	f803 5c01 	strb.w	r5, [r3, #-1]
 80240a0:	6863      	ldr	r3, [r4, #4]
 80240a2:	3301      	adds	r3, #1
 80240a4:	6063      	str	r3, [r4, #4]
 80240a6:	e7e9      	b.n	802407c <_sungetc_r+0xc>
 80240a8:	4621      	mov	r1, r4
 80240aa:	f000 fb39 	bl	8024720 <__submore>
 80240ae:	2800      	cmp	r0, #0
 80240b0:	d0f1      	beq.n	8024096 <_sungetc_r+0x26>
 80240b2:	e7e1      	b.n	8024078 <_sungetc_r+0x8>
 80240b4:	6921      	ldr	r1, [r4, #16]
 80240b6:	6823      	ldr	r3, [r4, #0]
 80240b8:	b151      	cbz	r1, 80240d0 <_sungetc_r+0x60>
 80240ba:	4299      	cmp	r1, r3
 80240bc:	d208      	bcs.n	80240d0 <_sungetc_r+0x60>
 80240be:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80240c2:	42a9      	cmp	r1, r5
 80240c4:	d104      	bne.n	80240d0 <_sungetc_r+0x60>
 80240c6:	3b01      	subs	r3, #1
 80240c8:	3201      	adds	r2, #1
 80240ca:	6023      	str	r3, [r4, #0]
 80240cc:	6062      	str	r2, [r4, #4]
 80240ce:	e7d5      	b.n	802407c <_sungetc_r+0xc>
 80240d0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80240d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80240d8:	6363      	str	r3, [r4, #52]	; 0x34
 80240da:	2303      	movs	r3, #3
 80240dc:	63a3      	str	r3, [r4, #56]	; 0x38
 80240de:	4623      	mov	r3, r4
 80240e0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80240e4:	6023      	str	r3, [r4, #0]
 80240e6:	2301      	movs	r3, #1
 80240e8:	e7dc      	b.n	80240a4 <_sungetc_r+0x34>

080240ea <__ssrefill_r>:
 80240ea:	b510      	push	{r4, lr}
 80240ec:	460c      	mov	r4, r1
 80240ee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80240f0:	b169      	cbz	r1, 802410e <__ssrefill_r+0x24>
 80240f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80240f6:	4299      	cmp	r1, r3
 80240f8:	d001      	beq.n	80240fe <__ssrefill_r+0x14>
 80240fa:	f7fd fc41 	bl	8021980 <_free_r>
 80240fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024100:	6063      	str	r3, [r4, #4]
 8024102:	2000      	movs	r0, #0
 8024104:	6360      	str	r0, [r4, #52]	; 0x34
 8024106:	b113      	cbz	r3, 802410e <__ssrefill_r+0x24>
 8024108:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802410a:	6023      	str	r3, [r4, #0]
 802410c:	bd10      	pop	{r4, pc}
 802410e:	6923      	ldr	r3, [r4, #16]
 8024110:	6023      	str	r3, [r4, #0]
 8024112:	2300      	movs	r3, #0
 8024114:	6063      	str	r3, [r4, #4]
 8024116:	89a3      	ldrh	r3, [r4, #12]
 8024118:	f043 0320 	orr.w	r3, r3, #32
 802411c:	81a3      	strh	r3, [r4, #12]
 802411e:	f04f 30ff 	mov.w	r0, #4294967295
 8024122:	e7f3      	b.n	802410c <__ssrefill_r+0x22>

08024124 <__ssvfiscanf_r>:
 8024124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024128:	460c      	mov	r4, r1
 802412a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 802412e:	2100      	movs	r1, #0
 8024130:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8024134:	49b2      	ldr	r1, [pc, #712]	; (8024400 <__ssvfiscanf_r+0x2dc>)
 8024136:	91a0      	str	r1, [sp, #640]	; 0x280
 8024138:	f10d 0804 	add.w	r8, sp, #4
 802413c:	49b1      	ldr	r1, [pc, #708]	; (8024404 <__ssvfiscanf_r+0x2e0>)
 802413e:	4fb2      	ldr	r7, [pc, #712]	; (8024408 <__ssvfiscanf_r+0x2e4>)
 8024140:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 802440c <__ssvfiscanf_r+0x2e8>
 8024144:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8024148:	4606      	mov	r6, r0
 802414a:	91a1      	str	r1, [sp, #644]	; 0x284
 802414c:	9300      	str	r3, [sp, #0]
 802414e:	f892 a000 	ldrb.w	sl, [r2]
 8024152:	f1ba 0f00 	cmp.w	sl, #0
 8024156:	f000 8151 	beq.w	80243fc <__ssvfiscanf_r+0x2d8>
 802415a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 802415e:	f013 0308 	ands.w	r3, r3, #8
 8024162:	f102 0501 	add.w	r5, r2, #1
 8024166:	d019      	beq.n	802419c <__ssvfiscanf_r+0x78>
 8024168:	6863      	ldr	r3, [r4, #4]
 802416a:	2b00      	cmp	r3, #0
 802416c:	dd0f      	ble.n	802418e <__ssvfiscanf_r+0x6a>
 802416e:	6823      	ldr	r3, [r4, #0]
 8024170:	781a      	ldrb	r2, [r3, #0]
 8024172:	5cba      	ldrb	r2, [r7, r2]
 8024174:	0712      	lsls	r2, r2, #28
 8024176:	d401      	bmi.n	802417c <__ssvfiscanf_r+0x58>
 8024178:	462a      	mov	r2, r5
 802417a:	e7e8      	b.n	802414e <__ssvfiscanf_r+0x2a>
 802417c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802417e:	3201      	adds	r2, #1
 8024180:	9245      	str	r2, [sp, #276]	; 0x114
 8024182:	6862      	ldr	r2, [r4, #4]
 8024184:	3301      	adds	r3, #1
 8024186:	3a01      	subs	r2, #1
 8024188:	6062      	str	r2, [r4, #4]
 802418a:	6023      	str	r3, [r4, #0]
 802418c:	e7ec      	b.n	8024168 <__ssvfiscanf_r+0x44>
 802418e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8024190:	4621      	mov	r1, r4
 8024192:	4630      	mov	r0, r6
 8024194:	4798      	blx	r3
 8024196:	2800      	cmp	r0, #0
 8024198:	d0e9      	beq.n	802416e <__ssvfiscanf_r+0x4a>
 802419a:	e7ed      	b.n	8024178 <__ssvfiscanf_r+0x54>
 802419c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80241a0:	f040 8083 	bne.w	80242aa <__ssvfiscanf_r+0x186>
 80241a4:	9341      	str	r3, [sp, #260]	; 0x104
 80241a6:	9343      	str	r3, [sp, #268]	; 0x10c
 80241a8:	7853      	ldrb	r3, [r2, #1]
 80241aa:	2b2a      	cmp	r3, #42	; 0x2a
 80241ac:	bf02      	ittt	eq
 80241ae:	2310      	moveq	r3, #16
 80241b0:	1c95      	addeq	r5, r2, #2
 80241b2:	9341      	streq	r3, [sp, #260]	; 0x104
 80241b4:	220a      	movs	r2, #10
 80241b6:	46ab      	mov	fp, r5
 80241b8:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80241bc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80241c0:	2b09      	cmp	r3, #9
 80241c2:	d91d      	bls.n	8024200 <__ssvfiscanf_r+0xdc>
 80241c4:	4891      	ldr	r0, [pc, #580]	; (802440c <__ssvfiscanf_r+0x2e8>)
 80241c6:	2203      	movs	r2, #3
 80241c8:	f7dc f84a 	bl	8000260 <memchr>
 80241cc:	b140      	cbz	r0, 80241e0 <__ssvfiscanf_r+0xbc>
 80241ce:	2301      	movs	r3, #1
 80241d0:	eba0 0009 	sub.w	r0, r0, r9
 80241d4:	fa03 f000 	lsl.w	r0, r3, r0
 80241d8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80241da:	4318      	orrs	r0, r3
 80241dc:	9041      	str	r0, [sp, #260]	; 0x104
 80241de:	465d      	mov	r5, fp
 80241e0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80241e4:	2b78      	cmp	r3, #120	; 0x78
 80241e6:	d806      	bhi.n	80241f6 <__ssvfiscanf_r+0xd2>
 80241e8:	2b57      	cmp	r3, #87	; 0x57
 80241ea:	d810      	bhi.n	802420e <__ssvfiscanf_r+0xea>
 80241ec:	2b25      	cmp	r3, #37	; 0x25
 80241ee:	d05c      	beq.n	80242aa <__ssvfiscanf_r+0x186>
 80241f0:	d856      	bhi.n	80242a0 <__ssvfiscanf_r+0x17c>
 80241f2:	2b00      	cmp	r3, #0
 80241f4:	d074      	beq.n	80242e0 <__ssvfiscanf_r+0x1bc>
 80241f6:	2303      	movs	r3, #3
 80241f8:	9347      	str	r3, [sp, #284]	; 0x11c
 80241fa:	230a      	movs	r3, #10
 80241fc:	9342      	str	r3, [sp, #264]	; 0x108
 80241fe:	e081      	b.n	8024304 <__ssvfiscanf_r+0x1e0>
 8024200:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8024202:	fb02 1303 	mla	r3, r2, r3, r1
 8024206:	3b30      	subs	r3, #48	; 0x30
 8024208:	9343      	str	r3, [sp, #268]	; 0x10c
 802420a:	465d      	mov	r5, fp
 802420c:	e7d3      	b.n	80241b6 <__ssvfiscanf_r+0x92>
 802420e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8024212:	2a20      	cmp	r2, #32
 8024214:	d8ef      	bhi.n	80241f6 <__ssvfiscanf_r+0xd2>
 8024216:	a101      	add	r1, pc, #4	; (adr r1, 802421c <__ssvfiscanf_r+0xf8>)
 8024218:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802421c:	080242ef 	.word	0x080242ef
 8024220:	080241f7 	.word	0x080241f7
 8024224:	080241f7 	.word	0x080241f7
 8024228:	0802434d 	.word	0x0802434d
 802422c:	080241f7 	.word	0x080241f7
 8024230:	080241f7 	.word	0x080241f7
 8024234:	080241f7 	.word	0x080241f7
 8024238:	080241f7 	.word	0x080241f7
 802423c:	080241f7 	.word	0x080241f7
 8024240:	080241f7 	.word	0x080241f7
 8024244:	080241f7 	.word	0x080241f7
 8024248:	08024363 	.word	0x08024363
 802424c:	08024339 	.word	0x08024339
 8024250:	080242a7 	.word	0x080242a7
 8024254:	080242a7 	.word	0x080242a7
 8024258:	080242a7 	.word	0x080242a7
 802425c:	080241f7 	.word	0x080241f7
 8024260:	0802433d 	.word	0x0802433d
 8024264:	080241f7 	.word	0x080241f7
 8024268:	080241f7 	.word	0x080241f7
 802426c:	080241f7 	.word	0x080241f7
 8024270:	080241f7 	.word	0x080241f7
 8024274:	08024373 	.word	0x08024373
 8024278:	08024345 	.word	0x08024345
 802427c:	080242e7 	.word	0x080242e7
 8024280:	080241f7 	.word	0x080241f7
 8024284:	080241f7 	.word	0x080241f7
 8024288:	0802436f 	.word	0x0802436f
 802428c:	080241f7 	.word	0x080241f7
 8024290:	08024339 	.word	0x08024339
 8024294:	080241f7 	.word	0x080241f7
 8024298:	080241f7 	.word	0x080241f7
 802429c:	080242ef 	.word	0x080242ef
 80242a0:	3b45      	subs	r3, #69	; 0x45
 80242a2:	2b02      	cmp	r3, #2
 80242a4:	d8a7      	bhi.n	80241f6 <__ssvfiscanf_r+0xd2>
 80242a6:	2305      	movs	r3, #5
 80242a8:	e02b      	b.n	8024302 <__ssvfiscanf_r+0x1de>
 80242aa:	6863      	ldr	r3, [r4, #4]
 80242ac:	2b00      	cmp	r3, #0
 80242ae:	dd0d      	ble.n	80242cc <__ssvfiscanf_r+0x1a8>
 80242b0:	6823      	ldr	r3, [r4, #0]
 80242b2:	781a      	ldrb	r2, [r3, #0]
 80242b4:	4552      	cmp	r2, sl
 80242b6:	f040 80a1 	bne.w	80243fc <__ssvfiscanf_r+0x2d8>
 80242ba:	3301      	adds	r3, #1
 80242bc:	6862      	ldr	r2, [r4, #4]
 80242be:	6023      	str	r3, [r4, #0]
 80242c0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80242c2:	3a01      	subs	r2, #1
 80242c4:	3301      	adds	r3, #1
 80242c6:	6062      	str	r2, [r4, #4]
 80242c8:	9345      	str	r3, [sp, #276]	; 0x114
 80242ca:	e755      	b.n	8024178 <__ssvfiscanf_r+0x54>
 80242cc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80242ce:	4621      	mov	r1, r4
 80242d0:	4630      	mov	r0, r6
 80242d2:	4798      	blx	r3
 80242d4:	2800      	cmp	r0, #0
 80242d6:	d0eb      	beq.n	80242b0 <__ssvfiscanf_r+0x18c>
 80242d8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80242da:	2800      	cmp	r0, #0
 80242dc:	f040 8084 	bne.w	80243e8 <__ssvfiscanf_r+0x2c4>
 80242e0:	f04f 30ff 	mov.w	r0, #4294967295
 80242e4:	e086      	b.n	80243f4 <__ssvfiscanf_r+0x2d0>
 80242e6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80242e8:	f042 0220 	orr.w	r2, r2, #32
 80242ec:	9241      	str	r2, [sp, #260]	; 0x104
 80242ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80242f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80242f4:	9241      	str	r2, [sp, #260]	; 0x104
 80242f6:	2210      	movs	r2, #16
 80242f8:	2b6f      	cmp	r3, #111	; 0x6f
 80242fa:	9242      	str	r2, [sp, #264]	; 0x108
 80242fc:	bf34      	ite	cc
 80242fe:	2303      	movcc	r3, #3
 8024300:	2304      	movcs	r3, #4
 8024302:	9347      	str	r3, [sp, #284]	; 0x11c
 8024304:	6863      	ldr	r3, [r4, #4]
 8024306:	2b00      	cmp	r3, #0
 8024308:	dd41      	ble.n	802438e <__ssvfiscanf_r+0x26a>
 802430a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802430c:	0659      	lsls	r1, r3, #25
 802430e:	d404      	bmi.n	802431a <__ssvfiscanf_r+0x1f6>
 8024310:	6823      	ldr	r3, [r4, #0]
 8024312:	781a      	ldrb	r2, [r3, #0]
 8024314:	5cba      	ldrb	r2, [r7, r2]
 8024316:	0712      	lsls	r2, r2, #28
 8024318:	d440      	bmi.n	802439c <__ssvfiscanf_r+0x278>
 802431a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 802431c:	2b02      	cmp	r3, #2
 802431e:	dc4f      	bgt.n	80243c0 <__ssvfiscanf_r+0x29c>
 8024320:	466b      	mov	r3, sp
 8024322:	4622      	mov	r2, r4
 8024324:	a941      	add	r1, sp, #260	; 0x104
 8024326:	4630      	mov	r0, r6
 8024328:	f000 f874 	bl	8024414 <_scanf_chars>
 802432c:	2801      	cmp	r0, #1
 802432e:	d065      	beq.n	80243fc <__ssvfiscanf_r+0x2d8>
 8024330:	2802      	cmp	r0, #2
 8024332:	f47f af21 	bne.w	8024178 <__ssvfiscanf_r+0x54>
 8024336:	e7cf      	b.n	80242d8 <__ssvfiscanf_r+0x1b4>
 8024338:	220a      	movs	r2, #10
 802433a:	e7dd      	b.n	80242f8 <__ssvfiscanf_r+0x1d4>
 802433c:	2300      	movs	r3, #0
 802433e:	9342      	str	r3, [sp, #264]	; 0x108
 8024340:	2303      	movs	r3, #3
 8024342:	e7de      	b.n	8024302 <__ssvfiscanf_r+0x1de>
 8024344:	2308      	movs	r3, #8
 8024346:	9342      	str	r3, [sp, #264]	; 0x108
 8024348:	2304      	movs	r3, #4
 802434a:	e7da      	b.n	8024302 <__ssvfiscanf_r+0x1de>
 802434c:	4629      	mov	r1, r5
 802434e:	4640      	mov	r0, r8
 8024350:	f000 f9ac 	bl	80246ac <__sccl>
 8024354:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8024356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802435a:	9341      	str	r3, [sp, #260]	; 0x104
 802435c:	4605      	mov	r5, r0
 802435e:	2301      	movs	r3, #1
 8024360:	e7cf      	b.n	8024302 <__ssvfiscanf_r+0x1de>
 8024362:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8024364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024368:	9341      	str	r3, [sp, #260]	; 0x104
 802436a:	2300      	movs	r3, #0
 802436c:	e7c9      	b.n	8024302 <__ssvfiscanf_r+0x1de>
 802436e:	2302      	movs	r3, #2
 8024370:	e7c7      	b.n	8024302 <__ssvfiscanf_r+0x1de>
 8024372:	9841      	ldr	r0, [sp, #260]	; 0x104
 8024374:	06c3      	lsls	r3, r0, #27
 8024376:	f53f aeff 	bmi.w	8024178 <__ssvfiscanf_r+0x54>
 802437a:	9b00      	ldr	r3, [sp, #0]
 802437c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802437e:	1d19      	adds	r1, r3, #4
 8024380:	9100      	str	r1, [sp, #0]
 8024382:	681b      	ldr	r3, [r3, #0]
 8024384:	07c0      	lsls	r0, r0, #31
 8024386:	bf4c      	ite	mi
 8024388:	801a      	strhmi	r2, [r3, #0]
 802438a:	601a      	strpl	r2, [r3, #0]
 802438c:	e6f4      	b.n	8024178 <__ssvfiscanf_r+0x54>
 802438e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8024390:	4621      	mov	r1, r4
 8024392:	4630      	mov	r0, r6
 8024394:	4798      	blx	r3
 8024396:	2800      	cmp	r0, #0
 8024398:	d0b7      	beq.n	802430a <__ssvfiscanf_r+0x1e6>
 802439a:	e79d      	b.n	80242d8 <__ssvfiscanf_r+0x1b4>
 802439c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802439e:	3201      	adds	r2, #1
 80243a0:	9245      	str	r2, [sp, #276]	; 0x114
 80243a2:	6862      	ldr	r2, [r4, #4]
 80243a4:	3a01      	subs	r2, #1
 80243a6:	2a00      	cmp	r2, #0
 80243a8:	6062      	str	r2, [r4, #4]
 80243aa:	dd02      	ble.n	80243b2 <__ssvfiscanf_r+0x28e>
 80243ac:	3301      	adds	r3, #1
 80243ae:	6023      	str	r3, [r4, #0]
 80243b0:	e7ae      	b.n	8024310 <__ssvfiscanf_r+0x1ec>
 80243b2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80243b4:	4621      	mov	r1, r4
 80243b6:	4630      	mov	r0, r6
 80243b8:	4798      	blx	r3
 80243ba:	2800      	cmp	r0, #0
 80243bc:	d0a8      	beq.n	8024310 <__ssvfiscanf_r+0x1ec>
 80243be:	e78b      	b.n	80242d8 <__ssvfiscanf_r+0x1b4>
 80243c0:	2b04      	cmp	r3, #4
 80243c2:	dc06      	bgt.n	80243d2 <__ssvfiscanf_r+0x2ae>
 80243c4:	466b      	mov	r3, sp
 80243c6:	4622      	mov	r2, r4
 80243c8:	a941      	add	r1, sp, #260	; 0x104
 80243ca:	4630      	mov	r0, r6
 80243cc:	f000 f87a 	bl	80244c4 <_scanf_i>
 80243d0:	e7ac      	b.n	802432c <__ssvfiscanf_r+0x208>
 80243d2:	4b0f      	ldr	r3, [pc, #60]	; (8024410 <__ssvfiscanf_r+0x2ec>)
 80243d4:	2b00      	cmp	r3, #0
 80243d6:	f43f aecf 	beq.w	8024178 <__ssvfiscanf_r+0x54>
 80243da:	466b      	mov	r3, sp
 80243dc:	4622      	mov	r2, r4
 80243de:	a941      	add	r1, sp, #260	; 0x104
 80243e0:	4630      	mov	r0, r6
 80243e2:	f3af 8000 	nop.w
 80243e6:	e7a1      	b.n	802432c <__ssvfiscanf_r+0x208>
 80243e8:	89a3      	ldrh	r3, [r4, #12]
 80243ea:	f013 0f40 	tst.w	r3, #64	; 0x40
 80243ee:	bf18      	it	ne
 80243f0:	f04f 30ff 	movne.w	r0, #4294967295
 80243f4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80243f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80243fc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80243fe:	e7f9      	b.n	80243f4 <__ssvfiscanf_r+0x2d0>
 8024400:	08024071 	.word	0x08024071
 8024404:	080240eb 	.word	0x080240eb
 8024408:	0802b519 	.word	0x0802b519
 802440c:	0802b629 	.word	0x0802b629
 8024410:	00000000 	.word	0x00000000

08024414 <_scanf_chars>:
 8024414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024418:	4615      	mov	r5, r2
 802441a:	688a      	ldr	r2, [r1, #8]
 802441c:	4680      	mov	r8, r0
 802441e:	460c      	mov	r4, r1
 8024420:	b932      	cbnz	r2, 8024430 <_scanf_chars+0x1c>
 8024422:	698a      	ldr	r2, [r1, #24]
 8024424:	2a00      	cmp	r2, #0
 8024426:	bf0c      	ite	eq
 8024428:	2201      	moveq	r2, #1
 802442a:	f04f 32ff 	movne.w	r2, #4294967295
 802442e:	608a      	str	r2, [r1, #8]
 8024430:	6822      	ldr	r2, [r4, #0]
 8024432:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80244c0 <_scanf_chars+0xac>
 8024436:	06d1      	lsls	r1, r2, #27
 8024438:	bf5f      	itttt	pl
 802443a:	681a      	ldrpl	r2, [r3, #0]
 802443c:	1d11      	addpl	r1, r2, #4
 802443e:	6019      	strpl	r1, [r3, #0]
 8024440:	6816      	ldrpl	r6, [r2, #0]
 8024442:	2700      	movs	r7, #0
 8024444:	69a0      	ldr	r0, [r4, #24]
 8024446:	b188      	cbz	r0, 802446c <_scanf_chars+0x58>
 8024448:	2801      	cmp	r0, #1
 802444a:	d107      	bne.n	802445c <_scanf_chars+0x48>
 802444c:	682b      	ldr	r3, [r5, #0]
 802444e:	781a      	ldrb	r2, [r3, #0]
 8024450:	6963      	ldr	r3, [r4, #20]
 8024452:	5c9b      	ldrb	r3, [r3, r2]
 8024454:	b953      	cbnz	r3, 802446c <_scanf_chars+0x58>
 8024456:	bb27      	cbnz	r7, 80244a2 <_scanf_chars+0x8e>
 8024458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802445c:	2802      	cmp	r0, #2
 802445e:	d120      	bne.n	80244a2 <_scanf_chars+0x8e>
 8024460:	682b      	ldr	r3, [r5, #0]
 8024462:	781b      	ldrb	r3, [r3, #0]
 8024464:	f813 3009 	ldrb.w	r3, [r3, r9]
 8024468:	071b      	lsls	r3, r3, #28
 802446a:	d41a      	bmi.n	80244a2 <_scanf_chars+0x8e>
 802446c:	6823      	ldr	r3, [r4, #0]
 802446e:	06da      	lsls	r2, r3, #27
 8024470:	bf5e      	ittt	pl
 8024472:	682b      	ldrpl	r3, [r5, #0]
 8024474:	781b      	ldrbpl	r3, [r3, #0]
 8024476:	f806 3b01 	strbpl.w	r3, [r6], #1
 802447a:	682a      	ldr	r2, [r5, #0]
 802447c:	686b      	ldr	r3, [r5, #4]
 802447e:	3201      	adds	r2, #1
 8024480:	602a      	str	r2, [r5, #0]
 8024482:	68a2      	ldr	r2, [r4, #8]
 8024484:	3b01      	subs	r3, #1
 8024486:	3a01      	subs	r2, #1
 8024488:	606b      	str	r3, [r5, #4]
 802448a:	3701      	adds	r7, #1
 802448c:	60a2      	str	r2, [r4, #8]
 802448e:	b142      	cbz	r2, 80244a2 <_scanf_chars+0x8e>
 8024490:	2b00      	cmp	r3, #0
 8024492:	dcd7      	bgt.n	8024444 <_scanf_chars+0x30>
 8024494:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8024498:	4629      	mov	r1, r5
 802449a:	4640      	mov	r0, r8
 802449c:	4798      	blx	r3
 802449e:	2800      	cmp	r0, #0
 80244a0:	d0d0      	beq.n	8024444 <_scanf_chars+0x30>
 80244a2:	6823      	ldr	r3, [r4, #0]
 80244a4:	f013 0310 	ands.w	r3, r3, #16
 80244a8:	d105      	bne.n	80244b6 <_scanf_chars+0xa2>
 80244aa:	68e2      	ldr	r2, [r4, #12]
 80244ac:	3201      	adds	r2, #1
 80244ae:	60e2      	str	r2, [r4, #12]
 80244b0:	69a2      	ldr	r2, [r4, #24]
 80244b2:	b102      	cbz	r2, 80244b6 <_scanf_chars+0xa2>
 80244b4:	7033      	strb	r3, [r6, #0]
 80244b6:	6923      	ldr	r3, [r4, #16]
 80244b8:	441f      	add	r7, r3
 80244ba:	6127      	str	r7, [r4, #16]
 80244bc:	2000      	movs	r0, #0
 80244be:	e7cb      	b.n	8024458 <_scanf_chars+0x44>
 80244c0:	0802b519 	.word	0x0802b519

080244c4 <_scanf_i>:
 80244c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80244c8:	4698      	mov	r8, r3
 80244ca:	4b74      	ldr	r3, [pc, #464]	; (802469c <_scanf_i+0x1d8>)
 80244cc:	460c      	mov	r4, r1
 80244ce:	4682      	mov	sl, r0
 80244d0:	4616      	mov	r6, r2
 80244d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80244d6:	b087      	sub	sp, #28
 80244d8:	ab03      	add	r3, sp, #12
 80244da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80244de:	4b70      	ldr	r3, [pc, #448]	; (80246a0 <_scanf_i+0x1dc>)
 80244e0:	69a1      	ldr	r1, [r4, #24]
 80244e2:	4a70      	ldr	r2, [pc, #448]	; (80246a4 <_scanf_i+0x1e0>)
 80244e4:	2903      	cmp	r1, #3
 80244e6:	bf18      	it	ne
 80244e8:	461a      	movne	r2, r3
 80244ea:	68a3      	ldr	r3, [r4, #8]
 80244ec:	9201      	str	r2, [sp, #4]
 80244ee:	1e5a      	subs	r2, r3, #1
 80244f0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80244f4:	bf88      	it	hi
 80244f6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80244fa:	4627      	mov	r7, r4
 80244fc:	bf82      	ittt	hi
 80244fe:	eb03 0905 	addhi.w	r9, r3, r5
 8024502:	f240 135d 	movwhi	r3, #349	; 0x15d
 8024506:	60a3      	strhi	r3, [r4, #8]
 8024508:	f857 3b1c 	ldr.w	r3, [r7], #28
 802450c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8024510:	bf98      	it	ls
 8024512:	f04f 0900 	movls.w	r9, #0
 8024516:	6023      	str	r3, [r4, #0]
 8024518:	463d      	mov	r5, r7
 802451a:	f04f 0b00 	mov.w	fp, #0
 802451e:	6831      	ldr	r1, [r6, #0]
 8024520:	ab03      	add	r3, sp, #12
 8024522:	7809      	ldrb	r1, [r1, #0]
 8024524:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8024528:	2202      	movs	r2, #2
 802452a:	f7db fe99 	bl	8000260 <memchr>
 802452e:	b328      	cbz	r0, 802457c <_scanf_i+0xb8>
 8024530:	f1bb 0f01 	cmp.w	fp, #1
 8024534:	d159      	bne.n	80245ea <_scanf_i+0x126>
 8024536:	6862      	ldr	r2, [r4, #4]
 8024538:	b92a      	cbnz	r2, 8024546 <_scanf_i+0x82>
 802453a:	6822      	ldr	r2, [r4, #0]
 802453c:	2308      	movs	r3, #8
 802453e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8024542:	6063      	str	r3, [r4, #4]
 8024544:	6022      	str	r2, [r4, #0]
 8024546:	6822      	ldr	r2, [r4, #0]
 8024548:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 802454c:	6022      	str	r2, [r4, #0]
 802454e:	68a2      	ldr	r2, [r4, #8]
 8024550:	1e51      	subs	r1, r2, #1
 8024552:	60a1      	str	r1, [r4, #8]
 8024554:	b192      	cbz	r2, 802457c <_scanf_i+0xb8>
 8024556:	6832      	ldr	r2, [r6, #0]
 8024558:	1c51      	adds	r1, r2, #1
 802455a:	6031      	str	r1, [r6, #0]
 802455c:	7812      	ldrb	r2, [r2, #0]
 802455e:	f805 2b01 	strb.w	r2, [r5], #1
 8024562:	6872      	ldr	r2, [r6, #4]
 8024564:	3a01      	subs	r2, #1
 8024566:	2a00      	cmp	r2, #0
 8024568:	6072      	str	r2, [r6, #4]
 802456a:	dc07      	bgt.n	802457c <_scanf_i+0xb8>
 802456c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8024570:	4631      	mov	r1, r6
 8024572:	4650      	mov	r0, sl
 8024574:	4790      	blx	r2
 8024576:	2800      	cmp	r0, #0
 8024578:	f040 8085 	bne.w	8024686 <_scanf_i+0x1c2>
 802457c:	f10b 0b01 	add.w	fp, fp, #1
 8024580:	f1bb 0f03 	cmp.w	fp, #3
 8024584:	d1cb      	bne.n	802451e <_scanf_i+0x5a>
 8024586:	6863      	ldr	r3, [r4, #4]
 8024588:	b90b      	cbnz	r3, 802458e <_scanf_i+0xca>
 802458a:	230a      	movs	r3, #10
 802458c:	6063      	str	r3, [r4, #4]
 802458e:	6863      	ldr	r3, [r4, #4]
 8024590:	4945      	ldr	r1, [pc, #276]	; (80246a8 <_scanf_i+0x1e4>)
 8024592:	6960      	ldr	r0, [r4, #20]
 8024594:	1ac9      	subs	r1, r1, r3
 8024596:	f000 f889 	bl	80246ac <__sccl>
 802459a:	f04f 0b00 	mov.w	fp, #0
 802459e:	68a3      	ldr	r3, [r4, #8]
 80245a0:	6822      	ldr	r2, [r4, #0]
 80245a2:	2b00      	cmp	r3, #0
 80245a4:	d03d      	beq.n	8024622 <_scanf_i+0x15e>
 80245a6:	6831      	ldr	r1, [r6, #0]
 80245a8:	6960      	ldr	r0, [r4, #20]
 80245aa:	f891 c000 	ldrb.w	ip, [r1]
 80245ae:	f810 000c 	ldrb.w	r0, [r0, ip]
 80245b2:	2800      	cmp	r0, #0
 80245b4:	d035      	beq.n	8024622 <_scanf_i+0x15e>
 80245b6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80245ba:	d124      	bne.n	8024606 <_scanf_i+0x142>
 80245bc:	0510      	lsls	r0, r2, #20
 80245be:	d522      	bpl.n	8024606 <_scanf_i+0x142>
 80245c0:	f10b 0b01 	add.w	fp, fp, #1
 80245c4:	f1b9 0f00 	cmp.w	r9, #0
 80245c8:	d003      	beq.n	80245d2 <_scanf_i+0x10e>
 80245ca:	3301      	adds	r3, #1
 80245cc:	f109 39ff 	add.w	r9, r9, #4294967295
 80245d0:	60a3      	str	r3, [r4, #8]
 80245d2:	6873      	ldr	r3, [r6, #4]
 80245d4:	3b01      	subs	r3, #1
 80245d6:	2b00      	cmp	r3, #0
 80245d8:	6073      	str	r3, [r6, #4]
 80245da:	dd1b      	ble.n	8024614 <_scanf_i+0x150>
 80245dc:	6833      	ldr	r3, [r6, #0]
 80245de:	3301      	adds	r3, #1
 80245e0:	6033      	str	r3, [r6, #0]
 80245e2:	68a3      	ldr	r3, [r4, #8]
 80245e4:	3b01      	subs	r3, #1
 80245e6:	60a3      	str	r3, [r4, #8]
 80245e8:	e7d9      	b.n	802459e <_scanf_i+0xda>
 80245ea:	f1bb 0f02 	cmp.w	fp, #2
 80245ee:	d1ae      	bne.n	802454e <_scanf_i+0x8a>
 80245f0:	6822      	ldr	r2, [r4, #0]
 80245f2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80245f6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80245fa:	d1bf      	bne.n	802457c <_scanf_i+0xb8>
 80245fc:	2310      	movs	r3, #16
 80245fe:	6063      	str	r3, [r4, #4]
 8024600:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8024604:	e7a2      	b.n	802454c <_scanf_i+0x88>
 8024606:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 802460a:	6022      	str	r2, [r4, #0]
 802460c:	780b      	ldrb	r3, [r1, #0]
 802460e:	f805 3b01 	strb.w	r3, [r5], #1
 8024612:	e7de      	b.n	80245d2 <_scanf_i+0x10e>
 8024614:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8024618:	4631      	mov	r1, r6
 802461a:	4650      	mov	r0, sl
 802461c:	4798      	blx	r3
 802461e:	2800      	cmp	r0, #0
 8024620:	d0df      	beq.n	80245e2 <_scanf_i+0x11e>
 8024622:	6823      	ldr	r3, [r4, #0]
 8024624:	05d9      	lsls	r1, r3, #23
 8024626:	d50d      	bpl.n	8024644 <_scanf_i+0x180>
 8024628:	42bd      	cmp	r5, r7
 802462a:	d909      	bls.n	8024640 <_scanf_i+0x17c>
 802462c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8024630:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8024634:	4632      	mov	r2, r6
 8024636:	4650      	mov	r0, sl
 8024638:	4798      	blx	r3
 802463a:	f105 39ff 	add.w	r9, r5, #4294967295
 802463e:	464d      	mov	r5, r9
 8024640:	42bd      	cmp	r5, r7
 8024642:	d028      	beq.n	8024696 <_scanf_i+0x1d2>
 8024644:	6822      	ldr	r2, [r4, #0]
 8024646:	f012 0210 	ands.w	r2, r2, #16
 802464a:	d113      	bne.n	8024674 <_scanf_i+0x1b0>
 802464c:	702a      	strb	r2, [r5, #0]
 802464e:	6863      	ldr	r3, [r4, #4]
 8024650:	9e01      	ldr	r6, [sp, #4]
 8024652:	4639      	mov	r1, r7
 8024654:	4650      	mov	r0, sl
 8024656:	47b0      	blx	r6
 8024658:	f8d8 3000 	ldr.w	r3, [r8]
 802465c:	6821      	ldr	r1, [r4, #0]
 802465e:	1d1a      	adds	r2, r3, #4
 8024660:	f8c8 2000 	str.w	r2, [r8]
 8024664:	f011 0f20 	tst.w	r1, #32
 8024668:	681b      	ldr	r3, [r3, #0]
 802466a:	d00f      	beq.n	802468c <_scanf_i+0x1c8>
 802466c:	6018      	str	r0, [r3, #0]
 802466e:	68e3      	ldr	r3, [r4, #12]
 8024670:	3301      	adds	r3, #1
 8024672:	60e3      	str	r3, [r4, #12]
 8024674:	1bed      	subs	r5, r5, r7
 8024676:	44ab      	add	fp, r5
 8024678:	6925      	ldr	r5, [r4, #16]
 802467a:	445d      	add	r5, fp
 802467c:	6125      	str	r5, [r4, #16]
 802467e:	2000      	movs	r0, #0
 8024680:	b007      	add	sp, #28
 8024682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024686:	f04f 0b00 	mov.w	fp, #0
 802468a:	e7ca      	b.n	8024622 <_scanf_i+0x15e>
 802468c:	07ca      	lsls	r2, r1, #31
 802468e:	bf4c      	ite	mi
 8024690:	8018      	strhmi	r0, [r3, #0]
 8024692:	6018      	strpl	r0, [r3, #0]
 8024694:	e7eb      	b.n	802466e <_scanf_i+0x1aa>
 8024696:	2001      	movs	r0, #1
 8024698:	e7f2      	b.n	8024680 <_scanf_i+0x1bc>
 802469a:	bf00      	nop
 802469c:	0802825c 	.word	0x0802825c
 80246a0:	08022a95 	.word	0x08022a95
 80246a4:	08022985 	.word	0x08022985
 80246a8:	0802b66f 	.word	0x0802b66f

080246ac <__sccl>:
 80246ac:	b570      	push	{r4, r5, r6, lr}
 80246ae:	780b      	ldrb	r3, [r1, #0]
 80246b0:	4604      	mov	r4, r0
 80246b2:	2b5e      	cmp	r3, #94	; 0x5e
 80246b4:	bf0b      	itete	eq
 80246b6:	784b      	ldrbeq	r3, [r1, #1]
 80246b8:	1c48      	addne	r0, r1, #1
 80246ba:	1c88      	addeq	r0, r1, #2
 80246bc:	2200      	movne	r2, #0
 80246be:	bf08      	it	eq
 80246c0:	2201      	moveq	r2, #1
 80246c2:	1e61      	subs	r1, r4, #1
 80246c4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80246c8:	f801 2f01 	strb.w	r2, [r1, #1]!
 80246cc:	42a9      	cmp	r1, r5
 80246ce:	d1fb      	bne.n	80246c8 <__sccl+0x1c>
 80246d0:	b90b      	cbnz	r3, 80246d6 <__sccl+0x2a>
 80246d2:	3801      	subs	r0, #1
 80246d4:	bd70      	pop	{r4, r5, r6, pc}
 80246d6:	f082 0101 	eor.w	r1, r2, #1
 80246da:	54e1      	strb	r1, [r4, r3]
 80246dc:	1c42      	adds	r2, r0, #1
 80246de:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80246e2:	2d2d      	cmp	r5, #45	; 0x2d
 80246e4:	f102 36ff 	add.w	r6, r2, #4294967295
 80246e8:	4610      	mov	r0, r2
 80246ea:	d006      	beq.n	80246fa <__sccl+0x4e>
 80246ec:	2d5d      	cmp	r5, #93	; 0x5d
 80246ee:	d0f1      	beq.n	80246d4 <__sccl+0x28>
 80246f0:	b90d      	cbnz	r5, 80246f6 <__sccl+0x4a>
 80246f2:	4630      	mov	r0, r6
 80246f4:	e7ee      	b.n	80246d4 <__sccl+0x28>
 80246f6:	462b      	mov	r3, r5
 80246f8:	e7ef      	b.n	80246da <__sccl+0x2e>
 80246fa:	7816      	ldrb	r6, [r2, #0]
 80246fc:	2e5d      	cmp	r6, #93	; 0x5d
 80246fe:	d0fa      	beq.n	80246f6 <__sccl+0x4a>
 8024700:	42b3      	cmp	r3, r6
 8024702:	dcf8      	bgt.n	80246f6 <__sccl+0x4a>
 8024704:	4618      	mov	r0, r3
 8024706:	3001      	adds	r0, #1
 8024708:	4286      	cmp	r6, r0
 802470a:	5421      	strb	r1, [r4, r0]
 802470c:	dcfb      	bgt.n	8024706 <__sccl+0x5a>
 802470e:	43d8      	mvns	r0, r3
 8024710:	4430      	add	r0, r6
 8024712:	1c5d      	adds	r5, r3, #1
 8024714:	42b3      	cmp	r3, r6
 8024716:	bfa8      	it	ge
 8024718:	2000      	movge	r0, #0
 802471a:	182b      	adds	r3, r5, r0
 802471c:	3202      	adds	r2, #2
 802471e:	e7de      	b.n	80246de <__sccl+0x32>

08024720 <__submore>:
 8024720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024724:	460c      	mov	r4, r1
 8024726:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8024728:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802472c:	4299      	cmp	r1, r3
 802472e:	d11d      	bne.n	802476c <__submore+0x4c>
 8024730:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8024734:	f7fd f974 	bl	8021a20 <_malloc_r>
 8024738:	b918      	cbnz	r0, 8024742 <__submore+0x22>
 802473a:	f04f 30ff 	mov.w	r0, #4294967295
 802473e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024746:	63a3      	str	r3, [r4, #56]	; 0x38
 8024748:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 802474c:	6360      	str	r0, [r4, #52]	; 0x34
 802474e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8024752:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8024756:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 802475a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802475e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8024762:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8024766:	6020      	str	r0, [r4, #0]
 8024768:	2000      	movs	r0, #0
 802476a:	e7e8      	b.n	802473e <__submore+0x1e>
 802476c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802476e:	0077      	lsls	r7, r6, #1
 8024770:	463a      	mov	r2, r7
 8024772:	f7fe ff05 	bl	8023580 <_realloc_r>
 8024776:	4605      	mov	r5, r0
 8024778:	2800      	cmp	r0, #0
 802477a:	d0de      	beq.n	802473a <__submore+0x1a>
 802477c:	eb00 0806 	add.w	r8, r0, r6
 8024780:	4601      	mov	r1, r0
 8024782:	4632      	mov	r2, r6
 8024784:	4640      	mov	r0, r8
 8024786:	f7fd f8d5 	bl	8021934 <memcpy>
 802478a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 802478e:	f8c4 8000 	str.w	r8, [r4]
 8024792:	e7e9      	b.n	8024768 <__submore+0x48>

08024794 <_init>:
 8024794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024796:	bf00      	nop
 8024798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802479a:	bc08      	pop	{r3}
 802479c:	469e      	mov	lr, r3
 802479e:	4770      	bx	lr

080247a0 <_fini>:
 80247a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80247a2:	bf00      	nop
 80247a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80247a6:	bc08      	pop	{r3}
 80247a8:	469e      	mov	lr, r3
 80247aa:	4770      	bx	lr
 80247ac:	0000      	movs	r0, r0
	...

080247b0 <__time_veneer>:
 80247b0:	e51ff004 	ldr	pc, [pc, #-4]	; 80247b4 <__time_veneer+0x4>
 80247b4:	200004a0 	.word	0x200004a0
