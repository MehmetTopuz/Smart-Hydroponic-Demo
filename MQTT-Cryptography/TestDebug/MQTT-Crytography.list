
MQTT-Crytography.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000254f8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007308  080256d8  080256d8  000356d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802c9e0  0802c9e0  0004033c  2**0
                  CONTENTS
  4 .ARM          00000008  0802c9e0  0802c9e0  0003c9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802c9e8  0802c9e8  0004033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  0802c9e8  0802c9e8  0003c9e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000014  0802c9fc  0802c9fc  0003c9fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  0802ca10  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dd4  2000033c  0802cd4c  0004033c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001110  0802cd4c  00041110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006ecec  00000000  00000000  0004036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000c904  00000000  00000000  000af058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000046e0  00000000  00000000  000bb960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000044a0  00000000  00000000  000c0040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e151  00000000  00000000  000c44e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f532  00000000  00000000  000f2631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011613a  00000000  00000000  00121b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00237c9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000155bc  00000000  00000000  00237cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000033c 	.word	0x2000033c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080256b4 	.word	0x080256b4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000340 	.word	0x20000340
 800021c:	080256b4 	.word	0x080256b4

08000220 <setjmp>:
 8000220:	46ec      	mov	ip, sp
 8000222:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000226:	f04f 0000 	mov.w	r0, #0
 800022a:	4770      	bx	lr

0800022c <longjmp>:
 800022c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000230:	46e5      	mov	sp, ip
 8000232:	0008      	movs	r0, r1
 8000234:	bf08      	it	eq
 8000236:	2001      	moveq	r0, #1
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <strcmp>:
 800024c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000254:	2a01      	cmp	r2, #1
 8000256:	bf28      	it	cs
 8000258:	429a      	cmpcs	r2, r3
 800025a:	d0f7      	beq.n	800024c <strcmp>
 800025c:	1ad0      	subs	r0, r2, r3
 800025e:	4770      	bx	lr

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__gedf2>:
 8000678:	f04f 3cff 	mov.w	ip, #4294967295
 800067c:	e006      	b.n	800068c <__cmpdf2+0x4>
 800067e:	bf00      	nop

08000680 <__ledf2>:
 8000680:	f04f 0c01 	mov.w	ip, #1
 8000684:	e002      	b.n	800068c <__cmpdf2+0x4>
 8000686:	bf00      	nop

08000688 <__cmpdf2>:
 8000688:	f04f 0c01 	mov.w	ip, #1
 800068c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800069c:	bf18      	it	ne
 800069e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006a2:	d01b      	beq.n	80006dc <__cmpdf2+0x54>
 80006a4:	b001      	add	sp, #4
 80006a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006aa:	bf0c      	ite	eq
 80006ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006b0:	ea91 0f03 	teqne	r1, r3
 80006b4:	bf02      	ittt	eq
 80006b6:	ea90 0f02 	teqeq	r0, r2
 80006ba:	2000      	moveq	r0, #0
 80006bc:	4770      	bxeq	lr
 80006be:	f110 0f00 	cmn.w	r0, #0
 80006c2:	ea91 0f03 	teq	r1, r3
 80006c6:	bf58      	it	pl
 80006c8:	4299      	cmppl	r1, r3
 80006ca:	bf08      	it	eq
 80006cc:	4290      	cmpeq	r0, r2
 80006ce:	bf2c      	ite	cs
 80006d0:	17d8      	asrcs	r0, r3, #31
 80006d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006d6:	f040 0001 	orr.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d102      	bne.n	80006ec <__cmpdf2+0x64>
 80006e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ea:	d107      	bne.n	80006fc <__cmpdf2+0x74>
 80006ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006f4:	d1d6      	bne.n	80006a4 <__cmpdf2+0x1c>
 80006f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006fa:	d0d3      	beq.n	80006a4 <__cmpdf2+0x1c>
 80006fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_cdrcmple>:
 8000704:	4684      	mov	ip, r0
 8000706:	4610      	mov	r0, r2
 8000708:	4662      	mov	r2, ip
 800070a:	468c      	mov	ip, r1
 800070c:	4619      	mov	r1, r3
 800070e:	4663      	mov	r3, ip
 8000710:	e000      	b.n	8000714 <__aeabi_cdcmpeq>
 8000712:	bf00      	nop

08000714 <__aeabi_cdcmpeq>:
 8000714:	b501      	push	{r0, lr}
 8000716:	f7ff ffb7 	bl	8000688 <__cmpdf2>
 800071a:	2800      	cmp	r0, #0
 800071c:	bf48      	it	mi
 800071e:	f110 0f00 	cmnmi.w	r0, #0
 8000722:	bd01      	pop	{r0, pc}

08000724 <__aeabi_dcmpeq>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff fff4 	bl	8000714 <__aeabi_cdcmpeq>
 800072c:	bf0c      	ite	eq
 800072e:	2001      	moveq	r0, #1
 8000730:	2000      	movne	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_dcmplt>:
 8000738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800073c:	f7ff ffea 	bl	8000714 <__aeabi_cdcmpeq>
 8000740:	bf34      	ite	cc
 8000742:	2001      	movcc	r0, #1
 8000744:	2000      	movcs	r0, #0
 8000746:	f85d fb08 	ldr.w	pc, [sp], #8
 800074a:	bf00      	nop

0800074c <__aeabi_dcmple>:
 800074c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000750:	f7ff ffe0 	bl	8000714 <__aeabi_cdcmpeq>
 8000754:	bf94      	ite	ls
 8000756:	2001      	movls	r0, #1
 8000758:	2000      	movhi	r0, #0
 800075a:	f85d fb08 	ldr.w	pc, [sp], #8
 800075e:	bf00      	nop

08000760 <__aeabi_dcmpge>:
 8000760:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000764:	f7ff ffce 	bl	8000704 <__aeabi_cdrcmple>
 8000768:	bf94      	ite	ls
 800076a:	2001      	movls	r0, #1
 800076c:	2000      	movhi	r0, #0
 800076e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000772:	bf00      	nop

08000774 <__aeabi_dcmpgt>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff ffc4 	bl	8000704 <__aeabi_cdrcmple>
 800077c:	bf34      	ite	cc
 800077e:	2001      	movcc	r0, #1
 8000780:	2000      	movcs	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_dcmpun>:
 8000788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800078c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000790:	d102      	bne.n	8000798 <__aeabi_dcmpun+0x10>
 8000792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000796:	d10a      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800079c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a0:	d102      	bne.n	80007a8 <__aeabi_dcmpun+0x20>
 80007a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007a6:	d102      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	f04f 0001 	mov.w	r0, #1
 80007b2:	4770      	bx	lr

080007b4 <__aeabi_ldivmod>:
 80007b4:	b97b      	cbnz	r3, 80007d6 <__aeabi_ldivmod+0x22>
 80007b6:	b972      	cbnz	r2, 80007d6 <__aeabi_ldivmod+0x22>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	bfbe      	ittt	lt
 80007bc:	2000      	movlt	r0, #0
 80007be:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80007c2:	e006      	blt.n	80007d2 <__aeabi_ldivmod+0x1e>
 80007c4:	bf08      	it	eq
 80007c6:	2800      	cmpeq	r0, #0
 80007c8:	bf1c      	itt	ne
 80007ca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80007ce:	f04f 30ff 	movne.w	r0, #4294967295
 80007d2:	f000 b9b9 	b.w	8000b48 <__aeabi_idiv0>
 80007d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80007da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007de:	2900      	cmp	r1, #0
 80007e0:	db09      	blt.n	80007f6 <__aeabi_ldivmod+0x42>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db1a      	blt.n	800081c <__aeabi_ldivmod+0x68>
 80007e6:	f000 f84d 	bl	8000884 <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4770      	bx	lr
 80007f6:	4240      	negs	r0, r0
 80007f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db1b      	blt.n	8000838 <__aeabi_ldivmod+0x84>
 8000800:	f000 f840 	bl	8000884 <__udivmoddi4>
 8000804:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080c:	b004      	add	sp, #16
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	4252      	negs	r2, r2
 8000816:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800081a:	4770      	bx	lr
 800081c:	4252      	negs	r2, r2
 800081e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000822:	f000 f82f 	bl	8000884 <__udivmoddi4>
 8000826:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800082e:	b004      	add	sp, #16
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	4770      	bx	lr
 8000838:	4252      	negs	r2, r2
 800083a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800083e:	f000 f821 	bl	8000884 <__udivmoddi4>
 8000842:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084a:	b004      	add	sp, #16
 800084c:	4252      	negs	r2, r2
 800084e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000852:	4770      	bx	lr

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b96e 	b.w	8000b48 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468c      	mov	ip, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8083 	bne.w	800099a <__udivmoddi4+0x116>
 8000894:	428a      	cmp	r2, r1
 8000896:	4617      	mov	r7, r2
 8000898:	d947      	bls.n	800092a <__udivmoddi4+0xa6>
 800089a:	fab2 f282 	clz	r2, r2
 800089e:	b142      	cbz	r2, 80008b2 <__udivmoddi4+0x2e>
 80008a0:	f1c2 0020 	rsb	r0, r2, #32
 80008a4:	fa24 f000 	lsr.w	r0, r4, r0
 80008a8:	4091      	lsls	r1, r2
 80008aa:	4097      	lsls	r7, r2
 80008ac:	ea40 0c01 	orr.w	ip, r0, r1
 80008b0:	4094      	lsls	r4, r2
 80008b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008b6:	0c23      	lsrs	r3, r4, #16
 80008b8:	fbbc f6f8 	udiv	r6, ip, r8
 80008bc:	fa1f fe87 	uxth.w	lr, r7
 80008c0:	fb08 c116 	mls	r1, r8, r6, ip
 80008c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c8:	fb06 f10e 	mul.w	r1, r6, lr
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d909      	bls.n	80008e4 <__udivmoddi4+0x60>
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008d6:	f080 8119 	bcs.w	8000b0c <__udivmoddi4+0x288>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 8116 	bls.w	8000b0c <__udivmoddi4+0x288>
 80008e0:	3e02      	subs	r6, #2
 80008e2:	443b      	add	r3, r7
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ec:	fb08 3310 	mls	r3, r8, r0, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d909      	bls.n	8000910 <__udivmoddi4+0x8c>
 80008fc:	193c      	adds	r4, r7, r4
 80008fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000902:	f080 8105 	bcs.w	8000b10 <__udivmoddi4+0x28c>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f240 8102 	bls.w	8000b10 <__udivmoddi4+0x28c>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000914:	eba4 040e 	sub.w	r4, r4, lr
 8000918:	2600      	movs	r6, #0
 800091a:	b11d      	cbz	r5, 8000924 <__udivmoddi4+0xa0>
 800091c:	40d4      	lsrs	r4, r2
 800091e:	2300      	movs	r3, #0
 8000920:	e9c5 4300 	strd	r4, r3, [r5]
 8000924:	4631      	mov	r1, r6
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	b902      	cbnz	r2, 800092e <__udivmoddi4+0xaa>
 800092c:	deff      	udf	#255	; 0xff
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	2a00      	cmp	r2, #0
 8000934:	d150      	bne.n	80009d8 <__udivmoddi4+0x154>
 8000936:	1bcb      	subs	r3, r1, r7
 8000938:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800093c:	fa1f f887 	uxth.w	r8, r7
 8000940:	2601      	movs	r6, #1
 8000942:	fbb3 fcfe 	udiv	ip, r3, lr
 8000946:	0c21      	lsrs	r1, r4, #16
 8000948:	fb0e 331c 	mls	r3, lr, ip, r3
 800094c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000950:	fb08 f30c 	mul.w	r3, r8, ip
 8000954:	428b      	cmp	r3, r1
 8000956:	d907      	bls.n	8000968 <__udivmoddi4+0xe4>
 8000958:	1879      	adds	r1, r7, r1
 800095a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0xe2>
 8000960:	428b      	cmp	r3, r1
 8000962:	f200 80e9 	bhi.w	8000b38 <__udivmoddi4+0x2b4>
 8000966:	4684      	mov	ip, r0
 8000968:	1ac9      	subs	r1, r1, r3
 800096a:	b2a3      	uxth	r3, r4
 800096c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000970:	fb0e 1110 	mls	r1, lr, r0, r1
 8000974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000978:	fb08 f800 	mul.w	r8, r8, r0
 800097c:	45a0      	cmp	r8, r4
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0x10c>
 8000980:	193c      	adds	r4, r7, r4
 8000982:	f100 33ff 	add.w	r3, r0, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x10a>
 8000988:	45a0      	cmp	r8, r4
 800098a:	f200 80d9 	bhi.w	8000b40 <__udivmoddi4+0x2bc>
 800098e:	4618      	mov	r0, r3
 8000990:	eba4 0408 	sub.w	r4, r4, r8
 8000994:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000998:	e7bf      	b.n	800091a <__udivmoddi4+0x96>
 800099a:	428b      	cmp	r3, r1
 800099c:	d909      	bls.n	80009b2 <__udivmoddi4+0x12e>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	f000 80b1 	beq.w	8000b06 <__udivmoddi4+0x282>
 80009a4:	2600      	movs	r6, #0
 80009a6:	e9c5 0100 	strd	r0, r1, [r5]
 80009aa:	4630      	mov	r0, r6
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	fab3 f683 	clz	r6, r3
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d14a      	bne.n	8000a50 <__udivmoddi4+0x1cc>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d302      	bcc.n	80009c4 <__udivmoddi4+0x140>
 80009be:	4282      	cmp	r2, r0
 80009c0:	f200 80b8 	bhi.w	8000b34 <__udivmoddi4+0x2b0>
 80009c4:	1a84      	subs	r4, r0, r2
 80009c6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ca:	2001      	movs	r0, #1
 80009cc:	468c      	mov	ip, r1
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d0a8      	beq.n	8000924 <__udivmoddi4+0xa0>
 80009d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009d6:	e7a5      	b.n	8000924 <__udivmoddi4+0xa0>
 80009d8:	f1c2 0320 	rsb	r3, r2, #32
 80009dc:	fa20 f603 	lsr.w	r6, r0, r3
 80009e0:	4097      	lsls	r7, r2
 80009e2:	fa01 f002 	lsl.w	r0, r1, r2
 80009e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ea:	40d9      	lsrs	r1, r3
 80009ec:	4330      	orrs	r0, r6
 80009ee:	0c03      	lsrs	r3, r0, #16
 80009f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009f4:	fa1f f887 	uxth.w	r8, r7
 80009f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a00:	fb06 f108 	mul.w	r1, r6, r8
 8000a04:	4299      	cmp	r1, r3
 8000a06:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x19c>
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a12:	f080 808d 	bcs.w	8000b30 <__udivmoddi4+0x2ac>
 8000a16:	4299      	cmp	r1, r3
 8000a18:	f240 808a 	bls.w	8000b30 <__udivmoddi4+0x2ac>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	443b      	add	r3, r7
 8000a20:	1a5b      	subs	r3, r3, r1
 8000a22:	b281      	uxth	r1, r0
 8000a24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb00 f308 	mul.w	r3, r0, r8
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x1c4>
 8000a38:	1879      	adds	r1, r7, r1
 8000a3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a3e:	d273      	bcs.n	8000b28 <__udivmoddi4+0x2a4>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d971      	bls.n	8000b28 <__udivmoddi4+0x2a4>
 8000a44:	3802      	subs	r0, #2
 8000a46:	4439      	add	r1, r7
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a4e:	e778      	b.n	8000942 <__udivmoddi4+0xbe>
 8000a50:	f1c6 0c20 	rsb	ip, r6, #32
 8000a54:	fa03 f406 	lsl.w	r4, r3, r6
 8000a58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a5c:	431c      	orrs	r4, r3
 8000a5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a62:	fa01 f306 	lsl.w	r3, r1, r6
 8000a66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a6e:	431f      	orrs	r7, r3
 8000a70:	0c3b      	lsrs	r3, r7, #16
 8000a72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a76:	fa1f f884 	uxth.w	r8, r4
 8000a7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a82:	fb09 fa08 	mul.w	sl, r9, r8
 8000a86:	458a      	cmp	sl, r1
 8000a88:	fa02 f206 	lsl.w	r2, r2, r6
 8000a8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x220>
 8000a92:	1861      	adds	r1, r4, r1
 8000a94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a98:	d248      	bcs.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9a:	458a      	cmp	sl, r1
 8000a9c:	d946      	bls.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000aa2:	4421      	add	r1, r4
 8000aa4:	eba1 010a 	sub.w	r1, r1, sl
 8000aa8:	b2bf      	uxth	r7, r7
 8000aaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000aae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ab2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ab6:	fb00 f808 	mul.w	r8, r0, r8
 8000aba:	45b8      	cmp	r8, r7
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x24a>
 8000abe:	19e7      	adds	r7, r4, r7
 8000ac0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac4:	d22e      	bcs.n	8000b24 <__udivmoddi4+0x2a0>
 8000ac6:	45b8      	cmp	r8, r7
 8000ac8:	d92c      	bls.n	8000b24 <__udivmoddi4+0x2a0>
 8000aca:	3802      	subs	r0, #2
 8000acc:	4427      	add	r7, r4
 8000ace:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ad2:	eba7 0708 	sub.w	r7, r7, r8
 8000ad6:	fba0 8902 	umull	r8, r9, r0, r2
 8000ada:	454f      	cmp	r7, r9
 8000adc:	46c6      	mov	lr, r8
 8000ade:	4649      	mov	r1, r9
 8000ae0:	d31a      	bcc.n	8000b18 <__udivmoddi4+0x294>
 8000ae2:	d017      	beq.n	8000b14 <__udivmoddi4+0x290>
 8000ae4:	b15d      	cbz	r5, 8000afe <__udivmoddi4+0x27a>
 8000ae6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aea:	eb67 0701 	sbc.w	r7, r7, r1
 8000aee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000af2:	40f2      	lsrs	r2, r6
 8000af4:	ea4c 0202 	orr.w	r2, ip, r2
 8000af8:	40f7      	lsrs	r7, r6
 8000afa:	e9c5 2700 	strd	r2, r7, [r5]
 8000afe:	2600      	movs	r6, #0
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e70b      	b.n	8000924 <__udivmoddi4+0xa0>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e9      	b.n	80008e4 <__udivmoddi4+0x60>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6fd      	b.n	8000910 <__udivmoddi4+0x8c>
 8000b14:	4543      	cmp	r3, r8
 8000b16:	d2e5      	bcs.n	8000ae4 <__udivmoddi4+0x260>
 8000b18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7df      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b24:	4608      	mov	r0, r1
 8000b26:	e7d2      	b.n	8000ace <__udivmoddi4+0x24a>
 8000b28:	4660      	mov	r0, ip
 8000b2a:	e78d      	b.n	8000a48 <__udivmoddi4+0x1c4>
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	e7b9      	b.n	8000aa4 <__udivmoddi4+0x220>
 8000b30:	4666      	mov	r6, ip
 8000b32:	e775      	b.n	8000a20 <__udivmoddi4+0x19c>
 8000b34:	4630      	mov	r0, r6
 8000b36:	e74a      	b.n	80009ce <__udivmoddi4+0x14a>
 8000b38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b3c:	4439      	add	r1, r7
 8000b3e:	e713      	b.n	8000968 <__udivmoddi4+0xe4>
 8000b40:	3802      	subs	r0, #2
 8000b42:	443c      	add	r4, r7
 8000b44:	e724      	b.n	8000990 <__udivmoddi4+0x10c>
 8000b46:	bf00      	nop

08000b48 <__aeabi_idiv0>:
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b82:	f001 f889 	bl	8001c98 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a47      	ldr	r2, [pc, #284]	; (8000cd0 <HAL_UART_MspInit+0x13c>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb6:	4b47      	ldr	r3, [pc, #284]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bba:	4a46      	ldr	r2, [pc, #280]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bc2:	4b44      	ldr	r3, [pc, #272]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b41      	ldr	r3, [pc, #260]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a40      	ldr	r2, [pc, #256]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b3e      	ldr	r3, [pc, #248]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f000 fde6 	bl	80017d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c08:	e05d      	b.n	8000cc6 <HAL_UART_MspInit+0x132>
  else if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_UART_MspInit+0x144>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d158      	bne.n	8000cc6 <HAL_UART_MspInit+0x132>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	4a2e      	ldr	r2, [pc, #184]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c20:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a28      	ldr	r2, [pc, #160]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <HAL_UART_MspInit+0x140>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c54:	2307      	movs	r3, #7
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	481f      	ldr	r0, [pc, #124]	; (8000cdc <HAL_UART_MspInit+0x148>)
 8000c60:	f000 fdb8 	bl	80017d4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000c64:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c66:	4a1f      	ldr	r2, [pc, #124]	; (8000ce4 <HAL_UART_MspInit+0x150>)
 8000c68:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c6c:	2218      	movs	r2, #24
 8000c6e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c70:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c76:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c7c:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c7e:	2280      	movs	r2, #128	; 0x80
 8000c80:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c88:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000c8e:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c90:	2220      	movs	r2, #32
 8000c92:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000c9a:	4811      	ldr	r0, [pc, #68]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000c9c:	f000 fb20 	bl	80012e0 <HAL_DMA_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_UART_MspInit+0x116>
      Error_Handler();
 8000ca6:	f008 ff05 	bl	8009ab4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a0c      	ldr	r2, [pc, #48]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000cae:	67da      	str	r2, [r3, #124]	; 0x7c
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_UART_MspInit+0x14c>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2025      	movs	r0, #37	; 0x25
 8000cbc:	f000 fadb 	bl	8001276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cc0:	2025      	movs	r0, #37	; 0x25
 8000cc2:	f000 faf2 	bl	80012aa <HAL_NVIC_EnableIRQ>
}
 8000cc6:	bf00      	nop
 8000cc8:	3730      	adds	r7, #48	; 0x30
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40008000 	.word	0x40008000
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40013800 	.word	0x40013800
 8000cdc:	48000800 	.word	0x48000800
 8000ce0:	200008dc 	.word	0x200008dc
 8000ce4:	40020008 	.word	0x40020008

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <NMI_Handler+0x4>

08000cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <BusFault_Handler+0x4>

08000d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <UsageFault_Handler+0x4>

08000d06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d34:	f000 f9a6 	bl	8001084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <DMA1_Channel1_IRQHandler+0x10>)
 8000d42:	f000 fc35 	bl	80015b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200008dc 	.word	0x200008dc

08000d50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d54:	4802      	ldr	r0, [pc, #8]	; (8000d60 <USART1_IRQHandler+0x10>)
 8000d56:	f001 ff7f 	bl	8002c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	2000084c 	.word	0x2000084c

08000d64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d6c:	f000 fecc 	bl	8001b08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d7c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d80:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d013      	beq.n	8000db4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d90:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d94:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d00b      	beq.n	8000db4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d9c:	e000      	b.n	8000da0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d9e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000da0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d0f9      	beq.n	8000d9e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000daa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000db4:	687b      	ldr	r3, [r7, #4]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
	return 1;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <_kill>:

int _kill(int pid, int sig)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ddc:	f020 ff6a 	bl	8021cb4 <__errno>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2216      	movs	r2, #22
 8000de4:	601a      	str	r2, [r3, #0]
	return -1;
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <_exit>:

void _exit (int status)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000dfa:	f04f 31ff 	mov.w	r1, #4294967295
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff ffe7 	bl	8000dd2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e04:	e7fe      	b.n	8000e04 <_exit+0x12>

08000e06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	60f8      	str	r0, [r7, #12]
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	e00a      	b.n	8000e2e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e18:	f3af 8000 	nop.w
 8000e1c:	4601      	mov	r1, r0
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	1c5a      	adds	r2, r3, #1
 8000e22:	60ba      	str	r2, [r7, #8]
 8000e24:	b2ca      	uxtb	r2, r1
 8000e26:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	dbf0      	blt.n	8000e18 <_read+0x12>
	}

return len;
 8000e36:	687b      	ldr	r3, [r7, #4]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	e009      	b.n	8000e66 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	1c5a      	adds	r2, r3, #1
 8000e56:	60ba      	str	r2, [r7, #8]
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff ff8a 	bl	8000d74 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	3301      	adds	r3, #1
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	dbf1      	blt.n	8000e52 <_write+0x12>
	}
	return len;
 8000e6e:	687b      	ldr	r3, [r7, #4]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <_close>:

int _close(int file)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	return -1;
 8000e80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ea0:	605a      	str	r2, [r3, #4]
	return 0;
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <_isatty>:

int _isatty(int file)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	return 1;
 8000eb8:	2301      	movs	r3, #1
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b085      	sub	sp, #20
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	60f8      	str	r0, [r7, #12]
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
	return 0;
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <_open>:

int _open(char *path, int flags, ...)
{
 8000ee0:	b40e      	push	{r1, r2, r3}
 8000ee2:	b480      	push	{r7}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	b003      	add	sp, #12
 8000efa:	4770      	bx	lr

08000efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f04:	4a14      	ldr	r2, [pc, #80]	; (8000f58 <_sbrk+0x5c>)
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <_sbrk+0x60>)
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f10:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <_sbrk+0x64>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d102      	bne.n	8000f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <_sbrk+0x64>)
 8000f1a:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <_sbrk+0x68>)
 8000f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <_sbrk+0x64>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d207      	bcs.n	8000f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f2c:	f020 fec2 	bl	8021cb4 <__errno>
 8000f30:	4603      	mov	r3, r0
 8000f32:	220c      	movs	r2, #12
 8000f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3a:	e009      	b.n	8000f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <_sbrk+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <_sbrk+0x64>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <_sbrk+0x64>)
 8000f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20020000 	.word	0x20020000
 8000f5c:	00000400 	.word	0x00000400
 8000f60:	2000035c 	.word	0x2000035c
 8000f64:	20001110 	.word	0x20001110

08000f68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <SystemInit+0x20>)
 8000f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <SystemInit+0x20>)
 8000f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f8c:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f8e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f90:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f92:	490e      	ldr	r1, [pc, #56]	; (8000fcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f94:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <LoopForever+0xe>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f98:	e002      	b.n	8000fa0 <LoopCopyDataInit>

08000f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9e:	3304      	adds	r3, #4

08000fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa4:	d3f9      	bcc.n	8000f9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa6:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fa8:	4c0b      	ldr	r4, [pc, #44]	; (8000fd8 <LoopForever+0x16>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fac:	e001      	b.n	8000fb2 <LoopFillZerobss>

08000fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb0:	3204      	adds	r2, #4

08000fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb4:	d3fb      	bcc.n	8000fae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fb6:	f7ff ffd7 	bl	8000f68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fba:	f021 fa99 	bl	80224f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fbe:	f008 fb8d 	bl	80096dc <main>

08000fc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fc2:	e7fe      	b.n	8000fc2 <LoopForever>
  ldr   r0, =_estack
 8000fc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fcc:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8000fd0:	0802ca10 	.word	0x0802ca10
  ldr r2, =_sbss
 8000fd4:	2000033c 	.word	0x2000033c
  ldr r4, =_ebss
 8000fd8:	20001110 	.word	0x20001110

08000fdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fdc:	e7fe      	b.n	8000fdc <ADC1_2_IRQHandler>

08000fde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe8:	2003      	movs	r0, #3
 8000fea:	f000 f939 	bl	8001260 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f000 f80e 	bl	8001010 <HAL_InitTick>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d002      	beq.n	8001000 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	71fb      	strb	r3, [r7, #7]
 8000ffe:	e001      	b.n	8001004 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001000:	f7ff fda4 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001004:	79fb      	ldrb	r3, [r7, #7]

}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800101c:	4b16      	ldr	r3, [pc, #88]	; (8001078 <HAL_InitTick+0x68>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d022      	beq.n	800106a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001024:	4b15      	ldr	r3, [pc, #84]	; (800107c <HAL_InitTick+0x6c>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b13      	ldr	r3, [pc, #76]	; (8001078 <HAL_InitTick+0x68>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001030:	fbb1 f3f3 	udiv	r3, r1, r3
 8001034:	fbb2 f3f3 	udiv	r3, r2, r3
 8001038:	4618      	mov	r0, r3
 800103a:	f000 f944 	bl	80012c6 <HAL_SYSTICK_Config>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d10f      	bne.n	8001064 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b0f      	cmp	r3, #15
 8001048:	d809      	bhi.n	800105e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104a:	2200      	movs	r2, #0
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	f04f 30ff 	mov.w	r0, #4294967295
 8001052:	f000 f910 	bl	8001276 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <HAL_InitTick+0x70>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	e007      	b.n	800106e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	73fb      	strb	r3, [r7, #15]
 8001062:	e004      	b.n	800106e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	e001      	b.n	800106e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800106e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2000000c 	.word	0x2000000c
 800107c:	20000004 	.word	0x20000004
 8001080:	20000008 	.word	0x20000008

08001084 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <HAL_IncTick+0x1c>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_IncTick+0x20>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4413      	add	r3, r2
 8001092:	4a03      	ldr	r2, [pc, #12]	; (80010a0 <HAL_IncTick+0x1c>)
 8001094:	6013      	str	r3, [r2, #0]
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	200010f8 	.word	0x200010f8
 80010a4:	2000000c 	.word	0x2000000c

080010a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return uwTick;
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <HAL_GetTick+0x14>)
 80010ae:	681b      	ldr	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	200010f8 	.word	0x200010f8

080010c0 <__NVIC_SetPriorityGrouping>:
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_GetPriorityGrouping>:
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_EnableIRQ>:
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	db0b      	blt.n	800114e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	4907      	ldr	r1, [pc, #28]	; (800115c <__NVIC_EnableIRQ+0x38>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	2001      	movs	r0, #1
 8001146:	fa00 f202 	lsl.w	r2, r0, r2
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000e100 	.word	0xe000e100

08001160 <__NVIC_SetPriority>:
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db0a      	blt.n	800118a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	490c      	ldr	r1, [pc, #48]	; (80011ac <__NVIC_SetPriority+0x4c>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	440b      	add	r3, r1
 8001184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001188:	e00a      	b.n	80011a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4908      	ldr	r1, [pc, #32]	; (80011b0 <__NVIC_SetPriority+0x50>)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	3b04      	subs	r3, #4
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	440b      	add	r3, r1
 800119e:	761a      	strb	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <NVIC_EncodePriority>:
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f1c3 0307 	rsb	r3, r3, #7
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	bf28      	it	cs
 80011d2:	2304      	movcs	r3, #4
 80011d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3304      	adds	r3, #4
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d902      	bls.n	80011e4 <NVIC_EncodePriority+0x30>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3b03      	subs	r3, #3
 80011e2:	e000      	b.n	80011e6 <NVIC_EncodePriority+0x32>
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	401a      	ands	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43d9      	mvns	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	4313      	orrs	r3, r2
}
 800120e:	4618      	mov	r0, r3
 8001210:	3724      	adds	r7, #36	; 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <SysTick_Config>:
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800122c:	d301      	bcc.n	8001232 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800122e:	2301      	movs	r3, #1
 8001230:	e00f      	b.n	8001252 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001232:	4a0a      	ldr	r2, [pc, #40]	; (800125c <SysTick_Config+0x40>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123a:	210f      	movs	r1, #15
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f7ff ff8e 	bl	8001160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <SysTick_Config+0x40>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124a:	4b04      	ldr	r3, [pc, #16]	; (800125c <SysTick_Config+0x40>)
 800124c:	2207      	movs	r2, #7
 800124e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	e000e010 	.word	0xe000e010

08001260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ff29 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001284:	f7ff ff40 	bl	8001108 <__NVIC_GetPriorityGrouping>
 8001288:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff ff90 	bl	80011b4 <NVIC_EncodePriority>
 8001294:	4602      	mov	r2, r0
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff5f 	bl	8001160 <__NVIC_SetPriority>
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff33 	bl	8001124 <__NVIC_EnableIRQ>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffa4 	bl	800121c <SysTick_Config>
 80012d4:	4603      	mov	r3, r0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e08d      	b.n	800140e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	4b47      	ldr	r3, [pc, #284]	; (8001418 <HAL_DMA_Init+0x138>)
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d80f      	bhi.n	800131e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	461a      	mov	r2, r3
 8001304:	4b45      	ldr	r3, [pc, #276]	; (800141c <HAL_DMA_Init+0x13c>)
 8001306:	4413      	add	r3, r2
 8001308:	4a45      	ldr	r2, [pc, #276]	; (8001420 <HAL_DMA_Init+0x140>)
 800130a:	fba2 2303 	umull	r2, r3, r2, r3
 800130e:	091b      	lsrs	r3, r3, #4
 8001310:	009a      	lsls	r2, r3, #2
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a42      	ldr	r2, [pc, #264]	; (8001424 <HAL_DMA_Init+0x144>)
 800131a:	641a      	str	r2, [r3, #64]	; 0x40
 800131c:	e00e      	b.n	800133c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	4b40      	ldr	r3, [pc, #256]	; (8001428 <HAL_DMA_Init+0x148>)
 8001326:	4413      	add	r3, r2
 8001328:	4a3d      	ldr	r2, [pc, #244]	; (8001420 <HAL_DMA_Init+0x140>)
 800132a:	fba2 2303 	umull	r2, r3, r2, r3
 800132e:	091b      	lsrs	r3, r3, #4
 8001330:	009a      	lsls	r2, r3, #2
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a3c      	ldr	r2, [pc, #240]	; (800142c <HAL_DMA_Init+0x14c>)
 800133a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2202      	movs	r2, #2
 8001340:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001356:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001360:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800136c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001378:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a1b      	ldr	r3, [r3, #32]
 800137e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	4313      	orrs	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 f9be 	bl	8001710 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800139c:	d102      	bne.n	80013a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013b8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d010      	beq.n	80013e4 <HAL_DMA_Init+0x104>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d80c      	bhi.n	80013e4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 f9de 	bl	800178c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	e008      	b.n	80013f6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40020407 	.word	0x40020407
 800141c:	bffdfff8 	.word	0xbffdfff8
 8001420:	cccccccd 	.word	0xcccccccd
 8001424:	40020000 	.word	0x40020000
 8001428:	bffdfbf8 	.word	0xbffdfbf8
 800142c:	40020400 	.word	0x40020400

08001430 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001438:	2300      	movs	r3, #0
 800143a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d005      	beq.n	8001454 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2204      	movs	r2, #4
 800144c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	73fb      	strb	r3, [r7, #15]
 8001452:	e037      	b.n	80014c4 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f022 020e 	bic.w	r2, r2, #14
 8001462:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800146e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001472:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0201 	bic.w	r2, r2, #1
 8001482:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001488:	f003 021f 	and.w	r2, r3, #31
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	2101      	movs	r1, #1
 8001492:	fa01 f202 	lsl.w	r2, r1, r2
 8001496:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014a0:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00c      	beq.n	80014c4 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014b8:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80014c2:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b084      	sub	sp, #16
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d00d      	beq.n	8001516 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2204      	movs	r2, #4
 80014fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	73fb      	strb	r3, [r7, #15]
 8001514:	e047      	b.n	80015a6 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 020e 	bic.w	r2, r2, #14
 8001524:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 0201 	bic.w	r2, r2, #1
 8001534:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001540:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001544:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	f003 021f 	and.w	r2, r3, #31
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	2101      	movs	r1, #1
 8001554:	fa01 f202 	lsl.w	r2, r1, r2
 8001558:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001562:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001568:	2b00      	cmp	r3, #0
 800156a:	d00c      	beq.n	8001586 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001576:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800157a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001584:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	4798      	blx	r3
    }
  }
  return status;
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015cc:	f003 031f 	and.w	r3, r3, #31
 80015d0:	2204      	movs	r2, #4
 80015d2:	409a      	lsls	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d026      	beq.n	800162a <HAL_DMA_IRQHandler+0x7a>
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d021      	beq.n	800162a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0320 	and.w	r3, r3, #32
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d107      	bne.n	8001604 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0204 	bic.w	r2, r2, #4
 8001602:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001608:	f003 021f 	and.w	r2, r3, #31
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	2104      	movs	r1, #4
 8001612:	fa01 f202 	lsl.w	r2, r1, r2
 8001616:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161c:	2b00      	cmp	r3, #0
 800161e:	d071      	beq.n	8001704 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001628:	e06c      	b.n	8001704 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	f003 031f 	and.w	r3, r3, #31
 8001632:	2202      	movs	r2, #2
 8001634:	409a      	lsls	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	4013      	ands	r3, r2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d02e      	beq.n	800169c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d029      	beq.n	800169c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0320 	and.w	r3, r3, #32
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10b      	bne.n	800166e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 020a 	bic.w	r2, r2, #10
 8001664:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	f003 021f 	and.w	r2, r3, #31
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	2102      	movs	r1, #2
 800167c:	fa01 f202 	lsl.w	r2, r1, r2
 8001680:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168e:	2b00      	cmp	r3, #0
 8001690:	d038      	beq.n	8001704 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800169a:	e033      	b.n	8001704 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a0:	f003 031f 	and.w	r3, r3, #31
 80016a4:	2208      	movs	r2, #8
 80016a6:	409a      	lsls	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4013      	ands	r3, r2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d02a      	beq.n	8001706 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d025      	beq.n	8001706 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 020e 	bic.w	r2, r2, #14
 80016c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	f003 021f 	and.w	r2, r3, #31
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	2101      	movs	r1, #1
 80016d8:	fa01 f202 	lsl.w	r2, r1, r2
 80016dc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d004      	beq.n	8001706 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001704:	bf00      	nop
 8001706:	bf00      	nop
}
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001710:	b480      	push	{r7}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	4b16      	ldr	r3, [pc, #88]	; (8001778 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001720:	429a      	cmp	r2, r3
 8001722:	d802      	bhi.n	800172a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001724:	4b15      	ldr	r3, [pc, #84]	; (800177c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	e001      	b.n	800172e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800172c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	b2db      	uxtb	r3, r3
 8001738:	3b08      	subs	r3, #8
 800173a:	4a12      	ldr	r2, [pc, #72]	; (8001784 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800173c:	fba2 2303 	umull	r2, r3, r2, r3
 8001740:	091b      	lsrs	r3, r3, #4
 8001742:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001748:	089b      	lsrs	r3, r3, #2
 800174a:	009a      	lsls	r2, r3, #2
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4413      	add	r3, r2
 8001750:	461a      	mov	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800175a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 031f 	and.w	r3, r3, #31
 8001762:	2201      	movs	r2, #1
 8001764:	409a      	lsls	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	651a      	str	r2, [r3, #80]	; 0x50
}
 800176a:	bf00      	nop
 800176c:	371c      	adds	r7, #28
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40020407 	.word	0x40020407
 800177c:	40020800 	.word	0x40020800
 8001780:	40020820 	.word	0x40020820
 8001784:	cccccccd 	.word	0xcccccccd
 8001788:	40020880 	.word	0x40020880

0800178c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80017a0:	4413      	add	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	461a      	mov	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80017ae:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	f003 031f 	and.w	r3, r3, #31
 80017b8:	2201      	movs	r2, #1
 80017ba:	409a      	lsls	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	1000823f 	.word	0x1000823f
 80017d0:	40020940 	.word	0x40020940

080017d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017e2:	e15a      	b.n	8001a9a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	2101      	movs	r1, #1
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	fa01 f303 	lsl.w	r3, r1, r3
 80017f0:	4013      	ands	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 814c 	beq.w	8001a94 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d00b      	beq.n	800181c <HAL_GPIO_Init+0x48>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b02      	cmp	r3, #2
 800180a:	d007      	beq.n	800181c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001810:	2b11      	cmp	r3, #17
 8001812:	d003      	beq.n	800181c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b12      	cmp	r3, #18
 800181a:	d130      	bne.n	800187e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	2203      	movs	r2, #3
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4313      	orrs	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001852:	2201      	movs	r2, #1
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	091b      	lsrs	r3, r3, #4
 8001868:	f003 0201 	and.w	r2, r3, #1
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	2203      	movs	r2, #3
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0xea>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b12      	cmp	r3, #18
 80018bc:	d123      	bne.n	8001906 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	08da      	lsrs	r2, r3, #3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3208      	adds	r2, #8
 80018c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	220f      	movs	r2, #15
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	691a      	ldr	r2, [r3, #16]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	08da      	lsrs	r2, r3, #3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3208      	adds	r2, #8
 8001900:	6939      	ldr	r1, [r7, #16]
 8001902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	2203      	movs	r2, #3
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0203 	and.w	r2, r3, #3
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 80a6 	beq.w	8001a94 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001948:	4b5b      	ldr	r3, [pc, #364]	; (8001ab8 <HAL_GPIO_Init+0x2e4>)
 800194a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194c:	4a5a      	ldr	r2, [pc, #360]	; (8001ab8 <HAL_GPIO_Init+0x2e4>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6613      	str	r3, [r2, #96]	; 0x60
 8001954:	4b58      	ldr	r3, [pc, #352]	; (8001ab8 <HAL_GPIO_Init+0x2e4>)
 8001956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001960:	4a56      	ldr	r2, [pc, #344]	; (8001abc <HAL_GPIO_Init+0x2e8>)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	089b      	lsrs	r3, r3, #2
 8001966:	3302      	adds	r3, #2
 8001968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800196c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	220f      	movs	r2, #15
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800198a:	d01f      	beq.n	80019cc <HAL_GPIO_Init+0x1f8>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a4c      	ldr	r2, [pc, #304]	; (8001ac0 <HAL_GPIO_Init+0x2ec>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d019      	beq.n	80019c8 <HAL_GPIO_Init+0x1f4>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a4b      	ldr	r2, [pc, #300]	; (8001ac4 <HAL_GPIO_Init+0x2f0>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d013      	beq.n	80019c4 <HAL_GPIO_Init+0x1f0>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a4a      	ldr	r2, [pc, #296]	; (8001ac8 <HAL_GPIO_Init+0x2f4>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d00d      	beq.n	80019c0 <HAL_GPIO_Init+0x1ec>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a49      	ldr	r2, [pc, #292]	; (8001acc <HAL_GPIO_Init+0x2f8>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d007      	beq.n	80019bc <HAL_GPIO_Init+0x1e8>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a48      	ldr	r2, [pc, #288]	; (8001ad0 <HAL_GPIO_Init+0x2fc>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d101      	bne.n	80019b8 <HAL_GPIO_Init+0x1e4>
 80019b4:	2305      	movs	r3, #5
 80019b6:	e00a      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019b8:	2306      	movs	r3, #6
 80019ba:	e008      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019bc:	2304      	movs	r3, #4
 80019be:	e006      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019c0:	2303      	movs	r3, #3
 80019c2:	e004      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019c4:	2302      	movs	r3, #2
 80019c6:	e002      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <HAL_GPIO_Init+0x1fa>
 80019cc:	2300      	movs	r3, #0
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	f002 0203 	and.w	r2, r2, #3
 80019d4:	0092      	lsls	r2, r2, #2
 80019d6:	4093      	lsls	r3, r2
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019de:	4937      	ldr	r1, [pc, #220]	; (8001abc <HAL_GPIO_Init+0x2e8>)
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	089b      	lsrs	r3, r3, #2
 80019e4:	3302      	adds	r3, #2
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019ec:	4b39      	ldr	r3, [pc, #228]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a10:	4a30      	ldr	r2, [pc, #192]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a16:	4b2f      	ldr	r3, [pc, #188]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4013      	ands	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a3a:	4a26      	ldr	r2, [pc, #152]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a40:	4b24      	ldr	r3, [pc, #144]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a64:	4a1b      	ldr	r2, [pc, #108]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	43db      	mvns	r3, r3
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4013      	ands	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a8e:	4a11      	ldr	r2, [pc, #68]	; (8001ad4 <HAL_GPIO_Init+0x300>)
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	3301      	adds	r3, #1
 8001a98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f47f ae9d 	bne.w	80017e4 <HAL_GPIO_Init+0x10>
  }
}
 8001aaa:	bf00      	nop
 8001aac:	bf00      	nop
 8001aae:	371c      	adds	r7, #28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40010000 	.word	0x40010000
 8001ac0:	48000400 	.word	0x48000400
 8001ac4:	48000800 	.word	0x48000800
 8001ac8:	48000c00 	.word	0x48000c00
 8001acc:	48001000 	.word	0x48001000
 8001ad0:	48001400 	.word	0x48001400
 8001ad4:	40010400 	.word	0x40010400

08001ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	807b      	strh	r3, [r7, #2]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ae8:	787b      	ldrb	r3, [r7, #1]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aee:	887a      	ldrh	r2, [r7, #2]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001af4:	e002      	b.n	8001afc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001af6:	887a      	ldrh	r2, [r7, #2]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b12:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b14:	695a      	ldr	r2, [r3, #20]
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d006      	beq.n	8001b2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b1e:	4a05      	ldr	r2, [pc, #20]	; (8001b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b20:	88fb      	ldrh	r3, [r7, #6]
 8001b22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f806 	bl	8001b38 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40010400 	.word	0x40010400

08001b38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d141      	bne.n	8001be2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b5e:	4b4b      	ldr	r3, [pc, #300]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b6a:	d131      	bne.n	8001bd0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b6c:	4b47      	ldr	r3, [pc, #284]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b72:	4a46      	ldr	r2, [pc, #280]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b7c:	4b43      	ldr	r3, [pc, #268]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b84:	4a41      	ldr	r2, [pc, #260]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b8c:	4b40      	ldr	r3, [pc, #256]	; (8001c90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2232      	movs	r2, #50	; 0x32
 8001b92:	fb02 f303 	mul.w	r3, r2, r3
 8001b96:	4a3f      	ldr	r2, [pc, #252]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b98:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9c:	0c9b      	lsrs	r3, r3, #18
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ba2:	e002      	b.n	8001baa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001baa:	4b38      	ldr	r3, [pc, #224]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bb6:	d102      	bne.n	8001bbe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f2      	bne.n	8001ba4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bbe:	4b33      	ldr	r3, [pc, #204]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bca:	d158      	bne.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e057      	b.n	8001c80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bd0:	4b2e      	ldr	r3, [pc, #184]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bd6:	4a2d      	ldr	r2, [pc, #180]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001be0:	e04d      	b.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001be8:	d141      	bne.n	8001c6e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bea:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf6:	d131      	bne.n	8001c5c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bf8:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bfe:	4a23      	ldr	r2, [pc, #140]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c08:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c10:	4a1e      	ldr	r2, [pc, #120]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c18:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2232      	movs	r2, #50	; 0x32
 8001c1e:	fb02 f303 	mul.w	r3, r2, r3
 8001c22:	4a1c      	ldr	r2, [pc, #112]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c24:	fba2 2303 	umull	r2, r3, r2, r3
 8001c28:	0c9b      	lsrs	r3, r3, #18
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c2e:	e002      	b.n	8001c36 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c42:	d102      	bne.n	8001c4a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f2      	bne.n	8001c30 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c56:	d112      	bne.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e011      	b.n	8001c80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c62:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c6c:	e007      	b.n	8001c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c6e:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c76:	4a05      	ldr	r2, [pc, #20]	; (8001c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c7c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	40007000 	.word	0x40007000
 8001c90:	20000004 	.word	0x20000004
 8001c94:	431bde83 	.word	0x431bde83

08001c98 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ca2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca6:	6093      	str	r3, [r2, #8]
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40007000 	.word	0x40007000

08001cb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e308      	b.n	80022dc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d075      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cd6:	4ba3      	ldr	r3, [pc, #652]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ce0:	4ba0      	ldr	r3, [pc, #640]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	2b0c      	cmp	r3, #12
 8001cee:	d102      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x3e>
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d002      	beq.n	8001cfc <HAL_RCC_OscConfig+0x44>
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d10b      	bne.n	8001d14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfc:	4b99      	ldr	r3, [pc, #612]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d05b      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x108>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d157      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e2e3      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d1c:	d106      	bne.n	8001d2c <HAL_RCC_OscConfig+0x74>
 8001d1e:	4b91      	ldr	r3, [pc, #580]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a90      	ldr	r2, [pc, #576]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	e01d      	b.n	8001d68 <HAL_RCC_OscConfig+0xb0>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d34:	d10c      	bne.n	8001d50 <HAL_RCC_OscConfig+0x98>
 8001d36:	4b8b      	ldr	r3, [pc, #556]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a8a      	ldr	r2, [pc, #552]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	4b88      	ldr	r3, [pc, #544]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a87      	ldr	r2, [pc, #540]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	e00b      	b.n	8001d68 <HAL_RCC_OscConfig+0xb0>
 8001d50:	4b84      	ldr	r3, [pc, #528]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a83      	ldr	r2, [pc, #524]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	4b81      	ldr	r3, [pc, #516]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a80      	ldr	r2, [pc, #512]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d013      	beq.n	8001d98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d70:	f7ff f99a 	bl	80010a8 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d78:	f7ff f996 	bl	80010a8 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b64      	cmp	r3, #100	; 0x64
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e2a8      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d8a:	4b76      	ldr	r3, [pc, #472]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCC_OscConfig+0xc0>
 8001d96:	e014      	b.n	8001dc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7ff f986 	bl	80010a8 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da0:	f7ff f982 	bl	80010a8 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b64      	cmp	r3, #100	; 0x64
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e294      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001db2:	4b6c      	ldr	r3, [pc, #432]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0xe8>
 8001dbe:	e000      	b.n	8001dc2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d075      	beq.n	8001eba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dce:	4b65      	ldr	r3, [pc, #404]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
 8001dd6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dd8:	4b62      	ldr	r3, [pc, #392]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	2b0c      	cmp	r3, #12
 8001de6:	d102      	bne.n	8001dee <HAL_RCC_OscConfig+0x136>
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d002      	beq.n	8001df4 <HAL_RCC_OscConfig+0x13c>
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d11f      	bne.n	8001e34 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001df4:	4b5b      	ldr	r3, [pc, #364]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_RCC_OscConfig+0x154>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e267      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0c:	4b55      	ldr	r3, [pc, #340]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	061b      	lsls	r3, r3, #24
 8001e1a:	4952      	ldr	r1, [pc, #328]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e20:	4b51      	ldr	r3, [pc, #324]	; (8001f68 <HAL_RCC_OscConfig+0x2b0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff f8f3 	bl	8001010 <HAL_InitTick>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d043      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e253      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d023      	beq.n	8001e84 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e3c:	4b49      	ldr	r3, [pc, #292]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a48      	ldr	r2, [pc, #288]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e48:	f7ff f92e 	bl	80010a8 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e50:	f7ff f92a 	bl	80010a8 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e23c      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e62:	4b40      	ldr	r3, [pc, #256]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6e:	4b3d      	ldr	r3, [pc, #244]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	061b      	lsls	r3, r3, #24
 8001e7c:	4939      	ldr	r1, [pc, #228]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	604b      	str	r3, [r1, #4]
 8001e82:	e01a      	b.n	8001eba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e84:	4b37      	ldr	r3, [pc, #220]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a36      	ldr	r2, [pc, #216]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001e8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7ff f90a 	bl	80010a8 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e98:	f7ff f906 	bl	80010a8 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e218      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eaa:	4b2e      	ldr	r3, [pc, #184]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x1e0>
 8001eb6:	e000      	b.n	8001eba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eb8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d03c      	beq.n	8001f40 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d01c      	beq.n	8001f08 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ece:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed4:	4a23      	ldr	r2, [pc, #140]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ede:	f7ff f8e3 	bl	80010a8 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee6:	f7ff f8df 	bl	80010a8 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e1f1      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ef8:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0ef      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x22e>
 8001f06:	e01b      	b.n	8001f40 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f08:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f0e:	4a15      	ldr	r2, [pc, #84]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001f10:	f023 0301 	bic.w	r3, r3, #1
 8001f14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f18:	f7ff f8c6 	bl	80010a8 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f20:	f7ff f8c2 	bl	80010a8 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e1d4      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f32:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1ef      	bne.n	8001f20 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 80ab 	beq.w	80020a4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f52:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <HAL_RCC_OscConfig+0x2ac>)
 8001f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d106      	bne.n	8001f6c <HAL_RCC_OscConfig+0x2b4>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e005      	b.n	8001f6e <HAL_RCC_OscConfig+0x2b6>
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	20000008 	.word	0x20000008
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00d      	beq.n	8001f8e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f72:	4baf      	ldr	r3, [pc, #700]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	4aae      	ldr	r2, [pc, #696]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f7e:	4bac      	ldr	r3, [pc, #688]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f8e:	4ba9      	ldr	r3, [pc, #676]	; (8002234 <HAL_RCC_OscConfig+0x57c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d118      	bne.n	8001fcc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f9a:	4ba6      	ldr	r3, [pc, #664]	; (8002234 <HAL_RCC_OscConfig+0x57c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4aa5      	ldr	r2, [pc, #660]	; (8002234 <HAL_RCC_OscConfig+0x57c>)
 8001fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa6:	f7ff f87f 	bl	80010a8 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fae:	f7ff f87b 	bl	80010a8 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e18d      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fc0:	4b9c      	ldr	r3, [pc, #624]	; (8002234 <HAL_RCC_OscConfig+0x57c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d108      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x32e>
 8001fd4:	4b96      	ldr	r3, [pc, #600]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fda:	4a95      	ldr	r2, [pc, #596]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fe4:	e024      	b.n	8002030 <HAL_RCC_OscConfig+0x378>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b05      	cmp	r3, #5
 8001fec:	d110      	bne.n	8002010 <HAL_RCC_OscConfig+0x358>
 8001fee:	4b90      	ldr	r3, [pc, #576]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff4:	4a8e      	ldr	r2, [pc, #568]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8001ff6:	f043 0304 	orr.w	r3, r3, #4
 8001ffa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ffe:	4b8c      	ldr	r3, [pc, #560]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002004:	4a8a      	ldr	r2, [pc, #552]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800200e:	e00f      	b.n	8002030 <HAL_RCC_OscConfig+0x378>
 8002010:	4b87      	ldr	r3, [pc, #540]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002016:	4a86      	ldr	r2, [pc, #536]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002018:	f023 0301 	bic.w	r3, r3, #1
 800201c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002020:	4b83      	ldr	r3, [pc, #524]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002026:	4a82      	ldr	r2, [pc, #520]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002028:	f023 0304 	bic.w	r3, r3, #4
 800202c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d016      	beq.n	8002066 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002038:	f7ff f836 	bl	80010a8 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800203e:	e00a      	b.n	8002056 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002040:	f7ff f832 	bl	80010a8 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	f241 3288 	movw	r2, #5000	; 0x1388
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e142      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002056:	4b76      	ldr	r3, [pc, #472]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0ed      	beq.n	8002040 <HAL_RCC_OscConfig+0x388>
 8002064:	e015      	b.n	8002092 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002066:	f7ff f81f 	bl	80010a8 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800206c:	e00a      	b.n	8002084 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206e:	f7ff f81b 	bl	80010a8 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	f241 3288 	movw	r2, #5000	; 0x1388
 800207c:	4293      	cmp	r3, r2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e12b      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002084:	4b6a      	ldr	r3, [pc, #424]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1ed      	bne.n	800206e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002092:	7ffb      	ldrb	r3, [r7, #31]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d105      	bne.n	80020a4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002098:	4b65      	ldr	r3, [pc, #404]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209c:	4a64      	ldr	r2, [pc, #400]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800209e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0320 	and.w	r3, r3, #32
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d03c      	beq.n	800212a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d01c      	beq.n	80020f2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020b8:	4b5d      	ldr	r3, [pc, #372]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020be:	4a5c      	ldr	r2, [pc, #368]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c8:	f7fe ffee 	bl	80010a8 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020d0:	f7fe ffea 	bl	80010a8 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e0fc      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020e2:	4b53      	ldr	r3, [pc, #332]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0ef      	beq.n	80020d0 <HAL_RCC_OscConfig+0x418>
 80020f0:	e01b      	b.n	800212a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020f2:	4b4f      	ldr	r3, [pc, #316]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020f8:	4a4d      	ldr	r2, [pc, #308]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80020fa:	f023 0301 	bic.w	r3, r3, #1
 80020fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002102:	f7fe ffd1 	bl	80010a8 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800210a:	f7fe ffcd 	bl	80010a8 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e0df      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800211c:	4b44      	ldr	r3, [pc, #272]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800211e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1ef      	bne.n	800210a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 80d3 	beq.w	80022da <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002134:	4b3e      	ldr	r3, [pc, #248]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 030c 	and.w	r3, r3, #12
 800213c:	2b0c      	cmp	r3, #12
 800213e:	f000 808d 	beq.w	800225c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d15a      	bne.n	8002200 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214a:	4b39      	ldr	r3, [pc, #228]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a38      	ldr	r2, [pc, #224]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002150:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002154:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002156:	f7fe ffa7 	bl	80010a8 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215e:	f7fe ffa3 	bl	80010a8 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e0b5      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002170:	4b2f      	ldr	r3, [pc, #188]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1f0      	bne.n	800215e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800217c:	4b2c      	ldr	r3, [pc, #176]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	4b2d      	ldr	r3, [pc, #180]	; (8002238 <HAL_RCC_OscConfig+0x580>)
 8002182:	4013      	ands	r3, r2
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6a11      	ldr	r1, [r2, #32]
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800218c:	3a01      	subs	r2, #1
 800218e:	0112      	lsls	r2, r2, #4
 8002190:	4311      	orrs	r1, r2
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002196:	0212      	lsls	r2, r2, #8
 8002198:	4311      	orrs	r1, r2
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800219e:	0852      	lsrs	r2, r2, #1
 80021a0:	3a01      	subs	r2, #1
 80021a2:	0552      	lsls	r2, r2, #21
 80021a4:	4311      	orrs	r1, r2
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021aa:	0852      	lsrs	r2, r2, #1
 80021ac:	3a01      	subs	r2, #1
 80021ae:	0652      	lsls	r2, r2, #25
 80021b0:	4311      	orrs	r1, r2
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80021b6:	06d2      	lsls	r2, r2, #27
 80021b8:	430a      	orrs	r2, r1
 80021ba:	491d      	ldr	r1, [pc, #116]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021c0:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a1a      	ldr	r2, [pc, #104]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021cc:	4b18      	ldr	r3, [pc, #96]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4a17      	ldr	r2, [pc, #92]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7fe ff66 	bl	80010a8 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e0:	f7fe ff62 	bl	80010a8 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e074      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f2:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCC_OscConfig+0x528>
 80021fe:	e06c      	b.n	80022da <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002206:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800220a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800220c:	4b08      	ldr	r3, [pc, #32]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	4a07      	ldr	r2, [pc, #28]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 8002212:	f023 0303 	bic.w	r3, r3, #3
 8002216:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	4a04      	ldr	r2, [pc, #16]	; (8002230 <HAL_RCC_OscConfig+0x578>)
 800221e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002226:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7fe ff3e 	bl	80010a8 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800222e:	e00e      	b.n	800224e <HAL_RCC_OscConfig+0x596>
 8002230:	40021000 	.word	0x40021000
 8002234:	40007000 	.word	0x40007000
 8002238:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223c:	f7fe ff34 	bl	80010a8 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e046      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800224e:	4b25      	ldr	r3, [pc, #148]	; (80022e4 <HAL_RCC_OscConfig+0x62c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x584>
 800225a:	e03e      	b.n	80022da <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e039      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002268:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <HAL_RCC_OscConfig+0x62c>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f003 0203 	and.w	r2, r3, #3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	429a      	cmp	r2, r3
 800227a:	d12c      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	3b01      	subs	r3, #1
 8002288:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228a:	429a      	cmp	r2, r3
 800228c:	d123      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002298:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800229a:	429a      	cmp	r2, r3
 800229c:	d11b      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d113      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b8:	085b      	lsrs	r3, r3, #1
 80022ba:	3b01      	subs	r3, #1
 80022bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022be:	429a      	cmp	r2, r3
 80022c0:	d109      	bne.n	80022d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022cc:	085b      	lsrs	r3, r3, #1
 80022ce:	3b01      	subs	r3, #1
 80022d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d001      	beq.n	80022da <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3720      	adds	r7, #32
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40021000 	.word	0x40021000

080022e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e11e      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002300:	4b91      	ldr	r3, [pc, #580]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d910      	bls.n	8002330 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b8e      	ldr	r3, [pc, #568]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 020f 	bic.w	r2, r3, #15
 8002316:	498c      	ldr	r1, [pc, #560]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	4313      	orrs	r3, r2
 800231c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	4b8a      	ldr	r3, [pc, #552]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e106      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	d073      	beq.n	8002424 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b03      	cmp	r3, #3
 8002342:	d129      	bne.n	8002398 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002344:	4b81      	ldr	r3, [pc, #516]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0f4      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002354:	f000 f99e 	bl	8002694 <RCC_GetSysClockFreqFromPLLSource>
 8002358:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4a7c      	ldr	r2, [pc, #496]	; (8002550 <HAL_RCC_ClockConfig+0x268>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d93f      	bls.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002362:	4b7a      	ldr	r3, [pc, #488]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d009      	beq.n	8002382 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002376:	2b00      	cmp	r3, #0
 8002378:	d033      	beq.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800237e:	2b00      	cmp	r3, #0
 8002380:	d12f      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002382:	4b72      	ldr	r3, [pc, #456]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800238a:	4a70      	ldr	r2, [pc, #448]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800238c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002390:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	e024      	b.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b02      	cmp	r3, #2
 800239e:	d107      	bne.n	80023b0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023a0:	4b6a      	ldr	r3, [pc, #424]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d109      	bne.n	80023c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0c6      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b0:	4b66      	ldr	r3, [pc, #408]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0be      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80023c0:	f000 f8ce 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 80023c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4a61      	ldr	r2, [pc, #388]	; (8002550 <HAL_RCC_ClockConfig+0x268>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d909      	bls.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023ce:	4b5f      	ldr	r3, [pc, #380]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023d6:	4a5d      	ldr	r2, [pc, #372]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023dc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023e2:	4b5a      	ldr	r3, [pc, #360]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f023 0203 	bic.w	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	4957      	ldr	r1, [pc, #348]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023f4:	f7fe fe58 	bl	80010a8 <HAL_GetTick>
 80023f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fa:	e00a      	b.n	8002412 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023fc:	f7fe fe54 	bl	80010a8 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	f241 3288 	movw	r2, #5000	; 0x1388
 800240a:	4293      	cmp	r3, r2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e095      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002412:	4b4e      	ldr	r3, [pc, #312]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 020c 	and.w	r2, r3, #12
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	429a      	cmp	r2, r3
 8002422:	d1eb      	bne.n	80023fc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d023      	beq.n	8002478 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800243c:	4b43      	ldr	r3, [pc, #268]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	4a42      	ldr	r2, [pc, #264]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002442:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002446:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0308 	and.w	r3, r3, #8
 8002450:	2b00      	cmp	r3, #0
 8002452:	d007      	beq.n	8002464 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002454:	4b3d      	ldr	r3, [pc, #244]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800245c:	4a3b      	ldr	r2, [pc, #236]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800245e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002462:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002464:	4b39      	ldr	r3, [pc, #228]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	4936      	ldr	r1, [pc, #216]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002472:	4313      	orrs	r3, r2
 8002474:	608b      	str	r3, [r1, #8]
 8002476:	e008      	b.n	800248a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2b80      	cmp	r3, #128	; 0x80
 800247c:	d105      	bne.n	800248a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800247e:	4b33      	ldr	r3, [pc, #204]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	4a32      	ldr	r2, [pc, #200]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002484:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002488:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800248a:	4b2f      	ldr	r3, [pc, #188]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d21d      	bcs.n	80024d4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002498:	4b2b      	ldr	r3, [pc, #172]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f023 020f 	bic.w	r2, r3, #15
 80024a0:	4929      	ldr	r1, [pc, #164]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024a8:	f7fe fdfe 	bl	80010a8 <HAL_GetTick>
 80024ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ae:	e00a      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b0:	f7fe fdfa 	bl	80010a8 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e03b      	b.n	800253e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b20      	ldr	r3, [pc, #128]	; (8002548 <HAL_RCC_ClockConfig+0x260>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d1ed      	bne.n	80024b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e0:	4b1a      	ldr	r3, [pc, #104]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4917      	ldr	r1, [pc, #92]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d009      	beq.n	8002512 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024fe:	4b13      	ldr	r3, [pc, #76]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	490f      	ldr	r1, [pc, #60]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800250e:	4313      	orrs	r3, r2
 8002510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002512:	f000 f825 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 8002516:	4602      	mov	r2, r0
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <HAL_RCC_ClockConfig+0x264>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	490c      	ldr	r1, [pc, #48]	; (8002554 <HAL_RCC_ClockConfig+0x26c>)
 8002524:	5ccb      	ldrb	r3, [r1, r3]
 8002526:	f003 031f 	and.w	r3, r3, #31
 800252a:	fa22 f303 	lsr.w	r3, r2, r3
 800252e:	4a0a      	ldr	r2, [pc, #40]	; (8002558 <HAL_RCC_ClockConfig+0x270>)
 8002530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <HAL_RCC_ClockConfig+0x274>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe fd6a 	bl	8001010 <HAL_InitTick>
 800253c:	4603      	mov	r3, r0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40022000 	.word	0x40022000
 800254c:	40021000 	.word	0x40021000
 8002550:	04c4b400 	.word	0x04c4b400
 8002554:	0802943c 	.word	0x0802943c
 8002558:	20000004 	.word	0x20000004
 800255c:	20000008 	.word	0x20000008

08002560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002560:	b480      	push	{r7}
 8002562:	b087      	sub	sp, #28
 8002564:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002566:	4b2c      	ldr	r3, [pc, #176]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	2b04      	cmp	r3, #4
 8002570:	d102      	bne.n	8002578 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002572:	4b2a      	ldr	r3, [pc, #168]	; (800261c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	e047      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002578:	4b27      	ldr	r3, [pc, #156]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	2b08      	cmp	r3, #8
 8002582:	d102      	bne.n	800258a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002584:	4b26      	ldr	r3, [pc, #152]	; (8002620 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	e03e      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800258a:	4b23      	ldr	r3, [pc, #140]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	2b0c      	cmp	r3, #12
 8002594:	d136      	bne.n	8002604 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002596:	4b20      	ldr	r3, [pc, #128]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025a0:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	3301      	adds	r3, #1
 80025ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d10c      	bne.n	80025ce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025b4:	4a1a      	ldr	r2, [pc, #104]	; (8002620 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025bc:	4a16      	ldr	r2, [pc, #88]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025be:	68d2      	ldr	r2, [r2, #12]
 80025c0:	0a12      	lsrs	r2, r2, #8
 80025c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025c6:	fb02 f303 	mul.w	r3, r2, r3
 80025ca:	617b      	str	r3, [r7, #20]
      break;
 80025cc:	e00c      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025ce:	4a13      	ldr	r2, [pc, #76]	; (800261c <HAL_RCC_GetSysClockFreq+0xbc>)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d6:	4a10      	ldr	r2, [pc, #64]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025d8:	68d2      	ldr	r2, [r2, #12]
 80025da:	0a12      	lsrs	r2, r2, #8
 80025dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025e0:	fb02 f303 	mul.w	r3, r2, r3
 80025e4:	617b      	str	r3, [r7, #20]
      break;
 80025e6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	0e5b      	lsrs	r3, r3, #25
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	3301      	adds	r3, #1
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	e001      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002608:	693b      	ldr	r3, [r7, #16]
}
 800260a:	4618      	mov	r0, r3
 800260c:	371c      	adds	r7, #28
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
 800261c:	00f42400 	.word	0x00f42400
 8002620:	016e3600 	.word	0x016e3600

08002624 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002628:	4b03      	ldr	r3, [pc, #12]	; (8002638 <HAL_RCC_GetHCLKFreq+0x14>)
 800262a:	681b      	ldr	r3, [r3, #0]
}
 800262c:	4618      	mov	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	20000004 	.word	0x20000004

0800263c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002640:	f7ff fff0 	bl	8002624 <HAL_RCC_GetHCLKFreq>
 8002644:	4602      	mov	r2, r0
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	0a1b      	lsrs	r3, r3, #8
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	4904      	ldr	r1, [pc, #16]	; (8002664 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002652:	5ccb      	ldrb	r3, [r1, r3]
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800265c:	4618      	mov	r0, r3
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40021000 	.word	0x40021000
 8002664:	0802944c 	.word	0x0802944c

08002668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800266c:	f7ff ffda 	bl	8002624 <HAL_RCC_GetHCLKFreq>
 8002670:	4602      	mov	r2, r0
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	0adb      	lsrs	r3, r3, #11
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	4904      	ldr	r1, [pc, #16]	; (8002690 <HAL_RCC_GetPCLK2Freq+0x28>)
 800267e:	5ccb      	ldrb	r3, [r1, r3]
 8002680:	f003 031f 	and.w	r3, r3, #31
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002688:	4618      	mov	r0, r3
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40021000 	.word	0x40021000
 8002690:	0802944c 	.word	0x0802944c

08002694 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002694:	b480      	push	{r7}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800269a:	4b1e      	ldr	r3, [pc, #120]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026a4:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	3301      	adds	r3, #1
 80026b0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d10c      	bne.n	80026d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026b8:	4a17      	ldr	r2, [pc, #92]	; (8002718 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c0:	4a14      	ldr	r2, [pc, #80]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026c2:	68d2      	ldr	r2, [r2, #12]
 80026c4:	0a12      	lsrs	r2, r2, #8
 80026c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026ca:	fb02 f303 	mul.w	r3, r2, r3
 80026ce:	617b      	str	r3, [r7, #20]
    break;
 80026d0:	e00c      	b.n	80026ec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026d2:	4a12      	ldr	r2, [pc, #72]	; (800271c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026da:	4a0e      	ldr	r2, [pc, #56]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026dc:	68d2      	ldr	r2, [r2, #12]
 80026de:	0a12      	lsrs	r2, r2, #8
 80026e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026e4:	fb02 f303 	mul.w	r3, r2, r3
 80026e8:	617b      	str	r3, [r7, #20]
    break;
 80026ea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026ec:	4b09      	ldr	r3, [pc, #36]	; (8002714 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	0e5b      	lsrs	r3, r3, #25
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	3301      	adds	r3, #1
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	fbb2 f3f3 	udiv	r3, r2, r3
 8002704:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002706:	687b      	ldr	r3, [r7, #4]
}
 8002708:	4618      	mov	r0, r3
 800270a:	371c      	adds	r7, #28
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	40021000 	.word	0x40021000
 8002718:	016e3600 	.word	0x016e3600
 800271c:	00f42400 	.word	0x00f42400

08002720 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002728:	2300      	movs	r3, #0
 800272a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800272c:	2300      	movs	r3, #0
 800272e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 8098 	beq.w	800286e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273e:	2300      	movs	r3, #0
 8002740:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002742:	4b43      	ldr	r3, [pc, #268]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10d      	bne.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800274e:	4b40      	ldr	r3, [pc, #256]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002752:	4a3f      	ldr	r2, [pc, #252]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002758:	6593      	str	r3, [r2, #88]	; 0x58
 800275a:	4b3d      	ldr	r3, [pc, #244]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800275c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002766:	2301      	movs	r3, #1
 8002768:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800276a:	4b3a      	ldr	r3, [pc, #232]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a39      	ldr	r2, [pc, #228]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002774:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002776:	f7fe fc97 	bl	80010a8 <HAL_GetTick>
 800277a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800277c:	e009      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277e:	f7fe fc93 	bl	80010a8 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d902      	bls.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	74fb      	strb	r3, [r7, #19]
        break;
 8002790:	e005      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002792:	4b30      	ldr	r3, [pc, #192]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0ef      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800279e:	7cfb      	ldrb	r3, [r7, #19]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d159      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027a4:	4b2a      	ldr	r3, [pc, #168]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d01e      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d019      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027c0:	4b23      	ldr	r3, [pc, #140]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027cc:	4b20      	ldr	r3, [pc, #128]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d2:	4a1f      	ldr	r2, [pc, #124]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027dc:	4b1c      	ldr	r3, [pc, #112]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e2:	4a1b      	ldr	r2, [pc, #108]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027ec:	4a18      	ldr	r2, [pc, #96]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d016      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fe:	f7fe fc53 	bl	80010a8 <HAL_GetTick>
 8002802:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002804:	e00b      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002806:	f7fe fc4f 	bl	80010a8 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	f241 3288 	movw	r2, #5000	; 0x1388
 8002814:	4293      	cmp	r3, r2
 8002816:	d902      	bls.n	800281e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	74fb      	strb	r3, [r7, #19]
            break;
 800281c:	e006      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800281e:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0ec      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10b      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002832:	4b07      	ldr	r3, [pc, #28]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002838:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002840:	4903      	ldr	r1, [pc, #12]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002848:	e008      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800284a:	7cfb      	ldrb	r3, [r7, #19]
 800284c:	74bb      	strb	r3, [r7, #18]
 800284e:	e005      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002850:	40021000 	.word	0x40021000
 8002854:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002858:	7cfb      	ldrb	r3, [r7, #19]
 800285a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800285c:	7c7b      	ldrb	r3, [r7, #17]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d105      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002862:	4baf      	ldr	r3, [pc, #700]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002866:	4aae      	ldr	r2, [pc, #696]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800286c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00a      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800287a:	4ba9      	ldr	r3, [pc, #676]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800287c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002880:	f023 0203 	bic.w	r2, r3, #3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	49a5      	ldr	r1, [pc, #660]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00a      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800289c:	4ba0      	ldr	r3, [pc, #640]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800289e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a2:	f023 020c 	bic.w	r2, r3, #12
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	499d      	ldr	r1, [pc, #628]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028be:	4b98      	ldr	r3, [pc, #608]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4994      	ldr	r1, [pc, #592]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00a      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028e0:	4b8f      	ldr	r3, [pc, #572]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	498c      	ldr	r1, [pc, #560]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002902:	4b87      	ldr	r3, [pc, #540]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002908:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	4983      	ldr	r1, [pc, #524]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0320 	and.w	r3, r3, #32
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002924:	4b7e      	ldr	r3, [pc, #504]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	497b      	ldr	r1, [pc, #492]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002946:	4b76      	ldr	r3, [pc, #472]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	4972      	ldr	r1, [pc, #456]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00a      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002968:	4b6d      	ldr	r3, [pc, #436]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	496a      	ldr	r1, [pc, #424]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800298a:	4b65      	ldr	r3, [pc, #404]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800298c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002990:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	4961      	ldr	r1, [pc, #388]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029ac:	4b5c      	ldr	r3, [pc, #368]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029b2:	f023 0203 	bic.w	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ba:	4959      	ldr	r1, [pc, #356]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029ce:	4b54      	ldr	r3, [pc, #336]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	4950      	ldr	r1, [pc, #320]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d015      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029f0:	4b4b      	ldr	r3, [pc, #300]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	4948      	ldr	r1, [pc, #288]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a0e:	d105      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a10:	4b43      	ldr	r3, [pc, #268]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4a42      	ldr	r2, [pc, #264]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a1a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d015      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a28:	4b3d      	ldr	r3, [pc, #244]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a36:	493a      	ldr	r1, [pc, #232]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a46:	d105      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a48:	4b35      	ldr	r3, [pc, #212]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4a34      	ldr	r2, [pc, #208]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a52:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d015      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a60:	4b2f      	ldr	r3, [pc, #188]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a66:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6e:	492c      	ldr	r1, [pc, #176]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a7e:	d105      	bne.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a80:	4b27      	ldr	r3, [pc, #156]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4a26      	ldr	r2, [pc, #152]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a8a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d015      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a98:	4b21      	ldr	r3, [pc, #132]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa6:	491e      	ldr	r1, [pc, #120]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ab6:	d105      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ab8:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4a18      	ldr	r2, [pc, #96]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002abe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ac2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d015      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ad0:	4b13      	ldr	r3, [pc, #76]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	4910      	ldr	r1, [pc, #64]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aee:	d105      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4a0a      	ldr	r2, [pc, #40]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002af6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002afa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d018      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b08:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b16:	4902      	ldr	r1, [pc, #8]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b1e:	e001      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002b20:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b2c:	d105      	bne.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b2e:	4b21      	ldr	r3, [pc, #132]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	4a20      	ldr	r2, [pc, #128]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b38:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d015      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002b46:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b54:	4917      	ldr	r1, [pc, #92]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b64:	d105      	bne.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b66:	4b13      	ldr	r3, [pc, #76]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	4a12      	ldr	r2, [pc, #72]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b70:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d015      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8c:	4909      	ldr	r1, [pc, #36]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b9c:	d105      	bne.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	4a04      	ldr	r2, [pc, #16]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002ba4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ba8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002baa:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021000 	.word	0x40021000

08002bb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e042      	b.n	8002c50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d106      	bne.n	8002be2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7fd ffd9 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2224      	movs	r2, #36	; 0x24
 8002be6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0201 	bic.w	r2, r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fa80 	bl	8003100 <UART_SetConfig>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d101      	bne.n	8002c0a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e022      	b.n	8002c50 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fd3e 	bl	8003694 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 fdc5 	bl	80037d8 <UART_CheckIdleState>
 8002c4e:	4603      	mov	r3, r0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c78:	69fa      	ldr	r2, [r7, #28]
 8002c7a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002c7e:	4013      	ands	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d118      	bne.n	8002cba <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d013      	beq.n	8002cba <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	f003 0320 	and.w	r3, r3, #32
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d104      	bne.n	8002ca6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d009      	beq.n	8002cba <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 81fb 	beq.w	80030a6 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	4798      	blx	r3
      }
      return;
 8002cb8:	e1f5      	b.n	80030a6 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 80ef 	beq.w	8002ea0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4b73      	ldr	r3, [pc, #460]	; (8002e94 <HAL_UART_IRQHandler+0x23c>)
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d105      	bne.n	8002cd8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4b72      	ldr	r3, [pc, #456]	; (8002e98 <HAL_UART_IRQHandler+0x240>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 80e4 	beq.w	8002ea0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d010      	beq.n	8002d04 <HAL_UART_IRQHandler+0xac>
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00b      	beq.n	8002d04 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cfa:	f043 0201 	orr.w	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d010      	beq.n	8002d30 <HAL_UART_IRQHandler+0xd8>
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00b      	beq.n	8002d30 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d26:	f043 0204 	orr.w	r2, r3, #4
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d010      	beq.n	8002d5c <HAL_UART_IRQHandler+0x104>
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00b      	beq.n	8002d5c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2204      	movs	r2, #4
 8002d4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d52:	f043 0202 	orr.w	r2, r3, #2
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d015      	beq.n	8002d92 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	f003 0320 	and.w	r3, r3, #32
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d104      	bne.n	8002d7a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	4b48      	ldr	r3, [pc, #288]	; (8002e94 <HAL_UART_IRQHandler+0x23c>)
 8002d74:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00b      	beq.n	8002d92 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2208      	movs	r2, #8
 8002d80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d88:	f043 0208 	orr.w	r2, r3, #8
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d011      	beq.n	8002dc0 <HAL_UART_IRQHandler+0x168>
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00c      	beq.n	8002dc0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002db6:	f043 0220 	orr.w	r2, r3, #32
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 816f 	beq.w	80030aa <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d011      	beq.n	8002dfa <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	f003 0320 	and.w	r3, r3, #32
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d104      	bne.n	8002dea <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d007      	beq.n	8002dfa <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e00:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0c:	2b40      	cmp	r3, #64	; 0x40
 8002e0e:	d004      	beq.n	8002e1a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d031      	beq.n	8002e7e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 fda7 	bl	800396e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2a:	2b40      	cmp	r3, #64	; 0x40
 8002e2c:	d123      	bne.n	8002e76 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e3c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d013      	beq.n	8002e6e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e4a:	4a14      	ldr	r2, [pc, #80]	; (8002e9c <HAL_UART_IRQHandler+0x244>)
 8002e4c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe fb45 	bl	80014e2 <HAL_DMA_Abort_IT>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d017      	beq.n	8002e8e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002e68:	4610      	mov	r0, r2
 8002e6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e6c:	e00f      	b.n	8002e8e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f930 	bl	80030d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e74:	e00b      	b.n	8002e8e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f92c 	bl	80030d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e7c:	e007      	b.n	8002e8e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f928 	bl	80030d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002e8c:	e10d      	b.n	80030aa <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e8e:	bf00      	nop
    return;
 8002e90:	e10b      	b.n	80030aa <HAL_UART_IRQHandler+0x452>
 8002e92:	bf00      	nop
 8002e94:	10000001 	.word	0x10000001
 8002e98:	04000120 	.word	0x04000120
 8002e9c:	080039d3 	.word	0x080039d3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	f040 80ab 	bne.w	8003000 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80a5 	beq.w	8003000 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	f003 0310 	and.w	r3, r3, #16
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 809f 	beq.w	8003000 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2210      	movs	r2, #16
 8002ec8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed4:	2b40      	cmp	r3, #64	; 0x40
 8002ed6:	d155      	bne.n	8002f84 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002ee2:	893b      	ldrh	r3, [r7, #8]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 80e2 	beq.w	80030ae <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002ef0:	893a      	ldrh	r2, [r7, #8]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	f080 80db 	bcs.w	80030ae <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	893a      	ldrh	r2, [r7, #8]
 8002efc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0320 	and.w	r3, r3, #32
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d12b      	bne.n	8002f68 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f1e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0201 	bic.w	r2, r2, #1
 8002f2e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f3e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0210 	bic.w	r2, r2, #16
 8002f5c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fe fa64 	bl	8001430 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f8b3 	bl	80030e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f82:	e094      	b.n	80030ae <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 8087 	beq.w	80030b2 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8002fa4:	897b      	ldrh	r3, [r7, #10]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 8083 	beq.w	80030b2 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002fba:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fca:	f023 0301 	bic.w	r3, r3, #1
 8002fce:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0210 	bic.w	r2, r2, #16
 8002ff2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ff4:	897b      	ldrh	r3, [r7, #10]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f875 	bl	80030e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ffe:	e058      	b.n	80030b2 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00d      	beq.n	8003026 <HAL_UART_IRQHandler+0x3ce>
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800301c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fd07 	bl	8003a32 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003024:	e048      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302c:	2b00      	cmp	r3, #0
 800302e:	d012      	beq.n	8003056 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003036:	2b00      	cmp	r3, #0
 8003038:	d104      	bne.n	8003044 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d008      	beq.n	8003056 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003048:	2b00      	cmp	r3, #0
 800304a:	d034      	beq.n	80030b6 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	4798      	blx	r3
    }
    return;
 8003054:	e02f      	b.n	80030b6 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <HAL_UART_IRQHandler+0x41a>
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fcc7 	bl	80039fe <UART_EndTransmit_IT>
    return;
 8003070:	e022      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <HAL_UART_IRQHandler+0x436>
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fce7 	bl	8003a5a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800308c:	e014      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00f      	beq.n	80030b8 <HAL_UART_IRQHandler+0x460>
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	2b00      	cmp	r3, #0
 800309c:	da0c      	bge.n	80030b8 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fcd1 	bl	8003a46 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030a4:	e008      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
      return;
 80030a6:	bf00      	nop
 80030a8:	e006      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
    return;
 80030aa:	bf00      	nop
 80030ac:	e004      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
      return;
 80030ae:	bf00      	nop
 80030b0:	e002      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
      return;
 80030b2:	bf00      	nop
 80030b4:	e000      	b.n	80030b8 <HAL_UART_IRQHandler+0x460>
    return;
 80030b6:	bf00      	nop
  }
}
 80030b8:	3720      	adds	r7, #32
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop

080030c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003100:	b5b0      	push	{r4, r5, r7, lr}
 8003102:	b088      	sub	sp, #32
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	4313      	orrs	r3, r2
 8003122:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	4bb1      	ldr	r3, [pc, #708]	; (80033f0 <UART_SetConfig+0x2f0>)
 800312c:	4013      	ands	r3, r2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6812      	ldr	r2, [r2, #0]
 8003132:	69f9      	ldr	r1, [r7, #28]
 8003134:	430b      	orrs	r3, r1
 8003136:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4aa6      	ldr	r2, [pc, #664]	; (80033f4 <UART_SetConfig+0x2f4>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d004      	beq.n	8003168 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	69fa      	ldr	r2, [r7, #28]
 8003164:	4313      	orrs	r3, r2
 8003166:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003172:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6812      	ldr	r2, [r2, #0]
 800317a:	69f9      	ldr	r1, [r7, #28]
 800317c:	430b      	orrs	r3, r1
 800317e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	f023 010f 	bic.w	r1, r3, #15
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a97      	ldr	r2, [pc, #604]	; (80033f8 <UART_SetConfig+0x2f8>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d120      	bne.n	80031e2 <UART_SetConfig+0xe2>
 80031a0:	4b96      	ldr	r3, [pc, #600]	; (80033fc <UART_SetConfig+0x2fc>)
 80031a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d816      	bhi.n	80031dc <UART_SetConfig+0xdc>
 80031ae:	a201      	add	r2, pc, #4	; (adr r2, 80031b4 <UART_SetConfig+0xb4>)
 80031b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b4:	080031c5 	.word	0x080031c5
 80031b8:	080031d1 	.word	0x080031d1
 80031bc:	080031cb 	.word	0x080031cb
 80031c0:	080031d7 	.word	0x080031d7
 80031c4:	2301      	movs	r3, #1
 80031c6:	76fb      	strb	r3, [r7, #27]
 80031c8:	e0e7      	b.n	800339a <UART_SetConfig+0x29a>
 80031ca:	2302      	movs	r3, #2
 80031cc:	76fb      	strb	r3, [r7, #27]
 80031ce:	e0e4      	b.n	800339a <UART_SetConfig+0x29a>
 80031d0:	2304      	movs	r3, #4
 80031d2:	76fb      	strb	r3, [r7, #27]
 80031d4:	e0e1      	b.n	800339a <UART_SetConfig+0x29a>
 80031d6:	2308      	movs	r3, #8
 80031d8:	76fb      	strb	r3, [r7, #27]
 80031da:	e0de      	b.n	800339a <UART_SetConfig+0x29a>
 80031dc:	2310      	movs	r3, #16
 80031de:	76fb      	strb	r3, [r7, #27]
 80031e0:	e0db      	b.n	800339a <UART_SetConfig+0x29a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a86      	ldr	r2, [pc, #536]	; (8003400 <UART_SetConfig+0x300>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d132      	bne.n	8003252 <UART_SetConfig+0x152>
 80031ec:	4b83      	ldr	r3, [pc, #524]	; (80033fc <UART_SetConfig+0x2fc>)
 80031ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	2b0c      	cmp	r3, #12
 80031f8:	d828      	bhi.n	800324c <UART_SetConfig+0x14c>
 80031fa:	a201      	add	r2, pc, #4	; (adr r2, 8003200 <UART_SetConfig+0x100>)
 80031fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003200:	08003235 	.word	0x08003235
 8003204:	0800324d 	.word	0x0800324d
 8003208:	0800324d 	.word	0x0800324d
 800320c:	0800324d 	.word	0x0800324d
 8003210:	08003241 	.word	0x08003241
 8003214:	0800324d 	.word	0x0800324d
 8003218:	0800324d 	.word	0x0800324d
 800321c:	0800324d 	.word	0x0800324d
 8003220:	0800323b 	.word	0x0800323b
 8003224:	0800324d 	.word	0x0800324d
 8003228:	0800324d 	.word	0x0800324d
 800322c:	0800324d 	.word	0x0800324d
 8003230:	08003247 	.word	0x08003247
 8003234:	2300      	movs	r3, #0
 8003236:	76fb      	strb	r3, [r7, #27]
 8003238:	e0af      	b.n	800339a <UART_SetConfig+0x29a>
 800323a:	2302      	movs	r3, #2
 800323c:	76fb      	strb	r3, [r7, #27]
 800323e:	e0ac      	b.n	800339a <UART_SetConfig+0x29a>
 8003240:	2304      	movs	r3, #4
 8003242:	76fb      	strb	r3, [r7, #27]
 8003244:	e0a9      	b.n	800339a <UART_SetConfig+0x29a>
 8003246:	2308      	movs	r3, #8
 8003248:	76fb      	strb	r3, [r7, #27]
 800324a:	e0a6      	b.n	800339a <UART_SetConfig+0x29a>
 800324c:	2310      	movs	r3, #16
 800324e:	76fb      	strb	r3, [r7, #27]
 8003250:	e0a3      	b.n	800339a <UART_SetConfig+0x29a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a6b      	ldr	r2, [pc, #428]	; (8003404 <UART_SetConfig+0x304>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d120      	bne.n	800329e <UART_SetConfig+0x19e>
 800325c:	4b67      	ldr	r3, [pc, #412]	; (80033fc <UART_SetConfig+0x2fc>)
 800325e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003262:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003266:	2b30      	cmp	r3, #48	; 0x30
 8003268:	d013      	beq.n	8003292 <UART_SetConfig+0x192>
 800326a:	2b30      	cmp	r3, #48	; 0x30
 800326c:	d814      	bhi.n	8003298 <UART_SetConfig+0x198>
 800326e:	2b20      	cmp	r3, #32
 8003270:	d009      	beq.n	8003286 <UART_SetConfig+0x186>
 8003272:	2b20      	cmp	r3, #32
 8003274:	d810      	bhi.n	8003298 <UART_SetConfig+0x198>
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <UART_SetConfig+0x180>
 800327a:	2b10      	cmp	r3, #16
 800327c:	d006      	beq.n	800328c <UART_SetConfig+0x18c>
 800327e:	e00b      	b.n	8003298 <UART_SetConfig+0x198>
 8003280:	2300      	movs	r3, #0
 8003282:	76fb      	strb	r3, [r7, #27]
 8003284:	e089      	b.n	800339a <UART_SetConfig+0x29a>
 8003286:	2302      	movs	r3, #2
 8003288:	76fb      	strb	r3, [r7, #27]
 800328a:	e086      	b.n	800339a <UART_SetConfig+0x29a>
 800328c:	2304      	movs	r3, #4
 800328e:	76fb      	strb	r3, [r7, #27]
 8003290:	e083      	b.n	800339a <UART_SetConfig+0x29a>
 8003292:	2308      	movs	r3, #8
 8003294:	76fb      	strb	r3, [r7, #27]
 8003296:	e080      	b.n	800339a <UART_SetConfig+0x29a>
 8003298:	2310      	movs	r3, #16
 800329a:	76fb      	strb	r3, [r7, #27]
 800329c:	e07d      	b.n	800339a <UART_SetConfig+0x29a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a59      	ldr	r2, [pc, #356]	; (8003408 <UART_SetConfig+0x308>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d120      	bne.n	80032ea <UART_SetConfig+0x1ea>
 80032a8:	4b54      	ldr	r3, [pc, #336]	; (80033fc <UART_SetConfig+0x2fc>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80032b2:	2bc0      	cmp	r3, #192	; 0xc0
 80032b4:	d013      	beq.n	80032de <UART_SetConfig+0x1de>
 80032b6:	2bc0      	cmp	r3, #192	; 0xc0
 80032b8:	d814      	bhi.n	80032e4 <UART_SetConfig+0x1e4>
 80032ba:	2b80      	cmp	r3, #128	; 0x80
 80032bc:	d009      	beq.n	80032d2 <UART_SetConfig+0x1d2>
 80032be:	2b80      	cmp	r3, #128	; 0x80
 80032c0:	d810      	bhi.n	80032e4 <UART_SetConfig+0x1e4>
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <UART_SetConfig+0x1cc>
 80032c6:	2b40      	cmp	r3, #64	; 0x40
 80032c8:	d006      	beq.n	80032d8 <UART_SetConfig+0x1d8>
 80032ca:	e00b      	b.n	80032e4 <UART_SetConfig+0x1e4>
 80032cc:	2300      	movs	r3, #0
 80032ce:	76fb      	strb	r3, [r7, #27]
 80032d0:	e063      	b.n	800339a <UART_SetConfig+0x29a>
 80032d2:	2302      	movs	r3, #2
 80032d4:	76fb      	strb	r3, [r7, #27]
 80032d6:	e060      	b.n	800339a <UART_SetConfig+0x29a>
 80032d8:	2304      	movs	r3, #4
 80032da:	76fb      	strb	r3, [r7, #27]
 80032dc:	e05d      	b.n	800339a <UART_SetConfig+0x29a>
 80032de:	2308      	movs	r3, #8
 80032e0:	76fb      	strb	r3, [r7, #27]
 80032e2:	e05a      	b.n	800339a <UART_SetConfig+0x29a>
 80032e4:	2310      	movs	r3, #16
 80032e6:	76fb      	strb	r3, [r7, #27]
 80032e8:	e057      	b.n	800339a <UART_SetConfig+0x29a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a47      	ldr	r2, [pc, #284]	; (800340c <UART_SetConfig+0x30c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d125      	bne.n	8003340 <UART_SetConfig+0x240>
 80032f4:	4b41      	ldr	r3, [pc, #260]	; (80033fc <UART_SetConfig+0x2fc>)
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003302:	d017      	beq.n	8003334 <UART_SetConfig+0x234>
 8003304:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003308:	d817      	bhi.n	800333a <UART_SetConfig+0x23a>
 800330a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800330e:	d00b      	beq.n	8003328 <UART_SetConfig+0x228>
 8003310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003314:	d811      	bhi.n	800333a <UART_SetConfig+0x23a>
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <UART_SetConfig+0x222>
 800331a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800331e:	d006      	beq.n	800332e <UART_SetConfig+0x22e>
 8003320:	e00b      	b.n	800333a <UART_SetConfig+0x23a>
 8003322:	2300      	movs	r3, #0
 8003324:	76fb      	strb	r3, [r7, #27]
 8003326:	e038      	b.n	800339a <UART_SetConfig+0x29a>
 8003328:	2302      	movs	r3, #2
 800332a:	76fb      	strb	r3, [r7, #27]
 800332c:	e035      	b.n	800339a <UART_SetConfig+0x29a>
 800332e:	2304      	movs	r3, #4
 8003330:	76fb      	strb	r3, [r7, #27]
 8003332:	e032      	b.n	800339a <UART_SetConfig+0x29a>
 8003334:	2308      	movs	r3, #8
 8003336:	76fb      	strb	r3, [r7, #27]
 8003338:	e02f      	b.n	800339a <UART_SetConfig+0x29a>
 800333a:	2310      	movs	r3, #16
 800333c:	76fb      	strb	r3, [r7, #27]
 800333e:	e02c      	b.n	800339a <UART_SetConfig+0x29a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a2b      	ldr	r2, [pc, #172]	; (80033f4 <UART_SetConfig+0x2f4>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d125      	bne.n	8003396 <UART_SetConfig+0x296>
 800334a:	4b2c      	ldr	r3, [pc, #176]	; (80033fc <UART_SetConfig+0x2fc>)
 800334c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003350:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003354:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003358:	d017      	beq.n	800338a <UART_SetConfig+0x28a>
 800335a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800335e:	d817      	bhi.n	8003390 <UART_SetConfig+0x290>
 8003360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003364:	d00b      	beq.n	800337e <UART_SetConfig+0x27e>
 8003366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800336a:	d811      	bhi.n	8003390 <UART_SetConfig+0x290>
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <UART_SetConfig+0x278>
 8003370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003374:	d006      	beq.n	8003384 <UART_SetConfig+0x284>
 8003376:	e00b      	b.n	8003390 <UART_SetConfig+0x290>
 8003378:	2300      	movs	r3, #0
 800337a:	76fb      	strb	r3, [r7, #27]
 800337c:	e00d      	b.n	800339a <UART_SetConfig+0x29a>
 800337e:	2302      	movs	r3, #2
 8003380:	76fb      	strb	r3, [r7, #27]
 8003382:	e00a      	b.n	800339a <UART_SetConfig+0x29a>
 8003384:	2304      	movs	r3, #4
 8003386:	76fb      	strb	r3, [r7, #27]
 8003388:	e007      	b.n	800339a <UART_SetConfig+0x29a>
 800338a:	2308      	movs	r3, #8
 800338c:	76fb      	strb	r3, [r7, #27]
 800338e:	e004      	b.n	800339a <UART_SetConfig+0x29a>
 8003390:	2310      	movs	r3, #16
 8003392:	76fb      	strb	r3, [r7, #27]
 8003394:	e001      	b.n	800339a <UART_SetConfig+0x29a>
 8003396:	2310      	movs	r3, #16
 8003398:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a15      	ldr	r2, [pc, #84]	; (80033f4 <UART_SetConfig+0x2f4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	f040 809f 	bne.w	80034e4 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033a6:	7efb      	ldrb	r3, [r7, #27]
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d837      	bhi.n	800341c <UART_SetConfig+0x31c>
 80033ac:	a201      	add	r2, pc, #4	; (adr r2, 80033b4 <UART_SetConfig+0x2b4>)
 80033ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b2:	bf00      	nop
 80033b4:	080033d9 	.word	0x080033d9
 80033b8:	0800341d 	.word	0x0800341d
 80033bc:	080033e1 	.word	0x080033e1
 80033c0:	0800341d 	.word	0x0800341d
 80033c4:	080033e7 	.word	0x080033e7
 80033c8:	0800341d 	.word	0x0800341d
 80033cc:	0800341d 	.word	0x0800341d
 80033d0:	0800341d 	.word	0x0800341d
 80033d4:	08003415 	.word	0x08003415
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033d8:	f7ff f930 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 80033dc:	6178      	str	r0, [r7, #20]
        break;
 80033de:	e022      	b.n	8003426 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <UART_SetConfig+0x310>)
 80033e2:	617b      	str	r3, [r7, #20]
        break;
 80033e4:	e01f      	b.n	8003426 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033e6:	f7ff f8bb 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 80033ea:	6178      	str	r0, [r7, #20]
        break;
 80033ec:	e01b      	b.n	8003426 <UART_SetConfig+0x326>
 80033ee:	bf00      	nop
 80033f0:	cfff69f3 	.word	0xcfff69f3
 80033f4:	40008000 	.word	0x40008000
 80033f8:	40013800 	.word	0x40013800
 80033fc:	40021000 	.word	0x40021000
 8003400:	40004400 	.word	0x40004400
 8003404:	40004800 	.word	0x40004800
 8003408:	40004c00 	.word	0x40004c00
 800340c:	40005000 	.word	0x40005000
 8003410:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003414:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003418:	617b      	str	r3, [r7, #20]
        break;
 800341a:	e004      	b.n	8003426 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	76bb      	strb	r3, [r7, #26]
        break;
 8003424:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 811b 	beq.w	8003664 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	4a96      	ldr	r2, [pc, #600]	; (800368c <UART_SetConfig+0x58c>)
 8003434:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003438:	461a      	mov	r2, r3
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003440:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	4413      	add	r3, r2
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	429a      	cmp	r2, r3
 8003450:	d305      	bcc.n	800345e <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	429a      	cmp	r2, r3
 800345c:	d902      	bls.n	8003464 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	76bb      	strb	r3, [r7, #26]
 8003462:	e0ff      	b.n	8003664 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	4618      	mov	r0, r3
 8003468:	f04f 0100 	mov.w	r1, #0
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	4a86      	ldr	r2, [pc, #536]	; (800368c <UART_SetConfig+0x58c>)
 8003472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003476:	b29a      	uxth	r2, r3
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	f7fd f9ea 	bl	8000854 <__aeabi_uldivmod>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4610      	mov	r0, r2
 8003486:	4619      	mov	r1, r3
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	020b      	lsls	r3, r1, #8
 8003492:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003496:	0202      	lsls	r2, r0, #8
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	6849      	ldr	r1, [r1, #4]
 800349c:	0849      	lsrs	r1, r1, #1
 800349e:	4608      	mov	r0, r1
 80034a0:	f04f 0100 	mov.w	r1, #0
 80034a4:	1814      	adds	r4, r2, r0
 80034a6:	eb43 0501 	adc.w	r5, r3, r1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	461a      	mov	r2, r3
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	4620      	mov	r0, r4
 80034b6:	4629      	mov	r1, r5
 80034b8:	f7fd f9cc 	bl	8000854 <__aeabi_uldivmod>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4613      	mov	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034ca:	d308      	bcc.n	80034de <UART_SetConfig+0x3de>
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034d2:	d204      	bcs.n	80034de <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	60da      	str	r2, [r3, #12]
 80034dc:	e0c2      	b.n	8003664 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	76bb      	strb	r3, [r7, #26]
 80034e2:	e0bf      	b.n	8003664 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ec:	d165      	bne.n	80035ba <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 80034ee:	7efb      	ldrb	r3, [r7, #27]
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d828      	bhi.n	8003546 <UART_SetConfig+0x446>
 80034f4:	a201      	add	r2, pc, #4	; (adr r2, 80034fc <UART_SetConfig+0x3fc>)
 80034f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fa:	bf00      	nop
 80034fc:	08003521 	.word	0x08003521
 8003500:	08003529 	.word	0x08003529
 8003504:	08003531 	.word	0x08003531
 8003508:	08003547 	.word	0x08003547
 800350c:	08003537 	.word	0x08003537
 8003510:	08003547 	.word	0x08003547
 8003514:	08003547 	.word	0x08003547
 8003518:	08003547 	.word	0x08003547
 800351c:	0800353f 	.word	0x0800353f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003520:	f7ff f88c 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 8003524:	6178      	str	r0, [r7, #20]
        break;
 8003526:	e013      	b.n	8003550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003528:	f7ff f89e 	bl	8002668 <HAL_RCC_GetPCLK2Freq>
 800352c:	6178      	str	r0, [r7, #20]
        break;
 800352e:	e00f      	b.n	8003550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003530:	4b57      	ldr	r3, [pc, #348]	; (8003690 <UART_SetConfig+0x590>)
 8003532:	617b      	str	r3, [r7, #20]
        break;
 8003534:	e00c      	b.n	8003550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003536:	f7ff f813 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 800353a:	6178      	str	r0, [r7, #20]
        break;
 800353c:	e008      	b.n	8003550 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800353e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003542:	617b      	str	r3, [r7, #20]
        break;
 8003544:	e004      	b.n	8003550 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	76bb      	strb	r3, [r7, #26]
        break;
 800354e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 8086 	beq.w	8003664 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	4a4b      	ldr	r2, [pc, #300]	; (800368c <UART_SetConfig+0x58c>)
 800355e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003562:	461a      	mov	r2, r3
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	fbb3 f3f2 	udiv	r3, r3, r2
 800356a:	005a      	lsls	r2, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	085b      	lsrs	r3, r3, #1
 8003572:	441a      	add	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	fbb2 f3f3 	udiv	r3, r2, r3
 800357c:	b29b      	uxth	r3, r3
 800357e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	2b0f      	cmp	r3, #15
 8003584:	d916      	bls.n	80035b4 <UART_SetConfig+0x4b4>
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358c:	d212      	bcs.n	80035b4 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	b29b      	uxth	r3, r3
 8003592:	f023 030f 	bic.w	r3, r3, #15
 8003596:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	085b      	lsrs	r3, r3, #1
 800359c:	b29b      	uxth	r3, r3
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	89fb      	ldrh	r3, [r7, #14]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	89fa      	ldrh	r2, [r7, #14]
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	e057      	b.n	8003664 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	76bb      	strb	r3, [r7, #26]
 80035b8:	e054      	b.n	8003664 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035ba:	7efb      	ldrb	r3, [r7, #27]
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d828      	bhi.n	8003612 <UART_SetConfig+0x512>
 80035c0:	a201      	add	r2, pc, #4	; (adr r2, 80035c8 <UART_SetConfig+0x4c8>)
 80035c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c6:	bf00      	nop
 80035c8:	080035ed 	.word	0x080035ed
 80035cc:	080035f5 	.word	0x080035f5
 80035d0:	080035fd 	.word	0x080035fd
 80035d4:	08003613 	.word	0x08003613
 80035d8:	08003603 	.word	0x08003603
 80035dc:	08003613 	.word	0x08003613
 80035e0:	08003613 	.word	0x08003613
 80035e4:	08003613 	.word	0x08003613
 80035e8:	0800360b 	.word	0x0800360b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035ec:	f7ff f826 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 80035f0:	6178      	str	r0, [r7, #20]
        break;
 80035f2:	e013      	b.n	800361c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035f4:	f7ff f838 	bl	8002668 <HAL_RCC_GetPCLK2Freq>
 80035f8:	6178      	str	r0, [r7, #20]
        break;
 80035fa:	e00f      	b.n	800361c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035fc:	4b24      	ldr	r3, [pc, #144]	; (8003690 <UART_SetConfig+0x590>)
 80035fe:	617b      	str	r3, [r7, #20]
        break;
 8003600:	e00c      	b.n	800361c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003602:	f7fe ffad 	bl	8002560 <HAL_RCC_GetSysClockFreq>
 8003606:	6178      	str	r0, [r7, #20]
        break;
 8003608:	e008      	b.n	800361c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800360a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800360e:	617b      	str	r3, [r7, #20]
        break;
 8003610:	e004      	b.n	800361c <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	76bb      	strb	r3, [r7, #26]
        break;
 800361a:	bf00      	nop
    }

    if (pclk != 0U)
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d020      	beq.n	8003664 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	4a19      	ldr	r2, [pc, #100]	; (800368c <UART_SetConfig+0x58c>)
 8003628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800362c:	461a      	mov	r2, r3
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	fbb3 f2f2 	udiv	r2, r3, r2
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	085b      	lsrs	r3, r3, #1
 800363a:	441a      	add	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	fbb2 f3f3 	udiv	r3, r2, r3
 8003644:	b29b      	uxth	r3, r3
 8003646:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	2b0f      	cmp	r3, #15
 800364c:	d908      	bls.n	8003660 <UART_SetConfig+0x560>
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003654:	d204      	bcs.n	8003660 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	60da      	str	r2, [r3, #12]
 800365e:	e001      	b.n	8003664 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003680:	7ebb      	ldrb	r3, [r7, #26]
}
 8003682:	4618      	mov	r0, r3
 8003684:	3720      	adds	r7, #32
 8003686:	46bd      	mov	sp, r7
 8003688:	bdb0      	pop	{r4, r5, r7, pc}
 800368a:	bf00      	nop
 800368c:	08029454 	.word	0x08029454
 8003690:	00f42400 	.word	0x00f42400

08003694 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003728:	f003 0310 	and.w	r3, r3, #16
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003770:	2b00      	cmp	r3, #0
 8003772:	d01a      	beq.n	80037aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003792:	d10a      	bne.n	80037aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	605a      	str	r2, [r3, #4]
  }
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af02      	add	r7, sp, #8
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037e8:	f7fd fc5e 	bl	80010a8 <HAL_GetTick>
 80037ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d10e      	bne.n	800381a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f82f 	bl	800386e <UART_WaitOnFlagUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e025      	b.n	8003866 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b04      	cmp	r3, #4
 8003826:	d10e      	bne.n	8003846 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003828:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f819 	bl	800386e <UART_WaitOnFlagUntilTimeout>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e00f      	b.n	8003866 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2220      	movs	r2, #32
 800384a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2220      	movs	r2, #32
 8003852:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b084      	sub	sp, #16
 8003872:	af00      	add	r7, sp, #0
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	60b9      	str	r1, [r7, #8]
 8003878:	603b      	str	r3, [r7, #0]
 800387a:	4613      	mov	r3, r2
 800387c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800387e:	e062      	b.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003886:	d05e      	beq.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003888:	f7fd fc0e 	bl	80010a8 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	429a      	cmp	r2, r3
 8003896:	d302      	bcc.n	800389e <UART_WaitOnFlagUntilTimeout+0x30>
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d11d      	bne.n	80038da <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0201 	bic.w	r2, r2, #1
 80038bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e045      	b.n	8003966 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d02e      	beq.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038f6:	d126      	bne.n	8003946 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003900:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003910:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0201 	bic.w	r2, r2, #1
 8003920:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2220      	movs	r2, #32
 8003926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2220      	movs	r2, #32
 800392e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2220      	movs	r2, #32
 8003936:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e00f      	b.n	8003966 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69da      	ldr	r2, [r3, #28]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4013      	ands	r3, r2
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	429a      	cmp	r2, r3
 8003954:	bf0c      	ite	eq
 8003956:	2301      	moveq	r3, #1
 8003958:	2300      	movne	r3, #0
 800395a:	b2db      	uxtb	r3, r3
 800395c:	461a      	mov	r2, r3
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	429a      	cmp	r2, r3
 8003962:	d08d      	beq.n	8003880 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003984:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003994:	f023 0301 	bic.w	r3, r3, #1
 8003998:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d107      	bne.n	80039b2 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0210 	bic.w	r2, r2, #16
 80039b0:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	671a      	str	r2, [r3, #112]	; 0x70
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b084      	sub	sp, #16
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f7ff fb6f 	bl	80030d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039f6:	bf00      	nop
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b082      	sub	sp, #8
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a14:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff fb4b 	bl	80030c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b085      	sub	sp, #20
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_UARTEx_DisableFifoMode+0x16>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e027      	b.n	8003ad4 <HAL_UARTEx_DisableFifoMode+0x66>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2224      	movs	r2, #36	; 0x24
 8003a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0201 	bic.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003ab2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e02d      	b.n	8003b54 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2224      	movs	r2, #36	; 0x24
 8003b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0201 	bic.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f84f 	bl	8003bd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e02d      	b.n	8003bd0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2224      	movs	r2, #36	; 0x24
 8003b80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0201 	bic.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f811 	bl	8003bd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d108      	bne.n	8003bfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003bf8:	e031      	b.n	8003c5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003bfa:	2308      	movs	r3, #8
 8003bfc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003bfe:	2308      	movs	r3, #8
 8003c00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	0e5b      	lsrs	r3, r3, #25
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	0f5b      	lsrs	r3, r3, #29
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c22:	7bbb      	ldrb	r3, [r7, #14]
 8003c24:	7b3a      	ldrb	r2, [r7, #12]
 8003c26:	4911      	ldr	r1, [pc, #68]	; (8003c6c <UARTEx_SetNbDataToProcess+0x94>)
 8003c28:	5c8a      	ldrb	r2, [r1, r2]
 8003c2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003c2e:	7b3a      	ldrb	r2, [r7, #12]
 8003c30:	490f      	ldr	r1, [pc, #60]	; (8003c70 <UARTEx_SetNbDataToProcess+0x98>)
 8003c32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c34:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
 8003c42:	7b7a      	ldrb	r2, [r7, #13]
 8003c44:	4909      	ldr	r1, [pc, #36]	; (8003c6c <UARTEx_SetNbDataToProcess+0x94>)
 8003c46:	5c8a      	ldrb	r2, [r1, r2]
 8003c48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003c4c:	7b7a      	ldrb	r2, [r7, #13]
 8003c4e:	4908      	ldr	r1, [pc, #32]	; (8003c70 <UARTEx_SetNbDataToProcess+0x98>)
 8003c50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c52:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003c5e:	bf00      	nop
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	0802946c 	.word	0x0802946c
 8003c70:	08029474 	.word	0x08029474

08003c74 <ESP_Init>:
 */
int32_t ESP_Init(void 		(*UART_Transmit)(uint8_t*,size_t),
			 	 uint8_t 	(*UART_Receive)(void),
				 uint32_t 	(*getTick)(void),
				 uint32_t	UART_Buffer_Size)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	603b      	str	r3, [r7, #0]
	if(UART_Transmit != NULL		&&
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d01d      	beq.n	8003cc4 <ESP_Init+0x50>
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d01a      	beq.n	8003cc4 <ESP_Init+0x50>
	   UART_Receive	!= NULL			&&
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d017      	beq.n	8003cc4 <ESP_Init+0x50>
	   getTick != NULL)
	{
		ESP8266.UART_Receive 		= UART_Receive;
 8003c94:	4a0e      	ldr	r2, [pc, #56]	; (8003cd0 <ESP_Init+0x5c>)
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	6053      	str	r3, [r2, #4]
		ESP8266.UART_Transmit 		= UART_Transmit;
 8003c9a:	4a0d      	ldr	r2, [pc, #52]	; (8003cd0 <ESP_Init+0x5c>)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6013      	str	r3, [r2, #0]
		ESP8266.getTick 			= getTick;
 8003ca0:	4a0b      	ldr	r2, [pc, #44]	; (8003cd0 <ESP_Init+0x5c>)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6093      	str	r3, [r2, #8]

		rx_buffer = ringBuffer_init(UART_Buffer_Size);
 8003ca6:	6838      	ldr	r0, [r7, #0]
 8003ca8:	f000 fd52 	bl	8004750 <ringBuffer_init>
 8003cac:	4603      	mov	r3, r0
 8003cae:	4a09      	ldr	r2, [pc, #36]	; (8003cd4 <ESP_Init+0x60>)
 8003cb0:	6013      	str	r3, [r2, #0]

		if(rx_buffer != NULL)
 8003cb2:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <ESP_Init+0x60>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <ESP_Init+0x4a>
			return 1;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e004      	b.n	8003cc8 <ESP_Init+0x54>
		else
			return -1;
 8003cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc2:	e001      	b.n	8003cc8 <ESP_Init+0x54>
	}
	else
	{
		return -1;
 8003cc4:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	20000360 	.word	0x20000360
 8003cd4:	200010fc 	.word	0x200010fc

08003cd8 <Send_AT_Command>:
 * 			as a function pointer in the ESP_Init function to send AT commands over UART.
 * @param 	cmd is a string containing the AT command.
 * @retval	None.
 */
void Send_AT_Command(char *cmd,size_t size)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]

	ESP8266.UART_Transmit((uint8_t*)cmd,size);
 8003ce2:	4b04      	ldr	r3, [pc, #16]	; (8003cf4 <Send_AT_Command+0x1c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6839      	ldr	r1, [r7, #0]
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	4798      	blx	r3
}
 8003cec:	bf00      	nop
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	20000360 	.word	0x20000360

08003cf8 <ESP_UART_ReceiveHandler>:
 * 			this function in the UART ISR.
 * @param 	None.
 * @retval	None.
 */
void ESP_UART_ReceiveHandler(void)
{
 8003cf8:	b598      	push	{r3, r4, r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
	ringBuffer_push(rx_buffer, ESP8266.UART_Receive());
 8003cfc:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <ESP_UART_ReceiveHandler+0x1c>)
 8003cfe:	681c      	ldr	r4, [r3, #0]
 8003d00:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <ESP_UART_ReceiveHandler+0x20>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	4798      	blx	r3
 8003d06:	4603      	mov	r3, r0
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4620      	mov	r0, r4
 8003d0c:	f000 fd61 	bl	80047d2 <ringBuffer_push>
}
 8003d10:	bf00      	nop
 8003d12:	bd98      	pop	{r3, r4, r7, pc}
 8003d14:	200010fc 	.word	0x200010fc
 8003d18:	20000360 	.word	0x20000360

08003d1c <Read_Response>:
 * @param 	response is a string is checked if it is in the ring buffer.
 * @retval	1: There is a string passed as a parameter in the ring buffer.
 * @retval	0: There is no string passed as a parameter in the ring buffer.
 */
uint32_t Read_Response(char * response)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
	return ringBuffer_lookFor(rx_buffer, (uint8_t*)response);
 8003d24:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <Read_Response+0x20>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 fddb 	bl	80048e6 <ringBuffer_lookFor>
 8003d30:	4603      	mov	r3, r0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	200010fc 	.word	0x200010fc

08003d40 <Wait_Response>:
 * @retval	FOUND			:There is a string passed as a parameter in the ring buffer.
 * @retval	TIMEOUT_ERROR	:It returns when timeout occurs.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Wait_Response(char* response, uint32_t timeout)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]

	static uint32_t time = 0;
	static uint8_t firstCall = 0;

	if(!firstCall)
 8003d4a:	4b1a      	ldr	r3, [pc, #104]	; (8003db4 <Wait_Response+0x74>)
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d108      	bne.n	8003d64 <Wait_Response+0x24>
	{
		time = ESP8266.getTick();
 8003d52:	4b19      	ldr	r3, [pc, #100]	; (8003db8 <Wait_Response+0x78>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	4798      	blx	r3
 8003d58:	4603      	mov	r3, r0
 8003d5a:	4a18      	ldr	r2, [pc, #96]	; (8003dbc <Wait_Response+0x7c>)
 8003d5c:	6013      	str	r3, [r2, #0]
		firstCall = 1;
 8003d5e:	4b15      	ldr	r3, [pc, #84]	; (8003db4 <Wait_Response+0x74>)
 8003d60:	2201      	movs	r2, #1
 8003d62:	701a      	strb	r2, [r3, #0]
	}

	if(ringBuffer_lookFor(rx_buffer, (uint8_t*)response))
 8003d64:	4b16      	ldr	r3, [pc, #88]	; (8003dc0 <Wait_Response+0x80>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fdbb 	bl	80048e6 <ringBuffer_lookFor>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d007      	beq.n	8003d86 <Wait_Response+0x46>
	{
		firstCall = 0;
 8003d76:	4b0f      	ldr	r3, [pc, #60]	; (8003db4 <Wait_Response+0x74>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	701a      	strb	r2, [r3, #0]
		time = 0;
 8003d7c:	4b0f      	ldr	r3, [pc, #60]	; (8003dbc <Wait_Response+0x7c>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	601a      	str	r2, [r3, #0]
		return FOUND;
 8003d82:	2300      	movs	r3, #0
 8003d84:	e012      	b.n	8003dac <Wait_Response+0x6c>
	}
	else if(ESP8266.getTick() - time >= timeout)
 8003d86:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <Wait_Response+0x78>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	4798      	blx	r3
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <Wait_Response+0x7c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d807      	bhi.n	8003daa <Wait_Response+0x6a>
	{
		firstCall = 0;
 8003d9a:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <Wait_Response+0x74>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	701a      	strb	r2, [r3, #0]
		time = 0;
 8003da0:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <Wait_Response+0x7c>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]
		return TIMEOUT_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <Wait_Response+0x6c>
	}
	else
	{
		return IDLE;
 8003daa:	2304      	movs	r3, #4
	}

}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3708      	adds	r7, #8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	2000036c 	.word	0x2000036c
 8003db8:	20000360 	.word	0x20000360
 8003dbc:	20000370 	.word	0x20000370
 8003dc0:	200010fc 	.word	0x200010fc

08003dc4 <Connect_Wifi>:
 * @retval	STATUS_ERROR	:There is an error about connection.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Connect_Wifi(char* ssid, char* password)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b098      	sub	sp, #96	; 0x60
 8003dc8:	af02      	add	r7, sp, #8
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
	char *command_buffer[3] =
 8003dce:	4a16      	ldr	r2, [pc, #88]	; (8003e28 <Connect_Wifi+0x64>)
 8003dd0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003dd4:	ca07      	ldmia	r2, {r0, r1, r2}
 8003dd6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		AT_CWMODE_STATION,
		AT_CWQAP,
		""
	};
	char *response_buffer[3] =
 8003dda:	4a14      	ldr	r2, [pc, #80]	; (8003e2c <Connect_Wifi+0x68>)
 8003ddc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003de0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003de2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		AT_RESPONSE_OK,
		AT_RESPONSE_OK,
		AT_RESPONSE_OK
	};
	Status response_state = IDLE;
 8003de6:	2304      	movs	r3, #4
 8003de8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	char wifi_buffer[50];

	sprintf(wifi_buffer,"%s\"%s\",\"%s\"\r\n",AT_CWJAP,ssid,password); 		// AT+CWJAP="<SSID>","<password>"
 8003dec:	f107 0008 	add.w	r0, r7, #8
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a0e      	ldr	r2, [pc, #56]	; (8003e30 <Connect_Wifi+0x6c>)
 8003df8:	490e      	ldr	r1, [pc, #56]	; (8003e34 <Connect_Wifi+0x70>)
 8003dfa:	f01e feed 	bl	8022bd8 <siprintf>

	command_buffer[2] = wifi_buffer;
 8003dfe:	f107 0308 	add.w	r3, r7, #8
 8003e02:	653b      	str	r3, [r7, #80]	; 0x50

	response_state = Command_Process(command_buffer, response_buffer, 3);
 8003e04:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003e08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e0c:	2203      	movs	r2, #3
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 f82e 	bl	8003e70 <Command_Process>
 8003e14:	4603      	mov	r3, r0
 8003e16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	return response_state;
 8003e1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3758      	adds	r7, #88	; 0x58
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	08025734 	.word	0x08025734
 8003e2c:	08025740 	.word	0x08025740
 8003e30:	08025718 	.word	0x08025718
 8003e34:	08025724 	.word	0x08025724

08003e38 <Disconnect_Wifi>:
 * @retval	STATUS_ERROR	:There is an error about disconnect operation.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Disconnect_Wifi(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
	char *command_buffer[1] = { AT_CWQAP };
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <Disconnect_Wifi+0x30>)
 8003e40:	60bb      	str	r3, [r7, #8]
	char *response_buffer[1] = { AT_RESPONSE_OK };
 8003e42:	4b0a      	ldr	r3, [pc, #40]	; (8003e6c <Disconnect_Wifi+0x34>)
 8003e44:	607b      	str	r3, [r7, #4]

	Status response_state = IDLE;
 8003e46:	2304      	movs	r3, #4
 8003e48:	73fb      	strb	r3, [r7, #15]

	response_state = Command_Process(command_buffer, response_buffer, 1);
 8003e4a:	1d39      	adds	r1, r7, #4
 8003e4c:	f107 0308 	add.w	r3, r7, #8
 8003e50:	2201      	movs	r2, #1
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 f80c 	bl	8003e70 <Command_Process>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	73fb      	strb	r3, [r7, #15]

	return response_state;
 8003e5c:	7bfb      	ldrb	r3, [r7, #15]

}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	080256e8 	.word	0x080256e8
 8003e6c:	080256f8 	.word	0x080256f8

08003e70 <Command_Process>:
 * @retval	STATUS_ERROR	:It returns when ESP send the ERROR message or number of commands is equal zero.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Command_Process(char **commandArray, char **responseArray, uint8_t numberOfCommands)
{
 8003e70:	b590      	push	{r4, r7, lr}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	71fb      	strb	r3, [r7, #7]
	static uint8_t commandFlag  = 1, currentCommand = 0;
	Status response;

	if(!numberOfCommands || currentCommand >= numberOfCommands)
 8003e7e:	79fb      	ldrb	r3, [r7, #7]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d004      	beq.n	8003e8e <Command_Process+0x1e>
 8003e84:	4b41      	ldr	r3, [pc, #260]	; (8003f8c <Command_Process+0x11c>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	79fa      	ldrb	r2, [r7, #7]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d806      	bhi.n	8003e9c <Command_Process+0x2c>
	{
		ringBuffer_flush(rx_buffer);
 8003e8e:	4b40      	ldr	r3, [pc, #256]	; (8003f90 <Command_Process+0x120>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 fcf1 	bl	800487a <ringBuffer_flush>
		return STATUS_ERROR;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e072      	b.n	8003f82 <Command_Process+0x112>
	}
	else
	{
		if(commandFlag)
 8003e9c:	4b3d      	ldr	r3, [pc, #244]	; (8003f94 <Command_Process+0x124>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d016      	beq.n	8003ed2 <Command_Process+0x62>
		{
			Send_AT_Command(commandArray[currentCommand],strlen(commandArray[currentCommand]));
 8003ea4:	4b39      	ldr	r3, [pc, #228]	; (8003f8c <Command_Process+0x11c>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	4413      	add	r3, r2
 8003eae:	681c      	ldr	r4, [r3, #0]
 8003eb0:	4b36      	ldr	r3, [pc, #216]	; (8003f8c <Command_Process+0x11c>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4413      	add	r3, r2
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fc f9bd 	bl	800023c <strlen>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	f7ff ff06 	bl	8003cd8 <Send_AT_Command>
			commandFlag = 0;
 8003ecc:	4b31      	ldr	r3, [pc, #196]	; (8003f94 <Command_Process+0x124>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	701a      	strb	r2, [r3, #0]
		}
			response = Wait_Response(responseArray[currentCommand], TIMEOUT);
 8003ed2:	4b2e      	ldr	r3, [pc, #184]	; (8003f8c <Command_Process+0x11c>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	4413      	add	r3, r2
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f242 7110 	movw	r1, #10000	; 0x2710
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff ff2c 	bl	8003d40 <Wait_Response>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	75fb      	strb	r3, [r7, #23]

			if(Read_Response("ERROR"))
 8003eec:	482a      	ldr	r0, [pc, #168]	; (8003f98 <Command_Process+0x128>)
 8003eee:	f7ff ff15 	bl	8003d1c <Read_Response>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00c      	beq.n	8003f12 <Command_Process+0xa2>
			{
				commandFlag = 1;
 8003ef8:	4b26      	ldr	r3, [pc, #152]	; (8003f94 <Command_Process+0x124>)
 8003efa:	2201      	movs	r2, #1
 8003efc:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 8003efe:	4b23      	ldr	r3, [pc, #140]	; (8003f8c <Command_Process+0x11c>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	701a      	strb	r2, [r3, #0]
				ringBuffer_flush(rx_buffer);
 8003f04:	4b22      	ldr	r3, [pc, #136]	; (8003f90 <Command_Process+0x120>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 fcb6 	bl	800487a <ringBuffer_flush>
				return STATUS_ERROR;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e037      	b.n	8003f82 <Command_Process+0x112>
			}
			else if(response == IDLE)
 8003f12:	7dfb      	ldrb	r3, [r7, #23]
 8003f14:	2b04      	cmp	r3, #4
 8003f16:	d101      	bne.n	8003f1c <Command_Process+0xac>
			{
				return response;
 8003f18:	7dfb      	ldrb	r3, [r7, #23]
 8003f1a:	e032      	b.n	8003f82 <Command_Process+0x112>
			}
			else if(response == FOUND)
 8003f1c:	7dfb      	ldrb	r3, [r7, #23]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d123      	bne.n	8003f6a <Command_Process+0xfa>
			{
				if(currentCommand == (numberOfCommands-1))
 8003f22:	4b1a      	ldr	r3, [pc, #104]	; (8003f8c <Command_Process+0x11c>)
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	461a      	mov	r2, r3
 8003f28:	79fb      	ldrb	r3, [r7, #7]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d10c      	bne.n	8003f4a <Command_Process+0xda>
				{
					commandFlag = 1;
 8003f30:	4b18      	ldr	r3, [pc, #96]	; (8003f94 <Command_Process+0x124>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	701a      	strb	r2, [r3, #0]
					currentCommand = 0;
 8003f36:	4b15      	ldr	r3, [pc, #84]	; (8003f8c <Command_Process+0x11c>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 8003f3c:	4b14      	ldr	r3, [pc, #80]	; (8003f90 <Command_Process+0x120>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 fc9a 	bl	800487a <ringBuffer_flush>
					return STATUS_OK;
 8003f46:	2302      	movs	r3, #2
 8003f48:	e01b      	b.n	8003f82 <Command_Process+0x112>
				}
				else
				{
					commandFlag = 1;
 8003f4a:	4b12      	ldr	r3, [pc, #72]	; (8003f94 <Command_Process+0x124>)
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	701a      	strb	r2, [r3, #0]
					currentCommand += 1;
 8003f50:	4b0e      	ldr	r3, [pc, #56]	; (8003f8c <Command_Process+0x11c>)
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	3301      	adds	r3, #1
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	4b0c      	ldr	r3, [pc, #48]	; (8003f8c <Command_Process+0x11c>)
 8003f5a:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 8003f5c:	4b0c      	ldr	r3, [pc, #48]	; (8003f90 <Command_Process+0x120>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 fc8a 	bl	800487a <ringBuffer_flush>
					return IDLE;
 8003f66:	2304      	movs	r3, #4
 8003f68:	e00b      	b.n	8003f82 <Command_Process+0x112>
				}

			}
			else
			{
				commandFlag = 1;
 8003f6a:	4b0a      	ldr	r3, [pc, #40]	; (8003f94 <Command_Process+0x124>)
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 8003f70:	4b06      	ldr	r3, [pc, #24]	; (8003f8c <Command_Process+0x11c>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	701a      	strb	r2, [r3, #0]
				ringBuffer_flush(rx_buffer);
 8003f76:	4b06      	ldr	r3, [pc, #24]	; (8003f90 <Command_Process+0x120>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 fc7d 	bl	800487a <ringBuffer_flush>
				return response;
 8003f80:	7dfb      	ldrb	r3, [r7, #23]
			}
	}


}
 8003f82:	4618      	mov	r0, r3
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd90      	pop	{r4, r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20000374 	.word	0x20000374
 8003f90:	200010fc 	.word	0x200010fc
 8003f94:	20000010 	.word	0x20000010
 8003f98:	0802574c 	.word	0x0802574c

08003f9c <Connect_TCP_Server>:
 * @retval	STATUS_ERROR	:There is an error about connection.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Connect_TCP_Server(const char* ip, const char* port)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b0a2      	sub	sp, #136	; 0x88
 8003fa0:	af02      	add	r7, sp, #8
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
	Status response_state = IDLE;
 8003fa6:	2304      	movs	r3, #4
 8003fa8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	char *command_buffer[2] =
 8003fac:	4a19      	ldr	r2, [pc, #100]	; (8004014 <Connect_TCP_Server+0x78>)
 8003fae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003fb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fb6:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		AT_CIPMUX_SINGLE,
		""
	};

	char *response_buffer[2] =
 8003fba:	4a17      	ldr	r2, [pc, #92]	; (8004018 <Connect_TCP_Server+0x7c>)
 8003fbc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003fc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fc4:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		AT_RESPONSE_OK,
		AT_RESPONSE_OK
	};

	char wifi_buffer[100] ={0};
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60bb      	str	r3, [r7, #8]
 8003fcc:	f107 030c 	add.w	r3, r7, #12
 8003fd0:	2260      	movs	r2, #96	; 0x60
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f01e fc4b 	bl	8022870 <memset>

	sprintf(wifi_buffer,"%s\"%s\",%s\r\n",AT_CIPSTART_TCP,ip,port);
 8003fda:	f107 0008 	add.w	r0, r7, #8
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a0d      	ldr	r2, [pc, #52]	; (800401c <Connect_TCP_Server+0x80>)
 8003fe6:	490e      	ldr	r1, [pc, #56]	; (8004020 <Connect_TCP_Server+0x84>)
 8003fe8:	f01e fdf6 	bl	8022bd8 <siprintf>

	command_buffer[1] = wifi_buffer;
 8003fec:	f107 0308 	add.w	r3, r7, #8
 8003ff0:	67bb      	str	r3, [r7, #120]	; 0x78

	response_state = Command_Process(command_buffer, response_buffer, 2);
 8003ff2:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8003ff6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff ff37 	bl	8003e70 <Command_Process>
 8004002:	4603      	mov	r3, r0
 8004004:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	return response_state;
 8004008:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800400c:	4618      	mov	r0, r3
 800400e:	3780      	adds	r7, #128	; 0x80
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	08025774 	.word	0x08025774
 8004018:	0802577c 	.word	0x0802577c
 800401c:	08025754 	.word	0x08025754
 8004020:	08025768 	.word	0x08025768

08004024 <Disconnect_TCP_Server>:
 * @retval	STATUS_ERROR	:There is an error about disconnection.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Disconnect_TCP_Server(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
	Status response_state = IDLE;
 800402a:	2304      	movs	r3, #4
 800402c:	73fb      	strb	r3, [r7, #15]

	char *command_buffer[1] = { AT_CIPCLOSE };
 800402e:	4b09      	ldr	r3, [pc, #36]	; (8004054 <Disconnect_TCP_Server+0x30>)
 8004030:	60bb      	str	r3, [r7, #8]
	char *response_buffer[1] = { AT_RESPONSE_OK };
 8004032:	4b09      	ldr	r3, [pc, #36]	; (8004058 <Disconnect_TCP_Server+0x34>)
 8004034:	607b      	str	r3, [r7, #4]

	response_state = Command_Process(command_buffer, response_buffer, 1);
 8004036:	1d39      	adds	r1, r7, #4
 8004038:	f107 0308 	add.w	r3, r7, #8
 800403c:	2201      	movs	r2, #1
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff ff16 	bl	8003e70 <Command_Process>
 8004044:	4603      	mov	r3, r0
 8004046:	73fb      	strb	r3, [r7, #15]

	return response_state;
 8004048:	7bfb      	ldrb	r3, [r7, #15]

}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	08025784 	.word	0x08025784
 8004058:	080256f8 	.word	0x080256f8

0800405c <Send_TCP_Message>:
 * @retval	STATUS_ERROR	:There is an error about sending message.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs. Default timeout is 5000 ms.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE.
 */
Status Send_TCP_Message(char* message)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b096      	sub	sp, #88	; 0x58
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
	Status response_state = STATUS_ERROR;
 8004064:	2303      	movs	r3, #3
 8004066:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	uint32_t length=0;
 800406a:	2300      	movs	r3, #0
 800406c:	653b      	str	r3, [r7, #80]	; 0x50

	length = strlen(message);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7fc f8e4 	bl	800023c <strlen>
 8004074:	6538      	str	r0, [r7, #80]	; 0x50

	char cipSendBuffer[50];

	sprintf(cipSendBuffer,"%s%ld\r\n",AT_CIPSEND,length);
 8004076:	f107 001c 	add.w	r0, r7, #28
 800407a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800407c:	4a10      	ldr	r2, [pc, #64]	; (80040c0 <Send_TCP_Message+0x64>)
 800407e:	4911      	ldr	r1, [pc, #68]	; (80040c4 <Send_TCP_Message+0x68>)
 8004080:	f01e fdaa 	bl	8022bd8 <siprintf>

	char *command_buffer[2];

	command_buffer[0] = cipSendBuffer;
 8004084:	f107 031c 	add.w	r3, r7, #28
 8004088:	617b      	str	r3, [r7, #20]
	command_buffer[1] = message;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	61bb      	str	r3, [r7, #24]

	char *response_buffer[2] =
 800408e:	4a0e      	ldr	r2, [pc, #56]	; (80040c8 <Send_TCP_Message+0x6c>)
 8004090:	f107 030c 	add.w	r3, r7, #12
 8004094:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004098:	e883 0003 	stmia.w	r3, {r0, r1}
	{
			AT_RESPONSE_GREATER_THAN,
			AT_RESPONSE_SEND_OK
	};

	response_state = Command_Process(command_buffer, response_buffer, 2);
 800409c:	f107 010c 	add.w	r1, r7, #12
 80040a0:	f107 0314 	add.w	r3, r7, #20
 80040a4:	2202      	movs	r2, #2
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7ff fee2 	bl	8003e70 <Command_Process>
 80040ac:	4603      	mov	r3, r0
 80040ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	return response_state;
 80040b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57

}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3758      	adds	r7, #88	; 0x58
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	08025794 	.word	0x08025794
 80040c4:	080257a0 	.word	0x080257a0
 80040c8:	080257a8 	.word	0x080257a8

080040cc <Send_TCP_Bytes>:

Status Send_TCP_Bytes(uint8_t* buffer, size_t size)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b094      	sub	sp, #80	; 0x50
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]

	static int32_t isFirstCall = 0,commandCount=0;
	Status response = IDLE;
 80040d6:	2304      	movs	r3, #4
 80040d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	char cipSendBuffer[50];

	int32_t length = sprintf(cipSendBuffer,"%s%d\r\n",AT_CIPSEND,size);
 80040dc:	f107 0014 	add.w	r0, r7, #20
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	4a31      	ldr	r2, [pc, #196]	; (80041a8 <Send_TCP_Bytes+0xdc>)
 80040e4:	4931      	ldr	r1, [pc, #196]	; (80041ac <Send_TCP_Bytes+0xe0>)
 80040e6:	f01e fd77 	bl	8022bd8 <siprintf>
 80040ea:	64b8      	str	r0, [r7, #72]	; 0x48

	char *response_buffer[2] =
 80040ec:	4a30      	ldr	r2, [pc, #192]	; (80041b0 <Send_TCP_Bytes+0xe4>)
 80040ee:	f107 030c 	add.w	r3, r7, #12
 80040f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80040f6:	e883 0003 	stmia.w	r3, {r0, r1}
			AT_RESPONSE_GREATER_THAN,
			AT_RESPONSE_SEND_OK
	};


	if(!isFirstCall)
 80040fa:	4b2e      	ldr	r3, [pc, #184]	; (80041b4 <Send_TCP_Bytes+0xe8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d109      	bne.n	8004116 <Send_TCP_Bytes+0x4a>
	{
		Send_AT_Command(cipSendBuffer, length);
 8004102:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004104:	f107 0314 	add.w	r3, r7, #20
 8004108:	4611      	mov	r1, r2
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff fde4 	bl	8003cd8 <Send_AT_Command>

		isFirstCall = 1;
 8004110:	4b28      	ldr	r3, [pc, #160]	; (80041b4 <Send_TCP_Bytes+0xe8>)
 8004112:	2201      	movs	r2, #1
 8004114:	601a      	str	r2, [r3, #0]
	}

	response = Wait_Response(response_buffer[commandCount], TIMEOUT);
 8004116:	4b28      	ldr	r3, [pc, #160]	; (80041b8 <Send_TCP_Bytes+0xec>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004120:	4413      	add	r3, r2
 8004122:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004126:	f242 7110 	movw	r1, #10000	; 0x2710
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff fe08 	bl	8003d40 <Wait_Response>
 8004130:	4603      	mov	r3, r0
 8004132:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

if(response == FOUND)
 8004136:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800413a:	2b00      	cmp	r3, #0
 800413c:	d11f      	bne.n	800417e <Send_TCP_Bytes+0xb2>
	{
		if(!commandCount)
 800413e:	4b1e      	ldr	r3, [pc, #120]	; (80041b8 <Send_TCP_Bytes+0xec>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10c      	bne.n	8004160 <Send_TCP_Bytes+0x94>
		{
			Send_AT_Command((char*)buffer, size);
 8004146:	6839      	ldr	r1, [r7, #0]
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7ff fdc5 	bl	8003cd8 <Send_AT_Command>
			commandCount++;
 800414e:	4b1a      	ldr	r3, [pc, #104]	; (80041b8 <Send_TCP_Bytes+0xec>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	3301      	adds	r3, #1
 8004154:	4a18      	ldr	r2, [pc, #96]	; (80041b8 <Send_TCP_Bytes+0xec>)
 8004156:	6013      	str	r3, [r2, #0]
			response = IDLE;
 8004158:	2304      	movs	r3, #4
 800415a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800415e:	e01d      	b.n	800419c <Send_TCP_Bytes+0xd0>
		}
		else
		{
			commandCount = 0;
 8004160:	4b15      	ldr	r3, [pc, #84]	; (80041b8 <Send_TCP_Bytes+0xec>)
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
			isFirstCall = 0;
 8004166:	4b13      	ldr	r3, [pc, #76]	; (80041b4 <Send_TCP_Bytes+0xe8>)
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]
			response = STATUS_OK;
 800416c:	2302      	movs	r3, #2
 800416e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			ringBuffer_flush(rx_buffer);
 8004172:	4b12      	ldr	r3, [pc, #72]	; (80041bc <Send_TCP_Bytes+0xf0>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fb7f 	bl	800487a <ringBuffer_flush>
 800417c:	e00e      	b.n	800419c <Send_TCP_Bytes+0xd0>
		}

	}
else if( response == STATUS_ERROR)
 800417e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004182:	2b03      	cmp	r3, #3
 8004184:	d10a      	bne.n	800419c <Send_TCP_Bytes+0xd0>
{
	commandCount = 0;
 8004186:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <Send_TCP_Bytes+0xec>)
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]
	isFirstCall = 0;
 800418c:	4b09      	ldr	r3, [pc, #36]	; (80041b4 <Send_TCP_Bytes+0xe8>)
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]
	ringBuffer_flush(rx_buffer);
 8004192:	4b0a      	ldr	r3, [pc, #40]	; (80041bc <Send_TCP_Bytes+0xf0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f000 fb6f 	bl	800487a <ringBuffer_flush>
}

	return response;
 800419c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f

}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3750      	adds	r7, #80	; 0x50
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	08025794 	.word	0x08025794
 80041ac:	080257b0 	.word	0x080257b0
 80041b0:	080257a8 	.word	0x080257a8
 80041b4:	20000378 	.word	0x20000378
 80041b8:	2000037c 	.word	0x2000037c
 80041bc:	200010fc 	.word	0x200010fc

080041c0 <Read_TCP_Message>:
 * @param 	receviedMessage : If a message is received, it is assigned to receivedMessage.
 * @retval	STATUS_OK		:The message has been read successfully.
 * @retval	STATUS_ERROR	:There is no TCP message in the buffer.
 */
Status Read_TCP_Message(char* receivedMessage)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b088      	sub	sp, #32
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]

	char *substring = strstr((char*)rx_buffer->buffer,"+IPD,");
 80041c8:	4b2d      	ldr	r3, [pc, #180]	; (8004280 <Read_TCP_Message+0xc0>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	492d      	ldr	r1, [pc, #180]	; (8004284 <Read_TCP_Message+0xc4>)
 80041d0:	4618      	mov	r0, r3
 80041d2:	f01f facb 	bl	802376c <strstr>
 80041d6:	6138      	str	r0, [r7, #16]

	char messageLengthString[3];

	uint32_t messageLength=0,index=0;
 80041d8:	2300      	movs	r3, #0
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	2300      	movs	r3, #0
 80041de:	61fb      	str	r3, [r7, #28]


	if(substring != NULL)
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d042      	beq.n	800426c <Read_TCP_Message+0xac>
	{
		for(uint8_t i=0;i<3;i++)
 80041e6:	2300      	movs	r3, #0
 80041e8:	76fb      	strb	r3, [r7, #27]
 80041ea:	e017      	b.n	800421c <Read_TCP_Message+0x5c>
		{
			if(*(substring+5+i) == ':')
 80041ec:	7efb      	ldrb	r3, [r7, #27]
 80041ee:	3305      	adds	r3, #5
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4413      	add	r3, r2
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2b3a      	cmp	r3, #58	; 0x3a
 80041f8:	d014      	beq.n	8004224 <Read_TCP_Message+0x64>
				break;
			messageLengthString[i] = *(substring+5+i);
 80041fa:	7efb      	ldrb	r3, [r7, #27]
 80041fc:	3305      	adds	r3, #5
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	441a      	add	r2, r3
 8004202:	7efb      	ldrb	r3, [r7, #27]
 8004204:	7812      	ldrb	r2, [r2, #0]
 8004206:	f107 0120 	add.w	r1, r7, #32
 800420a:	440b      	add	r3, r1
 800420c:	f803 2c18 	strb.w	r2, [r3, #-24]
			index += 1;
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	3301      	adds	r3, #1
 8004214:	61fb      	str	r3, [r7, #28]
		for(uint8_t i=0;i<3;i++)
 8004216:	7efb      	ldrb	r3, [r7, #27]
 8004218:	3301      	adds	r3, #1
 800421a:	76fb      	strb	r3, [r7, #27]
 800421c:	7efb      	ldrb	r3, [r7, #27]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d9e4      	bls.n	80041ec <Read_TCP_Message+0x2c>
 8004222:	e000      	b.n	8004226 <Read_TCP_Message+0x66>
				break;
 8004224:	bf00      	nop

		}

		messageLength = atoi(messageLengthString);
 8004226:	f107 0308 	add.w	r3, r7, #8
 800422a:	4618      	mov	r0, r3
 800422c:	f01d fd35 	bl	8021c9a <atoi>
 8004230:	4603      	mov	r3, r0
 8004232:	60fb      	str	r3, [r7, #12]

		for(uint32_t i=0;i<messageLength;i++)
 8004234:	2300      	movs	r3, #0
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	e00d      	b.n	8004256 <Read_TCP_Message+0x96>
		{
			receivedMessage[i] = *(substring+6+index+i);
 800423a:	69fa      	ldr	r2, [r7, #28]
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	4413      	add	r3, r2
 8004240:	3306      	adds	r3, #6
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	441a      	add	r2, r3
 8004246:	6879      	ldr	r1, [r7, #4]
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	440b      	add	r3, r1
 800424c:	7812      	ldrb	r2, [r2, #0]
 800424e:	701a      	strb	r2, [r3, #0]
		for(uint32_t i=0;i<messageLength;i++)
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	3301      	adds	r3, #1
 8004254:	617b      	str	r3, [r7, #20]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	429a      	cmp	r2, r3
 800425c:	d3ed      	bcc.n	800423a <Read_TCP_Message+0x7a>
		}
		ringBuffer_flush(rx_buffer);
 800425e:	4b08      	ldr	r3, [pc, #32]	; (8004280 <Read_TCP_Message+0xc0>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4618      	mov	r0, r3
 8004264:	f000 fb09 	bl	800487a <ringBuffer_flush>
		return STATUS_OK;
 8004268:	2302      	movs	r3, #2
 800426a:	e005      	b.n	8004278 <Read_TCP_Message+0xb8>


	}
	else
	{
		ringBuffer_flush(rx_buffer);
 800426c:	4b04      	ldr	r3, [pc, #16]	; (8004280 <Read_TCP_Message+0xc0>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4618      	mov	r0, r3
 8004272:	f000 fb02 	bl	800487a <ringBuffer_flush>
		return STATUS_ERROR;
 8004276:	2303      	movs	r3, #3
	}



}
 8004278:	4618      	mov	r0, r3
 800427a:	3720      	adds	r7, #32
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	200010fc 	.word	0x200010fc
 8004284:	080257b8 	.word	0x080257b8

08004288 <Wait_TCP_Message>:
 * @retval	STATUS_ERROR	:There is no TCP message in the buffer.
 * @retval	TIMEOUT_ERROR	:It returns TIMEOUT_ERROR when timeout occurs.
 * @retval	IDLE			:If there is not a string in the buffer and timeout does not occur yet, it returns IDLE
 */
Status Wait_TCP_Message(char* receivedMessage, uint32_t timeout)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
	static uint8_t firstCall = 1;
	static uint32_t time = 0;

	if(firstCall)
 8004292:	4b19      	ldr	r3, [pc, #100]	; (80042f8 <Wait_TCP_Message+0x70>)
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d008      	beq.n	80042ac <Wait_TCP_Message+0x24>
	{
		time = ESP8266.getTick();
 800429a:	4b18      	ldr	r3, [pc, #96]	; (80042fc <Wait_TCP_Message+0x74>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	4798      	blx	r3
 80042a0:	4603      	mov	r3, r0
 80042a2:	4a17      	ldr	r2, [pc, #92]	; (8004300 <Wait_TCP_Message+0x78>)
 80042a4:	6013      	str	r3, [r2, #0]
		firstCall = 0;
 80042a6:	4b14      	ldr	r3, [pc, #80]	; (80042f8 <Wait_TCP_Message+0x70>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	701a      	strb	r2, [r3, #0]
	}

	if(Read_TCP_Message(receivedMessage) == STATUS_OK)
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7ff ff87 	bl	80041c0 <Read_TCP_Message>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d107      	bne.n	80042c8 <Wait_TCP_Message+0x40>
	{
		time = 0;
 80042b8:	4b11      	ldr	r3, [pc, #68]	; (8004300 <Wait_TCP_Message+0x78>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	601a      	str	r2, [r3, #0]
		firstCall = 1;
 80042be:	4b0e      	ldr	r3, [pc, #56]	; (80042f8 <Wait_TCP_Message+0x70>)
 80042c0:	2201      	movs	r2, #1
 80042c2:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
 80042c4:	2302      	movs	r3, #2
 80042c6:	e012      	b.n	80042ee <Wait_TCP_Message+0x66>
	}
	else if(ESP8266.getTick()-time >= timeout)
 80042c8:	4b0c      	ldr	r3, [pc, #48]	; (80042fc <Wait_TCP_Message+0x74>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	4798      	blx	r3
 80042ce:	4602      	mov	r2, r0
 80042d0:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <Wait_TCP_Message+0x78>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d807      	bhi.n	80042ec <Wait_TCP_Message+0x64>
	{
		time = 0;
 80042dc:	4b08      	ldr	r3, [pc, #32]	; (8004300 <Wait_TCP_Message+0x78>)
 80042de:	2200      	movs	r2, #0
 80042e0:	601a      	str	r2, [r3, #0]
		firstCall = 1;
 80042e2:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <Wait_TCP_Message+0x70>)
 80042e4:	2201      	movs	r2, #1
 80042e6:	701a      	strb	r2, [r3, #0]
		return TIMEOUT_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e000      	b.n	80042ee <Wait_TCP_Message+0x66>
	}
	else
		return IDLE;
 80042ec:	2304      	movs	r3, #4

}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	20000011 	.word	0x20000011
 80042fc:	20000360 	.word	0x20000360
 8004300:	20000380 	.word	0x20000380

08004304 <mqtt_encode_packet>:

#include <string.h>
#include "mqtt.h"


int32_t mqtt_encode_packet(uint8_t *buffer, void *packet, mqtt_packet_types packetType ){
 8004304:	b590      	push	{r4, r7, lr}
 8004306:	b08f      	sub	sp, #60	; 0x3c
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	4613      	mov	r3, r2
 8004310:	71fb      	strb	r3, [r7, #7]

	if(packetType == CONNECT_PACKET)
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	2b00      	cmp	r3, #0
 8004316:	f040 80a4 	bne.w	8004462 <mqtt_encode_packet+0x15e>
	{
		int32_t index = 0;
 800431a:	2300      	movs	r3, #0
 800431c:	637b      	str	r3, [r7, #52]	; 0x34

		MQTT_Connect_Packet *connectPacket = (MQTT_Connect_Packet*)packet;
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	617b      	str	r3, [r7, #20]

		buffer[index++] = connectPacket->ConnectByte;
 8004322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	637a      	str	r2, [r7, #52]	; 0x34
 8004328:	461a      	mov	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4413      	add	r3, r2
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	7812      	ldrb	r2, [r2, #0]
 8004332:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->RemainLength;
 8004334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004336:	1c5a      	adds	r2, r3, #1
 8004338:	637a      	str	r2, [r7, #52]	; 0x34
 800433a:	461a      	mov	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4413      	add	r3, r2
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	7852      	ldrb	r2, [r2, #1]
 8004344:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->ProtocolNameLength>>8;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	885b      	ldrh	r3, [r3, #2]
 800434a:	0a1b      	lsrs	r3, r3, #8
 800434c:	b299      	uxth	r1, r3
 800434e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004350:	1c5a      	adds	r2, r3, #1
 8004352:	637a      	str	r2, [r7, #52]	; 0x34
 8004354:	461a      	mov	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4413      	add	r3, r2
 800435a:	b2ca      	uxtb	r2, r1
 800435c:	701a      	strb	r2, [r3, #0]
		buffer[index++]= connectPacket->ProtocolNameLength & 0xFF;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	8859      	ldrh	r1, [r3, #2]
 8004362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	637a      	str	r2, [r7, #52]	; 0x34
 8004368:	461a      	mov	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4413      	add	r3, r2
 800436e:	b2ca      	uxtb	r2, r1
 8004370:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<connectPacket->ProtocolNameLength;i++)
 8004372:	2300      	movs	r3, #0
 8004374:	867b      	strh	r3, [r7, #50]	; 0x32
 8004376:	e013      	b.n	80043a0 <mqtt_encode_packet+0x9c>
		{
			if(i==4)
 8004378:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800437a:	2b04      	cmp	r3, #4
 800437c:	d102      	bne.n	8004384 <mqtt_encode_packet+0x80>
				return -1;
 800437e:	f04f 33ff 	mov.w	r3, #4294967295
 8004382:	e14b      	b.n	800461c <mqtt_encode_packet+0x318>
			buffer[index++] = connectPacket->ProtocolName[i];
 8004384:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8004386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004388:	1c59      	adds	r1, r3, #1
 800438a:	6379      	str	r1, [r7, #52]	; 0x34
 800438c:	4619      	mov	r1, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	440b      	add	r3, r1
 8004392:	6979      	ldr	r1, [r7, #20]
 8004394:	440a      	add	r2, r1
 8004396:	7912      	ldrb	r2, [r2, #4]
 8004398:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<connectPacket->ProtocolNameLength;i++)
 800439a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800439c:	3301      	adds	r3, #1
 800439e:	867b      	strh	r3, [r7, #50]	; 0x32
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	885b      	ldrh	r3, [r3, #2]
 80043a4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d3e6      	bcc.n	8004378 <mqtt_encode_packet+0x74>
		}
		buffer[index++] = connectPacket->Level;
 80043aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	637a      	str	r2, [r7, #52]	; 0x34
 80043b0:	461a      	mov	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4413      	add	r3, r2
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	7a12      	ldrb	r2, [r2, #8]
 80043ba:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->Flag;
 80043bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	637a      	str	r2, [r7, #52]	; 0x34
 80043c2:	461a      	mov	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4413      	add	r3, r2
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	7a52      	ldrb	r2, [r2, #9]
 80043cc:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->KeepAlive >> 8;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	895b      	ldrh	r3, [r3, #10]
 80043d2:	0a1b      	lsrs	r3, r3, #8
 80043d4:	b299      	uxth	r1, r3
 80043d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	637a      	str	r2, [r7, #52]	; 0x34
 80043dc:	461a      	mov	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4413      	add	r3, r2
 80043e2:	b2ca      	uxtb	r2, r1
 80043e4:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->KeepAlive & 0xFF;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	8959      	ldrh	r1, [r3, #10]
 80043ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	637a      	str	r2, [r7, #52]	; 0x34
 80043f0:	461a      	mov	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	4413      	add	r3, r2
 80043f6:	b2ca      	uxtb	r2, r1
 80043f8:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->ClientIDLength >> 8;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	899b      	ldrh	r3, [r3, #12]
 80043fe:	0a1b      	lsrs	r3, r3, #8
 8004400:	b299      	uxth	r1, r3
 8004402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	637a      	str	r2, [r7, #52]	; 0x34
 8004408:	461a      	mov	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4413      	add	r3, r2
 800440e:	b2ca      	uxtb	r2, r1
 8004410:	701a      	strb	r2, [r3, #0]
		buffer[index++] = connectPacket->ClientIDLength & 0xFF;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	8999      	ldrh	r1, [r3, #12]
 8004416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	637a      	str	r2, [r7, #52]	; 0x34
 800441c:	461a      	mov	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4413      	add	r3, r2
 8004422:	b2ca      	uxtb	r2, r1
 8004424:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<connectPacket->ClientIDLength;i++)
 8004426:	2300      	movs	r3, #0
 8004428:	863b      	strh	r3, [r7, #48]	; 0x30
 800442a:	e013      	b.n	8004454 <mqtt_encode_packet+0x150>
		{
			if(i == MAX_LENGTH_OF_CLIENT_ID)
 800442c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800442e:	2b32      	cmp	r3, #50	; 0x32
 8004430:	d102      	bne.n	8004438 <mqtt_encode_packet+0x134>
				return -1;
 8004432:	f04f 33ff 	mov.w	r3, #4294967295
 8004436:	e0f1      	b.n	800461c <mqtt_encode_packet+0x318>
			buffer[index++] = connectPacket->ClientID[i];
 8004438:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800443a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800443c:	1c59      	adds	r1, r3, #1
 800443e:	6379      	str	r1, [r7, #52]	; 0x34
 8004440:	4619      	mov	r1, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	440b      	add	r3, r1
 8004446:	6979      	ldr	r1, [r7, #20]
 8004448:	440a      	add	r2, r1
 800444a:	7b92      	ldrb	r2, [r2, #14]
 800444c:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<connectPacket->ClientIDLength;i++)
 800444e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004450:	3301      	adds	r3, #1
 8004452:	863b      	strh	r3, [r7, #48]	; 0x30
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	899b      	ldrh	r3, [r3, #12]
 8004458:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800445a:	429a      	cmp	r2, r3
 800445c:	d3e6      	bcc.n	800442c <mqtt_encode_packet+0x128>
		}

		return index;
 800445e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004460:	e0dc      	b.n	800461c <mqtt_encode_packet+0x318>

	}
	else if(packetType == SUBSCRIBE_PACKET)
 8004462:	79fb      	ldrb	r3, [r7, #7]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d169      	bne.n	800453c <mqtt_encode_packet+0x238>
	{

		int32_t index = 0;
 8004468:	2300      	movs	r3, #0
 800446a:	62fb      	str	r3, [r7, #44]	; 0x2c

		MQTT_Subscribe_Packet *subscribePacket = (MQTT_Subscribe_Packet*)packet;
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	61bb      	str	r3, [r7, #24]

		buffer[index++] = subscribePacket->subscribePacketByte;
 8004470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004476:	461a      	mov	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4413      	add	r3, r2
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	7812      	ldrb	r2, [r2, #0]
 8004480:	701a      	strb	r2, [r3, #0]
		buffer[index++] = subscribePacket->remainLength;
 8004482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004484:	1c5a      	adds	r2, r3, #1
 8004486:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004488:	461a      	mov	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	4413      	add	r3, r2
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	7852      	ldrb	r2, [r2, #1]
 8004492:	701a      	strb	r2, [r3, #0]
		buffer[index++] = subscribePacket->packetID >> 8;
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	885b      	ldrh	r3, [r3, #2]
 8004498:	0a1b      	lsrs	r3, r3, #8
 800449a:	b299      	uxth	r1, r3
 800449c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449e:	1c5a      	adds	r2, r3, #1
 80044a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044a2:	461a      	mov	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4413      	add	r3, r2
 80044a8:	b2ca      	uxtb	r2, r1
 80044aa:	701a      	strb	r2, [r3, #0]
		buffer[index++] = subscribePacket->packetID & 0xFF;
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	8859      	ldrh	r1, [r3, #2]
 80044b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044b6:	461a      	mov	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	4413      	add	r3, r2
 80044bc:	b2ca      	uxtb	r2, r1
 80044be:	701a      	strb	r2, [r3, #0]
		buffer[index++] = subscribePacket->topicLength >> 8;
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	889b      	ldrh	r3, [r3, #4]
 80044c4:	0a1b      	lsrs	r3, r3, #8
 80044c6:	b299      	uxth	r1, r3
 80044c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044ce:	461a      	mov	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4413      	add	r3, r2
 80044d4:	b2ca      	uxtb	r2, r1
 80044d6:	701a      	strb	r2, [r3, #0]
		buffer[index++] = subscribePacket->topicLength & 0xFF;
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	8899      	ldrh	r1, [r3, #4]
 80044dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044de:	1c5a      	adds	r2, r3, #1
 80044e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044e2:	461a      	mov	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4413      	add	r3, r2
 80044e8:	b2ca      	uxtb	r2, r1
 80044ea:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<subscribePacket->topicLength;i++)
 80044ec:	2300      	movs	r3, #0
 80044ee:	857b      	strh	r3, [r7, #42]	; 0x2a
 80044f0:	e013      	b.n	800451a <mqtt_encode_packet+0x216>
		{
			if(i == MAX_LENGTH_OF_TOPIC_NAME)
 80044f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80044f4:	2b32      	cmp	r3, #50	; 0x32
 80044f6:	d102      	bne.n	80044fe <mqtt_encode_packet+0x1fa>
				return -1;
 80044f8:	f04f 33ff 	mov.w	r3, #4294967295
 80044fc:	e08e      	b.n	800461c <mqtt_encode_packet+0x318>
			buffer[index++] = subscribePacket->topic[i];
 80044fe:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8004500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004502:	1c59      	adds	r1, r3, #1
 8004504:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004506:	4619      	mov	r1, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	440b      	add	r3, r1
 800450c:	69b9      	ldr	r1, [r7, #24]
 800450e:	440a      	add	r2, r1
 8004510:	7992      	ldrb	r2, [r2, #6]
 8004512:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<subscribePacket->topicLength;i++)
 8004514:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004516:	3301      	adds	r3, #1
 8004518:	857b      	strh	r3, [r7, #42]	; 0x2a
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	889b      	ldrh	r3, [r3, #4]
 800451e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8004520:	429a      	cmp	r2, r3
 8004522:	d3e6      	bcc.n	80044f2 <mqtt_encode_packet+0x1ee>
		}

		buffer[index++] = subscribePacket->Qos;
 8004524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	62fa      	str	r2, [r7, #44]	; 0x2c
 800452a:	461a      	mov	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4413      	add	r3, r2
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8004536:	701a      	strb	r2, [r3, #0]

		return index;
 8004538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453a:	e06f      	b.n	800461c <mqtt_encode_packet+0x318>


	}
	else if(packetType == PUBLISH_PACKET)
 800453c:	79fb      	ldrb	r3, [r7, #7]
 800453e:	2b02      	cmp	r3, #2
 8004540:	d16a      	bne.n	8004618 <mqtt_encode_packet+0x314>
	{
		int32_t index = 0;
 8004542:	2300      	movs	r3, #0
 8004544:	627b      	str	r3, [r7, #36]	; 0x24

		MQTT_Publish_Packet *publishPacket = (MQTT_Publish_Packet*)packet;
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	61fb      	str	r3, [r7, #28]

		buffer[index++] = publishPacket->publishPacketByte;
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	627a      	str	r2, [r7, #36]	; 0x24
 8004550:	461a      	mov	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4413      	add	r3, r2
 8004556:	69fa      	ldr	r2, [r7, #28]
 8004558:	7812      	ldrb	r2, [r2, #0]
 800455a:	701a      	strb	r2, [r3, #0]
		buffer[index++] = publishPacket->remainLength;
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	1c5a      	adds	r2, r3, #1
 8004560:	627a      	str	r2, [r7, #36]	; 0x24
 8004562:	461a      	mov	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4413      	add	r3, r2
 8004568:	69fa      	ldr	r2, [r7, #28]
 800456a:	7852      	ldrb	r2, [r2, #1]
 800456c:	701a      	strb	r2, [r3, #0]
		buffer[index++] = publishPacket->topicLength >> 8;
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	885b      	ldrh	r3, [r3, #2]
 8004572:	0a1b      	lsrs	r3, r3, #8
 8004574:	b299      	uxth	r1, r3
 8004576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	627a      	str	r2, [r7, #36]	; 0x24
 800457c:	461a      	mov	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	4413      	add	r3, r2
 8004582:	b2ca      	uxtb	r2, r1
 8004584:	701a      	strb	r2, [r3, #0]
		buffer[index++] = publishPacket->topicLength & 0xFF;
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	8859      	ldrh	r1, [r3, #2]
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	1c5a      	adds	r2, r3, #1
 800458e:	627a      	str	r2, [r7, #36]	; 0x24
 8004590:	461a      	mov	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4413      	add	r3, r2
 8004596:	b2ca      	uxtb	r2, r1
 8004598:	701a      	strb	r2, [r3, #0]

		for(uint16_t i=0;i<publishPacket->topicLength;i++)
 800459a:	2300      	movs	r3, #0
 800459c:	847b      	strh	r3, [r7, #34]	; 0x22
 800459e:	e013      	b.n	80045c8 <mqtt_encode_packet+0x2c4>
		{
			if(i == MAX_LENGTH_OF_TOPIC_NAME)
 80045a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80045a2:	2b32      	cmp	r3, #50	; 0x32
 80045a4:	d102      	bne.n	80045ac <mqtt_encode_packet+0x2a8>
				return -1;
 80045a6:	f04f 33ff 	mov.w	r3, #4294967295
 80045aa:	e037      	b.n	800461c <mqtt_encode_packet+0x318>

			buffer[index++] = publishPacket->topic[i];
 80045ac:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	1c59      	adds	r1, r3, #1
 80045b2:	6279      	str	r1, [r7, #36]	; 0x24
 80045b4:	4619      	mov	r1, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	440b      	add	r3, r1
 80045ba:	69f9      	ldr	r1, [r7, #28]
 80045bc:	440a      	add	r2, r1
 80045be:	7912      	ldrb	r2, [r2, #4]
 80045c0:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0;i<publishPacket->topicLength;i++)
 80045c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80045c4:	3301      	adds	r3, #1
 80045c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	885b      	ldrh	r3, [r3, #2]
 80045cc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d3e6      	bcc.n	80045a0 <mqtt_encode_packet+0x29c>
		}
		for(uint16_t i=0; i< strlen(publishPacket->message);i++)
 80045d2:	2300      	movs	r3, #0
 80045d4:	843b      	strh	r3, [r7, #32]
 80045d6:	e014      	b.n	8004602 <mqtt_encode_packet+0x2fe>
		{
			if(i == MAX_LENGTH_OF_TOPIC_MESSAGE)
 80045d8:	8c3b      	ldrh	r3, [r7, #32]
 80045da:	2b64      	cmp	r3, #100	; 0x64
 80045dc:	d102      	bne.n	80045e4 <mqtt_encode_packet+0x2e0>
				return -1;
 80045de:	f04f 33ff 	mov.w	r3, #4294967295
 80045e2:	e01b      	b.n	800461c <mqtt_encode_packet+0x318>

			buffer[index++] = publishPacket->message[i];
 80045e4:	8c3a      	ldrh	r2, [r7, #32]
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	1c59      	adds	r1, r3, #1
 80045ea:	6279      	str	r1, [r7, #36]	; 0x24
 80045ec:	4619      	mov	r1, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	440b      	add	r3, r1
 80045f2:	69f9      	ldr	r1, [r7, #28]
 80045f4:	440a      	add	r2, r1
 80045f6:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80045fa:	701a      	strb	r2, [r3, #0]
		for(uint16_t i=0; i< strlen(publishPacket->message);i++)
 80045fc:	8c3b      	ldrh	r3, [r7, #32]
 80045fe:	3301      	adds	r3, #1
 8004600:	843b      	strh	r3, [r7, #32]
 8004602:	8c3c      	ldrh	r4, [r7, #32]
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	3336      	adds	r3, #54	; 0x36
 8004608:	4618      	mov	r0, r3
 800460a:	f7fb fe17 	bl	800023c <strlen>
 800460e:	4603      	mov	r3, r0
 8004610:	429c      	cmp	r4, r3
 8004612:	d3e1      	bcc.n	80045d8 <mqtt_encode_packet+0x2d4>
		}
		return index;
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	e001      	b.n	800461c <mqtt_encode_packet+0x318>
	}

	return -1;
 8004618:	f04f 33ff 	mov.w	r3, #4294967295
}
 800461c:	4618      	mov	r0, r3
 800461e:	373c      	adds	r7, #60	; 0x3c
 8004620:	46bd      	mov	sp, r7
 8004622:	bd90      	pop	{r4, r7, pc}

08004624 <mqtt_connect_broker>:

Status mqtt_connect_broker(const char* ip,const char* port, const char* clientID){
 8004624:	b580      	push	{r7, lr}
 8004626:	b096      	sub	sp, #88	; 0x58
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
	static int isFirstCall = 0;
	static uint8_t packetBuffer[100] = {0};
	static int32_t numberOfBytes = 0;


	if(!isFirstCall){
 8004630:	4b42      	ldr	r3, [pc, #264]	; (800473c <mqtt_connect_broker+0x118>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d147      	bne.n	80046c8 <mqtt_connect_broker+0xa4>
		MQTT_Connect_Packet packet = {0};
 8004638:	f107 0314 	add.w	r3, r7, #20
 800463c:	2240      	movs	r2, #64	; 0x40
 800463e:	2100      	movs	r1, #0
 8004640:	4618      	mov	r0, r3
 8004642:	f01e f915 	bl	8022870 <memset>
		uint16_t lengthOfClientID = strlen(clientID);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fb fdf8 	bl	800023c <strlen>
 800464c:	4603      	mov	r3, r0
 800464e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		uint8_t remainLength = lengthOfClientID + 12;
 8004652:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004656:	b2db      	uxtb	r3, r3
 8004658:	330c      	adds	r3, #12
 800465a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

		packet.ConnectByte = 0x10;
 800465e:	2310      	movs	r3, #16
 8004660:	753b      	strb	r3, [r7, #20]
		packet.ConnectByte = 0x10;
 8004662:	2310      	movs	r3, #16
 8004664:	753b      	strb	r3, [r7, #20]
		packet.RemainLength = remainLength;
 8004666:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800466a:	757b      	strb	r3, [r7, #21]
		packet.ProtocolNameLength = 0x0004;
 800466c:	2304      	movs	r3, #4
 800466e:	82fb      	strh	r3, [r7, #22]
		strcpy(packet.ProtocolName,"MQTT");
 8004670:	f107 0314 	add.w	r3, r7, #20
 8004674:	3304      	adds	r3, #4
 8004676:	4a32      	ldr	r2, [pc, #200]	; (8004740 <mqtt_connect_broker+0x11c>)
 8004678:	e892 0003 	ldmia.w	r2, {r0, r1}
 800467c:	6018      	str	r0, [r3, #0]
 800467e:	3304      	adds	r3, #4
 8004680:	7019      	strb	r1, [r3, #0]
		packet.Level = 0x04;
 8004682:	2304      	movs	r3, #4
 8004684:	773b      	strb	r3, [r7, #28]
		packet.Flag = 0x02;
 8004686:	2302      	movs	r3, #2
 8004688:	777b      	strb	r3, [r7, #29]
		packet.KeepAlive = MQTT_KEEP_ALIVE;
 800468a:	233c      	movs	r3, #60	; 0x3c
 800468c:	83fb      	strh	r3, [r7, #30]
		packet.ClientIDLength = lengthOfClientID;
 800468e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004692:	843b      	strh	r3, [r7, #32]
		strcpy(packet.ClientID,clientID);
 8004694:	f107 0314 	add.w	r3, r7, #20
 8004698:	330e      	adds	r3, #14
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	4618      	mov	r0, r3
 800469e:	f01e fb00 	bl	8022ca2 <strcpy>

		numberOfBytes = mqtt_encode_packet(packetBuffer, &packet, CONNECT_PACKET);
 80046a2:	f107 0314 	add.w	r3, r7, #20
 80046a6:	2200      	movs	r2, #0
 80046a8:	4619      	mov	r1, r3
 80046aa:	4826      	ldr	r0, [pc, #152]	; (8004744 <mqtt_connect_broker+0x120>)
 80046ac:	f7ff fe2a 	bl	8004304 <mqtt_encode_packet>
 80046b0:	4603      	mov	r3, r0
 80046b2:	4a25      	ldr	r2, [pc, #148]	; (8004748 <mqtt_connect_broker+0x124>)
 80046b4:	6013      	str	r3, [r2, #0]

		if(numberOfBytes < 0)
 80046b6:	4b24      	ldr	r3, [pc, #144]	; (8004748 <mqtt_connect_broker+0x124>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	da01      	bge.n	80046c2 <mqtt_connect_broker+0x9e>
			return STATUS_ERROR;
 80046be:	2303      	movs	r3, #3
 80046c0:	e038      	b.n	8004734 <mqtt_connect_broker+0x110>

		isFirstCall = 1;
 80046c2:	4b1e      	ldr	r3, [pc, #120]	; (800473c <mqtt_connect_broker+0x118>)
 80046c4:	2201      	movs	r2, #1
 80046c6:	601a      	str	r2, [r3, #0]
	}

	static int state = 0;
	Status status = IDLE;
 80046c8:	2304      	movs	r3, #4
 80046ca:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	if(state == 0){
 80046ce:	4b1f      	ldr	r3, [pc, #124]	; (800474c <mqtt_connect_broker+0x128>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d113      	bne.n	80046fe <mqtt_connect_broker+0xda>
		status = Connect_TCP_Server(ip, port);
 80046d6:	68b9      	ldr	r1, [r7, #8]
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f7ff fc5f 	bl	8003f9c <Connect_TCP_Server>
 80046de:	4603      	mov	r3, r0
 80046e0:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
		if(status == STATUS_OK)
 80046e4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d105      	bne.n	80046f8 <mqtt_connect_broker+0xd4>
			state++;
 80046ec:	4b17      	ldr	r3, [pc, #92]	; (800474c <mqtt_connect_broker+0x128>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	3301      	adds	r3, #1
 80046f2:	4a16      	ldr	r2, [pc, #88]	; (800474c <mqtt_connect_broker+0x128>)
 80046f4:	6013      	str	r3, [r2, #0]
 80046f6:	e002      	b.n	80046fe <mqtt_connect_broker+0xda>
		else
			return status;
 80046f8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80046fc:	e01a      	b.n	8004734 <mqtt_connect_broker+0x110>
	}
	if(state == 1){
 80046fe:	4b13      	ldr	r3, [pc, #76]	; (800474c <mqtt_connect_broker+0x128>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d115      	bne.n	8004732 <mqtt_connect_broker+0x10e>
		status = Send_TCP_Bytes(packetBuffer, numberOfBytes);
 8004706:	4b10      	ldr	r3, [pc, #64]	; (8004748 <mqtt_connect_broker+0x124>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4619      	mov	r1, r3
 800470c:	480d      	ldr	r0, [pc, #52]	; (8004744 <mqtt_connect_broker+0x120>)
 800470e:	f7ff fcdd 	bl	80040cc <Send_TCP_Bytes>
 8004712:	4603      	mov	r3, r0
 8004714:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
		if(status == STATUS_OK){
 8004718:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800471c:	2b02      	cmp	r3, #2
 800471e:	d105      	bne.n	800472c <mqtt_connect_broker+0x108>
			state = 0;
 8004720:	4b0a      	ldr	r3, [pc, #40]	; (800474c <mqtt_connect_broker+0x128>)
 8004722:	2200      	movs	r2, #0
 8004724:	601a      	str	r2, [r3, #0]
			return status;
 8004726:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800472a:	e003      	b.n	8004734 <mqtt_connect_broker+0x110>
		}
		else
			return status;
 800472c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8004730:	e000      	b.n	8004734 <mqtt_connect_broker+0x110>
	}

	return STATUS_ERROR;
 8004732:	2303      	movs	r3, #3

}
 8004734:	4618      	mov	r0, r3
 8004736:	3758      	adds	r7, #88	; 0x58
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	20000384 	.word	0x20000384
 8004740:	080257c0 	.word	0x080257c0
 8004744:	20000388 	.word	0x20000388
 8004748:	200003ec 	.word	0x200003ec
 800474c:	200003f0 	.word	0x200003f0

08004750 <ringBuffer_init>:
 * @brief 	Initialize the ring buffer. Ring buffer is allocated after this function.
 * @param 	size parameter specifies the size of ring buffer.
 * @retval	RingBuffer typedef structure.
 */
RingBuffer* ringBuffer_init(uint32_t size)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
	RingBuffer* rBuf;

	rBuf = (RingBuffer*)malloc(1*sizeof(RingBuffer));
 8004758:	2010      	movs	r0, #16
 800475a:	f01e f86b 	bl	8022834 <malloc>
 800475e:	4603      	mov	r3, r0
 8004760:	60fb      	str	r3, [r7, #12]
	if(rBuf == NULL)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <ringBuffer_init+0x1c>
	{
		// Error
		return 0;
 8004768:	2300      	movs	r3, #0
 800476a:	e017      	b.n	800479c <ringBuffer_init+0x4c>
	}

	rBuf->size = size;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	609a      	str	r2, [r3, #8]
	rBuf->head = 0;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	601a      	str	r2, [r3, #0]
	rBuf->tail = 0;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	605a      	str	r2, [r3, #4]

	rBuf->buffer = (uint8_t*)calloc((size_t)size,sizeof(uint8_t));
 800477e:	2101      	movs	r1, #1
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f01d fa8f 	bl	8021ca4 <calloc>
 8004786:	4603      	mov	r3, r0
 8004788:	461a      	mov	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	60da      	str	r2, [r3, #12]
	if(rBuf->buffer == NULL)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <ringBuffer_init+0x4a>
		{
			// Error
			return 0;
 8004796:	2300      	movs	r3, #0
 8004798:	e000      	b.n	800479c <ringBuffer_init+0x4c>
		}

	return rBuf;
 800479a:	68fb      	ldr	r3, [r7, #12]
}
 800479c:	4618      	mov	r0, r3
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <ringBuffer_deInit>:
 * @brief 	De-initialize the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_deInit(RingBuffer* buffer)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
	if(buffer != NULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00b      	beq.n	80047ca <ringBuffer_deInit+0x26>
	{
		if(buffer->buffer != NULL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d004      	beq.n	80047c4 <ringBuffer_deInit+0x20>
		{
			free(buffer->buffer);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	4618      	mov	r0, r3
 80047c0:	f01e f840 	bl	8022844 <free>
		}
		free(buffer);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f01e f83d 	bl	8022844 <free>
	}
}
 80047ca:	bf00      	nop
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <ringBuffer_push>:
 * @param 	RingBuffer typedef structure.
 * @param 	data is an unsigned 8-bit integer variable to be pushed into the buffer.
 * @retval	None.
 */
void ringBuffer_push(RingBuffer* ringBuffer, uint8_t data)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
 80047da:	460b      	mov	r3, r1
 80047dc:	70fb      	strb	r3, [r7, #3]
	if(ringBuffer->head != (ringBuffer->size - 1))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	3b01      	subs	r3, #1
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d00c      	beq.n	8004806 <ringBuffer_push+0x34>
	{
		ringBuffer->buffer[ringBuffer->head] = data;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68da      	ldr	r2, [r3, #12]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4413      	add	r3, r2
 80047f6:	78fa      	ldrb	r2, [r7, #3]
 80047f8:	701a      	strb	r2, [r3, #0]
		ringBuffer->head += 1;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	1c5a      	adds	r2, r3, #1
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	601a      	str	r2, [r3, #0]
	else
	{
		ringBuffer->buffer[ringBuffer->head] = data;
		ringBuffer->head = 0;
	}
}
 8004804:	e009      	b.n	800481a <ringBuffer_push+0x48>
		ringBuffer->buffer[ringBuffer->head] = data;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68da      	ldr	r2, [r3, #12]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4413      	add	r3, r2
 8004810:	78fa      	ldrb	r2, [r7, #3]
 8004812:	701a      	strb	r2, [r3, #0]
		ringBuffer->head = 0;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	601a      	str	r2, [r3, #0]
}
 800481a:	bf00      	nop
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <ringBuffer_pop>:
 * @brief 	Read data from the buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	unsigned 8-bit integer data to be read from the buffer.
 */
uint8_t ringBuffer_pop(RingBuffer* ringBuffer)
{
 8004826:	b480      	push	{r7}
 8004828:	b085      	sub	sp, #20
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
	uint8_t data;

	if(ringBuffer->tail != (ringBuffer->size - 1))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	3b01      	subs	r3, #1
 8004838:	429a      	cmp	r2, r3
 800483a:	d00d      	beq.n	8004858 <ringBuffer_pop+0x32>
	{
		data = ringBuffer->buffer[ringBuffer->tail];
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	68da      	ldr	r2, [r3, #12]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	4413      	add	r3, r2
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail += 1;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	1c5a      	adds	r2, r3, #1
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	605a      	str	r2, [r3, #4]
		return data;
 8004854:	7bfb      	ldrb	r3, [r7, #15]
 8004856:	e00a      	b.n	800486e <ringBuffer_pop+0x48>
	}
	else
	{

		data = ringBuffer->buffer[ringBuffer->tail];
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68da      	ldr	r2, [r3, #12]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	4413      	add	r3, r2
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail = 0;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	605a      	str	r2, [r3, #4]
		return data;
 800486c:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 800486e:	4618      	mov	r0, r3
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <ringBuffer_flush>:
 * @brief 	Clear the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_flush(RingBuffer* ringBuffer)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b082      	sub	sp, #8
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
	memset(ringBuffer->buffer,(uint8_t)0x00,(size_t)ringBuffer->size);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68d8      	ldr	r0, [r3, #12]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	461a      	mov	r2, r3
 800488c:	2100      	movs	r1, #0
 800488e:	f01d ffef 	bl	8022870 <memset>
	ringBuffer->head = ringBuffer->tail = 0;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	605a      	str	r2, [r3, #4]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	601a      	str	r2, [r3, #0]
}
 80048a0:	bf00      	nop
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <ringBuffer_pushArray>:
 * @param 	RingBuffer typedef structure.
 * @param	data is an unsigned 8-bit data array to be written into the buffer.
 * @retval	None.
 */
void ringBuffer_pushArray(RingBuffer* ringBuffer, uint8_t* data)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
	 for(int i = 0; i<strlen((char*)data);i++)
 80048b2:	2300      	movs	r3, #0
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	e00a      	b.n	80048ce <ringBuffer_pushArray+0x26>
		 ringBuffer_push(ringBuffer, data[i]);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	4413      	add	r3, r2
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	4619      	mov	r1, r3
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7ff ff85 	bl	80047d2 <ringBuffer_push>
	 for(int i = 0; i<strlen((char*)data);i++)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	3301      	adds	r3, #1
 80048cc:	60fb      	str	r3, [r7, #12]
 80048ce:	6838      	ldr	r0, [r7, #0]
 80048d0:	f7fb fcb4 	bl	800023c <strlen>
 80048d4:	4602      	mov	r2, r0
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d8ed      	bhi.n	80048b8 <ringBuffer_pushArray+0x10>
}
 80048dc:	bf00      	nop
 80048de:	bf00      	nop
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <ringBuffer_lookFor>:
 * @param	data is an unsigned 8-bit array to be searched in the buffer.
 * @retval	1: data is available in the buffer.
 * @retval	0: data is not available in the buffer.
 */
uint32_t ringBuffer_lookFor(RingBuffer* ringBuffer, uint8_t* data)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b084      	sub	sp, #16
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
 80048ee:	6039      	str	r1, [r7, #0]
	char* str = strstr((char*)ringBuffer->buffer,(char*)data);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	6839      	ldr	r1, [r7, #0]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f01e ff38 	bl	802376c <strstr>
 80048fc:	60f8      	str	r0, [r7, #12]

	if(str != NULL)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d001      	beq.n	8004908 <ringBuffer_lookFor+0x22>
		return 1;
 8004904:	2301      	movs	r3, #1
 8004906:	e000      	b.n	800490a <ringBuffer_lookFor+0x24>
	else
		return 0;
 8004908:	2300      	movs	r3, #0

}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <ringBuffer_capacity>:
 * @brief 	Check the size of the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	Size of ring buffer.
 */
uint32_t ringBuffer_capacity(RingBuffer* ringBuffer)
{
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
	return ringBuffer->size;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
}
 800491e:	4618      	mov	r0, r3
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <_ZN14MockActualCall13withParameterERK12SimpleStringPKhj>:
    MockActualCall& withParameter(const SimpleString& name, double value) { return withDoubleParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, const char* value) { return withStringParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, void* value) { return withPointerParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, void (*value)()) { return withFunctionPointerParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, const void* value) { return withConstPointerParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, const unsigned char* value, size_t size) { return withMemoryBufferParameter(name, value, size); }
 800492a:	b590      	push	{r4, r7, lr}
 800492c:	b085      	sub	sp, #20
 800492e:	af00      	add	r7, sp, #0
 8004930:	60f8      	str	r0, [r7, #12]
 8004932:	60b9      	str	r1, [r7, #8]
 8004934:	607a      	str	r2, [r7, #4]
 8004936:	603b      	str	r3, [r7, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	334c      	adds	r3, #76	; 0x4c
 800493e:	681c      	ldr	r4, [r3, #0]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	68b9      	ldr	r1, [r7, #8]
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	47a0      	blx	r4
 800494a:	4603      	mov	r3, r0
 800494c:	4618      	mov	r0, r3
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	bd90      	pop	{r4, r7, pc}

08004954 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>:
    MockExpectedCall& withParameter(const SimpleString& name, double value, double tolerance) { return withDoubleParameter(name, value, tolerance); }
    MockExpectedCall& withParameter(const SimpleString& name, const char* value) { return withStringParameter(name, value); }
    MockExpectedCall& withParameter(const SimpleString& name, void* value) { return withPointerParameter(name, value); }
    MockExpectedCall& withParameter(const SimpleString& name, const void* value) { return withConstPointerParameter(name, value); }
    MockExpectedCall& withParameter(const SimpleString& name, void (*value)()) { return withFunctionPointerParameter(name, value); }
    MockExpectedCall& withParameter(const SimpleString& name, const unsigned char* value, size_t size) { return withMemoryBufferParameter(name, value, size); }
 8004954:	b590      	push	{r4, r7, lr}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
 8004960:	603b      	str	r3, [r7, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	335c      	adds	r3, #92	; 0x5c
 8004968:	681c      	ldr	r4, [r3, #0]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	68b9      	ldr	r1, [r7, #8]
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	47a0      	blx	r4
 8004974:	4603      	mov	r3, r0
 8004976:	4618      	mov	r0, r3
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	bd90      	pop	{r4, r7, pc}

0800497e <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group5setupEv>:
TEST_GROUP(RingBuffer_Test_Group)
{

	RingBuffer* testBuf;

	void setup()
 800497e:	b580      	push	{r7, lr}
 8004980:	b082      	sub	sp, #8
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
	{

	   testBuf = ringBuffer_init(50);
 8004986:	2032      	movs	r0, #50	; 0x32
 8004988:	f7ff fee2 	bl	8004750 <ringBuffer_init>
 800498c:	4602      	mov	r2, r0
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	605a      	str	r2, [r3, #4]

	}
 8004992:	bf00      	nop
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group8teardownEv>:

	void teardown()
 800499a:	b580      	push	{r7, lr}
 800499c:	b082      	sub	sp, #8
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
	{

		ringBuffer_deInit(testBuf);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff fefc 	bl	80047a4 <ringBuffer_deInit>
	}
 80049ac:	bf00      	nop
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>:
TEST_GROUP(RingBuffer_Test_Group)
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4618      	mov	r0, r3
 80049c0:	f011 fe80 	bl	80166c4 <_ZN5UtestC1Ev>
 80049c4:	4a03      	ldr	r2, [pc, #12]	; (80049d4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev+0x20>)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4618      	mov	r0, r3
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	0802ac8c 	.word	0x0802ac8c

080049d8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>:
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	4a05      	ldr	r2, [pc, #20]	; (80049f8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev+0x20>)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f011 fe7b 	bl	80166e4 <_ZN5UtestD1Ev>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4618      	mov	r0, r3
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	0802ac8c 	.word	0x0802ac8c

080049fc <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD0Ev>:
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f7ff ffe7 	bl	80049d8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004a0a:	2108      	movs	r1, #8
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f007 fe9d 	bl	800c74c <_ZdlPvj>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4618      	mov	r0, r3
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>:
};


TEST(RingBuffer_Test_Group, InitTest)
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	605a      	str	r2, [r3, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7ff ffbe 	bl	80049b4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004a38:	4a03      	ldr	r2, [pc, #12]	; (8004a48 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev+0x2c>)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4618      	mov	r0, r3
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	0802ac6c 	.word	0x0802ac6c

08004a4c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv>:
 8004a4c:	b590      	push	{r4, r7, lr}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	222c      	movs	r2, #44	; 0x2c
 8004a56:	4906      	ldr	r1, [pc, #24]	; (8004a70 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv+0x24>)
 8004a58:	2008      	movs	r0, #8
 8004a5a:	f007 fe63 	bl	800c724 <_ZnwjPKci>
 8004a5e:	4604      	mov	r4, r0
 8004a60:	4620      	mov	r0, r4
 8004a62:	f7ff ffdb 	bl	8004a1c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>
 8004a66:	4623      	mov	r3, r4
 8004a68:	4618      	mov	r0, r3
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd90      	pop	{r4, r7, pc}
 8004a70:	08025848 	.word	0x08025848

08004a74 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>:
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f010 fa3e 	bl	8014f00 <_ZN10UtestShellC1Ev>
 8004a84:	4a03      	ldr	r2, [pc, #12]	; (8004a94 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev+0x20>)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	601a      	str	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	0802abc0 	.word	0x0802abc0

08004a98 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv>:
{
 8004a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af04      	add	r7, sp, #16
 8004a9e:	6078      	str	r0, [r7, #4]

   LONGS_EQUAL(50,testBuf->size);
 8004aa0:	f011 fde6 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8004aa4:	4604      	mov	r4, r0
 8004aa6:	6823      	ldr	r3, [r4, #0]
 8004aa8:	3338      	adds	r3, #56	; 0x38
 8004aaa:	681d      	ldr	r5, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	461e      	mov	r6, r3
 8004ab4:	f011 fdec 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	9302      	str	r3, [sp, #8]
 8004abc:	232f      	movs	r3, #47	; 0x2f
 8004abe:	9301      	str	r3, [sp, #4]
 8004ac0:	4b2a      	ldr	r3, [pc, #168]	; (8004b6c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	4b2a      	ldr	r3, [pc, #168]	; (8004b70 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd8>)
 8004ac6:	4632      	mov	r2, r6
 8004ac8:	2132      	movs	r1, #50	; 0x32
 8004aca:	4620      	mov	r0, r4
 8004acc:	47a8      	blx	r5
   CHECK(testBuf->buffer != NULL);
 8004ace:	f011 fdcf 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8004ad2:	4604      	mov	r4, r0
 8004ad4:	6823      	ldr	r3, [r4, #0]
 8004ad6:	3320      	adds	r3, #32
 8004ad8:	681d      	ldr	r5, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	bf14      	ite	ne
 8004ae4:	2301      	movne	r3, #1
 8004ae6:	2300      	moveq	r3, #0
 8004ae8:	b2de      	uxtb	r6, r3
 8004aea:	f011 fdd1 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004aee:	4603      	mov	r3, r0
 8004af0:	9303      	str	r3, [sp, #12]
 8004af2:	2330      	movs	r3, #48	; 0x30
 8004af4:	9302      	str	r3, [sp, #8]
 8004af6:	4b1d      	ldr	r3, [pc, #116]	; (8004b6c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004af8:	9301      	str	r3, [sp, #4]
 8004afa:	2300      	movs	r3, #0
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	4b1d      	ldr	r3, [pc, #116]	; (8004b74 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xdc>)
 8004b00:	4a1d      	ldr	r2, [pc, #116]	; (8004b78 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe0>)
 8004b02:	4631      	mov	r1, r6
 8004b04:	4620      	mov	r0, r4
 8004b06:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->head);
 8004b08:	f011 fdb2 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8004b0c:	4604      	mov	r4, r0
 8004b0e:	6823      	ldr	r3, [r4, #0]
 8004b10:	3338      	adds	r3, #56	; 0x38
 8004b12:	681d      	ldr	r5, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	461e      	mov	r6, r3
 8004b1c:	f011 fdb8 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004b20:	4603      	mov	r3, r0
 8004b22:	9302      	str	r3, [sp, #8]
 8004b24:	2331      	movs	r3, #49	; 0x31
 8004b26:	9301      	str	r3, [sp, #4]
 8004b28:	4b10      	ldr	r3, [pc, #64]	; (8004b6c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	4b13      	ldr	r3, [pc, #76]	; (8004b7c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe4>)
 8004b2e:	4632      	mov	r2, r6
 8004b30:	2100      	movs	r1, #0
 8004b32:	4620      	mov	r0, r4
 8004b34:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->tail);
 8004b36:	f011 fd9b 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8004b3a:	4604      	mov	r4, r0
 8004b3c:	6823      	ldr	r3, [r4, #0]
 8004b3e:	3338      	adds	r3, #56	; 0x38
 8004b40:	681d      	ldr	r5, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	461e      	mov	r6, r3
 8004b4a:	f011 fda1 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	9302      	str	r3, [sp, #8]
 8004b52:	2332      	movs	r3, #50	; 0x32
 8004b54:	9301      	str	r3, [sp, #4]
 8004b56:	4b05      	ldr	r3, [pc, #20]	; (8004b6c <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	4b09      	ldr	r3, [pc, #36]	; (8004b80 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe8>)
 8004b5c:	4632      	mov	r2, r6
 8004b5e:	2100      	movs	r1, #0
 8004b60:	4620      	mov	r0, r4
 8004b62:	47a8      	blx	r5

}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b6c:	08025848 	.word	0x08025848
 8004b70:	08025868 	.word	0x08025868
 8004b74:	08025890 	.word	0x08025890
 8004b78:	080258a8 	.word	0x080258a8
 8004b7c:	080258b0 	.word	0x080258b0
 8004b80:	080258d8 	.word	0x080258d8

08004b84 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushDataTests)
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	605a      	str	r2, [r3, #4]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7ff ff0a 	bl	80049b4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004ba0:	4a03      	ldr	r2, [pc, #12]	; (8004bb0 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev+0x2c>)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3708      	adds	r7, #8
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	0802aba0 	.word	0x0802aba0

08004bb4 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv>:
 8004bb4:	b590      	push	{r4, r7, lr}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	2236      	movs	r2, #54	; 0x36
 8004bbe:	4906      	ldr	r1, [pc, #24]	; (8004bd8 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv+0x24>)
 8004bc0:	2008      	movs	r0, #8
 8004bc2:	f007 fdaf 	bl	800c724 <_ZnwjPKci>
 8004bc6:	4604      	mov	r4, r0
 8004bc8:	4620      	mov	r0, r4
 8004bca:	f7ff ffdb 	bl	8004b84 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>
 8004bce:	4623      	mov	r3, r4
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd90      	pop	{r4, r7, pc}
 8004bd8:	08025848 	.word	0x08025848

08004bdc <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>:
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f010 f98a 	bl	8014f00 <_ZN10UtestShellC1Ev>
 8004bec:	4a03      	ldr	r2, [pc, #12]	; (8004bfc <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev+0x20>)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	601a      	str	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3708      	adds	r7, #8
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	0802aaf4 	.word	0x0802aaf4

08004c00 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv>:
{
 8004c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c02:	b087      	sub	sp, #28
 8004c04:	af04      	add	r7, sp, #16
 8004c06:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0x45);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2145      	movs	r1, #69	; 0x45
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7ff fddf 	bl	80047d2 <ringBuffer_push>
	LONGS_EQUAL(0x45,testBuf->buffer[0]);
 8004c14:	f011 fd2c 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8004c18:	4604      	mov	r4, r0
 8004c1a:	6823      	ldr	r3, [r4, #0]
 8004c1c:	3338      	adds	r3, #56	; 0x38
 8004c1e:	681d      	ldr	r5, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	461e      	mov	r6, r3
 8004c2a:	f011 fd31 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	9302      	str	r3, [sp, #8]
 8004c32:	2339      	movs	r3, #57	; 0x39
 8004c34:	9301      	str	r3, [sp, #4]
 8004c36:	4b15      	ldr	r3, [pc, #84]	; (8004c8c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	4b15      	ldr	r3, [pc, #84]	; (8004c90 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x90>)
 8004c3c:	4632      	mov	r2, r6
 8004c3e:	2145      	movs	r1, #69	; 0x45
 8004c40:	4620      	mov	r0, r4
 8004c42:	47a8      	blx	r5

	ringBuffer_push(testBuf, 0x10);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2110      	movs	r1, #16
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff fdc1 	bl	80047d2 <ringBuffer_push>
	LONGS_EQUAL(0x10,testBuf->buffer[1]);
 8004c50:	f011 fd0e 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8004c54:	4604      	mov	r4, r0
 8004c56:	6823      	ldr	r3, [r4, #0]
 8004c58:	3338      	adds	r3, #56	; 0x38
 8004c5a:	681d      	ldr	r5, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	3301      	adds	r3, #1
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	461e      	mov	r6, r3
 8004c68:	f011 fd12 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	9302      	str	r3, [sp, #8]
 8004c70:	233c      	movs	r3, #60	; 0x3c
 8004c72:	9301      	str	r3, [sp, #4]
 8004c74:	4b05      	ldr	r3, [pc, #20]	; (8004c8c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	4b06      	ldr	r3, [pc, #24]	; (8004c94 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x94>)
 8004c7a:	4632      	mov	r2, r6
 8004c7c:	2110      	movs	r1, #16
 8004c7e:	4620      	mov	r0, r4
 8004c80:	47a8      	blx	r5

}
 8004c82:	bf00      	nop
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	08025848 	.word	0x08025848
 8004c90:	08025900 	.word	0x08025900
 8004c94:	08025930 	.word	0x08025930

08004c98 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	605a      	str	r2, [r3, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7ff fe80 	bl	80049b4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004cb4:	4a03      	ldr	r2, [pc, #12]	; (8004cc4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev+0x2c>)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3708      	adds	r7, #8
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	0802aad4 	.word	0x0802aad4

08004cc8 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv>:
 8004cc8:	b590      	push	{r4, r7, lr}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	2240      	movs	r2, #64	; 0x40
 8004cd2:	4906      	ldr	r1, [pc, #24]	; (8004cec <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv+0x24>)
 8004cd4:	2008      	movs	r0, #8
 8004cd6:	f007 fd25 	bl	800c724 <_ZnwjPKci>
 8004cda:	4604      	mov	r4, r0
 8004cdc:	4620      	mov	r0, r4
 8004cde:	f7ff ffdb 	bl	8004c98 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>
 8004ce2:	4623      	mov	r3, r4
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd90      	pop	{r4, r7, pc}
 8004cec:	08025848 	.word	0x08025848

08004cf0 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>:
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f010 f900 	bl	8014f00 <_ZN10UtestShellC1Ev>
 8004d00:	4a03      	ldr	r2, [pc, #12]	; (8004d10 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev+0x20>)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	601a      	str	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3708      	adds	r7, #8
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	0802aa28 	.word	0x0802aa28

08004d14 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv>:
{
 8004d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d16:	b089      	sub	sp, #36	; 0x24
 8004d18:	af04      	add	r7, sp, #16
 8004d1a:	6078      	str	r0, [r7, #4]
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	3b01      	subs	r3, #1
 8004d32:	429a      	cmp	r2, r3
 8004d34:	bf0c      	ite	eq
 8004d36:	2301      	moveq	r3, #1
 8004d38:	2300      	movne	r3, #0
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	4293      	cmp	r3, r2
 8004d42:	da0b      	bge.n	8004d5c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x48>
	{
		ringBuffer_push(testBuf, (uint8_t)i);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	b2d2      	uxtb	r2, r2
 8004d4c:	4611      	mov	r1, r2
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff fd3f 	bl	80047d2 <ringBuffer_push>
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	3301      	adds	r3, #1
 8004d58:	60fb      	str	r3, [r7, #12]
 8004d5a:	e7e3      	b.n	8004d24 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x10>
	}

	ringBuffer_push(testBuf, 0xFF);			// This data must be the first element of buffer.
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	21ff      	movs	r1, #255	; 0xff
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7ff fd35 	bl	80047d2 <ringBuffer_push>
	LONGS_EQUAL(0xFF,testBuf->buffer[0]);
 8004d68:	f011 fc82 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8004d6c:	4604      	mov	r4, r0
 8004d6e:	6823      	ldr	r3, [r4, #0]
 8004d70:	3338      	adds	r3, #56	; 0x38
 8004d72:	681d      	ldr	r5, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	461e      	mov	r6, r3
 8004d7e:	f011 fc87 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004d82:	4603      	mov	r3, r0
 8004d84:	9302      	str	r3, [sp, #8]
 8004d86:	2348      	movs	r3, #72	; 0x48
 8004d88:	9301      	str	r3, [sp, #4]
 8004d8a:	4b05      	ldr	r3, [pc, #20]	; (8004da0 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x8c>)
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	4b05      	ldr	r3, [pc, #20]	; (8004da4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x90>)
 8004d90:	4632      	mov	r2, r6
 8004d92:	21ff      	movs	r1, #255	; 0xff
 8004d94:	4620      	mov	r0, r4
 8004d96:	47a8      	blx	r5
}
 8004d98:	bf00      	nop
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004da0:	08025848 	.word	0x08025848
 8004da4:	08025960 	.word	0x08025960

08004da8 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopDataTests)
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	605a      	str	r2, [r3, #4]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7ff fdf8 	bl	80049b4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004dc4:	4a03      	ldr	r2, [pc, #12]	; (8004dd4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev+0x2c>)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	0802aa08 	.word	0x0802aa08

08004dd8 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv>:
 8004dd8:	b590      	push	{r4, r7, lr}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	224b      	movs	r2, #75	; 0x4b
 8004de2:	4906      	ldr	r1, [pc, #24]	; (8004dfc <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv+0x24>)
 8004de4:	2008      	movs	r0, #8
 8004de6:	f007 fc9d 	bl	800c724 <_ZnwjPKci>
 8004dea:	4604      	mov	r4, r0
 8004dec:	4620      	mov	r0, r4
 8004dee:	f7ff ffdb 	bl	8004da8 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>
 8004df2:	4623      	mov	r3, r4
 8004df4:	4618      	mov	r0, r3
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd90      	pop	{r4, r7, pc}
 8004dfc:	08025848 	.word	0x08025848

08004e00 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>:
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f010 f878 	bl	8014f00 <_ZN10UtestShellC1Ev>
 8004e10:	4a03      	ldr	r2, [pc, #12]	; (8004e20 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev+0x20>)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	0802a95c 	.word	0x0802a95c

08004e24 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv>:
{
 8004e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e26:	b089      	sub	sp, #36	; 0x24
 8004e28:	af04      	add	r7, sp, #16
 8004e2a:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0xFF);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	21ff      	movs	r1, #255	; 0xff
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7ff fccd 	bl	80047d2 <ringBuffer_push>
	uint8_t data = ringBuffer_pop(testBuf); // 0xFF
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff fcf2 	bl	8004826 <ringBuffer_pop>
 8004e42:	4603      	mov	r3, r0
 8004e44:	73fb      	strb	r3, [r7, #15]

	LONGS_EQUAL(0xFF,data);
 8004e46:	f011 fc13 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	6823      	ldr	r3, [r4, #0]
 8004e4e:	3338      	adds	r3, #56	; 0x38
 8004e50:	681d      	ldr	r5, [r3, #0]
 8004e52:	7bfe      	ldrb	r6, [r7, #15]
 8004e54:	f011 fc1c 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	9302      	str	r3, [sp, #8]
 8004e5c:	2350      	movs	r3, #80	; 0x50
 8004e5e:	9301      	str	r3, [sp, #4]
 8004e60:	4b05      	ldr	r3, [pc, #20]	; (8004e78 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x54>)
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	4b05      	ldr	r3, [pc, #20]	; (8004e7c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x58>)
 8004e66:	4632      	mov	r2, r6
 8004e68:	21ff      	movs	r1, #255	; 0xff
 8004e6a:	4620      	mov	r0, r4
 8004e6c:	47a8      	blx	r5

}
 8004e6e:	bf00      	nop
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e76:	bf00      	nop
 8004e78:	08025848 	.word	0x08025848
 8004e7c:	08025990 	.word	0x08025990

08004e80 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	605a      	str	r2, [r3, #4]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7ff fd8c 	bl	80049b4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004e9c:	4a03      	ldr	r2, [pc, #12]	; (8004eac <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev+0x2c>)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	0802a93c 	.word	0x0802a93c

08004eb0 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv>:
 8004eb0:	b590      	push	{r4, r7, lr}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	2254      	movs	r2, #84	; 0x54
 8004eba:	4906      	ldr	r1, [pc, #24]	; (8004ed4 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv+0x24>)
 8004ebc:	2008      	movs	r0, #8
 8004ebe:	f007 fc31 	bl	800c724 <_ZnwjPKci>
 8004ec2:	4604      	mov	r4, r0
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	f7ff ffdb 	bl	8004e80 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>
 8004eca:	4623      	mov	r3, r4
 8004ecc:	4618      	mov	r0, r3
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd90      	pop	{r4, r7, pc}
 8004ed4:	08025848 	.word	0x08025848

08004ed8 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>:
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f010 f80c 	bl	8014f00 <_ZN10UtestShellC1Ev>
 8004ee8:	4a03      	ldr	r2, [pc, #12]	; (8004ef8 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev+0x20>)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	0802a890 	.word	0x0802a890

08004efc <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv>:
{
 8004efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004efe:	b089      	sub	sp, #36	; 0x24
 8004f00:	af04      	add	r7, sp, #16
 8004f02:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 8004f04:	2300      	movs	r3, #0
 8004f06:	72fb      	strb	r3, [r7, #11]

	ringBuffer_push(testBuf, 0xAA);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	21aa      	movs	r1, #170	; 0xaa
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7ff fc5f 	bl	80047d2 <ringBuffer_push>

	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	bf0c      	ite	eq
 8004f2e:	2301      	moveq	r3, #1
 8004f30:	2300      	movne	r3, #0
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	461a      	mov	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	da0a      	bge.n	8004f52 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x56>
	{
		data = ringBuffer_pop(testBuf);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7ff fc70 	bl	8004826 <ringBuffer_pop>
 8004f46:	4603      	mov	r3, r0
 8004f48:	72fb      	strb	r3, [r7, #11]
	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	60fb      	str	r3, [r7, #12]
 8004f50:	e7e4      	b.n	8004f1c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x20>
	}

	data = ringBuffer_pop(testBuf);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7ff fc65 	bl	8004826 <ringBuffer_pop>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	72fb      	strb	r3, [r7, #11]

	LONGS_EQUAL(0xAA,data);
 8004f60:	f011 fb86 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8004f64:	4604      	mov	r4, r0
 8004f66:	6823      	ldr	r3, [r4, #0]
 8004f68:	3338      	adds	r3, #56	; 0x38
 8004f6a:	681d      	ldr	r5, [r3, #0]
 8004f6c:	7afe      	ldrb	r6, [r7, #11]
 8004f6e:	f011 fb8f 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004f72:	4603      	mov	r3, r0
 8004f74:	9302      	str	r3, [sp, #8]
 8004f76:	2361      	movs	r3, #97	; 0x61
 8004f78:	9301      	str	r3, [sp, #4]
 8004f7a:	4b05      	ldr	r3, [pc, #20]	; (8004f90 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x94>)
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x98>)
 8004f80:	4632      	mov	r2, r6
 8004f82:	21aa      	movs	r1, #170	; 0xaa
 8004f84:	4620      	mov	r0, r4
 8004f86:	47a8      	blx	r5
}
 8004f88:	bf00      	nop
 8004f8a:	3714      	adds	r7, #20
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f90:	08025848 	.word	0x08025848
 8004f94:	080259b0 	.word	0x080259b0

08004f98 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferFlushTest)
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	605a      	str	r2, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7ff fd00 	bl	80049b4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004fb4:	4a03      	ldr	r2, [pc, #12]	; (8004fc4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev+0x2c>)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	0802a870 	.word	0x0802a870

08004fc8 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv>:
 8004fc8:	b590      	push	{r4, r7, lr}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	2264      	movs	r2, #100	; 0x64
 8004fd2:	4906      	ldr	r1, [pc, #24]	; (8004fec <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv+0x24>)
 8004fd4:	2008      	movs	r0, #8
 8004fd6:	f007 fba5 	bl	800c724 <_ZnwjPKci>
 8004fda:	4604      	mov	r4, r0
 8004fdc:	4620      	mov	r0, r4
 8004fde:	f7ff ffdb 	bl	8004f98 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>
 8004fe2:	4623      	mov	r3, r4
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd90      	pop	{r4, r7, pc}
 8004fec:	08025848 	.word	0x08025848

08004ff0 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>:
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f00f ff80 	bl	8014f00 <_ZN10UtestShellC1Ev>
 8005000:	4a03      	ldr	r2, [pc, #12]	; (8005010 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev+0x20>)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4618      	mov	r0, r3
 800500a:	3708      	adds	r7, #8
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	0802a7c4 	.word	0x0802a7c4

08005014 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv>:
{
 8005014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005016:	b089      	sub	sp, #36	; 0x24
 8005018:	af04      	add	r7, sp, #16
 800501a:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 800501c:	2300      	movs	r3, #0
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	429a      	cmp	r2, r3
 800502a:	d20b      	bcs.n	8005044 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0x30>
	{
		ringBuffer_push(testBuf,(uint8_t)i);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	b2d2      	uxtb	r2, r2
 8005034:	4611      	mov	r1, r2
 8005036:	4618      	mov	r0, r3
 8005038:	f7ff fbcb 	bl	80047d2 <ringBuffer_push>
	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	3301      	adds	r3, #1
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	e7ed      	b.n	8005020 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xc>
	}
	LONGS_EQUAL(49,testBuf->buffer[testBuf->size - 1]);
 8005044:	f011 fb14 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8005048:	4604      	mov	r4, r0
 800504a:	6823      	ldr	r3, [r4, #0]
 800504c:	3338      	adds	r3, #56	; 0x38
 800504e:	681d      	ldr	r5, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	68da      	ldr	r2, [r3, #12]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	3b01      	subs	r3, #1
 800505e:	4413      	add	r3, r2
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	461e      	mov	r6, r3
 8005064:	f011 fb14 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005068:	4603      	mov	r3, r0
 800506a:	9302      	str	r3, [sp, #8]
 800506c:	236b      	movs	r3, #107	; 0x6b
 800506e:	9301      	str	r3, [sp, #4]
 8005070:	4b24      	ldr	r3, [pc, #144]	; (8005104 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	4b24      	ldr	r3, [pc, #144]	; (8005108 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf4>)
 8005076:	4632      	mov	r2, r6
 8005078:	2131      	movs	r1, #49	; 0x31
 800507a:	4620      	mov	r0, r4
 800507c:	47a8      	blx	r5

	ringBuffer_flush(testBuf);  // clear the buffer
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	4618      	mov	r0, r3
 8005084:	f7ff fbf9 	bl	800487a <ringBuffer_flush>

	LONGS_EQUAL(0,testBuf->buffer[testBuf->size - 1]);
 8005088:	f011 faf2 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 800508c:	4604      	mov	r4, r0
 800508e:	6823      	ldr	r3, [r4, #0]
 8005090:	3338      	adds	r3, #56	; 0x38
 8005092:	681d      	ldr	r5, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	3b01      	subs	r3, #1
 80050a2:	4413      	add	r3, r2
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	461e      	mov	r6, r3
 80050a8:	f011 faf2 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80050ac:	4603      	mov	r3, r0
 80050ae:	9302      	str	r3, [sp, #8]
 80050b0:	236f      	movs	r3, #111	; 0x6f
 80050b2:	9301      	str	r3, [sp, #4]
 80050b4:	4b13      	ldr	r3, [pc, #76]	; (8005104 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	4b14      	ldr	r3, [pc, #80]	; (800510c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf8>)
 80050ba:	4632      	mov	r2, r6
 80050bc:	2100      	movs	r1, #0
 80050be:	4620      	mov	r0, r4
 80050c0:	47a8      	blx	r5
	LONGS_EQUAL(0,testBuf->buffer[testBuf->size/2]);    // check random value  (buffer[25]);
 80050c2:	f011 fad5 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 80050c6:	4604      	mov	r4, r0
 80050c8:	6823      	ldr	r3, [r4, #0]
 80050ca:	3338      	adds	r3, #56	; 0x38
 80050cc:	681d      	ldr	r5, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	68da      	ldr	r2, [r3, #12]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	085b      	lsrs	r3, r3, #1
 80050dc:	4413      	add	r3, r2
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	461e      	mov	r6, r3
 80050e2:	f011 fad5 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80050e6:	4603      	mov	r3, r0
 80050e8:	9302      	str	r3, [sp, #8]
 80050ea:	2370      	movs	r3, #112	; 0x70
 80050ec:	9301      	str	r3, [sp, #4]
 80050ee:	4b05      	ldr	r3, [pc, #20]	; (8005104 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	4b07      	ldr	r3, [pc, #28]	; (8005110 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xfc>)
 80050f4:	4632      	mov	r2, r6
 80050f6:	2100      	movs	r1, #0
 80050f8:	4620      	mov	r0, r4
 80050fa:	47a8      	blx	r5
//	for(uint32_t i = 0;i < testBuf->size;i++)  // check all the elements of the buffer
//	{
//		LONGS_EQUAL(0,testBuf->buffer[i]);
//	}

}
 80050fc:	bf00      	nop
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005104:	08025848 	.word	0x08025848
 8005108:	080259d0 	.word	0x080259d0
 800510c:	08025a0c 	.word	0x08025a0c
 8005110:	08025a48 	.word	0x08025a48

08005114 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushArrayTest)
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	605a      	str	r2, [r3, #4]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4618      	mov	r0, r3
 800512c:	f7ff fc42 	bl	80049b4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8005130:	4a03      	ldr	r2, [pc, #12]	; (8005140 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev+0x2c>)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4618      	mov	r0, r3
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	0802a7a4 	.word	0x0802a7a4

08005144 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv>:
 8005144:	b590      	push	{r4, r7, lr}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	2279      	movs	r2, #121	; 0x79
 800514e:	4906      	ldr	r1, [pc, #24]	; (8005168 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv+0x24>)
 8005150:	2008      	movs	r0, #8
 8005152:	f007 fae7 	bl	800c724 <_ZnwjPKci>
 8005156:	4604      	mov	r4, r0
 8005158:	4620      	mov	r0, r4
 800515a:	f7ff ffdb 	bl	8005114 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>
 800515e:	4623      	mov	r3, r4
 8005160:	4618      	mov	r0, r3
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	bd90      	pop	{r4, r7, pc}
 8005168:	08025848 	.word	0x08025848

0800516c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>:
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4618      	mov	r0, r3
 8005178:	f00f fec2 	bl	8014f00 <_ZN10UtestShellC1Ev>
 800517c:	4a03      	ldr	r2, [pc, #12]	; (800518c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev+0x20>)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	601a      	str	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4618      	mov	r0, r3
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	0802a6f8 	.word	0x0802a6f8

08005190 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv>:
{
 8005190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005192:	b087      	sub	sp, #28
 8005194:	af04      	add	r7, sp, #16
 8005196:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Test");
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	490e      	ldr	r1, [pc, #56]	; (80051d8 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 800519e:	4618      	mov	r0, r3
 80051a0:	f7ff fb82 	bl	80048a8 <ringBuffer_pushArray>

	STRCMP_EQUAL("Test",(char*)testBuf->buffer);
 80051a4:	f011 fa64 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 80051a8:	4604      	mov	r4, r0
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	3324      	adds	r3, #36	; 0x24
 80051ae:	681d      	ldr	r5, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	68de      	ldr	r6, [r3, #12]
 80051b6:	f011 fa6b 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80051ba:	4603      	mov	r3, r0
 80051bc:	9302      	str	r3, [sp, #8]
 80051be:	237d      	movs	r3, #125	; 0x7d
 80051c0:	9301      	str	r3, [sp, #4]
 80051c2:	4b06      	ldr	r3, [pc, #24]	; (80051dc <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x4c>)
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	2300      	movs	r3, #0
 80051c8:	4632      	mov	r2, r6
 80051ca:	4903      	ldr	r1, [pc, #12]	; (80051d8 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 80051cc:	4620      	mov	r0, r4
 80051ce:	47a8      	blx	r5
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051d8:	08025a80 	.word	0x08025a80
 80051dc:	08025848 	.word	0x08025848

080051e0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, LookForTest)
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	605a      	str	r2, [r3, #4]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7ff fbdc 	bl	80049b4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80051fc:	4a03      	ldr	r2, [pc, #12]	; (800520c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev+0x2c>)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4618      	mov	r0, r3
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	0802a6d8 	.word	0x0802a6d8

08005210 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv>:
 8005210:	b590      	push	{r4, r7, lr}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	2280      	movs	r2, #128	; 0x80
 800521a:	4906      	ldr	r1, [pc, #24]	; (8005234 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv+0x24>)
 800521c:	2008      	movs	r0, #8
 800521e:	f007 fa81 	bl	800c724 <_ZnwjPKci>
 8005222:	4604      	mov	r4, r0
 8005224:	4620      	mov	r0, r4
 8005226:	f7ff ffdb 	bl	80051e0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>
 800522a:	4623      	mov	r3, r4
 800522c:	4618      	mov	r0, r3
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	bd90      	pop	{r4, r7, pc}
 8005234:	08025848 	.word	0x08025848

08005238 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>:
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4618      	mov	r0, r3
 8005244:	f00f fe5c 	bl	8014f00 <_ZN10UtestShellC1Ev>
 8005248:	4a03      	ldr	r2, [pc, #12]	; (8005258 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev+0x20>)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	601a      	str	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4618      	mov	r0, r3
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	0802a62c 	.word	0x0802a62c

0800525c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv>:
{
 800525c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005260:	b08a      	sub	sp, #40	; 0x28
 8005262:	af04      	add	r7, sp, #16
 8005264:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Hello World");
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	494e      	ldr	r1, [pc, #312]	; (80053a4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 800526c:	4618      	mov	r0, r3
 800526e:	f7ff fb1b 	bl	80048a8 <ringBuffer_pushArray>

	STRCMP_EQUAL("Hello World",(char*)testBuf->buffer);
 8005272:	f011 f9fd 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8005276:	4604      	mov	r4, r0
 8005278:	6823      	ldr	r3, [r4, #0]
 800527a:	3324      	adds	r3, #36	; 0x24
 800527c:	681d      	ldr	r5, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	68de      	ldr	r6, [r3, #12]
 8005284:	f011 fa04 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005288:	4603      	mov	r3, r0
 800528a:	9302      	str	r3, [sp, #8]
 800528c:	2384      	movs	r3, #132	; 0x84
 800528e:	9301      	str	r3, [sp, #4]
 8005290:	4b45      	ldr	r3, [pc, #276]	; (80053a8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	2300      	movs	r3, #0
 8005296:	4632      	mov	r2, r6
 8005298:	4942      	ldr	r1, [pc, #264]	; (80053a4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 800529a:	4620      	mov	r0, r4
 800529c:	47a8      	blx	r5
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	4942      	ldr	r1, [pc, #264]	; (80053ac <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7ff fb1e 	bl	80048e6 <ringBuffer_lookFor>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	bf14      	ite	ne
 80052b0:	2301      	movne	r3, #1
 80052b2:	2300      	moveq	r3, #0
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d05c      	beq.n	8005374 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x118>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	493b      	ldr	r1, [pc, #236]	; (80053ac <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7ff fb10 	bl	80048e6 <ringBuffer_lookFor>
 80052c6:	4604      	mov	r4, r0
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	4937      	ldr	r1, [pc, #220]	; (80053ac <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7ff fb09 	bl	80048e6 <ringBuffer_lookFor>
 80052d4:	4603      	mov	r3, r0
 80052d6:	429c      	cmp	r4, r3
 80052d8:	bf14      	ite	ne
 80052da:	2301      	movne	r3, #1
 80052dc:	2300      	moveq	r3, #0
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d008      	beq.n	80052f6 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x9a>
 80052e4:	f011 f9c4 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 80052e8:	6803      	ldr	r3, [r0, #0]
 80052ea:	3370      	adds	r3, #112	; 0x70
 80052ec:	681c      	ldr	r4, [r3, #0]
 80052ee:	2385      	movs	r3, #133	; 0x85
 80052f0:	4a2d      	ldr	r2, [pc, #180]	; (80053a8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 80052f2:	492f      	ldr	r1, [pc, #188]	; (80053b0 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x154>)
 80052f4:	47a0      	blx	r4
 80052f6:	f011 f9bb 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 80052fa:	4604      	mov	r4, r0
 80052fc:	6823      	ldr	r3, [r4, #0]
 80052fe:	3358      	adds	r3, #88	; 0x58
 8005300:	681d      	ldr	r5, [r3, #0]
 8005302:	f107 0308 	add.w	r3, r7, #8
 8005306:	2101      	movs	r1, #1
 8005308:	4618      	mov	r0, r3
 800530a:	f00a fc4d 	bl	800fba8 <_Z10StringFromi>
 800530e:	f107 0308 	add.w	r3, r7, #8
 8005312:	4618      	mov	r0, r3
 8005314:	f00a f954 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 8005318:	4606      	mov	r6, r0
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	4923      	ldr	r1, [pc, #140]	; (80053ac <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8005320:	4618      	mov	r0, r3
 8005322:	f7ff fae0 	bl	80048e6 <ringBuffer_lookFor>
 8005326:	4602      	mov	r2, r0
 8005328:	f107 0310 	add.w	r3, r7, #16
 800532c:	4611      	mov	r1, r2
 800532e:	4618      	mov	r0, r3
 8005330:	f00a feb4 	bl	801009c <_Z10StringFromm>
 8005334:	f107 0310 	add.w	r3, r7, #16
 8005338:	4618      	mov	r0, r3
 800533a:	f00a f941 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 800533e:	4680      	mov	r8, r0
 8005340:	f011 f9a6 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005344:	4603      	mov	r3, r0
 8005346:	9303      	str	r3, [sp, #12]
 8005348:	2385      	movs	r3, #133	; 0x85
 800534a:	9302      	str	r3, [sp, #8]
 800534c:	4b16      	ldr	r3, [pc, #88]	; (80053a8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 800534e:	9301      	str	r3, [sp, #4]
 8005350:	2300      	movs	r3, #0
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	4643      	mov	r3, r8
 8005356:	4632      	mov	r2, r6
 8005358:	2101      	movs	r1, #1
 800535a:	4620      	mov	r0, r4
 800535c:	47a8      	blx	r5
 800535e:	f107 0310 	add.w	r3, r7, #16
 8005362:	4618      	mov	r0, r3
 8005364:	f00a f959 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8005368:	f107 0308 	add.w	r3, r7, #8
 800536c:	4618      	mov	r0, r3
 800536e:	f00a f954 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 8005372:	e012      	b.n	800539a <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x13e>
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8005374:	f011 f97c 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8005378:	4604      	mov	r4, r0
 800537a:	6823      	ldr	r3, [r4, #0]
 800537c:	3338      	adds	r3, #56	; 0x38
 800537e:	681d      	ldr	r5, [r3, #0]
 8005380:	f011 f986 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005384:	4603      	mov	r3, r0
 8005386:	9302      	str	r3, [sp, #8]
 8005388:	2385      	movs	r3, #133	; 0x85
 800538a:	9301      	str	r3, [sp, #4]
 800538c:	4b06      	ldr	r3, [pc, #24]	; (80053a8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 800538e:	9300      	str	r3, [sp, #0]
 8005390:	2300      	movs	r3, #0
 8005392:	2200      	movs	r2, #0
 8005394:	2100      	movs	r1, #0
 8005396:	4620      	mov	r0, r4
 8005398:	47a8      	blx	r5
}
 800539a:	bf00      	nop
 800539c:	3718      	adds	r7, #24
 800539e:	46bd      	mov	sp, r7
 80053a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053a4:	08025a88 	.word	0x08025a88
 80053a8:	08025848 	.word	0x08025848
 80053ac:	08025a94 	.word	0x08025a94
 80053b0:	08025a9c 	.word	0x08025a9c

080053b4 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, CapacityTest)
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	601a      	str	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	605a      	str	r2, [r3, #4]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7ff faf2 	bl	80049b4 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80053d0:	4a03      	ldr	r2, [pc, #12]	; (80053e0 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev+0x2c>)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4618      	mov	r0, r3
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	0802a60c 	.word	0x0802a60c

080053e4 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv>:
 80053e4:	b590      	push	{r4, r7, lr}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	2288      	movs	r2, #136	; 0x88
 80053ee:	4906      	ldr	r1, [pc, #24]	; (8005408 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv+0x24>)
 80053f0:	2008      	movs	r0, #8
 80053f2:	f007 f997 	bl	800c724 <_ZnwjPKci>
 80053f6:	4604      	mov	r4, r0
 80053f8:	4620      	mov	r0, r4
 80053fa:	f7ff ffdb 	bl	80053b4 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>
 80053fe:	4623      	mov	r3, r4
 8005400:	4618      	mov	r0, r3
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	bd90      	pop	{r4, r7, pc}
 8005408:	08025848 	.word	0x08025848

0800540c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>:
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4618      	mov	r0, r3
 8005418:	f00f fd72 	bl	8014f00 <_ZN10UtestShellC1Ev>
 800541c:	4a03      	ldr	r2, [pc, #12]	; (800542c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev+0x20>)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4618      	mov	r0, r3
 8005426:	3708      	adds	r7, #8
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	0802a560 	.word	0x0802a560

08005430 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv>:
{
 8005430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005432:	b087      	sub	sp, #28
 8005434:	af04      	add	r7, sp, #16
 8005436:	6078      	str	r0, [r7, #4]

	LONGS_EQUAL(50,ringBuffer_capacity(testBuf));
 8005438:	f011 f91a 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 800543c:	4604      	mov	r4, r0
 800543e:	6823      	ldr	r3, [r4, #0]
 8005440:	3338      	adds	r3, #56	; 0x38
 8005442:	681d      	ldr	r5, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	4618      	mov	r0, r3
 800544a:	f7ff fa62 	bl	8004912 <ringBuffer_capacity>
 800544e:	4603      	mov	r3, r0
 8005450:	461e      	mov	r6, r3
 8005452:	f011 f91d 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005456:	4603      	mov	r3, r0
 8005458:	9302      	str	r3, [sp, #8]
 800545a:	238b      	movs	r3, #139	; 0x8b
 800545c:	9301      	str	r3, [sp, #4]
 800545e:	4b05      	ldr	r3, [pc, #20]	; (8005474 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x44>)
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	4b05      	ldr	r3, [pc, #20]	; (8005478 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x48>)
 8005464:	4632      	mov	r2, r6
 8005466:	2132      	movs	r1, #50	; 0x32
 8005468:	4620      	mov	r0, r4
 800546a:	47a8      	blx	r5

}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005474:	08025848 	.word	0x08025848
 8005478:	08025b40 	.word	0x08025b40

0800547c <_Z18UART_Transmit_FakePhj>:

/* Mpck functions-----------------------------------------------------------------------*/

void UART_Transmit_Fake(uint8_t* data, size_t size)
{
 800547c:	b5b0      	push	{r4, r5, r7, lr}
 800547e:	b08a      	sub	sp, #40	; 0x28
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]

	mock().actualCall("UART_Transmit_Fake").withParameter("data", data, size).withIntParameter("size", size);
 8005486:	f107 0308 	add.w	r3, r7, #8
 800548a:	4927      	ldr	r1, [pc, #156]	; (8005528 <_Z18UART_Transmit_FakePhj+0xac>)
 800548c:	4618      	mov	r0, r3
 800548e:	f009 fd0c 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8005492:	f107 0308 	add.w	r3, r7, #8
 8005496:	2100      	movs	r1, #0
 8005498:	4618      	mov	r0, r3
 800549a:	f007 fddf 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800549e:	4604      	mov	r4, r0
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	3318      	adds	r3, #24
 80054a4:	681d      	ldr	r5, [r3, #0]
 80054a6:	f107 0310 	add.w	r3, r7, #16
 80054aa:	4920      	ldr	r1, [pc, #128]	; (800552c <_Z18UART_Transmit_FakePhj+0xb0>)
 80054ac:	4618      	mov	r0, r3
 80054ae:	f009 fcfc 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80054b2:	f107 0310 	add.w	r3, r7, #16
 80054b6:	4619      	mov	r1, r3
 80054b8:	4620      	mov	r0, r4
 80054ba:	47a8      	blx	r5
 80054bc:	4604      	mov	r4, r0
 80054be:	f107 0318 	add.w	r3, r7, #24
 80054c2:	491b      	ldr	r1, [pc, #108]	; (8005530 <_Z18UART_Transmit_FakePhj+0xb4>)
 80054c4:	4618      	mov	r0, r3
 80054c6:	f009 fcf0 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80054ca:	f107 0118 	add.w	r1, r7, #24
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	4620      	mov	r0, r4
 80054d4:	f7ff fa29 	bl	800492a <_ZN14MockActualCall13withParameterERK12SimpleStringPKhj>
 80054d8:	4604      	mov	r4, r0
 80054da:	6823      	ldr	r3, [r4, #0]
 80054dc:	3320      	adds	r3, #32
 80054de:	681d      	ldr	r5, [r3, #0]
 80054e0:	f107 0320 	add.w	r3, r7, #32
 80054e4:	4913      	ldr	r1, [pc, #76]	; (8005534 <_Z18UART_Transmit_FakePhj+0xb8>)
 80054e6:	4618      	mov	r0, r3
 80054e8:	f009 fcdf 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80054ec:	683a      	ldr	r2, [r7, #0]
 80054ee:	f107 0320 	add.w	r3, r7, #32
 80054f2:	4619      	mov	r1, r3
 80054f4:	4620      	mov	r0, r4
 80054f6:	47a8      	blx	r5
 80054f8:	f107 0320 	add.w	r3, r7, #32
 80054fc:	4618      	mov	r0, r3
 80054fe:	f00a f88c 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8005502:	f107 0318 	add.w	r3, r7, #24
 8005506:	4618      	mov	r0, r3
 8005508:	f00a f887 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800550c:	f107 0310 	add.w	r3, r7, #16
 8005510:	4618      	mov	r0, r3
 8005512:	f00a f882 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8005516:	f107 0308 	add.w	r3, r7, #8
 800551a:	4618      	mov	r0, r3
 800551c:	f00a f87d 	bl	800f61a <_ZN12SimpleStringD1Ev>

}
 8005520:	bf00      	nop
 8005522:	3728      	adds	r7, #40	; 0x28
 8005524:	46bd      	mov	sp, r7
 8005526:	bdb0      	pop	{r4, r5, r7, pc}
 8005528:	08025b78 	.word	0x08025b78
 800552c:	08025b7c 	.word	0x08025b7c
 8005530:	08025b90 	.word	0x08025b90
 8005534:	08025b98 	.word	0x08025b98

08005538 <_Z17UART_Receive_Fakev>:
uint8_t UART_Receive_Fake(void)
{
 8005538:	b5b0      	push	{r4, r5, r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0

	return mock().actualCall("UART_Receive_Fake").returnIntValue();
 800553e:	463b      	mov	r3, r7
 8005540:	4916      	ldr	r1, [pc, #88]	; (800559c <_Z17UART_Receive_Fakev+0x64>)
 8005542:	4618      	mov	r0, r3
 8005544:	f009 fcb1 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8005548:	463b      	mov	r3, r7
 800554a:	2100      	movs	r1, #0
 800554c:	4618      	mov	r0, r3
 800554e:	f007 fd85 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005552:	4604      	mov	r4, r0
 8005554:	6823      	ldr	r3, [r4, #0]
 8005556:	3318      	adds	r3, #24
 8005558:	681d      	ldr	r5, [r3, #0]
 800555a:	f107 0308 	add.w	r3, r7, #8
 800555e:	4910      	ldr	r1, [pc, #64]	; (80055a0 <_Z17UART_Receive_Fakev+0x68>)
 8005560:	4618      	mov	r0, r3
 8005562:	f009 fca2 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8005566:	f107 0308 	add.w	r3, r7, #8
 800556a:	4619      	mov	r1, r3
 800556c:	4620      	mov	r0, r4
 800556e:	47a8      	blx	r5
 8005570:	4603      	mov	r3, r0
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	3264      	adds	r2, #100	; 0x64
 8005576:	6812      	ldr	r2, [r2, #0]
 8005578:	4618      	mov	r0, r3
 800557a:	4790      	blx	r2
 800557c:	4603      	mov	r3, r0
 800557e:	b2dc      	uxtb	r4, r3
 8005580:	f107 0308 	add.w	r3, r7, #8
 8005584:	4618      	mov	r0, r3
 8005586:	f00a f848 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800558a:	463b      	mov	r3, r7
 800558c:	4618      	mov	r0, r3
 800558e:	f00a f844 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8005592:	4623      	mov	r3, r4
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bdb0      	pop	{r4, r5, r7, pc}
 800559c:	08025b78 	.word	0x08025b78
 80055a0:	08025ba0 	.word	0x08025ba0

080055a4 <_Z12getTick_Fakev>:

uint32_t time=0;

uint32_t getTick_Fake(void)
{
 80055a4:	b480      	push	{r7}
 80055a6:	af00      	add	r7, sp, #0
	if(time == 0xFFFFFFFF)
 80055a8:	4b0a      	ldr	r3, [pc, #40]	; (80055d4 <_Z12getTick_Fakev+0x30>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b0:	d103      	bne.n	80055ba <_Z12getTick_Fakev+0x16>
		time = 0;
 80055b2:	4b08      	ldr	r3, [pc, #32]	; (80055d4 <_Z12getTick_Fakev+0x30>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	601a      	str	r2, [r3, #0]
 80055b8:	e004      	b.n	80055c4 <_Z12getTick_Fakev+0x20>
	else
		time += 1;
 80055ba:	4b06      	ldr	r3, [pc, #24]	; (80055d4 <_Z12getTick_Fakev+0x30>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3301      	adds	r3, #1
 80055c0:	4a04      	ldr	r2, [pc, #16]	; (80055d4 <_Z12getTick_Fakev+0x30>)
 80055c2:	6013      	str	r3, [r2, #0]
	return time;
 80055c4:	4b03      	ldr	r3, [pc, #12]	; (80055d4 <_Z12getTick_Fakev+0x30>)
 80055c6:	681b      	ldr	r3, [r3, #0]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	20000514 	.word	0x20000514

080055d8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv>:
/* Test functions of the ring buffer-----------------------------------------------------------------------*/

TEST_GROUP(EspDriver_Test_Group)
{

	void setup()
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
	{
		ESP_Init(UART_Transmit_Fake,
 80055e0:	2364      	movs	r3, #100	; 0x64
 80055e2:	4a04      	ldr	r2, [pc, #16]	; (80055f4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x1c>)
 80055e4:	4904      	ldr	r1, [pc, #16]	; (80055f8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x20>)
 80055e6:	4805      	ldr	r0, [pc, #20]	; (80055fc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x24>)
 80055e8:	f7fe fb44 	bl	8003c74 <ESP_Init>
				  UART_Receive_Fake,
				  getTick_Fake,
				  100);					// buffer size

	}
 80055ec:	bf00      	nop
 80055ee:	3708      	adds	r7, #8
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	080055a5 	.word	0x080055a5
 80055f8:	08005539 	.word	0x08005539
 80055fc:	0800547d 	.word	0x0800547d

08005600 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv>:

	void teardown()
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
	{

		mock().checkExpectations();
 8005608:	f107 0308 	add.w	r3, r7, #8
 800560c:	4917      	ldr	r1, [pc, #92]	; (800566c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 800560e:	4618      	mov	r0, r3
 8005610:	f009 fc4b 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8005614:	f107 0308 	add.w	r3, r7, #8
 8005618:	2100      	movs	r1, #0
 800561a:	4618      	mov	r0, r3
 800561c:	f007 fd1e 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005620:	4603      	mov	r3, r0
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	3294      	adds	r2, #148	; 0x94
 8005626:	6812      	ldr	r2, [r2, #0]
 8005628:	4618      	mov	r0, r3
 800562a:	4790      	blx	r2
 800562c:	f107 0308 	add.w	r3, r7, #8
 8005630:	4618      	mov	r0, r3
 8005632:	f009 fff2 	bl	800f61a <_ZN12SimpleStringD1Ev>
		mock().clear();
 8005636:	f107 0310 	add.w	r3, r7, #16
 800563a:	490c      	ldr	r1, [pc, #48]	; (800566c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 800563c:	4618      	mov	r0, r3
 800563e:	f009 fc34 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8005642:	f107 0310 	add.w	r3, r7, #16
 8005646:	2100      	movs	r1, #0
 8005648:	4618      	mov	r0, r3
 800564a:	f007 fd07 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800564e:	4603      	mov	r3, r0
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	329c      	adds	r2, #156	; 0x9c
 8005654:	6812      	ldr	r2, [r2, #0]
 8005656:	4618      	mov	r0, r3
 8005658:	4790      	blx	r2
 800565a:	f107 0310 	add.w	r3, r7, #16
 800565e:	4618      	mov	r0, r3
 8005660:	f009 ffdb 	bl	800f61a <_ZN12SimpleStringD1Ev>
	}
 8005664:	bf00      	nop
 8005666:	3718      	adds	r7, #24
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	08025b78 	.word	0x08025b78

08005670 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>:
TEST_GROUP(EspDriver_Test_Group)
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4618      	mov	r0, r3
 800567c:	f011 f822 	bl	80166c4 <_ZN5UtestC1Ev>
 8005680:	4a03      	ldr	r2, [pc, #12]	; (8005690 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev+0x20>)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	601a      	str	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4618      	mov	r0, r3
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	0802a540 	.word	0x0802a540

08005694 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>:
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	4a05      	ldr	r2, [pc, #20]	; (80056b4 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev+0x20>)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	601a      	str	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f011 f81d 	bl	80166e4 <_ZN5UtestD1Ev>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4618      	mov	r0, r3
 80056ae:	3708      	adds	r7, #8
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	0802a540 	.word	0x0802a540

080056b8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD0Ev>:
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f7ff ffe7 	bl	8005694 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80056c6:	2104      	movs	r1, #4
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f007 f83f 	bl	800c74c <_ZdlPvj>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4618      	mov	r0, r3
 80056d2:	3708      	adds	r7, #8
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>:


};

TEST(EspDriver_Test_Group, Esp_Init_Test)
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff ffc4 	bl	8005670 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80056e8:	4a03      	ldr	r2, [pc, #12]	; (80056f8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev+0x20>)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4618      	mov	r0, r3
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	0802a520 	.word	0x0802a520

080056fc <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv>:
 80056fc:	b590      	push	{r4, r7, lr}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	22c3      	movs	r2, #195	; 0xc3
 8005706:	4906      	ldr	r1, [pc, #24]	; (8005720 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv+0x24>)
 8005708:	2004      	movs	r0, #4
 800570a:	f007 f80b 	bl	800c724 <_ZnwjPKci>
 800570e:	4604      	mov	r4, r0
 8005710:	4620      	mov	r0, r4
 8005712:	f7ff ffe1 	bl	80056d8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>
 8005716:	4623      	mov	r3, r4
 8005718:	4618      	mov	r0, r3
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	bd90      	pop	{r4, r7, pc}
 8005720:	08025848 	.word	0x08025848

08005724 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>:
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4618      	mov	r0, r3
 8005730:	f00f fbe6 	bl	8014f00 <_ZN10UtestShellC1Ev>
 8005734:	4a03      	ldr	r2, [pc, #12]	; (8005744 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev+0x20>)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4618      	mov	r0, r3
 800573e:	3708      	adds	r7, #8
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	0802a474 	.word	0x0802a474

08005748 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv>:
{
 8005748:	b5b0      	push	{r4, r5, r7, lr}
 800574a:	b088      	sub	sp, #32
 800574c:	af04      	add	r7, sp, #16
 800574e:	6078      	str	r0, [r7, #4]

	transmit = UART_Transmit_Fake; 			// or you can pass UART_Transmit_Fake as a parameter to the function instead of transmit.
 8005750:	4b10      	ldr	r3, [pc, #64]	; (8005794 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 8005752:	4a11      	ldr	r2, [pc, #68]	; (8005798 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x50>)
 8005754:	601a      	str	r2, [r3, #0]
	int32_t result = ESP_Init(transmit,
 8005756:	4b0f      	ldr	r3, [pc, #60]	; (8005794 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 8005758:	6818      	ldr	r0, [r3, #0]
 800575a:	2364      	movs	r3, #100	; 0x64
 800575c:	4a0f      	ldr	r2, [pc, #60]	; (800579c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x54>)
 800575e:	4910      	ldr	r1, [pc, #64]	; (80057a0 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x58>)
 8005760:	f7fe fa88 	bl	8003c74 <ESP_Init>
 8005764:	60f8      	str	r0, [r7, #12]
//	int result = ESP_Init(UART_Transmit_Fake,
//						  UART_Receive_Fake,
//						  getTick_Fake,
//	  	  	  	  	  	  100);

	LONGS_EQUAL(1,result);
 8005766:	f010 ff83 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 800576a:	4604      	mov	r4, r0
 800576c:	6823      	ldr	r3, [r4, #0]
 800576e:	3338      	adds	r3, #56	; 0x38
 8005770:	681d      	ldr	r5, [r3, #0]
 8005772:	f010 ff8d 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005776:	4603      	mov	r3, r0
 8005778:	9302      	str	r3, [sp, #8]
 800577a:	23d1      	movs	r3, #209	; 0xd1
 800577c:	9301      	str	r3, [sp, #4]
 800577e:	4b09      	ldr	r3, [pc, #36]	; (80057a4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x5c>)
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	4b09      	ldr	r3, [pc, #36]	; (80057a8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x60>)
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	2101      	movs	r1, #1
 8005788:	4620      	mov	r0, r4
 800578a:	47a8      	blx	r5

}
 800578c:	bf00      	nop
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bdb0      	pop	{r4, r5, r7, pc}
 8005794:	20000518 	.word	0x20000518
 8005798:	0800547d 	.word	0x0800547d
 800579c:	080055a5 	.word	0x080055a5
 80057a0:	08005539 	.word	0x08005539
 80057a4:	08025848 	.word	0x08025848
 80057a8:	08025bb4 	.word	0x08025bb4

080057ac <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7ff ff5a 	bl	8005670 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80057bc:	4a03      	ldr	r2, [pc, #12]	; (80057cc <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev+0x20>)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	601a      	str	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4618      	mov	r0, r3
 80057c6:	3708      	adds	r7, #8
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	0802a454 	.word	0x0802a454

080057d0 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv>:
 80057d0:	b590      	push	{r4, r7, lr}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	22d5      	movs	r2, #213	; 0xd5
 80057da:	4906      	ldr	r1, [pc, #24]	; (80057f4 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv+0x24>)
 80057dc:	2004      	movs	r0, #4
 80057de:	f006 ffa1 	bl	800c724 <_ZnwjPKci>
 80057e2:	4604      	mov	r4, r0
 80057e4:	4620      	mov	r0, r4
 80057e6:	f7ff ffe1 	bl	80057ac <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>
 80057ea:	4623      	mov	r3, r4
 80057ec:	4618      	mov	r0, r3
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd90      	pop	{r4, r7, pc}
 80057f4:	08025848 	.word	0x08025848

080057f8 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>:
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4618      	mov	r0, r3
 8005804:	f00f fb7c 	bl	8014f00 <_ZN10UtestShellC1Ev>
 8005808:	4a03      	ldr	r2, [pc, #12]	; (8005818 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev+0x20>)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	601a      	str	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4618      	mov	r0, r3
 8005812:	3708      	adds	r7, #8
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	0802a3a8 	.word	0x0802a3a8

0800581c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv>:
{
 800581c:	b5b0      	push	{r4, r5, r7, lr}
 800581e:	b092      	sub	sp, #72	; 0x48
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
	mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t*)"Test",strlen("Test")).withIntParameter("size", strlen("Test"));  // UART_Transmit_Fake function waits "Test" string.
 8005824:	f107 0308 	add.w	r3, r7, #8
 8005828:	4951      	ldr	r1, [pc, #324]	; (8005970 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x154>)
 800582a:	4618      	mov	r0, r3
 800582c:	f009 fb3d 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8005830:	f107 0308 	add.w	r3, r7, #8
 8005834:	2100      	movs	r1, #0
 8005836:	4618      	mov	r0, r3
 8005838:	f007 fc10 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800583c:	4604      	mov	r4, r0
 800583e:	6823      	ldr	r3, [r4, #0]
 8005840:	330c      	adds	r3, #12
 8005842:	681d      	ldr	r5, [r3, #0]
 8005844:	f107 0310 	add.w	r3, r7, #16
 8005848:	494a      	ldr	r1, [pc, #296]	; (8005974 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x158>)
 800584a:	4618      	mov	r0, r3
 800584c:	f009 fb2d 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8005850:	f107 0310 	add.w	r3, r7, #16
 8005854:	4619      	mov	r1, r3
 8005856:	4620      	mov	r0, r4
 8005858:	47a8      	blx	r5
 800585a:	4604      	mov	r4, r0
 800585c:	f107 0318 	add.w	r3, r7, #24
 8005860:	4945      	ldr	r1, [pc, #276]	; (8005978 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x15c>)
 8005862:	4618      	mov	r0, r3
 8005864:	f009 fb21 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8005868:	f107 0118 	add.w	r1, r7, #24
 800586c:	2304      	movs	r3, #4
 800586e:	4a43      	ldr	r2, [pc, #268]	; (800597c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x160>)
 8005870:	4620      	mov	r0, r4
 8005872:	f7ff f86f 	bl	8004954 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 8005876:	4604      	mov	r4, r0
 8005878:	6823      	ldr	r3, [r4, #0]
 800587a:	332c      	adds	r3, #44	; 0x2c
 800587c:	681d      	ldr	r5, [r3, #0]
 800587e:	f107 0320 	add.w	r3, r7, #32
 8005882:	493f      	ldr	r1, [pc, #252]	; (8005980 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x164>)
 8005884:	4618      	mov	r0, r3
 8005886:	f009 fb10 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800588a:	f107 0320 	add.w	r3, r7, #32
 800588e:	2204      	movs	r2, #4
 8005890:	4619      	mov	r1, r3
 8005892:	4620      	mov	r0, r4
 8005894:	47a8      	blx	r5
 8005896:	f107 0320 	add.w	r3, r7, #32
 800589a:	4618      	mov	r0, r3
 800589c:	f009 febd 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80058a0:	f107 0318 	add.w	r3, r7, #24
 80058a4:	4618      	mov	r0, r3
 80058a6:	f009 feb8 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80058aa:	f107 0310 	add.w	r3, r7, #16
 80058ae:	4618      	mov	r0, r3
 80058b0:	f009 feb3 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80058b4:	f107 0308 	add.w	r3, r7, #8
 80058b8:	4618      	mov	r0, r3
 80058ba:	f009 feae 	bl	800f61a <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t*)"AT\r\n",strlen("AT\r\n")).withIntParameter("size", strlen("AT\r\n"));
 80058be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058c2:	492b      	ldr	r1, [pc, #172]	; (8005970 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x154>)
 80058c4:	4618      	mov	r0, r3
 80058c6:	f009 faf0 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80058ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058ce:	2100      	movs	r1, #0
 80058d0:	4618      	mov	r0, r3
 80058d2:	f007 fbc3 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80058d6:	4604      	mov	r4, r0
 80058d8:	6823      	ldr	r3, [r4, #0]
 80058da:	330c      	adds	r3, #12
 80058dc:	681d      	ldr	r5, [r3, #0]
 80058de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80058e2:	4924      	ldr	r1, [pc, #144]	; (8005974 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x158>)
 80058e4:	4618      	mov	r0, r3
 80058e6:	f009 fae0 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80058ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80058ee:	4619      	mov	r1, r3
 80058f0:	4620      	mov	r0, r4
 80058f2:	47a8      	blx	r5
 80058f4:	4604      	mov	r4, r0
 80058f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80058fa:	491f      	ldr	r1, [pc, #124]	; (8005978 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x15c>)
 80058fc:	4618      	mov	r0, r3
 80058fe:	f009 fad4 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8005902:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8005906:	2304      	movs	r3, #4
 8005908:	4a1e      	ldr	r2, [pc, #120]	; (8005984 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x168>)
 800590a:	4620      	mov	r0, r4
 800590c:	f7ff f822 	bl	8004954 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 8005910:	4604      	mov	r4, r0
 8005912:	6823      	ldr	r3, [r4, #0]
 8005914:	332c      	adds	r3, #44	; 0x2c
 8005916:	681d      	ldr	r5, [r3, #0]
 8005918:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800591c:	4918      	ldr	r1, [pc, #96]	; (8005980 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x164>)
 800591e:	4618      	mov	r0, r3
 8005920:	f009 fac3 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8005924:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005928:	2204      	movs	r2, #4
 800592a:	4619      	mov	r1, r3
 800592c:	4620      	mov	r0, r4
 800592e:	47a8      	blx	r5
 8005930:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005934:	4618      	mov	r0, r3
 8005936:	f009 fe70 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800593a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800593e:	4618      	mov	r0, r3
 8005940:	f009 fe6b 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8005944:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005948:	4618      	mov	r0, r3
 800594a:	f009 fe66 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800594e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005952:	4618      	mov	r0, r3
 8005954:	f009 fe61 	bl	800f61a <_ZN12SimpleStringD1Ev>

	Send_AT_Command((char*)"Test",strlen("Test"));
 8005958:	2104      	movs	r1, #4
 800595a:	4808      	ldr	r0, [pc, #32]	; (800597c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x160>)
 800595c:	f7fe f9bc 	bl	8003cd8 <Send_AT_Command>
	Send_AT_Command((char*)"AT\r\n",strlen("AT\r\n"));
 8005960:	2104      	movs	r1, #4
 8005962:	4808      	ldr	r0, [pc, #32]	; (8005984 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x168>)
 8005964:	f7fe f9b8 	bl	8003cd8 <Send_AT_Command>

	// There is no assertion macro here because the function returns nothing.
	// Mocking library checks if the function has been called.
}
 8005968:	bf00      	nop
 800596a:	3748      	adds	r7, #72	; 0x48
 800596c:	46bd      	mov	sp, r7
 800596e:	bdb0      	pop	{r4, r5, r7, pc}
 8005970:	08025b78 	.word	0x08025b78
 8005974:	08025b7c 	.word	0x08025b7c
 8005978:	08025b90 	.word	0x08025b90
 800597c:	08025a80 	.word	0x08025a80
 8005980:	08025b98 	.word	0x08025b98
 8005984:	08025bd4 	.word	0x08025bd4

08005988 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4618      	mov	r0, r3
 8005994:	f7ff fe6c 	bl	8005670 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005998:	4a03      	ldr	r2, [pc, #12]	; (80059a8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev+0x20>)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	601a      	str	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4618      	mov	r0, r3
 80059a2:	3708      	adds	r7, #8
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	0802a388 	.word	0x0802a388

080059ac <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv>:
 80059ac:	b590      	push	{r4, r7, lr}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	22e1      	movs	r2, #225	; 0xe1
 80059b6:	4906      	ldr	r1, [pc, #24]	; (80059d0 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv+0x24>)
 80059b8:	2004      	movs	r0, #4
 80059ba:	f006 feb3 	bl	800c724 <_ZnwjPKci>
 80059be:	4604      	mov	r4, r0
 80059c0:	4620      	mov	r0, r4
 80059c2:	f7ff ffe1 	bl	8005988 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>
 80059c6:	4623      	mov	r3, r4
 80059c8:	4618      	mov	r0, r3
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd90      	pop	{r4, r7, pc}
 80059d0:	08025848 	.word	0x08025848

080059d4 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>:
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4618      	mov	r0, r3
 80059e0:	f00f fa8e 	bl	8014f00 <_ZN10UtestShellC1Ev>
 80059e4:	4a03      	ldr	r2, [pc, #12]	; (80059f4 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev+0x20>)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	601a      	str	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4618      	mov	r0, r3
 80059ee:	3708      	adds	r7, #8
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	0802a2dc 	.word	0x0802a2dc

080059f8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv>:
{
 80059f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059fa:	b08f      	sub	sp, #60	; 0x3c
 80059fc:	af04      	add	r7, sp, #16
 80059fe:	6078      	str	r0, [r7, #4]

	const char response[] = "OK\r\n";
 8005a00:	4a31      	ldr	r2, [pc, #196]	; (8005ac8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd0>)
 8005a02:	f107 030c 	add.w	r3, r7, #12
 8005a06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005a0a:	6018      	str	r0, [r3, #0]
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	7019      	strb	r1, [r3, #0]

	for(int32_t i=0;i<(int32_t)strlen(response);i++)
 8005a10:	2300      	movs	r3, #0
 8005a12:	627b      	str	r3, [r7, #36]	; 0x24
 8005a14:	f107 030c 	add.w	r3, r7, #12
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7fa fc0f 	bl	800023c <strlen>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	461a      	mov	r2, r3
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	4293      	cmp	r3, r2
 8005a26:	da35      	bge.n	8005a94 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x9c>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8005a28:	f107 0314 	add.w	r3, r7, #20
 8005a2c:	4927      	ldr	r1, [pc, #156]	; (8005acc <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd4>)
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f009 fa3b 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8005a34:	f107 0314 	add.w	r3, r7, #20
 8005a38:	2100      	movs	r1, #0
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f007 fb0e 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005a40:	4604      	mov	r4, r0
 8005a42:	6823      	ldr	r3, [r4, #0]
 8005a44:	330c      	adds	r3, #12
 8005a46:	681d      	ldr	r5, [r3, #0]
 8005a48:	f107 031c 	add.w	r3, r7, #28
 8005a4c:	4920      	ldr	r1, [pc, #128]	; (8005ad0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd8>)
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f009 fa2b 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8005a54:	f107 031c 	add.w	r3, r7, #28
 8005a58:	4619      	mov	r1, r3
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	47a8      	blx	r5
 8005a5e:	4603      	mov	r3, r0
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	3264      	adds	r2, #100	; 0x64
 8005a64:	6812      	ldr	r2, [r2, #0]
 8005a66:	f107 000c 	add.w	r0, r7, #12
 8005a6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a6c:	4401      	add	r1, r0
 8005a6e:	7809      	ldrb	r1, [r1, #0]
 8005a70:	4618      	mov	r0, r3
 8005a72:	4790      	blx	r2
 8005a74:	f107 031c 	add.w	r3, r7, #28
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f009 fdce 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8005a7e:	f107 0314 	add.w	r3, r7, #20
 8005a82:	4618      	mov	r0, r3
 8005a84:	f009 fdc9 	bl	800f61a <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 8005a88:	f7fe f936 	bl	8003cf8 <ESP_UART_ReceiveHandler>
	for(int32_t i=0;i<(int32_t)strlen(response);i++)
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8e:	3301      	adds	r3, #1
 8005a90:	627b      	str	r3, [r7, #36]	; 0x24
 8005a92:	e7bf      	b.n	8005a14 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1c>
	}

	STRCMP_EQUAL("OK\r\n",(char*)rx_buffer->buffer);	// check the ring buffer.
 8005a94:	f010 fdec 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8005a98:	4604      	mov	r4, r0
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	3324      	adds	r3, #36	; 0x24
 8005a9e:	681d      	ldr	r5, [r3, #0]
 8005aa0:	4b0c      	ldr	r3, [pc, #48]	; (8005ad4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xdc>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68de      	ldr	r6, [r3, #12]
 8005aa6:	f010 fdf3 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	9302      	str	r3, [sp, #8]
 8005aae:	23ec      	movs	r3, #236	; 0xec
 8005ab0:	9301      	str	r3, [sp, #4]
 8005ab2:	4b09      	ldr	r3, [pc, #36]	; (8005ad8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xe0>)
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	4632      	mov	r2, r6
 8005aba:	4903      	ldr	r1, [pc, #12]	; (8005ac8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0xd0>)
 8005abc:	4620      	mov	r0, r4
 8005abe:	47a8      	blx	r5

}
 8005ac0:	bf00      	nop
 8005ac2:	372c      	adds	r7, #44	; 0x2c
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ac8:	08025bdc 	.word	0x08025bdc
 8005acc:	08025b78 	.word	0x08025b78
 8005ad0:	08025ba0 	.word	0x08025ba0
 8005ad4:	200010fc 	.word	0x200010fc
 8005ad8:	08025848 	.word	0x08025848

08005adc <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_Response_Test)
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7ff fdc2 	bl	8005670 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005aec:	4a03      	ldr	r2, [pc, #12]	; (8005afc <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev+0x20>)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4618      	mov	r0, r3
 8005af6:	3708      	adds	r7, #8
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	0802a2bc 	.word	0x0802a2bc

08005b00 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv>:
 8005b00:	b590      	push	{r4, r7, lr}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	22f0      	movs	r2, #240	; 0xf0
 8005b0a:	4906      	ldr	r1, [pc, #24]	; (8005b24 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv+0x24>)
 8005b0c:	2004      	movs	r0, #4
 8005b0e:	f006 fe09 	bl	800c724 <_ZnwjPKci>
 8005b12:	4604      	mov	r4, r0
 8005b14:	4620      	mov	r0, r4
 8005b16:	f7ff ffe1 	bl	8005adc <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>
 8005b1a:	4623      	mov	r3, r4
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd90      	pop	{r4, r7, pc}
 8005b24:	08025848 	.word	0x08025848

08005b28 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>:
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f00f f9e4 	bl	8014f00 <_ZN10UtestShellC1Ev>
 8005b38:	4a03      	ldr	r2, [pc, #12]	; (8005b48 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev+0x20>)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4618      	mov	r0, r3
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	0802a210 	.word	0x0802a210

08005b4c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv>:
{
 8005b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b4e:	b08f      	sub	sp, #60	; 0x3c
 8005b50:	af04      	add	r7, sp, #16
 8005b52:	6078      	str	r0, [r7, #4]
	const char response[] = "OK\r\n";
 8005b54:	4a32      	ldr	r2, [pc, #200]	; (8005c20 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xd4>)
 8005b56:	f107 0308 	add.w	r3, r7, #8
 8005b5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b5e:	6018      	str	r0, [r3, #0]
 8005b60:	3304      	adds	r3, #4
 8005b62:	7019      	strb	r1, [r3, #0]

	for(int i=0;i<(int)strlen(response);i++)
 8005b64:	2300      	movs	r3, #0
 8005b66:	627b      	str	r3, [r7, #36]	; 0x24
 8005b68:	f107 0308 	add.w	r3, r7, #8
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7fa fb65 	bl	800023c <strlen>
 8005b72:	4603      	mov	r3, r0
 8005b74:	461a      	mov	r2, r3
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	da35      	bge.n	8005be8 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x9c>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8005b7c:	f107 0310 	add.w	r3, r7, #16
 8005b80:	4928      	ldr	r1, [pc, #160]	; (8005c24 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xd8>)
 8005b82:	4618      	mov	r0, r3
 8005b84:	f009 f991 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8005b88:	f107 0310 	add.w	r3, r7, #16
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f007 fa64 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005b94:	4604      	mov	r4, r0
 8005b96:	6823      	ldr	r3, [r4, #0]
 8005b98:	330c      	adds	r3, #12
 8005b9a:	681d      	ldr	r5, [r3, #0]
 8005b9c:	f107 0318 	add.w	r3, r7, #24
 8005ba0:	4921      	ldr	r1, [pc, #132]	; (8005c28 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xdc>)
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f009 f981 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8005ba8:	f107 0318 	add.w	r3, r7, #24
 8005bac:	4619      	mov	r1, r3
 8005bae:	4620      	mov	r0, r4
 8005bb0:	47a8      	blx	r5
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	3264      	adds	r2, #100	; 0x64
 8005bb8:	6812      	ldr	r2, [r2, #0]
 8005bba:	f107 0008 	add.w	r0, r7, #8
 8005bbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bc0:	4401      	add	r1, r0
 8005bc2:	7809      	ldrb	r1, [r1, #0]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	4790      	blx	r2
 8005bc8:	f107 0318 	add.w	r3, r7, #24
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f009 fd24 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8005bd2:	f107 0310 	add.w	r3, r7, #16
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f009 fd1f 	bl	800f61a <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 8005bdc:	f7fe f88c 	bl	8003cf8 <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	3301      	adds	r3, #1
 8005be4:	627b      	str	r3, [r7, #36]	; 0x24
 8005be6:	e7bf      	b.n	8005b68 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x1c>
	}

	uint32_t result = Read_Response((char*)"OK");
 8005be8:	4810      	ldr	r0, [pc, #64]	; (8005c2c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe0>)
 8005bea:	f7fe f897 	bl	8003d1c <Read_Response>
 8005bee:	6238      	str	r0, [r7, #32]

	LONGS_EQUAL(1,result);
 8005bf0:	f010 fd3e 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8005bf4:	4604      	mov	r4, r0
 8005bf6:	6823      	ldr	r3, [r4, #0]
 8005bf8:	3338      	adds	r3, #56	; 0x38
 8005bfa:	681d      	ldr	r5, [r3, #0]
 8005bfc:	6a3e      	ldr	r6, [r7, #32]
 8005bfe:	f010 fd47 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005c02:	4603      	mov	r3, r0
 8005c04:	9302      	str	r3, [sp, #8]
 8005c06:	23fc      	movs	r3, #252	; 0xfc
 8005c08:	9301      	str	r3, [sp, #4]
 8005c0a:	4b09      	ldr	r3, [pc, #36]	; (8005c30 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe4>)
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	4b09      	ldr	r3, [pc, #36]	; (8005c34 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe8>)
 8005c10:	4632      	mov	r2, r6
 8005c12:	2101      	movs	r1, #1
 8005c14:	4620      	mov	r0, r4
 8005c16:	47a8      	blx	r5

}
 8005c18:	bf00      	nop
 8005c1a:	372c      	adds	r7, #44	; 0x2c
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c20:	08025bdc 	.word	0x08025bdc
 8005c24:	08025b78 	.word	0x08025b78
 8005c28:	08025ba0 	.word	0x08025ba0
 8005c2c:	080257c8 	.word	0x080257c8
 8005c30:	08025848 	.word	0x08025848
 8005c34:	08025bb4 	.word	0x08025bb4

08005c38 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>:


TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7ff fd14 	bl	8005670 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005c48:	4a03      	ldr	r2, [pc, #12]	; (8005c58 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev+0x20>)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	601a      	str	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4618      	mov	r0, r3
 8005c52:	3708      	adds	r7, #8
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	0802a1f0 	.word	0x0802a1f0

08005c5c <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv>:
 8005c5c:	b590      	push	{r4, r7, lr}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	f240 1201 	movw	r2, #257	; 0x101
 8005c68:	4906      	ldr	r1, [pc, #24]	; (8005c84 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv+0x28>)
 8005c6a:	2004      	movs	r0, #4
 8005c6c:	f006 fd5a 	bl	800c724 <_ZnwjPKci>
 8005c70:	4604      	mov	r4, r0
 8005c72:	4620      	mov	r0, r4
 8005c74:	f7ff ffe0 	bl	8005c38 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>
 8005c78:	4623      	mov	r3, r4
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd90      	pop	{r4, r7, pc}
 8005c82:	bf00      	nop
 8005c84:	08025848 	.word	0x08025848

08005c88 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>:
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4618      	mov	r0, r3
 8005c94:	f00f f934 	bl	8014f00 <_ZN10UtestShellC1Ev>
 8005c98:	4a03      	ldr	r2, [pc, #12]	; (8005ca8 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev+0x20>)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	601a      	str	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3708      	adds	r7, #8
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	0802a144 	.word	0x0802a144

08005cac <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv>:
{
 8005cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cae:	b089      	sub	sp, #36	; 0x24
 8005cb0:	af04      	add	r7, sp, #16
 8005cb2:	6078      	str	r0, [r7, #4]
	Status response_state = IDLE;
 8005cb4:	2304      	movs	r3, #4
 8005cb6:	73fb      	strb	r3, [r7, #15]

	while(1)	// wait the message until timeout occurs.
	{
		response_state = Wait_Response((char*)"OK", 1000);
 8005cb8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005cbc:	4811      	ldr	r0, [pc, #68]	; (8005d04 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x58>)
 8005cbe:	f7fe f83f 	bl	8003d40 <Wait_Response>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	73fb      	strb	r3, [r7, #15]
		if(response_state != IDLE)
 8005cc6:	7bfb      	ldrb	r3, [r7, #15]
 8005cc8:	2b04      	cmp	r3, #4
 8005cca:	d100      	bne.n	8005cce <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x22>
		response_state = Wait_Response((char*)"OK", 1000);
 8005ccc:	e7f4      	b.n	8005cb8 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0xc>
			break;
 8005cce:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response_state);
 8005cd0:	f010 fcce 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8005cd4:	4604      	mov	r4, r0
 8005cd6:	6823      	ldr	r3, [r4, #0]
 8005cd8:	3338      	adds	r3, #56	; 0x38
 8005cda:	681d      	ldr	r5, [r3, #0]
 8005cdc:	7bfe      	ldrb	r6, [r7, #15]
 8005cde:	f010 fcd7 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	9302      	str	r3, [sp, #8]
 8005ce6:	f240 130d 	movw	r3, #269	; 0x10d
 8005cea:	9301      	str	r3, [sp, #4]
 8005cec:	4b06      	ldr	r3, [pc, #24]	; (8005d08 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x5c>)
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	4b06      	ldr	r3, [pc, #24]	; (8005d0c <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x60>)
 8005cf2:	4632      	mov	r2, r6
 8005cf4:	2101      	movs	r1, #1
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	47a8      	blx	r5

}
 8005cfa:	bf00      	nop
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d02:	bf00      	nop
 8005d04:	080257c8 	.word	0x080257c8
 8005d08:	08025848 	.word	0x08025848
 8005d0c:	08025be4 	.word	0x08025be4

08005d10 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_Response_Test)
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7ff fca8 	bl	8005670 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005d20:	4a03      	ldr	r2, [pc, #12]	; (8005d30 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev+0x20>)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	601a      	str	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	0802a124 	.word	0x0802a124

08005d34 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv>:
 8005d34:	b590      	push	{r4, r7, lr}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	f240 1211 	movw	r2, #273	; 0x111
 8005d40:	4906      	ldr	r1, [pc, #24]	; (8005d5c <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv+0x28>)
 8005d42:	2004      	movs	r0, #4
 8005d44:	f006 fcee 	bl	800c724 <_ZnwjPKci>
 8005d48:	4604      	mov	r4, r0
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	f7ff ffe0 	bl	8005d10 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>
 8005d50:	4623      	mov	r3, r4
 8005d52:	4618      	mov	r0, r3
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd90      	pop	{r4, r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	08025848 	.word	0x08025848

08005d60 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>:
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f00f f8c8 	bl	8014f00 <_ZN10UtestShellC1Ev>
 8005d70:	4a03      	ldr	r2, [pc, #12]	; (8005d80 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev+0x20>)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	601a      	str	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	0802a078 	.word	0x0802a078

08005d84 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv>:
{
 8005d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d86:	b08f      	sub	sp, #60	; 0x3c
 8005d88:	af04      	add	r7, sp, #16
 8005d8a:	6078      	str	r0, [r7, #4]

	Status response_state = IDLE;
 8005d8c:	2304      	movs	r3, #4
 8005d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	const char response[] = "OK\r\n";
 8005d92:	4a38      	ldr	r2, [pc, #224]	; (8005e74 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xf0>)
 8005d94:	f107 0308 	add.w	r3, r7, #8
 8005d98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d9c:	6018      	str	r0, [r3, #0]
 8005d9e:	3304      	adds	r3, #4
 8005da0:	7019      	strb	r1, [r3, #0]

	while(1)
	{
		response_state = Wait_Response((char*)"OK",1000);
 8005da2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005da6:	4834      	ldr	r0, [pc, #208]	; (8005e78 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xf4>)
 8005da8:	f7fd ffca 	bl	8003d40 <Wait_Response>
 8005dac:	4603      	mov	r3, r0
 8005dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if(response_state != IDLE)
 8005db2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005db6:	2b04      	cmp	r3, #4
 8005db8:	d141      	bne.n	8005e3e <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xba>
			break;
		for(int i=0;i<(int)strlen(response);i++)
 8005dba:	2300      	movs	r3, #0
 8005dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8005dbe:	f107 0308 	add.w	r3, r7, #8
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7fa fa3a 	bl	800023c <strlen>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	461a      	mov	r2, r3
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	dae7      	bge.n	8005da2 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x1e>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8005dd2:	f107 0310 	add.w	r3, r7, #16
 8005dd6:	4929      	ldr	r1, [pc, #164]	; (8005e7c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xf8>)
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f009 f866 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8005dde:	f107 0310 	add.w	r3, r7, #16
 8005de2:	2100      	movs	r1, #0
 8005de4:	4618      	mov	r0, r3
 8005de6:	f007 f939 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005dea:	4604      	mov	r4, r0
 8005dec:	6823      	ldr	r3, [r4, #0]
 8005dee:	330c      	adds	r3, #12
 8005df0:	681d      	ldr	r5, [r3, #0]
 8005df2:	f107 0318 	add.w	r3, r7, #24
 8005df6:	4922      	ldr	r1, [pc, #136]	; (8005e80 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xfc>)
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f009 f856 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8005dfe:	f107 0318 	add.w	r3, r7, #24
 8005e02:	4619      	mov	r1, r3
 8005e04:	4620      	mov	r0, r4
 8005e06:	47a8      	blx	r5
 8005e08:	4603      	mov	r3, r0
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	3264      	adds	r2, #100	; 0x64
 8005e0e:	6812      	ldr	r2, [r2, #0]
 8005e10:	f107 0008 	add.w	r0, r7, #8
 8005e14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e16:	4401      	add	r1, r0
 8005e18:	7809      	ldrb	r1, [r1, #0]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	4790      	blx	r2
 8005e1e:	f107 0318 	add.w	r3, r7, #24
 8005e22:	4618      	mov	r0, r3
 8005e24:	f009 fbf9 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8005e28:	f107 0310 	add.w	r3, r7, #16
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f009 fbf4 	bl	800f61a <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8005e32:	f7fd ff61 	bl	8003cf8 <ESP_UART_ReceiveHandler>
		for(int i=0;i<(int)strlen(response);i++)
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	3301      	adds	r3, #1
 8005e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e3c:	e7bf      	b.n	8005dbe <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x3a>
			break;
 8005e3e:	bf00      	nop
		}
	}

	LONGS_EQUAL(FOUND,response_state);
 8005e40:	f010 fc16 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8005e44:	4604      	mov	r4, r0
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	3338      	adds	r3, #56	; 0x38
 8005e4a:	681d      	ldr	r5, [r3, #0]
 8005e4c:	f897 6023 	ldrb.w	r6, [r7, #35]	; 0x23
 8005e50:	f010 fc1e 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005e54:	4603      	mov	r3, r0
 8005e56:	9302      	str	r3, [sp, #8]
 8005e58:	f44f 7392 	mov.w	r3, #292	; 0x124
 8005e5c:	9301      	str	r3, [sp, #4]
 8005e5e:	4b09      	ldr	r3, [pc, #36]	; (8005e84 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x100>)
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	4b09      	ldr	r3, [pc, #36]	; (8005e88 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x104>)
 8005e64:	4632      	mov	r2, r6
 8005e66:	2100      	movs	r1, #0
 8005e68:	4620      	mov	r0, r4
 8005e6a:	47a8      	blx	r5
}
 8005e6c:	bf00      	nop
 8005e6e:	372c      	adds	r7, #44	; 0x2c
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e74:	08025bdc 	.word	0x08025bdc
 8005e78:	080257c8 	.word	0x080257c8
 8005e7c:	08025b78 	.word	0x08025b78
 8005e80:	08025ba0 	.word	0x08025ba0
 8005e84:	08025848 	.word	0x08025848
 8005e88:	08025c18 	.word	0x08025c18

08005e8c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7ff fbea 	bl	8005670 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005e9c:	4a03      	ldr	r2, [pc, #12]	; (8005eac <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3708      	adds	r7, #8
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	0802a058 	.word	0x0802a058

08005eb0 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv>:
 8005eb0:	b590      	push	{r4, r7, lr}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	f240 1227 	movw	r2, #295	; 0x127
 8005ebc:	4906      	ldr	r1, [pc, #24]	; (8005ed8 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 8005ebe:	2004      	movs	r0, #4
 8005ec0:	f006 fc30 	bl	800c724 <_ZnwjPKci>
 8005ec4:	4604      	mov	r4, r0
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	f7ff ffe0 	bl	8005e8c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>
 8005ecc:	4623      	mov	r3, r4
 8005ece:	4618      	mov	r0, r3
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd90      	pop	{r4, r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	08025848 	.word	0x08025848

08005edc <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>:
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f00f f80a 	bl	8014f00 <_ZN10UtestShellC1Ev>
 8005eec:	4a03      	ldr	r2, [pc, #12]	; (8005efc <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	601a      	str	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3708      	adds	r7, #8
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	08029fac 	.word	0x08029fac

08005f00 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 8005f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f02:	b091      	sub	sp, #68	; 0x44
 8005f04:	af04      	add	r7, sp, #16
 8005f06:	6078      	str	r0, [r7, #4]
	Status response = TIMEOUT_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	mock().expectOneCall("UART_Transmit_Fake").withParameter("data",(uint8_t*)AT_CWMODE_STATION, strlen(AT_CWMODE_STATION)).withIntParameter("size", strlen(AT_CWMODE_STATION));
 8005f0e:	f107 030c 	add.w	r3, r7, #12
 8005f12:	4939      	ldr	r1, [pc, #228]	; (8005ff8 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xf8>)
 8005f14:	4618      	mov	r0, r3
 8005f16:	f008 ffc8 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8005f1a:	f107 030c 	add.w	r3, r7, #12
 8005f1e:	2100      	movs	r1, #0
 8005f20:	4618      	mov	r0, r3
 8005f22:	f007 f89b 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005f26:	4604      	mov	r4, r0
 8005f28:	6823      	ldr	r3, [r4, #0]
 8005f2a:	330c      	adds	r3, #12
 8005f2c:	681d      	ldr	r5, [r3, #0]
 8005f2e:	f107 0314 	add.w	r3, r7, #20
 8005f32:	4932      	ldr	r1, [pc, #200]	; (8005ffc <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xfc>)
 8005f34:	4618      	mov	r0, r3
 8005f36:	f008 ffb8 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8005f3a:	f107 0314 	add.w	r3, r7, #20
 8005f3e:	4619      	mov	r1, r3
 8005f40:	4620      	mov	r0, r4
 8005f42:	47a8      	blx	r5
 8005f44:	4604      	mov	r4, r0
 8005f46:	f107 031c 	add.w	r3, r7, #28
 8005f4a:	492d      	ldr	r1, [pc, #180]	; (8006000 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x100>)
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f008 ffac 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8005f52:	f107 011c 	add.w	r1, r7, #28
 8005f56:	230d      	movs	r3, #13
 8005f58:	4a2a      	ldr	r2, [pc, #168]	; (8006004 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x104>)
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	f7fe fcfa 	bl	8004954 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 8005f60:	4604      	mov	r4, r0
 8005f62:	6823      	ldr	r3, [r4, #0]
 8005f64:	332c      	adds	r3, #44	; 0x2c
 8005f66:	681d      	ldr	r5, [r3, #0]
 8005f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f6c:	4926      	ldr	r1, [pc, #152]	; (8006008 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x108>)
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f008 ff9b 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8005f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f78:	220d      	movs	r2, #13
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	47a8      	blx	r5
 8005f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f84:	4618      	mov	r0, r3
 8005f86:	f009 fb48 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8005f8a:	f107 031c 	add.w	r3, r7, #28
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f009 fb43 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8005f94:	f107 0314 	add.w	r3, r7, #20
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f009 fb3e 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8005f9e:	f107 030c 	add.w	r3, r7, #12
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f009 fb39 	bl	800f61a <_ZN12SimpleStringD1Ev>

	while(1)
	{

		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 8005fa8:	4918      	ldr	r1, [pc, #96]	; (800600c <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x10c>)
 8005faa:	4819      	ldr	r0, [pc, #100]	; (8006010 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x110>)
 8005fac:	f7fd ff0a 	bl	8003dc4 <Connect_Wifi>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		if(response != IDLE)
 8005fb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	d100      	bne.n	8005fc0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xc0>
		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 8005fbe:	e7f3      	b.n	8005fa8 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xa8>
		{
			break;
 8005fc0:	bf00      	nop
		}

	}


	LONGS_EQUAL(TIMEOUT_ERROR,response);
 8005fc2:	f010 fb55 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8005fc6:	4604      	mov	r4, r0
 8005fc8:	6823      	ldr	r3, [r4, #0]
 8005fca:	3338      	adds	r3, #56	; 0x38
 8005fcc:	681d      	ldr	r5, [r3, #0]
 8005fce:	f897 602f 	ldrb.w	r6, [r7, #47]	; 0x2f
 8005fd2:	f010 fb5d 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	9302      	str	r3, [sp, #8]
 8005fda:	f44f 739d 	mov.w	r3, #314	; 0x13a
 8005fde:	9301      	str	r3, [sp, #4]
 8005fe0:	4b0c      	ldr	r3, [pc, #48]	; (8006014 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x114>)
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	4b0c      	ldr	r3, [pc, #48]	; (8006018 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x118>)
 8005fe6:	4632      	mov	r2, r6
 8005fe8:	2101      	movs	r1, #1
 8005fea:	4620      	mov	r0, r4
 8005fec:	47a8      	blx	r5

}
 8005fee:	bf00      	nop
 8005ff0:	3734      	adds	r7, #52	; 0x34
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	08025b78 	.word	0x08025b78
 8005ffc:	08025b7c 	.word	0x08025b7c
 8006000:	08025b90 	.word	0x08025b90
 8006004:	080257cc 	.word	0x080257cc
 8006008:	08025b98 	.word	0x08025b98
 800600c:	08025c44 	.word	0x08025c44
 8006010:	08025c4c 	.word	0x08025c4c
 8006014:	08025848 	.word	0x08025848
 8006018:	08025c54 	.word	0x08025c54

0800601c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4618      	mov	r0, r3
 8006028:	f7ff fb22 	bl	8005670 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 800602c:	4a03      	ldr	r2, [pc, #12]	; (800603c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev+0x20>)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	601a      	str	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4618      	mov	r0, r3
 8006036:	3708      	adds	r7, #8
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	08029f8c 	.word	0x08029f8c

08006040 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv>:
 8006040:	b590      	push	{r4, r7, lr}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	f44f 729f 	mov.w	r2, #318	; 0x13e
 800604c:	4906      	ldr	r1, [pc, #24]	; (8006068 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv+0x28>)
 800604e:	2004      	movs	r0, #4
 8006050:	f006 fb68 	bl	800c724 <_ZnwjPKci>
 8006054:	4604      	mov	r4, r0
 8006056:	4620      	mov	r0, r4
 8006058:	f7ff ffe0 	bl	800601c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>
 800605c:	4623      	mov	r3, r4
 800605e:	4618      	mov	r0, r3
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	bd90      	pop	{r4, r7, pc}
 8006066:	bf00      	nop
 8006068:	08025848 	.word	0x08025848

0800606c <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>:
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4618      	mov	r0, r3
 8006078:	f00e ff42 	bl	8014f00 <_ZN10UtestShellC1Ev>
 800607c:	4a03      	ldr	r2, [pc, #12]	; (800608c <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev+0x20>)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	601a      	str	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4618      	mov	r0, r3
 8006086:	3708      	adds	r7, #8
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	08029ee0 	.word	0x08029ee0

08006090 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv>:
{
 8006090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006092:	b0e3      	sub	sp, #396	; 0x18c
 8006094:	af04      	add	r7, sp, #16
 8006096:	1d3b      	adds	r3, r7, #4
 8006098:	6018      	str	r0, [r3, #0]
	const char response_arr[3][50] =
 800609a:	4a8a      	ldr	r2, [pc, #552]	; (80062c4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x234>)
 800609c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80060a0:	4611      	mov	r1, r2
 80060a2:	2296      	movs	r2, #150	; 0x96
 80060a4:	4618      	mov	r0, r3
 80060a6:	f01c fbd5 	bl	8022854 <memcpy>
	{ "OK\r\n",									// station mode response (AT+CWMODE=1)
	  "OK\r\n",									//  disconnect command response (AT+CWQAP)
	  "ERROR\r\n"								// connect wifi command response (AT+CWJAP="SSID","password")
	};

	const char fake_tx_buffer[3][50] =
 80060aa:	f107 0308 	add.w	r3, r7, #8
 80060ae:	4a86      	ldr	r2, [pc, #536]	; (80062c8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x238>)
 80060b0:	4618      	mov	r0, r3
 80060b2:	4611      	mov	r1, r2
 80060b4:	2396      	movs	r3, #150	; 0x96
 80060b6:	461a      	mov	r2, r3
 80060b8:	f01c fbcc 	bl	8022854 <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 80060bc:	2300      	movs	r3, #0
 80060be:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80060c2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	dc71      	bgt.n	80061ae <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x11e>
	{
		mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t*)fake_tx_buffer[i], strlen(fake_tx_buffer[i])).withIntParameter("size", strlen(fake_tx_buffer[i]));
 80060ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80060ce:	497f      	ldr	r1, [pc, #508]	; (80062cc <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x23c>)
 80060d0:	4618      	mov	r0, r3
 80060d2:	f008 feea 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80060d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80060da:	2100      	movs	r1, #0
 80060dc:	4618      	mov	r0, r3
 80060de:	f006 ffbd 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80060e2:	4604      	mov	r4, r0
 80060e4:	6823      	ldr	r3, [r4, #0]
 80060e6:	330c      	adds	r3, #12
 80060e8:	681d      	ldr	r5, [r3, #0]
 80060ea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80060ee:	4978      	ldr	r1, [pc, #480]	; (80062d0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x240>)
 80060f0:	4618      	mov	r0, r3
 80060f2:	f008 feda 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80060f6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80060fa:	4619      	mov	r1, r3
 80060fc:	4620      	mov	r0, r4
 80060fe:	47a8      	blx	r5
 8006100:	4605      	mov	r5, r0
 8006102:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006106:	4973      	ldr	r1, [pc, #460]	; (80062d4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x244>)
 8006108:	4618      	mov	r0, r3
 800610a:	f008 fece 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800610e:	f107 0208 	add.w	r2, r7, #8
 8006112:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8006116:	2132      	movs	r1, #50	; 0x32
 8006118:	fb01 f303 	mul.w	r3, r1, r3
 800611c:	18d4      	adds	r4, r2, r3
 800611e:	f107 0208 	add.w	r2, r7, #8
 8006122:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8006126:	2132      	movs	r1, #50	; 0x32
 8006128:	fb01 f303 	mul.w	r3, r1, r3
 800612c:	4413      	add	r3, r2
 800612e:	4618      	mov	r0, r3
 8006130:	f7fa f884 	bl	800023c <strlen>
 8006134:	4603      	mov	r3, r0
 8006136:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 800613a:	4622      	mov	r2, r4
 800613c:	4628      	mov	r0, r5
 800613e:	f7fe fc09 	bl	8004954 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 8006142:	4604      	mov	r4, r0
 8006144:	6823      	ldr	r3, [r4, #0]
 8006146:	332c      	adds	r3, #44	; 0x2c
 8006148:	681d      	ldr	r5, [r3, #0]
 800614a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800614e:	4962      	ldr	r1, [pc, #392]	; (80062d8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x248>)
 8006150:	4618      	mov	r0, r3
 8006152:	f008 feaa 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8006156:	f107 0208 	add.w	r2, r7, #8
 800615a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800615e:	2132      	movs	r1, #50	; 0x32
 8006160:	fb01 f303 	mul.w	r3, r1, r3
 8006164:	4413      	add	r3, r2
 8006166:	4618      	mov	r0, r3
 8006168:	f7fa f868 	bl	800023c <strlen>
 800616c:	4603      	mov	r3, r0
 800616e:	461a      	mov	r2, r3
 8006170:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8006174:	4619      	mov	r1, r3
 8006176:	4620      	mov	r0, r4
 8006178:	47a8      	blx	r5
 800617a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800617e:	4618      	mov	r0, r3
 8006180:	f009 fa4b 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8006184:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006188:	4618      	mov	r0, r3
 800618a:	f009 fa46 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800618e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006192:	4618      	mov	r0, r3
 8006194:	f009 fa41 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8006198:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800619c:	4618      	mov	r0, r3
 800619e:	f009 fa3c 	bl	800f61a <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 80061a2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80061a6:	3301      	adds	r3, #1
 80061a8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80061ac:	e789      	b.n	80060c2 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x32>
	}
	Status response = IDLE;
 80061ae:	2304      	movs	r3, #4
 80061b0:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
	int i = 0;
 80061b4:	2300      	movs	r3, #0
 80061b6:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 80061ba:	4948      	ldr	r1, [pc, #288]	; (80062dc <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x24c>)
 80061bc:	4848      	ldr	r0, [pc, #288]	; (80062e0 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x250>)
 80061be:	f7fd fe01 	bl	8003dc4 <Connect_Wifi>
 80061c2:	4603      	mov	r3, r0
 80061c4:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
		if(response != IDLE)
 80061c8:	f897 316b 	ldrb.w	r3, [r7, #363]	; 0x16b
 80061cc:	2b04      	cmp	r3, #4
 80061ce:	d15d      	bne.n	800628c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1fc>
		{
			break;
		}

		if(i<3)
 80061d0:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	dcf0      	bgt.n	80061ba <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x12a>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80061d8:	2300      	movs	r3, #0
 80061da:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80061de:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80061e2:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80061e6:	2132      	movs	r1, #50	; 0x32
 80061e8:	fb01 f303 	mul.w	r3, r1, r3
 80061ec:	4413      	add	r3, r2
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fa f824 	bl	800023c <strlen>
 80061f4:	4603      	mov	r3, r0
 80061f6:	461a      	mov	r2, r3
 80061f8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80061fc:	4293      	cmp	r3, r2
 80061fe:	da3f      	bge.n	8006280 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f0>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8006200:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8006204:	4931      	ldr	r1, [pc, #196]	; (80062cc <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x23c>)
 8006206:	4618      	mov	r0, r3
 8006208:	f008 fe4f 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800620c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8006210:	2100      	movs	r1, #0
 8006212:	4618      	mov	r0, r3
 8006214:	f006 ff22 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006218:	4604      	mov	r4, r0
 800621a:	6823      	ldr	r3, [r4, #0]
 800621c:	330c      	adds	r3, #12
 800621e:	681d      	ldr	r5, [r3, #0]
 8006220:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8006224:	492f      	ldr	r1, [pc, #188]	; (80062e4 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x254>)
 8006226:	4618      	mov	r0, r3
 8006228:	f008 fe3f 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800622c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8006230:	4619      	mov	r1, r3
 8006232:	4620      	mov	r0, r4
 8006234:	47a8      	blx	r5
 8006236:	4603      	mov	r3, r0
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	3264      	adds	r2, #100	; 0x64
 800623c:	6812      	ldr	r2, [r2, #0]
 800623e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006242:	2032      	movs	r0, #50	; 0x32
 8006244:	fb00 f101 	mul.w	r1, r0, r1
 8006248:	f507 70bc 	add.w	r0, r7, #376	; 0x178
 800624c:	4408      	add	r0, r1
 800624e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8006252:	4401      	add	r1, r0
 8006254:	39d8      	subs	r1, #216	; 0xd8
 8006256:	7809      	ldrb	r1, [r1, #0]
 8006258:	4618      	mov	r0, r3
 800625a:	4790      	blx	r2
 800625c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8006260:	4618      	mov	r0, r3
 8006262:	f009 f9da 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8006266:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800626a:	4618      	mov	r0, r3
 800626c:	f009 f9d5 	bl	800f61a <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006270:	f7fd fd42 	bl	8003cf8 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006274:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8006278:	3301      	adds	r3, #1
 800627a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800627e:	e7ae      	b.n	80061de <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x14e>
			}
			i++;
 8006280:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8006284:	3301      	adds	r3, #1
 8006286:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
		}

	}
 800628a:	e796      	b.n	80061ba <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x12a>
			break;
 800628c:	bf00      	nop
	LONGS_EQUAL(STATUS_ERROR,response);
 800628e:	f010 f9ef 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8006292:	4604      	mov	r4, r0
 8006294:	6823      	ldr	r3, [r4, #0]
 8006296:	3338      	adds	r3, #56	; 0x38
 8006298:	681d      	ldr	r5, [r3, #0]
 800629a:	f897 616b 	ldrb.w	r6, [r7, #363]	; 0x16b
 800629e:	f010 f9f7 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80062a2:	4603      	mov	r3, r0
 80062a4:	9302      	str	r3, [sp, #8]
 80062a6:	f44f 73b3 	mov.w	r3, #358	; 0x166
 80062aa:	9301      	str	r3, [sp, #4]
 80062ac:	4b0e      	ldr	r3, [pc, #56]	; (80062e8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x258>)
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	4b0e      	ldr	r3, [pc, #56]	; (80062ec <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x25c>)
 80062b2:	4632      	mov	r2, r6
 80062b4:	2103      	movs	r1, #3
 80062b6:	4620      	mov	r0, r4
 80062b8:	47a8      	blx	r5

}
 80062ba:	bf00      	nop
 80062bc:	f507 77be 	add.w	r7, r7, #380	; 0x17c
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062c4:	08025cac 	.word	0x08025cac
 80062c8:	08025d44 	.word	0x08025d44
 80062cc:	08025b78 	.word	0x08025b78
 80062d0:	08025b7c 	.word	0x08025b7c
 80062d4:	08025b90 	.word	0x08025b90
 80062d8:	08025b98 	.word	0x08025b98
 80062dc:	08025c44 	.word	0x08025c44
 80062e0:	08025c4c 	.word	0x08025c4c
 80062e4:	08025ba0 	.word	0x08025ba0
 80062e8:	08025848 	.word	0x08025848
 80062ec:	08025c80 	.word	0x08025c80

080062f0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7ff f9b8 	bl	8005670 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006300:	4a03      	ldr	r2, [pc, #12]	; (8006310 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev+0x20>)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	601a      	str	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4618      	mov	r0, r3
 800630a:	3708      	adds	r7, #8
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	08029ec0 	.word	0x08029ec0

08006314 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv>:
 8006314:	b590      	push	{r4, r7, lr}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8006320:	4906      	ldr	r1, [pc, #24]	; (800633c <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv+0x28>)
 8006322:	2004      	movs	r0, #4
 8006324:	f006 f9fe 	bl	800c724 <_ZnwjPKci>
 8006328:	4604      	mov	r4, r0
 800632a:	4620      	mov	r0, r4
 800632c:	f7ff ffe0 	bl	80062f0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>
 8006330:	4623      	mov	r3, r4
 8006332:	4618      	mov	r0, r3
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	bd90      	pop	{r4, r7, pc}
 800633a:	bf00      	nop
 800633c:	08025848 	.word	0x08025848

08006340 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>:
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4618      	mov	r0, r3
 800634c:	f00e fdd8 	bl	8014f00 <_ZN10UtestShellC1Ev>
 8006350:	4a03      	ldr	r2, [pc, #12]	; (8006360 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev+0x20>)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	601a      	str	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4618      	mov	r0, r3
 800635a:	3708      	adds	r7, #8
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	08029e14 	.word	0x08029e14

08006364 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv>:
{
 8006364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006366:	b0e3      	sub	sp, #396	; 0x18c
 8006368:	af04      	add	r7, sp, #16
 800636a:	1d3b      	adds	r3, r7, #4
 800636c:	6018      	str	r0, [r3, #0]
	const char response_arr[3][50] =
 800636e:	4a89      	ldr	r2, [pc, #548]	; (8006594 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x230>)
 8006370:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006374:	4611      	mov	r1, r2
 8006376:	2296      	movs	r2, #150	; 0x96
 8006378:	4618      	mov	r0, r3
 800637a:	f01c fa6b 	bl	8022854 <memcpy>
	{ "OK\r\n",
	  "OK\r\n",
	  "OK\r\n"
	};

	const char fake_tx_buffer[3][50] =
 800637e:	f107 0308 	add.w	r3, r7, #8
 8006382:	4a85      	ldr	r2, [pc, #532]	; (8006598 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x234>)
 8006384:	4618      	mov	r0, r3
 8006386:	4611      	mov	r1, r2
 8006388:	2396      	movs	r3, #150	; 0x96
 800638a:	461a      	mov	r2, r3
 800638c:	f01c fa62 	bl	8022854 <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8006390:	2300      	movs	r3, #0
 8006392:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8006396:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800639a:	2b02      	cmp	r3, #2
 800639c:	dc71      	bgt.n	8006482 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x11e>
	{
		mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t*)fake_tx_buffer[i], strlen(fake_tx_buffer[i])).withIntParameter("size", strlen(fake_tx_buffer[i]));
 800639e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80063a2:	497e      	ldr	r1, [pc, #504]	; (800659c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x238>)
 80063a4:	4618      	mov	r0, r3
 80063a6:	f008 fd80 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80063aa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80063ae:	2100      	movs	r1, #0
 80063b0:	4618      	mov	r0, r3
 80063b2:	f006 fe53 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80063b6:	4604      	mov	r4, r0
 80063b8:	6823      	ldr	r3, [r4, #0]
 80063ba:	330c      	adds	r3, #12
 80063bc:	681d      	ldr	r5, [r3, #0]
 80063be:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80063c2:	4977      	ldr	r1, [pc, #476]	; (80065a0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x23c>)
 80063c4:	4618      	mov	r0, r3
 80063c6:	f008 fd70 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80063ca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80063ce:	4619      	mov	r1, r3
 80063d0:	4620      	mov	r0, r4
 80063d2:	47a8      	blx	r5
 80063d4:	4605      	mov	r5, r0
 80063d6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80063da:	4972      	ldr	r1, [pc, #456]	; (80065a4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x240>)
 80063dc:	4618      	mov	r0, r3
 80063de:	f008 fd64 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80063e2:	f107 0208 	add.w	r2, r7, #8
 80063e6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80063ea:	2132      	movs	r1, #50	; 0x32
 80063ec:	fb01 f303 	mul.w	r3, r1, r3
 80063f0:	18d4      	adds	r4, r2, r3
 80063f2:	f107 0208 	add.w	r2, r7, #8
 80063f6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80063fa:	2132      	movs	r1, #50	; 0x32
 80063fc:	fb01 f303 	mul.w	r3, r1, r3
 8006400:	4413      	add	r3, r2
 8006402:	4618      	mov	r0, r3
 8006404:	f7f9 ff1a 	bl	800023c <strlen>
 8006408:	4603      	mov	r3, r0
 800640a:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 800640e:	4622      	mov	r2, r4
 8006410:	4628      	mov	r0, r5
 8006412:	f7fe fa9f 	bl	8004954 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 8006416:	4604      	mov	r4, r0
 8006418:	6823      	ldr	r3, [r4, #0]
 800641a:	332c      	adds	r3, #44	; 0x2c
 800641c:	681d      	ldr	r5, [r3, #0]
 800641e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8006422:	4961      	ldr	r1, [pc, #388]	; (80065a8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x244>)
 8006424:	4618      	mov	r0, r3
 8006426:	f008 fd40 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800642a:	f107 0208 	add.w	r2, r7, #8
 800642e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8006432:	2132      	movs	r1, #50	; 0x32
 8006434:	fb01 f303 	mul.w	r3, r1, r3
 8006438:	4413      	add	r3, r2
 800643a:	4618      	mov	r0, r3
 800643c:	f7f9 fefe 	bl	800023c <strlen>
 8006440:	4603      	mov	r3, r0
 8006442:	461a      	mov	r2, r3
 8006444:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8006448:	4619      	mov	r1, r3
 800644a:	4620      	mov	r0, r4
 800644c:	47a8      	blx	r5
 800644e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8006452:	4618      	mov	r0, r3
 8006454:	f009 f8e1 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8006458:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800645c:	4618      	mov	r0, r3
 800645e:	f009 f8dc 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8006462:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006466:	4618      	mov	r0, r3
 8006468:	f009 f8d7 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800646c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006470:	4618      	mov	r0, r3
 8006472:	f009 f8d2 	bl	800f61a <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8006476:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800647a:	3301      	adds	r3, #1
 800647c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8006480:	e789      	b.n	8006396 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x32>
	}
	Status response;
	int i = 0;
 8006482:	2300      	movs	r3, #0
 8006484:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8006488:	4948      	ldr	r1, [pc, #288]	; (80065ac <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x248>)
 800648a:	4849      	ldr	r0, [pc, #292]	; (80065b0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x24c>)
 800648c:	f7fd fc9a 	bl	8003dc4 <Connect_Wifi>
 8006490:	4603      	mov	r3, r0
 8006492:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
		if(response != IDLE)
 8006496:	f897 316b 	ldrb.w	r3, [r7, #363]	; 0x16b
 800649a:	2b04      	cmp	r3, #4
 800649c:	d15d      	bne.n	800655a <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f6>
		{
			break;
		}

		if(i<3)
 800649e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	dcf0      	bgt.n	8006488 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x124>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80064a6:	2300      	movs	r3, #0
 80064a8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80064ac:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80064b0:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80064b4:	2132      	movs	r1, #50	; 0x32
 80064b6:	fb01 f303 	mul.w	r3, r1, r3
 80064ba:	4413      	add	r3, r2
 80064bc:	4618      	mov	r0, r3
 80064be:	f7f9 febd 	bl	800023c <strlen>
 80064c2:	4603      	mov	r3, r0
 80064c4:	461a      	mov	r2, r3
 80064c6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80064ca:	4293      	cmp	r3, r2
 80064cc:	da3f      	bge.n	800654e <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1ea>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 80064ce:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80064d2:	4932      	ldr	r1, [pc, #200]	; (800659c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x238>)
 80064d4:	4618      	mov	r0, r3
 80064d6:	f008 fce8 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80064da:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80064de:	2100      	movs	r1, #0
 80064e0:	4618      	mov	r0, r3
 80064e2:	f006 fdbb 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80064e6:	4604      	mov	r4, r0
 80064e8:	6823      	ldr	r3, [r4, #0]
 80064ea:	330c      	adds	r3, #12
 80064ec:	681d      	ldr	r5, [r3, #0]
 80064ee:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80064f2:	4930      	ldr	r1, [pc, #192]	; (80065b4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x250>)
 80064f4:	4618      	mov	r0, r3
 80064f6:	f008 fcd8 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80064fa:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80064fe:	4619      	mov	r1, r3
 8006500:	4620      	mov	r0, r4
 8006502:	47a8      	blx	r5
 8006504:	4603      	mov	r3, r0
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	3264      	adds	r2, #100	; 0x64
 800650a:	6812      	ldr	r2, [r2, #0]
 800650c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006510:	2032      	movs	r0, #50	; 0x32
 8006512:	fb00 f101 	mul.w	r1, r0, r1
 8006516:	f507 70bc 	add.w	r0, r7, #376	; 0x178
 800651a:	4408      	add	r0, r1
 800651c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8006520:	4401      	add	r1, r0
 8006522:	39d8      	subs	r1, #216	; 0xd8
 8006524:	7809      	ldrb	r1, [r1, #0]
 8006526:	4618      	mov	r0, r3
 8006528:	4790      	blx	r2
 800652a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800652e:	4618      	mov	r0, r3
 8006530:	f009 f873 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8006534:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8006538:	4618      	mov	r0, r3
 800653a:	f009 f86e 	bl	800f61a <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 800653e:	f7fd fbdb 	bl	8003cf8 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006542:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8006546:	3301      	adds	r3, #1
 8006548:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800654c:	e7ae      	b.n	80064ac <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x148>
			}
			i++;
 800654e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8006552:	3301      	adds	r3, #1
 8006554:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
		}

	}
 8006558:	e796      	b.n	8006488 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x124>
			break;
 800655a:	bf00      	nop
	LONGS_EQUAL(STATUS_OK,response);
 800655c:	f010 f888 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8006560:	4604      	mov	r4, r0
 8006562:	6823      	ldr	r3, [r4, #0]
 8006564:	3338      	adds	r3, #56	; 0x38
 8006566:	681d      	ldr	r5, [r3, #0]
 8006568:	f897 616b 	ldrb.w	r6, [r7, #363]	; 0x16b
 800656c:	f010 f890 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006570:	4603      	mov	r3, r0
 8006572:	9302      	str	r3, [sp, #8]
 8006574:	f44f 73c9 	mov.w	r3, #402	; 0x192
 8006578:	9301      	str	r3, [sp, #4]
 800657a:	4b0f      	ldr	r3, [pc, #60]	; (80065b8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x254>)
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	4b0f      	ldr	r3, [pc, #60]	; (80065bc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x258>)
 8006580:	4632      	mov	r2, r6
 8006582:	2102      	movs	r1, #2
 8006584:	4620      	mov	r0, r4
 8006586:	47a8      	blx	r5

}
 8006588:	bf00      	nop
 800658a:	f507 77be 	add.w	r7, r7, #380	; 0x17c
 800658e:	46bd      	mov	sp, r7
 8006590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006592:	bf00      	nop
 8006594:	08025e04 	.word	0x08025e04
 8006598:	08025d44 	.word	0x08025d44
 800659c:	08025b78 	.word	0x08025b78
 80065a0:	08025b7c 	.word	0x08025b7c
 80065a4:	08025b90 	.word	0x08025b90
 80065a8:	08025b98 	.word	0x08025b98
 80065ac:	08025c44 	.word	0x08025c44
 80065b0:	08025c4c 	.word	0x08025c4c
 80065b4:	08025ba0 	.word	0x08025ba0
 80065b8:	08025848 	.word	0x08025848
 80065bc:	08025ddc 	.word	0x08025ddc

080065c0 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7ff f850 	bl	8005670 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80065d0:	4a03      	ldr	r2, [pc, #12]	; (80065e0 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4618      	mov	r0, r3
 80065da:	3708      	adds	r7, #8
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	08029df4 	.word	0x08029df4

080065e4 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv>:
 80065e4:	b590      	push	{r4, r7, lr}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	f44f 72cb 	mov.w	r2, #406	; 0x196
 80065f0:	4906      	ldr	r1, [pc, #24]	; (800660c <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 80065f2:	2004      	movs	r0, #4
 80065f4:	f006 f896 	bl	800c724 <_ZnwjPKci>
 80065f8:	4604      	mov	r4, r0
 80065fa:	4620      	mov	r0, r4
 80065fc:	f7ff ffe0 	bl	80065c0 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>
 8006600:	4623      	mov	r3, r4
 8006602:	4618      	mov	r0, r3
 8006604:	370c      	adds	r7, #12
 8006606:	46bd      	mov	sp, r7
 8006608:	bd90      	pop	{r4, r7, pc}
 800660a:	bf00      	nop
 800660c:	08025848 	.word	0x08025848

08006610 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>:
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4618      	mov	r0, r3
 800661c:	f00e fc70 	bl	8014f00 <_ZN10UtestShellC1Ev>
 8006620:	4a03      	ldr	r2, [pc, #12]	; (8006630 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4618      	mov	r0, r3
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	08029d48 	.word	0x08029d48

08006634 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 8006634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006636:	b091      	sub	sp, #68	; 0x44
 8006638:	af04      	add	r7, sp, #16
 800663a:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t*)AT_CWQAP, strlen(AT_CWQAP)).withIntParameter("size", strlen(AT_CWQAP));
 800663c:	f107 030c 	add.w	r3, r7, #12
 8006640:	4937      	ldr	r1, [pc, #220]	; (8006720 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xec>)
 8006642:	4618      	mov	r0, r3
 8006644:	f008 fc31 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8006648:	f107 030c 	add.w	r3, r7, #12
 800664c:	2100      	movs	r1, #0
 800664e:	4618      	mov	r0, r3
 8006650:	f006 fd04 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006654:	4604      	mov	r4, r0
 8006656:	6823      	ldr	r3, [r4, #0]
 8006658:	330c      	adds	r3, #12
 800665a:	681d      	ldr	r5, [r3, #0]
 800665c:	f107 0314 	add.w	r3, r7, #20
 8006660:	4930      	ldr	r1, [pc, #192]	; (8006724 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xf0>)
 8006662:	4618      	mov	r0, r3
 8006664:	f008 fc21 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8006668:	f107 0314 	add.w	r3, r7, #20
 800666c:	4619      	mov	r1, r3
 800666e:	4620      	mov	r0, r4
 8006670:	47a8      	blx	r5
 8006672:	4604      	mov	r4, r0
 8006674:	f107 031c 	add.w	r3, r7, #28
 8006678:	492b      	ldr	r1, [pc, #172]	; (8006728 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xf4>)
 800667a:	4618      	mov	r0, r3
 800667c:	f008 fc15 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8006680:	f107 011c 	add.w	r1, r7, #28
 8006684:	230a      	movs	r3, #10
 8006686:	4a29      	ldr	r2, [pc, #164]	; (800672c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xf8>)
 8006688:	4620      	mov	r0, r4
 800668a:	f7fe f963 	bl	8004954 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 800668e:	4604      	mov	r4, r0
 8006690:	6823      	ldr	r3, [r4, #0]
 8006692:	332c      	adds	r3, #44	; 0x2c
 8006694:	681d      	ldr	r5, [r3, #0]
 8006696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800669a:	4925      	ldr	r1, [pc, #148]	; (8006730 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xfc>)
 800669c:	4618      	mov	r0, r3
 800669e:	f008 fc04 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80066a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066a6:	220a      	movs	r2, #10
 80066a8:	4619      	mov	r1, r3
 80066aa:	4620      	mov	r0, r4
 80066ac:	47a8      	blx	r5
 80066ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066b2:	4618      	mov	r0, r3
 80066b4:	f008 ffb1 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80066b8:	f107 031c 	add.w	r3, r7, #28
 80066bc:	4618      	mov	r0, r3
 80066be:	f008 ffac 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80066c2:	f107 0314 	add.w	r3, r7, #20
 80066c6:	4618      	mov	r0, r3
 80066c8:	f008 ffa7 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80066cc:	f107 030c 	add.w	r3, r7, #12
 80066d0:	4618      	mov	r0, r3
 80066d2:	f008 ffa2 	bl	800f61a <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 80066d6:	f7fd fbaf 	bl	8003e38 <Disconnect_Wifi>
 80066da:	4603      	mov	r3, r0
 80066dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		if(response != IDLE)
 80066e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066e4:	2b04      	cmp	r3, #4
 80066e6:	d100      	bne.n	80066ea <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xb6>
		response = Disconnect_Wifi();
 80066e8:	e7f5      	b.n	80066d6 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xa2>
			break;
 80066ea:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response);
 80066ec:	f00f ffc0 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 80066f0:	4604      	mov	r4, r0
 80066f2:	6823      	ldr	r3, [r4, #0]
 80066f4:	3338      	adds	r3, #56	; 0x38
 80066f6:	681d      	ldr	r5, [r3, #0]
 80066f8:	f897 602f 	ldrb.w	r6, [r7, #47]	; 0x2f
 80066fc:	f00f ffc8 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006700:	4603      	mov	r3, r0
 8006702:	9302      	str	r3, [sp, #8]
 8006704:	f240 13a5 	movw	r3, #421	; 0x1a5
 8006708:	9301      	str	r3, [sp, #4]
 800670a:	4b0a      	ldr	r3, [pc, #40]	; (8006734 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x100>)
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	4b0a      	ldr	r3, [pc, #40]	; (8006738 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x104>)
 8006710:	4632      	mov	r2, r6
 8006712:	2101      	movs	r1, #1
 8006714:	4620      	mov	r0, r4
 8006716:	47a8      	blx	r5
}
 8006718:	bf00      	nop
 800671a:	3734      	adds	r7, #52	; 0x34
 800671c:	46bd      	mov	sp, r7
 800671e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006720:	08025b78 	.word	0x08025b78
 8006724:	08025b7c 	.word	0x08025b7c
 8006728:	08025b90 	.word	0x08025b90
 800672c:	080257dc 	.word	0x080257dc
 8006730:	08025b98 	.word	0x08025b98
 8006734:	08025848 	.word	0x08025848
 8006738:	08025c54 	.word	0x08025c54

0800673c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4618      	mov	r0, r3
 8006748:	f7fe ff92 	bl	8005670 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 800674c:	4a03      	ldr	r2, [pc, #12]	; (800675c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev+0x20>)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	601a      	str	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4618      	mov	r0, r3
 8006756:	3708      	adds	r7, #8
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	08029d28 	.word	0x08029d28

08006760 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv>:
 8006760:	b590      	push	{r4, r7, lr}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
 800676c:	4906      	ldr	r1, [pc, #24]	; (8006788 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv+0x28>)
 800676e:	2004      	movs	r0, #4
 8006770:	f005 ffd8 	bl	800c724 <_ZnwjPKci>
 8006774:	4604      	mov	r4, r0
 8006776:	4620      	mov	r0, r4
 8006778:	f7ff ffe0 	bl	800673c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>
 800677c:	4623      	mov	r3, r4
 800677e:	4618      	mov	r0, r3
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	bd90      	pop	{r4, r7, pc}
 8006786:	bf00      	nop
 8006788:	08025848 	.word	0x08025848

0800678c <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>:
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4618      	mov	r0, r3
 8006798:	f00e fbb2 	bl	8014f00 <_ZN10UtestShellC1Ev>
 800679c:	4a03      	ldr	r2, [pc, #12]	; (80067ac <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev+0x20>)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	601a      	str	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4618      	mov	r0, r3
 80067a6:	3708      	adds	r7, #8
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	08029c7c 	.word	0x08029c7c

080067b0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv>:
{
 80067b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067b2:	b095      	sub	sp, #84	; 0x54
 80067b4:	af04      	add	r7, sp, #16
 80067b6:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t*)AT_CWQAP, strlen(AT_CWQAP)).withIntParameter("size", strlen(AT_CWQAP));
 80067b8:	f107 0308 	add.w	r3, r7, #8
 80067bc:	4954      	ldr	r1, [pc, #336]	; (8006910 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x160>)
 80067be:	4618      	mov	r0, r3
 80067c0:	f008 fb73 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80067c4:	f107 0308 	add.w	r3, r7, #8
 80067c8:	2100      	movs	r1, #0
 80067ca:	4618      	mov	r0, r3
 80067cc:	f006 fc46 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80067d0:	4604      	mov	r4, r0
 80067d2:	6823      	ldr	r3, [r4, #0]
 80067d4:	330c      	adds	r3, #12
 80067d6:	681d      	ldr	r5, [r3, #0]
 80067d8:	f107 0310 	add.w	r3, r7, #16
 80067dc:	494d      	ldr	r1, [pc, #308]	; (8006914 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x164>)
 80067de:	4618      	mov	r0, r3
 80067e0:	f008 fb63 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80067e4:	f107 0310 	add.w	r3, r7, #16
 80067e8:	4619      	mov	r1, r3
 80067ea:	4620      	mov	r0, r4
 80067ec:	47a8      	blx	r5
 80067ee:	4604      	mov	r4, r0
 80067f0:	f107 0318 	add.w	r3, r7, #24
 80067f4:	4948      	ldr	r1, [pc, #288]	; (8006918 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x168>)
 80067f6:	4618      	mov	r0, r3
 80067f8:	f008 fb57 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80067fc:	f107 0118 	add.w	r1, r7, #24
 8006800:	230a      	movs	r3, #10
 8006802:	4a46      	ldr	r2, [pc, #280]	; (800691c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x16c>)
 8006804:	4620      	mov	r0, r4
 8006806:	f7fe f8a5 	bl	8004954 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 800680a:	4604      	mov	r4, r0
 800680c:	6823      	ldr	r3, [r4, #0]
 800680e:	332c      	adds	r3, #44	; 0x2c
 8006810:	681d      	ldr	r5, [r3, #0]
 8006812:	f107 0320 	add.w	r3, r7, #32
 8006816:	4942      	ldr	r1, [pc, #264]	; (8006920 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x170>)
 8006818:	4618      	mov	r0, r3
 800681a:	f008 fb46 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800681e:	f107 0320 	add.w	r3, r7, #32
 8006822:	220a      	movs	r2, #10
 8006824:	4619      	mov	r1, r3
 8006826:	4620      	mov	r0, r4
 8006828:	47a8      	blx	r5
 800682a:	f107 0320 	add.w	r3, r7, #32
 800682e:	4618      	mov	r0, r3
 8006830:	f008 fef3 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8006834:	f107 0318 	add.w	r3, r7, #24
 8006838:	4618      	mov	r0, r3
 800683a:	f008 feee 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800683e:	f107 0310 	add.w	r3, r7, #16
 8006842:	4618      	mov	r0, r3
 8006844:	f008 fee9 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8006848:	f107 0308 	add.w	r3, r7, #8
 800684c:	4618      	mov	r0, r3
 800684e:	f008 fee4 	bl	800f61a <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 8006852:	f7fd faf1 	bl	8003e38 <Disconnect_Wifi>
 8006856:	4603      	mov	r3, r0
 8006858:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

		if(response != IDLE)
 800685c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006860:	2b04      	cmp	r3, #4
 8006862:	d139      	bne.n	80068d8 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x128>
			break;

		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 8006864:	2300      	movs	r3, #0
 8006866:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800686a:	2b01      	cmp	r3, #1
 800686c:	dcf1      	bgt.n	8006852 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0xa2>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)AT_RESPONSE_OK[j]);
 800686e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006872:	4927      	ldr	r1, [pc, #156]	; (8006910 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x160>)
 8006874:	4618      	mov	r0, r3
 8006876:	f008 fb18 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800687a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800687e:	2100      	movs	r1, #0
 8006880:	4618      	mov	r0, r3
 8006882:	f006 fbeb 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006886:	4604      	mov	r4, r0
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	330c      	adds	r3, #12
 800688c:	681d      	ldr	r5, [r3, #0]
 800688e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006892:	4924      	ldr	r1, [pc, #144]	; (8006924 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x174>)
 8006894:	4618      	mov	r0, r3
 8006896:	f008 fb08 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800689a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800689e:	4619      	mov	r1, r3
 80068a0:	4620      	mov	r0, r4
 80068a2:	47a8      	blx	r5
 80068a4:	4603      	mov	r3, r0
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	3264      	adds	r2, #100	; 0x64
 80068aa:	6812      	ldr	r2, [r2, #0]
 80068ac:	481e      	ldr	r0, [pc, #120]	; (8006928 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x178>)
 80068ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068b0:	4401      	add	r1, r0
 80068b2:	7809      	ldrb	r1, [r1, #0]
 80068b4:	4618      	mov	r0, r3
 80068b6:	4790      	blx	r2
 80068b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80068bc:	4618      	mov	r0, r3
 80068be:	f008 feac 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80068c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80068c6:	4618      	mov	r0, r3
 80068c8:	f008 fea7 	bl	800f61a <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 80068cc:	f7fd fa14 	bl	8003cf8 <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 80068d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d2:	3301      	adds	r3, #1
 80068d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068d6:	e7c7      	b.n	8006868 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0xb8>
			break;
 80068d8:	bf00      	nop
		}

	}

	LONGS_EQUAL(STATUS_OK,response);
 80068da:	f00f fec9 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 80068de:	4604      	mov	r4, r0
 80068e0:	6823      	ldr	r3, [r4, #0]
 80068e2:	3338      	adds	r3, #56	; 0x38
 80068e4:	681d      	ldr	r5, [r3, #0]
 80068e6:	f897 603b 	ldrb.w	r6, [r7, #59]	; 0x3b
 80068ea:	f00f fed1 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80068ee:	4603      	mov	r3, r0
 80068f0:	9302      	str	r3, [sp, #8]
 80068f2:	f240 13bd 	movw	r3, #445	; 0x1bd
 80068f6:	9301      	str	r3, [sp, #4]
 80068f8:	4b0c      	ldr	r3, [pc, #48]	; (800692c <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x17c>)
 80068fa:	9300      	str	r3, [sp, #0]
 80068fc:	4b0c      	ldr	r3, [pc, #48]	; (8006930 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x180>)
 80068fe:	4632      	mov	r2, r6
 8006900:	2102      	movs	r1, #2
 8006902:	4620      	mov	r0, r4
 8006904:	47a8      	blx	r5
}
 8006906:	bf00      	nop
 8006908:	3744      	adds	r7, #68	; 0x44
 800690a:	46bd      	mov	sp, r7
 800690c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800690e:	bf00      	nop
 8006910:	08025b78 	.word	0x08025b78
 8006914:	08025b7c 	.word	0x08025b7c
 8006918:	08025b90 	.word	0x08025b90
 800691c:	080257dc 	.word	0x080257dc
 8006920:	08025b98 	.word	0x08025b98
 8006924:	08025ba0 	.word	0x08025ba0
 8006928:	080257c8 	.word	0x080257c8
 800692c:	08025848 	.word	0x08025848
 8006930:	08025ddc 	.word	0x08025ddc

08006934 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Command_Process_Test)
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4618      	mov	r0, r3
 8006940:	f7fe fe96 	bl	8005670 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006944:	4a03      	ldr	r2, [pc, #12]	; (8006954 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev+0x20>)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	601a      	str	r2, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4618      	mov	r0, r3
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	08029c5c 	.word	0x08029c5c

08006958 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShell10createTestEv>:
 8006958:	b590      	push	{r4, r7, lr}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8006964:	4906      	ldr	r1, [pc, #24]	; (8006980 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShell10createTestEv+0x28>)
 8006966:	2004      	movs	r0, #4
 8006968:	f005 fedc 	bl	800c724 <_ZnwjPKci>
 800696c:	4604      	mov	r4, r0
 800696e:	4620      	mov	r0, r4
 8006970:	f7ff ffe0 	bl	8006934 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev>
 8006974:	4623      	mov	r3, r4
 8006976:	4618      	mov	r0, r3
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	bd90      	pop	{r4, r7, pc}
 800697e:	bf00      	nop
 8006980:	08025848 	.word	0x08025848

08006984 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev>:
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4618      	mov	r0, r3
 8006990:	f00e fab6 	bl	8014f00 <_ZN10UtestShellC1Ev>
 8006994:	4a03      	ldr	r2, [pc, #12]	; (80069a4 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev+0x20>)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	601a      	str	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4618      	mov	r0, r3
 800699e:	3708      	adds	r7, #8
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	08029bb0 	.word	0x08029bb0

080069a8 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv>:
{
 80069a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069aa:	b09d      	sub	sp, #116	; 0x74
 80069ac:	af04      	add	r7, sp, #16
 80069ae:	6078      	str	r0, [r7, #4]
	char *response_arr[3] =
 80069b0:	4a7e      	ldr	r2, [pc, #504]	; (8006bac <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x204>)
 80069b2:	f107 0314 	add.w	r3, r7, #20
 80069b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80069b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{ (char*)AT_RESPONSE_OK,									// station mode response
	  (char*)AT_RESPONSE_OK,									// check wifi connection response
	  (char*)AT_RESPONSE_OK										// connect wifi command response
	};

	char *fake_command_buffer[3] =
 80069bc:	4a7c      	ldr	r2, [pc, #496]	; (8006bb0 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x208>)
 80069be:	f107 0308 	add.w	r3, r7, #8
 80069c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80069c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		(char*)AT_CWMODE_STATION,
		(char*)AT_CWQAP,
		(char*)"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 80069c8:	2300      	movs	r3, #0
 80069ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	dc6c      	bgt.n	8006aac <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x104>
	{
		mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t*)fake_command_buffer[i], strlen(fake_command_buffer[i])).withIntParameter("size", strlen(fake_command_buffer[i]));
 80069d2:	f107 0320 	add.w	r3, r7, #32
 80069d6:	4977      	ldr	r1, [pc, #476]	; (8006bb4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x20c>)
 80069d8:	4618      	mov	r0, r3
 80069da:	f008 fa66 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80069de:	f107 0320 	add.w	r3, r7, #32
 80069e2:	2100      	movs	r1, #0
 80069e4:	4618      	mov	r0, r3
 80069e6:	f006 fb39 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80069ea:	4604      	mov	r4, r0
 80069ec:	6823      	ldr	r3, [r4, #0]
 80069ee:	330c      	adds	r3, #12
 80069f0:	681d      	ldr	r5, [r3, #0]
 80069f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80069f6:	4970      	ldr	r1, [pc, #448]	; (8006bb8 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x210>)
 80069f8:	4618      	mov	r0, r3
 80069fa:	f008 fa56 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80069fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a02:	4619      	mov	r1, r3
 8006a04:	4620      	mov	r0, r4
 8006a06:	47a8      	blx	r5
 8006a08:	4605      	mov	r5, r0
 8006a0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006a0e:	496b      	ldr	r1, [pc, #428]	; (8006bbc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x214>)
 8006a10:	4618      	mov	r0, r3
 8006a12:	f008 fa4a 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8006a16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006a1e:	4413      	add	r3, r2
 8006a20:	f853 4c58 	ldr.w	r4, [r3, #-88]
 8006a24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006a2c:	4413      	add	r3, r2
 8006a2e:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7f9 fc02 	bl	800023c <strlen>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8006a3e:	4622      	mov	r2, r4
 8006a40:	4628      	mov	r0, r5
 8006a42:	f7fd ff87 	bl	8004954 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 8006a46:	4604      	mov	r4, r0
 8006a48:	6823      	ldr	r3, [r4, #0]
 8006a4a:	332c      	adds	r3, #44	; 0x2c
 8006a4c:	681d      	ldr	r5, [r3, #0]
 8006a4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006a52:	495b      	ldr	r1, [pc, #364]	; (8006bc0 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x218>)
 8006a54:	4618      	mov	r0, r3
 8006a56:	f008 fa28 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8006a5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006a62:	4413      	add	r3, r2
 8006a64:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7f9 fbe7 	bl	800023c <strlen>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	461a      	mov	r2, r3
 8006a72:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006a76:	4619      	mov	r1, r3
 8006a78:	4620      	mov	r0, r4
 8006a7a:	47a8      	blx	r5
 8006a7c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006a80:	4618      	mov	r0, r3
 8006a82:	f008 fdca 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8006a86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f008 fdc5 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8006a90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a94:	4618      	mov	r0, r3
 8006a96:	f008 fdc0 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8006a9a:	f107 0320 	add.w	r3, r7, #32
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f008 fdbb 	bl	800f61a <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8006aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006aaa:	e78f      	b.n	80069cc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x24>
	}
	Status response;
	int i = 0;
 8006aac:	2300      	movs	r3, #0
 8006aae:	65bb      	str	r3, [r7, #88]	; 0x58
	while(1)
	{
		response = Command_Process(fake_command_buffer, response_arr, 3);
 8006ab0:	f107 0114 	add.w	r1, r7, #20
 8006ab4:	f107 0308 	add.w	r3, r7, #8
 8006ab8:	2203      	movs	r2, #3
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fd f9d8 	bl	8003e70 <Command_Process>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		if(response != IDLE)
 8006ac6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8006aca:	2b04      	cmp	r3, #4
 8006acc:	d153      	bne.n	8006b76 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1ce>
		{
			break;
		}

		if(i<3)
 8006ace:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	dced      	bgt.n	8006ab0 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x108>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	657b      	str	r3, [r7, #84]	; 0x54
 8006ad8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7f9 fba8 	bl	800023c <strlen>
 8006aec:	4603      	mov	r3, r0
 8006aee:	461a      	mov	r2, r3
 8006af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006af2:	4293      	cmp	r3, r2
 8006af4:	da3b      	bge.n	8006b6e <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1c6>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8006af6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006afa:	492e      	ldr	r1, [pc, #184]	; (8006bb4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x20c>)
 8006afc:	4618      	mov	r0, r3
 8006afe:	f008 f9d4 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8006b02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006b06:	2100      	movs	r1, #0
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f006 faa7 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006b0e:	4604      	mov	r4, r0
 8006b10:	6823      	ldr	r3, [r4, #0]
 8006b12:	330c      	adds	r3, #12
 8006b14:	681d      	ldr	r5, [r3, #0]
 8006b16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006b1a:	492a      	ldr	r1, [pc, #168]	; (8006bc4 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x21c>)
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f008 f9c4 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8006b22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006b26:	4619      	mov	r1, r3
 8006b28:	4620      	mov	r0, r4
 8006b2a:	47a8      	blx	r5
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	6813      	ldr	r3, [r2, #0]
 8006b30:	3364      	adds	r3, #100	; 0x64
 8006b32:	681c      	ldr	r4, [r3, #0]
 8006b34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8006b3c:	440b      	add	r3, r1
 8006b3e:	f853 1c4c 	ldr.w	r1, [r3, #-76]
 8006b42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b44:	440b      	add	r3, r1
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	4619      	mov	r1, r3
 8006b4a:	4610      	mov	r0, r2
 8006b4c:	47a0      	blx	r4
 8006b4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006b52:	4618      	mov	r0, r3
 8006b54:	f008 fd61 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8006b58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f008 fd5c 	bl	800f61a <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006b62:	f7fd f8c9 	bl	8003cf8 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b68:	3301      	adds	r3, #1
 8006b6a:	657b      	str	r3, [r7, #84]	; 0x54
 8006b6c:	e7b4      	b.n	8006ad8 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x130>
			}
			i++;
 8006b6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b70:	3301      	adds	r3, #1
 8006b72:	65bb      	str	r3, [r7, #88]	; 0x58
		}

	}
 8006b74:	e79c      	b.n	8006ab0 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x108>
			break;
 8006b76:	bf00      	nop
	LONGS_EQUAL(STATUS_OK,response);
 8006b78:	f00f fd7a 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8006b7c:	4604      	mov	r4, r0
 8006b7e:	6823      	ldr	r3, [r4, #0]
 8006b80:	3338      	adds	r3, #56	; 0x38
 8006b82:	681d      	ldr	r5, [r3, #0]
 8006b84:	f897 6053 	ldrb.w	r6, [r7, #83]	; 0x53
 8006b88:	f00f fd82 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	9302      	str	r3, [sp, #8]
 8006b90:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 8006b94:	9301      	str	r3, [sp, #4]
 8006b96:	4b0c      	ldr	r3, [pc, #48]	; (8006bc8 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x220>)
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	4b0c      	ldr	r3, [pc, #48]	; (8006bcc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x224>)
 8006b9c:	4632      	mov	r2, r6
 8006b9e:	2102      	movs	r1, #2
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	47a8      	blx	r5

}
 8006ba4:	bf00      	nop
 8006ba6:	3764      	adds	r7, #100	; 0x64
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bac:	08025e9c 	.word	0x08025e9c
 8006bb0:	08025ea8 	.word	0x08025ea8
 8006bb4:	08025b78 	.word	0x08025b78
 8006bb8:	08025b7c 	.word	0x08025b7c
 8006bbc:	08025b90 	.word	0x08025b90
 8006bc0:	08025b98 	.word	0x08025b98
 8006bc4:	08025ba0 	.word	0x08025ba0
 8006bc8:	08025848 	.word	0x08025848
 8006bcc:	08025ddc 	.word	0x08025ddc

08006bd0 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7fe fd48 	bl	8005670 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006be0:	4a03      	ldr	r2, [pc, #12]	; (8006bf0 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev+0x20>)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	601a      	str	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4618      	mov	r0, r3
 8006bea:	3708      	adds	r7, #8
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	08029b90 	.word	0x08029b90

08006bf4 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShell10createTestEv>:
 8006bf4:	b590      	push	{r4, r7, lr}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	f44f 72f6 	mov.w	r2, #492	; 0x1ec
 8006c00:	4906      	ldr	r1, [pc, #24]	; (8006c1c <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShell10createTestEv+0x28>)
 8006c02:	2004      	movs	r0, #4
 8006c04:	f005 fd8e 	bl	800c724 <_ZnwjPKci>
 8006c08:	4604      	mov	r4, r0
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	f7ff ffe0 	bl	8006bd0 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestC1Ev>
 8006c10:	4623      	mov	r3, r4
 8006c12:	4618      	mov	r0, r3
 8006c14:	370c      	adds	r7, #12
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd90      	pop	{r4, r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	08025848 	.word	0x08025848

08006c20 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev>:
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f00e f968 	bl	8014f00 <_ZN10UtestShellC1Ev>
 8006c30:	4a03      	ldr	r2, [pc, #12]	; (8006c40 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev+0x20>)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3708      	adds	r7, #8
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	08029ae4 	.word	0x08029ae4

08006c44 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv>:
{
 8006c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c46:	b0b3      	sub	sp, #204	; 0xcc
 8006c48:	af04      	add	r7, sp, #16
 8006c4a:	6078      	str	r0, [r7, #4]
	char response_arr[2][50] =
 8006c4c:	4a87      	ldr	r2, [pc, #540]	; (8006e6c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x228>)
 8006c4e:	f107 0314 	add.w	r3, r7, #20
 8006c52:	4611      	mov	r1, r2
 8006c54:	2264      	movs	r2, #100	; 0x64
 8006c56:	4618      	mov	r0, r3
 8006c58:	f01b fdfc 	bl	8022854 <memcpy>
	{
		AT_RESPONSE_OK,
		AT_RESPONSE_OK
	};

	char *fake_command_buffer[2] =
 8006c5c:	4a84      	ldr	r2, [pc, #528]	; (8006e70 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x22c>)
 8006c5e:	f107 030c 	add.w	r3, r7, #12
 8006c62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c66:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		(char*)AT_CIPMUX_SINGLE,
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	for(int i=0;i<2;i++)
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	dc71      	bgt.n	8006d5c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x118>
	{
		mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t*)fake_command_buffer[i], strlen(fake_command_buffer[i])).withIntParameter("size", strlen(fake_command_buffer[i]));
 8006c78:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006c7c:	497d      	ldr	r1, [pc, #500]	; (8006e74 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x230>)
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f008 f913 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8006c84:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006c88:	2100      	movs	r1, #0
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f006 f9e6 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006c90:	4604      	mov	r4, r0
 8006c92:	6823      	ldr	r3, [r4, #0]
 8006c94:	330c      	adds	r3, #12
 8006c96:	681d      	ldr	r5, [r3, #0]
 8006c98:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006c9c:	4976      	ldr	r1, [pc, #472]	; (8006e78 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x234>)
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f008 f903 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8006ca4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006ca8:	4619      	mov	r1, r3
 8006caa:	4620      	mov	r0, r4
 8006cac:	47a8      	blx	r5
 8006cae:	4605      	mov	r5, r0
 8006cb0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006cb4:	4971      	ldr	r1, [pc, #452]	; (8006e7c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x238>)
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f008 f8f7 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8006cbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f853 4cac 	ldr.w	r4, [r3, #-172]
 8006ccc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f853 3cac 	ldr.w	r3, [r3, #-172]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7f9 faad 	bl	800023c <strlen>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8006ce8:	4622      	mov	r2, r4
 8006cea:	4628      	mov	r0, r5
 8006cec:	f7fd fe32 	bl	8004954 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 8006cf0:	4604      	mov	r4, r0
 8006cf2:	6823      	ldr	r3, [r4, #0]
 8006cf4:	332c      	adds	r3, #44	; 0x2c
 8006cf6:	681d      	ldr	r5, [r3, #0]
 8006cf8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006cfc:	4960      	ldr	r1, [pc, #384]	; (8006e80 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x23c>)
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f008 f8d3 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8006d04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8006d0e:	4413      	add	r3, r2
 8006d10:	f853 3cac 	ldr.w	r3, [r3, #-172]
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7f9 fa91 	bl	800023c <strlen>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006d22:	4619      	mov	r1, r3
 8006d24:	4620      	mov	r0, r4
 8006d26:	47a8      	blx	r5
 8006d28:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f008 fc74 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8006d32:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006d36:	4618      	mov	r0, r3
 8006d38:	f008 fc6f 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8006d3c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006d40:	4618      	mov	r0, r3
 8006d42:	f008 fc6a 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8006d46:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f008 fc65 	bl	800f61a <_ZN12SimpleStringD1Ev>
	for(int i=0;i<2;i++)
 8006d50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006d54:	3301      	adds	r3, #1
 8006d56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d5a:	e789      	b.n	8006c70 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x2c>
	}

	Status response;
	int i = 0;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 8006d62:	4948      	ldr	r1, [pc, #288]	; (8006e84 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x240>)
 8006d64:	4848      	ldr	r0, [pc, #288]	; (8006e88 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x244>)
 8006d66:	f7fd f919 	bl	8003f9c <Connect_TCP_Server>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
		if(response != IDLE)
 8006d70:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8006d74:	2b04      	cmp	r3, #4
 8006d76:	d15d      	bne.n	8006e34 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1f0>
		{
			break;
		}

		if(i<3)
 8006d78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	dcf0      	bgt.n	8006d62 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x11e>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006d80:	2300      	movs	r3, #0
 8006d82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d86:	f107 0214 	add.w	r2, r7, #20
 8006d8a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006d8e:	2132      	movs	r1, #50	; 0x32
 8006d90:	fb01 f303 	mul.w	r3, r1, r3
 8006d94:	4413      	add	r3, r2
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7f9 fa50 	bl	800023c <strlen>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	461a      	mov	r2, r3
 8006da0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006da4:	4293      	cmp	r3, r2
 8006da6:	da3f      	bge.n	8006e28 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x1e4>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8006da8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006dac:	4931      	ldr	r1, [pc, #196]	; (8006e74 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x230>)
 8006dae:	4618      	mov	r0, r3
 8006db0:	f008 f87b 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8006db4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006db8:	2100      	movs	r1, #0
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f006 f94e 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006dc0:	4604      	mov	r4, r0
 8006dc2:	6823      	ldr	r3, [r4, #0]
 8006dc4:	330c      	adds	r3, #12
 8006dc6:	681d      	ldr	r5, [r3, #0]
 8006dc8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006dcc:	492f      	ldr	r1, [pc, #188]	; (8006e8c <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x248>)
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f008 f86b 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8006dd4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006dd8:	4619      	mov	r1, r3
 8006dda:	4620      	mov	r0, r4
 8006ddc:	47a8      	blx	r5
 8006dde:	4603      	mov	r3, r0
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	3264      	adds	r2, #100	; 0x64
 8006de4:	6812      	ldr	r2, [r2, #0]
 8006de6:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8006dea:	2032      	movs	r0, #50	; 0x32
 8006dec:	fb00 f101 	mul.w	r1, r0, r1
 8006df0:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8006df4:	4408      	add	r0, r1
 8006df6:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8006dfa:	4401      	add	r1, r0
 8006dfc:	39a4      	subs	r1, #164	; 0xa4
 8006dfe:	7809      	ldrb	r1, [r1, #0]
 8006e00:	4618      	mov	r0, r3
 8006e02:	4790      	blx	r2
 8006e04:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f008 fc06 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8006e0e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006e12:	4618      	mov	r0, r3
 8006e14:	f008 fc01 	bl	800f61a <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006e18:	f7fc ff6e 	bl	8003cf8 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006e1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e20:	3301      	adds	r3, #1
 8006e22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e26:	e7ae      	b.n	8006d86 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x142>
			}
			i++;
 8006e28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}

	}
 8006e32:	e796      	b.n	8006d62 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x11e>
			break;
 8006e34:	bf00      	nop
	LONGS_EQUAL(STATUS_OK,response);
 8006e36:	f00f fc1b 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8006e3a:	4604      	mov	r4, r0
 8006e3c:	6823      	ldr	r3, [r4, #0]
 8006e3e:	3338      	adds	r3, #56	; 0x38
 8006e40:	681d      	ldr	r5, [r3, #0]
 8006e42:	f897 60ab 	ldrb.w	r6, [r7, #171]	; 0xab
 8006e46:	f00f fc23 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	9302      	str	r3, [sp, #8]
 8006e4e:	f44f 7305 	mov.w	r3, #532	; 0x214
 8006e52:	9301      	str	r3, [sp, #4]
 8006e54:	4b0e      	ldr	r3, [pc, #56]	; (8006e90 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x24c>)
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	4b0e      	ldr	r3, [pc, #56]	; (8006e94 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_Test8testBodyEv+0x250>)
 8006e5a:	4632      	mov	r2, r6
 8006e5c:	2102      	movs	r1, #2
 8006e5e:	4620      	mov	r0, r4
 8006e60:	47a8      	blx	r5

}
 8006e62:	bf00      	nop
 8006e64:	37bc      	adds	r7, #188	; 0xbc
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	08025ec4 	.word	0x08025ec4
 8006e70:	08025f28 	.word	0x08025f28
 8006e74:	08025b78 	.word	0x08025b78
 8006e78:	08025b7c 	.word	0x08025b7c
 8006e7c:	08025b90 	.word	0x08025b90
 8006e80:	08025b98 	.word	0x08025b98
 8006e84:	08025eb4 	.word	0x08025eb4
 8006e88:	08025eb8 	.word	0x08025eb8
 8006e8c:	08025ba0 	.word	0x08025ba0
 8006e90:	08025848 	.word	0x08025848
 8006e94:	08025ddc 	.word	0x08025ddc

08006e98 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7fe fbe4 	bl	8005670 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006ea8:	4a03      	ldr	r2, [pc, #12]	; (8006eb8 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev+0x20>)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	601a      	str	r2, [r3, #0]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3708      	adds	r7, #8
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	08029ac4 	.word	0x08029ac4

08006ebc <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShell10createTestEv>:
 8006ebc:	b590      	push	{r4, r7, lr}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	f44f 7206 	mov.w	r2, #536	; 0x218
 8006ec8:	4906      	ldr	r1, [pc, #24]	; (8006ee4 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShell10createTestEv+0x28>)
 8006eca:	2004      	movs	r0, #4
 8006ecc:	f005 fc2a 	bl	800c724 <_ZnwjPKci>
 8006ed0:	4604      	mov	r4, r0
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	f7ff ffe0 	bl	8006e98 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestC1Ev>
 8006ed8:	4623      	mov	r3, r4
 8006eda:	4618      	mov	r0, r3
 8006edc:	370c      	adds	r7, #12
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd90      	pop	{r4, r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	08025848 	.word	0x08025848

08006ee8 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev>:
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f00e f804 	bl	8014f00 <_ZN10UtestShellC1Ev>
 8006ef8:	4a03      	ldr	r2, [pc, #12]	; (8006f08 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev+0x20>)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	601a      	str	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4618      	mov	r0, r3
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	08029a18 	.word	0x08029a18

08006f0c <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv>:
{
 8006f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f0e:	b093      	sub	sp, #76	; 0x4c
 8006f10:	af04      	add	r7, sp, #16
 8006f12:	6078      	str	r0, [r7, #4]

	char *fake_command_buffer[2] =
 8006f14:	4a42      	ldr	r2, [pc, #264]	; (8007020 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x114>)
 8006f16:	f107 030c 	add.w	r3, r7, #12
 8006f1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006f1e:	e883 0003 	stmia.w	r3, {r0, r1}

		(char*)AT_CIPMUX_SINGLE,
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t*)fake_command_buffer[0], strlen(fake_command_buffer[0])).withIntParameter("size", strlen(fake_command_buffer[0]));
 8006f22:	f107 0314 	add.w	r3, r7, #20
 8006f26:	493f      	ldr	r1, [pc, #252]	; (8007024 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x118>)
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f007 ffbe 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8006f2e:	f107 0314 	add.w	r3, r7, #20
 8006f32:	2100      	movs	r1, #0
 8006f34:	4618      	mov	r0, r3
 8006f36:	f006 f891 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	6823      	ldr	r3, [r4, #0]
 8006f3e:	330c      	adds	r3, #12
 8006f40:	681d      	ldr	r5, [r3, #0]
 8006f42:	f107 031c 	add.w	r3, r7, #28
 8006f46:	4938      	ldr	r1, [pc, #224]	; (8007028 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x11c>)
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f007 ffae 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8006f4e:	f107 031c 	add.w	r3, r7, #28
 8006f52:	4619      	mov	r1, r3
 8006f54:	4620      	mov	r0, r4
 8006f56:	47a8      	blx	r5
 8006f58:	4605      	mov	r5, r0
 8006f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f5e:	4933      	ldr	r1, [pc, #204]	; (800702c <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x120>)
 8006f60:	4618      	mov	r0, r3
 8006f62:	f007 ffa2 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8006f66:	68fc      	ldr	r4, [r7, #12]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7f9 f966 	bl	800023c <strlen>
 8006f70:	4603      	mov	r3, r0
 8006f72:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8006f76:	4622      	mov	r2, r4
 8006f78:	4628      	mov	r0, r5
 8006f7a:	f7fd fceb 	bl	8004954 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 8006f7e:	4604      	mov	r4, r0
 8006f80:	6823      	ldr	r3, [r4, #0]
 8006f82:	332c      	adds	r3, #44	; 0x2c
 8006f84:	681d      	ldr	r5, [r3, #0]
 8006f86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006f8a:	4929      	ldr	r1, [pc, #164]	; (8007030 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x124>)
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f007 ff8c 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7f9 f951 	bl	800023c <strlen>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	47a8      	blx	r5
 8006fa8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006fac:	4618      	mov	r0, r3
 8006fae:	f008 fb34 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8006fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f008 fb2f 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8006fbc:	f107 031c 	add.w	r3, r7, #28
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f008 fb2a 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8006fc6:	f107 0314 	add.w	r3, r7, #20
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f008 fb25 	bl	800f61a <_ZN12SimpleStringD1Ev>


	Status response;
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 8006fd0:	4918      	ldr	r1, [pc, #96]	; (8007034 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x128>)
 8006fd2:	4819      	ldr	r0, [pc, #100]	; (8007038 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x12c>)
 8006fd4:	f7fc ffe2 	bl	8003f9c <Connect_TCP_Server>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if(response != IDLE)
 8006fde:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006fe2:	2b04      	cmp	r3, #4
 8006fe4:	d100      	bne.n	8006fe8 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xdc>
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 8006fe6:	e7f3      	b.n	8006fd0 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0xc4>
		{
			break;
 8006fe8:	bf00      	nop
		}

	}
	LONGS_EQUAL(TIMEOUT_ERROR,response);
 8006fea:	f00f fb41 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8006fee:	4604      	mov	r4, r0
 8006ff0:	6823      	ldr	r3, [r4, #0]
 8006ff2:	3338      	adds	r3, #56	; 0x38
 8006ff4:	681d      	ldr	r5, [r3, #0]
 8006ff6:	f897 6037 	ldrb.w	r6, [r7, #55]	; 0x37
 8006ffa:	f00f fb49 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006ffe:	4603      	mov	r3, r0
 8007000:	9302      	str	r3, [sp, #8]
 8007002:	f240 232f 	movw	r3, #559	; 0x22f
 8007006:	9301      	str	r3, [sp, #4]
 8007008:	4b0c      	ldr	r3, [pc, #48]	; (800703c <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x130>)
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	4b0c      	ldr	r3, [pc, #48]	; (8007040 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_Test8testBodyEv+0x134>)
 800700e:	4632      	mov	r2, r6
 8007010:	2101      	movs	r1, #1
 8007012:	4620      	mov	r0, r4
 8007014:	47a8      	blx	r5

}
 8007016:	bf00      	nop
 8007018:	373c      	adds	r7, #60	; 0x3c
 800701a:	46bd      	mov	sp, r7
 800701c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800701e:	bf00      	nop
 8007020:	08025f28 	.word	0x08025f28
 8007024:	08025b78 	.word	0x08025b78
 8007028:	08025b7c 	.word	0x08025b7c
 800702c:	08025b90 	.word	0x08025b90
 8007030:	08025b98 	.word	0x08025b98
 8007034:	08025eb4 	.word	0x08025eb4
 8007038:	08025eb8 	.word	0x08025eb8
 800703c:	08025848 	.word	0x08025848
 8007040:	08025c54 	.word	0x08025c54

08007044 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4618      	mov	r0, r3
 8007050:	f7fe fb0e 	bl	8005670 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8007054:	4a03      	ldr	r2, [pc, #12]	; (8007064 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev+0x20>)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	601a      	str	r2, [r3, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4618      	mov	r0, r3
 800705e:	3708      	adds	r7, #8
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	080299f8 	.word	0x080299f8

08007068 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShell10createTestEv>:
 8007068:	b590      	push	{r4, r7, lr}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	f240 2233 	movw	r2, #563	; 0x233
 8007074:	4906      	ldr	r1, [pc, #24]	; (8007090 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShell10createTestEv+0x28>)
 8007076:	2004      	movs	r0, #4
 8007078:	f005 fb54 	bl	800c724 <_ZnwjPKci>
 800707c:	4604      	mov	r4, r0
 800707e:	4620      	mov	r0, r4
 8007080:	f7ff ffe0 	bl	8007044 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestC1Ev>
 8007084:	4623      	mov	r3, r4
 8007086:	4618      	mov	r0, r3
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	bd90      	pop	{r4, r7, pc}
 800708e:	bf00      	nop
 8007090:	08025848 	.word	0x08025848

08007094 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev>:
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4618      	mov	r0, r3
 80070a0:	f00d ff2e 	bl	8014f00 <_ZN10UtestShellC1Ev>
 80070a4:	4a03      	ldr	r2, [pc, #12]	; (80070b4 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev+0x20>)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	601a      	str	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4618      	mov	r0, r3
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	0802994c 	.word	0x0802994c

080070b8 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv>:
{
 80070b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070ba:	b0b3      	sub	sp, #204	; 0xcc
 80070bc:	af04      	add	r7, sp, #16
 80070be:	6078      	str	r0, [r7, #4]
	char response_arr[2][50] =
 80070c0:	4a87      	ldr	r2, [pc, #540]	; (80072e0 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x228>)
 80070c2:	f107 0314 	add.w	r3, r7, #20
 80070c6:	4611      	mov	r1, r2
 80070c8:	2264      	movs	r2, #100	; 0x64
 80070ca:	4618      	mov	r0, r3
 80070cc:	f01b fbc2 	bl	8022854 <memcpy>
	{
	  AT_RESPONSE_OK,
	  AT_RESPONSE_ERROR
	};

	char *fake_command_buffer[2] =
 80070d0:	4a84      	ldr	r2, [pc, #528]	; (80072e4 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x22c>)
 80070d2:	f107 030c 	add.w	r3, r7, #12
 80070d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80070da:	e883 0003 	stmia.w	r3, {r0, r1}
	{
		(char*)AT_CIPMUX_SINGLE,
		(char*)"AT+CIPSTART=\"TCP\",\"192.168.1.1\",80\r\n"
	};

	for(int i=0;i<2;i++)
 80070de:	2300      	movs	r3, #0
 80070e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	dc71      	bgt.n	80071d0 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x118>
	{
		mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t*)fake_command_buffer[i], strlen(fake_command_buffer[i])).withIntParameter("size", strlen(fake_command_buffer[i]));
 80070ec:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80070f0:	497d      	ldr	r1, [pc, #500]	; (80072e8 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x230>)
 80070f2:	4618      	mov	r0, r3
 80070f4:	f007 fed9 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80070f8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80070fc:	2100      	movs	r1, #0
 80070fe:	4618      	mov	r0, r3
 8007100:	f005 ffac 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8007104:	4604      	mov	r4, r0
 8007106:	6823      	ldr	r3, [r4, #0]
 8007108:	330c      	adds	r3, #12
 800710a:	681d      	ldr	r5, [r3, #0]
 800710c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007110:	4976      	ldr	r1, [pc, #472]	; (80072ec <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x234>)
 8007112:	4618      	mov	r0, r3
 8007114:	f007 fec9 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8007118:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800711c:	4619      	mov	r1, r3
 800711e:	4620      	mov	r0, r4
 8007120:	47a8      	blx	r5
 8007122:	4605      	mov	r5, r0
 8007124:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007128:	4971      	ldr	r1, [pc, #452]	; (80072f0 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x238>)
 800712a:	4618      	mov	r0, r3
 800712c:	f007 febd 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8007130:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800713a:	4413      	add	r3, r2
 800713c:	f853 4cac 	ldr.w	r4, [r3, #-172]
 8007140:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800714a:	4413      	add	r3, r2
 800714c:	f853 3cac 	ldr.w	r3, [r3, #-172]
 8007150:	4618      	mov	r0, r3
 8007152:	f7f9 f873 	bl	800023c <strlen>
 8007156:	4603      	mov	r3, r0
 8007158:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800715c:	4622      	mov	r2, r4
 800715e:	4628      	mov	r0, r5
 8007160:	f7fd fbf8 	bl	8004954 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 8007164:	4604      	mov	r4, r0
 8007166:	6823      	ldr	r3, [r4, #0]
 8007168:	332c      	adds	r3, #44	; 0x2c
 800716a:	681d      	ldr	r5, [r3, #0]
 800716c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007170:	4960      	ldr	r1, [pc, #384]	; (80072f4 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x23c>)
 8007172:	4618      	mov	r0, r3
 8007174:	f007 fe99 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8007178:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8007182:	4413      	add	r3, r2
 8007184:	f853 3cac 	ldr.w	r3, [r3, #-172]
 8007188:	4618      	mov	r0, r3
 800718a:	f7f9 f857 	bl	800023c <strlen>
 800718e:	4603      	mov	r3, r0
 8007190:	461a      	mov	r2, r3
 8007192:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007196:	4619      	mov	r1, r3
 8007198:	4620      	mov	r0, r4
 800719a:	47a8      	blx	r5
 800719c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80071a0:	4618      	mov	r0, r3
 80071a2:	f008 fa3a 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80071a6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80071aa:	4618      	mov	r0, r3
 80071ac:	f008 fa35 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80071b0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80071b4:	4618      	mov	r0, r3
 80071b6:	f008 fa30 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80071ba:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80071be:	4618      	mov	r0, r3
 80071c0:	f008 fa2b 	bl	800f61a <_ZN12SimpleStringD1Ev>
	for(int i=0;i<2;i++)
 80071c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80071c8:	3301      	adds	r3, #1
 80071ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071ce:	e789      	b.n	80070e4 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x2c>
	}

	Status response;
	int i = 0;
 80071d0:	2300      	movs	r3, #0
 80071d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	while(1)
	{
		response = Connect_TCP_Server((char*)"192.168.1.1",(char*)"80");
 80071d6:	4948      	ldr	r1, [pc, #288]	; (80072f8 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x240>)
 80071d8:	4848      	ldr	r0, [pc, #288]	; (80072fc <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x244>)
 80071da:	f7fc fedf 	bl	8003f9c <Connect_TCP_Server>
 80071de:	4603      	mov	r3, r0
 80071e0:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
		if(response != IDLE)
 80071e4:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 80071e8:	2b04      	cmp	r3, #4
 80071ea:	d15d      	bne.n	80072a8 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1f0>
		{
			break;
		}

		if(i<3)
 80071ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	dcf0      	bgt.n	80071d6 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x11e>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80071f4:	2300      	movs	r3, #0
 80071f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80071fa:	f107 0214 	add.w	r2, r7, #20
 80071fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007202:	2132      	movs	r1, #50	; 0x32
 8007204:	fb01 f303 	mul.w	r3, r1, r3
 8007208:	4413      	add	r3, r2
 800720a:	4618      	mov	r0, r3
 800720c:	f7f9 f816 	bl	800023c <strlen>
 8007210:	4603      	mov	r3, r0
 8007212:	461a      	mov	r2, r3
 8007214:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007218:	4293      	cmp	r3, r2
 800721a:	da3f      	bge.n	800729c <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x1e4>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 800721c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007220:	4931      	ldr	r1, [pc, #196]	; (80072e8 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x230>)
 8007222:	4618      	mov	r0, r3
 8007224:	f007 fe41 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8007228:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800722c:	2100      	movs	r1, #0
 800722e:	4618      	mov	r0, r3
 8007230:	f005 ff14 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8007234:	4604      	mov	r4, r0
 8007236:	6823      	ldr	r3, [r4, #0]
 8007238:	330c      	adds	r3, #12
 800723a:	681d      	ldr	r5, [r3, #0]
 800723c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007240:	492f      	ldr	r1, [pc, #188]	; (8007300 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x248>)
 8007242:	4618      	mov	r0, r3
 8007244:	f007 fe31 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8007248:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800724c:	4619      	mov	r1, r3
 800724e:	4620      	mov	r0, r4
 8007250:	47a8      	blx	r5
 8007252:	4603      	mov	r3, r0
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	3264      	adds	r2, #100	; 0x64
 8007258:	6812      	ldr	r2, [r2, #0]
 800725a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800725e:	2032      	movs	r0, #50	; 0x32
 8007260:	fb00 f101 	mul.w	r1, r0, r1
 8007264:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8007268:	4408      	add	r0, r1
 800726a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800726e:	4401      	add	r1, r0
 8007270:	39a4      	subs	r1, #164	; 0xa4
 8007272:	7809      	ldrb	r1, [r1, #0]
 8007274:	4618      	mov	r0, r3
 8007276:	4790      	blx	r2
 8007278:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800727c:	4618      	mov	r0, r3
 800727e:	f008 f9cc 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8007282:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007286:	4618      	mov	r0, r3
 8007288:	f008 f9c7 	bl	800f61a <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 800728c:	f7fc fd34 	bl	8003cf8 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8007290:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007294:	3301      	adds	r3, #1
 8007296:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800729a:	e7ae      	b.n	80071fa <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x142>
			}
			i++;
 800729c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072a0:	3301      	adds	r3, #1
 80072a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}

	}
 80072a6:	e796      	b.n	80071d6 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x11e>
			break;
 80072a8:	bf00      	nop
	LONGS_EQUAL(STATUS_ERROR,response);
 80072aa:	f00f f9e1 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 80072ae:	4604      	mov	r4, r0
 80072b0:	6823      	ldr	r3, [r4, #0]
 80072b2:	3338      	adds	r3, #56	; 0x38
 80072b4:	681d      	ldr	r5, [r3, #0]
 80072b6:	f897 60ab 	ldrb.w	r6, [r7, #171]	; 0xab
 80072ba:	f00f f9e9 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80072be:	4603      	mov	r3, r0
 80072c0:	9302      	str	r3, [sp, #8]
 80072c2:	f240 235b 	movw	r3, #603	; 0x25b
 80072c6:	9301      	str	r3, [sp, #4]
 80072c8:	4b0e      	ldr	r3, [pc, #56]	; (8007304 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x24c>)
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	4b0e      	ldr	r3, [pc, #56]	; (8007308 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_Test8testBodyEv+0x250>)
 80072ce:	4632      	mov	r2, r6
 80072d0:	2103      	movs	r1, #3
 80072d2:	4620      	mov	r0, r4
 80072d4:	47a8      	blx	r5

}
 80072d6:	bf00      	nop
 80072d8:	37bc      	adds	r7, #188	; 0xbc
 80072da:	46bd      	mov	sp, r7
 80072dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072de:	bf00      	nop
 80072e0:	08025f30 	.word	0x08025f30
 80072e4:	08025f28 	.word	0x08025f28
 80072e8:	08025b78 	.word	0x08025b78
 80072ec:	08025b7c 	.word	0x08025b7c
 80072f0:	08025b90 	.word	0x08025b90
 80072f4:	08025b98 	.word	0x08025b98
 80072f8:	08025eb4 	.word	0x08025eb4
 80072fc:	08025eb8 	.word	0x08025eb8
 8007300:	08025ba0 	.word	0x08025ba0
 8007304:	08025848 	.word	0x08025848
 8007308:	08025c80 	.word	0x08025c80

0800730c <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4618      	mov	r0, r3
 8007318:	f7fe f9aa 	bl	8005670 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 800731c:	4a03      	ldr	r2, [pc, #12]	; (800732c <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev+0x20>)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4618      	mov	r0, r3
 8007326:	3708      	adds	r7, #8
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	0802992c 	.word	0x0802992c

08007330 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShell10createTestEv>:
 8007330:	b590      	push	{r4, r7, lr}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	f240 225f 	movw	r2, #607	; 0x25f
 800733c:	4906      	ldr	r1, [pc, #24]	; (8007358 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShell10createTestEv+0x28>)
 800733e:	2004      	movs	r0, #4
 8007340:	f005 f9f0 	bl	800c724 <_ZnwjPKci>
 8007344:	4604      	mov	r4, r0
 8007346:	4620      	mov	r0, r4
 8007348:	f7ff ffe0 	bl	800730c <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestC1Ev>
 800734c:	4623      	mov	r3, r4
 800734e:	4618      	mov	r0, r3
 8007350:	370c      	adds	r7, #12
 8007352:	46bd      	mov	sp, r7
 8007354:	bd90      	pop	{r4, r7, pc}
 8007356:	bf00      	nop
 8007358:	08025848 	.word	0x08025848

0800735c <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev>:
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4618      	mov	r0, r3
 8007368:	f00d fdca 	bl	8014f00 <_ZN10UtestShellC1Ev>
 800736c:	4a03      	ldr	r2, [pc, #12]	; (800737c <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev+0x20>)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	601a      	str	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4618      	mov	r0, r3
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	08029880 	.word	0x08029880

08007380 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv>:
{
 8007380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007382:	b095      	sub	sp, #84	; 0x54
 8007384:	af04      	add	r7, sp, #16
 8007386:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t*)AT_CIPCLOSE, strlen(AT_CIPCLOSE)).withIntParameter("size", strlen(AT_CIPCLOSE));
 8007388:	f107 0308 	add.w	r3, r7, #8
 800738c:	4954      	ldr	r1, [pc, #336]	; (80074e0 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x160>)
 800738e:	4618      	mov	r0, r3
 8007390:	f007 fd8b 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8007394:	f107 0308 	add.w	r3, r7, #8
 8007398:	2100      	movs	r1, #0
 800739a:	4618      	mov	r0, r3
 800739c:	f005 fe5e 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80073a0:	4604      	mov	r4, r0
 80073a2:	6823      	ldr	r3, [r4, #0]
 80073a4:	330c      	adds	r3, #12
 80073a6:	681d      	ldr	r5, [r3, #0]
 80073a8:	f107 0310 	add.w	r3, r7, #16
 80073ac:	494d      	ldr	r1, [pc, #308]	; (80074e4 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x164>)
 80073ae:	4618      	mov	r0, r3
 80073b0:	f007 fd7b 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80073b4:	f107 0310 	add.w	r3, r7, #16
 80073b8:	4619      	mov	r1, r3
 80073ba:	4620      	mov	r0, r4
 80073bc:	47a8      	blx	r5
 80073be:	4604      	mov	r4, r0
 80073c0:	f107 0318 	add.w	r3, r7, #24
 80073c4:	4948      	ldr	r1, [pc, #288]	; (80074e8 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x168>)
 80073c6:	4618      	mov	r0, r3
 80073c8:	f007 fd6f 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80073cc:	f107 0118 	add.w	r1, r7, #24
 80073d0:	230d      	movs	r3, #13
 80073d2:	4a46      	ldr	r2, [pc, #280]	; (80074ec <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x16c>)
 80073d4:	4620      	mov	r0, r4
 80073d6:	f7fd fabd 	bl	8004954 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 80073da:	4604      	mov	r4, r0
 80073dc:	6823      	ldr	r3, [r4, #0]
 80073de:	332c      	adds	r3, #44	; 0x2c
 80073e0:	681d      	ldr	r5, [r3, #0]
 80073e2:	f107 0320 	add.w	r3, r7, #32
 80073e6:	4942      	ldr	r1, [pc, #264]	; (80074f0 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x170>)
 80073e8:	4618      	mov	r0, r3
 80073ea:	f007 fd5e 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80073ee:	f107 0320 	add.w	r3, r7, #32
 80073f2:	220d      	movs	r2, #13
 80073f4:	4619      	mov	r1, r3
 80073f6:	4620      	mov	r0, r4
 80073f8:	47a8      	blx	r5
 80073fa:	f107 0320 	add.w	r3, r7, #32
 80073fe:	4618      	mov	r0, r3
 8007400:	f008 f90b 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8007404:	f107 0318 	add.w	r3, r7, #24
 8007408:	4618      	mov	r0, r3
 800740a:	f008 f906 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800740e:	f107 0310 	add.w	r3, r7, #16
 8007412:	4618      	mov	r0, r3
 8007414:	f008 f901 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8007418:	f107 0308 	add.w	r3, r7, #8
 800741c:	4618      	mov	r0, r3
 800741e:	f008 f8fc 	bl	800f61a <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_TCP_Server();
 8007422:	f7fc fdff 	bl	8004024 <Disconnect_TCP_Server>
 8007426:	4603      	mov	r3, r0
 8007428:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

		if(response != IDLE)
 800742c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007430:	2b04      	cmp	r3, #4
 8007432:	d139      	bne.n	80074a8 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x128>
			break;

		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 8007434:	2300      	movs	r3, #0
 8007436:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800743a:	2b01      	cmp	r3, #1
 800743c:	dcf1      	bgt.n	8007422 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0xa2>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)AT_RESPONSE_OK[j]);
 800743e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007442:	4927      	ldr	r1, [pc, #156]	; (80074e0 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x160>)
 8007444:	4618      	mov	r0, r3
 8007446:	f007 fd30 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800744a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800744e:	2100      	movs	r1, #0
 8007450:	4618      	mov	r0, r3
 8007452:	f005 fe03 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8007456:	4604      	mov	r4, r0
 8007458:	6823      	ldr	r3, [r4, #0]
 800745a:	330c      	adds	r3, #12
 800745c:	681d      	ldr	r5, [r3, #0]
 800745e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007462:	4924      	ldr	r1, [pc, #144]	; (80074f4 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x174>)
 8007464:	4618      	mov	r0, r3
 8007466:	f007 fd20 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800746a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800746e:	4619      	mov	r1, r3
 8007470:	4620      	mov	r0, r4
 8007472:	47a8      	blx	r5
 8007474:	4603      	mov	r3, r0
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	3264      	adds	r2, #100	; 0x64
 800747a:	6812      	ldr	r2, [r2, #0]
 800747c:	481e      	ldr	r0, [pc, #120]	; (80074f8 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x178>)
 800747e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007480:	4401      	add	r1, r0
 8007482:	7809      	ldrb	r1, [r1, #0]
 8007484:	4618      	mov	r0, r3
 8007486:	4790      	blx	r2
 8007488:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800748c:	4618      	mov	r0, r3
 800748e:	f008 f8c4 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8007492:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007496:	4618      	mov	r0, r3
 8007498:	f008 f8bf 	bl	800f61a <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 800749c:	f7fc fc2c 	bl	8003cf8 <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 80074a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074a2:	3301      	adds	r3, #1
 80074a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074a6:	e7c7      	b.n	8007438 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0xb8>
			break;
 80074a8:	bf00      	nop
		}

	}

	LONGS_EQUAL(STATUS_OK,response);
 80074aa:	f00f f8e1 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 80074ae:	4604      	mov	r4, r0
 80074b0:	6823      	ldr	r3, [r4, #0]
 80074b2:	3338      	adds	r3, #56	; 0x38
 80074b4:	681d      	ldr	r5, [r3, #0]
 80074b6:	f897 603b 	ldrb.w	r6, [r7, #59]	; 0x3b
 80074ba:	f00f f8e9 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80074be:	4603      	mov	r3, r0
 80074c0:	9302      	str	r3, [sp, #8]
 80074c2:	f44f 731d 	mov.w	r3, #628	; 0x274
 80074c6:	9301      	str	r3, [sp, #4]
 80074c8:	4b0c      	ldr	r3, [pc, #48]	; (80074fc <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x17c>)
 80074ca:	9300      	str	r3, [sp, #0]
 80074cc:	4b0c      	ldr	r3, [pc, #48]	; (8007500 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_Test8testBodyEv+0x180>)
 80074ce:	4632      	mov	r2, r6
 80074d0:	2102      	movs	r1, #2
 80074d2:	4620      	mov	r0, r4
 80074d4:	47a8      	blx	r5

}
 80074d6:	bf00      	nop
 80074d8:	3744      	adds	r7, #68	; 0x44
 80074da:	46bd      	mov	sp, r7
 80074dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074de:	bf00      	nop
 80074e0:	08025b78 	.word	0x08025b78
 80074e4:	08025b7c 	.word	0x08025b7c
 80074e8:	08025b90 	.word	0x08025b90
 80074ec:	08025f94 	.word	0x08025f94
 80074f0:	08025b98 	.word	0x08025b98
 80074f4:	08025ba0 	.word	0x08025ba0
 80074f8:	080257c8 	.word	0x080257c8
 80074fc:	08025848 	.word	0x08025848
 8007500:	08025ddc 	.word	0x08025ddc

08007504 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4618      	mov	r0, r3
 8007510:	f7fe f8ae 	bl	8005670 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8007514:	4a03      	ldr	r2, [pc, #12]	; (8007524 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev+0x20>)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4618      	mov	r0, r3
 800751e:	3708      	adds	r7, #8
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	08029860 	.word	0x08029860

08007528 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShell10createTestEv>:
 8007528:	b590      	push	{r4, r7, lr}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	f44f 721e 	mov.w	r2, #632	; 0x278
 8007534:	4906      	ldr	r1, [pc, #24]	; (8007550 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShell10createTestEv+0x28>)
 8007536:	2004      	movs	r0, #4
 8007538:	f005 f8f4 	bl	800c724 <_ZnwjPKci>
 800753c:	4604      	mov	r4, r0
 800753e:	4620      	mov	r0, r4
 8007540:	f7ff ffe0 	bl	8007504 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestC1Ev>
 8007544:	4623      	mov	r3, r4
 8007546:	4618      	mov	r0, r3
 8007548:	370c      	adds	r7, #12
 800754a:	46bd      	mov	sp, r7
 800754c:	bd90      	pop	{r4, r7, pc}
 800754e:	bf00      	nop
 8007550:	08025848 	.word	0x08025848

08007554 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev>:
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4618      	mov	r0, r3
 8007560:	f00d fcce 	bl	8014f00 <_ZN10UtestShellC1Ev>
 8007564:	4a03      	ldr	r2, [pc, #12]	; (8007574 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev+0x20>)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	601a      	str	r2, [r3, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4618      	mov	r0, r3
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	080297b4 	.word	0x080297b4

08007578 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv>:
{
 8007578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800757a:	b0b7      	sub	sp, #220	; 0xdc
 800757c:	af04      	add	r7, sp, #16
 800757e:	6078      	str	r0, [r7, #4]
	Status response;
	int i = 0;
 8007580:	2300      	movs	r3, #0
 8007582:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	char response_arr[2][50] =
 8007586:	4a92      	ldr	r2, [pc, #584]	; (80077d0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x258>)
 8007588:	f107 0308 	add.w	r3, r7, #8
 800758c:	4611      	mov	r1, r2
 800758e:	2264      	movs	r2, #100	; 0x64
 8007590:	4618      	mov	r0, r3
 8007592:	f01b f95f 	bl	8022854 <memcpy>
	{ AT_RESPONSE_GREATER_THAN,
	  AT_RESPONSE_SEND_OK,
	};

	mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t*)"AT+CIPSEND=11\r\n", strlen("AT+CIPSEND=11\r\n")).withIntParameter("size", strlen("AT+CIPSEND=11\r\n"));
 8007596:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800759a:	498e      	ldr	r1, [pc, #568]	; (80077d4 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x25c>)
 800759c:	4618      	mov	r0, r3
 800759e:	f007 fc84 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80075a2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80075a6:	2100      	movs	r1, #0
 80075a8:	4618      	mov	r0, r3
 80075aa:	f005 fd57 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80075ae:	4604      	mov	r4, r0
 80075b0:	6823      	ldr	r3, [r4, #0]
 80075b2:	330c      	adds	r3, #12
 80075b4:	681d      	ldr	r5, [r3, #0]
 80075b6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80075ba:	4987      	ldr	r1, [pc, #540]	; (80077d8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x260>)
 80075bc:	4618      	mov	r0, r3
 80075be:	f007 fc74 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80075c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80075c6:	4619      	mov	r1, r3
 80075c8:	4620      	mov	r0, r4
 80075ca:	47a8      	blx	r5
 80075cc:	4604      	mov	r4, r0
 80075ce:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80075d2:	4982      	ldr	r1, [pc, #520]	; (80077dc <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x264>)
 80075d4:	4618      	mov	r0, r3
 80075d6:	f007 fc68 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80075da:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80075de:	230f      	movs	r3, #15
 80075e0:	4a7f      	ldr	r2, [pc, #508]	; (80077e0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x268>)
 80075e2:	4620      	mov	r0, r4
 80075e4:	f7fd f9b6 	bl	8004954 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 80075e8:	4604      	mov	r4, r0
 80075ea:	6823      	ldr	r3, [r4, #0]
 80075ec:	332c      	adds	r3, #44	; 0x2c
 80075ee:	681d      	ldr	r5, [r3, #0]
 80075f0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80075f4:	497b      	ldr	r1, [pc, #492]	; (80077e4 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x26c>)
 80075f6:	4618      	mov	r0, r3
 80075f8:	f007 fc57 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80075fc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007600:	220f      	movs	r2, #15
 8007602:	4619      	mov	r1, r3
 8007604:	4620      	mov	r0, r4
 8007606:	47a8      	blx	r5
 8007608:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800760c:	4618      	mov	r0, r3
 800760e:	f008 f804 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8007612:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007616:	4618      	mov	r0, r3
 8007618:	f007 ffff 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800761c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007620:	4618      	mov	r0, r3
 8007622:	f007 fffa 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8007626:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800762a:	4618      	mov	r0, r3
 800762c:	f007 fff5 	bl	800f61a <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t*)"Hello World", strlen("Hello World")).withIntParameter("size", strlen("Hello World"));
 8007630:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007634:	4967      	ldr	r1, [pc, #412]	; (80077d4 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x25c>)
 8007636:	4618      	mov	r0, r3
 8007638:	f007 fc37 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800763c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007640:	2100      	movs	r1, #0
 8007642:	4618      	mov	r0, r3
 8007644:	f005 fd0a 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8007648:	4604      	mov	r4, r0
 800764a:	6823      	ldr	r3, [r4, #0]
 800764c:	330c      	adds	r3, #12
 800764e:	681d      	ldr	r5, [r3, #0]
 8007650:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8007654:	4960      	ldr	r1, [pc, #384]	; (80077d8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x260>)
 8007656:	4618      	mov	r0, r3
 8007658:	f007 fc27 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800765c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8007660:	4619      	mov	r1, r3
 8007662:	4620      	mov	r0, r4
 8007664:	47a8      	blx	r5
 8007666:	4604      	mov	r4, r0
 8007668:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800766c:	495b      	ldr	r1, [pc, #364]	; (80077dc <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x264>)
 800766e:	4618      	mov	r0, r3
 8007670:	f007 fc1b 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8007674:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8007678:	230b      	movs	r3, #11
 800767a:	4a5b      	ldr	r2, [pc, #364]	; (80077e8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x270>)
 800767c:	4620      	mov	r0, r4
 800767e:	f7fd f969 	bl	8004954 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 8007682:	4604      	mov	r4, r0
 8007684:	6823      	ldr	r3, [r4, #0]
 8007686:	332c      	adds	r3, #44	; 0x2c
 8007688:	681d      	ldr	r5, [r3, #0]
 800768a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800768e:	4955      	ldr	r1, [pc, #340]	; (80077e4 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x26c>)
 8007690:	4618      	mov	r0, r3
 8007692:	f007 fc0a 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8007696:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800769a:	220b      	movs	r2, #11
 800769c:	4619      	mov	r1, r3
 800769e:	4620      	mov	r0, r4
 80076a0:	47a8      	blx	r5
 80076a2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80076a6:	4618      	mov	r0, r3
 80076a8:	f007 ffb7 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80076ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80076b0:	4618      	mov	r0, r3
 80076b2:	f007 ffb2 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80076b6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80076ba:	4618      	mov	r0, r3
 80076bc:	f007 ffad 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80076c0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80076c4:	4618      	mov	r0, r3
 80076c6:	f007 ffa8 	bl	800f61a <_ZN12SimpleStringD1Ev>
	while(1)
	{
		response = Send_TCP_Message((char*)"Hello World");
 80076ca:	4847      	ldr	r0, [pc, #284]	; (80077e8 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x270>)
 80076cc:	f7fc fcc6 	bl	800405c <Send_TCP_Message>
 80076d0:	4603      	mov	r3, r0
 80076d2:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

		if(response != IDLE)
 80076d6:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80076da:	2b04      	cmp	r3, #4
 80076dc:	d15d      	bne.n	800779a <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x222>
		{
			break;
		}

		if(i<2)
 80076de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	dcf1      	bgt.n	80076ca <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x152>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 80076e6:	2300      	movs	r3, #0
 80076e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076ec:	f107 0208 	add.w	r2, r7, #8
 80076f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80076f4:	2132      	movs	r1, #50	; 0x32
 80076f6:	fb01 f303 	mul.w	r3, r1, r3
 80076fa:	4413      	add	r3, r2
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7f8 fd9d 	bl	800023c <strlen>
 8007702:	4603      	mov	r3, r0
 8007704:	461a      	mov	r2, r3
 8007706:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800770a:	4293      	cmp	r3, r2
 800770c:	da3f      	bge.n	800778e <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x216>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 800770e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007712:	4930      	ldr	r1, [pc, #192]	; (80077d4 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x25c>)
 8007714:	4618      	mov	r0, r3
 8007716:	f007 fbc8 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800771a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800771e:	2100      	movs	r1, #0
 8007720:	4618      	mov	r0, r3
 8007722:	f005 fc9b 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8007726:	4604      	mov	r4, r0
 8007728:	6823      	ldr	r3, [r4, #0]
 800772a:	330c      	adds	r3, #12
 800772c:	681d      	ldr	r5, [r3, #0]
 800772e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8007732:	492e      	ldr	r1, [pc, #184]	; (80077ec <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x274>)
 8007734:	4618      	mov	r0, r3
 8007736:	f007 fbb8 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800773a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800773e:	4619      	mov	r1, r3
 8007740:	4620      	mov	r0, r4
 8007742:	47a8      	blx	r5
 8007744:	4603      	mov	r3, r0
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	3264      	adds	r2, #100	; 0x64
 800774a:	6812      	ldr	r2, [r2, #0]
 800774c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8007750:	2032      	movs	r0, #50	; 0x32
 8007752:	fb00 f101 	mul.w	r1, r0, r1
 8007756:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 800775a:	4408      	add	r0, r1
 800775c:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8007760:	4401      	add	r1, r0
 8007762:	39c0      	subs	r1, #192	; 0xc0
 8007764:	7809      	ldrb	r1, [r1, #0]
 8007766:	4618      	mov	r0, r3
 8007768:	4790      	blx	r2
 800776a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800776e:	4618      	mov	r0, r3
 8007770:	f007 ff53 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8007774:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007778:	4618      	mov	r0, r3
 800777a:	f007 ff4e 	bl	800f61a <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 800777e:	f7fc fabb 	bl	8003cf8 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8007782:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007786:	3301      	adds	r3, #1
 8007788:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800778c:	e7ae      	b.n	80076ec <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x174>
			}
			i++;
 800778e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007792:	3301      	adds	r3, #1
 8007794:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		}

	}
 8007798:	e797      	b.n	80076ca <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x152>
			break;
 800779a:	bf00      	nop

	LONGS_EQUAL(STATUS_OK,response);
 800779c:	f00e ff68 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 80077a0:	4604      	mov	r4, r0
 80077a2:	6823      	ldr	r3, [r4, #0]
 80077a4:	3338      	adds	r3, #56	; 0x38
 80077a6:	681d      	ldr	r5, [r3, #0]
 80077a8:	f897 60bf 	ldrb.w	r6, [r7, #191]	; 0xbf
 80077ac:	f00e ff70 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80077b0:	4603      	mov	r3, r0
 80077b2:	9302      	str	r3, [sp, #8]
 80077b4:	f240 2399 	movw	r3, #665	; 0x299
 80077b8:	9301      	str	r3, [sp, #4]
 80077ba:	4b0d      	ldr	r3, [pc, #52]	; (80077f0 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x278>)
 80077bc:	9300      	str	r3, [sp, #0]
 80077be:	4b0d      	ldr	r3, [pc, #52]	; (80077f4 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_Test8testBodyEv+0x27c>)
 80077c0:	4632      	mov	r2, r6
 80077c2:	2102      	movs	r1, #2
 80077c4:	4620      	mov	r0, r4
 80077c6:	47a8      	blx	r5

}
 80077c8:	bf00      	nop
 80077ca:	37cc      	adds	r7, #204	; 0xcc
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077d0:	08025fb4 	.word	0x08025fb4
 80077d4:	08025b78 	.word	0x08025b78
 80077d8:	08025b7c 	.word	0x08025b7c
 80077dc:	08025b90 	.word	0x08025b90
 80077e0:	08025fa4 	.word	0x08025fa4
 80077e4:	08025b98 	.word	0x08025b98
 80077e8:	08025a88 	.word	0x08025a88
 80077ec:	08025ba0 	.word	0x08025ba0
 80077f0:	08025848 	.word	0x08025848
 80077f4:	08025ddc 	.word	0x08025ddc

080077f8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4618      	mov	r0, r3
 8007804:	f7fd ff34 	bl	8005670 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8007808:	4a03      	ldr	r2, [pc, #12]	; (8007818 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev+0x20>)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	601a      	str	r2, [r3, #0]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4618      	mov	r0, r3
 8007812:	3708      	adds	r7, #8
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	08029794 	.word	0x08029794

0800781c <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShell10createTestEv>:
 800781c:	b590      	push	{r4, r7, lr}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	f240 229d 	movw	r2, #669	; 0x29d
 8007828:	4906      	ldr	r1, [pc, #24]	; (8007844 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShell10createTestEv+0x28>)
 800782a:	2004      	movs	r0, #4
 800782c:	f004 ff7a 	bl	800c724 <_ZnwjPKci>
 8007830:	4604      	mov	r4, r0
 8007832:	4620      	mov	r0, r4
 8007834:	f7ff ffe0 	bl	80077f8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestC1Ev>
 8007838:	4623      	mov	r3, r4
 800783a:	4618      	mov	r0, r3
 800783c:	370c      	adds	r7, #12
 800783e:	46bd      	mov	sp, r7
 8007840:	bd90      	pop	{r4, r7, pc}
 8007842:	bf00      	nop
 8007844:	08025848 	.word	0x08025848

08007848 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev>:
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4618      	mov	r0, r3
 8007854:	f00d fb54 	bl	8014f00 <_ZN10UtestShellC1Ev>
 8007858:	4a03      	ldr	r2, [pc, #12]	; (8007868 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev+0x20>)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	601a      	str	r2, [r3, #0]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4618      	mov	r0, r3
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	080296e8 	.word	0x080296e8

0800786c <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv>:
{
 800786c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800786e:	b0a3      	sub	sp, #140	; 0x8c
 8007870:	af04      	add	r7, sp, #16
 8007872:	6078      	str	r0, [r7, #4]
	char response[30] = "+IPD,11:Hello World";		// an example data that ESP received from server
 8007874:	4b49      	ldr	r3, [pc, #292]	; (800799c <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x130>)
 8007876:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800787a:	461d      	mov	r5, r3
 800787c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800787e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007880:	682b      	ldr	r3, [r5, #0]
 8007882:	6023      	str	r3, [r4, #0]
 8007884:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007888:	2200      	movs	r2, #0
 800788a:	601a      	str	r2, [r3, #0]
 800788c:	605a      	str	r2, [r3, #4]
 800788e:	811a      	strh	r2, [r3, #8]

	Status response_state = IDLE;
 8007890:	2304      	movs	r3, #4
 8007892:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	char received_message[50] ={0};
 8007896:	2300      	movs	r3, #0
 8007898:	60fb      	str	r3, [r7, #12]
 800789a:	f107 0310 	add.w	r3, r7, #16
 800789e:	222e      	movs	r2, #46	; 0x2e
 80078a0:	2100      	movs	r1, #0
 80078a2:	4618      	mov	r0, r3
 80078a4:	f01a ffe4 	bl	8022870 <memset>

	for(int i=0;i<(int)strlen(response);i++)
 80078a8:	2300      	movs	r3, #0
 80078aa:	677b      	str	r3, [r7, #116]	; 0x74
 80078ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7f8 fcc3 	bl	800023c <strlen>
 80078b6:	4603      	mov	r3, r0
 80078b8:	461a      	mov	r2, r3
 80078ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078bc:	4293      	cmp	r3, r2
 80078be:	da35      	bge.n	800792c <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0xc0>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 80078c0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80078c4:	4936      	ldr	r1, [pc, #216]	; (80079a0 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x134>)
 80078c6:	4618      	mov	r0, r3
 80078c8:	f007 faef 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80078cc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80078d0:	2100      	movs	r1, #0
 80078d2:	4618      	mov	r0, r3
 80078d4:	f005 fbc2 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80078d8:	4604      	mov	r4, r0
 80078da:	6823      	ldr	r3, [r4, #0]
 80078dc:	330c      	adds	r3, #12
 80078de:	681d      	ldr	r5, [r3, #0]
 80078e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80078e4:	492f      	ldr	r1, [pc, #188]	; (80079a4 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x138>)
 80078e6:	4618      	mov	r0, r3
 80078e8:	f007 fadf 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80078ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80078f0:	4619      	mov	r1, r3
 80078f2:	4620      	mov	r0, r4
 80078f4:	47a8      	blx	r5
 80078f6:	4603      	mov	r3, r0
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	3264      	adds	r2, #100	; 0x64
 80078fc:	6812      	ldr	r2, [r2, #0]
 80078fe:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8007902:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8007904:	4401      	add	r1, r0
 8007906:	7809      	ldrb	r1, [r1, #0]
 8007908:	4618      	mov	r0, r3
 800790a:	4790      	blx	r2
 800790c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007910:	4618      	mov	r0, r3
 8007912:	f007 fe82 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8007916:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800791a:	4618      	mov	r0, r3
 800791c:	f007 fe7d 	bl	800f61a <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 8007920:	f7fc f9ea 	bl	8003cf8 <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 8007924:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007926:	3301      	adds	r3, #1
 8007928:	677b      	str	r3, [r7, #116]	; 0x74
 800792a:	e7bf      	b.n	80078ac <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x40>
	}

	response_state = Read_TCP_Message(received_message);
 800792c:	f107 030c 	add.w	r3, r7, #12
 8007930:	4618      	mov	r0, r3
 8007932:	f7fc fc45 	bl	80041c0 <Read_TCP_Message>
 8007936:	4603      	mov	r3, r0
 8007938:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	LONGS_EQUAL(STATUS_OK,response_state);
 800793c:	f00e fe98 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8007940:	4604      	mov	r4, r0
 8007942:	6823      	ldr	r3, [r4, #0]
 8007944:	3338      	adds	r3, #56	; 0x38
 8007946:	681d      	ldr	r5, [r3, #0]
 8007948:	f897 6073 	ldrb.w	r6, [r7, #115]	; 0x73
 800794c:	f00e fea0 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007950:	4603      	mov	r3, r0
 8007952:	9302      	str	r3, [sp, #8]
 8007954:	f240 23ad 	movw	r3, #685	; 0x2ad
 8007958:	9301      	str	r3, [sp, #4]
 800795a:	4b13      	ldr	r3, [pc, #76]	; (80079a8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x13c>)
 800795c:	9300      	str	r3, [sp, #0]
 800795e:	4b13      	ldr	r3, [pc, #76]	; (80079ac <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x140>)
 8007960:	4632      	mov	r2, r6
 8007962:	2102      	movs	r1, #2
 8007964:	4620      	mov	r0, r4
 8007966:	47a8      	blx	r5

	STRCMP_EQUAL("Hello World",received_message);
 8007968:	f00e fe82 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 800796c:	4604      	mov	r4, r0
 800796e:	6823      	ldr	r3, [r4, #0]
 8007970:	3324      	adds	r3, #36	; 0x24
 8007972:	681d      	ldr	r5, [r3, #0]
 8007974:	f00e fe8c 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007978:	4603      	mov	r3, r0
 800797a:	f107 020c 	add.w	r2, r7, #12
 800797e:	9302      	str	r3, [sp, #8]
 8007980:	f240 23af 	movw	r3, #687	; 0x2af
 8007984:	9301      	str	r3, [sp, #4]
 8007986:	4b08      	ldr	r3, [pc, #32]	; (80079a8 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x13c>)
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	2300      	movs	r3, #0
 800798c:	4908      	ldr	r1, [pc, #32]	; (80079b0 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_Test8testBodyEv+0x144>)
 800798e:	4620      	mov	r0, r4
 8007990:	47a8      	blx	r5

}
 8007992:	bf00      	nop
 8007994:	377c      	adds	r7, #124	; 0x7c
 8007996:	46bd      	mov	sp, r7
 8007998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800799a:	bf00      	nop
 800799c:	08026048 	.word	0x08026048
 80079a0:	08025b78 	.word	0x08025b78
 80079a4:	08025ba0 	.word	0x08025ba0
 80079a8:	08025848 	.word	0x08025848
 80079ac:	08026018 	.word	0x08026018
 80079b0:	08025a88 	.word	0x08025a88

080079b4 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4618      	mov	r0, r3
 80079c0:	f7fd fe56 	bl	8005670 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80079c4:	4a03      	ldr	r2, [pc, #12]	; (80079d4 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev+0x20>)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	601a      	str	r2, [r3, #0]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4618      	mov	r0, r3
 80079ce:	3708      	adds	r7, #8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	080296c8 	.word	0x080296c8

080079d8 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShell10createTestEv>:
 80079d8:	b590      	push	{r4, r7, lr}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	f240 22b3 	movw	r2, #691	; 0x2b3
 80079e4:	4906      	ldr	r1, [pc, #24]	; (8007a00 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShell10createTestEv+0x28>)
 80079e6:	2004      	movs	r0, #4
 80079e8:	f004 fe9c 	bl	800c724 <_ZnwjPKci>
 80079ec:	4604      	mov	r4, r0
 80079ee:	4620      	mov	r0, r4
 80079f0:	f7ff ffe0 	bl	80079b4 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestC1Ev>
 80079f4:	4623      	mov	r3, r4
 80079f6:	4618      	mov	r0, r3
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd90      	pop	{r4, r7, pc}
 80079fe:	bf00      	nop
 8007a00:	08025848 	.word	0x08025848

08007a04 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev>:
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f00d fa76 	bl	8014f00 <_ZN10UtestShellC1Ev>
 8007a14:	4a03      	ldr	r2, [pc, #12]	; (8007a24 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev+0x20>)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	601a      	str	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	0802961c 	.word	0x0802961c

08007a28 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv>:
{
 8007a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a2a:	b095      	sub	sp, #84	; 0x54
 8007a2c:	af04      	add	r7, sp, #16
 8007a2e:	6078      	str	r0, [r7, #4]

	Status response_state = IDLE;
 8007a30:	2304      	movs	r3, #4
 8007a32:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	char received_message[50] ={0};
 8007a36:	2300      	movs	r3, #0
 8007a38:	60fb      	str	r3, [r7, #12]
 8007a3a:	f107 0310 	add.w	r3, r7, #16
 8007a3e:	222e      	movs	r2, #46	; 0x2e
 8007a40:	2100      	movs	r1, #0
 8007a42:	4618      	mov	r0, r3
 8007a44:	f01a ff14 	bl	8022870 <memset>
	while(1)
	{
		response_state = Wait_TCP_Message(received_message, 1000);
 8007a48:	f107 030c 	add.w	r3, r7, #12
 8007a4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7fc fc19 	bl	8004288 <Wait_TCP_Message>
 8007a56:	4603      	mov	r3, r0
 8007a58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if(response_state != IDLE)
 8007a5c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007a60:	2b04      	cmp	r3, #4
 8007a62:	d100      	bne.n	8007a66 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x3e>
		response_state = Wait_TCP_Message(received_message, 1000);
 8007a64:	e7f0      	b.n	8007a48 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x20>
			break;
 8007a66:	bf00      	nop
	}

	LONGS_EQUAL(TIMEOUT_ERROR,response_state);
 8007a68:	f00e fe02 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8007a6c:	4604      	mov	r4, r0
 8007a6e:	6823      	ldr	r3, [r4, #0]
 8007a70:	3338      	adds	r3, #56	; 0x38
 8007a72:	681d      	ldr	r5, [r3, #0]
 8007a74:	f897 603f 	ldrb.w	r6, [r7, #63]	; 0x3f
 8007a78:	f00e fe0a 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	9302      	str	r3, [sp, #8]
 8007a80:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8007a84:	9301      	str	r3, [sp, #4]
 8007a86:	4b05      	ldr	r3, [pc, #20]	; (8007a9c <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x74>)
 8007a88:	9300      	str	r3, [sp, #0]
 8007a8a:	4b05      	ldr	r3, [pc, #20]	; (8007aa0 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_Test8testBodyEv+0x78>)
 8007a8c:	4632      	mov	r2, r6
 8007a8e:	2101      	movs	r1, #1
 8007a90:	4620      	mov	r0, r4
 8007a92:	47a8      	blx	r5

}
 8007a94:	bf00      	nop
 8007a96:	3744      	adds	r7, #68	; 0x44
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a9c:	08025848 	.word	0x08025848
 8007aa0:	08025be4 	.word	0x08025be4

08007aa4 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7fd fdde 	bl	8005670 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8007ab4:	4a03      	ldr	r2, [pc, #12]	; (8007ac4 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev+0x20>)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	601a      	str	r2, [r3, #0]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4618      	mov	r0, r3
 8007abe:	3708      	adds	r7, #8
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	080295fc 	.word	0x080295fc

08007ac8 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShell10createTestEv>:
 8007ac8:	b590      	push	{r4, r7, lr}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8007ad4:	4906      	ldr	r1, [pc, #24]	; (8007af0 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShell10createTestEv+0x28>)
 8007ad6:	2004      	movs	r0, #4
 8007ad8:	f004 fe24 	bl	800c724 <_ZnwjPKci>
 8007adc:	4604      	mov	r4, r0
 8007ade:	4620      	mov	r0, r4
 8007ae0:	f7ff ffe0 	bl	8007aa4 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestC1Ev>
 8007ae4:	4623      	mov	r3, r4
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	370c      	adds	r7, #12
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd90      	pop	{r4, r7, pc}
 8007aee:	bf00      	nop
 8007af0:	08025848 	.word	0x08025848

08007af4 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev>:
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f00d f9fe 	bl	8014f00 <_ZN10UtestShellC1Ev>
 8007b04:	4a03      	ldr	r2, [pc, #12]	; (8007b14 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev+0x20>)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	601a      	str	r2, [r3, #0]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3708      	adds	r7, #8
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	08029550 	.word	0x08029550

08007b18 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv>:
{
 8007b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b1a:	b0a3      	sub	sp, #140	; 0x8c
 8007b1c:	af04      	add	r7, sp, #16
 8007b1e:	6078      	str	r0, [r7, #4]
	char response[30] = "+IPD,13:PUMP_MOTOR=ON";		// an example string data that ESP received from server
 8007b20:	4b4d      	ldr	r3, [pc, #308]	; (8007c58 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x140>)
 8007b22:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8007b26:	461d      	mov	r5, r3
 8007b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b2c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007b30:	6020      	str	r0, [r4, #0]
 8007b32:	3404      	adds	r4, #4
 8007b34:	8021      	strh	r1, [r4, #0]
 8007b36:	f107 0356 	add.w	r3, r7, #86	; 0x56
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	601a      	str	r2, [r3, #0]
 8007b3e:	605a      	str	r2, [r3, #4]

	Status response_state = IDLE;
 8007b40:	2304      	movs	r3, #4
 8007b42:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	char received_message[50] ={0};
 8007b46:	2300      	movs	r3, #0
 8007b48:	60fb      	str	r3, [r7, #12]
 8007b4a:	f107 0310 	add.w	r3, r7, #16
 8007b4e:	222e      	movs	r2, #46	; 0x2e
 8007b50:	2100      	movs	r1, #0
 8007b52:	4618      	mov	r0, r3
 8007b54:	f01a fe8c 	bl	8022870 <memset>

	while(1)
	{
		response_state = Wait_TCP_Message(received_message, 1000);
 8007b58:	f107 030c 	add.w	r3, r7, #12
 8007b5c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7fc fb91 	bl	8004288 <Wait_TCP_Message>
 8007b66:	4603      	mov	r3, r0
 8007b68:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

		if(response_state != IDLE)
 8007b6c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8007b70:	2b04      	cmp	r3, #4
 8007b72:	d141      	bne.n	8007bf8 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0xe0>
			break;

		for(int i=0;i<(int)strlen(response);i++)
 8007b74:	2300      	movs	r3, #0
 8007b76:	677b      	str	r3, [r7, #116]	; 0x74
 8007b78:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7f8 fb5d 	bl	800023c <strlen>
 8007b82:	4603      	mov	r3, r0
 8007b84:	461a      	mov	r2, r3
 8007b86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	dae5      	bge.n	8007b58 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x40>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8007b8c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007b90:	4932      	ldr	r1, [pc, #200]	; (8007c5c <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x144>)
 8007b92:	4618      	mov	r0, r3
 8007b94:	f007 f989 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8007b98:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f005 fa5c 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8007ba4:	4604      	mov	r4, r0
 8007ba6:	6823      	ldr	r3, [r4, #0]
 8007ba8:	330c      	adds	r3, #12
 8007baa:	681d      	ldr	r5, [r3, #0]
 8007bac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007bb0:	492b      	ldr	r1, [pc, #172]	; (8007c60 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x148>)
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f007 f979 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8007bb8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	47a8      	blx	r5
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	3264      	adds	r2, #100	; 0x64
 8007bc8:	6812      	ldr	r2, [r2, #0]
 8007bca:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8007bce:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8007bd0:	4401      	add	r1, r0
 8007bd2:	7809      	ldrb	r1, [r1, #0]
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	4790      	blx	r2
 8007bd8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f007 fd1c 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8007be2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007be6:	4618      	mov	r0, r3
 8007be8:	f007 fd17 	bl	800f61a <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8007bec:	f7fc f884 	bl	8003cf8 <ESP_UART_ReceiveHandler>
		for(int i=0;i<(int)strlen(response);i++)
 8007bf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	677b      	str	r3, [r7, #116]	; 0x74
 8007bf6:	e7bf      	b.n	8007b78 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x60>
			break;
 8007bf8:	bf00      	nop
		}
	}

	LONGS_EQUAL(STATUS_OK,response_state);
 8007bfa:	f00e fd39 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8007bfe:	4604      	mov	r4, r0
 8007c00:	6823      	ldr	r3, [r4, #0]
 8007c02:	3338      	adds	r3, #56	; 0x38
 8007c04:	681d      	ldr	r5, [r3, #0]
 8007c06:	f897 6073 	ldrb.w	r6, [r7, #115]	; 0x73
 8007c0a:	f00e fd41 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	9302      	str	r3, [sp, #8]
 8007c12:	f240 23da 	movw	r3, #730	; 0x2da
 8007c16:	9301      	str	r3, [sp, #4]
 8007c18:	4b12      	ldr	r3, [pc, #72]	; (8007c64 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x14c>)
 8007c1a:	9300      	str	r3, [sp, #0]
 8007c1c:	4b12      	ldr	r3, [pc, #72]	; (8007c68 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x150>)
 8007c1e:	4632      	mov	r2, r6
 8007c20:	2102      	movs	r1, #2
 8007c22:	4620      	mov	r0, r4
 8007c24:	47a8      	blx	r5
	STRCMP_EQUAL("PUMP_MOTOR=ON",received_message);
 8007c26:	f00e fd23 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8007c2a:	4604      	mov	r4, r0
 8007c2c:	6823      	ldr	r3, [r4, #0]
 8007c2e:	3324      	adds	r3, #36	; 0x24
 8007c30:	681d      	ldr	r5, [r3, #0]
 8007c32:	f00e fd2d 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007c36:	4603      	mov	r3, r0
 8007c38:	f107 020c 	add.w	r2, r7, #12
 8007c3c:	9302      	str	r3, [sp, #8]
 8007c3e:	f240 23db 	movw	r3, #731	; 0x2db
 8007c42:	9301      	str	r3, [sp, #4]
 8007c44:	4b07      	ldr	r3, [pc, #28]	; (8007c64 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x14c>)
 8007c46:	9300      	str	r3, [sp, #0]
 8007c48:	2300      	movs	r3, #0
 8007c4a:	4908      	ldr	r1, [pc, #32]	; (8007c6c <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_Test8testBodyEv+0x154>)
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	47a8      	blx	r5

}
 8007c50:	bf00      	nop
 8007c52:	377c      	adds	r7, #124	; 0x7c
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c58:	08026078 	.word	0x08026078
 8007c5c:	08025b78 	.word	0x08025b78
 8007c60:	08025ba0 	.word	0x08025ba0
 8007c64:	08025848 	.word	0x08025848
 8007c68:	08026018 	.word	0x08026018
 8007c6c:	08026068 	.word	0x08026068

08007c70 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_TCP_Bytes_Test)
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7fd fcf8 	bl	8005670 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8007c80:	4a03      	ldr	r2, [pc, #12]	; (8007c90 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestC1Ev+0x20>)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	601a      	str	r2, [r3, #0]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	08029530 	.word	0x08029530

08007c94 <_ZN55TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestShell10createTestEv>:
 8007c94:	b590      	push	{r4, r7, lr}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	f240 22df 	movw	r2, #735	; 0x2df
 8007ca0:	4906      	ldr	r1, [pc, #24]	; (8007cbc <_ZN55TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestShell10createTestEv+0x28>)
 8007ca2:	2004      	movs	r0, #4
 8007ca4:	f004 fd3e 	bl	800c724 <_ZnwjPKci>
 8007ca8:	4604      	mov	r4, r0
 8007caa:	4620      	mov	r0, r4
 8007cac:	f7ff ffe0 	bl	8007c70 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestC1Ev>
 8007cb0:	4623      	mov	r3, r4
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd90      	pop	{r4, r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	08025848 	.word	0x08025848

08007cc0 <_ZN55TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestShellC1Ev>:
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f00d f918 	bl	8014f00 <_ZN10UtestShellC1Ev>
 8007cd0:	4a03      	ldr	r2, [pc, #12]	; (8007ce0 <_ZN55TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestShellC1Ev+0x20>)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	601a      	str	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	08029484 	.word	0x08029484

08007ce4 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv>:
{
 8007ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ce6:	b0a3      	sub	sp, #140	; 0x8c
 8007ce8:	af04      	add	r7, sp, #16
 8007cea:	6078      	str	r0, [r7, #4]
	uint8_t bytesToSend[5] = {0x00,0x0A,0x45,0x02,0x04};
 8007cec:	4aa8      	ldr	r2, [pc, #672]	; (8007f90 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2ac>)
 8007cee:	f107 0310 	add.w	r3, r7, #16
 8007cf2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007cf6:	6018      	str	r0, [r3, #0]
 8007cf8:	3304      	adds	r3, #4
 8007cfa:	7019      	strb	r1, [r3, #0]
	char *response_buffer[2] =
 8007cfc:	4aa5      	ldr	r2, [pc, #660]	; (8007f94 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2b0>)
 8007cfe:	f107 0308 	add.w	r3, r7, #8
 8007d02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007d06:	e883 0003 	stmia.w	r3, {r0, r1}
	{
			AT_RESPONSE_GREATER_THAN,
			AT_RESPONSE_SEND_OK
	};

	mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t*)"AT+CIPSEND=5\r\n", strlen("AT+CIPSEND=5\r\n")).withIntParameter("size", strlen("AT+CIPSEND=5\r\n"));
 8007d0a:	f107 0318 	add.w	r3, r7, #24
 8007d0e:	49a2      	ldr	r1, [pc, #648]	; (8007f98 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2b4>)
 8007d10:	4618      	mov	r0, r3
 8007d12:	f007 f8ca 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8007d16:	f107 0318 	add.w	r3, r7, #24
 8007d1a:	2100      	movs	r1, #0
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f005 f99d 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8007d22:	4604      	mov	r4, r0
 8007d24:	6823      	ldr	r3, [r4, #0]
 8007d26:	330c      	adds	r3, #12
 8007d28:	681d      	ldr	r5, [r3, #0]
 8007d2a:	f107 0320 	add.w	r3, r7, #32
 8007d2e:	499b      	ldr	r1, [pc, #620]	; (8007f9c <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2b8>)
 8007d30:	4618      	mov	r0, r3
 8007d32:	f007 f8ba 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8007d36:	f107 0320 	add.w	r3, r7, #32
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	47a8      	blx	r5
 8007d40:	4604      	mov	r4, r0
 8007d42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007d46:	4996      	ldr	r1, [pc, #600]	; (8007fa0 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2bc>)
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f007 f8ae 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8007d4e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8007d52:	230e      	movs	r3, #14
 8007d54:	4a93      	ldr	r2, [pc, #588]	; (8007fa4 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2c0>)
 8007d56:	4620      	mov	r0, r4
 8007d58:	f7fc fdfc 	bl	8004954 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 8007d5c:	4604      	mov	r4, r0
 8007d5e:	6823      	ldr	r3, [r4, #0]
 8007d60:	332c      	adds	r3, #44	; 0x2c
 8007d62:	681d      	ldr	r5, [r3, #0]
 8007d64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007d68:	498f      	ldr	r1, [pc, #572]	; (8007fa8 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2c4>)
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f007 f89d 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8007d70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007d74:	220e      	movs	r2, #14
 8007d76:	4619      	mov	r1, r3
 8007d78:	4620      	mov	r0, r4
 8007d7a:	47a8      	blx	r5
 8007d7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007d80:	4618      	mov	r0, r3
 8007d82:	f007 fc4a 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8007d86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f007 fc45 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8007d90:	f107 0320 	add.w	r3, r7, #32
 8007d94:	4618      	mov	r0, r3
 8007d96:	f007 fc40 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8007d9a:	f107 0318 	add.w	r3, r7, #24
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f007 fc3b 	bl	800f61a <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withParameter("data", bytesToSend, 5).withIntParameter("size", 5);
 8007da4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007da8:	497b      	ldr	r1, [pc, #492]	; (8007f98 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2b4>)
 8007daa:	4618      	mov	r0, r3
 8007dac:	f007 f87d 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8007db0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007db4:	2100      	movs	r1, #0
 8007db6:	4618      	mov	r0, r3
 8007db8:	f005 f950 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8007dbc:	4604      	mov	r4, r0
 8007dbe:	6823      	ldr	r3, [r4, #0]
 8007dc0:	330c      	adds	r3, #12
 8007dc2:	681d      	ldr	r5, [r3, #0]
 8007dc4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007dc8:	4974      	ldr	r1, [pc, #464]	; (8007f9c <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2b8>)
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f007 f86d 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8007dd0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	47a8      	blx	r5
 8007dda:	4604      	mov	r4, r0
 8007ddc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007de0:	496f      	ldr	r1, [pc, #444]	; (8007fa0 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2bc>)
 8007de2:	4618      	mov	r0, r3
 8007de4:	f007 f861 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8007de8:	f107 0210 	add.w	r2, r7, #16
 8007dec:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8007df0:	2305      	movs	r3, #5
 8007df2:	4620      	mov	r0, r4
 8007df4:	f7fc fdae 	bl	8004954 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 8007df8:	4604      	mov	r4, r0
 8007dfa:	6823      	ldr	r3, [r4, #0]
 8007dfc:	332c      	adds	r3, #44	; 0x2c
 8007dfe:	681d      	ldr	r5, [r3, #0]
 8007e00:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007e04:	4968      	ldr	r1, [pc, #416]	; (8007fa8 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2c4>)
 8007e06:	4618      	mov	r0, r3
 8007e08:	f007 f84f 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8007e0c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007e10:	2205      	movs	r2, #5
 8007e12:	4619      	mov	r1, r3
 8007e14:	4620      	mov	r0, r4
 8007e16:	47a8      	blx	r5
 8007e18:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f007 fbfc 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8007e22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007e26:	4618      	mov	r0, r3
 8007e28:	f007 fbf7 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8007e2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007e30:	4618      	mov	r0, r3
 8007e32:	f007 fbf2 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8007e36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f007 fbed 	bl	800f61a <_ZN12SimpleStringD1Ev>
	Status response = IDLE;
 8007e40:	2304      	movs	r3, #4
 8007e42:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	int i=0;
 8007e46:	2300      	movs	r3, #0
 8007e48:	677b      	str	r3, [r7, #116]	; 0x74
	while(1){

		response = Send_TCP_Bytes(bytesToSend, 5);
 8007e4a:	f107 0310 	add.w	r3, r7, #16
 8007e4e:	2105      	movs	r1, #5
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7fc f93b 	bl	80040cc <Send_TCP_Bytes>
 8007e56:	4603      	mov	r3, r0
 8007e58:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

		if(response != IDLE)
 8007e5c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8007e60:	2b04      	cmp	r3, #4
 8007e62:	d153      	bne.n	8007f0c <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x228>
		{
			break;
		}

		if(i<2)
 8007e64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	dcef      	bgt.n	8007e4a <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x166>
		{
			for(int j=0;j<(int)strlen(response_buffer[i]);j++)
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	673b      	str	r3, [r7, #112]	; 0x70
 8007e6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007e76:	4413      	add	r3, r2
 8007e78:	f853 3c70 	ldr.w	r3, [r3, #-112]
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7f8 f9dd 	bl	800023c <strlen>
 8007e82:	4603      	mov	r3, r0
 8007e84:	461a      	mov	r2, r3
 8007e86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	da3b      	bge.n	8007f04 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x220>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_buffer[i][j]);
 8007e8c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007e90:	4941      	ldr	r1, [pc, #260]	; (8007f98 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2b4>)
 8007e92:	4618      	mov	r0, r3
 8007e94:	f007 f809 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8007e98:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f005 f8dc 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8007ea4:	4604      	mov	r4, r0
 8007ea6:	6823      	ldr	r3, [r4, #0]
 8007ea8:	330c      	adds	r3, #12
 8007eaa:	681d      	ldr	r5, [r3, #0]
 8007eac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007eb0:	493e      	ldr	r1, [pc, #248]	; (8007fac <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2c8>)
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f006 fff9 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8007eb8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	47a8      	blx	r5
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	6813      	ldr	r3, [r2, #0]
 8007ec6:	3364      	adds	r3, #100	; 0x64
 8007ec8:	681c      	ldr	r4, [r3, #0]
 8007eca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8007ed2:	440b      	add	r3, r1
 8007ed4:	f853 1c70 	ldr.w	r1, [r3, #-112]
 8007ed8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007eda:	440b      	add	r3, r1
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	4619      	mov	r1, r3
 8007ee0:	4610      	mov	r0, r2
 8007ee2:	47a0      	blx	r4
 8007ee4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f007 fb96 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8007eee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f007 fb91 	bl	800f61a <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8007ef8:	f7fb fefe 	bl	8003cf8 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_buffer[i]);j++)
 8007efc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007efe:	3301      	adds	r3, #1
 8007f00:	673b      	str	r3, [r7, #112]	; 0x70
 8007f02:	e7b4      	b.n	8007e6e <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x18a>
			}
			i++;
 8007f04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f06:	3301      	adds	r3, #1
 8007f08:	677b      	str	r3, [r7, #116]	; 0x74
		}

	}
 8007f0a:	e79e      	b.n	8007e4a <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x166>
			break;
 8007f0c:	bf00      	nop

	LONGS_EQUAL(STATUS_OK,response);
 8007f0e:	f00e fbaf 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8007f12:	4604      	mov	r4, r0
 8007f14:	6823      	ldr	r3, [r4, #0]
 8007f16:	3338      	adds	r3, #56	; 0x38
 8007f18:	681d      	ldr	r5, [r3, #0]
 8007f1a:	f897 606b 	ldrb.w	r6, [r7, #107]	; 0x6b
 8007f1e:	f00e fbb7 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007f22:	4603      	mov	r3, r0
 8007f24:	9302      	str	r3, [sp, #8]
 8007f26:	f240 3301 	movw	r3, #769	; 0x301
 8007f2a:	9301      	str	r3, [sp, #4]
 8007f2c:	4b20      	ldr	r3, [pc, #128]	; (8007fb0 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2cc>)
 8007f2e:	9300      	str	r3, [sp, #0]
 8007f30:	4b20      	ldr	r3, [pc, #128]	; (8007fb4 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2d0>)
 8007f32:	4632      	mov	r2, r6
 8007f34:	2102      	movs	r1, #2
 8007f36:	4620      	mov	r0, r4
 8007f38:	47a8      	blx	r5
	for(uint32_t i=0 ; i<rx_buffer->size; i++)
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f3e:	4b1e      	ldr	r3, [pc, #120]	; (8007fb8 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2d4>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d21e      	bcs.n	8007f88 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2a4>
		LONGS_EQUAL(0,rx_buffer->buffer[i]);
 8007f4a:	f00e fb91 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8007f4e:	4604      	mov	r4, r0
 8007f50:	6823      	ldr	r3, [r4, #0]
 8007f52:	3338      	adds	r3, #56	; 0x38
 8007f54:	681d      	ldr	r5, [r3, #0]
 8007f56:	4b18      	ldr	r3, [pc, #96]	; (8007fb8 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2d4>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68da      	ldr	r2, [r3, #12]
 8007f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f5e:	4413      	add	r3, r2
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	461e      	mov	r6, r3
 8007f64:	f00e fb94 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	9302      	str	r3, [sp, #8]
 8007f6c:	f240 3303 	movw	r3, #771	; 0x303
 8007f70:	9301      	str	r3, [sp, #4]
 8007f72:	4b0f      	ldr	r3, [pc, #60]	; (8007fb0 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2cc>)
 8007f74:	9300      	str	r3, [sp, #0]
 8007f76:	4b11      	ldr	r3, [pc, #68]	; (8007fbc <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x2d8>)
 8007f78:	4632      	mov	r2, r6
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	47a8      	blx	r5
	for(uint32_t i=0 ; i<rx_buffer->size; i++)
 8007f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f82:	3301      	adds	r3, #1
 8007f84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f86:	e7da      	b.n	8007f3e <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_Test8testBodyEv+0x25a>

}
 8007f88:	bf00      	nop
 8007f8a:	377c      	adds	r7, #124	; 0x7c
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f90:	080260d4 	.word	0x080260d4
 8007f94:	080260dc 	.word	0x080260dc
 8007f98:	08025b78 	.word	0x08025b78
 8007f9c:	08025b7c 	.word	0x08025b7c
 8007fa0:	08025b90 	.word	0x08025b90
 8007fa4:	08026098 	.word	0x08026098
 8007fa8:	08025b98 	.word	0x08025b98
 8007fac:	08025ba0 	.word	0x08025ba0
 8007fb0:	08025848 	.word	0x08025848
 8007fb4:	08025ddc 	.word	0x08025ddc
 8007fb8:	200010fc 	.word	0x200010fc
 8007fbc:	080260a8 	.word	0x080260a8

08007fc0 <_ZN55TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_TCP_Bytes_Test)
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	4a05      	ldr	r2, [pc, #20]	; (8007fe0 <_ZN55TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestShellD1Ev+0x20>)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	601a      	str	r2, [r3, #0]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f00c ffe9 	bl	8014fa8 <_ZN10UtestShellD1Ev>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3708      	adds	r7, #8
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	08029484 	.word	0x08029484

08007fe4 <_ZN55TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestShellD0Ev>:
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f7ff ffe7 	bl	8007fc0 <_ZN55TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestShellD1Ev>
 8007ff2:	211c      	movs	r1, #28
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f004 fba9 	bl	800c74c <_ZdlPvj>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3708      	adds	r7, #8
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestD1Ev>:
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	4a05      	ldr	r2, [pc, #20]	; (8008024 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestD1Ev+0x20>)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	601a      	str	r2, [r3, #0]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4618      	mov	r0, r3
 8008016:	f7fd fb3d 	bl	8005694 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4618      	mov	r0, r3
 800801e:	3708      	adds	r7, #8
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}
 8008024:	08029530 	.word	0x08029530

08008028 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestD0Ev>:
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f7ff ffe7 	bl	8008004 <_ZN50TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestD1Ev>
 8008036:	2104      	movs	r1, #4
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f004 fb87 	bl	800c74c <_ZdlPvj>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4618      	mov	r0, r3
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	4a05      	ldr	r2, [pc, #20]	; (8008068 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev+0x20>)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4618      	mov	r0, r3
 800805a:	f00c ffa5 	bl	8014fa8 <_ZN10UtestShellD1Ev>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4618      	mov	r0, r3
 8008062:	3708      	adds	r7, #8
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	08029550 	.word	0x08029550

0800806c <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD0Ev>:
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f7ff ffe7 	bl	8008048 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>
 800807a:	211c      	movs	r1, #28
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f004 fb65 	bl	800c74c <_ZdlPvj>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4618      	mov	r0, r3
 8008086:	3708      	adds	r7, #8
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev>:
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	4a05      	ldr	r2, [pc, #20]	; (80080ac <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev+0x20>)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	601a      	str	r2, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4618      	mov	r0, r3
 800809e:	f7fd faf9 	bl	8005694 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4618      	mov	r0, r3
 80080a6:	3708      	adds	r7, #8
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	080295fc 	.word	0x080295fc

080080b0 <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD0Ev>:
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f7ff ffe7 	bl	800808c <_ZN52TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestD1Ev>
 80080be:	2104      	movs	r1, #4
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f004 fb43 	bl	800c74c <_ZdlPvj>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4618      	mov	r0, r3
 80080ca:	3708      	adds	r7, #8
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	4a05      	ldr	r2, [pc, #20]	; (80080f0 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev+0x20>)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	601a      	str	r2, [r3, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f00c ff61 	bl	8014fa8 <_ZN10UtestShellD1Ev>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4618      	mov	r0, r3
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	0802961c 	.word	0x0802961c

080080f4 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD0Ev>:
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f7ff ffe7 	bl	80080d0 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>
 8008102:	211c      	movs	r1, #28
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f004 fb21 	bl	800c74c <_ZdlPvj>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4618      	mov	r0, r3
 800810e:	3708      	adds	r7, #8
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev>:
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	4a05      	ldr	r2, [pc, #20]	; (8008134 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev+0x20>)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	601a      	str	r2, [r3, #0]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4618      	mov	r0, r3
 8008126:	f7fd fab5 	bl	8005694 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4618      	mov	r0, r3
 800812e:	3708      	adds	r7, #8
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	080296c8 	.word	0x080296c8

08008138 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD0Ev>:
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f7ff ffe7 	bl	8008114 <_ZN60TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestD1Ev>
 8008146:	2104      	movs	r1, #4
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f004 faff 	bl	800c74c <_ZdlPvj>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4618      	mov	r0, r3
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	4a05      	ldr	r2, [pc, #20]	; (8008178 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev+0x20>)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	601a      	str	r2, [r3, #0]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4618      	mov	r0, r3
 800816a:	f00c ff1d 	bl	8014fa8 <_ZN10UtestShellD1Ev>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4618      	mov	r0, r3
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	080296e8 	.word	0x080296e8

0800817c <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD0Ev>:
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f7ff ffe7 	bl	8008158 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>
 800818a:	211c      	movs	r1, #28
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f004 fadd 	bl	800c74c <_ZdlPvj>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4618      	mov	r0, r3
 8008196:	3708      	adds	r7, #8
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev>:
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	4a05      	ldr	r2, [pc, #20]	; (80081bc <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev+0x20>)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	601a      	str	r2, [r3, #0]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7fd fa71 	bl	8005694 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4618      	mov	r0, r3
 80081b6:	3708      	adds	r7, #8
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	08029794 	.word	0x08029794

080081c0 <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD0Ev>:
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f7ff ffe7 	bl	800819c <_ZN52TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestD1Ev>
 80081ce:	2104      	movs	r1, #4
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f004 fabb 	bl	800c74c <_ZdlPvj>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4618      	mov	r0, r3
 80081da:	3708      	adds	r7, #8
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	4a05      	ldr	r2, [pc, #20]	; (8008200 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev+0x20>)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	601a      	str	r2, [r3, #0]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4618      	mov	r0, r3
 80081f2:	f00c fed9 	bl	8014fa8 <_ZN10UtestShellD1Ev>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4618      	mov	r0, r3
 80081fa:	3708      	adds	r7, #8
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	080297b4 	.word	0x080297b4

08008204 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD0Ev>:
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f7ff ffe7 	bl	80081e0 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>
 8008212:	211c      	movs	r1, #28
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f004 fa99 	bl	800c74c <_ZdlPvj>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4618      	mov	r0, r3
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev>:
 8008224:	b580      	push	{r7, lr}
 8008226:	b082      	sub	sp, #8
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	4a05      	ldr	r2, [pc, #20]	; (8008244 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev+0x20>)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	601a      	str	r2, [r3, #0]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4618      	mov	r0, r3
 8008236:	f7fd fa2d 	bl	8005694 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4618      	mov	r0, r3
 800823e:	3708      	adds	r7, #8
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	08029860 	.word	0x08029860

08008248 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD0Ev>:
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f7ff ffe7 	bl	8008224 <_ZN52TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestD1Ev>
 8008256:	2104      	movs	r1, #4
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f004 fa77 	bl	800c74c <_ZdlPvj>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4618      	mov	r0, r3
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	4a05      	ldr	r2, [pc, #20]	; (8008288 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev+0x20>)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	601a      	str	r2, [r3, #0]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4618      	mov	r0, r3
 800827a:	f00c fe95 	bl	8014fa8 <_ZN10UtestShellD1Ev>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4618      	mov	r0, r3
 8008282:	3708      	adds	r7, #8
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	08029880 	.word	0x08029880

0800828c <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD0Ev>:
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f7ff ffe7 	bl	8008268 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>
 800829a:	211c      	movs	r1, #28
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f004 fa55 	bl	800c74c <_ZdlPvj>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4618      	mov	r0, r3
 80082a6:	3708      	adds	r7, #8
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev>:
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	4a05      	ldr	r2, [pc, #20]	; (80082cc <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev+0x20>)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	601a      	str	r2, [r3, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4618      	mov	r0, r3
 80082be:	f7fd f9e9 	bl	8005694 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4618      	mov	r0, r3
 80082c6:	3708      	adds	r7, #8
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	0802992c 	.word	0x0802992c

080082d0 <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD0Ev>:
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f7ff ffe7 	bl	80082ac <_ZN50TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestD1Ev>
 80082de:	2104      	movs	r1, #4
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f004 fa33 	bl	800c74c <_ZdlPvj>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4618      	mov	r0, r3
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	4a05      	ldr	r2, [pc, #20]	; (8008310 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev+0x20>)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	601a      	str	r2, [r3, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4618      	mov	r0, r3
 8008302:	f00c fe51 	bl	8014fa8 <_ZN10UtestShellD1Ev>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4618      	mov	r0, r3
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	0802994c 	.word	0x0802994c

08008314 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD0Ev>:
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f7ff ffe7 	bl	80082f0 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>
 8008322:	211c      	movs	r1, #28
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f004 fa11 	bl	800c74c <_ZdlPvj>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4618      	mov	r0, r3
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev>:
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	4a05      	ldr	r2, [pc, #20]	; (8008354 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev+0x20>)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	601a      	str	r2, [r3, #0]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4618      	mov	r0, r3
 8008346:	f7fd f9a5 	bl	8005694 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4618      	mov	r0, r3
 800834e:	3708      	adds	r7, #8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	080299f8 	.word	0x080299f8

08008358 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD0Ev>:
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f7ff ffe7 	bl	8008334 <_ZN53TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestD1Ev>
 8008366:	2104      	movs	r1, #4
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f004 f9ef 	bl	800c74c <_ZdlPvj>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4618      	mov	r0, r3
 8008372:	3708      	adds	r7, #8
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	4a05      	ldr	r2, [pc, #20]	; (8008398 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev+0x20>)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	601a      	str	r2, [r3, #0]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4618      	mov	r0, r3
 800838a:	f00c fe0d 	bl	8014fa8 <_ZN10UtestShellD1Ev>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4618      	mov	r0, r3
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	08029a18 	.word	0x08029a18

0800839c <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD0Ev>:
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f7ff ffe7 	bl	8008378 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>
 80083aa:	211c      	movs	r1, #28
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f004 f9cd 	bl	800c74c <_ZdlPvj>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4618      	mov	r0, r3
 80083b6:	3708      	adds	r7, #8
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev>:
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	4a05      	ldr	r2, [pc, #20]	; (80083dc <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev+0x20>)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	601a      	str	r2, [r3, #0]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7fd f961 	bl	8005694 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4618      	mov	r0, r3
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	08029ac4 	.word	0x08029ac4

080083e0 <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD0Ev>:
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7ff ffe7 	bl	80083bc <_ZN55TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestD1Ev>
 80083ee:	2104      	movs	r1, #4
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f004 f9ab 	bl	800c74c <_ZdlPvj>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4618      	mov	r0, r3
 80083fa:	3708      	adds	r7, #8
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	4a05      	ldr	r2, [pc, #20]	; (8008420 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev+0x20>)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	601a      	str	r2, [r3, #0]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4618      	mov	r0, r3
 8008412:	f00c fdc9 	bl	8014fa8 <_ZN10UtestShellD1Ev>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4618      	mov	r0, r3
 800841a:	3708      	adds	r7, #8
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	08029ae4 	.word	0x08029ae4

08008424 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD0Ev>:
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f7ff ffe7 	bl	8008400 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>
 8008432:	211c      	movs	r1, #28
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f004 f989 	bl	800c74c <_ZdlPvj>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4618      	mov	r0, r3
 800843e:	3708      	adds	r7, #8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev>:
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	4a05      	ldr	r2, [pc, #20]	; (8008464 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev+0x20>)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	601a      	str	r2, [r3, #0]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4618      	mov	r0, r3
 8008456:	f7fd f91d 	bl	8005694 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4618      	mov	r0, r3
 800845e:	3708      	adds	r7, #8
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	08029b90 	.word	0x08029b90

08008468 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD0Ev>:
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f7ff ffe7 	bl	8008444 <_ZN47TEST_EspDriver_Test_Group_Connect_TCP_Test_TestD1Ev>
 8008476:	2104      	movs	r1, #4
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f004 f967 	bl	800c74c <_ZdlPvj>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4618      	mov	r0, r3
 8008482:	3708      	adds	r7, #8
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Command_Process_Test)
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	4a05      	ldr	r2, [pc, #20]	; (80084a8 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev+0x20>)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	601a      	str	r2, [r3, #0]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4618      	mov	r0, r3
 800849a:	f00c fd85 	bl	8014fa8 <_ZN10UtestShellD1Ev>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4618      	mov	r0, r3
 80084a2:	3708      	adds	r7, #8
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	08029bb0 	.word	0x08029bb0

080084ac <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD0Ev>:
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b082      	sub	sp, #8
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f7ff ffe7 	bl	8008488 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>
 80084ba:	211c      	movs	r1, #28
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f004 f945 	bl	800c74c <_ZdlPvj>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4618      	mov	r0, r3
 80084c6:	3708      	adds	r7, #8
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev>:
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	4a05      	ldr	r2, [pc, #20]	; (80084ec <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev+0x20>)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	601a      	str	r2, [r3, #0]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4618      	mov	r0, r3
 80084de:	f7fd f8d9 	bl	8005694 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4618      	mov	r0, r3
 80084e6:	3708      	adds	r7, #8
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	08029c5c 	.word	0x08029c5c

080084f0 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD0Ev>:
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f7ff ffe7 	bl	80084cc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev>
 80084fe:	2104      	movs	r1, #4
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f004 f923 	bl	800c74c <_ZdlPvj>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4618      	mov	r0, r3
 800850a:	3708      	adds	r7, #8
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	4a05      	ldr	r2, [pc, #20]	; (8008530 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev+0x20>)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	601a      	str	r2, [r3, #0]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4618      	mov	r0, r3
 8008522:	f00c fd41 	bl	8014fa8 <_ZN10UtestShellD1Ev>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4618      	mov	r0, r3
 800852a:	3708      	adds	r7, #8
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	08029c7c 	.word	0x08029c7c

08008534 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD0Ev>:
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f7ff ffe7 	bl	8008510 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
 8008542:	211c      	movs	r1, #28
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f004 f901 	bl	800c74c <_ZdlPvj>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4618      	mov	r0, r3
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>:
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	4a05      	ldr	r2, [pc, #20]	; (8008574 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev+0x20>)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	601a      	str	r2, [r3, #0]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4618      	mov	r0, r3
 8008566:	f7fd f895 	bl	8005694 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4618      	mov	r0, r3
 800856e:	3708      	adds	r7, #8
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	08029d28 	.word	0x08029d28

08008578 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD0Ev>:
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f7ff ffe7 	bl	8008554 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>
 8008586:	2104      	movs	r1, #4
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f004 f8df 	bl	800c74c <_ZdlPvj>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4618      	mov	r0, r3
 8008592:	3708      	adds	r7, #8
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	4a05      	ldr	r2, [pc, #20]	; (80085b8 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	601a      	str	r2, [r3, #0]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4618      	mov	r0, r3
 80085aa:	f00c fcfd 	bl	8014fa8 <_ZN10UtestShellD1Ev>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4618      	mov	r0, r3
 80085b2:	3708      	adds	r7, #8
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	08029d48 	.word	0x08029d48

080085bc <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD0Ev>:
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f7ff ffe7 	bl	8008598 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
 80085ca:	211c      	movs	r1, #28
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f004 f8bd 	bl	800c74c <_ZdlPvj>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4618      	mov	r0, r3
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>:
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	4a05      	ldr	r2, [pc, #20]	; (80085fc <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	601a      	str	r2, [r3, #0]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4618      	mov	r0, r3
 80085ee:	f7fd f851 	bl	8005694 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4618      	mov	r0, r3
 80085f6:	3708      	adds	r7, #8
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	08029df4 	.word	0x08029df4

08008600 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD0Ev>:
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f7ff ffe7 	bl	80085dc <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>
 800860e:	2104      	movs	r1, #4
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f004 f89b 	bl	800c74c <_ZdlPvj>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4618      	mov	r0, r3
 800861a:	3708      	adds	r7, #8
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	4a05      	ldr	r2, [pc, #20]	; (8008640 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev+0x20>)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	601a      	str	r2, [r3, #0]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4618      	mov	r0, r3
 8008632:	f00c fcb9 	bl	8014fa8 <_ZN10UtestShellD1Ev>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4618      	mov	r0, r3
 800863a:	3708      	adds	r7, #8
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	08029e14 	.word	0x08029e14

08008644 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD0Ev>:
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f7ff ffe7 	bl	8008620 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
 8008652:	211c      	movs	r1, #28
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f004 f879 	bl	800c74c <_ZdlPvj>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4618      	mov	r0, r3
 800865e:	3708      	adds	r7, #8
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>:
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	4a05      	ldr	r2, [pc, #20]	; (8008684 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev+0x20>)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	601a      	str	r2, [r3, #0]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4618      	mov	r0, r3
 8008676:	f7fd f80d 	bl	8005694 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4618      	mov	r0, r3
 800867e:	3708      	adds	r7, #8
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	08029ec0 	.word	0x08029ec0

08008688 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD0Ev>:
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f7ff ffe7 	bl	8008664 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>
 8008696:	2104      	movs	r1, #4
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f004 f857 	bl	800c74c <_ZdlPvj>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4618      	mov	r0, r3
 80086a2:	3708      	adds	r7, #8
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	4a05      	ldr	r2, [pc, #20]	; (80086c8 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev+0x20>)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	601a      	str	r2, [r3, #0]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4618      	mov	r0, r3
 80086ba:	f00c fc75 	bl	8014fa8 <_ZN10UtestShellD1Ev>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4618      	mov	r0, r3
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	08029ee0 	.word	0x08029ee0

080086cc <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD0Ev>:
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f7ff ffe7 	bl	80086a8 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
 80086da:	211c      	movs	r1, #28
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f004 f835 	bl	800c74c <_ZdlPvj>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4618      	mov	r0, r3
 80086e6:	3708      	adds	r7, #8
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>:
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	4a05      	ldr	r2, [pc, #20]	; (800870c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev+0x20>)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	601a      	str	r2, [r3, #0]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7fc ffc9 	bl	8005694 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4618      	mov	r0, r3
 8008706:	3708      	adds	r7, #8
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	08029f8c 	.word	0x08029f8c

08008710 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD0Ev>:
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f7ff ffe7 	bl	80086ec <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>
 800871e:	2104      	movs	r1, #4
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f004 f813 	bl	800c74c <_ZdlPvj>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4618      	mov	r0, r3
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	4a05      	ldr	r2, [pc, #20]	; (8008750 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	601a      	str	r2, [r3, #0]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4618      	mov	r0, r3
 8008742:	f00c fc31 	bl	8014fa8 <_ZN10UtestShellD1Ev>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4618      	mov	r0, r3
 800874a:	3708      	adds	r7, #8
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}
 8008750:	08029fac 	.word	0x08029fac

08008754 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD0Ev>:
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f7ff ffe7 	bl	8008730 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
 8008762:	211c      	movs	r1, #28
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f003 fff1 	bl	800c74c <_ZdlPvj>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4618      	mov	r0, r3
 800876e:	3708      	adds	r7, #8
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>:
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	4a05      	ldr	r2, [pc, #20]	; (8008794 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	601a      	str	r2, [r3, #0]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4618      	mov	r0, r3
 8008786:	f7fc ff85 	bl	8005694 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4618      	mov	r0, r3
 800878e:	3708      	adds	r7, #8
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}
 8008794:	0802a058 	.word	0x0802a058

08008798 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD0Ev>:
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f7ff ffe7 	bl	8008774 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>
 80087a6:	2104      	movs	r1, #4
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f003 ffcf 	bl	800c74c <_ZdlPvj>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4618      	mov	r0, r3
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Test)
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	4a05      	ldr	r2, [pc, #20]	; (80087d8 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev+0x20>)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	601a      	str	r2, [r3, #0]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4618      	mov	r0, r3
 80087ca:	f00c fbed 	bl	8014fa8 <_ZN10UtestShellD1Ev>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4618      	mov	r0, r3
 80087d2:	3708      	adds	r7, #8
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	0802a078 	.word	0x0802a078

080087dc <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD0Ev>:
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f7ff ffe7 	bl	80087b8 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
 80087ea:	211c      	movs	r1, #28
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f003 ffad 	bl	800c74c <_ZdlPvj>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4618      	mov	r0, r3
 80087f6:	3708      	adds	r7, #8
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>:
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	4a05      	ldr	r2, [pc, #20]	; (800881c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev+0x20>)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	601a      	str	r2, [r3, #0]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4618      	mov	r0, r3
 800880e:	f7fc ff41 	bl	8005694 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4618      	mov	r0, r3
 8008816:	3708      	adds	r7, #8
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	0802a124 	.word	0x0802a124

08008820 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD0Ev>:
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f7ff ffe7 	bl	80087fc <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>
 800882e:	2104      	movs	r1, #4
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f003 ff8b 	bl	800c74c <_ZdlPvj>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4618      	mov	r0, r3
 800883a:	3708      	adds	r7, #8
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8008840:	b580      	push	{r7, lr}
 8008842:	b082      	sub	sp, #8
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	4a05      	ldr	r2, [pc, #20]	; (8008860 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev+0x20>)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	601a      	str	r2, [r3, #0]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4618      	mov	r0, r3
 8008852:	f00c fba9 	bl	8014fa8 <_ZN10UtestShellD1Ev>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	4618      	mov	r0, r3
 800885a:	3708      	adds	r7, #8
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}
 8008860:	0802a144 	.word	0x0802a144

08008864 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD0Ev>:
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f7ff ffe7 	bl	8008840 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
 8008872:	211c      	movs	r1, #28
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f003 ff69 	bl	800c74c <_ZdlPvj>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4618      	mov	r0, r3
 800887e:	3708      	adds	r7, #8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>:
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	4a05      	ldr	r2, [pc, #20]	; (80088a4 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev+0x20>)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	601a      	str	r2, [r3, #0]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4618      	mov	r0, r3
 8008896:	f7fc fefd 	bl	8005694 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4618      	mov	r0, r3
 800889e:	3708      	adds	r7, #8
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	0802a1f0 	.word	0x0802a1f0

080088a8 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD0Ev>:
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f7ff ffe7 	bl	8008884 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>
 80088b6:	2104      	movs	r1, #4
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f003 ff47 	bl	800c74c <_ZdlPvj>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4618      	mov	r0, r3
 80088c2:	3708      	adds	r7, #8
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_Response_Test)
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	4a05      	ldr	r2, [pc, #20]	; (80088e8 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev+0x20>)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	601a      	str	r2, [r3, #0]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4618      	mov	r0, r3
 80088da:	f00c fb65 	bl	8014fa8 <_ZN10UtestShellD1Ev>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	4618      	mov	r0, r3
 80088e2:	3708      	adds	r7, #8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	0802a210 	.word	0x0802a210

080088ec <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD0Ev>:
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b082      	sub	sp, #8
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f7ff ffe7 	bl	80088c8 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
 80088fa:	211c      	movs	r1, #28
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f003 ff25 	bl	800c74c <_ZdlPvj>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4618      	mov	r0, r3
 8008906:	3708      	adds	r7, #8
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>:
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	4a05      	ldr	r2, [pc, #20]	; (800892c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev+0x20>)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	601a      	str	r2, [r3, #0]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4618      	mov	r0, r3
 800891e:	f7fc feb9 	bl	8005694 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	4618      	mov	r0, r3
 8008926:	3708      	adds	r7, #8
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	0802a2bc 	.word	0x0802a2bc

08008930 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD0Ev>:
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f7ff ffe7 	bl	800890c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>
 800893e:	2104      	movs	r1, #4
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f003 ff03 	bl	800c74c <_ZdlPvj>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4618      	mov	r0, r3
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	4a05      	ldr	r2, [pc, #20]	; (8008970 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev+0x20>)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	601a      	str	r2, [r3, #0]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4618      	mov	r0, r3
 8008962:	f00c fb21 	bl	8014fa8 <_ZN10UtestShellD1Ev>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4618      	mov	r0, r3
 800896a:	3708      	adds	r7, #8
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}
 8008970:	0802a2dc 	.word	0x0802a2dc

08008974 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD0Ev>:
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f7ff ffe7 	bl	8008950 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
 8008982:	211c      	movs	r1, #28
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f003 fee1 	bl	800c74c <_ZdlPvj>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4618      	mov	r0, r3
 800898e:	3708      	adds	r7, #8
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>:
 8008994:	b580      	push	{r7, lr}
 8008996:	b082      	sub	sp, #8
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	4a05      	ldr	r2, [pc, #20]	; (80089b4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev+0x20>)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	601a      	str	r2, [r3, #0]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7fc fe75 	bl	8005694 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4618      	mov	r0, r3
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	0802a388 	.word	0x0802a388

080089b8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD0Ev>:
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f7ff ffe7 	bl	8008994 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>
 80089c6:	2104      	movs	r1, #4
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f003 febf 	bl	800c74c <_ZdlPvj>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4618      	mov	r0, r3
 80089d2:	3708      	adds	r7, #8
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	4a05      	ldr	r2, [pc, #20]	; (80089f8 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev+0x20>)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	601a      	str	r2, [r3, #0]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4618      	mov	r0, r3
 80089ea:	f00c fadd 	bl	8014fa8 <_ZN10UtestShellD1Ev>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	4618      	mov	r0, r3
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	0802a3a8 	.word	0x0802a3a8

080089fc <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD0Ev>:
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f7ff ffe7 	bl	80089d8 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
 8008a0a:	211c      	movs	r1, #28
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f003 fe9d 	bl	800c74c <_ZdlPvj>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4618      	mov	r0, r3
 8008a16:	3708      	adds	r7, #8
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>:
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	4a05      	ldr	r2, [pc, #20]	; (8008a3c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev+0x20>)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	601a      	str	r2, [r3, #0]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f7fc fe31 	bl	8005694 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4618      	mov	r0, r3
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	0802a454 	.word	0x0802a454

08008a40 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD0Ev>:
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f7ff ffe7 	bl	8008a1c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>
 8008a4e:	2104      	movs	r1, #4
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f003 fe7b 	bl	800c74c <_ZdlPvj>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3708      	adds	r7, #8
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	4a05      	ldr	r2, [pc, #20]	; (8008a80 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev+0x20>)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	601a      	str	r2, [r3, #0]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4618      	mov	r0, r3
 8008a72:	f00c fa99 	bl	8014fa8 <_ZN10UtestShellD1Ev>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3708      	adds	r7, #8
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	0802a474 	.word	0x0802a474

08008a84 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD0Ev>:
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f7ff ffe7 	bl	8008a60 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
 8008a92:	211c      	movs	r1, #28
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f003 fe59 	bl	800c74c <_ZdlPvj>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>:
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	4a05      	ldr	r2, [pc, #20]	; (8008ac4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev+0x20>)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	601a      	str	r2, [r3, #0]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7fc fded 	bl	8005694 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4618      	mov	r0, r3
 8008abe:	3708      	adds	r7, #8
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	0802a520 	.word	0x0802a520

08008ac8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD0Ev>:
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f7ff ffe7 	bl	8008aa4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>
 8008ad6:	2104      	movs	r1, #4
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f003 fe37 	bl	800c74c <_ZdlPvj>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3708      	adds	r7, #8
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, CapacityTest)
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	4a05      	ldr	r2, [pc, #20]	; (8008b08 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev+0x20>)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	601a      	str	r2, [r3, #0]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4618      	mov	r0, r3
 8008afa:	f00c fa55 	bl	8014fa8 <_ZN10UtestShellD1Ev>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4618      	mov	r0, r3
 8008b02:	3708      	adds	r7, #8
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	0802a560 	.word	0x0802a560

08008b0c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD0Ev>:
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f7ff ffe7 	bl	8008ae8 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
 8008b1a:	211c      	movs	r1, #28
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f003 fe15 	bl	800c74c <_ZdlPvj>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4618      	mov	r0, r3
 8008b26:	3708      	adds	r7, #8
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>:
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	4a05      	ldr	r2, [pc, #20]	; (8008b4c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev+0x20>)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	601a      	str	r2, [r3, #0]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7fb ff4b 	bl	80049d8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4618      	mov	r0, r3
 8008b46:	3708      	adds	r7, #8
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	0802a60c 	.word	0x0802a60c

08008b50 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD0Ev>:
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f7ff ffe7 	bl	8008b2c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>
 8008b5e:	2108      	movs	r1, #8
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f003 fdf3 	bl	800c74c <_ZdlPvj>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3708      	adds	r7, #8
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, LookForTest)
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	4a05      	ldr	r2, [pc, #20]	; (8008b90 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev+0x20>)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	601a      	str	r2, [r3, #0]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4618      	mov	r0, r3
 8008b82:	f00c fa11 	bl	8014fa8 <_ZN10UtestShellD1Ev>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3708      	adds	r7, #8
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	0802a62c 	.word	0x0802a62c

08008b94 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD0Ev>:
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f7ff ffe7 	bl	8008b70 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
 8008ba2:	211c      	movs	r1, #28
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f003 fdd1 	bl	800c74c <_ZdlPvj>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4618      	mov	r0, r3
 8008bae:	3708      	adds	r7, #8
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>:
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	4a05      	ldr	r2, [pc, #20]	; (8008bd4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev+0x20>)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	601a      	str	r2, [r3, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7fb ff07 	bl	80049d8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3708      	adds	r7, #8
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	0802a6d8 	.word	0x0802a6d8

08008bd8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD0Ev>:
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f7ff ffe7 	bl	8008bb4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>
 8008be6:	2108      	movs	r1, #8
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f003 fdaf 	bl	800c74c <_ZdlPvj>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3708      	adds	r7, #8
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushArrayTest)
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	4a05      	ldr	r2, [pc, #20]	; (8008c18 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev+0x20>)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	601a      	str	r2, [r3, #0]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f00c f9cd 	bl	8014fa8 <_ZN10UtestShellD1Ev>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4618      	mov	r0, r3
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	0802a6f8 	.word	0x0802a6f8

08008c1c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD0Ev>:
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f7ff ffe7 	bl	8008bf8 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
 8008c2a:	211c      	movs	r1, #28
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f003 fd8d 	bl	800c74c <_ZdlPvj>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4618      	mov	r0, r3
 8008c36:	3708      	adds	r7, #8
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>:
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	4a05      	ldr	r2, [pc, #20]	; (8008c5c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev+0x20>)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	601a      	str	r2, [r3, #0]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f7fb fec3 	bl	80049d8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	4618      	mov	r0, r3
 8008c56:	3708      	adds	r7, #8
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	0802a7a4 	.word	0x0802a7a4

08008c60 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD0Ev>:
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7ff ffe7 	bl	8008c3c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>
 8008c6e:	2108      	movs	r1, #8
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f003 fd6b 	bl	800c74c <_ZdlPvj>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3708      	adds	r7, #8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	4a05      	ldr	r2, [pc, #20]	; (8008ca0 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev+0x20>)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	601a      	str	r2, [r3, #0]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4618      	mov	r0, r3
 8008c92:	f00c f989 	bl	8014fa8 <_ZN10UtestShellD1Ev>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3708      	adds	r7, #8
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	0802a7c4 	.word	0x0802a7c4

08008ca4 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD0Ev>:
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f7ff ffe7 	bl	8008c80 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
 8008cb2:	211c      	movs	r1, #28
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f003 fd49 	bl	800c74c <_ZdlPvj>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>:
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	4a05      	ldr	r2, [pc, #20]	; (8008ce4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev+0x20>)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	601a      	str	r2, [r3, #0]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7fb fe7f 	bl	80049d8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3708      	adds	r7, #8
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}
 8008ce4:	0802a870 	.word	0x0802a870

08008ce8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD0Ev>:
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f7ff ffe7 	bl	8008cc4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>
 8008cf6:	2108      	movs	r1, #8
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f003 fd27 	bl	800c74c <_ZdlPvj>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4618      	mov	r0, r3
 8008d02:	3708      	adds	r7, #8
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	4a05      	ldr	r2, [pc, #20]	; (8008d28 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev+0x20>)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	601a      	str	r2, [r3, #0]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f00c f945 	bl	8014fa8 <_ZN10UtestShellD1Ev>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4618      	mov	r0, r3
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	0802a890 	.word	0x0802a890

08008d2c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD0Ev>:
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f7ff ffe7 	bl	8008d08 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
 8008d3a:	211c      	movs	r1, #28
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f003 fd05 	bl	800c74c <_ZdlPvj>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4618      	mov	r0, r3
 8008d46:	3708      	adds	r7, #8
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>:
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	4a05      	ldr	r2, [pc, #20]	; (8008d6c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev+0x20>)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	601a      	str	r2, [r3, #0]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7fb fe3b 	bl	80049d8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4618      	mov	r0, r3
 8008d66:	3708      	adds	r7, #8
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	0802a93c 	.word	0x0802a93c

08008d70 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD0Ev>:
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f7ff ffe7 	bl	8008d4c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>
 8008d7e:	2108      	movs	r1, #8
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f003 fce3 	bl	800c74c <_ZdlPvj>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3708      	adds	r7, #8
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopDataTests)
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	4a05      	ldr	r2, [pc, #20]	; (8008db0 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev+0x20>)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	601a      	str	r2, [r3, #0]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4618      	mov	r0, r3
 8008da2:	f00c f901 	bl	8014fa8 <_ZN10UtestShellD1Ev>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4618      	mov	r0, r3
 8008daa:	3708      	adds	r7, #8
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	0802a95c 	.word	0x0802a95c

08008db4 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD0Ev>:
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f7ff ffe7 	bl	8008d90 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
 8008dc2:	211c      	movs	r1, #28
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f003 fcc1 	bl	800c74c <_ZdlPvj>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3708      	adds	r7, #8
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>:
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	4a05      	ldr	r2, [pc, #20]	; (8008df4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev+0x20>)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	601a      	str	r2, [r3, #0]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4618      	mov	r0, r3
 8008de6:	f7fb fdf7 	bl	80049d8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4618      	mov	r0, r3
 8008dee:	3708      	adds	r7, #8
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	0802aa08 	.word	0x0802aa08

08008df8 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD0Ev>:
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f7ff ffe7 	bl	8008dd4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>
 8008e06:	2108      	movs	r1, #8
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f003 fc9f 	bl	800c74c <_ZdlPvj>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4618      	mov	r0, r3
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	4a05      	ldr	r2, [pc, #20]	; (8008e38 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev+0x20>)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	601a      	str	r2, [r3, #0]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f00c f8bd 	bl	8014fa8 <_ZN10UtestShellD1Ev>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4618      	mov	r0, r3
 8008e32:	3708      	adds	r7, #8
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	0802aa28 	.word	0x0802aa28

08008e3c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD0Ev>:
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f7ff ffe7 	bl	8008e18 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
 8008e4a:	211c      	movs	r1, #28
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f003 fc7d 	bl	800c74c <_ZdlPvj>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4618      	mov	r0, r3
 8008e56:	3708      	adds	r7, #8
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>:
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	4a05      	ldr	r2, [pc, #20]	; (8008e7c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev+0x20>)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	601a      	str	r2, [r3, #0]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f7fb fdb3 	bl	80049d8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4618      	mov	r0, r3
 8008e76:	3708      	adds	r7, #8
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}
 8008e7c:	0802aad4 	.word	0x0802aad4

08008e80 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD0Ev>:
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f7ff ffe7 	bl	8008e5c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>
 8008e8e:	2108      	movs	r1, #8
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f003 fc5b 	bl	800c74c <_ZdlPvj>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushDataTests)
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	4a05      	ldr	r2, [pc, #20]	; (8008ec0 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev+0x20>)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	601a      	str	r2, [r3, #0]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f00c f879 	bl	8014fa8 <_ZN10UtestShellD1Ev>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3708      	adds	r7, #8
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	0802aaf4 	.word	0x0802aaf4

08008ec4 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD0Ev>:
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f7ff ffe7 	bl	8008ea0 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
 8008ed2:	211c      	movs	r1, #28
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f003 fc39 	bl	800c74c <_ZdlPvj>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4618      	mov	r0, r3
 8008ede:	3708      	adds	r7, #8
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>:
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b082      	sub	sp, #8
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	4a05      	ldr	r2, [pc, #20]	; (8008f04 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev+0x20>)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	601a      	str	r2, [r3, #0]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7fb fd6f 	bl	80049d8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4618      	mov	r0, r3
 8008efe:	3708      	adds	r7, #8
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	0802aba0 	.word	0x0802aba0

08008f08 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD0Ev>:
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f7ff ffe7 	bl	8008ee4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>
 8008f16:	2108      	movs	r1, #8
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f003 fc17 	bl	800c74c <_ZdlPvj>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	4618      	mov	r0, r3
 8008f22:	3708      	adds	r7, #8
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, InitTest)
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	4a05      	ldr	r2, [pc, #20]	; (8008f48 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev+0x20>)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	601a      	str	r2, [r3, #0]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f00c f835 	bl	8014fa8 <_ZN10UtestShellD1Ev>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4618      	mov	r0, r3
 8008f42:	3708      	adds	r7, #8
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	0802abc0 	.word	0x0802abc0

08008f4c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD0Ev>:
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f7ff ffe7 	bl	8008f28 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
 8008f5a:	211c      	movs	r1, #28
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f003 fbf5 	bl	800c74c <_ZdlPvj>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4618      	mov	r0, r3
 8008f66:	3708      	adds	r7, #8
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>:
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	4a05      	ldr	r2, [pc, #20]	; (8008f8c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev+0x20>)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	601a      	str	r2, [r3, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7fb fd2b 	bl	80049d8 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	4618      	mov	r0, r3
 8008f86:	3708      	adds	r7, #8
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	0802ac6c 	.word	0x0802ac6c

08008f90 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD0Ev>:
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f7ff ffe7 	bl	8008f6c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>
 8008f9e:	2108      	movs	r1, #8
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f003 fbd3 	bl	800c74c <_ZdlPvj>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <_Z41__static_initialization_and_destruction_0ii>:
}
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af02      	add	r7, sp, #8
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	f040 8231 	bne.w	8009424 <_Z41__static_initialization_and_destruction_0ii+0x474>
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	f040 822b 	bne.w	8009424 <_Z41__static_initialization_and_destruction_0ii+0x474>
TEST(RingBuffer_Test_Group, InitTest)
 8008fce:	489f      	ldr	r0, [pc, #636]	; (800924c <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8008fd0:	f7fb fd50 	bl	8004a74 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>
 8008fd4:	232c      	movs	r3, #44	; 0x2c
 8008fd6:	9301      	str	r3, [sp, #4]
 8008fd8:	4b9d      	ldr	r3, [pc, #628]	; (8009250 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008fda:	9300      	str	r3, [sp, #0]
 8008fdc:	4b9d      	ldr	r3, [pc, #628]	; (8009254 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8008fde:	4a9e      	ldr	r2, [pc, #632]	; (8009258 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008fe0:	499a      	ldr	r1, [pc, #616]	; (800924c <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8008fe2:	489e      	ldr	r0, [pc, #632]	; (800925c <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8008fe4:	f00d fddc 	bl	8016ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushDataTests)
 8008fe8:	489d      	ldr	r0, [pc, #628]	; (8009260 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8008fea:	f7fb fdf7 	bl	8004bdc <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>
 8008fee:	2336      	movs	r3, #54	; 0x36
 8008ff0:	9301      	str	r3, [sp, #4]
 8008ff2:	4b97      	ldr	r3, [pc, #604]	; (8009250 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8008ff4:	9300      	str	r3, [sp, #0]
 8008ff6:	4b9b      	ldr	r3, [pc, #620]	; (8009264 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8008ff8:	4a97      	ldr	r2, [pc, #604]	; (8009258 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8008ffa:	4999      	ldr	r1, [pc, #612]	; (8009260 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8008ffc:	489a      	ldr	r0, [pc, #616]	; (8009268 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8008ffe:	f00d fdcf 	bl	8016ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8009002:	489a      	ldr	r0, [pc, #616]	; (800926c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8009004:	f7fb fe74 	bl	8004cf0 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>
 8009008:	2340      	movs	r3, #64	; 0x40
 800900a:	9301      	str	r3, [sp, #4]
 800900c:	4b90      	ldr	r3, [pc, #576]	; (8009250 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800900e:	9300      	str	r3, [sp, #0]
 8009010:	4b97      	ldr	r3, [pc, #604]	; (8009270 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8009012:	4a91      	ldr	r2, [pc, #580]	; (8009258 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8009014:	4995      	ldr	r1, [pc, #596]	; (800926c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8009016:	4897      	ldr	r0, [pc, #604]	; (8009274 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8009018:	f00d fdc2 	bl	8016ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopDataTests)
 800901c:	4896      	ldr	r0, [pc, #600]	; (8009278 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 800901e:	f7fb feef 	bl	8004e00 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>
 8009022:	234b      	movs	r3, #75	; 0x4b
 8009024:	9301      	str	r3, [sp, #4]
 8009026:	4b8a      	ldr	r3, [pc, #552]	; (8009250 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8009028:	9300      	str	r3, [sp, #0]
 800902a:	4b94      	ldr	r3, [pc, #592]	; (800927c <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 800902c:	4a8a      	ldr	r2, [pc, #552]	; (8009258 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800902e:	4992      	ldr	r1, [pc, #584]	; (8009278 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8009030:	4893      	ldr	r0, [pc, #588]	; (8009280 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8009032:	f00d fdb5 	bl	8016ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8009036:	4893      	ldr	r0, [pc, #588]	; (8009284 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8009038:	f7fb ff4e 	bl	8004ed8 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>
 800903c:	2354      	movs	r3, #84	; 0x54
 800903e:	9301      	str	r3, [sp, #4]
 8009040:	4b83      	ldr	r3, [pc, #524]	; (8009250 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8009042:	9300      	str	r3, [sp, #0]
 8009044:	4b90      	ldr	r3, [pc, #576]	; (8009288 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8009046:	4a84      	ldr	r2, [pc, #528]	; (8009258 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8009048:	498e      	ldr	r1, [pc, #568]	; (8009284 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 800904a:	4890      	ldr	r0, [pc, #576]	; (800928c <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 800904c:	f00d fda8 	bl	8016ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8009050:	488f      	ldr	r0, [pc, #572]	; (8009290 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8009052:	f7fb ffcd 	bl	8004ff0 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>
 8009056:	2364      	movs	r3, #100	; 0x64
 8009058:	9301      	str	r3, [sp, #4]
 800905a:	4b7d      	ldr	r3, [pc, #500]	; (8009250 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	4b8d      	ldr	r3, [pc, #564]	; (8009294 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8009060:	4a7d      	ldr	r2, [pc, #500]	; (8009258 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8009062:	498b      	ldr	r1, [pc, #556]	; (8009290 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8009064:	488c      	ldr	r0, [pc, #560]	; (8009298 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8009066:	f00d fd9b 	bl	8016ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushArrayTest)
 800906a:	488c      	ldr	r0, [pc, #560]	; (800929c <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 800906c:	f7fc f87e 	bl	800516c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>
 8009070:	2379      	movs	r3, #121	; 0x79
 8009072:	9301      	str	r3, [sp, #4]
 8009074:	4b76      	ldr	r3, [pc, #472]	; (8009250 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8009076:	9300      	str	r3, [sp, #0]
 8009078:	4b89      	ldr	r3, [pc, #548]	; (80092a0 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 800907a:	4a77      	ldr	r2, [pc, #476]	; (8009258 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800907c:	4987      	ldr	r1, [pc, #540]	; (800929c <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 800907e:	4889      	ldr	r0, [pc, #548]	; (80092a4 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8009080:	f00d fd8e 	bl	8016ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, LookForTest)
 8009084:	4888      	ldr	r0, [pc, #544]	; (80092a8 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8009086:	f7fc f8d7 	bl	8005238 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>
 800908a:	2380      	movs	r3, #128	; 0x80
 800908c:	9301      	str	r3, [sp, #4]
 800908e:	4b70      	ldr	r3, [pc, #448]	; (8009250 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8009090:	9300      	str	r3, [sp, #0]
 8009092:	4b86      	ldr	r3, [pc, #536]	; (80092ac <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8009094:	4a70      	ldr	r2, [pc, #448]	; (8009258 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8009096:	4984      	ldr	r1, [pc, #528]	; (80092a8 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8009098:	4885      	ldr	r0, [pc, #532]	; (80092b0 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 800909a:	f00d fd81 	bl	8016ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, CapacityTest)
 800909e:	4885      	ldr	r0, [pc, #532]	; (80092b4 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 80090a0:	f7fc f9b4 	bl	800540c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>
 80090a4:	2388      	movs	r3, #136	; 0x88
 80090a6:	9301      	str	r3, [sp, #4]
 80090a8:	4b69      	ldr	r3, [pc, #420]	; (8009250 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80090aa:	9300      	str	r3, [sp, #0]
 80090ac:	4b82      	ldr	r3, [pc, #520]	; (80092b8 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 80090ae:	4a6a      	ldr	r2, [pc, #424]	; (8009258 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80090b0:	4980      	ldr	r1, [pc, #512]	; (80092b4 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 80090b2:	4882      	ldr	r0, [pc, #520]	; (80092bc <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 80090b4:	f00d fd74 	bl	8016ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 80090b8:	4881      	ldr	r0, [pc, #516]	; (80092c0 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 80090ba:	f7fc fb33 	bl	8005724 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>
 80090be:	23c3      	movs	r3, #195	; 0xc3
 80090c0:	9301      	str	r3, [sp, #4]
 80090c2:	4b63      	ldr	r3, [pc, #396]	; (8009250 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80090c4:	9300      	str	r3, [sp, #0]
 80090c6:	4b7f      	ldr	r3, [pc, #508]	; (80092c4 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 80090c8:	4a7f      	ldr	r2, [pc, #508]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80090ca:	497d      	ldr	r1, [pc, #500]	; (80092c0 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 80090cc:	487f      	ldr	r0, [pc, #508]	; (80092cc <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 80090ce:	f00d fd67 	bl	8016ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 80090d2:	487f      	ldr	r0, [pc, #508]	; (80092d0 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 80090d4:	f7fc fb90 	bl	80057f8 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>
 80090d8:	23d5      	movs	r3, #213	; 0xd5
 80090da:	9301      	str	r3, [sp, #4]
 80090dc:	4b5c      	ldr	r3, [pc, #368]	; (8009250 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	4b7c      	ldr	r3, [pc, #496]	; (80092d4 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 80090e2:	4a79      	ldr	r2, [pc, #484]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80090e4:	497a      	ldr	r1, [pc, #488]	; (80092d0 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 80090e6:	487c      	ldr	r0, [pc, #496]	; (80092d8 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 80090e8:	f00d fd5a 	bl	8016ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 80090ec:	487b      	ldr	r0, [pc, #492]	; (80092dc <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 80090ee:	f7fc fc71 	bl	80059d4 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>
 80090f2:	23e1      	movs	r3, #225	; 0xe1
 80090f4:	9301      	str	r3, [sp, #4]
 80090f6:	4b56      	ldr	r3, [pc, #344]	; (8009250 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80090f8:	9300      	str	r3, [sp, #0]
 80090fa:	4b79      	ldr	r3, [pc, #484]	; (80092e0 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 80090fc:	4a72      	ldr	r2, [pc, #456]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80090fe:	4977      	ldr	r1, [pc, #476]	; (80092dc <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8009100:	4878      	ldr	r0, [pc, #480]	; (80092e4 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8009102:	f00d fd4d 	bl	8016ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_Response_Test)
 8009106:	4878      	ldr	r0, [pc, #480]	; (80092e8 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8009108:	f7fc fd0e 	bl	8005b28 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>
 800910c:	23f0      	movs	r3, #240	; 0xf0
 800910e:	9301      	str	r3, [sp, #4]
 8009110:	4b4f      	ldr	r3, [pc, #316]	; (8009250 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8009112:	9300      	str	r3, [sp, #0]
 8009114:	4b75      	ldr	r3, [pc, #468]	; (80092ec <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8009116:	4a6c      	ldr	r2, [pc, #432]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8009118:	4973      	ldr	r1, [pc, #460]	; (80092e8 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 800911a:	4875      	ldr	r0, [pc, #468]	; (80092f0 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 800911c:	f00d fd40 	bl	8016ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8009120:	4874      	ldr	r0, [pc, #464]	; (80092f4 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8009122:	f7fc fdb1 	bl	8005c88 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>
 8009126:	f240 1301 	movw	r3, #257	; 0x101
 800912a:	9301      	str	r3, [sp, #4]
 800912c:	4b48      	ldr	r3, [pc, #288]	; (8009250 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800912e:	9300      	str	r3, [sp, #0]
 8009130:	4b71      	ldr	r3, [pc, #452]	; (80092f8 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8009132:	4a65      	ldr	r2, [pc, #404]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8009134:	496f      	ldr	r1, [pc, #444]	; (80092f4 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8009136:	4871      	ldr	r0, [pc, #452]	; (80092fc <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 8009138:	f00d fd32 	bl	8016ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 800913c:	4870      	ldr	r0, [pc, #448]	; (8009300 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800913e:	f7fc fe0f 	bl	8005d60 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>
 8009142:	f240 1311 	movw	r3, #273	; 0x111
 8009146:	9301      	str	r3, [sp, #4]
 8009148:	4b41      	ldr	r3, [pc, #260]	; (8009250 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800914a:	9300      	str	r3, [sp, #0]
 800914c:	4b6d      	ldr	r3, [pc, #436]	; (8009304 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800914e:	4a5e      	ldr	r2, [pc, #376]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8009150:	496b      	ldr	r1, [pc, #428]	; (8009300 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8009152:	486d      	ldr	r0, [pc, #436]	; (8009308 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 8009154:	f00d fd24 	bl	8016ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8009158:	486c      	ldr	r0, [pc, #432]	; (800930c <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 800915a:	f7fc febf 	bl	8005edc <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>
 800915e:	f240 1327 	movw	r3, #295	; 0x127
 8009162:	9301      	str	r3, [sp, #4]
 8009164:	4b3a      	ldr	r3, [pc, #232]	; (8009250 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8009166:	9300      	str	r3, [sp, #0]
 8009168:	4b69      	ldr	r3, [pc, #420]	; (8009310 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 800916a:	4a57      	ldr	r2, [pc, #348]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800916c:	4967      	ldr	r1, [pc, #412]	; (800930c <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 800916e:	4869      	ldr	r0, [pc, #420]	; (8009314 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 8009170:	f00d fd16 	bl	8016ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8009174:	4868      	ldr	r0, [pc, #416]	; (8009318 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8009176:	f7fc ff79 	bl	800606c <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>
 800917a:	f44f 739f 	mov.w	r3, #318	; 0x13e
 800917e:	9301      	str	r3, [sp, #4]
 8009180:	4b33      	ldr	r3, [pc, #204]	; (8009250 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8009182:	9300      	str	r3, [sp, #0]
 8009184:	4b65      	ldr	r3, [pc, #404]	; (800931c <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 8009186:	4a50      	ldr	r2, [pc, #320]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8009188:	4963      	ldr	r1, [pc, #396]	; (8009318 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 800918a:	4865      	ldr	r0, [pc, #404]	; (8009320 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 800918c:	f00d fd08 	bl	8016ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8009190:	4864      	ldr	r0, [pc, #400]	; (8009324 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 8009192:	f7fd f8d5 	bl	8006340 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>
 8009196:	f44f 73b5 	mov.w	r3, #362	; 0x16a
 800919a:	9301      	str	r3, [sp, #4]
 800919c:	4b2c      	ldr	r3, [pc, #176]	; (8009250 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800919e:	9300      	str	r3, [sp, #0]
 80091a0:	4b61      	ldr	r3, [pc, #388]	; (8009328 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 80091a2:	4a49      	ldr	r2, [pc, #292]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80091a4:	495f      	ldr	r1, [pc, #380]	; (8009324 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 80091a6:	4861      	ldr	r0, [pc, #388]	; (800932c <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 80091a8:	f00d fcfa 	bl	8016ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 80091ac:	4860      	ldr	r0, [pc, #384]	; (8009330 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 80091ae:	f7fd fa2f 	bl	8006610 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>
 80091b2:	f44f 73cb 	mov.w	r3, #406	; 0x196
 80091b6:	9301      	str	r3, [sp, #4]
 80091b8:	4b25      	ldr	r3, [pc, #148]	; (8009250 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80091ba:	9300      	str	r3, [sp, #0]
 80091bc:	4b5d      	ldr	r3, [pc, #372]	; (8009334 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80091be:	4a42      	ldr	r2, [pc, #264]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80091c0:	495b      	ldr	r1, [pc, #364]	; (8009330 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 80091c2:	485d      	ldr	r0, [pc, #372]	; (8009338 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 80091c4:	f00d fcec 	bl	8016ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 80091c8:	485c      	ldr	r0, [pc, #368]	; (800933c <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 80091ca:	f7fd fadf 	bl	800678c <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>
 80091ce:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 80091d2:	9301      	str	r3, [sp, #4]
 80091d4:	4b1e      	ldr	r3, [pc, #120]	; (8009250 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80091d6:	9300      	str	r3, [sp, #0]
 80091d8:	4b59      	ldr	r3, [pc, #356]	; (8009340 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 80091da:	4a3b      	ldr	r2, [pc, #236]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80091dc:	4957      	ldr	r1, [pc, #348]	; (800933c <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 80091de:	4859      	ldr	r0, [pc, #356]	; (8009344 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 80091e0:	f00d fcde 	bl	8016ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Command_Process_Test)
 80091e4:	4858      	ldr	r0, [pc, #352]	; (8009348 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 80091e6:	f7fd fbcd 	bl	8006984 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev>
 80091ea:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80091ee:	9301      	str	r3, [sp, #4]
 80091f0:	4b17      	ldr	r3, [pc, #92]	; (8009250 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80091f2:	9300      	str	r3, [sp, #0]
 80091f4:	4b55      	ldr	r3, [pc, #340]	; (800934c <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 80091f6:	4a34      	ldr	r2, [pc, #208]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 80091f8:	4953      	ldr	r1, [pc, #332]	; (8009348 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 80091fa:	4855      	ldr	r0, [pc, #340]	; (8009350 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 80091fc:	f00d fcd0 	bl	8016ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8009200:	4854      	ldr	r0, [pc, #336]	; (8009354 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8009202:	f7fd fd0d 	bl	8006c20 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellC1Ev>
 8009206:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 800920a:	9301      	str	r3, [sp, #4]
 800920c:	4b10      	ldr	r3, [pc, #64]	; (8009250 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800920e:	9300      	str	r3, [sp, #0]
 8009210:	4b51      	ldr	r3, [pc, #324]	; (8009358 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8009212:	4a2d      	ldr	r2, [pc, #180]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8009214:	494f      	ldr	r1, [pc, #316]	; (8009354 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8009216:	4851      	ldr	r0, [pc, #324]	; (800935c <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8009218:	f00d fcc2 	bl	8016ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 800921c:	4850      	ldr	r0, [pc, #320]	; (8009360 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800921e:	f7fd fe63 	bl	8006ee8 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellC1Ev>
 8009222:	f44f 7306 	mov.w	r3, #536	; 0x218
 8009226:	9301      	str	r3, [sp, #4]
 8009228:	4b09      	ldr	r3, [pc, #36]	; (8009250 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800922a:	9300      	str	r3, [sp, #0]
 800922c:	4b4d      	ldr	r3, [pc, #308]	; (8009364 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800922e:	4a26      	ldr	r2, [pc, #152]	; (80092c8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8009230:	494b      	ldr	r1, [pc, #300]	; (8009360 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8009232:	484d      	ldr	r0, [pc, #308]	; (8009368 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8009234:	f00d fcb4 	bl	8016ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 8009238:	484c      	ldr	r0, [pc, #304]	; (800936c <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 800923a:	f7fd ff2b 	bl	8007094 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellC1Ev>
 800923e:	f240 2333 	movw	r3, #563	; 0x233
 8009242:	9301      	str	r3, [sp, #4]
 8009244:	4b02      	ldr	r3, [pc, #8]	; (8009250 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8009246:	9300      	str	r3, [sp, #0]
 8009248:	e092      	b.n	8009370 <_Z41__static_initialization_and_destruction_0ii+0x3c0>
 800924a:	bf00      	nop
 800924c:	200003f4 	.word	0x200003f4
 8009250:	08025848 	.word	0x08025848
 8009254:	080260e4 	.word	0x080260e4
 8009258:	080260f0 	.word	0x080260f0
 800925c:	20000410 	.word	0x20000410
 8009260:	20000414 	.word	0x20000414
 8009264:	08026108 	.word	0x08026108
 8009268:	20000430 	.word	0x20000430
 800926c:	20000434 	.word	0x20000434
 8009270:	08026118 	.word	0x08026118
 8009274:	20000450 	.word	0x20000450
 8009278:	20000454 	.word	0x20000454
 800927c:	0802612c 	.word	0x0802612c
 8009280:	20000470 	.word	0x20000470
 8009284:	20000474 	.word	0x20000474
 8009288:	0802613c 	.word	0x0802613c
 800928c:	20000490 	.word	0x20000490
 8009290:	20000494 	.word	0x20000494
 8009294:	08026154 	.word	0x08026154
 8009298:	200004b0 	.word	0x200004b0
 800929c:	200004b4 	.word	0x200004b4
 80092a0:	08026164 	.word	0x08026164
 80092a4:	200004d0 	.word	0x200004d0
 80092a8:	200004d4 	.word	0x200004d4
 80092ac:	08026174 	.word	0x08026174
 80092b0:	200004f0 	.word	0x200004f0
 80092b4:	200004f4 	.word	0x200004f4
 80092b8:	08026180 	.word	0x08026180
 80092bc:	20000510 	.word	0x20000510
 80092c0:	2000051c 	.word	0x2000051c
 80092c4:	08026190 	.word	0x08026190
 80092c8:	080261a0 	.word	0x080261a0
 80092cc:	20000538 	.word	0x20000538
 80092d0:	2000053c 	.word	0x2000053c
 80092d4:	080261b8 	.word	0x080261b8
 80092d8:	20000558 	.word	0x20000558
 80092dc:	2000055c 	.word	0x2000055c
 80092e0:	080261d0 	.word	0x080261d0
 80092e4:	20000578 	.word	0x20000578
 80092e8:	2000057c 	.word	0x2000057c
 80092ec:	080261ec 	.word	0x080261ec
 80092f0:	20000598 	.word	0x20000598
 80092f4:	2000059c 	.word	0x2000059c
 80092f8:	08026200 	.word	0x08026200
 80092fc:	200005b8 	.word	0x200005b8
 8009300:	200005bc 	.word	0x200005bc
 8009304:	0802621c 	.word	0x0802621c
 8009308:	200005d8 	.word	0x200005d8
 800930c:	200005dc 	.word	0x200005dc
 8009310:	08026230 	.word	0x08026230
 8009314:	200005f8 	.word	0x200005f8
 8009318:	200005fc 	.word	0x200005fc
 800931c:	0802624c 	.word	0x0802624c
 8009320:	20000618 	.word	0x20000618
 8009324:	2000061c 	.word	0x2000061c
 8009328:	08026264 	.word	0x08026264
 800932c:	20000638 	.word	0x20000638
 8009330:	2000063c 	.word	0x2000063c
 8009334:	08026278 	.word	0x08026278
 8009338:	20000658 	.word	0x20000658
 800933c:	2000065c 	.word	0x2000065c
 8009340:	08026298 	.word	0x08026298
 8009344:	20000678 	.word	0x20000678
 8009348:	2000067c 	.word	0x2000067c
 800934c:	080262b0 	.word	0x080262b0
 8009350:	20000698 	.word	0x20000698
 8009354:	2000069c 	.word	0x2000069c
 8009358:	080262c8 	.word	0x080262c8
 800935c:	200006b8 	.word	0x200006b8
 8009360:	200006bc 	.word	0x200006bc
 8009364:	080262dc 	.word	0x080262dc
 8009368:	200006d8 	.word	0x200006d8
 800936c:	200006dc 	.word	0x200006dc
 8009370:	4b8d      	ldr	r3, [pc, #564]	; (80095a8 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 8009372:	4a8e      	ldr	r2, [pc, #568]	; (80095ac <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8009374:	498e      	ldr	r1, [pc, #568]	; (80095b0 <_Z41__static_initialization_and_destruction_0ii+0x600>)
 8009376:	488f      	ldr	r0, [pc, #572]	; (80095b4 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 8009378:	f00d fc12 	bl	8016ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 800937c:	488e      	ldr	r0, [pc, #568]	; (80095b8 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 800937e:	f7fd ffed 	bl	800735c <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellC1Ev>
 8009382:	f240 235f 	movw	r3, #607	; 0x25f
 8009386:	9301      	str	r3, [sp, #4]
 8009388:	4b8c      	ldr	r3, [pc, #560]	; (80095bc <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 800938a:	9300      	str	r3, [sp, #0]
 800938c:	4b8c      	ldr	r3, [pc, #560]	; (80095c0 <_Z41__static_initialization_and_destruction_0ii+0x610>)
 800938e:	4a87      	ldr	r2, [pc, #540]	; (80095ac <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8009390:	4989      	ldr	r1, [pc, #548]	; (80095b8 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 8009392:	488c      	ldr	r0, [pc, #560]	; (80095c4 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 8009394:	f00d fc04 	bl	8016ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 8009398:	488b      	ldr	r0, [pc, #556]	; (80095c8 <_Z41__static_initialization_and_destruction_0ii+0x618>)
 800939a:	f7fe f8db 	bl	8007554 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellC1Ev>
 800939e:	f44f 731e 	mov.w	r3, #632	; 0x278
 80093a2:	9301      	str	r3, [sp, #4]
 80093a4:	4b85      	ldr	r3, [pc, #532]	; (80095bc <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 80093a6:	9300      	str	r3, [sp, #0]
 80093a8:	4b88      	ldr	r3, [pc, #544]	; (80095cc <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 80093aa:	4a80      	ldr	r2, [pc, #512]	; (80095ac <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 80093ac:	4986      	ldr	r1, [pc, #536]	; (80095c8 <_Z41__static_initialization_and_destruction_0ii+0x618>)
 80093ae:	4888      	ldr	r0, [pc, #544]	; (80095d0 <_Z41__static_initialization_and_destruction_0ii+0x620>)
 80093b0:	f00d fbf6 	bl	8016ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 80093b4:	4887      	ldr	r0, [pc, #540]	; (80095d4 <_Z41__static_initialization_and_destruction_0ii+0x624>)
 80093b6:	f7fe fa47 	bl	8007848 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellC1Ev>
 80093ba:	f240 239d 	movw	r3, #669	; 0x29d
 80093be:	9301      	str	r3, [sp, #4]
 80093c0:	4b7e      	ldr	r3, [pc, #504]	; (80095bc <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 80093c2:	9300      	str	r3, [sp, #0]
 80093c4:	4b84      	ldr	r3, [pc, #528]	; (80095d8 <_Z41__static_initialization_and_destruction_0ii+0x628>)
 80093c6:	4a79      	ldr	r2, [pc, #484]	; (80095ac <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 80093c8:	4982      	ldr	r1, [pc, #520]	; (80095d4 <_Z41__static_initialization_and_destruction_0ii+0x624>)
 80093ca:	4884      	ldr	r0, [pc, #528]	; (80095dc <_Z41__static_initialization_and_destruction_0ii+0x62c>)
 80093cc:	f00d fbe8 	bl	8016ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 80093d0:	4883      	ldr	r0, [pc, #524]	; (80095e0 <_Z41__static_initialization_and_destruction_0ii+0x630>)
 80093d2:	f7fe fb17 	bl	8007a04 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellC1Ev>
 80093d6:	f240 23b3 	movw	r3, #691	; 0x2b3
 80093da:	9301      	str	r3, [sp, #4]
 80093dc:	4b77      	ldr	r3, [pc, #476]	; (80095bc <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 80093de:	9300      	str	r3, [sp, #0]
 80093e0:	4b80      	ldr	r3, [pc, #512]	; (80095e4 <_Z41__static_initialization_and_destruction_0ii+0x634>)
 80093e2:	4a72      	ldr	r2, [pc, #456]	; (80095ac <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 80093e4:	497e      	ldr	r1, [pc, #504]	; (80095e0 <_Z41__static_initialization_and_destruction_0ii+0x630>)
 80093e6:	4880      	ldr	r0, [pc, #512]	; (80095e8 <_Z41__static_initialization_and_destruction_0ii+0x638>)
 80093e8:	f00d fbda 	bl	8016ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 80093ec:	487f      	ldr	r0, [pc, #508]	; (80095ec <_Z41__static_initialization_and_destruction_0ii+0x63c>)
 80093ee:	f7fe fb81 	bl	8007af4 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellC1Ev>
 80093f2:	f44f 7331 	mov.w	r3, #708	; 0x2c4
 80093f6:	9301      	str	r3, [sp, #4]
 80093f8:	4b70      	ldr	r3, [pc, #448]	; (80095bc <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 80093fa:	9300      	str	r3, [sp, #0]
 80093fc:	4b7c      	ldr	r3, [pc, #496]	; (80095f0 <_Z41__static_initialization_and_destruction_0ii+0x640>)
 80093fe:	4a6b      	ldr	r2, [pc, #428]	; (80095ac <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8009400:	497a      	ldr	r1, [pc, #488]	; (80095ec <_Z41__static_initialization_and_destruction_0ii+0x63c>)
 8009402:	487c      	ldr	r0, [pc, #496]	; (80095f4 <_Z41__static_initialization_and_destruction_0ii+0x644>)
 8009404:	f00d fbcc 	bl	8016ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_TCP_Bytes_Test)
 8009408:	487b      	ldr	r0, [pc, #492]	; (80095f8 <_Z41__static_initialization_and_destruction_0ii+0x648>)
 800940a:	f7fe fc59 	bl	8007cc0 <_ZN55TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestShellC1Ev>
 800940e:	f240 23df 	movw	r3, #735	; 0x2df
 8009412:	9301      	str	r3, [sp, #4]
 8009414:	4b69      	ldr	r3, [pc, #420]	; (80095bc <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 8009416:	9300      	str	r3, [sp, #0]
 8009418:	4b78      	ldr	r3, [pc, #480]	; (80095fc <_Z41__static_initialization_and_destruction_0ii+0x64c>)
 800941a:	4a64      	ldr	r2, [pc, #400]	; (80095ac <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 800941c:	4976      	ldr	r1, [pc, #472]	; (80095f8 <_Z41__static_initialization_and_destruction_0ii+0x648>)
 800941e:	4878      	ldr	r0, [pc, #480]	; (8009600 <_Z41__static_initialization_and_destruction_0ii+0x650>)
 8009420:	f00d fbbe 	bl	8016ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2b00      	cmp	r3, #0
 8009428:	f040 80ba 	bne.w	80095a0 <_Z41__static_initialization_and_destruction_0ii+0x5f0>
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009432:	4293      	cmp	r3, r2
 8009434:	f040 80b4 	bne.w	80095a0 <_Z41__static_initialization_and_destruction_0ii+0x5f0>
 8009438:	4871      	ldr	r0, [pc, #452]	; (8009600 <_Z41__static_initialization_and_destruction_0ii+0x650>)
 800943a:	f00d fbdb 	bl	8016bf4 <_ZN13TestInstallerD1Ev>
 800943e:	486e      	ldr	r0, [pc, #440]	; (80095f8 <_Z41__static_initialization_and_destruction_0ii+0x648>)
 8009440:	f7fe fdbe 	bl	8007fc0 <_ZN55TEST_EspDriver_Test_Group_Send_TCP_Bytes_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Test)
 8009444:	486b      	ldr	r0, [pc, #428]	; (80095f4 <_Z41__static_initialization_and_destruction_0ii+0x644>)
 8009446:	f00d fbd5 	bl	8016bf4 <_ZN13TestInstallerD1Ev>
 800944a:	4868      	ldr	r0, [pc, #416]	; (80095ec <_Z41__static_initialization_and_destruction_0ii+0x63c>)
 800944c:	f7fe fdfc 	bl	8008048 <_ZN57TEST_EspDriver_Test_Group_Wait_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_TCP_Message_Timeout_Test)
 8009450:	4865      	ldr	r0, [pc, #404]	; (80095e8 <_Z41__static_initialization_and_destruction_0ii+0x638>)
 8009452:	f00d fbcf 	bl	8016bf4 <_ZN13TestInstallerD1Ev>
 8009456:	4862      	ldr	r0, [pc, #392]	; (80095e0 <_Z41__static_initialization_and_destruction_0ii+0x630>)
 8009458:	f7fe fe3a 	bl	80080d0 <_ZN65TEST_EspDriver_Test_Group_Wait_TCP_Message_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_TCP_Message_Test)
 800945c:	485f      	ldr	r0, [pc, #380]	; (80095dc <_Z41__static_initialization_and_destruction_0ii+0x62c>)
 800945e:	f00d fbc9 	bl	8016bf4 <_ZN13TestInstallerD1Ev>
 8009462:	485c      	ldr	r0, [pc, #368]	; (80095d4 <_Z41__static_initialization_and_destruction_0ii+0x624>)
 8009464:	f7fe fe78 	bl	8008158 <_ZN57TEST_EspDriver_Test_Group_Read_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_TCP_Message_Test)
 8009468:	4859      	ldr	r0, [pc, #356]	; (80095d0 <_Z41__static_initialization_and_destruction_0ii+0x620>)
 800946a:	f00d fbc3 	bl	8016bf4 <_ZN13TestInstallerD1Ev>
 800946e:	4856      	ldr	r0, [pc, #344]	; (80095c8 <_Z41__static_initialization_and_destruction_0ii+0x618>)
 8009470:	f7fe feb6 	bl	80081e0 <_ZN57TEST_EspDriver_Test_Group_Send_TCP_Message_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_TCP_Test)
 8009474:	4853      	ldr	r0, [pc, #332]	; (80095c4 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 8009476:	f00d fbbd 	bl	8016bf4 <_ZN13TestInstallerD1Ev>
 800947a:	484f      	ldr	r0, [pc, #316]	; (80095b8 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 800947c:	f7fe fef4 	bl	8008268 <_ZN55TEST_EspDriver_Test_Group_Disconnect_TCP_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Error_Test)
 8009480:	484c      	ldr	r0, [pc, #304]	; (80095b4 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 8009482:	f00d fbb7 	bl	8016bf4 <_ZN13TestInstallerD1Ev>
 8009486:	484a      	ldr	r0, [pc, #296]	; (80095b0 <_Z41__static_initialization_and_destruction_0ii+0x600>)
 8009488:	f7fe ff32 	bl	80082f0 <_ZN58TEST_EspDriver_Test_Group_Connect_TCP_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Timeout_Test)
 800948c:	485d      	ldr	r0, [pc, #372]	; (8009604 <_Z41__static_initialization_and_destruction_0ii+0x654>)
 800948e:	f00d fbb1 	bl	8016bf4 <_ZN13TestInstallerD1Ev>
 8009492:	485d      	ldr	r0, [pc, #372]	; (8009608 <_Z41__static_initialization_and_destruction_0ii+0x658>)
 8009494:	f7fe ff70 	bl	8008378 <_ZN60TEST_EspDriver_Test_Group_Connect_TCP_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_TCP_Test)
 8009498:	485c      	ldr	r0, [pc, #368]	; (800960c <_Z41__static_initialization_and_destruction_0ii+0x65c>)
 800949a:	f00d fbab 	bl	8016bf4 <_ZN13TestInstallerD1Ev>
 800949e:	485c      	ldr	r0, [pc, #368]	; (8009610 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 80094a0:	f7fe ffae 	bl	8008400 <_ZN52TEST_EspDriver_Test_Group_Connect_TCP_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Command_Process_Test)
 80094a4:	485b      	ldr	r0, [pc, #364]	; (8009614 <_Z41__static_initialization_and_destruction_0ii+0x664>)
 80094a6:	f00d fba5 	bl	8016bf4 <_ZN13TestInstallerD1Ev>
 80094aa:	485b      	ldr	r0, [pc, #364]	; (8009618 <_Z41__static_initialization_and_destruction_0ii+0x668>)
 80094ac:	f7fe ffec 	bl	8008488 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 80094b0:	485a      	ldr	r0, [pc, #360]	; (800961c <_Z41__static_initialization_and_destruction_0ii+0x66c>)
 80094b2:	f00d fb9f 	bl	8016bf4 <_ZN13TestInstallerD1Ev>
 80094b6:	485a      	ldr	r0, [pc, #360]	; (8009620 <_Z41__static_initialization_and_destruction_0ii+0x670>)
 80094b8:	f7ff f82a 	bl	8008510 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 80094bc:	4859      	ldr	r0, [pc, #356]	; (8009624 <_Z41__static_initialization_and_destruction_0ii+0x674>)
 80094be:	f00d fb99 	bl	8016bf4 <_ZN13TestInstallerD1Ev>
 80094c2:	4859      	ldr	r0, [pc, #356]	; (8009628 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 80094c4:	f7ff f868 	bl	8008598 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 80094c8:	4858      	ldr	r0, [pc, #352]	; (800962c <_Z41__static_initialization_and_destruction_0ii+0x67c>)
 80094ca:	f00d fb93 	bl	8016bf4 <_ZN13TestInstallerD1Ev>
 80094ce:	4858      	ldr	r0, [pc, #352]	; (8009630 <_Z41__static_initialization_and_destruction_0ii+0x680>)
 80094d0:	f7ff f8a6 	bl	8008620 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 80094d4:	4857      	ldr	r0, [pc, #348]	; (8009634 <_Z41__static_initialization_and_destruction_0ii+0x684>)
 80094d6:	f00d fb8d 	bl	8016bf4 <_ZN13TestInstallerD1Ev>
 80094da:	4857      	ldr	r0, [pc, #348]	; (8009638 <_Z41__static_initialization_and_destruction_0ii+0x688>)
 80094dc:	f7ff f8e4 	bl	80086a8 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 80094e0:	4856      	ldr	r0, [pc, #344]	; (800963c <_Z41__static_initialization_and_destruction_0ii+0x68c>)
 80094e2:	f00d fb87 	bl	8016bf4 <_ZN13TestInstallerD1Ev>
 80094e6:	4856      	ldr	r0, [pc, #344]	; (8009640 <_Z41__static_initialization_and_destruction_0ii+0x690>)
 80094e8:	f7ff f922 	bl	8008730 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 80094ec:	4855      	ldr	r0, [pc, #340]	; (8009644 <_Z41__static_initialization_and_destruction_0ii+0x694>)
 80094ee:	f00d fb81 	bl	8016bf4 <_ZN13TestInstallerD1Ev>
 80094f2:	4855      	ldr	r0, [pc, #340]	; (8009648 <_Z41__static_initialization_and_destruction_0ii+0x698>)
 80094f4:	f7ff f960 	bl	80087b8 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 80094f8:	4854      	ldr	r0, [pc, #336]	; (800964c <_Z41__static_initialization_and_destruction_0ii+0x69c>)
 80094fa:	f00d fb7b 	bl	8016bf4 <_ZN13TestInstallerD1Ev>
 80094fe:	4854      	ldr	r0, [pc, #336]	; (8009650 <_Z41__static_initialization_and_destruction_0ii+0x6a0>)
 8009500:	f7ff f99e 	bl	8008840 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_Response_Test)
 8009504:	4853      	ldr	r0, [pc, #332]	; (8009654 <_Z41__static_initialization_and_destruction_0ii+0x6a4>)
 8009506:	f00d fb75 	bl	8016bf4 <_ZN13TestInstallerD1Ev>
 800950a:	4853      	ldr	r0, [pc, #332]	; (8009658 <_Z41__static_initialization_and_destruction_0ii+0x6a8>)
 800950c:	f7ff f9dc 	bl	80088c8 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8009510:	4852      	ldr	r0, [pc, #328]	; (800965c <_Z41__static_initialization_and_destruction_0ii+0x6ac>)
 8009512:	f00d fb6f 	bl	8016bf4 <_ZN13TestInstallerD1Ev>
 8009516:	4852      	ldr	r0, [pc, #328]	; (8009660 <_Z41__static_initialization_and_destruction_0ii+0x6b0>)
 8009518:	f7ff fa1a 	bl	8008950 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 800951c:	4851      	ldr	r0, [pc, #324]	; (8009664 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800951e:	f00d fb69 	bl	8016bf4 <_ZN13TestInstallerD1Ev>
 8009522:	4851      	ldr	r0, [pc, #324]	; (8009668 <_Z41__static_initialization_and_destruction_0ii+0x6b8>)
 8009524:	f7ff fa58 	bl	80089d8 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8009528:	4850      	ldr	r0, [pc, #320]	; (800966c <_Z41__static_initialization_and_destruction_0ii+0x6bc>)
 800952a:	f00d fb63 	bl	8016bf4 <_ZN13TestInstallerD1Ev>
 800952e:	4850      	ldr	r0, [pc, #320]	; (8009670 <_Z41__static_initialization_and_destruction_0ii+0x6c0>)
 8009530:	f7ff fa96 	bl	8008a60 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
TEST(RingBuffer_Test_Group, CapacityTest)
 8009534:	484f      	ldr	r0, [pc, #316]	; (8009674 <_Z41__static_initialization_and_destruction_0ii+0x6c4>)
 8009536:	f00d fb5d 	bl	8016bf4 <_ZN13TestInstallerD1Ev>
 800953a:	484f      	ldr	r0, [pc, #316]	; (8009678 <_Z41__static_initialization_and_destruction_0ii+0x6c8>)
 800953c:	f7ff fad4 	bl	8008ae8 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, LookForTest)
 8009540:	484e      	ldr	r0, [pc, #312]	; (800967c <_Z41__static_initialization_and_destruction_0ii+0x6cc>)
 8009542:	f00d fb57 	bl	8016bf4 <_ZN13TestInstallerD1Ev>
 8009546:	484e      	ldr	r0, [pc, #312]	; (8009680 <_Z41__static_initialization_and_destruction_0ii+0x6d0>)
 8009548:	f7ff fb12 	bl	8008b70 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushArrayTest)
 800954c:	484d      	ldr	r0, [pc, #308]	; (8009684 <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 800954e:	f00d fb51 	bl	8016bf4 <_ZN13TestInstallerD1Ev>
 8009552:	484d      	ldr	r0, [pc, #308]	; (8009688 <_Z41__static_initialization_and_destruction_0ii+0x6d8>)
 8009554:	f7ff fb50 	bl	8008bf8 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8009558:	484c      	ldr	r0, [pc, #304]	; (800968c <_Z41__static_initialization_and_destruction_0ii+0x6dc>)
 800955a:	f00d fb4b 	bl	8016bf4 <_ZN13TestInstallerD1Ev>
 800955e:	484c      	ldr	r0, [pc, #304]	; (8009690 <_Z41__static_initialization_and_destruction_0ii+0x6e0>)
 8009560:	f7ff fb8e 	bl	8008c80 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8009564:	484b      	ldr	r0, [pc, #300]	; (8009694 <_Z41__static_initialization_and_destruction_0ii+0x6e4>)
 8009566:	f00d fb45 	bl	8016bf4 <_ZN13TestInstallerD1Ev>
 800956a:	484b      	ldr	r0, [pc, #300]	; (8009698 <_Z41__static_initialization_and_destruction_0ii+0x6e8>)
 800956c:	f7ff fbcc 	bl	8008d08 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopDataTests)
 8009570:	484a      	ldr	r0, [pc, #296]	; (800969c <_Z41__static_initialization_and_destruction_0ii+0x6ec>)
 8009572:	f00d fb3f 	bl	8016bf4 <_ZN13TestInstallerD1Ev>
 8009576:	484a      	ldr	r0, [pc, #296]	; (80096a0 <_Z41__static_initialization_and_destruction_0ii+0x6f0>)
 8009578:	f7ff fc0a 	bl	8008d90 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 800957c:	4849      	ldr	r0, [pc, #292]	; (80096a4 <_Z41__static_initialization_and_destruction_0ii+0x6f4>)
 800957e:	f00d fb39 	bl	8016bf4 <_ZN13TestInstallerD1Ev>
 8009582:	4849      	ldr	r0, [pc, #292]	; (80096a8 <_Z41__static_initialization_and_destruction_0ii+0x6f8>)
 8009584:	f7ff fc48 	bl	8008e18 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushDataTests)
 8009588:	4848      	ldr	r0, [pc, #288]	; (80096ac <_Z41__static_initialization_and_destruction_0ii+0x6fc>)
 800958a:	f00d fb33 	bl	8016bf4 <_ZN13TestInstallerD1Ev>
 800958e:	4848      	ldr	r0, [pc, #288]	; (80096b0 <_Z41__static_initialization_and_destruction_0ii+0x700>)
 8009590:	f7ff fc86 	bl	8008ea0 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, InitTest)
 8009594:	4847      	ldr	r0, [pc, #284]	; (80096b4 <_Z41__static_initialization_and_destruction_0ii+0x704>)
 8009596:	f00d fb2d 	bl	8016bf4 <_ZN13TestInstallerD1Ev>
 800959a:	4847      	ldr	r0, [pc, #284]	; (80096b8 <_Z41__static_initialization_and_destruction_0ii+0x708>)
 800959c:	f7ff fcc4 	bl	8008f28 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
}
 80095a0:	bf00      	nop
 80095a2:	3708      	adds	r7, #8
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	080262f8 	.word	0x080262f8
 80095ac:	080261a0 	.word	0x080261a0
 80095b0:	200006dc 	.word	0x200006dc
 80095b4:	200006f8 	.word	0x200006f8
 80095b8:	200006fc 	.word	0x200006fc
 80095bc:	08025848 	.word	0x08025848
 80095c0:	08026310 	.word	0x08026310
 80095c4:	20000718 	.word	0x20000718
 80095c8:	2000071c 	.word	0x2000071c
 80095cc:	08026324 	.word	0x08026324
 80095d0:	20000738 	.word	0x20000738
 80095d4:	2000073c 	.word	0x2000073c
 80095d8:	0802633c 	.word	0x0802633c
 80095dc:	20000758 	.word	0x20000758
 80095e0:	2000075c 	.word	0x2000075c
 80095e4:	08026354 	.word	0x08026354
 80095e8:	20000778 	.word	0x20000778
 80095ec:	2000077c 	.word	0x2000077c
 80095f0:	08026374 	.word	0x08026374
 80095f4:	20000798 	.word	0x20000798
 80095f8:	2000079c 	.word	0x2000079c
 80095fc:	0802638c 	.word	0x0802638c
 8009600:	200007b8 	.word	0x200007b8
 8009604:	200006d8 	.word	0x200006d8
 8009608:	200006bc 	.word	0x200006bc
 800960c:	200006b8 	.word	0x200006b8
 8009610:	2000069c 	.word	0x2000069c
 8009614:	20000698 	.word	0x20000698
 8009618:	2000067c 	.word	0x2000067c
 800961c:	20000678 	.word	0x20000678
 8009620:	2000065c 	.word	0x2000065c
 8009624:	20000658 	.word	0x20000658
 8009628:	2000063c 	.word	0x2000063c
 800962c:	20000638 	.word	0x20000638
 8009630:	2000061c 	.word	0x2000061c
 8009634:	20000618 	.word	0x20000618
 8009638:	200005fc 	.word	0x200005fc
 800963c:	200005f8 	.word	0x200005f8
 8009640:	200005dc 	.word	0x200005dc
 8009644:	200005d8 	.word	0x200005d8
 8009648:	200005bc 	.word	0x200005bc
 800964c:	200005b8 	.word	0x200005b8
 8009650:	2000059c 	.word	0x2000059c
 8009654:	20000598 	.word	0x20000598
 8009658:	2000057c 	.word	0x2000057c
 800965c:	20000578 	.word	0x20000578
 8009660:	2000055c 	.word	0x2000055c
 8009664:	20000558 	.word	0x20000558
 8009668:	2000053c 	.word	0x2000053c
 800966c:	20000538 	.word	0x20000538
 8009670:	2000051c 	.word	0x2000051c
 8009674:	20000510 	.word	0x20000510
 8009678:	200004f4 	.word	0x200004f4
 800967c:	200004f0 	.word	0x200004f0
 8009680:	200004d4 	.word	0x200004d4
 8009684:	200004d0 	.word	0x200004d0
 8009688:	200004b4 	.word	0x200004b4
 800968c:	200004b0 	.word	0x200004b0
 8009690:	20000494 	.word	0x20000494
 8009694:	20000490 	.word	0x20000490
 8009698:	20000474 	.word	0x20000474
 800969c:	20000470 	.word	0x20000470
 80096a0:	20000454 	.word	0x20000454
 80096a4:	20000450 	.word	0x20000450
 80096a8:	20000434 	.word	0x20000434
 80096ac:	20000430 	.word	0x20000430
 80096b0:	20000414 	.word	0x20000414
 80096b4:	20000410 	.word	0x20000410
 80096b8:	200003f4 	.word	0x200003f4

080096bc <_GLOBAL__sub_I_externTestGroupRingBuffer_Test_Group>:
 80096bc:	b580      	push	{r7, lr}
 80096be:	af00      	add	r7, sp, #0
 80096c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80096c4:	2001      	movs	r0, #1
 80096c6:	f7ff fc73 	bl	8008fb0 <_Z41__static_initialization_and_destruction_0ii>
 80096ca:	bd80      	pop	{r7, pc}

080096cc <_GLOBAL__sub_D_externTestGroupRingBuffer_Test_Group>:
 80096cc:	b580      	push	{r7, lr}
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80096d4:	2000      	movs	r0, #0
 80096d6:	f7ff fc6b 	bl	8008fb0 <_Z41__static_initialization_and_destruction_0ii>
 80096da:	bd80      	pop	{r7, pc}

080096dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80096e2:	f7f7 fc7c 	bl	8000fde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80096e6:	f000 f817 	bl	8009718 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80096ea:	f000 f973 	bl	80099d4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80096ee:	f000 f947 	bl	8009980 <_ZL11MX_DMA_Initv>
  MX_LPUART1_UART_Init();
 80096f2:	f000 f887 	bl	8009804 <_ZL20MX_LPUART1_UART_Initv>
  MX_USART1_UART_Init();
 80096f6:	f000 f8e3 	bl	80098c0 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  const char * av_override[] = { "exe","-v" };      // verbose mode
 80096fa:	4a06      	ldr	r2, [pc, #24]	; (8009714 <main+0x38>)
 80096fc:	463b      	mov	r3, r7
 80096fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009702:	e883 0003 	stmia.w	r3, {r0, r1}
  CommandLineTestRunner::RunAllTests(2, av_override);
 8009706:	463b      	mov	r3, r7
 8009708:	4619      	mov	r1, r3
 800970a:	2002      	movs	r0, #2
 800970c:	f001 fb3c 	bl	800ad88 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>
  while (1)
 8009710:	e7fe      	b.n	8009710 <main+0x34>
 8009712:	bf00      	nop
 8009714:	080263a8 	.word	0x080263a8

08009718 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b0a8      	sub	sp, #160	; 0xa0
 800971c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800971e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009722:	2238      	movs	r2, #56	; 0x38
 8009724:	2100      	movs	r1, #0
 8009726:	4618      	mov	r0, r3
 8009728:	f019 f8a2 	bl	8022870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800972c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009730:	2200      	movs	r2, #0
 8009732:	601a      	str	r2, [r3, #0]
 8009734:	605a      	str	r2, [r3, #4]
 8009736:	609a      	str	r2, [r3, #8]
 8009738:	60da      	str	r2, [r3, #12]
 800973a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800973c:	463b      	mov	r3, r7
 800973e:	2254      	movs	r2, #84	; 0x54
 8009740:	2100      	movs	r1, #0
 8009742:	4618      	mov	r0, r3
 8009744:	f019 f894 	bl	8022870 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8009748:	2000      	movs	r0, #0
 800974a:	f7f8 fa01 	bl	8001b50 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800974e:	2301      	movs	r3, #1
 8009750:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009752:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009756:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009758:	2302      	movs	r3, #2
 800975a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800975e:	2303      	movs	r3, #3
 8009760:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8009764:	2306      	movs	r3, #6
 8009766:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800976a:	2355      	movs	r3, #85	; 0x55
 800976c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009770:	2302      	movs	r3, #2
 8009772:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8009776:	2302      	movs	r3, #2
 8009778:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800977c:	2302      	movs	r3, #2
 800977e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009782:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009786:	4618      	mov	r0, r3
 8009788:	f7f8 fa96 	bl	8001cb8 <HAL_RCC_OscConfig>
 800978c:	4603      	mov	r3, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	bf14      	ite	ne
 8009792:	2301      	movne	r3, #1
 8009794:	2300      	moveq	r3, #0
 8009796:	b2db      	uxtb	r3, r3
 8009798:	2b00      	cmp	r3, #0
 800979a:	d001      	beq.n	80097a0 <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 800979c:	f000 f98a 	bl	8009ab4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80097a0:	230f      	movs	r3, #15
 80097a2:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80097a4:	2303      	movs	r3, #3
 80097a6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80097a8:	2300      	movs	r3, #0
 80097aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80097ac:	2300      	movs	r3, #0
 80097ae:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80097b0:	2300      	movs	r3, #0
 80097b2:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80097b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80097b8:	2104      	movs	r1, #4
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7f8 fd94 	bl	80022e8 <HAL_RCC_ClockConfig>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	bf14      	ite	ne
 80097c6:	2301      	movne	r3, #1
 80097c8:	2300      	moveq	r3, #0
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d001      	beq.n	80097d4 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 80097d0:	f000 f970 	bl	8009ab4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 80097d4:	2321      	movs	r3, #33	; 0x21
 80097d6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80097d8:	2300      	movs	r3, #0
 80097da:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80097dc:	2300      	movs	r3, #0
 80097de:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80097e0:	463b      	mov	r3, r7
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7f8 ff9c 	bl	8002720 <HAL_RCCEx_PeriphCLKConfig>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	bf14      	ite	ne
 80097ee:	2301      	movne	r3, #1
 80097f0:	2300      	moveq	r3, #0
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d001      	beq.n	80097fc <_Z18SystemClock_Configv+0xe4>
  {
    Error_Handler();
 80097f8:	f000 f95c 	bl	8009ab4 <Error_Handler>
  }
}
 80097fc:	bf00      	nop
 80097fe:	37a0      	adds	r7, #160	; 0xa0
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8009808:	4b2b      	ldr	r3, [pc, #172]	; (80098b8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800980a:	4a2c      	ldr	r2, [pc, #176]	; (80098bc <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800980c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800980e:	4b2a      	ldr	r3, [pc, #168]	; (80098b8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8009810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009814:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009816:	4b28      	ldr	r3, [pc, #160]	; (80098b8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8009818:	2200      	movs	r2, #0
 800981a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800981c:	4b26      	ldr	r3, [pc, #152]	; (80098b8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800981e:	2200      	movs	r2, #0
 8009820:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8009822:	4b25      	ldr	r3, [pc, #148]	; (80098b8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8009824:	2200      	movs	r2, #0
 8009826:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8009828:	4b23      	ldr	r3, [pc, #140]	; (80098b8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800982a:	220c      	movs	r2, #12
 800982c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800982e:	4b22      	ldr	r3, [pc, #136]	; (80098b8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8009830:	2200      	movs	r2, #0
 8009832:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009834:	4b20      	ldr	r3, [pc, #128]	; (80098b8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8009836:	2200      	movs	r2, #0
 8009838:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800983a:	4b1f      	ldr	r3, [pc, #124]	; (80098b8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800983c:	2200      	movs	r2, #0
 800983e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009840:	4b1d      	ldr	r3, [pc, #116]	; (80098b8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8009842:	2200      	movs	r2, #0
 8009844:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8009846:	481c      	ldr	r0, [pc, #112]	; (80098b8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8009848:	f7f9 f9b6 	bl	8002bb8 <HAL_UART_Init>
 800984c:	4603      	mov	r3, r0
 800984e:	2b00      	cmp	r3, #0
 8009850:	bf14      	ite	ne
 8009852:	2301      	movne	r3, #1
 8009854:	2300      	moveq	r3, #0
 8009856:	b2db      	uxtb	r3, r3
 8009858:	2b00      	cmp	r3, #0
 800985a:	d001      	beq.n	8009860 <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 800985c:	f000 f92a 	bl	8009ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009860:	2100      	movs	r1, #0
 8009862:	4815      	ldr	r0, [pc, #84]	; (80098b8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8009864:	f7fa f93c 	bl	8003ae0 <HAL_UARTEx_SetTxFifoThreshold>
 8009868:	4603      	mov	r3, r0
 800986a:	2b00      	cmp	r3, #0
 800986c:	bf14      	ite	ne
 800986e:	2301      	movne	r3, #1
 8009870:	2300      	moveq	r3, #0
 8009872:	b2db      	uxtb	r3, r3
 8009874:	2b00      	cmp	r3, #0
 8009876:	d001      	beq.n	800987c <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 8009878:	f000 f91c 	bl	8009ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800987c:	2100      	movs	r1, #0
 800987e:	480e      	ldr	r0, [pc, #56]	; (80098b8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8009880:	f7fa f96c 	bl	8003b5c <HAL_UARTEx_SetRxFifoThreshold>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	bf14      	ite	ne
 800988a:	2301      	movne	r3, #1
 800988c:	2300      	moveq	r3, #0
 800988e:	b2db      	uxtb	r3, r3
 8009890:	2b00      	cmp	r3, #0
 8009892:	d001      	beq.n	8009898 <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 8009894:	f000 f90e 	bl	8009ab4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8009898:	4807      	ldr	r0, [pc, #28]	; (80098b8 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800989a:	f7fa f8e8 	bl	8003a6e <HAL_UARTEx_DisableFifoMode>
 800989e:	4603      	mov	r3, r0
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	bf14      	ite	ne
 80098a4:	2301      	movne	r3, #1
 80098a6:	2300      	moveq	r3, #0
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d001      	beq.n	80098b2 <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 80098ae:	f000 f901 	bl	8009ab4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80098b2:	bf00      	nop
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	200007bc 	.word	0x200007bc
 80098bc:	40008000 	.word	0x40008000

080098c0 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80098c4:	4b2c      	ldr	r3, [pc, #176]	; (8009978 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80098c6:	4a2d      	ldr	r2, [pc, #180]	; (800997c <_ZL19MX_USART1_UART_Initv+0xbc>)
 80098c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80098ca:	4b2b      	ldr	r3, [pc, #172]	; (8009978 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80098cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80098d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80098d2:	4b29      	ldr	r3, [pc, #164]	; (8009978 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80098d4:	2200      	movs	r2, #0
 80098d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80098d8:	4b27      	ldr	r3, [pc, #156]	; (8009978 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80098da:	2200      	movs	r2, #0
 80098dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80098de:	4b26      	ldr	r3, [pc, #152]	; (8009978 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80098e0:	2200      	movs	r2, #0
 80098e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80098e4:	4b24      	ldr	r3, [pc, #144]	; (8009978 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80098e6:	220c      	movs	r2, #12
 80098e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80098ea:	4b23      	ldr	r3, [pc, #140]	; (8009978 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80098ec:	2200      	movs	r2, #0
 80098ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80098f0:	4b21      	ldr	r3, [pc, #132]	; (8009978 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80098f2:	2200      	movs	r2, #0
 80098f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80098f6:	4b20      	ldr	r3, [pc, #128]	; (8009978 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80098f8:	2200      	movs	r2, #0
 80098fa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80098fc:	4b1e      	ldr	r3, [pc, #120]	; (8009978 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80098fe:	2200      	movs	r2, #0
 8009900:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009902:	4b1d      	ldr	r3, [pc, #116]	; (8009978 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8009904:	2200      	movs	r2, #0
 8009906:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009908:	481b      	ldr	r0, [pc, #108]	; (8009978 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800990a:	f7f9 f955 	bl	8002bb8 <HAL_UART_Init>
 800990e:	4603      	mov	r3, r0
 8009910:	2b00      	cmp	r3, #0
 8009912:	bf14      	ite	ne
 8009914:	2301      	movne	r3, #1
 8009916:	2300      	moveq	r3, #0
 8009918:	b2db      	uxtb	r3, r3
 800991a:	2b00      	cmp	r3, #0
 800991c:	d001      	beq.n	8009922 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 800991e:	f000 f8c9 	bl	8009ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009922:	2100      	movs	r1, #0
 8009924:	4814      	ldr	r0, [pc, #80]	; (8009978 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8009926:	f7fa f8db 	bl	8003ae0 <HAL_UARTEx_SetTxFifoThreshold>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	bf14      	ite	ne
 8009930:	2301      	movne	r3, #1
 8009932:	2300      	moveq	r3, #0
 8009934:	b2db      	uxtb	r3, r3
 8009936:	2b00      	cmp	r3, #0
 8009938:	d001      	beq.n	800993e <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 800993a:	f000 f8bb 	bl	8009ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800993e:	2100      	movs	r1, #0
 8009940:	480d      	ldr	r0, [pc, #52]	; (8009978 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8009942:	f7fa f90b 	bl	8003b5c <HAL_UARTEx_SetRxFifoThreshold>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	bf14      	ite	ne
 800994c:	2301      	movne	r3, #1
 800994e:	2300      	moveq	r3, #0
 8009950:	b2db      	uxtb	r3, r3
 8009952:	2b00      	cmp	r3, #0
 8009954:	d001      	beq.n	800995a <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8009956:	f000 f8ad 	bl	8009ab4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800995a:	4807      	ldr	r0, [pc, #28]	; (8009978 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800995c:	f7fa f887 	bl	8003a6e <HAL_UARTEx_DisableFifoMode>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	bf14      	ite	ne
 8009966:	2301      	movne	r3, #1
 8009968:	2300      	moveq	r3, #0
 800996a:	b2db      	uxtb	r3, r3
 800996c:	2b00      	cmp	r3, #0
 800996e:	d001      	beq.n	8009974 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8009970:	f000 f8a0 	bl	8009ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009974:	bf00      	nop
 8009976:	bd80      	pop	{r7, pc}
 8009978:	2000084c 	.word	0x2000084c
 800997c:	40013800 	.word	0x40013800

08009980 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8009986:	4b12      	ldr	r3, [pc, #72]	; (80099d0 <_ZL11MX_DMA_Initv+0x50>)
 8009988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800998a:	4a11      	ldr	r2, [pc, #68]	; (80099d0 <_ZL11MX_DMA_Initv+0x50>)
 800998c:	f043 0304 	orr.w	r3, r3, #4
 8009990:	6493      	str	r3, [r2, #72]	; 0x48
 8009992:	4b0f      	ldr	r3, [pc, #60]	; (80099d0 <_ZL11MX_DMA_Initv+0x50>)
 8009994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009996:	f003 0304 	and.w	r3, r3, #4
 800999a:	607b      	str	r3, [r7, #4]
 800999c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800999e:	4b0c      	ldr	r3, [pc, #48]	; (80099d0 <_ZL11MX_DMA_Initv+0x50>)
 80099a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099a2:	4a0b      	ldr	r2, [pc, #44]	; (80099d0 <_ZL11MX_DMA_Initv+0x50>)
 80099a4:	f043 0301 	orr.w	r3, r3, #1
 80099a8:	6493      	str	r3, [r2, #72]	; 0x48
 80099aa:	4b09      	ldr	r3, [pc, #36]	; (80099d0 <_ZL11MX_DMA_Initv+0x50>)
 80099ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099ae:	f003 0301 	and.w	r3, r3, #1
 80099b2:	603b      	str	r3, [r7, #0]
 80099b4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80099b6:	2200      	movs	r2, #0
 80099b8:	2100      	movs	r1, #0
 80099ba:	200b      	movs	r0, #11
 80099bc:	f7f7 fc5b 	bl	8001276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80099c0:	200b      	movs	r0, #11
 80099c2:	f7f7 fc72 	bl	80012aa <HAL_NVIC_EnableIRQ>

}
 80099c6:	bf00      	nop
 80099c8:	3708      	adds	r7, #8
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	40021000 	.word	0x40021000

080099d4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b08a      	sub	sp, #40	; 0x28
 80099d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80099da:	f107 0314 	add.w	r3, r7, #20
 80099de:	2200      	movs	r2, #0
 80099e0:	601a      	str	r2, [r3, #0]
 80099e2:	605a      	str	r2, [r3, #4]
 80099e4:	609a      	str	r2, [r3, #8]
 80099e6:	60da      	str	r2, [r3, #12]
 80099e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80099ea:	4b2f      	ldr	r3, [pc, #188]	; (8009aa8 <_ZL12MX_GPIO_Initv+0xd4>)
 80099ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099ee:	4a2e      	ldr	r2, [pc, #184]	; (8009aa8 <_ZL12MX_GPIO_Initv+0xd4>)
 80099f0:	f043 0304 	orr.w	r3, r3, #4
 80099f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80099f6:	4b2c      	ldr	r3, [pc, #176]	; (8009aa8 <_ZL12MX_GPIO_Initv+0xd4>)
 80099f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099fa:	f003 0304 	and.w	r3, r3, #4
 80099fe:	613b      	str	r3, [r7, #16]
 8009a00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009a02:	4b29      	ldr	r3, [pc, #164]	; (8009aa8 <_ZL12MX_GPIO_Initv+0xd4>)
 8009a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a06:	4a28      	ldr	r2, [pc, #160]	; (8009aa8 <_ZL12MX_GPIO_Initv+0xd4>)
 8009a08:	f043 0320 	orr.w	r3, r3, #32
 8009a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a0e:	4b26      	ldr	r3, [pc, #152]	; (8009aa8 <_ZL12MX_GPIO_Initv+0xd4>)
 8009a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a12:	f003 0320 	and.w	r3, r3, #32
 8009a16:	60fb      	str	r3, [r7, #12]
 8009a18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a1a:	4b23      	ldr	r3, [pc, #140]	; (8009aa8 <_ZL12MX_GPIO_Initv+0xd4>)
 8009a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a1e:	4a22      	ldr	r2, [pc, #136]	; (8009aa8 <_ZL12MX_GPIO_Initv+0xd4>)
 8009a20:	f043 0301 	orr.w	r3, r3, #1
 8009a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a26:	4b20      	ldr	r3, [pc, #128]	; (8009aa8 <_ZL12MX_GPIO_Initv+0xd4>)
 8009a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a2a:	f003 0301 	and.w	r3, r3, #1
 8009a2e:	60bb      	str	r3, [r7, #8]
 8009a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009a32:	4b1d      	ldr	r3, [pc, #116]	; (8009aa8 <_ZL12MX_GPIO_Initv+0xd4>)
 8009a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a36:	4a1c      	ldr	r2, [pc, #112]	; (8009aa8 <_ZL12MX_GPIO_Initv+0xd4>)
 8009a38:	f043 0302 	orr.w	r3, r3, #2
 8009a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a3e:	4b1a      	ldr	r3, [pc, #104]	; (8009aa8 <_ZL12MX_GPIO_Initv+0xd4>)
 8009a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a42:	f003 0302 	and.w	r3, r3, #2
 8009a46:	607b      	str	r3, [r7, #4]
 8009a48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	2120      	movs	r1, #32
 8009a4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009a52:	f7f8 f841 	bl	8001ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8009a56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009a5c:	4b13      	ldr	r3, [pc, #76]	; (8009aac <_ZL12MX_GPIO_Initv+0xd8>)
 8009a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a60:	2300      	movs	r3, #0
 8009a62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8009a64:	f107 0314 	add.w	r3, r7, #20
 8009a68:	4619      	mov	r1, r3
 8009a6a:	4811      	ldr	r0, [pc, #68]	; (8009ab0 <_ZL12MX_GPIO_Initv+0xdc>)
 8009a6c:	f7f7 feb2 	bl	80017d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8009a70:	2320      	movs	r3, #32
 8009a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009a74:	2301      	movs	r3, #1
 8009a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8009a80:	f107 0314 	add.w	r3, r7, #20
 8009a84:	4619      	mov	r1, r3
 8009a86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009a8a:	f7f7 fea3 	bl	80017d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8009a8e:	2200      	movs	r2, #0
 8009a90:	2100      	movs	r1, #0
 8009a92:	2028      	movs	r0, #40	; 0x28
 8009a94:	f7f7 fbef 	bl	8001276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8009a98:	2028      	movs	r0, #40	; 0x28
 8009a9a:	f7f7 fc06 	bl	80012aa <HAL_NVIC_EnableIRQ>

}
 8009a9e:	bf00      	nop
 8009aa0:	3728      	adds	r7, #40	; 0x28
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
 8009aa6:	bf00      	nop
 8009aa8:	40021000 	.word	0x40021000
 8009aac:	10110000 	.word	0x10110000
 8009ab0:	48000800 	.word	0x48000800

08009ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009ab8:	b672      	cpsid	i
}
 8009aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009abc:	e7fe      	b.n	8009abc <Error_Handler+0x8>
	...

08009ac0 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroup5setupEv>:


TEST_GROUP(MqttTestGroup)
{

	void setup()
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b082      	sub	sp, #8
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
	{
		ESP_Init(UART_Transmit_Fake,
 8009ac8:	23ff      	movs	r3, #255	; 0xff
 8009aca:	4a04      	ldr	r2, [pc, #16]	; (8009adc <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroup5setupEv+0x1c>)
 8009acc:	4904      	ldr	r1, [pc, #16]	; (8009ae0 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroup5setupEv+0x20>)
 8009ace:	4805      	ldr	r0, [pc, #20]	; (8009ae4 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroup5setupEv+0x24>)
 8009ad0:	f7fa f8d0 	bl	8003c74 <ESP_Init>
				  UART_Receive_Fake,
				  getTick_Fake,
				  255);
	}
 8009ad4:	bf00      	nop
 8009ad6:	3708      	adds	r7, #8
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	080055a5 	.word	0x080055a5
 8009ae0:	08005539 	.word	0x08005539
 8009ae4:	0800547d 	.word	0x0800547d

08009ae8 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroup8teardownEv>:

	void teardown()
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b086      	sub	sp, #24
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
	{
		mock().checkExpectations();
 8009af0:	f107 0308 	add.w	r3, r7, #8
 8009af4:	4917      	ldr	r1, [pc, #92]	; (8009b54 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroup8teardownEv+0x6c>)
 8009af6:	4618      	mov	r0, r3
 8009af8:	f005 f9d7 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8009afc:	f107 0308 	add.w	r3, r7, #8
 8009b00:	2100      	movs	r1, #0
 8009b02:	4618      	mov	r0, r3
 8009b04:	f003 faaa 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	3294      	adds	r2, #148	; 0x94
 8009b0e:	6812      	ldr	r2, [r2, #0]
 8009b10:	4618      	mov	r0, r3
 8009b12:	4790      	blx	r2
 8009b14:	f107 0308 	add.w	r3, r7, #8
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f005 fd7e 	bl	800f61a <_ZN12SimpleStringD1Ev>
		mock().clear();
 8009b1e:	f107 0310 	add.w	r3, r7, #16
 8009b22:	490c      	ldr	r1, [pc, #48]	; (8009b54 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroup8teardownEv+0x6c>)
 8009b24:	4618      	mov	r0, r3
 8009b26:	f005 f9c0 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8009b2a:	f107 0310 	add.w	r3, r7, #16
 8009b2e:	2100      	movs	r1, #0
 8009b30:	4618      	mov	r0, r3
 8009b32:	f003 fa93 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8009b36:	4603      	mov	r3, r0
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	329c      	adds	r2, #156	; 0x9c
 8009b3c:	6812      	ldr	r2, [r2, #0]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	4790      	blx	r2
 8009b42:	f107 0310 	add.w	r3, r7, #16
 8009b46:	4618      	mov	r0, r3
 8009b48:	f005 fd67 	bl	800f61a <_ZN12SimpleStringD1Ev>
	}
 8009b4c:	bf00      	nop
 8009b4e:	3718      	adds	r7, #24
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	080263b0 	.word	0x080263b0

08009b58 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupC1Ev>:
TEST_GROUP(MqttTestGroup)
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4618      	mov	r0, r3
 8009b64:	f00c fdae 	bl	80166c4 <_ZN5UtestC1Ev>
 8009b68:	4a03      	ldr	r2, [pc, #12]	; (8009b78 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupC1Ev+0x20>)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	601a      	str	r2, [r3, #0]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	4618      	mov	r0, r3
 8009b72:	3708      	adds	r7, #8
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	0802afdc 	.word	0x0802afdc

08009b7c <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev>:
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	4a05      	ldr	r2, [pc, #20]	; (8009b9c <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev+0x20>)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	601a      	str	r2, [r3, #0]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f00c fda9 	bl	80166e4 <_ZN5UtestD1Ev>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	4618      	mov	r0, r3
 8009b96:	3708      	adds	r7, #8
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	0802afdc 	.word	0x0802afdc

08009ba0 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD0Ev>:
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f7ff ffe7 	bl	8009b7c <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev>
 8009bae:	2104      	movs	r1, #4
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f002 fdcb 	bl	800c74c <_ZdlPvj>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3708      	adds	r7, #8
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestC1Ev>:
};

TEST(MqttTestGroup, ConnectPacketTest)
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7ff ffc4 	bl	8009b58 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupC1Ev>
 8009bd0:	4a03      	ldr	r2, [pc, #12]	; (8009be0 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestC1Ev+0x20>)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	601a      	str	r2, [r3, #0]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3708      	adds	r7, #8
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	0802afbc 	.word	0x0802afbc

08009be4 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShell10createTestEv>:
 8009be4:	b590      	push	{r4, r7, lr}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	222a      	movs	r2, #42	; 0x2a
 8009bee:	4906      	ldr	r1, [pc, #24]	; (8009c08 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShell10createTestEv+0x24>)
 8009bf0:	2004      	movs	r0, #4
 8009bf2:	f002 fd97 	bl	800c724 <_ZnwjPKci>
 8009bf6:	4604      	mov	r4, r0
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	f7ff ffe1 	bl	8009bc0 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestC1Ev>
 8009bfe:	4623      	mov	r3, r4
 8009c00:	4618      	mov	r0, r3
 8009c02:	370c      	adds	r7, #12
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd90      	pop	{r4, r7, pc}
 8009c08:	080263b4 	.word	0x080263b4

08009c0c <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellC1Ev>:
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b082      	sub	sp, #8
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	4618      	mov	r0, r3
 8009c18:	f00b f972 	bl	8014f00 <_ZN10UtestShellC1Ev>
 8009c1c:	4a03      	ldr	r2, [pc, #12]	; (8009c2c <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellC1Ev+0x20>)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	601a      	str	r2, [r3, #0]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4618      	mov	r0, r3
 8009c26:	3708      	adds	r7, #8
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}
 8009c2c:	0802af10 	.word	0x0802af10

08009c30 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv>:
{
 8009c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c34:	b0b4      	sub	sp, #208	; 0xd0
 8009c36:	af04      	add	r7, sp, #16
 8009c38:	6078      	str	r0, [r7, #4]

	char clientID[] = "Topuz";
 8009c3a:	4ac2      	ldr	r2, [pc, #776]	; (8009f44 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x314>)
 8009c3c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8009c40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c44:	6018      	str	r0, [r3, #0]
 8009c46:	3304      	adds	r3, #4
 8009c48:	8019      	strh	r1, [r3, #0]
	uint16_t ClientIDLength = strlen(clientID);
 8009c4a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7f6 faf4 	bl	800023c <strlen>
 8009c54:	4603      	mov	r3, r0
 8009c56:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
	uint8_t remainLength = (uint8_t)ClientIDLength + 12;  	// 12 represents the bytes in the packet between remain length and Client ID byte.
 8009c5a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009c5e:	b2db      	uxtb	r3, r3
 8009c60:	330c      	adds	r3, #12
 8009c62:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd

	uint8_t outputStream[100] ={0};							// for serialize
 8009c66:	2300      	movs	r3, #0
 8009c68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c6a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009c6e:	2260      	movs	r2, #96	; 0x60
 8009c70:	2100      	movs	r1, #0
 8009c72:	4618      	mov	r0, r3
 8009c74:	f018 fdfc 	bl	8022870 <memset>

	MQTT_Connect_Packet connectPacket;

	connectPacket.ConnectByte = 0x10;
 8009c78:	2310      	movs	r3, #16
 8009c7a:	733b      	strb	r3, [r7, #12]
	connectPacket.RemainLength = remainLength;
 8009c7c:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 8009c80:	737b      	strb	r3, [r7, #13]
	connectPacket.ProtocolNameLength = 0x0004;
 8009c82:	2304      	movs	r3, #4
 8009c84:	81fb      	strh	r3, [r7, #14]
	strcpy(connectPacket.ProtocolName,"MQTT");
 8009c86:	f107 030c 	add.w	r3, r7, #12
 8009c8a:	3304      	adds	r3, #4
 8009c8c:	4aae      	ldr	r2, [pc, #696]	; (8009f48 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x318>)
 8009c8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c92:	6018      	str	r0, [r3, #0]
 8009c94:	3304      	adds	r3, #4
 8009c96:	7019      	strb	r1, [r3, #0]
	connectPacket.Level = 0x04;
 8009c98:	2304      	movs	r3, #4
 8009c9a:	753b      	strb	r3, [r7, #20]
	connectPacket.Flag = 0x02;
 8009c9c:	2302      	movs	r3, #2
 8009c9e:	757b      	strb	r3, [r7, #21]
	connectPacket.KeepAlive = 60;
 8009ca0:	233c      	movs	r3, #60	; 0x3c
 8009ca2:	82fb      	strh	r3, [r7, #22]
	connectPacket.ClientIDLength = ClientIDLength;
 8009ca4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009ca8:	833b      	strh	r3, [r7, #24]
	strcpy(connectPacket.ClientID,clientID);
 8009caa:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8009cae:	f107 030c 	add.w	r3, r7, #12
 8009cb2:	330e      	adds	r3, #14
 8009cb4:	4611      	mov	r1, r2
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f018 fff3 	bl	8022ca2 <strcpy>

	int32_t status = mqtt_encode_packet(outputStream, &connectPacket, CONNECT_PACKET);
 8009cbc:	f107 010c 	add.w	r1, r7, #12
 8009cc0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7fa fb1c 	bl	8004304 <mqtt_encode_packet>
 8009ccc:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8

	LONGS_EQUAL(remainLength+2,status);												// check number of bytes that is written to buffer
 8009cd0:	f00c fcce 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8009cd4:	4604      	mov	r4, r0
 8009cd6:	6823      	ldr	r3, [r4, #0]
 8009cd8:	3338      	adds	r3, #56	; 0x38
 8009cda:	681d      	ldr	r5, [r3, #0]
 8009cdc:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 8009ce0:	1c9e      	adds	r6, r3, #2
 8009ce2:	f00c fcd5 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	9302      	str	r3, [sp, #8]
 8009cea:	2341      	movs	r3, #65	; 0x41
 8009cec:	9301      	str	r3, [sp, #4]
 8009cee:	4b97      	ldr	r3, [pc, #604]	; (8009f4c <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009cf0:	9300      	str	r3, [sp, #0]
 8009cf2:	4b97      	ldr	r3, [pc, #604]	; (8009f50 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x320>)
 8009cf4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009cf8:	4631      	mov	r1, r6
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	47a8      	blx	r5
	STRCMP_EQUAL("Topuz",(const char*)&outputStream[status-ClientIDLength]);		// check clientID that is written to buffer
 8009cfe:	f00c fcb7 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8009d02:	4604      	mov	r4, r0
 8009d04:	6823      	ldr	r3, [r4, #0]
 8009d06:	3324      	adds	r3, #36	; 0x24
 8009d08:	681d      	ldr	r5, [r3, #0]
 8009d0a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009d0e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009d12:	1ad3      	subs	r3, r2, r3
 8009d14:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8009d18:	18d6      	adds	r6, r2, r3
 8009d1a:	f00c fcb9 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	9302      	str	r3, [sp, #8]
 8009d22:	2342      	movs	r3, #66	; 0x42
 8009d24:	9301      	str	r3, [sp, #4]
 8009d26:	4b89      	ldr	r3, [pc, #548]	; (8009f4c <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009d28:	9300      	str	r3, [sp, #0]
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	4632      	mov	r2, r6
 8009d2e:	4985      	ldr	r1, [pc, #532]	; (8009f44 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x314>)
 8009d30:	4620      	mov	r0, r4
 8009d32:	47a8      	blx	r5
	LONGS_EQUAL(0x10,outputStream[0]);												// check connectByte
 8009d34:	f00c fc9c 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8009d38:	4604      	mov	r4, r0
 8009d3a:	6823      	ldr	r3, [r4, #0]
 8009d3c:	3338      	adds	r3, #56	; 0x38
 8009d3e:	681d      	ldr	r5, [r3, #0]
 8009d40:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8009d44:	461e      	mov	r6, r3
 8009d46:	f00c fca3 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	9302      	str	r3, [sp, #8]
 8009d4e:	2343      	movs	r3, #67	; 0x43
 8009d50:	9301      	str	r3, [sp, #4]
 8009d52:	4b7e      	ldr	r3, [pc, #504]	; (8009f4c <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009d54:	9300      	str	r3, [sp, #0]
 8009d56:	4b7f      	ldr	r3, [pc, #508]	; (8009f54 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x324>)
 8009d58:	4632      	mov	r2, r6
 8009d5a:	2110      	movs	r1, #16
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	47a8      	blx	r5
	LONGS_EQUAL(remainLength,outputStream[1]);										// check remainlength
 8009d60:	f00c fc86 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8009d64:	4604      	mov	r4, r0
 8009d66:	6823      	ldr	r3, [r4, #0]
 8009d68:	3338      	adds	r3, #56	; 0x38
 8009d6a:	681d      	ldr	r5, [r3, #0]
 8009d6c:	f897 60bd 	ldrb.w	r6, [r7, #189]	; 0xbd
 8009d70:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009d74:	4698      	mov	r8, r3
 8009d76:	f00c fc8b 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	9302      	str	r3, [sp, #8]
 8009d7e:	2344      	movs	r3, #68	; 0x44
 8009d80:	9301      	str	r3, [sp, #4]
 8009d82:	4b72      	ldr	r3, [pc, #456]	; (8009f4c <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009d84:	9300      	str	r3, [sp, #0]
 8009d86:	4b74      	ldr	r3, [pc, #464]	; (8009f58 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x328>)
 8009d88:	4642      	mov	r2, r8
 8009d8a:	4631      	mov	r1, r6
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	47a8      	blx	r5
	LONGS_EQUAL(0x0004,(uint16_t)((outputStream[2] << 8) + outputStream[3]));		// check protocol name length
 8009d90:	f00c fc6e 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8009d94:	4604      	mov	r4, r0
 8009d96:	6823      	ldr	r3, [r4, #0]
 8009d98:	3338      	adds	r3, #56	; 0x38
 8009d9a:	681d      	ldr	r5, [r3, #0]
 8009d9c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	021b      	lsls	r3, r3, #8
 8009da4:	b29a      	uxth	r2, r3
 8009da6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	4413      	add	r3, r2
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	461e      	mov	r6, r3
 8009db2:	f00c fc6d 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009db6:	4603      	mov	r3, r0
 8009db8:	9302      	str	r3, [sp, #8]
 8009dba:	2345      	movs	r3, #69	; 0x45
 8009dbc:	9301      	str	r3, [sp, #4]
 8009dbe:	4b63      	ldr	r3, [pc, #396]	; (8009f4c <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009dc0:	9300      	str	r3, [sp, #0]
 8009dc2:	4b66      	ldr	r3, [pc, #408]	; (8009f5c <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x32c>)
 8009dc4:	4632      	mov	r2, r6
 8009dc6:	2104      	movs	r1, #4
 8009dc8:	4620      	mov	r0, r4
 8009dca:	47a8      	blx	r5
	LONGS_EQUAL('M',outputStream[4]); 												// check protocol name
 8009dcc:	f00c fc50 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8009dd0:	4604      	mov	r4, r0
 8009dd2:	6823      	ldr	r3, [r4, #0]
 8009dd4:	3338      	adds	r3, #56	; 0x38
 8009dd6:	681d      	ldr	r5, [r3, #0]
 8009dd8:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8009ddc:	461e      	mov	r6, r3
 8009dde:	f00c fc57 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009de2:	4603      	mov	r3, r0
 8009de4:	9302      	str	r3, [sp, #8]
 8009de6:	2346      	movs	r3, #70	; 0x46
 8009de8:	9301      	str	r3, [sp, #4]
 8009dea:	4b58      	ldr	r3, [pc, #352]	; (8009f4c <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009dec:	9300      	str	r3, [sp, #0]
 8009dee:	4b5c      	ldr	r3, [pc, #368]	; (8009f60 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x330>)
 8009df0:	4632      	mov	r2, r6
 8009df2:	214d      	movs	r1, #77	; 0x4d
 8009df4:	4620      	mov	r0, r4
 8009df6:	47a8      	blx	r5
	LONGS_EQUAL('Q',outputStream[5]);
 8009df8:	f00c fc3a 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8009dfc:	4604      	mov	r4, r0
 8009dfe:	6823      	ldr	r3, [r4, #0]
 8009e00:	3338      	adds	r3, #56	; 0x38
 8009e02:	681d      	ldr	r5, [r3, #0]
 8009e04:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8009e08:	461e      	mov	r6, r3
 8009e0a:	f00c fc41 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	9302      	str	r3, [sp, #8]
 8009e12:	2347      	movs	r3, #71	; 0x47
 8009e14:	9301      	str	r3, [sp, #4]
 8009e16:	4b4d      	ldr	r3, [pc, #308]	; (8009f4c <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009e18:	9300      	str	r3, [sp, #0]
 8009e1a:	4b52      	ldr	r3, [pc, #328]	; (8009f64 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x334>)
 8009e1c:	4632      	mov	r2, r6
 8009e1e:	2151      	movs	r1, #81	; 0x51
 8009e20:	4620      	mov	r0, r4
 8009e22:	47a8      	blx	r5
	LONGS_EQUAL('T',outputStream[6]);
 8009e24:	f00c fc24 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8009e28:	4604      	mov	r4, r0
 8009e2a:	6823      	ldr	r3, [r4, #0]
 8009e2c:	3338      	adds	r3, #56	; 0x38
 8009e2e:	681d      	ldr	r5, [r3, #0]
 8009e30:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8009e34:	461e      	mov	r6, r3
 8009e36:	f00c fc2b 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	9302      	str	r3, [sp, #8]
 8009e3e:	2348      	movs	r3, #72	; 0x48
 8009e40:	9301      	str	r3, [sp, #4]
 8009e42:	4b42      	ldr	r3, [pc, #264]	; (8009f4c <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009e44:	9300      	str	r3, [sp, #0]
 8009e46:	4b48      	ldr	r3, [pc, #288]	; (8009f68 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x338>)
 8009e48:	4632      	mov	r2, r6
 8009e4a:	2154      	movs	r1, #84	; 0x54
 8009e4c:	4620      	mov	r0, r4
 8009e4e:	47a8      	blx	r5
	LONGS_EQUAL('T',outputStream[7]);
 8009e50:	f00c fc0e 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8009e54:	4604      	mov	r4, r0
 8009e56:	6823      	ldr	r3, [r4, #0]
 8009e58:	3338      	adds	r3, #56	; 0x38
 8009e5a:	681d      	ldr	r5, [r3, #0]
 8009e5c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8009e60:	461e      	mov	r6, r3
 8009e62:	f00c fc15 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009e66:	4603      	mov	r3, r0
 8009e68:	9302      	str	r3, [sp, #8]
 8009e6a:	2349      	movs	r3, #73	; 0x49
 8009e6c:	9301      	str	r3, [sp, #4]
 8009e6e:	4b37      	ldr	r3, [pc, #220]	; (8009f4c <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009e70:	9300      	str	r3, [sp, #0]
 8009e72:	4b3e      	ldr	r3, [pc, #248]	; (8009f6c <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x33c>)
 8009e74:	4632      	mov	r2, r6
 8009e76:	2154      	movs	r1, #84	; 0x54
 8009e78:	4620      	mov	r0, r4
 8009e7a:	47a8      	blx	r5
	LONGS_EQUAL(0x04,outputStream[8]);													// check level byte
 8009e7c:	f00c fbf8 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8009e80:	4604      	mov	r4, r0
 8009e82:	6823      	ldr	r3, [r4, #0]
 8009e84:	3338      	adds	r3, #56	; 0x38
 8009e86:	681d      	ldr	r5, [r3, #0]
 8009e88:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8009e8c:	461e      	mov	r6, r3
 8009e8e:	f00c fbff 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009e92:	4603      	mov	r3, r0
 8009e94:	9302      	str	r3, [sp, #8]
 8009e96:	234a      	movs	r3, #74	; 0x4a
 8009e98:	9301      	str	r3, [sp, #4]
 8009e9a:	4b2c      	ldr	r3, [pc, #176]	; (8009f4c <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009e9c:	9300      	str	r3, [sp, #0]
 8009e9e:	4b34      	ldr	r3, [pc, #208]	; (8009f70 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x340>)
 8009ea0:	4632      	mov	r2, r6
 8009ea2:	2104      	movs	r1, #4
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	47a8      	blx	r5
	LONGS_EQUAL(0x02,outputStream[9]);													// check flag byte
 8009ea8:	f00c fbe2 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8009eac:	4604      	mov	r4, r0
 8009eae:	6823      	ldr	r3, [r4, #0]
 8009eb0:	3338      	adds	r3, #56	; 0x38
 8009eb2:	681d      	ldr	r5, [r3, #0]
 8009eb4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8009eb8:	461e      	mov	r6, r3
 8009eba:	f00c fbe9 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	9302      	str	r3, [sp, #8]
 8009ec2:	234b      	movs	r3, #75	; 0x4b
 8009ec4:	9301      	str	r3, [sp, #4]
 8009ec6:	4b21      	ldr	r3, [pc, #132]	; (8009f4c <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009ec8:	9300      	str	r3, [sp, #0]
 8009eca:	4b2a      	ldr	r3, [pc, #168]	; (8009f74 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x344>)
 8009ecc:	4632      	mov	r2, r6
 8009ece:	2102      	movs	r1, #2
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	47a8      	blx	r5
	LONGS_EQUAL((uint16_t)60,(uint16_t)((outputStream[10] << 8) + outputStream[11]));	// check keep alive bytes
 8009ed4:	f00c fbcc 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8009ed8:	4604      	mov	r4, r0
 8009eda:	6823      	ldr	r3, [r4, #0]
 8009edc:	3338      	adds	r3, #56	; 0x38
 8009ede:	681d      	ldr	r5, [r3, #0]
 8009ee0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	021b      	lsls	r3, r3, #8
 8009ee8:	b29a      	uxth	r2, r3
 8009eea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	4413      	add	r3, r2
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	461e      	mov	r6, r3
 8009ef6:	f00c fbcb 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009efa:	4603      	mov	r3, r0
 8009efc:	9302      	str	r3, [sp, #8]
 8009efe:	234c      	movs	r3, #76	; 0x4c
 8009f00:	9301      	str	r3, [sp, #4]
 8009f02:	4b12      	ldr	r3, [pc, #72]	; (8009f4c <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x31c>)
 8009f04:	9300      	str	r3, [sp, #0]
 8009f06:	4b1c      	ldr	r3, [pc, #112]	; (8009f78 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x348>)
 8009f08:	4632      	mov	r2, r6
 8009f0a:	213c      	movs	r1, #60	; 0x3c
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	47a8      	blx	r5
	LONGS_EQUAL(ClientIDLength,(uint16_t)((outputStream[12] << 8) + outputStream[13]));	// check client id length bytes
 8009f10:	f00c fbae 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8009f14:	4604      	mov	r4, r0
 8009f16:	6823      	ldr	r3, [r4, #0]
 8009f18:	3338      	adds	r3, #56	; 0x38
 8009f1a:	681d      	ldr	r5, [r3, #0]
 8009f1c:	f8b7 60be 	ldrh.w	r6, [r7, #190]	; 0xbe
 8009f20:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	021b      	lsls	r3, r3, #8
 8009f28:	b29a      	uxth	r2, r3
 8009f2a:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	4413      	add	r3, r2
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	4698      	mov	r8, r3
 8009f36:	f00c fbab 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	9302      	str	r3, [sp, #8]
 8009f3e:	234d      	movs	r3, #77	; 0x4d
 8009f40:	e01c      	b.n	8009f7c <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x34c>
 8009f42:	bf00      	nop
 8009f44:	08026404 	.word	0x08026404
 8009f48:	080263d0 	.word	0x080263d0
 8009f4c:	080263b4 	.word	0x080263b4
 8009f50:	080263d8 	.word	0x080263d8
 8009f54:	0802640c 	.word	0x0802640c
 8009f58:	08026438 	.word	0x08026438
 8009f5c:	0802646c 	.word	0x0802646c
 8009f60:	080264c0 	.word	0x080264c0
 8009f64:	080264ec 	.word	0x080264ec
 8009f68:	08026518 	.word	0x08026518
 8009f6c:	08026544 	.word	0x08026544
 8009f70:	08026570 	.word	0x08026570
 8009f74:	0802659c 	.word	0x0802659c
 8009f78:	080265c8 	.word	0x080265c8
 8009f7c:	9301      	str	r3, [sp, #4]
 8009f7e:	4b06      	ldr	r3, [pc, #24]	; (8009f98 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x368>)
 8009f80:	9300      	str	r3, [sp, #0]
 8009f82:	4b06      	ldr	r3, [pc, #24]	; (8009f9c <_ZN41TEST_MqttTestGroup_ConnectPacketTest_Test8testBodyEv+0x36c>)
 8009f84:	4642      	mov	r2, r8
 8009f86:	4631      	mov	r1, r6
 8009f88:	4620      	mov	r0, r4
 8009f8a:	47a8      	blx	r5

}
 8009f8c:	bf00      	nop
 8009f8e:	37c0      	adds	r7, #192	; 0xc0
 8009f90:	46bd      	mov	sp, r7
 8009f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f96:	bf00      	nop
 8009f98:	080263b4 	.word	0x080263b4
 8009f9c:	08026624 	.word	0x08026624

08009fa0 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_TestC1Ev>:


TEST(MqttTestGroup, SubscribePacketTest)
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b082      	sub	sp, #8
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7ff fdd4 	bl	8009b58 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupC1Ev>
 8009fb0:	4a03      	ldr	r2, [pc, #12]	; (8009fc0 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_TestC1Ev+0x20>)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	601a      	str	r2, [r3, #0]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3708      	adds	r7, #8
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	0802aef0 	.word	0x0802aef0

08009fc4 <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShell10createTestEv>:
 8009fc4:	b590      	push	{r4, r7, lr}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	2252      	movs	r2, #82	; 0x52
 8009fce:	4906      	ldr	r1, [pc, #24]	; (8009fe8 <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShell10createTestEv+0x24>)
 8009fd0:	2004      	movs	r0, #4
 8009fd2:	f002 fba7 	bl	800c724 <_ZnwjPKci>
 8009fd6:	4604      	mov	r4, r0
 8009fd8:	4620      	mov	r0, r4
 8009fda:	f7ff ffe1 	bl	8009fa0 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_TestC1Ev>
 8009fde:	4623      	mov	r3, r4
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd90      	pop	{r4, r7, pc}
 8009fe8:	080263b4 	.word	0x080263b4

08009fec <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellC1Ev>:
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f00a ff82 	bl	8014f00 <_ZN10UtestShellC1Ev>
 8009ffc:	4a03      	ldr	r2, [pc, #12]	; (800a00c <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellC1Ev+0x20>)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	601a      	str	r2, [r3, #0]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	4618      	mov	r0, r3
 800a006:	3708      	adds	r7, #8
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}
 800a00c:	0802ae44 	.word	0x0802ae44

0800a010 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv>:
{
 800a010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a014:	b0b6      	sub	sp, #216	; 0xd8
 800a016:	af04      	add	r7, sp, #16
 800a018:	6078      	str	r0, [r7, #4]
	char topicName[] = "Testtopic";
 800a01a:	4a8c      	ldr	r2, [pc, #560]	; (800a24c <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x23c>)
 800a01c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800a020:	ca07      	ldmia	r2, {r0, r1, r2}
 800a022:	c303      	stmia	r3!, {r0, r1}
 800a024:	801a      	strh	r2, [r3, #0]
	uint16_t topicLength = strlen(topicName);
 800a026:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800a02a:	4618      	mov	r0, r3
 800a02c:	f7f6 f906 	bl	800023c <strlen>
 800a030:	4603      	mov	r3, r0
 800a032:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
	uint8_t remainLength = (uint8_t)topicLength + 5;
 800a036:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	3305      	adds	r3, #5
 800a03e:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf

	uint8_t outputBuffer[100] = {0};
 800a042:	2300      	movs	r3, #0
 800a044:	64bb      	str	r3, [r7, #72]	; 0x48
 800a046:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a04a:	2260      	movs	r2, #96	; 0x60
 800a04c:	2100      	movs	r1, #0
 800a04e:	4618      	mov	r0, r3
 800a050:	f018 fc0e 	bl	8022870 <memset>

	MQTT_Subscribe_Packet subscribePacket;

	subscribePacket.subscribePacketByte = 0x82;
 800a054:	2382      	movs	r3, #130	; 0x82
 800a056:	733b      	strb	r3, [r7, #12]
	subscribePacket.remainLength = remainLength;
 800a058:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800a05c:	737b      	strb	r3, [r7, #13]
	subscribePacket.packetID = 1;
 800a05e:	2301      	movs	r3, #1
 800a060:	81fb      	strh	r3, [r7, #14]
	subscribePacket.topicLength = topicLength;
 800a062:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800a066:	823b      	strh	r3, [r7, #16]
	strcpy(subscribePacket.topic,topicName);
 800a068:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800a06c:	f107 030c 	add.w	r3, r7, #12
 800a070:	3306      	adds	r3, #6
 800a072:	4611      	mov	r1, r2
 800a074:	4618      	mov	r0, r3
 800a076:	f018 fe14 	bl	8022ca2 <strcpy>
	subscribePacket.Qos = 0;
 800a07a:	2300      	movs	r3, #0
 800a07c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	int32_t numberOfBytes = mqtt_encode_packet(outputBuffer, &subscribePacket, SUBSCRIBE_PACKET);
 800a080:	f107 010c 	add.w	r1, r7, #12
 800a084:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a088:	2201      	movs	r2, #1
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7fa f93a 	bl	8004304 <mqtt_encode_packet>
 800a090:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8

	LONGS_EQUAL(remainLength+2,numberOfBytes);
 800a094:	f00c faec 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 800a098:	4604      	mov	r4, r0
 800a09a:	6823      	ldr	r3, [r4, #0]
 800a09c:	3338      	adds	r3, #56	; 0x38
 800a09e:	681d      	ldr	r5, [r3, #0]
 800a0a0:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800a0a4:	1c9e      	adds	r6, r3, #2
 800a0a6:	f00c faf3 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	9302      	str	r3, [sp, #8]
 800a0ae:	2365      	movs	r3, #101	; 0x65
 800a0b0:	9301      	str	r3, [sp, #4]
 800a0b2:	4b67      	ldr	r3, [pc, #412]	; (800a250 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x240>)
 800a0b4:	9300      	str	r3, [sp, #0]
 800a0b6:	4b67      	ldr	r3, [pc, #412]	; (800a254 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x244>)
 800a0b8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a0bc:	4631      	mov	r1, r6
 800a0be:	4620      	mov	r0, r4
 800a0c0:	47a8      	blx	r5
	LONGS_EQUAL(0x82,outputBuffer[0]);
 800a0c2:	f00c fad5 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 800a0c6:	4604      	mov	r4, r0
 800a0c8:	6823      	ldr	r3, [r4, #0]
 800a0ca:	3338      	adds	r3, #56	; 0x38
 800a0cc:	681d      	ldr	r5, [r3, #0]
 800a0ce:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800a0d2:	461e      	mov	r6, r3
 800a0d4:	f00c fadc 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	9302      	str	r3, [sp, #8]
 800a0dc:	2366      	movs	r3, #102	; 0x66
 800a0de:	9301      	str	r3, [sp, #4]
 800a0e0:	4b5b      	ldr	r3, [pc, #364]	; (800a250 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x240>)
 800a0e2:	9300      	str	r3, [sp, #0]
 800a0e4:	4b5c      	ldr	r3, [pc, #368]	; (800a258 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x248>)
 800a0e6:	4632      	mov	r2, r6
 800a0e8:	2182      	movs	r1, #130	; 0x82
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	47a8      	blx	r5
	LONGS_EQUAL(remainLength,outputBuffer[1]);
 800a0ee:	f00c fabf 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 800a0f2:	4604      	mov	r4, r0
 800a0f4:	6823      	ldr	r3, [r4, #0]
 800a0f6:	3338      	adds	r3, #56	; 0x38
 800a0f8:	681d      	ldr	r5, [r3, #0]
 800a0fa:	f897 60bf 	ldrb.w	r6, [r7, #191]	; 0xbf
 800a0fe:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800a102:	4698      	mov	r8, r3
 800a104:	f00c fac4 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a108:	4603      	mov	r3, r0
 800a10a:	9302      	str	r3, [sp, #8]
 800a10c:	2367      	movs	r3, #103	; 0x67
 800a10e:	9301      	str	r3, [sp, #4]
 800a110:	4b4f      	ldr	r3, [pc, #316]	; (800a250 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x240>)
 800a112:	9300      	str	r3, [sp, #0]
 800a114:	4b51      	ldr	r3, [pc, #324]	; (800a25c <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x24c>)
 800a116:	4642      	mov	r2, r8
 800a118:	4631      	mov	r1, r6
 800a11a:	4620      	mov	r0, r4
 800a11c:	47a8      	blx	r5
	LONGS_EQUAL(0x0001,(uint16_t)((outputBuffer[2] << 8) + outputBuffer[3]));
 800a11e:	f00c faa7 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 800a122:	4604      	mov	r4, r0
 800a124:	6823      	ldr	r3, [r4, #0]
 800a126:	3338      	adds	r3, #56	; 0x38
 800a128:	681d      	ldr	r5, [r3, #0]
 800a12a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800a12e:	b29b      	uxth	r3, r3
 800a130:	021b      	lsls	r3, r3, #8
 800a132:	b29a      	uxth	r2, r3
 800a134:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800a138:	b29b      	uxth	r3, r3
 800a13a:	4413      	add	r3, r2
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	461e      	mov	r6, r3
 800a140:	f00c faa6 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a144:	4603      	mov	r3, r0
 800a146:	9302      	str	r3, [sp, #8]
 800a148:	2368      	movs	r3, #104	; 0x68
 800a14a:	9301      	str	r3, [sp, #4]
 800a14c:	4b40      	ldr	r3, [pc, #256]	; (800a250 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x240>)
 800a14e:	9300      	str	r3, [sp, #0]
 800a150:	4b43      	ldr	r3, [pc, #268]	; (800a260 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x250>)
 800a152:	4632      	mov	r2, r6
 800a154:	2101      	movs	r1, #1
 800a156:	4620      	mov	r0, r4
 800a158:	47a8      	blx	r5
	LONGS_EQUAL(topicLength,(uint16_t)((outputBuffer[4] << 8) + outputBuffer[5]));
 800a15a:	f00c fa89 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 800a15e:	4604      	mov	r4, r0
 800a160:	6823      	ldr	r3, [r4, #0]
 800a162:	3338      	adds	r3, #56	; 0x38
 800a164:	681d      	ldr	r5, [r3, #0]
 800a166:	f8b7 60c0 	ldrh.w	r6, [r7, #192]	; 0xc0
 800a16a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800a16e:	b29b      	uxth	r3, r3
 800a170:	021b      	lsls	r3, r3, #8
 800a172:	b29a      	uxth	r2, r3
 800a174:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a178:	b29b      	uxth	r3, r3
 800a17a:	4413      	add	r3, r2
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	4698      	mov	r8, r3
 800a180:	f00c fa86 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a184:	4603      	mov	r3, r0
 800a186:	9302      	str	r3, [sp, #8]
 800a188:	2369      	movs	r3, #105	; 0x69
 800a18a:	9301      	str	r3, [sp, #4]
 800a18c:	4b30      	ldr	r3, [pc, #192]	; (800a250 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x240>)
 800a18e:	9300      	str	r3, [sp, #0]
 800a190:	4b34      	ldr	r3, [pc, #208]	; (800a264 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x254>)
 800a192:	4642      	mov	r2, r8
 800a194:	4631      	mov	r1, r6
 800a196:	4620      	mov	r0, r4
 800a198:	47a8      	blx	r5

	int32_t index = 6;
 800a19a:	2306      	movs	r3, #6
 800a19c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	for(int16_t i=0;i<topicLength;i++)
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 800a1a6:	f9b7 20c2 	ldrsh.w	r2, [r7, #194]	; 0xc2
 800a1aa:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	da2d      	bge.n	800a20e <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x1fe>
	{
		BYTES_EQUAL(topicName[i],outputBuffer[index++]);
 800a1b2:	f00c fa5d 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 800a1b6:	4604      	mov	r4, r0
 800a1b8:	6823      	ldr	r3, [r4, #0]
 800a1ba:	3338      	adds	r3, #56	; 0x38
 800a1bc:	681d      	ldr	r5, [r3, #0]
 800a1be:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 800a1c2:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800a1c6:	4413      	add	r3, r2
 800a1c8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800a1cc:	461e      	mov	r6, r3
 800a1ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a1d2:	1c5a      	adds	r2, r3, #1
 800a1d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a1d8:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800a1dc:	4413      	add	r3, r2
 800a1de:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 800a1e2:	4698      	mov	r8, r3
 800a1e4:	f00c fa54 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	9302      	str	r3, [sp, #8]
 800a1ec:	236f      	movs	r3, #111	; 0x6f
 800a1ee:	9301      	str	r3, [sp, #4]
 800a1f0:	4b17      	ldr	r3, [pc, #92]	; (800a250 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x240>)
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	4b1c      	ldr	r3, [pc, #112]	; (800a268 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x258>)
 800a1f6:	4642      	mov	r2, r8
 800a1f8:	4631      	mov	r1, r6
 800a1fa:	4620      	mov	r0, r4
 800a1fc:	47a8      	blx	r5
	for(int16_t i=0;i<topicLength;i++)
 800a1fe:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 800a202:	b29b      	uxth	r3, r3
 800a204:	3301      	adds	r3, #1
 800a206:	b29b      	uxth	r3, r3
 800a208:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 800a20c:	e7cb      	b.n	800a1a6 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x196>
	}

	LONGS_EQUAL(0,outputBuffer[index]);
 800a20e:	f00c fa2f 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 800a212:	4604      	mov	r4, r0
 800a214:	6823      	ldr	r3, [r4, #0]
 800a216:	3338      	adds	r3, #56	; 0x38
 800a218:	681d      	ldr	r5, [r3, #0]
 800a21a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a21e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a222:	4413      	add	r3, r2
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	461e      	mov	r6, r3
 800a228:	f00c fa32 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a22c:	4603      	mov	r3, r0
 800a22e:	9302      	str	r3, [sp, #8]
 800a230:	2372      	movs	r3, #114	; 0x72
 800a232:	9301      	str	r3, [sp, #4]
 800a234:	4b06      	ldr	r3, [pc, #24]	; (800a250 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x240>)
 800a236:	9300      	str	r3, [sp, #0]
 800a238:	4b0c      	ldr	r3, [pc, #48]	; (800a26c <_ZN43TEST_MqttTestGroup_SubscribePacketTest_Test8testBodyEv+0x25c>)
 800a23a:	4632      	mov	r2, r6
 800a23c:	2100      	movs	r1, #0
 800a23e:	4620      	mov	r0, r4
 800a240:	47a8      	blx	r5


}
 800a242:	bf00      	nop
 800a244:	37c8      	adds	r7, #200	; 0xc8
 800a246:	46bd      	mov	sp, r7
 800a248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a24c:	08026838 	.word	0x08026838
 800a250:	080263b4 	.word	0x080263b4
 800a254:	08026680 	.word	0x08026680
 800a258:	080266b4 	.word	0x080266b4
 800a25c:	080266e0 	.word	0x080266e0
 800a260:	08026714 	.word	0x08026714
 800a264:	08026768 	.word	0x08026768
 800a268:	080267c0 	.word	0x080267c0
 800a26c:	0802680c 	.word	0x0802680c

0800a270 <_ZN41TEST_MqttTestGroup_PublishPacketTest_TestC1Ev>:

TEST(MqttTestGroup, PublishPacketTest)
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	4618      	mov	r0, r3
 800a27c:	f7ff fc6c 	bl	8009b58 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupC1Ev>
 800a280:	4a03      	ldr	r2, [pc, #12]	; (800a290 <_ZN41TEST_MqttTestGroup_PublishPacketTest_TestC1Ev+0x20>)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	601a      	str	r2, [r3, #0]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	4618      	mov	r0, r3
 800a28a:	3708      	adds	r7, #8
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	0802ae24 	.word	0x0802ae24

0800a294 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShell10createTestEv>:
 800a294:	b590      	push	{r4, r7, lr}
 800a296:	b083      	sub	sp, #12
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	2277      	movs	r2, #119	; 0x77
 800a29e:	4906      	ldr	r1, [pc, #24]	; (800a2b8 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShell10createTestEv+0x24>)
 800a2a0:	2004      	movs	r0, #4
 800a2a2:	f002 fa3f 	bl	800c724 <_ZnwjPKci>
 800a2a6:	4604      	mov	r4, r0
 800a2a8:	4620      	mov	r0, r4
 800a2aa:	f7ff ffe1 	bl	800a270 <_ZN41TEST_MqttTestGroup_PublishPacketTest_TestC1Ev>
 800a2ae:	4623      	mov	r3, r4
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd90      	pop	{r4, r7, pc}
 800a2b8:	080263b4 	.word	0x080263b4

0800a2bc <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellC1Ev>:
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b082      	sub	sp, #8
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f00a fe1a 	bl	8014f00 <_ZN10UtestShellC1Ev>
 800a2cc:	4a03      	ldr	r2, [pc, #12]	; (800a2dc <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellC1Ev+0x20>)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	601a      	str	r2, [r3, #0]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3708      	adds	r7, #8
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}
 800a2dc:	0802ad78 	.word	0x0802ad78

0800a2e0 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv>:
{
 800a2e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2e4:	b0d2      	sub	sp, #328	; 0x148
 800a2e6:	af04      	add	r7, sp, #16
 800a2e8:	1d3b      	adds	r3, r7, #4
 800a2ea:	6018      	str	r0, [r3, #0]
	char topicName[] = "Testtopic";
 800a2ec:	4a9f      	ldr	r2, [pc, #636]	; (800a56c <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x28c>)
 800a2ee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a2f2:	ca07      	ldmia	r2, {r0, r1, r2}
 800a2f4:	c303      	stmia	r3!, {r0, r1}
 800a2f6:	801a      	strh	r2, [r3, #0]
	char message[] = "hello world!";
 800a2f8:	4b9d      	ldr	r3, [pc, #628]	; (800a570 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x290>)
 800a2fa:	f507 7484 	add.w	r4, r7, #264	; 0x108
 800a2fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a300:	c407      	stmia	r4!, {r0, r1, r2}
 800a302:	7023      	strb	r3, [r4, #0]

	uint16_t topicLength = strlen(topicName);
 800a304:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a308:	4618      	mov	r0, r3
 800a30a:	f7f5 ff97 	bl	800023c <strlen>
 800a30e:	4603      	mov	r3, r0
 800a310:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
	uint16_t messageLength = strlen(message);
 800a314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a318:	4618      	mov	r0, r3
 800a31a:	f7f5 ff8f 	bl	800023c <strlen>
 800a31e:	4603      	mov	r3, r0
 800a320:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
	uint8_t remainLength = (uint8_t)topicLength+ (uint8_t)messageLength + 2;
 800a324:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 800a328:	b2da      	uxtb	r2, r3
 800a32a:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 800a32e:	b2db      	uxtb	r3, r3
 800a330:	4413      	add	r3, r2
 800a332:	b2db      	uxtb	r3, r3
 800a334:	3302      	adds	r3, #2
 800a336:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b

	uint8_t outputBuffer[100] = {0};
 800a33a:	2300      	movs	r3, #0
 800a33c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a340:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800a344:	2260      	movs	r2, #96	; 0x60
 800a346:	2100      	movs	r1, #0
 800a348:	4618      	mov	r0, r3
 800a34a:	f018 fa91 	bl	8022870 <memset>

	MQTT_Publish_Packet publishPacket = {0};
 800a34e:	f107 0308 	add.w	r3, r7, #8
 800a352:	4618      	mov	r0, r3
 800a354:	239a      	movs	r3, #154	; 0x9a
 800a356:	461a      	mov	r2, r3
 800a358:	2100      	movs	r1, #0
 800a35a:	f018 fa89 	bl	8022870 <memset>

	publishPacket.publishPacketByte = 0x30;
 800a35e:	f107 0308 	add.w	r3, r7, #8
 800a362:	2230      	movs	r2, #48	; 0x30
 800a364:	701a      	strb	r2, [r3, #0]
	publishPacket.remainLength = remainLength;
 800a366:	f107 0308 	add.w	r3, r7, #8
 800a36a:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800a36e:	705a      	strb	r2, [r3, #1]
	publishPacket.topicLength = topicLength;
 800a370:	f107 0308 	add.w	r3, r7, #8
 800a374:	f8b7 212e 	ldrh.w	r2, [r7, #302]	; 0x12e
 800a378:	805a      	strh	r2, [r3, #2]
	strcpy(publishPacket.topic,topicName);
 800a37a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800a37e:	f107 0308 	add.w	r3, r7, #8
 800a382:	3304      	adds	r3, #4
 800a384:	4611      	mov	r1, r2
 800a386:	4618      	mov	r0, r3
 800a388:	f018 fc8b 	bl	8022ca2 <strcpy>
	strcpy(publishPacket.message,message);
 800a38c:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800a390:	f107 0308 	add.w	r3, r7, #8
 800a394:	3336      	adds	r3, #54	; 0x36
 800a396:	4611      	mov	r1, r2
 800a398:	4618      	mov	r0, r3
 800a39a:	f018 fc82 	bl	8022ca2 <strcpy>

	int32_t numberOfBytes = mqtt_encode_packet(outputBuffer, &publishPacket, PUBLISH_PACKET);
 800a39e:	f107 0108 	add.w	r1, r7, #8
 800a3a2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a3a6:	2202      	movs	r2, #2
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7f9 ffab 	bl	8004304 <mqtt_encode_packet>
 800a3ae:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124

	LONGS_EQUAL(remainLength+2,numberOfBytes);
 800a3b2:	f00c f95d 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 800a3b6:	4604      	mov	r4, r0
 800a3b8:	6823      	ldr	r3, [r4, #0]
 800a3ba:	3338      	adds	r3, #56	; 0x38
 800a3bc:	681d      	ldr	r5, [r3, #0]
 800a3be:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800a3c2:	1c9e      	adds	r6, r3, #2
 800a3c4:	f00c f964 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	9302      	str	r3, [sp, #8]
 800a3cc:	238c      	movs	r3, #140	; 0x8c
 800a3ce:	9301      	str	r3, [sp, #4]
 800a3d0:	4b68      	ldr	r3, [pc, #416]	; (800a574 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x294>)
 800a3d2:	9300      	str	r3, [sp, #0]
 800a3d4:	4b68      	ldr	r3, [pc, #416]	; (800a578 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x298>)
 800a3d6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800a3da:	4631      	mov	r1, r6
 800a3dc:	4620      	mov	r0, r4
 800a3de:	47a8      	blx	r5
	LONGS_EQUAL(0x30,outputBuffer[0]);
 800a3e0:	f00c f946 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 800a3e4:	4604      	mov	r4, r0
 800a3e6:	6823      	ldr	r3, [r4, #0]
 800a3e8:	3338      	adds	r3, #56	; 0x38
 800a3ea:	681d      	ldr	r5, [r3, #0]
 800a3ec:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 800a3f0:	461e      	mov	r6, r3
 800a3f2:	f00c f94d 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	9302      	str	r3, [sp, #8]
 800a3fa:	238d      	movs	r3, #141	; 0x8d
 800a3fc:	9301      	str	r3, [sp, #4]
 800a3fe:	4b5d      	ldr	r3, [pc, #372]	; (800a574 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x294>)
 800a400:	9300      	str	r3, [sp, #0]
 800a402:	4b5e      	ldr	r3, [pc, #376]	; (800a57c <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x29c>)
 800a404:	4632      	mov	r2, r6
 800a406:	2130      	movs	r1, #48	; 0x30
 800a408:	4620      	mov	r0, r4
 800a40a:	47a8      	blx	r5
	LONGS_EQUAL(remainLength,outputBuffer[1]);
 800a40c:	f00c f930 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 800a410:	4604      	mov	r4, r0
 800a412:	6823      	ldr	r3, [r4, #0]
 800a414:	3338      	adds	r3, #56	; 0x38
 800a416:	681d      	ldr	r5, [r3, #0]
 800a418:	f897 612b 	ldrb.w	r6, [r7, #299]	; 0x12b
 800a41c:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 800a420:	4698      	mov	r8, r3
 800a422:	f00c f935 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a426:	4603      	mov	r3, r0
 800a428:	9302      	str	r3, [sp, #8]
 800a42a:	238e      	movs	r3, #142	; 0x8e
 800a42c:	9301      	str	r3, [sp, #4]
 800a42e:	4b51      	ldr	r3, [pc, #324]	; (800a574 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x294>)
 800a430:	9300      	str	r3, [sp, #0]
 800a432:	4b53      	ldr	r3, [pc, #332]	; (800a580 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x2a0>)
 800a434:	4642      	mov	r2, r8
 800a436:	4631      	mov	r1, r6
 800a438:	4620      	mov	r0, r4
 800a43a:	47a8      	blx	r5
	LONGS_EQUAL(topicLength,(uint16_t)((outputBuffer[2] << 8) + outputBuffer[3]));
 800a43c:	f00c f918 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 800a440:	4604      	mov	r4, r0
 800a442:	6823      	ldr	r3, [r4, #0]
 800a444:	3338      	adds	r3, #56	; 0x38
 800a446:	681d      	ldr	r5, [r3, #0]
 800a448:	f8b7 612e 	ldrh.w	r6, [r7, #302]	; 0x12e
 800a44c:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 800a450:	b29b      	uxth	r3, r3
 800a452:	021b      	lsls	r3, r3, #8
 800a454:	b29a      	uxth	r2, r3
 800a456:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	4413      	add	r3, r2
 800a45e:	b29b      	uxth	r3, r3
 800a460:	4698      	mov	r8, r3
 800a462:	f00c f915 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a466:	4603      	mov	r3, r0
 800a468:	9302      	str	r3, [sp, #8]
 800a46a:	238f      	movs	r3, #143	; 0x8f
 800a46c:	9301      	str	r3, [sp, #4]
 800a46e:	4b41      	ldr	r3, [pc, #260]	; (800a574 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x294>)
 800a470:	9300      	str	r3, [sp, #0]
 800a472:	4b44      	ldr	r3, [pc, #272]	; (800a584 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x2a4>)
 800a474:	4642      	mov	r2, r8
 800a476:	4631      	mov	r1, r6
 800a478:	4620      	mov	r0, r4
 800a47a:	47a8      	blx	r5

	int32_t index = 4;
 800a47c:	2304      	movs	r3, #4
 800a47e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

	for(int16_t i=0;i<topicLength;i++)
 800a482:	2300      	movs	r3, #0
 800a484:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
 800a488:	f9b7 2132 	ldrsh.w	r2, [r7, #306]	; 0x132
 800a48c:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 800a490:	429a      	cmp	r2, r3
 800a492:	da2d      	bge.n	800a4f0 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x210>
	{
		BYTES_EQUAL(topicName[i],outputBuffer[index++]);
 800a494:	f00c f8ec 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 800a498:	4604      	mov	r4, r0
 800a49a:	6823      	ldr	r3, [r4, #0]
 800a49c:	3338      	adds	r3, #56	; 0x38
 800a49e:	681d      	ldr	r5, [r3, #0]
 800a4a0:	f9b7 3132 	ldrsh.w	r3, [r7, #306]	; 0x132
 800a4a4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a4a8:	4413      	add	r3, r2
 800a4aa:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a4ae:	461e      	mov	r6, r3
 800a4b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a4b4:	1c5a      	adds	r2, r3, #1
 800a4b6:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800a4ba:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a4be:	4413      	add	r3, r2
 800a4c0:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 800a4c4:	4698      	mov	r8, r3
 800a4c6:	f00c f8e3 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	9302      	str	r3, [sp, #8]
 800a4ce:	2395      	movs	r3, #149	; 0x95
 800a4d0:	9301      	str	r3, [sp, #4]
 800a4d2:	4b28      	ldr	r3, [pc, #160]	; (800a574 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x294>)
 800a4d4:	9300      	str	r3, [sp, #0]
 800a4d6:	4b2c      	ldr	r3, [pc, #176]	; (800a588 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x2a8>)
 800a4d8:	4642      	mov	r2, r8
 800a4da:	4631      	mov	r1, r6
 800a4dc:	4620      	mov	r0, r4
 800a4de:	47a8      	blx	r5
	for(int16_t i=0;i<topicLength;i++)
 800a4e0:	f9b7 3132 	ldrsh.w	r3, [r7, #306]	; 0x132
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
 800a4ee:	e7cb      	b.n	800a488 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x1a8>
	}

	for(int16_t i=0;i<messageLength;i++)
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
 800a4f6:	f9b7 2130 	ldrsh.w	r2, [r7, #304]	; 0x130
 800a4fa:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 800a4fe:	429a      	cmp	r2, r3
 800a500:	da2d      	bge.n	800a55e <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x27e>
	{
		BYTES_EQUAL(message[i],outputBuffer[index++]);
 800a502:	f00c f8b5 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 800a506:	4604      	mov	r4, r0
 800a508:	6823      	ldr	r3, [r4, #0]
 800a50a:	3338      	adds	r3, #56	; 0x38
 800a50c:	681d      	ldr	r5, [r3, #0]
 800a50e:	f9b7 3130 	ldrsh.w	r3, [r7, #304]	; 0x130
 800a512:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a516:	4413      	add	r3, r2
 800a518:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800a51c:	461e      	mov	r6, r3
 800a51e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a522:	1c5a      	adds	r2, r3, #1
 800a524:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800a528:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a52c:	4413      	add	r3, r2
 800a52e:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 800a532:	4698      	mov	r8, r3
 800a534:	f00c f8ac 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a538:	4603      	mov	r3, r0
 800a53a:	9302      	str	r3, [sp, #8]
 800a53c:	239a      	movs	r3, #154	; 0x9a
 800a53e:	9301      	str	r3, [sp, #4]
 800a540:	4b0c      	ldr	r3, [pc, #48]	; (800a574 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x294>)
 800a542:	9300      	str	r3, [sp, #0]
 800a544:	4b11      	ldr	r3, [pc, #68]	; (800a58c <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x2ac>)
 800a546:	4642      	mov	r2, r8
 800a548:	4631      	mov	r1, r6
 800a54a:	4620      	mov	r0, r4
 800a54c:	47a8      	blx	r5
	for(int16_t i=0;i<messageLength;i++)
 800a54e:	f9b7 3130 	ldrsh.w	r3, [r7, #304]	; 0x130
 800a552:	b29b      	uxth	r3, r3
 800a554:	3301      	adds	r3, #1
 800a556:	b29b      	uxth	r3, r3
 800a558:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
 800a55c:	e7cb      	b.n	800a4f6 <_ZN41TEST_MqttTestGroup_PublishPacketTest_Test8testBodyEv+0x216>
	}


}
 800a55e:	bf00      	nop
 800a560:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800a564:	46bd      	mov	sp, r7
 800a566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a56a:	bf00      	nop
 800a56c:	08026838 	.word	0x08026838
 800a570:	08026910 	.word	0x08026910
 800a574:	080263b4 	.word	0x080263b4
 800a578:	08026680 	.word	0x08026680
 800a57c:	08026844 	.word	0x08026844
 800a580:	080266e0 	.word	0x080266e0
 800a584:	08026870 	.word	0x08026870
 800a588:	080267c0 	.word	0x080267c0
 800a58c:	080268c8 	.word	0x080268c8

0800a590 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_TestC1Ev>:

TEST(MqttTestGroup, MqttConnectBrokerTest)
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7ff fadc 	bl	8009b58 <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupC1Ev>
 800a5a0:	4a03      	ldr	r2, [pc, #12]	; (800a5b0 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_TestC1Ev+0x20>)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	601a      	str	r2, [r3, #0]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3708      	adds	r7, #8
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	0802ad58 	.word	0x0802ad58

0800a5b4 <_ZN50TEST_MqttTestGroup_MqttConnectBrokerTest_TestShell10createTestEv>:
 800a5b4:	b590      	push	{r4, r7, lr}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	22a0      	movs	r2, #160	; 0xa0
 800a5be:	4906      	ldr	r1, [pc, #24]	; (800a5d8 <_ZN50TEST_MqttTestGroup_MqttConnectBrokerTest_TestShell10createTestEv+0x24>)
 800a5c0:	2004      	movs	r0, #4
 800a5c2:	f002 f8af 	bl	800c724 <_ZnwjPKci>
 800a5c6:	4604      	mov	r4, r0
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	f7ff ffe1 	bl	800a590 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_TestC1Ev>
 800a5ce:	4623      	mov	r3, r4
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd90      	pop	{r4, r7, pc}
 800a5d8:	080263b4 	.word	0x080263b4

0800a5dc <_ZN50TEST_MqttTestGroup_MqttConnectBrokerTest_TestShellC1Ev>:
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f00a fc8a 	bl	8014f00 <_ZN10UtestShellC1Ev>
 800a5ec:	4a03      	ldr	r2, [pc, #12]	; (800a5fc <_ZN50TEST_MqttTestGroup_MqttConnectBrokerTest_TestShellC1Ev+0x20>)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	601a      	str	r2, [r3, #0]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3708      	adds	r7, #8
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}
 800a5fc:	0802acac 	.word	0x0802acac

0800a600 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv>:
{
 800a600:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a602:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800a606:	af04      	add	r7, sp, #16
 800a608:	1d3b      	adds	r3, r7, #4
 800a60a:	6018      	str	r0, [r3, #0]
	const char ip[] = "broker.mqttdashboard.com";
 800a60c:	4bc6      	ldr	r3, [pc, #792]	; (800a928 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x328>)
 800a60e:	f507 74d6 	add.w	r4, r7, #428	; 0x1ac
 800a612:	461d      	mov	r5, r3
 800a614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a618:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a61c:	c403      	stmia	r4!, {r0, r1}
 800a61e:	7022      	strb	r2, [r4, #0]
	const char port[] = "1883";
 800a620:	4ac2      	ldr	r2, [pc, #776]	; (800a92c <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x32c>)
 800a622:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800a626:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a62a:	6018      	str	r0, [r3, #0]
 800a62c:	3304      	adds	r3, #4
 800a62e:	7019      	strb	r1, [r3, #0]
	const char clientID[] = "Topuz";
 800a630:	4abf      	ldr	r2, [pc, #764]	; (800a930 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x330>)
 800a632:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 800a636:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a63a:	6018      	str	r0, [r3, #0]
 800a63c:	3304      	adds	r3, #4
 800a63e:	8019      	strh	r1, [r3, #0]

	const char esp_response[4][50] = {
 800a640:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800a644:	4abb      	ldr	r2, [pc, #748]	; (800a934 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x334>)
 800a646:	4618      	mov	r0, r3
 800a648:	4611      	mov	r1, r2
 800a64a:	23c8      	movs	r3, #200	; 0xc8
 800a64c:	461a      	mov	r2, r3
 800a64e:	f018 f901 	bl	8022854 <memcpy>
			AT_RESPONSE_OK,
			AT_RESPONSE_GREATER_THAN,
			AT_RESPONSE_SEND_OK
	};

	const char esp_commands[3][60] = {
 800a652:	f107 0320 	add.w	r3, r7, #32
 800a656:	4ab8      	ldr	r2, [pc, #736]	; (800a938 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x338>)
 800a658:	4618      	mov	r0, r3
 800a65a:	4611      	mov	r1, r2
 800a65c:	23b4      	movs	r3, #180	; 0xb4
 800a65e:	461a      	mov	r2, r3
 800a660:	f018 f8f8 	bl	8022854 <memcpy>
			AT_CIPMUX_SINGLE,
			"AT+CIPSTART=\"TCP\",\"broker.mqttdashboard.com\",1883\r\n",
			"AT+CIPSEND=19\r\n" // 19 represents the number of bytes to be sent.
	};

	for(int i=0;i<3;i++)
 800a664:	2300      	movs	r3, #0
 800a666:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800a66a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800a66e:	2b02      	cmp	r3, #2
 800a670:	dc74      	bgt.n	800a75c <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x15c>
	{
		mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t*)esp_commands[i], strlen(esp_commands[i])).withIntParameter("size", strlen(esp_commands[i]));
 800a672:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800a676:	49b1      	ldr	r1, [pc, #708]	; (800a93c <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x33c>)
 800a678:	4618      	mov	r0, r3
 800a67a:	f004 fc16 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800a67e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800a682:	2100      	movs	r1, #0
 800a684:	4618      	mov	r0, r3
 800a686:	f002 fce9 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800a68a:	4604      	mov	r4, r0
 800a68c:	6823      	ldr	r3, [r4, #0]
 800a68e:	330c      	adds	r3, #12
 800a690:	681d      	ldr	r5, [r3, #0]
 800a692:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800a696:	49aa      	ldr	r1, [pc, #680]	; (800a940 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x340>)
 800a698:	4618      	mov	r0, r3
 800a69a:	f004 fc06 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800a69e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	4620      	mov	r0, r4
 800a6a6:	47a8      	blx	r5
 800a6a8:	4605      	mov	r5, r0
 800a6aa:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800a6ae:	49a5      	ldr	r1, [pc, #660]	; (800a944 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x344>)
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f004 fbfa 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800a6b6:	f107 0120 	add.w	r1, r7, #32
 800a6ba:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 800a6be:	4613      	mov	r3, r2
 800a6c0:	011b      	lsls	r3, r3, #4
 800a6c2:	1a9b      	subs	r3, r3, r2
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	18cc      	adds	r4, r1, r3
 800a6c8:	f107 0120 	add.w	r1, r7, #32
 800a6cc:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 800a6d0:	4613      	mov	r3, r2
 800a6d2:	011b      	lsls	r3, r3, #4
 800a6d4:	1a9b      	subs	r3, r3, r2
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	440b      	add	r3, r1
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f7f5 fdae 	bl	800023c <strlen>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	f507 71ec 	add.w	r1, r7, #472	; 0x1d8
 800a6e6:	4622      	mov	r2, r4
 800a6e8:	4628      	mov	r0, r5
 800a6ea:	f7fa f933 	bl	8004954 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 800a6ee:	4604      	mov	r4, r0
 800a6f0:	6823      	ldr	r3, [r4, #0]
 800a6f2:	332c      	adds	r3, #44	; 0x2c
 800a6f4:	681d      	ldr	r5, [r3, #0]
 800a6f6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a6fa:	4993      	ldr	r1, [pc, #588]	; (800a948 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x348>)
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f004 fbd4 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800a702:	f107 0120 	add.w	r1, r7, #32
 800a706:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 800a70a:	4613      	mov	r3, r2
 800a70c:	011b      	lsls	r3, r3, #4
 800a70e:	1a9b      	subs	r3, r3, r2
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	440b      	add	r3, r1
 800a714:	4618      	mov	r0, r3
 800a716:	f7f5 fd91 	bl	800023c <strlen>
 800a71a:	4603      	mov	r3, r0
 800a71c:	461a      	mov	r2, r3
 800a71e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a722:	4619      	mov	r1, r3
 800a724:	4620      	mov	r0, r4
 800a726:	47a8      	blx	r5
 800a728:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800a72c:	4618      	mov	r0, r3
 800a72e:	f004 ff74 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800a732:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800a736:	4618      	mov	r0, r3
 800a738:	f004 ff6f 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800a73c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800a740:	4618      	mov	r0, r3
 800a742:	f004 ff6a 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800a746:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800a74a:	4618      	mov	r0, r3
 800a74c:	f004 ff65 	bl	800f61a <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 800a750:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800a754:	3301      	adds	r3, #1
 800a756:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800a75a:	e786      	b.n	800a66a <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x6a>
	}
	// mocking connect packet
	uint8_t data_buffer[] = {0x10,0x11,0x00,0x04,'M','Q','T','T',0x04,0x02,0x00,0x3C,0x00,0x05,'T','o','p','u','z'};
 800a75c:	f107 030c 	add.w	r3, r7, #12
 800a760:	4a7a      	ldr	r2, [pc, #488]	; (800a94c <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x34c>)
 800a762:	461c      	mov	r4, r3
 800a764:	4615      	mov	r5, r2
 800a766:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a768:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a76a:	682b      	ldr	r3, [r5, #0]
 800a76c:	461a      	mov	r2, r3
 800a76e:	8022      	strh	r2, [r4, #0]
 800a770:	3402      	adds	r4, #2
 800a772:	0c1b      	lsrs	r3, r3, #16
 800a774:	7023      	strb	r3, [r4, #0]

	mock().expectOneCall("UART_Transmit_Fake").withParameter("data",(uint8_t*)data_buffer,19).withIntParameter("size", 19);
 800a776:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800a77a:	4970      	ldr	r1, [pc, #448]	; (800a93c <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x33c>)
 800a77c:	4618      	mov	r0, r3
 800a77e:	f004 fb94 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800a782:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800a786:	2100      	movs	r1, #0
 800a788:	4618      	mov	r0, r3
 800a78a:	f002 fc67 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800a78e:	4604      	mov	r4, r0
 800a790:	6823      	ldr	r3, [r4, #0]
 800a792:	330c      	adds	r3, #12
 800a794:	681d      	ldr	r5, [r3, #0]
 800a796:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800a79a:	4969      	ldr	r1, [pc, #420]	; (800a940 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x340>)
 800a79c:	4618      	mov	r0, r3
 800a79e:	f004 fb84 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800a7a2:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	47a8      	blx	r5
 800a7ac:	4604      	mov	r4, r0
 800a7ae:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800a7b2:	4964      	ldr	r1, [pc, #400]	; (800a944 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x344>)
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f004 fb78 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800a7ba:	f107 020c 	add.w	r2, r7, #12
 800a7be:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 800a7c2:	2313      	movs	r3, #19
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	f7fa f8c5 	bl	8004954 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPKhj>
 800a7ca:	4604      	mov	r4, r0
 800a7cc:	6823      	ldr	r3, [r4, #0]
 800a7ce:	332c      	adds	r3, #44	; 0x2c
 800a7d0:	681d      	ldr	r5, [r3, #0]
 800a7d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a7d6:	495c      	ldr	r1, [pc, #368]	; (800a948 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x348>)
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f004 fb66 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800a7de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a7e2:	2213      	movs	r2, #19
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	47a8      	blx	r5
 800a7ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f004 ff13 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800a7f4:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f004 ff0e 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800a7fe:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800a802:	4618      	mov	r0, r3
 800a804:	f004 ff09 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800a808:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800a80c:	4618      	mov	r0, r3
 800a80e:	f004 ff04 	bl	800f61a <_ZN12SimpleStringD1Ev>


	Status status;
	int i = 0;
 800a812:	2300      	movs	r3, #0
 800a814:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while(1)
	{

		status = mqtt_connect_broker(ip, port, clientID);
 800a818:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 800a81c:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 800a820:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 800a824:	4618      	mov	r0, r3
 800a826:	f7f9 fefd 	bl	8004624 <mqtt_connect_broker>
 800a82a:	4603      	mov	r3, r0
 800a82c:	f887 321b 	strb.w	r3, [r7, #539]	; 0x21b

		if(status != IDLE)
 800a830:	f897 321b 	ldrb.w	r3, [r7, #539]	; 0x21b
 800a834:	2b04      	cmp	r3, #4
 800a836:	d15c      	bne.n	800a8f2 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x2f2>
		{
			break;
		}
		if(i<4)
 800a838:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800a83c:	2b03      	cmp	r3, #3
 800a83e:	dceb      	bgt.n	800a818 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x218>
		{
			for(int j=0;j<(int)strlen(esp_response[i]);j++)
 800a840:	2300      	movs	r3, #0
 800a842:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800a846:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800a84a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800a84e:	2132      	movs	r1, #50	; 0x32
 800a850:	fb01 f303 	mul.w	r3, r1, r3
 800a854:	4413      	add	r3, r2
 800a856:	4618      	mov	r0, r3
 800a858:	f7f5 fcf0 	bl	800023c <strlen>
 800a85c:	4603      	mov	r3, r0
 800a85e:	461a      	mov	r2, r3
 800a860:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800a864:	4293      	cmp	r3, r2
 800a866:	da3e      	bge.n	800a8e6 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x2e6>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)esp_response[i][j]);
 800a868:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800a86c:	4933      	ldr	r1, [pc, #204]	; (800a93c <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x33c>)
 800a86e:	4618      	mov	r0, r3
 800a870:	f004 fb1b 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800a874:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800a878:	2100      	movs	r1, #0
 800a87a:	4618      	mov	r0, r3
 800a87c:	f002 fbee 	bl	800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800a880:	4604      	mov	r4, r0
 800a882:	6823      	ldr	r3, [r4, #0]
 800a884:	330c      	adds	r3, #12
 800a886:	681d      	ldr	r5, [r3, #0]
 800a888:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800a88c:	4930      	ldr	r1, [pc, #192]	; (800a950 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x350>)
 800a88e:	4618      	mov	r0, r3
 800a890:	f004 fb0b 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800a894:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800a898:	4619      	mov	r1, r3
 800a89a:	4620      	mov	r0, r4
 800a89c:	47a8      	blx	r5
 800a89e:	4603      	mov	r3, r0
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	3264      	adds	r2, #100	; 0x64
 800a8a4:	6812      	ldr	r2, [r2, #0]
 800a8a6:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 800a8aa:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 800a8ae:	2432      	movs	r4, #50	; 0x32
 800a8b0:	fb04 f101 	mul.w	r1, r4, r1
 800a8b4:	4408      	add	r0, r1
 800a8b6:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 800a8ba:	4401      	add	r1, r0
 800a8bc:	7809      	ldrb	r1, [r1, #0]
 800a8be:	4618      	mov	r0, r3
 800a8c0:	4790      	blx	r2
 800a8c2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f004 fea7 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800a8cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f004 fea2 	bl	800f61a <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 800a8d6:	f7f9 fa0f 	bl	8003cf8 <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(esp_response[i]);j++)
 800a8da:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800a8de:	3301      	adds	r3, #1
 800a8e0:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800a8e4:	e7af      	b.n	800a846 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x246>
			}
			i++;
 800a8e6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		}
	}
 800a8f0:	e792      	b.n	800a818 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x218>
			break;
 800a8f2:	bf00      	nop


	LONGS_EQUAL(STATUS_OK,status);
 800a8f4:	f00b febc 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 800a8f8:	4604      	mov	r4, r0
 800a8fa:	6823      	ldr	r3, [r4, #0]
 800a8fc:	3338      	adds	r3, #56	; 0x38
 800a8fe:	681d      	ldr	r5, [r3, #0]
 800a900:	f897 621b 	ldrb.w	r6, [r7, #539]	; 0x21b
 800a904:	f00b fec4 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a908:	4603      	mov	r3, r0
 800a90a:	9302      	str	r3, [sp, #8]
 800a90c:	23d4      	movs	r3, #212	; 0xd4
 800a90e:	9301      	str	r3, [sp, #4]
 800a910:	4b10      	ldr	r3, [pc, #64]	; (800a954 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x354>)
 800a912:	9300      	str	r3, [sp, #0]
 800a914:	4b10      	ldr	r3, [pc, #64]	; (800a958 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_Test8testBodyEv+0x358>)
 800a916:	4632      	mov	r2, r6
 800a918:	2102      	movs	r1, #2
 800a91a:	4620      	mov	r0, r4
 800a91c:	47a8      	blx	r5


}
 800a91e:	bf00      	nop
 800a920:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 800a924:	46bd      	mov	sp, r7
 800a926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a928:	08026980 	.word	0x08026980
 800a92c:	0802699c 	.word	0x0802699c
 800a930:	08026404 	.word	0x08026404
 800a934:	080269a4 	.word	0x080269a4
 800a938:	08026a6c 	.word	0x08026a6c
 800a93c:	080263b0 	.word	0x080263b0
 800a940:	08026920 	.word	0x08026920
 800a944:	08026934 	.word	0x08026934
 800a948:	0802693c 	.word	0x0802693c
 800a94c:	08026b20 	.word	0x08026b20
 800a950:	08026944 	.word	0x08026944
 800a954:	080263b4 	.word	0x080263b4
 800a958:	08026958 	.word	0x08026958

0800a95c <_ZN50TEST_MqttTestGroup_MqttConnectBrokerTest_TestShellD1Ev>:
TEST(MqttTestGroup, MqttConnectBrokerTest)
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b082      	sub	sp, #8
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	4a05      	ldr	r2, [pc, #20]	; (800a97c <_ZN50TEST_MqttTestGroup_MqttConnectBrokerTest_TestShellD1Ev+0x20>)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	601a      	str	r2, [r3, #0]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	4618      	mov	r0, r3
 800a96e:	f00a fb1b 	bl	8014fa8 <_ZN10UtestShellD1Ev>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	4618      	mov	r0, r3
 800a976:	3708      	adds	r7, #8
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	0802acac 	.word	0x0802acac

0800a980 <_ZN50TEST_MqttTestGroup_MqttConnectBrokerTest_TestShellD0Ev>:
 800a980:	b580      	push	{r7, lr}
 800a982:	b082      	sub	sp, #8
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f7ff ffe7 	bl	800a95c <_ZN50TEST_MqttTestGroup_MqttConnectBrokerTest_TestShellD1Ev>
 800a98e:	211c      	movs	r1, #28
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f001 fedb 	bl	800c74c <_ZdlPvj>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	4618      	mov	r0, r3
 800a99a:	3708      	adds	r7, #8
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_TestD1Ev>:
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b082      	sub	sp, #8
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	4a05      	ldr	r2, [pc, #20]	; (800a9c0 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_TestD1Ev+0x20>)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	601a      	str	r2, [r3, #0]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7ff f8e3 	bl	8009b7c <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3708      	adds	r7, #8
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}
 800a9c0:	0802ad58 	.word	0x0802ad58

0800a9c4 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_TestD0Ev>:
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b082      	sub	sp, #8
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f7ff ffe7 	bl	800a9a0 <_ZN45TEST_MqttTestGroup_MqttConnectBrokerTest_TestD1Ev>
 800a9d2:	2104      	movs	r1, #4
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f001 feb9 	bl	800c74c <_ZdlPvj>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3708      	adds	r7, #8
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellD1Ev>:
TEST(MqttTestGroup, PublishPacketTest)
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b082      	sub	sp, #8
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	4a05      	ldr	r2, [pc, #20]	; (800aa04 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellD1Ev+0x20>)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	601a      	str	r2, [r3, #0]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f00a fad7 	bl	8014fa8 <_ZN10UtestShellD1Ev>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3708      	adds	r7, #8
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	0802ad78 	.word	0x0802ad78

0800aa08 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellD0Ev>:
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b082      	sub	sp, #8
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f7ff ffe7 	bl	800a9e4 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellD1Ev>
 800aa16:	211c      	movs	r1, #28
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f001 fe97 	bl	800c74c <_ZdlPvj>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	4618      	mov	r0, r3
 800aa22:	3708      	adds	r7, #8
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}

0800aa28 <_ZN41TEST_MqttTestGroup_PublishPacketTest_TestD1Ev>:
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	4a05      	ldr	r2, [pc, #20]	; (800aa48 <_ZN41TEST_MqttTestGroup_PublishPacketTest_TestD1Ev+0x20>)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	601a      	str	r2, [r3, #0]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f7ff f89f 	bl	8009b7c <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	4618      	mov	r0, r3
 800aa42:	3708      	adds	r7, #8
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}
 800aa48:	0802ae24 	.word	0x0802ae24

0800aa4c <_ZN41TEST_MqttTestGroup_PublishPacketTest_TestD0Ev>:
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b082      	sub	sp, #8
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f7ff ffe7 	bl	800aa28 <_ZN41TEST_MqttTestGroup_PublishPacketTest_TestD1Ev>
 800aa5a:	2104      	movs	r1, #4
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f001 fe75 	bl	800c74c <_ZdlPvj>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	4618      	mov	r0, r3
 800aa66:	3708      	adds	r7, #8
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellD1Ev>:
TEST(MqttTestGroup, SubscribePacketTest)
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	4a05      	ldr	r2, [pc, #20]	; (800aa8c <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellD1Ev+0x20>)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	601a      	str	r2, [r3, #0]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f00a fa93 	bl	8014fa8 <_ZN10UtestShellD1Ev>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4618      	mov	r0, r3
 800aa86:	3708      	adds	r7, #8
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}
 800aa8c:	0802ae44 	.word	0x0802ae44

0800aa90 <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellD0Ev>:
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f7ff ffe7 	bl	800aa6c <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellD1Ev>
 800aa9e:	211c      	movs	r1, #28
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f001 fe53 	bl	800c74c <_ZdlPvj>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3708      	adds	r7, #8
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_TestD1Ev>:
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	4a05      	ldr	r2, [pc, #20]	; (800aad0 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_TestD1Ev+0x20>)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	601a      	str	r2, [r3, #0]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	4618      	mov	r0, r3
 800aac2:	f7ff f85b 	bl	8009b7c <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	4618      	mov	r0, r3
 800aaca:	3708      	adds	r7, #8
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}
 800aad0:	0802aef0 	.word	0x0802aef0

0800aad4 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_TestD0Ev>:
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b082      	sub	sp, #8
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f7ff ffe7 	bl	800aab0 <_ZN43TEST_MqttTestGroup_SubscribePacketTest_TestD1Ev>
 800aae2:	2104      	movs	r1, #4
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f001 fe31 	bl	800c74c <_ZdlPvj>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	4618      	mov	r0, r3
 800aaee:	3708      	adds	r7, #8
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}

0800aaf4 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellD1Ev>:
TEST(MqttTestGroup, ConnectPacketTest)
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b082      	sub	sp, #8
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	4a05      	ldr	r2, [pc, #20]	; (800ab14 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellD1Ev+0x20>)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	601a      	str	r2, [r3, #0]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	4618      	mov	r0, r3
 800ab06:	f00a fa4f 	bl	8014fa8 <_ZN10UtestShellD1Ev>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3708      	adds	r7, #8
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}
 800ab14:	0802af10 	.word	0x0802af10

0800ab18 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellD0Ev>:
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f7ff ffe7 	bl	800aaf4 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellD1Ev>
 800ab26:	211c      	movs	r1, #28
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f001 fe0f 	bl	800c74c <_ZdlPvj>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	4618      	mov	r0, r3
 800ab32:	3708      	adds	r7, #8
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestD1Ev>:
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	4a05      	ldr	r2, [pc, #20]	; (800ab58 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestD1Ev+0x20>)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	601a      	str	r2, [r3, #0]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f7ff f817 	bl	8009b7c <_ZN37TEST_GROUP_CppUTestGroupMqttTestGroupD1Ev>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	4618      	mov	r0, r3
 800ab52:	3708      	adds	r7, #8
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	0802afbc 	.word	0x0802afbc

0800ab5c <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestD0Ev>:
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b082      	sub	sp, #8
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f7ff ffe7 	bl	800ab38 <_ZN41TEST_MqttTestGroup_ConnectPacketTest_TestD1Ev>
 800ab6a:	2104      	movs	r1, #4
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f001 fded 	bl	800c74c <_ZdlPvj>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	4618      	mov	r0, r3
 800ab76:	3708      	adds	r7, #8
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <_Z41__static_initialization_and_destruction_0ii>:
}
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b084      	sub	sp, #16
 800ab80:	af02      	add	r7, sp, #8
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d138      	bne.n	800abfe <_Z41__static_initialization_and_destruction_0ii+0x82>
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d133      	bne.n	800abfe <_Z41__static_initialization_and_destruction_0ii+0x82>
TEST(MqttTestGroup, ConnectPacketTest)
 800ab96:	482c      	ldr	r0, [pc, #176]	; (800ac48 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800ab98:	f7ff f838 	bl	8009c0c <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellC1Ev>
 800ab9c:	232a      	movs	r3, #42	; 0x2a
 800ab9e:	9301      	str	r3, [sp, #4]
 800aba0:	4b2a      	ldr	r3, [pc, #168]	; (800ac4c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800aba2:	9300      	str	r3, [sp, #0]
 800aba4:	4b2a      	ldr	r3, [pc, #168]	; (800ac50 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 800aba6:	4a2b      	ldr	r2, [pc, #172]	; (800ac54 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 800aba8:	4927      	ldr	r1, [pc, #156]	; (800ac48 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800abaa:	482b      	ldr	r0, [pc, #172]	; (800ac58 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 800abac:	f00b fff8 	bl	8016ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(MqttTestGroup, SubscribePacketTest)
 800abb0:	482a      	ldr	r0, [pc, #168]	; (800ac5c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 800abb2:	f7ff fa1b 	bl	8009fec <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellC1Ev>
 800abb6:	2352      	movs	r3, #82	; 0x52
 800abb8:	9301      	str	r3, [sp, #4]
 800abba:	4b24      	ldr	r3, [pc, #144]	; (800ac4c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800abbc:	9300      	str	r3, [sp, #0]
 800abbe:	4b28      	ldr	r3, [pc, #160]	; (800ac60 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 800abc0:	4a24      	ldr	r2, [pc, #144]	; (800ac54 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 800abc2:	4926      	ldr	r1, [pc, #152]	; (800ac5c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 800abc4:	4827      	ldr	r0, [pc, #156]	; (800ac64 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 800abc6:	f00b ffeb 	bl	8016ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(MqttTestGroup, PublishPacketTest)
 800abca:	4827      	ldr	r0, [pc, #156]	; (800ac68 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 800abcc:	f7ff fb76 	bl	800a2bc <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellC1Ev>
 800abd0:	2377      	movs	r3, #119	; 0x77
 800abd2:	9301      	str	r3, [sp, #4]
 800abd4:	4b1d      	ldr	r3, [pc, #116]	; (800ac4c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800abd6:	9300      	str	r3, [sp, #0]
 800abd8:	4b24      	ldr	r3, [pc, #144]	; (800ac6c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 800abda:	4a1e      	ldr	r2, [pc, #120]	; (800ac54 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 800abdc:	4922      	ldr	r1, [pc, #136]	; (800ac68 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 800abde:	4824      	ldr	r0, [pc, #144]	; (800ac70 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 800abe0:	f00b ffde 	bl	8016ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(MqttTestGroup, MqttConnectBrokerTest)
 800abe4:	4823      	ldr	r0, [pc, #140]	; (800ac74 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 800abe6:	f7ff fcf9 	bl	800a5dc <_ZN50TEST_MqttTestGroup_MqttConnectBrokerTest_TestShellC1Ev>
 800abea:	23a0      	movs	r3, #160	; 0xa0
 800abec:	9301      	str	r3, [sp, #4]
 800abee:	4b17      	ldr	r3, [pc, #92]	; (800ac4c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800abf0:	9300      	str	r3, [sp, #0]
 800abf2:	4b21      	ldr	r3, [pc, #132]	; (800ac78 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 800abf4:	4a17      	ldr	r2, [pc, #92]	; (800ac54 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 800abf6:	491f      	ldr	r1, [pc, #124]	; (800ac74 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 800abf8:	4820      	ldr	r0, [pc, #128]	; (800ac7c <_Z41__static_initialization_and_destruction_0ii+0x100>)
 800abfa:	f00b ffd1 	bl	8016ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d11c      	bne.n	800ac3e <_Z41__static_initialization_and_destruction_0ii+0xc2>
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d117      	bne.n	800ac3e <_Z41__static_initialization_and_destruction_0ii+0xc2>
 800ac0e:	481b      	ldr	r0, [pc, #108]	; (800ac7c <_Z41__static_initialization_and_destruction_0ii+0x100>)
 800ac10:	f00b fff0 	bl	8016bf4 <_ZN13TestInstallerD1Ev>
 800ac14:	4817      	ldr	r0, [pc, #92]	; (800ac74 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 800ac16:	f7ff fea1 	bl	800a95c <_ZN50TEST_MqttTestGroup_MqttConnectBrokerTest_TestShellD1Ev>
TEST(MqttTestGroup, PublishPacketTest)
 800ac1a:	4815      	ldr	r0, [pc, #84]	; (800ac70 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 800ac1c:	f00b ffea 	bl	8016bf4 <_ZN13TestInstallerD1Ev>
 800ac20:	4811      	ldr	r0, [pc, #68]	; (800ac68 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 800ac22:	f7ff fedf 	bl	800a9e4 <_ZN46TEST_MqttTestGroup_PublishPacketTest_TestShellD1Ev>
TEST(MqttTestGroup, SubscribePacketTest)
 800ac26:	480f      	ldr	r0, [pc, #60]	; (800ac64 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 800ac28:	f00b ffe4 	bl	8016bf4 <_ZN13TestInstallerD1Ev>
 800ac2c:	480b      	ldr	r0, [pc, #44]	; (800ac5c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 800ac2e:	f7ff ff1d 	bl	800aa6c <_ZN48TEST_MqttTestGroup_SubscribePacketTest_TestShellD1Ev>
TEST(MqttTestGroup, ConnectPacketTest)
 800ac32:	4809      	ldr	r0, [pc, #36]	; (800ac58 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 800ac34:	f00b ffde 	bl	8016bf4 <_ZN13TestInstallerD1Ev>
 800ac38:	4803      	ldr	r0, [pc, #12]	; (800ac48 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800ac3a:	f7ff ff5b 	bl	800aaf4 <_ZN46TEST_MqttTestGroup_ConnectPacketTest_TestShellD1Ev>
}
 800ac3e:	bf00      	nop
 800ac40:	3708      	adds	r7, #8
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	2000093c 	.word	0x2000093c
 800ac4c:	080263b4 	.word	0x080263b4
 800ac50:	08026b34 	.word	0x08026b34
 800ac54:	08026b48 	.word	0x08026b48
 800ac58:	20000958 	.word	0x20000958
 800ac5c:	2000095c 	.word	0x2000095c
 800ac60:	08026b58 	.word	0x08026b58
 800ac64:	20000978 	.word	0x20000978
 800ac68:	2000097c 	.word	0x2000097c
 800ac6c:	08026b6c 	.word	0x08026b6c
 800ac70:	20000998 	.word	0x20000998
 800ac74:	2000099c 	.word	0x2000099c
 800ac78:	08026b80 	.word	0x08026b80
 800ac7c:	200009b8 	.word	0x200009b8

0800ac80 <_GLOBAL__sub_I_externTestGroupMqttTestGroup>:
 800ac80:	b580      	push	{r7, lr}
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ac88:	2001      	movs	r0, #1
 800ac8a:	f7ff ff77 	bl	800ab7c <_Z41__static_initialization_and_destruction_0ii>
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <_GLOBAL__sub_D_externTestGroupMqttTestGroup>:
 800ac90:	b580      	push	{r7, lr}
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ac98:	2000      	movs	r0, #0
 800ac9a:	f7ff ff6f 	bl	800ab7c <_Z41__static_initialization_and_destruction_0ii>
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <_ZNK10TestResult11getRunCountEv>:

    size_t getTestCount() const
    {
        return testCount_;
    }
    size_t getRunCount() const
 800aca0:	b480      	push	{r7}
 800aca2:	b083      	sub	sp, #12
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
    {
        return runCount_;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	68db      	ldr	r3, [r3, #12]
    }
 800acac:	4618      	mov	r0, r3
 800acae:	370c      	adds	r7, #12
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <_ZNK10TestResult15getIgnoredCountEv>:
    }
    size_t getFilteredOutCount() const
    {
        return filteredOutCount_;
    }
    size_t getIgnoredCount() const
 800acb8:	b480      	push	{r7}
 800acba:	b083      	sub	sp, #12
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
    {
        return ignoredCount_;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	69db      	ldr	r3, [r3, #28]
    }
 800acc4:	4618      	mov	r0, r3
 800acc6:	370c      	adds	r7, #12
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <_ZNK10TestResult15getFailureCountEv>:
    size_t getFailureCount() const
 800acd0:	b480      	push	{r7}
 800acd2:	b083      	sub	sp, #12
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
    {
        return failureCount_;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	695b      	ldr	r3, [r3, #20]
    }
 800acdc:	4618      	mov	r0, r3
 800acde:	370c      	adds	r7, #12
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr

0800ace8 <_ZNK10TestResult9isFailureEv>:

    bool isFailure() const
 800ace8:	b590      	push	{r4, r7, lr}
 800acea:	b083      	sub	sp, #12
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
    {
        return (getFailureCount() != 0) || (getRunCount() + getIgnoredCount() == 0);
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f7ff ffed 	bl	800acd0 <_ZNK10TestResult15getFailureCountEv>
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d10a      	bne.n	800ad12 <_ZNK10TestResult9isFailureEv+0x2a>
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f7ff ffcf 	bl	800aca0 <_ZNK10TestResult11getRunCountEv>
 800ad02:	4604      	mov	r4, r0
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f7ff ffd7 	bl	800acb8 <_ZNK10TestResult15getIgnoredCountEv>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	4423      	add	r3, r4
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d101      	bne.n	800ad16 <_ZNK10TestResult9isFailureEv+0x2e>
 800ad12:	2301      	movs	r3, #1
 800ad14:	e000      	b.n	800ad18 <_ZNK10TestResult9isFailureEv+0x30>
 800ad16:	2300      	movs	r3, #0
    }
 800ad18:	4618      	mov	r0, r3
 800ad1a:	370c      	adds	r7, #12
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd90      	pop	{r4, r7, pc}

0800ad20 <_ZN17ConsoleTestOutputC1Ev>:
///////////////////////////////////////////////////////////////////////////////

class ConsoleTestOutput: public TestOutput
{
public:
    explicit ConsoleTestOutput()
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
    {
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f007 fde6 	bl	80128fc <_ZN10TestOutputC1Ev>
 800ad30:	4a03      	ldr	r2, [pc, #12]	; (800ad40 <_ZN17ConsoleTestOutputC1Ev+0x20>)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	601a      	str	r2, [r3, #0]
    }
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3708      	adds	r7, #8
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}
 800ad40:	0802b670 	.word	0x0802b670

0800ad44 <_ZN17ConsoleTestOutputD1Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b082      	sub	sp, #8
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
    {
 800ad4c:	4a05      	ldr	r2, [pc, #20]	; (800ad64 <_ZN17ConsoleTestOutputD1Ev+0x20>)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	601a      	str	r2, [r3, #0]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	4618      	mov	r0, r3
 800ad56:	f007 fdef 	bl	8012938 <_ZN10TestOutputD1Ev>
    }
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3708      	adds	r7, #8
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}
 800ad64:	0802b670 	.word	0x0802b670

0800ad68 <_ZN17ConsoleTestOutputD0Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
    }
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f7ff ffe7 	bl	800ad44 <_ZN17ConsoleTestOutputD1Ev>
 800ad76:	2110      	movs	r1, #16
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f001 fce7 	bl	800c74c <_ZdlPvj>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	4618      	mov	r0, r3
 800ad82:	3708      	adds	r7, #8
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>:
{
    return RunAllTests(ac, (const char *const *) av);
}

int CommandLineTestRunner::RunAllTests(int ac, const char *const *av)
{
 800ad88:	b5b0      	push	{r4, r5, r7, lr}
 800ad8a:	b098      	sub	sp, #96	; 0x60
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]
    int result = 0;
 800ad92:	2300      	movs	r3, #0
 800ad94:	65fb      	str	r3, [r7, #92]	; 0x5c
    ConsoleTestOutput backupOutput;
 800ad96:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f7ff ffc0 	bl	800ad20 <_ZN17ConsoleTestOutputC1Ev>

    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 800ada0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ada4:	4935      	ldr	r1, [pc, #212]	; (800ae7c <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 800ada6:	4618      	mov	r0, r3
 800ada8:	f004 f87f 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800adac:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800adb0:	f107 0318 	add.w	r3, r7, #24
 800adb4:	2200      	movs	r2, #0
 800adb6:	4618      	mov	r0, r3
 800adb8:	f001 ff6a 	bl	800cc90 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>
 800adbc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800adc0:	4618      	mov	r0, r3
 800adc2:	f004 fc2a 	bl	800f61a <_ZN12SimpleStringD1Ev>
    memLeakWarn.destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(true);
 800adc6:	f107 0318 	add.w	r3, r7, #24
 800adca:	2101      	movs	r1, #1
 800adcc:	4618      	mov	r0, r3
 800adce:	f001 ff2f 	bl	800cc30 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>
    TestRegistry::getCurrentRegistry()->installPlugin(&memLeakWarn);
 800add2:	f009 fb21 	bl	8014418 <_ZN12TestRegistry18getCurrentRegistryEv>
 800add6:	4603      	mov	r3, r0
 800add8:	681a      	ldr	r2, [r3, #0]
 800adda:	3234      	adds	r2, #52	; 0x34
 800addc:	6812      	ldr	r2, [r2, #0]
 800adde:	f107 0118 	add.w	r1, r7, #24
 800ade2:	4618      	mov	r0, r3
 800ade4:	4790      	blx	r2

    {
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 800ade6:	f009 fb17 	bl	8014418 <_ZN12TestRegistry18getCurrentRegistryEv>
 800adea:	4603      	mov	r3, r0
 800adec:	f107 0008 	add.w	r0, r7, #8
 800adf0:	683a      	ldr	r2, [r7, #0]
 800adf2:	6879      	ldr	r1, [r7, #4]
 800adf4:	f000 f844 	bl	800ae80 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>
        result = runner.runAllTestsMain();
 800adf8:	f107 0308 	add.w	r3, r7, #8
 800adfc:	4618      	mov	r0, r3
 800adfe:	f000 f899 	bl	800af34 <_ZN21CommandLineTestRunner15runAllTestsMainEv>
 800ae02:	65f8      	str	r0, [r7, #92]	; 0x5c
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 800ae04:	f107 0308 	add.w	r3, r7, #8
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f000 f863 	bl	800aed4 <_ZN21CommandLineTestRunnerD1Ev>
    }

    if (result == 0) {
 800ae0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d10c      	bne.n	800ae2e <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xa6>
        backupOutput << memLeakWarn.FinalReport(0);
 800ae14:	f107 0318 	add.w	r3, r7, #24
 800ae18:	2100      	movs	r1, #0
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f002 f83a 	bl	800ce94 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>
 800ae20:	4602      	mov	r2, r0
 800ae22:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ae26:	4611      	mov	r1, r2
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f007 fe27 	bl	8012a7c <_ZlsR10TestOutputPKc>
    }
    TestRegistry::getCurrentRegistry()->removePluginByName(DEF_PLUGIN_MEM_LEAK);
 800ae2e:	f009 faf3 	bl	8014418 <_ZN12TestRegistry18getCurrentRegistryEv>
 800ae32:	4604      	mov	r4, r0
 800ae34:	6823      	ldr	r3, [r4, #0]
 800ae36:	3344      	adds	r3, #68	; 0x44
 800ae38:	681d      	ldr	r5, [r3, #0]
 800ae3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800ae3e:	490f      	ldr	r1, [pc, #60]	; (800ae7c <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 800ae40:	4618      	mov	r0, r3
 800ae42:	f004 f832 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800ae46:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	4620      	mov	r0, r4
 800ae4e:	47a8      	blx	r5
 800ae50:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800ae54:	4618      	mov	r0, r3
 800ae56:	f004 fbe0 	bl	800f61a <_ZN12SimpleStringD1Ev>
    return result;
 800ae5a:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 800ae5c:	f107 0318 	add.w	r3, r7, #24
 800ae60:	4618      	mov	r0, r3
 800ae62:	f001 ff4d 	bl	800cd00 <_ZN23MemoryLeakWarningPluginD1Ev>
    ConsoleTestOutput backupOutput;
 800ae66:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7ff ff6a 	bl	800ad44 <_ZN17ConsoleTestOutputD1Ev>
    return result;
 800ae70:	4623      	mov	r3, r4
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3760      	adds	r7, #96	; 0x60
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bdb0      	pop	{r4, r5, r7, pc}
 800ae7a:	bf00      	nop
 800ae7c:	08026b98 	.word	0x08026b98

0800ae80 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>:

CommandLineTestRunner::CommandLineTestRunner(int ac, const char *const *av, TestRegistry* registry) :
 800ae80:	b590      	push	{r4, r7, lr}
 800ae82:	b085      	sub	sp, #20
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	60f8      	str	r0, [r7, #12]
 800ae88:	60b9      	str	r1, [r7, #8]
 800ae8a:	607a      	str	r2, [r7, #4]
 800ae8c:	603b      	str	r3, [r7, #0]
    output_(NULLPTR), arguments_(NULLPTR), registry_(registry)
 800ae8e:	4a0f      	ldr	r2, [pc, #60]	; (800aecc <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x4c>)
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	601a      	str	r2, [r3, #0]
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2200      	movs	r2, #0
 800ae98:	605a      	str	r2, [r3, #4]
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	609a      	str	r2, [r3, #8]
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	683a      	ldr	r2, [r7, #0]
 800aea4:	60da      	str	r2, [r3, #12]
{
    arguments_ = new CommandLineArguments(ac, av);
 800aea6:	2241      	movs	r2, #65	; 0x41
 800aea8:	4909      	ldr	r1, [pc, #36]	; (800aed0 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x50>)
 800aeaa:	2038      	movs	r0, #56	; 0x38
 800aeac:	f001 fc3a 	bl	800c724 <_ZnwjPKci>
 800aeb0:	4604      	mov	r4, r0
 800aeb2:	687a      	ldr	r2, [r7, #4]
 800aeb4:	68b9      	ldr	r1, [r7, #8]
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	f00c f84a 	bl	8016f50 <_ZN20CommandLineArgumentsC1EiPKPKc>
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	609c      	str	r4, [r3, #8]
}
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	4618      	mov	r0, r3
 800aec4:	3714      	adds	r7, #20
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd90      	pop	{r4, r7, pc}
 800aeca:	bf00      	nop
 800aecc:	0802affc 	.word	0x0802affc
 800aed0:	08026bac 	.word	0x08026bac

0800aed4 <_ZN21CommandLineTestRunnerD1Ev>:

CommandLineTestRunner::~CommandLineTestRunner()
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	4a0c      	ldr	r2, [pc, #48]	; (800af10 <_ZN21CommandLineTestRunnerD1Ev+0x3c>)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	601a      	str	r2, [r3, #0]
{
    delete arguments_;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	689b      	ldr	r3, [r3, #8]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d004      	beq.n	800aef4 <_ZN21CommandLineTestRunnerD1Ev+0x20>
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	3204      	adds	r2, #4
 800aeee:	6812      	ldr	r2, [r2, #0]
 800aef0:	4618      	mov	r0, r3
 800aef2:	4790      	blx	r2
    delete output_;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d004      	beq.n	800af06 <_ZN21CommandLineTestRunnerD1Ev+0x32>
 800aefc:	681a      	ldr	r2, [r3, #0]
 800aefe:	3204      	adds	r2, #4
 800af00:	6812      	ldr	r2, [r2, #0]
 800af02:	4618      	mov	r0, r3
 800af04:	4790      	blx	r2
}
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	4618      	mov	r0, r3
 800af0a:	3708      	adds	r7, #8
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}
 800af10:	0802affc 	.word	0x0802affc

0800af14 <_ZN21CommandLineTestRunnerD0Ev>:
CommandLineTestRunner::~CommandLineTestRunner()
 800af14:	b580      	push	{r7, lr}
 800af16:	b082      	sub	sp, #8
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
}
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f7ff ffd9 	bl	800aed4 <_ZN21CommandLineTestRunnerD1Ev>
 800af22:	2110      	movs	r1, #16
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f001 fc11 	bl	800c74c <_ZdlPvj>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	4618      	mov	r0, r3
 800af2e:	3708      	adds	r7, #8
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <_ZN21CommandLineTestRunner15runAllTestsMainEv>:

int CommandLineTestRunner::runAllTestsMain()
{
 800af34:	b5b0      	push	{r4, r5, r7, lr}
 800af36:	b08c      	sub	sp, #48	; 0x30
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
    int testResult = 1;
 800af3c:	2301      	movs	r3, #1
 800af3e:	62fb      	str	r3, [r7, #44]	; 0x2c

    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 800af40:	f107 031c 	add.w	r3, r7, #28
 800af44:	4929      	ldr	r1, [pc, #164]	; (800afec <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 800af46:	4618      	mov	r0, r3
 800af48:	f003 ffaf 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800af4c:	f107 021c 	add.w	r2, r7, #28
 800af50:	f107 0308 	add.w	r3, r7, #8
 800af54:	4611      	mov	r1, r2
 800af56:	4618      	mov	r0, r3
 800af58:	f008 fe1c 	bl	8013b94 <_ZN16SetPointerPluginC1ERK12SimpleString>
 800af5c:	f107 031c 	add.w	r3, r7, #28
 800af60:	4618      	mov	r0, r3
 800af62:	f004 fb5a 	bl	800f61a <_ZN12SimpleStringD1Ev>
    registry_->installPlugin(&pPlugin);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	68da      	ldr	r2, [r3, #12]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	68db      	ldr	r3, [r3, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	3334      	adds	r3, #52	; 0x34
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f107 0108 	add.w	r1, r7, #8
 800af78:	4610      	mov	r0, r2
 800af7a:	4798      	blx	r3

    if (parseArguments(registry_->getFirstPlugin()))
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	68da      	ldr	r2, [r3, #12]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	68db      	ldr	r3, [r3, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	333c      	adds	r3, #60	; 0x3c
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4610      	mov	r0, r2
 800af8c:	4798      	blx	r3
 800af8e:	4603      	mov	r3, r0
 800af90:	4619      	mov	r1, r3
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f000 fa3e 	bl	800b414 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>
 800af98:	4603      	mov	r3, r0
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d003      	beq.n	800afa6 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0x72>
        testResult = runAllTests();
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 f8ac 	bl	800b0fc <_ZN21CommandLineTestRunner11runAllTestsEv>
 800afa4:	62f8      	str	r0, [r7, #44]	; 0x2c

    registry_->removePluginByName(DEF_PLUGIN_SET_POINTER);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	68dd      	ldr	r5, [r3, #12]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	68db      	ldr	r3, [r3, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	3344      	adds	r3, #68	; 0x44
 800afb2:	681c      	ldr	r4, [r3, #0]
 800afb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afb8:	490c      	ldr	r1, [pc, #48]	; (800afec <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 800afba:	4618      	mov	r0, r3
 800afbc:	f003 ff75 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800afc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afc4:	4619      	mov	r1, r3
 800afc6:	4628      	mov	r0, r5
 800afc8:	47a0      	blx	r4
 800afca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afce:	4618      	mov	r0, r3
 800afd0:	f004 fb23 	bl	800f61a <_ZN12SimpleStringD1Ev>
    return testResult;
 800afd4:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 800afd6:	f107 0308 	add.w	r3, r7, #8
 800afda:	4618      	mov	r0, r3
 800afdc:	f000 faaa 	bl	800b534 <_ZN16SetPointerPluginD1Ev>
    return testResult;
 800afe0:	4623      	mov	r3, r4
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3730      	adds	r7, #48	; 0x30
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bdb0      	pop	{r4, r5, r7, pc}
 800afea:	bf00      	nop
 800afec:	08026bd0 	.word	0x08026bd0

0800aff0 <_ZN21CommandLineTestRunner17initializeTestRunEv>:

void CommandLineTestRunner::initializeTestRun()
{
 800aff0:	b5b0      	push	{r4, r5, r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
    registry_->setGroupFilters(arguments_->getGroupFilters());
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	68dd      	ldr	r5, [r3, #12]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	68db      	ldr	r3, [r3, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	3330      	adds	r3, #48	; 0x30
 800b004:	681c      	ldr	r4, [r3, #0]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	4618      	mov	r0, r3
 800b00c:	f00c fce0 	bl	80179d0 <_ZNK20CommandLineArguments15getGroupFiltersEv>
 800b010:	4603      	mov	r3, r0
 800b012:	4619      	mov	r1, r3
 800b014:	4628      	mov	r0, r5
 800b016:	47a0      	blx	r4
    registry_->setNameFilters(arguments_->getNameFilters());
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	68dd      	ldr	r5, [r3, #12]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	68db      	ldr	r3, [r3, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	332c      	adds	r3, #44	; 0x2c
 800b024:	681c      	ldr	r4, [r3, #0]
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	689b      	ldr	r3, [r3, #8]
 800b02a:	4618      	mov	r0, r3
 800b02c:	f00c fcdc 	bl	80179e8 <_ZNK20CommandLineArguments14getNameFiltersEv>
 800b030:	4603      	mov	r3, r0
 800b032:	4619      	mov	r1, r3
 800b034:	4628      	mov	r0, r5
 800b036:	47a0      	blx	r4

    if (arguments_->isVerbose()) output_->verbose(TestOutput::level_verbose);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	4618      	mov	r0, r3
 800b03e:	f00c fc2b 	bl	8017898 <_ZNK20CommandLineArguments9isVerboseEv>
 800b042:	4603      	mov	r3, r0
 800b044:	2b00      	cmp	r3, #0
 800b046:	d009      	beq.n	800b05c <_ZN21CommandLineTestRunner17initializeTestRunEv+0x6c>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	685a      	ldr	r2, [r3, #4]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	3320      	adds	r3, #32
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	2101      	movs	r1, #1
 800b058:	4610      	mov	r0, r2
 800b05a:	4798      	blx	r3
    if (arguments_->isVeryVerbose()) output_->verbose(TestOutput::level_veryVerbose);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	689b      	ldr	r3, [r3, #8]
 800b060:	4618      	mov	r0, r3
 800b062:	f00c fc25 	bl	80178b0 <_ZNK20CommandLineArguments13isVeryVerboseEv>
 800b066:	4603      	mov	r3, r0
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d009      	beq.n	800b080 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x90>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	685a      	ldr	r2, [r3, #4]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	3320      	adds	r3, #32
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	2102      	movs	r1, #2
 800b07c:	4610      	mov	r0, r2
 800b07e:	4798      	blx	r3
    if (arguments_->isColor()) output_->color();
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	689b      	ldr	r3, [r3, #8]
 800b084:	4618      	mov	r0, r3
 800b086:	f00c fc1f 	bl	80178c8 <_ZNK20CommandLineArguments7isColorEv>
 800b08a:	4603      	mov	r3, r0
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d008      	beq.n	800b0a2 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xb2>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	685a      	ldr	r2, [r3, #4]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	3324      	adds	r3, #36	; 0x24
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	4610      	mov	r0, r2
 800b0a0:	4798      	blx	r3
    if (arguments_->runTestsInSeperateProcess()) registry_->setRunTestsInSeperateProcess();
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	689b      	ldr	r3, [r3, #8]
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f00c fc4a 	bl	8017940 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d008      	beq.n	800b0c4 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xd4>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	68da      	ldr	r2, [r3, #12]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	68db      	ldr	r3, [r3, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	3360      	adds	r3, #96	; 0x60
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4610      	mov	r0, r2
 800b0c2:	4798      	blx	r3
    if (arguments_->isRunIgnored()) registry_->setRunIgnored();
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	689b      	ldr	r3, [r3, #8]
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f00c fc2d 	bl	8017928 <_ZNK20CommandLineArguments12isRunIgnoredEv>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d004      	beq.n	800b0de <_ZN21CommandLineTestRunner17initializeTestRunEv+0xee>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	68db      	ldr	r3, [r3, #12]
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f009 fa19 	bl	8014510 <_ZN12TestRegistry13setRunIgnoredEv>
    if (arguments_->isCrashingOnFail()) UtestShell::setCrashOnFail();
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f00c fc50 	bl	8017988 <_ZNK20CommandLineArguments16isCrashingOnFailEv>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d001      	beq.n	800b0f2 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x102>
 800b0ee:	f00b fadb 	bl	80166a8 <_ZN10UtestShell14setCrashOnFailEv>
}
 800b0f2:	bf00      	nop
 800b0f4:	3708      	adds	r7, #8
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b0fc <_ZN21CommandLineTestRunner11runAllTestsEv>:

int CommandLineTestRunner::runAllTests()
{
 800b0fc:	b5b0      	push	{r4, r5, r7, lr}
 800b0fe:	b094      	sub	sp, #80	; 0x50
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
    initializeTestRun();
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f7ff ff73 	bl	800aff0 <_ZN21CommandLineTestRunner17initializeTestRunEv>
    size_t loopCount = 0;
 800b10a:	2300      	movs	r3, #0
 800b10c:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t failedTestCount = 0;
 800b10e:	2300      	movs	r3, #0
 800b110:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t failedExecutionCount = 0;
 800b112:	2300      	movs	r3, #0
 800b114:	647b      	str	r3, [r7, #68]	; 0x44
    size_t repeatCount = arguments_->getRepeatCount();
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	689b      	ldr	r3, [r3, #8]
 800b11a:	4618      	mov	r0, r3
 800b11c:	f00c fc1c 	bl	8017958 <_ZNK20CommandLineArguments14getRepeatCountEv>
 800b120:	6438      	str	r0, [r7, #64]	; 0x40

    if (arguments_->isListingTestGroupNames())
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	689b      	ldr	r3, [r3, #8]
 800b126:	4618      	mov	r0, r3
 800b128:	f00c fbda 	bl	80178e0 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>
 800b12c:	4603      	mov	r3, r0
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d019      	beq.n	800b166 <_ZN21CommandLineTestRunner11runAllTestsEv+0x6a>
    {
        TestResult tr(*output_);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	685a      	ldr	r2, [r3, #4]
 800b136:	f107 0308 	add.w	r3, r7, #8
 800b13a:	4611      	mov	r1, r2
 800b13c:	4618      	mov	r0, r3
 800b13e:	f009 fbaf 	bl	80148a0 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupNames(tr);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	68da      	ldr	r2, [r3, #12]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	68db      	ldr	r3, [r3, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	3320      	adds	r3, #32
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f107 0108 	add.w	r1, r7, #8
 800b154:	4610      	mov	r0, r2
 800b156:	4798      	blx	r3
        return 0;
 800b158:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800b15a:	f107 0308 	add.w	r3, r7, #8
 800b15e:	4618      	mov	r0, r3
 800b160:	f009 fbd6 	bl	8014910 <_ZN10TestResultD1Ev>
 800b164:	e0e1      	b.n	800b32a <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestGroupAndCaseNames())
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	689b      	ldr	r3, [r3, #8]
 800b16a:	4618      	mov	r0, r3
 800b16c:	f00c fbc4 	bl	80178f8 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>
 800b170:	4603      	mov	r3, r0
 800b172:	2b00      	cmp	r3, #0
 800b174:	d019      	beq.n	800b1aa <_ZN21CommandLineTestRunner11runAllTestsEv+0xae>
    {
        TestResult tr(*output_);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	685a      	ldr	r2, [r3, #4]
 800b17a:	f107 0308 	add.w	r3, r7, #8
 800b17e:	4611      	mov	r1, r2
 800b180:	4618      	mov	r0, r3
 800b182:	f009 fb8d 	bl	80148a0 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupAndCaseNames(tr);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	68da      	ldr	r2, [r3, #12]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	68db      	ldr	r3, [r3, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	3324      	adds	r3, #36	; 0x24
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f107 0108 	add.w	r1, r7, #8
 800b198:	4610      	mov	r0, r2
 800b19a:	4798      	blx	r3
        return 0;
 800b19c:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800b19e:	f107 0308 	add.w	r3, r7, #8
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f009 fbb4 	bl	8014910 <_ZN10TestResultD1Ev>
 800b1a8:	e0bf      	b.n	800b32a <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestLocations())
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	689b      	ldr	r3, [r3, #8]
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f00c fbae 	bl	8017910 <_ZNK20CommandLineArguments22isListingTestLocationsEv>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d019      	beq.n	800b1ee <_ZN21CommandLineTestRunner11runAllTestsEv+0xf2>
    {
        TestResult tr(*output_);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	685a      	ldr	r2, [r3, #4]
 800b1be:	f107 0308 	add.w	r3, r7, #8
 800b1c2:	4611      	mov	r1, r2
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f009 fb6b 	bl	80148a0 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestLocations(tr);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	68da      	ldr	r2, [r3, #12]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	68db      	ldr	r3, [r3, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	3328      	adds	r3, #40	; 0x28
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f107 0108 	add.w	r1, r7, #8
 800b1dc:	4610      	mov	r0, r2
 800b1de:	4798      	blx	r3
        return 0;
 800b1e0:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800b1e2:	f107 0308 	add.w	r3, r7, #8
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f009 fb92 	bl	8014910 <_ZN10TestResultD1Ev>
 800b1ec:	e09d      	b.n	800b32a <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isReversing())
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	689b      	ldr	r3, [r3, #8]
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f00c fbbc 	bl	8017970 <_ZNK20CommandLineArguments11isReversingEv>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d008      	beq.n	800b210 <_ZN21CommandLineTestRunner11runAllTestsEv+0x114>
        registry_->reverseTests();
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	68da      	ldr	r2, [r3, #12]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	68db      	ldr	r3, [r3, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	331c      	adds	r3, #28
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	4610      	mov	r0, r2
 800b20e:	4798      	blx	r3

    if (arguments_->isShuffling())
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	4618      	mov	r0, r3
 800b216:	f00c fbc3 	bl	80179a0 <_ZNK20CommandLineArguments11isShufflingEv>
 800b21a:	4603      	mov	r3, r0
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d023      	beq.n	800b268 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
    {
        output_->print("Test order shuffling enabled with seed: ");
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	685a      	ldr	r2, [r3, #4]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	332c      	adds	r3, #44	; 0x2c
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	4941      	ldr	r1, [pc, #260]	; (800b334 <_ZN21CommandLineTestRunner11runAllTestsEv+0x238>)
 800b230:	4610      	mov	r0, r2
 800b232:	4798      	blx	r3
        output_->print(arguments_->getShuffleSeed());
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	685d      	ldr	r5, [r3, #4]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	685b      	ldr	r3, [r3, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	3334      	adds	r3, #52	; 0x34
 800b240:	681c      	ldr	r4, [r3, #0]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	689b      	ldr	r3, [r3, #8]
 800b246:	4618      	mov	r0, r3
 800b248:	f00c fbb6 	bl	80179b8 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 800b24c:	4603      	mov	r3, r0
 800b24e:	4619      	mov	r1, r3
 800b250:	4628      	mov	r0, r5
 800b252:	47a0      	blx	r4
        output_->print("\n");
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	685a      	ldr	r2, [r3, #4]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	332c      	adds	r3, #44	; 0x2c
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4935      	ldr	r1, [pc, #212]	; (800b338 <_ZN21CommandLineTestRunner11runAllTestsEv+0x23c>)
 800b264:	4610      	mov	r0, r2
 800b266:	4798      	blx	r3
    }
    while (loopCount++ < repeatCount) {
 800b268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b26a:	1c5a      	adds	r2, r3, #1
 800b26c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b26e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b270:	429a      	cmp	r2, r3
 800b272:	bf8c      	ite	hi
 800b274:	2301      	movhi	r3, #1
 800b276:	2300      	movls	r3, #0
 800b278:	b2db      	uxtb	r3, r3
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d04e      	beq.n	800b31c <_ZN21CommandLineTestRunner11runAllTestsEv+0x220>

        if (arguments_->isShuffling())
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	689b      	ldr	r3, [r3, #8]
 800b282:	4618      	mov	r0, r3
 800b284:	f00c fb8c 	bl	80179a0 <_ZNK20CommandLineArguments11isShufflingEv>
 800b288:	4603      	mov	r3, r0
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d00f      	beq.n	800b2ae <_ZN21CommandLineTestRunner11runAllTestsEv+0x1b2>
            registry_->shuffleTests(arguments_->getShuffleSeed());
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	68dd      	ldr	r5, [r3, #12]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	68db      	ldr	r3, [r3, #12]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	3318      	adds	r3, #24
 800b29a:	681c      	ldr	r4, [r3, #0]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	689b      	ldr	r3, [r3, #8]
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f00c fb89 	bl	80179b8 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	4628      	mov	r0, r5
 800b2ac:	47a0      	blx	r4

        output_->printTestRun(loopCount, repeatCount);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6858      	ldr	r0, [r3, #4]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	3340      	adds	r3, #64	; 0x40
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b2be:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b2c0:	4798      	blx	r3
        TestResult tr(*output_);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	685a      	ldr	r2, [r3, #4]
 800b2c6:	f107 0308 	add.w	r3, r7, #8
 800b2ca:	4611      	mov	r1, r2
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f009 fae7 	bl	80148a0 <_ZN10TestResultC1ER10TestOutput>
        registry_->runAllTests(tr);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	68da      	ldr	r2, [r3, #12]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	68db      	ldr	r3, [r3, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	3314      	adds	r3, #20
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f107 0108 	add.w	r1, r7, #8
 800b2e4:	4610      	mov	r0, r2
 800b2e6:	4798      	blx	r3
        failedTestCount += tr.getFailureCount();
 800b2e8:	f107 0308 	add.w	r3, r7, #8
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f7ff fcef 	bl	800acd0 <_ZNK10TestResult15getFailureCountEv>
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2f6:	4413      	add	r3, r2
 800b2f8:	64bb      	str	r3, [r7, #72]	; 0x48
        if (tr.isFailure()) {
 800b2fa:	f107 0308 	add.w	r3, r7, #8
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7ff fcf2 	bl	800ace8 <_ZNK10TestResult9isFailureEv>
 800b304:	4603      	mov	r3, r0
 800b306:	2b00      	cmp	r3, #0
 800b308:	d002      	beq.n	800b310 <_ZN21CommandLineTestRunner11runAllTestsEv+0x214>
            failedExecutionCount++;
 800b30a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b30c:	3301      	adds	r3, #1
 800b30e:	647b      	str	r3, [r7, #68]	; 0x44
        TestResult tr(*output_);
 800b310:	f107 0308 	add.w	r3, r7, #8
 800b314:	4618      	mov	r0, r3
 800b316:	f009 fafb 	bl	8014910 <_ZN10TestResultD1Ev>
    while (loopCount++ < repeatCount) {
 800b31a:	e7a5      	b.n	800b268 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
        }
    }
    return (int) (failedTestCount != 0 ? failedTestCount : failedExecutionCount);
 800b31c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d001      	beq.n	800b326 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22a>
 800b322:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800b324:	e000      	b.n	800b328 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22c>
 800b326:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800b328:	bf00      	nop
 800b32a:	4623      	mov	r3, r4
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3750      	adds	r7, #80	; 0x50
 800b330:	46bd      	mov	sp, r7
 800b332:	bdb0      	pop	{r4, r5, r7, pc}
 800b334:	08026be4 	.word	0x08026be4
 800b338:	08026c10 	.word	0x08026c10

0800b33c <_ZN21CommandLineTestRunner20createTeamCityOutputEv>:

TestOutput* CommandLineTestRunner::createTeamCityOutput()
{
 800b33c:	b590      	push	{r4, r7, lr}
 800b33e:	b083      	sub	sp, #12
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
    return new TeamCityTestOutput;
 800b344:	229d      	movs	r2, #157	; 0x9d
 800b346:	4906      	ldr	r1, [pc, #24]	; (800b360 <_ZN21CommandLineTestRunner20createTeamCityOutputEv+0x24>)
 800b348:	201c      	movs	r0, #28
 800b34a:	f001 f9eb 	bl	800c724 <_ZnwjPKci>
 800b34e:	4604      	mov	r4, r0
 800b350:	4620      	mov	r0, r4
 800b352:	f005 f955 	bl	8010600 <_ZN18TeamCityTestOutputC1Ev>
 800b356:	4623      	mov	r3, r4
}
 800b358:	4618      	mov	r0, r3
 800b35a:	370c      	adds	r7, #12
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd90      	pop	{r4, r7, pc}
 800b360:	08026bac 	.word	0x08026bac

0800b364 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString>:

TestOutput* CommandLineTestRunner::createJUnitOutput(const SimpleString& packageName)
{
 800b364:	b590      	push	{r4, r7, lr}
 800b366:	b085      	sub	sp, #20
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
    JUnitTestOutput* junitOutput = new JUnitTestOutput;
 800b36e:	22a2      	movs	r2, #162	; 0xa2
 800b370:	490a      	ldr	r1, [pc, #40]	; (800b39c <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x38>)
 800b372:	2014      	movs	r0, #20
 800b374:	f001 f9d6 	bl	800c724 <_ZnwjPKci>
 800b378:	4604      	mov	r4, r0
 800b37a:	4620      	mov	r0, r4
 800b37c:	f000 f980 	bl	800b680 <_ZN15JUnitTestOutputC1Ev>
 800b380:	60fc      	str	r4, [r7, #12]
    if (junitOutput != NULLPTR) {
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d003      	beq.n	800b390 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x2c>
      junitOutput->setPackageName(packageName);
 800b388:	6839      	ldr	r1, [r7, #0]
 800b38a:	68f8      	ldr	r0, [r7, #12]
 800b38c:	f000 fbb2 	bl	800baf4 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>
    }
    return junitOutput;
 800b390:	68fb      	ldr	r3, [r7, #12]
}
 800b392:	4618      	mov	r0, r3
 800b394:	3714      	adds	r7, #20
 800b396:	46bd      	mov	sp, r7
 800b398:	bd90      	pop	{r4, r7, pc}
 800b39a:	bf00      	nop
 800b39c:	08026bac 	.word	0x08026bac

0800b3a0 <_ZN21CommandLineTestRunner19createConsoleOutputEv>:

TestOutput* CommandLineTestRunner::createConsoleOutput()
{
 800b3a0:	b590      	push	{r4, r7, lr}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
    return new ConsoleTestOutput;
 800b3a8:	22ab      	movs	r2, #171	; 0xab
 800b3aa:	4906      	ldr	r1, [pc, #24]	; (800b3c4 <_ZN21CommandLineTestRunner19createConsoleOutputEv+0x24>)
 800b3ac:	2010      	movs	r0, #16
 800b3ae:	f001 f9b9 	bl	800c724 <_ZnwjPKci>
 800b3b2:	4604      	mov	r4, r0
 800b3b4:	4620      	mov	r0, r4
 800b3b6:	f7ff fcb3 	bl	800ad20 <_ZN17ConsoleTestOutputC1Ev>
 800b3ba:	4623      	mov	r3, r4
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	370c      	adds	r7, #12
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd90      	pop	{r4, r7, pc}
 800b3c4:	08026bac 	.word	0x08026bac

0800b3c8 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_>:

TestOutput* CommandLineTestRunner::createCompositeOutput(TestOutput* outputOne, TestOutput* outputTwo)
{
 800b3c8:	b590      	push	{r4, r7, lr}
 800b3ca:	b087      	sub	sp, #28
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	60f8      	str	r0, [r7, #12]
 800b3d0:	60b9      	str	r1, [r7, #8]
 800b3d2:	607a      	str	r2, [r7, #4]
  CompositeTestOutput* composite = new CompositeTestOutput;
 800b3d4:	22b0      	movs	r2, #176	; 0xb0
 800b3d6:	490e      	ldr	r1, [pc, #56]	; (800b410 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_+0x48>)
 800b3d8:	2018      	movs	r0, #24
 800b3da:	f001 f9a3 	bl	800c724 <_ZnwjPKci>
 800b3de:	4604      	mov	r4, r0
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	f007 ff83 	bl	80132ec <_ZN19CompositeTestOutputC1Ev>
 800b3e6:	617c      	str	r4, [r7, #20]
  composite->setOutputOne(outputOne);
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	335c      	adds	r3, #92	; 0x5c
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	68b9      	ldr	r1, [r7, #8]
 800b3f2:	6978      	ldr	r0, [r7, #20]
 800b3f4:	4798      	blx	r3
  composite->setOutputTwo(outputTwo);
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	3360      	adds	r3, #96	; 0x60
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	6879      	ldr	r1, [r7, #4]
 800b400:	6978      	ldr	r0, [r7, #20]
 800b402:	4798      	blx	r3
  return composite;
 800b404:	697b      	ldr	r3, [r7, #20]
}
 800b406:	4618      	mov	r0, r3
 800b408:	371c      	adds	r7, #28
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd90      	pop	{r4, r7, pc}
 800b40e:	bf00      	nop
 800b410:	08026bac 	.word	0x08026bac

0800b414 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>:

bool CommandLineTestRunner::parseArguments(TestPlugin* plugin)
{
 800b414:	b5b0      	push	{r4, r5, r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	6039      	str	r1, [r7, #0]
  if (!arguments_->parse(plugin)) {
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	689b      	ldr	r3, [r3, #8]
 800b422:	6839      	ldr	r1, [r7, #0]
 800b424:	4618      	mov	r0, r3
 800b426:	f00b fe4f 	bl	80170c8 <_ZN20CommandLineArguments5parseEP10TestPlugin>
 800b42a:	4603      	mov	r3, r0
 800b42c:	f083 0301 	eor.w	r3, r3, #1
 800b430:	b2db      	uxtb	r3, r3
 800b432:	2b00      	cmp	r3, #0
 800b434:	d029      	beq.n	800b48a <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x76>
    output_ = createConsoleOutput();
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	3310      	adds	r3, #16
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	4798      	blx	r3
 800b442:	4602      	mov	r2, r0
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	605a      	str	r2, [r3, #4]
    output_->print((arguments_->needHelp()) ? arguments_->help() : arguments_->usage());
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	685d      	ldr	r5, [r3, #4]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	685b      	ldr	r3, [r3, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	332c      	adds	r3, #44	; 0x2c
 800b454:	681c      	ldr	r4, [r3, #0]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	689b      	ldr	r3, [r3, #8]
 800b45a:	4618      	mov	r0, r3
 800b45c:	f00c fa10 	bl	8017880 <_ZNK20CommandLineArguments8needHelpEv>
 800b460:	4603      	mov	r3, r0
 800b462:	2b00      	cmp	r3, #0
 800b464:	d006      	beq.n	800b474 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x60>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	689b      	ldr	r3, [r3, #8]
 800b46a:	4618      	mov	r0, r3
 800b46c:	f00c f9fa 	bl	8017864 <_ZNK20CommandLineArguments4helpEv>
 800b470:	4603      	mov	r3, r0
 800b472:	e005      	b.n	800b480 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x6c>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	689b      	ldr	r3, [r3, #8]
 800b478:	4618      	mov	r0, r3
 800b47a:	f00c f9e5 	bl	8017848 <_ZNK20CommandLineArguments5usageEv>
 800b47e:	4603      	mov	r3, r0
 800b480:	4619      	mov	r1, r3
 800b482:	4628      	mov	r0, r5
 800b484:	47a0      	blx	r4
    return false;
 800b486:	2300      	movs	r3, #0
 800b488:	e050      	b.n	800b52c <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x118>
  }

  if (arguments_->isJUnitOutput()) {
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	689b      	ldr	r3, [r3, #8]
 800b48e:	4618      	mov	r0, r3
 800b490:	f00d f84c 	bl	801852c <_ZNK20CommandLineArguments13isJUnitOutputEv>
 800b494:	4603      	mov	r3, r0
 800b496:	2b00      	cmp	r3, #0
 800b498:	d02c      	beq.n	800b4f4 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0xe0>
    output_= createJUnitOutput(arguments_->getPackageName());
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	330c      	adds	r3, #12
 800b4a0:	681c      	ldr	r4, [r3, #0]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	689b      	ldr	r3, [r3, #8]
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f00d f864 	bl	8018574 <_ZNK20CommandLineArguments14getPackageNameEv>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	47a0      	blx	r4
 800b4b4:	4602      	mov	r2, r0
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	605a      	str	r2, [r3, #4]
    if (arguments_->isVerbose())
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	689b      	ldr	r3, [r3, #8]
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f00c f9ea 	bl	8017898 <_ZNK20CommandLineArguments9isVerboseEv>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d02f      	beq.n	800b52a <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
      output_ = createCompositeOutput(output_, createConsoleOutput());
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	3314      	adds	r3, #20
 800b4d0:	681c      	ldr	r4, [r3, #0]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	685d      	ldr	r5, [r3, #4]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	3310      	adds	r3, #16
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	4798      	blx	r3
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	461a      	mov	r2, r3
 800b4e6:	4629      	mov	r1, r5
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	47a0      	blx	r4
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	605a      	str	r2, [r3, #4]
 800b4f2:	e01a      	b.n	800b52a <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else if (arguments_->isTeamCityOutput()) {
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	689b      	ldr	r3, [r3, #8]
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f00d f829 	bl	8018550 <_ZNK20CommandLineArguments16isTeamCityOutputEv>
 800b4fe:	4603      	mov	r3, r0
 800b500:	2b00      	cmp	r3, #0
 800b502:	d009      	beq.n	800b518 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x104>
    output_ = createTeamCityOutput();
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	3308      	adds	r3, #8
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	4798      	blx	r3
 800b510:	4602      	mov	r2, r0
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	605a      	str	r2, [r3, #4]
 800b516:	e008      	b.n	800b52a <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else
    output_ = createConsoleOutput();
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	3310      	adds	r3, #16
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	4798      	blx	r3
 800b524:	4602      	mov	r2, r0
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	605a      	str	r2, [r3, #4]
  return true;
 800b52a:	2301      	movs	r3, #1
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3708      	adds	r7, #8
 800b530:	46bd      	mov	sp, r7
 800b532:	bdb0      	pop	{r4, r5, r7, pc}

0800b534 <_ZN16SetPointerPluginD1Ev>:
//
///////////////////////////////////////////////////////////////////////////////

extern void CppUTestStore(void **location);

class SetPointerPlugin: public TestPlugin
 800b534:	b580      	push	{r7, lr}
 800b536:	b082      	sub	sp, #8
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	4a05      	ldr	r2, [pc, #20]	; (800b554 <_ZN16SetPointerPluginD1Ev+0x20>)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	601a      	str	r2, [r3, #0]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	4618      	mov	r0, r3
 800b546:	f008 f9e7 	bl	8013918 <_ZN10TestPluginD1Ev>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	4618      	mov	r0, r3
 800b54e:	3708      	adds	r7, #8
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}
 800b554:	0802b77c 	.word	0x0802b77c

0800b558 <_ZN16SetPointerPluginD0Ev>:
 800b558:	b580      	push	{r7, lr}
 800b55a:	b082      	sub	sp, #8
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f7ff ffe7 	bl	800b534 <_ZN16SetPointerPluginD1Ev>
 800b566:	2114      	movs	r1, #20
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f001 f8ef 	bl	800c74c <_ZdlPvj>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	4618      	mov	r0, r3
 800b572:	3708      	adds	r7, #8
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}

0800b578 <_ZNK10TestResult13getCheckCountEv>:
    size_t getCheckCount() const
 800b578:	b480      	push	{r7}
 800b57a:	b083      	sub	sp, #12
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
        return checkCount_;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	691b      	ldr	r3, [r3, #16]
    }
 800b584:	4618      	mov	r0, r3
 800b586:	370c      	adds	r7, #12
 800b588:	46bd      	mov	sp, r7
 800b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58e:	4770      	bx	lr

0800b590 <_ZN23JUnitTestCaseResultNodeC1Ev>:
#include "CppUTest/TestFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

struct JUnitTestCaseResultNode
{
    JUnitTestCaseResultNode() :
 800b590:	b580      	push	{r7, lr}
 800b592:	b082      	sub	sp, #8
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
        execTime_(0), failure_(NULLPTR), ignored_(false), lineNumber_ (0), checkCount_ (0), next_(NULLPTR)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	4910      	ldr	r1, [pc, #64]	; (800b5dc <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 800b59c:	4618      	mov	r0, r3
 800b59e:	f003 fc84 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	609a      	str	r2, [r3, #8]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	60da      	str	r2, [r3, #12]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	741a      	strb	r2, [r3, #16]
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	3314      	adds	r3, #20
 800b5b8:	4908      	ldr	r1, [pc, #32]	; (800b5dc <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f003 fc75 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	61da      	str	r2, [r3, #28]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	621a      	str	r2, [r3, #32]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3708      	adds	r7, #8
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}
 800b5dc:	08026c14 	.word	0x08026c14

0800b5e0 <_ZN20JUnitTestGroupResultC1Ev>:
    JUnitTestCaseResultNode* next_;
};

struct JUnitTestGroupResult
{
    JUnitTestGroupResult() :
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b082      	sub	sp, #8
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
        testCount_(0), failureCount_(0), totalCheckCount_(0), startTime_(0), groupExecTime_(0), head_(NULLPTR), tail_(NULLPTR)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	601a      	str	r2, [r3, #0]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	605a      	str	r2, [r3, #4]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	609a      	str	r2, [r3, #8]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	60da      	str	r2, [r3, #12]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2200      	movs	r2, #0
 800b604:	611a      	str	r2, [r3, #16]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	3314      	adds	r3, #20
 800b60a:	4907      	ldr	r1, [pc, #28]	; (800b628 <_ZN20JUnitTestGroupResultC1Ev+0x48>)
 800b60c:	4618      	mov	r0, r3
 800b60e:	f003 fc4c 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2200      	movs	r2, #0
 800b616:	61da      	str	r2, [r3, #28]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2200      	movs	r2, #0
 800b61c:	621a      	str	r2, [r3, #32]
    {
    }
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	4618      	mov	r0, r3
 800b622:	3708      	adds	r7, #8
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}
 800b628:	08026c14 	.word	0x08026c14

0800b62c <_ZN20JUnitTestGroupResultD1Ev>:
struct JUnitTestGroupResult
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	3314      	adds	r3, #20
 800b638:	4618      	mov	r0, r3
 800b63a:	f003 ffee 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	4618      	mov	r0, r3
 800b642:	3708      	adds	r7, #8
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}

0800b648 <_ZN19JUnitTestOutputImplC1Ev>:
    SimpleString group_;
    JUnitTestCaseResultNode* head_;
    JUnitTestCaseResultNode* tail_;
};

struct JUnitTestOutputImpl
 800b648:	b580      	push	{r7, lr}
 800b64a:	b082      	sub	sp, #8
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	4618      	mov	r0, r3
 800b654:	f7ff ffc4 	bl	800b5e0 <_ZN20JUnitTestGroupResultC1Ev>
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	3328      	adds	r3, #40	; 0x28
 800b65c:	4907      	ldr	r1, [pc, #28]	; (800b67c <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 800b65e:	4618      	mov	r0, r3
 800b660:	f003 fc23 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	3330      	adds	r3, #48	; 0x30
 800b668:	4904      	ldr	r1, [pc, #16]	; (800b67c <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 800b66a:	4618      	mov	r0, r3
 800b66c:	f003 fc1d 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	4618      	mov	r0, r3
 800b674:	3708      	adds	r7, #8
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	08026c14 	.word	0x08026c14

0800b680 <_ZN15JUnitTestOutputC1Ev>:
    PlatformSpecificFile file_;
    SimpleString package_;
    SimpleString stdOutput_;
};

JUnitTestOutput::JUnitTestOutput() :
 800b680:	b590      	push	{r4, r7, lr}
 800b682:	b083      	sub	sp, #12
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
    impl_(new JUnitTestOutputImpl)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	4618      	mov	r0, r3
 800b68c:	f007 f936 	bl	80128fc <_ZN10TestOutputC1Ev>
 800b690:	4a09      	ldr	r2, [pc, #36]	; (800b6b8 <_ZN15JUnitTestOutputC1Ev+0x38>)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	601a      	str	r2, [r3, #0]
 800b696:	224d      	movs	r2, #77	; 0x4d
 800b698:	4908      	ldr	r1, [pc, #32]	; (800b6bc <_ZN15JUnitTestOutputC1Ev+0x3c>)
 800b69a:	2038      	movs	r0, #56	; 0x38
 800b69c:	f001 f842 	bl	800c724 <_ZnwjPKci>
 800b6a0:	4604      	mov	r4, r0
 800b6a2:	4620      	mov	r0, r4
 800b6a4:	f7ff ffd0 	bl	800b648 <_ZN19JUnitTestOutputImplC1Ev>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	611c      	str	r4, [r3, #16]
{
}
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	370c      	adds	r7, #12
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd90      	pop	{r4, r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	0802b01c 	.word	0x0802b01c
 800b6bc:	08026c18 	.word	0x08026c18

0800b6c0 <_ZN19JUnitTestOutputImplD1Ev>:
struct JUnitTestOutputImpl
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b082      	sub	sp, #8
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	3330      	adds	r3, #48	; 0x30
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f003 ffa4 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	3328      	adds	r3, #40	; 0x28
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f003 ff9f 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f7ff ffa4 	bl	800b62c <_ZN20JUnitTestGroupResultD1Ev>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3708      	adds	r7, #8
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
	...

0800b6f0 <_ZN15JUnitTestOutputD1Ev>:

JUnitTestOutput::~JUnitTestOutput()
 800b6f0:	b590      	push	{r4, r7, lr}
 800b6f2:	b083      	sub	sp, #12
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	4a0c      	ldr	r2, [pc, #48]	; (800b72c <_ZN15JUnitTestOutputD1Ev+0x3c>)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	601a      	str	r2, [r3, #0]
{
    resetTestGroupResult();
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f000 f838 	bl	800b774 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
    delete impl_;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	691c      	ldr	r4, [r3, #16]
 800b708:	2c00      	cmp	r4, #0
 800b70a:	d006      	beq.n	800b71a <_ZN15JUnitTestOutputD1Ev+0x2a>
 800b70c:	4620      	mov	r0, r4
 800b70e:	f7ff ffd7 	bl	800b6c0 <_ZN19JUnitTestOutputImplD1Ev>
 800b712:	2138      	movs	r1, #56	; 0x38
 800b714:	4620      	mov	r0, r4
 800b716:	f001 f819 	bl	800c74c <_ZdlPvj>
JUnitTestOutput::~JUnitTestOutput()
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	4618      	mov	r0, r3
 800b71e:	f007 f90b 	bl	8012938 <_ZN10TestOutputD1Ev>
}
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	4618      	mov	r0, r3
 800b726:	370c      	adds	r7, #12
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd90      	pop	{r4, r7, pc}
 800b72c:	0802b01c 	.word	0x0802b01c

0800b730 <_ZN15JUnitTestOutputD0Ev>:
JUnitTestOutput::~JUnitTestOutput()
 800b730:	b580      	push	{r7, lr}
 800b732:	b082      	sub	sp, #8
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
}
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f7ff ffd9 	bl	800b6f0 <_ZN15JUnitTestOutputD1Ev>
 800b73e:	2114      	movs	r1, #20
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f001 f803 	bl	800c74c <_ZdlPvj>
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	4618      	mov	r0, r3
 800b74a:	3708      	adds	r7, #8
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}

0800b750 <_ZN23JUnitTestCaseResultNodeD1Ev>:
struct JUnitTestCaseResultNode
 800b750:	b580      	push	{r7, lr}
 800b752:	b082      	sub	sp, #8
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	3314      	adds	r3, #20
 800b75c:	4618      	mov	r0, r3
 800b75e:	f003 ff5c 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	4618      	mov	r0, r3
 800b766:	f003 ff58 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	4618      	mov	r0, r3
 800b76e:	3708      	adds	r7, #8
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <_ZN15JUnitTestOutput20resetTestGroupResultEv>:

void JUnitTestOutput::resetTestGroupResult()
{
 800b774:	b590      	push	{r4, r7, lr}
 800b776:	b087      	sub	sp, #28
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
    impl_->results_.testCount_ = 0;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	691b      	ldr	r3, [r3, #16]
 800b780:	2200      	movs	r2, #0
 800b782:	601a      	str	r2, [r3, #0]
    impl_->results_.failureCount_ = 0;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	691b      	ldr	r3, [r3, #16]
 800b788:	2200      	movs	r2, #0
 800b78a:	605a      	str	r2, [r3, #4]
    impl_->results_.group_ = "";
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	691b      	ldr	r3, [r3, #16]
 800b790:	f103 0414 	add.w	r4, r3, #20
 800b794:	f107 0308 	add.w	r3, r7, #8
 800b798:	491d      	ldr	r1, [pc, #116]	; (800b810 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x9c>)
 800b79a:	4618      	mov	r0, r3
 800b79c:	f003 fb85 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800b7a0:	f107 0308 	add.w	r3, r7, #8
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	f003 fbeb 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 800b7ac:	f107 0308 	add.w	r3, r7, #8
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f003 ff32 	bl	800f61a <_ZN12SimpleStringD1Ev>
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	691b      	ldr	r3, [r3, #16]
 800b7ba:	69db      	ldr	r3, [r3, #28]
 800b7bc:	617b      	str	r3, [r7, #20]
    while (cur) {
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d018      	beq.n	800b7f6 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x82>
        JUnitTestCaseResultNode* tmp = cur->next_;
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c8:	613b      	str	r3, [r7, #16]
        delete cur->failure_;
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	68db      	ldr	r3, [r3, #12]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d004      	beq.n	800b7dc <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x68>
 800b7d2:	681a      	ldr	r2, [r3, #0]
 800b7d4:	3204      	adds	r2, #4
 800b7d6:	6812      	ldr	r2, [r2, #0]
 800b7d8:	4618      	mov	r0, r3
 800b7da:	4790      	blx	r2
        delete cur;
 800b7dc:	697c      	ldr	r4, [r7, #20]
 800b7de:	2c00      	cmp	r4, #0
 800b7e0:	d006      	beq.n	800b7f0 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x7c>
 800b7e2:	4620      	mov	r0, r4
 800b7e4:	f7ff ffb4 	bl	800b750 <_ZN23JUnitTestCaseResultNodeD1Ev>
 800b7e8:	2128      	movs	r1, #40	; 0x28
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	f000 ffae 	bl	800c74c <_ZdlPvj>
        cur = tmp;
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	617b      	str	r3, [r7, #20]
    while (cur) {
 800b7f4:	e7e3      	b.n	800b7be <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x4a>
    }
    impl_->results_.head_ = NULLPTR;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	691b      	ldr	r3, [r3, #16]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	61da      	str	r2, [r3, #28]
    impl_->results_.tail_ = NULLPTR;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	691b      	ldr	r3, [r3, #16]
 800b802:	2200      	movs	r2, #0
 800b804:	621a      	str	r2, [r3, #32]
}
 800b806:	bf00      	nop
 800b808:	371c      	adds	r7, #28
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd90      	pop	{r4, r7, pc}
 800b80e:	bf00      	nop
 800b810:	08026c14 	.word	0x08026c14

0800b814 <_ZN15JUnitTestOutput17printTestsStartedEv>:

void JUnitTestOutput::printTestsStarted()
{
 800b814:	b480      	push	{r7}
 800b816:	b083      	sub	sp, #12
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
}
 800b81c:	bf00      	nop
 800b81e:	370c      	adds	r7, #12
 800b820:	46bd      	mov	sp, r7
 800b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b826:	4770      	bx	lr

0800b828 <_ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 800b828:	b480      	push	{r7}
 800b82a:	b083      	sub	sp, #12
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	6039      	str	r1, [r7, #0]
}
 800b832:	bf00      	nop
 800b834:	370c      	adds	r7, #12
 800b836:	46bd      	mov	sp, r7
 800b838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83c:	4770      	bx	lr

0800b83e <_ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult>:

void JUnitTestOutput::printCurrentTestEnded(const TestResult& result)
{
 800b83e:	b590      	push	{r4, r7, lr}
 800b840:	b083      	sub	sp, #12
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]
 800b846:	6039      	str	r1, [r7, #0]
    impl_->results_.tail_->execTime_ = result.getCurrentTestTotalExecutionTime();
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	691b      	ldr	r3, [r3, #16]
 800b84c:	6a1c      	ldr	r4, [r3, #32]
 800b84e:	6838      	ldr	r0, [r7, #0]
 800b850:	f009 f9c6 	bl	8014be0 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800b854:	4603      	mov	r3, r0
 800b856:	60a3      	str	r3, [r4, #8]
    impl_->results_.tail_->checkCount_ = result.getCheckCount();
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	691b      	ldr	r3, [r3, #16]
 800b85c:	6a1c      	ldr	r4, [r3, #32]
 800b85e:	6838      	ldr	r0, [r7, #0]
 800b860:	f7ff fe8a 	bl	800b578 <_ZNK10TestResult13getCheckCountEv>
 800b864:	4603      	mov	r3, r0
 800b866:	6223      	str	r3, [r4, #32]
}
 800b868:	bf00      	nop
 800b86a:	370c      	adds	r7, #12
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd90      	pop	{r4, r7, pc}

0800b870 <_ZN15JUnitTestOutput15printTestsEndedERK10TestResult>:

void JUnitTestOutput::printTestsEnded(const TestResult& /*result*/)
{
 800b870:	b480      	push	{r7}
 800b872:	b083      	sub	sp, #12
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	6039      	str	r1, [r7, #0]
}
 800b87a:	bf00      	nop
 800b87c:	370c      	adds	r7, #12
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr

0800b886 <_ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult>:

void JUnitTestOutput::printCurrentGroupEnded(const TestResult& result)
{
 800b886:	b590      	push	{r4, r7, lr}
 800b888:	b083      	sub	sp, #12
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
 800b88e:	6039      	str	r1, [r7, #0]
    impl_->results_.groupExecTime_ = result.getCurrentGroupTotalExecutionTime();
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	691c      	ldr	r4, [r3, #16]
 800b894:	6838      	ldr	r0, [r7, #0]
 800b896:	f009 f9af 	bl	8014bf8 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>
 800b89a:	4603      	mov	r3, r0
 800b89c:	6123      	str	r3, [r4, #16]
    writeTestGroupToFile();
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	3364      	adds	r3, #100	; 0x64
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	4798      	blx	r3
    resetTestGroupResult();
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f7ff ff62 	bl	800b774 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
}
 800b8b0:	bf00      	nop
 800b8b2:	370c      	adds	r7, #12
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd90      	pop	{r4, r7, pc}

0800b8b8 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800b8b8:	b590      	push	{r4, r7, lr}
 800b8ba:	b089      	sub	sp, #36	; 0x24
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	6039      	str	r1, [r7, #0]
    impl_->results_.testCount_++;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	691b      	ldr	r3, [r3, #16]
 800b8c6:	681a      	ldr	r2, [r3, #0]
 800b8c8:	3201      	adds	r2, #1
 800b8ca:	601a      	str	r2, [r3, #0]
    impl_->results_.group_ = test.getGroup();
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	691b      	ldr	r3, [r3, #16]
 800b8d0:	f103 0414 	add.w	r4, r3, #20
 800b8d4:	f107 0308 	add.w	r3, r7, #8
 800b8d8:	6839      	ldr	r1, [r7, #0]
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f009 fcef 	bl	80152be <_ZNK10UtestShell8getGroupEv>
 800b8e0:	f107 0308 	add.w	r3, r7, #8
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	f003 fb4b 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 800b8ec:	f107 0308 	add.w	r3, r7, #8
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f003 fe92 	bl	800f61a <_ZN12SimpleStringD1Ev>
    impl_->results_.startTime_ = (size_t) GetPlatformSpecificTimeInMillis();
 800b8f6:	4b3c      	ldr	r3, [pc, #240]	; (800b9e8 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x130>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	4798      	blx	r3
 800b8fc:	4602      	mov	r2, r0
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	691b      	ldr	r3, [r3, #16]
 800b902:	60da      	str	r2, [r3, #12]

    if (impl_->results_.tail_ == NULLPTR) {
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	691b      	ldr	r3, [r3, #16]
 800b908:	6a1b      	ldr	r3, [r3, #32]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d110      	bne.n	800b930 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x78>
        impl_->results_.head_ = impl_->results_.tail_
                = new JUnitTestCaseResultNode;
 800b90e:	2288      	movs	r2, #136	; 0x88
 800b910:	4936      	ldr	r1, [pc, #216]	; (800b9ec <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 800b912:	2028      	movs	r0, #40	; 0x28
 800b914:	f000 ff06 	bl	800c724 <_ZnwjPKci>
 800b918:	4604      	mov	r4, r0
 800b91a:	4620      	mov	r0, r4
 800b91c:	f7ff fe38 	bl	800b590 <_ZN23JUnitTestCaseResultNodeC1Ev>
        impl_->results_.head_ = impl_->results_.tail_
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	691b      	ldr	r3, [r3, #16]
                = new JUnitTestCaseResultNode;
 800b924:	621c      	str	r4, [r3, #32]
        impl_->results_.head_ = impl_->results_.tail_
 800b926:	687a      	ldr	r2, [r7, #4]
 800b928:	6912      	ldr	r2, [r2, #16]
 800b92a:	6a1b      	ldr	r3, [r3, #32]
 800b92c:	61d3      	str	r3, [r2, #28]
 800b92e:	e013      	b.n	800b958 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0xa0>
    }
    else {
        impl_->results_.tail_->next_ = new JUnitTestCaseResultNode;
 800b930:	228b      	movs	r2, #139	; 0x8b
 800b932:	492e      	ldr	r1, [pc, #184]	; (800b9ec <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 800b934:	2028      	movs	r0, #40	; 0x28
 800b936:	f000 fef5 	bl	800c724 <_ZnwjPKci>
 800b93a:	4604      	mov	r4, r0
 800b93c:	4620      	mov	r0, r4
 800b93e:	f7ff fe27 	bl	800b590 <_ZN23JUnitTestCaseResultNodeC1Ev>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	691b      	ldr	r3, [r3, #16]
 800b946:	6a1b      	ldr	r3, [r3, #32]
 800b948:	625c      	str	r4, [r3, #36]	; 0x24
        impl_->results_.tail_ = impl_->results_.tail_->next_;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	691b      	ldr	r3, [r3, #16]
 800b94e:	6a1a      	ldr	r2, [r3, #32]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	691b      	ldr	r3, [r3, #16]
 800b954:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b956:	621a      	str	r2, [r3, #32]
    }
    impl_->results_.tail_->name_ = test.getName();
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	691b      	ldr	r3, [r3, #16]
 800b95c:	6a1b      	ldr	r3, [r3, #32]
 800b95e:	461c      	mov	r4, r3
 800b960:	f107 0310 	add.w	r3, r7, #16
 800b964:	6839      	ldr	r1, [r7, #0]
 800b966:	4618      	mov	r0, r3
 800b968:	f009 fc9a 	bl	80152a0 <_ZNK10UtestShell7getNameEv>
 800b96c:	f107 0310 	add.w	r3, r7, #16
 800b970:	4619      	mov	r1, r3
 800b972:	4620      	mov	r0, r4
 800b974:	f003 fb05 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 800b978:	f107 0310 	add.w	r3, r7, #16
 800b97c:	4618      	mov	r0, r3
 800b97e:	f003 fe4c 	bl	800f61a <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->file_ = test.getFile();
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	691b      	ldr	r3, [r3, #16]
 800b986:	6a1b      	ldr	r3, [r3, #32]
 800b988:	f103 0414 	add.w	r4, r3, #20
 800b98c:	f107 0318 	add.w	r3, r7, #24
 800b990:	6839      	ldr	r1, [r7, #0]
 800b992:	4618      	mov	r0, r3
 800b994:	f009 fd55 	bl	8015442 <_ZNK10UtestShell7getFileEv>
 800b998:	f107 0318 	add.w	r3, r7, #24
 800b99c:	4619      	mov	r1, r3
 800b99e:	4620      	mov	r0, r4
 800b9a0:	f003 faef 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 800b9a4:	f107 0318 	add.w	r3, r7, #24
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f003 fe36 	bl	800f61a <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->lineNumber_ = test.getLineNumber();
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	691b      	ldr	r3, [r3, #16]
 800b9b2:	6a1c      	ldr	r4, [r3, #32]
 800b9b4:	6838      	ldr	r0, [r7, #0]
 800b9b6:	f009 fd53 	bl	8015460 <_ZNK10UtestShell13getLineNumberEv>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	61e3      	str	r3, [r4, #28]
    if (!test.willRun()) {
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	3318      	adds	r3, #24
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	6838      	ldr	r0, [r7, #0]
 800b9c8:	4798      	blx	r3
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	f083 0301 	eor.w	r3, r3, #1
 800b9d0:	b2db      	uxtb	r3, r3
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d004      	beq.n	800b9e0 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x128>
        impl_->results_.tail_->ignored_ = true;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	691b      	ldr	r3, [r3, #16]
 800b9da:	6a1b      	ldr	r3, [r3, #32]
 800b9dc:	2201      	movs	r2, #1
 800b9de:	741a      	strb	r2, [r3, #16]
    }
}
 800b9e0:	bf00      	nop
 800b9e2:	3724      	adds	r7, #36	; 0x24
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd90      	pop	{r4, r7, pc}
 800b9e8:	200000a8 	.word	0x200000a8
 800b9ec:	08026c18 	.word	0x08026c18

0800b9f0 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::createFileName(const SimpleString& group)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b08a      	sub	sp, #40	; 0x28
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	60f8      	str	r0, [r7, #12]
 800b9f8:	60b9      	str	r1, [r7, #8]
 800b9fa:	607a      	str	r2, [r7, #4]
    SimpleString fileName = "cpputest_";
 800b9fc:	f107 0310 	add.w	r3, r7, #16
 800ba00:	4928      	ldr	r1, [pc, #160]	; (800baa4 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb4>)
 800ba02:	4618      	mov	r0, r3
 800ba04:	f003 fa51 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
    if (!impl_->package_.isEmpty()) {
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	691b      	ldr	r3, [r3, #16]
 800ba0c:	3328      	adds	r3, #40	; 0x28
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f003 fdf2 	bl	800f5f8 <_ZNK12SimpleString7isEmptyEv>
 800ba14:	4603      	mov	r3, r0
 800ba16:	f083 0301 	eor.w	r3, r3, #1
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d00f      	beq.n	800ba40 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0x50>
        fileName += impl_->package_;
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	691b      	ldr	r3, [r3, #16]
 800ba24:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800ba28:	f107 0310 	add.w	r3, r7, #16
 800ba2c:	4611      	mov	r1, r2
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f003 fe70 	bl	800f714 <_ZN12SimpleStringpLERKS_>
        fileName += "_";
 800ba34:	f107 0310 	add.w	r3, r7, #16
 800ba38:	491b      	ldr	r1, [pc, #108]	; (800baa8 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb8>)
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f003 fe7c 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    }
    fileName += group;
 800ba40:	f107 0310 	add.w	r3, r7, #16
 800ba44:	6879      	ldr	r1, [r7, #4]
 800ba46:	4618      	mov	r0, r3
 800ba48:	f003 fe64 	bl	800f714 <_ZN12SimpleStringpLERKS_>
    return encodeFileName(fileName) + ".xml";
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	3384      	adds	r3, #132	; 0x84
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f107 0018 	add.w	r0, r7, #24
 800ba58:	f107 0210 	add.w	r2, r7, #16
 800ba5c:	68b9      	ldr	r1, [r7, #8]
 800ba5e:	4798      	blx	r3
 800ba60:	f107 0320 	add.w	r3, r7, #32
 800ba64:	4911      	ldr	r1, [pc, #68]	; (800baac <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xbc>)
 800ba66:	4618      	mov	r0, r3
 800ba68:	f003 fa1f 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	f107 0220 	add.w	r2, r7, #32
 800ba72:	f107 0118 	add.w	r1, r7, #24
 800ba76:	4618      	mov	r0, r3
 800ba78:	f003 fe31 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 800ba7c:	f107 0320 	add.w	r3, r7, #32
 800ba80:	4618      	mov	r0, r3
 800ba82:	f003 fdca 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800ba86:	f107 0318 	add.w	r3, r7, #24
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f003 fdc5 	bl	800f61a <_ZN12SimpleStringD1Ev>
    SimpleString fileName = "cpputest_";
 800ba90:	f107 0310 	add.w	r3, r7, #16
 800ba94:	4618      	mov	r0, r3
 800ba96:	f003 fdc0 	bl	800f61a <_ZN12SimpleStringD1Ev>
    return encodeFileName(fileName) + ".xml";
 800ba9a:	bf00      	nop
}
 800ba9c:	68f8      	ldr	r0, [r7, #12]
 800ba9e:	3728      	adds	r7, #40	; 0x28
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}
 800baa4:	08026c34 	.word	0x08026c34
 800baa8:	08026c40 	.word	0x08026c40
 800baac:	08026c44 	.word	0x08026c44

0800bab0 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::encodeFileName(const SimpleString& fileName)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b086      	sub	sp, #24
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	60f8      	str	r0, [r7, #12]
 800bab8:	60b9      	str	r1, [r7, #8]
 800baba:	607a      	str	r2, [r7, #4]
    // special character list based on: https://en.wikipedia.org/wiki/Filename
    static const char* const forbiddenCharacters = "/\\?%*:|\"<>";

    SimpleString result = fileName;
 800babc:	6879      	ldr	r1, [r7, #4]
 800babe:	68f8      	ldr	r0, [r7, #12]
 800bac0:	f003 fa47 	bl	800ef52 <_ZN12SimpleStringC1ERKS_>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 800bac4:	4b0a      	ldr	r3, [pc, #40]	; (800baf0 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x40>)
 800bac6:	617b      	str	r3, [r7, #20]
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d00a      	beq.n	800bae6 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x36>
        result.replace(*sym, '_');
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	225f      	movs	r2, #95	; 0x5f
 800bad6:	4619      	mov	r1, r3
 800bad8:	68f8      	ldr	r0, [r7, #12]
 800bada:	f003 fbcc 	bl	800f276 <_ZN12SimpleString7replaceEcc>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	3301      	adds	r3, #1
 800bae2:	617b      	str	r3, [r7, #20]
 800bae4:	e7f0      	b.n	800bac8 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x18>
    }
    return result;
 800bae6:	bf00      	nop
}
 800bae8:	68f8      	ldr	r0, [r7, #12]
 800baea:	3718      	adds	r7, #24
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}
 800baf0:	08026c4c 	.word	0x08026c4c

0800baf4 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>:

void JUnitTestOutput::setPackageName(const SimpleString& package)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b082      	sub	sp, #8
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	6039      	str	r1, [r7, #0]
    if (impl_ != NULLPTR) {
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	691b      	ldr	r3, [r3, #16]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d006      	beq.n	800bb14 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString+0x20>
        impl_->package_ = package;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	691b      	ldr	r3, [r3, #16]
 800bb0a:	3328      	adds	r3, #40	; 0x28
 800bb0c:	6839      	ldr	r1, [r7, #0]
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f003 fa37 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
    }
}
 800bb14:	bf00      	nop
 800bb16:	3708      	adds	r7, #8
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <_ZN15JUnitTestOutput14writeXmlHeaderEv>:

void JUnitTestOutput::writeXmlHeader()
{
 800bb1c:	b590      	push	{r4, r7, lr}
 800bb1e:	b085      	sub	sp, #20
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
    writeToFile("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	3368      	adds	r3, #104	; 0x68
 800bb2a:	681c      	ldr	r4, [r3, #0]
 800bb2c:	f107 0308 	add.w	r3, r7, #8
 800bb30:	4908      	ldr	r1, [pc, #32]	; (800bb54 <_ZN15JUnitTestOutput14writeXmlHeaderEv+0x38>)
 800bb32:	4618      	mov	r0, r3
 800bb34:	f003 f9b9 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800bb38:	f107 0308 	add.w	r3, r7, #8
 800bb3c:	4619      	mov	r1, r3
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	47a0      	blx	r4
 800bb42:	f107 0308 	add.w	r3, r7, #8
 800bb46:	4618      	mov	r0, r3
 800bb48:	f003 fd67 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 800bb4c:	bf00      	nop
 800bb4e:	3714      	adds	r7, #20
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd90      	pop	{r4, r7, pc}
 800bb54:	08026c58 	.word	0x08026c58

0800bb58 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv>:

void JUnitTestOutput::writeTestSuiteSummary()
{
 800bb58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb5c:	b08a      	sub	sp, #40	; 0x28
 800bb5e:	af04      	add	r7, sp, #16
 800bb60:	6078      	str	r0, [r7, #4]
    SimpleString
            buf =
                    StringFromFormat(
                            "<testsuite errors=\"0\" failures=\"%d\" hostname=\"localhost\" name=\"%s\" tests=\"%d\" time=\"%d.%03d\" timestamp=\"%s\">\n",
                            (int)impl_->results_.failureCount_,
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	691b      	ldr	r3, [r3, #16]
 800bb66:	685b      	ldr	r3, [r3, #4]
                            impl_->results_.group_.asCharString(),
                            (int) impl_->results_.testCount_,
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
                            GetPlatformSpecificTimeString());
 800bb68:	4698      	mov	r8, r3
                            impl_->results_.group_.asCharString(),
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	691b      	ldr	r3, [r3, #16]
                            GetPlatformSpecificTimeString());
 800bb6e:	3314      	adds	r3, #20
 800bb70:	4618      	mov	r0, r3
 800bb72:	f003 fd25 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 800bb76:	4604      	mov	r4, r0
                            (int) impl_->results_.testCount_,
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	691b      	ldr	r3, [r3, #16]
 800bb7c:	681b      	ldr	r3, [r3, #0]
                            GetPlatformSpecificTimeString());
 800bb7e:	461d      	mov	r5, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	691b      	ldr	r3, [r3, #16]
 800bb84:	691b      	ldr	r3, [r3, #16]
 800bb86:	4a23      	ldr	r2, [pc, #140]	; (800bc14 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 800bb88:	fba2 2303 	umull	r2, r3, r2, r3
 800bb8c:	099b      	lsrs	r3, r3, #6
                            GetPlatformSpecificTimeString());
 800bb8e:	461e      	mov	r6, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	691b      	ldr	r3, [r3, #16]
 800bb94:	691a      	ldr	r2, [r3, #16]
 800bb96:	4b1f      	ldr	r3, [pc, #124]	; (800bc14 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 800bb98:	fba3 1302 	umull	r1, r3, r3, r2
 800bb9c:	099b      	lsrs	r3, r3, #6
 800bb9e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800bba2:	fb01 f303 	mul.w	r3, r1, r3
 800bba6:	1ad3      	subs	r3, r2, r3
                            GetPlatformSpecificTimeString());
 800bba8:	603b      	str	r3, [r7, #0]
 800bbaa:	4b1b      	ldr	r3, [pc, #108]	; (800bc18 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc0>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	4798      	blx	r3
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	f107 0008 	add.w	r0, r7, #8
 800bbb6:	9303      	str	r3, [sp, #12]
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	9302      	str	r3, [sp, #8]
 800bbbc:	9601      	str	r6, [sp, #4]
 800bbbe:	9500      	str	r5, [sp, #0]
 800bbc0:	4623      	mov	r3, r4
 800bbc2:	4642      	mov	r2, r8
 800bbc4:	4915      	ldr	r1, [pc, #84]	; (800bc1c <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc4>)
 800bbc6:	f004 fa2f 	bl	8010028 <_Z16StringFromFormatPKcz>
    writeToFile(buf.asCharString());
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	3368      	adds	r3, #104	; 0x68
 800bbd0:	681c      	ldr	r4, [r3, #0]
 800bbd2:	f107 0308 	add.w	r3, r7, #8
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f003 fcf2 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 800bbdc:	4602      	mov	r2, r0
 800bbde:	f107 0310 	add.w	r3, r7, #16
 800bbe2:	4611      	mov	r1, r2
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f003 f960 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800bbea:	f107 0310 	add.w	r3, r7, #16
 800bbee:	4619      	mov	r1, r3
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	47a0      	blx	r4
 800bbf4:	f107 0310 	add.w	r3, r7, #16
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f003 fd0e 	bl	800f61a <_ZN12SimpleStringD1Ev>
                            GetPlatformSpecificTimeString());
 800bbfe:	f107 0308 	add.w	r3, r7, #8
 800bc02:	4618      	mov	r0, r3
 800bc04:	f003 fd09 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 800bc08:	bf00      	nop
 800bc0a:	3718      	adds	r7, #24
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc12:	bf00      	nop
 800bc14:	10624dd3 	.word	0x10624dd3
 800bc18:	200000ac 	.word	0x200000ac
 800bc1c:	08026c84 	.word	0x08026c84

0800bc20 <_ZN15JUnitTestOutput15writePropertiesEv>:

void JUnitTestOutput::writeProperties()
{
 800bc20:	b590      	push	{r4, r7, lr}
 800bc22:	b087      	sub	sp, #28
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
    writeToFile("<properties>\n");
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	3368      	adds	r3, #104	; 0x68
 800bc2e:	681c      	ldr	r4, [r3, #0]
 800bc30:	f107 0308 	add.w	r3, r7, #8
 800bc34:	4912      	ldr	r1, [pc, #72]	; (800bc80 <_ZN15JUnitTestOutput15writePropertiesEv+0x60>)
 800bc36:	4618      	mov	r0, r3
 800bc38:	f003 f937 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800bc3c:	f107 0308 	add.w	r3, r7, #8
 800bc40:	4619      	mov	r1, r3
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	47a0      	blx	r4
 800bc46:	f107 0308 	add.w	r3, r7, #8
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f003 fce5 	bl	800f61a <_ZN12SimpleStringD1Ev>
    writeToFile("</properties>\n");
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	3368      	adds	r3, #104	; 0x68
 800bc56:	681c      	ldr	r4, [r3, #0]
 800bc58:	f107 0310 	add.w	r3, r7, #16
 800bc5c:	4909      	ldr	r1, [pc, #36]	; (800bc84 <_ZN15JUnitTestOutput15writePropertiesEv+0x64>)
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f003 f923 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800bc64:	f107 0310 	add.w	r3, r7, #16
 800bc68:	4619      	mov	r1, r3
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	47a0      	blx	r4
 800bc6e:	f107 0310 	add.w	r3, r7, #16
 800bc72:	4618      	mov	r0, r3
 800bc74:	f003 fcd1 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 800bc78:	bf00      	nop
 800bc7a:	371c      	adds	r7, #28
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd90      	pop	{r4, r7, pc}
 800bc80:	08026cf4 	.word	0x08026cf4
 800bc84:	08026d04 	.word	0x08026d04

0800bc88 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString>:

SimpleString JUnitTestOutput::encodeXmlText(const SimpleString& textbody)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b084      	sub	sp, #16
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	60f8      	str	r0, [r7, #12]
 800bc90:	60b9      	str	r1, [r7, #8]
 800bc92:	607a      	str	r2, [r7, #4]
    SimpleString buf = textbody.asCharString();
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f003 fc93 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	4619      	mov	r1, r3
 800bc9e:	68f8      	ldr	r0, [r7, #12]
 800bca0:	f003 f903 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
    buf.replace("&", "&amp;");
 800bca4:	4a0e      	ldr	r2, [pc, #56]	; (800bce0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x58>)
 800bca6:	490f      	ldr	r1, [pc, #60]	; (800bce4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x5c>)
 800bca8:	68f8      	ldr	r0, [r7, #12]
 800bcaa:	f003 fb13 	bl	800f2d4 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\"", "&quot;");
 800bcae:	4a0e      	ldr	r2, [pc, #56]	; (800bce8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x60>)
 800bcb0:	490e      	ldr	r1, [pc, #56]	; (800bcec <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x64>)
 800bcb2:	68f8      	ldr	r0, [r7, #12]
 800bcb4:	f003 fb0e 	bl	800f2d4 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("<", "&lt;");
 800bcb8:	4a0d      	ldr	r2, [pc, #52]	; (800bcf0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x68>)
 800bcba:	490e      	ldr	r1, [pc, #56]	; (800bcf4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x6c>)
 800bcbc:	68f8      	ldr	r0, [r7, #12]
 800bcbe:	f003 fb09 	bl	800f2d4 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace(">", "&gt;");
 800bcc2:	4a0d      	ldr	r2, [pc, #52]	; (800bcf8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x70>)
 800bcc4:	490d      	ldr	r1, [pc, #52]	; (800bcfc <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x74>)
 800bcc6:	68f8      	ldr	r0, [r7, #12]
 800bcc8:	f003 fb04 	bl	800f2d4 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\n", "{newline}");
 800bccc:	4a0c      	ldr	r2, [pc, #48]	; (800bd00 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x78>)
 800bcce:	490d      	ldr	r1, [pc, #52]	; (800bd04 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x7c>)
 800bcd0:	68f8      	ldr	r0, [r7, #12]
 800bcd2:	f003 faff 	bl	800f2d4 <_ZN12SimpleString7replaceEPKcS1_>
    return buf;
 800bcd6:	bf00      	nop
}
 800bcd8:	68f8      	ldr	r0, [r7, #12]
 800bcda:	3710      	adds	r7, #16
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	08026d14 	.word	0x08026d14
 800bce4:	08026d1c 	.word	0x08026d1c
 800bce8:	08026d20 	.word	0x08026d20
 800bcec:	08026d28 	.word	0x08026d28
 800bcf0:	08026d2c 	.word	0x08026d2c
 800bcf4:	08026d34 	.word	0x08026d34
 800bcf8:	08026d38 	.word	0x08026d38
 800bcfc:	08026d40 	.word	0x08026d40
 800bd00:	08026d44 	.word	0x08026d44
 800bd04:	08026d50 	.word	0x08026d50

0800bd08 <_ZN15JUnitTestOutput14writeTestCasesEv>:

void JUnitTestOutput::writeTestCases()
{
 800bd08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd0c:	b096      	sub	sp, #88	; 0x58
 800bd0e:	af08      	add	r7, sp, #32
 800bd10:	60f8      	str	r0, [r7, #12]
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	691b      	ldr	r3, [r3, #16]
 800bd16:	69db      	ldr	r3, [r3, #28]
 800bd18:	637b      	str	r3, [r7, #52]	; 0x34

    while (cur) {
 800bd1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	f000 80b2 	beq.w	800be86 <_ZN15JUnitTestOutput14writeTestCasesEv+0x17e>
        SimpleString buf = StringFromFormat(
                "<testcase classname=\"%s%s%s\" name=\"%s\" assertions=\"%d\" time=\"%d.%03d\" file=\"%s\" line=\"%d\">\n",
                impl_->package_.asCharString(),
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	691b      	ldr	r3, [r3, #16]
                impl_->results_.group_.asCharString(),
                cur->name_.asCharString(),
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
                cur->file_.asCharString(),
                (int) cur->lineNumber_);
 800bd26:	3328      	adds	r3, #40	; 0x28
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f003 fc49 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 800bd2e:	4680      	mov	r8, r0
                impl_->package_.isEmpty() ? "" : ".",
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	691b      	ldr	r3, [r3, #16]
 800bd34:	3328      	adds	r3, #40	; 0x28
 800bd36:	4618      	mov	r0, r3
 800bd38:	f003 fc5e 	bl	800f5f8 <_ZNK12SimpleString7isEmptyEv>
 800bd3c:	4603      	mov	r3, r0
                (int) cur->lineNumber_);
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d001      	beq.n	800bd46 <_ZN15JUnitTestOutput14writeTestCasesEv+0x3e>
 800bd42:	4c53      	ldr	r4, [pc, #332]	; (800be90 <_ZN15JUnitTestOutput14writeTestCasesEv+0x188>)
 800bd44:	e000      	b.n	800bd48 <_ZN15JUnitTestOutput14writeTestCasesEv+0x40>
 800bd46:	4c53      	ldr	r4, [pc, #332]	; (800be94 <_ZN15JUnitTestOutput14writeTestCasesEv+0x18c>)
                impl_->results_.group_.asCharString(),
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	691b      	ldr	r3, [r3, #16]
                (int) cur->lineNumber_);
 800bd4c:	3314      	adds	r3, #20
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f003 fc36 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 800bd54:	4605      	mov	r5, r0
 800bd56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f003 fc31 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 800bd5e:	4606      	mov	r6, r0
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
 800bd60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd62:	6a1a      	ldr	r2, [r3, #32]
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	691b      	ldr	r3, [r3, #16]
 800bd68:	689b      	ldr	r3, [r3, #8]
 800bd6a:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 800bd6c:	60bb      	str	r3, [r7, #8]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 800bd6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd70:	689b      	ldr	r3, [r3, #8]
 800bd72:	4a49      	ldr	r2, [pc, #292]	; (800be98 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 800bd74:	fba2 2303 	umull	r2, r3, r2, r3
 800bd78:	099b      	lsrs	r3, r3, #6
                (int) cur->lineNumber_);
 800bd7a:	607b      	str	r3, [r7, #4]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 800bd7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd7e:	689a      	ldr	r2, [r3, #8]
 800bd80:	4b45      	ldr	r3, [pc, #276]	; (800be98 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 800bd82:	fba3 1302 	umull	r1, r3, r3, r2
 800bd86:	099b      	lsrs	r3, r3, #6
 800bd88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800bd8c:	fb01 f303 	mul.w	r3, r1, r3
 800bd90:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 800bd92:	603b      	str	r3, [r7, #0]
 800bd94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd96:	3314      	adds	r3, #20
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f003 fc11 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 800bd9e:	4602      	mov	r2, r0
 800bda0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bda2:	69db      	ldr	r3, [r3, #28]
 800bda4:	f107 0014 	add.w	r0, r7, #20
 800bda8:	9306      	str	r3, [sp, #24]
 800bdaa:	9205      	str	r2, [sp, #20]
 800bdac:	683a      	ldr	r2, [r7, #0]
 800bdae:	9204      	str	r2, [sp, #16]
 800bdb0:	687a      	ldr	r2, [r7, #4]
 800bdb2:	9203      	str	r2, [sp, #12]
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	9302      	str	r3, [sp, #8]
 800bdb8:	9601      	str	r6, [sp, #4]
 800bdba:	9500      	str	r5, [sp, #0]
 800bdbc:	4623      	mov	r3, r4
 800bdbe:	4642      	mov	r2, r8
 800bdc0:	4936      	ldr	r1, [pc, #216]	; (800be9c <_ZN15JUnitTestOutput14writeTestCasesEv+0x194>)
 800bdc2:	f004 f931 	bl	8010028 <_Z16StringFromFormatPKcz>
        writeToFile(buf.asCharString());
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	3368      	adds	r3, #104	; 0x68
 800bdcc:	681c      	ldr	r4, [r3, #0]
 800bdce:	f107 0314 	add.w	r3, r7, #20
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f003 fbf4 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 800bdd8:	4602      	mov	r2, r0
 800bdda:	f107 031c 	add.w	r3, r7, #28
 800bdde:	4611      	mov	r1, r2
 800bde0:	4618      	mov	r0, r3
 800bde2:	f003 f862 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800bde6:	f107 031c 	add.w	r3, r7, #28
 800bdea:	4619      	mov	r1, r3
 800bdec:	68f8      	ldr	r0, [r7, #12]
 800bdee:	47a0      	blx	r4
 800bdf0:	f107 031c 	add.w	r3, r7, #28
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f003 fc10 	bl	800f61a <_ZN12SimpleStringD1Ev>

        impl_->results_.totalCheckCount_ = cur->checkCount_;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	691b      	ldr	r3, [r3, #16]
 800bdfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be00:	6a12      	ldr	r2, [r2, #32]
 800be02:	609a      	str	r2, [r3, #8]

        if (cur->failure_) {
 800be04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be06:	68db      	ldr	r3, [r3, #12]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d007      	beq.n	800be1c <_ZN15JUnitTestOutput14writeTestCasesEv+0x114>
            writeFailure(cur);
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	3388      	adds	r3, #136	; 0x88
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800be16:	68f8      	ldr	r0, [r7, #12]
 800be18:	4798      	blx	r3
 800be1a:	e017      	b.n	800be4c <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
        }
        else if (cur->ignored_) {
 800be1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be1e:	7c1b      	ldrb	r3, [r3, #16]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d013      	beq.n	800be4c <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
            writeToFile("<skipped />\n");
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	3368      	adds	r3, #104	; 0x68
 800be2a:	681c      	ldr	r4, [r3, #0]
 800be2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be30:	491b      	ldr	r1, [pc, #108]	; (800bea0 <_ZN15JUnitTestOutput14writeTestCasesEv+0x198>)
 800be32:	4618      	mov	r0, r3
 800be34:	f003 f839 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800be38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be3c:	4619      	mov	r1, r3
 800be3e:	68f8      	ldr	r0, [r7, #12]
 800be40:	47a0      	blx	r4
 800be42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be46:	4618      	mov	r0, r3
 800be48:	f003 fbe7 	bl	800f61a <_ZN12SimpleStringD1Ev>
        }
        writeToFile("</testcase>\n");
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	3368      	adds	r3, #104	; 0x68
 800be52:	681c      	ldr	r4, [r3, #0]
 800be54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800be58:	4912      	ldr	r1, [pc, #72]	; (800bea4 <_ZN15JUnitTestOutput14writeTestCasesEv+0x19c>)
 800be5a:	4618      	mov	r0, r3
 800be5c:	f003 f825 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800be60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800be64:	4619      	mov	r1, r3
 800be66:	68f8      	ldr	r0, [r7, #12]
 800be68:	47a0      	blx	r4
 800be6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800be6e:	4618      	mov	r0, r3
 800be70:	f003 fbd3 	bl	800f61a <_ZN12SimpleStringD1Ev>
        cur = cur->next_;
 800be74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be78:	637b      	str	r3, [r7, #52]	; 0x34
                (int) cur->lineNumber_);
 800be7a:	f107 0314 	add.w	r3, r7, #20
 800be7e:	4618      	mov	r0, r3
 800be80:	f003 fbcb 	bl	800f61a <_ZN12SimpleStringD1Ev>
    while (cur) {
 800be84:	e749      	b.n	800bd1a <_ZN15JUnitTestOutput14writeTestCasesEv+0x12>
    }
}
 800be86:	bf00      	nop
 800be88:	3738      	adds	r7, #56	; 0x38
 800be8a:	46bd      	mov	sp, r7
 800be8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be90:	08026c14 	.word	0x08026c14
 800be94:	08026d54 	.word	0x08026d54
 800be98:	10624dd3 	.word	0x10624dd3
 800be9c:	08026d58 	.word	0x08026d58
 800bea0:	08026db4 	.word	0x08026db4
 800bea4:	08026dc4 	.word	0x08026dc4

0800bea8 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode>:

void JUnitTestOutput::writeFailure(JUnitTestCaseResultNode* node)
{
 800bea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800beaa:	b091      	sub	sp, #68	; 0x44
 800beac:	af02      	add	r7, sp, #8
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
    SimpleString buf = StringFromFormat(
            "<failure message=\"%s:%d: %s\" type=\"AssertionFailedError\">\n",
            node->failure_->getFileName().asCharString(),
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	68d9      	ldr	r1, [r3, #12]
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	68db      	ldr	r3, [r3, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	3308      	adds	r3, #8
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f107 0210 	add.w	r2, r7, #16
 800bec4:	4610      	mov	r0, r2
 800bec6:	4798      	blx	r3
            (int) node->failure_->getFailureLineNumber(),
            encodeXmlText(node->failure_->getMessage()).asCharString());
 800bec8:	f107 0310 	add.w	r3, r7, #16
 800becc:	4618      	mov	r0, r3
 800bece:	f003 fb77 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 800bed2:	4605      	mov	r5, r0
            (int) node->failure_->getFailureLineNumber(),
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	68da      	ldr	r2, [r3, #12]
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	68db      	ldr	r3, [r3, #12]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	3314      	adds	r3, #20
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	4610      	mov	r0, r2
 800bee4:	4798      	blx	r3
 800bee6:	4603      	mov	r3, r0
            encodeXmlText(node->failure_->getMessage()).asCharString());
 800bee8:	461e      	mov	r6, r3
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	3380      	adds	r3, #128	; 0x80
 800bef0:	681c      	ldr	r4, [r3, #0]
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	68d9      	ldr	r1, [r3, #12]
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	68db      	ldr	r3, [r3, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	3318      	adds	r3, #24
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f107 0220 	add.w	r2, r7, #32
 800bf04:	4610      	mov	r0, r2
 800bf06:	4798      	blx	r3
 800bf08:	f107 0318 	add.w	r3, r7, #24
 800bf0c:	f107 0220 	add.w	r2, r7, #32
 800bf10:	6879      	ldr	r1, [r7, #4]
 800bf12:	4618      	mov	r0, r3
 800bf14:	47a0      	blx	r4
 800bf16:	f107 0318 	add.w	r3, r7, #24
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f003 fb50 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 800bf20:	4603      	mov	r3, r0
 800bf22:	f107 0008 	add.w	r0, r7, #8
 800bf26:	9300      	str	r3, [sp, #0]
 800bf28:	4633      	mov	r3, r6
 800bf2a:	462a      	mov	r2, r5
 800bf2c:	4924      	ldr	r1, [pc, #144]	; (800bfc0 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x118>)
 800bf2e:	f004 f87b 	bl	8010028 <_Z16StringFromFormatPKcz>
 800bf32:	f107 0318 	add.w	r3, r7, #24
 800bf36:	4618      	mov	r0, r3
 800bf38:	f003 fb6f 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800bf3c:	f107 0320 	add.w	r3, r7, #32
 800bf40:	4618      	mov	r0, r3
 800bf42:	f003 fb6a 	bl	800f61a <_ZN12SimpleStringD1Ev>
            node->failure_->getFileName().asCharString(),
 800bf46:	f107 0310 	add.w	r3, r7, #16
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f003 fb65 	bl	800f61a <_ZN12SimpleStringD1Ev>
    writeToFile(buf.asCharString());
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	3368      	adds	r3, #104	; 0x68
 800bf56:	681c      	ldr	r4, [r3, #0]
 800bf58:	f107 0308 	add.w	r3, r7, #8
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f003 fb2f 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 800bf62:	4602      	mov	r2, r0
 800bf64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bf68:	4611      	mov	r1, r2
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f002 ff9d 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800bf70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bf74:	4619      	mov	r1, r3
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	47a0      	blx	r4
 800bf7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f003 fb4b 	bl	800f61a <_ZN12SimpleStringD1Ev>
    writeToFile("</failure>\n");
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	3368      	adds	r3, #104	; 0x68
 800bf8a:	681c      	ldr	r4, [r3, #0]
 800bf8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bf90:	490c      	ldr	r1, [pc, #48]	; (800bfc4 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x11c>)
 800bf92:	4618      	mov	r0, r3
 800bf94:	f002 ff89 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800bf98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	47a0      	blx	r4
 800bfa2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f003 fb37 	bl	800f61a <_ZN12SimpleStringD1Ev>
            encodeXmlText(node->failure_->getMessage()).asCharString());
 800bfac:	f107 0308 	add.w	r3, r7, #8
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f003 fb32 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 800bfb6:	bf00      	nop
 800bfb8:	373c      	adds	r7, #60	; 0x3c
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfbe:	bf00      	nop
 800bfc0:	08026dd4 	.word	0x08026dd4
 800bfc4:	08026e10 	.word	0x08026e10

0800bfc8 <_ZN15JUnitTestOutput15writeFileEndingEv>:


void JUnitTestOutput::writeFileEnding()
{
 800bfc8:	b590      	push	{r4, r7, lr}
 800bfca:	b08d      	sub	sp, #52	; 0x34
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
    writeToFile("<system-out>");
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	3368      	adds	r3, #104	; 0x68
 800bfd6:	681c      	ldr	r4, [r3, #0]
 800bfd8:	f107 0308 	add.w	r3, r7, #8
 800bfdc:	4933      	ldr	r1, [pc, #204]	; (800c0ac <_ZN15JUnitTestOutput15writeFileEndingEv+0xe4>)
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f002 ff63 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800bfe4:	f107 0308 	add.w	r3, r7, #8
 800bfe8:	4619      	mov	r1, r3
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	47a0      	blx	r4
 800bfee:	f107 0308 	add.w	r3, r7, #8
 800bff2:	4618      	mov	r0, r3
 800bff4:	f003 fb11 	bl	800f61a <_ZN12SimpleStringD1Ev>
    writeToFile(encodeXmlText(impl_->stdOutput_));
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	3368      	adds	r3, #104	; 0x68
 800bffe:	681c      	ldr	r4, [r3, #0]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	3380      	adds	r3, #128	; 0x80
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	6912      	ldr	r2, [r2, #16]
 800c00c:	3230      	adds	r2, #48	; 0x30
 800c00e:	f107 0010 	add.w	r0, r7, #16
 800c012:	6879      	ldr	r1, [r7, #4]
 800c014:	4798      	blx	r3
 800c016:	f107 0310 	add.w	r3, r7, #16
 800c01a:	4619      	mov	r1, r3
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	47a0      	blx	r4
 800c020:	f107 0310 	add.w	r3, r7, #16
 800c024:	4618      	mov	r0, r3
 800c026:	f003 faf8 	bl	800f61a <_ZN12SimpleStringD1Ev>
    writeToFile("</system-out>\n");
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	3368      	adds	r3, #104	; 0x68
 800c030:	681c      	ldr	r4, [r3, #0]
 800c032:	f107 0318 	add.w	r3, r7, #24
 800c036:	491e      	ldr	r1, [pc, #120]	; (800c0b0 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe8>)
 800c038:	4618      	mov	r0, r3
 800c03a:	f002 ff36 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800c03e:	f107 0318 	add.w	r3, r7, #24
 800c042:	4619      	mov	r1, r3
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	47a0      	blx	r4
 800c048:	f107 0318 	add.w	r3, r7, #24
 800c04c:	4618      	mov	r0, r3
 800c04e:	f003 fae4 	bl	800f61a <_ZN12SimpleStringD1Ev>
    writeToFile("<system-err></system-err>\n");
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	3368      	adds	r3, #104	; 0x68
 800c058:	681c      	ldr	r4, [r3, #0]
 800c05a:	f107 0320 	add.w	r3, r7, #32
 800c05e:	4915      	ldr	r1, [pc, #84]	; (800c0b4 <_ZN15JUnitTestOutput15writeFileEndingEv+0xec>)
 800c060:	4618      	mov	r0, r3
 800c062:	f002 ff22 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800c066:	f107 0320 	add.w	r3, r7, #32
 800c06a:	4619      	mov	r1, r3
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	47a0      	blx	r4
 800c070:	f107 0320 	add.w	r3, r7, #32
 800c074:	4618      	mov	r0, r3
 800c076:	f003 fad0 	bl	800f61a <_ZN12SimpleStringD1Ev>
    writeToFile("</testsuite>\n");
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	3368      	adds	r3, #104	; 0x68
 800c080:	681c      	ldr	r4, [r3, #0]
 800c082:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c086:	490c      	ldr	r1, [pc, #48]	; (800c0b8 <_ZN15JUnitTestOutput15writeFileEndingEv+0xf0>)
 800c088:	4618      	mov	r0, r3
 800c08a:	f002 ff0e 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800c08e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c092:	4619      	mov	r1, r3
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	47a0      	blx	r4
 800c098:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c09c:	4618      	mov	r0, r3
 800c09e:	f003 fabc 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 800c0a2:	bf00      	nop
 800c0a4:	3734      	adds	r7, #52	; 0x34
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd90      	pop	{r4, r7, pc}
 800c0aa:	bf00      	nop
 800c0ac:	08026e1c 	.word	0x08026e1c
 800c0b0:	08026e2c 	.word	0x08026e2c
 800c0b4:	08026e3c 	.word	0x08026e3c
 800c0b8:	08026e58 	.word	0x08026e58

0800c0bc <_ZN15JUnitTestOutput20writeTestGroupToFileEv>:

void JUnitTestOutput::writeTestGroupToFile()
{
 800c0bc:	b590      	push	{r4, r7, lr}
 800c0be:	b085      	sub	sp, #20
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
    openFileForWrite(createFileName(impl_->results_.group_));
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	3360      	adds	r3, #96	; 0x60
 800c0ca:	681c      	ldr	r4, [r3, #0]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	335c      	adds	r3, #92	; 0x5c
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	687a      	ldr	r2, [r7, #4]
 800c0d6:	6912      	ldr	r2, [r2, #16]
 800c0d8:	3214      	adds	r2, #20
 800c0da:	f107 0008 	add.w	r0, r7, #8
 800c0de:	6879      	ldr	r1, [r7, #4]
 800c0e0:	4798      	blx	r3
 800c0e2:	f107 0308 	add.w	r3, r7, #8
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	47a0      	blx	r4
 800c0ec:	f107 0308 	add.w	r3, r7, #8
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f003 fa92 	bl	800f61a <_ZN12SimpleStringD1Ev>
    writeXmlHeader();
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	3370      	adds	r3, #112	; 0x70
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	4798      	blx	r3
    writeTestSuiteSummary();
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	3374      	adds	r3, #116	; 0x74
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	4798      	blx	r3
    writeProperties();
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	3378      	adds	r3, #120	; 0x78
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	4798      	blx	r3
    writeTestCases();
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	337c      	adds	r3, #124	; 0x7c
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	4798      	blx	r3
    writeFileEnding();
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	338c      	adds	r3, #140	; 0x8c
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	4798      	blx	r3
    closeFile();
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	336c      	adds	r3, #108	; 0x6c
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	4798      	blx	r3
}
 800c13e:	bf00      	nop
 800c140:	3714      	adds	r7, #20
 800c142:	46bd      	mov	sp, r7
 800c144:	bd90      	pop	{r4, r7, pc}

0800c146 <_ZN15JUnitTestOutput11printBufferEPKc>:

// LCOV_EXCL_START

void JUnitTestOutput::printBuffer(const char*)
{
 800c146:	b480      	push	{r7}
 800c148:	b083      	sub	sp, #12
 800c14a:	af00      	add	r7, sp, #0
 800c14c:	6078      	str	r0, [r7, #4]
 800c14e:	6039      	str	r1, [r7, #0]
}
 800c150:	bf00      	nop
 800c152:	370c      	adds	r7, #12
 800c154:	46bd      	mov	sp, r7
 800c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15a:	4770      	bx	lr

0800c15c <_ZN15JUnitTestOutput5printEPKc>:

void JUnitTestOutput::print(const char *output)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b082      	sub	sp, #8
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	6039      	str	r1, [r7, #0]
    impl_->stdOutput_ += output;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	691b      	ldr	r3, [r3, #16]
 800c16a:	3330      	adds	r3, #48	; 0x30
 800c16c:	6839      	ldr	r1, [r7, #0]
 800c16e:	4618      	mov	r0, r3
 800c170:	f003 fae2 	bl	800f738 <_ZN12SimpleStringpLEPKc>
}
 800c174:	bf00      	nop
 800c176:	3708      	adds	r7, #8
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}

0800c17c <_ZN15JUnitTestOutput5printEl>:

void JUnitTestOutput::print(long)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b083      	sub	sp, #12
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	6039      	str	r1, [r7, #0]
}
 800c186:	bf00      	nop
 800c188:	370c      	adds	r7, #12
 800c18a:	46bd      	mov	sp, r7
 800c18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c190:	4770      	bx	lr

0800c192 <_ZN15JUnitTestOutput5printEj>:

void JUnitTestOutput::print(size_t)
{
 800c192:	b480      	push	{r7}
 800c194:	b083      	sub	sp, #12
 800c196:	af00      	add	r7, sp, #0
 800c198:	6078      	str	r0, [r7, #4]
 800c19a:	6039      	str	r1, [r7, #0]
}
 800c19c:	bf00      	nop
 800c19e:	370c      	adds	r7, #12
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr

0800c1a8 <_ZN15JUnitTestOutput5flushEv>:

void JUnitTestOutput::flush()
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b083      	sub	sp, #12
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
}
 800c1b0:	bf00      	nop
 800c1b2:	370c      	adds	r7, #12
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ba:	4770      	bx	lr

0800c1bc <_ZN15JUnitTestOutput12printFailureERK11TestFailure>:

// LCOV_EXCL_STOP

void JUnitTestOutput::printFailure(const TestFailure& failure)
{
 800c1bc:	b590      	push	{r4, r7, lr}
 800c1be:	b083      	sub	sp, #12
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	6039      	str	r1, [r7, #0]
    if (impl_->results_.tail_->failure_ == NULLPTR) {
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	691b      	ldr	r3, [r3, #16]
 800c1ca:	6a1b      	ldr	r3, [r3, #32]
 800c1cc:	68db      	ldr	r3, [r3, #12]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d113      	bne.n	800c1fa <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x3e>
        impl_->results_.failureCount_++;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	691b      	ldr	r3, [r3, #16]
 800c1d6:	685a      	ldr	r2, [r3, #4]
 800c1d8:	3201      	adds	r2, #1
 800c1da:	605a      	str	r2, [r3, #4]
        impl_->results_.tail_->failure_ = new TestFailure(failure);
 800c1dc:	f240 1233 	movw	r2, #307	; 0x133
 800c1e0:	4908      	ldr	r1, [pc, #32]	; (800c204 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x48>)
 800c1e2:	2034      	movs	r0, #52	; 0x34
 800c1e4:	f000 fa9e 	bl	800c724 <_ZnwjPKci>
 800c1e8:	4604      	mov	r4, r0
 800c1ea:	6839      	ldr	r1, [r7, #0]
 800c1ec:	4620      	mov	r0, r4
 800c1ee:	f004 fd37 	bl	8010c60 <_ZN11TestFailureC1ERKS_>
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	691b      	ldr	r3, [r3, #16]
 800c1f6:	6a1b      	ldr	r3, [r3, #32]
 800c1f8:	60dc      	str	r4, [r3, #12]
    }
}
 800c1fa:	bf00      	nop
 800c1fc:	370c      	adds	r7, #12
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd90      	pop	{r4, r7, pc}
 800c202:	bf00      	nop
 800c204:	08026c18 	.word	0x08026c18

0800c208 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString>:

void JUnitTestOutput::openFileForWrite(const SimpleString& fileName)
{
 800c208:	b5b0      	push	{r4, r5, r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	6039      	str	r1, [r7, #0]
    impl_->file_ = PlatformSpecificFOpen(fileName.asCharString(), "w");
 800c212:	4b08      	ldr	r3, [pc, #32]	; (800c234 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x2c>)
 800c214:	681d      	ldr	r5, [r3, #0]
 800c216:	6838      	ldr	r0, [r7, #0]
 800c218:	f003 f9d2 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 800c21c:	4602      	mov	r2, r0
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	691c      	ldr	r4, [r3, #16]
 800c222:	4905      	ldr	r1, [pc, #20]	; (800c238 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x30>)
 800c224:	4610      	mov	r0, r2
 800c226:	47a8      	blx	r5
 800c228:	4603      	mov	r3, r0
 800c22a:	6263      	str	r3, [r4, #36]	; 0x24
}
 800c22c:	bf00      	nop
 800c22e:	3708      	adds	r7, #8
 800c230:	46bd      	mov	sp, r7
 800c232:	bdb0      	pop	{r4, r5, r7, pc}
 800c234:	200000b4 	.word	0x200000b4
 800c238:	08026e68 	.word	0x08026e68

0800c23c <_ZN15JUnitTestOutput11writeToFileERK12SimpleString>:

void JUnitTestOutput::writeToFile(const SimpleString& buffer)
{
 800c23c:	b590      	push	{r4, r7, lr}
 800c23e:	b083      	sub	sp, #12
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	6039      	str	r1, [r7, #0]
    PlatformSpecificFPuts(buffer.asCharString(), impl_->file_);
 800c246:	4b08      	ldr	r3, [pc, #32]	; (800c268 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString+0x2c>)
 800c248:	681c      	ldr	r4, [r3, #0]
 800c24a:	6838      	ldr	r0, [r7, #0]
 800c24c:	f003 f9b8 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 800c250:	4602      	mov	r2, r0
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	691b      	ldr	r3, [r3, #16]
 800c256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c258:	4619      	mov	r1, r3
 800c25a:	4610      	mov	r0, r2
 800c25c:	47a0      	blx	r4
}
 800c25e:	bf00      	nop
 800c260:	370c      	adds	r7, #12
 800c262:	46bd      	mov	sp, r7
 800c264:	bd90      	pop	{r4, r7, pc}
 800c266:	bf00      	nop
 800c268:	200000b8 	.word	0x200000b8

0800c26c <_ZN15JUnitTestOutput9closeFileEv>:

void JUnitTestOutput::closeFile()
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b082      	sub	sp, #8
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
    PlatformSpecificFClose(impl_->file_);
 800c274:	4b05      	ldr	r3, [pc, #20]	; (800c28c <_ZN15JUnitTestOutput9closeFileEv+0x20>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	687a      	ldr	r2, [r7, #4]
 800c27a:	6912      	ldr	r2, [r2, #16]
 800c27c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c27e:	4610      	mov	r0, r2
 800c280:	4798      	blx	r3
}
 800c282:	bf00      	nop
 800c284:	3708      	adds	r7, #8
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
 800c28a:	bf00      	nop
 800c28c:	200000bc 	.word	0x200000bc

0800c290 <_ZN10TestPlugin14parseArgumentsEiPKPKci>:
    virtual bool parseArguments(int /* ac */, const char *const * /* av */, int /* index */ )
 800c290:	b480      	push	{r7}
 800c292:	b085      	sub	sp, #20
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	607a      	str	r2, [r7, #4]
 800c29c:	603b      	str	r3, [r7, #0]
        return false;
 800c29e:	2300      	movs	r3, #0
    }
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3714      	adds	r7, #20
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2aa:	4770      	bx	lr

0800c2ac <_ZN17MemoryLeakFailureD1Ev>:
class SimpleMutex;

class MemoryLeakFailure
{
public:
    virtual ~MemoryLeakFailure()
 800c2ac:	b480      	push	{r7}
 800c2ae:	b083      	sub	sp, #12
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
    {
 800c2b4:	4a04      	ldr	r2, [pc, #16]	; (800c2c8 <_ZN17MemoryLeakFailureD1Ev+0x1c>)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	601a      	str	r2, [r3, #0]
    }
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	4618      	mov	r0, r3
 800c2be:	370c      	adds	r7, #12
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c6:	4770      	bx	lr
 800c2c8:	0802b0c8 	.word	0x0802b0c8

0800c2cc <_ZN17MemoryLeakFailureD0Ev>:
    virtual ~MemoryLeakFailure()
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b082      	sub	sp, #8
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
    }
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f7ff ffe9 	bl	800c2ac <_ZN17MemoryLeakFailureD1Ev>
 800c2da:	2104      	movs	r1, #4
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f000 fa35 	bl	800c74c <_ZdlPvj>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3708      	adds	r7, #8
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <_ZN18MemLeakScopedMutexC1Ev>:
#if CPPUTEST_USE_MEM_LEAK_DETECTION

class MemLeakScopedMutex
{
public:
    MemLeakScopedMutex() : lock(MemoryLeakWarningPlugin::getGlobalDetector()->getMutex()) { }
 800c2ec:	b590      	push	{r4, r7, lr}
 800c2ee:	b083      	sub	sp, #12
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	687c      	ldr	r4, [r7, #4]
 800c2f6:	f000 fc71 	bl	800cbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f00c ff6c 	bl	80191da <_ZN18MemoryLeakDetector8getMutexEv>
 800c302:	4603      	mov	r3, r0
 800c304:	4619      	mov	r1, r3
 800c306:	4620      	mov	r0, r4
 800c308:	f002 fb24 	bl	800e954 <_ZN15ScopedMutexLockC1EP11SimpleMutex>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	4618      	mov	r0, r3
 800c310:	370c      	adds	r7, #12
 800c312:	46bd      	mov	sp, r7
 800c314:	bd90      	pop	{r4, r7, pc}

0800c316 <_ZN18MemLeakScopedMutexD1Ev>:
class MemLeakScopedMutex
 800c316:	b580      	push	{r7, lr}
 800c318:	b082      	sub	sp, #8
 800c31a:	af00      	add	r7, sp, #0
 800c31c:	6078      	str	r0, [r7, #4]
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	4618      	mov	r0, r3
 800c322:	f002 fb29 	bl	800e978 <_ZN15ScopedMutexLockD1Ev>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	4618      	mov	r0, r3
 800c32a:	3708      	adds	r7, #8
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}

0800c330 <_ZL15mem_leak_mallocjPKcj>:
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
}


static void* mem_leak_malloc(size_t size, const char* file, size_t line)
{
 800c330:	b590      	push	{r4, r7, lr}
 800c332:	b087      	sub	sp, #28
 800c334:	af02      	add	r7, sp, #8
 800c336:	60f8      	str	r0, [r7, #12]
 800c338:	60b9      	str	r1, [r7, #8]
 800c33a:	607a      	str	r2, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentMallocAllocator(), size, file, line, true);
 800c33c:	f000 fc4e 	bl	800cbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800c340:	4604      	mov	r4, r0
 800c342:	f006 f8df 	bl	8012504 <_Z25getCurrentMallocAllocatorv>
 800c346:	4601      	mov	r1, r0
 800c348:	2301      	movs	r3, #1
 800c34a:	9301      	str	r3, [sp, #4]
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	9300      	str	r3, [sp, #0]
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	68fa      	ldr	r2, [r7, #12]
 800c354:	4620      	mov	r0, r4
 800c356:	f00d f983 	bl	8019660 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800c35a:	4603      	mov	r3, r0
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3714      	adds	r7, #20
 800c360:	46bd      	mov	sp, r7
 800c362:	bd90      	pop	{r4, r7, pc}

0800c364 <_ZL13mem_leak_freePvPKcj>:

static void mem_leak_free(void* buffer, const char* file, size_t line)
{
 800c364:	b590      	push	{r4, r7, lr}
 800c366:	b087      	sub	sp, #28
 800c368:	af02      	add	r7, sp, #8
 800c36a:	60f8      	str	r0, [r7, #12]
 800c36c:	60b9      	str	r1, [r7, #8]
 800c36e:	607a      	str	r2, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) buffer);
 800c370:	f000 fc34 	bl	800cbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800c374:	4603      	mov	r3, r0
 800c376:	68f9      	ldr	r1, [r7, #12]
 800c378:	4618      	mov	r0, r3
 800c37a:	f00c ffdd 	bl	8019338 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentMallocAllocator(), (char*) buffer, file, line, true);
 800c37e:	f000 fc2d 	bl	800cbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800c382:	4604      	mov	r4, r0
 800c384:	f006 f8be 	bl	8012504 <_Z25getCurrentMallocAllocatorv>
 800c388:	4601      	mov	r1, r0
 800c38a:	2301      	movs	r3, #1
 800c38c:	9301      	str	r3, [sp, #4]
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	9300      	str	r3, [sp, #0]
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	68fa      	ldr	r2, [r7, #12]
 800c396:	4620      	mov	r0, r4
 800c398:	f00d f996 	bl	80196c8 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 800c39c:	bf00      	nop
 800c39e:	3714      	adds	r7, #20
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd90      	pop	{r4, r7, pc}

0800c3a4 <_ZL16mem_leak_reallocPvjPKcj>:

static void* mem_leak_realloc(void* memory, size_t size, const char* file, size_t line)
{
 800c3a4:	b590      	push	{r4, r7, lr}
 800c3a6:	b089      	sub	sp, #36	; 0x24
 800c3a8:	af04      	add	r7, sp, #16
 800c3aa:	60f8      	str	r0, [r7, #12]
 800c3ac:	60b9      	str	r1, [r7, #8]
 800c3ae:	607a      	str	r2, [r7, #4]
 800c3b0:	603b      	str	r3, [r7, #0]
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
 800c3b2:	f000 fc13 	bl	800cbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800c3b6:	4604      	mov	r4, r0
 800c3b8:	f006 f8a4 	bl	8012504 <_Z25getCurrentMallocAllocatorv>
 800c3bc:	4601      	mov	r1, r0
 800c3be:	2301      	movs	r3, #1
 800c3c0:	9302      	str	r3, [sp, #8]
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	9301      	str	r3, [sp, #4]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	9300      	str	r3, [sp, #0]
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	68fa      	ldr	r2, [r7, #12]
 800c3ce:	4620      	mov	r0, r4
 800c3d0:	f00d f9de 	bl	8019790 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>
 800c3d4:	4603      	mov	r3, r0
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3714      	adds	r7, #20
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd90      	pop	{r4, r7, pc}
	...

0800c3e0 <_ZL13normal_mallocjPKcj>:

#endif

static void* normal_malloc(size_t size, const char*, size_t)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b084      	sub	sp, #16
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	60f8      	str	r0, [r7, #12]
 800c3e8:	60b9      	str	r1, [r7, #8]
 800c3ea:	607a      	str	r2, [r7, #4]
    return PlatformSpecificMalloc(size);
 800c3ec:	4b04      	ldr	r3, [pc, #16]	; (800c400 <_ZL13normal_mallocjPKcj+0x20>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	68f8      	ldr	r0, [r7, #12]
 800c3f2:	4798      	blx	r3
 800c3f4:	4603      	mov	r3, r0
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3710      	adds	r7, #16
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}
 800c3fe:	bf00      	nop
 800c400:	200000c8 	.word	0x200000c8

0800c404 <_ZL14normal_reallocPvjPKcj>:

static void* normal_realloc(void* memory, size_t size, const char*, size_t)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b084      	sub	sp, #16
 800c408:	af00      	add	r7, sp, #0
 800c40a:	60f8      	str	r0, [r7, #12]
 800c40c:	60b9      	str	r1, [r7, #8]
 800c40e:	607a      	str	r2, [r7, #4]
 800c410:	603b      	str	r3, [r7, #0]
    return PlatformSpecificRealloc(memory, size);
 800c412:	4b05      	ldr	r3, [pc, #20]	; (800c428 <_ZL14normal_reallocPvjPKcj+0x24>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	68b9      	ldr	r1, [r7, #8]
 800c418:	68f8      	ldr	r0, [r7, #12]
 800c41a:	4798      	blx	r3
 800c41c:	4603      	mov	r3, r0
}
 800c41e:	4618      	mov	r0, r3
 800c420:	3710      	adds	r7, #16
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}
 800c426:	bf00      	nop
 800c428:	200000cc 	.word	0x200000cc

0800c42c <_ZL11normal_freePvPKcj>:

static void normal_free(void* buffer, const char*, size_t)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b084      	sub	sp, #16
 800c430:	af00      	add	r7, sp, #0
 800c432:	60f8      	str	r0, [r7, #12]
 800c434:	60b9      	str	r1, [r7, #8]
 800c436:	607a      	str	r2, [r7, #4]
    PlatformSpecificFree(buffer);
 800c438:	4b03      	ldr	r3, [pc, #12]	; (800c448 <_ZL11normal_freePvPKcj+0x1c>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	68f8      	ldr	r0, [r7, #12]
 800c43e:	4798      	blx	r3
}
 800c440:	bf00      	nop
 800c442:	3710      	adds	r7, #16
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}
 800c448:	200000d0 	.word	0x200000d0

0800c44c <_ZL32threadsafe_mem_leak_operator_newj>:
#else
#define UT_THROW_BAD_ALLOC_WHEN_NULL(memory)
#endif

static void* threadsafe_mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800c44c:	b590      	push	{r4, r7, lr}
 800c44e:	b085      	sub	sp, #20
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
    MemLeakScopedMutex lock;
 800c454:	f107 0308 	add.w	r3, r7, #8
 800c458:	4618      	mov	r0, r3
 800c45a:	f7ff ff47 	bl	800c2ec <_ZN18MemLeakScopedMutexC1Ev>
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800c45e:	f000 fbbd 	bl	800cbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800c462:	4604      	mov	r4, r0
 800c464:	f005 ff9e 	bl	80123a4 <_Z22getCurrentNewAllocatorv>
 800c468:	4601      	mov	r1, r0
 800c46a:	2300      	movs	r3, #0
 800c46c:	687a      	ldr	r2, [r7, #4]
 800c46e:	4620      	mov	r0, r4
 800c470:	f00d f864 	bl	801953c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800c474:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800c476:	68fc      	ldr	r4, [r7, #12]
    MemLeakScopedMutex lock;
 800c478:	f107 0308 	add.w	r3, r7, #8
 800c47c:	4618      	mov	r0, r3
 800c47e:	f7ff ff4a 	bl	800c316 <_ZN18MemLeakScopedMutexD1Ev>
    return memory;
 800c482:	4623      	mov	r3, r4
}
 800c484:	4618      	mov	r0, r3
 800c486:	3714      	adds	r7, #20
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd90      	pop	{r4, r7, pc}

0800c48c <_ZL21mem_leak_operator_newj>:
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
}


static void* mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800c48c:	b590      	push	{r4, r7, lr}
 800c48e:	b085      	sub	sp, #20
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800c494:	f000 fba2 	bl	800cbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800c498:	4604      	mov	r4, r0
 800c49a:	f005 ff83 	bl	80123a4 <_Z22getCurrentNewAllocatorv>
 800c49e:	4601      	mov	r1, r0
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	687a      	ldr	r2, [r7, #4]
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	f00d f849 	bl	801953c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800c4aa:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3714      	adds	r7, #20
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd90      	pop	{r4, r7, pc}

0800c4b6 <_ZL29mem_leak_operator_new_nothrowj>:

static void* mem_leak_operator_new_nothrow (size_t size) UT_NOTHROW
{
 800c4b6:	b590      	push	{r4, r7, lr}
 800c4b8:	b083      	sub	sp, #12
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800c4be:	f000 fb8d 	bl	800cbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800c4c2:	4604      	mov	r4, r0
 800c4c4:	f005 ff6e 	bl	80123a4 <_Z22getCurrentNewAllocatorv>
 800c4c8:	4601      	mov	r1, r0
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	687a      	ldr	r2, [r7, #4]
 800c4ce:	4620      	mov	r0, r4
 800c4d0:	f00d f834 	bl	801953c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800c4d4:	4603      	mov	r3, r0
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	370c      	adds	r7, #12
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd90      	pop	{r4, r7, pc}

0800c4de <_ZL27mem_leak_operator_new_debugjPKcj>:

static void* mem_leak_operator_new_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 800c4de:	b590      	push	{r4, r7, lr}
 800c4e0:	b089      	sub	sp, #36	; 0x24
 800c4e2:	af02      	add	r7, sp, #8
 800c4e4:	60f8      	str	r0, [r7, #12]
 800c4e6:	60b9      	str	r1, [r7, #8]
 800c4e8:	607a      	str	r2, [r7, #4]
    void *memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size, file, line);
 800c4ea:	f000 fb77 	bl	800cbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800c4ee:	4604      	mov	r4, r0
 800c4f0:	f005 ff58 	bl	80123a4 <_Z22getCurrentNewAllocatorv>
 800c4f4:	4601      	mov	r1, r0
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	9301      	str	r3, [sp, #4]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	9300      	str	r3, [sp, #0]
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	68fa      	ldr	r2, [r7, #12]
 800c502:	4620      	mov	r0, r4
 800c504:	f00d f8ac 	bl	8019660 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800c508:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800c50a:	697b      	ldr	r3, [r7, #20]
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	371c      	adds	r7, #28
 800c510:	46bd      	mov	sp, r7
 800c512:	bd90      	pop	{r4, r7, pc}

0800c514 <_ZL27mem_leak_operator_new_arrayj>:

static void* mem_leak_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 800c514:	b590      	push	{r4, r7, lr}
 800c516:	b085      	sub	sp, #20
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 800c51c:	f000 fb5e 	bl	800cbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800c520:	4604      	mov	r4, r0
 800c522:	f005 ff97 	bl	8012454 <_Z27getCurrentNewArrayAllocatorv>
 800c526:	4601      	mov	r1, r0
 800c528:	2300      	movs	r3, #0
 800c52a:	687a      	ldr	r2, [r7, #4]
 800c52c:	4620      	mov	r0, r4
 800c52e:	f00d f805 	bl	801953c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800c532:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800c534:	68fb      	ldr	r3, [r7, #12]
}
 800c536:	4618      	mov	r0, r3
 800c538:	3714      	adds	r7, #20
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd90      	pop	{r4, r7, pc}

0800c53e <_ZL35mem_leak_operator_new_array_nothrowj>:

static void* mem_leak_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 800c53e:	b590      	push	{r4, r7, lr}
 800c540:	b083      	sub	sp, #12
 800c542:	af00      	add	r7, sp, #0
 800c544:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 800c546:	f000 fb49 	bl	800cbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800c54a:	4604      	mov	r4, r0
 800c54c:	f005 ff82 	bl	8012454 <_Z27getCurrentNewArrayAllocatorv>
 800c550:	4601      	mov	r1, r0
 800c552:	2300      	movs	r3, #0
 800c554:	687a      	ldr	r2, [r7, #4]
 800c556:	4620      	mov	r0, r4
 800c558:	f00c fff0 	bl	801953c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800c55c:	4603      	mov	r3, r0
}
 800c55e:	4618      	mov	r0, r3
 800c560:	370c      	adds	r7, #12
 800c562:	46bd      	mov	sp, r7
 800c564:	bd90      	pop	{r4, r7, pc}

0800c566 <_ZL33mem_leak_operator_new_array_debugjPKcj>:

static void* mem_leak_operator_new_array_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 800c566:	b590      	push	{r4, r7, lr}
 800c568:	b089      	sub	sp, #36	; 0x24
 800c56a:	af02      	add	r7, sp, #8
 800c56c:	60f8      	str	r0, [r7, #12]
 800c56e:	60b9      	str	r1, [r7, #8]
 800c570:	607a      	str	r2, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size, file, line);
 800c572:	f000 fb33 	bl	800cbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800c576:	4604      	mov	r4, r0
 800c578:	f005 ff6c 	bl	8012454 <_Z27getCurrentNewArrayAllocatorv>
 800c57c:	4601      	mov	r1, r0
 800c57e:	2300      	movs	r3, #0
 800c580:	9301      	str	r3, [sp, #4]
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	9300      	str	r3, [sp, #0]
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	68fa      	ldr	r2, [r7, #12]
 800c58a:	4620      	mov	r0, r4
 800c58c:	f00d f868 	bl	8019660 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800c590:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800c592:	697b      	ldr	r3, [r7, #20]
}
 800c594:	4618      	mov	r0, r3
 800c596:	371c      	adds	r7, #28
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd90      	pop	{r4, r7, pc}

0800c59c <_ZL24mem_leak_operator_deletePv>:

static void mem_leak_operator_delete (void* mem) UT_NOTHROW
{
 800c59c:	b590      	push	{r4, r7, lr}
 800c59e:	b083      	sub	sp, #12
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 800c5a4:	f000 fb1a 	bl	800cbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	6879      	ldr	r1, [r7, #4]
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f00c fec3 	bl	8019338 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewAllocator(), (char*) mem);
 800c5b2:	f000 fb13 	bl	800cbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800c5b6:	4604      	mov	r4, r0
 800c5b8:	f005 fef4 	bl	80123a4 <_Z22getCurrentNewAllocatorv>
 800c5bc:	4601      	mov	r1, r0
 800c5be:	2300      	movs	r3, #0
 800c5c0:	687a      	ldr	r2, [r7, #4]
 800c5c2:	4620      	mov	r0, r4
 800c5c4:	f00d f8ca 	bl	801975c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 800c5c8:	bf00      	nop
 800c5ca:	370c      	adds	r7, #12
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd90      	pop	{r4, r7, pc}

0800c5d0 <_ZL30mem_leak_operator_delete_arrayPv>:

static void mem_leak_operator_delete_array (void* mem) UT_NOTHROW
{
 800c5d0:	b590      	push	{r4, r7, lr}
 800c5d2:	b083      	sub	sp, #12
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 800c5d8:	f000 fb00 	bl	800cbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	6879      	ldr	r1, [r7, #4]
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f00c fea9 	bl	8019338 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
 800c5e6:	f000 faf9 	bl	800cbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800c5ea:	4604      	mov	r4, r0
 800c5ec:	f005 ff32 	bl	8012454 <_Z27getCurrentNewArrayAllocatorv>
 800c5f0:	4601      	mov	r1, r0
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	687a      	ldr	r2, [r7, #4]
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	f00d f8b0 	bl	801975c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 800c5fc:	bf00      	nop
 800c5fe:	370c      	adds	r7, #12
 800c600:	46bd      	mov	sp, r7
 800c602:	bd90      	pop	{r4, r7, pc}

0800c604 <_ZL19normal_operator_newj>:

static void* normal_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b084      	sub	sp, #16
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800c60c:	4b04      	ldr	r3, [pc, #16]	; (800c620 <_ZL19normal_operator_newj+0x1c>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	4798      	blx	r3
 800c614:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800c616:	68fb      	ldr	r3, [r7, #12]
}
 800c618:	4618      	mov	r0, r3
 800c61a:	3710      	adds	r7, #16
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}
 800c620:	200000c8 	.word	0x200000c8

0800c624 <_ZL27normal_operator_new_nothrowj>:

static void* normal_operator_new_nothrow (size_t size) UT_NOTHROW
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b082      	sub	sp, #8
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 800c62c:	4b04      	ldr	r3, [pc, #16]	; (800c640 <_ZL27normal_operator_new_nothrowj+0x1c>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	4798      	blx	r3
 800c634:	4603      	mov	r3, r0
}
 800c636:	4618      	mov	r0, r3
 800c638:	3708      	adds	r7, #8
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
 800c63e:	bf00      	nop
 800c640:	200000c8 	.word	0x200000c8

0800c644 <_ZL25normal_operator_new_debugjPKcj>:

static void* normal_operator_new_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b086      	sub	sp, #24
 800c648:	af00      	add	r7, sp, #0
 800c64a:	60f8      	str	r0, [r7, #12]
 800c64c:	60b9      	str	r1, [r7, #8]
 800c64e:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800c650:	4b04      	ldr	r3, [pc, #16]	; (800c664 <_ZL25normal_operator_new_debugjPKcj+0x20>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	68f8      	ldr	r0, [r7, #12]
 800c656:	4798      	blx	r3
 800c658:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800c65a:	697b      	ldr	r3, [r7, #20]
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3718      	adds	r7, #24
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}
 800c664:	200000c8 	.word	0x200000c8

0800c668 <_ZL25normal_operator_new_arrayj>:

static void* normal_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b084      	sub	sp, #16
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800c670:	4b04      	ldr	r3, [pc, #16]	; (800c684 <_ZL25normal_operator_new_arrayj+0x1c>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	4798      	blx	r3
 800c678:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800c67a:	68fb      	ldr	r3, [r7, #12]
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3710      	adds	r7, #16
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}
 800c684:	200000c8 	.word	0x200000c8

0800c688 <_ZL33normal_operator_new_array_nothrowj>:

static void* normal_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 800c690:	4b04      	ldr	r3, [pc, #16]	; (800c6a4 <_ZL33normal_operator_new_array_nothrowj+0x1c>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	4798      	blx	r3
 800c698:	4603      	mov	r3, r0
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3708      	adds	r7, #8
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}
 800c6a2:	bf00      	nop
 800c6a4:	200000c8 	.word	0x200000c8

0800c6a8 <_ZL31normal_operator_new_array_debugjPKcj>:

static void* normal_operator_new_array_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b086      	sub	sp, #24
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	60f8      	str	r0, [r7, #12]
 800c6b0:	60b9      	str	r1, [r7, #8]
 800c6b2:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 800c6b4:	4b04      	ldr	r3, [pc, #16]	; (800c6c8 <_ZL31normal_operator_new_array_debugjPKcj+0x20>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	68f8      	ldr	r0, [r7, #12]
 800c6ba:	4798      	blx	r3
 800c6bc:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800c6be:	697b      	ldr	r3, [r7, #20]
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3718      	adds	r7, #24
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	200000c8 	.word	0x200000c8

0800c6cc <_ZL22normal_operator_deletePv>:

static void normal_operator_delete (void* mem) UT_NOTHROW
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b082      	sub	sp, #8
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 800c6d4:	4b03      	ldr	r3, [pc, #12]	; (800c6e4 <_ZL22normal_operator_deletePv+0x18>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	4798      	blx	r3
}
 800c6dc:	bf00      	nop
 800c6de:	3708      	adds	r7, #8
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}
 800c6e4:	200000d0 	.word	0x200000d0

0800c6e8 <_ZL28normal_operator_delete_arrayPv>:

static void normal_operator_delete_array (void* mem) UT_NOTHROW
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b082      	sub	sp, #8
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 800c6f0:	4b03      	ldr	r3, [pc, #12]	; (800c700 <_ZL28normal_operator_delete_arrayPv+0x18>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	4798      	blx	r3
}
 800c6f8:	bf00      	nop
 800c6fa:	3708      	adds	r7, #8
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}
 800c700:	200000d0 	.word	0x200000d0

0800c704 <_Znwj>:
static void (*saved_operator_delete_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete;
static void (*saved_operator_delete_array_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete_array;
static int save_counter = 0;

void* operator new(size_t size) UT_THROW(std::bad_alloc)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b082      	sub	sp, #8
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
    return operator_new_fptr(size);
 800c70c:	4b04      	ldr	r3, [pc, #16]	; (800c720 <_Znwj+0x1c>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	4798      	blx	r3
 800c714:	4603      	mov	r3, r0
}
 800c716:	4618      	mov	r0, r3
 800c718:	3708      	adds	r7, #8
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}
 800c71e:	bf00      	nop
 800c720:	2000002c 	.word	0x2000002c

0800c724 <_ZnwjPKci>:

void* operator new(size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b084      	sub	sp, #16
 800c728:	af00      	add	r7, sp, #0
 800c72a:	60f8      	str	r0, [r7, #12]
 800c72c:	60b9      	str	r1, [r7, #8]
 800c72e:	607a      	str	r2, [r7, #4]
    return operator_new_debug_fptr(size, file, (size_t)line);
 800c730:	4b05      	ldr	r3, [pc, #20]	; (800c748 <_ZnwjPKci+0x24>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	68b9      	ldr	r1, [r7, #8]
 800c738:	68f8      	ldr	r0, [r7, #12]
 800c73a:	4798      	blx	r3
 800c73c:	4603      	mov	r3, r0
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3710      	adds	r7, #16
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	20000034 	.word	0x20000034

0800c74c <_ZdlPvj>:
    operator_delete_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete (void* mem, size_t) UT_NOTHROW
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b082      	sub	sp, #8
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
 800c754:	6039      	str	r1, [r7, #0]
    operator_delete_fptr(mem);
 800c756:	4b04      	ldr	r3, [pc, #16]	; (800c768 <_ZdlPvj+0x1c>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	4798      	blx	r3
}
 800c75e:	bf00      	nop
 800c760:	3708      	adds	r7, #8
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}
 800c766:	bf00      	nop
 800c768:	20000044 	.word	0x20000044

0800c76c <_ZnajPKci>:
{
    return operator_new_array_fptr(size);
}

void* operator new [](size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b084      	sub	sp, #16
 800c770:	af00      	add	r7, sp, #0
 800c772:	60f8      	str	r0, [r7, #12]
 800c774:	60b9      	str	r1, [r7, #8]
 800c776:	607a      	str	r2, [r7, #4]
    return operator_new_array_debug_fptr(size, file, (size_t)line);
 800c778:	4b05      	ldr	r3, [pc, #20]	; (800c790 <_ZnajPKci+0x24>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	68b9      	ldr	r1, [r7, #8]
 800c780:	68f8      	ldr	r0, [r7, #12]
 800c782:	4798      	blx	r3
 800c784:	4603      	mov	r3, r0
}
 800c786:	4618      	mov	r0, r3
 800c788:	3710      	adds	r7, #16
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}
 800c78e:	bf00      	nop
 800c790:	20000040 	.word	0x20000040

0800c794 <_ZdaPv>:
{
    return operator_new_array_debug_fptr(size, file, line);
}

void operator delete[](void* mem) UT_NOTHROW
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b082      	sub	sp, #8
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
     operator_delete_array_fptr(mem);
 800c79c:	4b03      	ldr	r3, [pc, #12]	; (800c7ac <_ZdaPv+0x18>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	4798      	blx	r3
}
 800c7a4:	bf00      	nop
 800c7a6:	3708      	adds	r7, #8
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}
 800c7ac:	20000048 	.word	0x20000048

0800c7b0 <_ZdaPvj>:
     operator_delete_array_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete[] (void* mem, size_t) UT_NOTHROW
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b082      	sub	sp, #8
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	6039      	str	r1, [r7, #0]
     operator_delete_array_fptr(mem);
 800c7ba:	4b04      	ldr	r3, [pc, #16]	; (800c7cc <_ZdaPvj+0x1c>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	4798      	blx	r3
}
 800c7c2:	bf00      	nop
 800c7c4:	3708      	adds	r7, #8
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}
 800c7ca:	bf00      	nop
 800c7cc:	20000048 	.word	0x20000048

0800c7d0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>:

#endif
#endif

void MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    operator_new_fptr = normal_operator_new;
 800c7d4:	4b12      	ldr	r3, [pc, #72]	; (800c820 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x50>)
 800c7d6:	4a13      	ldr	r2, [pc, #76]	; (800c824 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x54>)
 800c7d8:	601a      	str	r2, [r3, #0]
    operator_new_nothrow_fptr = normal_operator_new_nothrow;
 800c7da:	4b13      	ldr	r3, [pc, #76]	; (800c828 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x58>)
 800c7dc:	4a13      	ldr	r2, [pc, #76]	; (800c82c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x5c>)
 800c7de:	601a      	str	r2, [r3, #0]
    operator_new_debug_fptr = normal_operator_new_debug;
 800c7e0:	4b13      	ldr	r3, [pc, #76]	; (800c830 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x60>)
 800c7e2:	4a14      	ldr	r2, [pc, #80]	; (800c834 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x64>)
 800c7e4:	601a      	str	r2, [r3, #0]
    operator_new_array_fptr = normal_operator_new_array;
 800c7e6:	4b14      	ldr	r3, [pc, #80]	; (800c838 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x68>)
 800c7e8:	4a14      	ldr	r2, [pc, #80]	; (800c83c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x6c>)
 800c7ea:	601a      	str	r2, [r3, #0]
    operator_new_array_nothrow_fptr = normal_operator_new_array_nothrow;
 800c7ec:	4b14      	ldr	r3, [pc, #80]	; (800c840 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x70>)
 800c7ee:	4a15      	ldr	r2, [pc, #84]	; (800c844 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x74>)
 800c7f0:	601a      	str	r2, [r3, #0]
    operator_new_array_debug_fptr = normal_operator_new_array_debug;
 800c7f2:	4b15      	ldr	r3, [pc, #84]	; (800c848 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x78>)
 800c7f4:	4a15      	ldr	r2, [pc, #84]	; (800c84c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x7c>)
 800c7f6:	601a      	str	r2, [r3, #0]
    operator_delete_fptr = normal_operator_delete;
 800c7f8:	4b15      	ldr	r3, [pc, #84]	; (800c850 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x80>)
 800c7fa:	4a16      	ldr	r2, [pc, #88]	; (800c854 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x84>)
 800c7fc:	601a      	str	r2, [r3, #0]
    operator_delete_array_fptr = normal_operator_delete_array;
 800c7fe:	4b16      	ldr	r3, [pc, #88]	; (800c858 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x88>)
 800c800:	4a16      	ldr	r2, [pc, #88]	; (800c85c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x8c>)
 800c802:	601a      	str	r2, [r3, #0]
    malloc_fptr = normal_malloc;
 800c804:	4b16      	ldr	r3, [pc, #88]	; (800c860 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x90>)
 800c806:	4a17      	ldr	r2, [pc, #92]	; (800c864 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x94>)
 800c808:	601a      	str	r2, [r3, #0]
    realloc_fptr = normal_realloc;
 800c80a:	4b17      	ldr	r3, [pc, #92]	; (800c868 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x98>)
 800c80c:	4a17      	ldr	r2, [pc, #92]	; (800c86c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x9c>)
 800c80e:	601a      	str	r2, [r3, #0]
    free_fptr = normal_free;
 800c810:	4b17      	ldr	r3, [pc, #92]	; (800c870 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa0>)
 800c812:	4a18      	ldr	r2, [pc, #96]	; (800c874 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa4>)
 800c814:	601a      	str	r2, [r3, #0]

#endif
}
 800c816:	bf00      	nop
 800c818:	46bd      	mov	sp, r7
 800c81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81e:	4770      	bx	lr
 800c820:	2000002c 	.word	0x2000002c
 800c824:	0800c605 	.word	0x0800c605
 800c828:	20000030 	.word	0x20000030
 800c82c:	0800c625 	.word	0x0800c625
 800c830:	20000034 	.word	0x20000034
 800c834:	0800c645 	.word	0x0800c645
 800c838:	20000038 	.word	0x20000038
 800c83c:	0800c669 	.word	0x0800c669
 800c840:	2000003c 	.word	0x2000003c
 800c844:	0800c689 	.word	0x0800c689
 800c848:	20000040 	.word	0x20000040
 800c84c:	0800c6a9 	.word	0x0800c6a9
 800c850:	20000044 	.word	0x20000044
 800c854:	0800c6cd 	.word	0x0800c6cd
 800c858:	20000048 	.word	0x20000048
 800c85c:	0800c6e9 	.word	0x0800c6e9
 800c860:	20000014 	.word	0x20000014
 800c864:	0800c3e1 	.word	0x0800c3e1
 800c868:	2000001c 	.word	0x2000001c
 800c86c:	0800c405 	.word	0x0800c405
 800c870:	20000018 	.word	0x20000018
 800c874:	0800c42d 	.word	0x0800c42d

0800c878 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>:
    free_fptr = threadsafe_mem_leak_free;
#endif
}

bool MemoryLeakWarningPlugin::areNewDeleteOverloaded()
{
 800c878:	b480      	push	{r7}
 800c87a:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    return operator_new_fptr == mem_leak_operator_new || operator_new_fptr == threadsafe_mem_leak_operator_new;
 800c87c:	4b08      	ldr	r3, [pc, #32]	; (800c8a0 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	4a08      	ldr	r2, [pc, #32]	; (800c8a4 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x2c>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d004      	beq.n	800c890 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x18>
 800c886:	4b06      	ldr	r3, [pc, #24]	; (800c8a0 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	4a07      	ldr	r2, [pc, #28]	; (800c8a8 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x30>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d101      	bne.n	800c894 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1c>
 800c890:	2301      	movs	r3, #1
 800c892:	e000      	b.n	800c896 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1e>
 800c894:	2300      	movs	r3, #0
#else
    return false;
#endif
}
 800c896:	4618      	mov	r0, r3
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	4770      	bx	lr
 800c8a0:	2000002c 	.word	0x2000002c
 800c8a4:	0800c48d 	.word	0x0800c48d
 800c8a8:	0800c44d 	.word	0x0800c44d

0800c8ac <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (++save_counter > 1) return;
 800c8b0:	4b1f      	ldr	r3, [pc, #124]	; (800c930 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	4a1e      	ldr	r2, [pc, #120]	; (800c930 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800c8b8:	6013      	str	r3, [r2, #0]
 800c8ba:	4b1d      	ldr	r3, [pc, #116]	; (800c930 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	2b01      	cmp	r3, #1
 800c8c0:	bfcc      	ite	gt
 800c8c2:	2301      	movgt	r3, #1
 800c8c4:	2300      	movle	r3, #0
 800c8c6:	b2db      	uxtb	r3, r3
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d12e      	bne.n	800c92a <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x7e>
    saved_operator_new_fptr = operator_new_fptr;
 800c8cc:	4b19      	ldr	r3, [pc, #100]	; (800c934 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x88>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	4a19      	ldr	r2, [pc, #100]	; (800c938 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x8c>)
 800c8d2:	6013      	str	r3, [r2, #0]
    saved_operator_new_nothrow_fptr = operator_new_nothrow_fptr;
 800c8d4:	4b19      	ldr	r3, [pc, #100]	; (800c93c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x90>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4a19      	ldr	r2, [pc, #100]	; (800c940 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x94>)
 800c8da:	6013      	str	r3, [r2, #0]
    saved_operator_new_debug_fptr = operator_new_debug_fptr;
 800c8dc:	4b19      	ldr	r3, [pc, #100]	; (800c944 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x98>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4a19      	ldr	r2, [pc, #100]	; (800c948 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x9c>)
 800c8e2:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_fptr = operator_new_array_fptr;
 800c8e4:	4b19      	ldr	r3, [pc, #100]	; (800c94c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa0>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	4a19      	ldr	r2, [pc, #100]	; (800c950 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa4>)
 800c8ea:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_nothrow_fptr = operator_new_array_nothrow_fptr;
 800c8ec:	4b19      	ldr	r3, [pc, #100]	; (800c954 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa8>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4a19      	ldr	r2, [pc, #100]	; (800c958 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xac>)
 800c8f2:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_debug_fptr = operator_new_array_debug_fptr;
 800c8f4:	4b19      	ldr	r3, [pc, #100]	; (800c95c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb0>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	4a19      	ldr	r2, [pc, #100]	; (800c960 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb4>)
 800c8fa:	6013      	str	r3, [r2, #0]
    saved_operator_delete_fptr = operator_delete_fptr;
 800c8fc:	4b19      	ldr	r3, [pc, #100]	; (800c964 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb8>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	4a19      	ldr	r2, [pc, #100]	; (800c968 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xbc>)
 800c902:	6013      	str	r3, [r2, #0]
    saved_operator_delete_array_fptr = operator_delete_array_fptr;
 800c904:	4b19      	ldr	r3, [pc, #100]	; (800c96c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc0>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	4a19      	ldr	r2, [pc, #100]	; (800c970 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc4>)
 800c90a:	6013      	str	r3, [r2, #0]
    saved_malloc_fptr = malloc_fptr;
 800c90c:	4b19      	ldr	r3, [pc, #100]	; (800c974 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc8>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	4a19      	ldr	r2, [pc, #100]	; (800c978 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xcc>)
 800c912:	6013      	str	r3, [r2, #0]
    saved_realloc_fptr = realloc_fptr;
 800c914:	4b19      	ldr	r3, [pc, #100]	; (800c97c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd0>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	4a19      	ldr	r2, [pc, #100]	; (800c980 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd4>)
 800c91a:	6013      	str	r3, [r2, #0]
    saved_free_fptr = free_fptr;
 800c91c:	4b19      	ldr	r3, [pc, #100]	; (800c984 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd8>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4a19      	ldr	r2, [pc, #100]	; (800c988 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xdc>)
 800c922:	6013      	str	r3, [r2, #0]
    turnOffNewDeleteOverloads();
 800c924:	f7ff ff54 	bl	800c7d0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
 800c928:	e000      	b.n	800c92c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x80>
    if (++save_counter > 1) return;
 800c92a:	bf00      	nop
#endif
}
 800c92c:	bd80      	pop	{r7, pc}
 800c92e:	bf00      	nop
 800c930:	200009bc 	.word	0x200009bc
 800c934:	2000002c 	.word	0x2000002c
 800c938:	2000004c 	.word	0x2000004c
 800c93c:	20000030 	.word	0x20000030
 800c940:	20000050 	.word	0x20000050
 800c944:	20000034 	.word	0x20000034
 800c948:	20000054 	.word	0x20000054
 800c94c:	20000038 	.word	0x20000038
 800c950:	20000058 	.word	0x20000058
 800c954:	2000003c 	.word	0x2000003c
 800c958:	2000005c 	.word	0x2000005c
 800c95c:	20000040 	.word	0x20000040
 800c960:	20000060 	.word	0x20000060
 800c964:	20000044 	.word	0x20000044
 800c968:	20000064 	.word	0x20000064
 800c96c:	20000048 	.word	0x20000048
 800c970:	20000068 	.word	0x20000068
 800c974:	20000014 	.word	0x20000014
 800c978:	20000020 	.word	0x20000020
 800c97c:	2000001c 	.word	0x2000001c
 800c980:	20000028 	.word	0x20000028
 800c984:	20000018 	.word	0x20000018
 800c988:	20000024 	.word	0x20000024

0800c98c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::restoreNewDeleteOverloads()
{
 800c98c:	b480      	push	{r7}
 800c98e:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (--save_counter > 0) return;
 800c990:	4b1f      	ldr	r3, [pc, #124]	; (800ca10 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	3b01      	subs	r3, #1
 800c996:	4a1e      	ldr	r2, [pc, #120]	; (800ca10 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800c998:	6013      	str	r3, [r2, #0]
 800c99a:	4b1d      	ldr	r3, [pc, #116]	; (800ca10 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	bfcc      	ite	gt
 800c9a2:	2301      	movgt	r3, #1
 800c9a4:	2300      	movle	r3, #0
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d12c      	bne.n	800ca06 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7a>
    operator_new_fptr = saved_operator_new_fptr;
 800c9ac:	4b19      	ldr	r3, [pc, #100]	; (800ca14 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x88>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4a19      	ldr	r2, [pc, #100]	; (800ca18 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x8c>)
 800c9b2:	6013      	str	r3, [r2, #0]
    operator_new_nothrow_fptr = saved_operator_new_nothrow_fptr;
 800c9b4:	4b19      	ldr	r3, [pc, #100]	; (800ca1c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x90>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	4a19      	ldr	r2, [pc, #100]	; (800ca20 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x94>)
 800c9ba:	6013      	str	r3, [r2, #0]
    operator_new_debug_fptr = saved_operator_new_debug_fptr;
 800c9bc:	4b19      	ldr	r3, [pc, #100]	; (800ca24 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x98>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4a19      	ldr	r2, [pc, #100]	; (800ca28 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x9c>)
 800c9c2:	6013      	str	r3, [r2, #0]
    operator_new_array_fptr = saved_operator_new_array_fptr;
 800c9c4:	4b19      	ldr	r3, [pc, #100]	; (800ca2c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa0>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4a19      	ldr	r2, [pc, #100]	; (800ca30 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa4>)
 800c9ca:	6013      	str	r3, [r2, #0]
    operator_new_array_nothrow_fptr = saved_operator_new_array_nothrow_fptr;
 800c9cc:	4b19      	ldr	r3, [pc, #100]	; (800ca34 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa8>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	4a19      	ldr	r2, [pc, #100]	; (800ca38 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xac>)
 800c9d2:	6013      	str	r3, [r2, #0]
    operator_new_array_debug_fptr = saved_operator_new_array_debug_fptr;
 800c9d4:	4b19      	ldr	r3, [pc, #100]	; (800ca3c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb0>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	4a19      	ldr	r2, [pc, #100]	; (800ca40 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb4>)
 800c9da:	6013      	str	r3, [r2, #0]
    operator_delete_fptr = saved_operator_delete_fptr;
 800c9dc:	4b19      	ldr	r3, [pc, #100]	; (800ca44 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb8>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	4a19      	ldr	r2, [pc, #100]	; (800ca48 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xbc>)
 800c9e2:	6013      	str	r3, [r2, #0]
    operator_delete_array_fptr = saved_operator_delete_array_fptr;
 800c9e4:	4b19      	ldr	r3, [pc, #100]	; (800ca4c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc0>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	4a19      	ldr	r2, [pc, #100]	; (800ca50 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc4>)
 800c9ea:	6013      	str	r3, [r2, #0]
    malloc_fptr = saved_malloc_fptr;
 800c9ec:	4b19      	ldr	r3, [pc, #100]	; (800ca54 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc8>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4a19      	ldr	r2, [pc, #100]	; (800ca58 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xcc>)
 800c9f2:	6013      	str	r3, [r2, #0]
    realloc_fptr = saved_realloc_fptr;
 800c9f4:	4b19      	ldr	r3, [pc, #100]	; (800ca5c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd0>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4a19      	ldr	r2, [pc, #100]	; (800ca60 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd4>)
 800c9fa:	6013      	str	r3, [r2, #0]
    free_fptr = saved_free_fptr;
 800c9fc:	4b19      	ldr	r3, [pc, #100]	; (800ca64 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd8>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4a19      	ldr	r2, [pc, #100]	; (800ca68 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xdc>)
 800ca02:	6013      	str	r3, [r2, #0]
 800ca04:	e000      	b.n	800ca08 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7c>
    if (--save_counter > 0) return;
 800ca06:	bf00      	nop
#endif
}
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0e:	4770      	bx	lr
 800ca10:	200009bc 	.word	0x200009bc
 800ca14:	2000004c 	.word	0x2000004c
 800ca18:	2000002c 	.word	0x2000002c
 800ca1c:	20000050 	.word	0x20000050
 800ca20:	20000030 	.word	0x20000030
 800ca24:	20000054 	.word	0x20000054
 800ca28:	20000034 	.word	0x20000034
 800ca2c:	20000058 	.word	0x20000058
 800ca30:	20000038 	.word	0x20000038
 800ca34:	2000005c 	.word	0x2000005c
 800ca38:	2000003c 	.word	0x2000003c
 800ca3c:	20000060 	.word	0x20000060
 800ca40:	20000040 	.word	0x20000040
 800ca44:	20000064 	.word	0x20000064
 800ca48:	20000044 	.word	0x20000044
 800ca4c:	20000068 	.word	0x20000068
 800ca50:	20000048 	.word	0x20000048
 800ca54:	20000020 	.word	0x20000020
 800ca58:	20000014 	.word	0x20000014
 800ca5c:	20000028 	.word	0x20000028
 800ca60:	2000001c 	.word	0x2000001c
 800ca64:	20000024 	.word	0x20000024
 800ca68:	20000018 	.word	0x20000018

0800ca6c <_ZN25MemoryLeakWarningReporterD1Ev>:
}

class MemoryLeakWarningReporter: public MemoryLeakFailure
{
public:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b082      	sub	sp, #8
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
    {
 800ca74:	4a05      	ldr	r2, [pc, #20]	; (800ca8c <_ZN25MemoryLeakWarningReporterD1Ev+0x20>)
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	601a      	str	r2, [r3, #0]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	f7ff fc15 	bl	800c2ac <_ZN17MemoryLeakFailureD1Ev>
    }
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	4618      	mov	r0, r3
 800ca86:	3708      	adds	r7, #8
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}
 800ca8c:	0802b0b4 	.word	0x0802b0b4

0800ca90 <_ZN25MemoryLeakWarningReporterD0Ev>:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b082      	sub	sp, #8
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
    }
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f7ff ffe7 	bl	800ca6c <_ZN25MemoryLeakWarningReporterD1Ev>
 800ca9e:	2104      	movs	r1, #4
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f7ff fe53 	bl	800c74c <_ZdlPvj>
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	4618      	mov	r0, r3
 800caaa:	3708      	adds	r7, #8
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}

0800cab0 <_ZN14TestTerminatorC1Ev>:
    virtual void testBody();
};

//////////////////// TestTerminator

class TestTerminator
 800cab0:	b480      	push	{r7}
 800cab2:	b083      	sub	sp, #12
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	4a04      	ldr	r2, [pc, #16]	; (800cacc <_ZN14TestTerminatorC1Ev+0x1c>)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	601a      	str	r2, [r3, #0]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	4618      	mov	r0, r3
 800cac2:	370c      	adds	r7, #12
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr
 800cacc:	0802ba60 	.word	0x0802ba60

0800cad0 <_ZN31TestTerminatorWithoutExceptionsC1Ev>:
public:
    virtual void exitCurrentTest() const _override;
    virtual ~NormalTestTerminator() _destructor_override;
};

class TestTerminatorWithoutExceptions  : public TestTerminator
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b082      	sub	sp, #8
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	4618      	mov	r0, r3
 800cadc:	f7ff ffe8 	bl	800cab0 <_ZN14TestTerminatorC1Ev>
 800cae0:	4a03      	ldr	r2, [pc, #12]	; (800caf0 <_ZN31TestTerminatorWithoutExceptionsC1Ev+0x20>)
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	601a      	str	r2, [r3, #0]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	4618      	mov	r0, r3
 800caea:	3708      	adds	r7, #8
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}
 800caf0:	0802ba38 	.word	0x0802ba38

0800caf4 <_ZN25MemoryLeakWarningReporter4failEPc>:

    virtual void fail(char* fail_string) _override
 800caf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800caf6:	b099      	sub	sp, #100	; 0x64
 800caf8:	af02      	add	r7, sp, #8
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	6039      	str	r1, [r7, #0]
    {
        UtestShell* currentTest = UtestShell::getCurrent();
 800cafe:	f009 fdb7 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 800cb02:	6578      	str	r0, [r7, #84]	; 0x54
        currentTest->failWith(FailFailure(currentTest, currentTest->getName().asCharString(), currentTest->getLineNumber(), fail_string), TestTerminatorWithoutExceptions());
 800cb04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	339c      	adds	r3, #156	; 0x9c
 800cb0a:	681c      	ldr	r4, [r3, #0]
 800cb0c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cb10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cb12:	4618      	mov	r0, r3
 800cb14:	f008 fbc4 	bl	80152a0 <_ZNK10UtestShell7getNameEv>
 800cb18:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f002 fd4f 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 800cb22:	4605      	mov	r5, r0
 800cb24:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800cb26:	f008 fc9b 	bl	8015460 <_ZNK10UtestShell13getLineNumberEv>
 800cb2a:	4606      	mov	r6, r0
 800cb2c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cb30:	6839      	ldr	r1, [r7, #0]
 800cb32:	4618      	mov	r0, r3
 800cb34:	f002 f9b9 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800cb38:	f107 000c 	add.w	r0, r7, #12
 800cb3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cb40:	9300      	str	r3, [sp, #0]
 800cb42:	4633      	mov	r3, r6
 800cb44:	462a      	mov	r2, r5
 800cb46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cb48:	f004 fd14 	bl	8011574 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	653b      	str	r3, [r7, #80]	; 0x50
 800cb50:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800cb54:	4618      	mov	r0, r3
 800cb56:	f7ff ffbb 	bl	800cad0 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 800cb5a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800cb5e:	f107 030c 	add.w	r3, r7, #12
 800cb62:	4619      	mov	r1, r3
 800cb64:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800cb66:	47a0      	blx	r4
 800cb68:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f009 fe79 	bl	8016864 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 800cb72:	f107 030c 	add.w	r3, r7, #12
 800cb76:	4618      	mov	r0, r3
 800cb78:	f000 f9ac 	bl	800ced4 <_ZN11FailFailureD1Ev>
 800cb7c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cb80:	4618      	mov	r0, r3
 800cb82:	f002 fd4a 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800cb86:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f002 fd45 	bl	800f61a <_ZN12SimpleStringD1Ev>
    } // LCOV_EXCL_LINE
 800cb90:	bf00      	nop
 800cb92:	375c      	adds	r7, #92	; 0x5c
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cb98 <_ZN17MemoryLeakFailureC1Ev>:
class MemoryLeakFailure
 800cb98:	b480      	push	{r7}
 800cb9a:	b083      	sub	sp, #12
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	4a04      	ldr	r2, [pc, #16]	; (800cbb4 <_ZN17MemoryLeakFailureC1Ev+0x1c>)
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	601a      	str	r2, [r3, #0]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	4618      	mov	r0, r3
 800cbaa:	370c      	adds	r7, #12
 800cbac:	46bd      	mov	sp, r7
 800cbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb2:	4770      	bx	lr
 800cbb4:	0802b0c8 	.word	0x0802b0c8

0800cbb8 <_ZN25MemoryLeakWarningReporterC1Ev>:
class MemoryLeakWarningReporter: public MemoryLeakFailure
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b082      	sub	sp, #8
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f7ff ffe8 	bl	800cb98 <_ZN17MemoryLeakFailureC1Ev>
 800cbc8:	4a03      	ldr	r2, [pc, #12]	; (800cbd8 <_ZN25MemoryLeakWarningReporterC1Ev+0x20>)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	601a      	str	r2, [r3, #0]
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	3708      	adds	r7, #8
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bd80      	pop	{r7, pc}
 800cbd8:	0802b0b4 	.word	0x0802b0b4

0800cbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>:

static MemoryLeakFailure* globalReporter = NULLPTR;
static MemoryLeakDetector* globalDetector = NULLPTR;

MemoryLeakDetector* MemoryLeakWarningPlugin::getGlobalDetector()
{
 800cbdc:	b598      	push	{r3, r4, r7, lr}
 800cbde:	af00      	add	r7, sp, #0
    if (globalDetector == NULLPTR) {
 800cbe0:	4b11      	ldr	r3, [pc, #68]	; (800cc28 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d11b      	bne.n	800cc20 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x44>
        saveAndDisableNewDeleteOverloads();
 800cbe8:	f7ff fe60 	bl	800c8ac <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>

        globalReporter = new MemoryLeakWarningReporter;
 800cbec:	2004      	movs	r0, #4
 800cbee:	f7ff fd89 	bl	800c704 <_Znwj>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	461c      	mov	r4, r3
 800cbf6:	4620      	mov	r0, r4
 800cbf8:	f7ff ffde 	bl	800cbb8 <_ZN25MemoryLeakWarningReporterC1Ev>
 800cbfc:	4b0b      	ldr	r3, [pc, #44]	; (800cc2c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800cbfe:	601c      	str	r4, [r3, #0]
        globalDetector = new MemoryLeakDetector(globalReporter);
 800cc00:	f241 1050 	movw	r0, #4432	; 0x1150
 800cc04:	f7ff fd7e 	bl	800c704 <_Znwj>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	461c      	mov	r4, r3
 800cc0c:	4b07      	ldr	r3, [pc, #28]	; (800cc2c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4619      	mov	r1, r3
 800cc12:	4620      	mov	r0, r4
 800cc14:	f00c fa3e 	bl	8019094 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>
 800cc18:	4b03      	ldr	r3, [pc, #12]	; (800cc28 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800cc1a:	601c      	str	r4, [r3, #0]

        restoreNewDeleteOverloads();
 800cc1c:	f7ff feb6 	bl	800c98c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>
    }
    return globalDetector;
 800cc20:	4b01      	ldr	r3, [pc, #4]	; (800cc28 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800cc22:	681b      	ldr	r3, [r3, #0]
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	bd98      	pop	{r3, r4, r7, pc}
 800cc28:	200009c4 	.word	0x200009c4
 800cc2c:	200009c0 	.word	0x200009c0

0800cc30 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>:
{
    return globalReporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool des)
{
 800cc30:	b480      	push	{r7}
 800cc32:	b083      	sub	sp, #12
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
 800cc38:	460b      	mov	r3, r1
 800cc3a:	70fb      	strb	r3, [r7, #3]
    destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_ = des;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	78fa      	ldrb	r2, [r7, #3]
 800cc40:	765a      	strb	r2, [r3, #25]
}
 800cc42:	bf00      	nop
 800cc44:	370c      	adds	r7, #12
 800cc46:	46bd      	mov	sp, r7
 800cc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4c:	4770      	bx	lr
	...

0800cc50 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>:
    globalDetector = detector;
    globalReporter = reporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetector()
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	af00      	add	r7, sp, #0
    turnOffNewDeleteOverloads();
 800cc54:	f7ff fdbc 	bl	800c7d0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
    delete globalDetector;
 800cc58:	4b0b      	ldr	r3, [pc, #44]	; (800cc88 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d004      	beq.n	800cc6a <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x1a>
 800cc60:	681a      	ldr	r2, [r3, #0]
 800cc62:	3204      	adds	r2, #4
 800cc64:	6812      	ldr	r2, [r2, #0]
 800cc66:	4618      	mov	r0, r3
 800cc68:	4790      	blx	r2
    delete globalReporter;
 800cc6a:	4b08      	ldr	r3, [pc, #32]	; (800cc8c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x3c>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d004      	beq.n	800cc7c <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x2c>
 800cc72:	681a      	ldr	r2, [r3, #0]
 800cc74:	3204      	adds	r2, #4
 800cc76:	6812      	ldr	r2, [r2, #0]
 800cc78:	4618      	mov	r0, r3
 800cc7a:	4790      	blx	r2
    globalDetector = NULLPTR;
 800cc7c:	4b02      	ldr	r3, [pc, #8]	; (800cc88 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 800cc7e:	2200      	movs	r2, #0
 800cc80:	601a      	str	r2, [r3, #0]
}
 800cc82:	bf00      	nop
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	200009c4 	.word	0x200009c4
 800cc8c:	200009c0 	.word	0x200009c0

0800cc90 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>:
void MemoryLeakWarningPlugin::expectLeaksInTest(size_t n)
{
    expectedLeaks_ = n;
}

MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString& name, MemoryLeakDetector* localDetector) :
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b084      	sub	sp, #16
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	60f8      	str	r0, [r7, #12]
 800cc98:	60b9      	str	r1, [r7, #8]
 800cc9a:	607a      	str	r2, [r7, #4]
    TestPlugin(name), ignoreAllWarnings_(false), destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_(false), expectedLeaks_(0)
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	68b9      	ldr	r1, [r7, #8]
 800cca0:	4618      	mov	r0, r3
 800cca2:	f006 fdfd 	bl	80138a0 <_ZN10TestPluginC1ERK12SimpleString>
 800cca6:	4a14      	ldr	r2, [pc, #80]	; (800ccf8 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x68>)
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	601a      	str	r2, [r3, #0]
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	761a      	strb	r2, [r3, #24]
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	765a      	strb	r2, [r3, #25]
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	61da      	str	r2, [r3, #28]
{
    if (firstPlugin_ == NULLPTR) firstPlugin_ = this;
 800ccbe:	4b0f      	ldr	r3, [pc, #60]	; (800ccfc <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d102      	bne.n	800cccc <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x3c>
 800ccc6:	4a0d      	ldr	r2, [pc, #52]	; (800ccfc <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	6013      	str	r3, [r2, #0]

    if (localDetector) memLeakDetector_ = localDetector;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d003      	beq.n	800ccda <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x4a>
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	687a      	ldr	r2, [r7, #4]
 800ccd6:	615a      	str	r2, [r3, #20]
 800ccd8:	e004      	b.n	800cce4 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x54>
    else memLeakDetector_ = getGlobalDetector();
 800ccda:	f7ff ff7f 	bl	800cbdc <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800ccde:	4602      	mov	r2, r0
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	615a      	str	r2, [r3, #20]

    memLeakDetector_->enable();
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	695b      	ldr	r3, [r3, #20]
 800cce8:	4618      	mov	r0, r3
 800ccea:	f00c fa69 	bl	80191c0 <_ZN18MemoryLeakDetector6enableEv>
}
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3710      	adds	r7, #16
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}
 800ccf8:	0802b0dc 	.word	0x0802b0dc
 800ccfc:	200009c8 	.word	0x200009c8

0800cd00 <_ZN23MemoryLeakWarningPluginD1Ev>:

MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b082      	sub	sp, #8
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	4a09      	ldr	r2, [pc, #36]	; (800cd30 <_ZN23MemoryLeakWarningPluginD1Ev+0x30>)
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	601a      	str	r2, [r3, #0]
{
    if (destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_) {
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	7e5b      	ldrb	r3, [r3, #25]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d003      	beq.n	800cd1e <_ZN23MemoryLeakWarningPluginD1Ev+0x1e>
        MemoryLeakWarningPlugin::turnOffNewDeleteOverloads();
 800cd16:	f7ff fd5b 	bl	800c7d0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
        MemoryLeakWarningPlugin::destroyGlobalDetector();
 800cd1a:	f7ff ff99 	bl	800cc50 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	4618      	mov	r0, r3
 800cd22:	f006 fdf9 	bl	8013918 <_ZN10TestPluginD1Ev>
    }
}
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3708      	adds	r7, #8
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}
 800cd30:	0802b0dc 	.word	0x0802b0dc

0800cd34 <_ZN23MemoryLeakWarningPluginD0Ev>:
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b082      	sub	sp, #8
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
}
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f7ff ffdf 	bl	800cd00 <_ZN23MemoryLeakWarningPluginD1Ev>
 800cd42:	2124      	movs	r1, #36	; 0x24
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f7ff fd01 	bl	800c74c <_ZdlPvj>
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3708      	adds	r7, #8
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}

0800cd54 <_ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::preTestAction(UtestShell& /*test*/, TestResult& result)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b084      	sub	sp, #16
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	60f8      	str	r0, [r7, #12]
 800cd5c:	60b9      	str	r1, [r7, #8]
 800cd5e:	607a      	str	r2, [r7, #4]
    memLeakDetector_->startChecking();
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	695b      	ldr	r3, [r3, #20]
 800cd64:	4618      	mov	r0, r3
 800cd66:	f00c fa0e 	bl	8019186 <_ZN18MemoryLeakDetector13startCheckingEv>
    failureCount_ = result.getFailureCount();
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f7fd ffb0 	bl	800acd0 <_ZNK10TestResult15getFailureCountEv>
 800cd70:	4602      	mov	r2, r0
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	621a      	str	r2, [r3, #32]
}
 800cd76:	bf00      	nop
 800cd78:	3710      	adds	r7, #16
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}
	...

0800cd80 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::postTestAction(UtestShell& test, TestResult& result)
{
 800cd80:	b590      	push	{r4, r7, lr}
 800cd82:	b097      	sub	sp, #92	; 0x5c
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	60f8      	str	r0, [r7, #12]
 800cd88:	60b9      	str	r1, [r7, #8]
 800cd8a:	607a      	str	r2, [r7, #4]
    memLeakDetector_->stopChecking();
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	695b      	ldr	r3, [r3, #20]
 800cd90:	4618      	mov	r0, r3
 800cd92:	f00c fa08 	bl	80191a6 <_ZN18MemoryLeakDetector12stopCheckingEv>
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_checking);
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	695b      	ldr	r3, [r3, #20]
 800cd9a:	2103      	movs	r1, #3
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f00c fda5 	bl	80198ec <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800cda2:	6578      	str	r0, [r7, #84]	; 0x54

    if (!ignoreAllWarnings_ && expectedLeaks_ != leaks && failureCount_ == result.getFailureCount()) {
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	7e1b      	ldrb	r3, [r3, #24]
 800cda8:	f083 0301 	eor.w	r3, r3, #1
 800cdac:	b2db      	uxtb	r3, r3
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d00e      	beq.n	800cdd0 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	69db      	ldr	r3, [r3, #28]
 800cdb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	d009      	beq.n	800cdd0 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	6a1c      	ldr	r4, [r3, #32]
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f7fd ff85 	bl	800acd0 <_ZNK10TestResult15getFailureCountEv>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	429c      	cmp	r4, r3
 800cdca:	d101      	bne.n	800cdd0 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 800cdcc:	2301      	movs	r3, #1
 800cdce:	e000      	b.n	800cdd2 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x52>
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d04c      	beq.n	800ce70 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        if(MemoryLeakWarningPlugin::areNewDeleteOverloaded()) {
 800cdd6:	f7ff fd4f 	bl	800c878 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>
 800cdda:	4603      	mov	r3, r0
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d028      	beq.n	800ce32 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xb2>
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	695b      	ldr	r3, [r3, #20]
 800cde4:	2103      	movs	r1, #3
 800cde6:	4618      	mov	r0, r3
 800cde8:	f00c fd45 	bl	8019876 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 800cdec:	4602      	mov	r2, r0
 800cdee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800cdf2:	4611      	mov	r1, r2
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f002 f858 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800cdfa:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800cdfe:	f107 0310 	add.w	r3, r7, #16
 800ce02:	68b9      	ldr	r1, [r7, #8]
 800ce04:	4618      	mov	r0, r3
 800ce06:	f003 feaf 	bl	8010b68 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 800ce0a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f002 fc03 	bl	800f61a <_ZN12SimpleStringD1Ev>
            result.addFailure(f);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	3334      	adds	r3, #52	; 0x34
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f107 0210 	add.w	r2, r7, #16
 800ce20:	4611      	mov	r1, r2
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	4798      	blx	r3
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 800ce26:	f107 0310 	add.w	r3, r7, #16
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f003 ff5c 	bl	8010ce8 <_ZN11TestFailureD1Ev>
 800ce30:	e01e      	b.n	800ce70 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        } else if(expectedLeaks_ > 0) {
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	69db      	ldr	r3, [r3, #28]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d01a      	beq.n	800ce70 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
            result.print(StringFromFormat("Warning: Expected %d leak(s), but leak detection was disabled", (int) expectedLeaks_).asCharString());
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	3338      	adds	r3, #56	; 0x38
 800ce40:	681c      	ldr	r4, [r3, #0]
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	69db      	ldr	r3, [r3, #28]
 800ce46:	461a      	mov	r2, r3
 800ce48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ce4c:	4910      	ldr	r1, [pc, #64]	; (800ce90 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x110>)
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f003 f8ea 	bl	8010028 <_Z16StringFromFormatPKcz>
 800ce54:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f002 fbb1 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 800ce5e:	4603      	mov	r3, r0
 800ce60:	4619      	mov	r1, r3
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	47a0      	blx	r4
 800ce66:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f002 fbd5 	bl	800f61a <_ZN12SimpleStringD1Ev>
        }
    }
    memLeakDetector_->markCheckingPeriodLeaksAsNonCheckingPeriod();
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	695b      	ldr	r3, [r3, #20]
 800ce74:	4618      	mov	r0, r3
 800ce76:	f00c fd13 	bl	80198a0 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>
    ignoreAllWarnings_ = false;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	761a      	strb	r2, [r3, #24]
    expectedLeaks_ = 0;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	2200      	movs	r2, #0
 800ce84:	61da      	str	r2, [r3, #28]
}
 800ce86:	bf00      	nop
 800ce88:	375c      	adds	r7, #92	; 0x5c
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd90      	pop	{r4, r7, pc}
 800ce8e:	bf00      	nop
 800ce90:	08026e6c 	.word	0x08026e6c

0800ce94 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>:

const char* MemoryLeakWarningPlugin::FinalReport(size_t toBeDeletedLeaks)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b084      	sub	sp, #16
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
 800ce9c:	6039      	str	r1, [r7, #0]
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_enabled);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	695b      	ldr	r3, [r3, #20]
 800cea2:	2102      	movs	r1, #2
 800cea4:	4618      	mov	r0, r3
 800cea6:	f00c fd21 	bl	80198ec <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 800ceaa:	60f8      	str	r0, [r7, #12]
    if (leaks != toBeDeletedLeaks) return memLeakDetector_->report(mem_leak_period_enabled);
 800ceac:	68fa      	ldr	r2, [r7, #12]
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	d007      	beq.n	800cec4 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x30>
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	695b      	ldr	r3, [r3, #20]
 800ceb8:	2102      	movs	r1, #2
 800ceba:	4618      	mov	r0, r3
 800cebc:	f00c fcdb 	bl	8019876 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 800cec0:	4603      	mov	r3, r0
 800cec2:	e000      	b.n	800cec6 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x32>
    return "";
 800cec4:	4b02      	ldr	r3, [pc, #8]	; (800ced0 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x3c>)
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	3710      	adds	r7, #16
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}
 800cece:	bf00      	nop
 800ced0:	08026eac 	.word	0x08026eac

0800ced4 <_ZN11FailFailureD1Ev>:
{
public:
    CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& textString = "");
};

class FailFailure : public TestFailure
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b082      	sub	sp, #8
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
 800cedc:	4a05      	ldr	r2, [pc, #20]	; (800cef4 <_ZN11FailFailureD1Ev+0x20>)
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	601a      	str	r2, [r3, #0]
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	4618      	mov	r0, r3
 800cee6:	f003 feff 	bl	8010ce8 <_ZN11TestFailureD1Ev>
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	4618      	mov	r0, r3
 800ceee:	3708      	adds	r7, #8
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}
 800cef4:	0802b124 	.word	0x0802b124

0800cef8 <_ZN11FailFailureD0Ev>:
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b082      	sub	sp, #8
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f7ff ffe7 	bl	800ced4 <_ZN11FailFailureD1Ev>
 800cf06:	2134      	movs	r1, #52	; 0x34
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f7ff fc1f 	bl	800c74c <_ZdlPvj>
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	4618      	mov	r0, r3
 800cf12:	3708      	adds	r7, #8
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}

0800cf18 <_ZN17cpputest_longlongC1Ei>:

struct cpputest_longlong
{
#if defined(__cplusplus)
  cpputest_longlong() {}
  cpputest_longlong(int) {}
 800cf18:	b480      	push	{r7}
 800cf1a:	b083      	sub	sp, #12
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
 800cf20:	6039      	str	r1, [r7, #0]
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	4618      	mov	r0, r3
 800cf26:	370c      	adds	r7, #12
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2e:	4770      	bx	lr

0800cf30 <_ZN18cpputest_ulonglongC1Ei>:

struct cpputest_ulonglong
{
#if defined(__cplusplus)
  cpputest_ulonglong() {}
  cpputest_ulonglong(int) {}
 800cf30:	b480      	push	{r7}
 800cf32:	b083      	sub	sp, #12
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
 800cf38:	6039      	str	r1, [r7, #0]
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	370c      	adds	r7, #12
 800cf40:	46bd      	mov	sp, r7
 800cf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf46:	4770      	bx	lr

0800cf48 <_ZN19MockFailureReporterC1Ev>:
class MockFailureReporter
{
protected:
    bool crashOnFailure_;
public:
    MockFailureReporter() : crashOnFailure_(false){}
 800cf48:	b480      	push	{r7}
 800cf4a:	b083      	sub	sp, #12
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	4a06      	ldr	r2, [pc, #24]	; (800cf6c <_ZN19MockFailureReporterC1Ev+0x24>)
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	601a      	str	r2, [r3, #0]
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	711a      	strb	r2, [r3, #4]
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	4618      	mov	r0, r3
 800cf60:	370c      	adds	r7, #12
 800cf62:	46bd      	mov	sp, r7
 800cf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf68:	4770      	bx	lr
 800cf6a:	bf00      	nop
 800cf6c:	0802c300 	.word	0x0802c300

0800cf70 <_ZN19MockFailureReporterD1Ev>:
    virtual ~MockFailureReporter() {}
 800cf70:	b480      	push	{r7}
 800cf72:	b083      	sub	sp, #12
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	4a04      	ldr	r2, [pc, #16]	; (800cf8c <_ZN19MockFailureReporterD1Ev+0x1c>)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	601a      	str	r2, [r3, #0]
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	4618      	mov	r0, r3
 800cf82:	370c      	adds	r7, #12
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr
 800cf8c:	0802c300 	.word	0x0802c300

0800cf90 <_ZN19MockFailureReporterD0Ev>:
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b082      	sub	sp, #8
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f7ff ffe9 	bl	800cf70 <_ZN19MockFailureReporterD1Ev>
 800cf9e:	2108      	movs	r1, #8
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f7ff fbd3 	bl	800c74c <_ZdlPvj>
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3708      	adds	r7, #8
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}

0800cfb0 <_ZN11MockFailureD1Ev>:

class MockFailure : public TestFailure
{
public:
    MockFailure(UtestShell* test);
    virtual ~MockFailure() _destructor_override {}
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b082      	sub	sp, #8
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	4a05      	ldr	r2, [pc, #20]	; (800cfd0 <_ZN11MockFailureD1Ev+0x20>)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	601a      	str	r2, [r3, #0]
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f003 fe91 	bl	8010ce8 <_ZN11TestFailureD1Ev>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3708      	adds	r7, #8
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}
 800cfd0:	0802b278 	.word	0x0802b278

0800cfd4 <_ZN11MockFailureD0Ev>:
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b082      	sub	sp, #8
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f7ff ffe7 	bl	800cfb0 <_ZN11MockFailureD1Ev>
 800cfe2:	2134      	movs	r1, #52	; 0x34
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f7ff fbb1 	bl	800c74c <_ZdlPvj>
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	4618      	mov	r0, r3
 800cfee:	3708      	adds	r7, #8
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}

0800cff4 <_ZN14MockNamedValueC1ERKS_>:
class MockNamedValueComparatorsAndCopiersRepository;
class MockNamedValue
{
public:
    MockNamedValue(const SimpleString& name);
    DEFAULT_COPY_CONSTRUCTOR(MockNamedValue)
 800cff4:	b590      	push	{r4, r7, lr}
 800cff6:	b083      	sub	sp, #12
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
 800cffc:	6039      	str	r1, [r7, #0]
 800cffe:	4a16      	ldr	r2, [pc, #88]	; (800d058 <_ZN14MockNamedValueC1ERKS_+0x64>)
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	601a      	str	r2, [r3, #0]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	1d1a      	adds	r2, r3, #4
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	3304      	adds	r3, #4
 800d00c:	4619      	mov	r1, r3
 800d00e:	4610      	mov	r0, r2
 800d010:	f001 ff9f 	bl	800ef52 <_ZN12SimpleStringC1ERKS_>
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f103 020c 	add.w	r2, r3, #12
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	330c      	adds	r3, #12
 800d01e:	4619      	mov	r1, r3
 800d020:	4610      	mov	r0, r2
 800d022:	f001 ff96 	bl	800ef52 <_ZN12SimpleStringC1ERKS_>
 800d026:	687a      	ldr	r2, [r7, #4]
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	f102 0418 	add.w	r4, r2, #24
 800d02e:	3318      	adds	r3, #24
 800d030:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d032:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	629a      	str	r2, [r3, #40]	; 0x28
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	62da      	str	r2, [r3, #44]	; 0x2c
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	631a      	str	r2, [r3, #48]	; 0x30
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	4618      	mov	r0, r3
 800d052:	370c      	adds	r7, #12
 800d054:	46bd      	mov	sp, r7
 800d056:	bd90      	pop	{r4, r7, pc}
 800d058:	0802c340 	.word	0x0802c340

0800d05c <_Z4mockRK12SimpleStringP19MockFailureReporter>:
#define MOCK_SUPPORT_SCOPE_PREFIX "!!!$$$MockingSupportScope$$$!!!"

static MockSupport global_mock;

MockSupport& mock(const SimpleString& mockName, MockFailureReporter* failureReporterForThisCall)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b086      	sub	sp, #24
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6039      	str	r1, [r7, #0]
    MockSupport& mock_support = (mockName != "") ? *global_mock.getMockSupportScope(mockName) : global_mock;
 800d066:	f107 030c 	add.w	r3, r7, #12
 800d06a:	4916      	ldr	r1, [pc, #88]	; (800d0c4 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x68>)
 800d06c:	4618      	mov	r0, r3
 800d06e:	f001 ff1c 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800d072:	f107 030c 	add.w	r3, r7, #12
 800d076:	4619      	mov	r1, r3
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f002 fb1f 	bl	800f6bc <_ZneRK12SimpleStringS1_>
 800d07e:	4603      	mov	r3, r0
 800d080:	2b00      	cmp	r3, #0
 800d082:	d005      	beq.n	800d090 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x34>
 800d084:	6879      	ldr	r1, [r7, #4]
 800d086:	4810      	ldr	r0, [pc, #64]	; (800d0c8 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 800d088:	f000 ff70 	bl	800df6c <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>
 800d08c:	4603      	mov	r3, r0
 800d08e:	e000      	b.n	800d092 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x36>
 800d090:	4b0d      	ldr	r3, [pc, #52]	; (800d0c8 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 800d092:	617b      	str	r3, [r7, #20]
 800d094:	f107 030c 	add.w	r3, r7, #12
 800d098:	4618      	mov	r0, r3
 800d09a:	f002 fabe 	bl	800f61a <_ZN12SimpleStringD1Ev>
    mock_support.setActiveReporter(failureReporterForThisCall);
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	33a8      	adds	r3, #168	; 0xa8
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	6839      	ldr	r1, [r7, #0]
 800d0a8:	6978      	ldr	r0, [r7, #20]
 800d0aa:	4798      	blx	r3
    mock_support.setDefaultComparatorsAndCopiersRepository();
 800d0ac:	697b      	ldr	r3, [r7, #20]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	33ac      	adds	r3, #172	; 0xac
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	6978      	ldr	r0, [r7, #20]
 800d0b6:	4798      	blx	r3
    return mock_support;
 800d0b8:	697b      	ldr	r3, [r7, #20]
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3718      	adds	r7, #24
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}
 800d0c2:	bf00      	nop
 800d0c4:	08026eb0 	.word	0x08026eb0
 800d0c8:	200009cc 	.word	0x200009cc

0800d0cc <_ZN11MockSupportC1ERK12SimpleString>:

MockSupport::MockSupport(const SimpleString& mockName)
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b082      	sub	sp, #8
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
 800d0d4:	6039      	str	r1, [r7, #0]
    : actualCallOrder_(0), expectedCallOrder_(0), strictOrdering_(false), standardReporter_(&defaultReporter_), ignoreOtherCalls_(false), enabled_(true), lastActualFunctionCall_(NULLPTR), mockName_(mockName), tracing_(false)
 800d0d6:	4a21      	ldr	r2, [pc, #132]	; (800d15c <_ZN11MockSupportC1ERK12SimpleString+0x90>)
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	601a      	str	r2, [r3, #0]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	605a      	str	r2, [r3, #4]
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	609a      	str	r2, [r3, #8]
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	731a      	strb	r2, [r3, #12]
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f103 0218 	add.w	r2, r3, #24
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	615a      	str	r2, [r3, #20]
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	3318      	adds	r3, #24
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f7ff ff23 	bl	800cf48 <_ZN19MockFailureReporterC1Ev>
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	3320      	adds	r3, #32
 800d106:	4618      	mov	r0, r3
 800d108:	f010 fefc 	bl	801df04 <_ZN21MockExpectedCallsListC1Ev>
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2200      	movs	r2, #0
 800d110:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2201      	movs	r2, #1
 800d118:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2200      	movs	r2, #0
 800d120:	62da      	str	r2, [r3, #44]	; 0x2c
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	3330      	adds	r3, #48	; 0x30
 800d126:	4618      	mov	r0, r3
 800d128:	f014 fbe8 	bl	80218fc <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	3338      	adds	r3, #56	; 0x38
 800d130:	4618      	mov	r0, r3
 800d132:	f014 faf2 	bl	802171a <_ZN18MockNamedValueListC1Ev>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	333c      	adds	r3, #60	; 0x3c
 800d13a:	6839      	ldr	r1, [r7, #0]
 800d13c:	4618      	mov	r0, r3
 800d13e:	f001 ff08 	bl	800ef52 <_ZN12SimpleStringC1ERKS_>
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2200      	movs	r2, #0
 800d146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
{
    setActiveReporter(NULLPTR);
 800d14a:	2100      	movs	r1, #0
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f000 f894 	bl	800d27a <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>
}
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	4618      	mov	r0, r3
 800d156:	3708      	adds	r7, #8
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}
 800d15c:	0802b150 	.word	0x0802b150

0800d160 <_ZN11MockSupportD1Ev>:

MockSupport::~MockSupport()
 800d160:	b580      	push	{r7, lr}
 800d162:	b082      	sub	sp, #8
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	4a0d      	ldr	r2, [pc, #52]	; (800d1a0 <_ZN11MockSupportD1Ev+0x40>)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	601a      	str	r2, [r3, #0]
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	333c      	adds	r3, #60	; 0x3c
 800d172:	4618      	mov	r0, r3
 800d174:	f002 fa51 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	3330      	adds	r3, #48	; 0x30
 800d17c:	4618      	mov	r0, r3
 800d17e:	f014 fbd1 	bl	8021924 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	3320      	adds	r3, #32
 800d186:	4618      	mov	r0, r3
 800d188:	f010 fed0 	bl	801df2c <_ZN21MockExpectedCallsListD1Ev>
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	3318      	adds	r3, #24
 800d190:	4618      	mov	r0, r3
 800d192:	f7ff feed 	bl	800cf70 <_ZN19MockFailureReporterD1Ev>
{
}
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	4618      	mov	r0, r3
 800d19a:	3708      	adds	r7, #8
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}
 800d1a0:	0802b150 	.word	0x0802b150

0800d1a4 <_ZN11MockSupportD0Ev>:
MockSupport::~MockSupport()
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b082      	sub	sp, #8
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
}
 800d1ac:	6878      	ldr	r0, [r7, #4]
 800d1ae:	f7ff ffd7 	bl	800d160 <_ZN11MockSupportD1Ev>
 800d1b2:	2148      	movs	r1, #72	; 0x48
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f7ff fac9 	bl	800c74c <_ZdlPvj>
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3708      	adds	r7, #8
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}

0800d1c4 <_ZN11MockSupport14crashOnFailureEb>:

void MockSupport::crashOnFailure(bool shouldCrash)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b082      	sub	sp, #8
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
 800d1cc:	460b      	mov	r3, r1
 800d1ce:	70fb      	strb	r3, [r7, #3]
    activeReporter_->crashOnFailure(shouldCrash);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	691a      	ldr	r2, [r3, #16]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	691b      	ldr	r3, [r3, #16]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	3310      	adds	r3, #16
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	78f9      	ldrb	r1, [r7, #3]
 800d1e0:	4610      	mov	r0, r2
 800d1e2:	4798      	blx	r3
}
 800d1e4:	bf00      	nop
 800d1e6:	3708      	adds	r7, #8
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter>:

void MockSupport::setMockFailureStandardReporter(MockFailureReporter* reporter)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b084      	sub	sp, #16
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
 800d1f4:	6039      	str	r1, [r7, #0]
    standardReporter_ = (reporter != NULLPTR) ? reporter : &defaultReporter_;
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d102      	bne.n	800d202 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x16>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	3318      	adds	r3, #24
 800d200:	e000      	b.n	800d204 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x18>
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	687a      	ldr	r2, [r7, #4]
 800d206:	6153      	str	r3, [r2, #20]

    if (lastActualFunctionCall_)
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d00a      	beq.n	800d226 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x3a>
        lastActualFunctionCall_->setMockFailureReporter(standardReporter_);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	33c8      	adds	r3, #200	; 0xc8
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	687a      	ldr	r2, [r7, #4]
 800d220:	6952      	ldr	r2, [r2, #20]
 800d222:	4611      	mov	r1, r2
 800d224:	4798      	blx	r3

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	3338      	adds	r3, #56	; 0x38
 800d22a:	4618      	mov	r0, r3
 800d22c:	f014 fb0b 	bl	8021846 <_ZN18MockNamedValueList5beginEv>
 800d230:	60f8      	str	r0, [r7, #12]
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d01c      	beq.n	800d272 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x86>
        if (getMockSupport(p)) getMockSupport(p)->setMockFailureStandardReporter(standardReporter_);
 800d238:	68f9      	ldr	r1, [r7, #12]
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	f000 ff26 	bl	800e08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d240:	4603      	mov	r3, r0
 800d242:	2b00      	cmp	r3, #0
 800d244:	bf14      	ite	ne
 800d246:	2301      	movne	r3, #1
 800d248:	2300      	moveq	r3, #0
 800d24a:	b2db      	uxtb	r3, r3
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d00b      	beq.n	800d268 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x7c>
 800d250:	68f9      	ldr	r1, [r7, #12]
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f000 ff1a 	bl	800e08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d258:	4603      	mov	r3, r0
 800d25a:	681a      	ldr	r2, [r3, #0]
 800d25c:	32a4      	adds	r2, #164	; 0xa4
 800d25e:	6812      	ldr	r2, [r2, #0]
 800d260:	6879      	ldr	r1, [r7, #4]
 800d262:	6949      	ldr	r1, [r1, #20]
 800d264:	4618      	mov	r0, r3
 800d266:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d268:	68f8      	ldr	r0, [r7, #12]
 800d26a:	f014 f9f5 	bl	8021658 <_ZN22MockNamedValueListNode4nextEv>
 800d26e:	60f8      	str	r0, [r7, #12]
 800d270:	e7df      	b.n	800d232 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x46>
}
 800d272:	bf00      	nop
 800d274:	3710      	adds	r7, #16
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}

0800d27a <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>:

void MockSupport::setActiveReporter(MockFailureReporter* reporter)
{
 800d27a:	b480      	push	{r7}
 800d27c:	b083      	sub	sp, #12
 800d27e:	af00      	add	r7, sp, #0
 800d280:	6078      	str	r0, [r7, #4]
 800d282:	6039      	str	r1, [r7, #0]
    activeReporter_ = (reporter) ? reporter : standardReporter_;
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d102      	bne.n	800d290 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x16>
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	695b      	ldr	r3, [r3, #20]
 800d28e:	e000      	b.n	800d292 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x18>
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	687a      	ldr	r2, [r7, #4]
 800d294:	6113      	str	r3, [r2, #16]
}
 800d296:	bf00      	nop
 800d298:	370c      	adds	r7, #12
 800d29a:	46bd      	mov	sp, r7
 800d29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a0:	4770      	bx	lr

0800d2a2 <_ZN11MockSupport41setDefaultComparatorsAndCopiersRepositoryEv>:

void MockSupport::setDefaultComparatorsAndCopiersRepository()
{
 800d2a2:	b580      	push	{r7, lr}
 800d2a4:	b082      	sub	sp, #8
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	6078      	str	r0, [r7, #4]
    MockNamedValue::setDefaultComparatorsAndCopiersRepository(&comparatorsAndCopiersRepository_);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	3330      	adds	r3, #48	; 0x30
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f012 fb10 	bl	801f8d4 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>
}
 800d2b4:	bf00      	nop
 800d2b6:	3708      	adds	r7, #8
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}

0800d2bc <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockSupport::installComparator(const SimpleString& typeName, MockNamedValueComparator& comparator)
{
 800d2bc:	b590      	push	{r4, r7, lr}
 800d2be:	b087      	sub	sp, #28
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	60f8      	str	r0, [r7, #12]
 800d2c4:	60b9      	str	r1, [r7, #8]
 800d2c6:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installComparator(typeName, comparator);
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	3330      	adds	r3, #48	; 0x30
 800d2cc:	687a      	ldr	r2, [r7, #4]
 800d2ce:	68b9      	ldr	r1, [r7, #8]
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f014 fb75 	bl	80219c0 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	3338      	adds	r3, #56	; 0x38
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f014 fab3 	bl	8021846 <_ZN18MockNamedValueList5beginEv>
 800d2e0:	6178      	str	r0, [r7, #20]
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d01c      	beq.n	800d322 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installComparator(typeName, comparator);
 800d2e8:	6979      	ldr	r1, [r7, #20]
 800d2ea:	68f8      	ldr	r0, [r7, #12]
 800d2ec:	f000 fece 	bl	800e08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	bf14      	ite	ne
 800d2f6:	2301      	movne	r3, #1
 800d2f8:	2300      	moveq	r3, #0
 800d2fa:	b2db      	uxtb	r3, r3
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d00b      	beq.n	800d318 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x5c>
 800d300:	6979      	ldr	r1, [r7, #20]
 800d302:	68f8      	ldr	r0, [r7, #12]
 800d304:	f000 fec2 	bl	800e08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d308:	4603      	mov	r3, r0
 800d30a:	681a      	ldr	r2, [r3, #0]
 800d30c:	32b0      	adds	r2, #176	; 0xb0
 800d30e:	6814      	ldr	r4, [r2, #0]
 800d310:	687a      	ldr	r2, [r7, #4]
 800d312:	68b9      	ldr	r1, [r7, #8]
 800d314:	4618      	mov	r0, r3
 800d316:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d318:	6978      	ldr	r0, [r7, #20]
 800d31a:	f014 f99d 	bl	8021658 <_ZN22MockNamedValueListNode4nextEv>
 800d31e:	6178      	str	r0, [r7, #20]
 800d320:	e7df      	b.n	800d2e2 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x26>
}
 800d322:	bf00      	nop
 800d324:	371c      	adds	r7, #28
 800d326:	46bd      	mov	sp, r7
 800d328:	bd90      	pop	{r4, r7, pc}

0800d32a <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockSupport::installCopier(const SimpleString& typeName, MockNamedValueCopier& copier)
{
 800d32a:	b590      	push	{r4, r7, lr}
 800d32c:	b087      	sub	sp, #28
 800d32e:	af00      	add	r7, sp, #0
 800d330:	60f8      	str	r0, [r7, #12]
 800d332:	60b9      	str	r1, [r7, #8]
 800d334:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installCopier(typeName, copier);
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	3330      	adds	r3, #48	; 0x30
 800d33a:	687a      	ldr	r2, [r7, #4]
 800d33c:	68b9      	ldr	r1, [r7, #8]
 800d33e:	4618      	mov	r0, r3
 800d340:	f014 fb5a 	bl	80219f8 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	3338      	adds	r3, #56	; 0x38
 800d348:	4618      	mov	r0, r3
 800d34a:	f014 fa7c 	bl	8021846 <_ZN18MockNamedValueList5beginEv>
 800d34e:	6178      	str	r0, [r7, #20]
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d01c      	beq.n	800d390 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installCopier(typeName, copier);
 800d356:	6979      	ldr	r1, [r7, #20]
 800d358:	68f8      	ldr	r0, [r7, #12]
 800d35a:	f000 fe97 	bl	800e08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d35e:	4603      	mov	r3, r0
 800d360:	2b00      	cmp	r3, #0
 800d362:	bf14      	ite	ne
 800d364:	2301      	movne	r3, #1
 800d366:	2300      	moveq	r3, #0
 800d368:	b2db      	uxtb	r3, r3
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d00b      	beq.n	800d386 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x5c>
 800d36e:	6979      	ldr	r1, [r7, #20]
 800d370:	68f8      	ldr	r0, [r7, #12]
 800d372:	f000 fe8b 	bl	800e08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d376:	4603      	mov	r3, r0
 800d378:	681a      	ldr	r2, [r3, #0]
 800d37a:	32b4      	adds	r2, #180	; 0xb4
 800d37c:	6814      	ldr	r4, [r2, #0]
 800d37e:	687a      	ldr	r2, [r7, #4]
 800d380:	68b9      	ldr	r1, [r7, #8]
 800d382:	4618      	mov	r0, r3
 800d384:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d386:	6978      	ldr	r0, [r7, #20]
 800d388:	f014 f966 	bl	8021658 <_ZN22MockNamedValueListNode4nextEv>
 800d38c:	6178      	str	r0, [r7, #20]
 800d38e:	e7df      	b.n	800d350 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x26>
}
 800d390:	bf00      	nop
 800d392:	371c      	adds	r7, #28
 800d394:	46bd      	mov	sp, r7
 800d396:	bd90      	pop	{r4, r7, pc}

0800d398 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository>:

void MockSupport::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b084      	sub	sp, #16
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
 800d3a0:	6039      	str	r1, [r7, #0]
    comparatorsAndCopiersRepository_.installComparatorsAndCopiers(repository);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	3330      	adds	r3, #48	; 0x30
 800d3a6:	6839      	ldr	r1, [r7, #0]
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f014 fb91 	bl	8021ad0 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	3338      	adds	r3, #56	; 0x38
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f014 fa47 	bl	8021846 <_ZN18MockNamedValueList5beginEv>
 800d3b8:	60f8      	str	r0, [r7, #12]
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d01b      	beq.n	800d3f8 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x60>
        if (getMockSupport(p)) getMockSupport(p)->installComparatorsAndCopiers(repository);
 800d3c0:	68f9      	ldr	r1, [r7, #12]
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f000 fe62 	bl	800e08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	bf14      	ite	ne
 800d3ce:	2301      	movne	r3, #1
 800d3d0:	2300      	moveq	r3, #0
 800d3d2:	b2db      	uxtb	r3, r3
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d00a      	beq.n	800d3ee <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x56>
 800d3d8:	68f9      	ldr	r1, [r7, #12]
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f000 fe56 	bl	800e08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	681a      	ldr	r2, [r3, #0]
 800d3e4:	32b8      	adds	r2, #184	; 0xb8
 800d3e6:	6812      	ldr	r2, [r2, #0]
 800d3e8:	6839      	ldr	r1, [r7, #0]
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d3ee:	68f8      	ldr	r0, [r7, #12]
 800d3f0:	f014 f932 	bl	8021658 <_ZN22MockNamedValueListNode4nextEv>
 800d3f4:	60f8      	str	r0, [r7, #12]
 800d3f6:	e7e0      	b.n	800d3ba <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x22>
}
 800d3f8:	bf00      	nop
 800d3fa:	3710      	adds	r7, #16
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}

0800d400 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv>:

void MockSupport::removeAllComparatorsAndCopiers()
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b084      	sub	sp, #16
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
    comparatorsAndCopiersRepository_.clear();
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	3330      	adds	r3, #48	; 0x30
 800d40c:	4618      	mov	r0, r3
 800d40e:	f014 fab8 	bl	8021982 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	3338      	adds	r3, #56	; 0x38
 800d416:	4618      	mov	r0, r3
 800d418:	f014 fa15 	bl	8021846 <_ZN18MockNamedValueList5beginEv>
 800d41c:	60f8      	str	r0, [r7, #12]
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d01a      	beq.n	800d45a <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x5a>
        if (getMockSupport(p)) getMockSupport(p)->removeAllComparatorsAndCopiers();
 800d424:	68f9      	ldr	r1, [r7, #12]
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f000 fe30 	bl	800e08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d42c:	4603      	mov	r3, r0
 800d42e:	2b00      	cmp	r3, #0
 800d430:	bf14      	ite	ne
 800d432:	2301      	movne	r3, #1
 800d434:	2300      	moveq	r3, #0
 800d436:	b2db      	uxtb	r3, r3
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d009      	beq.n	800d450 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x50>
 800d43c:	68f9      	ldr	r1, [r7, #12]
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f000 fe24 	bl	800e08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d444:	4603      	mov	r3, r0
 800d446:	681a      	ldr	r2, [r3, #0]
 800d448:	32bc      	adds	r2, #188	; 0xbc
 800d44a:	6812      	ldr	r2, [r2, #0]
 800d44c:	4618      	mov	r0, r3
 800d44e:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d450:	68f8      	ldr	r0, [r7, #12]
 800d452:	f014 f901 	bl	8021658 <_ZN22MockNamedValueListNode4nextEv>
 800d456:	60f8      	str	r0, [r7, #12]
 800d458:	e7e1      	b.n	800d41e <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x1e>
}
 800d45a:	bf00      	nop
 800d45c:	3710      	adds	r7, #16
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}

0800d462 <_ZN11MockSupport5clearEv>:

void MockSupport::clear()
{
 800d462:	b580      	push	{r7, lr}
 800d464:	b084      	sub	sp, #16
 800d466:	af00      	add	r7, sp, #0
 800d468:	6078      	str	r0, [r7, #4]
    delete lastActualFunctionCall_;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d004      	beq.n	800d47c <_ZN11MockSupport5clearEv+0x1a>
 800d472:	681a      	ldr	r2, [r3, #0]
 800d474:	3204      	adds	r2, #4
 800d476:	6812      	ldr	r2, [r2, #0]
 800d478:	4618      	mov	r0, r3
 800d47a:	4790      	blx	r2
    lastActualFunctionCall_ = NULLPTR;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2200      	movs	r2, #0
 800d480:	62da      	str	r2, [r3, #44]	; 0x2c

    tracing_ = false;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2200      	movs	r2, #0
 800d486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    MockActualCallTrace::clearInstance();
 800d48a:	f00e fe0d 	bl	801c0a8 <_ZN19MockActualCallTrace13clearInstanceEv>

    expectations_.deleteAllExpectationsAndClearList();
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	3320      	adds	r3, #32
 800d492:	4618      	mov	r0, r3
 800d494:	f011 f937 	bl	801e706 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>
    ignoreOtherCalls_ = false;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2200      	movs	r2, #0
 800d49c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    enabled_ = true;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2201      	movs	r2, #1
 800d4a4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    actualCallOrder_ = 0;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	605a      	str	r2, [r3, #4]
    expectedCallOrder_ = 0;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	609a      	str	r2, [r3, #8]
    strictOrdering_ = false;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	731a      	strb	r2, [r3, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	3338      	adds	r3, #56	; 0x38
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f014 f9c1 	bl	8021846 <_ZN18MockNamedValueList5beginEv>
 800d4c4:	60f8      	str	r0, [r7, #12]
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d01a      	beq.n	800d502 <_ZN11MockSupport5clearEv+0xa0>
        MockSupport* support = getMockSupport(p);
 800d4cc:	68f9      	ldr	r1, [r7, #12]
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f000 fddc 	bl	800e08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d4d4:	60b8      	str	r0, [r7, #8]
        if (support) {
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d00d      	beq.n	800d4f8 <_ZN11MockSupport5clearEv+0x96>
            support->clear();
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	339c      	adds	r3, #156	; 0x9c
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	68b8      	ldr	r0, [r7, #8]
 800d4e6:	4798      	blx	r3
            delete support;
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d004      	beq.n	800d4f8 <_ZN11MockSupport5clearEv+0x96>
 800d4ee:	681a      	ldr	r2, [r3, #0]
 800d4f0:	3204      	adds	r2, #4
 800d4f2:	6812      	ldr	r2, [r2, #0]
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800d4f8:	68f8      	ldr	r0, [r7, #12]
 800d4fa:	f014 f8ad 	bl	8021658 <_ZN22MockNamedValueListNode4nextEv>
 800d4fe:	60f8      	str	r0, [r7, #12]
 800d500:	e7e1      	b.n	800d4c6 <_ZN11MockSupport5clearEv+0x64>
        }
    }
    data_.clear();
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	3338      	adds	r3, #56	; 0x38
 800d506:	4618      	mov	r0, r3
 800d508:	f014 f915 	bl	8021736 <_ZN18MockNamedValueList5clearEv>
}
 800d50c:	bf00      	nop
 800d50e:	3710      	adds	r7, #16
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}

0800d514 <_ZN11MockSupport11strictOrderEv>:

void MockSupport::strictOrder()
{
 800d514:	b480      	push	{r7}
 800d516:	b083      	sub	sp, #12
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
    strictOrdering_ = true;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2201      	movs	r2, #1
 800d520:	731a      	strb	r2, [r3, #12]
}
 800d522:	bf00      	nop
 800d524:	370c      	adds	r7, #12
 800d526:	46bd      	mov	sp, r7
 800d528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52c:	4770      	bx	lr
	...

0800d530 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>:

SimpleString MockSupport::appendScopeToName(const SimpleString& functionName)
{
 800d530:	b590      	push	{r4, r7, lr}
 800d532:	b089      	sub	sp, #36	; 0x24
 800d534:	af00      	add	r7, sp, #0
 800d536:	60f8      	str	r0, [r7, #12]
 800d538:	60b9      	str	r1, [r7, #8]
 800d53a:	607a      	str	r2, [r7, #4]
    if (mockName_.isEmpty()) return functionName;
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	333c      	adds	r3, #60	; 0x3c
 800d540:	4618      	mov	r0, r3
 800d542:	f002 f859 	bl	800f5f8 <_ZNK12SimpleString7isEmptyEv>
 800d546:	4603      	mov	r3, r0
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d004      	beq.n	800d556 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x26>
 800d54c:	6879      	ldr	r1, [r7, #4]
 800d54e:	68f8      	ldr	r0, [r7, #12]
 800d550:	f001 fcff 	bl	800ef52 <_ZN12SimpleStringC1ERKS_>
 800d554:	e021      	b.n	800d59a <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x6a>
    return mockName_ + "::" + functionName;
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800d55c:	f107 0318 	add.w	r3, r7, #24
 800d560:	4910      	ldr	r1, [pc, #64]	; (800d5a4 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x74>)
 800d562:	4618      	mov	r0, r3
 800d564:	f001 fca1 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800d568:	f107 0310 	add.w	r3, r7, #16
 800d56c:	f107 0218 	add.w	r2, r7, #24
 800d570:	4621      	mov	r1, r4
 800d572:	4618      	mov	r0, r3
 800d574:	f002 f8b3 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	f107 0110 	add.w	r1, r7, #16
 800d57e:	687a      	ldr	r2, [r7, #4]
 800d580:	4618      	mov	r0, r3
 800d582:	f002 f8ac 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 800d586:	f107 0310 	add.w	r3, r7, #16
 800d58a:	4618      	mov	r0, r3
 800d58c:	f002 f845 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800d590:	f107 0318 	add.w	r3, r7, #24
 800d594:	4618      	mov	r0, r3
 800d596:	f002 f840 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 800d59a:	68f8      	ldr	r0, [r7, #12]
 800d59c:	3724      	adds	r7, #36	; 0x24
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd90      	pop	{r4, r7, pc}
 800d5a2:	bf00      	nop
 800d5a4:	08026eb4 	.word	0x08026eb4

0800d5a8 <_ZN11MockSupport13expectOneCallERK12SimpleString>:

MockExpectedCall& MockSupport::expectOneCall(const SimpleString& functionName)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b082      	sub	sp, #8
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
 800d5b0:	6039      	str	r1, [r7, #0]
    return expectNCalls(1, functionName);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	3314      	adds	r3, #20
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	683a      	ldr	r2, [r7, #0]
 800d5bc:	2101      	movs	r1, #1
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	4798      	blx	r3
 800d5c2:	4603      	mov	r3, r0
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3708      	adds	r7, #8
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}

0800d5cc <_ZN11MockSupport12expectNoCallERK12SimpleString>:

void MockSupport::expectNoCall(const SimpleString& functionName)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b082      	sub	sp, #8
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	6039      	str	r1, [r7, #0]
    expectNCalls(0, functionName);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	3314      	adds	r3, #20
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	683a      	ldr	r2, [r7, #0]
 800d5e0:	2100      	movs	r1, #0
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	4798      	blx	r3
}
 800d5e6:	bf00      	nop
 800d5e8:	3708      	adds	r7, #8
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}
	...

0800d5f0 <_ZN11MockSupport12expectNCallsEjRK12SimpleString>:

MockExpectedCall& MockSupport::expectNCalls(unsigned int amount, const SimpleString& functionName)
{
 800d5f0:	b590      	push	{r4, r7, lr}
 800d5f2:	b089      	sub	sp, #36	; 0x24
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	60f8      	str	r0, [r7, #12]
 800d5f8:	60b9      	str	r1, [r7, #8]
 800d5fa:	607a      	str	r2, [r7, #4]
    if (!enabled_) return MockIgnoredExpectedCall::instance();
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800d602:	f083 0301 	eor.w	r3, r3, #1
 800d606:	b2db      	uxtb	r3, r3
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d003      	beq.n	800d614 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x24>
 800d60c:	f010 fbf6 	bl	801ddfc <_ZN23MockIgnoredExpectedCall8instanceEv>
 800d610:	4603      	mov	r3, r0
 800d612:	e041      	b.n	800d698 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xa8>

    countCheck();
 800d614:	68f8      	ldr	r0, [r7, #12]
 800d616:	f000 fb1b 	bl	800dc50 <_ZN11MockSupport10countCheckEv>

    MockCheckedExpectedCall* call = new MockCheckedExpectedCall(amount);
 800d61a:	22a5      	movs	r2, #165	; 0xa5
 800d61c:	4920      	ldr	r1, [pc, #128]	; (800d6a0 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xb0>)
 800d61e:	2070      	movs	r0, #112	; 0x70
 800d620:	f7ff f880 	bl	800c724 <_ZnwjPKci>
 800d624:	4604      	mov	r4, r0
 800d626:	68b9      	ldr	r1, [r7, #8]
 800d628:	4620      	mov	r0, r4
 800d62a:	f00f f8f3 	bl	801c814 <_ZN23MockCheckedExpectedCallC1Ej>
 800d62e:	61fc      	str	r4, [r7, #28]
    call->withName(appendScopeToName(functionName));
 800d630:	69fb      	ldr	r3, [r7, #28]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	3308      	adds	r3, #8
 800d636:	681c      	ldr	r4, [r3, #0]
 800d638:	f107 0314 	add.w	r3, r7, #20
 800d63c:	687a      	ldr	r2, [r7, #4]
 800d63e:	68f9      	ldr	r1, [r7, #12]
 800d640:	4618      	mov	r0, r3
 800d642:	f7ff ff75 	bl	800d530 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>
 800d646:	f107 0314 	add.w	r3, r7, #20
 800d64a:	4619      	mov	r1, r3
 800d64c:	69f8      	ldr	r0, [r7, #28]
 800d64e:	47a0      	blx	r4
 800d650:	f107 0314 	add.w	r3, r7, #20
 800d654:	4618      	mov	r0, r3
 800d656:	f001 ffe0 	bl	800f61a <_ZN12SimpleStringD1Ev>
    if (strictOrdering_) {
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	7b1b      	ldrb	r3, [r3, #12]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d013      	beq.n	800d68a <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x9a>
        call->withCallOrder(expectedCallOrder_ + 1, expectedCallOrder_ + amount);
 800d662:	69fb      	ldr	r3, [r7, #28]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	3310      	adds	r3, #16
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	68fa      	ldr	r2, [r7, #12]
 800d66c:	6892      	ldr	r2, [r2, #8]
 800d66e:	1c50      	adds	r0, r2, #1
 800d670:	68fa      	ldr	r2, [r7, #12]
 800d672:	6891      	ldr	r1, [r2, #8]
 800d674:	68ba      	ldr	r2, [r7, #8]
 800d676:	440a      	add	r2, r1
 800d678:	4601      	mov	r1, r0
 800d67a:	69f8      	ldr	r0, [r7, #28]
 800d67c:	4798      	blx	r3
        expectedCallOrder_ += amount;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	689a      	ldr	r2, [r3, #8]
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	441a      	add	r2, r3
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	609a      	str	r2, [r3, #8]
    }
    expectations_.addExpectedCall(call);
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	3320      	adds	r3, #32
 800d68e:	69f9      	ldr	r1, [r7, #28]
 800d690:	4618      	mov	r0, r3
 800d692:	f010 fd89 	bl	801e1a8 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>
    return *call;
 800d696:	69fb      	ldr	r3, [r7, #28]
}
 800d698:	4618      	mov	r0, r3
 800d69a:	3724      	adds	r7, #36	; 0x24
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd90      	pop	{r4, r7, pc}
 800d6a0:	08026eb8 	.word	0x08026eb8

0800d6a4 <_ZN11MockSupport16createActualCallEv>:

MockCheckedActualCall* MockSupport::createActualCall()
{
 800d6a4:	b5b0      	push	{r4, r5, r7, lr}
 800d6a6:	b082      	sub	sp, #8
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
    lastActualFunctionCall_ = new MockCheckedActualCall(++actualCallOrder_, activeReporter_, expectations_);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	685b      	ldr	r3, [r3, #4]
 800d6b0:	1c5a      	adds	r2, r3, #1
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	605a      	str	r2, [r3, #4]
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	685d      	ldr	r5, [r3, #4]
 800d6ba:	22b1      	movs	r2, #177	; 0xb1
 800d6bc:	490a      	ldr	r1, [pc, #40]	; (800d6e8 <_ZN11MockSupport16createActualCallEv+0x44>)
 800d6be:	202c      	movs	r0, #44	; 0x2c
 800d6c0:	f7ff f830 	bl	800c724 <_ZnwjPKci>
 800d6c4:	4604      	mov	r4, r0
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	691a      	ldr	r2, [r3, #16]
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	3320      	adds	r3, #32
 800d6ce:	4629      	mov	r1, r5
 800d6d0:	4620      	mov	r0, r4
 800d6d2:	f00c fbdb 	bl	8019e8c <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	62dc      	str	r4, [r3, #44]	; 0x2c
    return lastActualFunctionCall_;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3708      	adds	r7, #8
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bdb0      	pop	{r4, r5, r7, pc}
 800d6e6:	bf00      	nop
 800d6e8:	08026eb8 	.word	0x08026eb8

0800d6ec <_ZN11MockSupport13callIsIgnoredERK12SimpleString>:

bool MockSupport::callIsIgnored(const SimpleString& functionName)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b082      	sub	sp, #8
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	6039      	str	r1, [r7, #0]
    return ignoreOtherCalls_ && !expectations_.hasExpectationWithName(functionName);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d00d      	beq.n	800d71c <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	3320      	adds	r3, #32
 800d704:	6839      	ldr	r1, [r7, #0]
 800d706:	4618      	mov	r0, r3
 800d708:	f010 fd2a 	bl	801e160 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>
 800d70c:	4603      	mov	r3, r0
 800d70e:	f083 0301 	eor.w	r3, r3, #1
 800d712:	b2db      	uxtb	r3, r3
 800d714:	2b00      	cmp	r3, #0
 800d716:	d001      	beq.n	800d71c <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 800d718:	2301      	movs	r3, #1
 800d71a:	e000      	b.n	800d71e <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x32>
 800d71c:	2300      	movs	r3, #0
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3708      	adds	r7, #8
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}

0800d726 <_ZN11MockSupport10actualCallERK12SimpleString>:

MockActualCall& MockSupport::actualCall(const SimpleString& functionName)
{
 800d726:	b590      	push	{r4, r7, lr}
 800d728:	b087      	sub	sp, #28
 800d72a:	af00      	add	r7, sp, #0
 800d72c:	6078      	str	r0, [r7, #4]
 800d72e:	6039      	str	r1, [r7, #0]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 800d730:	f107 030c 	add.w	r3, r7, #12
 800d734:	683a      	ldr	r2, [r7, #0]
 800d736:	6879      	ldr	r1, [r7, #4]
 800d738:	4618      	mov	r0, r3
 800d73a:	f7ff fef9 	bl	800d530 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>

    if (lastActualFunctionCall_) {
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d742:	2b00      	cmp	r3, #0
 800d744:	d014      	beq.n	800d770 <_ZN11MockSupport10actualCallERK12SimpleString+0x4a>
        lastActualFunctionCall_->checkExpectations();
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	33c4      	adds	r3, #196	; 0xc4
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	4610      	mov	r0, r2
 800d756:	4798      	blx	r3
        delete lastActualFunctionCall_;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d004      	beq.n	800d76a <_ZN11MockSupport10actualCallERK12SimpleString+0x44>
 800d760:	681a      	ldr	r2, [r3, #0]
 800d762:	3204      	adds	r2, #4
 800d764:	6812      	ldr	r2, [r2, #0]
 800d766:	4618      	mov	r0, r3
 800d768:	4790      	blx	r2
        lastActualFunctionCall_ = NULLPTR;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2200      	movs	r2, #0
 800d76e:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    if (!enabled_) return MockIgnoredActualCall::instance();
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800d776:	f083 0301 	eor.w	r3, r3, #1
 800d77a:	b2db      	uxtb	r3, r3
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d004      	beq.n	800d78a <_ZN11MockSupport10actualCallERK12SimpleString+0x64>
 800d780:	f00e fcbe 	bl	801c100 <_ZN21MockIgnoredActualCall8instanceEv>
 800d784:	4603      	mov	r3, r0
 800d786:	461c      	mov	r4, r3
 800d788:	e02f      	b.n	800d7ea <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    if (tracing_) return MockActualCallTrace::instance().withName(scopeFunctionName);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d790:	2b00      	cmp	r3, #0
 800d792:	d00b      	beq.n	800d7ac <_ZN11MockSupport10actualCallERK12SimpleString+0x86>
 800d794:	f00e fc6e 	bl	801c074 <_ZN19MockActualCallTrace8instanceEv>
 800d798:	4603      	mov	r3, r0
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	3208      	adds	r2, #8
 800d79e:	6812      	ldr	r2, [r2, #0]
 800d7a0:	f107 010c 	add.w	r1, r7, #12
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	4790      	blx	r2
 800d7a8:	4604      	mov	r4, r0
 800d7aa:	e01e      	b.n	800d7ea <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>


    if (callIsIgnored(scopeFunctionName)) {
 800d7ac:	f107 030c 	add.w	r3, r7, #12
 800d7b0:	4619      	mov	r1, r3
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f7ff ff9a 	bl	800d6ec <_ZN11MockSupport13callIsIgnoredERK12SimpleString>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d004      	beq.n	800d7c8 <_ZN11MockSupport10actualCallERK12SimpleString+0xa2>
        return MockIgnoredActualCall::instance();
 800d7be:	f00e fc9f 	bl	801c100 <_ZN21MockIgnoredActualCall8instanceEv>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	461c      	mov	r4, r3
 800d7c6:	e010      	b.n	800d7ea <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    }

    MockCheckedActualCall* call = createActualCall();
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	33c0      	adds	r3, #192	; 0xc0
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	4798      	blx	r3
 800d7d4:	6178      	str	r0, [r7, #20]
    call->withName(scopeFunctionName);
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	3308      	adds	r3, #8
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	f107 020c 	add.w	r2, r7, #12
 800d7e2:	4611      	mov	r1, r2
 800d7e4:	6978      	ldr	r0, [r7, #20]
 800d7e6:	4798      	blx	r3
    return *call;
 800d7e8:	697c      	ldr	r4, [r7, #20]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 800d7ea:	f107 030c 	add.w	r3, r7, #12
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	f001 ff13 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800d7f4:	4623      	mov	r3, r4
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	371c      	adds	r7, #28
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd90      	pop	{r4, r7, pc}

0800d7fe <_ZN11MockSupport16ignoreOtherCallsEv>:

void MockSupport::ignoreOtherCalls()
{
 800d7fe:	b580      	push	{r7, lr}
 800d800:	b084      	sub	sp, #16
 800d802:	af00      	add	r7, sp, #0
 800d804:	6078      	str	r0, [r7, #4]
    ignoreOtherCalls_ = true;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2201      	movs	r2, #1
 800d80a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	3338      	adds	r3, #56	; 0x38
 800d812:	4618      	mov	r0, r3
 800d814:	f014 f817 	bl	8021846 <_ZN18MockNamedValueList5beginEv>
 800d818:	60f8      	str	r0, [r7, #12]
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d01a      	beq.n	800d856 <_ZN11MockSupport16ignoreOtherCallsEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->ignoreOtherCalls();
 800d820:	68f9      	ldr	r1, [r7, #12]
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f000 fc32 	bl	800e08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d828:	4603      	mov	r3, r0
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	bf14      	ite	ne
 800d82e:	2301      	movne	r3, #1
 800d830:	2300      	moveq	r3, #0
 800d832:	b2db      	uxtb	r3, r3
 800d834:	2b00      	cmp	r3, #0
 800d836:	d009      	beq.n	800d84c <_ZN11MockSupport16ignoreOtherCallsEv+0x4e>
 800d838:	68f9      	ldr	r1, [r7, #12]
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f000 fc26 	bl	800e08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d840:	4603      	mov	r3, r0
 800d842:	681a      	ldr	r2, [r3, #0]
 800d844:	3290      	adds	r2, #144	; 0x90
 800d846:	6812      	ldr	r2, [r2, #0]
 800d848:	4618      	mov	r0, r3
 800d84a:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d84c:	68f8      	ldr	r0, [r7, #12]
 800d84e:	f013 ff03 	bl	8021658 <_ZN22MockNamedValueListNode4nextEv>
 800d852:	60f8      	str	r0, [r7, #12]
 800d854:	e7e1      	b.n	800d81a <_ZN11MockSupport16ignoreOtherCallsEv+0x1c>
}
 800d856:	bf00      	nop
 800d858:	3710      	adds	r7, #16
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}

0800d85e <_ZN11MockSupport7disableEv>:

void MockSupport::disable()
{
 800d85e:	b580      	push	{r7, lr}
 800d860:	b084      	sub	sp, #16
 800d862:	af00      	add	r7, sp, #0
 800d864:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2200      	movs	r2, #0
 800d86a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	3338      	adds	r3, #56	; 0x38
 800d872:	4618      	mov	r0, r3
 800d874:	f013 ffe7 	bl	8021846 <_ZN18MockNamedValueList5beginEv>
 800d878:	60f8      	str	r0, [r7, #12]
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d01a      	beq.n	800d8b6 <_ZN11MockSupport7disableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->disable();
 800d880:	68f9      	ldr	r1, [r7, #12]
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	f000 fc02 	bl	800e08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d888:	4603      	mov	r3, r0
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	bf14      	ite	ne
 800d88e:	2301      	movne	r3, #1
 800d890:	2300      	moveq	r3, #0
 800d892:	b2db      	uxtb	r3, r3
 800d894:	2b00      	cmp	r3, #0
 800d896:	d009      	beq.n	800d8ac <_ZN11MockSupport7disableEv+0x4e>
 800d898:	68f9      	ldr	r1, [r7, #12]
 800d89a:	6878      	ldr	r0, [r7, #4]
 800d89c:	f000 fbf6 	bl	800e08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	681a      	ldr	r2, [r3, #0]
 800d8a4:	3284      	adds	r2, #132	; 0x84
 800d8a6:	6812      	ldr	r2, [r2, #0]
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d8ac:	68f8      	ldr	r0, [r7, #12]
 800d8ae:	f013 fed3 	bl	8021658 <_ZN22MockNamedValueListNode4nextEv>
 800d8b2:	60f8      	str	r0, [r7, #12]
 800d8b4:	e7e1      	b.n	800d87a <_ZN11MockSupport7disableEv+0x1c>
}
 800d8b6:	bf00      	nop
 800d8b8:	3710      	adds	r7, #16
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}

0800d8be <_ZN11MockSupport6enableEv>:

void MockSupport::enable()
{
 800d8be:	b580      	push	{r7, lr}
 800d8c0:	b084      	sub	sp, #16
 800d8c2:	af00      	add	r7, sp, #0
 800d8c4:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2201      	movs	r2, #1
 800d8ca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	3338      	adds	r3, #56	; 0x38
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f013 ffb7 	bl	8021846 <_ZN18MockNamedValueList5beginEv>
 800d8d8:	60f8      	str	r0, [r7, #12]
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d01a      	beq.n	800d916 <_ZN11MockSupport6enableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->enable();
 800d8e0:	68f9      	ldr	r1, [r7, #12]
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f000 fbd2 	bl	800e08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	bf14      	ite	ne
 800d8ee:	2301      	movne	r3, #1
 800d8f0:	2300      	moveq	r3, #0
 800d8f2:	b2db      	uxtb	r3, r3
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d009      	beq.n	800d90c <_ZN11MockSupport6enableEv+0x4e>
 800d8f8:	68f9      	ldr	r1, [r7, #12]
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f000 fbc6 	bl	800e08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d900:	4603      	mov	r3, r0
 800d902:	681a      	ldr	r2, [r3, #0]
 800d904:	3288      	adds	r2, #136	; 0x88
 800d906:	6812      	ldr	r2, [r2, #0]
 800d908:	4618      	mov	r0, r3
 800d90a:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d90c:	68f8      	ldr	r0, [r7, #12]
 800d90e:	f013 fea3 	bl	8021658 <_ZN22MockNamedValueListNode4nextEv>
 800d912:	60f8      	str	r0, [r7, #12]
 800d914:	e7e1      	b.n	800d8da <_ZN11MockSupport6enableEv+0x1c>
}
 800d916:	bf00      	nop
 800d918:	3710      	adds	r7, #16
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}

0800d91e <_ZN11MockSupport7tracingEb>:

void MockSupport::tracing(bool enabled)
{
 800d91e:	b580      	push	{r7, lr}
 800d920:	b084      	sub	sp, #16
 800d922:	af00      	add	r7, sp, #0
 800d924:	6078      	str	r0, [r7, #4]
 800d926:	460b      	mov	r3, r1
 800d928:	70fb      	strb	r3, [r7, #3]
    tracing_ = enabled;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	78fa      	ldrb	r2, [r7, #3]
 800d92e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	3338      	adds	r3, #56	; 0x38
 800d936:	4618      	mov	r0, r3
 800d938:	f013 ff85 	bl	8021846 <_ZN18MockNamedValueList5beginEv>
 800d93c:	60f8      	str	r0, [r7, #12]
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d01b      	beq.n	800d97c <_ZN11MockSupport7tracingEb+0x5e>
        if (getMockSupport(p)) getMockSupport(p)->tracing(enabled);
 800d944:	68f9      	ldr	r1, [r7, #12]
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	f000 fba0 	bl	800e08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d94c:	4603      	mov	r3, r0
 800d94e:	2b00      	cmp	r3, #0
 800d950:	bf14      	ite	ne
 800d952:	2301      	movne	r3, #1
 800d954:	2300      	moveq	r3, #0
 800d956:	b2db      	uxtb	r3, r3
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d00a      	beq.n	800d972 <_ZN11MockSupport7tracingEb+0x54>
 800d95c:	68f9      	ldr	r1, [r7, #12]
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f000 fb94 	bl	800e08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d964:	4603      	mov	r3, r0
 800d966:	681a      	ldr	r2, [r3, #0]
 800d968:	328c      	adds	r2, #140	; 0x8c
 800d96a:	6812      	ldr	r2, [r2, #0]
 800d96c:	78f9      	ldrb	r1, [r7, #3]
 800d96e:	4618      	mov	r0, r3
 800d970:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d972:	68f8      	ldr	r0, [r7, #12]
 800d974:	f013 fe70 	bl	8021658 <_ZN22MockNamedValueListNode4nextEv>
 800d978:	60f8      	str	r0, [r7, #12]
 800d97a:	e7e0      	b.n	800d93e <_ZN11MockSupport7tracingEb+0x20>
}
 800d97c:	bf00      	nop
 800d97e:	3710      	adds	r7, #16
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}

0800d984 <_ZN11MockSupport17expectedCallsLeftEv>:
{
    return MockActualCallTrace::instance().getTraceOutput();
}

bool MockSupport::expectedCallsLeft()
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b084      	sub	sp, #16
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
    int callsLeft = expectations_.hasUnfulfilledExpectations();
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	3320      	adds	r3, #32
 800d990:	4618      	mov	r0, r3
 800d992:	f010 fbc1 	bl	801e118 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>
 800d996:	4603      	mov	r3, r0
 800d998:	60fb      	str	r3, [r7, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	3338      	adds	r3, #56	; 0x38
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f013 ff51 	bl	8021846 <_ZN18MockNamedValueList5beginEv>
 800d9a4:	60b8      	str	r0, [r7, #8]
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d01f      	beq.n	800d9ec <_ZN11MockSupport17expectedCallsLeftEv+0x68>
        if (getMockSupport(p)) callsLeft += getMockSupport(p)->expectedCallsLeft();
 800d9ac:	68b9      	ldr	r1, [r7, #8]
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	f000 fb6c 	bl	800e08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	bf14      	ite	ne
 800d9ba:	2301      	movne	r3, #1
 800d9bc:	2300      	moveq	r3, #0
 800d9be:	b2db      	uxtb	r3, r3
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d00e      	beq.n	800d9e2 <_ZN11MockSupport17expectedCallsLeftEv+0x5e>
 800d9c4:	68b9      	ldr	r1, [r7, #8]
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f000 fb60 	bl	800e08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	681a      	ldr	r2, [r3, #0]
 800d9d0:	3298      	adds	r2, #152	; 0x98
 800d9d2:	6812      	ldr	r2, [r2, #0]
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	4790      	blx	r2
 800d9d8:	4603      	mov	r3, r0
 800d9da:	461a      	mov	r2, r3
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	4413      	add	r3, r2
 800d9e0:	60fb      	str	r3, [r7, #12]
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800d9e2:	68b8      	ldr	r0, [r7, #8]
 800d9e4:	f013 fe38 	bl	8021658 <_ZN22MockNamedValueListNode4nextEv>
 800d9e8:	60b8      	str	r0, [r7, #8]
 800d9ea:	e7dc      	b.n	800d9a6 <_ZN11MockSupport17expectedCallsLeftEv+0x22>

    return callsLeft != 0;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	bf14      	ite	ne
 800d9f2:	2301      	movne	r3, #1
 800d9f4:	2300      	moveq	r3, #0
 800d9f6:	b2db      	uxtb	r3, r3
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3710      	adds	r7, #16
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}

0800da00 <_ZN11MockSupport26wasLastActualCallFulfilledEv>:

bool MockSupport::wasLastActualCallFulfilled()
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b084      	sub	sp, #16
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_ && !lastActualFunctionCall_->isFulfilled())
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d010      	beq.n	800da32 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	33bc      	adds	r3, #188	; 0xbc
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	4610      	mov	r0, r2
 800da20:	4798      	blx	r3
 800da22:	4603      	mov	r3, r0
 800da24:	f083 0301 	eor.w	r3, r3, #1
 800da28:	b2db      	uxtb	r3, r3
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d001      	beq.n	800da32 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800da2e:	2301      	movs	r3, #1
 800da30:	e000      	b.n	800da34 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x34>
 800da32:	2300      	movs	r3, #0
 800da34:	2b00      	cmp	r3, #0
 800da36:	d001      	beq.n	800da3c <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x3c>
        return false;
 800da38:	2300      	movs	r3, #0
 800da3a:	e02a      	b.n	800da92 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	3338      	adds	r3, #56	; 0x38
 800da40:	4618      	mov	r0, r3
 800da42:	f013 ff00 	bl	8021846 <_ZN18MockNamedValueList5beginEv>
 800da46:	60f8      	str	r0, [r7, #12]
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d020      	beq.n	800da90 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x90>
        if (getMockSupport(p) && !getMockSupport(p)->wasLastActualCallFulfilled())
 800da4e:	68f9      	ldr	r1, [r7, #12]
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f000 fb1b 	bl	800e08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800da56:	4603      	mov	r3, r0
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d00f      	beq.n	800da7c <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800da5c:	68f9      	ldr	r1, [r7, #12]
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f000 fb14 	bl	800e08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800da64:	4603      	mov	r3, r0
 800da66:	4618      	mov	r0, r3
 800da68:	f7ff ffca 	bl	800da00 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800da6c:	4603      	mov	r3, r0
 800da6e:	f083 0301 	eor.w	r3, r3, #1
 800da72:	b2db      	uxtb	r3, r3
 800da74:	2b00      	cmp	r3, #0
 800da76:	d001      	beq.n	800da7c <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800da78:	2301      	movs	r3, #1
 800da7a:	e000      	b.n	800da7e <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7e>
 800da7c:	2300      	movs	r3, #0
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d001      	beq.n	800da86 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x86>
                return false;
 800da82:	2300      	movs	r3, #0
 800da84:	e005      	b.n	800da92 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800da86:	68f8      	ldr	r0, [r7, #12]
 800da88:	f013 fde6 	bl	8021658 <_ZN22MockNamedValueListNode4nextEv>
 800da8c:	60f8      	str	r0, [r7, #12]
 800da8e:	e7db      	b.n	800da48 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x48>

    return true;
 800da90:	2301      	movs	r3, #1
}
 800da92:	4618      	mov	r0, r3
 800da94:	3710      	adds	r7, #16
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}

0800da9a <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>:

void MockSupport::failTestWithExpectedCallsNotFulfilled()
{
 800da9a:	b580      	push	{r7, lr}
 800da9c:	b092      	sub	sp, #72	; 0x48
 800da9e:	af00      	add	r7, sp, #0
 800daa0:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 800daa2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800daa6:	4618      	mov	r0, r3
 800daa8:	f010 fa2c 	bl	801df04 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f103 0220 	add.w	r2, r3, #32
 800dab2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800dab6:	4611      	mov	r1, r2
 800dab8:	4618      	mov	r0, r3
 800daba:	f010 fbf3 	bl	801e2a4 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	3338      	adds	r3, #56	; 0x38
 800dac2:	4618      	mov	r0, r3
 800dac4:	f013 febf 	bl	8021846 <_ZN18MockNamedValueList5beginEv>
 800dac8:	6478      	str	r0, [r7, #68]	; 0x44
 800daca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d01d      	beq.n	800db0c <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x72>
        if(getMockSupport(p))
 800dad0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	f000 fada 	bl	800e08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800dad8:	4603      	mov	r3, r0
 800dada:	2b00      	cmp	r3, #0
 800dadc:	bf14      	ite	ne
 800dade:	2301      	movne	r3, #1
 800dae0:	2300      	moveq	r3, #0
 800dae2:	b2db      	uxtb	r3, r3
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d00c      	beq.n	800db02 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800dae8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f000 face 	bl	800e08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800daf0:	4603      	mov	r3, r0
 800daf2:	f103 0220 	add.w	r2, r3, #32
 800daf6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800dafa:	4611      	mov	r1, r2
 800dafc:	4618      	mov	r0, r3
 800dafe:	f010 fbd1 	bl	801e2a4 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800db02:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800db04:	f013 fda8 	bl	8021658 <_ZN22MockNamedValueListNode4nextEv>
 800db08:	6478      	str	r0, [r7, #68]	; 0x44
 800db0a:	e7de      	b.n	800daca <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x30>

    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	691a      	ldr	r2, [r3, #16]
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	691b      	ldr	r3, [r3, #16]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	330c      	adds	r3, #12
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	4610      	mov	r0, r2
 800db1c:	4798      	blx	r3
 800db1e:	4601      	mov	r1, r0
 800db20:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800db24:	f107 0308 	add.w	r3, r7, #8
 800db28:	4618      	mov	r0, r3
 800db2a:	f011 f9f5 	bl	801ef18 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	33c4      	adds	r3, #196	; 0xc4
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	f107 0208 	add.w	r2, r7, #8
 800db3a:	4611      	mov	r1, r2
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	4798      	blx	r3
    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800db40:	f107 0308 	add.w	r3, r7, #8
 800db44:	4618      	mov	r0, r3
 800db46:	f000 fe6d 	bl	800e824 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800db4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800db4e:	4618      	mov	r0, r3
 800db50:	f010 f9ec 	bl	801df2c <_ZN21MockExpectedCallsListD1Ev>
}
 800db54:	bf00      	nop
 800db56:	3748      	adds	r7, #72	; 0x48
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}

0800db5c <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>:

void MockSupport::failTestWithOutOfOrderCalls()
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b092      	sub	sp, #72	; 0x48
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 800db64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800db68:	4618      	mov	r0, r3
 800db6a:	f010 f9cb 	bl	801df04 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f103 0220 	add.w	r2, r3, #32
 800db74:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800db78:	4611      	mov	r1, r2
 800db7a:	4618      	mov	r0, r3
 800db7c:	f010 fb92 	bl	801e2a4 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	3338      	adds	r3, #56	; 0x38
 800db84:	4618      	mov	r0, r3
 800db86:	f013 fe5e 	bl	8021846 <_ZN18MockNamedValueList5beginEv>
 800db8a:	6478      	str	r0, [r7, #68]	; 0x44
 800db8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d01d      	beq.n	800dbce <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x72>
        if(getMockSupport(p))
 800db92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f000 fa79 	bl	800e08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800db9a:	4603      	mov	r3, r0
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	bf14      	ite	ne
 800dba0:	2301      	movne	r3, #1
 800dba2:	2300      	moveq	r3, #0
 800dba4:	b2db      	uxtb	r3, r3
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d00c      	beq.n	800dbc4 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800dbaa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f000 fa6d 	bl	800e08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	f103 0220 	add.w	r2, r3, #32
 800dbb8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800dbbc:	4611      	mov	r1, r2
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f010 fb70 	bl	801e2a4 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800dbc4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800dbc6:	f013 fd47 	bl	8021658 <_ZN22MockNamedValueListNode4nextEv>
 800dbca:	6478      	str	r0, [r7, #68]	; 0x44
 800dbcc:	e7de      	b.n	800db8c <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x30>

    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	691a      	ldr	r2, [r3, #16]
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	691b      	ldr	r3, [r3, #16]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	330c      	adds	r3, #12
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	4610      	mov	r0, r2
 800dbde:	4798      	blx	r3
 800dbe0:	4601      	mov	r1, r0
 800dbe2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800dbe6:	f107 0308 	add.w	r3, r7, #8
 800dbea:	4618      	mov	r0, r3
 800dbec:	f011 fa38 	bl	801f060 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	33c4      	adds	r3, #196	; 0xc4
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	f107 0208 	add.w	r2, r7, #8
 800dbfc:	4611      	mov	r1, r2
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	4798      	blx	r3
    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800dc02:	f107 0308 	add.w	r3, r7, #8
 800dc06:	4618      	mov	r0, r3
 800dc08:	f000 fe2e 	bl	800e868 <_ZN20MockCallOrderFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800dc0c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800dc10:	4618      	mov	r0, r3
 800dc12:	f010 f98b 	bl	801df2c <_ZN21MockExpectedCallsListD1Ev>
}
 800dc16:	bf00      	nop
 800dc18:	3748      	adds	r7, #72	; 0x48
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}

0800dc1e <_ZN11MockSupport8failTestER11MockFailure>:

void MockSupport::failTest(MockFailure& failure)
{
 800dc1e:	b580      	push	{r7, lr}
 800dc20:	b082      	sub	sp, #8
 800dc22:	af00      	add	r7, sp, #0
 800dc24:	6078      	str	r0, [r7, #4]
 800dc26:	6039      	str	r1, [r7, #0]
    clear();
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	339c      	adds	r3, #156	; 0x9c
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	4798      	blx	r3
    activeReporter_->failTest(failure);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	691a      	ldr	r2, [r3, #16]
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	691b      	ldr	r3, [r3, #16]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	3308      	adds	r3, #8
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	6839      	ldr	r1, [r7, #0]
 800dc44:	4610      	mov	r0, r2
 800dc46:	4798      	blx	r3
}
 800dc48:	bf00      	nop
 800dc4a:	3708      	adds	r7, #8
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}

0800dc50 <_ZN11MockSupport10countCheckEv>:

void MockSupport::countCheck()
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b082      	sub	sp, #8
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
    UtestShell::getCurrent()->countCheck();
 800dc58:	f008 fd0a 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f007 fb78 	bl	8015354 <_ZN10UtestShell10countCheckEv>
}
 800dc64:	bf00      	nop
 800dc66:	3708      	adds	r7, #8
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd80      	pop	{r7, pc}

0800dc6c <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>:

void MockSupport::checkExpectationsOfLastActualCall()
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b084      	sub	sp, #16
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
    if(lastActualFunctionCall_)
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d008      	beq.n	800dc8e <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x22>
        lastActualFunctionCall_->checkExpectations();
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	33c4      	adds	r3, #196	; 0xc4
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	4610      	mov	r0, r2
 800dc8c:	4798      	blx	r3

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	3338      	adds	r3, #56	; 0x38
 800dc92:	4618      	mov	r0, r3
 800dc94:	f013 fdd7 	bl	8021846 <_ZN18MockNamedValueList5beginEv>
 800dc98:	60f8      	str	r0, [r7, #12]
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d023      	beq.n	800dce8 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x7c>
        if(getMockSupport(p) && getMockSupport(p)->lastActualFunctionCall_)
 800dca0:	68f9      	ldr	r1, [r7, #12]
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f000 f9f2 	bl	800e08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d009      	beq.n	800dcc2 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800dcae:	68f9      	ldr	r1, [r7, #12]
 800dcb0:	6878      	ldr	r0, [r7, #4]
 800dcb2:	f000 f9eb 	bl	800e08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d001      	beq.n	800dcc2 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	e000      	b.n	800dcc4 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x58>
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d00a      	beq.n	800dcde <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x72>
            getMockSupport(p)->lastActualFunctionCall_->checkExpectations();
 800dcc8:	68f9      	ldr	r1, [r7, #12]
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f000 f9de 	bl	800e08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcd4:	681a      	ldr	r2, [r3, #0]
 800dcd6:	32c4      	adds	r2, #196	; 0xc4
 800dcd8:	6812      	ldr	r2, [r2, #0]
 800dcda:	4618      	mov	r0, r3
 800dcdc:	4790      	blx	r2
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800dcde:	68f8      	ldr	r0, [r7, #12]
 800dce0:	f013 fcba 	bl	8021658 <_ZN22MockNamedValueListNode4nextEv>
 800dce4:	60f8      	str	r0, [r7, #12]
 800dce6:	e7d8      	b.n	800dc9a <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x2e>
}
 800dce8:	bf00      	nop
 800dcea:	3710      	adds	r7, #16
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}

0800dcf0 <_ZN11MockSupport18hasCallsOutOfOrderEv>:

bool MockSupport::hasCallsOutOfOrder()
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b084      	sub	sp, #16
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
    if (expectations_.hasCallsOutOfOrder())
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	3320      	adds	r3, #32
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f010 f947 	bl	801df90 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>
 800dd02:	4603      	mov	r3, r0
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d001      	beq.n	800dd0c <_ZN11MockSupport18hasCallsOutOfOrderEv+0x1c>
    {
        return true;
 800dd08:	2301      	movs	r3, #1
 800dd0a:	e027      	b.n	800dd5c <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    }
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	3338      	adds	r3, #56	; 0x38
 800dd10:	4618      	mov	r0, r3
 800dd12:	f013 fd98 	bl	8021846 <_ZN18MockNamedValueList5beginEv>
 800dd16:	60f8      	str	r0, [r7, #12]
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d01d      	beq.n	800dd5a <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6a>
        if (getMockSupport(p) && getMockSupport(p)->hasCallsOutOfOrder())
 800dd1e:	68f9      	ldr	r1, [r7, #12]
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f000 f9b3 	bl	800e08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800dd26:	4603      	mov	r3, r0
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d00c      	beq.n	800dd46 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800dd2c:	68f9      	ldr	r1, [r7, #12]
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f000 f9ac 	bl	800e08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800dd34:	4603      	mov	r3, r0
 800dd36:	4618      	mov	r0, r3
 800dd38:	f7ff ffda 	bl	800dcf0 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d001      	beq.n	800dd46 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800dd42:	2301      	movs	r3, #1
 800dd44:	e000      	b.n	800dd48 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x58>
 800dd46:	2300      	movs	r3, #0
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d001      	beq.n	800dd50 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x60>
        {
            return true;
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	e005      	b.n	800dd5c <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800dd50:	68f8      	ldr	r0, [r7, #12]
 800dd52:	f013 fc81 	bl	8021658 <_ZN22MockNamedValueListNode4nextEv>
 800dd56:	60f8      	str	r0, [r7, #12]
 800dd58:	e7de      	b.n	800dd18 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x28>
        }
    return false;
 800dd5a:	2300      	movs	r3, #0
}
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	3710      	adds	r7, #16
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}

0800dd64 <_ZN11MockSupport17checkExpectationsEv>:

void MockSupport::checkExpectations()
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b082      	sub	sp, #8
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
    checkExpectationsOfLastActualCall();
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f7ff ff7d 	bl	800dc6c <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>

    if (wasLastActualCallFulfilled() && expectedCallsLeft())
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f7ff fe44 	bl	800da00 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d00a      	beq.n	800dd94 <_ZN11MockSupport17checkExpectationsEv+0x30>
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	3398      	adds	r3, #152	; 0x98
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	4798      	blx	r3
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d001      	beq.n	800dd94 <_ZN11MockSupport17checkExpectationsEv+0x30>
 800dd90:	2301      	movs	r3, #1
 800dd92:	e000      	b.n	800dd96 <_ZN11MockSupport17checkExpectationsEv+0x32>
 800dd94:	2300      	movs	r3, #0
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d002      	beq.n	800dda0 <_ZN11MockSupport17checkExpectationsEv+0x3c>
        failTestWithExpectedCallsNotFulfilled();
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f7ff fe7d 	bl	800da9a <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>

    if (hasCallsOutOfOrder())
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f7ff ffa5 	bl	800dcf0 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800dda6:	4603      	mov	r3, r0
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d002      	beq.n	800ddb2 <_ZN11MockSupport17checkExpectationsEv+0x4e>
        failTestWithOutOfOrderCalls();
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f7ff fed5 	bl	800db5c <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>
}
 800ddb2:	bf00      	nop
 800ddb4:	3708      	adds	r7, #8
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}

0800ddba <_ZN11MockSupport7hasDataERK12SimpleString>:


bool MockSupport::hasData(const SimpleString& name)
{
 800ddba:	b580      	push	{r7, lr}
 800ddbc:	b082      	sub	sp, #8
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	6078      	str	r0, [r7, #4]
 800ddc2:	6039      	str	r1, [r7, #0]
    return data_.getValueByName(name) != NULLPTR;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	3338      	adds	r3, #56	; 0x38
 800ddc8:	6839      	ldr	r1, [r7, #0]
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f013 fd0c 	bl	80217e8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	bf14      	ite	ne
 800ddd6:	2301      	movne	r3, #1
 800ddd8:	2300      	moveq	r3, #0
 800ddda:	b2db      	uxtb	r3, r3
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3708      	adds	r7, #8
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>:

MockNamedValue* MockSupport::retrieveDataFromStore(const SimpleString& name)
{
 800dde4:	b590      	push	{r4, r7, lr}
 800dde6:	b085      	sub	sp, #20
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	6039      	str	r1, [r7, #0]
    MockNamedValue* newData = data_.getValueByName(name);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	3338      	adds	r3, #56	; 0x38
 800ddf2:	6839      	ldr	r1, [r7, #0]
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f013 fcf7 	bl	80217e8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800ddfa:	60f8      	str	r0, [r7, #12]
    if (newData == NULLPTR) {
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d111      	bne.n	800de26 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x42>
        newData = new MockNamedValue(name);
 800de02:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800de06:	490a      	ldr	r1, [pc, #40]	; (800de30 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x4c>)
 800de08:	2038      	movs	r0, #56	; 0x38
 800de0a:	f7fe fc8b 	bl	800c724 <_ZnwjPKci>
 800de0e:	4604      	mov	r4, r0
 800de10:	6839      	ldr	r1, [r7, #0]
 800de12:	4620      	mov	r0, r4
 800de14:	f011 fd6e 	bl	801f8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
 800de18:	60fc      	str	r4, [r7, #12]
        data_.add(newData);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	3338      	adds	r3, #56	; 0x38
 800de1e:	68f9      	ldr	r1, [r7, #12]
 800de20:	4618      	mov	r0, r3
 800de22:	f013 fcab 	bl	802177c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    }
    return newData;
 800de26:	68fb      	ldr	r3, [r7, #12]
}
 800de28:	4618      	mov	r0, r3
 800de2a:	3714      	adds	r7, #20
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd90      	pop	{r4, r7, pc}
 800de30:	08026eb8 	.word	0x08026eb8

0800de34 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setValue(value);
}

void MockSupport::setDataObject(const SimpleString& name, const SimpleString& type, void* value)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b086      	sub	sp, #24
 800de38:	af00      	add	r7, sp, #0
 800de3a:	60f8      	str	r0, [r7, #12]
 800de3c:	60b9      	str	r1, [r7, #8]
 800de3e:	607a      	str	r2, [r7, #4]
 800de40:	603b      	str	r3, [r7, #0]
    MockNamedValue* newData = retrieveDataFromStore(name);
 800de42:	68b9      	ldr	r1, [r7, #8]
 800de44:	68f8      	ldr	r0, [r7, #12]
 800de46:	f7ff ffcd 	bl	800dde4 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>
 800de4a:	6178      	str	r0, [r7, #20]
    newData->setObjectPointer(type, value);
 800de4c:	697b      	ldr	r3, [r7, #20]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	3344      	adds	r3, #68	; 0x44
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	683a      	ldr	r2, [r7, #0]
 800de56:	6879      	ldr	r1, [r7, #4]
 800de58:	6978      	ldr	r0, [r7, #20]
 800de5a:	4798      	blx	r3
}
 800de5c:	bf00      	nop
 800de5e:	3718      	adds	r7, #24
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}

0800de64 <_ZN11MockSupport7getDataERK12SimpleString>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setConstObjectPointer(type, value);
}

MockNamedValue MockSupport::getData(const SimpleString& name)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b088      	sub	sp, #32
 800de68:	af00      	add	r7, sp, #0
 800de6a:	60f8      	str	r0, [r7, #12]
 800de6c:	60b9      	str	r1, [r7, #8]
 800de6e:	607a      	str	r2, [r7, #4]
    MockNamedValue* value = data_.getValueByName(name);
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	3338      	adds	r3, #56	; 0x38
 800de74:	6879      	ldr	r1, [r7, #4]
 800de76:	4618      	mov	r0, r3
 800de78:	f013 fcb6 	bl	80217e8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800de7c:	61f8      	str	r0, [r7, #28]
    if (value == NULLPTR)
 800de7e:	69fb      	ldr	r3, [r7, #28]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d111      	bne.n	800dea8 <_ZN11MockSupport7getDataERK12SimpleString+0x44>
        return MockNamedValue("");
 800de84:	f107 0314 	add.w	r3, r7, #20
 800de88:	490b      	ldr	r1, [pc, #44]	; (800deb8 <_ZN11MockSupport7getDataERK12SimpleString+0x54>)
 800de8a:	4618      	mov	r0, r3
 800de8c:	f001 f80d 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800de90:	f107 0314 	add.w	r3, r7, #20
 800de94:	4619      	mov	r1, r3
 800de96:	68f8      	ldr	r0, [r7, #12]
 800de98:	f011 fd2c 	bl	801f8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
 800de9c:	f107 0314 	add.w	r3, r7, #20
 800dea0:	4618      	mov	r0, r3
 800dea2:	f001 fbba 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800dea6:	e003      	b.n	800deb0 <_ZN11MockSupport7getDataERK12SimpleString+0x4c>
    return *value;
 800dea8:	69f9      	ldr	r1, [r7, #28]
 800deaa:	68f8      	ldr	r0, [r7, #12]
 800deac:	f7ff f8a2 	bl	800cff4 <_ZN14MockNamedValueC1ERKS_>
}
 800deb0:	68f8      	ldr	r0, [r7, #12]
 800deb2:	3720      	adds	r7, #32
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}
 800deb8:	08026eb0 	.word	0x08026eb0

0800debc <_ZN11MockSupport5cloneERK12SimpleString>:

MockSupport* MockSupport::clone(const SimpleString& mockName)
{
 800debc:	b590      	push	{r4, r7, lr}
 800debe:	b085      	sub	sp, #20
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
 800dec4:	6039      	str	r1, [r7, #0]
    MockSupport* newMock = new MockSupport(mockName);
 800dec6:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800deca:	4927      	ldr	r1, [pc, #156]	; (800df68 <_ZN11MockSupport5cloneERK12SimpleString+0xac>)
 800decc:	2048      	movs	r0, #72	; 0x48
 800dece:	f7fe fc29 	bl	800c724 <_ZnwjPKci>
 800ded2:	4604      	mov	r4, r0
 800ded4:	6839      	ldr	r1, [r7, #0]
 800ded6:	4620      	mov	r0, r4
 800ded8:	f7ff f8f8 	bl	800d0cc <_ZN11MockSupportC1ERK12SimpleString>
 800dedc:	60fc      	str	r4, [r7, #12]
    newMock->setMockFailureStandardReporter(standardReporter_);
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	33a4      	adds	r3, #164	; 0xa4
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	687a      	ldr	r2, [r7, #4]
 800dee8:	6952      	ldr	r2, [r2, #20]
 800deea:	4611      	mov	r1, r2
 800deec:	68f8      	ldr	r0, [r7, #12]
 800deee:	4798      	blx	r3
    if (ignoreOtherCalls_) newMock->ignoreOtherCalls();
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800def6:	2b00      	cmp	r3, #0
 800def8:	d005      	beq.n	800df06 <_ZN11MockSupport5cloneERK12SimpleString+0x4a>
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	3390      	adds	r3, #144	; 0x90
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	68f8      	ldr	r0, [r7, #12]
 800df04:	4798      	blx	r3

    if (!enabled_) newMock->disable();
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800df0c:	f083 0301 	eor.w	r3, r3, #1
 800df10:	b2db      	uxtb	r3, r3
 800df12:	2b00      	cmp	r3, #0
 800df14:	d005      	beq.n	800df22 <_ZN11MockSupport5cloneERK12SimpleString+0x66>
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	3384      	adds	r3, #132	; 0x84
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	68f8      	ldr	r0, [r7, #12]
 800df20:	4798      	blx	r3

    if (strictOrdering_) newMock->strictOrder();
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	7b1b      	ldrb	r3, [r3, #12]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d005      	beq.n	800df36 <_ZN11MockSupport5cloneERK12SimpleString+0x7a>
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	3308      	adds	r3, #8
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	68f8      	ldr	r0, [r7, #12]
 800df34:	4798      	blx	r3

    newMock->tracing(tracing_);
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	338c      	adds	r3, #140	; 0x8c
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	687a      	ldr	r2, [r7, #4]
 800df40:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 800df44:	4611      	mov	r1, r2
 800df46:	68f8      	ldr	r0, [r7, #12]
 800df48:	4798      	blx	r3
    newMock->installComparatorsAndCopiers(comparatorsAndCopiersRepository_);
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	33b8      	adds	r3, #184	; 0xb8
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	687a      	ldr	r2, [r7, #4]
 800df54:	3230      	adds	r2, #48	; 0x30
 800df56:	4611      	mov	r1, r2
 800df58:	68f8      	ldr	r0, [r7, #12]
 800df5a:	4798      	blx	r3
    return newMock;
 800df5c:	68fb      	ldr	r3, [r7, #12]
}
 800df5e:	4618      	mov	r0, r3
 800df60:	3714      	adds	r7, #20
 800df62:	46bd      	mov	sp, r7
 800df64:	bd90      	pop	{r4, r7, pc}
 800df66:	bf00      	nop
 800df68:	08026eb8 	.word	0x08026eb8

0800df6c <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>:

MockSupport* MockSupport::getMockSupportScope(const SimpleString& name)
{
 800df6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df6e:	b0ab      	sub	sp, #172	; 0xac
 800df70:	af04      	add	r7, sp, #16
 800df72:	6078      	str	r0, [r7, #4]
 800df74:	6039      	str	r1, [r7, #0]
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800df76:	f107 0308 	add.w	r3, r7, #8
 800df7a:	4941      	ldr	r1, [pc, #260]	; (800e080 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x114>)
 800df7c:	4618      	mov	r0, r3
 800df7e:	f000 ff94 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
    mockingSupportName += name;
 800df82:	f107 0308 	add.w	r3, r7, #8
 800df86:	6839      	ldr	r1, [r7, #0]
 800df88:	4618      	mov	r0, r3
 800df8a:	f001 fbc3 	bl	800f714 <_ZN12SimpleStringpLERKS_>

    if (hasData(mockingSupportName)) {
 800df8e:	f107 0308 	add.w	r3, r7, #8
 800df92:	4619      	mov	r1, r3
 800df94:	6878      	ldr	r0, [r7, #4]
 800df96:	f7ff ff10 	bl	800ddba <_ZN11MockSupport7hasDataERK12SimpleString>
 800df9a:	4603      	mov	r3, r0
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d048      	beq.n	800e032 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xc6>
        STRCMP_EQUAL("MockSupport", getData(mockingSupportName).getType().asCharString());
 800dfa0:	f008 fb66 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 800dfa4:	4604      	mov	r4, r0
 800dfa6:	6823      	ldr	r3, [r4, #0]
 800dfa8:	3324      	adds	r3, #36	; 0x24
 800dfaa:	681d      	ldr	r5, [r3, #0]
 800dfac:	f107 0318 	add.w	r3, r7, #24
 800dfb0:	f107 0208 	add.w	r2, r7, #8
 800dfb4:	6879      	ldr	r1, [r7, #4]
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f7ff ff54 	bl	800de64 <_ZN11MockSupport7getDataERK12SimpleString>
 800dfbc:	f107 0310 	add.w	r3, r7, #16
 800dfc0:	f107 0218 	add.w	r2, r7, #24
 800dfc4:	4611      	mov	r1, r2
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f011 ff61 	bl	801fe8e <_ZNK14MockNamedValue7getTypeEv>
 800dfcc:	f107 0310 	add.w	r3, r7, #16
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f001 faf5 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 800dfd6:	4606      	mov	r6, r0
 800dfd8:	f008 fb5a 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800dfdc:	4603      	mov	r3, r0
 800dfde:	9302      	str	r3, [sp, #8]
 800dfe0:	f240 13bd 	movw	r3, #445	; 0x1bd
 800dfe4:	9301      	str	r3, [sp, #4]
 800dfe6:	4b27      	ldr	r3, [pc, #156]	; (800e084 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x118>)
 800dfe8:	9300      	str	r3, [sp, #0]
 800dfea:	2300      	movs	r3, #0
 800dfec:	4632      	mov	r2, r6
 800dfee:	4926      	ldr	r1, [pc, #152]	; (800e088 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800dff0:	4620      	mov	r0, r4
 800dff2:	47a8      	blx	r5
 800dff4:	f107 0310 	add.w	r3, r7, #16
 800dff8:	4618      	mov	r0, r3
 800dffa:	f001 fb0e 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800dffe:	f107 0318 	add.w	r3, r7, #24
 800e002:	4618      	mov	r0, r3
 800e004:	f011 fca0 	bl	801f948 <_ZN14MockNamedValueD1Ev>
        return (MockSupport*) getData(mockingSupportName).getObjectPointer();
 800e008:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e00c:	f107 0208 	add.w	r2, r7, #8
 800e010:	6879      	ldr	r1, [r7, #4]
 800e012:	4618      	mov	r0, r3
 800e014:	f7ff ff26 	bl	800de64 <_ZN11MockSupport7getDataERK12SimpleString>
 800e018:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e01c:	4618      	mov	r0, r3
 800e01e:	f012 fa4f 	bl	80204c0 <_ZNK14MockNamedValue16getObjectPointerEv>
 800e022:	4604      	mov	r4, r0
 800e024:	bf00      	nop
 800e026:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e02a:	4618      	mov	r0, r3
 800e02c:	f011 fc8c 	bl	801f948 <_ZN14MockNamedValueD1Ev>
 800e030:	e01b      	b.n	800e06a <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xfe>
    }

    MockSupport *newMock = clone(name);
 800e032:	6839      	ldr	r1, [r7, #0]
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f7ff ff41 	bl	800debc <_ZN11MockSupport5cloneERK12SimpleString>
 800e03a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    setDataObject(mockingSupportName, "MockSupport", newMock);
 800e03e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e042:	4911      	ldr	r1, [pc, #68]	; (800e088 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800e044:	4618      	mov	r0, r3
 800e046:	f000 ff30 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800e04a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800e04e:	f107 0108 	add.w	r1, r7, #8
 800e052:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f7ff feec 	bl	800de34 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>
 800e05c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e060:	4618      	mov	r0, r3
 800e062:	f001 fada 	bl	800f61a <_ZN12SimpleStringD1Ev>
    return newMock;
 800e066:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800e06a:	f107 0308 	add.w	r3, r7, #8
 800e06e:	4618      	mov	r0, r3
 800e070:	f001 fad3 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800e074:	4623      	mov	r3, r4
}
 800e076:	4618      	mov	r0, r3
 800e078:	379c      	adds	r7, #156	; 0x9c
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e07e:	bf00      	nop
 800e080:	08026ed0 	.word	0x08026ed0
 800e084:	08026eb8 	.word	0x08026eb8
 800e088:	08026ef0 	.word	0x08026ef0

0800e08c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>:

MockSupport* MockSupport::getMockSupport(MockNamedValueListNode* node)
{
 800e08c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e090:	b08b      	sub	sp, #44	; 0x2c
 800e092:	af00      	add	r7, sp, #0
 800e094:	6078      	str	r0, [r7, #4]
 800e096:	6039      	str	r1, [r7, #0]
    if (node->getType() == "MockSupport" && node->getName().contains(MOCK_SUPPORT_SCOPE_PREFIX))
 800e098:	2500      	movs	r5, #0
 800e09a:	2600      	movs	r6, #0
 800e09c:	f107 0308 	add.w	r3, r7, #8
 800e0a0:	6839      	ldr	r1, [r7, #0]
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f013 fb26 	bl	80216f4 <_ZNK22MockNamedValueListNode7getTypeEv>
 800e0a8:	f04f 0801 	mov.w	r8, #1
 800e0ac:	f107 0310 	add.w	r3, r7, #16
 800e0b0:	492e      	ldr	r1, [pc, #184]	; (800e16c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe0>)
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f000 fef9 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800e0b8:	f04f 0901 	mov.w	r9, #1
 800e0bc:	f107 0210 	add.w	r2, r7, #16
 800e0c0:	f107 0308 	add.w	r3, r7, #8
 800e0c4:	4611      	mov	r1, r2
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f001 fab3 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d01a      	beq.n	800e108 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800e0d2:	f107 0318 	add.w	r3, r7, #24
 800e0d6:	6839      	ldr	r1, [r7, #0]
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f013 faf8 	bl	80216ce <_ZNK22MockNamedValueListNode7getNameEv>
 800e0de:	2501      	movs	r5, #1
 800e0e0:	f107 0320 	add.w	r3, r7, #32
 800e0e4:	4922      	ldr	r1, [pc, #136]	; (800e170 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe4>)
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f000 fedf 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800e0ec:	2601      	movs	r6, #1
 800e0ee:	f107 0220 	add.w	r2, r7, #32
 800e0f2:	f107 0318 	add.w	r3, r7, #24
 800e0f6:	4611      	mov	r1, r2
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f000 ff54 	bl	800efa6 <_ZNK12SimpleString8containsERKS_>
 800e0fe:	4603      	mov	r3, r0
 800e100:	2b00      	cmp	r3, #0
 800e102:	d001      	beq.n	800e108 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800e104:	2401      	movs	r4, #1
 800e106:	e000      	b.n	800e10a <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7e>
 800e108:	2400      	movs	r4, #0
 800e10a:	2e00      	cmp	r6, #0
 800e10c:	d004      	beq.n	800e118 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x8c>
 800e10e:	f107 0320 	add.w	r3, r7, #32
 800e112:	4618      	mov	r0, r3
 800e114:	f001 fa81 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800e118:	2d00      	cmp	r5, #0
 800e11a:	d004      	beq.n	800e126 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x9a>
 800e11c:	f107 0318 	add.w	r3, r7, #24
 800e120:	4618      	mov	r0, r3
 800e122:	f001 fa7a 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800e126:	f1b9 0f00 	cmp.w	r9, #0
 800e12a:	d004      	beq.n	800e136 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xaa>
 800e12c:	f107 0310 	add.w	r3, r7, #16
 800e130:	4618      	mov	r0, r3
 800e132:	f001 fa72 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800e136:	f1b8 0f00 	cmp.w	r8, #0
 800e13a:	d004      	beq.n	800e146 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xba>
 800e13c:	f107 0308 	add.w	r3, r7, #8
 800e140:	4618      	mov	r0, r3
 800e142:	f001 fa6a 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800e146:	2c00      	cmp	r4, #0
 800e148:	d00a      	beq.n	800e160 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd4>
        return (MockSupport*) node->item()->getObjectPointer();
 800e14a:	6838      	ldr	r0, [r7, #0]
 800e14c:	f013 fa90 	bl	8021670 <_ZN22MockNamedValueListNode4itemEv>
 800e150:	4603      	mov	r3, r0
 800e152:	681a      	ldr	r2, [r3, #0]
 800e154:	32a0      	adds	r2, #160	; 0xa0
 800e156:	6812      	ldr	r2, [r2, #0]
 800e158:	4618      	mov	r0, r3
 800e15a:	4790      	blx	r2
 800e15c:	4603      	mov	r3, r0
 800e15e:	e000      	b.n	800e162 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd6>
    return NULLPTR;
 800e160:	2300      	movs	r3, #0
}
 800e162:	4618      	mov	r0, r3
 800e164:	372c      	adds	r7, #44	; 0x2c
 800e166:	46bd      	mov	sp, r7
 800e168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e16c:	08026ef0 	.word	0x08026ef0
 800e170:	08026ed0 	.word	0x08026ed0

0800e174 <_ZN11MockSupport11returnValueEv>:

MockNamedValue MockSupport::returnValue()
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b084      	sub	sp, #16
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
 800e17c:	6039      	str	r1, [r7, #0]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->returnValue();
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e182:	2b00      	cmp	r3, #0
 800e184:	d00a      	beq.n	800e19c <_ZN11MockSupport11returnValueEv+0x28>
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	3354      	adds	r3, #84	; 0x54
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	687a      	ldr	r2, [r7, #4]
 800e196:	4610      	mov	r0, r2
 800e198:	4798      	blx	r3
 800e19a:	e010      	b.n	800e1be <_ZN11MockSupport11returnValueEv+0x4a>
    return MockNamedValue("");
 800e19c:	f107 0308 	add.w	r3, r7, #8
 800e1a0:	4909      	ldr	r1, [pc, #36]	; (800e1c8 <_ZN11MockSupport11returnValueEv+0x54>)
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f000 fe81 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800e1a8:	f107 0308 	add.w	r3, r7, #8
 800e1ac:	4619      	mov	r1, r3
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f011 fba0 	bl	801f8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
 800e1b4:	f107 0308 	add.w	r3, r7, #8
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f001 fa2e 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	3710      	adds	r7, #16
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}
 800e1c6:	bf00      	nop
 800e1c8:	08026eb0 	.word	0x08026eb0

0800e1cc <_ZN11MockSupport15boolReturnValueEv>:

bool MockSupport::boolReturnValue()
{
 800e1cc:	b590      	push	{r4, r7, lr}
 800e1ce:	b091      	sub	sp, #68	; 0x44
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	3320      	adds	r3, #32
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	f107 0208 	add.w	r2, r7, #8
 800e1e0:	6879      	ldr	r1, [r7, #4]
 800e1e2:	4610      	mov	r0, r2
 800e1e4:	4798      	blx	r3
 800e1e6:	f107 0308 	add.w	r3, r7, #8
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f011 fe5e 	bl	801feac <_ZNK14MockNamedValue12getBoolValueEv>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	461c      	mov	r4, r3
 800e1f4:	bf00      	nop
 800e1f6:	f107 0308 	add.w	r3, r7, #8
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f011 fba4 	bl	801f948 <_ZN14MockNamedValueD1Ev>
 800e200:	4623      	mov	r3, r4
}
 800e202:	4618      	mov	r0, r3
 800e204:	3744      	adds	r7, #68	; 0x44
 800e206:	46bd      	mov	sp, r7
 800e208:	bd90      	pop	{r4, r7, pc}

0800e20a <_ZN11MockSupport22unsignedIntReturnValueEv>:

unsigned int MockSupport::unsignedIntReturnValue()
{
 800e20a:	b590      	push	{r4, r7, lr}
 800e20c:	b091      	sub	sp, #68	; 0x44
 800e20e:	af00      	add	r7, sp, #0
 800e210:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	3320      	adds	r3, #32
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	f107 0208 	add.w	r2, r7, #8
 800e21e:	6879      	ldr	r1, [r7, #4]
 800e220:	4610      	mov	r0, r2
 800e222:	4798      	blx	r3
 800e224:	f107 0308 	add.w	r3, r7, #8
 800e228:	4618      	mov	r0, r3
 800e22a:	f011 fe67 	bl	801fefc <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 800e22e:	4604      	mov	r4, r0
 800e230:	bf00      	nop
 800e232:	f107 0308 	add.w	r3, r7, #8
 800e236:	4618      	mov	r0, r3
 800e238:	f011 fb86 	bl	801f948 <_ZN14MockNamedValueD1Ev>
 800e23c:	4623      	mov	r3, r4
}
 800e23e:	4618      	mov	r0, r3
 800e240:	3744      	adds	r7, #68	; 0x44
 800e242:	46bd      	mov	sp, r7
 800e244:	bd90      	pop	{r4, r7, pc}

0800e246 <_ZN11MockSupport14intReturnValueEv>:

int MockSupport::intReturnValue()
{
 800e246:	b590      	push	{r4, r7, lr}
 800e248:	b091      	sub	sp, #68	; 0x44
 800e24a:	af00      	add	r7, sp, #0
 800e24c:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	3320      	adds	r3, #32
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	f107 0208 	add.w	r2, r7, #8
 800e25a:	6879      	ldr	r1, [r7, #4]
 800e25c:	4610      	mov	r0, r2
 800e25e:	4798      	blx	r3
 800e260:	f107 0308 	add.w	r3, r7, #8
 800e264:	4618      	mov	r0, r3
 800e266:	f011 fe99 	bl	801ff9c <_ZNK14MockNamedValue11getIntValueEv>
 800e26a:	4604      	mov	r4, r0
 800e26c:	bf00      	nop
 800e26e:	f107 0308 	add.w	r3, r7, #8
 800e272:	4618      	mov	r0, r3
 800e274:	f011 fb68 	bl	801f948 <_ZN14MockNamedValueD1Ev>
 800e278:	4623      	mov	r3, r4
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	3744      	adds	r7, #68	; 0x44
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd90      	pop	{r4, r7, pc}

0800e282 <_ZN11MockSupport26returnStringValueOrDefaultEPKc>:

const char * MockSupport::returnStringValueOrDefault(const char * defaultValue)
{
 800e282:	b580      	push	{r7, lr}
 800e284:	b082      	sub	sp, #8
 800e286:	af00      	add	r7, sp, #0
 800e288:	6078      	str	r0, [r7, #4]
 800e28a:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	331c      	adds	r3, #28
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	4798      	blx	r3
 800e298:	4603      	mov	r3, r0
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d007      	beq.n	800e2ae <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2c>
        return stringReturnValue();
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	335c      	adds	r3, #92	; 0x5c
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	4798      	blx	r3
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	e000      	b.n	800e2b0 <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2e>
    }
    return defaultValue;
 800e2ae:	683b      	ldr	r3, [r7, #0]
}
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	3708      	adds	r7, #8
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	bd80      	pop	{r7, pc}

0800e2b8 <_ZN11MockSupport26returnDoubleValueOrDefaultEd>:

double MockSupport::returnDoubleValueOrDefault(double defaultValue)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b084      	sub	sp, #16
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	60f8      	str	r0, [r7, #12]
 800e2c0:	ed87 0b00 	vstr	d0, [r7]
    if (hasReturnValue()) {
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	331c      	adds	r3, #28
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	68f8      	ldr	r0, [r7, #12]
 800e2ce:	4798      	blx	r3
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d00a      	beq.n	800e2ec <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x34>
        return doubleReturnValue();
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	3368      	adds	r3, #104	; 0x68
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	68f8      	ldr	r0, [r7, #12]
 800e2e0:	4798      	blx	r3
 800e2e2:	eeb0 7a40 	vmov.f32	s14, s0
 800e2e6:	eef0 7a60 	vmov.f32	s15, s1
 800e2ea:	e001      	b.n	800e2f0 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x38>
    }
    return defaultValue;
 800e2ec:	ed97 7b00 	vldr	d7, [r7]
}
 800e2f0:	eeb0 0a47 	vmov.f32	s0, s14
 800e2f4:	eef0 0a67 	vmov.f32	s1, s15
 800e2f8:	3710      	adds	r7, #16
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}

0800e2fe <_ZN11MockSupport27returnLongIntValueOrDefaultEl>:

long int MockSupport::returnLongIntValueOrDefault(long int defaultValue)
{
 800e2fe:	b580      	push	{r7, lr}
 800e300:	b082      	sub	sp, #8
 800e302:	af00      	add	r7, sp, #0
 800e304:	6078      	str	r0, [r7, #4]
 800e306:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	331c      	adds	r3, #28
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	4798      	blx	r3
 800e314:	4603      	mov	r3, r0
 800e316:	2b00      	cmp	r3, #0
 800e318:	d007      	beq.n	800e32a <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2c>
        return longIntReturnValue();
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	3338      	adds	r3, #56	; 0x38
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	6878      	ldr	r0, [r7, #4]
 800e324:	4798      	blx	r3
 800e326:	4603      	mov	r3, r0
 800e328:	e000      	b.n	800e32c <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2e>
    }
    return defaultValue;
 800e32a:	683b      	ldr	r3, [r7, #0]
}
 800e32c:	4618      	mov	r0, r3
 800e32e:	3708      	adds	r7, #8
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}

0800e334 <_ZN11MockSupport24returnBoolValueOrDefaultEb>:

bool MockSupport::returnBoolValueOrDefault(bool defaultValue)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b082      	sub	sp, #8
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
 800e33c:	460b      	mov	r3, r1
 800e33e:	70fb      	strb	r3, [r7, #3]
    if (hasReturnValue()) {
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	331c      	adds	r3, #28
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	4798      	blx	r3
 800e34c:	4603      	mov	r3, r0
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d007      	beq.n	800e362 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x2e>
        return boolReturnValue();
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	3324      	adds	r3, #36	; 0x24
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	6878      	ldr	r0, [r7, #4]
 800e35c:	4798      	blx	r3
 800e35e:	4603      	mov	r3, r0
 800e360:	e000      	b.n	800e364 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x30>
    }
    return defaultValue;
 800e362:	78fb      	ldrb	r3, [r7, #3]
}
 800e364:	4618      	mov	r0, r3
 800e366:	3708      	adds	r7, #8
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}

0800e36c <_ZN11MockSupport23returnIntValueOrDefaultEi>:

int MockSupport::returnIntValueOrDefault(int defaultValue)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b082      	sub	sp, #8
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
 800e374:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	331c      	adds	r3, #28
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	6878      	ldr	r0, [r7, #4]
 800e380:	4798      	blx	r3
 800e382:	4603      	mov	r3, r0
 800e384:	2b00      	cmp	r3, #0
 800e386:	d007      	beq.n	800e398 <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2c>
        return intReturnValue();
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	332c      	adds	r3, #44	; 0x2c
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	4798      	blx	r3
 800e394:	4603      	mov	r3, r0
 800e396:	e000      	b.n	800e39a <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2e>
    }
    return defaultValue;
 800e398:	683b      	ldr	r3, [r7, #0]
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	3708      	adds	r7, #8
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd80      	pop	{r7, pc}

0800e3a2 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockSupport::returnUnsignedIntValueOrDefault(unsigned int defaultValue)
{
 800e3a2:	b580      	push	{r7, lr}
 800e3a4:	b082      	sub	sp, #8
 800e3a6:	af00      	add	r7, sp, #0
 800e3a8:	6078      	str	r0, [r7, #4]
 800e3aa:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	331c      	adds	r3, #28
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	4798      	blx	r3
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d007      	beq.n	800e3ce <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2c>
        return unsignedIntReturnValue();
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	3334      	adds	r3, #52	; 0x34
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	4798      	blx	r3
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	e000      	b.n	800e3d0 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2e>
    }
    return defaultValue;
 800e3ce:	683b      	ldr	r3, [r7, #0]
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	3708      	adds	r7, #8
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd80      	pop	{r7, pc}

0800e3d8 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockSupport::returnUnsignedLongIntValueOrDefault(unsigned long int defaultValue)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b082      	sub	sp, #8
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
 800e3e0:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	331c      	adds	r3, #28
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	4798      	blx	r3
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d007      	beq.n	800e404 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2c>
        return unsignedLongIntReturnValue();
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	3340      	adds	r3, #64	; 0x40
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	4798      	blx	r3
 800e400:	4603      	mov	r3, r0
 800e402:	e000      	b.n	800e406 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2e>
    }
    return defaultValue;
 800e404:	683b      	ldr	r3, [r7, #0]
}
 800e406:	4618      	mov	r0, r3
 800e408:	3708      	adds	r7, #8
 800e40a:	46bd      	mov	sp, r7
 800e40c:	bd80      	pop	{r7, pc}

0800e40e <_ZN11MockSupport18longIntReturnValueEv>:

long int MockSupport::longIntReturnValue()
{
 800e40e:	b590      	push	{r4, r7, lr}
 800e410:	b091      	sub	sp, #68	; 0x44
 800e412:	af00      	add	r7, sp, #0
 800e414:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	3320      	adds	r3, #32
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	f107 0208 	add.w	r2, r7, #8
 800e422:	6879      	ldr	r1, [r7, #4]
 800e424:	4610      	mov	r0, r2
 800e426:	4798      	blx	r3
 800e428:	f107 0308 	add.w	r3, r7, #8
 800e42c:	4618      	mov	r0, r3
 800e42e:	f011 fddd 	bl	801ffec <_ZNK14MockNamedValue15getLongIntValueEv>
 800e432:	4604      	mov	r4, r0
 800e434:	bf00      	nop
 800e436:	f107 0308 	add.w	r3, r7, #8
 800e43a:	4618      	mov	r0, r3
 800e43c:	f011 fa84 	bl	801f948 <_ZN14MockNamedValueD1Ev>
 800e440:	4623      	mov	r3, r4
}
 800e442:	4618      	mov	r0, r3
 800e444:	3744      	adds	r7, #68	; 0x44
 800e446:	46bd      	mov	sp, r7
 800e448:	bd90      	pop	{r4, r7, pc}

0800e44a <_ZN11MockSupport26unsignedLongIntReturnValueEv>:

unsigned long int MockSupport::unsignedLongIntReturnValue()
{
 800e44a:	b590      	push	{r4, r7, lr}
 800e44c:	b091      	sub	sp, #68	; 0x44
 800e44e:	af00      	add	r7, sp, #0
 800e450:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	3320      	adds	r3, #32
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f107 0208 	add.w	r2, r7, #8
 800e45e:	6879      	ldr	r1, [r7, #4]
 800e460:	4610      	mov	r0, r2
 800e462:	4798      	blx	r3
 800e464:	f107 0308 	add.w	r3, r7, #8
 800e468:	4618      	mov	r0, r3
 800e46a:	f011 fe21 	bl	80200b0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 800e46e:	4604      	mov	r4, r0
 800e470:	bf00      	nop
 800e472:	f107 0308 	add.w	r3, r7, #8
 800e476:	4618      	mov	r0, r3
 800e478:	f011 fa66 	bl	801f948 <_ZN14MockNamedValueD1Ev>
 800e47c:	4623      	mov	r3, r4
}
 800e47e:	4618      	mov	r0, r3
 800e480:	3744      	adds	r7, #68	; 0x44
 800e482:	46bd      	mov	sp, r7
 800e484:	bd90      	pop	{r4, r7, pc}
	...

0800e488 <_ZN11MockSupport22longLongIntReturnValueEv>:
}

#else

cpputest_longlong MockSupport::longLongIntReturnValue()
{
 800e488:	b5b0      	push	{r4, r5, r7, lr}
 800e48a:	b084      	sub	sp, #16
 800e48c:	af02      	add	r7, sp, #8
 800e48e:	6078      	str	r0, [r7, #4]
 800e490:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 800e492:	f008 f8ed 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 800e496:	4604      	mov	r4, r0
 800e498:	6823      	ldr	r3, [r4, #0]
 800e49a:	3368      	adds	r3, #104	; 0x68
 800e49c:	681d      	ldr	r5, [r3, #0]
 800e49e:	f008 f8f7 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	9300      	str	r3, [sp, #0]
 800e4a6:	f240 2345 	movw	r3, #581	; 0x245
 800e4aa:	4a06      	ldr	r2, [pc, #24]	; (800e4c4 <_ZN11MockSupport22longLongIntReturnValueEv+0x3c>)
 800e4ac:	4906      	ldr	r1, [pc, #24]	; (800e4c8 <_ZN11MockSupport22longLongIntReturnValueEv+0x40>)
 800e4ae:	4620      	mov	r0, r4
 800e4b0:	47a8      	blx	r5
    return cpputest_longlong(0);
 800e4b2:	2100      	movs	r1, #0
 800e4b4:	6878      	ldr	r0, [r7, #4]
 800e4b6:	f7fe fd2f 	bl	800cf18 <_ZN17cpputest_longlongC1Ei>
}
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	3708      	adds	r7, #8
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bdb0      	pop	{r4, r5, r7, pc}
 800e4c2:	bf00      	nop
 800e4c4:	08026eb8 	.word	0x08026eb8
 800e4c8:	08026efc 	.word	0x08026efc

0800e4cc <_ZN11MockSupport30unsignedLongLongIntReturnValueEv>:

cpputest_ulonglong MockSupport::unsignedLongLongIntReturnValue()
{
 800e4cc:	b5b0      	push	{r4, r5, r7, lr}
 800e4ce:	b084      	sub	sp, #16
 800e4d0:	af02      	add	r7, sp, #8
 800e4d2:	6078      	str	r0, [r7, #4]
 800e4d4:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 800e4d6:	f008 f8cb 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 800e4da:	4604      	mov	r4, r0
 800e4dc:	6823      	ldr	r3, [r4, #0]
 800e4de:	3368      	adds	r3, #104	; 0x68
 800e4e0:	681d      	ldr	r5, [r3, #0]
 800e4e2:	f008 f8d5 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	9300      	str	r3, [sp, #0]
 800e4ea:	f240 234b 	movw	r3, #587	; 0x24b
 800e4ee:	4a06      	ldr	r2, [pc, #24]	; (800e508 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x3c>)
 800e4f0:	4906      	ldr	r1, [pc, #24]	; (800e50c <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x40>)
 800e4f2:	4620      	mov	r0, r4
 800e4f4:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 800e4f6:	2100      	movs	r1, #0
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	f7fe fd19 	bl	800cf30 <_ZN18cpputest_ulonglongC1Ei>
}
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	3708      	adds	r7, #8
 800e502:	46bd      	mov	sp, r7
 800e504:	bdb0      	pop	{r4, r5, r7, pc}
 800e506:	bf00      	nop
 800e508:	08026eb8 	.word	0x08026eb8
 800e50c:	08026f1c 	.word	0x08026f1c

0800e510 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockSupport::returnLongLongIntValueOrDefault(cpputest_longlong defaultValue)
{
 800e510:	b5b0      	push	{r4, r5, r7, lr}
 800e512:	b086      	sub	sp, #24
 800e514:	af02      	add	r7, sp, #8
 800e516:	60f8      	str	r0, [r7, #12]
 800e518:	60b9      	str	r1, [r7, #8]
 800e51a:	4639      	mov	r1, r7
 800e51c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 800e520:	f008 f8a6 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 800e524:	4604      	mov	r4, r0
 800e526:	6823      	ldr	r3, [r4, #0]
 800e528:	3368      	adds	r3, #104	; 0x68
 800e52a:	681d      	ldr	r5, [r3, #0]
 800e52c:	f008 f8b0 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800e530:	4603      	mov	r3, r0
 800e532:	9300      	str	r3, [sp, #0]
 800e534:	f240 2351 	movw	r3, #593	; 0x251
 800e538:	4a06      	ldr	r2, [pc, #24]	; (800e554 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 800e53a:	4907      	ldr	r1, [pc, #28]	; (800e558 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 800e53c:	4620      	mov	r0, r4
 800e53e:	47a8      	blx	r5
    return defaultValue;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	461a      	mov	r2, r3
 800e544:	463b      	mov	r3, r7
 800e546:	cb03      	ldmia	r3!, {r0, r1}
 800e548:	6010      	str	r0, [r2, #0]
 800e54a:	6051      	str	r1, [r2, #4]
}
 800e54c:	68f8      	ldr	r0, [r7, #12]
 800e54e:	3710      	adds	r7, #16
 800e550:	46bd      	mov	sp, r7
 800e552:	bdb0      	pop	{r4, r5, r7, pc}
 800e554:	08026eb8 	.word	0x08026eb8
 800e558:	08026efc 	.word	0x08026efc

0800e55c <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockSupport::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong defaultValue)
{
 800e55c:	b5b0      	push	{r4, r5, r7, lr}
 800e55e:	b086      	sub	sp, #24
 800e560:	af02      	add	r7, sp, #8
 800e562:	60f8      	str	r0, [r7, #12]
 800e564:	60b9      	str	r1, [r7, #8]
 800e566:	4639      	mov	r1, r7
 800e568:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 800e56c:	f008 f880 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 800e570:	4604      	mov	r4, r0
 800e572:	6823      	ldr	r3, [r4, #0]
 800e574:	3368      	adds	r3, #104	; 0x68
 800e576:	681d      	ldr	r5, [r3, #0]
 800e578:	f008 f88a 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800e57c:	4603      	mov	r3, r0
 800e57e:	9300      	str	r3, [sp, #0]
 800e580:	f240 2357 	movw	r3, #599	; 0x257
 800e584:	4a06      	ldr	r2, [pc, #24]	; (800e5a0 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 800e586:	4907      	ldr	r1, [pc, #28]	; (800e5a4 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 800e588:	4620      	mov	r0, r4
 800e58a:	47a8      	blx	r5
    return defaultValue;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	461a      	mov	r2, r3
 800e590:	463b      	mov	r3, r7
 800e592:	cb03      	ldmia	r3!, {r0, r1}
 800e594:	6010      	str	r0, [r2, #0]
 800e596:	6051      	str	r1, [r2, #4]
}
 800e598:	68f8      	ldr	r0, [r7, #12]
 800e59a:	3710      	adds	r7, #16
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bdb0      	pop	{r4, r5, r7, pc}
 800e5a0:	08026eb8 	.word	0x08026eb8
 800e5a4:	08026f1c 	.word	0x08026f1c

0800e5a8 <_ZN11MockSupport17stringReturnValueEv>:

#endif

const char* MockSupport::stringReturnValue()
{
 800e5a8:	b590      	push	{r4, r7, lr}
 800e5aa:	b091      	sub	sp, #68	; 0x44
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	3320      	adds	r3, #32
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	f107 0208 	add.w	r2, r7, #8
 800e5bc:	6879      	ldr	r1, [r7, #4]
 800e5be:	4610      	mov	r0, r2
 800e5c0:	4798      	blx	r3
 800e5c2:	f107 0308 	add.w	r3, r7, #8
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	f011 fea6 	bl	8020318 <_ZNK14MockNamedValue14getStringValueEv>
 800e5cc:	4604      	mov	r4, r0
 800e5ce:	bf00      	nop
 800e5d0:	f107 0308 	add.w	r3, r7, #8
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f011 f9b7 	bl	801f948 <_ZN14MockNamedValueD1Ev>
 800e5da:	4623      	mov	r3, r4
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3744      	adds	r7, #68	; 0x44
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd90      	pop	{r4, r7, pc}

0800e5e4 <_ZN11MockSupport17doubleReturnValueEv>:

double MockSupport::doubleReturnValue()
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	ed2d 8b02 	vpush	{d8}
 800e5ea:	b090      	sub	sp, #64	; 0x40
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	3320      	adds	r3, #32
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	f107 0208 	add.w	r2, r7, #8
 800e5fc:	6879      	ldr	r1, [r7, #4]
 800e5fe:	4610      	mov	r0, r2
 800e600:	4798      	blx	r3
 800e602:	f107 0308 	add.w	r3, r7, #8
 800e606:	4618      	mov	r0, r3
 800e608:	f011 fe2a 	bl	8020260 <_ZNK14MockNamedValue14getDoubleValueEv>
 800e60c:	eeb0 8a40 	vmov.f32	s16, s0
 800e610:	eef0 8a60 	vmov.f32	s17, s1
 800e614:	bf00      	nop
 800e616:	f107 0308 	add.w	r3, r7, #8
 800e61a:	4618      	mov	r0, r3
 800e61c:	f011 f994 	bl	801f948 <_ZN14MockNamedValueD1Ev>
 800e620:	eeb0 7a48 	vmov.f32	s14, s16
 800e624:	eef0 7a68 	vmov.f32	s15, s17
}
 800e628:	eeb0 0a47 	vmov.f32	s0, s14
 800e62c:	eef0 0a67 	vmov.f32	s1, s15
 800e630:	3740      	adds	r7, #64	; 0x40
 800e632:	46bd      	mov	sp, r7
 800e634:	ecbd 8b02 	vpop	{d8}
 800e638:	bd80      	pop	{r7, pc}

0800e63a <_ZN11MockSupport27returnPointerValueOrDefaultEPv>:

void * MockSupport::returnPointerValueOrDefault(void * defaultValue)
{
 800e63a:	b580      	push	{r7, lr}
 800e63c:	b082      	sub	sp, #8
 800e63e:	af00      	add	r7, sp, #0
 800e640:	6078      	str	r0, [r7, #4]
 800e642:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	331c      	adds	r3, #28
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	4798      	blx	r3
 800e650:	4603      	mov	r3, r0
 800e652:	2b00      	cmp	r3, #0
 800e654:	d007      	beq.n	800e666 <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2c>
        return pointerReturnValue();
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	336c      	adds	r3, #108	; 0x6c
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	6878      	ldr	r0, [r7, #4]
 800e660:	4798      	blx	r3
 800e662:	4603      	mov	r3, r0
 800e664:	e000      	b.n	800e668 <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2e>
    }
    return defaultValue;
 800e666:	683b      	ldr	r3, [r7, #0]
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3708      	adds	r7, #8
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}

0800e670 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv>:

const void* MockSupport::returnConstPointerValueOrDefault(const void * defaultValue)
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b082      	sub	sp, #8
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
 800e678:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	331c      	adds	r3, #28
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	4798      	blx	r3
 800e686:	4603      	mov	r3, r0
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d007      	beq.n	800e69c <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2c>
        return constPointerReturnValue();
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	3378      	adds	r3, #120	; 0x78
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	4798      	blx	r3
 800e698:	4603      	mov	r3, r0
 800e69a:	e000      	b.n	800e69e <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2e>
    }
    return defaultValue;
 800e69c:	683b      	ldr	r3, [r7, #0]
}
 800e69e:	4618      	mov	r0, r3
 800e6a0:	3708      	adds	r7, #8
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}

0800e6a6 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockSupport::returnFunctionPointerValueOrDefault(void (*defaultValue)()))()
{
 800e6a6:	b580      	push	{r7, lr}
 800e6a8:	b082      	sub	sp, #8
 800e6aa:	af00      	add	r7, sp, #0
 800e6ac:	6078      	str	r0, [r7, #4]
 800e6ae:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	331c      	adds	r3, #28
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	4798      	blx	r3
 800e6bc:	4603      	mov	r3, r0
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d007      	beq.n	800e6d2 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2c>
        return functionPointerReturnValue();
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	3380      	adds	r3, #128	; 0x80
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	4798      	blx	r3
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	e000      	b.n	800e6d4 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2e>
    }
    return defaultValue;
 800e6d2:	683b      	ldr	r3, [r7, #0]
}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3708      	adds	r7, #8
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}

0800e6dc <_ZN11MockSupport18pointerReturnValueEv>:

void* MockSupport::pointerReturnValue()
{
 800e6dc:	b590      	push	{r4, r7, lr}
 800e6de:	b091      	sub	sp, #68	; 0x44
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	3320      	adds	r3, #32
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	f107 0208 	add.w	r2, r7, #8
 800e6f0:	6879      	ldr	r1, [r7, #4]
 800e6f2:	4610      	mov	r0, r2
 800e6f4:	4798      	blx	r3
 800e6f6:	f107 0308 	add.w	r3, r7, #8
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f011 fe34 	bl	8020368 <_ZNK14MockNamedValue15getPointerValueEv>
 800e700:	4604      	mov	r4, r0
 800e702:	bf00      	nop
 800e704:	f107 0308 	add.w	r3, r7, #8
 800e708:	4618      	mov	r0, r3
 800e70a:	f011 f91d 	bl	801f948 <_ZN14MockNamedValueD1Ev>
 800e70e:	4623      	mov	r3, r4
}
 800e710:	4618      	mov	r0, r3
 800e712:	3744      	adds	r7, #68	; 0x44
 800e714:	46bd      	mov	sp, r7
 800e716:	bd90      	pop	{r4, r7, pc}

0800e718 <_ZN11MockSupport23constPointerReturnValueEv>:

const void* MockSupport::constPointerReturnValue()
{
 800e718:	b590      	push	{r4, r7, lr}
 800e71a:	b091      	sub	sp, #68	; 0x44
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	3320      	adds	r3, #32
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	f107 0208 	add.w	r2, r7, #8
 800e72c:	6879      	ldr	r1, [r7, #4]
 800e72e:	4610      	mov	r0, r2
 800e730:	4798      	blx	r3
 800e732:	f107 0308 	add.w	r3, r7, #8
 800e736:	4618      	mov	r0, r3
 800e738:	f011 fe3e 	bl	80203b8 <_ZNK14MockNamedValue20getConstPointerValueEv>
 800e73c:	4604      	mov	r4, r0
 800e73e:	bf00      	nop
 800e740:	f107 0308 	add.w	r3, r7, #8
 800e744:	4618      	mov	r0, r3
 800e746:	f011 f8ff 	bl	801f948 <_ZN14MockNamedValueD1Ev>
 800e74a:	4623      	mov	r3, r4
}
 800e74c:	4618      	mov	r0, r3
 800e74e:	3744      	adds	r7, #68	; 0x44
 800e750:	46bd      	mov	sp, r7
 800e752:	bd90      	pop	{r4, r7, pc}

0800e754 <_ZN11MockSupport26functionPointerReturnValueEv>:

void (*MockSupport::functionPointerReturnValue())()
{
 800e754:	b590      	push	{r4, r7, lr}
 800e756:	b091      	sub	sp, #68	; 0x44
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	3320      	adds	r3, #32
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	f107 0208 	add.w	r2, r7, #8
 800e768:	6879      	ldr	r1, [r7, #4]
 800e76a:	4610      	mov	r0, r2
 800e76c:	4798      	blx	r3
 800e76e:	f107 0308 	add.w	r3, r7, #8
 800e772:	4618      	mov	r0, r3
 800e774:	f011 fe48 	bl	8020408 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 800e778:	4604      	mov	r4, r0
 800e77a:	bf00      	nop
 800e77c:	f107 0308 	add.w	r3, r7, #8
 800e780:	4618      	mov	r0, r3
 800e782:	f011 f8e1 	bl	801f948 <_ZN14MockNamedValueD1Ev>
 800e786:	4623      	mov	r3, r4
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3744      	adds	r7, #68	; 0x44
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd90      	pop	{r4, r7, pc}

0800e790 <_ZN11MockSupport14hasReturnValueEv>:

bool MockSupport::hasReturnValue()
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b082      	sub	sp, #8
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->hasReturnValue();
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d00a      	beq.n	800e7b6 <_ZN11MockSupport14hasReturnValueEv+0x26>
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	3350      	adds	r3, #80	; 0x50
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	4610      	mov	r0, r2
 800e7b0:	4798      	blx	r3
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	e000      	b.n	800e7b8 <_ZN11MockSupport14hasReturnValueEv+0x28>
    return false;
 800e7b6:	2300      	movs	r3, #0
}
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	3708      	adds	r7, #8
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd80      	pop	{r7, pc}

0800e7c0 <_Z41__static_initialization_and_destruction_0ii>:
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b084      	sub	sp, #16
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
 800e7c8:	6039      	str	r1, [r7, #0]
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2b01      	cmp	r3, #1
 800e7ce:	d115      	bne.n	800e7fc <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e7d6:	4293      	cmp	r3, r2
 800e7d8:	d110      	bne.n	800e7fc <_Z41__static_initialization_and_destruction_0ii+0x3c>
static MockSupport global_mock;
 800e7da:	f107 0308 	add.w	r3, r7, #8
 800e7de:	490f      	ldr	r1, [pc, #60]	; (800e81c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f000 fb62 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800e7e6:	f107 0308 	add.w	r3, r7, #8
 800e7ea:	4619      	mov	r1, r3
 800e7ec:	480c      	ldr	r0, [pc, #48]	; (800e820 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800e7ee:	f7fe fc6d 	bl	800d0cc <_ZN11MockSupportC1ERK12SimpleString>
 800e7f2:	f107 0308 	add.w	r3, r7, #8
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	f000 ff0f 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d107      	bne.n	800e812 <_Z41__static_initialization_and_destruction_0ii+0x52>
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e808:	4293      	cmp	r3, r2
 800e80a:	d102      	bne.n	800e812 <_Z41__static_initialization_and_destruction_0ii+0x52>
 800e80c:	4804      	ldr	r0, [pc, #16]	; (800e820 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800e80e:	f7fe fca7 	bl	800d160 <_ZN11MockSupportD1Ev>
}
 800e812:	bf00      	nop
 800e814:	3710      	adds	r7, #16
 800e816:	46bd      	mov	sp, r7
 800e818:	bd80      	pop	{r7, pc}
 800e81a:	bf00      	nop
 800e81c:	08026eb0 	.word	0x08026eb0
 800e820:	200009cc 	.word	0x200009cc

0800e824 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>:
protected:
    void addExpectationsAndCallHistory(const MockExpectedCallsList& expectations);
    void addExpectationsAndCallHistoryRelatedTo(const SimpleString& function, const MockExpectedCallsList& expectations);
};

class MockExpectedCallsDidntHappenFailure : public MockFailure
 800e824:	b580      	push	{r7, lr}
 800e826:	b082      	sub	sp, #8
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
 800e82c:	4a05      	ldr	r2, [pc, #20]	; (800e844 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev+0x20>)
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	601a      	str	r2, [r3, #0]
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	4618      	mov	r0, r3
 800e836:	f7fe fbbb 	bl	800cfb0 <_ZN11MockFailureD1Ev>
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	4618      	mov	r0, r3
 800e83e:	3708      	adds	r7, #8
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}
 800e844:	0802b24c 	.word	0x0802b24c

0800e848 <_ZN35MockExpectedCallsDidntHappenFailureD0Ev>:
 800e848:	b580      	push	{r7, lr}
 800e84a:	b082      	sub	sp, #8
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
 800e850:	6878      	ldr	r0, [r7, #4]
 800e852:	f7ff ffe7 	bl	800e824 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
 800e856:	2134      	movs	r1, #52	; 0x34
 800e858:	6878      	ldr	r0, [r7, #4]
 800e85a:	f7fd ff77 	bl	800c74c <_ZdlPvj>
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	4618      	mov	r0, r3
 800e862:	3708      	adds	r7, #8
 800e864:	46bd      	mov	sp, r7
 800e866:	bd80      	pop	{r7, pc}

0800e868 <_ZN20MockCallOrderFailureD1Ev>:
{
public:
    MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations);
};

class MockCallOrderFailure : public MockFailure
 800e868:	b580      	push	{r7, lr}
 800e86a:	b082      	sub	sp, #8
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
 800e870:	4a05      	ldr	r2, [pc, #20]	; (800e888 <_ZN20MockCallOrderFailureD1Ev+0x20>)
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	601a      	str	r2, [r3, #0]
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	4618      	mov	r0, r3
 800e87a:	f7fe fb99 	bl	800cfb0 <_ZN11MockFailureD1Ev>
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	4618      	mov	r0, r3
 800e882:	3708      	adds	r7, #8
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}
 800e888:	0802b220 	.word	0x0802b220

0800e88c <_ZN20MockCallOrderFailureD0Ev>:
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b082      	sub	sp, #8
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f7ff ffe7 	bl	800e868 <_ZN20MockCallOrderFailureD1Ev>
 800e89a:	2134      	movs	r1, #52	; 0x34
 800e89c:	6878      	ldr	r0, [r7, #4]
 800e89e:	f7fd ff55 	bl	800c74c <_ZdlPvj>
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	3708      	adds	r7, #8
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}

0800e8ac <_GLOBAL__sub_I__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	af00      	add	r7, sp, #0
 800e8b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e8b4:	2001      	movs	r0, #1
 800e8b6:	f7ff ff83 	bl	800e7c0 <_Z41__static_initialization_and_destruction_0ii>
 800e8ba:	bd80      	pop	{r7, pc}

0800e8bc <_GLOBAL__sub_D__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	af00      	add	r7, sp, #0
 800e8c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e8c4:	2000      	movs	r0, #0
 800e8c6:	f7ff ff7b 	bl	800e7c0 <_Z41__static_initialization_and_destruction_0ii>
 800e8ca:	bd80      	pop	{r7, pc}

0800e8cc <_ZN11SimpleMutexC1Ev>:
 */
#include "CppUTest/TestHarness.h"
#include "CppUTest/SimpleMutex.h"


SimpleMutex::SimpleMutex(void)
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b082      	sub	sp, #8
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
{
    psMtx = PlatformSpecificMutexCreate();
 800e8d4:	4b05      	ldr	r3, [pc, #20]	; (800e8ec <_ZN11SimpleMutexC1Ev+0x20>)
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	4798      	blx	r3
 800e8da:	4602      	mov	r2, r0
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	601a      	str	r2, [r3, #0]
}
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	3708      	adds	r7, #8
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}
 800e8ea:	bf00      	nop
 800e8ec:	200000f0 	.word	0x200000f0

0800e8f0 <_ZN11SimpleMutexD1Ev>:

SimpleMutex::~SimpleMutex(void)
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b082      	sub	sp, #8
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
{
    PlatformSpecificMutexDestroy(psMtx);
 800e8f8:	4b05      	ldr	r3, [pc, #20]	; (800e910 <_ZN11SimpleMutexD1Ev+0x20>)
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	687a      	ldr	r2, [r7, #4]
 800e8fe:	6812      	ldr	r2, [r2, #0]
 800e900:	4610      	mov	r0, r2
 800e902:	4798      	blx	r3
}
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	4618      	mov	r0, r3
 800e908:	3708      	adds	r7, #8
 800e90a:	46bd      	mov	sp, r7
 800e90c:	bd80      	pop	{r7, pc}
 800e90e:	bf00      	nop
 800e910:	200000fc 	.word	0x200000fc

0800e914 <_ZN11SimpleMutex4LockEv>:

void SimpleMutex::Lock(void)
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b082      	sub	sp, #8
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexLock(psMtx);
 800e91c:	4b04      	ldr	r3, [pc, #16]	; (800e930 <_ZN11SimpleMutex4LockEv+0x1c>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	687a      	ldr	r2, [r7, #4]
 800e922:	6812      	ldr	r2, [r2, #0]
 800e924:	4610      	mov	r0, r2
 800e926:	4798      	blx	r3
}
 800e928:	bf00      	nop
 800e92a:	3708      	adds	r7, #8
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}
 800e930:	200000f4 	.word	0x200000f4

0800e934 <_ZN11SimpleMutex6UnlockEv>:

void SimpleMutex::Unlock(void)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b082      	sub	sp, #8
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexUnlock(psMtx);
 800e93c:	4b04      	ldr	r3, [pc, #16]	; (800e950 <_ZN11SimpleMutex6UnlockEv+0x1c>)
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	687a      	ldr	r2, [r7, #4]
 800e942:	6812      	ldr	r2, [r2, #0]
 800e944:	4610      	mov	r0, r2
 800e946:	4798      	blx	r3
}
 800e948:	bf00      	nop
 800e94a:	3708      	adds	r7, #8
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd80      	pop	{r7, pc}
 800e950:	200000f8 	.word	0x200000f8

0800e954 <_ZN15ScopedMutexLockC1EP11SimpleMutex>:


ScopedMutexLock::ScopedMutexLock(SimpleMutex *mtx) :
 800e954:	b580      	push	{r7, lr}
 800e956:	b082      	sub	sp, #8
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
 800e95c:	6039      	str	r1, [r7, #0]
    mutex(mtx)
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	683a      	ldr	r2, [r7, #0]
 800e962:	601a      	str	r2, [r3, #0]
{
    mutex->Lock();
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	4618      	mov	r0, r3
 800e96a:	f7ff ffd3 	bl	800e914 <_ZN11SimpleMutex4LockEv>
}
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	4618      	mov	r0, r3
 800e972:	3708      	adds	r7, #8
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}

0800e978 <_ZN15ScopedMutexLockD1Ev>:

ScopedMutexLock::~ScopedMutexLock()
 800e978:	b580      	push	{r7, lr}
 800e97a:	b082      	sub	sp, #8
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
{
    mutex->Unlock();
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	4618      	mov	r0, r3
 800e986:	f7ff ffd5 	bl	800e934 <_ZN11SimpleMutex6UnlockEv>
}
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	4618      	mov	r0, r3
 800e98e:	3708      	adds	r7, #8
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}

0800e994 <_ZN12SimpleString18getStringAllocatorEv>:
}

TestMemoryAllocator* SimpleString::stringAllocator_ = NULLPTR;

TestMemoryAllocator* SimpleString::getStringAllocator()
{
 800e994:	b580      	push	{r7, lr}
 800e996:	af00      	add	r7, sp, #0
    if (stringAllocator_ == NULLPTR)
 800e998:	4b05      	ldr	r3, [pc, #20]	; (800e9b0 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d103      	bne.n	800e9a8 <_ZN12SimpleString18getStringAllocatorEv+0x14>
        return defaultNewArrayAllocator();
 800e9a0:	f003 fd7a 	bl	8012498 <_Z24defaultNewArrayAllocatorv>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	e001      	b.n	800e9ac <_ZN12SimpleString18getStringAllocatorEv+0x18>
    return stringAllocator_;
 800e9a8:	4b01      	ldr	r3, [pc, #4]	; (800e9b0 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	bd80      	pop	{r7, pc}
 800e9b0:	20000a14 	.word	0x20000a14

0800e9b4 <_ZN12SimpleString17allocStringBufferEjPKcj>:
    stringAllocator_ = allocator;
}

/* Avoid using the memory leak detector INSIDE SimpleString as its used inside the detector */
char* SimpleString::allocStringBuffer(size_t _size, const char* file, size_t line)
{
 800e9b4:	b590      	push	{r4, r7, lr}
 800e9b6:	b085      	sub	sp, #20
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	60f8      	str	r0, [r7, #12]
 800e9bc:	60b9      	str	r1, [r7, #8]
 800e9be:	607a      	str	r2, [r7, #4]
    return getStringAllocator()->alloc_memory(_size, file, line);
 800e9c0:	f7ff ffe8 	bl	800e994 <_ZN12SimpleString18getStringAllocatorEv>
 800e9c4:	6803      	ldr	r3, [r0, #0]
 800e9c6:	3308      	adds	r3, #8
 800e9c8:	681c      	ldr	r4, [r3, #0]
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	68ba      	ldr	r2, [r7, #8]
 800e9ce:	68f9      	ldr	r1, [r7, #12]
 800e9d0:	47a0      	blx	r4
 800e9d2:	4603      	mov	r3, r0
}
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	3714      	adds	r7, #20
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	bd90      	pop	{r4, r7, pc}

0800e9dc <_ZN12SimpleString19deallocStringBufferEPcjPKcj>:

void SimpleString::deallocStringBuffer(char* str, size_t size, const char* file, size_t line)
{
 800e9dc:	b590      	push	{r4, r7, lr}
 800e9de:	b087      	sub	sp, #28
 800e9e0:	af02      	add	r7, sp, #8
 800e9e2:	60f8      	str	r0, [r7, #12]
 800e9e4:	60b9      	str	r1, [r7, #8]
 800e9e6:	607a      	str	r2, [r7, #4]
 800e9e8:	603b      	str	r3, [r7, #0]
    getStringAllocator()->free_memory(str, size, file, line);
 800e9ea:	f7ff ffd3 	bl	800e994 <_ZN12SimpleString18getStringAllocatorEv>
 800e9ee:	6803      	ldr	r3, [r0, #0]
 800e9f0:	330c      	adds	r3, #12
 800e9f2:	681c      	ldr	r4, [r3, #0]
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	9300      	str	r3, [sp, #0]
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	68ba      	ldr	r2, [r7, #8]
 800e9fc:	68f9      	ldr	r1, [r7, #12]
 800e9fe:	47a0      	blx	r4
}
 800ea00:	bf00      	nop
 800ea02:	3714      	adds	r7, #20
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd90      	pop	{r4, r7, pc}

0800ea08 <_ZNK12SimpleString14getEmptyStringEv>:

char* SimpleString::getEmptyString() const
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b084      	sub	sp, #16
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
    char* empty = allocStringBuffer(1, __FILE__, __LINE__);
 800ea10:	2284      	movs	r2, #132	; 0x84
 800ea12:	4906      	ldr	r1, [pc, #24]	; (800ea2c <_ZNK12SimpleString14getEmptyStringEv+0x24>)
 800ea14:	2001      	movs	r0, #1
 800ea16:	f7ff ffcd 	bl	800e9b4 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800ea1a:	60f8      	str	r0, [r7, #12]
    empty[0] = '\0';
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	2200      	movs	r2, #0
 800ea20:	701a      	strb	r2, [r3, #0]
    return empty;
 800ea22:	68fb      	ldr	r3, [r7, #12]
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	3710      	adds	r7, #16
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd80      	pop	{r7, pc}
 800ea2c:	08026f48 	.word	0x08026f48

0800ea30 <_ZN12SimpleString4AtoUEPKc>:

// does not support + or - prefixes
unsigned SimpleString::AtoU(const char* str)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b084      	sub	sp, #16
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	781b      	ldrb	r3, [r3, #0]
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f001 f809 	bl	800fa54 <_ZN12SimpleString7isSpaceEc>
 800ea42:	4603      	mov	r3, r0
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d003      	beq.n	800ea50 <_ZN12SimpleString4AtoUEPKc+0x20>
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	607b      	str	r3, [r7, #4]
 800ea4e:	e7f3      	b.n	800ea38 <_ZN12SimpleString4AtoUEPKc+0x8>

    unsigned result = 0;
 800ea50:	2300      	movs	r3, #0
 800ea52:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	781b      	ldrb	r3, [r3, #0]
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f000 ffe7 	bl	800fa2c <_ZN12SimpleString7isDigitEc>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d005      	beq.n	800ea70 <_ZN12SimpleString4AtoUEPKc+0x40>
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	781b      	ldrb	r3, [r3, #0]
 800ea68:	2b2f      	cmp	r3, #47	; 0x2f
 800ea6a:	d901      	bls.n	800ea70 <_ZN12SimpleString4AtoUEPKc+0x40>
 800ea6c:	2301      	movs	r3, #1
 800ea6e:	e000      	b.n	800ea72 <_ZN12SimpleString4AtoUEPKc+0x42>
 800ea70:	2300      	movs	r3, #0
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d010      	beq.n	800ea98 <_ZN12SimpleString4AtoUEPKc+0x68>
    {
        result *= 10;
 800ea76:	68fa      	ldr	r2, [r7, #12]
 800ea78:	4613      	mov	r3, r2
 800ea7a:	009b      	lsls	r3, r3, #2
 800ea7c:	4413      	add	r3, r2
 800ea7e:	005b      	lsls	r3, r3, #1
 800ea80:	60fb      	str	r3, [r7, #12]
        result += static_cast<unsigned>(*str - '0');
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	781b      	ldrb	r3, [r3, #0]
 800ea86:	461a      	mov	r2, r3
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	4413      	add	r3, r2
 800ea8c:	3b30      	subs	r3, #48	; 0x30
 800ea8e:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	3301      	adds	r3, #1
 800ea94:	607b      	str	r3, [r7, #4]
 800ea96:	e7dd      	b.n	800ea54 <_ZN12SimpleString4AtoUEPKc+0x24>
    }
    return result;
 800ea98:	68fb      	ldr	r3, [r7, #12]
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	3710      	adds	r7, #16
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}

0800eaa2 <_ZN12SimpleString4AtoIEPKc>:

int SimpleString::AtoI(const char* str)
{
 800eaa2:	b580      	push	{r7, lr}
 800eaa4:	b084      	sub	sp, #16
 800eaa6:	af00      	add	r7, sp, #0
 800eaa8:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	781b      	ldrb	r3, [r3, #0]
 800eaae:	4618      	mov	r0, r3
 800eab0:	f000 ffd0 	bl	800fa54 <_ZN12SimpleString7isSpaceEc>
 800eab4:	4603      	mov	r3, r0
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d003      	beq.n	800eac2 <_ZN12SimpleString4AtoIEPKc+0x20>
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	3301      	adds	r3, #1
 800eabe:	607b      	str	r3, [r7, #4]
 800eac0:	e7f3      	b.n	800eaaa <_ZN12SimpleString4AtoIEPKc+0x8>

    char first_char = *str;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	781b      	ldrb	r3, [r3, #0]
 800eac6:	72fb      	strb	r3, [r7, #11]
    if (first_char == '-' || first_char == '+') str++;
 800eac8:	7afb      	ldrb	r3, [r7, #11]
 800eaca:	2b2d      	cmp	r3, #45	; 0x2d
 800eacc:	d002      	beq.n	800ead4 <_ZN12SimpleString4AtoIEPKc+0x32>
 800eace:	7afb      	ldrb	r3, [r7, #11]
 800ead0:	2b2b      	cmp	r3, #43	; 0x2b
 800ead2:	d102      	bne.n	800eada <_ZN12SimpleString4AtoIEPKc+0x38>
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	3301      	adds	r3, #1
 800ead8:	607b      	str	r3, [r7, #4]

    int  result = 0;
 800eada:	2300      	movs	r3, #0
 800eadc:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	781b      	ldrb	r3, [r3, #0]
 800eae2:	4618      	mov	r0, r3
 800eae4:	f000 ffa2 	bl	800fa2c <_ZN12SimpleString7isDigitEc>
 800eae8:	4603      	mov	r3, r0
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d00f      	beq.n	800eb0e <_ZN12SimpleString4AtoIEPKc+0x6c>
    {
        result *= 10;
 800eaee:	68fa      	ldr	r2, [r7, #12]
 800eaf0:	4613      	mov	r3, r2
 800eaf2:	009b      	lsls	r3, r3, #2
 800eaf4:	4413      	add	r3, r2
 800eaf6:	005b      	lsls	r3, r3, #1
 800eaf8:	60fb      	str	r3, [r7, #12]
        result += *str - '0';
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	781b      	ldrb	r3, [r3, #0]
 800eafe:	3b30      	subs	r3, #48	; 0x30
 800eb00:	68fa      	ldr	r2, [r7, #12]
 800eb02:	4413      	add	r3, r2
 800eb04:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	3301      	adds	r3, #1
 800eb0a:	607b      	str	r3, [r7, #4]
 800eb0c:	e7e7      	b.n	800eade <_ZN12SimpleString4AtoIEPKc+0x3c>
    }
    return (first_char == '-') ? -result : result;
 800eb0e:	7afb      	ldrb	r3, [r7, #11]
 800eb10:	2b2d      	cmp	r3, #45	; 0x2d
 800eb12:	d102      	bne.n	800eb1a <_ZN12SimpleString4AtoIEPKc+0x78>
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	425b      	negs	r3, r3
 800eb18:	e000      	b.n	800eb1c <_ZN12SimpleString4AtoIEPKc+0x7a>
 800eb1a:	68fb      	ldr	r3, [r7, #12]
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3710      	adds	r7, #16
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}

0800eb24 <_ZN12SimpleString6StrCmpEPKcS1_>:

int SimpleString::StrCmp(const char* s1, const char* s2)
{
 800eb24:	b480      	push	{r7}
 800eb26:	b083      	sub	sp, #12
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
 800eb2c:	6039      	str	r1, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	781b      	ldrb	r3, [r3, #0]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d00c      	beq.n	800eb50 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	781a      	ldrb	r2, [r3, #0]
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	781b      	ldrb	r3, [r3, #0]
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	d106      	bne.n	800eb50 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
       ++s1;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	3301      	adds	r3, #1
 800eb46:	607b      	str	r3, [r7, #4]
       ++s2;
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	3301      	adds	r3, #1
 800eb4c:	603b      	str	r3, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800eb4e:	e7ee      	b.n	800eb2e <_ZN12SimpleString6StrCmpEPKcS1_+0xa>
   }
   return *(const unsigned char *) s1 - *(const unsigned char *) s2;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	781b      	ldrb	r3, [r3, #0]
 800eb54:	461a      	mov	r2, r3
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	781b      	ldrb	r3, [r3, #0]
 800eb5a:	1ad3      	subs	r3, r2, r3
}
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	370c      	adds	r7, #12
 800eb60:	46bd      	mov	sp, r7
 800eb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb66:	4770      	bx	lr

0800eb68 <_ZN12SimpleString6StrLenEPKc>:

size_t SimpleString::StrLen(const char* str)
{
 800eb68:	b480      	push	{r7}
 800eb6a:	b085      	sub	sp, #20
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
    size_t n = (size_t)-1;
 800eb70:	f04f 33ff 	mov.w	r3, #4294967295
 800eb74:	60fb      	str	r3, [r7, #12]
    do n++; while (*str++);
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	3301      	adds	r3, #1
 800eb7a:	60fb      	str	r3, [r7, #12]
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	1c5a      	adds	r2, r3, #1
 800eb80:	607a      	str	r2, [r7, #4]
 800eb82:	781b      	ldrb	r3, [r3, #0]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	bf14      	ite	ne
 800eb88:	2301      	movne	r3, #1
 800eb8a:	2300      	moveq	r3, #0
 800eb8c:	b2db      	uxtb	r3, r3
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d000      	beq.n	800eb94 <_ZN12SimpleString6StrLenEPKc+0x2c>
 800eb92:	e7f0      	b.n	800eb76 <_ZN12SimpleString6StrLenEPKc+0xe>
    return n;
 800eb94:	68fb      	ldr	r3, [r7, #12]
}
 800eb96:	4618      	mov	r0, r3
 800eb98:	3714      	adds	r7, #20
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba0:	4770      	bx	lr

0800eba2 <_ZN12SimpleString7StrNCmpEPKcS1_j>:

int SimpleString::StrNCmp(const char* s1, const char* s2, size_t n)
{
 800eba2:	b480      	push	{r7}
 800eba4:	b085      	sub	sp, #20
 800eba6:	af00      	add	r7, sp, #0
 800eba8:	60f8      	str	r0, [r7, #12]
 800ebaa:	60b9      	str	r1, [r7, #8]
 800ebac:	607a      	str	r2, [r7, #4]
    while (n && *s1 && *s1 == *s2) {
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d013      	beq.n	800ebdc <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	781b      	ldrb	r3, [r3, #0]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d00f      	beq.n	800ebdc <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	781a      	ldrb	r2, [r3, #0]
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	781b      	ldrb	r3, [r3, #0]
 800ebc4:	429a      	cmp	r2, r3
 800ebc6:	d109      	bne.n	800ebdc <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
        --n;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	3b01      	subs	r3, #1
 800ebcc:	607b      	str	r3, [r7, #4]
        ++s1;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	3301      	adds	r3, #1
 800ebd2:	60fb      	str	r3, [r7, #12]
        ++s2;
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	3301      	adds	r3, #1
 800ebd8:	60bb      	str	r3, [r7, #8]
    while (n && *s1 && *s1 == *s2) {
 800ebda:	e7e8      	b.n	800ebae <_ZN12SimpleString7StrNCmpEPKcS1_j+0xc>
    }
    return n ? *(const unsigned char *) s1 - *(const unsigned char *) s2 : 0;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d006      	beq.n	800ebf0 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x4e>
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	781b      	ldrb	r3, [r3, #0]
 800ebe6:	461a      	mov	r2, r3
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	781b      	ldrb	r3, [r3, #0]
 800ebec:	1ad3      	subs	r3, r2, r3
 800ebee:	e000      	b.n	800ebf2 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x50>
 800ebf0:	2300      	movs	r3, #0
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3714      	adds	r7, #20
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfc:	4770      	bx	lr

0800ebfe <_ZN12SimpleString7StrNCpyEPcPKcj>:

char* SimpleString::StrNCpy(char* s1, const char* s2, size_t n)
{
 800ebfe:	b480      	push	{r7}
 800ec00:	b087      	sub	sp, #28
 800ec02:	af00      	add	r7, sp, #0
 800ec04:	60f8      	str	r0, [r7, #12]
 800ec06:	60b9      	str	r1, [r7, #8]
 800ec08:	607a      	str	r2, [r7, #4]
    char* result = s1;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	617b      	str	r3, [r7, #20]

    if((NULLPTR == s1) || (0 == n)) return result;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d002      	beq.n	800ec1a <_ZN12SimpleString7StrNCpyEPcPKcj+0x1c>
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d101      	bne.n	800ec1e <_ZN12SimpleString7StrNCpyEPcPKcj+0x20>
 800ec1a:	697b      	ldr	r3, [r7, #20]
 800ec1c:	e01e      	b.n	800ec5c <_ZN12SimpleString7StrNCpyEPcPKcj+0x5e>

    *s1 = *s2;
 800ec1e:	68bb      	ldr	r3, [r7, #8]
 800ec20:	781a      	ldrb	r2, [r3, #0]
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	3b01      	subs	r3, #1
 800ec2a:	607b      	str	r3, [r7, #4]
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d005      	beq.n	800ec3e <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	781b      	ldrb	r3, [r3, #0]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d001      	beq.n	800ec3e <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800ec3a:	2301      	movs	r3, #1
 800ec3c:	e000      	b.n	800ec40 <_ZN12SimpleString7StrNCpyEPcPKcj+0x42>
 800ec3e:	2300      	movs	r3, #0
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d00a      	beq.n	800ec5a <_ZN12SimpleString7StrNCpyEPcPKcj+0x5c>
        *++s1 = *++s2;
 800ec44:	68bb      	ldr	r3, [r7, #8]
 800ec46:	3301      	adds	r3, #1
 800ec48:	60bb      	str	r3, [r7, #8]
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	3301      	adds	r3, #1
 800ec4e:	60fb      	str	r3, [r7, #12]
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	781a      	ldrb	r2, [r3, #0]
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800ec58:	e7e5      	b.n	800ec26 <_ZN12SimpleString7StrNCpyEPcPKcj+0x28>
    }
    return result;
 800ec5a:	697b      	ldr	r3, [r7, #20]
}
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	371c      	adds	r7, #28
 800ec60:	46bd      	mov	sp, r7
 800ec62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec66:	4770      	bx	lr

0800ec68 <_ZN12SimpleString6StrStrEPKcS1_>:

const char* SimpleString::StrStr(const char* s1, const char* s2)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b082      	sub	sp, #8
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
 800ec70:	6039      	str	r1, [r7, #0]
    if(!*s2) return s1;
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	781b      	ldrb	r3, [r3, #0]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d101      	bne.n	800ec7e <_ZN12SimpleString6StrStrEPKcS1_+0x16>
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	e01b      	b.n	800ecb6 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	781b      	ldrb	r3, [r3, #0]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d016      	beq.n	800ecb4 <_ZN12SimpleString6StrStrEPKcS1_+0x4c>
        if (StrNCmp(s1, s2, StrLen(s2)) == 0)
 800ec86:	6838      	ldr	r0, [r7, #0]
 800ec88:	f7ff ff6e 	bl	800eb68 <_ZN12SimpleString6StrLenEPKc>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	461a      	mov	r2, r3
 800ec90:	6839      	ldr	r1, [r7, #0]
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	f7ff ff85 	bl	800eba2 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800ec98:	4603      	mov	r3, r0
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	bf0c      	ite	eq
 800ec9e:	2301      	moveq	r3, #1
 800eca0:	2300      	movne	r3, #0
 800eca2:	b2db      	uxtb	r3, r3
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d001      	beq.n	800ecac <_ZN12SimpleString6StrStrEPKcS1_+0x44>
            return s1;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	e004      	b.n	800ecb6 <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	3301      	adds	r3, #1
 800ecb0:	607b      	str	r3, [r7, #4]
 800ecb2:	e7e4      	b.n	800ec7e <_ZN12SimpleString6StrStrEPKcS1_+0x16>
    return NULLPTR;
 800ecb4:	2300      	movs	r3, #0
}
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	3708      	adds	r7, #8
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}

0800ecbe <_ZN12SimpleString7ToLowerEc>:

char SimpleString::ToLower(char ch)
{
 800ecbe:	b580      	push	{r7, lr}
 800ecc0:	b082      	sub	sp, #8
 800ecc2:	af00      	add	r7, sp, #0
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	71fb      	strb	r3, [r7, #7]
    return isUpper(ch) ? (char)((int)ch + ('a' - 'A')) : ch;
 800ecc8:	79fb      	ldrb	r3, [r7, #7]
 800ecca:	4618      	mov	r0, r3
 800eccc:	f000 fed9 	bl	800fa82 <_ZN12SimpleString7isUpperEc>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d003      	beq.n	800ecde <_ZN12SimpleString7ToLowerEc+0x20>
 800ecd6:	79fb      	ldrb	r3, [r7, #7]
 800ecd8:	3320      	adds	r3, #32
 800ecda:	b2db      	uxtb	r3, r3
 800ecdc:	e000      	b.n	800ece0 <_ZN12SimpleString7ToLowerEc+0x22>
 800ecde:	79fb      	ldrb	r3, [r7, #7]
}
 800ece0:	4618      	mov	r0, r3
 800ece2:	3708      	adds	r7, #8
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}

0800ece8 <_ZN12SimpleString6MemCmpEPKvS1_j>:

int SimpleString::MemCmp(const void* s1, const void *s2, size_t n)
{
 800ece8:	b480      	push	{r7}
 800ecea:	b087      	sub	sp, #28
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	60f8      	str	r0, [r7, #12]
 800ecf0:	60b9      	str	r1, [r7, #8]
 800ecf2:	607a      	str	r2, [r7, #4]
    const unsigned char* p1 = (const unsigned char*) s1;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	617b      	str	r3, [r7, #20]
    const unsigned char* p2 = (const unsigned char*) s2;
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	613b      	str	r3, [r7, #16]

    while (n--)
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	1e5a      	subs	r2, r3, #1
 800ed00:	607a      	str	r2, [r7, #4]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	bf14      	ite	ne
 800ed06:	2301      	movne	r3, #1
 800ed08:	2300      	moveq	r3, #0
 800ed0a:	b2db      	uxtb	r3, r3
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d013      	beq.n	800ed38 <_ZN12SimpleString6MemCmpEPKvS1_j+0x50>
        if (*p1 != *p2) {
 800ed10:	697b      	ldr	r3, [r7, #20]
 800ed12:	781a      	ldrb	r2, [r3, #0]
 800ed14:	693b      	ldr	r3, [r7, #16]
 800ed16:	781b      	ldrb	r3, [r3, #0]
 800ed18:	429a      	cmp	r2, r3
 800ed1a:	d006      	beq.n	800ed2a <_ZN12SimpleString6MemCmpEPKvS1_j+0x42>
            return *p1 - *p2;
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	781b      	ldrb	r3, [r3, #0]
 800ed20:	461a      	mov	r2, r3
 800ed22:	693b      	ldr	r3, [r7, #16]
 800ed24:	781b      	ldrb	r3, [r3, #0]
 800ed26:	1ad3      	subs	r3, r2, r3
 800ed28:	e007      	b.n	800ed3a <_ZN12SimpleString6MemCmpEPKvS1_j+0x52>
        } else {
            ++p1;
 800ed2a:	697b      	ldr	r3, [r7, #20]
 800ed2c:	3301      	adds	r3, #1
 800ed2e:	617b      	str	r3, [r7, #20]
            ++p2;
 800ed30:	693b      	ldr	r3, [r7, #16]
 800ed32:	3301      	adds	r3, #1
 800ed34:	613b      	str	r3, [r7, #16]
    while (n--)
 800ed36:	e7e1      	b.n	800ecfc <_ZN12SimpleString6MemCmpEPKvS1_j+0x14>
        }
    return 0;
 800ed38:	2300      	movs	r3, #0
}
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	371c      	adds	r7, #28
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed44:	4770      	bx	lr
	...

0800ed48 <_ZN12SimpleString24deallocateInternalBufferEv>:

void SimpleString::deallocateInternalBuffer()
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b082      	sub	sp, #8
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
    if (buffer_) {
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d00d      	beq.n	800ed74 <_ZN12SimpleString24deallocateInternalBufferEv+0x2c>
        deallocStringBuffer(buffer_, bufferSize_, __FILE__, __LINE__);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	6818      	ldr	r0, [r3, #0]
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	6859      	ldr	r1, [r3, #4]
 800ed60:	23ee      	movs	r3, #238	; 0xee
 800ed62:	4a06      	ldr	r2, [pc, #24]	; (800ed7c <_ZN12SimpleString24deallocateInternalBufferEv+0x34>)
 800ed64:	f7ff fe3a 	bl	800e9dc <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
        buffer_ = NULLPTR;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	601a      	str	r2, [r3, #0]
        bufferSize_ = 0;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	2200      	movs	r2, #0
 800ed72:	605a      	str	r2, [r3, #4]
    }
}
 800ed74:	bf00      	nop
 800ed76:	3708      	adds	r7, #8
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}
 800ed7c:	08026f48 	.word	0x08026f48

0800ed80 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>:

void SimpleString::setInternalBufferAsEmptyString()
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b082      	sub	sp, #8
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
    deallocateInternalBuffer();
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f7ff ffdd 	bl	800ed48 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = 1;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2201      	movs	r2, #1
 800ed92:	605a      	str	r2, [r3, #4]
    buffer_ = getEmptyString();
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	f7ff fe37 	bl	800ea08 <_ZNK12SimpleString14getEmptyStringEv>
 800ed9a:	4602      	mov	r2, r0
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	601a      	str	r2, [r3, #0]
}
 800eda0:	bf00      	nop
 800eda2:	3708      	adds	r7, #8
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}

0800eda8 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer, size_t bufferSize)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b084      	sub	sp, #16
 800edac:	af00      	add	r7, sp, #0
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	60b9      	str	r1, [r7, #8]
 800edb2:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800edb4:	68f8      	ldr	r0, [r7, #12]
 800edb6:	f7ff ffc7 	bl	800ed48 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	687a      	ldr	r2, [r7, #4]
 800edbe:	605a      	str	r2, [r3, #4]
    buffer_ = copyToNewBuffer(otherBuffer, bufferSize_);
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	685b      	ldr	r3, [r3, #4]
 800edc4:	4619      	mov	r1, r3
 800edc6:	68b8      	ldr	r0, [r7, #8]
 800edc8:	f000 fe12 	bl	800f9f0 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800edcc:	4602      	mov	r2, r0
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	601a      	str	r2, [r3, #0]
}
 800edd2:	bf00      	nop
 800edd4:	3710      	adds	r7, #16
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}
	...

0800eddc <_ZN12SimpleString28setInternalBufferToNewBufferEj>:

void SimpleString::setInternalBufferToNewBuffer(size_t bufferSize)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b082      	sub	sp, #8
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	6039      	str	r1, [r7, #0]
    deallocateInternalBuffer();
 800ede6:	6878      	ldr	r0, [r7, #4]
 800ede8:	f7ff ffae 	bl	800ed48 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	683a      	ldr	r2, [r7, #0]
 800edf0:	605a      	str	r2, [r3, #4]
    buffer_ = allocStringBuffer(bufferSize_, __FILE__, __LINE__);
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	685b      	ldr	r3, [r3, #4]
 800edf6:	f240 1209 	movw	r2, #265	; 0x109
 800edfa:	4907      	ldr	r1, [pc, #28]	; (800ee18 <_ZN12SimpleString28setInternalBufferToNewBufferEj+0x3c>)
 800edfc:	4618      	mov	r0, r3
 800edfe:	f7ff fdd9 	bl	800e9b4 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800ee02:	4602      	mov	r2, r0
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	701a      	strb	r2, [r3, #0]
}
 800ee10:	bf00      	nop
 800ee12:	3708      	adds	r7, #8
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}
 800ee18:	08026f48 	.word	0x08026f48

0800ee1c <_ZN12SimpleString19setInternalBufferToEPcj>:

void SimpleString::setInternalBufferTo(char* buffer, size_t bufferSize)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b084      	sub	sp, #16
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	60f8      	str	r0, [r7, #12]
 800ee24:	60b9      	str	r1, [r7, #8]
 800ee26:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800ee28:	68f8      	ldr	r0, [r7, #12]
 800ee2a:	f7ff ff8d 	bl	800ed48 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	687a      	ldr	r2, [r7, #4]
 800ee32:	605a      	str	r2, [r3, #4]
    buffer_ = buffer;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	68ba      	ldr	r2, [r7, #8]
 800ee38:	601a      	str	r2, [r3, #0]
}
 800ee3a:	bf00      	nop
 800ee3c:	3710      	adds	r7, #16
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}

0800ee42 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>:

void SimpleString::copyBufferToNewInternalBuffer(const SimpleString& otherBuffer)
{
 800ee42:	b590      	push	{r4, r7, lr}
 800ee44:	b083      	sub	sp, #12
 800ee46:	af00      	add	r7, sp, #0
 800ee48:	6078      	str	r0, [r7, #4]
 800ee4a:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer.buffer_, otherBuffer.size() + 1);
 800ee4c:	683b      	ldr	r3, [r7, #0]
 800ee4e:	681c      	ldr	r4, [r3, #0]
 800ee50:	6838      	ldr	r0, [r7, #0]
 800ee52:	f000 fbc1 	bl	800f5d8 <_ZNK12SimpleString4sizeEv>
 800ee56:	4603      	mov	r3, r0
 800ee58:	3301      	adds	r3, #1
 800ee5a:	461a      	mov	r2, r3
 800ee5c:	4621      	mov	r1, r4
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f7ff ffa2 	bl	800eda8 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800ee64:	bf00      	nop
 800ee66:	370c      	adds	r7, #12
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	bd90      	pop	{r4, r7, pc}

0800ee6c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer)
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b082      	sub	sp, #8
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
 800ee74:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer, StrLen(otherBuffer) + 1);
 800ee76:	6838      	ldr	r0, [r7, #0]
 800ee78:	f7ff fe76 	bl	800eb68 <_ZN12SimpleString6StrLenEPKc>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	3301      	adds	r3, #1
 800ee80:	461a      	mov	r2, r3
 800ee82:	6839      	ldr	r1, [r7, #0]
 800ee84:	6878      	ldr	r0, [r7, #4]
 800ee86:	f7ff ff8f 	bl	800eda8 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800ee8a:	bf00      	nop
 800ee8c:	3708      	adds	r7, #8
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}

0800ee92 <_ZNK12SimpleString9getBufferEv>:

const char* SimpleString::getBuffer() const
{
 800ee92:	b480      	push	{r7}
 800ee94:	b083      	sub	sp, #12
 800ee96:	af00      	add	r7, sp, #0
 800ee98:	6078      	str	r0, [r7, #4]
    return buffer_;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
}
 800ee9e:	4618      	mov	r0, r3
 800eea0:	370c      	adds	r7, #12
 800eea2:	46bd      	mov	sp, r7
 800eea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea8:	4770      	bx	lr

0800eeaa <_ZN12SimpleStringC1EPKc>:

SimpleString::SimpleString(const char *otherBuffer)
 800eeaa:	b580      	push	{r7, lr}
 800eeac:	b082      	sub	sp, #8
 800eeae:	af00      	add	r7, sp, #0
 800eeb0:	6078      	str	r0, [r7, #4]
 800eeb2:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	601a      	str	r2, [r3, #0]
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	2200      	movs	r2, #0
 800eebe:	605a      	str	r2, [r3, #4]
{
    if (otherBuffer == NULLPTR)
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d103      	bne.n	800eece <_ZN12SimpleStringC1EPKc+0x24>
        setInternalBufferAsEmptyString();
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f7ff ff5a 	bl	800ed80 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800eecc:	e003      	b.n	800eed6 <_ZN12SimpleStringC1EPKc+0x2c>
    else
        copyBufferToNewInternalBuffer(otherBuffer);
 800eece:	6839      	ldr	r1, [r7, #0]
 800eed0:	6878      	ldr	r0, [r7, #4]
 800eed2:	f7ff ffcb 	bl	800ee6c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	4618      	mov	r0, r3
 800eeda:	3708      	adds	r7, #8
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}

0800eee0 <_ZN12SimpleStringC1EPKcj>:

SimpleString::SimpleString(const char *other, size_t repeatCount)
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b088      	sub	sp, #32
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	60f8      	str	r0, [r7, #12]
 800eee8:	60b9      	str	r1, [r7, #8]
 800eeea:	607a      	str	r2, [r7, #4]
    : buffer_(NULLPTR), bufferSize_(0)
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	2200      	movs	r2, #0
 800eef0:	601a      	str	r2, [r3, #0]
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	2200      	movs	r2, #0
 800eef6:	605a      	str	r2, [r3, #4]
{
    size_t otherStringLength = StrLen(other);
 800eef8:	68b8      	ldr	r0, [r7, #8]
 800eefa:	f7ff fe35 	bl	800eb68 <_ZN12SimpleString6StrLenEPKc>
 800eefe:	6178      	str	r0, [r7, #20]
    setInternalBufferToNewBuffer(otherStringLength * repeatCount + 1);
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	687a      	ldr	r2, [r7, #4]
 800ef04:	fb02 f303 	mul.w	r3, r2, r3
 800ef08:	3301      	adds	r3, #1
 800ef0a:	4619      	mov	r1, r3
 800ef0c:	68f8      	ldr	r0, [r7, #12]
 800ef0e:	f7ff ff65 	bl	800eddc <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    char* next = buffer_;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800ef18:	2300      	movs	r3, #0
 800ef1a:	61bb      	str	r3, [r7, #24]
 800ef1c:	69ba      	ldr	r2, [r7, #24]
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	429a      	cmp	r2, r3
 800ef22:	d20e      	bcs.n	800ef42 <_ZN12SimpleStringC1EPKcj+0x62>
        StrNCpy(next, other, otherStringLength + 1);
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	3301      	adds	r3, #1
 800ef28:	461a      	mov	r2, r3
 800ef2a:	68b9      	ldr	r1, [r7, #8]
 800ef2c:	69f8      	ldr	r0, [r7, #28]
 800ef2e:	f7ff fe66 	bl	800ebfe <_ZN12SimpleString7StrNCpyEPcPKcj>
        next += otherStringLength;
 800ef32:	69fa      	ldr	r2, [r7, #28]
 800ef34:	697b      	ldr	r3, [r7, #20]
 800ef36:	4413      	add	r3, r2
 800ef38:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800ef3a:	69bb      	ldr	r3, [r7, #24]
 800ef3c:	3301      	adds	r3, #1
 800ef3e:	61bb      	str	r3, [r7, #24]
 800ef40:	e7ec      	b.n	800ef1c <_ZN12SimpleStringC1EPKcj+0x3c>
    }
    *next = 0;
 800ef42:	69fb      	ldr	r3, [r7, #28]
 800ef44:	2200      	movs	r2, #0
 800ef46:	701a      	strb	r2, [r3, #0]
}
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3720      	adds	r7, #32
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}

0800ef52 <_ZN12SimpleStringC1ERKS_>:

SimpleString::SimpleString(const SimpleString& other)
 800ef52:	b580      	push	{r7, lr}
 800ef54:	b082      	sub	sp, #8
 800ef56:	af00      	add	r7, sp, #0
 800ef58:	6078      	str	r0, [r7, #4]
 800ef5a:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2200      	movs	r2, #0
 800ef60:	601a      	str	r2, [r3, #0]
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	2200      	movs	r2, #0
 800ef66:	605a      	str	r2, [r3, #4]
{
    copyBufferToNewInternalBuffer(other.getBuffer());
 800ef68:	6838      	ldr	r0, [r7, #0]
 800ef6a:	f7ff ff92 	bl	800ee92 <_ZNK12SimpleString9getBufferEv>
 800ef6e:	4603      	mov	r3, r0
 800ef70:	4619      	mov	r1, r3
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	f7ff ff7a 	bl	800ee6c <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	3708      	adds	r7, #8
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}

0800ef82 <_ZN12SimpleStringaSERKS_>:

SimpleString& SimpleString::operator=(const SimpleString& other)
{
 800ef82:	b580      	push	{r7, lr}
 800ef84:	b082      	sub	sp, #8
 800ef86:	af00      	add	r7, sp, #0
 800ef88:	6078      	str	r0, [r7, #4]
 800ef8a:	6039      	str	r1, [r7, #0]
    if (this != &other)
 800ef8c:	687a      	ldr	r2, [r7, #4]
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	429a      	cmp	r2, r3
 800ef92:	d003      	beq.n	800ef9c <_ZN12SimpleStringaSERKS_+0x1a>
        copyBufferToNewInternalBuffer(other);
 800ef94:	6839      	ldr	r1, [r7, #0]
 800ef96:	6878      	ldr	r0, [r7, #4]
 800ef98:	f7ff ff53 	bl	800ee42 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>
    return *this;
 800ef9c:	687b      	ldr	r3, [r7, #4]
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	3708      	adds	r7, #8
 800efa2:	46bd      	mov	sp, r7
 800efa4:	bd80      	pop	{r7, pc}

0800efa6 <_ZNK12SimpleString8containsERKS_>:

bool SimpleString::contains(const SimpleString& other) const
{
 800efa6:	b590      	push	{r4, r7, lr}
 800efa8:	b083      	sub	sp, #12
 800efaa:	af00      	add	r7, sp, #0
 800efac:	6078      	str	r0, [r7, #4]
 800efae:	6039      	str	r1, [r7, #0]
    return StrStr(getBuffer(), other.getBuffer()) != NULLPTR;
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f7ff ff6e 	bl	800ee92 <_ZNK12SimpleString9getBufferEv>
 800efb6:	4604      	mov	r4, r0
 800efb8:	6838      	ldr	r0, [r7, #0]
 800efba:	f7ff ff6a 	bl	800ee92 <_ZNK12SimpleString9getBufferEv>
 800efbe:	4603      	mov	r3, r0
 800efc0:	4619      	mov	r1, r3
 800efc2:	4620      	mov	r0, r4
 800efc4:	f7ff fe50 	bl	800ec68 <_ZN12SimpleString6StrStrEPKcS1_>
 800efc8:	4603      	mov	r3, r0
 800efca:	2b00      	cmp	r3, #0
 800efcc:	bf14      	ite	ne
 800efce:	2301      	movne	r3, #1
 800efd0:	2300      	moveq	r3, #0
 800efd2:	b2db      	uxtb	r3, r3
}
 800efd4:	4618      	mov	r0, r3
 800efd6:	370c      	adds	r7, #12
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd90      	pop	{r4, r7, pc}

0800efdc <_ZNK12SimpleString14containsNoCaseERKS_>:

bool SimpleString::containsNoCase(const SimpleString& other) const
{
 800efdc:	b590      	push	{r4, r7, lr}
 800efde:	b087      	sub	sp, #28
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
 800efe4:	6039      	str	r1, [r7, #0]
    return lowerCase().contains(other.lowerCase());
 800efe6:	f107 0308 	add.w	r3, r7, #8
 800efea:	6879      	ldr	r1, [r7, #4]
 800efec:	4618      	mov	r0, r3
 800efee:	f000 fabb 	bl	800f568 <_ZNK12SimpleString9lowerCaseEv>
 800eff2:	f107 0310 	add.w	r3, r7, #16
 800eff6:	6839      	ldr	r1, [r7, #0]
 800eff8:	4618      	mov	r0, r3
 800effa:	f000 fab5 	bl	800f568 <_ZNK12SimpleString9lowerCaseEv>
 800effe:	f107 0210 	add.w	r2, r7, #16
 800f002:	f107 0308 	add.w	r3, r7, #8
 800f006:	4611      	mov	r1, r2
 800f008:	4618      	mov	r0, r3
 800f00a:	f7ff ffcc 	bl	800efa6 <_ZNK12SimpleString8containsERKS_>
 800f00e:	4603      	mov	r3, r0
 800f010:	461c      	mov	r4, r3
 800f012:	bf00      	nop
 800f014:	f107 0310 	add.w	r3, r7, #16
 800f018:	4618      	mov	r0, r3
 800f01a:	f000 fafe 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800f01e:	f107 0308 	add.w	r3, r7, #8
 800f022:	4618      	mov	r0, r3
 800f024:	f000 faf9 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800f028:	4623      	mov	r3, r4
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	371c      	adds	r7, #28
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd90      	pop	{r4, r7, pc}

0800f032 <_ZNK12SimpleString10startsWithERKS_>:

bool SimpleString::startsWith(const SimpleString& other) const
{
 800f032:	b590      	push	{r4, r7, lr}
 800f034:	b083      	sub	sp, #12
 800f036:	af00      	add	r7, sp, #0
 800f038:	6078      	str	r0, [r7, #4]
 800f03a:	6039      	str	r1, [r7, #0]
    if (other.size() == 0) return true;
 800f03c:	6838      	ldr	r0, [r7, #0]
 800f03e:	f000 facb 	bl	800f5d8 <_ZNK12SimpleString4sizeEv>
 800f042:	4603      	mov	r3, r0
 800f044:	2b00      	cmp	r3, #0
 800f046:	bf0c      	ite	eq
 800f048:	2301      	moveq	r3, #1
 800f04a:	2300      	movne	r3, #0
 800f04c:	b2db      	uxtb	r3, r3
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d001      	beq.n	800f056 <_ZNK12SimpleString10startsWithERKS_+0x24>
 800f052:	2301      	movs	r3, #1
 800f054:	e022      	b.n	800f09c <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else if (size() == 0) return false;
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f000 fabe 	bl	800f5d8 <_ZNK12SimpleString4sizeEv>
 800f05c:	4603      	mov	r3, r0
 800f05e:	2b00      	cmp	r3, #0
 800f060:	bf0c      	ite	eq
 800f062:	2301      	moveq	r3, #1
 800f064:	2300      	movne	r3, #0
 800f066:	b2db      	uxtb	r3, r3
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d001      	beq.n	800f070 <_ZNK12SimpleString10startsWithERKS_+0x3e>
 800f06c:	2300      	movs	r3, #0
 800f06e:	e015      	b.n	800f09c <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else return StrStr(getBuffer(), other.getBuffer()) == getBuffer();
 800f070:	6878      	ldr	r0, [r7, #4]
 800f072:	f7ff ff0e 	bl	800ee92 <_ZNK12SimpleString9getBufferEv>
 800f076:	4604      	mov	r4, r0
 800f078:	6838      	ldr	r0, [r7, #0]
 800f07a:	f7ff ff0a 	bl	800ee92 <_ZNK12SimpleString9getBufferEv>
 800f07e:	4603      	mov	r3, r0
 800f080:	4619      	mov	r1, r3
 800f082:	4620      	mov	r0, r4
 800f084:	f7ff fdf0 	bl	800ec68 <_ZN12SimpleString6StrStrEPKcS1_>
 800f088:	4604      	mov	r4, r0
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	f7ff ff01 	bl	800ee92 <_ZNK12SimpleString9getBufferEv>
 800f090:	4603      	mov	r3, r0
 800f092:	429c      	cmp	r4, r3
 800f094:	bf0c      	ite	eq
 800f096:	2301      	moveq	r3, #1
 800f098:	2300      	movne	r3, #0
 800f09a:	b2db      	uxtb	r3, r3
}
 800f09c:	4618      	mov	r0, r3
 800f09e:	370c      	adds	r7, #12
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd90      	pop	{r4, r7, pc}

0800f0a4 <_ZNK12SimpleString8endsWithERKS_>:

bool SimpleString::endsWith(const SimpleString& other) const
{
 800f0a4:	b590      	push	{r4, r7, lr}
 800f0a6:	b085      	sub	sp, #20
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
 800f0ac:	6039      	str	r1, [r7, #0]
    size_t length = size();
 800f0ae:	6878      	ldr	r0, [r7, #4]
 800f0b0:	f000 fa92 	bl	800f5d8 <_ZNK12SimpleString4sizeEv>
 800f0b4:	60f8      	str	r0, [r7, #12]
    size_t other_length = other.size();
 800f0b6:	6838      	ldr	r0, [r7, #0]
 800f0b8:	f000 fa8e 	bl	800f5d8 <_ZNK12SimpleString4sizeEv>
 800f0bc:	60b8      	str	r0, [r7, #8]

    if (other_length == 0) return true;
 800f0be:	68bb      	ldr	r3, [r7, #8]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d101      	bne.n	800f0c8 <_ZNK12SimpleString8endsWithERKS_+0x24>
 800f0c4:	2301      	movs	r3, #1
 800f0c6:	e020      	b.n	800f10a <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length == 0) return false;
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d101      	bne.n	800f0d2 <_ZNK12SimpleString8endsWithERKS_+0x2e>
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	e01b      	b.n	800f10a <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length < other_length) return false;
 800f0d2:	68fa      	ldr	r2, [r7, #12]
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	d201      	bcs.n	800f0de <_ZNK12SimpleString8endsWithERKS_+0x3a>
 800f0da:	2300      	movs	r3, #0
 800f0dc:	e015      	b.n	800f10a <_ZNK12SimpleString8endsWithERKS_+0x66>

    return StrCmp(getBuffer() + length - other_length, other.getBuffer()) == 0;
 800f0de:	6878      	ldr	r0, [r7, #4]
 800f0e0:	f7ff fed7 	bl	800ee92 <_ZNK12SimpleString9getBufferEv>
 800f0e4:	4601      	mov	r1, r0
 800f0e6:	68fa      	ldr	r2, [r7, #12]
 800f0e8:	68bb      	ldr	r3, [r7, #8]
 800f0ea:	1ad3      	subs	r3, r2, r3
 800f0ec:	18cc      	adds	r4, r1, r3
 800f0ee:	6838      	ldr	r0, [r7, #0]
 800f0f0:	f7ff fecf 	bl	800ee92 <_ZNK12SimpleString9getBufferEv>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	4619      	mov	r1, r3
 800f0f8:	4620      	mov	r0, r4
 800f0fa:	f7ff fd13 	bl	800eb24 <_ZN12SimpleString6StrCmpEPKcS1_>
 800f0fe:	4603      	mov	r3, r0
 800f100:	2b00      	cmp	r3, #0
 800f102:	bf0c      	ite	eq
 800f104:	2301      	moveq	r3, #1
 800f106:	2300      	movne	r3, #0
 800f108:	b2db      	uxtb	r3, r3
}
 800f10a:	4618      	mov	r0, r3
 800f10c:	3714      	adds	r7, #20
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd90      	pop	{r4, r7, pc}

0800f112 <_ZNK12SimpleString5countERKS_>:

size_t SimpleString::count(const SimpleString& substr) const
{
 800f112:	b580      	push	{r7, lr}
 800f114:	b086      	sub	sp, #24
 800f116:	af00      	add	r7, sp, #0
 800f118:	6078      	str	r0, [r7, #4]
 800f11a:	6039      	str	r1, [r7, #0]
    size_t num = 0;
 800f11c:	2300      	movs	r3, #0
 800f11e:	617b      	str	r3, [r7, #20]
    const char* str = getBuffer();
 800f120:	6878      	ldr	r0, [r7, #4]
 800f122:	f7ff feb6 	bl	800ee92 <_ZNK12SimpleString9getBufferEv>
 800f126:	6138      	str	r0, [r7, #16]
    const char* strpart = NULL;
 800f128:	2300      	movs	r3, #0
 800f12a:	60fb      	str	r3, [r7, #12]
    if (*str){
 800f12c:	693b      	ldr	r3, [r7, #16]
 800f12e:	781b      	ldrb	r3, [r3, #0]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d008      	beq.n	800f146 <_ZNK12SimpleString5countERKS_+0x34>
        strpart = StrStr(str, substr.getBuffer());
 800f134:	6838      	ldr	r0, [r7, #0]
 800f136:	f7ff feac 	bl	800ee92 <_ZNK12SimpleString9getBufferEv>
 800f13a:	4603      	mov	r3, r0
 800f13c:	4619      	mov	r1, r3
 800f13e:	6938      	ldr	r0, [r7, #16]
 800f140:	f7ff fd92 	bl	800ec68 <_ZN12SimpleString6StrStrEPKcS1_>
 800f144:	60f8      	str	r0, [r7, #12]
    }
    while (*str && strpart) {
 800f146:	693b      	ldr	r3, [r7, #16]
 800f148:	781b      	ldrb	r3, [r3, #0]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d014      	beq.n	800f178 <_ZNK12SimpleString5countERKS_+0x66>
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d011      	beq.n	800f178 <_ZNK12SimpleString5countERKS_+0x66>
        str = strpart;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	613b      	str	r3, [r7, #16]
        str++;
 800f158:	693b      	ldr	r3, [r7, #16]
 800f15a:	3301      	adds	r3, #1
 800f15c:	613b      	str	r3, [r7, #16]
        num++;
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	3301      	adds	r3, #1
 800f162:	617b      	str	r3, [r7, #20]
        strpart = StrStr(str, substr.getBuffer());
 800f164:	6838      	ldr	r0, [r7, #0]
 800f166:	f7ff fe94 	bl	800ee92 <_ZNK12SimpleString9getBufferEv>
 800f16a:	4603      	mov	r3, r0
 800f16c:	4619      	mov	r1, r3
 800f16e:	6938      	ldr	r0, [r7, #16]
 800f170:	f7ff fd7a 	bl	800ec68 <_ZN12SimpleString6StrStrEPKcS1_>
 800f174:	60f8      	str	r0, [r7, #12]
    while (*str && strpart) {
 800f176:	e7e6      	b.n	800f146 <_ZNK12SimpleString5countERKS_+0x34>
    }
    return num;
 800f178:	697b      	ldr	r3, [r7, #20]
}
 800f17a:	4618      	mov	r0, r3
 800f17c:	3718      	adds	r7, #24
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}

0800f182 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>:

void SimpleString::split(const SimpleString& delimiter, SimpleStringCollection& col) const
{
 800f182:	b590      	push	{r4, r7, lr}
 800f184:	b091      	sub	sp, #68	; 0x44
 800f186:	af00      	add	r7, sp, #0
 800f188:	60f8      	str	r0, [r7, #12]
 800f18a:	60b9      	str	r1, [r7, #8]
 800f18c:	607a      	str	r2, [r7, #4]
    size_t num = count(delimiter);
 800f18e:	68b9      	ldr	r1, [r7, #8]
 800f190:	68f8      	ldr	r0, [r7, #12]
 800f192:	f7ff ffbe 	bl	800f112 <_ZNK12SimpleString5countERKS_>
 800f196:	6378      	str	r0, [r7, #52]	; 0x34
    size_t extraEndToken = (endsWith(delimiter)) ? 0 : 1U;
 800f198:	68b9      	ldr	r1, [r7, #8]
 800f19a:	68f8      	ldr	r0, [r7, #12]
 800f19c:	f7ff ff82 	bl	800f0a4 <_ZNK12SimpleString8endsWithERKS_>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d001      	beq.n	800f1aa <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x28>
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	e000      	b.n	800f1ac <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x2a>
 800f1aa:	2301      	movs	r3, #1
 800f1ac:	633b      	str	r3, [r7, #48]	; 0x30
    col.allocate(num + extraEndToken);
 800f1ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1b2:	4413      	add	r3, r2
 800f1b4:	4619      	mov	r1, r3
 800f1b6:	6878      	ldr	r0, [r7, #4]
 800f1b8:	f001 f95c 	bl	8010474 <_ZN22SimpleStringCollection8allocateEj>

    const char* str = getBuffer();
 800f1bc:	68f8      	ldr	r0, [r7, #12]
 800f1be:	f7ff fe68 	bl	800ee92 <_ZNK12SimpleString9getBufferEv>
 800f1c2:	63f8      	str	r0, [r7, #60]	; 0x3c
    const char* prev;
    for (size_t i = 0; i < num; ++i) {
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	63bb      	str	r3, [r7, #56]	; 0x38
 800f1c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f1ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d235      	bcs.n	800f23c <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xba>
        prev = str;
 800f1d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        str = StrStr(str, delimiter.getBuffer()) + 1;
 800f1d4:	68b8      	ldr	r0, [r7, #8]
 800f1d6:	f7ff fe5c 	bl	800ee92 <_ZNK12SimpleString9getBufferEv>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	4619      	mov	r1, r3
 800f1de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f1e0:	f7ff fd42 	bl	800ec68 <_ZN12SimpleString6StrStrEPKcS1_>
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	3301      	adds	r3, #1
 800f1e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        col[i] = SimpleString(prev).subString(0, size_t (str - prev));
 800f1ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f1ec:	6878      	ldr	r0, [r7, #4]
 800f1ee:	f001 f9db 	bl	80105a8 <_ZN22SimpleStringCollectionixEj>
 800f1f2:	4604      	mov	r4, r0
 800f1f4:	f107 031c 	add.w	r3, r7, #28
 800f1f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	f7ff fe55 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800f200:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f204:	1ad3      	subs	r3, r2, r3
 800f206:	f107 0014 	add.w	r0, r7, #20
 800f20a:	f107 011c 	add.w	r1, r7, #28
 800f20e:	2200      	movs	r2, #0
 800f210:	f000 fb0c 	bl	800f82c <_ZNK12SimpleString9subStringEjj>
 800f214:	f107 0314 	add.w	r3, r7, #20
 800f218:	4619      	mov	r1, r3
 800f21a:	4620      	mov	r0, r4
 800f21c:	f7ff feb1 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 800f220:	f107 0314 	add.w	r3, r7, #20
 800f224:	4618      	mov	r0, r3
 800f226:	f000 f9f8 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800f22a:	f107 031c 	add.w	r3, r7, #28
 800f22e:	4618      	mov	r0, r3
 800f230:	f000 f9f3 	bl	800f61a <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < num; ++i) {
 800f234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f236:	3301      	adds	r3, #1
 800f238:	63bb      	str	r3, [r7, #56]	; 0x38
 800f23a:	e7c5      	b.n	800f1c8 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x46>
    }
    if (extraEndToken) {
 800f23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d015      	beq.n	800f26e <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xec>
        col[num] = str;
 800f242:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	f001 f9af 	bl	80105a8 <_ZN22SimpleStringCollectionixEj>
 800f24a:	4604      	mov	r4, r0
 800f24c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f250:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f252:	4618      	mov	r0, r3
 800f254:	f7ff fe29 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800f258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f25c:	4619      	mov	r1, r3
 800f25e:	4620      	mov	r0, r4
 800f260:	f7ff fe8f 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 800f264:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f268:	4618      	mov	r0, r3
 800f26a:	f000 f9d6 	bl	800f61a <_ZN12SimpleStringD1Ev>
    }
}
 800f26e:	bf00      	nop
 800f270:	3744      	adds	r7, #68	; 0x44
 800f272:	46bd      	mov	sp, r7
 800f274:	bd90      	pop	{r4, r7, pc}

0800f276 <_ZN12SimpleString7replaceEcc>:

void SimpleString::replace(char to, char with)
{
 800f276:	b580      	push	{r7, lr}
 800f278:	b084      	sub	sp, #16
 800f27a:	af00      	add	r7, sp, #0
 800f27c:	6078      	str	r0, [r7, #4]
 800f27e:	460b      	mov	r3, r1
 800f280:	70fb      	strb	r3, [r7, #3]
 800f282:	4613      	mov	r3, r2
 800f284:	70bb      	strb	r3, [r7, #2]
    size_t s = size();
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	f000 f9a6 	bl	800f5d8 <_ZNK12SimpleString4sizeEv>
 800f28c:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < s; i++) {
 800f28e:	2300      	movs	r3, #0
 800f290:	60fb      	str	r3, [r7, #12]
 800f292:	68fa      	ldr	r2, [r7, #12]
 800f294:	68bb      	ldr	r3, [r7, #8]
 800f296:	429a      	cmp	r2, r3
 800f298:	d218      	bcs.n	800f2cc <_ZN12SimpleString7replaceEcc+0x56>
        if (getBuffer()[i] == to) buffer_[i] = with;
 800f29a:	6878      	ldr	r0, [r7, #4]
 800f29c:	f7ff fdf9 	bl	800ee92 <_ZNK12SimpleString9getBufferEv>
 800f2a0:	4602      	mov	r2, r0
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	4413      	add	r3, r2
 800f2a6:	781b      	ldrb	r3, [r3, #0]
 800f2a8:	78fa      	ldrb	r2, [r7, #3]
 800f2aa:	429a      	cmp	r2, r3
 800f2ac:	bf0c      	ite	eq
 800f2ae:	2301      	moveq	r3, #1
 800f2b0:	2300      	movne	r3, #0
 800f2b2:	b2db      	uxtb	r3, r3
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d005      	beq.n	800f2c4 <_ZN12SimpleString7replaceEcc+0x4e>
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681a      	ldr	r2, [r3, #0]
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	4413      	add	r3, r2
 800f2c0:	78ba      	ldrb	r2, [r7, #2]
 800f2c2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < s; i++) {
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	3301      	adds	r3, #1
 800f2c8:	60fb      	str	r3, [r7, #12]
 800f2ca:	e7e2      	b.n	800f292 <_ZN12SimpleString7replaceEcc+0x1c>
    }
}
 800f2cc:	bf00      	nop
 800f2ce:	3710      	adds	r7, #16
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bd80      	pop	{r7, pc}

0800f2d4 <_ZN12SimpleString7replaceEPKcS1_>:

void SimpleString::replace(const char* to, const char* with)
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b08e      	sub	sp, #56	; 0x38
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	60f8      	str	r0, [r7, #12]
 800f2dc:	60b9      	str	r1, [r7, #8]
 800f2de:	607a      	str	r2, [r7, #4]
    size_t c = count(to);
 800f2e0:	f107 0310 	add.w	r3, r7, #16
 800f2e4:	68b9      	ldr	r1, [r7, #8]
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f7ff fddf 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800f2ec:	f107 0310 	add.w	r3, r7, #16
 800f2f0:	4619      	mov	r1, r3
 800f2f2:	68f8      	ldr	r0, [r7, #12]
 800f2f4:	f7ff ff0d 	bl	800f112 <_ZNK12SimpleString5countERKS_>
 800f2f8:	62f8      	str	r0, [r7, #44]	; 0x2c
 800f2fa:	f107 0310 	add.w	r3, r7, #16
 800f2fe:	4618      	mov	r0, r3
 800f300:	f000 f98b 	bl	800f61a <_ZN12SimpleStringD1Ev>
    if (c == 0) {
 800f304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f306:	2b00      	cmp	r3, #0
 800f308:	d071      	beq.n	800f3ee <_ZN12SimpleString7replaceEPKcS1_+0x11a>
        return;
    }
    size_t len = size();
 800f30a:	68f8      	ldr	r0, [r7, #12]
 800f30c:	f000 f964 	bl	800f5d8 <_ZNK12SimpleString4sizeEv>
 800f310:	62b8      	str	r0, [r7, #40]	; 0x28
    size_t tolen = StrLen(to);
 800f312:	68b8      	ldr	r0, [r7, #8]
 800f314:	f7ff fc28 	bl	800eb68 <_ZN12SimpleString6StrLenEPKc>
 800f318:	6278      	str	r0, [r7, #36]	; 0x24
    size_t withlen = StrLen(with);
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	f7ff fc24 	bl	800eb68 <_ZN12SimpleString6StrLenEPKc>
 800f320:	6238      	str	r0, [r7, #32]

    size_t newsize = len + (withlen * c) - (tolen * c) + 1;
 800f322:	6a3b      	ldr	r3, [r7, #32]
 800f324:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f326:	fb02 f203 	mul.w	r2, r2, r3
 800f32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f32c:	441a      	add	r2, r3
 800f32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f330:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f332:	fb01 f303 	mul.w	r3, r1, r3
 800f336:	1ad3      	subs	r3, r2, r3
 800f338:	3301      	adds	r3, #1
 800f33a:	61fb      	str	r3, [r7, #28]

    if (newsize > 1) {
 800f33c:	69fb      	ldr	r3, [r7, #28]
 800f33e:	2b01      	cmp	r3, #1
 800f340:	d951      	bls.n	800f3e6 <_ZN12SimpleString7replaceEPKcS1_+0x112>
        char* newbuf = allocStringBuffer(newsize, __FILE__, __LINE__);
 800f342:	f240 129d 	movw	r2, #413	; 0x19d
 800f346:	492c      	ldr	r1, [pc, #176]	; (800f3f8 <_ZN12SimpleString7replaceEPKcS1_+0x124>)
 800f348:	69f8      	ldr	r0, [r7, #28]
 800f34a:	f7ff fb33 	bl	800e9b4 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800f34e:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0, j = 0; i < len;) {
 800f350:	2300      	movs	r3, #0
 800f352:	637b      	str	r3, [r7, #52]	; 0x34
 800f354:	2300      	movs	r3, #0
 800f356:	633b      	str	r3, [r7, #48]	; 0x30
 800f358:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f35c:	429a      	cmp	r2, r3
 800f35e:	d236      	bcs.n	800f3ce <_ZN12SimpleString7replaceEPKcS1_+0xfa>
            if (StrNCmp(&getBuffer()[i], to, tolen) == 0) {
 800f360:	68f8      	ldr	r0, [r7, #12]
 800f362:	f7ff fd96 	bl	800ee92 <_ZNK12SimpleString9getBufferEv>
 800f366:	4602      	mov	r2, r0
 800f368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f36a:	4413      	add	r3, r2
 800f36c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f36e:	68b9      	ldr	r1, [r7, #8]
 800f370:	4618      	mov	r0, r3
 800f372:	f7ff fc16 	bl	800eba2 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800f376:	4603      	mov	r3, r0
 800f378:	2b00      	cmp	r3, #0
 800f37a:	bf0c      	ite	eq
 800f37c:	2301      	moveq	r3, #1
 800f37e:	2300      	movne	r3, #0
 800f380:	b2db      	uxtb	r3, r3
 800f382:	2b00      	cmp	r3, #0
 800f384:	d011      	beq.n	800f3aa <_ZN12SimpleString7replaceEPKcS1_+0xd6>
                StrNCpy(&newbuf[j], with, withlen + 1);
 800f386:	69ba      	ldr	r2, [r7, #24]
 800f388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f38a:	18d0      	adds	r0, r2, r3
 800f38c:	6a3b      	ldr	r3, [r7, #32]
 800f38e:	3301      	adds	r3, #1
 800f390:	461a      	mov	r2, r3
 800f392:	6879      	ldr	r1, [r7, #4]
 800f394:	f7ff fc33 	bl	800ebfe <_ZN12SimpleString7StrNCpyEPcPKcj>
                j += withlen;
 800f398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f39a:	6a3b      	ldr	r3, [r7, #32]
 800f39c:	4413      	add	r3, r2
 800f39e:	633b      	str	r3, [r7, #48]	; 0x30
                i += tolen;
 800f3a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3a4:	4413      	add	r3, r2
 800f3a6:	637b      	str	r3, [r7, #52]	; 0x34
 800f3a8:	e7d6      	b.n	800f358 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
            else {
                newbuf[j] = getBuffer()[i];
 800f3aa:	68f8      	ldr	r0, [r7, #12]
 800f3ac:	f7ff fd71 	bl	800ee92 <_ZNK12SimpleString9getBufferEv>
 800f3b0:	4602      	mov	r2, r0
 800f3b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3b4:	441a      	add	r2, r3
 800f3b6:	69b9      	ldr	r1, [r7, #24]
 800f3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ba:	440b      	add	r3, r1
 800f3bc:	7812      	ldrb	r2, [r2, #0]
 800f3be:	701a      	strb	r2, [r3, #0]
                j++;
 800f3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3c2:	3301      	adds	r3, #1
 800f3c4:	633b      	str	r3, [r7, #48]	; 0x30
                i++;
 800f3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3c8:	3301      	adds	r3, #1
 800f3ca:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t i = 0, j = 0; i < len;) {
 800f3cc:	e7c4      	b.n	800f358 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
        }
        newbuf[newsize - 1] = '\0';
 800f3ce:	69fb      	ldr	r3, [r7, #28]
 800f3d0:	3b01      	subs	r3, #1
 800f3d2:	69ba      	ldr	r2, [r7, #24]
 800f3d4:	4413      	add	r3, r2
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	701a      	strb	r2, [r3, #0]
        setInternalBufferTo(newbuf, newsize);
 800f3da:	69fa      	ldr	r2, [r7, #28]
 800f3dc:	69b9      	ldr	r1, [r7, #24]
 800f3de:	68f8      	ldr	r0, [r7, #12]
 800f3e0:	f7ff fd1c 	bl	800ee1c <_ZN12SimpleString19setInternalBufferToEPcj>
 800f3e4:	e004      	b.n	800f3f0 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
    }
    else
        setInternalBufferAsEmptyString();
 800f3e6:	68f8      	ldr	r0, [r7, #12]
 800f3e8:	f7ff fcca 	bl	800ed80 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800f3ec:	e000      	b.n	800f3f0 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
        return;
 800f3ee:	bf00      	nop
}
 800f3f0:	3738      	adds	r7, #56	; 0x38
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}
 800f3f6:	bf00      	nop
 800f3f8:	08026f48 	.word	0x08026f48

0800f3fc <_ZNK12SimpleString9printableEv>:

SimpleString SimpleString::printable() const
{
 800f3fc:	b590      	push	{r4, r7, lr}
 800f3fe:	b089      	sub	sp, #36	; 0x24
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
 800f404:	6039      	str	r1, [r7, #0]
        "\\v",
        "\\f",
        "\\r"
    };

    SimpleString result;
 800f406:	493b      	ldr	r1, [pc, #236]	; (800f4f4 <_ZNK12SimpleString9printableEv+0xf8>)
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f7ff fd4e 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
    result.setInternalBufferToNewBuffer(getPrintableSize() + 1);
 800f40e:	6838      	ldr	r0, [r7, #0]
 800f410:	f000 f876 	bl	800f500 <_ZNK12SimpleString16getPrintableSizeEv>
 800f414:	4603      	mov	r3, r0
 800f416:	3301      	adds	r3, #1
 800f418:	4619      	mov	r1, r3
 800f41a:	6878      	ldr	r0, [r7, #4]
 800f41c:	f7ff fcde 	bl	800eddc <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    size_t str_size = size();
 800f420:	6838      	ldr	r0, [r7, #0]
 800f422:	f000 f8d9 	bl	800f5d8 <_ZNK12SimpleString4sizeEv>
 800f426:	6178      	str	r0, [r7, #20]
    size_t j = 0;
 800f428:	2300      	movs	r3, #0
 800f42a:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800f42c:	2300      	movs	r3, #0
 800f42e:	61bb      	str	r3, [r7, #24]
 800f430:	69ba      	ldr	r2, [r7, #24]
 800f432:	697b      	ldr	r3, [r7, #20]
 800f434:	429a      	cmp	r2, r3
 800f436:	d252      	bcs.n	800f4de <_ZNK12SimpleString9printableEv+0xe2>
    {
        char c = buffer_[i];
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	681a      	ldr	r2, [r3, #0]
 800f43c:	69bb      	ldr	r3, [r7, #24]
 800f43e:	4413      	add	r3, r2
 800f440:	781b      	ldrb	r3, [r3, #0]
 800f442:	74fb      	strb	r3, [r7, #19]
        if (isControlWithShortEscapeSequence(c))
 800f444:	7cfb      	ldrb	r3, [r7, #19]
 800f446:	4618      	mov	r0, r3
 800f448:	f000 fb43 	bl	800fad2 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800f44c:	4603      	mov	r3, r0
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d012      	beq.n	800f478 <_ZNK12SimpleString9printableEv+0x7c>
        {
            StrNCpy(&result.buffer_[j], shortEscapeCodes[(unsigned char)(c - '\a')], 2);
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	681a      	ldr	r2, [r3, #0]
 800f456:	69fb      	ldr	r3, [r7, #28]
 800f458:	18d0      	adds	r0, r2, r3
 800f45a:	7cfb      	ldrb	r3, [r7, #19]
 800f45c:	3b07      	subs	r3, #7
 800f45e:	b2db      	uxtb	r3, r3
 800f460:	461a      	mov	r2, r3
 800f462:	4b25      	ldr	r3, [pc, #148]	; (800f4f8 <_ZNK12SimpleString9printableEv+0xfc>)
 800f464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f468:	2202      	movs	r2, #2
 800f46a:	4619      	mov	r1, r3
 800f46c:	f7ff fbc7 	bl	800ebfe <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 2;
 800f470:	69fb      	ldr	r3, [r7, #28]
 800f472:	3302      	adds	r3, #2
 800f474:	61fb      	str	r3, [r7, #28]
 800f476:	e02e      	b.n	800f4d6 <_ZNK12SimpleString9printableEv+0xda>
        }
        else if (isControl(c))
 800f478:	7cfb      	ldrb	r3, [r7, #19]
 800f47a:	4618      	mov	r0, r3
 800f47c:	f000 fb15 	bl	800faaa <_ZN12SimpleString9isControlEc>
 800f480:	4603      	mov	r3, r0
 800f482:	2b00      	cmp	r3, #0
 800f484:	d01e      	beq.n	800f4c4 <_ZNK12SimpleString9printableEv+0xc8>
        {
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800f486:	7cfa      	ldrb	r2, [r7, #19]
 800f488:	f107 0308 	add.w	r3, r7, #8
 800f48c:	491b      	ldr	r1, [pc, #108]	; (800f4fc <_ZNK12SimpleString9printableEv+0x100>)
 800f48e:	4618      	mov	r0, r3
 800f490:	f000 fdca 	bl	8010028 <_Z16StringFromFormatPKcz>
            StrNCpy(&result.buffer_[j], hexEscapeCode.asCharString(), 4);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681a      	ldr	r2, [r3, #0]
 800f498:	69fb      	ldr	r3, [r7, #28]
 800f49a:	18d4      	adds	r4, r2, r3
 800f49c:	f107 0308 	add.w	r3, r7, #8
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	f000 f88d 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	2204      	movs	r2, #4
 800f4aa:	4619      	mov	r1, r3
 800f4ac:	4620      	mov	r0, r4
 800f4ae:	f7ff fba6 	bl	800ebfe <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 4;
 800f4b2:	69fb      	ldr	r3, [r7, #28]
 800f4b4:	3304      	adds	r3, #4
 800f4b6:	61fb      	str	r3, [r7, #28]
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800f4b8:	f107 0308 	add.w	r3, r7, #8
 800f4bc:	4618      	mov	r0, r3
 800f4be:	f000 f8ac 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800f4c2:	e008      	b.n	800f4d6 <_ZNK12SimpleString9printableEv+0xda>
        }
        else
        {
            result.buffer_[j] = c;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681a      	ldr	r2, [r3, #0]
 800f4c8:	69fb      	ldr	r3, [r7, #28]
 800f4ca:	4413      	add	r3, r2
 800f4cc:	7cfa      	ldrb	r2, [r7, #19]
 800f4ce:	701a      	strb	r2, [r3, #0]
            j++;
 800f4d0:	69fb      	ldr	r3, [r7, #28]
 800f4d2:	3301      	adds	r3, #1
 800f4d4:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800f4d6:	69bb      	ldr	r3, [r7, #24]
 800f4d8:	3301      	adds	r3, #1
 800f4da:	61bb      	str	r3, [r7, #24]
 800f4dc:	e7a8      	b.n	800f430 <_ZNK12SimpleString9printableEv+0x34>
        }
    }
    result.buffer_[j] = 0;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	681a      	ldr	r2, [r3, #0]
 800f4e2:	69fb      	ldr	r3, [r7, #28]
 800f4e4:	4413      	add	r3, r2
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	701a      	strb	r2, [r3, #0]

    return result;
 800f4ea:	bf00      	nop
}
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	3724      	adds	r7, #36	; 0x24
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd90      	pop	{r4, r7, pc}
 800f4f4:	08027008 	.word	0x08027008
 800f4f8:	2000006c 	.word	0x2000006c
 800f4fc:	0802700c 	.word	0x0802700c

0800f500 <_ZNK12SimpleString16getPrintableSizeEv>:

size_t SimpleString::getPrintableSize() const
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b086      	sub	sp, #24
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
    size_t str_size = size();
 800f508:	6878      	ldr	r0, [r7, #4]
 800f50a:	f000 f865 	bl	800f5d8 <_ZNK12SimpleString4sizeEv>
 800f50e:	60f8      	str	r0, [r7, #12]
    size_t printable_str_size = str_size;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < str_size; i++)
 800f514:	2300      	movs	r3, #0
 800f516:	613b      	str	r3, [r7, #16]
 800f518:	693a      	ldr	r2, [r7, #16]
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	429a      	cmp	r2, r3
 800f51e:	d21e      	bcs.n	800f55e <_ZNK12SimpleString16getPrintableSizeEv+0x5e>
    {
        char c = buffer_[i];
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681a      	ldr	r2, [r3, #0]
 800f524:	693b      	ldr	r3, [r7, #16]
 800f526:	4413      	add	r3, r2
 800f528:	781b      	ldrb	r3, [r3, #0]
 800f52a:	72fb      	strb	r3, [r7, #11]
        if (isControlWithShortEscapeSequence(c))
 800f52c:	7afb      	ldrb	r3, [r7, #11]
 800f52e:	4618      	mov	r0, r3
 800f530:	f000 facf 	bl	800fad2 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800f534:	4603      	mov	r3, r0
 800f536:	2b00      	cmp	r3, #0
 800f538:	d003      	beq.n	800f542 <_ZNK12SimpleString16getPrintableSizeEv+0x42>
        {
            printable_str_size += 1;
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	3301      	adds	r3, #1
 800f53e:	617b      	str	r3, [r7, #20]
 800f540:	e009      	b.n	800f556 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        }
        else if (isControl(c))
 800f542:	7afb      	ldrb	r3, [r7, #11]
 800f544:	4618      	mov	r0, r3
 800f546:	f000 fab0 	bl	800faaa <_ZN12SimpleString9isControlEc>
 800f54a:	4603      	mov	r3, r0
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d002      	beq.n	800f556 <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        {
            printable_str_size += 3;
 800f550:	697b      	ldr	r3, [r7, #20]
 800f552:	3303      	adds	r3, #3
 800f554:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < str_size; i++)
 800f556:	693b      	ldr	r3, [r7, #16]
 800f558:	3301      	adds	r3, #1
 800f55a:	613b      	str	r3, [r7, #16]
 800f55c:	e7dc      	b.n	800f518 <_ZNK12SimpleString16getPrintableSizeEv+0x18>
        }
    }

    return printable_str_size;
 800f55e:	697b      	ldr	r3, [r7, #20]
}
 800f560:	4618      	mov	r0, r3
 800f562:	3718      	adds	r7, #24
 800f564:	46bd      	mov	sp, r7
 800f566:	bd80      	pop	{r7, pc}

0800f568 <_ZNK12SimpleString9lowerCaseEv>:

SimpleString SimpleString::lowerCase() const
{
 800f568:	b590      	push	{r4, r7, lr}
 800f56a:	b085      	sub	sp, #20
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
 800f570:	6039      	str	r1, [r7, #0]
    SimpleString str(*this);
 800f572:	6839      	ldr	r1, [r7, #0]
 800f574:	6878      	ldr	r0, [r7, #4]
 800f576:	f7ff fcec 	bl	800ef52 <_ZN12SimpleStringC1ERKS_>

    size_t str_size = str.size();
 800f57a:	6878      	ldr	r0, [r7, #4]
 800f57c:	f000 f82c 	bl	800f5d8 <_ZNK12SimpleString4sizeEv>
 800f580:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < str_size; i++)
 800f582:	2300      	movs	r3, #0
 800f584:	60fb      	str	r3, [r7, #12]
 800f586:	68fa      	ldr	r2, [r7, #12]
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	429a      	cmp	r2, r3
 800f58c:	d213      	bcs.n	800f5b6 <_ZNK12SimpleString9lowerCaseEv+0x4e>
        str.buffer_[i] = ToLower(str.getBuffer()[i]);
 800f58e:	6878      	ldr	r0, [r7, #4]
 800f590:	f7ff fc7f 	bl	800ee92 <_ZNK12SimpleString9getBufferEv>
 800f594:	4602      	mov	r2, r0
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	4413      	add	r3, r2
 800f59a:	7819      	ldrb	r1, [r3, #0]
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	681a      	ldr	r2, [r3, #0]
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	18d4      	adds	r4, r2, r3
 800f5a4:	4608      	mov	r0, r1
 800f5a6:	f7ff fb8a 	bl	800ecbe <_ZN12SimpleString7ToLowerEc>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < str_size; i++)
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	3301      	adds	r3, #1
 800f5b2:	60fb      	str	r3, [r7, #12]
 800f5b4:	e7e7      	b.n	800f586 <_ZNK12SimpleString9lowerCaseEv+0x1e>

    return str;
 800f5b6:	bf00      	nop
}
 800f5b8:	6878      	ldr	r0, [r7, #4]
 800f5ba:	3714      	adds	r7, #20
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bd90      	pop	{r4, r7, pc}

0800f5c0 <_ZNK12SimpleString12asCharStringEv>:

const char *SimpleString::asCharString() const
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b082      	sub	sp, #8
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
    return getBuffer();
 800f5c8:	6878      	ldr	r0, [r7, #4]
 800f5ca:	f7ff fc62 	bl	800ee92 <_ZNK12SimpleString9getBufferEv>
 800f5ce:	4603      	mov	r3, r0
}
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	3708      	adds	r7, #8
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}

0800f5d8 <_ZNK12SimpleString4sizeEv>:

size_t SimpleString::size() const
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b082      	sub	sp, #8
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
    return StrLen(getBuffer());
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	f7ff fc56 	bl	800ee92 <_ZNK12SimpleString9getBufferEv>
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	f7ff fabd 	bl	800eb68 <_ZN12SimpleString6StrLenEPKc>
 800f5ee:	4603      	mov	r3, r0
}
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	3708      	adds	r7, #8
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	bd80      	pop	{r7, pc}

0800f5f8 <_ZNK12SimpleString7isEmptyEv>:

bool SimpleString::isEmpty() const
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b082      	sub	sp, #8
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
    return size() == 0;
 800f600:	6878      	ldr	r0, [r7, #4]
 800f602:	f7ff ffe9 	bl	800f5d8 <_ZNK12SimpleString4sizeEv>
 800f606:	4603      	mov	r3, r0
 800f608:	2b00      	cmp	r3, #0
 800f60a:	bf0c      	ite	eq
 800f60c:	2301      	moveq	r3, #1
 800f60e:	2300      	movne	r3, #0
 800f610:	b2db      	uxtb	r3, r3
}
 800f612:	4618      	mov	r0, r3
 800f614:	3708      	adds	r7, #8
 800f616:	46bd      	mov	sp, r7
 800f618:	bd80      	pop	{r7, pc}

0800f61a <_ZN12SimpleStringD1Ev>:

SimpleString::~SimpleString()
 800f61a:	b580      	push	{r7, lr}
 800f61c:	b082      	sub	sp, #8
 800f61e:	af00      	add	r7, sp, #0
 800f620:	6078      	str	r0, [r7, #4]
{
    deallocateInternalBuffer();
 800f622:	6878      	ldr	r0, [r7, #4]
 800f624:	f7ff fb90 	bl	800ed48 <_ZN12SimpleString24deallocateInternalBufferEv>
}
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	4618      	mov	r0, r3
 800f62c:	3708      	adds	r7, #8
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}

0800f632 <_ZeqRK12SimpleStringS1_>:

bool operator==(const SimpleString& left, const SimpleString& right)
{
 800f632:	b590      	push	{r4, r7, lr}
 800f634:	b083      	sub	sp, #12
 800f636:	af00      	add	r7, sp, #0
 800f638:	6078      	str	r0, [r7, #4]
 800f63a:	6039      	str	r1, [r7, #0]
    return 0 == SimpleString::StrCmp(left.asCharString(), right.asCharString());
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f7ff ffbf 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 800f642:	4604      	mov	r4, r0
 800f644:	6838      	ldr	r0, [r7, #0]
 800f646:	f7ff ffbb 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 800f64a:	4603      	mov	r3, r0
 800f64c:	4619      	mov	r1, r3
 800f64e:	4620      	mov	r0, r4
 800f650:	f7ff fa68 	bl	800eb24 <_ZN12SimpleString6StrCmpEPKcS1_>
 800f654:	4603      	mov	r3, r0
 800f656:	2b00      	cmp	r3, #0
 800f658:	bf0c      	ite	eq
 800f65a:	2301      	moveq	r3, #1
 800f65c:	2300      	movne	r3, #0
 800f65e:	b2db      	uxtb	r3, r3
}
 800f660:	4618      	mov	r0, r3
 800f662:	370c      	adds	r7, #12
 800f664:	46bd      	mov	sp, r7
 800f666:	bd90      	pop	{r4, r7, pc}

0800f668 <_ZNK12SimpleString12equalsNoCaseERKS_>:

bool SimpleString::equalsNoCase(const SimpleString& str) const
{
 800f668:	b590      	push	{r4, r7, lr}
 800f66a:	b087      	sub	sp, #28
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
 800f670:	6039      	str	r1, [r7, #0]
    return lowerCase() == str.lowerCase();
 800f672:	f107 0308 	add.w	r3, r7, #8
 800f676:	6879      	ldr	r1, [r7, #4]
 800f678:	4618      	mov	r0, r3
 800f67a:	f7ff ff75 	bl	800f568 <_ZNK12SimpleString9lowerCaseEv>
 800f67e:	f107 0310 	add.w	r3, r7, #16
 800f682:	6839      	ldr	r1, [r7, #0]
 800f684:	4618      	mov	r0, r3
 800f686:	f7ff ff6f 	bl	800f568 <_ZNK12SimpleString9lowerCaseEv>
 800f68a:	f107 0210 	add.w	r2, r7, #16
 800f68e:	f107 0308 	add.w	r3, r7, #8
 800f692:	4611      	mov	r1, r2
 800f694:	4618      	mov	r0, r3
 800f696:	f7ff ffcc 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 800f69a:	4603      	mov	r3, r0
 800f69c:	461c      	mov	r4, r3
 800f69e:	f107 0310 	add.w	r3, r7, #16
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f7ff ffb9 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800f6a8:	f107 0308 	add.w	r3, r7, #8
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f7ff ffb4 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800f6b2:	4623      	mov	r3, r4
}
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	371c      	adds	r7, #28
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd90      	pop	{r4, r7, pc}

0800f6bc <_ZneRK12SimpleStringS1_>:


bool operator!=(const SimpleString& left, const SimpleString& right)
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b082      	sub	sp, #8
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
 800f6c4:	6039      	str	r1, [r7, #0]
    return !(left == right);
 800f6c6:	6839      	ldr	r1, [r7, #0]
 800f6c8:	6878      	ldr	r0, [r7, #4]
 800f6ca:	f7ff ffb2 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	f083 0301 	eor.w	r3, r3, #1
 800f6d4:	b2db      	uxtb	r3, r3
}
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	3708      	adds	r7, #8
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	bd80      	pop	{r7, pc}

0800f6de <_ZNK12SimpleStringplERKS_>:

SimpleString SimpleString::operator+(const SimpleString& rhs) const
{
 800f6de:	b580      	push	{r7, lr}
 800f6e0:	b084      	sub	sp, #16
 800f6e2:	af00      	add	r7, sp, #0
 800f6e4:	60f8      	str	r0, [r7, #12]
 800f6e6:	60b9      	str	r1, [r7, #8]
 800f6e8:	607a      	str	r2, [r7, #4]
    SimpleString t(getBuffer());
 800f6ea:	68b8      	ldr	r0, [r7, #8]
 800f6ec:	f7ff fbd1 	bl	800ee92 <_ZNK12SimpleString9getBufferEv>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	4619      	mov	r1, r3
 800f6f4:	68f8      	ldr	r0, [r7, #12]
 800f6f6:	f7ff fbd8 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
    t += rhs.getBuffer();
 800f6fa:	6878      	ldr	r0, [r7, #4]
 800f6fc:	f7ff fbc9 	bl	800ee92 <_ZNK12SimpleString9getBufferEv>
 800f700:	4603      	mov	r3, r0
 800f702:	4619      	mov	r1, r3
 800f704:	68f8      	ldr	r0, [r7, #12]
 800f706:	f000 f817 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    return t;
 800f70a:	bf00      	nop
}
 800f70c:	68f8      	ldr	r0, [r7, #12]
 800f70e:	3710      	adds	r7, #16
 800f710:	46bd      	mov	sp, r7
 800f712:	bd80      	pop	{r7, pc}

0800f714 <_ZN12SimpleStringpLERKS_>:

SimpleString& SimpleString::operator+=(const SimpleString& rhs)
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b082      	sub	sp, #8
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
 800f71c:	6039      	str	r1, [r7, #0]
    return operator+=(rhs.getBuffer());
 800f71e:	6838      	ldr	r0, [r7, #0]
 800f720:	f7ff fbb7 	bl	800ee92 <_ZNK12SimpleString9getBufferEv>
 800f724:	4603      	mov	r3, r0
 800f726:	4619      	mov	r1, r3
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	f000 f805 	bl	800f738 <_ZN12SimpleStringpLEPKc>
 800f72e:	4603      	mov	r3, r0
}
 800f730:	4618      	mov	r0, r3
 800f732:	3708      	adds	r7, #8
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}

0800f738 <_ZN12SimpleStringpLEPKc>:

SimpleString& SimpleString::operator+=(const char* rhs)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b086      	sub	sp, #24
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
 800f740:	6039      	str	r1, [r7, #0]
    size_t originalSize = this->size();
 800f742:	6878      	ldr	r0, [r7, #4]
 800f744:	f7ff ff48 	bl	800f5d8 <_ZNK12SimpleString4sizeEv>
 800f748:	6178      	str	r0, [r7, #20]
    size_t additionalStringSize = StrLen(rhs) + 1;
 800f74a:	6838      	ldr	r0, [r7, #0]
 800f74c:	f7ff fa0c 	bl	800eb68 <_ZN12SimpleString6StrLenEPKc>
 800f750:	4603      	mov	r3, r0
 800f752:	3301      	adds	r3, #1
 800f754:	613b      	str	r3, [r7, #16]
    size_t sizeOfNewString = originalSize + additionalStringSize;
 800f756:	697a      	ldr	r2, [r7, #20]
 800f758:	693b      	ldr	r3, [r7, #16]
 800f75a:	4413      	add	r3, r2
 800f75c:	60fb      	str	r3, [r7, #12]
    char* tbuffer = copyToNewBuffer(this->getBuffer(), sizeOfNewString);
 800f75e:	6878      	ldr	r0, [r7, #4]
 800f760:	f7ff fb97 	bl	800ee92 <_ZNK12SimpleString9getBufferEv>
 800f764:	4603      	mov	r3, r0
 800f766:	68f9      	ldr	r1, [r7, #12]
 800f768:	4618      	mov	r0, r3
 800f76a:	f000 f941 	bl	800f9f0 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800f76e:	60b8      	str	r0, [r7, #8]
    StrNCpy(tbuffer + originalSize, rhs, additionalStringSize);
 800f770:	68ba      	ldr	r2, [r7, #8]
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	4413      	add	r3, r2
 800f776:	693a      	ldr	r2, [r7, #16]
 800f778:	6839      	ldr	r1, [r7, #0]
 800f77a:	4618      	mov	r0, r3
 800f77c:	f7ff fa3f 	bl	800ebfe <_ZN12SimpleString7StrNCpyEPcPKcj>

    setInternalBufferTo(tbuffer, sizeOfNewString);
 800f780:	68fa      	ldr	r2, [r7, #12]
 800f782:	68b9      	ldr	r1, [r7, #8]
 800f784:	6878      	ldr	r0, [r7, #4]
 800f786:	f7ff fb49 	bl	800ee1c <_ZN12SimpleString19setInternalBufferToEPcj>
    return *this;
 800f78a:	687b      	ldr	r3, [r7, #4]
}
 800f78c:	4618      	mov	r0, r3
 800f78e:	3718      	adds	r7, #24
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}

0800f794 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>:

void SimpleString::padStringsToSameLength(SimpleString& str1, SimpleString& str2, char padCharacter)
{
 800f794:	b590      	push	{r4, r7, lr}
 800f796:	b08b      	sub	sp, #44	; 0x2c
 800f798:	af00      	add	r7, sp, #0
 800f79a:	60f8      	str	r0, [r7, #12]
 800f79c:	60b9      	str	r1, [r7, #8]
 800f79e:	4613      	mov	r3, r2
 800f7a0:	71fb      	strb	r3, [r7, #7]
    if (str1.size() > str2.size()) {
 800f7a2:	68f8      	ldr	r0, [r7, #12]
 800f7a4:	f7ff ff18 	bl	800f5d8 <_ZNK12SimpleString4sizeEv>
 800f7a8:	4604      	mov	r4, r0
 800f7aa:	68b8      	ldr	r0, [r7, #8]
 800f7ac:	f7ff ff14 	bl	800f5d8 <_ZNK12SimpleString4sizeEv>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	429c      	cmp	r4, r3
 800f7b4:	bf8c      	ite	hi
 800f7b6:	2301      	movhi	r3, #1
 800f7b8:	2300      	movls	r3, #0
 800f7ba:	b2db      	uxtb	r3, r3
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d006      	beq.n	800f7ce <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x3a>
        padStringsToSameLength(str2, str1, padCharacter);
 800f7c0:	79fb      	ldrb	r3, [r7, #7]
 800f7c2:	461a      	mov	r2, r3
 800f7c4:	68f9      	ldr	r1, [r7, #12]
 800f7c6:	68b8      	ldr	r0, [r7, #8]
 800f7c8:	f7ff ffe4 	bl	800f794 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>
 800f7cc:	e02b      	b.n	800f826 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x92>
        return;
    }

    char pad[2];
    pad[0] = padCharacter;
 800f7ce:	79fb      	ldrb	r3, [r7, #7]
 800f7d0:	753b      	strb	r3, [r7, #20]
    pad[1] = 0;
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	757b      	strb	r3, [r7, #21]
    str1 = SimpleString(pad, str2.size() - str1.size()) + str1;
 800f7d6:	68b8      	ldr	r0, [r7, #8]
 800f7d8:	f7ff fefe 	bl	800f5d8 <_ZNK12SimpleString4sizeEv>
 800f7dc:	4604      	mov	r4, r0
 800f7de:	68f8      	ldr	r0, [r7, #12]
 800f7e0:	f7ff fefa 	bl	800f5d8 <_ZNK12SimpleString4sizeEv>
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	1ae2      	subs	r2, r4, r3
 800f7e8:	f107 0114 	add.w	r1, r7, #20
 800f7ec:	f107 0320 	add.w	r3, r7, #32
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f7ff fb75 	bl	800eee0 <_ZN12SimpleStringC1EPKcj>
 800f7f6:	f107 0318 	add.w	r3, r7, #24
 800f7fa:	f107 0120 	add.w	r1, r7, #32
 800f7fe:	68fa      	ldr	r2, [r7, #12]
 800f800:	4618      	mov	r0, r3
 800f802:	f7ff ff6c 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 800f806:	f107 0318 	add.w	r3, r7, #24
 800f80a:	4619      	mov	r1, r3
 800f80c:	68f8      	ldr	r0, [r7, #12]
 800f80e:	f7ff fbb8 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 800f812:	f107 0318 	add.w	r3, r7, #24
 800f816:	4618      	mov	r0, r3
 800f818:	f7ff feff 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800f81c:	f107 0320 	add.w	r3, r7, #32
 800f820:	4618      	mov	r0, r3
 800f822:	f7ff fefa 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 800f826:	372c      	adds	r7, #44	; 0x2c
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd90      	pop	{r4, r7, pc}

0800f82c <_ZNK12SimpleString9subStringEjj>:

SimpleString SimpleString::subString(size_t beginPos, size_t amount) const
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b086      	sub	sp, #24
 800f830:	af00      	add	r7, sp, #0
 800f832:	60f8      	str	r0, [r7, #12]
 800f834:	60b9      	str	r1, [r7, #8]
 800f836:	607a      	str	r2, [r7, #4]
 800f838:	603b      	str	r3, [r7, #0]
    if (beginPos > size()-1) return "";
 800f83a:	68b8      	ldr	r0, [r7, #8]
 800f83c:	f7ff fecc 	bl	800f5d8 <_ZNK12SimpleString4sizeEv>
 800f840:	4603      	mov	r3, r0
 800f842:	3b01      	subs	r3, #1
 800f844:	687a      	ldr	r2, [r7, #4]
 800f846:	429a      	cmp	r2, r3
 800f848:	bf8c      	ite	hi
 800f84a:	2301      	movhi	r3, #1
 800f84c:	2300      	movls	r3, #0
 800f84e:	b2db      	uxtb	r3, r3
 800f850:	2b00      	cmp	r3, #0
 800f852:	d004      	beq.n	800f85e <_ZNK12SimpleString9subStringEjj+0x32>
 800f854:	4919      	ldr	r1, [pc, #100]	; (800f8bc <_ZNK12SimpleString9subStringEjj+0x90>)
 800f856:	68f8      	ldr	r0, [r7, #12]
 800f858:	f7ff fb27 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800f85c:	e029      	b.n	800f8b2 <_ZNK12SimpleString9subStringEjj+0x86>

    SimpleString newString = getBuffer() + beginPos;
 800f85e:	68b8      	ldr	r0, [r7, #8]
 800f860:	f7ff fb17 	bl	800ee92 <_ZNK12SimpleString9getBufferEv>
 800f864:	4602      	mov	r2, r0
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	441a      	add	r2, r3
 800f86a:	f107 0310 	add.w	r3, r7, #16
 800f86e:	4611      	mov	r1, r2
 800f870:	4618      	mov	r0, r3
 800f872:	f7ff fb1a 	bl	800eeaa <_ZN12SimpleStringC1EPKc>

    if (newString.size() > amount)
 800f876:	f107 0310 	add.w	r3, r7, #16
 800f87a:	4618      	mov	r0, r3
 800f87c:	f7ff feac 	bl	800f5d8 <_ZNK12SimpleString4sizeEv>
 800f880:	4602      	mov	r2, r0
 800f882:	683b      	ldr	r3, [r7, #0]
 800f884:	4293      	cmp	r3, r2
 800f886:	bf34      	ite	cc
 800f888:	2301      	movcc	r3, #1
 800f88a:	2300      	movcs	r3, #0
 800f88c:	b2db      	uxtb	r3, r3
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d004      	beq.n	800f89c <_ZNK12SimpleString9subStringEjj+0x70>
        newString.buffer_[amount] = '\0';
 800f892:	693a      	ldr	r2, [r7, #16]
 800f894:	683b      	ldr	r3, [r7, #0]
 800f896:	4413      	add	r3, r2
 800f898:	2200      	movs	r2, #0
 800f89a:	701a      	strb	r2, [r3, #0]

    return newString;
 800f89c:	f107 0310 	add.w	r3, r7, #16
 800f8a0:	4619      	mov	r1, r3
 800f8a2:	68f8      	ldr	r0, [r7, #12]
 800f8a4:	f7ff fb55 	bl	800ef52 <_ZN12SimpleStringC1ERKS_>
    SimpleString newString = getBuffer() + beginPos;
 800f8a8:	f107 0310 	add.w	r3, r7, #16
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f7ff feb4 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 800f8b2:	68f8      	ldr	r0, [r7, #12]
 800f8b4:	3718      	adds	r7, #24
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	bd80      	pop	{r7, pc}
 800f8ba:	bf00      	nop
 800f8bc:	08027008 	.word	0x08027008

0800f8c0 <_ZNK12SimpleString9subStringEj>:

SimpleString SimpleString::subString(size_t beginPos) const
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b084      	sub	sp, #16
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	60f8      	str	r0, [r7, #12]
 800f8c8:	60b9      	str	r1, [r7, #8]
 800f8ca:	607a      	str	r2, [r7, #4]
    return subString(beginPos, npos);
 800f8cc:	68f8      	ldr	r0, [r7, #12]
 800f8ce:	f04f 33ff 	mov.w	r3, #4294967295
 800f8d2:	687a      	ldr	r2, [r7, #4]
 800f8d4:	68b9      	ldr	r1, [r7, #8]
 800f8d6:	f7ff ffa9 	bl	800f82c <_ZNK12SimpleString9subStringEjj>
}
 800f8da:	68f8      	ldr	r0, [r7, #12]
 800f8dc:	3710      	adds	r7, #16
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	bd80      	pop	{r7, pc}

0800f8e2 <_ZNK12SimpleString2atEj>:

char SimpleString::at(size_t pos) const
{
 800f8e2:	b580      	push	{r7, lr}
 800f8e4:	b082      	sub	sp, #8
 800f8e6:	af00      	add	r7, sp, #0
 800f8e8:	6078      	str	r0, [r7, #4]
 800f8ea:	6039      	str	r1, [r7, #0]
    return getBuffer()[pos];
 800f8ec:	6878      	ldr	r0, [r7, #4]
 800f8ee:	f7ff fad0 	bl	800ee92 <_ZNK12SimpleString9getBufferEv>
 800f8f2:	4602      	mov	r2, r0
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	4413      	add	r3, r2
 800f8f8:	781b      	ldrb	r3, [r3, #0]
}
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	3708      	adds	r7, #8
 800f8fe:	46bd      	mov	sp, r7
 800f900:	bd80      	pop	{r7, pc}

0800f902 <_ZNK12SimpleString4findEc>:

size_t SimpleString::find(char ch) const
{
 800f902:	b580      	push	{r7, lr}
 800f904:	b082      	sub	sp, #8
 800f906:	af00      	add	r7, sp, #0
 800f908:	6078      	str	r0, [r7, #4]
 800f90a:	460b      	mov	r3, r1
 800f90c:	70fb      	strb	r3, [r7, #3]
    return findFrom(0, ch);
 800f90e:	78fb      	ldrb	r3, [r7, #3]
 800f910:	461a      	mov	r2, r3
 800f912:	2100      	movs	r1, #0
 800f914:	6878      	ldr	r0, [r7, #4]
 800f916:	f000 f805 	bl	800f924 <_ZNK12SimpleString8findFromEjc>
 800f91a:	4603      	mov	r3, r0
}
 800f91c:	4618      	mov	r0, r3
 800f91e:	3708      	adds	r7, #8
 800f920:	46bd      	mov	sp, r7
 800f922:	bd80      	pop	{r7, pc}

0800f924 <_ZNK12SimpleString8findFromEjc>:

size_t SimpleString::findFrom(size_t starting_position, char ch) const
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b086      	sub	sp, #24
 800f928:	af00      	add	r7, sp, #0
 800f92a:	60f8      	str	r0, [r7, #12]
 800f92c:	60b9      	str	r1, [r7, #8]
 800f92e:	4613      	mov	r3, r2
 800f930:	71fb      	strb	r3, [r7, #7]
    size_t length = size();
 800f932:	68f8      	ldr	r0, [r7, #12]
 800f934:	f7ff fe50 	bl	800f5d8 <_ZNK12SimpleString4sizeEv>
 800f938:	6138      	str	r0, [r7, #16]
    for (size_t i = starting_position; i < length; i++)
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	617b      	str	r3, [r7, #20]
 800f93e:	697a      	ldr	r2, [r7, #20]
 800f940:	693b      	ldr	r3, [r7, #16]
 800f942:	429a      	cmp	r2, r3
 800f944:	d213      	bcs.n	800f96e <_ZNK12SimpleString8findFromEjc+0x4a>
        if (at(i) == ch) return i;
 800f946:	6979      	ldr	r1, [r7, #20]
 800f948:	68f8      	ldr	r0, [r7, #12]
 800f94a:	f7ff ffca 	bl	800f8e2 <_ZNK12SimpleString2atEj>
 800f94e:	4603      	mov	r3, r0
 800f950:	461a      	mov	r2, r3
 800f952:	79fb      	ldrb	r3, [r7, #7]
 800f954:	4293      	cmp	r3, r2
 800f956:	bf0c      	ite	eq
 800f958:	2301      	moveq	r3, #1
 800f95a:	2300      	movne	r3, #0
 800f95c:	b2db      	uxtb	r3, r3
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d001      	beq.n	800f966 <_ZNK12SimpleString8findFromEjc+0x42>
 800f962:	697b      	ldr	r3, [r7, #20]
 800f964:	e005      	b.n	800f972 <_ZNK12SimpleString8findFromEjc+0x4e>
    for (size_t i = starting_position; i < length; i++)
 800f966:	697b      	ldr	r3, [r7, #20]
 800f968:	3301      	adds	r3, #1
 800f96a:	617b      	str	r3, [r7, #20]
 800f96c:	e7e7      	b.n	800f93e <_ZNK12SimpleString8findFromEjc+0x1a>
    return npos;
 800f96e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f972:	4618      	mov	r0, r3
 800f974:	3718      	adds	r7, #24
 800f976:	46bd      	mov	sp, r7
 800f978:	bd80      	pop	{r7, pc}
	...

0800f97c <_ZNK12SimpleString17subStringFromTillEcc>:

SimpleString SimpleString::subStringFromTill(char startChar, char lastExcludedChar) const
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b086      	sub	sp, #24
 800f980:	af00      	add	r7, sp, #0
 800f982:	60f8      	str	r0, [r7, #12]
 800f984:	60b9      	str	r1, [r7, #8]
 800f986:	4611      	mov	r1, r2
 800f988:	461a      	mov	r2, r3
 800f98a:	460b      	mov	r3, r1
 800f98c:	71fb      	strb	r3, [r7, #7]
 800f98e:	4613      	mov	r3, r2
 800f990:	71bb      	strb	r3, [r7, #6]
    size_t beginPos = find(startChar);
 800f992:	79fb      	ldrb	r3, [r7, #7]
 800f994:	4619      	mov	r1, r3
 800f996:	68b8      	ldr	r0, [r7, #8]
 800f998:	f7ff ffb3 	bl	800f902 <_ZNK12SimpleString4findEc>
 800f99c:	6178      	str	r0, [r7, #20]
    if (beginPos == npos) return "";
 800f99e:	697b      	ldr	r3, [r7, #20]
 800f9a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9a4:	d104      	bne.n	800f9b0 <_ZNK12SimpleString17subStringFromTillEcc+0x34>
 800f9a6:	4911      	ldr	r1, [pc, #68]	; (800f9ec <_ZNK12SimpleString17subStringFromTillEcc+0x70>)
 800f9a8:	68f8      	ldr	r0, [r7, #12]
 800f9aa:	f7ff fa7e 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800f9ae:	e019      	b.n	800f9e4 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    size_t endPos = findFrom(beginPos, lastExcludedChar);
 800f9b0:	79bb      	ldrb	r3, [r7, #6]
 800f9b2:	461a      	mov	r2, r3
 800f9b4:	6979      	ldr	r1, [r7, #20]
 800f9b6:	68b8      	ldr	r0, [r7, #8]
 800f9b8:	f7ff ffb4 	bl	800f924 <_ZNK12SimpleString8findFromEjc>
 800f9bc:	6138      	str	r0, [r7, #16]
    if (endPos == npos) return subString(beginPos);
 800f9be:	693b      	ldr	r3, [r7, #16]
 800f9c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9c4:	d106      	bne.n	800f9d4 <_ZNK12SimpleString17subStringFromTillEcc+0x58>
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	697a      	ldr	r2, [r7, #20]
 800f9ca:	68b9      	ldr	r1, [r7, #8]
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	f7ff ff77 	bl	800f8c0 <_ZNK12SimpleString9subStringEj>
 800f9d2:	e007      	b.n	800f9e4 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    return subString(beginPos, endPos - beginPos);
 800f9d4:	693a      	ldr	r2, [r7, #16]
 800f9d6:	697b      	ldr	r3, [r7, #20]
 800f9d8:	1ad3      	subs	r3, r2, r3
 800f9da:	68f8      	ldr	r0, [r7, #12]
 800f9dc:	697a      	ldr	r2, [r7, #20]
 800f9de:	68b9      	ldr	r1, [r7, #8]
 800f9e0:	f7ff ff24 	bl	800f82c <_ZNK12SimpleString9subStringEjj>
}
 800f9e4:	68f8      	ldr	r0, [r7, #12]
 800f9e6:	3718      	adds	r7, #24
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	bd80      	pop	{r7, pc}
 800f9ec:	08027008 	.word	0x08027008

0800f9f0 <_ZN12SimpleString15copyToNewBufferEPKcj>:

char* SimpleString::copyToNewBuffer(const char* bufferToCopy, size_t bufferSize)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b084      	sub	sp, #16
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
 800f9f8:	6039      	str	r1, [r7, #0]
    char* newBuffer = allocStringBuffer(bufferSize, __FILE__, __LINE__);
 800f9fa:	f240 2275 	movw	r2, #629	; 0x275
 800f9fe:	490a      	ldr	r1, [pc, #40]	; (800fa28 <_ZN12SimpleString15copyToNewBufferEPKcj+0x38>)
 800fa00:	6838      	ldr	r0, [r7, #0]
 800fa02:	f7fe ffd7 	bl	800e9b4 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800fa06:	60f8      	str	r0, [r7, #12]
    StrNCpy(newBuffer, bufferToCopy, bufferSize);
 800fa08:	683a      	ldr	r2, [r7, #0]
 800fa0a:	6879      	ldr	r1, [r7, #4]
 800fa0c:	68f8      	ldr	r0, [r7, #12]
 800fa0e:	f7ff f8f6 	bl	800ebfe <_ZN12SimpleString7StrNCpyEPcPKcj>
    newBuffer[bufferSize-1] = '\0';
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	3b01      	subs	r3, #1
 800fa16:	68fa      	ldr	r2, [r7, #12]
 800fa18:	4413      	add	r3, r2
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	701a      	strb	r2, [r3, #0]
    return newBuffer;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
}
 800fa20:	4618      	mov	r0, r3
 800fa22:	3710      	adds	r7, #16
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bd80      	pop	{r7, pc}
 800fa28:	08026f48 	.word	0x08026f48

0800fa2c <_ZN12SimpleString7isDigitEc>:
    StrNCpy(bufferToCopy, getBuffer(), sizeToCopy);
    bufferToCopy[sizeToCopy] = '\0';
}

bool SimpleString::isDigit(char ch)
{
 800fa2c:	b480      	push	{r7}
 800fa2e:	b083      	sub	sp, #12
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	4603      	mov	r3, r0
 800fa34:	71fb      	strb	r3, [r7, #7]
    return '0' <= ch && '9' >= ch;
 800fa36:	79fb      	ldrb	r3, [r7, #7]
 800fa38:	2b2f      	cmp	r3, #47	; 0x2f
 800fa3a:	d904      	bls.n	800fa46 <_ZN12SimpleString7isDigitEc+0x1a>
 800fa3c:	79fb      	ldrb	r3, [r7, #7]
 800fa3e:	2b39      	cmp	r3, #57	; 0x39
 800fa40:	d801      	bhi.n	800fa46 <_ZN12SimpleString7isDigitEc+0x1a>
 800fa42:	2301      	movs	r3, #1
 800fa44:	e000      	b.n	800fa48 <_ZN12SimpleString7isDigitEc+0x1c>
 800fa46:	2300      	movs	r3, #0
}
 800fa48:	4618      	mov	r0, r3
 800fa4a:	370c      	adds	r7, #12
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa52:	4770      	bx	lr

0800fa54 <_ZN12SimpleString7isSpaceEc>:

bool SimpleString::isSpace(char ch)
{
 800fa54:	b480      	push	{r7}
 800fa56:	b083      	sub	sp, #12
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	71fb      	strb	r3, [r7, #7]
    return (ch == ' ') || (0x08 < ch && 0x0E > ch);
 800fa5e:	79fb      	ldrb	r3, [r7, #7]
 800fa60:	2b20      	cmp	r3, #32
 800fa62:	d005      	beq.n	800fa70 <_ZN12SimpleString7isSpaceEc+0x1c>
 800fa64:	79fb      	ldrb	r3, [r7, #7]
 800fa66:	2b08      	cmp	r3, #8
 800fa68:	d904      	bls.n	800fa74 <_ZN12SimpleString7isSpaceEc+0x20>
 800fa6a:	79fb      	ldrb	r3, [r7, #7]
 800fa6c:	2b0d      	cmp	r3, #13
 800fa6e:	d801      	bhi.n	800fa74 <_ZN12SimpleString7isSpaceEc+0x20>
 800fa70:	2301      	movs	r3, #1
 800fa72:	e000      	b.n	800fa76 <_ZN12SimpleString7isSpaceEc+0x22>
 800fa74:	2300      	movs	r3, #0
}
 800fa76:	4618      	mov	r0, r3
 800fa78:	370c      	adds	r7, #12
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa80:	4770      	bx	lr

0800fa82 <_ZN12SimpleString7isUpperEc>:

bool SimpleString::isUpper(char ch)
{
 800fa82:	b480      	push	{r7}
 800fa84:	b083      	sub	sp, #12
 800fa86:	af00      	add	r7, sp, #0
 800fa88:	4603      	mov	r3, r0
 800fa8a:	71fb      	strb	r3, [r7, #7]
    return 'A' <= ch && 'Z' >= ch;
 800fa8c:	79fb      	ldrb	r3, [r7, #7]
 800fa8e:	2b40      	cmp	r3, #64	; 0x40
 800fa90:	d904      	bls.n	800fa9c <_ZN12SimpleString7isUpperEc+0x1a>
 800fa92:	79fb      	ldrb	r3, [r7, #7]
 800fa94:	2b5a      	cmp	r3, #90	; 0x5a
 800fa96:	d801      	bhi.n	800fa9c <_ZN12SimpleString7isUpperEc+0x1a>
 800fa98:	2301      	movs	r3, #1
 800fa9a:	e000      	b.n	800fa9e <_ZN12SimpleString7isUpperEc+0x1c>
 800fa9c:	2300      	movs	r3, #0
}
 800fa9e:	4618      	mov	r0, r3
 800faa0:	370c      	adds	r7, #12
 800faa2:	46bd      	mov	sp, r7
 800faa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa8:	4770      	bx	lr

0800faaa <_ZN12SimpleString9isControlEc>:

bool SimpleString::isControl(char ch)
{
 800faaa:	b480      	push	{r7}
 800faac:	b083      	sub	sp, #12
 800faae:	af00      	add	r7, sp, #0
 800fab0:	4603      	mov	r3, r0
 800fab2:	71fb      	strb	r3, [r7, #7]
    return ch < ' ' || ch == char(0x7F);
 800fab4:	79fb      	ldrb	r3, [r7, #7]
 800fab6:	2b1f      	cmp	r3, #31
 800fab8:	d902      	bls.n	800fac0 <_ZN12SimpleString9isControlEc+0x16>
 800faba:	79fb      	ldrb	r3, [r7, #7]
 800fabc:	2b7f      	cmp	r3, #127	; 0x7f
 800fabe:	d101      	bne.n	800fac4 <_ZN12SimpleString9isControlEc+0x1a>
 800fac0:	2301      	movs	r3, #1
 800fac2:	e000      	b.n	800fac6 <_ZN12SimpleString9isControlEc+0x1c>
 800fac4:	2300      	movs	r3, #0
}
 800fac6:	4618      	mov	r0, r3
 800fac8:	370c      	adds	r7, #12
 800faca:	46bd      	mov	sp, r7
 800facc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad0:	4770      	bx	lr

0800fad2 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>:

bool SimpleString::isControlWithShortEscapeSequence(char ch)
{
 800fad2:	b480      	push	{r7}
 800fad4:	b083      	sub	sp, #12
 800fad6:	af00      	add	r7, sp, #0
 800fad8:	4603      	mov	r3, r0
 800fada:	71fb      	strb	r3, [r7, #7]
    return '\a' <= ch && '\r' >= ch;
 800fadc:	79fb      	ldrb	r3, [r7, #7]
 800fade:	2b06      	cmp	r3, #6
 800fae0:	d904      	bls.n	800faec <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800fae2:	79fb      	ldrb	r3, [r7, #7]
 800fae4:	2b0d      	cmp	r3, #13
 800fae6:	d801      	bhi.n	800faec <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800fae8:	2301      	movs	r3, #1
 800faea:	e000      	b.n	800faee <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1c>
 800faec:	2300      	movs	r3, #0
}
 800faee:	4618      	mov	r0, r3
 800faf0:	370c      	adds	r7, #12
 800faf2:	46bd      	mov	sp, r7
 800faf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf8:	4770      	bx	lr
	...

0800fafc <_Z10StringFromb>:

SimpleString StringFrom(bool value)
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b082      	sub	sp, #8
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
 800fb04:	460b      	mov	r3, r1
 800fb06:	70fb      	strb	r3, [r7, #3]
    return SimpleString(StringFromFormat("%s", value ? "true" : "false"));
 800fb08:	78fb      	ldrb	r3, [r7, #3]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d001      	beq.n	800fb12 <_Z10StringFromb+0x16>
 800fb0e:	4a06      	ldr	r2, [pc, #24]	; (800fb28 <_Z10StringFromb+0x2c>)
 800fb10:	e000      	b.n	800fb14 <_Z10StringFromb+0x18>
 800fb12:	4a06      	ldr	r2, [pc, #24]	; (800fb2c <_Z10StringFromb+0x30>)
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	4906      	ldr	r1, [pc, #24]	; (800fb30 <_Z10StringFromb+0x34>)
 800fb18:	4618      	mov	r0, r3
 800fb1a:	f000 fa85 	bl	8010028 <_Z16StringFromFormatPKcz>
}
 800fb1e:	6878      	ldr	r0, [r7, #4]
 800fb20:	3708      	adds	r7, #8
 800fb22:	46bd      	mov	sp, r7
 800fb24:	bd80      	pop	{r7, pc}
 800fb26:	bf00      	nop
 800fb28:	08027014 	.word	0x08027014
 800fb2c:	0802701c 	.word	0x0802701c
 800fb30:	08027024 	.word	0x08027024

0800fb34 <_Z10StringFromPKc>:

SimpleString StringFrom(const char *value)
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b082      	sub	sp, #8
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
 800fb3c:	6039      	str	r1, [r7, #0]
    return SimpleString(value);
 800fb3e:	6839      	ldr	r1, [r7, #0]
 800fb40:	6878      	ldr	r0, [r7, #4]
 800fb42:	f7ff f9b2 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
}
 800fb46:	6878      	ldr	r0, [r7, #4]
 800fb48:	3708      	adds	r7, #8
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	bd80      	pop	{r7, pc}
	...

0800fb50 <_Z25PrintableStringFromOrNullPKc>:
{
    return (expected) ? StringFrom(expected) : StringFrom("(null)");
}

SimpleString PrintableStringFromOrNull(const char * expected)
{
 800fb50:	b590      	push	{r4, r7, lr}
 800fb52:	b085      	sub	sp, #20
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
 800fb58:	6039      	str	r1, [r7, #0]
    return (expected) ? StringFrom(expected).printable() : StringFrom("(null)");
 800fb5a:	2400      	movs	r4, #0
 800fb5c:	683b      	ldr	r3, [r7, #0]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d00e      	beq.n	800fb80 <_Z25PrintableStringFromOrNullPKc+0x30>
 800fb62:	f107 0308 	add.w	r3, r7, #8
 800fb66:	6839      	ldr	r1, [r7, #0]
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7ff ffe3 	bl	800fb34 <_Z10StringFromPKc>
 800fb6e:	2401      	movs	r4, #1
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f107 0208 	add.w	r2, r7, #8
 800fb76:	4611      	mov	r1, r2
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f7ff fc3f 	bl	800f3fc <_ZNK12SimpleString9printableEv>
 800fb7e:	e004      	b.n	800fb8a <_Z25PrintableStringFromOrNullPKc+0x3a>
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	4908      	ldr	r1, [pc, #32]	; (800fba4 <_Z25PrintableStringFromOrNullPKc+0x54>)
 800fb84:	4618      	mov	r0, r3
 800fb86:	f7ff ffd5 	bl	800fb34 <_Z10StringFromPKc>
 800fb8a:	2c00      	cmp	r4, #0
 800fb8c:	d004      	beq.n	800fb98 <_Z25PrintableStringFromOrNullPKc+0x48>
 800fb8e:	f107 0308 	add.w	r3, r7, #8
 800fb92:	4618      	mov	r0, r3
 800fb94:	f7ff fd41 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800fb98:	bf00      	nop
}
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	3714      	adds	r7, #20
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd90      	pop	{r4, r7, pc}
 800fba2:	bf00      	nop
 800fba4:	08027028 	.word	0x08027028

0800fba8 <_Z10StringFromi>:

SimpleString StringFrom(int value)
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b082      	sub	sp, #8
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
 800fbb0:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%d", value);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	683a      	ldr	r2, [r7, #0]
 800fbb6:	4904      	ldr	r1, [pc, #16]	; (800fbc8 <_Z10StringFromi+0x20>)
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f000 fa35 	bl	8010028 <_Z16StringFromFormatPKcz>
}
 800fbbe:	6878      	ldr	r0, [r7, #4]
 800fbc0:	3708      	adds	r7, #8
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	bd80      	pop	{r7, pc}
 800fbc6:	bf00      	nop
 800fbc8:	08027030 	.word	0x08027030

0800fbcc <_Z10StringFroml>:

SimpleString StringFrom(long value)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b082      	sub	sp, #8
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
 800fbd4:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%ld", value);
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	683a      	ldr	r2, [r7, #0]
 800fbda:	4904      	ldr	r1, [pc, #16]	; (800fbec <_Z10StringFroml+0x20>)
 800fbdc:	4618      	mov	r0, r3
 800fbde:	f000 fa23 	bl	8010028 <_Z16StringFromFormatPKcz>
}
 800fbe2:	6878      	ldr	r0, [r7, #4]
 800fbe4:	3708      	adds	r7, #8
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}
 800fbea:	bf00      	nop
 800fbec:	08027034 	.word	0x08027034

0800fbf0 <_Z10StringFromPKv>:

SimpleString StringFrom(const void* value)
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b086      	sub	sp, #24
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
 800fbf8:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800fbfa:	f107 0308 	add.w	r3, r7, #8
 800fbfe:	4910      	ldr	r1, [pc, #64]	; (800fc40 <_Z10StringFromPKv+0x50>)
 800fc00:	4618      	mov	r0, r3
 800fc02:	f7ff f952 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800fc06:	f107 0310 	add.w	r3, r7, #16
 800fc0a:	6839      	ldr	r1, [r7, #0]
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	f000 f9a1 	bl	800ff54 <_Z13HexStringFromPKv>
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	f107 0210 	add.w	r2, r7, #16
 800fc18:	f107 0108 	add.w	r1, r7, #8
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	f7ff fd5e 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 800fc22:	f107 0310 	add.w	r3, r7, #16
 800fc26:	4618      	mov	r0, r3
 800fc28:	f7ff fcf7 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800fc2c:	f107 0308 	add.w	r3, r7, #8
 800fc30:	4618      	mov	r0, r3
 800fc32:	f7ff fcf2 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800fc36:	bf00      	nop
}
 800fc38:	6878      	ldr	r0, [r7, #4]
 800fc3a:	3718      	adds	r7, #24
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd80      	pop	{r7, pc}
 800fc40:	08027038 	.word	0x08027038

0800fc44 <_Z10StringFromPFvvE>:

SimpleString StringFrom(void (*value)())
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b086      	sub	sp, #24
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
 800fc4c:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800fc4e:	f107 0308 	add.w	r3, r7, #8
 800fc52:	4910      	ldr	r1, [pc, #64]	; (800fc94 <_Z10StringFromPFvvE+0x50>)
 800fc54:	4618      	mov	r0, r3
 800fc56:	f7ff f928 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800fc5a:	f107 0310 	add.w	r3, r7, #16
 800fc5e:	6839      	ldr	r1, [r7, #0]
 800fc60:	4618      	mov	r0, r3
 800fc62:	f000 f98b 	bl	800ff7c <_Z13HexStringFromPFvvE>
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	f107 0210 	add.w	r2, r7, #16
 800fc6c:	f107 0108 	add.w	r1, r7, #8
 800fc70:	4618      	mov	r0, r3
 800fc72:	f7ff fd34 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 800fc76:	f107 0310 	add.w	r3, r7, #16
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	f7ff fccd 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800fc80:	f107 0308 	add.w	r3, r7, #8
 800fc84:	4618      	mov	r0, r3
 800fc86:	f7ff fcc8 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800fc8a:	bf00      	nop
}
 800fc8c:	6878      	ldr	r0, [r7, #4]
 800fc8e:	3718      	adds	r7, #24
 800fc90:	46bd      	mov	sp, r7
 800fc92:	bd80      	pop	{r7, pc}
 800fc94:	08027038 	.word	0x08027038

0800fc98 <_Z13HexStringFroml>:

SimpleString HexStringFrom(long value)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b082      	sub	sp, #8
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
 800fca0:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	683a      	ldr	r2, [r7, #0]
 800fca6:	4904      	ldr	r1, [pc, #16]	; (800fcb8 <_Z13HexStringFroml+0x20>)
 800fca8:	4618      	mov	r0, r3
 800fcaa:	f000 f9bd 	bl	8010028 <_Z16StringFromFormatPKcz>
}
 800fcae:	6878      	ldr	r0, [r7, #4]
 800fcb0:	3708      	adds	r7, #8
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bd80      	pop	{r7, pc}
 800fcb6:	bf00      	nop
 800fcb8:	0802703c 	.word	0x0802703c

0800fcbc <_Z13HexStringFromi>:

SimpleString HexStringFrom(int value)
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b082      	sub	sp, #8
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
 800fcc4:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	683a      	ldr	r2, [r7, #0]
 800fcca:	4904      	ldr	r1, [pc, #16]	; (800fcdc <_Z13HexStringFromi+0x20>)
 800fccc:	4618      	mov	r0, r3
 800fcce:	f000 f9ab 	bl	8010028 <_Z16StringFromFormatPKcz>
}
 800fcd2:	6878      	ldr	r0, [r7, #4]
 800fcd4:	3708      	adds	r7, #8
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bd80      	pop	{r7, pc}
 800fcda:	bf00      	nop
 800fcdc:	08027040 	.word	0x08027040

0800fce0 <_Z13HexStringFroma>:

SimpleString HexStringFrom(signed char value)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b086      	sub	sp, #24
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
 800fce8:	460b      	mov	r3, r1
 800fcea:	70fb      	strb	r3, [r7, #3]
    SimpleString result = StringFromFormat("%x", value);
 800fcec:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	4912      	ldr	r1, [pc, #72]	; (800fd3c <_Z13HexStringFroma+0x5c>)
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	f000 f997 	bl	8010028 <_Z16StringFromFormatPKcz>
    if(value < 0) {
 800fcfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	da16      	bge.n	800fd30 <_Z13HexStringFroma+0x50>
        size_t size = result.size();
 800fd02:	6878      	ldr	r0, [r7, #4]
 800fd04:	f7ff fc68 	bl	800f5d8 <_ZNK12SimpleString4sizeEv>
 800fd08:	6178      	str	r0, [r7, #20]
        result = result.subString(size-(CPPUTEST_CHAR_BIT/4));
 800fd0a:	697b      	ldr	r3, [r7, #20]
 800fd0c:	1e9a      	subs	r2, r3, #2
 800fd0e:	f107 030c 	add.w	r3, r7, #12
 800fd12:	6879      	ldr	r1, [r7, #4]
 800fd14:	4618      	mov	r0, r3
 800fd16:	f7ff fdd3 	bl	800f8c0 <_ZNK12SimpleString9subStringEj>
 800fd1a:	f107 030c 	add.w	r3, r7, #12
 800fd1e:	4619      	mov	r1, r3
 800fd20:	6878      	ldr	r0, [r7, #4]
 800fd22:	f7ff f92e 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 800fd26:	f107 030c 	add.w	r3, r7, #12
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	f7ff fc75 	bl	800f61a <_ZN12SimpleStringD1Ev>
    }
    return result;
 800fd30:	bf00      	nop
}
 800fd32:	6878      	ldr	r0, [r7, #4]
 800fd34:	3718      	adds	r7, #24
 800fd36:	46bd      	mov	sp, r7
 800fd38:	bd80      	pop	{r7, pc}
 800fd3a:	bf00      	nop
 800fd3c:	08027040 	.word	0x08027040

0800fd40 <_Z13HexStringFromm>:

SimpleString HexStringFrom(unsigned long value)
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b082      	sub	sp, #8
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
 800fd48:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	683a      	ldr	r2, [r7, #0]
 800fd4e:	4904      	ldr	r1, [pc, #16]	; (800fd60 <_Z13HexStringFromm+0x20>)
 800fd50:	4618      	mov	r0, r3
 800fd52:	f000 f969 	bl	8010028 <_Z16StringFromFormatPKcz>
}
 800fd56:	6878      	ldr	r0, [r7, #4]
 800fd58:	3708      	adds	r7, #8
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	bd80      	pop	{r7, pc}
 800fd5e:	bf00      	nop
 800fd60:	0802703c 	.word	0x0802703c

0800fd64 <_Z13HexStringFromj>:

SimpleString HexStringFrom(unsigned int value)
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b082      	sub	sp, #8
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
 800fd6c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	683a      	ldr	r2, [r7, #0]
 800fd72:	4904      	ldr	r1, [pc, #16]	; (800fd84 <_Z13HexStringFromj+0x20>)
 800fd74:	4618      	mov	r0, r3
 800fd76:	f000 f957 	bl	8010028 <_Z16StringFromFormatPKcz>
}
 800fd7a:	6878      	ldr	r0, [r7, #4]
 800fd7c:	3708      	adds	r7, #8
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}
 800fd82:	bf00      	nop
 800fd84:	08027040 	.word	0x08027040

0800fd88 <_Z30BracketsFormattedHexStringFromi>:

SimpleString BracketsFormattedHexStringFrom(int value)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b084      	sub	sp, #16
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
 800fd90:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800fd92:	f107 0308 	add.w	r3, r7, #8
 800fd96:	6839      	ldr	r1, [r7, #0]
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f7ff ff8f 	bl	800fcbc <_Z13HexStringFromi>
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	f107 0208 	add.w	r2, r7, #8
 800fda4:	4611      	mov	r1, r2
 800fda6:	4618      	mov	r0, r3
 800fda8:	f000 f87e 	bl	800fea8 <_Z26BracketsFormattedHexString12SimpleString>
 800fdac:	f107 0308 	add.w	r3, r7, #8
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f7ff fc32 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800fdb6:	bf00      	nop
}
 800fdb8:	6878      	ldr	r0, [r7, #4]
 800fdba:	3710      	adds	r7, #16
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}

0800fdc0 <_Z30BracketsFormattedHexStringFromj>:

SimpleString BracketsFormattedHexStringFrom(unsigned int value)
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b084      	sub	sp, #16
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
 800fdc8:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800fdca:	f107 0308 	add.w	r3, r7, #8
 800fdce:	6839      	ldr	r1, [r7, #0]
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	f7ff ffc7 	bl	800fd64 <_Z13HexStringFromj>
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	f107 0208 	add.w	r2, r7, #8
 800fddc:	4611      	mov	r1, r2
 800fdde:	4618      	mov	r0, r3
 800fde0:	f000 f862 	bl	800fea8 <_Z26BracketsFormattedHexString12SimpleString>
 800fde4:	f107 0308 	add.w	r3, r7, #8
 800fde8:	4618      	mov	r0, r3
 800fdea:	f7ff fc16 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800fdee:	bf00      	nop
}
 800fdf0:	6878      	ldr	r0, [r7, #4]
 800fdf2:	3710      	adds	r7, #16
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	bd80      	pop	{r7, pc}

0800fdf8 <_Z30BracketsFormattedHexStringFroml>:

SimpleString BracketsFormattedHexStringFrom(long value)
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b084      	sub	sp, #16
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
 800fe00:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800fe02:	f107 0308 	add.w	r3, r7, #8
 800fe06:	6839      	ldr	r1, [r7, #0]
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f7ff ff45 	bl	800fc98 <_Z13HexStringFroml>
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	f107 0208 	add.w	r2, r7, #8
 800fe14:	4611      	mov	r1, r2
 800fe16:	4618      	mov	r0, r3
 800fe18:	f000 f846 	bl	800fea8 <_Z26BracketsFormattedHexString12SimpleString>
 800fe1c:	f107 0308 	add.w	r3, r7, #8
 800fe20:	4618      	mov	r0, r3
 800fe22:	f7ff fbfa 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800fe26:	bf00      	nop
}
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	3710      	adds	r7, #16
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd80      	pop	{r7, pc}

0800fe30 <_Z30BracketsFormattedHexStringFromm>:


SimpleString BracketsFormattedHexStringFrom(unsigned long value)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b084      	sub	sp, #16
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
 800fe38:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800fe3a:	f107 0308 	add.w	r3, r7, #8
 800fe3e:	6839      	ldr	r1, [r7, #0]
 800fe40:	4618      	mov	r0, r3
 800fe42:	f7ff ff7d 	bl	800fd40 <_Z13HexStringFromm>
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	f107 0208 	add.w	r2, r7, #8
 800fe4c:	4611      	mov	r1, r2
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f000 f82a 	bl	800fea8 <_Z26BracketsFormattedHexString12SimpleString>
 800fe54:	f107 0308 	add.w	r3, r7, #8
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f7ff fbde 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800fe5e:	bf00      	nop
}
 800fe60:	6878      	ldr	r0, [r7, #4]
 800fe62:	3710      	adds	r7, #16
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd80      	pop	{r7, pc}

0800fe68 <_Z30BracketsFormattedHexStringFroma>:

SimpleString BracketsFormattedHexStringFrom(signed char value)
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b084      	sub	sp, #16
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
 800fe70:	460b      	mov	r3, r1
 800fe72:	70fb      	strb	r3, [r7, #3]
    return BracketsFormattedHexString(HexStringFrom(value));
 800fe74:	f107 0308 	add.w	r3, r7, #8
 800fe78:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800fe7c:	4611      	mov	r1, r2
 800fe7e:	4618      	mov	r0, r3
 800fe80:	f7ff ff2e 	bl	800fce0 <_Z13HexStringFroma>
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	f107 0208 	add.w	r2, r7, #8
 800fe8a:	4611      	mov	r1, r2
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f000 f80b 	bl	800fea8 <_Z26BracketsFormattedHexString12SimpleString>
 800fe92:	f107 0308 	add.w	r3, r7, #8
 800fe96:	4618      	mov	r0, r3
 800fe98:	f7ff fbbf 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800fe9c:	bf00      	nop
}
 800fe9e:	6878      	ldr	r0, [r7, #4]
 800fea0:	3710      	adds	r7, #16
 800fea2:	46bd      	mov	sp, r7
 800fea4:	bd80      	pop	{r7, pc}
	...

0800fea8 <_Z26BracketsFormattedHexString12SimpleString>:

SimpleString BracketsFormattedHexString(SimpleString hexString)
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b088      	sub	sp, #32
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
 800feb0:	6039      	str	r1, [r7, #0]
    return SimpleString("(0x") + hexString + ")" ;
 800feb2:	f107 0310 	add.w	r3, r7, #16
 800feb6:	4917      	ldr	r1, [pc, #92]	; (800ff14 <_Z26BracketsFormattedHexString12SimpleString+0x6c>)
 800feb8:	4618      	mov	r0, r3
 800feba:	f7fe fff6 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800febe:	f107 0308 	add.w	r3, r7, #8
 800fec2:	f107 0110 	add.w	r1, r7, #16
 800fec6:	683a      	ldr	r2, [r7, #0]
 800fec8:	4618      	mov	r0, r3
 800feca:	f7ff fc08 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 800fece:	f107 0318 	add.w	r3, r7, #24
 800fed2:	4911      	ldr	r1, [pc, #68]	; (800ff18 <_Z26BracketsFormattedHexString12SimpleString+0x70>)
 800fed4:	4618      	mov	r0, r3
 800fed6:	f7fe ffe8 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	f107 0218 	add.w	r2, r7, #24
 800fee0:	f107 0108 	add.w	r1, r7, #8
 800fee4:	4618      	mov	r0, r3
 800fee6:	f7ff fbfa 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 800feea:	f107 0318 	add.w	r3, r7, #24
 800feee:	4618      	mov	r0, r3
 800fef0:	f7ff fb93 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800fef4:	f107 0308 	add.w	r3, r7, #8
 800fef8:	4618      	mov	r0, r3
 800fefa:	f7ff fb8e 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800fefe:	f107 0310 	add.w	r3, r7, #16
 800ff02:	4618      	mov	r0, r3
 800ff04:	f7ff fb89 	bl	800f61a <_ZN12SimpleStringD1Ev>
 800ff08:	bf00      	nop
}
 800ff0a:	6878      	ldr	r0, [r7, #4]
 800ff0c:	3720      	adds	r7, #32
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	bd80      	pop	{r7, pc}
 800ff12:	bf00      	nop
 800ff14:	08027044 	.word	0x08027044
 800ff18:	08027048 	.word	0x08027048

0800ff1c <_ZL25convertPointerToLongValuePKv>:
}

#else   /* CPPUTEST_USE_LONG_LONG */

static long convertPointerToLongValue(const void* value)
{
 800ff1c:	b480      	push	{r7}
 800ff1e:	b085      	sub	sp, #20
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800ff24:	1d3b      	adds	r3, r7, #4
 800ff26:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	681b      	ldr	r3, [r3, #0]
}
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	3714      	adds	r7, #20
 800ff30:	46bd      	mov	sp, r7
 800ff32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff36:	4770      	bx	lr

0800ff38 <_ZL33convertFunctionPointerToLongValuePFvvE>:

static long convertFunctionPointerToLongValue(void (*value)())
{
 800ff38:	b480      	push	{r7}
 800ff3a:	b085      	sub	sp, #20
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800ff40:	1d3b      	adds	r3, r7, #4
 800ff42:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	681b      	ldr	r3, [r3, #0]
}
 800ff48:	4618      	mov	r0, r3
 800ff4a:	3714      	adds	r7, #20
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff52:	4770      	bx	lr

0800ff54 <_Z13HexStringFromPKv>:
{
    return "<ulonglong_unsupported>";
}

SimpleString HexStringFrom(const void* value)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b082      	sub	sp, #8
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
 800ff5c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertPointerToLongValue(value));
 800ff5e:	6838      	ldr	r0, [r7, #0]
 800ff60:	f7ff ffdc 	bl	800ff1c <_ZL25convertPointerToLongValuePKv>
 800ff64:	4602      	mov	r2, r0
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	4903      	ldr	r1, [pc, #12]	; (800ff78 <_Z13HexStringFromPKv+0x24>)
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f000 f85c 	bl	8010028 <_Z16StringFromFormatPKcz>
}
 800ff70:	6878      	ldr	r0, [r7, #4]
 800ff72:	3708      	adds	r7, #8
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd80      	pop	{r7, pc}
 800ff78:	0802703c 	.word	0x0802703c

0800ff7c <_Z13HexStringFromPFvvE>:

SimpleString HexStringFrom(void (*value)())
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b082      	sub	sp, #8
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
 800ff84:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertFunctionPointerToLongValue(value));
 800ff86:	6838      	ldr	r0, [r7, #0]
 800ff88:	f7ff ffd6 	bl	800ff38 <_ZL33convertFunctionPointerToLongValuePFvvE>
 800ff8c:	4602      	mov	r2, r0
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	4903      	ldr	r1, [pc, #12]	; (800ffa0 <_Z13HexStringFromPFvvE+0x24>)
 800ff92:	4618      	mov	r0, r3
 800ff94:	f000 f848 	bl	8010028 <_Z16StringFromFormatPKcz>
}
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	3708      	adds	r7, #8
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bd80      	pop	{r7, pc}
 800ffa0:	0802703c 	.word	0x0802703c

0800ffa4 <_Z10StringFromdi>:
}

#endif  /* CPPUTEST_USE_LONG_LONG */

SimpleString StringFrom(double value, int precision)
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b086      	sub	sp, #24
 800ffa8:	af02      	add	r7, sp, #8
 800ffaa:	60f8      	str	r0, [r7, #12]
 800ffac:	ed87 0b00 	vstr	d0, [r7]
 800ffb0:	60b9      	str	r1, [r7, #8]
    if (PlatformSpecificIsNan(value))
 800ffb2:	4b18      	ldr	r3, [pc, #96]	; (8010014 <_Z10StringFromdi+0x70>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	ed97 0b00 	vldr	d0, [r7]
 800ffba:	4798      	blx	r3
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	bf14      	ite	ne
 800ffc2:	2301      	movne	r3, #1
 800ffc4:	2300      	moveq	r3, #0
 800ffc6:	b2db      	uxtb	r3, r3
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d004      	beq.n	800ffd6 <_Z10StringFromdi+0x32>
        return "Nan - Not a number";
 800ffcc:	4912      	ldr	r1, [pc, #72]	; (8010018 <_Z10StringFromdi+0x74>)
 800ffce:	68f8      	ldr	r0, [r7, #12]
 800ffd0:	f7fe ff6b 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800ffd4:	e01a      	b.n	801000c <_Z10StringFromdi+0x68>
    else if (PlatformSpecificIsInf(value))
 800ffd6:	4b11      	ldr	r3, [pc, #68]	; (801001c <_Z10StringFromdi+0x78>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	ed97 0b00 	vldr	d0, [r7]
 800ffde:	4798      	blx	r3
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	bf14      	ite	ne
 800ffe6:	2301      	movne	r3, #1
 800ffe8:	2300      	moveq	r3, #0
 800ffea:	b2db      	uxtb	r3, r3
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d004      	beq.n	800fffa <_Z10StringFromdi+0x56>
        return "Inf - Infinity";
 800fff0:	490b      	ldr	r1, [pc, #44]	; (8010020 <_Z10StringFromdi+0x7c>)
 800fff2:	68f8      	ldr	r0, [r7, #12]
 800fff4:	f7fe ff59 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 800fff8:	e008      	b.n	801000c <_Z10StringFromdi+0x68>
    else
        return StringFromFormat("%.*g", precision, value);
 800fffa:	68f8      	ldr	r0, [r7, #12]
 800fffc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010000:	e9cd 2300 	strd	r2, r3, [sp]
 8010004:	68ba      	ldr	r2, [r7, #8]
 8010006:	4907      	ldr	r1, [pc, #28]	; (8010024 <_Z10StringFromdi+0x80>)
 8010008:	f000 f80e 	bl	8010028 <_Z16StringFromFormatPKcz>
}
 801000c:	68f8      	ldr	r0, [r7, #12]
 801000e:	3710      	adds	r7, #16
 8010010:	46bd      	mov	sp, r7
 8010012:	bd80      	pop	{r7, pc}
 8010014:	200000e8 	.word	0x200000e8
 8010018:	0802707c 	.word	0x0802707c
 801001c:	200000ec 	.word	0x200000ec
 8010020:	08027090 	.word	0x08027090
 8010024:	080270a0 	.word	0x080270a0

08010028 <_Z16StringFromFormatPKcz>:
{
    return SimpleString(value);
}

SimpleString StringFromFormat(const char* format, ...)
{
 8010028:	b40e      	push	{r1, r2, r3}
 801002a:	b580      	push	{r7, lr}
 801002c:	b087      	sub	sp, #28
 801002e:	af00      	add	r7, sp, #0
 8010030:	6078      	str	r0, [r7, #4]
    SimpleString resultString;
 8010032:	4910      	ldr	r1, [pc, #64]	; (8010074 <_Z16StringFromFormatPKcz+0x4c>)
 8010034:	6878      	ldr	r0, [r7, #4]
 8010036:	f7fe ff38 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
    va_list arguments;
    va_start(arguments, format);
 801003a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801003e:	60fb      	str	r3, [r7, #12]

    resultString = VStringFromFormat(format, arguments);
 8010040:	f107 0310 	add.w	r3, r7, #16
 8010044:	68fa      	ldr	r2, [r7, #12]
 8010046:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010048:	4618      	mov	r0, r3
 801004a:	f000 f839 	bl	80100c0 <_Z17VStringFromFormatPKcSt9__va_list>
 801004e:	f107 0310 	add.w	r3, r7, #16
 8010052:	4619      	mov	r1, r3
 8010054:	6878      	ldr	r0, [r7, #4]
 8010056:	f7fe ff94 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 801005a:	f107 0310 	add.w	r3, r7, #16
 801005e:	4618      	mov	r0, r3
 8010060:	f7ff fadb 	bl	800f61a <_ZN12SimpleStringD1Ev>
    va_end(arguments);
    return resultString;
 8010064:	bf00      	nop
}
 8010066:	6878      	ldr	r0, [r7, #4]
 8010068:	371c      	adds	r7, #28
 801006a:	46bd      	mov	sp, r7
 801006c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010070:	b003      	add	sp, #12
 8010072:	4770      	bx	lr
 8010074:	08027008 	.word	0x08027008

08010078 <_Z10StringFromj>:

SimpleString StringFrom(unsigned int i)
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b082      	sub	sp, #8
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
 8010080:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%u", i);
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	683a      	ldr	r2, [r7, #0]
 8010086:	4904      	ldr	r1, [pc, #16]	; (8010098 <_Z10StringFromj+0x20>)
 8010088:	4618      	mov	r0, r3
 801008a:	f7ff ffcd 	bl	8010028 <_Z16StringFromFormatPKcz>
}
 801008e:	6878      	ldr	r0, [r7, #4]
 8010090:	3708      	adds	r7, #8
 8010092:	46bd      	mov	sp, r7
 8010094:	bd80      	pop	{r7, pc}
 8010096:	bf00      	nop
 8010098:	080270ac 	.word	0x080270ac

0801009c <_Z10StringFromm>:
}

#endif

SimpleString StringFrom(unsigned long i)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b082      	sub	sp, #8
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
 80100a4:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lu", i);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	683a      	ldr	r2, [r7, #0]
 80100aa:	4904      	ldr	r1, [pc, #16]	; (80100bc <_Z10StringFromm+0x20>)
 80100ac:	4618      	mov	r0, r3
 80100ae:	f7ff ffbb 	bl	8010028 <_Z16StringFromFormatPKcz>
}
 80100b2:	6878      	ldr	r0, [r7, #4]
 80100b4:	3708      	adds	r7, #8
 80100b6:	46bd      	mov	sp, r7
 80100b8:	bd80      	pop	{r7, pc}
 80100ba:	bf00      	nop
 80100bc:	080270b0 	.word	0x080270b0

080100c0 <_Z17VStringFromFormatPKcSt9__va_list>:

SimpleString VStringFromFormat(const char* format, va_list args)
{
 80100c0:	b590      	push	{r4, r7, lr}
 80100c2:	b0a7      	sub	sp, #156	; 0x9c
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	60f8      	str	r0, [r7, #12]
 80100c8:	60b9      	str	r1, [r7, #8]
 80100ca:	607a      	str	r2, [r7, #4]
    va_list argsCopy;
    va_copy(argsCopy, args);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	67bb      	str	r3, [r7, #120]	; 0x78
    enum
    {
        sizeOfdefaultBuffer = 100
    };
    char defaultBuffer[sizeOfdefaultBuffer];
    SimpleString resultString;
 80100d0:	492e      	ldr	r1, [pc, #184]	; (801018c <_Z17VStringFromFormatPKcSt9__va_list+0xcc>)
 80100d2:	68f8      	ldr	r0, [r7, #12]
 80100d4:	f7fe fee9 	bl	800eeaa <_ZN12SimpleStringC1EPKc>

    size_t size = (size_t)PlatformSpecificVSNprintf(defaultBuffer, sizeOfdefaultBuffer, format, args);
 80100d8:	4b2d      	ldr	r3, [pc, #180]	; (8010190 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 80100da:	681c      	ldr	r4, [r3, #0]
 80100dc:	f107 0014 	add.w	r0, r7, #20
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	68ba      	ldr	r2, [r7, #8]
 80100e4:	2164      	movs	r1, #100	; 0x64
 80100e6:	47a0      	blx	r4
 80100e8:	4603      	mov	r3, r0
 80100ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (size < sizeOfdefaultBuffer) {
 80100ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80100f2:	2b63      	cmp	r3, #99	; 0x63
 80100f4:	d813      	bhi.n	801011e <_Z17VStringFromFormatPKcSt9__va_list+0x5e>
        resultString = SimpleString(defaultBuffer);
 80100f6:	f107 0214 	add.w	r2, r7, #20
 80100fa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80100fe:	4611      	mov	r1, r2
 8010100:	4618      	mov	r0, r3
 8010102:	f7fe fed2 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8010106:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801010a:	4619      	mov	r1, r3
 801010c:	68f8      	ldr	r0, [r7, #12]
 801010e:	f7fe ff38 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 8010112:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010116:	4618      	mov	r0, r3
 8010118:	f7ff fa7f 	bl	800f61a <_ZN12SimpleStringD1Ev>
        resultString = SimpleString(newBuffer);

        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
    }
    va_end(argsCopy);
    return resultString;
 801011c:	e031      	b.n	8010182 <_Z17VStringFromFormatPKcSt9__va_list+0xc2>
        size_t newBufferSize = size + 1;
 801011e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010122:	3301      	adds	r3, #1
 8010124:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        char* newBuffer = SimpleString::allocStringBuffer(newBufferSize, __FILE__, __LINE__);
 8010128:	f240 32c3 	movw	r2, #963	; 0x3c3
 801012c:	4919      	ldr	r1, [pc, #100]	; (8010194 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 801012e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8010132:	f7fe fc3f 	bl	800e9b4 <_ZN12SimpleString17allocStringBufferEjPKcj>
 8010136:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        PlatformSpecificVSNprintf(newBuffer, newBufferSize, format, argsCopy);
 801013a:	4b15      	ldr	r3, [pc, #84]	; (8010190 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 801013c:	681c      	ldr	r4, [r3, #0]
 801013e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010140:	68ba      	ldr	r2, [r7, #8]
 8010142:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010146:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 801014a:	47a0      	blx	r4
        resultString = SimpleString(newBuffer);
 801014c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8010150:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8010154:	4618      	mov	r0, r3
 8010156:	f7fe fea8 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801015a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801015e:	4619      	mov	r1, r3
 8010160:	68f8      	ldr	r0, [r7, #12]
 8010162:	f7fe ff0e 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 8010166:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801016a:	4618      	mov	r0, r3
 801016c:	f7ff fa55 	bl	800f61a <_ZN12SimpleStringD1Ev>
        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
 8010170:	f240 33c7 	movw	r3, #967	; 0x3c7
 8010174:	4a07      	ldr	r2, [pc, #28]	; (8010194 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 8010176:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801017a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 801017e:	f7fe fc2d 	bl	800e9dc <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
    return resultString;
 8010182:	bf00      	nop
}
 8010184:	68f8      	ldr	r0, [r7, #12]
 8010186:	379c      	adds	r7, #156	; 0x9c
 8010188:	46bd      	mov	sp, r7
 801018a:	bd90      	pop	{r4, r7, pc}
 801018c:	08027008 	.word	0x08027008
 8010190:	200000b0 	.word	0x200000b0
 8010194:	08026f48 	.word	0x08026f48

08010198 <_Z16StringFromBinaryPKhj>:

SimpleString StringFromBinary(const unsigned char* value, size_t size)
{
 8010198:	b580      	push	{r7, lr}
 801019a:	b08a      	sub	sp, #40	; 0x28
 801019c:	af00      	add	r7, sp, #0
 801019e:	60f8      	str	r0, [r7, #12]
 80101a0:	60b9      	str	r1, [r7, #8]
 80101a2:	607a      	str	r2, [r7, #4]
    SimpleString result;
 80101a4:	491f      	ldr	r1, [pc, #124]	; (8010224 <_Z16StringFromBinaryPKhj+0x8c>)
 80101a6:	68f8      	ldr	r0, [r7, #12]
 80101a8:	f7fe fe7f 	bl	800eeaa <_ZN12SimpleStringC1EPKc>

    for (size_t i = 0; i < size; i++) {
 80101ac:	2300      	movs	r3, #0
 80101ae:	627b      	str	r3, [r7, #36]	; 0x24
 80101b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	429a      	cmp	r2, r3
 80101b6:	d219      	bcs.n	80101ec <_Z16StringFromBinaryPKhj+0x54>
        result += StringFromFormat("%02X ", value[i]);
 80101b8:	68ba      	ldr	r2, [r7, #8]
 80101ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101bc:	4413      	add	r3, r2
 80101be:	781b      	ldrb	r3, [r3, #0]
 80101c0:	461a      	mov	r2, r3
 80101c2:	f107 0314 	add.w	r3, r7, #20
 80101c6:	4918      	ldr	r1, [pc, #96]	; (8010228 <_Z16StringFromBinaryPKhj+0x90>)
 80101c8:	4618      	mov	r0, r3
 80101ca:	f7ff ff2d 	bl	8010028 <_Z16StringFromFormatPKcz>
 80101ce:	f107 0314 	add.w	r3, r7, #20
 80101d2:	4619      	mov	r1, r3
 80101d4:	68f8      	ldr	r0, [r7, #12]
 80101d6:	f7ff fa9d 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 80101da:	f107 0314 	add.w	r3, r7, #20
 80101de:	4618      	mov	r0, r3
 80101e0:	f7ff fa1b 	bl	800f61a <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < size; i++) {
 80101e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101e6:	3301      	adds	r3, #1
 80101e8:	627b      	str	r3, [r7, #36]	; 0x24
 80101ea:	e7e1      	b.n	80101b0 <_Z16StringFromBinaryPKhj+0x18>
    }
    result = result.subString(0, result.size() - 1);
 80101ec:	68f8      	ldr	r0, [r7, #12]
 80101ee:	f7ff f9f3 	bl	800f5d8 <_ZNK12SimpleString4sizeEv>
 80101f2:	4603      	mov	r3, r0
 80101f4:	3b01      	subs	r3, #1
 80101f6:	f107 001c 	add.w	r0, r7, #28
 80101fa:	2200      	movs	r2, #0
 80101fc:	68f9      	ldr	r1, [r7, #12]
 80101fe:	f7ff fb15 	bl	800f82c <_ZNK12SimpleString9subStringEjj>
 8010202:	f107 031c 	add.w	r3, r7, #28
 8010206:	4619      	mov	r1, r3
 8010208:	68f8      	ldr	r0, [r7, #12]
 801020a:	f7fe feba 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 801020e:	f107 031c 	add.w	r3, r7, #28
 8010212:	4618      	mov	r0, r3
 8010214:	f7ff fa01 	bl	800f61a <_ZN12SimpleStringD1Ev>

    return result;
 8010218:	bf00      	nop
}
 801021a:	68f8      	ldr	r0, [r7, #12]
 801021c:	3728      	adds	r7, #40	; 0x28
 801021e:	46bd      	mov	sp, r7
 8010220:	bd80      	pop	{r7, pc}
 8010222:	bf00      	nop
 8010224:	08027008 	.word	0x08027008
 8010228:	080270b4 	.word	0x080270b4

0801022c <_Z22StringFromBinaryOrNullPKhj>:

SimpleString StringFromBinaryOrNull(const unsigned char* value, size_t size)
{
 801022c:	b580      	push	{r7, lr}
 801022e:	b084      	sub	sp, #16
 8010230:	af00      	add	r7, sp, #0
 8010232:	60f8      	str	r0, [r7, #12]
 8010234:	60b9      	str	r1, [r7, #8]
 8010236:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinary(value, size) : StringFrom("(null)");
 8010238:	68bb      	ldr	r3, [r7, #8]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d006      	beq.n	801024c <_Z22StringFromBinaryOrNullPKhj+0x20>
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	687a      	ldr	r2, [r7, #4]
 8010242:	68b9      	ldr	r1, [r7, #8]
 8010244:	4618      	mov	r0, r3
 8010246:	f7ff ffa7 	bl	8010198 <_Z16StringFromBinaryPKhj>
 801024a:	e004      	b.n	8010256 <_Z22StringFromBinaryOrNullPKhj+0x2a>
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	4904      	ldr	r1, [pc, #16]	; (8010260 <_Z22StringFromBinaryOrNullPKhj+0x34>)
 8010250:	4618      	mov	r0, r3
 8010252:	f7ff fc6f 	bl	800fb34 <_Z10StringFromPKc>
}
 8010256:	68f8      	ldr	r0, [r7, #12]
 8010258:	3710      	adds	r7, #16
 801025a:	46bd      	mov	sp, r7
 801025c:	bd80      	pop	{r7, pc}
 801025e:	bf00      	nop
 8010260:	08027028 	.word	0x08027028

08010264 <_Z24StringFromBinaryWithSizePKhj>:

SimpleString StringFromBinaryWithSize(const unsigned char* value, size_t size)
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b088      	sub	sp, #32
 8010268:	af00      	add	r7, sp, #0
 801026a:	60f8      	str	r0, [r7, #12]
 801026c:	60b9      	str	r1, [r7, #8]
 801026e:	607a      	str	r2, [r7, #4]
    SimpleString result = StringFromFormat("Size = %u | HexContents = ", (unsigned) size);
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	687a      	ldr	r2, [r7, #4]
 8010274:	4913      	ldr	r1, [pc, #76]	; (80102c4 <_Z24StringFromBinaryWithSizePKhj+0x60>)
 8010276:	4618      	mov	r0, r3
 8010278:	f7ff fed6 	bl	8010028 <_Z16StringFromFormatPKcz>
    size_t displayedSize = ((size > 128) ? 128 : size);
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	2b80      	cmp	r3, #128	; 0x80
 8010280:	bf28      	it	cs
 8010282:	2380      	movcs	r3, #128	; 0x80
 8010284:	61fb      	str	r3, [r7, #28]
    result += StringFromBinaryOrNull(value, displayedSize);
 8010286:	f107 0314 	add.w	r3, r7, #20
 801028a:	69fa      	ldr	r2, [r7, #28]
 801028c:	68b9      	ldr	r1, [r7, #8]
 801028e:	4618      	mov	r0, r3
 8010290:	f7ff ffcc 	bl	801022c <_Z22StringFromBinaryOrNullPKhj>
 8010294:	f107 0314 	add.w	r3, r7, #20
 8010298:	4619      	mov	r1, r3
 801029a:	68f8      	ldr	r0, [r7, #12]
 801029c:	f7ff fa3a 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 80102a0:	f107 0314 	add.w	r3, r7, #20
 80102a4:	4618      	mov	r0, r3
 80102a6:	f7ff f9b8 	bl	800f61a <_ZN12SimpleStringD1Ev>
    if (size > displayedSize)
 80102aa:	687a      	ldr	r2, [r7, #4]
 80102ac:	69fb      	ldr	r3, [r7, #28]
 80102ae:	429a      	cmp	r2, r3
 80102b0:	d903      	bls.n	80102ba <_Z24StringFromBinaryWithSizePKhj+0x56>
    {
        result += " ...";
 80102b2:	4905      	ldr	r1, [pc, #20]	; (80102c8 <_Z24StringFromBinaryWithSizePKhj+0x64>)
 80102b4:	68f8      	ldr	r0, [r7, #12]
 80102b6:	f7ff fa3f 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    }
    return result;
 80102ba:	bf00      	nop
}
 80102bc:	68f8      	ldr	r0, [r7, #12]
 80102be:	3720      	adds	r7, #32
 80102c0:	46bd      	mov	sp, r7
 80102c2:	bd80      	pop	{r7, pc}
 80102c4:	080270bc 	.word	0x080270bc
 80102c8:	080270d8 	.word	0x080270d8

080102cc <_Z30StringFromBinaryWithSizeOrNullPKhj>:

SimpleString StringFromBinaryWithSizeOrNull(const unsigned char* value, size_t size)
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b084      	sub	sp, #16
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	60f8      	str	r0, [r7, #12]
 80102d4:	60b9      	str	r1, [r7, #8]
 80102d6:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinaryWithSize(value, size) : StringFrom("(null)");
 80102d8:	68bb      	ldr	r3, [r7, #8]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d006      	beq.n	80102ec <_Z30StringFromBinaryWithSizeOrNullPKhj+0x20>
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	687a      	ldr	r2, [r7, #4]
 80102e2:	68b9      	ldr	r1, [r7, #8]
 80102e4:	4618      	mov	r0, r3
 80102e6:	f7ff ffbd 	bl	8010264 <_Z24StringFromBinaryWithSizePKhj>
 80102ea:	e004      	b.n	80102f6 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x2a>
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	4904      	ldr	r1, [pc, #16]	; (8010300 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x34>)
 80102f0:	4618      	mov	r0, r3
 80102f2:	f7ff fc1f 	bl	800fb34 <_Z10StringFromPKc>
}
 80102f6:	68f8      	ldr	r0, [r7, #12]
 80102f8:	3710      	adds	r7, #16
 80102fa:	46bd      	mov	sp, r7
 80102fc:	bd80      	pop	{r7, pc}
 80102fe:	bf00      	nop
 8010300:	08027028 	.word	0x08027028

08010304 <_Z20StringFromMaskedBitsmmj>:

SimpleString StringFromMaskedBits(unsigned long value, unsigned long mask, size_t byteCount)
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b088      	sub	sp, #32
 8010308:	af00      	add	r7, sp, #0
 801030a:	60f8      	str	r0, [r7, #12]
 801030c:	60b9      	str	r1, [r7, #8]
 801030e:	607a      	str	r2, [r7, #4]
 8010310:	603b      	str	r3, [r7, #0]
    SimpleString result;
 8010312:	4925      	ldr	r1, [pc, #148]	; (80103a8 <_Z20StringFromMaskedBitsmmj+0xa4>)
 8010314:	68f8      	ldr	r0, [r7, #12]
 8010316:	f7fe fdc8 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
    size_t bitCount = (byteCount > sizeof(unsigned long)) ? (sizeof(unsigned long) * CPPUTEST_CHAR_BIT) : (byteCount * CPPUTEST_CHAR_BIT);
 801031a:	683b      	ldr	r3, [r7, #0]
 801031c:	2b04      	cmp	r3, #4
 801031e:	d802      	bhi.n	8010326 <_Z20StringFromMaskedBitsmmj+0x22>
 8010320:	683b      	ldr	r3, [r7, #0]
 8010322:	00db      	lsls	r3, r3, #3
 8010324:	e000      	b.n	8010328 <_Z20StringFromMaskedBitsmmj+0x24>
 8010326:	2320      	movs	r3, #32
 8010328:	61bb      	str	r3, [r7, #24]
    const unsigned long msbMask = (((unsigned long) 1) << (bitCount - 1));
 801032a:	69bb      	ldr	r3, [r7, #24]
 801032c:	3b01      	subs	r3, #1
 801032e:	2201      	movs	r2, #1
 8010330:	fa02 f303 	lsl.w	r3, r2, r3
 8010334:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < bitCount; i++) {
 8010336:	2300      	movs	r3, #0
 8010338:	61fb      	str	r3, [r7, #28]
 801033a:	69fa      	ldr	r2, [r7, #28]
 801033c:	69bb      	ldr	r3, [r7, #24]
 801033e:	429a      	cmp	r2, r3
 8010340:	d22d      	bcs.n	801039e <_Z20StringFromMaskedBitsmmj+0x9a>
        if (mask & msbMask) {
 8010342:	687a      	ldr	r2, [r7, #4]
 8010344:	697b      	ldr	r3, [r7, #20]
 8010346:	4013      	ands	r3, r2
 8010348:	2b00      	cmp	r3, #0
 801034a:	d00c      	beq.n	8010366 <_Z20StringFromMaskedBitsmmj+0x62>
            result += (value & msbMask) ? "1" : "0";
 801034c:	68ba      	ldr	r2, [r7, #8]
 801034e:	697b      	ldr	r3, [r7, #20]
 8010350:	4013      	ands	r3, r2
 8010352:	2b00      	cmp	r3, #0
 8010354:	d001      	beq.n	801035a <_Z20StringFromMaskedBitsmmj+0x56>
 8010356:	4b15      	ldr	r3, [pc, #84]	; (80103ac <_Z20StringFromMaskedBitsmmj+0xa8>)
 8010358:	e000      	b.n	801035c <_Z20StringFromMaskedBitsmmj+0x58>
 801035a:	4b15      	ldr	r3, [pc, #84]	; (80103b0 <_Z20StringFromMaskedBitsmmj+0xac>)
 801035c:	4619      	mov	r1, r3
 801035e:	68f8      	ldr	r0, [r7, #12]
 8010360:	f7ff f9ea 	bl	800f738 <_ZN12SimpleStringpLEPKc>
 8010364:	e003      	b.n	801036e <_Z20StringFromMaskedBitsmmj+0x6a>
        }
        else {
            result += "x";
 8010366:	4913      	ldr	r1, [pc, #76]	; (80103b4 <_Z20StringFromMaskedBitsmmj+0xb0>)
 8010368:	68f8      	ldr	r0, [r7, #12]
 801036a:	f7ff f9e5 	bl	800f738 <_ZN12SimpleStringpLEPKc>
        }

        if (((i % 8) == 7) && (i != (bitCount - 1))) {
 801036e:	69fb      	ldr	r3, [r7, #28]
 8010370:	f003 0307 	and.w	r3, r3, #7
 8010374:	2b07      	cmp	r3, #7
 8010376:	d108      	bne.n	801038a <_Z20StringFromMaskedBitsmmj+0x86>
 8010378:	69bb      	ldr	r3, [r7, #24]
 801037a:	3b01      	subs	r3, #1
 801037c:	69fa      	ldr	r2, [r7, #28]
 801037e:	429a      	cmp	r2, r3
 8010380:	d003      	beq.n	801038a <_Z20StringFromMaskedBitsmmj+0x86>
            result += " ";
 8010382:	490d      	ldr	r1, [pc, #52]	; (80103b8 <_Z20StringFromMaskedBitsmmj+0xb4>)
 8010384:	68f8      	ldr	r0, [r7, #12]
 8010386:	f7ff f9d7 	bl	800f738 <_ZN12SimpleStringpLEPKc>
        }

        value <<= 1;
 801038a:	68bb      	ldr	r3, [r7, #8]
 801038c:	005b      	lsls	r3, r3, #1
 801038e:	60bb      	str	r3, [r7, #8]
        mask <<= 1;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	005b      	lsls	r3, r3, #1
 8010394:	607b      	str	r3, [r7, #4]
    for (size_t i = 0; i < bitCount; i++) {
 8010396:	69fb      	ldr	r3, [r7, #28]
 8010398:	3301      	adds	r3, #1
 801039a:	61fb      	str	r3, [r7, #28]
 801039c:	e7cd      	b.n	801033a <_Z20StringFromMaskedBitsmmj+0x36>
    }

    return result;
 801039e:	bf00      	nop
}
 80103a0:	68f8      	ldr	r0, [r7, #12]
 80103a2:	3720      	adds	r7, #32
 80103a4:	46bd      	mov	sp, r7
 80103a6:	bd80      	pop	{r7, pc}
 80103a8:	08027008 	.word	0x08027008
 80103ac:	080270e0 	.word	0x080270e0
 80103b0:	080270e4 	.word	0x080270e4
 80103b4:	080270e8 	.word	0x080270e8
 80103b8:	080270ec 	.word	0x080270ec

080103bc <_Z23StringFromOrdinalNumberj>:

SimpleString StringFromOrdinalNumber(unsigned int number)
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b084      	sub	sp, #16
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
 80103c4:	6039      	str	r1, [r7, #0]
    unsigned int onesDigit = number % 10;
 80103c6:	683a      	ldr	r2, [r7, #0]
 80103c8:	4b18      	ldr	r3, [pc, #96]	; (801042c <_Z23StringFromOrdinalNumberj+0x70>)
 80103ca:	fba3 1302 	umull	r1, r3, r3, r2
 80103ce:	08d9      	lsrs	r1, r3, #3
 80103d0:	460b      	mov	r3, r1
 80103d2:	009b      	lsls	r3, r3, #2
 80103d4:	440b      	add	r3, r1
 80103d6:	005b      	lsls	r3, r3, #1
 80103d8:	1ad3      	subs	r3, r2, r3
 80103da:	60bb      	str	r3, [r7, #8]

    const char* suffix;
    if (number >= 11 && number <= 13) {
 80103dc:	683b      	ldr	r3, [r7, #0]
 80103de:	2b0a      	cmp	r3, #10
 80103e0:	d905      	bls.n	80103ee <_Z23StringFromOrdinalNumberj+0x32>
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	2b0d      	cmp	r3, #13
 80103e6:	d802      	bhi.n	80103ee <_Z23StringFromOrdinalNumberj+0x32>
        suffix = "th";
 80103e8:	4b11      	ldr	r3, [pc, #68]	; (8010430 <_Z23StringFromOrdinalNumberj+0x74>)
 80103ea:	60fb      	str	r3, [r7, #12]
 80103ec:	e013      	b.n	8010416 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (3 == onesDigit) {
 80103ee:	68bb      	ldr	r3, [r7, #8]
 80103f0:	2b03      	cmp	r3, #3
 80103f2:	d102      	bne.n	80103fa <_Z23StringFromOrdinalNumberj+0x3e>
        suffix = "rd";
 80103f4:	4b0f      	ldr	r3, [pc, #60]	; (8010434 <_Z23StringFromOrdinalNumberj+0x78>)
 80103f6:	60fb      	str	r3, [r7, #12]
 80103f8:	e00d      	b.n	8010416 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (2 == onesDigit) {
 80103fa:	68bb      	ldr	r3, [r7, #8]
 80103fc:	2b02      	cmp	r3, #2
 80103fe:	d102      	bne.n	8010406 <_Z23StringFromOrdinalNumberj+0x4a>
        suffix = "nd";
 8010400:	4b0d      	ldr	r3, [pc, #52]	; (8010438 <_Z23StringFromOrdinalNumberj+0x7c>)
 8010402:	60fb      	str	r3, [r7, #12]
 8010404:	e007      	b.n	8010416 <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (1 == onesDigit) {
 8010406:	68bb      	ldr	r3, [r7, #8]
 8010408:	2b01      	cmp	r3, #1
 801040a:	d102      	bne.n	8010412 <_Z23StringFromOrdinalNumberj+0x56>
        suffix = "st";
 801040c:	4b0b      	ldr	r3, [pc, #44]	; (801043c <_Z23StringFromOrdinalNumberj+0x80>)
 801040e:	60fb      	str	r3, [r7, #12]
 8010410:	e001      	b.n	8010416 <_Z23StringFromOrdinalNumberj+0x5a>
    } else {
        suffix = "th";
 8010412:	4b07      	ldr	r3, [pc, #28]	; (8010430 <_Z23StringFromOrdinalNumberj+0x74>)
 8010414:	60fb      	str	r3, [r7, #12]
    }

    return StringFromFormat("%u%s", number, suffix);
 8010416:	6878      	ldr	r0, [r7, #4]
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	683a      	ldr	r2, [r7, #0]
 801041c:	4908      	ldr	r1, [pc, #32]	; (8010440 <_Z23StringFromOrdinalNumberj+0x84>)
 801041e:	f7ff fe03 	bl	8010028 <_Z16StringFromFormatPKcz>
}
 8010422:	6878      	ldr	r0, [r7, #4]
 8010424:	3710      	adds	r7, #16
 8010426:	46bd      	mov	sp, r7
 8010428:	bd80      	pop	{r7, pc}
 801042a:	bf00      	nop
 801042c:	cccccccd 	.word	0xcccccccd
 8010430:	080270f0 	.word	0x080270f0
 8010434:	080270f4 	.word	0x080270f4
 8010438:	080270f8 	.word	0x080270f8
 801043c:	080270fc 	.word	0x080270fc
 8010440:	08027100 	.word	0x08027100

08010444 <_ZN22SimpleStringCollectionC1Ev>:

SimpleStringCollection::SimpleStringCollection()
 8010444:	b580      	push	{r7, lr}
 8010446:	b082      	sub	sp, #8
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	3304      	adds	r3, #4
 8010450:	4907      	ldr	r1, [pc, #28]	; (8010470 <_ZN22SimpleStringCollectionC1Ev+0x2c>)
 8010452:	4618      	mov	r0, r3
 8010454:	f7fe fd29 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
{
    collection_ = NULLPTR;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2200      	movs	r2, #0
 801045c:	601a      	str	r2, [r3, #0]
    size_ = 0;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	2200      	movs	r2, #0
 8010462:	60da      	str	r2, [r3, #12]
}
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	4618      	mov	r0, r3
 8010468:	3708      	adds	r7, #8
 801046a:	46bd      	mov	sp, r7
 801046c:	bd80      	pop	{r7, pc}
 801046e:	bf00      	nop
 8010470:	08027008 	.word	0x08027008

08010474 <_ZN22SimpleStringCollection8allocateEj>:

void SimpleStringCollection::allocate(size_t _size)
{
 8010474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010476:	b083      	sub	sp, #12
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
 801047c:	6039      	str	r1, [r7, #0]
    delete[] collection_;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d01e      	beq.n	80104c4 <_ZN22SimpleStringCollection8allocateEj+0x50>
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681a      	ldr	r2, [r3, #0]
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	3b04      	subs	r3, #4
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	00db      	lsls	r3, r3, #3
 8010494:	18d4      	adds	r4, r2, r3
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	429c      	cmp	r4, r3
 801049c:	d004      	beq.n	80104a8 <_ZN22SimpleStringCollection8allocateEj+0x34>
 801049e:	3c08      	subs	r4, #8
 80104a0:	4620      	mov	r0, r4
 80104a2:	f7ff f8ba 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80104a6:	e7f6      	b.n	8010496 <_ZN22SimpleStringCollection8allocateEj+0x22>
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	f1a3 0208 	sub.w	r2, r3, #8
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	3b04      	subs	r3, #4
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	3301      	adds	r3, #1
 80104ba:	00db      	lsls	r3, r3, #3
 80104bc:	4619      	mov	r1, r3
 80104be:	4610      	mov	r0, r2
 80104c0:	f7fc f976 	bl	800c7b0 <_ZdaPvj>

    size_ = _size;
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	683a      	ldr	r2, [r7, #0]
 80104c8:	60da      	str	r2, [r3, #12]
    collection_ = new SimpleString[size_];
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	68dc      	ldr	r4, [r3, #12]
 80104ce:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 80104d2:	d202      	bcs.n	80104da <_ZN22SimpleStringCollection8allocateEj+0x66>
 80104d4:	1c63      	adds	r3, r4, #1
 80104d6:	00db      	lsls	r3, r3, #3
 80104d8:	e001      	b.n	80104de <_ZN22SimpleStringCollection8allocateEj+0x6a>
 80104da:	f04f 33ff 	mov.w	r3, #4294967295
 80104de:	f240 4227 	movw	r2, #1063	; 0x427
 80104e2:	4910      	ldr	r1, [pc, #64]	; (8010524 <_ZN22SimpleStringCollection8allocateEj+0xb0>)
 80104e4:	4618      	mov	r0, r3
 80104e6:	f7fc f941 	bl	800c76c <_ZnajPKci>
 80104ea:	4605      	mov	r5, r0
 80104ec:	1d2b      	adds	r3, r5, #4
 80104ee:	3b04      	subs	r3, #4
 80104f0:	2208      	movs	r2, #8
 80104f2:	601a      	str	r2, [r3, #0]
 80104f4:	1d2b      	adds	r3, r5, #4
 80104f6:	601c      	str	r4, [r3, #0]
 80104f8:	f105 0308 	add.w	r3, r5, #8
 80104fc:	1e62      	subs	r2, r4, #1
 80104fe:	4614      	mov	r4, r2
 8010500:	461e      	mov	r6, r3
 8010502:	2c00      	cmp	r4, #0
 8010504:	db06      	blt.n	8010514 <_ZN22SimpleStringCollection8allocateEj+0xa0>
 8010506:	4908      	ldr	r1, [pc, #32]	; (8010528 <_ZN22SimpleStringCollection8allocateEj+0xb4>)
 8010508:	4630      	mov	r0, r6
 801050a:	f7fe fcce 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801050e:	3608      	adds	r6, #8
 8010510:	3c01      	subs	r4, #1
 8010512:	e7f6      	b.n	8010502 <_ZN22SimpleStringCollection8allocateEj+0x8e>
 8010514:	f105 0208 	add.w	r2, r5, #8
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	601a      	str	r2, [r3, #0]
}
 801051c:	bf00      	nop
 801051e:	370c      	adds	r7, #12
 8010520:	46bd      	mov	sp, r7
 8010522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010524:	08026f48 	.word	0x08026f48
 8010528:	08027008 	.word	0x08027008

0801052c <_ZN22SimpleStringCollectionD1Ev>:

SimpleStringCollection::~SimpleStringCollection()
 801052c:	b590      	push	{r4, r7, lr}
 801052e:	b083      	sub	sp, #12
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
{
    delete[] (collection_);
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d01e      	beq.n	801057a <_ZN22SimpleStringCollectionD1Ev+0x4e>
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	681a      	ldr	r2, [r3, #0]
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	3b04      	subs	r3, #4
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	00db      	lsls	r3, r3, #3
 801054a:	18d4      	adds	r4, r2, r3
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	429c      	cmp	r4, r3
 8010552:	d004      	beq.n	801055e <_ZN22SimpleStringCollectionD1Ev+0x32>
 8010554:	3c08      	subs	r4, #8
 8010556:	4620      	mov	r0, r4
 8010558:	f7ff f85f 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801055c:	e7f6      	b.n	801054c <_ZN22SimpleStringCollectionD1Ev+0x20>
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	f1a3 0208 	sub.w	r2, r3, #8
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	3b04      	subs	r3, #4
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	3301      	adds	r3, #1
 8010570:	00db      	lsls	r3, r3, #3
 8010572:	4619      	mov	r1, r3
 8010574:	4610      	mov	r0, r2
 8010576:	f7fc f91b 	bl	800c7b0 <_ZdaPvj>
SimpleStringCollection::~SimpleStringCollection()
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	3304      	adds	r3, #4
 801057e:	4618      	mov	r0, r3
 8010580:	f7ff f84b 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	4618      	mov	r0, r3
 8010588:	370c      	adds	r7, #12
 801058a:	46bd      	mov	sp, r7
 801058c:	bd90      	pop	{r4, r7, pc}

0801058e <_ZNK22SimpleStringCollection4sizeEv>:

size_t SimpleStringCollection::size() const
{
 801058e:	b480      	push	{r7}
 8010590:	b083      	sub	sp, #12
 8010592:	af00      	add	r7, sp, #0
 8010594:	6078      	str	r0, [r7, #4]
    return size_;
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	68db      	ldr	r3, [r3, #12]
}
 801059a:	4618      	mov	r0, r3
 801059c:	370c      	adds	r7, #12
 801059e:	46bd      	mov	sp, r7
 80105a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a4:	4770      	bx	lr
	...

080105a8 <_ZN22SimpleStringCollectionixEj>:

SimpleString& SimpleStringCollection::operator[](size_t index)
{
 80105a8:	b590      	push	{r4, r7, lr}
 80105aa:	b085      	sub	sp, #20
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
 80105b0:	6039      	str	r1, [r7, #0]
    if (index >= size_) {
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	68db      	ldr	r3, [r3, #12]
 80105b6:	683a      	ldr	r2, [r7, #0]
 80105b8:	429a      	cmp	r2, r3
 80105ba:	d315      	bcc.n	80105e8 <_ZN22SimpleStringCollectionixEj+0x40>
        empty_ = "";
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	1d1c      	adds	r4, r3, #4
 80105c0:	f107 0308 	add.w	r3, r7, #8
 80105c4:	490d      	ldr	r1, [pc, #52]	; (80105fc <_ZN22SimpleStringCollectionixEj+0x54>)
 80105c6:	4618      	mov	r0, r3
 80105c8:	f7fe fc6f 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80105cc:	f107 0308 	add.w	r3, r7, #8
 80105d0:	4619      	mov	r1, r3
 80105d2:	4620      	mov	r0, r4
 80105d4:	f7fe fcd5 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 80105d8:	f107 0308 	add.w	r3, r7, #8
 80105dc:	4618      	mov	r0, r3
 80105de:	f7ff f81c 	bl	800f61a <_ZN12SimpleStringD1Ev>
        return empty_;
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	3304      	adds	r3, #4
 80105e6:	e004      	b.n	80105f2 <_ZN22SimpleStringCollectionixEj+0x4a>
    }

    return collection_[index];
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	681a      	ldr	r2, [r3, #0]
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	00db      	lsls	r3, r3, #3
 80105f0:	4413      	add	r3, r2
}
 80105f2:	4618      	mov	r0, r3
 80105f4:	3714      	adds	r7, #20
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd90      	pop	{r4, r7, pc}
 80105fa:	bf00      	nop
 80105fc:	08027008 	.word	0x08027008

08010600 <_ZN18TeamCityTestOutputC1Ev>:
#include "CppUTest/TestHarness.h"
#include "CppUTest/TeamCityTestOutput.h"

TeamCityTestOutput::TeamCityTestOutput() : currtest_(NULLPTR), currGroup_()
 8010600:	b580      	push	{r7, lr}
 8010602:	b082      	sub	sp, #8
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	4618      	mov	r0, r3
 801060c:	f7fa fb88 	bl	800ad20 <_ZN17ConsoleTestOutputC1Ev>
 8010610:	4a08      	ldr	r2, [pc, #32]	; (8010634 <_ZN18TeamCityTestOutputC1Ev+0x34>)
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	601a      	str	r2, [r3, #0]
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	2200      	movs	r2, #0
 801061a:	611a      	str	r2, [r3, #16]
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	3314      	adds	r3, #20
 8010620:	4905      	ldr	r1, [pc, #20]	; (8010638 <_ZN18TeamCityTestOutputC1Ev+0x38>)
 8010622:	4618      	mov	r0, r3
 8010624:	f7fe fc41 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
{
}
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	4618      	mov	r0, r3
 801062c:	3708      	adds	r7, #8
 801062e:	46bd      	mov	sp, r7
 8010630:	bd80      	pop	{r7, pc}
 8010632:	bf00      	nop
 8010634:	0802b2a4 	.word	0x0802b2a4
 8010638:	08027108 	.word	0x08027108

0801063c <_ZN18TeamCityTestOutputD1Ev>:

TeamCityTestOutput::~TeamCityTestOutput()
 801063c:	b580      	push	{r7, lr}
 801063e:	b082      	sub	sp, #8
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
 8010644:	4a08      	ldr	r2, [pc, #32]	; (8010668 <_ZN18TeamCityTestOutputD1Ev+0x2c>)
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	601a      	str	r2, [r3, #0]
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	3314      	adds	r3, #20
 801064e:	4618      	mov	r0, r3
 8010650:	f7fe ffe3 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	4618      	mov	r0, r3
 8010658:	f7fa fb74 	bl	800ad44 <_ZN17ConsoleTestOutputD1Ev>
{
}
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	4618      	mov	r0, r3
 8010660:	3708      	adds	r7, #8
 8010662:	46bd      	mov	sp, r7
 8010664:	bd80      	pop	{r7, pc}
 8010666:	bf00      	nop
 8010668:	0802b2a4 	.word	0x0802b2a4

0801066c <_ZN18TeamCityTestOutputD0Ev>:
TeamCityTestOutput::~TeamCityTestOutput()
 801066c:	b580      	push	{r7, lr}
 801066e:	b082      	sub	sp, #8
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
}
 8010674:	6878      	ldr	r0, [r7, #4]
 8010676:	f7ff ffe1 	bl	801063c <_ZN18TeamCityTestOutputD1Ev>
 801067a:	211c      	movs	r1, #28
 801067c:	6878      	ldr	r0, [r7, #4]
 801067e:	f7fc f865 	bl	800c74c <_ZdlPvj>
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	4618      	mov	r0, r3
 8010686:	3708      	adds	r7, #8
 8010688:	46bd      	mov	sp, r7
 801068a:	bd80      	pop	{r7, pc}

0801068c <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b086      	sub	sp, #24
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
 8010694:	6039      	str	r1, [r7, #0]
    print("##teamcity[testStarted name='");
 8010696:	687a      	ldr	r2, [r7, #4]
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	332c      	adds	r3, #44	; 0x2c
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	492b      	ldr	r1, [pc, #172]	; (8010750 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc4>)
 80106a2:	4610      	mov	r0, r2
 80106a4:	4798      	blx	r3
    printEscaped(test.getName().asCharString());
 80106a6:	f107 0308 	add.w	r3, r7, #8
 80106aa:	6839      	ldr	r1, [r7, #0]
 80106ac:	4618      	mov	r0, r3
 80106ae:	f004 fdf7 	bl	80152a0 <_ZNK10UtestShell7getNameEv>
 80106b2:	f107 0308 	add.w	r3, r7, #8
 80106b6:	4618      	mov	r0, r3
 80106b8:	f7fe ff82 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 80106bc:	4603      	mov	r3, r0
 80106be:	4619      	mov	r1, r3
 80106c0:	6878      	ldr	r0, [r7, #4]
 80106c2:	f000 f919 	bl	80108f8 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 80106c6:	f107 0308 	add.w	r3, r7, #8
 80106ca:	4618      	mov	r0, r3
 80106cc:	f7fe ffa5 	bl	800f61a <_ZN12SimpleStringD1Ev>
    print("']\n");
 80106d0:	687a      	ldr	r2, [r7, #4]
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	332c      	adds	r3, #44	; 0x2c
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	491e      	ldr	r1, [pc, #120]	; (8010754 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 80106dc:	4610      	mov	r0, r2
 80106de:	4798      	blx	r3
    if (!test.willRun()) {
 80106e0:	683b      	ldr	r3, [r7, #0]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	3318      	adds	r3, #24
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	6838      	ldr	r0, [r7, #0]
 80106ea:	4798      	blx	r3
 80106ec:	4603      	mov	r3, r0
 80106ee:	f083 0301 	eor.w	r3, r3, #1
 80106f2:	b2db      	uxtb	r3, r3
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d024      	beq.n	8010742 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xb6>
        print("##teamcity[testIgnored name='");
 80106f8:	687a      	ldr	r2, [r7, #4]
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	332c      	adds	r3, #44	; 0x2c
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	4915      	ldr	r1, [pc, #84]	; (8010758 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xcc>)
 8010704:	4610      	mov	r0, r2
 8010706:	4798      	blx	r3
        printEscaped(test.getName().asCharString());
 8010708:	f107 0310 	add.w	r3, r7, #16
 801070c:	6839      	ldr	r1, [r7, #0]
 801070e:	4618      	mov	r0, r3
 8010710:	f004 fdc6 	bl	80152a0 <_ZNK10UtestShell7getNameEv>
 8010714:	f107 0310 	add.w	r3, r7, #16
 8010718:	4618      	mov	r0, r3
 801071a:	f7fe ff51 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 801071e:	4603      	mov	r3, r0
 8010720:	4619      	mov	r1, r3
 8010722:	6878      	ldr	r0, [r7, #4]
 8010724:	f000 f8e8 	bl	80108f8 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 8010728:	f107 0310 	add.w	r3, r7, #16
 801072c:	4618      	mov	r0, r3
 801072e:	f7fe ff74 	bl	800f61a <_ZN12SimpleStringD1Ev>
        print("']\n");
 8010732:	687a      	ldr	r2, [r7, #4]
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	332c      	adds	r3, #44	; 0x2c
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	4905      	ldr	r1, [pc, #20]	; (8010754 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 801073e:	4610      	mov	r0, r2
 8010740:	4798      	blx	r3
    }
    currtest_ = &test;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	683a      	ldr	r2, [r7, #0]
 8010746:	611a      	str	r2, [r3, #16]
}
 8010748:	bf00      	nop
 801074a:	3718      	adds	r7, #24
 801074c:	46bd      	mov	sp, r7
 801074e:	bd80      	pop	{r7, pc}
 8010750:	0802710c 	.word	0x0802710c
 8010754:	0802712c 	.word	0x0802712c
 8010758:	08027130 	.word	0x08027130

0801075c <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentTestEnded(const TestResult& res)
{
 801075c:	b5b0      	push	{r4, r5, r7, lr}
 801075e:	b084      	sub	sp, #16
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
 8010764:	6039      	str	r1, [r7, #0]
    if (!currtest_)
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	691b      	ldr	r3, [r3, #16]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d03b      	beq.n	80107e6 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8a>
        return;

    print("##teamcity[testFinished name='");
 801076e:	687a      	ldr	r2, [r7, #4]
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	332c      	adds	r3, #44	; 0x2c
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	491d      	ldr	r1, [pc, #116]	; (80107f0 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x94>)
 801077a:	4610      	mov	r0, r2
 801077c:	4798      	blx	r3
    printEscaped(currtest_->getName().asCharString());
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	691a      	ldr	r2, [r3, #16]
 8010782:	f107 0308 	add.w	r3, r7, #8
 8010786:	4611      	mov	r1, r2
 8010788:	4618      	mov	r0, r3
 801078a:	f004 fd89 	bl	80152a0 <_ZNK10UtestShell7getNameEv>
 801078e:	f107 0308 	add.w	r3, r7, #8
 8010792:	4618      	mov	r0, r3
 8010794:	f7fe ff14 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 8010798:	4603      	mov	r3, r0
 801079a:	4619      	mov	r1, r3
 801079c:	6878      	ldr	r0, [r7, #4]
 801079e:	f000 f8ab 	bl	80108f8 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 80107a2:	f107 0308 	add.w	r3, r7, #8
 80107a6:	4618      	mov	r0, r3
 80107a8:	f7fe ff37 	bl	800f61a <_ZN12SimpleStringD1Ev>
    print("' duration='");
 80107ac:	687a      	ldr	r2, [r7, #4]
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	332c      	adds	r3, #44	; 0x2c
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	490f      	ldr	r1, [pc, #60]	; (80107f4 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x98>)
 80107b8:	4610      	mov	r0, r2
 80107ba:	4798      	blx	r3
    print(res.getCurrentTestTotalExecutionTime());
 80107bc:	687d      	ldr	r5, [r7, #4]
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	3334      	adds	r3, #52	; 0x34
 80107c4:	681c      	ldr	r4, [r3, #0]
 80107c6:	6838      	ldr	r0, [r7, #0]
 80107c8:	f004 fa0a 	bl	8014be0 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 80107cc:	4603      	mov	r3, r0
 80107ce:	4619      	mov	r1, r3
 80107d0:	4628      	mov	r0, r5
 80107d2:	47a0      	blx	r4
    print("']\n");
 80107d4:	687a      	ldr	r2, [r7, #4]
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	332c      	adds	r3, #44	; 0x2c
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	4906      	ldr	r1, [pc, #24]	; (80107f8 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x9c>)
 80107e0:	4610      	mov	r0, r2
 80107e2:	4798      	blx	r3
 80107e4:	e000      	b.n	80107e8 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8c>
        return;
 80107e6:	bf00      	nop
}
 80107e8:	3710      	adds	r7, #16
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bdb0      	pop	{r4, r5, r7, pc}
 80107ee:	bf00      	nop
 80107f0:	08027150 	.word	0x08027150
 80107f4:	08027170 	.word	0x08027170
 80107f8:	0802712c 	.word	0x0802712c

080107fc <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 80107fc:	b590      	push	{r4, r7, lr}
 80107fe:	b085      	sub	sp, #20
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
 8010804:	6039      	str	r1, [r7, #0]
    currGroup_ = test.getGroup();
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	f103 0414 	add.w	r4, r3, #20
 801080c:	f107 0308 	add.w	r3, r7, #8
 8010810:	6839      	ldr	r1, [r7, #0]
 8010812:	4618      	mov	r0, r3
 8010814:	f004 fd53 	bl	80152be <_ZNK10UtestShell8getGroupEv>
 8010818:	f107 0308 	add.w	r3, r7, #8
 801081c:	4619      	mov	r1, r3
 801081e:	4620      	mov	r0, r4
 8010820:	f7fe fbaf 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 8010824:	f107 0308 	add.w	r3, r7, #8
 8010828:	4618      	mov	r0, r3
 801082a:	f7fe fef6 	bl	800f61a <_ZN12SimpleStringD1Ev>
    print("##teamcity[testSuiteStarted name='");
 801082e:	687a      	ldr	r2, [r7, #4]
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	332c      	adds	r3, #44	; 0x2c
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	490c      	ldr	r1, [pc, #48]	; (801086c <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x70>)
 801083a:	4610      	mov	r0, r2
 801083c:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	3314      	adds	r3, #20
 8010842:	4618      	mov	r0, r3
 8010844:	f7fe febc 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 8010848:	4603      	mov	r3, r0
 801084a:	4619      	mov	r1, r3
 801084c:	6878      	ldr	r0, [r7, #4]
 801084e:	f000 f853 	bl	80108f8 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 8010852:	687a      	ldr	r2, [r7, #4]
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	332c      	adds	r3, #44	; 0x2c
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	4904      	ldr	r1, [pc, #16]	; (8010870 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x74>)
 801085e:	4610      	mov	r0, r2
 8010860:	4798      	blx	r3
}
 8010862:	bf00      	nop
 8010864:	3714      	adds	r7, #20
 8010866:	46bd      	mov	sp, r7
 8010868:	bd90      	pop	{r4, r7, pc}
 801086a:	bf00      	nop
 801086c:	08027180 	.word	0x08027180
 8010870:	0802712c 	.word	0x0802712c

08010874 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 8010874:	b590      	push	{r4, r7, lr}
 8010876:	b085      	sub	sp, #20
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
 801087c:	6039      	str	r1, [r7, #0]
    if (currGroup_ == "")
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	f103 0414 	add.w	r4, r3, #20
 8010884:	f107 0308 	add.w	r3, r7, #8
 8010888:	4918      	ldr	r1, [pc, #96]	; (80108ec <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x78>)
 801088a:	4618      	mov	r0, r3
 801088c:	f7fe fb0d 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8010890:	f107 0308 	add.w	r3, r7, #8
 8010894:	4619      	mov	r1, r3
 8010896:	4620      	mov	r0, r4
 8010898:	f7fe fecb 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 801089c:	4603      	mov	r3, r0
 801089e:	461c      	mov	r4, r3
 80108a0:	f107 0308 	add.w	r3, r7, #8
 80108a4:	4618      	mov	r0, r3
 80108a6:	f7fe feb8 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80108aa:	2c00      	cmp	r4, #0
 80108ac:	d11a      	bne.n	80108e4 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x70>
        return;

    print("##teamcity[testSuiteFinished name='");
 80108ae:	687a      	ldr	r2, [r7, #4]
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	332c      	adds	r3, #44	; 0x2c
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	490d      	ldr	r1, [pc, #52]	; (80108f0 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x7c>)
 80108ba:	4610      	mov	r0, r2
 80108bc:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	3314      	adds	r3, #20
 80108c2:	4618      	mov	r0, r3
 80108c4:	f7fe fe7c 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 80108c8:	4603      	mov	r3, r0
 80108ca:	4619      	mov	r1, r3
 80108cc:	6878      	ldr	r0, [r7, #4]
 80108ce:	f000 f813 	bl	80108f8 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 80108d2:	687a      	ldr	r2, [r7, #4]
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	332c      	adds	r3, #44	; 0x2c
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	4905      	ldr	r1, [pc, #20]	; (80108f4 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x80>)
 80108de:	4610      	mov	r0, r2
 80108e0:	4798      	blx	r3
 80108e2:	e000      	b.n	80108e6 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x72>
        return;
 80108e4:	bf00      	nop
}
 80108e6:	3714      	adds	r7, #20
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bd90      	pop	{r4, r7, pc}
 80108ec:	08027108 	.word	0x08027108
 80108f0:	080271a4 	.word	0x080271a4
 80108f4:	0802712c 	.word	0x0802712c

080108f8 <_ZN18TeamCityTestOutput12printEscapedEPKc>:

void TeamCityTestOutput::printEscaped(const char* s)
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b084      	sub	sp, #16
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
 8010900:	6039      	str	r1, [r7, #0]
    while (*s) {
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	781b      	ldrb	r3, [r3, #0]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d03f      	beq.n	801098a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x92>
        char str[3];
        if ((*s == '\'') || (*s == '|') || (*s == '[') || (*s == ']')) {
 801090a:	683b      	ldr	r3, [r7, #0]
 801090c:	781b      	ldrb	r3, [r3, #0]
 801090e:	2b27      	cmp	r3, #39	; 0x27
 8010910:	d00b      	beq.n	801092a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 8010912:	683b      	ldr	r3, [r7, #0]
 8010914:	781b      	ldrb	r3, [r3, #0]
 8010916:	2b7c      	cmp	r3, #124	; 0x7c
 8010918:	d007      	beq.n	801092a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 801091a:	683b      	ldr	r3, [r7, #0]
 801091c:	781b      	ldrb	r3, [r3, #0]
 801091e:	2b5b      	cmp	r3, #91	; 0x5b
 8010920:	d003      	beq.n	801092a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 8010922:	683b      	ldr	r3, [r7, #0]
 8010924:	781b      	ldrb	r3, [r3, #0]
 8010926:	2b5d      	cmp	r3, #93	; 0x5d
 8010928:	d107      	bne.n	801093a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x42>
            str[0] = '|';
 801092a:	237c      	movs	r3, #124	; 0x7c
 801092c:	733b      	strb	r3, [r7, #12]
            str[1] = *s;
 801092e:	683b      	ldr	r3, [r7, #0]
 8010930:	781b      	ldrb	r3, [r3, #0]
 8010932:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 8010934:	2300      	movs	r3, #0
 8010936:	73bb      	strb	r3, [r7, #14]
 8010938:	e01a      	b.n	8010970 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\r') {
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	781b      	ldrb	r3, [r3, #0]
 801093e:	2b0d      	cmp	r3, #13
 8010940:	d106      	bne.n	8010950 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x58>
            str[0] = '|';
 8010942:	237c      	movs	r3, #124	; 0x7c
 8010944:	733b      	strb	r3, [r7, #12]
            str[1] = 'r';
 8010946:	2372      	movs	r3, #114	; 0x72
 8010948:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 801094a:	2300      	movs	r3, #0
 801094c:	73bb      	strb	r3, [r7, #14]
 801094e:	e00f      	b.n	8010970 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\n') {
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	781b      	ldrb	r3, [r3, #0]
 8010954:	2b0a      	cmp	r3, #10
 8010956:	d106      	bne.n	8010966 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x6e>
            str[0] = '|';
 8010958:	237c      	movs	r3, #124	; 0x7c
 801095a:	733b      	strb	r3, [r7, #12]
            str[1] = 'n';
 801095c:	236e      	movs	r3, #110	; 0x6e
 801095e:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 8010960:	2300      	movs	r3, #0
 8010962:	73bb      	strb	r3, [r7, #14]
 8010964:	e004      	b.n	8010970 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else {
            str[0] = *s;
 8010966:	683b      	ldr	r3, [r7, #0]
 8010968:	781b      	ldrb	r3, [r3, #0]
 801096a:	733b      	strb	r3, [r7, #12]
            str[1] = 0;
 801096c:	2300      	movs	r3, #0
 801096e:	737b      	strb	r3, [r7, #13]
        }
        printBuffer(str);
 8010970:	687a      	ldr	r2, [r7, #4]
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	3328      	adds	r3, #40	; 0x28
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	f107 010c 	add.w	r1, r7, #12
 801097e:	4610      	mov	r0, r2
 8010980:	4798      	blx	r3
        s++;
 8010982:	683b      	ldr	r3, [r7, #0]
 8010984:	3301      	adds	r3, #1
 8010986:	603b      	str	r3, [r7, #0]
    while (*s) {
 8010988:	e7bb      	b.n	8010902 <_ZN18TeamCityTestOutput12printEscapedEPKc+0xa>
    }
}
 801098a:	bf00      	nop
 801098c:	3710      	adds	r7, #16
 801098e:	46bd      	mov	sp, r7
 8010990:	bd80      	pop	{r7, pc}
	...

08010994 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure>:

void TeamCityTestOutput::printFailure(const TestFailure& failure)
{
 8010994:	b5b0      	push	{r4, r5, r7, lr}
 8010996:	b08a      	sub	sp, #40	; 0x28
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
 801099c:	6039      	str	r1, [r7, #0]
    print("##teamcity[testFailed name='");
 801099e:	687a      	ldr	r2, [r7, #4]
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	332c      	adds	r3, #44	; 0x2c
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	4968      	ldr	r1, [pc, #416]	; (8010b4c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1b8>)
 80109aa:	4610      	mov	r0, r2
 80109ac:	4798      	blx	r3
    printEscaped(failure.getTestNameOnly().asCharString());
 80109ae:	683b      	ldr	r3, [r7, #0]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	3310      	adds	r3, #16
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	f107 0208 	add.w	r2, r7, #8
 80109ba:	6839      	ldr	r1, [r7, #0]
 80109bc:	4610      	mov	r0, r2
 80109be:	4798      	blx	r3
 80109c0:	f107 0308 	add.w	r3, r7, #8
 80109c4:	4618      	mov	r0, r3
 80109c6:	f7fe fdfb 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 80109ca:	4603      	mov	r3, r0
 80109cc:	4619      	mov	r1, r3
 80109ce:	6878      	ldr	r0, [r7, #4]
 80109d0:	f7ff ff92 	bl	80108f8 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 80109d4:	f107 0308 	add.w	r3, r7, #8
 80109d8:	4618      	mov	r0, r3
 80109da:	f7fe fe1e 	bl	800f61a <_ZN12SimpleStringD1Ev>
    print("' message='");
 80109de:	687a      	ldr	r2, [r7, #4]
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	332c      	adds	r3, #44	; 0x2c
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	4959      	ldr	r1, [pc, #356]	; (8010b50 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1bc>)
 80109ea:	4610      	mov	r0, r2
 80109ec:	4798      	blx	r3
    if (failure.isOutsideTestFile() || failure.isInHelperFunction()) {
 80109ee:	6838      	ldr	r0, [r7, #0]
 80109f0:	f000 fa15 	bl	8010e1e <_ZNK11TestFailure17isOutsideTestFileEv>
 80109f4:	4603      	mov	r3, r0
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d105      	bne.n	8010a06 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x72>
 80109fa:	6838      	ldr	r0, [r7, #0]
 80109fc:	f000 fa21 	bl	8010e42 <_ZNK11TestFailure18isInHelperFunctionEv>
 8010a00:	4603      	mov	r3, r0
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d001      	beq.n	8010a0a <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x76>
 8010a06:	2301      	movs	r3, #1
 8010a08:	e000      	b.n	8010a0c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x78>
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d042      	beq.n	8010a96 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x102>
        print("TEST failed (");
 8010a10:	687a      	ldr	r2, [r7, #4]
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	332c      	adds	r3, #44	; 0x2c
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	494e      	ldr	r1, [pc, #312]	; (8010b54 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c0>)
 8010a1c:	4610      	mov	r0, r2
 8010a1e:	4798      	blx	r3
        print(failure.getTestFileName().asCharString());
 8010a20:	687d      	ldr	r5, [r7, #4]
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	332c      	adds	r3, #44	; 0x2c
 8010a28:	681c      	ldr	r4, [r3, #0]
 8010a2a:	683b      	ldr	r3, [r7, #0]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	331c      	adds	r3, #28
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	f107 0210 	add.w	r2, r7, #16
 8010a36:	6839      	ldr	r1, [r7, #0]
 8010a38:	4610      	mov	r0, r2
 8010a3a:	4798      	blx	r3
 8010a3c:	f107 0310 	add.w	r3, r7, #16
 8010a40:	4618      	mov	r0, r3
 8010a42:	f7fe fdbd 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 8010a46:	4603      	mov	r3, r0
 8010a48:	4619      	mov	r1, r3
 8010a4a:	4628      	mov	r0, r5
 8010a4c:	47a0      	blx	r4
 8010a4e:	f107 0310 	add.w	r3, r7, #16
 8010a52:	4618      	mov	r0, r3
 8010a54:	f7fe fde1 	bl	800f61a <_ZN12SimpleStringD1Ev>
        print(":");
 8010a58:	687a      	ldr	r2, [r7, #4]
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	332c      	adds	r3, #44	; 0x2c
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	493d      	ldr	r1, [pc, #244]	; (8010b58 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 8010a64:	4610      	mov	r0, r2
 8010a66:	4798      	blx	r3
        print(failure.getTestLineNumber());
 8010a68:	687d      	ldr	r5, [r7, #4]
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	3334      	adds	r3, #52	; 0x34
 8010a70:	681c      	ldr	r4, [r3, #0]
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	3320      	adds	r3, #32
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	6838      	ldr	r0, [r7, #0]
 8010a7c:	4798      	blx	r3
 8010a7e:	4603      	mov	r3, r0
 8010a80:	4619      	mov	r1, r3
 8010a82:	4628      	mov	r0, r5
 8010a84:	47a0      	blx	r4
        print("): ");
 8010a86:	687a      	ldr	r2, [r7, #4]
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	332c      	adds	r3, #44	; 0x2c
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	4932      	ldr	r1, [pc, #200]	; (8010b5c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c8>)
 8010a92:	4610      	mov	r0, r2
 8010a94:	4798      	blx	r3
    }

    printEscaped(failure.getFileName().asCharString());
 8010a96:	683b      	ldr	r3, [r7, #0]
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	3308      	adds	r3, #8
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	f107 0218 	add.w	r2, r7, #24
 8010aa2:	6839      	ldr	r1, [r7, #0]
 8010aa4:	4610      	mov	r0, r2
 8010aa6:	4798      	blx	r3
 8010aa8:	f107 0318 	add.w	r3, r7, #24
 8010aac:	4618      	mov	r0, r3
 8010aae:	f7fe fd87 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	4619      	mov	r1, r3
 8010ab6:	6878      	ldr	r0, [r7, #4]
 8010ab8:	f7ff ff1e 	bl	80108f8 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 8010abc:	f107 0318 	add.w	r3, r7, #24
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	f7fe fdaa 	bl	800f61a <_ZN12SimpleStringD1Ev>
    print(":");
 8010ac6:	687a      	ldr	r2, [r7, #4]
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	332c      	adds	r3, #44	; 0x2c
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	4921      	ldr	r1, [pc, #132]	; (8010b58 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 8010ad2:	4610      	mov	r0, r2
 8010ad4:	4798      	blx	r3
    print(failure.getFailureLineNumber());
 8010ad6:	687d      	ldr	r5, [r7, #4]
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	3334      	adds	r3, #52	; 0x34
 8010ade:	681c      	ldr	r4, [r3, #0]
 8010ae0:	683b      	ldr	r3, [r7, #0]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	3314      	adds	r3, #20
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	6838      	ldr	r0, [r7, #0]
 8010aea:	4798      	blx	r3
 8010aec:	4603      	mov	r3, r0
 8010aee:	4619      	mov	r1, r3
 8010af0:	4628      	mov	r0, r5
 8010af2:	47a0      	blx	r4

    print("' details='");
 8010af4:	687a      	ldr	r2, [r7, #4]
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	332c      	adds	r3, #44	; 0x2c
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	4918      	ldr	r1, [pc, #96]	; (8010b60 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1cc>)
 8010b00:	4610      	mov	r0, r2
 8010b02:	4798      	blx	r3
    printEscaped(failure.getMessage().asCharString());
 8010b04:	683b      	ldr	r3, [r7, #0]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	3318      	adds	r3, #24
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	f107 0220 	add.w	r2, r7, #32
 8010b10:	6839      	ldr	r1, [r7, #0]
 8010b12:	4610      	mov	r0, r2
 8010b14:	4798      	blx	r3
 8010b16:	f107 0320 	add.w	r3, r7, #32
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	f7fe fd50 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 8010b20:	4603      	mov	r3, r0
 8010b22:	4619      	mov	r1, r3
 8010b24:	6878      	ldr	r0, [r7, #4]
 8010b26:	f7ff fee7 	bl	80108f8 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 8010b2a:	f107 0320 	add.w	r3, r7, #32
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f7fe fd73 	bl	800f61a <_ZN12SimpleStringD1Ev>
    print("']\n");
 8010b34:	687a      	ldr	r2, [r7, #4]
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	332c      	adds	r3, #44	; 0x2c
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	4909      	ldr	r1, [pc, #36]	; (8010b64 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1d0>)
 8010b40:	4610      	mov	r0, r2
 8010b42:	4798      	blx	r3
}
 8010b44:	bf00      	nop
 8010b46:	3728      	adds	r7, #40	; 0x28
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	bdb0      	pop	{r4, r5, r7, pc}
 8010b4c:	080271c8 	.word	0x080271c8
 8010b50:	080271e8 	.word	0x080271e8
 8010b54:	080271f4 	.word	0x080271f4
 8010b58:	08027204 	.word	0x08027204
 8010b5c:	08027208 	.word	0x08027208
 8010b60:	0802720c 	.word	0x0802720c
 8010b64:	0802712c 	.word	0x0802712c

08010b68 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>:
TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& theMessage) :
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNumber), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
{
}

TestFailure::TestFailure(UtestShell* test, const SimpleString& theMessage) :
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b084      	sub	sp, #16
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	60f8      	str	r0, [r7, #12]
 8010b70:	60b9      	str	r1, [r7, #8]
 8010b72:	607a      	str	r2, [r7, #4]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(test->getFile()), lineNumber_(test->getLineNumber()), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
 8010b74:	4a1a      	ldr	r2, [pc, #104]	; (8010be0 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString+0x78>)
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	601a      	str	r2, [r3, #0]
 8010b7a:	68bb      	ldr	r3, [r7, #8]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	3314      	adds	r3, #20
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	68fa      	ldr	r2, [r7, #12]
 8010b84:	3204      	adds	r2, #4
 8010b86:	68b9      	ldr	r1, [r7, #8]
 8010b88:	4610      	mov	r0, r2
 8010b8a:	4798      	blx	r3
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	330c      	adds	r3, #12
 8010b90:	68b9      	ldr	r1, [r7, #8]
 8010b92:	4618      	mov	r0, r3
 8010b94:	f004 fb84 	bl	80152a0 <_ZNK10UtestShell7getNameEv>
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	3314      	adds	r3, #20
 8010b9c:	68b9      	ldr	r1, [r7, #8]
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	f004 fc4f 	bl	8015442 <_ZNK10UtestShell7getFileEv>
 8010ba4:	68b8      	ldr	r0, [r7, #8]
 8010ba6:	f004 fc5b 	bl	8015460 <_ZNK10UtestShell13getLineNumberEv>
 8010baa:	4602      	mov	r2, r0
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	61da      	str	r2, [r3, #28]
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	3320      	adds	r3, #32
 8010bb4:	68b9      	ldr	r1, [r7, #8]
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	f004 fc43 	bl	8015442 <_ZNK10UtestShell7getFileEv>
 8010bbc:	68b8      	ldr	r0, [r7, #8]
 8010bbe:	f004 fc4f 	bl	8015460 <_ZNK10UtestShell13getLineNumberEv>
 8010bc2:	4602      	mov	r2, r0
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	629a      	str	r2, [r3, #40]	; 0x28
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	332c      	adds	r3, #44	; 0x2c
 8010bcc:	6879      	ldr	r1, [r7, #4]
 8010bce:	4618      	mov	r0, r3
 8010bd0:	f7fe f9bf 	bl	800ef52 <_ZN12SimpleStringC1ERKS_>
{
}
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	3710      	adds	r7, #16
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bd80      	pop	{r7, pc}
 8010bde:	bf00      	nop
 8010be0:	0802b570 	.word	0x0802b570

08010be4 <_ZN11TestFailureC1EP10UtestShellPKcj>:

TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNum) :
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b084      	sub	sp, #16
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	60f8      	str	r0, [r7, #12]
 8010bec:	60b9      	str	r1, [r7, #8]
 8010bee:	607a      	str	r2, [r7, #4]
 8010bf0:	603b      	str	r3, [r7, #0]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNum), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_("no message")
 8010bf2:	4a19      	ldr	r2, [pc, #100]	; (8010c58 <_ZN11TestFailureC1EP10UtestShellPKcj+0x74>)
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	601a      	str	r2, [r3, #0]
 8010bf8:	68bb      	ldr	r3, [r7, #8]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	3314      	adds	r3, #20
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	68fa      	ldr	r2, [r7, #12]
 8010c02:	3204      	adds	r2, #4
 8010c04:	68b9      	ldr	r1, [r7, #8]
 8010c06:	4610      	mov	r0, r2
 8010c08:	4798      	blx	r3
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	330c      	adds	r3, #12
 8010c0e:	68b9      	ldr	r1, [r7, #8]
 8010c10:	4618      	mov	r0, r3
 8010c12:	f004 fb45 	bl	80152a0 <_ZNK10UtestShell7getNameEv>
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	3314      	adds	r3, #20
 8010c1a:	6879      	ldr	r1, [r7, #4]
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f7fe f944 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	683a      	ldr	r2, [r7, #0]
 8010c26:	61da      	str	r2, [r3, #28]
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	3320      	adds	r3, #32
 8010c2c:	68b9      	ldr	r1, [r7, #8]
 8010c2e:	4618      	mov	r0, r3
 8010c30:	f004 fc07 	bl	8015442 <_ZNK10UtestShell7getFileEv>
 8010c34:	68b8      	ldr	r0, [r7, #8]
 8010c36:	f004 fc13 	bl	8015460 <_ZNK10UtestShell13getLineNumberEv>
 8010c3a:	4602      	mov	r2, r0
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	629a      	str	r2, [r3, #40]	; 0x28
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	332c      	adds	r3, #44	; 0x2c
 8010c44:	4905      	ldr	r1, [pc, #20]	; (8010c5c <_ZN11TestFailureC1EP10UtestShellPKcj+0x78>)
 8010c46:	4618      	mov	r0, r3
 8010c48:	f7fe f92f 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
{
}
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	4618      	mov	r0, r3
 8010c50:	3710      	adds	r7, #16
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}
 8010c56:	bf00      	nop
 8010c58:	0802b570 	.word	0x0802b570
 8010c5c:	08027218 	.word	0x08027218

08010c60 <_ZN11TestFailureC1ERKS_>:

TestFailure::TestFailure(const TestFailure& f) :
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b082      	sub	sp, #8
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	6078      	str	r0, [r7, #4]
 8010c68:	6039      	str	r1, [r7, #0]
    testName_(f.testName_), testNameOnly_(f.testNameOnly_), fileName_(f.fileName_), lineNumber_(f.lineNumber_), testFileName_(f.testFileName_), testLineNumber_(f.testLineNumber_), message_(f.message_)
 8010c6a:	4a1e      	ldr	r2, [pc, #120]	; (8010ce4 <_ZN11TestFailureC1ERKS_+0x84>)
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	601a      	str	r2, [r3, #0]
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	1d1a      	adds	r2, r3, #4
 8010c74:	683b      	ldr	r3, [r7, #0]
 8010c76:	3304      	adds	r3, #4
 8010c78:	4619      	mov	r1, r3
 8010c7a:	4610      	mov	r0, r2
 8010c7c:	f7fe f969 	bl	800ef52 <_ZN12SimpleStringC1ERKS_>
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	f103 020c 	add.w	r2, r3, #12
 8010c86:	683b      	ldr	r3, [r7, #0]
 8010c88:	330c      	adds	r3, #12
 8010c8a:	4619      	mov	r1, r3
 8010c8c:	4610      	mov	r0, r2
 8010c8e:	f7fe f960 	bl	800ef52 <_ZN12SimpleStringC1ERKS_>
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	f103 0214 	add.w	r2, r3, #20
 8010c98:	683b      	ldr	r3, [r7, #0]
 8010c9a:	3314      	adds	r3, #20
 8010c9c:	4619      	mov	r1, r3
 8010c9e:	4610      	mov	r0, r2
 8010ca0:	f7fe f957 	bl	800ef52 <_ZN12SimpleStringC1ERKS_>
 8010ca4:	683b      	ldr	r3, [r7, #0]
 8010ca6:	69da      	ldr	r2, [r3, #28]
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	61da      	str	r2, [r3, #28]
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	f103 0220 	add.w	r2, r3, #32
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	3320      	adds	r3, #32
 8010cb6:	4619      	mov	r1, r3
 8010cb8:	4610      	mov	r0, r2
 8010cba:	f7fe f94a 	bl	800ef52 <_ZN12SimpleStringC1ERKS_>
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	629a      	str	r2, [r3, #40]	; 0x28
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8010ccc:	683b      	ldr	r3, [r7, #0]
 8010cce:	332c      	adds	r3, #44	; 0x2c
 8010cd0:	4619      	mov	r1, r3
 8010cd2:	4610      	mov	r0, r2
 8010cd4:	f7fe f93d 	bl	800ef52 <_ZN12SimpleStringC1ERKS_>
{
}
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	4618      	mov	r0, r3
 8010cdc:	3708      	adds	r7, #8
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd80      	pop	{r7, pc}
 8010ce2:	bf00      	nop
 8010ce4:	0802b570 	.word	0x0802b570

08010ce8 <_ZN11TestFailureD1Ev>:


TestFailure::~TestFailure()
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b082      	sub	sp, #8
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
 8010cf0:	4a10      	ldr	r2, [pc, #64]	; (8010d34 <_ZN11TestFailureD1Ev+0x4c>)
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	601a      	str	r2, [r3, #0]
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	332c      	adds	r3, #44	; 0x2c
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f7fe fc8d 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	3320      	adds	r3, #32
 8010d04:	4618      	mov	r0, r3
 8010d06:	f7fe fc88 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	3314      	adds	r3, #20
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f7fe fc83 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	330c      	adds	r3, #12
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f7fe fc7e 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	3304      	adds	r3, #4
 8010d22:	4618      	mov	r0, r3
 8010d24:	f7fe fc79 	bl	800f61a <_ZN12SimpleStringD1Ev>
{
}
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	3708      	adds	r7, #8
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	bd80      	pop	{r7, pc}
 8010d32:	bf00      	nop
 8010d34:	0802b570 	.word	0x0802b570

08010d38 <_ZN11TestFailureD0Ev>:
TestFailure::~TestFailure()
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b082      	sub	sp, #8
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
}
 8010d40:	6878      	ldr	r0, [r7, #4]
 8010d42:	f7ff ffd1 	bl	8010ce8 <_ZN11TestFailureD1Ev>
 8010d46:	2134      	movs	r1, #52	; 0x34
 8010d48:	6878      	ldr	r0, [r7, #4]
 8010d4a:	f7fb fcff 	bl	800c74c <_ZdlPvj>
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	4618      	mov	r0, r3
 8010d52:	3708      	adds	r7, #8
 8010d54:	46bd      	mov	sp, r7
 8010d56:	bd80      	pop	{r7, pc}

08010d58 <_ZNK11TestFailure11getFileNameEv>:

SimpleString TestFailure::getFileName() const
{
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b082      	sub	sp, #8
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]
 8010d60:	6039      	str	r1, [r7, #0]
    return fileName_;
 8010d62:	683b      	ldr	r3, [r7, #0]
 8010d64:	3314      	adds	r3, #20
 8010d66:	4619      	mov	r1, r3
 8010d68:	6878      	ldr	r0, [r7, #4]
 8010d6a:	f7fe f8f2 	bl	800ef52 <_ZN12SimpleStringC1ERKS_>
}
 8010d6e:	6878      	ldr	r0, [r7, #4]
 8010d70:	3708      	adds	r7, #8
 8010d72:	46bd      	mov	sp, r7
 8010d74:	bd80      	pop	{r7, pc}

08010d76 <_ZNK11TestFailure15getTestFileNameEv>:

SimpleString TestFailure::getTestFileName() const
{
 8010d76:	b580      	push	{r7, lr}
 8010d78:	b082      	sub	sp, #8
 8010d7a:	af00      	add	r7, sp, #0
 8010d7c:	6078      	str	r0, [r7, #4]
 8010d7e:	6039      	str	r1, [r7, #0]
    return testFileName_;
 8010d80:	683b      	ldr	r3, [r7, #0]
 8010d82:	3320      	adds	r3, #32
 8010d84:	4619      	mov	r1, r3
 8010d86:	6878      	ldr	r0, [r7, #4]
 8010d88:	f7fe f8e3 	bl	800ef52 <_ZN12SimpleStringC1ERKS_>
}
 8010d8c:	6878      	ldr	r0, [r7, #4]
 8010d8e:	3708      	adds	r7, #8
 8010d90:	46bd      	mov	sp, r7
 8010d92:	bd80      	pop	{r7, pc}

08010d94 <_ZNK11TestFailure11getTestNameEv>:

SimpleString TestFailure::getTestName() const
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b082      	sub	sp, #8
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
 8010d9c:	6039      	str	r1, [r7, #0]
    return testName_;
 8010d9e:	683b      	ldr	r3, [r7, #0]
 8010da0:	3304      	adds	r3, #4
 8010da2:	4619      	mov	r1, r3
 8010da4:	6878      	ldr	r0, [r7, #4]
 8010da6:	f7fe f8d4 	bl	800ef52 <_ZN12SimpleStringC1ERKS_>
}
 8010daa:	6878      	ldr	r0, [r7, #4]
 8010dac:	3708      	adds	r7, #8
 8010dae:	46bd      	mov	sp, r7
 8010db0:	bd80      	pop	{r7, pc}

08010db2 <_ZNK11TestFailure15getTestNameOnlyEv>:

SimpleString TestFailure::getTestNameOnly() const
{
 8010db2:	b580      	push	{r7, lr}
 8010db4:	b082      	sub	sp, #8
 8010db6:	af00      	add	r7, sp, #0
 8010db8:	6078      	str	r0, [r7, #4]
 8010dba:	6039      	str	r1, [r7, #0]
    return testNameOnly_;
 8010dbc:	683b      	ldr	r3, [r7, #0]
 8010dbe:	330c      	adds	r3, #12
 8010dc0:	4619      	mov	r1, r3
 8010dc2:	6878      	ldr	r0, [r7, #4]
 8010dc4:	f7fe f8c5 	bl	800ef52 <_ZN12SimpleStringC1ERKS_>
}
 8010dc8:	6878      	ldr	r0, [r7, #4]
 8010dca:	3708      	adds	r7, #8
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}

08010dd0 <_ZNK11TestFailure20getFailureLineNumberEv>:

size_t TestFailure::getFailureLineNumber() const
{
 8010dd0:	b480      	push	{r7}
 8010dd2:	b083      	sub	sp, #12
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	69db      	ldr	r3, [r3, #28]
}
 8010ddc:	4618      	mov	r0, r3
 8010dde:	370c      	adds	r7, #12
 8010de0:	46bd      	mov	sp, r7
 8010de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de6:	4770      	bx	lr

08010de8 <_ZNK11TestFailure17getTestLineNumberEv>:

size_t TestFailure::getTestLineNumber() const
{
 8010de8:	b480      	push	{r7}
 8010dea:	b083      	sub	sp, #12
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
    return testLineNumber_;
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8010df4:	4618      	mov	r0, r3
 8010df6:	370c      	adds	r7, #12
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dfe:	4770      	bx	lr

08010e00 <_ZNK11TestFailure10getMessageEv>:

SimpleString TestFailure::getMessage() const
{
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b082      	sub	sp, #8
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
 8010e08:	6039      	str	r1, [r7, #0]
    return message_;
 8010e0a:	683b      	ldr	r3, [r7, #0]
 8010e0c:	332c      	adds	r3, #44	; 0x2c
 8010e0e:	4619      	mov	r1, r3
 8010e10:	6878      	ldr	r0, [r7, #4]
 8010e12:	f7fe f89e 	bl	800ef52 <_ZN12SimpleStringC1ERKS_>
}
 8010e16:	6878      	ldr	r0, [r7, #4]
 8010e18:	3708      	adds	r7, #8
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	bd80      	pop	{r7, pc}

08010e1e <_ZNK11TestFailure17isOutsideTestFileEv>:

bool TestFailure::isOutsideTestFile() const
{
 8010e1e:	b580      	push	{r7, lr}
 8010e20:	b082      	sub	sp, #8
 8010e22:	af00      	add	r7, sp, #0
 8010e24:	6078      	str	r0, [r7, #4]
    return testFileName_ != fileName_;
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	f103 0220 	add.w	r2, r3, #32
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	3314      	adds	r3, #20
 8010e30:	4619      	mov	r1, r3
 8010e32:	4610      	mov	r0, r2
 8010e34:	f7fe fc42 	bl	800f6bc <_ZneRK12SimpleStringS1_>
 8010e38:	4603      	mov	r3, r0
}
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	3708      	adds	r7, #8
 8010e3e:	46bd      	mov	sp, r7
 8010e40:	bd80      	pop	{r7, pc}

08010e42 <_ZNK11TestFailure18isInHelperFunctionEv>:

bool TestFailure::isInHelperFunction() const
{
 8010e42:	b480      	push	{r7}
 8010e44:	b083      	sub	sp, #12
 8010e46:	af00      	add	r7, sp, #0
 8010e48:	6078      	str	r0, [r7, #4]
    return lineNumber_ < testLineNumber_;
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	69da      	ldr	r2, [r3, #28]
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e52:	429a      	cmp	r2, r3
 8010e54:	bf34      	ite	cc
 8010e56:	2301      	movcc	r3, #1
 8010e58:	2300      	movcs	r3, #0
 8010e5a:	b2db      	uxtb	r3, r3
}
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	370c      	adds	r7, #12
 8010e60:	46bd      	mov	sp, r7
 8010e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e66:	4770      	bx	lr

08010e68 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>:

SimpleString TestFailure::createButWasString(const SimpleString& expected, const SimpleString& actual)
{
 8010e68:	b590      	push	{r4, r7, lr}
 8010e6a:	b085      	sub	sp, #20
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	60f8      	str	r0, [r7, #12]
 8010e70:	60b9      	str	r1, [r7, #8]
 8010e72:	607a      	str	r2, [r7, #4]
 8010e74:	603b      	str	r3, [r7, #0]
    return StringFromFormat("expected <%s>\n\tbut was  <%s>", expected.asCharString(), actual.asCharString());
 8010e76:	6878      	ldr	r0, [r7, #4]
 8010e78:	f7fe fba2 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 8010e7c:	4604      	mov	r4, r0
 8010e7e:	6838      	ldr	r0, [r7, #0]
 8010e80:	f7fe fb9e 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 8010e84:	4603      	mov	r3, r0
 8010e86:	68f8      	ldr	r0, [r7, #12]
 8010e88:	4622      	mov	r2, r4
 8010e8a:	4903      	ldr	r1, [pc, #12]	; (8010e98 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_+0x30>)
 8010e8c:	f7ff f8cc 	bl	8010028 <_Z16StringFromFormatPKcz>
}
 8010e90:	68f8      	ldr	r0, [r7, #12]
 8010e92:	3714      	adds	r7, #20
 8010e94:	46bd      	mov	sp, r7
 8010e96:	bd90      	pop	{r4, r7, pc}
 8010e98:	08027224 	.word	0x08027224

08010e9c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>:

SimpleString TestFailure::createDifferenceAtPosString(const SimpleString& actual, size_t offset, size_t reportedPosition)
{
 8010e9c:	b590      	push	{r4, r7, lr}
 8010e9e:	b097      	sub	sp, #92	; 0x5c
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	60f8      	str	r0, [r7, #12]
 8010ea4:	60b9      	str	r1, [r7, #8]
 8010ea6:	607a      	str	r2, [r7, #4]
 8010ea8:	603b      	str	r3, [r7, #0]
    SimpleString result;
 8010eaa:	494c      	ldr	r1, [pc, #304]	; (8010fdc <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x140>)
 8010eac:	68f8      	ldr	r0, [r7, #12]
 8010eae:	f7fd fffc 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
    const size_t extraCharactersWindow = 20;
 8010eb2:	2314      	movs	r3, #20
 8010eb4:	657b      	str	r3, [r7, #84]	; 0x54
    const size_t halfOfExtraCharactersWindow = extraCharactersWindow / 2;
 8010eb6:	230a      	movs	r3, #10
 8010eb8:	653b      	str	r3, [r7, #80]	; 0x50

    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 8010eba:	f107 0320 	add.w	r3, r7, #32
 8010ebe:	220a      	movs	r2, #10
 8010ec0:	4947      	ldr	r1, [pc, #284]	; (8010fe0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f7fe f80c 	bl	800eee0 <_ZN12SimpleStringC1EPKcj>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 8010ec8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010ecc:	f107 0120 	add.w	r1, r7, #32
 8010ed0:	687a      	ldr	r2, [r7, #4]
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	f7fe fc03 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 8010ed8:	f107 0318 	add.w	r3, r7, #24
 8010edc:	f107 0220 	add.w	r2, r7, #32
 8010ee0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	f7fe fbfa 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 8010eea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010eee:	4618      	mov	r0, r3
 8010ef0:	f7fe fb93 	bl	800f61a <_ZN12SimpleStringD1Ev>
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 8010ef4:	f107 0310 	add.w	r3, r7, #16
 8010ef8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010efa:	493a      	ldr	r1, [pc, #232]	; (8010fe4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x148>)
 8010efc:	4618      	mov	r0, r3
 8010efe:	f7ff f893 	bl	8010028 <_Z16StringFromFormatPKcz>

    result += "\n";
 8010f02:	4939      	ldr	r1, [pc, #228]	; (8010fe8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x14c>)
 8010f04:	68f8      	ldr	r0, [r7, #12]
 8010f06:	f7fe fc17 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    result += StringFromFormat("\t%s%s>\n", differentString.asCharString(), actualString.subString(offset, extraCharactersWindow).asCharString());
 8010f0a:	f107 0310 	add.w	r3, r7, #16
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f7fe fb56 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 8010f14:	4604      	mov	r4, r0
 8010f16:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8010f1a:	f107 0118 	add.w	r1, r7, #24
 8010f1e:	2314      	movs	r3, #20
 8010f20:	683a      	ldr	r2, [r7, #0]
 8010f22:	f7fe fc83 	bl	800f82c <_ZNK12SimpleString9subStringEjj>
 8010f26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f7fe fb48 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 8010f30:	4603      	mov	r3, r0
 8010f32:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8010f36:	4622      	mov	r2, r4
 8010f38:	492c      	ldr	r1, [pc, #176]	; (8010fec <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x150>)
 8010f3a:	f7ff f875 	bl	8010028 <_Z16StringFromFormatPKcz>
 8010f3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010f42:	4619      	mov	r1, r3
 8010f44:	68f8      	ldr	r0, [r7, #12]
 8010f46:	f7fe fbe5 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 8010f4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010f4e:	4618      	mov	r0, r3
 8010f50:	f7fe fb63 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8010f54:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010f58:	4618      	mov	r0, r3
 8010f5a:	f7fe fb5e 	bl	800f61a <_ZN12SimpleStringD1Ev>


    result += StringFromFormat("\t%s^", SimpleString(" ", (differentString.size() + halfOfExtraCharactersWindow)).asCharString());
 8010f5e:	f107 0310 	add.w	r3, r7, #16
 8010f62:	4618      	mov	r0, r3
 8010f64:	f7fe fb38 	bl	800f5d8 <_ZNK12SimpleString4sizeEv>
 8010f68:	4603      	mov	r3, r0
 8010f6a:	f103 020a 	add.w	r2, r3, #10
 8010f6e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010f72:	491b      	ldr	r1, [pc, #108]	; (8010fe0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 8010f74:	4618      	mov	r0, r3
 8010f76:	f7fd ffb3 	bl	800eee0 <_ZN12SimpleStringC1EPKcj>
 8010f7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010f7e:	4618      	mov	r0, r3
 8010f80:	f7fe fb1e 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 8010f84:	4602      	mov	r2, r0
 8010f86:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010f8a:	4919      	ldr	r1, [pc, #100]	; (8010ff0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x154>)
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	f7ff f84b 	bl	8010028 <_Z16StringFromFormatPKcz>
 8010f92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010f96:	4619      	mov	r1, r3
 8010f98:	68f8      	ldr	r0, [r7, #12]
 8010f9a:	f7fe fbbb 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 8010f9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	f7fe fb39 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8010fa8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010fac:	4618      	mov	r0, r3
 8010fae:	f7fe fb34 	bl	800f61a <_ZN12SimpleStringD1Ev>
    return result;
 8010fb2:	bf00      	nop
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 8010fb4:	f107 0310 	add.w	r3, r7, #16
 8010fb8:	4618      	mov	r0, r3
 8010fba:	f7fe fb2e 	bl	800f61a <_ZN12SimpleStringD1Ev>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 8010fbe:	f107 0318 	add.w	r3, r7, #24
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	f7fe fb29 	bl	800f61a <_ZN12SimpleStringD1Ev>
    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 8010fc8:	f107 0320 	add.w	r3, r7, #32
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f7fe fb24 	bl	800f61a <_ZN12SimpleStringD1Ev>
    return result;
 8010fd2:	bf00      	nop
}
 8010fd4:	68f8      	ldr	r0, [r7, #12]
 8010fd6:	375c      	adds	r7, #92	; 0x5c
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	bd90      	pop	{r4, r7, pc}
 8010fdc:	08027244 	.word	0x08027244
 8010fe0:	08027248 	.word	0x08027248
 8010fe4:	0802724c 	.word	0x0802724c
 8010fe8:	08027274 	.word	0x08027274
 8010fec:	08027278 	.word	0x08027278
 8010ff0:	08027280 	.word	0x08027280

08010ff4 <_ZN11TestFailure14createUserTextERK12SimpleString>:

SimpleString TestFailure::createUserText(const SimpleString& text)
{
 8010ff4:	b590      	push	{r4, r7, lr}
 8010ff6:	b087      	sub	sp, #28
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	60f8      	str	r0, [r7, #12]
 8010ffc:	60b9      	str	r1, [r7, #8]
 8010ffe:	607a      	str	r2, [r7, #4]
    SimpleString userMessage = "";
 8011000:	491a      	ldr	r1, [pc, #104]	; (801106c <_ZN11TestFailure14createUserTextERK12SimpleString+0x78>)
 8011002:	68f8      	ldr	r0, [r7, #12]
 8011004:	f7fd ff51 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
    if (!text.isEmpty())
 8011008:	6878      	ldr	r0, [r7, #4]
 801100a:	f7fe faf5 	bl	800f5f8 <_ZNK12SimpleString7isEmptyEv>
 801100e:	4603      	mov	r3, r0
 8011010:	f083 0301 	eor.w	r3, r3, #1
 8011014:	b2db      	uxtb	r3, r3
 8011016:	2b00      	cmp	r3, #0
 8011018:	d022      	beq.n	8011060 <_ZN11TestFailure14createUserTextERK12SimpleString+0x6c>
    {
        //This is a kludge to turn off "Message: " for this case.
        //I don't think "Message: " adds anything, as you get to see the
        //message. I propose we remove "Message: " lead in
        if (!text.startsWith("LONGS_EQUAL"))
 801101a:	f107 0310 	add.w	r3, r7, #16
 801101e:	4914      	ldr	r1, [pc, #80]	; (8011070 <_ZN11TestFailure14createUserTextERK12SimpleString+0x7c>)
 8011020:	4618      	mov	r0, r3
 8011022:	f7fd ff42 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8011026:	f107 0310 	add.w	r3, r7, #16
 801102a:	4619      	mov	r1, r3
 801102c:	6878      	ldr	r0, [r7, #4]
 801102e:	f7fe f800 	bl	800f032 <_ZNK12SimpleString10startsWithERKS_>
 8011032:	4603      	mov	r3, r0
 8011034:	f083 0301 	eor.w	r3, r3, #1
 8011038:	b2dc      	uxtb	r4, r3
 801103a:	f107 0310 	add.w	r3, r7, #16
 801103e:	4618      	mov	r0, r3
 8011040:	f7fe faeb 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8011044:	2c00      	cmp	r4, #0
 8011046:	d003      	beq.n	8011050 <_ZN11TestFailure14createUserTextERK12SimpleString+0x5c>
            userMessage += "Message: ";
 8011048:	490a      	ldr	r1, [pc, #40]	; (8011074 <_ZN11TestFailure14createUserTextERK12SimpleString+0x80>)
 801104a:	68f8      	ldr	r0, [r7, #12]
 801104c:	f7fe fb74 	bl	800f738 <_ZN12SimpleStringpLEPKc>
        userMessage += text;
 8011050:	6879      	ldr	r1, [r7, #4]
 8011052:	68f8      	ldr	r0, [r7, #12]
 8011054:	f7fe fb5e 	bl	800f714 <_ZN12SimpleStringpLERKS_>
        userMessage += "\n\t";
 8011058:	4907      	ldr	r1, [pc, #28]	; (8011078 <_ZN11TestFailure14createUserTextERK12SimpleString+0x84>)
 801105a:	68f8      	ldr	r0, [r7, #12]
 801105c:	f7fe fb6c 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    }
    return userMessage;
 8011060:	bf00      	nop
}
 8011062:	68f8      	ldr	r0, [r7, #12]
 8011064:	371c      	adds	r7, #28
 8011066:	46bd      	mov	sp, r7
 8011068:	bd90      	pop	{r4, r7, pc}
 801106a:	bf00      	nop
 801106c:	08027244 	.word	0x08027244
 8011070:	08027288 	.word	0x08027288
 8011074:	08027294 	.word	0x08027294
 8011078:	080272a0 	.word	0x080272a0

0801107c <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:
    message_ = createUserText(text);

    message_ += createButWasString(StringFromOrNull(expected), StringFromOrNull(actual));
}

EqualsFailure::EqualsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 801107c:	b590      	push	{r4, r7, lr}
 801107e:	b089      	sub	sp, #36	; 0x24
 8011080:	af00      	add	r7, sp, #0
 8011082:	60f8      	str	r0, [r7, #12]
 8011084:	60b9      	str	r1, [r7, #8]
 8011086:	607a      	str	r2, [r7, #4]
 8011088:	603b      	str	r3, [r7, #0]
    : TestFailure(test, fileName, lineNumber)
 801108a:	68f8      	ldr	r0, [r7, #12]
 801108c:	683b      	ldr	r3, [r7, #0]
 801108e:	687a      	ldr	r2, [r7, #4]
 8011090:	68b9      	ldr	r1, [r7, #8]
 8011092:	f7ff fda7 	bl	8010be4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8011096:	4a19      	ldr	r2, [pc, #100]	; (80110fc <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x80>)
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80110a2:	68f9      	ldr	r1, [r7, #12]
 80110a4:	f107 0310 	add.w	r3, r7, #16
 80110a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80110aa:	4618      	mov	r0, r3
 80110ac:	f7ff ffa2 	bl	8010ff4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 80110b0:	f107 0310 	add.w	r3, r7, #16
 80110b4:	4619      	mov	r1, r3
 80110b6:	4620      	mov	r0, r4
 80110b8:	f7fd ff63 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 80110bc:	f107 0310 	add.w	r3, r7, #16
 80110c0:	4618      	mov	r0, r3
 80110c2:	f7fe faaa 	bl	800f61a <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expected, actual);
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80110cc:	68f9      	ldr	r1, [r7, #12]
 80110ce:	f107 0018 	add.w	r0, r7, #24
 80110d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80110d6:	f7ff fec7 	bl	8010e68 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 80110da:	f107 0318 	add.w	r3, r7, #24
 80110de:	4619      	mov	r1, r3
 80110e0:	4620      	mov	r0, r4
 80110e2:	f7fe fb17 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 80110e6:	f107 0318 	add.w	r3, r7, #24
 80110ea:	4618      	mov	r0, r3
 80110ec:	f7fe fa95 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	4618      	mov	r0, r3
 80110f4:	3724      	adds	r7, #36	; 0x24
 80110f6:	46bd      	mov	sp, r7
 80110f8:	bd90      	pop	{r4, r7, pc}
 80110fa:	bf00      	nop
 80110fc:	0802b544 	.word	0x0802b544

08011100 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>:

DoublesEqualFailure::DoublesEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, double expected, double actual, double threshold, const SimpleString& text)
 8011100:	b5b0      	push	{r4, r5, r7, lr}
 8011102:	b094      	sub	sp, #80	; 0x50
 8011104:	af00      	add	r7, sp, #0
 8011106:	6278      	str	r0, [r7, #36]	; 0x24
 8011108:	6239      	str	r1, [r7, #32]
 801110a:	61fa      	str	r2, [r7, #28]
 801110c:	61bb      	str	r3, [r7, #24]
 801110e:	ed87 0b04 	vstr	d0, [r7, #16]
 8011112:	ed87 1b02 	vstr	d1, [r7, #8]
 8011116:	ed87 2b00 	vstr	d2, [r7]
: TestFailure(test, fileName, lineNumber)
 801111a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801111c:	69bb      	ldr	r3, [r7, #24]
 801111e:	69fa      	ldr	r2, [r7, #28]
 8011120:	6a39      	ldr	r1, [r7, #32]
 8011122:	f7ff fd5f 	bl	8010be4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8011126:	4a4a      	ldr	r2, [pc, #296]	; (8011250 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x150>)
 8011128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801112a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 801112c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801112e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011132:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011134:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011138:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801113a:	4618      	mov	r0, r3
 801113c:	f7ff ff5a 	bl	8010ff4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8011140:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011144:	4619      	mov	r1, r3
 8011146:	4620      	mov	r0, r4
 8011148:	f7fd ff1b 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 801114c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011150:	4618      	mov	r0, r3
 8011152:	f7fe fa62 	bl	800f61a <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFrom(expected, 7), StringFrom(actual, 7));
 8011156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011158:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801115c:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 801115e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011162:	2107      	movs	r1, #7
 8011164:	ed97 0b04 	vldr	d0, [r7, #16]
 8011168:	4618      	mov	r0, r3
 801116a:	f7fe ff1b 	bl	800ffa4 <_Z10StringFromdi>
 801116e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011172:	2107      	movs	r1, #7
 8011174:	ed97 0b02 	vldr	d0, [r7, #8]
 8011178:	4618      	mov	r0, r3
 801117a:	f7fe ff13 	bl	800ffa4 <_Z10StringFromdi>
 801117e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8011182:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011186:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801118a:	4629      	mov	r1, r5
 801118c:	f7ff fe6c 	bl	8010e68 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8011190:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011194:	4619      	mov	r1, r3
 8011196:	4620      	mov	r0, r4
 8011198:	f7fe fabc 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801119c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80111a0:	4618      	mov	r0, r3
 80111a2:	f7fe fa3a 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80111a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80111aa:	4618      	mov	r0, r3
 80111ac:	f7fe fa35 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80111b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80111b4:	4618      	mov	r0, r3
 80111b6:	f7fe fa30 	bl	800f61a <_ZN12SimpleStringD1Ev>
    message_ += " threshold used was <";
 80111ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111bc:	332c      	adds	r3, #44	; 0x2c
 80111be:	4925      	ldr	r1, [pc, #148]	; (8011254 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x154>)
 80111c0:	4618      	mov	r0, r3
 80111c2:	f7fe fab9 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(threshold, 7);
 80111c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111c8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80111cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80111d0:	2107      	movs	r1, #7
 80111d2:	ed97 0b00 	vldr	d0, [r7]
 80111d6:	4618      	mov	r0, r3
 80111d8:	f7fe fee4 	bl	800ffa4 <_Z10StringFromdi>
 80111dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80111e0:	4619      	mov	r1, r3
 80111e2:	4620      	mov	r0, r4
 80111e4:	f7fe fa96 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 80111e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80111ec:	4618      	mov	r0, r3
 80111ee:	f7fe fa14 	bl	800f61a <_ZN12SimpleStringD1Ev>
    message_ += ">";
 80111f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111f4:	332c      	adds	r3, #44	; 0x2c
 80111f6:	4918      	ldr	r1, [pc, #96]	; (8011258 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x158>)
 80111f8:	4618      	mov	r0, r3
 80111fa:	f7fe fa9d 	bl	800f738 <_ZN12SimpleStringpLEPKc>

    if (PlatformSpecificIsNan(expected) || PlatformSpecificIsNan(actual) || PlatformSpecificIsNan(threshold))
 80111fe:	4b17      	ldr	r3, [pc, #92]	; (801125c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	ed97 0b04 	vldr	d0, [r7, #16]
 8011206:	4798      	blx	r3
 8011208:	4603      	mov	r3, r0
 801120a:	2b00      	cmp	r3, #0
 801120c:	d10f      	bne.n	801122e <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 801120e:	4b13      	ldr	r3, [pc, #76]	; (801125c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	ed97 0b02 	vldr	d0, [r7, #8]
 8011216:	4798      	blx	r3
 8011218:	4603      	mov	r3, r0
 801121a:	2b00      	cmp	r3, #0
 801121c:	d107      	bne.n	801122e <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 801121e:	4b0f      	ldr	r3, [pc, #60]	; (801125c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	ed97 0b00 	vldr	d0, [r7]
 8011226:	4798      	blx	r3
 8011228:	4603      	mov	r3, r0
 801122a:	2b00      	cmp	r3, #0
 801122c:	d001      	beq.n	8011232 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x132>
 801122e:	2301      	movs	r3, #1
 8011230:	e000      	b.n	8011234 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x134>
 8011232:	2300      	movs	r3, #0
 8011234:	2b00      	cmp	r3, #0
 8011236:	d005      	beq.n	8011244 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x144>
        message_ += "\n\tCannot make comparisons with Nan";
 8011238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801123a:	332c      	adds	r3, #44	; 0x2c
 801123c:	4908      	ldr	r1, [pc, #32]	; (8011260 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x160>)
 801123e:	4618      	mov	r0, r3
 8011240:	f7fe fa7a 	bl	800f738 <_ZN12SimpleStringpLEPKc>
}
 8011244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011246:	4618      	mov	r0, r3
 8011248:	3750      	adds	r7, #80	; 0x50
 801124a:	46bd      	mov	sp, r7
 801124c:	bdb0      	pop	{r4, r5, r7, pc}
 801124e:	bf00      	nop
 8011250:	0802b518 	.word	0x0802b518
 8011254:	080272a4 	.word	0x080272a4
 8011258:	080272bc 	.word	0x080272bc
 801125c:	200000e8 	.word	0x200000e8
 8011260:	080272c0 	.word	0x080272c0

08011264 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckEqualFailure::CheckEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 8011264:	b590      	push	{r4, r7, lr}
 8011266:	b093      	sub	sp, #76	; 0x4c
 8011268:	af02      	add	r7, sp, #8
 801126a:	60f8      	str	r0, [r7, #12]
 801126c:	60b9      	str	r1, [r7, #8]
 801126e:	607a      	str	r2, [r7, #4]
 8011270:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8011272:	68f8      	ldr	r0, [r7, #12]
 8011274:	683b      	ldr	r3, [r7, #0]
 8011276:	687a      	ldr	r2, [r7, #4]
 8011278:	68b9      	ldr	r1, [r7, #8]
 801127a:	f7ff fcb3 	bl	8010be4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 801127e:	4a4f      	ldr	r2, [pc, #316]	; (80113bc <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x158>)
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801128a:	68f9      	ldr	r1, [r7, #12]
 801128c:	f107 0320 	add.w	r3, r7, #32
 8011290:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011292:	4618      	mov	r0, r3
 8011294:	f7ff feae 	bl	8010ff4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8011298:	f107 0320 	add.w	r3, r7, #32
 801129c:	4619      	mov	r1, r3
 801129e:	4620      	mov	r0, r4
 80112a0:	f7fd fe6f 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 80112a4:	f107 0320 	add.w	r3, r7, #32
 80112a8:	4618      	mov	r0, r3
 80112aa:	f7fe f9b6 	bl	800f61a <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 80112ae:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80112b0:	f7fe f986 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 80112b4:	4602      	mov	r2, r0
 80112b6:	f107 0318 	add.w	r3, r7, #24
 80112ba:	4611      	mov	r1, r2
 80112bc:	4618      	mov	r0, r3
 80112be:	f7fe fc47 	bl	800fb50 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 80112c2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80112c4:	f7fe f97c 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 80112c8:	4602      	mov	r2, r0
 80112ca:	f107 0310 	add.w	r3, r7, #16
 80112ce:	4611      	mov	r1, r2
 80112d0:	4618      	mov	r0, r3
 80112d2:	f7fe fc3d 	bl	800fb50 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80112dc:	68f9      	ldr	r1, [r7, #12]
 80112de:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80112e2:	f107 0310 	add.w	r3, r7, #16
 80112e6:	f107 0218 	add.w	r2, r7, #24
 80112ea:	f7ff fdbd 	bl	8010e68 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 80112ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80112f2:	4619      	mov	r1, r3
 80112f4:	4620      	mov	r0, r4
 80112f6:	f7fe fa0d 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 80112fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80112fe:	4618      	mov	r0, r3
 8011300:	f7fe f98b 	bl	800f61a <_ZN12SimpleStringD1Ev>

    size_t failStart;
    for (failStart = 0; actual.at(failStart) == expected.at(failStart); failStart++)
 8011304:	2300      	movs	r3, #0
 8011306:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011308:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801130a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801130c:	f7fe fae9 	bl	800f8e2 <_ZNK12SimpleString2atEj>
 8011310:	4603      	mov	r3, r0
 8011312:	461c      	mov	r4, r3
 8011314:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011316:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8011318:	f7fe fae3 	bl	800f8e2 <_ZNK12SimpleString2atEj>
 801131c:	4603      	mov	r3, r0
 801131e:	429c      	cmp	r4, r3
 8011320:	bf0c      	ite	eq
 8011322:	2301      	moveq	r3, #1
 8011324:	2300      	movne	r3, #0
 8011326:	b2db      	uxtb	r3, r3
 8011328:	2b00      	cmp	r3, #0
 801132a:	d003      	beq.n	8011334 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd0>
 801132c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801132e:	3301      	adds	r3, #1
 8011330:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011332:	e7e9      	b.n	8011308 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xa4>
        ;
    size_t failStartPrintable;
    for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 8011334:	2300      	movs	r3, #0
 8011336:	63bb      	str	r3, [r7, #56]	; 0x38
 8011338:	f107 0310 	add.w	r3, r7, #16
 801133c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801133e:	4618      	mov	r0, r3
 8011340:	f7fe facf 	bl	800f8e2 <_ZNK12SimpleString2atEj>
 8011344:	4603      	mov	r3, r0
 8011346:	461c      	mov	r4, r3
 8011348:	f107 0318 	add.w	r3, r7, #24
 801134c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801134e:	4618      	mov	r0, r3
 8011350:	f7fe fac7 	bl	800f8e2 <_ZNK12SimpleString2atEj>
 8011354:	4603      	mov	r3, r0
 8011356:	429c      	cmp	r4, r3
 8011358:	bf0c      	ite	eq
 801135a:	2301      	moveq	r3, #1
 801135c:	2300      	movne	r3, #0
 801135e:	b2db      	uxtb	r3, r3
 8011360:	2b00      	cmp	r3, #0
 8011362:	d003      	beq.n	801136c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x108>
 8011364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011366:	3301      	adds	r3, #1
 8011368:	63bb      	str	r3, [r7, #56]	; 0x38
 801136a:	e7e5      	b.n	8011338 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd4>
        ;
    message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011372:	68f9      	ldr	r1, [r7, #12]
 8011374:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8011378:	f107 0210 	add.w	r2, r7, #16
 801137c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801137e:	9300      	str	r3, [sp, #0]
 8011380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011382:	f7ff fd8b 	bl	8010e9c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 8011386:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801138a:	4619      	mov	r1, r3
 801138c:	4620      	mov	r0, r4
 801138e:	f7fe f9c1 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 8011392:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011396:	4618      	mov	r0, r3
 8011398:	f7fe f93f 	bl	800f61a <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 801139c:	f107 0310 	add.w	r3, r7, #16
 80113a0:	4618      	mov	r0, r3
 80113a2:	f7fe f93a 	bl	800f61a <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 80113a6:	f107 0318 	add.w	r3, r7, #24
 80113aa:	4618      	mov	r0, r3
 80113ac:	f7fe f935 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	4618      	mov	r0, r3
 80113b4:	3744      	adds	r7, #68	; 0x44
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd90      	pop	{r4, r7, pc}
 80113ba:	bf00      	nop
 80113bc:	0802b4ec 	.word	0x0802b4ec

080113c0 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ComparisonFailure::ComparisonFailure(UtestShell *test, const char *fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString &comparisonString, const SimpleString &text)
 80113c0:	b590      	push	{r4, r7, lr}
 80113c2:	b087      	sub	sp, #28
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	60f8      	str	r0, [r7, #12]
 80113c8:	60b9      	str	r1, [r7, #8]
 80113ca:	607a      	str	r2, [r7, #4]
 80113cc:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 80113ce:	68f8      	ldr	r0, [r7, #12]
 80113d0:	683b      	ldr	r3, [r7, #0]
 80113d2:	687a      	ldr	r2, [r7, #4]
 80113d4:	68b9      	ldr	r1, [r7, #8]
 80113d6:	f7ff fc05 	bl	8010be4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 80113da:	4a1a      	ldr	r2, [pc, #104]	; (8011444 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80113e6:	68f9      	ldr	r1, [r7, #12]
 80113e8:	f107 0310 	add.w	r3, r7, #16
 80113ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113ee:	4618      	mov	r0, r3
 80113f0:	f7ff fe00 	bl	8010ff4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 80113f4:	f107 0310 	add.w	r3, r7, #16
 80113f8:	4619      	mov	r1, r3
 80113fa:	4620      	mov	r0, r4
 80113fc:	f7fd fdc1 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 8011400:	f107 0310 	add.w	r3, r7, #16
 8011404:	4618      	mov	r0, r3
 8011406:	f7fe f908 	bl	800f61a <_ZN12SimpleStringD1Ev>
    message_ += checkString;
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	332c      	adds	r3, #44	; 0x2c
 801140e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011410:	4618      	mov	r0, r3
 8011412:	f7fe f97f 	bl	800f714 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	332c      	adds	r3, #44	; 0x2c
 801141a:	490b      	ldr	r1, [pc, #44]	; (8011448 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 801141c:	4618      	mov	r0, r3
 801141e:	f7fe f98b 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    message_ += comparisonString;
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	332c      	adds	r3, #44	; 0x2c
 8011426:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011428:	4618      	mov	r0, r3
 801142a:	f7fe f973 	bl	800f714 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	332c      	adds	r3, #44	; 0x2c
 8011432:	4906      	ldr	r1, [pc, #24]	; (801144c <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 8011434:	4618      	mov	r0, r3
 8011436:	f7fe f97f 	bl	800f738 <_ZN12SimpleStringpLEPKc>
}
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	4618      	mov	r0, r3
 801143e:	371c      	adds	r7, #28
 8011440:	46bd      	mov	sp, r7
 8011442:	bd90      	pop	{r4, r7, pc}
 8011444:	0802b4c0 	.word	0x0802b4c0
 8011448:	080272e4 	.word	0x080272e4
 801144c:	080272e8 	.word	0x080272e8

08011450 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ContainsFailure::ContainsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 8011450:	b5b0      	push	{r4, r5, r7, lr}
 8011452:	b088      	sub	sp, #32
 8011454:	af00      	add	r7, sp, #0
 8011456:	60f8      	str	r0, [r7, #12]
 8011458:	60b9      	str	r1, [r7, #8]
 801145a:	607a      	str	r2, [r7, #4]
 801145c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 801145e:	68f8      	ldr	r0, [r7, #12]
 8011460:	683b      	ldr	r3, [r7, #0]
 8011462:	687a      	ldr	r2, [r7, #4]
 8011464:	68b9      	ldr	r1, [r7, #8]
 8011466:	f7ff fbbd 	bl	8010be4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 801146a:	4a1c      	ldr	r2, [pc, #112]	; (80114dc <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011476:	68f9      	ldr	r1, [r7, #12]
 8011478:	f107 0310 	add.w	r3, r7, #16
 801147c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801147e:	4618      	mov	r0, r3
 8011480:	f7ff fdb8 	bl	8010ff4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8011484:	f107 0310 	add.w	r3, r7, #16
 8011488:	4619      	mov	r1, r3
 801148a:	4620      	mov	r0, r4
 801148c:	f7fd fd79 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 8011490:	f107 0310 	add.w	r3, r7, #16
 8011494:	4618      	mov	r0, r3
 8011496:	f7fe f8c0 	bl	800f61a <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("actual <%s>\n\tdid not contain  <%s>", actual.asCharString(), expected.asCharString());
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80114a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80114a2:	f7fe f88d 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 80114a6:	4605      	mov	r5, r0
 80114a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80114aa:	f7fe f889 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 80114ae:	4603      	mov	r3, r0
 80114b0:	f107 0018 	add.w	r0, r7, #24
 80114b4:	462a      	mov	r2, r5
 80114b6:	490a      	ldr	r1, [pc, #40]	; (80114e0 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x90>)
 80114b8:	f7fe fdb6 	bl	8010028 <_Z16StringFromFormatPKcz>
 80114bc:	f107 0318 	add.w	r3, r7, #24
 80114c0:	4619      	mov	r1, r3
 80114c2:	4620      	mov	r0, r4
 80114c4:	f7fe f926 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 80114c8:	f107 0318 	add.w	r3, r7, #24
 80114cc:	4618      	mov	r0, r3
 80114ce:	f7fe f8a4 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	4618      	mov	r0, r3
 80114d6:	3720      	adds	r7, #32
 80114d8:	46bd      	mov	sp, r7
 80114da:	bdb0      	pop	{r4, r5, r7, pc}
 80114dc:	0802b494 	.word	0x0802b494
 80114e0:	080272f4 	.word	0x080272f4

080114e4 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckFailure::CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& text)
 80114e4:	b590      	push	{r4, r7, lr}
 80114e6:	b087      	sub	sp, #28
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	60f8      	str	r0, [r7, #12]
 80114ec:	60b9      	str	r1, [r7, #8]
 80114ee:	607a      	str	r2, [r7, #4]
 80114f0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 80114f2:	68f8      	ldr	r0, [r7, #12]
 80114f4:	683b      	ldr	r3, [r7, #0]
 80114f6:	687a      	ldr	r2, [r7, #4]
 80114f8:	68b9      	ldr	r1, [r7, #8]
 80114fa:	f7ff fb73 	bl	8010be4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 80114fe:	4a1a      	ldr	r2, [pc, #104]	; (8011568 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801150a:	68f9      	ldr	r1, [r7, #12]
 801150c:	f107 0310 	add.w	r3, r7, #16
 8011510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011512:	4618      	mov	r0, r3
 8011514:	f7ff fd6e 	bl	8010ff4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8011518:	f107 0310 	add.w	r3, r7, #16
 801151c:	4619      	mov	r1, r3
 801151e:	4620      	mov	r0, r4
 8011520:	f7fd fd2f 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 8011524:	f107 0310 	add.w	r3, r7, #16
 8011528:	4618      	mov	r0, r3
 801152a:	f7fe f876 	bl	800f61a <_ZN12SimpleStringD1Ev>

    message_ += checkString;
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	332c      	adds	r3, #44	; 0x2c
 8011532:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011534:	4618      	mov	r0, r3
 8011536:	f7fe f8ed 	bl	800f714 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	332c      	adds	r3, #44	; 0x2c
 801153e:	490b      	ldr	r1, [pc, #44]	; (801156c <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 8011540:	4618      	mov	r0, r3
 8011542:	f7fe f8f9 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    message_ += conditionString;
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	332c      	adds	r3, #44	; 0x2c
 801154a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801154c:	4618      	mov	r0, r3
 801154e:	f7fe f8e1 	bl	800f714 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	332c      	adds	r3, #44	; 0x2c
 8011556:	4906      	ldr	r1, [pc, #24]	; (8011570 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 8011558:	4618      	mov	r0, r3
 801155a:	f7fe f8ed 	bl	800f738 <_ZN12SimpleStringpLEPKc>
}
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	4618      	mov	r0, r3
 8011562:	371c      	adds	r7, #28
 8011564:	46bd      	mov	sp, r7
 8011566:	bd90      	pop	{r4, r7, pc}
 8011568:	0802b468 	.word	0x0802b468
 801156c:	080272e4 	.word	0x080272e4
 8011570:	080272e8 	.word	0x080272e8

08011574 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>:

FailFailure::FailFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& message) : TestFailure(test, fileName, lineNumber)
 8011574:	b580      	push	{r7, lr}
 8011576:	b084      	sub	sp, #16
 8011578:	af00      	add	r7, sp, #0
 801157a:	60f8      	str	r0, [r7, #12]
 801157c:	60b9      	str	r1, [r7, #8]
 801157e:	607a      	str	r2, [r7, #4]
 8011580:	603b      	str	r3, [r7, #0]
 8011582:	68f8      	ldr	r0, [r7, #12]
 8011584:	683b      	ldr	r3, [r7, #0]
 8011586:	687a      	ldr	r2, [r7, #4]
 8011588:	68b9      	ldr	r1, [r7, #8]
 801158a:	f7ff fb2b 	bl	8010be4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 801158e:	4a07      	ldr	r2, [pc, #28]	; (80115ac <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString+0x38>)
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	601a      	str	r2, [r3, #0]
{
    message_ = message;
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	332c      	adds	r3, #44	; 0x2c
 8011598:	69b9      	ldr	r1, [r7, #24]
 801159a:	4618      	mov	r0, r3
 801159c:	f7fd fcf1 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
}
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	4618      	mov	r0, r3
 80115a4:	3710      	adds	r7, #16
 80115a6:	46bd      	mov	sp, r7
 80115a8:	bd80      	pop	{r7, pc}
 80115aa:	bf00      	nop
 80115ac:	0802b124 	.word	0x0802b124

080115b0 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>:

LongsEqualFailure::LongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, long expected, long actual, const SimpleString& text)
 80115b0:	b590      	push	{r4, r7, lr}
 80115b2:	b09d      	sub	sp, #116	; 0x74
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	60f8      	str	r0, [r7, #12]
 80115b8:	60b9      	str	r1, [r7, #8]
 80115ba:	607a      	str	r2, [r7, #4]
 80115bc:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 80115be:	68f8      	ldr	r0, [r7, #12]
 80115c0:	683b      	ldr	r3, [r7, #0]
 80115c2:	687a      	ldr	r2, [r7, #4]
 80115c4:	68b9      	ldr	r1, [r7, #8]
 80115c6:	f7ff fb0d 	bl	8010be4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 80115ca:	4a5d      	ldr	r2, [pc, #372]	; (8011740 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x190>)
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80115d6:	68f9      	ldr	r1, [r7, #12]
 80115d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80115dc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80115e0:	4618      	mov	r0, r3
 80115e2:	f7ff fd07 	bl	8010ff4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 80115e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80115ea:	4619      	mov	r1, r3
 80115ec:	4620      	mov	r0, r4
 80115ee:	f7fd fcc8 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 80115f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80115f6:	4618      	mov	r0, r3
 80115f8:	f7fe f80f 	bl	800f61a <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 80115fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011600:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8011604:	4618      	mov	r0, r3
 8011606:	f7fe fae1 	bl	800fbcc <_Z10StringFroml>
    SimpleString eDecimal = StringFrom(expected);
 801160a:	f107 0320 	add.w	r3, r7, #32
 801160e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8011612:	4618      	mov	r0, r3
 8011614:	f7fe fada 	bl	800fbcc <_Z10StringFroml>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 8011618:	f107 0120 	add.w	r1, r7, #32
 801161c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011620:	2220      	movs	r2, #32
 8011622:	4618      	mov	r0, r3
 8011624:	f7fe f8b6 	bl	800f794 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8011628:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801162c:	4945      	ldr	r1, [pc, #276]	; (8011744 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 801162e:	4618      	mov	r0, r3
 8011630:	f7fd fc3b 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8011634:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011638:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801163c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8011640:	4618      	mov	r0, r3
 8011642:	f7fe f84c 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 8011646:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801164a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801164e:	4618      	mov	r0, r3
 8011650:	f7fe fbd2 	bl	800fdf8 <_Z30BracketsFormattedHexStringFroml>
 8011654:	f107 0318 	add.w	r3, r7, #24
 8011658:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801165c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8011660:	4618      	mov	r0, r3
 8011662:	f7fe f83c 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 8011666:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801166a:	4618      	mov	r0, r3
 801166c:	f7fd ffd5 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8011670:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011674:	4618      	mov	r0, r3
 8011676:	f7fd ffd0 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801167a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801167e:	4618      	mov	r0, r3
 8011680:	f7fd ffcb 	bl	800f61a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8011684:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011688:	492e      	ldr	r1, [pc, #184]	; (8011744 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 801168a:	4618      	mov	r0, r3
 801168c:	f7fd fc0d 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8011690:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011694:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011698:	f107 0120 	add.w	r1, r7, #32
 801169c:	4618      	mov	r0, r3
 801169e:	f7fe f81e 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 80116a2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80116a6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80116aa:	4618      	mov	r0, r3
 80116ac:	f7fe fba4 	bl	800fdf8 <_Z30BracketsFormattedHexStringFroml>
 80116b0:	f107 0310 	add.w	r3, r7, #16
 80116b4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80116b8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80116bc:	4618      	mov	r0, r3
 80116be:	f7fe f80e 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 80116c2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80116c6:	4618      	mov	r0, r3
 80116c8:	f7fd ffa7 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80116cc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80116d0:	4618      	mov	r0, r3
 80116d2:	f7fd ffa2 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80116d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80116da:	4618      	mov	r0, r3
 80116dc:	f7fd ff9d 	bl	800f61a <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80116e6:	68f9      	ldr	r1, [r7, #12]
 80116e8:	f107 0068 	add.w	r0, r7, #104	; 0x68
 80116ec:	f107 0318 	add.w	r3, r7, #24
 80116f0:	f107 0210 	add.w	r2, r7, #16
 80116f4:	f7ff fbb8 	bl	8010e68 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 80116f8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80116fc:	4619      	mov	r1, r3
 80116fe:	4620      	mov	r0, r4
 8011700:	f7fe f808 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 8011704:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011708:	4618      	mov	r0, r3
 801170a:	f7fd ff86 	bl	800f61a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 801170e:	f107 0310 	add.w	r3, r7, #16
 8011712:	4618      	mov	r0, r3
 8011714:	f7fd ff81 	bl	800f61a <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8011718:	f107 0318 	add.w	r3, r7, #24
 801171c:	4618      	mov	r0, r3
 801171e:	f7fd ff7c 	bl	800f61a <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 8011722:	f107 0320 	add.w	r3, r7, #32
 8011726:	4618      	mov	r0, r3
 8011728:	f7fd ff77 	bl	800f61a <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 801172c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011730:	4618      	mov	r0, r3
 8011732:	f7fd ff72 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	4618      	mov	r0, r3
 801173a:	3774      	adds	r7, #116	; 0x74
 801173c:	46bd      	mov	sp, r7
 801173e:	bd90      	pop	{r4, r7, pc}
 8011740:	0802b43c 	.word	0x0802b43c
 8011744:	08027248 	.word	0x08027248

08011748 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>:

UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, const SimpleString& text)
 8011748:	b590      	push	{r4, r7, lr}
 801174a:	b09d      	sub	sp, #116	; 0x74
 801174c:	af00      	add	r7, sp, #0
 801174e:	60f8      	str	r0, [r7, #12]
 8011750:	60b9      	str	r1, [r7, #8]
 8011752:	607a      	str	r2, [r7, #4]
 8011754:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8011756:	68f8      	ldr	r0, [r7, #12]
 8011758:	683b      	ldr	r3, [r7, #0]
 801175a:	687a      	ldr	r2, [r7, #4]
 801175c:	68b9      	ldr	r1, [r7, #8]
 801175e:	f7ff fa41 	bl	8010be4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8011762:	4a5d      	ldr	r2, [pc, #372]	; (80118d8 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x190>)
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801176e:	68f9      	ldr	r1, [r7, #12]
 8011770:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011774:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8011778:	4618      	mov	r0, r3
 801177a:	f7ff fc3b 	bl	8010ff4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 801177e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011782:	4619      	mov	r1, r3
 8011784:	4620      	mov	r0, r4
 8011786:	f7fd fbfc 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 801178a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801178e:	4618      	mov	r0, r3
 8011790:	f7fd ff43 	bl	800f61a <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 8011794:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011798:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801179c:	4618      	mov	r0, r3
 801179e:	f7fe fc7d 	bl	801009c <_Z10StringFromm>
    SimpleString eDecimal = StringFrom(expected);
 80117a2:	f107 0320 	add.w	r3, r7, #32
 80117a6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80117aa:	4618      	mov	r0, r3
 80117ac:	f7fe fc76 	bl	801009c <_Z10StringFromm>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 80117b0:	f107 0120 	add.w	r1, r7, #32
 80117b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80117b8:	2220      	movs	r2, #32
 80117ba:	4618      	mov	r0, r3
 80117bc:	f7fd ffea 	bl	800f794 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 80117c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80117c4:	4945      	ldr	r1, [pc, #276]	; (80118dc <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 80117c6:	4618      	mov	r0, r3
 80117c8:	f7fd fb6f 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80117cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80117d0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80117d4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80117d8:	4618      	mov	r0, r3
 80117da:	f7fd ff80 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 80117de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80117e2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80117e6:	4618      	mov	r0, r3
 80117e8:	f7fe fb22 	bl	800fe30 <_Z30BracketsFormattedHexStringFromm>
 80117ec:	f107 0318 	add.w	r3, r7, #24
 80117f0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80117f4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80117f8:	4618      	mov	r0, r3
 80117fa:	f7fd ff70 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 80117fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011802:	4618      	mov	r0, r3
 8011804:	f7fd ff09 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8011808:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801180c:	4618      	mov	r0, r3
 801180e:	f7fd ff04 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8011812:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011816:	4618      	mov	r0, r3
 8011818:	f7fd feff 	bl	800f61a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 801181c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011820:	492e      	ldr	r1, [pc, #184]	; (80118dc <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 8011822:	4618      	mov	r0, r3
 8011824:	f7fd fb41 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8011828:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801182c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011830:	f107 0120 	add.w	r1, r7, #32
 8011834:	4618      	mov	r0, r3
 8011836:	f7fd ff52 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 801183a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801183e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8011842:	4618      	mov	r0, r3
 8011844:	f7fe faf4 	bl	800fe30 <_Z30BracketsFormattedHexStringFromm>
 8011848:	f107 0310 	add.w	r3, r7, #16
 801184c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8011850:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8011854:	4618      	mov	r0, r3
 8011856:	f7fd ff42 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 801185a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801185e:	4618      	mov	r0, r3
 8011860:	f7fd fedb 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8011864:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011868:	4618      	mov	r0, r3
 801186a:	f7fd fed6 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801186e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011872:	4618      	mov	r0, r3
 8011874:	f7fd fed1 	bl	800f61a <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expectedReported, actualReported);
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801187e:	68f9      	ldr	r1, [r7, #12]
 8011880:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8011884:	f107 0318 	add.w	r3, r7, #24
 8011888:	f107 0210 	add.w	r2, r7, #16
 801188c:	f7ff faec 	bl	8010e68 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8011890:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011894:	4619      	mov	r1, r3
 8011896:	4620      	mov	r0, r4
 8011898:	f7fd ff3c 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801189c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80118a0:	4618      	mov	r0, r3
 80118a2:	f7fd feba 	bl	800f61a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 80118a6:	f107 0310 	add.w	r3, r7, #16
 80118aa:	4618      	mov	r0, r3
 80118ac:	f7fd feb5 	bl	800f61a <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 80118b0:	f107 0318 	add.w	r3, r7, #24
 80118b4:	4618      	mov	r0, r3
 80118b6:	f7fd feb0 	bl	800f61a <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 80118ba:	f107 0320 	add.w	r3, r7, #32
 80118be:	4618      	mov	r0, r3
 80118c0:	f7fd feab 	bl	800f61a <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 80118c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80118c8:	4618      	mov	r0, r3
 80118ca:	f7fd fea6 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	4618      	mov	r0, r3
 80118d2:	3774      	adds	r7, #116	; 0x74
 80118d4:	46bd      	mov	sp, r7
 80118d6:	bd90      	pop	{r4, r7, pc}
 80118d8:	0802b410 	.word	0x0802b410
 80118dc:	08027248 	.word	0x08027248

080118e0 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>:
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
    message_ += createButWasString(expectedReported, actualReported);
}

SignedBytesEqualFailure::SignedBytesEqualFailure (UtestShell* test, const char* fileName, size_t lineNumber, signed char expected, signed char actual, const SimpleString& text)
 80118e0:	b590      	push	{r4, r7, lr}
 80118e2:	b09d      	sub	sp, #116	; 0x74
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	60f8      	str	r0, [r7, #12]
 80118e8:	60b9      	str	r1, [r7, #8]
 80118ea:	607a      	str	r2, [r7, #4]
 80118ec:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 80118ee:	68f8      	ldr	r0, [r7, #12]
 80118f0:	683b      	ldr	r3, [r7, #0]
 80118f2:	687a      	ldr	r2, [r7, #4]
 80118f4:	68b9      	ldr	r1, [r7, #8]
 80118f6:	f7ff f975 	bl	8010be4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 80118fa:	4a5f      	ldr	r2, [pc, #380]	; (8011a78 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x198>)
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011906:	68f9      	ldr	r1, [r7, #12]
 8011908:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801190c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8011910:	4618      	mov	r0, r3
 8011912:	f7ff fb6f 	bl	8010ff4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8011916:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801191a:	4619      	mov	r1, r3
 801191c:	4620      	mov	r0, r4
 801191e:	f7fd fb30 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 8011922:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011926:	4618      	mov	r0, r3
 8011928:	f7fd fe77 	bl	800f61a <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom((int)actual);
 801192c:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 8011930:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011934:	4611      	mov	r1, r2
 8011936:	4618      	mov	r0, r3
 8011938:	f7fe f936 	bl	800fba8 <_Z10StringFromi>
    SimpleString eDecimal = StringFrom((int)expected);
 801193c:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 8011940:	f107 0320 	add.w	r3, r7, #32
 8011944:	4611      	mov	r1, r2
 8011946:	4618      	mov	r0, r3
 8011948:	f7fe f92e 	bl	800fba8 <_Z10StringFromi>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 801194c:	f107 0120 	add.w	r1, r7, #32
 8011950:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011954:	2220      	movs	r2, #32
 8011956:	4618      	mov	r0, r3
 8011958:	f7fd ff1c 	bl	800f794 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 801195c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011960:	4946      	ldr	r1, [pc, #280]	; (8011a7c <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 8011962:	4618      	mov	r0, r3
 8011964:	f7fd faa1 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8011968:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801196c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8011970:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8011974:	4618      	mov	r0, r3
 8011976:	f7fd feb2 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 801197a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801197e:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 8011982:	4611      	mov	r1, r2
 8011984:	4618      	mov	r0, r3
 8011986:	f7fe fa6f 	bl	800fe68 <_Z30BracketsFormattedHexStringFroma>
 801198a:	f107 0318 	add.w	r3, r7, #24
 801198e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8011992:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8011996:	4618      	mov	r0, r3
 8011998:	f7fd fea1 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 801199c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80119a0:	4618      	mov	r0, r3
 80119a2:	f7fd fe3a 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80119a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80119aa:	4618      	mov	r0, r3
 80119ac:	f7fd fe35 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80119b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80119b4:	4618      	mov	r0, r3
 80119b6:	f7fd fe30 	bl	800f61a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 80119ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80119be:	492f      	ldr	r1, [pc, #188]	; (8011a7c <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 80119c0:	4618      	mov	r0, r3
 80119c2:	f7fd fa72 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80119c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80119ca:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80119ce:	f107 0120 	add.w	r1, r7, #32
 80119d2:	4618      	mov	r0, r3
 80119d4:	f7fd fe83 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 80119d8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80119dc:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 80119e0:	4611      	mov	r1, r2
 80119e2:	4618      	mov	r0, r3
 80119e4:	f7fe fa40 	bl	800fe68 <_Z30BracketsFormattedHexStringFroma>
 80119e8:	f107 0310 	add.w	r3, r7, #16
 80119ec:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80119f0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80119f4:	4618      	mov	r0, r3
 80119f6:	f7fd fe72 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 80119fa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80119fe:	4618      	mov	r0, r3
 8011a00:	f7fd fe0b 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8011a04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011a08:	4618      	mov	r0, r3
 8011a0a:	f7fd fe06 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8011a0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011a12:	4618      	mov	r0, r3
 8011a14:	f7fd fe01 	bl	800f61a <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011a1e:	68f9      	ldr	r1, [r7, #12]
 8011a20:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8011a24:	f107 0318 	add.w	r3, r7, #24
 8011a28:	f107 0210 	add.w	r2, r7, #16
 8011a2c:	f7ff fa1c 	bl	8010e68 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8011a30:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011a34:	4619      	mov	r1, r3
 8011a36:	4620      	mov	r0, r4
 8011a38:	f7fd fe6c 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 8011a3c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011a40:	4618      	mov	r0, r3
 8011a42:	f7fd fdea 	bl	800f61a <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8011a46:	f107 0310 	add.w	r3, r7, #16
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	f7fd fde5 	bl	800f61a <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8011a50:	f107 0318 	add.w	r3, r7, #24
 8011a54:	4618      	mov	r0, r3
 8011a56:	f7fd fde0 	bl	800f61a <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom((int)expected);
 8011a5a:	f107 0320 	add.w	r3, r7, #32
 8011a5e:	4618      	mov	r0, r3
 8011a60:	f7fd fddb 	bl	800f61a <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom((int)actual);
 8011a64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011a68:	4618      	mov	r0, r3
 8011a6a:	f7fd fdd6 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	4618      	mov	r0, r3
 8011a72:	3774      	adds	r7, #116	; 0x74
 8011a74:	46bd      	mov	sp, r7
 8011a76:	bd90      	pop	{r4, r7, pc}
 8011a78:	0802b3e4 	.word	0x0802b3e4
 8011a7c:	08027248 	.word	0x08027248

08011a80 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualFailure::StringEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 8011a80:	b590      	push	{r4, r7, lr}
 8011a82:	b093      	sub	sp, #76	; 0x4c
 8011a84:	af02      	add	r7, sp, #8
 8011a86:	60f8      	str	r0, [r7, #12]
 8011a88:	60b9      	str	r1, [r7, #8]
 8011a8a:	607a      	str	r2, [r7, #4]
 8011a8c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8011a8e:	68f8      	ldr	r0, [r7, #12]
 8011a90:	683b      	ldr	r3, [r7, #0]
 8011a92:	687a      	ldr	r2, [r7, #4]
 8011a94:	68b9      	ldr	r1, [r7, #8]
 8011a96:	f7ff f8a5 	bl	8010be4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8011a9a:	4a4a      	ldr	r2, [pc, #296]	; (8011bc4 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x144>)
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011aa6:	68f9      	ldr	r1, [r7, #12]
 8011aa8:	f107 0320 	add.w	r3, r7, #32
 8011aac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011aae:	4618      	mov	r0, r3
 8011ab0:	f7ff faa0 	bl	8010ff4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8011ab4:	f107 0320 	add.w	r3, r7, #32
 8011ab8:	4619      	mov	r1, r3
 8011aba:	4620      	mov	r0, r4
 8011abc:	f7fd fa61 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 8011ac0:	f107 0320 	add.w	r3, r7, #32
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f7fd fda8 	bl	800f61a <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 8011aca:	f107 0318 	add.w	r3, r7, #24
 8011ace:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	f7fe f83d 	bl	800fb50 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 8011ad6:	f107 0310 	add.w	r3, r7, #16
 8011ada:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011adc:	4618      	mov	r0, r3
 8011ade:	f7fe f837 	bl	800fb50 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011ae8:	68f9      	ldr	r1, [r7, #12]
 8011aea:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8011aee:	f107 0310 	add.w	r3, r7, #16
 8011af2:	f107 0218 	add.w	r2, r7, #24
 8011af6:	f7ff f9b7 	bl	8010e68 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8011afa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011afe:	4619      	mov	r1, r3
 8011b00:	4620      	mov	r0, r4
 8011b02:	f7fd fe07 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 8011b06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	f7fd fd85 	bl	800f61a <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 8011b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d046      	beq.n	8011ba4 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
 8011b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d043      	beq.n	8011ba4 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
    {
        size_t failStart;
        for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011b20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b24:	4413      	add	r3, r2
 8011b26:	781a      	ldrb	r2, [r3, #0]
 8011b28:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b2c:	440b      	add	r3, r1
 8011b2e:	781b      	ldrb	r3, [r3, #0]
 8011b30:	429a      	cmp	r2, r3
 8011b32:	d103      	bne.n	8011b3c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xbc>
 8011b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b36:	3301      	adds	r3, #1
 8011b38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011b3a:	e7f1      	b.n	8011b20 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8011b40:	f107 0310 	add.w	r3, r7, #16
 8011b44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011b46:	4618      	mov	r0, r3
 8011b48:	f7fd fecb 	bl	800f8e2 <_ZNK12SimpleString2atEj>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	461c      	mov	r4, r3
 8011b50:	f107 0318 	add.w	r3, r7, #24
 8011b54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011b56:	4618      	mov	r0, r3
 8011b58:	f7fd fec3 	bl	800f8e2 <_ZNK12SimpleString2atEj>
 8011b5c:	4603      	mov	r3, r0
 8011b5e:	429c      	cmp	r4, r3
 8011b60:	bf0c      	ite	eq
 8011b62:	2301      	moveq	r3, #1
 8011b64:	2300      	movne	r3, #0
 8011b66:	b2db      	uxtb	r3, r3
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d003      	beq.n	8011b74 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xf4>
 8011b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b6e:	3301      	adds	r3, #1
 8011b70:	63bb      	str	r3, [r7, #56]	; 0x38
 8011b72:	e7e5      	b.n	8011b40 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xc0>
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011b7a:	68f9      	ldr	r1, [r7, #12]
 8011b7c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8011b80:	f107 0210 	add.w	r2, r7, #16
 8011b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b86:	9300      	str	r3, [sp, #0]
 8011b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b8a:	f7ff f987 	bl	8010e9c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 8011b8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011b92:	4619      	mov	r1, r3
 8011b94:	4620      	mov	r0, r4
 8011b96:	f7fd fdbd 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 8011b9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	f7fd fd3b 	bl	800f61a <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 8011ba4:	f107 0310 	add.w	r3, r7, #16
 8011ba8:	4618      	mov	r0, r3
 8011baa:	f7fd fd36 	bl	800f61a <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 8011bae:	f107 0318 	add.w	r3, r7, #24
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	f7fd fd31 	bl	800f61a <_ZN12SimpleStringD1Ev>
    }
}
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	4618      	mov	r0, r3
 8011bbc:	3744      	adds	r7, #68	; 0x44
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	bd90      	pop	{r4, r7, pc}
 8011bc2:	bf00      	nop
 8011bc4:	0802b3b8 	.word	0x0802b3b8

08011bc8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 8011bc8:	b590      	push	{r4, r7, lr}
 8011bca:	b093      	sub	sp, #76	; 0x4c
 8011bcc:	af02      	add	r7, sp, #8
 8011bce:	60f8      	str	r0, [r7, #12]
 8011bd0:	60b9      	str	r1, [r7, #8]
 8011bd2:	607a      	str	r2, [r7, #4]
 8011bd4:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8011bd6:	68f8      	ldr	r0, [r7, #12]
 8011bd8:	683b      	ldr	r3, [r7, #0]
 8011bda:	687a      	ldr	r2, [r7, #4]
 8011bdc:	68b9      	ldr	r1, [r7, #8]
 8011bde:	f7ff f801 	bl	8010be4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8011be2:	4a55      	ldr	r2, [pc, #340]	; (8011d38 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x170>)
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011bee:	68f9      	ldr	r1, [r7, #12]
 8011bf0:	f107 0320 	add.w	r3, r7, #32
 8011bf4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	f7ff f9fc 	bl	8010ff4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8011bfc:	f107 0320 	add.w	r3, r7, #32
 8011c00:	4619      	mov	r1, r3
 8011c02:	4620      	mov	r0, r4
 8011c04:	f7fd f9bd 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 8011c08:	f107 0320 	add.w	r3, r7, #32
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	f7fd fd04 	bl	800f61a <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 8011c12:	f107 0318 	add.w	r3, r7, #24
 8011c16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011c18:	4618      	mov	r0, r3
 8011c1a:	f7fd ff99 	bl	800fb50 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 8011c1e:	f107 0310 	add.w	r3, r7, #16
 8011c22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011c24:	4618      	mov	r0, r3
 8011c26:	f7fd ff93 	bl	800fb50 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011c30:	68f9      	ldr	r1, [r7, #12]
 8011c32:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8011c36:	f107 0310 	add.w	r3, r7, #16
 8011c3a:	f107 0218 	add.w	r2, r7, #24
 8011c3e:	f7ff f913 	bl	8010e68 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8011c42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011c46:	4619      	mov	r1, r3
 8011c48:	4620      	mov	r0, r4
 8011c4a:	f7fd fd63 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 8011c4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011c52:	4618      	mov	r0, r3
 8011c54:	f7fd fce1 	bl	800f61a <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 8011c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d05c      	beq.n	8011d18 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
 8011c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d059      	beq.n	8011d18 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
    {
        size_t failStart;
        for (failStart = 0; SimpleString::ToLower(actual[failStart]) == SimpleString::ToLower(expected[failStart]); failStart++)
 8011c64:	2300      	movs	r3, #0
 8011c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011c68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c6c:	4413      	add	r3, r2
 8011c6e:	781b      	ldrb	r3, [r3, #0]
 8011c70:	4618      	mov	r0, r3
 8011c72:	f7fd f824 	bl	800ecbe <_ZN12SimpleString7ToLowerEc>
 8011c76:	4603      	mov	r3, r0
 8011c78:	461c      	mov	r4, r3
 8011c7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c7e:	4413      	add	r3, r2
 8011c80:	781b      	ldrb	r3, [r3, #0]
 8011c82:	4618      	mov	r0, r3
 8011c84:	f7fd f81b 	bl	800ecbe <_ZN12SimpleString7ToLowerEc>
 8011c88:	4603      	mov	r3, r0
 8011c8a:	429c      	cmp	r4, r3
 8011c8c:	bf0c      	ite	eq
 8011c8e:	2301      	moveq	r3, #1
 8011c90:	2300      	movne	r3, #0
 8011c92:	b2db      	uxtb	r3, r3
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d003      	beq.n	8011ca0 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xd8>
 8011c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c9a:	3301      	adds	r3, #1
 8011c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011c9e:	e7e3      	b.n	8011c68 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0;
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	63bb      	str	r3, [r7, #56]	; 0x38
             SimpleString::ToLower(printableActual.at(failStartPrintable)) == SimpleString::ToLower(printableExpected.at(failStartPrintable));
 8011ca4:	f107 0310 	add.w	r3, r7, #16
 8011ca8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011caa:	4618      	mov	r0, r3
 8011cac:	f7fd fe19 	bl	800f8e2 <_ZNK12SimpleString2atEj>
 8011cb0:	4603      	mov	r3, r0
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	f7fd f803 	bl	800ecbe <_ZN12SimpleString7ToLowerEc>
 8011cb8:	4603      	mov	r3, r0
 8011cba:	461c      	mov	r4, r3
 8011cbc:	f107 0318 	add.w	r3, r7, #24
 8011cc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	f7fd fe0d 	bl	800f8e2 <_ZNK12SimpleString2atEj>
 8011cc8:	4603      	mov	r3, r0
 8011cca:	4618      	mov	r0, r3
 8011ccc:	f7fc fff7 	bl	800ecbe <_ZN12SimpleString7ToLowerEc>
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	429c      	cmp	r4, r3
 8011cd4:	bf0c      	ite	eq
 8011cd6:	2301      	moveq	r3, #1
 8011cd8:	2300      	movne	r3, #0
 8011cda:	b2db      	uxtb	r3, r3
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d003      	beq.n	8011ce8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x120>
        for (failStartPrintable = 0;
 8011ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ce2:	3301      	adds	r3, #1
 8011ce4:	63bb      	str	r3, [r7, #56]	; 0x38
 8011ce6:	e7dd      	b.n	8011ca4 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xdc>
             failStartPrintable++)
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011cee:	68f9      	ldr	r1, [r7, #12]
 8011cf0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8011cf4:	f107 0210 	add.w	r2, r7, #16
 8011cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011cfa:	9300      	str	r3, [sp, #0]
 8011cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cfe:	f7ff f8cd 	bl	8010e9c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 8011d02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011d06:	4619      	mov	r1, r3
 8011d08:	4620      	mov	r0, r4
 8011d0a:	f7fd fd03 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 8011d0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011d12:	4618      	mov	r0, r3
 8011d14:	f7fd fc81 	bl	800f61a <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 8011d18:	f107 0310 	add.w	r3, r7, #16
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	f7fd fc7c 	bl	800f61a <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 8011d22:	f107 0318 	add.w	r3, r7, #24
 8011d26:	4618      	mov	r0, r3
 8011d28:	f7fd fc77 	bl	800f61a <_ZN12SimpleStringD1Ev>
    }
}
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	4618      	mov	r0, r3
 8011d30:	3744      	adds	r7, #68	; 0x44
 8011d32:	46bd      	mov	sp, r7
 8011d34:	bd90      	pop	{r4, r7, pc}
 8011d36:	bf00      	nop
 8011d38:	0802b38c 	.word	0x0802b38c

08011d3c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>:

BinaryEqualFailure::BinaryEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const unsigned char* expected,
 8011d3c:	b5b0      	push	{r4, r5, r7, lr}
 8011d3e:	b092      	sub	sp, #72	; 0x48
 8011d40:	af02      	add	r7, sp, #8
 8011d42:	60f8      	str	r0, [r7, #12]
 8011d44:	60b9      	str	r1, [r7, #8]
 8011d46:	607a      	str	r2, [r7, #4]
 8011d48:	603b      	str	r3, [r7, #0]
                                       const unsigned char* actual, size_t size, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 8011d4a:	68f8      	ldr	r0, [r7, #12]
 8011d4c:	683b      	ldr	r3, [r7, #0]
 8011d4e:	687a      	ldr	r2, [r7, #4]
 8011d50:	68b9      	ldr	r1, [r7, #8]
 8011d52:	f7fe ff47 	bl	8010be4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8011d56:	4a40      	ldr	r2, [pc, #256]	; (8011e58 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x11c>)
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011d62:	68f9      	ldr	r1, [r7, #12]
 8011d64:	f107 031c 	add.w	r3, r7, #28
 8011d68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	f7ff f942 	bl	8010ff4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8011d70:	f107 031c 	add.w	r3, r7, #28
 8011d74:	4619      	mov	r1, r3
 8011d76:	4620      	mov	r0, r4
 8011d78:	f7fd f903 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 8011d7c:	f107 031c 	add.w	r3, r7, #28
 8011d80:	4618      	mov	r0, r3
 8011d82:	f7fd fc4a 	bl	800f61a <_ZN12SimpleStringD1Ev>

    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 8011d86:	f107 0314 	add.w	r3, r7, #20
 8011d8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011d8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011d8e:	4618      	mov	r0, r3
 8011d90:	f7fe fa4c 	bl	801022c <_Z22StringFromBinaryOrNullPKhj>

	message_ += createButWasString(StringFromBinaryOrNull(expected, size), actualHex);
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011d9a:	68fd      	ldr	r5, [r7, #12]
 8011d9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011da0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011da2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011da4:	4618      	mov	r0, r3
 8011da6:	f7fe fa41 	bl	801022c <_Z22StringFromBinaryOrNullPKhj>
 8011daa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8011dae:	f107 0314 	add.w	r3, r7, #20
 8011db2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011db6:	4629      	mov	r1, r5
 8011db8:	f7ff f856 	bl	8010e68 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8011dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011dc0:	4619      	mov	r1, r3
 8011dc2:	4620      	mov	r0, r4
 8011dc4:	f7fd fca6 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 8011dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011dcc:	4618      	mov	r0, r3
 8011dce:	f7fd fc24 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8011dd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	f7fd fc1f 	bl	800f61a <_ZN12SimpleStringD1Ev>
	if ((expected) && (actual))
 8011ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d02f      	beq.n	8011e42 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
 8011de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d02c      	beq.n	8011e42 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
	{
		size_t failStart;
		for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 8011de8:	2300      	movs	r3, #0
 8011dea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011dec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011df0:	4413      	add	r3, r2
 8011df2:	781a      	ldrb	r2, [r3, #0]
 8011df4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011df8:	440b      	add	r3, r1
 8011dfa:	781b      	ldrb	r3, [r3, #0]
 8011dfc:	429a      	cmp	r2, r3
 8011dfe:	d103      	bne.n	8011e08 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xcc>
 8011e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e02:	3301      	adds	r3, #1
 8011e04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011e06:	e7f1      	b.n	8011dec <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xb0>
			;
		message_ += createDifferenceAtPosString(actualHex, (failStart * 3 + 1), failStart);
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011e0e:	68f9      	ldr	r1, [r7, #12]
 8011e10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011e12:	4613      	mov	r3, r2
 8011e14:	005b      	lsls	r3, r3, #1
 8011e16:	4413      	add	r3, r2
 8011e18:	1c5d      	adds	r5, r3, #1
 8011e1a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8011e1e:	f107 0214 	add.w	r2, r7, #20
 8011e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e24:	9300      	str	r3, [sp, #0]
 8011e26:	462b      	mov	r3, r5
 8011e28:	f7ff f838 	bl	8010e9c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 8011e2c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011e30:	4619      	mov	r1, r3
 8011e32:	4620      	mov	r0, r4
 8011e34:	f7fd fc6e 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 8011e38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	f7fd fbec 	bl	800f61a <_ZN12SimpleStringD1Ev>
    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 8011e42:	f107 0314 	add.w	r3, r7, #20
 8011e46:	4618      	mov	r0, r3
 8011e48:	f7fd fbe7 	bl	800f61a <_ZN12SimpleStringD1Ev>
	}
}
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	4618      	mov	r0, r3
 8011e50:	3740      	adds	r7, #64	; 0x40
 8011e52:	46bd      	mov	sp, r7
 8011e54:	bdb0      	pop	{r4, r5, r7, pc}
 8011e56:	bf00      	nop
 8011e58:	0802b360 	.word	0x0802b360

08011e5c <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>:

BitsEqualFailure::BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual,
 8011e5c:	b5b0      	push	{r4, r5, r7, lr}
 8011e5e:	b08c      	sub	sp, #48	; 0x30
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	60f8      	str	r0, [r7, #12]
 8011e64:	60b9      	str	r1, [r7, #8]
 8011e66:	607a      	str	r2, [r7, #4]
 8011e68:	603b      	str	r3, [r7, #0]
                                   unsigned long mask, size_t byteCount, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 8011e6a:	68f8      	ldr	r0, [r7, #12]
 8011e6c:	683b      	ldr	r3, [r7, #0]
 8011e6e:	687a      	ldr	r2, [r7, #4]
 8011e70:	68b9      	ldr	r1, [r7, #8]
 8011e72:	f7fe feb7 	bl	8010be4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8011e76:	4a26      	ldr	r2, [pc, #152]	; (8011f10 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString+0xb4>)
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011e82:	68f9      	ldr	r1, [r7, #12]
 8011e84:	f107 0310 	add.w	r3, r7, #16
 8011e88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	f7ff f8b2 	bl	8010ff4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8011e90:	f107 0310 	add.w	r3, r7, #16
 8011e94:	4619      	mov	r1, r3
 8011e96:	4620      	mov	r0, r4
 8011e98:	f7fd f873 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 8011e9c:	f107 0310 	add.w	r3, r7, #16
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	f7fd fbba 	bl	800f61a <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFromMaskedBits(expected, mask, byteCount), StringFromMaskedBits(actual, mask, byteCount));
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011eac:	68fd      	ldr	r5, [r7, #12]
 8011eae:	f107 0020 	add.w	r0, r7, #32
 8011eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011eb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011eb6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011eb8:	f7fe fa24 	bl	8010304 <_Z20StringFromMaskedBitsmmj>
 8011ebc:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8011ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ec2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011ec4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011ec6:	f7fe fa1d 	bl	8010304 <_Z20StringFromMaskedBitsmmj>
 8011eca:	f107 0018 	add.w	r0, r7, #24
 8011ece:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011ed2:	f107 0220 	add.w	r2, r7, #32
 8011ed6:	4629      	mov	r1, r5
 8011ed8:	f7fe ffc6 	bl	8010e68 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8011edc:	f107 0318 	add.w	r3, r7, #24
 8011ee0:	4619      	mov	r1, r3
 8011ee2:	4620      	mov	r0, r4
 8011ee4:	f7fd fc16 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 8011ee8:	f107 0318 	add.w	r3, r7, #24
 8011eec:	4618      	mov	r0, r3
 8011eee:	f7fd fb94 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8011ef2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	f7fd fb8f 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8011efc:	f107 0320 	add.w	r3, r7, #32
 8011f00:	4618      	mov	r0, r3
 8011f02:	f7fd fb8a 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	4618      	mov	r0, r3
 8011f0a:	3730      	adds	r7, #48	; 0x30
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	bdb0      	pop	{r4, r5, r7, pc}
 8011f10:	0802b334 	.word	0x0802b334

08011f14 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>:

FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell* test, const char* fileName, size_t lineNumber,
 8011f14:	b590      	push	{r4, r7, lr}
 8011f16:	b089      	sub	sp, #36	; 0x24
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	60f8      	str	r0, [r7, #12]
 8011f1c:	60b9      	str	r1, [r7, #8]
 8011f1e:	607a      	str	r2, [r7, #4]
 8011f20:	603b      	str	r3, [r7, #0]
                                                     const SimpleString& featureName, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 8011f22:	68f8      	ldr	r0, [r7, #12]
 8011f24:	683b      	ldr	r3, [r7, #0]
 8011f26:	687a      	ldr	r2, [r7, #4]
 8011f28:	68b9      	ldr	r1, [r7, #8]
 8011f2a:	f7fe fe5b 	bl	8010be4 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8011f2e:	4a1a      	ldr	r2, [pc, #104]	; (8011f98 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x84>)
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011f3a:	68f9      	ldr	r1, [r7, #12]
 8011f3c:	f107 0310 	add.w	r3, r7, #16
 8011f40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011f42:	4618      	mov	r0, r3
 8011f44:	f7ff f856 	bl	8010ff4 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8011f48:	f107 0310 	add.w	r3, r7, #16
 8011f4c:	4619      	mov	r1, r3
 8011f4e:	4620      	mov	r0, r4
 8011f50:	f7fd f817 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 8011f54:	f107 0310 	add.w	r3, r7, #16
 8011f58:	4618      	mov	r0, r3
 8011f5a:	f7fd fb5e 	bl	800f61a <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("The feature \"%s\" is not supported in this environment or with the feature set selected when building the library.", featureName.asCharString());
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011f64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f66:	f7fd fb2b 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 8011f6a:	4602      	mov	r2, r0
 8011f6c:	f107 0318 	add.w	r3, r7, #24
 8011f70:	490a      	ldr	r1, [pc, #40]	; (8011f9c <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x88>)
 8011f72:	4618      	mov	r0, r3
 8011f74:	f7fe f858 	bl	8010028 <_Z16StringFromFormatPKcz>
 8011f78:	f107 0318 	add.w	r3, r7, #24
 8011f7c:	4619      	mov	r1, r3
 8011f7e:	4620      	mov	r0, r4
 8011f80:	f7fd fbc8 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 8011f84:	f107 0318 	add.w	r3, r7, #24
 8011f88:	4618      	mov	r0, r3
 8011f8a:	f7fd fb46 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	4618      	mov	r0, r3
 8011f92:	3724      	adds	r7, #36	; 0x24
 8011f94:	46bd      	mov	sp, r7
 8011f96:	bd90      	pop	{r4, r7, pc}
 8011f98:	0802b308 	.word	0x0802b308
 8011f9c:	08027318 	.word	0x08027318

08011fa0 <_ZN25FeatureUnsupportedFailureD1Ev>:
{
public:
	BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const SimpleString& text);
};

class FeatureUnsupportedFailure : public TestFailure
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b082      	sub	sp, #8
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
 8011fa8:	4a05      	ldr	r2, [pc, #20]	; (8011fc0 <_ZN25FeatureUnsupportedFailureD1Ev+0x20>)
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	601a      	str	r2, [r3, #0]
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	f7fe fe99 	bl	8010ce8 <_ZN11TestFailureD1Ev>
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	4618      	mov	r0, r3
 8011fba:	3708      	adds	r7, #8
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	bd80      	pop	{r7, pc}
 8011fc0:	0802b308 	.word	0x0802b308

08011fc4 <_ZN25FeatureUnsupportedFailureD0Ev>:
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b082      	sub	sp, #8
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	6078      	str	r0, [r7, #4]
 8011fcc:	6878      	ldr	r0, [r7, #4]
 8011fce:	f7ff ffe7 	bl	8011fa0 <_ZN25FeatureUnsupportedFailureD1Ev>
 8011fd2:	2134      	movs	r1, #52	; 0x34
 8011fd4:	6878      	ldr	r0, [r7, #4]
 8011fd6:	f7fa fbb9 	bl	800c74c <_ZdlPvj>
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	4618      	mov	r0, r3
 8011fde:	3708      	adds	r7, #8
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}

08011fe4 <_ZN16BitsEqualFailureD1Ev>:
class BitsEqualFailure : public TestFailure
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b082      	sub	sp, #8
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
 8011fec:	4a05      	ldr	r2, [pc, #20]	; (8012004 <_ZN16BitsEqualFailureD1Ev+0x20>)
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	601a      	str	r2, [r3, #0]
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	f7fe fe77 	bl	8010ce8 <_ZN11TestFailureD1Ev>
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	3708      	adds	r7, #8
 8012000:	46bd      	mov	sp, r7
 8012002:	bd80      	pop	{r7, pc}
 8012004:	0802b334 	.word	0x0802b334

08012008 <_ZN16BitsEqualFailureD0Ev>:
 8012008:	b580      	push	{r7, lr}
 801200a:	b082      	sub	sp, #8
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
 8012010:	6878      	ldr	r0, [r7, #4]
 8012012:	f7ff ffe7 	bl	8011fe4 <_ZN16BitsEqualFailureD1Ev>
 8012016:	2134      	movs	r1, #52	; 0x34
 8012018:	6878      	ldr	r0, [r7, #4]
 801201a:	f7fa fb97 	bl	800c74c <_ZdlPvj>
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	4618      	mov	r0, r3
 8012022:	3708      	adds	r7, #8
 8012024:	46bd      	mov	sp, r7
 8012026:	bd80      	pop	{r7, pc}

08012028 <_ZN18BinaryEqualFailureD1Ev>:
class BinaryEqualFailure : public TestFailure
 8012028:	b580      	push	{r7, lr}
 801202a:	b082      	sub	sp, #8
 801202c:	af00      	add	r7, sp, #0
 801202e:	6078      	str	r0, [r7, #4]
 8012030:	4a05      	ldr	r2, [pc, #20]	; (8012048 <_ZN18BinaryEqualFailureD1Ev+0x20>)
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	601a      	str	r2, [r3, #0]
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	4618      	mov	r0, r3
 801203a:	f7fe fe55 	bl	8010ce8 <_ZN11TestFailureD1Ev>
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	4618      	mov	r0, r3
 8012042:	3708      	adds	r7, #8
 8012044:	46bd      	mov	sp, r7
 8012046:	bd80      	pop	{r7, pc}
 8012048:	0802b360 	.word	0x0802b360

0801204c <_ZN18BinaryEqualFailureD0Ev>:
 801204c:	b580      	push	{r7, lr}
 801204e:	b082      	sub	sp, #8
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
 8012054:	6878      	ldr	r0, [r7, #4]
 8012056:	f7ff ffe7 	bl	8012028 <_ZN18BinaryEqualFailureD1Ev>
 801205a:	2134      	movs	r1, #52	; 0x34
 801205c:	6878      	ldr	r0, [r7, #4]
 801205e:	f7fa fb75 	bl	800c74c <_ZdlPvj>
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	4618      	mov	r0, r3
 8012066:	3708      	adds	r7, #8
 8012068:	46bd      	mov	sp, r7
 801206a:	bd80      	pop	{r7, pc}

0801206c <_ZN24StringEqualNoCaseFailureD1Ev>:
class StringEqualNoCaseFailure : public TestFailure
 801206c:	b580      	push	{r7, lr}
 801206e:	b082      	sub	sp, #8
 8012070:	af00      	add	r7, sp, #0
 8012072:	6078      	str	r0, [r7, #4]
 8012074:	4a05      	ldr	r2, [pc, #20]	; (801208c <_ZN24StringEqualNoCaseFailureD1Ev+0x20>)
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	601a      	str	r2, [r3, #0]
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	4618      	mov	r0, r3
 801207e:	f7fe fe33 	bl	8010ce8 <_ZN11TestFailureD1Ev>
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	4618      	mov	r0, r3
 8012086:	3708      	adds	r7, #8
 8012088:	46bd      	mov	sp, r7
 801208a:	bd80      	pop	{r7, pc}
 801208c:	0802b38c 	.word	0x0802b38c

08012090 <_ZN24StringEqualNoCaseFailureD0Ev>:
 8012090:	b580      	push	{r7, lr}
 8012092:	b082      	sub	sp, #8
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
 8012098:	6878      	ldr	r0, [r7, #4]
 801209a:	f7ff ffe7 	bl	801206c <_ZN24StringEqualNoCaseFailureD1Ev>
 801209e:	2134      	movs	r1, #52	; 0x34
 80120a0:	6878      	ldr	r0, [r7, #4]
 80120a2:	f7fa fb53 	bl	800c74c <_ZdlPvj>
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	4618      	mov	r0, r3
 80120aa:	3708      	adds	r7, #8
 80120ac:	46bd      	mov	sp, r7
 80120ae:	bd80      	pop	{r7, pc}

080120b0 <_ZN18StringEqualFailureD1Ev>:
class StringEqualFailure : public TestFailure
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b082      	sub	sp, #8
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
 80120b8:	4a05      	ldr	r2, [pc, #20]	; (80120d0 <_ZN18StringEqualFailureD1Ev+0x20>)
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	601a      	str	r2, [r3, #0]
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	4618      	mov	r0, r3
 80120c2:	f7fe fe11 	bl	8010ce8 <_ZN11TestFailureD1Ev>
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	4618      	mov	r0, r3
 80120ca:	3708      	adds	r7, #8
 80120cc:	46bd      	mov	sp, r7
 80120ce:	bd80      	pop	{r7, pc}
 80120d0:	0802b3b8 	.word	0x0802b3b8

080120d4 <_ZN18StringEqualFailureD0Ev>:
 80120d4:	b580      	push	{r7, lr}
 80120d6:	b082      	sub	sp, #8
 80120d8:	af00      	add	r7, sp, #0
 80120da:	6078      	str	r0, [r7, #4]
 80120dc:	6878      	ldr	r0, [r7, #4]
 80120de:	f7ff ffe7 	bl	80120b0 <_ZN18StringEqualFailureD1Ev>
 80120e2:	2134      	movs	r1, #52	; 0x34
 80120e4:	6878      	ldr	r0, [r7, #4]
 80120e6:	f7fa fb31 	bl	800c74c <_ZdlPvj>
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	4618      	mov	r0, r3
 80120ee:	3708      	adds	r7, #8
 80120f0:	46bd      	mov	sp, r7
 80120f2:	bd80      	pop	{r7, pc}

080120f4 <_ZN23SignedBytesEqualFailureD1Ev>:
class SignedBytesEqualFailure : public TestFailure
 80120f4:	b580      	push	{r7, lr}
 80120f6:	b082      	sub	sp, #8
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
 80120fc:	4a05      	ldr	r2, [pc, #20]	; (8012114 <_ZN23SignedBytesEqualFailureD1Ev+0x20>)
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	601a      	str	r2, [r3, #0]
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	4618      	mov	r0, r3
 8012106:	f7fe fdef 	bl	8010ce8 <_ZN11TestFailureD1Ev>
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	4618      	mov	r0, r3
 801210e:	3708      	adds	r7, #8
 8012110:	46bd      	mov	sp, r7
 8012112:	bd80      	pop	{r7, pc}
 8012114:	0802b3e4 	.word	0x0802b3e4

08012118 <_ZN23SignedBytesEqualFailureD0Ev>:
 8012118:	b580      	push	{r7, lr}
 801211a:	b082      	sub	sp, #8
 801211c:	af00      	add	r7, sp, #0
 801211e:	6078      	str	r0, [r7, #4]
 8012120:	6878      	ldr	r0, [r7, #4]
 8012122:	f7ff ffe7 	bl	80120f4 <_ZN23SignedBytesEqualFailureD1Ev>
 8012126:	2134      	movs	r1, #52	; 0x34
 8012128:	6878      	ldr	r0, [r7, #4]
 801212a:	f7fa fb0f 	bl	800c74c <_ZdlPvj>
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	4618      	mov	r0, r3
 8012132:	3708      	adds	r7, #8
 8012134:	46bd      	mov	sp, r7
 8012136:	bd80      	pop	{r7, pc}

08012138 <_ZN25UnsignedLongsEqualFailureD1Ev>:
class UnsignedLongsEqualFailure : public TestFailure
 8012138:	b580      	push	{r7, lr}
 801213a:	b082      	sub	sp, #8
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
 8012140:	4a05      	ldr	r2, [pc, #20]	; (8012158 <_ZN25UnsignedLongsEqualFailureD1Ev+0x20>)
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	601a      	str	r2, [r3, #0]
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	4618      	mov	r0, r3
 801214a:	f7fe fdcd 	bl	8010ce8 <_ZN11TestFailureD1Ev>
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	4618      	mov	r0, r3
 8012152:	3708      	adds	r7, #8
 8012154:	46bd      	mov	sp, r7
 8012156:	bd80      	pop	{r7, pc}
 8012158:	0802b410 	.word	0x0802b410

0801215c <_ZN25UnsignedLongsEqualFailureD0Ev>:
 801215c:	b580      	push	{r7, lr}
 801215e:	b082      	sub	sp, #8
 8012160:	af00      	add	r7, sp, #0
 8012162:	6078      	str	r0, [r7, #4]
 8012164:	6878      	ldr	r0, [r7, #4]
 8012166:	f7ff ffe7 	bl	8012138 <_ZN25UnsignedLongsEqualFailureD1Ev>
 801216a:	2134      	movs	r1, #52	; 0x34
 801216c:	6878      	ldr	r0, [r7, #4]
 801216e:	f7fa faed 	bl	800c74c <_ZdlPvj>
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	4618      	mov	r0, r3
 8012176:	3708      	adds	r7, #8
 8012178:	46bd      	mov	sp, r7
 801217a:	bd80      	pop	{r7, pc}

0801217c <_ZN17LongsEqualFailureD1Ev>:
class LongsEqualFailure : public TestFailure
 801217c:	b580      	push	{r7, lr}
 801217e:	b082      	sub	sp, #8
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
 8012184:	4a05      	ldr	r2, [pc, #20]	; (801219c <_ZN17LongsEqualFailureD1Ev+0x20>)
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	601a      	str	r2, [r3, #0]
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	4618      	mov	r0, r3
 801218e:	f7fe fdab 	bl	8010ce8 <_ZN11TestFailureD1Ev>
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	4618      	mov	r0, r3
 8012196:	3708      	adds	r7, #8
 8012198:	46bd      	mov	sp, r7
 801219a:	bd80      	pop	{r7, pc}
 801219c:	0802b43c 	.word	0x0802b43c

080121a0 <_ZN17LongsEqualFailureD0Ev>:
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b082      	sub	sp, #8
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
 80121a8:	6878      	ldr	r0, [r7, #4]
 80121aa:	f7ff ffe7 	bl	801217c <_ZN17LongsEqualFailureD1Ev>
 80121ae:	2134      	movs	r1, #52	; 0x34
 80121b0:	6878      	ldr	r0, [r7, #4]
 80121b2:	f7fa facb 	bl	800c74c <_ZdlPvj>
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	4618      	mov	r0, r3
 80121ba:	3708      	adds	r7, #8
 80121bc:	46bd      	mov	sp, r7
 80121be:	bd80      	pop	{r7, pc}

080121c0 <_ZN12CheckFailureD1Ev>:
class CheckFailure : public TestFailure
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b082      	sub	sp, #8
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
 80121c8:	4a05      	ldr	r2, [pc, #20]	; (80121e0 <_ZN12CheckFailureD1Ev+0x20>)
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	601a      	str	r2, [r3, #0]
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	4618      	mov	r0, r3
 80121d2:	f7fe fd89 	bl	8010ce8 <_ZN11TestFailureD1Ev>
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	4618      	mov	r0, r3
 80121da:	3708      	adds	r7, #8
 80121dc:	46bd      	mov	sp, r7
 80121de:	bd80      	pop	{r7, pc}
 80121e0:	0802b468 	.word	0x0802b468

080121e4 <_ZN12CheckFailureD0Ev>:
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b082      	sub	sp, #8
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
 80121ec:	6878      	ldr	r0, [r7, #4]
 80121ee:	f7ff ffe7 	bl	80121c0 <_ZN12CheckFailureD1Ev>
 80121f2:	2134      	movs	r1, #52	; 0x34
 80121f4:	6878      	ldr	r0, [r7, #4]
 80121f6:	f7fa faa9 	bl	800c74c <_ZdlPvj>
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	4618      	mov	r0, r3
 80121fe:	3708      	adds	r7, #8
 8012200:	46bd      	mov	sp, r7
 8012202:	bd80      	pop	{r7, pc}

08012204 <_ZN15ContainsFailureD1Ev>:
class ContainsFailure: public TestFailure
 8012204:	b580      	push	{r7, lr}
 8012206:	b082      	sub	sp, #8
 8012208:	af00      	add	r7, sp, #0
 801220a:	6078      	str	r0, [r7, #4]
 801220c:	4a05      	ldr	r2, [pc, #20]	; (8012224 <_ZN15ContainsFailureD1Ev+0x20>)
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	601a      	str	r2, [r3, #0]
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	4618      	mov	r0, r3
 8012216:	f7fe fd67 	bl	8010ce8 <_ZN11TestFailureD1Ev>
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	4618      	mov	r0, r3
 801221e:	3708      	adds	r7, #8
 8012220:	46bd      	mov	sp, r7
 8012222:	bd80      	pop	{r7, pc}
 8012224:	0802b494 	.word	0x0802b494

08012228 <_ZN15ContainsFailureD0Ev>:
 8012228:	b580      	push	{r7, lr}
 801222a:	b082      	sub	sp, #8
 801222c:	af00      	add	r7, sp, #0
 801222e:	6078      	str	r0, [r7, #4]
 8012230:	6878      	ldr	r0, [r7, #4]
 8012232:	f7ff ffe7 	bl	8012204 <_ZN15ContainsFailureD1Ev>
 8012236:	2134      	movs	r1, #52	; 0x34
 8012238:	6878      	ldr	r0, [r7, #4]
 801223a:	f7fa fa87 	bl	800c74c <_ZdlPvj>
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	4618      	mov	r0, r3
 8012242:	3708      	adds	r7, #8
 8012244:	46bd      	mov	sp, r7
 8012246:	bd80      	pop	{r7, pc}

08012248 <_ZN17ComparisonFailureD1Ev>:
class ComparisonFailure : public TestFailure
 8012248:	b580      	push	{r7, lr}
 801224a:	b082      	sub	sp, #8
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
 8012250:	4a05      	ldr	r2, [pc, #20]	; (8012268 <_ZN17ComparisonFailureD1Ev+0x20>)
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	601a      	str	r2, [r3, #0]
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	4618      	mov	r0, r3
 801225a:	f7fe fd45 	bl	8010ce8 <_ZN11TestFailureD1Ev>
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	4618      	mov	r0, r3
 8012262:	3708      	adds	r7, #8
 8012264:	46bd      	mov	sp, r7
 8012266:	bd80      	pop	{r7, pc}
 8012268:	0802b4c0 	.word	0x0802b4c0

0801226c <_ZN17ComparisonFailureD0Ev>:
 801226c:	b580      	push	{r7, lr}
 801226e:	b082      	sub	sp, #8
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
 8012274:	6878      	ldr	r0, [r7, #4]
 8012276:	f7ff ffe7 	bl	8012248 <_ZN17ComparisonFailureD1Ev>
 801227a:	2134      	movs	r1, #52	; 0x34
 801227c:	6878      	ldr	r0, [r7, #4]
 801227e:	f7fa fa65 	bl	800c74c <_ZdlPvj>
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	4618      	mov	r0, r3
 8012286:	3708      	adds	r7, #8
 8012288:	46bd      	mov	sp, r7
 801228a:	bd80      	pop	{r7, pc}

0801228c <_ZN17CheckEqualFailureD1Ev>:
class CheckEqualFailure : public TestFailure
 801228c:	b580      	push	{r7, lr}
 801228e:	b082      	sub	sp, #8
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
 8012294:	4a05      	ldr	r2, [pc, #20]	; (80122ac <_ZN17CheckEqualFailureD1Ev+0x20>)
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	601a      	str	r2, [r3, #0]
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	4618      	mov	r0, r3
 801229e:	f7fe fd23 	bl	8010ce8 <_ZN11TestFailureD1Ev>
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	4618      	mov	r0, r3
 80122a6:	3708      	adds	r7, #8
 80122a8:	46bd      	mov	sp, r7
 80122aa:	bd80      	pop	{r7, pc}
 80122ac:	0802b4ec 	.word	0x0802b4ec

080122b0 <_ZN17CheckEqualFailureD0Ev>:
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b082      	sub	sp, #8
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
 80122b8:	6878      	ldr	r0, [r7, #4]
 80122ba:	f7ff ffe7 	bl	801228c <_ZN17CheckEqualFailureD1Ev>
 80122be:	2134      	movs	r1, #52	; 0x34
 80122c0:	6878      	ldr	r0, [r7, #4]
 80122c2:	f7fa fa43 	bl	800c74c <_ZdlPvj>
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	4618      	mov	r0, r3
 80122ca:	3708      	adds	r7, #8
 80122cc:	46bd      	mov	sp, r7
 80122ce:	bd80      	pop	{r7, pc}

080122d0 <_ZN19DoublesEqualFailureD1Ev>:
class DoublesEqualFailure: public TestFailure
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b082      	sub	sp, #8
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
 80122d8:	4a05      	ldr	r2, [pc, #20]	; (80122f0 <_ZN19DoublesEqualFailureD1Ev+0x20>)
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	601a      	str	r2, [r3, #0]
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	4618      	mov	r0, r3
 80122e2:	f7fe fd01 	bl	8010ce8 <_ZN11TestFailureD1Ev>
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	4618      	mov	r0, r3
 80122ea:	3708      	adds	r7, #8
 80122ec:	46bd      	mov	sp, r7
 80122ee:	bd80      	pop	{r7, pc}
 80122f0:	0802b518 	.word	0x0802b518

080122f4 <_ZN19DoublesEqualFailureD0Ev>:
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b082      	sub	sp, #8
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
 80122fc:	6878      	ldr	r0, [r7, #4]
 80122fe:	f7ff ffe7 	bl	80122d0 <_ZN19DoublesEqualFailureD1Ev>
 8012302:	2134      	movs	r1, #52	; 0x34
 8012304:	6878      	ldr	r0, [r7, #4]
 8012306:	f7fa fa21 	bl	800c74c <_ZdlPvj>
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	4618      	mov	r0, r3
 801230e:	3708      	adds	r7, #8
 8012310:	46bd      	mov	sp, r7
 8012312:	bd80      	pop	{r7, pc}

08012314 <_ZN13EqualsFailureD1Ev>:
class EqualsFailure: public TestFailure
 8012314:	b580      	push	{r7, lr}
 8012316:	b082      	sub	sp, #8
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
 801231c:	4a05      	ldr	r2, [pc, #20]	; (8012334 <_ZN13EqualsFailureD1Ev+0x20>)
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	601a      	str	r2, [r3, #0]
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	4618      	mov	r0, r3
 8012326:	f7fe fcdf 	bl	8010ce8 <_ZN11TestFailureD1Ev>
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	4618      	mov	r0, r3
 801232e:	3708      	adds	r7, #8
 8012330:	46bd      	mov	sp, r7
 8012332:	bd80      	pop	{r7, pc}
 8012334:	0802b544 	.word	0x0802b544

08012338 <_ZN13EqualsFailureD0Ev>:
 8012338:	b580      	push	{r7, lr}
 801233a:	b082      	sub	sp, #8
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
 8012340:	6878      	ldr	r0, [r7, #4]
 8012342:	f7ff ffe7 	bl	8012314 <_ZN13EqualsFailureD1Ev>
 8012346:	2134      	movs	r1, #52	; 0x34
 8012348:	6878      	ldr	r0, [r7, #4]
 801234a:	f7fa f9ff 	bl	800c74c <_ZdlPvj>
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	4618      	mov	r0, r3
 8012352:	3708      	adds	r7, #8
 8012354:	46bd      	mov	sp, r7
 8012356:	bd80      	pop	{r7, pc}

08012358 <_ZL13checkedMallocj>:
#include "CppUTest/TestMemoryAllocator.h"
#include "CppUTest/PlatformSpecificFunctions.h"
#include "CppUTest/MemoryLeakDetector.h"

static char* checkedMalloc(size_t size)
{
 8012358:	b5b0      	push	{r4, r5, r7, lr}
 801235a:	b086      	sub	sp, #24
 801235c:	af02      	add	r7, sp, #8
 801235e:	6078      	str	r0, [r7, #4]
    char* mem = (char*) PlatformSpecificMalloc(size);
 8012360:	4b0d      	ldr	r3, [pc, #52]	; (8012398 <_ZL13checkedMallocj+0x40>)
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	6878      	ldr	r0, [r7, #4]
 8012366:	4798      	blx	r3
 8012368:	60f8      	str	r0, [r7, #12]
    if (mem == NULLPTR)
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d10e      	bne.n	801238e <_ZL13checkedMallocj+0x36>
    FAIL("malloc returned null pointer");
 8012370:	f004 f97e 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8012374:	4604      	mov	r4, r0
 8012376:	6823      	ldr	r3, [r4, #0]
 8012378:	3368      	adds	r3, #104	; 0x68
 801237a:	681d      	ldr	r5, [r3, #0]
 801237c:	f004 f988 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8012380:	4603      	mov	r3, r0
 8012382:	9300      	str	r3, [sp, #0]
 8012384:	2325      	movs	r3, #37	; 0x25
 8012386:	4a05      	ldr	r2, [pc, #20]	; (801239c <_ZL13checkedMallocj+0x44>)
 8012388:	4905      	ldr	r1, [pc, #20]	; (80123a0 <_ZL13checkedMallocj+0x48>)
 801238a:	4620      	mov	r0, r4
 801238c:	47a8      	blx	r5
    return mem;
 801238e:	68fb      	ldr	r3, [r7, #12]
}
 8012390:	4618      	mov	r0, r3
 8012392:	3710      	adds	r7, #16
 8012394:	46bd      	mov	sp, r7
 8012396:	bdb0      	pop	{r4, r5, r7, pc}
 8012398:	200000c8 	.word	0x200000c8
 801239c:	0802738c 	.word	0x0802738c
 80123a0:	080273ac 	.word	0x080273ac

080123a4 <_Z22getCurrentNewAllocatorv>:
{
    currentNewAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewAllocator()
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	af00      	add	r7, sp, #0
    if (currentNewAllocator == NULLPTR) setCurrentNewAllocatorToDefault();
 80123a8:	4b04      	ldr	r3, [pc, #16]	; (80123bc <_Z22getCurrentNewAllocatorv+0x18>)
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d101      	bne.n	80123b4 <_Z22getCurrentNewAllocatorv+0x10>
 80123b0:	f000 f806 	bl	80123c0 <_Z31setCurrentNewAllocatorToDefaultv>
    return currentNewAllocator;
 80123b4:	4b01      	ldr	r3, [pc, #4]	; (80123bc <_Z22getCurrentNewAllocatorv+0x18>)
 80123b6:	681b      	ldr	r3, [r3, #0]
}
 80123b8:	4618      	mov	r0, r3
 80123ba:	bd80      	pop	{r7, pc}
 80123bc:	20000a18 	.word	0x20000a18

080123c0 <_Z31setCurrentNewAllocatorToDefaultv>:

void setCurrentNewAllocatorToDefault()
{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	af00      	add	r7, sp, #0
    currentNewAllocator = defaultNewAllocator();
 80123c4:	f000 f810 	bl	80123e8 <_Z19defaultNewAllocatorv>
 80123c8:	4603      	mov	r3, r0
 80123ca:	4a02      	ldr	r2, [pc, #8]	; (80123d4 <_Z31setCurrentNewAllocatorToDefaultv+0x14>)
 80123cc:	6013      	str	r3, [r2, #0]
}
 80123ce:	bf00      	nop
 80123d0:	bd80      	pop	{r7, pc}
 80123d2:	bf00      	nop
 80123d4:	20000a18 	.word	0x20000a18

080123d8 <__tcf_0>:

TestMemoryAllocator* defaultNewAllocator()
{
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 80123d8:	b580      	push	{r7, lr}
 80123da:	af00      	add	r7, sp, #0
 80123dc:	4801      	ldr	r0, [pc, #4]	; (80123e4 <__tcf_0+0xc>)
 80123de:	f000 f909 	bl	80125f4 <_ZN19TestMemoryAllocatorD1Ev>
 80123e2:	bd80      	pop	{r7, pc}
 80123e4:	20000a24 	.word	0x20000a24

080123e8 <_Z19defaultNewAllocatorv>:
{
 80123e8:	b580      	push	{r7, lr}
 80123ea:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 80123ec:	4b13      	ldr	r3, [pc, #76]	; (801243c <_Z19defaultNewAllocatorv+0x54>)
 80123ee:	781b      	ldrb	r3, [r3, #0]
 80123f0:	f3bf 8f5b 	dmb	ish
 80123f4:	b2db      	uxtb	r3, r3
 80123f6:	f003 0301 	and.w	r3, r3, #1
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	bf0c      	ite	eq
 80123fe:	2301      	moveq	r3, #1
 8012400:	2300      	movne	r3, #0
 8012402:	b2db      	uxtb	r3, r3
 8012404:	2b00      	cmp	r3, #0
 8012406:	d016      	beq.n	8012436 <_Z19defaultNewAllocatorv+0x4e>
 8012408:	480c      	ldr	r0, [pc, #48]	; (801243c <_Z19defaultNewAllocatorv+0x54>)
 801240a:	f00f fc0d 	bl	8021c28 <__cxa_guard_acquire>
 801240e:	4603      	mov	r3, r0
 8012410:	2b00      	cmp	r3, #0
 8012412:	bf14      	ite	ne
 8012414:	2301      	movne	r3, #1
 8012416:	2300      	moveq	r3, #0
 8012418:	b2db      	uxtb	r3, r3
 801241a:	2b00      	cmp	r3, #0
 801241c:	d00b      	beq.n	8012436 <_Z19defaultNewAllocatorv+0x4e>
 801241e:	4b08      	ldr	r3, [pc, #32]	; (8012440 <_Z19defaultNewAllocatorv+0x58>)
 8012420:	4a08      	ldr	r2, [pc, #32]	; (8012444 <_Z19defaultNewAllocatorv+0x5c>)
 8012422:	4909      	ldr	r1, [pc, #36]	; (8012448 <_Z19defaultNewAllocatorv+0x60>)
 8012424:	4809      	ldr	r0, [pc, #36]	; (801244c <_Z19defaultNewAllocatorv+0x64>)
 8012426:	f000 f8c5 	bl	80125b4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 801242a:	4804      	ldr	r0, [pc, #16]	; (801243c <_Z19defaultNewAllocatorv+0x54>)
 801242c:	f00f fc08 	bl	8021c40 <__cxa_guard_release>
 8012430:	4807      	ldr	r0, [pc, #28]	; (8012450 <_Z19defaultNewAllocatorv+0x68>)
 8012432:	f00f fc2c 	bl	8021c8e <atexit>
    return &allocator;
 8012436:	4b05      	ldr	r3, [pc, #20]	; (801244c <_Z19defaultNewAllocatorv+0x64>)
}
 8012438:	4618      	mov	r0, r3
 801243a:	bd80      	pop	{r7, pc}
 801243c:	20000a38 	.word	0x20000a38
 8012440:	080273cc 	.word	0x080273cc
 8012444:	080273d4 	.word	0x080273d4
 8012448:	080273d8 	.word	0x080273d8
 801244c:	20000a24 	.word	0x20000a24
 8012450:	080123d9 	.word	0x080123d9

08012454 <_Z27getCurrentNewArrayAllocatorv>:
{
    currentNewArrayAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewArrayAllocator()
{
 8012454:	b580      	push	{r7, lr}
 8012456:	af00      	add	r7, sp, #0
    if (currentNewArrayAllocator == NULLPTR) setCurrentNewArrayAllocatorToDefault();
 8012458:	4b04      	ldr	r3, [pc, #16]	; (801246c <_Z27getCurrentNewArrayAllocatorv+0x18>)
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	2b00      	cmp	r3, #0
 801245e:	d101      	bne.n	8012464 <_Z27getCurrentNewArrayAllocatorv+0x10>
 8012460:	f000 f806 	bl	8012470 <_Z36setCurrentNewArrayAllocatorToDefaultv>
    return currentNewArrayAllocator;
 8012464:	4b01      	ldr	r3, [pc, #4]	; (801246c <_Z27getCurrentNewArrayAllocatorv+0x18>)
 8012466:	681b      	ldr	r3, [r3, #0]
}
 8012468:	4618      	mov	r0, r3
 801246a:	bd80      	pop	{r7, pc}
 801246c:	20000a1c 	.word	0x20000a1c

08012470 <_Z36setCurrentNewArrayAllocatorToDefaultv>:

void setCurrentNewArrayAllocatorToDefault()
{
 8012470:	b580      	push	{r7, lr}
 8012472:	af00      	add	r7, sp, #0
    currentNewArrayAllocator = defaultNewArrayAllocator();
 8012474:	f000 f810 	bl	8012498 <_Z24defaultNewArrayAllocatorv>
 8012478:	4603      	mov	r3, r0
 801247a:	4a02      	ldr	r2, [pc, #8]	; (8012484 <_Z36setCurrentNewArrayAllocatorToDefaultv+0x14>)
 801247c:	6013      	str	r3, [r2, #0]
}
 801247e:	bf00      	nop
 8012480:	bd80      	pop	{r7, pc}
 8012482:	bf00      	nop
 8012484:	20000a1c 	.word	0x20000a1c

08012488 <__tcf_1>:

TestMemoryAllocator* defaultNewArrayAllocator()
{
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 8012488:	b580      	push	{r7, lr}
 801248a:	af00      	add	r7, sp, #0
 801248c:	4801      	ldr	r0, [pc, #4]	; (8012494 <__tcf_1+0xc>)
 801248e:	f000 f8b1 	bl	80125f4 <_ZN19TestMemoryAllocatorD1Ev>
 8012492:	bd80      	pop	{r7, pc}
 8012494:	20000a3c 	.word	0x20000a3c

08012498 <_Z24defaultNewArrayAllocatorv>:
{
 8012498:	b580      	push	{r7, lr}
 801249a:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 801249c:	4b13      	ldr	r3, [pc, #76]	; (80124ec <_Z24defaultNewArrayAllocatorv+0x54>)
 801249e:	781b      	ldrb	r3, [r3, #0]
 80124a0:	f3bf 8f5b 	dmb	ish
 80124a4:	b2db      	uxtb	r3, r3
 80124a6:	f003 0301 	and.w	r3, r3, #1
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	bf0c      	ite	eq
 80124ae:	2301      	moveq	r3, #1
 80124b0:	2300      	movne	r3, #0
 80124b2:	b2db      	uxtb	r3, r3
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d016      	beq.n	80124e6 <_Z24defaultNewArrayAllocatorv+0x4e>
 80124b8:	480c      	ldr	r0, [pc, #48]	; (80124ec <_Z24defaultNewArrayAllocatorv+0x54>)
 80124ba:	f00f fbb5 	bl	8021c28 <__cxa_guard_acquire>
 80124be:	4603      	mov	r3, r0
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	bf14      	ite	ne
 80124c4:	2301      	movne	r3, #1
 80124c6:	2300      	moveq	r3, #0
 80124c8:	b2db      	uxtb	r3, r3
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d00b      	beq.n	80124e6 <_Z24defaultNewArrayAllocatorv+0x4e>
 80124ce:	4b08      	ldr	r3, [pc, #32]	; (80124f0 <_Z24defaultNewArrayAllocatorv+0x58>)
 80124d0:	4a08      	ldr	r2, [pc, #32]	; (80124f4 <_Z24defaultNewArrayAllocatorv+0x5c>)
 80124d2:	4909      	ldr	r1, [pc, #36]	; (80124f8 <_Z24defaultNewArrayAllocatorv+0x60>)
 80124d4:	4809      	ldr	r0, [pc, #36]	; (80124fc <_Z24defaultNewArrayAllocatorv+0x64>)
 80124d6:	f000 f86d 	bl	80125b4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 80124da:	4804      	ldr	r0, [pc, #16]	; (80124ec <_Z24defaultNewArrayAllocatorv+0x54>)
 80124dc:	f00f fbb0 	bl	8021c40 <__cxa_guard_release>
 80124e0:	4807      	ldr	r0, [pc, #28]	; (8012500 <_Z24defaultNewArrayAllocatorv+0x68>)
 80124e2:	f00f fbd4 	bl	8021c8e <atexit>
    return &allocator;
 80124e6:	4b05      	ldr	r3, [pc, #20]	; (80124fc <_Z24defaultNewArrayAllocatorv+0x64>)
}
 80124e8:	4618      	mov	r0, r3
 80124ea:	bd80      	pop	{r7, pc}
 80124ec:	20000a50 	.word	0x20000a50
 80124f0:	080273f0 	.word	0x080273f0
 80124f4:	080273fc 	.word	0x080273fc
 80124f8:	08027404 	.word	0x08027404
 80124fc:	20000a3c 	.word	0x20000a3c
 8012500:	08012489 	.word	0x08012489

08012504 <_Z25getCurrentMallocAllocatorv>:
{
    currentMallocAllocator = allocator;
}

TestMemoryAllocator* getCurrentMallocAllocator()
{
 8012504:	b580      	push	{r7, lr}
 8012506:	af00      	add	r7, sp, #0
    if (currentMallocAllocator == NULLPTR) setCurrentMallocAllocatorToDefault();
 8012508:	4b04      	ldr	r3, [pc, #16]	; (801251c <_Z25getCurrentMallocAllocatorv+0x18>)
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d101      	bne.n	8012514 <_Z25getCurrentMallocAllocatorv+0x10>
 8012510:	f000 f806 	bl	8012520 <_Z34setCurrentMallocAllocatorToDefaultv>
    return currentMallocAllocator;
 8012514:	4b01      	ldr	r3, [pc, #4]	; (801251c <_Z25getCurrentMallocAllocatorv+0x18>)
 8012516:	681b      	ldr	r3, [r3, #0]
}
 8012518:	4618      	mov	r0, r3
 801251a:	bd80      	pop	{r7, pc}
 801251c:	20000a20 	.word	0x20000a20

08012520 <_Z34setCurrentMallocAllocatorToDefaultv>:

void setCurrentMallocAllocatorToDefault()
{
 8012520:	b580      	push	{r7, lr}
 8012522:	af00      	add	r7, sp, #0
    currentMallocAllocator = defaultMallocAllocator();
 8012524:	f000 f810 	bl	8012548 <_Z22defaultMallocAllocatorv>
 8012528:	4603      	mov	r3, r0
 801252a:	4a02      	ldr	r2, [pc, #8]	; (8012534 <_Z34setCurrentMallocAllocatorToDefaultv+0x14>)
 801252c:	6013      	str	r3, [r2, #0]
}
 801252e:	bf00      	nop
 8012530:	bd80      	pop	{r7, pc}
 8012532:	bf00      	nop
 8012534:	20000a20 	.word	0x20000a20

08012538 <__tcf_2>:

TestMemoryAllocator* defaultMallocAllocator()
{
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 8012538:	b580      	push	{r7, lr}
 801253a:	af00      	add	r7, sp, #0
 801253c:	4801      	ldr	r0, [pc, #4]	; (8012544 <__tcf_2+0xc>)
 801253e:	f000 f859 	bl	80125f4 <_ZN19TestMemoryAllocatorD1Ev>
 8012542:	bd80      	pop	{r7, pc}
 8012544:	20000a54 	.word	0x20000a54

08012548 <_Z22defaultMallocAllocatorv>:
{
 8012548:	b580      	push	{r7, lr}
 801254a:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 801254c:	4b13      	ldr	r3, [pc, #76]	; (801259c <_Z22defaultMallocAllocatorv+0x54>)
 801254e:	781b      	ldrb	r3, [r3, #0]
 8012550:	f3bf 8f5b 	dmb	ish
 8012554:	b2db      	uxtb	r3, r3
 8012556:	f003 0301 	and.w	r3, r3, #1
 801255a:	2b00      	cmp	r3, #0
 801255c:	bf0c      	ite	eq
 801255e:	2301      	moveq	r3, #1
 8012560:	2300      	movne	r3, #0
 8012562:	b2db      	uxtb	r3, r3
 8012564:	2b00      	cmp	r3, #0
 8012566:	d016      	beq.n	8012596 <_Z22defaultMallocAllocatorv+0x4e>
 8012568:	480c      	ldr	r0, [pc, #48]	; (801259c <_Z22defaultMallocAllocatorv+0x54>)
 801256a:	f00f fb5d 	bl	8021c28 <__cxa_guard_acquire>
 801256e:	4603      	mov	r3, r0
 8012570:	2b00      	cmp	r3, #0
 8012572:	bf14      	ite	ne
 8012574:	2301      	movne	r3, #1
 8012576:	2300      	moveq	r3, #0
 8012578:	b2db      	uxtb	r3, r3
 801257a:	2b00      	cmp	r3, #0
 801257c:	d00b      	beq.n	8012596 <_Z22defaultMallocAllocatorv+0x4e>
 801257e:	4b08      	ldr	r3, [pc, #32]	; (80125a0 <_Z22defaultMallocAllocatorv+0x58>)
 8012580:	4a08      	ldr	r2, [pc, #32]	; (80125a4 <_Z22defaultMallocAllocatorv+0x5c>)
 8012582:	4909      	ldr	r1, [pc, #36]	; (80125a8 <_Z22defaultMallocAllocatorv+0x60>)
 8012584:	4809      	ldr	r0, [pc, #36]	; (80125ac <_Z22defaultMallocAllocatorv+0x64>)
 8012586:	f000 f815 	bl	80125b4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 801258a:	4804      	ldr	r0, [pc, #16]	; (801259c <_Z22defaultMallocAllocatorv+0x54>)
 801258c:	f00f fb58 	bl	8021c40 <__cxa_guard_release>
 8012590:	4807      	ldr	r0, [pc, #28]	; (80125b0 <_Z22defaultMallocAllocatorv+0x68>)
 8012592:	f00f fb7c 	bl	8021c8e <atexit>
    return &allocator;
 8012596:	4b05      	ldr	r3, [pc, #20]	; (80125ac <_Z22defaultMallocAllocatorv+0x64>)
}
 8012598:	4618      	mov	r0, r3
 801259a:	bd80      	pop	{r7, pc}
 801259c:	20000a68 	.word	0x20000a68
 80125a0:	08027420 	.word	0x08027420
 80125a4:	08027428 	.word	0x08027428
 80125a8:	08027430 	.word	0x08027430
 80125ac:	20000a54 	.word	0x20000a54
 80125b0:	08012539 	.word	0x08012539

080125b4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>:
    if (originalMallocAllocator) setCurrentMallocAllocator(originalMallocAllocator);
    if (originalNewAllocator) setCurrentNewAllocator(originalNewAllocator);
    if (originalNewArrayAllocator) setCurrentNewArrayAllocator(originalNewArrayAllocator);
}

TestMemoryAllocator::TestMemoryAllocator(const char* name_str, const char* alloc_name_str, const char* free_name_str)
 80125b4:	b480      	push	{r7}
 80125b6:	b085      	sub	sp, #20
 80125b8:	af00      	add	r7, sp, #0
 80125ba:	60f8      	str	r0, [r7, #12]
 80125bc:	60b9      	str	r1, [r7, #8]
 80125be:	607a      	str	r2, [r7, #4]
 80125c0:	603b      	str	r3, [r7, #0]
    : name_(name_str), alloc_name_(alloc_name_str), free_name_(free_name_str), hasBeenDestroyed_(false)
 80125c2:	4a0b      	ldr	r2, [pc, #44]	; (80125f0 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_+0x3c>)
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	601a      	str	r2, [r3, #0]
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	68ba      	ldr	r2, [r7, #8]
 80125cc:	605a      	str	r2, [r3, #4]
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	687a      	ldr	r2, [r7, #4]
 80125d2:	609a      	str	r2, [r3, #8]
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	683a      	ldr	r2, [r7, #0]
 80125d8:	60da      	str	r2, [r3, #12]
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	2200      	movs	r2, #0
 80125de:	741a      	strb	r2, [r3, #16]
{
}
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	4618      	mov	r0, r3
 80125e4:	3714      	adds	r7, #20
 80125e6:	46bd      	mov	sp, r7
 80125e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ec:	4770      	bx	lr
 80125ee:	bf00      	nop
 80125f0:	0802b5d0 	.word	0x0802b5d0

080125f4 <_ZN19TestMemoryAllocatorD1Ev>:

TestMemoryAllocator::~TestMemoryAllocator()
 80125f4:	b480      	push	{r7}
 80125f6:	b083      	sub	sp, #12
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
 80125fc:	4a06      	ldr	r2, [pc, #24]	; (8012618 <_ZN19TestMemoryAllocatorD1Ev+0x24>)
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	601a      	str	r2, [r3, #0]
{
    hasBeenDestroyed_ = true;
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	2201      	movs	r2, #1
 8012606:	741a      	strb	r2, [r3, #16]
}
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	4618      	mov	r0, r3
 801260c:	370c      	adds	r7, #12
 801260e:	46bd      	mov	sp, r7
 8012610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012614:	4770      	bx	lr
 8012616:	bf00      	nop
 8012618:	0802b5d0 	.word	0x0802b5d0

0801261c <_ZN19TestMemoryAllocatorD0Ev>:
TestMemoryAllocator::~TestMemoryAllocator()
 801261c:	b580      	push	{r7, lr}
 801261e:	b082      	sub	sp, #8
 8012620:	af00      	add	r7, sp, #0
 8012622:	6078      	str	r0, [r7, #4]
}
 8012624:	6878      	ldr	r0, [r7, #4]
 8012626:	f7ff ffe5 	bl	80125f4 <_ZN19TestMemoryAllocatorD1Ev>
 801262a:	2114      	movs	r1, #20
 801262c:	6878      	ldr	r0, [r7, #4]
 801262e:	f7fa f88d 	bl	800c74c <_ZdlPvj>
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	4618      	mov	r0, r3
 8012636:	3708      	adds	r7, #8
 8012638:	46bd      	mov	sp, r7
 801263a:	bd80      	pop	{r7, pc}

0801263c <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>:

bool TestMemoryAllocator::hasBeenDestroyed()
{
 801263c:	b480      	push	{r7}
 801263e:	b083      	sub	sp, #12
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
    return hasBeenDestroyed_;
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	7c1b      	ldrb	r3, [r3, #16]
}
 8012648:	4618      	mov	r0, r3
 801264a:	370c      	adds	r7, #12
 801264c:	46bd      	mov	sp, r7
 801264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012652:	4770      	bx	lr

08012654 <_ZN19TestMemoryAllocator13isOfEqualTypeEPS_>:

bool TestMemoryAllocator::isOfEqualType(TestMemoryAllocator* allocator)
{
 8012654:	b590      	push	{r4, r7, lr}
 8012656:	b083      	sub	sp, #12
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
 801265c:	6039      	str	r1, [r7, #0]
    return SimpleString::StrCmp(this->name(), allocator->name()) == 0;
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	3310      	adds	r3, #16
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	6878      	ldr	r0, [r7, #4]
 8012668:	4798      	blx	r3
 801266a:	4604      	mov	r4, r0
 801266c:	683b      	ldr	r3, [r7, #0]
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	3310      	adds	r3, #16
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	6838      	ldr	r0, [r7, #0]
 8012676:	4798      	blx	r3
 8012678:	4603      	mov	r3, r0
 801267a:	4619      	mov	r1, r3
 801267c:	4620      	mov	r0, r4
 801267e:	f7fc fa51 	bl	800eb24 <_ZN12SimpleString6StrCmpEPKcS1_>
 8012682:	4603      	mov	r3, r0
 8012684:	2b00      	cmp	r3, #0
 8012686:	bf0c      	ite	eq
 8012688:	2301      	moveq	r3, #1
 801268a:	2300      	movne	r3, #0
 801268c:	b2db      	uxtb	r3, r3
}
 801268e:	4618      	mov	r0, r3
 8012690:	370c      	adds	r7, #12
 8012692:	46bd      	mov	sp, r7
 8012694:	bd90      	pop	{r4, r7, pc}
	...

08012698 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj>:

char* TestMemoryAllocator::allocMemoryLeakNode(size_t size)
{
 8012698:	b590      	push	{r4, r7, lr}
 801269a:	b083      	sub	sp, #12
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
 80126a0:	6039      	str	r1, [r7, #0]
    return alloc_memory(size, "MemoryLeakNode", 1);
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	3308      	adds	r3, #8
 80126a8:	681c      	ldr	r4, [r3, #0]
 80126aa:	2301      	movs	r3, #1
 80126ac:	4a04      	ldr	r2, [pc, #16]	; (80126c0 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj+0x28>)
 80126ae:	6839      	ldr	r1, [r7, #0]
 80126b0:	6878      	ldr	r0, [r7, #4]
 80126b2:	47a0      	blx	r4
 80126b4:	4603      	mov	r3, r0
}
 80126b6:	4618      	mov	r0, r3
 80126b8:	370c      	adds	r7, #12
 80126ba:	46bd      	mov	sp, r7
 80126bc:	bd90      	pop	{r4, r7, pc}
 80126be:	bf00      	nop
 80126c0:	0802744c 	.word	0x0802744c

080126c4 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc>:

void TestMemoryAllocator::freeMemoryLeakNode(char* memory)
{
 80126c4:	b590      	push	{r4, r7, lr}
 80126c6:	b085      	sub	sp, #20
 80126c8:	af02      	add	r7, sp, #8
 80126ca:	6078      	str	r0, [r7, #4]
 80126cc:	6039      	str	r1, [r7, #0]
    free_memory(memory, 0, "MemoryLeakNode", 1);
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	330c      	adds	r3, #12
 80126d4:	681c      	ldr	r4, [r3, #0]
 80126d6:	2301      	movs	r3, #1
 80126d8:	9300      	str	r3, [sp, #0]
 80126da:	4b04      	ldr	r3, [pc, #16]	; (80126ec <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc+0x28>)
 80126dc:	2200      	movs	r2, #0
 80126de:	6839      	ldr	r1, [r7, #0]
 80126e0:	6878      	ldr	r0, [r7, #4]
 80126e2:	47a0      	blx	r4
}
 80126e4:	bf00      	nop
 80126e6:	370c      	adds	r7, #12
 80126e8:	46bd      	mov	sp, r7
 80126ea:	bd90      	pop	{r4, r7, pc}
 80126ec:	0802744c 	.word	0x0802744c

080126f0 <_ZN19TestMemoryAllocator12alloc_memoryEjPKcj>:

char* TestMemoryAllocator::alloc_memory(size_t size, const char*, size_t)
{
 80126f0:	b580      	push	{r7, lr}
 80126f2:	b084      	sub	sp, #16
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	60f8      	str	r0, [r7, #12]
 80126f8:	60b9      	str	r1, [r7, #8]
 80126fa:	607a      	str	r2, [r7, #4]
 80126fc:	603b      	str	r3, [r7, #0]
    return checkedMalloc(size);
 80126fe:	68b8      	ldr	r0, [r7, #8]
 8012700:	f7ff fe2a 	bl	8012358 <_ZL13checkedMallocj>
 8012704:	4603      	mov	r3, r0
}
 8012706:	4618      	mov	r0, r3
 8012708:	3710      	adds	r7, #16
 801270a:	46bd      	mov	sp, r7
 801270c:	bd80      	pop	{r7, pc}
	...

08012710 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj>:

void TestMemoryAllocator::free_memory(char* memory, size_t, const char*, size_t)
{
 8012710:	b580      	push	{r7, lr}
 8012712:	b084      	sub	sp, #16
 8012714:	af00      	add	r7, sp, #0
 8012716:	60f8      	str	r0, [r7, #12]
 8012718:	60b9      	str	r1, [r7, #8]
 801271a:	607a      	str	r2, [r7, #4]
 801271c:	603b      	str	r3, [r7, #0]
    PlatformSpecificFree(memory);
 801271e:	4b04      	ldr	r3, [pc, #16]	; (8012730 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj+0x20>)
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	68b8      	ldr	r0, [r7, #8]
 8012724:	4798      	blx	r3
}
 8012726:	bf00      	nop
 8012728:	3710      	adds	r7, #16
 801272a:	46bd      	mov	sp, r7
 801272c:	bd80      	pop	{r7, pc}
 801272e:	bf00      	nop
 8012730:	200000d0 	.word	0x200000d0

08012734 <_ZNK19TestMemoryAllocator4nameEv>:

const char* TestMemoryAllocator::name() const
{
 8012734:	b480      	push	{r7}
 8012736:	b083      	sub	sp, #12
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
    return name_;
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	685b      	ldr	r3, [r3, #4]
}
 8012740:	4618      	mov	r0, r3
 8012742:	370c      	adds	r7, #12
 8012744:	46bd      	mov	sp, r7
 8012746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801274a:	4770      	bx	lr

0801274c <_ZNK19TestMemoryAllocator10alloc_nameEv>:

const char* TestMemoryAllocator::alloc_name() const
{
 801274c:	b480      	push	{r7}
 801274e:	b083      	sub	sp, #12
 8012750:	af00      	add	r7, sp, #0
 8012752:	6078      	str	r0, [r7, #4]
    return alloc_name_;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	689b      	ldr	r3, [r3, #8]
}
 8012758:	4618      	mov	r0, r3
 801275a:	370c      	adds	r7, #12
 801275c:	46bd      	mov	sp, r7
 801275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012762:	4770      	bx	lr

08012764 <_ZNK19TestMemoryAllocator9free_nameEv>:

const char* TestMemoryAllocator::free_name() const
{
 8012764:	b480      	push	{r7}
 8012766:	b083      	sub	sp, #12
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]
    return free_name_;
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	68db      	ldr	r3, [r3, #12]
}
 8012770:	4618      	mov	r0, r3
 8012772:	370c      	adds	r7, #12
 8012774:	46bd      	mov	sp, r7
 8012776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801277a:	4770      	bx	lr

0801277c <_ZN19TestMemoryAllocator15actualAllocatorEv>:

TestMemoryAllocator* TestMemoryAllocator::actualAllocator()
{
 801277c:	b480      	push	{r7}
 801277e:	b083      	sub	sp, #12
 8012780:	af00      	add	r7, sp, #0
 8012782:	6078      	str	r0, [r7, #4]
    return this;
 8012784:	687b      	ldr	r3, [r7, #4]
}
 8012786:	4618      	mov	r0, r3
 8012788:	370c      	adds	r7, #12
 801278a:	46bd      	mov	sp, r7
 801278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012790:	4770      	bx	lr
	...

08012794 <_ZN20NullUnknownAllocatorD1Ev>:

    return TestMemoryAllocator::alloc_memory(size, file, line);
}


NullUnknownAllocator::~NullUnknownAllocator()
 8012794:	b580      	push	{r7, lr}
 8012796:	b082      	sub	sp, #8
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
 801279c:	4a05      	ldr	r2, [pc, #20]	; (80127b4 <_ZN20NullUnknownAllocatorD1Ev+0x20>)
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	601a      	str	r2, [r3, #0]
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	4618      	mov	r0, r3
 80127a6:	f7ff ff25 	bl	80125f4 <_ZN19TestMemoryAllocatorD1Ev>
{
}
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	4618      	mov	r0, r3
 80127ae:	3708      	adds	r7, #8
 80127b0:	46bd      	mov	sp, r7
 80127b2:	bd80      	pop	{r7, pc}
 80127b4:	0802b59c 	.word	0x0802b59c

080127b8 <_ZN20NullUnknownAllocatorD0Ev>:
NullUnknownAllocator::~NullUnknownAllocator()
 80127b8:	b580      	push	{r7, lr}
 80127ba:	b082      	sub	sp, #8
 80127bc:	af00      	add	r7, sp, #0
 80127be:	6078      	str	r0, [r7, #4]
}
 80127c0:	6878      	ldr	r0, [r7, #4]
 80127c2:	f7ff ffe7 	bl	8012794 <_ZN20NullUnknownAllocatorD1Ev>
 80127c6:	2114      	movs	r1, #20
 80127c8:	6878      	ldr	r0, [r7, #4]
 80127ca:	f7f9 ffbf 	bl	800c74c <_ZdlPvj>
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	4618      	mov	r0, r3
 80127d2:	3708      	adds	r7, #8
 80127d4:	46bd      	mov	sp, r7
 80127d6:	bd80      	pop	{r7, pc}

080127d8 <_ZN20NullUnknownAllocator12alloc_memoryEjPKcj>:

char* NullUnknownAllocator::alloc_memory(size_t /*size*/, const char*, size_t)
{
 80127d8:	b480      	push	{r7}
 80127da:	b085      	sub	sp, #20
 80127dc:	af00      	add	r7, sp, #0
 80127de:	60f8      	str	r0, [r7, #12]
 80127e0:	60b9      	str	r1, [r7, #8]
 80127e2:	607a      	str	r2, [r7, #4]
 80127e4:	603b      	str	r3, [r7, #0]
    return NULLPTR;
 80127e6:	2300      	movs	r3, #0
}
 80127e8:	4618      	mov	r0, r3
 80127ea:	3714      	adds	r7, #20
 80127ec:	46bd      	mov	sp, r7
 80127ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f2:	4770      	bx	lr

080127f4 <_ZN20NullUnknownAllocator11free_memoryEPcjPKcj>:

void NullUnknownAllocator::free_memory(char* /*memory*/, size_t, const char*, size_t)
{
 80127f4:	b480      	push	{r7}
 80127f6:	b085      	sub	sp, #20
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	60f8      	str	r0, [r7, #12]
 80127fc:	60b9      	str	r1, [r7, #8]
 80127fe:	607a      	str	r2, [r7, #4]
 8012800:	603b      	str	r3, [r7, #0]
}
 8012802:	bf00      	nop
 8012804:	3714      	adds	r7, #20
 8012806:	46bd      	mov	sp, r7
 8012808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801280c:	4770      	bx	lr
	...

08012810 <_ZN20NullUnknownAllocatorC1Ev>:

NullUnknownAllocator::NullUnknownAllocator()
 8012810:	b580      	push	{r7, lr}
 8012812:	b082      	sub	sp, #8
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]
    : TestMemoryAllocator("Null Allocator", "unknown", "unknown")
 8012818:	6878      	ldr	r0, [r7, #4]
 801281a:	4b06      	ldr	r3, [pc, #24]	; (8012834 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 801281c:	4a05      	ldr	r2, [pc, #20]	; (8012834 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 801281e:	4906      	ldr	r1, [pc, #24]	; (8012838 <_ZN20NullUnknownAllocatorC1Ev+0x28>)
 8012820:	f7ff fec8 	bl	80125b4 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 8012824:	4a05      	ldr	r2, [pc, #20]	; (801283c <_ZN20NullUnknownAllocatorC1Ev+0x2c>)
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	601a      	str	r2, [r3, #0]
{
}
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	4618      	mov	r0, r3
 801282e:	3708      	adds	r7, #8
 8012830:	46bd      	mov	sp, r7
 8012832:	bd80      	pop	{r7, pc}
 8012834:	08027480 	.word	0x08027480
 8012838:	08027488 	.word	0x08027488
 801283c:	0802b59c 	.word	0x0802b59c

08012840 <__tcf_3>:


TestMemoryAllocator* NullUnknownAllocator::defaultAllocator()
{
    static NullUnknownAllocator allocator;
 8012840:	b580      	push	{r7, lr}
 8012842:	af00      	add	r7, sp, #0
 8012844:	4801      	ldr	r0, [pc, #4]	; (801284c <__tcf_3+0xc>)
 8012846:	f7ff ffa5 	bl	8012794 <_ZN20NullUnknownAllocatorD1Ev>
 801284a:	bd80      	pop	{r7, pc}
 801284c:	20000a6c 	.word	0x20000a6c

08012850 <_ZN20NullUnknownAllocator16defaultAllocatorEv>:
{
 8012850:	b580      	push	{r7, lr}
 8012852:	af00      	add	r7, sp, #0
    static NullUnknownAllocator allocator;
 8012854:	4b12      	ldr	r3, [pc, #72]	; (80128a0 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 8012856:	781b      	ldrb	r3, [r3, #0]
 8012858:	f3bf 8f5b 	dmb	ish
 801285c:	b2db      	uxtb	r3, r3
 801285e:	f003 0301 	and.w	r3, r3, #1
 8012862:	2b00      	cmp	r3, #0
 8012864:	bf0c      	ite	eq
 8012866:	2301      	moveq	r3, #1
 8012868:	2300      	movne	r3, #0
 801286a:	b2db      	uxtb	r3, r3
 801286c:	2b00      	cmp	r3, #0
 801286e:	d013      	beq.n	8012898 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 8012870:	480b      	ldr	r0, [pc, #44]	; (80128a0 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 8012872:	f00f f9d9 	bl	8021c28 <__cxa_guard_acquire>
 8012876:	4603      	mov	r3, r0
 8012878:	2b00      	cmp	r3, #0
 801287a:	bf14      	ite	ne
 801287c:	2301      	movne	r3, #1
 801287e:	2300      	moveq	r3, #0
 8012880:	b2db      	uxtb	r3, r3
 8012882:	2b00      	cmp	r3, #0
 8012884:	d008      	beq.n	8012898 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 8012886:	4807      	ldr	r0, [pc, #28]	; (80128a4 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
 8012888:	f7ff ffc2 	bl	8012810 <_ZN20NullUnknownAllocatorC1Ev>
 801288c:	4804      	ldr	r0, [pc, #16]	; (80128a0 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 801288e:	f00f f9d7 	bl	8021c40 <__cxa_guard_release>
 8012892:	4805      	ldr	r0, [pc, #20]	; (80128a8 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x58>)
 8012894:	f00f f9fb 	bl	8021c8e <atexit>
    return &allocator;
 8012898:	4b02      	ldr	r3, [pc, #8]	; (80128a4 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
}
 801289a:	4618      	mov	r0, r3
 801289c:	bd80      	pop	{r7, pc}
 801289e:	bf00      	nop
 80128a0:	20000a80 	.word	0x20000a80
 80128a4:	20000a6c 	.word	0x20000a6c
 80128a8:	08012841 	.word	0x08012841

080128ac <_ZNK10TestResult12getTestCountEv>:
    size_t getTestCount() const
 80128ac:	b480      	push	{r7}
 80128ae:	b083      	sub	sp, #12
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	6078      	str	r0, [r7, #4]
        return testCount_;
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	689b      	ldr	r3, [r3, #8]
    }
 80128b8:	4618      	mov	r0, r3
 80128ba:	370c      	adds	r7, #12
 80128bc:	46bd      	mov	sp, r7
 80128be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c2:	4770      	bx	lr

080128c4 <_ZNK10TestResult19getFilteredOutCountEv>:
    size_t getFilteredOutCount() const
 80128c4:	b480      	push	{r7}
 80128c6:	b083      	sub	sp, #12
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
        return filteredOutCount_;
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	699b      	ldr	r3, [r3, #24]
    }
 80128d0:	4618      	mov	r0, r3
 80128d2:	370c      	adds	r7, #12
 80128d4:	46bd      	mov	sp, r7
 80128d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128da:	4770      	bx	lr

080128dc <_ZN10TestOutput21getWorkingEnvironmentEv>:
{
    workingEnvironment_ = workEnvironment;
}

TestOutput::WorkingEnvironment TestOutput::getWorkingEnvironment()
{
 80128dc:	b580      	push	{r7, lr}
 80128de:	af00      	add	r7, sp, #0
    if (workingEnvironment_ == TestOutput::detectEnvironment)
 80128e0:	4b05      	ldr	r3, [pc, #20]	; (80128f8 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 80128e2:	781b      	ldrb	r3, [r3, #0]
 80128e4:	2b02      	cmp	r3, #2
 80128e6:	d103      	bne.n	80128f0 <_ZN10TestOutput21getWorkingEnvironmentEv+0x14>
        return PlatformSpecificGetWorkingEnvironment();
 80128e8:	f004 fa4a 	bl	8016d80 <_Z37PlatformSpecificGetWorkingEnvironmentv>
 80128ec:	4603      	mov	r3, r0
 80128ee:	e001      	b.n	80128f4 <_ZN10TestOutput21getWorkingEnvironmentEv+0x18>
    return workingEnvironment_;
 80128f0:	4b01      	ldr	r3, [pc, #4]	; (80128f8 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 80128f2:	781b      	ldrb	r3, [r3, #0]
}
 80128f4:	4618      	mov	r0, r3
 80128f6:	bd80      	pop	{r7, pc}
 80128f8:	20000088 	.word	0x20000088

080128fc <_ZN10TestOutputC1Ev>:


TestOutput::TestOutput() :
 80128fc:	b480      	push	{r7}
 80128fe:	b083      	sub	sp, #12
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
    dotCount_(0), verbose_(level_quiet), color_(false), progressIndication_(".")
 8012904:	4a0a      	ldr	r2, [pc, #40]	; (8012930 <_ZN10TestOutputC1Ev+0x34>)
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	601a      	str	r2, [r3, #0]
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	2200      	movs	r2, #0
 801290e:	605a      	str	r2, [r3, #4]
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	2200      	movs	r2, #0
 8012914:	721a      	strb	r2, [r3, #8]
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	2200      	movs	r2, #0
 801291a:	725a      	strb	r2, [r3, #9]
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	4a05      	ldr	r2, [pc, #20]	; (8012934 <_ZN10TestOutputC1Ev+0x38>)
 8012920:	60da      	str	r2, [r3, #12]
{
}
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	4618      	mov	r0, r3
 8012926:	370c      	adds	r7, #12
 8012928:	46bd      	mov	sp, r7
 801292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292e:	4770      	bx	lr
 8012930:	0802b6d4 	.word	0x0802b6d4
 8012934:	08027888 	.word	0x08027888

08012938 <_ZN10TestOutputD1Ev>:

TestOutput::~TestOutput()
 8012938:	b480      	push	{r7}
 801293a:	b083      	sub	sp, #12
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
 8012940:	4a04      	ldr	r2, [pc, #16]	; (8012954 <_ZN10TestOutputD1Ev+0x1c>)
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	601a      	str	r2, [r3, #0]
{
}
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	4618      	mov	r0, r3
 801294a:	370c      	adds	r7, #12
 801294c:	46bd      	mov	sp, r7
 801294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012952:	4770      	bx	lr
 8012954:	0802b6d4 	.word	0x0802b6d4

08012958 <_ZN10TestOutput7verboseENS_14VerbosityLevelE>:

void TestOutput::verbose(VerbosityLevel level)
{
 8012958:	b480      	push	{r7}
 801295a:	b083      	sub	sp, #12
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
 8012960:	460b      	mov	r3, r1
 8012962:	70fb      	strb	r3, [r7, #3]
    verbose_ = level;
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	78fa      	ldrb	r2, [r7, #3]
 8012968:	721a      	strb	r2, [r3, #8]
}
 801296a:	bf00      	nop
 801296c:	370c      	adds	r7, #12
 801296e:	46bd      	mov	sp, r7
 8012970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012974:	4770      	bx	lr

08012976 <_ZN10TestOutput5colorEv>:

void TestOutput::color()
{
 8012976:	b480      	push	{r7}
 8012978:	b083      	sub	sp, #12
 801297a:	af00      	add	r7, sp, #0
 801297c:	6078      	str	r0, [r7, #4]
    color_ = true;
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	2201      	movs	r2, #1
 8012982:	725a      	strb	r2, [r3, #9]
}
 8012984:	bf00      	nop
 8012986:	370c      	adds	r7, #12
 8012988:	46bd      	mov	sp, r7
 801298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801298e:	4770      	bx	lr

08012990 <_ZN10TestOutput5printEPKc>:

void TestOutput::print(const char* str)
{
 8012990:	b580      	push	{r7, lr}
 8012992:	b082      	sub	sp, #8
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
 8012998:	6039      	str	r1, [r7, #0]
    printBuffer(str);
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	3328      	adds	r3, #40	; 0x28
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	6839      	ldr	r1, [r7, #0]
 80129a4:	6878      	ldr	r0, [r7, #4]
 80129a6:	4798      	blx	r3
}
 80129a8:	bf00      	nop
 80129aa:	3708      	adds	r7, #8
 80129ac:	46bd      	mov	sp, r7
 80129ae:	bd80      	pop	{r7, pc}

080129b0 <_ZN10TestOutput5printEl>:

void TestOutput::print(long n)
{
 80129b0:	b590      	push	{r4, r7, lr}
 80129b2:	b085      	sub	sp, #20
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	6078      	str	r0, [r7, #4]
 80129b8:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	332c      	adds	r3, #44	; 0x2c
 80129c0:	681c      	ldr	r4, [r3, #0]
 80129c2:	f107 0308 	add.w	r3, r7, #8
 80129c6:	6839      	ldr	r1, [r7, #0]
 80129c8:	4618      	mov	r0, r3
 80129ca:	f7fd f8ff 	bl	800fbcc <_Z10StringFroml>
 80129ce:	f107 0308 	add.w	r3, r7, #8
 80129d2:	4618      	mov	r0, r3
 80129d4:	f7fc fdf4 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 80129d8:	4603      	mov	r3, r0
 80129da:	4619      	mov	r1, r3
 80129dc:	6878      	ldr	r0, [r7, #4]
 80129de:	47a0      	blx	r4
 80129e0:	f107 0308 	add.w	r3, r7, #8
 80129e4:	4618      	mov	r0, r3
 80129e6:	f7fc fe18 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 80129ea:	bf00      	nop
 80129ec:	3714      	adds	r7, #20
 80129ee:	46bd      	mov	sp, r7
 80129f0:	bd90      	pop	{r4, r7, pc}

080129f2 <_ZN10TestOutput5printEj>:

void TestOutput::print(size_t n)
{
 80129f2:	b590      	push	{r4, r7, lr}
 80129f4:	b085      	sub	sp, #20
 80129f6:	af00      	add	r7, sp, #0
 80129f8:	6078      	str	r0, [r7, #4]
 80129fa:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	332c      	adds	r3, #44	; 0x2c
 8012a02:	681c      	ldr	r4, [r3, #0]
 8012a04:	f107 0308 	add.w	r3, r7, #8
 8012a08:	6839      	ldr	r1, [r7, #0]
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	f7fd fb34 	bl	8010078 <_Z10StringFromj>
 8012a10:	f107 0308 	add.w	r3, r7, #8
 8012a14:	4618      	mov	r0, r3
 8012a16:	f7fc fdd3 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	4619      	mov	r1, r3
 8012a1e:	6878      	ldr	r0, [r7, #4]
 8012a20:	47a0      	blx	r4
 8012a22:	f107 0308 	add.w	r3, r7, #8
 8012a26:	4618      	mov	r0, r3
 8012a28:	f7fc fdf7 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 8012a2c:	bf00      	nop
 8012a2e:	3714      	adds	r7, #20
 8012a30:	46bd      	mov	sp, r7
 8012a32:	bd90      	pop	{r4, r7, pc}

08012a34 <_ZN10TestOutput11printDoubleEd>:

void TestOutput::printDouble(double d)
{
 8012a34:	b590      	push	{r4, r7, lr}
 8012a36:	b087      	sub	sp, #28
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	60f8      	str	r0, [r7, #12]
 8012a3c:	ed87 0b00 	vstr	d0, [r7]
    print(StringFrom(d).asCharString());
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	332c      	adds	r3, #44	; 0x2c
 8012a46:	681c      	ldr	r4, [r3, #0]
 8012a48:	f107 0310 	add.w	r3, r7, #16
 8012a4c:	2106      	movs	r1, #6
 8012a4e:	ed97 0b00 	vldr	d0, [r7]
 8012a52:	4618      	mov	r0, r3
 8012a54:	f7fd faa6 	bl	800ffa4 <_Z10StringFromdi>
 8012a58:	f107 0310 	add.w	r3, r7, #16
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	f7fc fdaf 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 8012a62:	4603      	mov	r3, r0
 8012a64:	4619      	mov	r1, r3
 8012a66:	68f8      	ldr	r0, [r7, #12]
 8012a68:	47a0      	blx	r4
 8012a6a:	f107 0310 	add.w	r3, r7, #16
 8012a6e:	4618      	mov	r0, r3
 8012a70:	f7fc fdd3 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 8012a74:	bf00      	nop
 8012a76:	371c      	adds	r7, #28
 8012a78:	46bd      	mov	sp, r7
 8012a7a:	bd90      	pop	{r4, r7, pc}

08012a7c <_ZlsR10TestOutputPKc>:

TestOutput& operator<<(TestOutput& p, const char* s)
{
 8012a7c:	b580      	push	{r7, lr}
 8012a7e:	b082      	sub	sp, #8
 8012a80:	af00      	add	r7, sp, #0
 8012a82:	6078      	str	r0, [r7, #4]
 8012a84:	6039      	str	r1, [r7, #0]
    p.print(s);
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	332c      	adds	r3, #44	; 0x2c
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	6839      	ldr	r1, [r7, #0]
 8012a90:	6878      	ldr	r0, [r7, #4]
 8012a92:	4798      	blx	r3
    return p;
 8012a94:	687b      	ldr	r3, [r7, #4]
}
 8012a96:	4618      	mov	r0, r3
 8012a98:	3708      	adds	r7, #8
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	bd80      	pop	{r7, pc}
	...

08012aa0 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell>:
    p.print(i);
    return p;
}

void TestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8012aa0:	b590      	push	{r4, r7, lr}
 8012aa2:	b085      	sub	sp, #20
 8012aa4:	af00      	add	r7, sp, #0
 8012aa6:	6078      	str	r0, [r7, #4]
 8012aa8:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) print(test.getFormattedName().asCharString());
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	7a1b      	ldrb	r3, [r3, #8]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d01a      	beq.n	8012ae8 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x48>
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	332c      	adds	r3, #44	; 0x2c
 8012ab8:	681c      	ldr	r4, [r3, #0]
 8012aba:	683b      	ldr	r3, [r7, #0]
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	3314      	adds	r3, #20
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	f107 0208 	add.w	r2, r7, #8
 8012ac6:	6839      	ldr	r1, [r7, #0]
 8012ac8:	4610      	mov	r0, r2
 8012aca:	4798      	blx	r3
 8012acc:	f107 0308 	add.w	r3, r7, #8
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	f7fc fd75 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 8012ad6:	4603      	mov	r3, r0
 8012ad8:	4619      	mov	r1, r3
 8012ada:	6878      	ldr	r0, [r7, #4]
 8012adc:	47a0      	blx	r4
 8012ade:	f107 0308 	add.w	r3, r7, #8
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	f7fc fd99 	bl	800f61a <_ZN12SimpleStringD1Ev>

    if (test.willRun()) {
 8012ae8:	683b      	ldr	r3, [r7, #0]
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	3318      	adds	r3, #24
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	6838      	ldr	r0, [r7, #0]
 8012af2:	4798      	blx	r3
 8012af4:	4603      	mov	r3, r0
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d007      	beq.n	8012b0a <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x6a>
       setProgressIndicator(".");
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	3344      	adds	r3, #68	; 0x44
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	4907      	ldr	r1, [pc, #28]	; (8012b20 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x80>)
 8012b04:	6878      	ldr	r0, [r7, #4]
 8012b06:	4798      	blx	r3
    }
    else {
       setProgressIndicator("!");
    }
}
 8012b08:	e006      	b.n	8012b18 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x78>
       setProgressIndicator("!");
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	3344      	adds	r3, #68	; 0x44
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	4904      	ldr	r1, [pc, #16]	; (8012b24 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x84>)
 8012b14:	6878      	ldr	r0, [r7, #4]
 8012b16:	4798      	blx	r3
}
 8012b18:	bf00      	nop
 8012b1a:	3714      	adds	r7, #20
 8012b1c:	46bd      	mov	sp, r7
 8012b1e:	bd90      	pop	{r4, r7, pc}
 8012b20:	08027888 	.word	0x08027888
 8012b24:	0802788c 	.word	0x0802788c

08012b28 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult>:

void TestOutput::printCurrentTestEnded(const TestResult& res)
{
 8012b28:	b590      	push	{r4, r7, lr}
 8012b2a:	b083      	sub	sp, #12
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	6078      	str	r0, [r7, #4]
 8012b30:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) {
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	7a1b      	ldrb	r3, [r3, #8]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d019      	beq.n	8012b6e <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x46>
        print(" - ");
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	332c      	adds	r3, #44	; 0x2c
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	4910      	ldr	r1, [pc, #64]	; (8012b84 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x5c>)
 8012b44:	6878      	ldr	r0, [r7, #4]
 8012b46:	4798      	blx	r3
        print(res.getCurrentTestTotalExecutionTime());
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	3334      	adds	r3, #52	; 0x34
 8012b4e:	681c      	ldr	r4, [r3, #0]
 8012b50:	6838      	ldr	r0, [r7, #0]
 8012b52:	f002 f845 	bl	8014be0 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 8012b56:	4603      	mov	r3, r0
 8012b58:	4619      	mov	r1, r3
 8012b5a:	6878      	ldr	r0, [r7, #4]
 8012b5c:	47a0      	blx	r4
        print(" ms\n");
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	332c      	adds	r3, #44	; 0x2c
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	4908      	ldr	r1, [pc, #32]	; (8012b88 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x60>)
 8012b68:	6878      	ldr	r0, [r7, #4]
 8012b6a:	4798      	blx	r3
    }
    else {
        printProgressIndicator();
    }
}
 8012b6c:	e005      	b.n	8012b7a <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x52>
        printProgressIndicator();
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	3358      	adds	r3, #88	; 0x58
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	6878      	ldr	r0, [r7, #4]
 8012b78:	4798      	blx	r3
}
 8012b7a:	bf00      	nop
 8012b7c:	370c      	adds	r7, #12
 8012b7e:	46bd      	mov	sp, r7
 8012b80:	bd90      	pop	{r4, r7, pc}
 8012b82:	bf00      	nop
 8012b84:	08027890 	.word	0x08027890
 8012b88:	08027894 	.word	0x08027894

08012b8c <_ZN10TestOutput22printProgressIndicatorEv>:

void TestOutput::printProgressIndicator()
{
 8012b8c:	b580      	push	{r7, lr}
 8012b8e:	b082      	sub	sp, #8
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	6078      	str	r0, [r7, #4]
    print(progressIndication_);
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	332c      	adds	r3, #44	; 0x2c
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	687a      	ldr	r2, [r7, #4]
 8012b9e:	68d2      	ldr	r2, [r2, #12]
 8012ba0:	4611      	mov	r1, r2
 8012ba2:	6878      	ldr	r0, [r7, #4]
 8012ba4:	4798      	blx	r3
    if (++dotCount_ % 50 == 0) print("\n");
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	685b      	ldr	r3, [r3, #4]
 8012baa:	1c5a      	adds	r2, r3, #1
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	605a      	str	r2, [r3, #4]
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	685a      	ldr	r2, [r3, #4]
 8012bb4:	4b0d      	ldr	r3, [pc, #52]	; (8012bec <_ZN10TestOutput22printProgressIndicatorEv+0x60>)
 8012bb6:	fb83 1302 	smull	r1, r3, r3, r2
 8012bba:	1119      	asrs	r1, r3, #4
 8012bbc:	17d3      	asrs	r3, r2, #31
 8012bbe:	1acb      	subs	r3, r1, r3
 8012bc0:	2132      	movs	r1, #50	; 0x32
 8012bc2:	fb01 f303 	mul.w	r3, r1, r3
 8012bc6:	1ad3      	subs	r3, r2, r3
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	bf0c      	ite	eq
 8012bcc:	2301      	moveq	r3, #1
 8012bce:	2300      	movne	r3, #0
 8012bd0:	b2db      	uxtb	r3, r3
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d006      	beq.n	8012be4 <_ZN10TestOutput22printProgressIndicatorEv+0x58>
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	332c      	adds	r3, #44	; 0x2c
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	4904      	ldr	r1, [pc, #16]	; (8012bf0 <_ZN10TestOutput22printProgressIndicatorEv+0x64>)
 8012be0:	6878      	ldr	r0, [r7, #4]
 8012be2:	4798      	blx	r3
}
 8012be4:	bf00      	nop
 8012be6:	3708      	adds	r7, #8
 8012be8:	46bd      	mov	sp, r7
 8012bea:	bd80      	pop	{r7, pc}
 8012bec:	51eb851f 	.word	0x51eb851f
 8012bf0:	0802789c 	.word	0x0802789c

08012bf4 <_ZN10TestOutput20setProgressIndicatorEPKc>:

void TestOutput::setProgressIndicator(const char* indicator)
{
 8012bf4:	b480      	push	{r7}
 8012bf6:	b083      	sub	sp, #12
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]
 8012bfc:	6039      	str	r1, [r7, #0]
    progressIndication_ = indicator;
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	683a      	ldr	r2, [r7, #0]
 8012c02:	60da      	str	r2, [r3, #12]
}
 8012c04:	bf00      	nop
 8012c06:	370c      	adds	r7, #12
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c0e:	4770      	bx	lr

08012c10 <_ZN10TestOutput17printTestsStartedEv>:

void TestOutput::printTestsStarted()
{
 8012c10:	b480      	push	{r7}
 8012c12:	b083      	sub	sp, #12
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
}
 8012c18:	bf00      	nop
 8012c1a:	370c      	adds	r7, #12
 8012c1c:	46bd      	mov	sp, r7
 8012c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c22:	4770      	bx	lr

08012c24 <_ZN10TestOutput24printCurrentGroupStartedERK10UtestShell>:

void TestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 8012c24:	b480      	push	{r7}
 8012c26:	b083      	sub	sp, #12
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	6078      	str	r0, [r7, #4]
 8012c2c:	6039      	str	r1, [r7, #0]
}
 8012c2e:	bf00      	nop
 8012c30:	370c      	adds	r7, #12
 8012c32:	46bd      	mov	sp, r7
 8012c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c38:	4770      	bx	lr

08012c3a <_ZN10TestOutput22printCurrentGroupEndedERK10TestResult>:

void TestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 8012c3a:	b480      	push	{r7}
 8012c3c:	b083      	sub	sp, #12
 8012c3e:	af00      	add	r7, sp, #0
 8012c40:	6078      	str	r0, [r7, #4]
 8012c42:	6039      	str	r1, [r7, #0]
}
 8012c44:	bf00      	nop
 8012c46:	370c      	adds	r7, #12
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c4e:	4770      	bx	lr

08012c50 <_ZN10TestOutput15printTestsEndedERK10TestResult>:

void TestOutput::printTestsEnded(const TestResult& result)
{
 8012c50:	b590      	push	{r4, r7, lr}
 8012c52:	b085      	sub	sp, #20
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	6078      	str	r0, [r7, #4]
 8012c58:	6039      	str	r1, [r7, #0]
    print("\n");
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	332c      	adds	r3, #44	; 0x2c
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	496f      	ldr	r1, [pc, #444]	; (8012e20 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d0>)
 8012c64:	6878      	ldr	r0, [r7, #4]
 8012c66:	4798      	blx	r3
    const bool isFailure = result.isFailure();
 8012c68:	6838      	ldr	r0, [r7, #0]
 8012c6a:	f7f8 f83d 	bl	800ace8 <_ZNK10TestResult9isFailureEv>
 8012c6e:	4603      	mov	r3, r0
 8012c70:	73fb      	strb	r3, [r7, #15]
    const size_t failureCount = result.getFailureCount();
 8012c72:	6838      	ldr	r0, [r7, #0]
 8012c74:	f7f8 f82c 	bl	800acd0 <_ZNK10TestResult15getFailureCountEv>
 8012c78:	60b8      	str	r0, [r7, #8]
    if (isFailure) {
 8012c7a:	7bfb      	ldrb	r3, [r7, #15]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d02b      	beq.n	8012cd8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x88>
        if (color_) {
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	7a5b      	ldrb	r3, [r3, #9]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d006      	beq.n	8012c96 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x46>
            print("\033[31;1m");
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	332c      	adds	r3, #44	; 0x2c
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	4964      	ldr	r1, [pc, #400]	; (8012e24 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d4>)
 8012c92:	6878      	ldr	r0, [r7, #4]
 8012c94:	4798      	blx	r3
        }
        print("Errors (");
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	332c      	adds	r3, #44	; 0x2c
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	4962      	ldr	r1, [pc, #392]	; (8012e28 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d8>)
 8012ca0:	6878      	ldr	r0, [r7, #4]
 8012ca2:	4798      	blx	r3
        if (failureCount > 0) {
 8012ca4:	68bb      	ldr	r3, [r7, #8]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d00e      	beq.n	8012cc8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x78>
            print(failureCount);
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	3334      	adds	r3, #52	; 0x34
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	68b9      	ldr	r1, [r7, #8]
 8012cb4:	6878      	ldr	r0, [r7, #4]
 8012cb6:	4798      	blx	r3
            print(" failures, ");
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	332c      	adds	r3, #44	; 0x2c
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	495a      	ldr	r1, [pc, #360]	; (8012e2c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1dc>)
 8012cc2:	6878      	ldr	r0, [r7, #4]
 8012cc4:	4798      	blx	r3
 8012cc6:	e019      	b.n	8012cfc <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
        else {
            print("ran nothing, ");
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	332c      	adds	r3, #44	; 0x2c
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	4957      	ldr	r1, [pc, #348]	; (8012e30 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e0>)
 8012cd2:	6878      	ldr	r0, [r7, #4]
 8012cd4:	4798      	blx	r3
 8012cd6:	e011      	b.n	8012cfc <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
    }
    else {
        if (color_) {
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	7a5b      	ldrb	r3, [r3, #9]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d006      	beq.n	8012cee <_ZN10TestOutput15printTestsEndedERK10TestResult+0x9e>
            print("\033[32;1m");
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	332c      	adds	r3, #44	; 0x2c
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	4952      	ldr	r1, [pc, #328]	; (8012e34 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e4>)
 8012cea:	6878      	ldr	r0, [r7, #4]
 8012cec:	4798      	blx	r3
        }
        print("OK (");
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	332c      	adds	r3, #44	; 0x2c
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	4950      	ldr	r1, [pc, #320]	; (8012e38 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e8>)
 8012cf8:	6878      	ldr	r0, [r7, #4]
 8012cfa:	4798      	blx	r3
    }
    print(result.getTestCount());
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	3334      	adds	r3, #52	; 0x34
 8012d02:	681c      	ldr	r4, [r3, #0]
 8012d04:	6838      	ldr	r0, [r7, #0]
 8012d06:	f7ff fdd1 	bl	80128ac <_ZNK10TestResult12getTestCountEv>
 8012d0a:	4603      	mov	r3, r0
 8012d0c:	4619      	mov	r1, r3
 8012d0e:	6878      	ldr	r0, [r7, #4]
 8012d10:	47a0      	blx	r4
    print(" tests, ");
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	332c      	adds	r3, #44	; 0x2c
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	4948      	ldr	r1, [pc, #288]	; (8012e3c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1ec>)
 8012d1c:	6878      	ldr	r0, [r7, #4]
 8012d1e:	4798      	blx	r3
    print(result.getRunCount());
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	3334      	adds	r3, #52	; 0x34
 8012d26:	681c      	ldr	r4, [r3, #0]
 8012d28:	6838      	ldr	r0, [r7, #0]
 8012d2a:	f7f7 ffb9 	bl	800aca0 <_ZNK10TestResult11getRunCountEv>
 8012d2e:	4603      	mov	r3, r0
 8012d30:	4619      	mov	r1, r3
 8012d32:	6878      	ldr	r0, [r7, #4]
 8012d34:	47a0      	blx	r4
    print(" ran, ");
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	332c      	adds	r3, #44	; 0x2c
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	4940      	ldr	r1, [pc, #256]	; (8012e40 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f0>)
 8012d40:	6878      	ldr	r0, [r7, #4]
 8012d42:	4798      	blx	r3
    print(result.getCheckCount());
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	3334      	adds	r3, #52	; 0x34
 8012d4a:	681c      	ldr	r4, [r3, #0]
 8012d4c:	6838      	ldr	r0, [r7, #0]
 8012d4e:	f7f8 fc13 	bl	800b578 <_ZNK10TestResult13getCheckCountEv>
 8012d52:	4603      	mov	r3, r0
 8012d54:	4619      	mov	r1, r3
 8012d56:	6878      	ldr	r0, [r7, #4]
 8012d58:	47a0      	blx	r4
    print(" checks, ");
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	332c      	adds	r3, #44	; 0x2c
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	4938      	ldr	r1, [pc, #224]	; (8012e44 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f4>)
 8012d64:	6878      	ldr	r0, [r7, #4]
 8012d66:	4798      	blx	r3
    print(result.getIgnoredCount());
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	3334      	adds	r3, #52	; 0x34
 8012d6e:	681c      	ldr	r4, [r3, #0]
 8012d70:	6838      	ldr	r0, [r7, #0]
 8012d72:	f7f7 ffa1 	bl	800acb8 <_ZNK10TestResult15getIgnoredCountEv>
 8012d76:	4603      	mov	r3, r0
 8012d78:	4619      	mov	r1, r3
 8012d7a:	6878      	ldr	r0, [r7, #4]
 8012d7c:	47a0      	blx	r4
    print(" ignored, ");
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	332c      	adds	r3, #44	; 0x2c
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	4930      	ldr	r1, [pc, #192]	; (8012e48 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f8>)
 8012d88:	6878      	ldr	r0, [r7, #4]
 8012d8a:	4798      	blx	r3
    print(result.getFilteredOutCount());
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	3334      	adds	r3, #52	; 0x34
 8012d92:	681c      	ldr	r4, [r3, #0]
 8012d94:	6838      	ldr	r0, [r7, #0]
 8012d96:	f7ff fd95 	bl	80128c4 <_ZNK10TestResult19getFilteredOutCountEv>
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	4619      	mov	r1, r3
 8012d9e:	6878      	ldr	r0, [r7, #4]
 8012da0:	47a0      	blx	r4
    print(" filtered out, ");
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	332c      	adds	r3, #44	; 0x2c
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	4928      	ldr	r1, [pc, #160]	; (8012e4c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1fc>)
 8012dac:	6878      	ldr	r0, [r7, #4]
 8012dae:	4798      	blx	r3
    print(result.getTotalExecutionTime());
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	3334      	adds	r3, #52	; 0x34
 8012db6:	681c      	ldr	r4, [r3, #0]
 8012db8:	6838      	ldr	r0, [r7, #0]
 8012dba:	f001 ff05 	bl	8014bc8 <_ZNK10TestResult21getTotalExecutionTimeEv>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	4619      	mov	r1, r3
 8012dc2:	6878      	ldr	r0, [r7, #4]
 8012dc4:	47a0      	blx	r4
    print(" ms)");
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	332c      	adds	r3, #44	; 0x2c
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	4920      	ldr	r1, [pc, #128]	; (8012e50 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x200>)
 8012dd0:	6878      	ldr	r0, [r7, #4]
 8012dd2:	4798      	blx	r3
    if (color_) {
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	7a5b      	ldrb	r3, [r3, #9]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d006      	beq.n	8012dea <_ZN10TestOutput15printTestsEndedERK10TestResult+0x19a>
        print("\033[m");
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	332c      	adds	r3, #44	; 0x2c
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	491b      	ldr	r1, [pc, #108]	; (8012e54 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x204>)
 8012de6:	6878      	ldr	r0, [r7, #4]
 8012de8:	4798      	blx	r3
    }
    if (isFailure && failureCount == 0) {
 8012dea:	7bfb      	ldrb	r3, [r7, #15]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d009      	beq.n	8012e04 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
 8012df0:	68bb      	ldr	r3, [r7, #8]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d106      	bne.n	8012e04 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
              "This often happens because of linking errors or typos in test filter.");
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	332c      	adds	r3, #44	; 0x2c
 8012dfc:	681b      	ldr	r3, [r3, #0]
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
 8012dfe:	4916      	ldr	r1, [pc, #88]	; (8012e58 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x208>)
 8012e00:	6878      	ldr	r0, [r7, #4]
 8012e02:	4798      	blx	r3
    }
    print("\n\n");
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	332c      	adds	r3, #44	; 0x2c
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	4913      	ldr	r1, [pc, #76]	; (8012e5c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x20c>)
 8012e0e:	6878      	ldr	r0, [r7, #4]
 8012e10:	4798      	blx	r3

    dotCount_ = 0;
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	2200      	movs	r2, #0
 8012e16:	605a      	str	r2, [r3, #4]
}
 8012e18:	bf00      	nop
 8012e1a:	3714      	adds	r7, #20
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	bd90      	pop	{r4, r7, pc}
 8012e20:	0802789c 	.word	0x0802789c
 8012e24:	080278a0 	.word	0x080278a0
 8012e28:	080278a8 	.word	0x080278a8
 8012e2c:	080278b4 	.word	0x080278b4
 8012e30:	080278c0 	.word	0x080278c0
 8012e34:	080278d0 	.word	0x080278d0
 8012e38:	080278d8 	.word	0x080278d8
 8012e3c:	080278e0 	.word	0x080278e0
 8012e40:	080278ec 	.word	0x080278ec
 8012e44:	080278f4 	.word	0x080278f4
 8012e48:	08027900 	.word	0x08027900
 8012e4c:	0802790c 	.word	0x0802790c
 8012e50:	0802791c 	.word	0x0802791c
 8012e54:	08027924 	.word	0x08027924
 8012e58:	08027928 	.word	0x08027928
 8012e5c:	080279cc 	.word	0x080279cc

08012e60 <_ZN10TestOutput12printTestRunEjj>:

void TestOutput::printTestRun(size_t number, size_t total)
{
 8012e60:	b580      	push	{r7, lr}
 8012e62:	b084      	sub	sp, #16
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	60f8      	str	r0, [r7, #12]
 8012e68:	60b9      	str	r1, [r7, #8]
 8012e6a:	607a      	str	r2, [r7, #4]
    if (total > 1) {
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	2b01      	cmp	r3, #1
 8012e70:	d922      	bls.n	8012eb8 <_ZN10TestOutput12printTestRunEjj+0x58>
        print("Test run ");
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	332c      	adds	r3, #44	; 0x2c
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	4911      	ldr	r1, [pc, #68]	; (8012ec0 <_ZN10TestOutput12printTestRunEjj+0x60>)
 8012e7c:	68f8      	ldr	r0, [r7, #12]
 8012e7e:	4798      	blx	r3
        print(number);
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	3334      	adds	r3, #52	; 0x34
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	68b9      	ldr	r1, [r7, #8]
 8012e8a:	68f8      	ldr	r0, [r7, #12]
 8012e8c:	4798      	blx	r3
        print(" of ");
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	332c      	adds	r3, #44	; 0x2c
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	490b      	ldr	r1, [pc, #44]	; (8012ec4 <_ZN10TestOutput12printTestRunEjj+0x64>)
 8012e98:	68f8      	ldr	r0, [r7, #12]
 8012e9a:	4798      	blx	r3
        print(total);
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	3334      	adds	r3, #52	; 0x34
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	6879      	ldr	r1, [r7, #4]
 8012ea6:	68f8      	ldr	r0, [r7, #12]
 8012ea8:	4798      	blx	r3
        print("\n");
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	332c      	adds	r3, #44	; 0x2c
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	4905      	ldr	r1, [pc, #20]	; (8012ec8 <_ZN10TestOutput12printTestRunEjj+0x68>)
 8012eb4:	68f8      	ldr	r0, [r7, #12]
 8012eb6:	4798      	blx	r3
    }
}
 8012eb8:	bf00      	nop
 8012eba:	3710      	adds	r7, #16
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	bd80      	pop	{r7, pc}
 8012ec0:	080279d0 	.word	0x080279d0
 8012ec4:	080279dc 	.word	0x080279dc
 8012ec8:	0802789c 	.word	0x0802789c

08012ecc <_ZN10TestOutput12printFailureERK11TestFailure>:

void TestOutput::printFailure(const TestFailure& failure)
{
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b084      	sub	sp, #16
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	6078      	str	r0, [r7, #4]
 8012ed4:	6039      	str	r1, [r7, #0]
    if (failure.isOutsideTestFile() || failure.isInHelperFunction())
 8012ed6:	6838      	ldr	r0, [r7, #0]
 8012ed8:	f7fd ffa1 	bl	8010e1e <_ZNK11TestFailure17isOutsideTestFileEv>
 8012edc:	4603      	mov	r3, r0
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d105      	bne.n	8012eee <_ZN10TestOutput12printFailureERK11TestFailure+0x22>
 8012ee2:	6838      	ldr	r0, [r7, #0]
 8012ee4:	f7fd ffad 	bl	8010e42 <_ZNK11TestFailure18isInHelperFunctionEv>
 8012ee8:	4603      	mov	r3, r0
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d001      	beq.n	8012ef2 <_ZN10TestOutput12printFailureERK11TestFailure+0x26>
 8012eee:	2301      	movs	r3, #1
 8012ef0:	e000      	b.n	8012ef4 <_ZN10TestOutput12printFailureERK11TestFailure+0x28>
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d004      	beq.n	8012f02 <_ZN10TestOutput12printFailureERK11TestFailure+0x36>
        printFileAndLineForTestAndFailure(failure);
 8012ef8:	6839      	ldr	r1, [r7, #0]
 8012efa:	6878      	ldr	r0, [r7, #4]
 8012efc:	f000 f81d 	bl	8012f3a <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>
 8012f00:	e003      	b.n	8012f0a <_ZN10TestOutput12printFailureERK11TestFailure+0x3e>
    else
        printFileAndLineForFailure(failure);
 8012f02:	6839      	ldr	r1, [r7, #0]
 8012f04:	6878      	ldr	r0, [r7, #4]
 8012f06:	f000 f86b 	bl	8012fe0 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>

    printFailureMessage(failure.getMessage());
 8012f0a:	683b      	ldr	r3, [r7, #0]
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	3318      	adds	r3, #24
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	f107 0208 	add.w	r2, r7, #8
 8012f16:	6839      	ldr	r1, [r7, #0]
 8012f18:	4610      	mov	r0, r2
 8012f1a:	4798      	blx	r3
 8012f1c:	f107 0308 	add.w	r3, r7, #8
 8012f20:	4619      	mov	r1, r3
 8012f22:	6878      	ldr	r0, [r7, #4]
 8012f24:	f000 f8b2 	bl	801308c <_ZN10TestOutput19printFailureMessageE12SimpleString>
 8012f28:	f107 0308 	add.w	r3, r7, #8
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	f7fc fb74 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 8012f32:	bf00      	nop
 8012f34:	3710      	adds	r7, #16
 8012f36:	46bd      	mov	sp, r7
 8012f38:	bd80      	pop	{r7, pc}

08012f3a <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>:

void TestOutput::printFileAndLineForTestAndFailure(const TestFailure& failure)
{
 8012f3a:	b580      	push	{r7, lr}
 8012f3c:	b088      	sub	sp, #32
 8012f3e:	af00      	add	r7, sp, #0
 8012f40:	6078      	str	r0, [r7, #4]
 8012f42:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getTestFileName(), failure.getTestLineNumber());
 8012f44:	683b      	ldr	r3, [r7, #0]
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	331c      	adds	r3, #28
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	f107 0208 	add.w	r2, r7, #8
 8012f50:	6839      	ldr	r1, [r7, #0]
 8012f52:	4610      	mov	r0, r2
 8012f54:	4798      	blx	r3
 8012f56:	683b      	ldr	r3, [r7, #0]
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	3320      	adds	r3, #32
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	6838      	ldr	r0, [r7, #0]
 8012f60:	4798      	blx	r3
 8012f62:	4602      	mov	r2, r0
 8012f64:	f107 0308 	add.w	r3, r7, #8
 8012f68:	4619      	mov	r1, r3
 8012f6a:	6878      	ldr	r0, [r7, #4]
 8012f6c:	f000 f8be 	bl	80130ec <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 8012f70:	f107 0308 	add.w	r3, r7, #8
 8012f74:	4618      	mov	r0, r3
 8012f76:	f7fc fb50 	bl	800f61a <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 8012f7a:	683b      	ldr	r3, [r7, #0]
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	330c      	adds	r3, #12
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	f107 0210 	add.w	r2, r7, #16
 8012f86:	6839      	ldr	r1, [r7, #0]
 8012f88:	4610      	mov	r0, r2
 8012f8a:	4798      	blx	r3
 8012f8c:	f107 0310 	add.w	r3, r7, #16
 8012f90:	4619      	mov	r1, r3
 8012f92:	6878      	ldr	r0, [r7, #4]
 8012f94:	f000 f85c 	bl	8013050 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 8012f98:	f107 0310 	add.w	r3, r7, #16
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	f7fc fb3c 	bl	800f61a <_ZN12SimpleStringD1Ev>
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 8012fa2:	683b      	ldr	r3, [r7, #0]
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	3308      	adds	r3, #8
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	f107 0218 	add.w	r2, r7, #24
 8012fae:	6839      	ldr	r1, [r7, #0]
 8012fb0:	4610      	mov	r0, r2
 8012fb2:	4798      	blx	r3
 8012fb4:	683b      	ldr	r3, [r7, #0]
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	3314      	adds	r3, #20
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	6838      	ldr	r0, [r7, #0]
 8012fbe:	4798      	blx	r3
 8012fc0:	4602      	mov	r2, r0
 8012fc2:	f107 0318 	add.w	r3, r7, #24
 8012fc6:	4619      	mov	r1, r3
 8012fc8:	6878      	ldr	r0, [r7, #4]
 8012fca:	f000 f88f 	bl	80130ec <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 8012fce:	f107 0318 	add.w	r3, r7, #24
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	f7fc fb21 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 8012fd8:	bf00      	nop
 8012fda:	3720      	adds	r7, #32
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	bd80      	pop	{r7, pc}

08012fe0 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>:

void TestOutput::printFileAndLineForFailure(const TestFailure& failure)
{
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	b086      	sub	sp, #24
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	6078      	str	r0, [r7, #4]
 8012fe8:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 8012fea:	683b      	ldr	r3, [r7, #0]
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	3308      	adds	r3, #8
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	f107 0208 	add.w	r2, r7, #8
 8012ff6:	6839      	ldr	r1, [r7, #0]
 8012ff8:	4610      	mov	r0, r2
 8012ffa:	4798      	blx	r3
 8012ffc:	683b      	ldr	r3, [r7, #0]
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	3314      	adds	r3, #20
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	6838      	ldr	r0, [r7, #0]
 8013006:	4798      	blx	r3
 8013008:	4602      	mov	r2, r0
 801300a:	f107 0308 	add.w	r3, r7, #8
 801300e:	4619      	mov	r1, r3
 8013010:	6878      	ldr	r0, [r7, #4]
 8013012:	f000 f86b 	bl	80130ec <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 8013016:	f107 0308 	add.w	r3, r7, #8
 801301a:	4618      	mov	r0, r3
 801301c:	f7fc fafd 	bl	800f61a <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 8013020:	683b      	ldr	r3, [r7, #0]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	330c      	adds	r3, #12
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	f107 0210 	add.w	r2, r7, #16
 801302c:	6839      	ldr	r1, [r7, #0]
 801302e:	4610      	mov	r0, r2
 8013030:	4798      	blx	r3
 8013032:	f107 0310 	add.w	r3, r7, #16
 8013036:	4619      	mov	r1, r3
 8013038:	6878      	ldr	r0, [r7, #4]
 801303a:	f000 f809 	bl	8013050 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 801303e:	f107 0310 	add.w	r3, r7, #16
 8013042:	4618      	mov	r0, r3
 8013044:	f7fc fae9 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 8013048:	bf00      	nop
 801304a:	3718      	adds	r7, #24
 801304c:	46bd      	mov	sp, r7
 801304e:	bd80      	pop	{r7, pc}

08013050 <_ZN10TestOutput18printFailureInTestE12SimpleString>:

void TestOutput::printFailureInTest(SimpleString testName)
{
 8013050:	b590      	push	{r4, r7, lr}
 8013052:	b083      	sub	sp, #12
 8013054:	af00      	add	r7, sp, #0
 8013056:	6078      	str	r0, [r7, #4]
 8013058:	6039      	str	r1, [r7, #0]
    print(" Failure in ");
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	332c      	adds	r3, #44	; 0x2c
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	4909      	ldr	r1, [pc, #36]	; (8013088 <_ZN10TestOutput18printFailureInTestE12SimpleString+0x38>)
 8013064:	6878      	ldr	r0, [r7, #4]
 8013066:	4798      	blx	r3
    print(testName.asCharString());
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	332c      	adds	r3, #44	; 0x2c
 801306e:	681c      	ldr	r4, [r3, #0]
 8013070:	6838      	ldr	r0, [r7, #0]
 8013072:	f7fc faa5 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 8013076:	4603      	mov	r3, r0
 8013078:	4619      	mov	r1, r3
 801307a:	6878      	ldr	r0, [r7, #4]
 801307c:	47a0      	blx	r4
}
 801307e:	bf00      	nop
 8013080:	370c      	adds	r7, #12
 8013082:	46bd      	mov	sp, r7
 8013084:	bd90      	pop	{r4, r7, pc}
 8013086:	bf00      	nop
 8013088:	080279e4 	.word	0x080279e4

0801308c <_ZN10TestOutput19printFailureMessageE12SimpleString>:

void TestOutput::printFailureMessage(SimpleString reason)
{
 801308c:	b590      	push	{r4, r7, lr}
 801308e:	b083      	sub	sp, #12
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
 8013094:	6039      	str	r1, [r7, #0]
    print("\n");
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	332c      	adds	r3, #44	; 0x2c
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	4910      	ldr	r1, [pc, #64]	; (80130e0 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x54>)
 80130a0:	6878      	ldr	r0, [r7, #4]
 80130a2:	4798      	blx	r3
    print("\t");
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	332c      	adds	r3, #44	; 0x2c
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	490d      	ldr	r1, [pc, #52]	; (80130e4 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x58>)
 80130ae:	6878      	ldr	r0, [r7, #4]
 80130b0:	4798      	blx	r3
    print(reason.asCharString());
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	332c      	adds	r3, #44	; 0x2c
 80130b8:	681c      	ldr	r4, [r3, #0]
 80130ba:	6838      	ldr	r0, [r7, #0]
 80130bc:	f7fc fa80 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 80130c0:	4603      	mov	r3, r0
 80130c2:	4619      	mov	r1, r3
 80130c4:	6878      	ldr	r0, [r7, #4]
 80130c6:	47a0      	blx	r4
    print("\n\n");
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	332c      	adds	r3, #44	; 0x2c
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	4905      	ldr	r1, [pc, #20]	; (80130e8 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x5c>)
 80130d2:	6878      	ldr	r0, [r7, #4]
 80130d4:	4798      	blx	r3
}
 80130d6:	bf00      	nop
 80130d8:	370c      	adds	r7, #12
 80130da:	46bd      	mov	sp, r7
 80130dc:	bd90      	pop	{r4, r7, pc}
 80130de:	bf00      	nop
 80130e0:	0802789c 	.word	0x0802789c
 80130e4:	080279f4 	.word	0x080279f4
 80130e8:	080279cc 	.word	0x080279cc

080130ec <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>:

void TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString file, size_t lineNumber)
{
 80130ec:	b590      	push	{r4, r7, lr}
 80130ee:	b089      	sub	sp, #36	; 0x24
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	60f8      	str	r0, [r7, #12]
 80130f4:	60b9      	str	r1, [r7, #8]
 80130f6:	607a      	str	r2, [r7, #4]
    if (TestOutput::getWorkingEnvironment() == TestOutput::visualStudio)
 80130f8:	f7ff fbf0 	bl	80128dc <_ZN10TestOutput21getWorkingEnvironmentEv>
 80130fc:	4603      	mov	r3, r0
 80130fe:	2b00      	cmp	r3, #0
 8013100:	bf0c      	ite	eq
 8013102:	2301      	moveq	r3, #1
 8013104:	2300      	movne	r3, #0
 8013106:	b2db      	uxtb	r3, r3
 8013108:	2b00      	cmp	r3, #0
 801310a:	d015      	beq.n	8013138 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x4c>
        printVisualStudioErrorInFileOnLine(file, lineNumber);
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	3354      	adds	r3, #84	; 0x54
 8013112:	681c      	ldr	r4, [r3, #0]
 8013114:	f107 0310 	add.w	r3, r7, #16
 8013118:	68b9      	ldr	r1, [r7, #8]
 801311a:	4618      	mov	r0, r3
 801311c:	f7fb ff19 	bl	800ef52 <_ZN12SimpleStringC1ERKS_>
 8013120:	f107 0310 	add.w	r3, r7, #16
 8013124:	687a      	ldr	r2, [r7, #4]
 8013126:	4619      	mov	r1, r3
 8013128:	68f8      	ldr	r0, [r7, #12]
 801312a:	47a0      	blx	r4
 801312c:	f107 0310 	add.w	r3, r7, #16
 8013130:	4618      	mov	r0, r3
 8013132:	f7fc fa72 	bl	800f61a <_ZN12SimpleStringD1Ev>
    else
        printEclipseErrorInFileOnLine(file, lineNumber);
}
 8013136:	e014      	b.n	8013162 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x76>
        printEclipseErrorInFileOnLine(file, lineNumber);
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	3350      	adds	r3, #80	; 0x50
 801313e:	681c      	ldr	r4, [r3, #0]
 8013140:	f107 0318 	add.w	r3, r7, #24
 8013144:	68b9      	ldr	r1, [r7, #8]
 8013146:	4618      	mov	r0, r3
 8013148:	f7fb ff03 	bl	800ef52 <_ZN12SimpleStringC1ERKS_>
 801314c:	f107 0318 	add.w	r3, r7, #24
 8013150:	687a      	ldr	r2, [r7, #4]
 8013152:	4619      	mov	r1, r3
 8013154:	68f8      	ldr	r0, [r7, #12]
 8013156:	47a0      	blx	r4
 8013158:	f107 0318 	add.w	r3, r7, #24
 801315c:	4618      	mov	r0, r3
 801315e:	f7fc fa5c 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 8013162:	bf00      	nop
 8013164:	3724      	adds	r7, #36	; 0x24
 8013166:	46bd      	mov	sp, r7
 8013168:	bd90      	pop	{r4, r7, pc}
	...

0801316c <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printEclipseErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 801316c:	b590      	push	{r4, r7, lr}
 801316e:	b085      	sub	sp, #20
 8013170:	af00      	add	r7, sp, #0
 8013172:	60f8      	str	r0, [r7, #12]
 8013174:	60b9      	str	r1, [r7, #8]
 8013176:	607a      	str	r2, [r7, #4]
    print("\n");
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	332c      	adds	r3, #44	; 0x2c
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	4916      	ldr	r1, [pc, #88]	; (80131dc <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x70>)
 8013182:	68f8      	ldr	r0, [r7, #12]
 8013184:	4798      	blx	r3
    print(file.asCharString());
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	332c      	adds	r3, #44	; 0x2c
 801318c:	681c      	ldr	r4, [r3, #0]
 801318e:	68b8      	ldr	r0, [r7, #8]
 8013190:	f7fc fa16 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 8013194:	4603      	mov	r3, r0
 8013196:	4619      	mov	r1, r3
 8013198:	68f8      	ldr	r0, [r7, #12]
 801319a:	47a0      	blx	r4
    print(":");
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	332c      	adds	r3, #44	; 0x2c
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	490e      	ldr	r1, [pc, #56]	; (80131e0 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 80131a6:	68f8      	ldr	r0, [r7, #12]
 80131a8:	4798      	blx	r3
    print(lineNumber);
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	3334      	adds	r3, #52	; 0x34
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	6879      	ldr	r1, [r7, #4]
 80131b4:	68f8      	ldr	r0, [r7, #12]
 80131b6:	4798      	blx	r3
    print(":");
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	332c      	adds	r3, #44	; 0x2c
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	4907      	ldr	r1, [pc, #28]	; (80131e0 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 80131c2:	68f8      	ldr	r0, [r7, #12]
 80131c4:	4798      	blx	r3
    print(" error:");
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	332c      	adds	r3, #44	; 0x2c
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	4905      	ldr	r1, [pc, #20]	; (80131e4 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x78>)
 80131d0:	68f8      	ldr	r0, [r7, #12]
 80131d2:	4798      	blx	r3
}
 80131d4:	bf00      	nop
 80131d6:	3714      	adds	r7, #20
 80131d8:	46bd      	mov	sp, r7
 80131da:	bd90      	pop	{r4, r7, pc}
 80131dc:	0802789c 	.word	0x0802789c
 80131e0:	080279f8 	.word	0x080279f8
 80131e4:	080279fc 	.word	0x080279fc

080131e8 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printVisualStudioErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 80131e8:	b590      	push	{r4, r7, lr}
 80131ea:	b085      	sub	sp, #20
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	60f8      	str	r0, [r7, #12]
 80131f0:	60b9      	str	r1, [r7, #8]
 80131f2:	607a      	str	r2, [r7, #4]
    print("\n");
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	332c      	adds	r3, #44	; 0x2c
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	4916      	ldr	r1, [pc, #88]	; (8013258 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x70>)
 80131fe:	68f8      	ldr	r0, [r7, #12]
 8013200:	4798      	blx	r3
    print(file.asCharString());
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	332c      	adds	r3, #44	; 0x2c
 8013208:	681c      	ldr	r4, [r3, #0]
 801320a:	68b8      	ldr	r0, [r7, #8]
 801320c:	f7fc f9d8 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 8013210:	4603      	mov	r3, r0
 8013212:	4619      	mov	r1, r3
 8013214:	68f8      	ldr	r0, [r7, #12]
 8013216:	47a0      	blx	r4
    print("(");
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	332c      	adds	r3, #44	; 0x2c
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	490e      	ldr	r1, [pc, #56]	; (801325c <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x74>)
 8013222:	68f8      	ldr	r0, [r7, #12]
 8013224:	4798      	blx	r3
    print(lineNumber);
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	3334      	adds	r3, #52	; 0x34
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	6879      	ldr	r1, [r7, #4]
 8013230:	68f8      	ldr	r0, [r7, #12]
 8013232:	4798      	blx	r3
    print("):");
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	332c      	adds	r3, #44	; 0x2c
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	4908      	ldr	r1, [pc, #32]	; (8013260 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x78>)
 801323e:	68f8      	ldr	r0, [r7, #12]
 8013240:	4798      	blx	r3
    print(" error:");
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	332c      	adds	r3, #44	; 0x2c
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	4906      	ldr	r1, [pc, #24]	; (8013264 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x7c>)
 801324c:	68f8      	ldr	r0, [r7, #12]
 801324e:	4798      	blx	r3
}
 8013250:	bf00      	nop
 8013252:	3714      	adds	r7, #20
 8013254:	46bd      	mov	sp, r7
 8013256:	bd90      	pop	{r4, r7, pc}
 8013258:	0802789c 	.word	0x0802789c
 801325c:	08027a04 	.word	0x08027a04
 8013260:	08027a08 	.word	0x08027a08
 8013264:	080279fc 	.word	0x080279fc

08013268 <_ZN10TestOutput16printVeryVerboseEPKc>:

void TestOutput::printVeryVerbose(const char* str)
{
 8013268:	b580      	push	{r7, lr}
 801326a:	b082      	sub	sp, #8
 801326c:	af00      	add	r7, sp, #0
 801326e:	6078      	str	r0, [r7, #4]
 8013270:	6039      	str	r1, [r7, #0]
    if(verbose_ == level_veryVerbose)
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	7a1b      	ldrb	r3, [r3, #8]
 8013276:	2b02      	cmp	r3, #2
 8013278:	d106      	bne.n	8013288 <_ZN10TestOutput16printVeryVerboseEPKc+0x20>
        printBuffer(str);
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	3328      	adds	r3, #40	; 0x28
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	6839      	ldr	r1, [r7, #0]
 8013284:	6878      	ldr	r0, [r7, #4]
 8013286:	4798      	blx	r3
}
 8013288:	bf00      	nop
 801328a:	3708      	adds	r7, #8
 801328c:	46bd      	mov	sp, r7
 801328e:	bd80      	pop	{r7, pc}

08013290 <_ZN17ConsoleTestOutput11printBufferEPKc>:


void ConsoleTestOutput::printBuffer(const char* s)
{
 8013290:	b580      	push	{r7, lr}
 8013292:	b082      	sub	sp, #8
 8013294:	af00      	add	r7, sp, #0
 8013296:	6078      	str	r0, [r7, #4]
 8013298:	6039      	str	r1, [r7, #0]
    while (*s) {
 801329a:	683b      	ldr	r3, [r7, #0]
 801329c:	781b      	ldrb	r3, [r3, #0]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d009      	beq.n	80132b6 <_ZN17ConsoleTestOutput11printBufferEPKc+0x26>
        PlatformSpecificPutchar(*s);
 80132a2:	4b0a      	ldr	r3, [pc, #40]	; (80132cc <_ZN17ConsoleTestOutput11printBufferEPKc+0x3c>)
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	683a      	ldr	r2, [r7, #0]
 80132a8:	7812      	ldrb	r2, [r2, #0]
 80132aa:	4610      	mov	r0, r2
 80132ac:	4798      	blx	r3
        s++;
 80132ae:	683b      	ldr	r3, [r7, #0]
 80132b0:	3301      	adds	r3, #1
 80132b2:	603b      	str	r3, [r7, #0]
    while (*s) {
 80132b4:	e7f1      	b.n	801329a <_ZN17ConsoleTestOutput11printBufferEPKc+0xa>
    }
    flush();
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	334c      	adds	r3, #76	; 0x4c
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	6878      	ldr	r0, [r7, #4]
 80132c0:	4798      	blx	r3
}
 80132c2:	bf00      	nop
 80132c4:	3708      	adds	r7, #8
 80132c6:	46bd      	mov	sp, r7
 80132c8:	bd80      	pop	{r7, pc}
 80132ca:	bf00      	nop
 80132cc:	200000c0 	.word	0x200000c0

080132d0 <_ZN17ConsoleTestOutput5flushEv>:

void ConsoleTestOutput::flush()
{
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b082      	sub	sp, #8
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	6078      	str	r0, [r7, #4]
    PlatformSpecificFlush();
 80132d8:	4b03      	ldr	r3, [pc, #12]	; (80132e8 <_ZN17ConsoleTestOutput5flushEv+0x18>)
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	4798      	blx	r3
}
 80132de:	bf00      	nop
 80132e0:	3708      	adds	r7, #8
 80132e2:	46bd      	mov	sp, r7
 80132e4:	bd80      	pop	{r7, pc}
 80132e6:	bf00      	nop
 80132e8:	200000c4 	.word	0x200000c4

080132ec <_ZN19CompositeTestOutputC1Ev>:

StringBufferTestOutput::~StringBufferTestOutput()
{
}

CompositeTestOutput::CompositeTestOutput()
 80132ec:	b580      	push	{r7, lr}
 80132ee:	b082      	sub	sp, #8
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	6078      	str	r0, [r7, #4]
  : outputOne_(NULLPTR), outputTwo_(NULLPTR)
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	4618      	mov	r0, r3
 80132f8:	f7ff fb00 	bl	80128fc <_ZN10TestOutputC1Ev>
 80132fc:	4a06      	ldr	r2, [pc, #24]	; (8013318 <_ZN19CompositeTestOutputC1Ev+0x2c>)
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	601a      	str	r2, [r3, #0]
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	2200      	movs	r2, #0
 8013306:	611a      	str	r2, [r3, #16]
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	2200      	movs	r2, #0
 801330c:	615a      	str	r2, [r3, #20]
{
}
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	4618      	mov	r0, r3
 8013312:	3708      	adds	r7, #8
 8013314:	46bd      	mov	sp, r7
 8013316:	bd80      	pop	{r7, pc}
 8013318:	0802b604 	.word	0x0802b604

0801331c <_ZN19CompositeTestOutputD1Ev>:

CompositeTestOutput::~CompositeTestOutput()
 801331c:	b580      	push	{r7, lr}
 801331e:	b082      	sub	sp, #8
 8013320:	af00      	add	r7, sp, #0
 8013322:	6078      	str	r0, [r7, #4]
 8013324:	4a0e      	ldr	r2, [pc, #56]	; (8013360 <_ZN19CompositeTestOutputD1Ev+0x44>)
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	601a      	str	r2, [r3, #0]
{
  delete outputOne_;
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	691b      	ldr	r3, [r3, #16]
 801332e:	2b00      	cmp	r3, #0
 8013330:	d004      	beq.n	801333c <_ZN19CompositeTestOutputD1Ev+0x20>
 8013332:	681a      	ldr	r2, [r3, #0]
 8013334:	3204      	adds	r2, #4
 8013336:	6812      	ldr	r2, [r2, #0]
 8013338:	4618      	mov	r0, r3
 801333a:	4790      	blx	r2
  delete outputTwo_;
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	695b      	ldr	r3, [r3, #20]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d004      	beq.n	801334e <_ZN19CompositeTestOutputD1Ev+0x32>
 8013344:	681a      	ldr	r2, [r3, #0]
 8013346:	3204      	adds	r2, #4
 8013348:	6812      	ldr	r2, [r2, #0]
 801334a:	4618      	mov	r0, r3
 801334c:	4790      	blx	r2
CompositeTestOutput::~CompositeTestOutput()
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	4618      	mov	r0, r3
 8013352:	f7ff faf1 	bl	8012938 <_ZN10TestOutputD1Ev>
}
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	4618      	mov	r0, r3
 801335a:	3708      	adds	r7, #8
 801335c:	46bd      	mov	sp, r7
 801335e:	bd80      	pop	{r7, pc}
 8013360:	0802b604 	.word	0x0802b604

08013364 <_ZN19CompositeTestOutputD0Ev>:
CompositeTestOutput::~CompositeTestOutput()
 8013364:	b580      	push	{r7, lr}
 8013366:	b082      	sub	sp, #8
 8013368:	af00      	add	r7, sp, #0
 801336a:	6078      	str	r0, [r7, #4]
}
 801336c:	6878      	ldr	r0, [r7, #4]
 801336e:	f7ff ffd5 	bl	801331c <_ZN19CompositeTestOutputD1Ev>
 8013372:	2118      	movs	r1, #24
 8013374:	6878      	ldr	r0, [r7, #4]
 8013376:	f7f9 f9e9 	bl	800c74c <_ZdlPvj>
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	4618      	mov	r0, r3
 801337e:	3708      	adds	r7, #8
 8013380:	46bd      	mov	sp, r7
 8013382:	bd80      	pop	{r7, pc}

08013384 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput>:

void CompositeTestOutput::setOutputOne(TestOutput* output)
{
 8013384:	b580      	push	{r7, lr}
 8013386:	b082      	sub	sp, #8
 8013388:	af00      	add	r7, sp, #0
 801338a:	6078      	str	r0, [r7, #4]
 801338c:	6039      	str	r1, [r7, #0]
  delete outputOne_;
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	691b      	ldr	r3, [r3, #16]
 8013392:	2b00      	cmp	r3, #0
 8013394:	d004      	beq.n	80133a0 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput+0x1c>
 8013396:	681a      	ldr	r2, [r3, #0]
 8013398:	3204      	adds	r2, #4
 801339a:	6812      	ldr	r2, [r2, #0]
 801339c:	4618      	mov	r0, r3
 801339e:	4790      	blx	r2
  outputOne_ = output;
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	683a      	ldr	r2, [r7, #0]
 80133a4:	611a      	str	r2, [r3, #16]
}
 80133a6:	bf00      	nop
 80133a8:	3708      	adds	r7, #8
 80133aa:	46bd      	mov	sp, r7
 80133ac:	bd80      	pop	{r7, pc}

080133ae <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput>:

void CompositeTestOutput::setOutputTwo(TestOutput* output)
{
 80133ae:	b580      	push	{r7, lr}
 80133b0:	b082      	sub	sp, #8
 80133b2:	af00      	add	r7, sp, #0
 80133b4:	6078      	str	r0, [r7, #4]
 80133b6:	6039      	str	r1, [r7, #0]
  delete outputTwo_;
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	695b      	ldr	r3, [r3, #20]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d004      	beq.n	80133ca <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput+0x1c>
 80133c0:	681a      	ldr	r2, [r3, #0]
 80133c2:	3204      	adds	r2, #4
 80133c4:	6812      	ldr	r2, [r2, #0]
 80133c6:	4618      	mov	r0, r3
 80133c8:	4790      	blx	r2
  outputTwo_ = output;
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	683a      	ldr	r2, [r7, #0]
 80133ce:	615a      	str	r2, [r3, #20]
}
 80133d0:	bf00      	nop
 80133d2:	3708      	adds	r7, #8
 80133d4:	46bd      	mov	sp, r7
 80133d6:	bd80      	pop	{r7, pc}

080133d8 <_ZN19CompositeTestOutput17printTestsStartedEv>:

void CompositeTestOutput::printTestsStarted()
{
 80133d8:	b580      	push	{r7, lr}
 80133da:	b082      	sub	sp, #8
 80133dc:	af00      	add	r7, sp, #0
 80133de:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->printTestsStarted();
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	691b      	ldr	r3, [r3, #16]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d008      	beq.n	80133fa <_ZN19CompositeTestOutput17printTestsStartedEv+0x22>
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	691a      	ldr	r2, [r3, #16]
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	691b      	ldr	r3, [r3, #16]
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	3308      	adds	r3, #8
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	4610      	mov	r0, r2
 80133f8:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsStarted();
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	695b      	ldr	r3, [r3, #20]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d008      	beq.n	8013414 <_ZN19CompositeTestOutput17printTestsStartedEv+0x3c>
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	695a      	ldr	r2, [r3, #20]
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	695b      	ldr	r3, [r3, #20]
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	3308      	adds	r3, #8
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	4610      	mov	r0, r2
 8013412:	4798      	blx	r3
}
 8013414:	bf00      	nop
 8013416:	3708      	adds	r7, #8
 8013418:	46bd      	mov	sp, r7
 801341a:	bd80      	pop	{r7, pc}

0801341c <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult>:

void CompositeTestOutput::printTestsEnded(const TestResult& result)
{
 801341c:	b580      	push	{r7, lr}
 801341e:	b082      	sub	sp, #8
 8013420:	af00      	add	r7, sp, #0
 8013422:	6078      	str	r0, [r7, #4]
 8013424:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printTestsEnded(result);
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	691b      	ldr	r3, [r3, #16]
 801342a:	2b00      	cmp	r3, #0
 801342c:	d009      	beq.n	8013442 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x26>
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	691a      	ldr	r2, [r3, #16]
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	691b      	ldr	r3, [r3, #16]
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	330c      	adds	r3, #12
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	6839      	ldr	r1, [r7, #0]
 801343e:	4610      	mov	r0, r2
 8013440:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsEnded(result);
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	695b      	ldr	r3, [r3, #20]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d009      	beq.n	801345e <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x42>
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	695a      	ldr	r2, [r3, #20]
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	695b      	ldr	r3, [r3, #20]
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	330c      	adds	r3, #12
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	6839      	ldr	r1, [r7, #0]
 801345a:	4610      	mov	r0, r2
 801345c:	4798      	blx	r3
}
 801345e:	bf00      	nop
 8013460:	3708      	adds	r7, #8
 8013462:	46bd      	mov	sp, r7
 8013464:	bd80      	pop	{r7, pc}

08013466 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8013466:	b580      	push	{r7, lr}
 8013468:	b082      	sub	sp, #8
 801346a:	af00      	add	r7, sp, #0
 801346c:	6078      	str	r0, [r7, #4]
 801346e:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestStarted(test);
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	691b      	ldr	r3, [r3, #16]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d009      	beq.n	801348c <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x26>
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	691a      	ldr	r2, [r3, #16]
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	691b      	ldr	r3, [r3, #16]
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	3310      	adds	r3, #16
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	6839      	ldr	r1, [r7, #0]
 8013488:	4610      	mov	r0, r2
 801348a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestStarted(test);
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	695b      	ldr	r3, [r3, #20]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d009      	beq.n	80134a8 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x42>
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	695a      	ldr	r2, [r3, #20]
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	695b      	ldr	r3, [r3, #20]
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	3310      	adds	r3, #16
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	6839      	ldr	r1, [r7, #0]
 80134a4:	4610      	mov	r0, r2
 80134a6:	4798      	blx	r3
}
 80134a8:	bf00      	nop
 80134aa:	3708      	adds	r7, #8
 80134ac:	46bd      	mov	sp, r7
 80134ae:	bd80      	pop	{r7, pc}

080134b0 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult>:

void CompositeTestOutput::printCurrentTestEnded(const TestResult& res)
{
 80134b0:	b580      	push	{r7, lr}
 80134b2:	b082      	sub	sp, #8
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	6078      	str	r0, [r7, #4]
 80134b8:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestEnded(res);
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	691b      	ldr	r3, [r3, #16]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d009      	beq.n	80134d6 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x26>
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	691a      	ldr	r2, [r3, #16]
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	691b      	ldr	r3, [r3, #16]
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	3314      	adds	r3, #20
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	6839      	ldr	r1, [r7, #0]
 80134d2:	4610      	mov	r0, r2
 80134d4:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestEnded(res);
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	695b      	ldr	r3, [r3, #20]
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d009      	beq.n	80134f2 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x42>
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	695a      	ldr	r2, [r3, #20]
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	695b      	ldr	r3, [r3, #20]
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	3314      	adds	r3, #20
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	6839      	ldr	r1, [r7, #0]
 80134ee:	4610      	mov	r0, r2
 80134f0:	4798      	blx	r3
}
 80134f2:	bf00      	nop
 80134f4:	3708      	adds	r7, #8
 80134f6:	46bd      	mov	sp, r7
 80134f8:	bd80      	pop	{r7, pc}

080134fa <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 80134fa:	b580      	push	{r7, lr}
 80134fc:	b082      	sub	sp, #8
 80134fe:	af00      	add	r7, sp, #0
 8013500:	6078      	str	r0, [r7, #4]
 8013502:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupStarted(test);
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	691b      	ldr	r3, [r3, #16]
 8013508:	2b00      	cmp	r3, #0
 801350a:	d009      	beq.n	8013520 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x26>
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	691a      	ldr	r2, [r3, #16]
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	691b      	ldr	r3, [r3, #16]
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	3318      	adds	r3, #24
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	6839      	ldr	r1, [r7, #0]
 801351c:	4610      	mov	r0, r2
 801351e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupStarted(test);
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	695b      	ldr	r3, [r3, #20]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d009      	beq.n	801353c <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x42>
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	695a      	ldr	r2, [r3, #20]
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	695b      	ldr	r3, [r3, #20]
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	3318      	adds	r3, #24
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	6839      	ldr	r1, [r7, #0]
 8013538:	4610      	mov	r0, r2
 801353a:	4798      	blx	r3
}
 801353c:	bf00      	nop
 801353e:	3708      	adds	r7, #8
 8013540:	46bd      	mov	sp, r7
 8013542:	bd80      	pop	{r7, pc}

08013544 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult>:

void CompositeTestOutput::printCurrentGroupEnded(const TestResult& res)
{
 8013544:	b580      	push	{r7, lr}
 8013546:	b082      	sub	sp, #8
 8013548:	af00      	add	r7, sp, #0
 801354a:	6078      	str	r0, [r7, #4]
 801354c:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupEnded(res);
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	691b      	ldr	r3, [r3, #16]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d009      	beq.n	801356a <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x26>
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	691a      	ldr	r2, [r3, #16]
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	691b      	ldr	r3, [r3, #16]
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	331c      	adds	r3, #28
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	6839      	ldr	r1, [r7, #0]
 8013566:	4610      	mov	r0, r2
 8013568:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupEnded(res);
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	695b      	ldr	r3, [r3, #20]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d009      	beq.n	8013586 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x42>
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	695a      	ldr	r2, [r3, #20]
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	695b      	ldr	r3, [r3, #20]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	331c      	adds	r3, #28
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	6839      	ldr	r1, [r7, #0]
 8013582:	4610      	mov	r0, r2
 8013584:	4798      	blx	r3
}
 8013586:	bf00      	nop
 8013588:	3708      	adds	r7, #8
 801358a:	46bd      	mov	sp, r7
 801358c:	bd80      	pop	{r7, pc}

0801358e <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE>:

void CompositeTestOutput::verbose(VerbosityLevel level)
{
 801358e:	b580      	push	{r7, lr}
 8013590:	b082      	sub	sp, #8
 8013592:	af00      	add	r7, sp, #0
 8013594:	6078      	str	r0, [r7, #4]
 8013596:	460b      	mov	r3, r1
 8013598:	70fb      	strb	r3, [r7, #3]
  if (outputOne_) outputOne_->verbose(level);
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	691b      	ldr	r3, [r3, #16]
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d009      	beq.n	80135b6 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x28>
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	691a      	ldr	r2, [r3, #16]
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	691b      	ldr	r3, [r3, #16]
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	3320      	adds	r3, #32
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	78f9      	ldrb	r1, [r7, #3]
 80135b2:	4610      	mov	r0, r2
 80135b4:	4798      	blx	r3
  if (outputTwo_) outputTwo_->verbose(level);
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	695b      	ldr	r3, [r3, #20]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d009      	beq.n	80135d2 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x44>
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	695a      	ldr	r2, [r3, #20]
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	695b      	ldr	r3, [r3, #20]
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	3320      	adds	r3, #32
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	78f9      	ldrb	r1, [r7, #3]
 80135ce:	4610      	mov	r0, r2
 80135d0:	4798      	blx	r3
}
 80135d2:	bf00      	nop
 80135d4:	3708      	adds	r7, #8
 80135d6:	46bd      	mov	sp, r7
 80135d8:	bd80      	pop	{r7, pc}

080135da <_ZN19CompositeTestOutput5colorEv>:

void CompositeTestOutput::color()
{
 80135da:	b580      	push	{r7, lr}
 80135dc:	b082      	sub	sp, #8
 80135de:	af00      	add	r7, sp, #0
 80135e0:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->color();
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	691b      	ldr	r3, [r3, #16]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d008      	beq.n	80135fc <_ZN19CompositeTestOutput5colorEv+0x22>
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	691a      	ldr	r2, [r3, #16]
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	691b      	ldr	r3, [r3, #16]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	3324      	adds	r3, #36	; 0x24
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	4610      	mov	r0, r2
 80135fa:	4798      	blx	r3
  if (outputTwo_) outputTwo_->color();
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	695b      	ldr	r3, [r3, #20]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d008      	beq.n	8013616 <_ZN19CompositeTestOutput5colorEv+0x3c>
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	695a      	ldr	r2, [r3, #20]
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	695b      	ldr	r3, [r3, #20]
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	3324      	adds	r3, #36	; 0x24
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	4610      	mov	r0, r2
 8013614:	4798      	blx	r3
}
 8013616:	bf00      	nop
 8013618:	3708      	adds	r7, #8
 801361a:	46bd      	mov	sp, r7
 801361c:	bd80      	pop	{r7, pc}

0801361e <_ZN19CompositeTestOutput11printBufferEPKc>:

void CompositeTestOutput::printBuffer(const char* buffer)
{
 801361e:	b580      	push	{r7, lr}
 8013620:	b082      	sub	sp, #8
 8013622:	af00      	add	r7, sp, #0
 8013624:	6078      	str	r0, [r7, #4]
 8013626:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printBuffer(buffer);
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	691b      	ldr	r3, [r3, #16]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d009      	beq.n	8013644 <_ZN19CompositeTestOutput11printBufferEPKc+0x26>
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	691a      	ldr	r2, [r3, #16]
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	691b      	ldr	r3, [r3, #16]
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	3328      	adds	r3, #40	; 0x28
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	6839      	ldr	r1, [r7, #0]
 8013640:	4610      	mov	r0, r2
 8013642:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printBuffer(buffer);
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	695b      	ldr	r3, [r3, #20]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d009      	beq.n	8013660 <_ZN19CompositeTestOutput11printBufferEPKc+0x42>
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	695a      	ldr	r2, [r3, #20]
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	695b      	ldr	r3, [r3, #20]
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	3328      	adds	r3, #40	; 0x28
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	6839      	ldr	r1, [r7, #0]
 801365c:	4610      	mov	r0, r2
 801365e:	4798      	blx	r3
}
 8013660:	bf00      	nop
 8013662:	3708      	adds	r7, #8
 8013664:	46bd      	mov	sp, r7
 8013666:	bd80      	pop	{r7, pc}

08013668 <_ZN19CompositeTestOutput5printEPKc>:

void CompositeTestOutput::print(const char* buffer)
{
 8013668:	b580      	push	{r7, lr}
 801366a:	b082      	sub	sp, #8
 801366c:	af00      	add	r7, sp, #0
 801366e:	6078      	str	r0, [r7, #4]
 8013670:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(buffer);
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	691b      	ldr	r3, [r3, #16]
 8013676:	2b00      	cmp	r3, #0
 8013678:	d009      	beq.n	801368e <_ZN19CompositeTestOutput5printEPKc+0x26>
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	691a      	ldr	r2, [r3, #16]
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	691b      	ldr	r3, [r3, #16]
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	332c      	adds	r3, #44	; 0x2c
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	6839      	ldr	r1, [r7, #0]
 801368a:	4610      	mov	r0, r2
 801368c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(buffer);
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	695b      	ldr	r3, [r3, #20]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d009      	beq.n	80136aa <_ZN19CompositeTestOutput5printEPKc+0x42>
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	695a      	ldr	r2, [r3, #20]
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	695b      	ldr	r3, [r3, #20]
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	332c      	adds	r3, #44	; 0x2c
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	6839      	ldr	r1, [r7, #0]
 80136a6:	4610      	mov	r0, r2
 80136a8:	4798      	blx	r3
}
 80136aa:	bf00      	nop
 80136ac:	3708      	adds	r7, #8
 80136ae:	46bd      	mov	sp, r7
 80136b0:	bd80      	pop	{r7, pc}

080136b2 <_ZN19CompositeTestOutput5printEl>:

void CompositeTestOutput::print(long number)
{
 80136b2:	b580      	push	{r7, lr}
 80136b4:	b082      	sub	sp, #8
 80136b6:	af00      	add	r7, sp, #0
 80136b8:	6078      	str	r0, [r7, #4]
 80136ba:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	691b      	ldr	r3, [r3, #16]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d009      	beq.n	80136d8 <_ZN19CompositeTestOutput5printEl+0x26>
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	691a      	ldr	r2, [r3, #16]
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	691b      	ldr	r3, [r3, #16]
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	3330      	adds	r3, #48	; 0x30
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	6839      	ldr	r1, [r7, #0]
 80136d4:	4610      	mov	r0, r2
 80136d6:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	695b      	ldr	r3, [r3, #20]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d009      	beq.n	80136f4 <_ZN19CompositeTestOutput5printEl+0x42>
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	695a      	ldr	r2, [r3, #20]
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	695b      	ldr	r3, [r3, #20]
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	3330      	adds	r3, #48	; 0x30
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	6839      	ldr	r1, [r7, #0]
 80136f0:	4610      	mov	r0, r2
 80136f2:	4798      	blx	r3
}
 80136f4:	bf00      	nop
 80136f6:	3708      	adds	r7, #8
 80136f8:	46bd      	mov	sp, r7
 80136fa:	bd80      	pop	{r7, pc}

080136fc <_ZN19CompositeTestOutput5printEj>:

void CompositeTestOutput::print(size_t number)
{
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b082      	sub	sp, #8
 8013700:	af00      	add	r7, sp, #0
 8013702:	6078      	str	r0, [r7, #4]
 8013704:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	691b      	ldr	r3, [r3, #16]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d009      	beq.n	8013722 <_ZN19CompositeTestOutput5printEj+0x26>
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	691a      	ldr	r2, [r3, #16]
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	691b      	ldr	r3, [r3, #16]
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	3334      	adds	r3, #52	; 0x34
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	6839      	ldr	r1, [r7, #0]
 801371e:	4610      	mov	r0, r2
 8013720:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	695b      	ldr	r3, [r3, #20]
 8013726:	2b00      	cmp	r3, #0
 8013728:	d009      	beq.n	801373e <_ZN19CompositeTestOutput5printEj+0x42>
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	695a      	ldr	r2, [r3, #20]
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	695b      	ldr	r3, [r3, #20]
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	3334      	adds	r3, #52	; 0x34
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	6839      	ldr	r1, [r7, #0]
 801373a:	4610      	mov	r0, r2
 801373c:	4798      	blx	r3
}
 801373e:	bf00      	nop
 8013740:	3708      	adds	r7, #8
 8013742:	46bd      	mov	sp, r7
 8013744:	bd80      	pop	{r7, pc}

08013746 <_ZN19CompositeTestOutput11printDoubleEd>:

void CompositeTestOutput::printDouble(double number)
{
 8013746:	b580      	push	{r7, lr}
 8013748:	b084      	sub	sp, #16
 801374a:	af00      	add	r7, sp, #0
 801374c:	60f8      	str	r0, [r7, #12]
 801374e:	ed87 0b00 	vstr	d0, [r7]
  if (outputOne_) outputOne_->printDouble(number);
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	691b      	ldr	r3, [r3, #16]
 8013756:	2b00      	cmp	r3, #0
 8013758:	d00a      	beq.n	8013770 <_ZN19CompositeTestOutput11printDoubleEd+0x2a>
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	691a      	ldr	r2, [r3, #16]
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	691b      	ldr	r3, [r3, #16]
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	3338      	adds	r3, #56	; 0x38
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	ed97 0b00 	vldr	d0, [r7]
 801376c:	4610      	mov	r0, r2
 801376e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printDouble(number);
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	695b      	ldr	r3, [r3, #20]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d00a      	beq.n	801378e <_ZN19CompositeTestOutput11printDoubleEd+0x48>
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	695a      	ldr	r2, [r3, #20]
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	695b      	ldr	r3, [r3, #20]
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	3338      	adds	r3, #56	; 0x38
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	ed97 0b00 	vldr	d0, [r7]
 801378a:	4610      	mov	r0, r2
 801378c:	4798      	blx	r3
}
 801378e:	bf00      	nop
 8013790:	3710      	adds	r7, #16
 8013792:	46bd      	mov	sp, r7
 8013794:	bd80      	pop	{r7, pc}

08013796 <_ZN19CompositeTestOutput12printFailureERK11TestFailure>:

void CompositeTestOutput::printFailure(const TestFailure& failure)
{
 8013796:	b580      	push	{r7, lr}
 8013798:	b082      	sub	sp, #8
 801379a:	af00      	add	r7, sp, #0
 801379c:	6078      	str	r0, [r7, #4]
 801379e:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printFailure(failure);
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	691b      	ldr	r3, [r3, #16]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d009      	beq.n	80137bc <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x26>
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	691a      	ldr	r2, [r3, #16]
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	691b      	ldr	r3, [r3, #16]
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	333c      	adds	r3, #60	; 0x3c
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	6839      	ldr	r1, [r7, #0]
 80137b8:	4610      	mov	r0, r2
 80137ba:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printFailure(failure);
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	695b      	ldr	r3, [r3, #20]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d009      	beq.n	80137d8 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x42>
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	695a      	ldr	r2, [r3, #20]
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	695b      	ldr	r3, [r3, #20]
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	333c      	adds	r3, #60	; 0x3c
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	6839      	ldr	r1, [r7, #0]
 80137d4:	4610      	mov	r0, r2
 80137d6:	4798      	blx	r3
}
 80137d8:	bf00      	nop
 80137da:	3708      	adds	r7, #8
 80137dc:	46bd      	mov	sp, r7
 80137de:	bd80      	pop	{r7, pc}

080137e0 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc>:

void CompositeTestOutput::setProgressIndicator(const char* indicator)
{
 80137e0:	b580      	push	{r7, lr}
 80137e2:	b082      	sub	sp, #8
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	6078      	str	r0, [r7, #4]
 80137e8:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->setProgressIndicator(indicator);
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	691b      	ldr	r3, [r3, #16]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d009      	beq.n	8013806 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x26>
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	691a      	ldr	r2, [r3, #16]
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	691b      	ldr	r3, [r3, #16]
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	3344      	adds	r3, #68	; 0x44
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	6839      	ldr	r1, [r7, #0]
 8013802:	4610      	mov	r0, r2
 8013804:	4798      	blx	r3
  if (outputTwo_) outputTwo_->setProgressIndicator(indicator);
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	695b      	ldr	r3, [r3, #20]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d009      	beq.n	8013822 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x42>
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	695a      	ldr	r2, [r3, #20]
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	695b      	ldr	r3, [r3, #20]
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	3344      	adds	r3, #68	; 0x44
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	6839      	ldr	r1, [r7, #0]
 801381e:	4610      	mov	r0, r2
 8013820:	4798      	blx	r3
}
 8013822:	bf00      	nop
 8013824:	3708      	adds	r7, #8
 8013826:	46bd      	mov	sp, r7
 8013828:	bd80      	pop	{r7, pc}

0801382a <_ZN19CompositeTestOutput5flushEv>:

void CompositeTestOutput::flush()
{
 801382a:	b580      	push	{r7, lr}
 801382c:	b082      	sub	sp, #8
 801382e:	af00      	add	r7, sp, #0
 8013830:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->flush();
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	691b      	ldr	r3, [r3, #16]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d008      	beq.n	801384c <_ZN19CompositeTestOutput5flushEv+0x22>
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	691a      	ldr	r2, [r3, #16]
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	691b      	ldr	r3, [r3, #16]
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	334c      	adds	r3, #76	; 0x4c
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	4610      	mov	r0, r2
 801384a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->flush();
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	695b      	ldr	r3, [r3, #20]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d008      	beq.n	8013866 <_ZN19CompositeTestOutput5flushEv+0x3c>
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	695a      	ldr	r2, [r3, #20]
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	695b      	ldr	r3, [r3, #20]
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	334c      	adds	r3, #76	; 0x4c
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	4610      	mov	r0, r2
 8013864:	4798      	blx	r3
}
 8013866:	bf00      	nop
 8013868:	3708      	adds	r7, #8
 801386a:	46bd      	mov	sp, r7
 801386c:	bd80      	pop	{r7, pc}

0801386e <_ZN10TestPlugin13preTestActionER10UtestShellR10TestResult>:
    virtual void preTestAction(UtestShell&, TestResult&)
 801386e:	b480      	push	{r7}
 8013870:	b085      	sub	sp, #20
 8013872:	af00      	add	r7, sp, #0
 8013874:	60f8      	str	r0, [r7, #12]
 8013876:	60b9      	str	r1, [r7, #8]
 8013878:	607a      	str	r2, [r7, #4]
    }
 801387a:	bf00      	nop
 801387c:	3714      	adds	r7, #20
 801387e:	46bd      	mov	sp, r7
 8013880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013884:	4770      	bx	lr

08013886 <_ZN10TestPlugin14postTestActionER10UtestShellR10TestResult>:
    virtual void postTestAction(UtestShell&, TestResult&)
 8013886:	b480      	push	{r7}
 8013888:	b085      	sub	sp, #20
 801388a:	af00      	add	r7, sp, #0
 801388c:	60f8      	str	r0, [r7, #12]
 801388e:	60b9      	str	r1, [r7, #8]
 8013890:	607a      	str	r2, [r7, #4]
    }
 8013892:	bf00      	nop
 8013894:	3714      	adds	r7, #20
 8013896:	46bd      	mov	sp, r7
 8013898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801389c:	4770      	bx	lr
	...

080138a0 <_ZN10TestPluginC1ERK12SimpleString>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestPlugin.h"

TestPlugin::TestPlugin(const SimpleString& name) :
 80138a0:	b580      	push	{r7, lr}
 80138a2:	b082      	sub	sp, #8
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	6078      	str	r0, [r7, #4]
 80138a8:	6039      	str	r1, [r7, #0]
    next_(NullTestPlugin::instance()), name_(name), enabled_(true)
 80138aa:	4a0b      	ldr	r2, [pc, #44]	; (80138d8 <_ZN10TestPluginC1ERK12SimpleString+0x38>)
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	601a      	str	r2, [r3, #0]
 80138b0:	f000 f9ce 	bl	8013c50 <_ZN14NullTestPlugin8instanceEv>
 80138b4:	4602      	mov	r2, r0
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	605a      	str	r2, [r3, #4]
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	3308      	adds	r3, #8
 80138be:	6839      	ldr	r1, [r7, #0]
 80138c0:	4618      	mov	r0, r3
 80138c2:	f7fb fb46 	bl	800ef52 <_ZN12SimpleStringC1ERKS_>
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	2201      	movs	r2, #1
 80138ca:	741a      	strb	r2, [r3, #16]
{
}
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	4618      	mov	r0, r3
 80138d0:	3708      	adds	r7, #8
 80138d2:	46bd      	mov	sp, r7
 80138d4:	bd80      	pop	{r7, pc}
 80138d6:	bf00      	nop
 80138d8:	0802b7c0 	.word	0x0802b7c0

080138dc <_ZN10TestPluginC1EPS_>:

TestPlugin::TestPlugin(TestPlugin* next) :
 80138dc:	b580      	push	{r7, lr}
 80138de:	b082      	sub	sp, #8
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	6078      	str	r0, [r7, #4]
 80138e4:	6039      	str	r1, [r7, #0]
    next_(next), name_("null"), enabled_(true)
 80138e6:	4a0a      	ldr	r2, [pc, #40]	; (8013910 <_ZN10TestPluginC1EPS_+0x34>)
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	601a      	str	r2, [r3, #0]
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	683a      	ldr	r2, [r7, #0]
 80138f0:	605a      	str	r2, [r3, #4]
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	3308      	adds	r3, #8
 80138f6:	4907      	ldr	r1, [pc, #28]	; (8013914 <_ZN10TestPluginC1EPS_+0x38>)
 80138f8:	4618      	mov	r0, r3
 80138fa:	f7fb fad6 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	2201      	movs	r2, #1
 8013902:	741a      	strb	r2, [r3, #16]
{
}
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	4618      	mov	r0, r3
 8013908:	3708      	adds	r7, #8
 801390a:	46bd      	mov	sp, r7
 801390c:	bd80      	pop	{r7, pc}
 801390e:	bf00      	nop
 8013910:	0802b7c0 	.word	0x0802b7c0
 8013914:	08027a0c 	.word	0x08027a0c

08013918 <_ZN10TestPluginD1Ev>:

TestPlugin::~TestPlugin()
 8013918:	b580      	push	{r7, lr}
 801391a:	b082      	sub	sp, #8
 801391c:	af00      	add	r7, sp, #0
 801391e:	6078      	str	r0, [r7, #4]
 8013920:	4a06      	ldr	r2, [pc, #24]	; (801393c <_ZN10TestPluginD1Ev+0x24>)
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	601a      	str	r2, [r3, #0]
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	3308      	adds	r3, #8
 801392a:	4618      	mov	r0, r3
 801392c:	f7fb fe75 	bl	800f61a <_ZN12SimpleStringD1Ev>
{
}
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	4618      	mov	r0, r3
 8013934:	3708      	adds	r7, #8
 8013936:	46bd      	mov	sp, r7
 8013938:	bd80      	pop	{r7, pc}
 801393a:	bf00      	nop
 801393c:	0802b7c0 	.word	0x0802b7c0

08013940 <_ZN10TestPluginD0Ev>:
TestPlugin::~TestPlugin()
 8013940:	b580      	push	{r7, lr}
 8013942:	b082      	sub	sp, #8
 8013944:	af00      	add	r7, sp, #0
 8013946:	6078      	str	r0, [r7, #4]
}
 8013948:	6878      	ldr	r0, [r7, #4]
 801394a:	f7ff ffe5 	bl	8013918 <_ZN10TestPluginD1Ev>
 801394e:	2114      	movs	r1, #20
 8013950:	6878      	ldr	r0, [r7, #4]
 8013952:	f7f8 fefb 	bl	800c74c <_ZdlPvj>
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	4618      	mov	r0, r3
 801395a:	3708      	adds	r7, #8
 801395c:	46bd      	mov	sp, r7
 801395e:	bd80      	pop	{r7, pc}

08013960 <_ZN10TestPlugin9addPluginEPS_>:

TestPlugin* TestPlugin::addPlugin(TestPlugin* plugin)
{
 8013960:	b480      	push	{r7}
 8013962:	b083      	sub	sp, #12
 8013964:	af00      	add	r7, sp, #0
 8013966:	6078      	str	r0, [r7, #4]
 8013968:	6039      	str	r1, [r7, #0]
    next_ = plugin;
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	683a      	ldr	r2, [r7, #0]
 801396e:	605a      	str	r2, [r3, #4]
    return this;
 8013970:	687b      	ldr	r3, [r7, #4]
}
 8013972:	4618      	mov	r0, r3
 8013974:	370c      	adds	r7, #12
 8013976:	46bd      	mov	sp, r7
 8013978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801397c:	4770      	bx	lr

0801397e <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPreTestAction(UtestShell& test, TestResult& result)
{
 801397e:	b580      	push	{r7, lr}
 8013980:	b084      	sub	sp, #16
 8013982:	af00      	add	r7, sp, #0
 8013984:	60f8      	str	r0, [r7, #12]
 8013986:	60b9      	str	r1, [r7, #8]
 8013988:	607a      	str	r2, [r7, #4]
    if (enabled_) preTestAction(test, result);
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	7c1b      	ldrb	r3, [r3, #16]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d007      	beq.n	80139a2 <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult+0x24>
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	3308      	adds	r3, #8
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	687a      	ldr	r2, [r7, #4]
 801399c:	68b9      	ldr	r1, [r7, #8]
 801399e:	68f8      	ldr	r0, [r7, #12]
 80139a0:	4798      	blx	r3
    next_->runAllPreTestAction(test, result);
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	6858      	ldr	r0, [r3, #4]
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	685b      	ldr	r3, [r3, #4]
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	3314      	adds	r3, #20
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	687a      	ldr	r2, [r7, #4]
 80139b2:	68b9      	ldr	r1, [r7, #8]
 80139b4:	4798      	blx	r3
}
 80139b6:	bf00      	nop
 80139b8:	3710      	adds	r7, #16
 80139ba:	46bd      	mov	sp, r7
 80139bc:	bd80      	pop	{r7, pc}

080139be <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPostTestAction(UtestShell& test, TestResult& result)
{
 80139be:	b580      	push	{r7, lr}
 80139c0:	b084      	sub	sp, #16
 80139c2:	af00      	add	r7, sp, #0
 80139c4:	60f8      	str	r0, [r7, #12]
 80139c6:	60b9      	str	r1, [r7, #8]
 80139c8:	607a      	str	r2, [r7, #4]
    next_ ->runAllPostTestAction(test, result);
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	6858      	ldr	r0, [r3, #4]
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	685b      	ldr	r3, [r3, #4]
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	3318      	adds	r3, #24
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	687a      	ldr	r2, [r7, #4]
 80139da:	68b9      	ldr	r1, [r7, #8]
 80139dc:	4798      	blx	r3
    if (enabled_) postTestAction(test, result);
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	7c1b      	ldrb	r3, [r3, #16]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d007      	beq.n	80139f6 <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult+0x38>
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	330c      	adds	r3, #12
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	687a      	ldr	r2, [r7, #4]
 80139f0:	68b9      	ldr	r1, [r7, #8]
 80139f2:	68f8      	ldr	r0, [r7, #12]
 80139f4:	4798      	blx	r3
}
 80139f6:	bf00      	nop
 80139f8:	3710      	adds	r7, #16
 80139fa:	46bd      	mov	sp, r7
 80139fc:	bd80      	pop	{r7, pc}

080139fe <_ZN10TestPlugin17parseAllArgumentsEiPPci>:

bool TestPlugin::parseAllArguments(int ac, char** av, int index)
{
 80139fe:	b590      	push	{r4, r7, lr}
 8013a00:	b085      	sub	sp, #20
 8013a02:	af00      	add	r7, sp, #0
 8013a04:	60f8      	str	r0, [r7, #12]
 8013a06:	60b9      	str	r1, [r7, #8]
 8013a08:	607a      	str	r2, [r7, #4]
 8013a0a:	603b      	str	r3, [r7, #0]
    return parseAllArguments(ac, const_cast<const char *const *> (av), index);
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	331c      	adds	r3, #28
 8013a12:	681c      	ldr	r4, [r3, #0]
 8013a14:	683b      	ldr	r3, [r7, #0]
 8013a16:	687a      	ldr	r2, [r7, #4]
 8013a18:	68b9      	ldr	r1, [r7, #8]
 8013a1a:	68f8      	ldr	r0, [r7, #12]
 8013a1c:	47a0      	blx	r4
 8013a1e:	4603      	mov	r3, r0
}
 8013a20:	4618      	mov	r0, r3
 8013a22:	3714      	adds	r7, #20
 8013a24:	46bd      	mov	sp, r7
 8013a26:	bd90      	pop	{r4, r7, pc}

08013a28 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci>:

bool TestPlugin::parseAllArguments(int ac, const char *const *av, int index)
{
 8013a28:	b590      	push	{r4, r7, lr}
 8013a2a:	b085      	sub	sp, #20
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	60f8      	str	r0, [r7, #12]
 8013a30:	60b9      	str	r1, [r7, #8]
 8013a32:	607a      	str	r2, [r7, #4]
 8013a34:	603b      	str	r3, [r7, #0]
    if (parseArguments(ac, av, index)) return true;
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	3310      	adds	r3, #16
 8013a3c:	681c      	ldr	r4, [r3, #0]
 8013a3e:	683b      	ldr	r3, [r7, #0]
 8013a40:	687a      	ldr	r2, [r7, #4]
 8013a42:	68b9      	ldr	r1, [r7, #8]
 8013a44:	68f8      	ldr	r0, [r7, #12]
 8013a46:	47a0      	blx	r4
 8013a48:	4603      	mov	r3, r0
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d001      	beq.n	8013a52 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x2a>
 8013a4e:	2301      	movs	r3, #1
 8013a50:	e011      	b.n	8013a76 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    if (next_) return next_->parseAllArguments(ac, av, index);
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	685b      	ldr	r3, [r3, #4]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d00c      	beq.n	8013a74 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4c>
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	6858      	ldr	r0, [r3, #4]
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	685b      	ldr	r3, [r3, #4]
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	331c      	adds	r3, #28
 8013a66:	681c      	ldr	r4, [r3, #0]
 8013a68:	683b      	ldr	r3, [r7, #0]
 8013a6a:	687a      	ldr	r2, [r7, #4]
 8013a6c:	68b9      	ldr	r1, [r7, #8]
 8013a6e:	47a0      	blx	r4
 8013a70:	4603      	mov	r3, r0
 8013a72:	e000      	b.n	8013a76 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    return false;
 8013a74:	2300      	movs	r3, #0
}
 8013a76:	4618      	mov	r0, r3
 8013a78:	3714      	adds	r7, #20
 8013a7a:	46bd      	mov	sp, r7
 8013a7c:	bd90      	pop	{r4, r7, pc}

08013a7e <_ZN10TestPlugin7getNameEv>:

const SimpleString& TestPlugin::getName()
{
 8013a7e:	b480      	push	{r7}
 8013a80:	b083      	sub	sp, #12
 8013a82:	af00      	add	r7, sp, #0
 8013a84:	6078      	str	r0, [r7, #4]
    return name_;
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	3308      	adds	r3, #8
}
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	370c      	adds	r7, #12
 8013a8e:	46bd      	mov	sp, r7
 8013a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a94:	4770      	bx	lr

08013a96 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>:

TestPlugin* TestPlugin::getPluginByName(const SimpleString& name)
{
 8013a96:	b580      	push	{r7, lr}
 8013a98:	b082      	sub	sp, #8
 8013a9a:	af00      	add	r7, sp, #0
 8013a9c:	6078      	str	r0, [r7, #4]
 8013a9e:	6039      	str	r1, [r7, #0]
    if (name == name_) return this;
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	3308      	adds	r3, #8
 8013aa4:	4619      	mov	r1, r3
 8013aa6:	6838      	ldr	r0, [r7, #0]
 8013aa8:	f7fb fdc3 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8013aac:	4603      	mov	r3, r0
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d001      	beq.n	8013ab6 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x20>
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	e00d      	b.n	8013ad2 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    if (next_) return next_->getPluginByName(name);
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	685b      	ldr	r3, [r3, #4]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d007      	beq.n	8013ace <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x38>
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	685b      	ldr	r3, [r3, #4]
 8013ac2:	6839      	ldr	r1, [r7, #0]
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	f7ff ffe6 	bl	8013a96 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 8013aca:	4603      	mov	r3, r0
 8013acc:	e001      	b.n	8013ad2 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    return (next_);
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	685b      	ldr	r3, [r3, #4]
}
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	3708      	adds	r7, #8
 8013ad6:	46bd      	mov	sp, r7
 8013ad8:	bd80      	pop	{r7, pc}

08013ada <_ZN10TestPlugin7getNextEv>:

TestPlugin* TestPlugin::getNext()
{
 8013ada:	b480      	push	{r7}
 8013adc:	b083      	sub	sp, #12
 8013ade:	af00      	add	r7, sp, #0
 8013ae0:	6078      	str	r0, [r7, #4]
    return next_;
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	685b      	ldr	r3, [r3, #4]
}
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	370c      	adds	r7, #12
 8013aea:	46bd      	mov	sp, r7
 8013aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af0:	4770      	bx	lr

08013af2 <_ZN10TestPlugin18removePluginByNameERK12SimpleString>:
TestPlugin* TestPlugin::removePluginByName(const SimpleString& name)
{
 8013af2:	b580      	push	{r7, lr}
 8013af4:	b084      	sub	sp, #16
 8013af6:	af00      	add	r7, sp, #0
 8013af8:	6078      	str	r0, [r7, #4]
 8013afa:	6039      	str	r1, [r7, #0]
    TestPlugin* removed = NULLPTR;
 8013afc:	2300      	movs	r3, #0
 8013afe:	60fb      	str	r3, [r7, #12]
    if (next_ && next_->getName() == name) {
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	685b      	ldr	r3, [r3, #4]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d00e      	beq.n	8013b26 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	685b      	ldr	r3, [r3, #4]
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	f7ff ffb6 	bl	8013a7e <_ZN10TestPlugin7getNameEv>
 8013b12:	4603      	mov	r3, r0
 8013b14:	6839      	ldr	r1, [r7, #0]
 8013b16:	4618      	mov	r0, r3
 8013b18:	f7fb fd8b 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8013b1c:	4603      	mov	r3, r0
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d001      	beq.n	8013b26 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 8013b22:	2301      	movs	r3, #1
 8013b24:	e000      	b.n	8013b28 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x36>
 8013b26:	2300      	movs	r3, #0
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d007      	beq.n	8013b3c <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x4a>
        removed = next_;
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	685b      	ldr	r3, [r3, #4]
 8013b30:	60fb      	str	r3, [r7, #12]
        next_ = next_->next_;
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	685b      	ldr	r3, [r3, #4]
 8013b36:	685a      	ldr	r2, [r3, #4]
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	605a      	str	r2, [r3, #4]
    }
    return removed;
 8013b3c:	68fb      	ldr	r3, [r7, #12]
}
 8013b3e:	4618      	mov	r0, r3
 8013b40:	3710      	adds	r7, #16
 8013b42:	46bd      	mov	sp, r7
 8013b44:	bd80      	pop	{r7, pc}

08013b46 <_ZN10TestPlugin7disableEv>:

void TestPlugin::disable()
{
 8013b46:	b480      	push	{r7}
 8013b48:	b083      	sub	sp, #12
 8013b4a:	af00      	add	r7, sp, #0
 8013b4c:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	2200      	movs	r2, #0
 8013b52:	741a      	strb	r2, [r3, #16]
}
 8013b54:	bf00      	nop
 8013b56:	370c      	adds	r7, #12
 8013b58:	46bd      	mov	sp, r7
 8013b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b5e:	4770      	bx	lr

08013b60 <_ZN10TestPlugin6enableEv>:

void TestPlugin::enable()
{
 8013b60:	b480      	push	{r7}
 8013b62:	b083      	sub	sp, #12
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	2201      	movs	r2, #1
 8013b6c:	741a      	strb	r2, [r3, #16]
}
 8013b6e:	bf00      	nop
 8013b70:	370c      	adds	r7, #12
 8013b72:	46bd      	mov	sp, r7
 8013b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b78:	4770      	bx	lr

08013b7a <_ZN10TestPlugin9isEnabledEv>:

bool TestPlugin::isEnabled()
{
 8013b7a:	b480      	push	{r7}
 8013b7c:	b083      	sub	sp, #12
 8013b7e:	af00      	add	r7, sp, #0
 8013b80:	6078      	str	r0, [r7, #4]
    return enabled_;
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	7c1b      	ldrb	r3, [r3, #16]
}
 8013b86:	4618      	mov	r0, r3
 8013b88:	370c      	adds	r7, #12
 8013b8a:	46bd      	mov	sp, r7
 8013b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b90:	4770      	bx	lr
	...

08013b94 <_ZN16SetPointerPluginC1ERK12SimpleString>:
//////// SetPlugin

static int pointerTableIndex;
static cpputest_pair setlist[SetPointerPlugin::MAX_SET];

SetPointerPlugin::SetPointerPlugin(const SimpleString& name) :
 8013b94:	b580      	push	{r7, lr}
 8013b96:	b082      	sub	sp, #8
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	6078      	str	r0, [r7, #4]
 8013b9c:	6039      	str	r1, [r7, #0]
    TestPlugin(name)
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	6839      	ldr	r1, [r7, #0]
 8013ba2:	4618      	mov	r0, r3
 8013ba4:	f7ff fe7c 	bl	80138a0 <_ZN10TestPluginC1ERK12SimpleString>
 8013ba8:	4a05      	ldr	r2, [pc, #20]	; (8013bc0 <_ZN16SetPointerPluginC1ERK12SimpleString+0x2c>)
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	601a      	str	r2, [r3, #0]
{
    pointerTableIndex = 0;
 8013bae:	4b05      	ldr	r3, [pc, #20]	; (8013bc4 <_ZN16SetPointerPluginC1ERK12SimpleString+0x30>)
 8013bb0:	2200      	movs	r2, #0
 8013bb2:	601a      	str	r2, [r3, #0]
}
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	3708      	adds	r7, #8
 8013bba:	46bd      	mov	sp, r7
 8013bbc:	bd80      	pop	{r7, pc}
 8013bbe:	bf00      	nop
 8013bc0:	0802b77c 	.word	0x0802b77c
 8013bc4:	20000a84 	.word	0x20000a84

08013bc8 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult>:
    setlist[pointerTableIndex].orig = function;
    pointerTableIndex++;
}

void SetPointerPlugin::postTestAction(UtestShell& /*test*/, TestResult& /*result*/)
{
 8013bc8:	b480      	push	{r7}
 8013bca:	b087      	sub	sp, #28
 8013bcc:	af00      	add	r7, sp, #0
 8013bce:	60f8      	str	r0, [r7, #12]
 8013bd0:	60b9      	str	r1, [r7, #8]
 8013bd2:	607a      	str	r2, [r7, #4]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 8013bd4:	4b0e      	ldr	r3, [pc, #56]	; (8013c10 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	3b01      	subs	r3, #1
 8013bda:	617b      	str	r3, [r7, #20]
 8013bdc:	697b      	ldr	r3, [r7, #20]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	db0d      	blt.n	8013bfe <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x36>
        *((void**) setlist[i].orig) = setlist[i].orig_value;
 8013be2:	4a0c      	ldr	r2, [pc, #48]	; (8013c14 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 8013be4:	697b      	ldr	r3, [r7, #20]
 8013be6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013bea:	490a      	ldr	r1, [pc, #40]	; (8013c14 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 8013bec:	697b      	ldr	r3, [r7, #20]
 8013bee:	00db      	lsls	r3, r3, #3
 8013bf0:	440b      	add	r3, r1
 8013bf2:	685b      	ldr	r3, [r3, #4]
 8013bf4:	6013      	str	r3, [r2, #0]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 8013bf6:	697b      	ldr	r3, [r7, #20]
 8013bf8:	3b01      	subs	r3, #1
 8013bfa:	617b      	str	r3, [r7, #20]
 8013bfc:	e7ee      	b.n	8013bdc <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x14>
    pointerTableIndex = 0;
 8013bfe:	4b04      	ldr	r3, [pc, #16]	; (8013c10 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 8013c00:	2200      	movs	r2, #0
 8013c02:	601a      	str	r2, [r3, #0]
}
 8013c04:	bf00      	nop
 8013c06:	371c      	adds	r7, #28
 8013c08:	46bd      	mov	sp, r7
 8013c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c0e:	4770      	bx	lr
 8013c10:	20000a84 	.word	0x20000a84
 8013c14:	20000a88 	.word	0x20000a88

08013c18 <_ZN14NullTestPluginC1Ev>:

//////// NullPlugin

NullTestPlugin::NullTestPlugin() :
 8013c18:	b580      	push	{r7, lr}
 8013c1a:	b082      	sub	sp, #8
 8013c1c:	af00      	add	r7, sp, #0
 8013c1e:	6078      	str	r0, [r7, #4]
    TestPlugin(NULLPTR)
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	2100      	movs	r1, #0
 8013c24:	4618      	mov	r0, r3
 8013c26:	f7ff fe59 	bl	80138dc <_ZN10TestPluginC1EPS_>
 8013c2a:	4a04      	ldr	r2, [pc, #16]	; (8013c3c <_ZN14NullTestPluginC1Ev+0x24>)
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	601a      	str	r2, [r3, #0]
{
}
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	4618      	mov	r0, r3
 8013c34:	3708      	adds	r7, #8
 8013c36:	46bd      	mov	sp, r7
 8013c38:	bd80      	pop	{r7, pc}
 8013c3a:	bf00      	nop
 8013c3c:	0802b738 	.word	0x0802b738

08013c40 <__tcf_0>:

NullTestPlugin* NullTestPlugin::instance()
{
    static NullTestPlugin _instance;
 8013c40:	b580      	push	{r7, lr}
 8013c42:	af00      	add	r7, sp, #0
 8013c44:	4801      	ldr	r0, [pc, #4]	; (8013c4c <__tcf_0+0xc>)
 8013c46:	f000 f849 	bl	8013cdc <_ZN14NullTestPluginD1Ev>
 8013c4a:	bd80      	pop	{r7, pc}
 8013c4c:	20000b88 	.word	0x20000b88

08013c50 <_ZN14NullTestPlugin8instanceEv>:
{
 8013c50:	b580      	push	{r7, lr}
 8013c52:	af00      	add	r7, sp, #0
    static NullTestPlugin _instance;
 8013c54:	4b12      	ldr	r3, [pc, #72]	; (8013ca0 <_ZN14NullTestPlugin8instanceEv+0x50>)
 8013c56:	781b      	ldrb	r3, [r3, #0]
 8013c58:	f3bf 8f5b 	dmb	ish
 8013c5c:	b2db      	uxtb	r3, r3
 8013c5e:	f003 0301 	and.w	r3, r3, #1
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	bf0c      	ite	eq
 8013c66:	2301      	moveq	r3, #1
 8013c68:	2300      	movne	r3, #0
 8013c6a:	b2db      	uxtb	r3, r3
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d013      	beq.n	8013c98 <_ZN14NullTestPlugin8instanceEv+0x48>
 8013c70:	480b      	ldr	r0, [pc, #44]	; (8013ca0 <_ZN14NullTestPlugin8instanceEv+0x50>)
 8013c72:	f00d ffd9 	bl	8021c28 <__cxa_guard_acquire>
 8013c76:	4603      	mov	r3, r0
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	bf14      	ite	ne
 8013c7c:	2301      	movne	r3, #1
 8013c7e:	2300      	moveq	r3, #0
 8013c80:	b2db      	uxtb	r3, r3
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d008      	beq.n	8013c98 <_ZN14NullTestPlugin8instanceEv+0x48>
 8013c86:	4807      	ldr	r0, [pc, #28]	; (8013ca4 <_ZN14NullTestPlugin8instanceEv+0x54>)
 8013c88:	f7ff ffc6 	bl	8013c18 <_ZN14NullTestPluginC1Ev>
 8013c8c:	4804      	ldr	r0, [pc, #16]	; (8013ca0 <_ZN14NullTestPlugin8instanceEv+0x50>)
 8013c8e:	f00d ffd7 	bl	8021c40 <__cxa_guard_release>
 8013c92:	4805      	ldr	r0, [pc, #20]	; (8013ca8 <_ZN14NullTestPlugin8instanceEv+0x58>)
 8013c94:	f00d fffb 	bl	8021c8e <atexit>
    return &_instance;
 8013c98:	4b02      	ldr	r3, [pc, #8]	; (8013ca4 <_ZN14NullTestPlugin8instanceEv+0x54>)
}
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	bd80      	pop	{r7, pc}
 8013c9e:	bf00      	nop
 8013ca0:	20000b9c 	.word	0x20000b9c
 8013ca4:	20000b88 	.word	0x20000b88
 8013ca8:	08013c41 	.word	0x08013c41

08013cac <_ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)
{
 8013cac:	b480      	push	{r7}
 8013cae:	b085      	sub	sp, #20
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	60f8      	str	r0, [r7, #12]
 8013cb4:	60b9      	str	r1, [r7, #8]
 8013cb6:	607a      	str	r2, [r7, #4]
}
 8013cb8:	bf00      	nop
 8013cba:	3714      	adds	r7, #20
 8013cbc:	46bd      	mov	sp, r7
 8013cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc2:	4770      	bx	lr

08013cc4 <_ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)
{
 8013cc4:	b480      	push	{r7}
 8013cc6:	b085      	sub	sp, #20
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	60f8      	str	r0, [r7, #12]
 8013ccc:	60b9      	str	r1, [r7, #8]
 8013cce:	607a      	str	r2, [r7, #4]
}
 8013cd0:	bf00      	nop
 8013cd2:	3714      	adds	r7, #20
 8013cd4:	46bd      	mov	sp, r7
 8013cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cda:	4770      	bx	lr

08013cdc <_ZN14NullTestPluginD1Ev>:

#define UT_PTR_SET(a, b) do { CppUTestStore( (void**)&a ); a = b; } while(0)

///////////// Null Plugin

class NullTestPlugin: public TestPlugin
 8013cdc:	b580      	push	{r7, lr}
 8013cde:	b082      	sub	sp, #8
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	6078      	str	r0, [r7, #4]
 8013ce4:	4a05      	ldr	r2, [pc, #20]	; (8013cfc <_ZN14NullTestPluginD1Ev+0x20>)
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	601a      	str	r2, [r3, #0]
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	4618      	mov	r0, r3
 8013cee:	f7ff fe13 	bl	8013918 <_ZN10TestPluginD1Ev>
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	4618      	mov	r0, r3
 8013cf6:	3708      	adds	r7, #8
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	bd80      	pop	{r7, pc}
 8013cfc:	0802b738 	.word	0x0802b738

08013d00 <_ZN14NullTestPluginD0Ev>:
 8013d00:	b580      	push	{r7, lr}
 8013d02:	b082      	sub	sp, #8
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	6078      	str	r0, [r7, #4]
 8013d08:	6878      	ldr	r0, [r7, #4]
 8013d0a:	f7ff ffe7 	bl	8013cdc <_ZN14NullTestPluginD1Ev>
 8013d0e:	2114      	movs	r1, #20
 8013d10:	6878      	ldr	r0, [r7, #4]
 8013d12:	f7f8 fd1b 	bl	800c74c <_ZdlPvj>
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	4618      	mov	r0, r3
 8013d1a:	3708      	adds	r7, #8
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	bd80      	pop	{r7, pc}

08013d20 <_ZN12TestRegistryC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestRegistry.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestRegistry::TestRegistry() :
 8013d20:	b580      	push	{r7, lr}
 8013d22:	b082      	sub	sp, #8
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	6078      	str	r0, [r7, #4]
    tests_(NULLPTR), nameFilters_(NULLPTR), groupFilters_(NULLPTR), firstPlugin_(NullTestPlugin::instance()), runInSeperateProcess_(false), currentRepetition_(0), runIgnored_(false)
 8013d28:	4a0f      	ldr	r2, [pc, #60]	; (8013d68 <_ZN12TestRegistryC1Ev+0x48>)
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	601a      	str	r2, [r3, #0]
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	2200      	movs	r2, #0
 8013d32:	605a      	str	r2, [r3, #4]
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	2200      	movs	r2, #0
 8013d38:	609a      	str	r2, [r3, #8]
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	2200      	movs	r2, #0
 8013d3e:	60da      	str	r2, [r3, #12]
 8013d40:	f7ff ff86 	bl	8013c50 <_ZN14NullTestPlugin8instanceEv>
 8013d44:	4602      	mov	r2, r0
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	611a      	str	r2, [r3, #16]
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	2200      	movs	r2, #0
 8013d4e:	751a      	strb	r2, [r3, #20]
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	2200      	movs	r2, #0
 8013d54:	619a      	str	r2, [r3, #24]
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	2200      	movs	r2, #0
 8013d5a:	771a      	strb	r2, [r3, #28]
{
}
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	4618      	mov	r0, r3
 8013d60:	3708      	adds	r7, #8
 8013d62:	46bd      	mov	sp, r7
 8013d64:	bd80      	pop	{r7, pc}
 8013d66:	bf00      	nop
 8013d68:	0802b804 	.word	0x0802b804

08013d6c <_ZN12TestRegistryD1Ev>:

TestRegistry::~TestRegistry()
 8013d6c:	b480      	push	{r7}
 8013d6e:	b083      	sub	sp, #12
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	6078      	str	r0, [r7, #4]
 8013d74:	4a04      	ldr	r2, [pc, #16]	; (8013d88 <_ZN12TestRegistryD1Ev+0x1c>)
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	601a      	str	r2, [r3, #0]
{
}
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	370c      	adds	r7, #12
 8013d80:	46bd      	mov	sp, r7
 8013d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d86:	4770      	bx	lr
 8013d88:	0802b804 	.word	0x0802b804

08013d8c <_ZN12TestRegistryD0Ev>:
TestRegistry::~TestRegistry()
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	b082      	sub	sp, #8
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	6078      	str	r0, [r7, #4]
}
 8013d94:	6878      	ldr	r0, [r7, #4]
 8013d96:	f7ff ffe9 	bl	8013d6c <_ZN12TestRegistryD1Ev>
 8013d9a:	2120      	movs	r1, #32
 8013d9c:	6878      	ldr	r0, [r7, #4]
 8013d9e:	f7f8 fcd5 	bl	800c74c <_ZdlPvj>
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	4618      	mov	r0, r3
 8013da6:	3708      	adds	r7, #8
 8013da8:	46bd      	mov	sp, r7
 8013daa:	bd80      	pop	{r7, pc}

08013dac <_ZN12TestRegistry7addTestEP10UtestShell>:

void TestRegistry::addTest(UtestShell *test)
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b082      	sub	sp, #8
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
 8013db4:	6039      	str	r1, [r7, #0]
    tests_ = test->addTest(tests_);
 8013db6:	683b      	ldr	r3, [r7, #0]
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	3308      	adds	r3, #8
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	687a      	ldr	r2, [r7, #4]
 8013dc0:	6852      	ldr	r2, [r2, #4]
 8013dc2:	4611      	mov	r1, r2
 8013dc4:	6838      	ldr	r0, [r7, #0]
 8013dc6:	4798      	blx	r3
 8013dc8:	4602      	mov	r2, r0
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	605a      	str	r2, [r3, #4]
}
 8013dce:	bf00      	nop
 8013dd0:	3708      	adds	r7, #8
 8013dd2:	46bd      	mov	sp, r7
 8013dd4:	bd80      	pop	{r7, pc}

08013dd6 <_ZN12TestRegistry11runAllTestsER10TestResult>:

void TestRegistry::runAllTests(TestResult& result)
{
 8013dd6:	b580      	push	{r7, lr}
 8013dd8:	b084      	sub	sp, #16
 8013dda:	af00      	add	r7, sp, #0
 8013ddc:	6078      	str	r0, [r7, #4]
 8013dde:	6039      	str	r1, [r7, #0]
    bool groupStart = true;
 8013de0:	2301      	movs	r3, #1
 8013de2:	73fb      	strb	r3, [r7, #15]

    result.testsStarted();
 8013de4:	683b      	ldr	r3, [r7, #0]
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	3308      	adds	r3, #8
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	6838      	ldr	r0, [r7, #0]
 8013dee:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	685b      	ldr	r3, [r3, #4]
 8013df4:	60bb      	str	r3, [r7, #8]
 8013df6:	68bb      	ldr	r3, [r7, #8]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d05c      	beq.n	8013eb6 <_ZN12TestRegistry11runAllTestsER10TestResult+0xe0>
        if (runInSeperateProcess_) test->setRunInSeperateProcess();
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	7d1b      	ldrb	r3, [r3, #20]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d005      	beq.n	8013e10 <_ZN12TestRegistry11runAllTestsER10TestResult+0x3a>
 8013e04:	68bb      	ldr	r3, [r7, #8]
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	3380      	adds	r3, #128	; 0x80
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	68b8      	ldr	r0, [r7, #8]
 8013e0e:	4798      	blx	r3
        if (runIgnored_) test->setRunIgnored();
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	7f1b      	ldrb	r3, [r3, #28]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d005      	beq.n	8013e24 <_ZN12TestRegistry11runAllTestsER10TestResult+0x4e>
 8013e18:	68bb      	ldr	r3, [r7, #8]
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	3384      	adds	r3, #132	; 0x84
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	68b8      	ldr	r0, [r7, #8]
 8013e22:	4798      	blx	r3

        if (groupStart) {
 8013e24:	7bfb      	ldrb	r3, [r7, #15]
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d008      	beq.n	8013e3c <_ZN12TestRegistry11runAllTestsER10TestResult+0x66>
            result.currentGroupStarted(test);
 8013e2a:	683b      	ldr	r3, [r7, #0]
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	3310      	adds	r3, #16
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	68b9      	ldr	r1, [r7, #8]
 8013e34:	6838      	ldr	r0, [r7, #0]
 8013e36:	4798      	blx	r3
            groupStart = false;
 8013e38:	2300      	movs	r3, #0
 8013e3a:	73fb      	strb	r3, [r7, #15]
        }

        result.countTest();
 8013e3c:	683b      	ldr	r3, [r7, #0]
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	3320      	adds	r3, #32
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	6838      	ldr	r0, [r7, #0]
 8013e46:	4798      	blx	r3
        if (testShouldRun(test, result)) {
 8013e48:	683a      	ldr	r2, [r7, #0]
 8013e4a:	68b9      	ldr	r1, [r7, #8]
 8013e4c:	6878      	ldr	r0, [r7, #4]
 8013e4e:	f000 fb79 	bl	8014544 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 8013e52:	4603      	mov	r3, r0
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d016      	beq.n	8013e86 <_ZN12TestRegistry11runAllTestsER10TestResult+0xb0>
            result.currentTestStarted(test);
 8013e58:	683b      	ldr	r3, [r7, #0]
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	3318      	adds	r3, #24
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	68b9      	ldr	r1, [r7, #8]
 8013e62:	6838      	ldr	r0, [r7, #0]
 8013e64:	4798      	blx	r3
            test->runOneTest(firstPlugin_, result);
 8013e66:	68bb      	ldr	r3, [r7, #8]
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	3390      	adds	r3, #144	; 0x90
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	687a      	ldr	r2, [r7, #4]
 8013e70:	6911      	ldr	r1, [r2, #16]
 8013e72:	683a      	ldr	r2, [r7, #0]
 8013e74:	68b8      	ldr	r0, [r7, #8]
 8013e76:	4798      	blx	r3
            result.currentTestEnded(test);
 8013e78:	683b      	ldr	r3, [r7, #0]
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	331c      	adds	r3, #28
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	68b9      	ldr	r1, [r7, #8]
 8013e82:	6838      	ldr	r0, [r7, #0]
 8013e84:	4798      	blx	r3
        }

        if (endOfGroup(test)) {
 8013e86:	68b9      	ldr	r1, [r7, #8]
 8013e88:	6878      	ldr	r0, [r7, #4]
 8013e8a:	f000 fa5b 	bl	8014344 <_ZN12TestRegistry10endOfGroupEP10UtestShell>
 8013e8e:	4603      	mov	r3, r0
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d008      	beq.n	8013ea6 <_ZN12TestRegistry11runAllTestsER10TestResult+0xd0>
            groupStart = true;
 8013e94:	2301      	movs	r3, #1
 8013e96:	73fb      	strb	r3, [r7, #15]
            result.currentGroupEnded(test);
 8013e98:	683b      	ldr	r3, [r7, #0]
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	3314      	adds	r3, #20
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	68b9      	ldr	r1, [r7, #8]
 8013ea2:	6838      	ldr	r0, [r7, #0]
 8013ea4:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8013ea6:	68bb      	ldr	r3, [r7, #8]
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	330c      	adds	r3, #12
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	68b8      	ldr	r0, [r7, #8]
 8013eb0:	4798      	blx	r3
 8013eb2:	60b8      	str	r0, [r7, #8]
 8013eb4:	e79f      	b.n	8013df6 <_ZN12TestRegistry11runAllTestsER10TestResult+0x20>
        }
    }
    result.testsEnded();
 8013eb6:	683b      	ldr	r3, [r7, #0]
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	330c      	adds	r3, #12
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	6838      	ldr	r0, [r7, #0]
 8013ec0:	4798      	blx	r3
    currentRepetition_++;
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	699b      	ldr	r3, [r3, #24]
 8013ec6:	1c5a      	adds	r2, r3, #1
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	619a      	str	r2, [r3, #24]
}
 8013ecc:	bf00      	nop
 8013ece:	3710      	adds	r7, #16
 8013ed0:	46bd      	mov	sp, r7
 8013ed2:	bd80      	pop	{r7, pc}

08013ed4 <_ZN12TestRegistry18listTestGroupNamesER10TestResult>:

void TestRegistry::listTestGroupNames(TestResult& result)
{
 8013ed4:	b590      	push	{r4, r7, lr}
 8013ed6:	b08f      	sub	sp, #60	; 0x3c
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]
 8013edc:	6039      	str	r1, [r7, #0]
    SimpleString groupList;
 8013ede:	f107 0314 	add.w	r3, r7, #20
 8013ee2:	4953      	ldr	r1, [pc, #332]	; (8014030 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	f7fa ffe0 	bl	800eeaa <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	685b      	ldr	r3, [r3, #4]
 8013eee:	637b      	str	r3, [r7, #52]	; 0x34
 8013ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d04d      	beq.n	8013f92 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xbe>
        SimpleString gname;
 8013ef6:	f107 030c 	add.w	r3, r7, #12
 8013efa:	494d      	ldr	r1, [pc, #308]	; (8014030 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 8013efc:	4618      	mov	r0, r3
 8013efe:	f7fa ffd4 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
        gname += "#";
 8013f02:	f107 030c 	add.w	r3, r7, #12
 8013f06:	494b      	ldr	r1, [pc, #300]	; (8014034 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 8013f08:	4618      	mov	r0, r3
 8013f0a:	f7fb fc15 	bl	800f738 <_ZN12SimpleStringpLEPKc>
        gname += test->getGroup();
 8013f0e:	f107 031c 	add.w	r3, r7, #28
 8013f12:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013f14:	4618      	mov	r0, r3
 8013f16:	f001 f9d2 	bl	80152be <_ZNK10UtestShell8getGroupEv>
 8013f1a:	f107 021c 	add.w	r2, r7, #28
 8013f1e:	f107 030c 	add.w	r3, r7, #12
 8013f22:	4611      	mov	r1, r2
 8013f24:	4618      	mov	r0, r3
 8013f26:	f7fb fbf5 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 8013f2a:	f107 031c 	add.w	r3, r7, #28
 8013f2e:	4618      	mov	r0, r3
 8013f30:	f7fb fb73 	bl	800f61a <_ZN12SimpleStringD1Ev>
        gname += "#";
 8013f34:	f107 030c 	add.w	r3, r7, #12
 8013f38:	493e      	ldr	r1, [pc, #248]	; (8014034 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	f7fb fbfc 	bl	800f738 <_ZN12SimpleStringpLEPKc>

        if (!groupList.contains(gname)) {
 8013f40:	f107 020c 	add.w	r2, r7, #12
 8013f44:	f107 0314 	add.w	r3, r7, #20
 8013f48:	4611      	mov	r1, r2
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	f7fb f82b 	bl	800efa6 <_ZNK12SimpleString8containsERKS_>
 8013f50:	4603      	mov	r3, r0
 8013f52:	f083 0301 	eor.w	r3, r3, #1
 8013f56:	b2db      	uxtb	r3, r3
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d00d      	beq.n	8013f78 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xa4>
            groupList += gname;
 8013f5c:	f107 020c 	add.w	r2, r7, #12
 8013f60:	f107 0314 	add.w	r3, r7, #20
 8013f64:	4611      	mov	r1, r2
 8013f66:	4618      	mov	r0, r3
 8013f68:	f7fb fbd4 	bl	800f714 <_ZN12SimpleStringpLERKS_>
            groupList += " ";
 8013f6c:	f107 0314 	add.w	r3, r7, #20
 8013f70:	4931      	ldr	r1, [pc, #196]	; (8014038 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 8013f72:	4618      	mov	r0, r3
 8013f74:	f7fb fbe0 	bl	800f738 <_ZN12SimpleStringpLEPKc>
        SimpleString gname;
 8013f78:	f107 030c 	add.w	r3, r7, #12
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	f7fb fb4c 	bl	800f61a <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8013f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	330c      	adds	r3, #12
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013f8c:	4798      	blx	r3
 8013f8e:	6378      	str	r0, [r7, #52]	; 0x34
 8013f90:	e7ae      	b.n	8013ef0 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x1c>
        }
    }

    groupList.replace("#", "");
 8013f92:	f107 0314 	add.w	r3, r7, #20
 8013f96:	4a26      	ldr	r2, [pc, #152]	; (8014030 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 8013f98:	4926      	ldr	r1, [pc, #152]	; (8014034 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	f7fb f99a 	bl	800f2d4 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupList.endsWith(" "))
 8013fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013fa4:	4924      	ldr	r1, [pc, #144]	; (8014038 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 8013fa6:	4618      	mov	r0, r3
 8013fa8:	f7fa ff7f 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8013fac:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013fb0:	f107 0314 	add.w	r3, r7, #20
 8013fb4:	4611      	mov	r1, r2
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	f7fb f874 	bl	800f0a4 <_ZNK12SimpleString8endsWithERKS_>
 8013fbc:	4603      	mov	r3, r0
 8013fbe:	461c      	mov	r4, r3
 8013fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	f7fb fb28 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8013fca:	2c00      	cmp	r4, #0
 8013fcc:	d01a      	beq.n	8014004 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x130>
        groupList = groupList.subString(0, groupList.size() - 1);
 8013fce:	f107 0314 	add.w	r3, r7, #20
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	f7fb fb00 	bl	800f5d8 <_ZNK12SimpleString4sizeEv>
 8013fd8:	4603      	mov	r3, r0
 8013fda:	3b01      	subs	r3, #1
 8013fdc:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8013fe0:	f107 0114 	add.w	r1, r7, #20
 8013fe4:	2200      	movs	r2, #0
 8013fe6:	f7fb fc21 	bl	800f82c <_ZNK12SimpleString9subStringEjj>
 8013fea:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8013fee:	f107 0314 	add.w	r3, r7, #20
 8013ff2:	4611      	mov	r1, r2
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	f7fa ffc4 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 8013ffa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013ffe:	4618      	mov	r0, r3
 8014000:	f7fb fb0b 	bl	800f61a <_ZN12SimpleStringD1Ev>
    result.print(groupList.asCharString());
 8014004:	683b      	ldr	r3, [r7, #0]
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	3338      	adds	r3, #56	; 0x38
 801400a:	681c      	ldr	r4, [r3, #0]
 801400c:	f107 0314 	add.w	r3, r7, #20
 8014010:	4618      	mov	r0, r3
 8014012:	f7fb fad5 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 8014016:	4603      	mov	r3, r0
 8014018:	4619      	mov	r1, r3
 801401a:	6838      	ldr	r0, [r7, #0]
 801401c:	47a0      	blx	r4
    SimpleString groupList;
 801401e:	f107 0314 	add.w	r3, r7, #20
 8014022:	4618      	mov	r0, r3
 8014024:	f7fb faf9 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 8014028:	bf00      	nop
 801402a:	373c      	adds	r7, #60	; 0x3c
 801402c:	46bd      	mov	sp, r7
 801402e:	bd90      	pop	{r4, r7, pc}
 8014030:	08027a5c 	.word	0x08027a5c
 8014034:	08027a60 	.word	0x08027a60
 8014038:	08027a64 	.word	0x08027a64

0801403c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult>:

void TestRegistry::listTestGroupAndCaseNames(TestResult& result)
{
 801403c:	b590      	push	{r4, r7, lr}
 801403e:	b091      	sub	sp, #68	; 0x44
 8014040:	af00      	add	r7, sp, #0
 8014042:	6078      	str	r0, [r7, #4]
 8014044:	6039      	str	r1, [r7, #0]
    SimpleString groupAndNameList;
 8014046:	f107 0314 	add.w	r3, r7, #20
 801404a:	4964      	ldr	r1, [pc, #400]	; (80141dc <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 801404c:	4618      	mov	r0, r3
 801404e:	f7fa ff2c 	bl	800eeaa <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	685b      	ldr	r3, [r3, #4]
 8014056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801405a:	2b00      	cmp	r3, #0
 801405c:	d06e      	beq.n	801413c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x100>
        if (testShouldRun(test, result)) {
 801405e:	683a      	ldr	r2, [r7, #0]
 8014060:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014062:	6878      	ldr	r0, [r7, #4]
 8014064:	f000 fa6e 	bl	8014544 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 8014068:	4603      	mov	r3, r0
 801406a:	2b00      	cmp	r3, #0
 801406c:	d05e      	beq.n	801412c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xf0>
            SimpleString groupAndName;
 801406e:	f107 030c 	add.w	r3, r7, #12
 8014072:	495a      	ldr	r1, [pc, #360]	; (80141dc <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8014074:	4618      	mov	r0, r3
 8014076:	f7fa ff18 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
            groupAndName += "#";
 801407a:	f107 030c 	add.w	r3, r7, #12
 801407e:	4958      	ldr	r1, [pc, #352]	; (80141e0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8014080:	4618      	mov	r0, r3
 8014082:	f7fb fb59 	bl	800f738 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getGroup();
 8014086:	f107 031c 	add.w	r3, r7, #28
 801408a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801408c:	4618      	mov	r0, r3
 801408e:	f001 f916 	bl	80152be <_ZNK10UtestShell8getGroupEv>
 8014092:	f107 021c 	add.w	r2, r7, #28
 8014096:	f107 030c 	add.w	r3, r7, #12
 801409a:	4611      	mov	r1, r2
 801409c:	4618      	mov	r0, r3
 801409e:	f7fb fb39 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 80140a2:	f107 031c 	add.w	r3, r7, #28
 80140a6:	4618      	mov	r0, r3
 80140a8:	f7fb fab7 	bl	800f61a <_ZN12SimpleStringD1Ev>
            groupAndName += ".";
 80140ac:	f107 030c 	add.w	r3, r7, #12
 80140b0:	494c      	ldr	r1, [pc, #304]	; (80141e4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a8>)
 80140b2:	4618      	mov	r0, r3
 80140b4:	f7fb fb40 	bl	800f738 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getName();
 80140b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80140bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80140be:	4618      	mov	r0, r3
 80140c0:	f001 f8ee 	bl	80152a0 <_ZNK10UtestShell7getNameEv>
 80140c4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80140c8:	f107 030c 	add.w	r3, r7, #12
 80140cc:	4611      	mov	r1, r2
 80140ce:	4618      	mov	r0, r3
 80140d0:	f7fb fb20 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 80140d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80140d8:	4618      	mov	r0, r3
 80140da:	f7fb fa9e 	bl	800f61a <_ZN12SimpleStringD1Ev>
            groupAndName += "#";
 80140de:	f107 030c 	add.w	r3, r7, #12
 80140e2:	493f      	ldr	r1, [pc, #252]	; (80141e0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 80140e4:	4618      	mov	r0, r3
 80140e6:	f7fb fb27 	bl	800f738 <_ZN12SimpleStringpLEPKc>

            if (!groupAndNameList.contains(groupAndName)) {
 80140ea:	f107 020c 	add.w	r2, r7, #12
 80140ee:	f107 0314 	add.w	r3, r7, #20
 80140f2:	4611      	mov	r1, r2
 80140f4:	4618      	mov	r0, r3
 80140f6:	f7fa ff56 	bl	800efa6 <_ZNK12SimpleString8containsERKS_>
 80140fa:	4603      	mov	r3, r0
 80140fc:	f083 0301 	eor.w	r3, r3, #1
 8014100:	b2db      	uxtb	r3, r3
 8014102:	2b00      	cmp	r3, #0
 8014104:	d00d      	beq.n	8014122 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xe6>
                groupAndNameList += groupAndName;
 8014106:	f107 020c 	add.w	r2, r7, #12
 801410a:	f107 0314 	add.w	r3, r7, #20
 801410e:	4611      	mov	r1, r2
 8014110:	4618      	mov	r0, r3
 8014112:	f7fb faff 	bl	800f714 <_ZN12SimpleStringpLERKS_>
                groupAndNameList += " ";
 8014116:	f107 0314 	add.w	r3, r7, #20
 801411a:	4933      	ldr	r1, [pc, #204]	; (80141e8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 801411c:	4618      	mov	r0, r3
 801411e:	f7fb fb0b 	bl	800f738 <_ZN12SimpleStringpLEPKc>
            SimpleString groupAndName;
 8014122:	f107 030c 	add.w	r3, r7, #12
 8014126:	4618      	mov	r0, r3
 8014128:	f7fb fa77 	bl	800f61a <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 801412c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	330c      	adds	r3, #12
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014136:	4798      	blx	r3
 8014138:	63f8      	str	r0, [r7, #60]	; 0x3c
 801413a:	e78d      	b.n	8014058 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1c>
            }
        }
    }

    groupAndNameList.replace("#", "");
 801413c:	f107 0314 	add.w	r3, r7, #20
 8014140:	4a26      	ldr	r2, [pc, #152]	; (80141dc <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8014142:	4927      	ldr	r1, [pc, #156]	; (80141e0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8014144:	4618      	mov	r0, r3
 8014146:	f7fb f8c5 	bl	800f2d4 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupAndNameList.endsWith(" "))
 801414a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801414e:	4926      	ldr	r1, [pc, #152]	; (80141e8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 8014150:	4618      	mov	r0, r3
 8014152:	f7fa feaa 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8014156:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801415a:	f107 0314 	add.w	r3, r7, #20
 801415e:	4611      	mov	r1, r2
 8014160:	4618      	mov	r0, r3
 8014162:	f7fa ff9f 	bl	800f0a4 <_ZNK12SimpleString8endsWithERKS_>
 8014166:	4603      	mov	r3, r0
 8014168:	461c      	mov	r4, r3
 801416a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801416e:	4618      	mov	r0, r3
 8014170:	f7fb fa53 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8014174:	2c00      	cmp	r4, #0
 8014176:	d01a      	beq.n	80141ae <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x172>
        groupAndNameList = groupAndNameList.subString(0, groupAndNameList.size() - 1);
 8014178:	f107 0314 	add.w	r3, r7, #20
 801417c:	4618      	mov	r0, r3
 801417e:	f7fb fa2b 	bl	800f5d8 <_ZNK12SimpleString4sizeEv>
 8014182:	4603      	mov	r3, r0
 8014184:	3b01      	subs	r3, #1
 8014186:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801418a:	f107 0114 	add.w	r1, r7, #20
 801418e:	2200      	movs	r2, #0
 8014190:	f7fb fb4c 	bl	800f82c <_ZNK12SimpleString9subStringEjj>
 8014194:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8014198:	f107 0314 	add.w	r3, r7, #20
 801419c:	4611      	mov	r1, r2
 801419e:	4618      	mov	r0, r3
 80141a0:	f7fa feef 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 80141a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80141a8:	4618      	mov	r0, r3
 80141aa:	f7fb fa36 	bl	800f61a <_ZN12SimpleStringD1Ev>
    result.print(groupAndNameList.asCharString());
 80141ae:	683b      	ldr	r3, [r7, #0]
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	3338      	adds	r3, #56	; 0x38
 80141b4:	681c      	ldr	r4, [r3, #0]
 80141b6:	f107 0314 	add.w	r3, r7, #20
 80141ba:	4618      	mov	r0, r3
 80141bc:	f7fb fa00 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 80141c0:	4603      	mov	r3, r0
 80141c2:	4619      	mov	r1, r3
 80141c4:	6838      	ldr	r0, [r7, #0]
 80141c6:	47a0      	blx	r4
    SimpleString groupAndNameList;
 80141c8:	f107 0314 	add.w	r3, r7, #20
 80141cc:	4618      	mov	r0, r3
 80141ce:	f7fb fa24 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 80141d2:	bf00      	nop
 80141d4:	3744      	adds	r7, #68	; 0x44
 80141d6:	46bd      	mov	sp, r7
 80141d8:	bd90      	pop	{r4, r7, pc}
 80141da:	bf00      	nop
 80141dc:	08027a5c 	.word	0x08027a5c
 80141e0:	08027a60 	.word	0x08027a60
 80141e4:	08027a68 	.word	0x08027a68
 80141e8:	08027a64 	.word	0x08027a64

080141ec <_ZN12TestRegistry17listTestLocationsER10TestResult>:

void TestRegistry::listTestLocations(TestResult& result)
{
 80141ec:	b590      	push	{r4, r7, lr}
 80141ee:	b091      	sub	sp, #68	; 0x44
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	6078      	str	r0, [r7, #4]
 80141f4:	6039      	str	r1, [r7, #0]
    SimpleString testLocations;
 80141f6:	f107 0314 	add.w	r3, r7, #20
 80141fa:	494f      	ldr	r1, [pc, #316]	; (8014338 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 80141fc:	4618      	mov	r0, r3
 80141fe:	f7fa fe54 	bl	800eeaa <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	685b      	ldr	r3, [r3, #4]
 8014206:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801420a:	2b00      	cmp	r3, #0
 801420c:	d07d      	beq.n	801430a <_ZN12TestRegistry17listTestLocationsER10TestResult+0x11e>
            SimpleString testLocation;
 801420e:	f107 030c 	add.w	r3, r7, #12
 8014212:	4949      	ldr	r1, [pc, #292]	; (8014338 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 8014214:	4618      	mov	r0, r3
 8014216:	f7fa fe48 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
            testLocation += test->getGroup();
 801421a:	f107 031c 	add.w	r3, r7, #28
 801421e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014220:	4618      	mov	r0, r3
 8014222:	f001 f84c 	bl	80152be <_ZNK10UtestShell8getGroupEv>
 8014226:	f107 021c 	add.w	r2, r7, #28
 801422a:	f107 030c 	add.w	r3, r7, #12
 801422e:	4611      	mov	r1, r2
 8014230:	4618      	mov	r0, r3
 8014232:	f7fb fa6f 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 8014236:	f107 031c 	add.w	r3, r7, #28
 801423a:	4618      	mov	r0, r3
 801423c:	f7fb f9ed 	bl	800f61a <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8014240:	f107 030c 	add.w	r3, r7, #12
 8014244:	493d      	ldr	r1, [pc, #244]	; (801433c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 8014246:	4618      	mov	r0, r3
 8014248:	f7fb fa76 	bl	800f738 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getName();
 801424c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014250:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014252:	4618      	mov	r0, r3
 8014254:	f001 f824 	bl	80152a0 <_ZNK10UtestShell7getNameEv>
 8014258:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801425c:	f107 030c 	add.w	r3, r7, #12
 8014260:	4611      	mov	r1, r2
 8014262:	4618      	mov	r0, r3
 8014264:	f7fb fa56 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 8014268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801426c:	4618      	mov	r0, r3
 801426e:	f7fb f9d4 	bl	800f61a <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8014272:	f107 030c 	add.w	r3, r7, #12
 8014276:	4931      	ldr	r1, [pc, #196]	; (801433c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 8014278:	4618      	mov	r0, r3
 801427a:	f7fb fa5d 	bl	800f738 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getFile();
 801427e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014282:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014284:	4618      	mov	r0, r3
 8014286:	f001 f8dc 	bl	8015442 <_ZNK10UtestShell7getFileEv>
 801428a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801428e:	f107 030c 	add.w	r3, r7, #12
 8014292:	4611      	mov	r1, r2
 8014294:	4618      	mov	r0, r3
 8014296:	f7fb fa3d 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801429a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801429e:	4618      	mov	r0, r3
 80142a0:	f7fb f9bb 	bl	800f61a <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 80142a4:	f107 030c 	add.w	r3, r7, #12
 80142a8:	4924      	ldr	r1, [pc, #144]	; (801433c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 80142aa:	4618      	mov	r0, r3
 80142ac:	f7fb fa44 	bl	800f738 <_ZN12SimpleStringpLEPKc>
            testLocation += StringFromFormat("%d\n",(int) test->getLineNumber());
 80142b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80142b2:	f001 f8d5 	bl	8015460 <_ZNK10UtestShell13getLineNumberEv>
 80142b6:	4603      	mov	r3, r0
 80142b8:	461a      	mov	r2, r3
 80142ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80142be:	4920      	ldr	r1, [pc, #128]	; (8014340 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x154>)
 80142c0:	4618      	mov	r0, r3
 80142c2:	f7fb feb1 	bl	8010028 <_Z16StringFromFormatPKcz>
 80142c6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80142ca:	f107 030c 	add.w	r3, r7, #12
 80142ce:	4611      	mov	r1, r2
 80142d0:	4618      	mov	r0, r3
 80142d2:	f7fb fa1f 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 80142d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80142da:	4618      	mov	r0, r3
 80142dc:	f7fb f99d 	bl	800f61a <_ZN12SimpleStringD1Ev>

            testLocations += testLocation;
 80142e0:	f107 020c 	add.w	r2, r7, #12
 80142e4:	f107 0314 	add.w	r3, r7, #20
 80142e8:	4611      	mov	r1, r2
 80142ea:	4618      	mov	r0, r3
 80142ec:	f7fb fa12 	bl	800f714 <_ZN12SimpleStringpLERKS_>
            SimpleString testLocation;
 80142f0:	f107 030c 	add.w	r3, r7, #12
 80142f4:	4618      	mov	r0, r3
 80142f6:	f7fb f990 	bl	800f61a <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80142fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	330c      	adds	r3, #12
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014304:	4798      	blx	r3
 8014306:	63f8      	str	r0, [r7, #60]	; 0x3c
 8014308:	e77e      	b.n	8014208 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x1c>
    }

    result.print(testLocations.asCharString());
 801430a:	683b      	ldr	r3, [r7, #0]
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	3338      	adds	r3, #56	; 0x38
 8014310:	681c      	ldr	r4, [r3, #0]
 8014312:	f107 0314 	add.w	r3, r7, #20
 8014316:	4618      	mov	r0, r3
 8014318:	f7fb f952 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 801431c:	4603      	mov	r3, r0
 801431e:	4619      	mov	r1, r3
 8014320:	6838      	ldr	r0, [r7, #0]
 8014322:	47a0      	blx	r4
    SimpleString testLocations;
 8014324:	f107 0314 	add.w	r3, r7, #20
 8014328:	4618      	mov	r0, r3
 801432a:	f7fb f976 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 801432e:	bf00      	nop
 8014330:	3744      	adds	r7, #68	; 0x44
 8014332:	46bd      	mov	sp, r7
 8014334:	bd90      	pop	{r4, r7, pc}
 8014336:	bf00      	nop
 8014338:	08027a5c 	.word	0x08027a5c
 801433c:	08027a68 	.word	0x08027a68
 8014340:	08027a6c 	.word	0x08027a6c

08014344 <_ZN12TestRegistry10endOfGroupEP10UtestShell>:

bool TestRegistry::endOfGroup(UtestShell* test)
{
 8014344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014346:	b087      	sub	sp, #28
 8014348:	af00      	add	r7, sp, #0
 801434a:	6078      	str	r0, [r7, #4]
 801434c:	6039      	str	r1, [r7, #0]
    return (!test || !test->getNext() || test->getGroup() != test->getNext()->getGroup());
 801434e:	2400      	movs	r4, #0
 8014350:	2500      	movs	r5, #0
 8014352:	683b      	ldr	r3, [r7, #0]
 8014354:	2b00      	cmp	r3, #0
 8014356:	d028      	beq.n	80143aa <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 8014358:	683b      	ldr	r3, [r7, #0]
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	330c      	adds	r3, #12
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	6838      	ldr	r0, [r7, #0]
 8014362:	4798      	blx	r3
 8014364:	4603      	mov	r3, r0
 8014366:	2b00      	cmp	r3, #0
 8014368:	d01f      	beq.n	80143aa <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 801436a:	f107 0308 	add.w	r3, r7, #8
 801436e:	6839      	ldr	r1, [r7, #0]
 8014370:	4618      	mov	r0, r3
 8014372:	f000 ffa4 	bl	80152be <_ZNK10UtestShell8getGroupEv>
 8014376:	2401      	movs	r4, #1
 8014378:	683b      	ldr	r3, [r7, #0]
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	330c      	adds	r3, #12
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	6838      	ldr	r0, [r7, #0]
 8014382:	4798      	blx	r3
 8014384:	4602      	mov	r2, r0
 8014386:	f107 0310 	add.w	r3, r7, #16
 801438a:	4611      	mov	r1, r2
 801438c:	4618      	mov	r0, r3
 801438e:	f000 ff96 	bl	80152be <_ZNK10UtestShell8getGroupEv>
 8014392:	2501      	movs	r5, #1
 8014394:	f107 0210 	add.w	r2, r7, #16
 8014398:	f107 0308 	add.w	r3, r7, #8
 801439c:	4611      	mov	r1, r2
 801439e:	4618      	mov	r0, r3
 80143a0:	f7fb f98c 	bl	800f6bc <_ZneRK12SimpleStringS1_>
 80143a4:	4603      	mov	r3, r0
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d001      	beq.n	80143ae <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6a>
 80143aa:	2601      	movs	r6, #1
 80143ac:	e000      	b.n	80143b0 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6c>
 80143ae:	2600      	movs	r6, #0
 80143b0:	2d00      	cmp	r5, #0
 80143b2:	d004      	beq.n	80143be <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x7a>
 80143b4:	f107 0310 	add.w	r3, r7, #16
 80143b8:	4618      	mov	r0, r3
 80143ba:	f7fb f92e 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80143be:	2c00      	cmp	r4, #0
 80143c0:	d004      	beq.n	80143cc <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x88>
 80143c2:	f107 0308 	add.w	r3, r7, #8
 80143c6:	4618      	mov	r0, r3
 80143c8:	f7fb f927 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80143cc:	4633      	mov	r3, r6
}
 80143ce:	4618      	mov	r0, r3
 80143d0:	371c      	adds	r7, #28
 80143d2:	46bd      	mov	sp, r7
 80143d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080143d6 <_ZN12TestRegistry10countTestsEv>:

size_t TestRegistry::countTests()
{
 80143d6:	b580      	push	{r7, lr}
 80143d8:	b082      	sub	sp, #8
 80143da:	af00      	add	r7, sp, #0
 80143dc:	6078      	str	r0, [r7, #4]
    return tests_ ? tests_->countTests() : 0;
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	685b      	ldr	r3, [r3, #4]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d00a      	beq.n	80143fc <_ZN12TestRegistry10countTestsEv+0x26>
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	685a      	ldr	r2, [r3, #4]
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	685b      	ldr	r3, [r3, #4]
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	3310      	adds	r3, #16
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	4610      	mov	r0, r2
 80143f6:	4798      	blx	r3
 80143f8:	4603      	mov	r3, r0
 80143fa:	e000      	b.n	80143fe <_ZN12TestRegistry10countTestsEv+0x28>
 80143fc:	2300      	movs	r3, #0
}
 80143fe:	4618      	mov	r0, r3
 8014400:	3708      	adds	r7, #8
 8014402:	46bd      	mov	sp, r7
 8014404:	bd80      	pop	{r7, pc}
	...

08014408 <__tcf_0>:

TestRegistry* TestRegistry::currentRegistry_ = NULLPTR;

TestRegistry* TestRegistry::getCurrentRegistry()
{
    static TestRegistry registry;
 8014408:	b580      	push	{r7, lr}
 801440a:	af00      	add	r7, sp, #0
 801440c:	4801      	ldr	r0, [pc, #4]	; (8014414 <__tcf_0+0xc>)
 801440e:	f7ff fcad 	bl	8013d6c <_ZN12TestRegistryD1Ev>
 8014412:	bd80      	pop	{r7, pc}
 8014414:	20000ba4 	.word	0x20000ba4

08014418 <_ZN12TestRegistry18getCurrentRegistryEv>:
{
 8014418:	b580      	push	{r7, lr}
 801441a:	af00      	add	r7, sp, #0
    static TestRegistry registry;
 801441c:	4b15      	ldr	r3, [pc, #84]	; (8014474 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 801441e:	781b      	ldrb	r3, [r3, #0]
 8014420:	f3bf 8f5b 	dmb	ish
 8014424:	b2db      	uxtb	r3, r3
 8014426:	f003 0301 	and.w	r3, r3, #1
 801442a:	2b00      	cmp	r3, #0
 801442c:	bf0c      	ite	eq
 801442e:	2301      	moveq	r3, #1
 8014430:	2300      	movne	r3, #0
 8014432:	b2db      	uxtb	r3, r3
 8014434:	2b00      	cmp	r3, #0
 8014436:	d013      	beq.n	8014460 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 8014438:	480e      	ldr	r0, [pc, #56]	; (8014474 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 801443a:	f00d fbf5 	bl	8021c28 <__cxa_guard_acquire>
 801443e:	4603      	mov	r3, r0
 8014440:	2b00      	cmp	r3, #0
 8014442:	bf14      	ite	ne
 8014444:	2301      	movne	r3, #1
 8014446:	2300      	moveq	r3, #0
 8014448:	b2db      	uxtb	r3, r3
 801444a:	2b00      	cmp	r3, #0
 801444c:	d008      	beq.n	8014460 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 801444e:	480a      	ldr	r0, [pc, #40]	; (8014478 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
 8014450:	f7ff fc66 	bl	8013d20 <_ZN12TestRegistryC1Ev>
 8014454:	4807      	ldr	r0, [pc, #28]	; (8014474 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 8014456:	f00d fbf3 	bl	8021c40 <__cxa_guard_release>
 801445a:	4808      	ldr	r0, [pc, #32]	; (801447c <_ZN12TestRegistry18getCurrentRegistryEv+0x64>)
 801445c:	f00d fc17 	bl	8021c8e <atexit>
    return (currentRegistry_ == NULLPTR) ? &registry : currentRegistry_;
 8014460:	4b07      	ldr	r3, [pc, #28]	; (8014480 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	2b00      	cmp	r3, #0
 8014466:	d002      	beq.n	801446e <_ZN12TestRegistry18getCurrentRegistryEv+0x56>
 8014468:	4b05      	ldr	r3, [pc, #20]	; (8014480 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	e000      	b.n	8014470 <_ZN12TestRegistry18getCurrentRegistryEv+0x58>
 801446e:	4b02      	ldr	r3, [pc, #8]	; (8014478 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
}
 8014470:	4618      	mov	r0, r3
 8014472:	bd80      	pop	{r7, pc}
 8014474:	20000bc4 	.word	0x20000bc4
 8014478:	20000ba4 	.word	0x20000ba4
 801447c:	08014409 	.word	0x08014409
 8014480:	20000ba0 	.word	0x20000ba0

08014484 <_ZN12TestRegistry18setCurrentRegistryEPS_>:

void TestRegistry::setCurrentRegistry(TestRegistry* registry)
{
 8014484:	b480      	push	{r7}
 8014486:	b083      	sub	sp, #12
 8014488:	af00      	add	r7, sp, #0
 801448a:	6078      	str	r0, [r7, #4]
 801448c:	6039      	str	r1, [r7, #0]
    currentRegistry_ = registry;
 801448e:	4a04      	ldr	r2, [pc, #16]	; (80144a0 <_ZN12TestRegistry18setCurrentRegistryEPS_+0x1c>)
 8014490:	683b      	ldr	r3, [r7, #0]
 8014492:	6013      	str	r3, [r2, #0]
}
 8014494:	bf00      	nop
 8014496:	370c      	adds	r7, #12
 8014498:	46bd      	mov	sp, r7
 801449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801449e:	4770      	bx	lr
 80144a0:	20000ba0 	.word	0x20000ba0

080144a4 <_ZN12TestRegistry15unDoLastAddTestEv>:

void TestRegistry::unDoLastAddTest()
{
 80144a4:	b580      	push	{r7, lr}
 80144a6:	b082      	sub	sp, #8
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	6078      	str	r0, [r7, #4]
    tests_ = tests_ ? tests_->getNext() : NULLPTR;
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	685b      	ldr	r3, [r3, #4]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d00a      	beq.n	80144ca <_ZN12TestRegistry15unDoLastAddTestEv+0x26>
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	685a      	ldr	r2, [r3, #4]
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	685b      	ldr	r3, [r3, #4]
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	330c      	adds	r3, #12
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	4610      	mov	r0, r2
 80144c4:	4798      	blx	r3
 80144c6:	4603      	mov	r3, r0
 80144c8:	e000      	b.n	80144cc <_ZN12TestRegistry15unDoLastAddTestEv+0x28>
 80144ca:	2300      	movs	r3, #0
 80144cc:	687a      	ldr	r2, [r7, #4]
 80144ce:	6053      	str	r3, [r2, #4]

}
 80144d0:	bf00      	nop
 80144d2:	3708      	adds	r7, #8
 80144d4:	46bd      	mov	sp, r7
 80144d6:	bd80      	pop	{r7, pc}

080144d8 <_ZN12TestRegistry14setNameFiltersEPK10TestFilter>:

void TestRegistry::setNameFilters(const TestFilter* filters)
{
 80144d8:	b480      	push	{r7}
 80144da:	b083      	sub	sp, #12
 80144dc:	af00      	add	r7, sp, #0
 80144de:	6078      	str	r0, [r7, #4]
 80144e0:	6039      	str	r1, [r7, #0]
    nameFilters_ = filters;
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	683a      	ldr	r2, [r7, #0]
 80144e6:	609a      	str	r2, [r3, #8]
}
 80144e8:	bf00      	nop
 80144ea:	370c      	adds	r7, #12
 80144ec:	46bd      	mov	sp, r7
 80144ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144f2:	4770      	bx	lr

080144f4 <_ZN12TestRegistry15setGroupFiltersEPK10TestFilter>:

void TestRegistry::setGroupFilters(const TestFilter* filters)
{
 80144f4:	b480      	push	{r7}
 80144f6:	b083      	sub	sp, #12
 80144f8:	af00      	add	r7, sp, #0
 80144fa:	6078      	str	r0, [r7, #4]
 80144fc:	6039      	str	r1, [r7, #0]
    groupFilters_ = filters;
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	683a      	ldr	r2, [r7, #0]
 8014502:	60da      	str	r2, [r3, #12]
}
 8014504:	bf00      	nop
 8014506:	370c      	adds	r7, #12
 8014508:	46bd      	mov	sp, r7
 801450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801450e:	4770      	bx	lr

08014510 <_ZN12TestRegistry13setRunIgnoredEv>:

void TestRegistry::setRunIgnored()
{
 8014510:	b480      	push	{r7}
 8014512:	b083      	sub	sp, #12
 8014514:	af00      	add	r7, sp, #0
 8014516:	6078      	str	r0, [r7, #4]
    runIgnored_ = true;
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	2201      	movs	r2, #1
 801451c:	771a      	strb	r2, [r3, #28]
}
 801451e:	bf00      	nop
 8014520:	370c      	adds	r7, #12
 8014522:	46bd      	mov	sp, r7
 8014524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014528:	4770      	bx	lr

0801452a <_ZN12TestRegistry28setRunTestsInSeperateProcessEv>:

void TestRegistry::setRunTestsInSeperateProcess()
{
 801452a:	b480      	push	{r7}
 801452c:	b083      	sub	sp, #12
 801452e:	af00      	add	r7, sp, #0
 8014530:	6078      	str	r0, [r7, #4]
    runInSeperateProcess_ = true;
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	2201      	movs	r2, #1
 8014536:	751a      	strb	r2, [r3, #20]
}
 8014538:	bf00      	nop
 801453a:	370c      	adds	r7, #12
 801453c:	46bd      	mov	sp, r7
 801453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014542:	4770      	bx	lr

08014544 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>:
{
    return currentRepetition_;
}

bool TestRegistry::testShouldRun(UtestShell* test, TestResult& result)
{
 8014544:	b580      	push	{r7, lr}
 8014546:	b084      	sub	sp, #16
 8014548:	af00      	add	r7, sp, #0
 801454a:	60f8      	str	r0, [r7, #12]
 801454c:	60b9      	str	r1, [r7, #8]
 801454e:	607a      	str	r2, [r7, #4]
    if (test->shouldRun(groupFilters_, nameFilters_)) return true;
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	68d9      	ldr	r1, [r3, #12]
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	689b      	ldr	r3, [r3, #8]
 8014558:	461a      	mov	r2, r3
 801455a:	68b8      	ldr	r0, [r7, #8]
 801455c:	f000 ffbb 	bl	80154d6 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>
 8014560:	4603      	mov	r3, r0
 8014562:	2b00      	cmp	r3, #0
 8014564:	d001      	beq.n	801456a <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x26>
 8014566:	2301      	movs	r3, #1
 8014568:	e006      	b.n	8014578 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x34>
    else {
        result.countFilteredOut();
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	332c      	adds	r3, #44	; 0x2c
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	6878      	ldr	r0, [r7, #4]
 8014574:	4798      	blx	r3
        return false;
 8014576:	2300      	movs	r3, #0
    }
}
 8014578:	4618      	mov	r0, r3
 801457a:	3710      	adds	r7, #16
 801457c:	46bd      	mov	sp, r7
 801457e:	bd80      	pop	{r7, pc}

08014580 <_ZN12TestRegistry12resetPluginsEv>:

void TestRegistry::resetPlugins()
{
 8014580:	b580      	push	{r7, lr}
 8014582:	b082      	sub	sp, #8
 8014584:	af00      	add	r7, sp, #0
 8014586:	6078      	str	r0, [r7, #4]
    firstPlugin_ = NullTestPlugin::instance();
 8014588:	f7ff fb62 	bl	8013c50 <_ZN14NullTestPlugin8instanceEv>
 801458c:	4602      	mov	r2, r0
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	611a      	str	r2, [r3, #16]
}
 8014592:	bf00      	nop
 8014594:	3708      	adds	r7, #8
 8014596:	46bd      	mov	sp, r7
 8014598:	bd80      	pop	{r7, pc}

0801459a <_ZN12TestRegistry13installPluginEP10TestPlugin>:

void TestRegistry::installPlugin(TestPlugin* plugin)
{
 801459a:	b580      	push	{r7, lr}
 801459c:	b082      	sub	sp, #8
 801459e:	af00      	add	r7, sp, #0
 80145a0:	6078      	str	r0, [r7, #4]
 80145a2:	6039      	str	r1, [r7, #0]
    firstPlugin_ = plugin->addPlugin(firstPlugin_);
 80145a4:	683b      	ldr	r3, [r7, #0]
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	3324      	adds	r3, #36	; 0x24
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	687a      	ldr	r2, [r7, #4]
 80145ae:	6912      	ldr	r2, [r2, #16]
 80145b0:	4611      	mov	r1, r2
 80145b2:	6838      	ldr	r0, [r7, #0]
 80145b4:	4798      	blx	r3
 80145b6:	4602      	mov	r2, r0
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	611a      	str	r2, [r3, #16]
}
 80145bc:	bf00      	nop
 80145be:	3708      	adds	r7, #8
 80145c0:	46bd      	mov	sp, r7
 80145c2:	bd80      	pop	{r7, pc}

080145c4 <_ZN12TestRegistry14getFirstPluginEv>:

TestPlugin* TestRegistry::getFirstPlugin()
{
 80145c4:	b480      	push	{r7}
 80145c6:	b083      	sub	sp, #12
 80145c8:	af00      	add	r7, sp, #0
 80145ca:	6078      	str	r0, [r7, #4]
    return firstPlugin_;
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	691b      	ldr	r3, [r3, #16]
}
 80145d0:	4618      	mov	r0, r3
 80145d2:	370c      	adds	r7, #12
 80145d4:	46bd      	mov	sp, r7
 80145d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145da:	4770      	bx	lr

080145dc <_ZN12TestRegistry15getPluginByNameERK12SimpleString>:

TestPlugin* TestRegistry::getPluginByName(const SimpleString& name)
{
 80145dc:	b580      	push	{r7, lr}
 80145de:	b082      	sub	sp, #8
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	6078      	str	r0, [r7, #4]
 80145e4:	6039      	str	r1, [r7, #0]
    return firstPlugin_->getPluginByName(name);
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	691b      	ldr	r3, [r3, #16]
 80145ea:	6839      	ldr	r1, [r7, #0]
 80145ec:	4618      	mov	r0, r3
 80145ee:	f7ff fa52 	bl	8013a96 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 80145f2:	4603      	mov	r3, r0
}
 80145f4:	4618      	mov	r0, r3
 80145f6:	3708      	adds	r7, #8
 80145f8:	46bd      	mov	sp, r7
 80145fa:	bd80      	pop	{r7, pc}

080145fc <_ZN12TestRegistry18removePluginByNameERK12SimpleString>:

void TestRegistry::removePluginByName(const SimpleString& name)
{
 80145fc:	b580      	push	{r7, lr}
 80145fe:	b082      	sub	sp, #8
 8014600:	af00      	add	r7, sp, #0
 8014602:	6078      	str	r0, [r7, #4]
 8014604:	6039      	str	r1, [r7, #0]
    if (firstPlugin_->removePluginByName(name) == firstPlugin_) firstPlugin_ = firstPlugin_->getNext();
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	691a      	ldr	r2, [r3, #16]
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	691b      	ldr	r3, [r3, #16]
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	3328      	adds	r3, #40	; 0x28
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	6839      	ldr	r1, [r7, #0]
 8014616:	4610      	mov	r0, r2
 8014618:	4798      	blx	r3
 801461a:	4602      	mov	r2, r0
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	691b      	ldr	r3, [r3, #16]
 8014620:	429a      	cmp	r2, r3
 8014622:	bf0c      	ite	eq
 8014624:	2301      	moveq	r3, #1
 8014626:	2300      	movne	r3, #0
 8014628:	b2db      	uxtb	r3, r3
 801462a:	2b00      	cmp	r3, #0
 801462c:	d00b      	beq.n	8014646 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x4a>
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	691a      	ldr	r2, [r3, #16]
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	691b      	ldr	r3, [r3, #16]
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	332c      	adds	r3, #44	; 0x2c
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	4610      	mov	r0, r2
 801463e:	4798      	blx	r3
 8014640:	4602      	mov	r2, r0
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	611a      	str	r2, [r3, #16]
    if (firstPlugin_->getName() == name) firstPlugin_ = firstPlugin_->getNext();
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	691b      	ldr	r3, [r3, #16]
 801464a:	4618      	mov	r0, r3
 801464c:	f7ff fa17 	bl	8013a7e <_ZN10TestPlugin7getNameEv>
 8014650:	4603      	mov	r3, r0
 8014652:	6839      	ldr	r1, [r7, #0]
 8014654:	4618      	mov	r0, r3
 8014656:	f7fa ffec 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 801465a:	4603      	mov	r3, r0
 801465c:	2b00      	cmp	r3, #0
 801465e:	d00b      	beq.n	8014678 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x7c>
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	691a      	ldr	r2, [r3, #16]
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	691b      	ldr	r3, [r3, #16]
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	332c      	adds	r3, #44	; 0x2c
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	4610      	mov	r0, r2
 8014670:	4798      	blx	r3
 8014672:	4602      	mov	r2, r0
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	611a      	str	r2, [r3, #16]
    firstPlugin_->removePluginByName(name);
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	691a      	ldr	r2, [r3, #16]
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	691b      	ldr	r3, [r3, #16]
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	3328      	adds	r3, #40	; 0x28
 8014684:	681b      	ldr	r3, [r3, #0]
 8014686:	6839      	ldr	r1, [r7, #0]
 8014688:	4610      	mov	r0, r2
 801468a:	4798      	blx	r3
}
 801468c:	bf00      	nop
 801468e:	3708      	adds	r7, #8
 8014690:	46bd      	mov	sp, r7
 8014692:	bd80      	pop	{r7, pc}

08014694 <_ZN12TestRegistry12countPluginsEv>:

int TestRegistry::countPlugins()
{
 8014694:	b580      	push	{r7, lr}
 8014696:	b084      	sub	sp, #16
 8014698:	af00      	add	r7, sp, #0
 801469a:	6078      	str	r0, [r7, #4]
    int count = 0;
 801469c:	2300      	movs	r3, #0
 801469e:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	691b      	ldr	r3, [r3, #16]
 80146a4:	60bb      	str	r3, [r7, #8]
 80146a6:	f7ff fad3 	bl	8013c50 <_ZN14NullTestPlugin8instanceEv>
 80146aa:	4602      	mov	r2, r0
 80146ac:	68bb      	ldr	r3, [r7, #8]
 80146ae:	4293      	cmp	r3, r2
 80146b0:	bf14      	ite	ne
 80146b2:	2301      	movne	r3, #1
 80146b4:	2300      	moveq	r3, #0
 80146b6:	b2db      	uxtb	r3, r3
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d00a      	beq.n	80146d2 <_ZN12TestRegistry12countPluginsEv+0x3e>
        count++;
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	3301      	adds	r3, #1
 80146c0:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 80146c2:	68bb      	ldr	r3, [r7, #8]
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	332c      	adds	r3, #44	; 0x2c
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	68b8      	ldr	r0, [r7, #8]
 80146cc:	4798      	blx	r3
 80146ce:	60b8      	str	r0, [r7, #8]
 80146d0:	e7e9      	b.n	80146a6 <_ZN12TestRegistry12countPluginsEv+0x12>
    return count;
 80146d2:	68fb      	ldr	r3, [r7, #12]
}
 80146d4:	4618      	mov	r0, r3
 80146d6:	3710      	adds	r7, #16
 80146d8:	46bd      	mov	sp, r7
 80146da:	bd80      	pop	{r7, pc}

080146dc <_ZN12TestRegistry12getFirstTestEv>:


UtestShell* TestRegistry::getFirstTest()
{
 80146dc:	b480      	push	{r7}
 80146de:	b083      	sub	sp, #12
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	6078      	str	r0, [r7, #4]
    return tests_;
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	685b      	ldr	r3, [r3, #4]
}
 80146e8:	4618      	mov	r0, r3
 80146ea:	370c      	adds	r7, #12
 80146ec:	46bd      	mov	sp, r7
 80146ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146f2:	4770      	bx	lr

080146f4 <_ZN12TestRegistry12shuffleTestsEj>:

void TestRegistry::shuffleTests(size_t seed)
{
 80146f4:	b580      	push	{r7, lr}
 80146f6:	b084      	sub	sp, #16
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	6078      	str	r0, [r7, #4]
 80146fc:	6039      	str	r1, [r7, #0]
    UtestShellPointerArray array(getFirstTest());
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	334c      	adds	r3, #76	; 0x4c
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	6878      	ldr	r0, [r7, #4]
 8014708:	4798      	blx	r3
 801470a:	4602      	mov	r2, r0
 801470c:	f107 0308 	add.w	r3, r7, #8
 8014710:	4611      	mov	r1, r2
 8014712:	4618      	mov	r0, r3
 8014714:	f002 f8f8 	bl	8016908 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.shuffle(seed);
 8014718:	f107 0308 	add.w	r3, r7, #8
 801471c:	6839      	ldr	r1, [r7, #0]
 801471e:	4618      	mov	r0, r3
 8014720:	f002 f980 	bl	8016a24 <_ZN22UtestShellPointerArray7shuffleEj>
    tests_ = array.getFirstTest();
 8014724:	f107 0308 	add.w	r3, r7, #8
 8014728:	4618      	mov	r0, r3
 801472a:	f002 fa13 	bl	8016b54 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 801472e:	4602      	mov	r2, r0
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 8014734:	f107 0308 	add.w	r3, r7, #8
 8014738:	4618      	mov	r0, r3
 801473a:	f002 f939 	bl	80169b0 <_ZN22UtestShellPointerArrayD1Ev>
}
 801473e:	bf00      	nop
 8014740:	3710      	adds	r7, #16
 8014742:	46bd      	mov	sp, r7
 8014744:	bd80      	pop	{r7, pc}

08014746 <_ZN12TestRegistry12reverseTestsEv>:

void TestRegistry::reverseTests()
{
 8014746:	b580      	push	{r7, lr}
 8014748:	b084      	sub	sp, #16
 801474a:	af00      	add	r7, sp, #0
 801474c:	6078      	str	r0, [r7, #4]
    UtestShellPointerArray array(getFirstTest());
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	334c      	adds	r3, #76	; 0x4c
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	6878      	ldr	r0, [r7, #4]
 8014758:	4798      	blx	r3
 801475a:	4602      	mov	r2, r0
 801475c:	f107 0308 	add.w	r3, r7, #8
 8014760:	4611      	mov	r1, r2
 8014762:	4618      	mov	r0, r3
 8014764:	f002 f8d0 	bl	8016908 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.reverse();
 8014768:	f107 0308 	add.w	r3, r7, #8
 801476c:	4618      	mov	r0, r3
 801476e:	f002 f995 	bl	8016a9c <_ZN22UtestShellPointerArray7reverseEv>
    tests_ = array.getFirstTest();
 8014772:	f107 0308 	add.w	r3, r7, #8
 8014776:	4618      	mov	r0, r3
 8014778:	f002 f9ec 	bl	8016b54 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 801477c:	4602      	mov	r2, r0
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 8014782:	f107 0308 	add.w	r3, r7, #8
 8014786:	4618      	mov	r0, r3
 8014788:	f002 f912 	bl	80169b0 <_ZN22UtestShellPointerArrayD1Ev>
}
 801478c:	bf00      	nop
 801478e:	3710      	adds	r7, #16
 8014790:	46bd      	mov	sp, r7
 8014792:	bd80      	pop	{r7, pc}

08014794 <_ZN12TestRegistry15getTestWithNextEP10UtestShell>:

UtestShell* TestRegistry::getTestWithNext(UtestShell* test)
{
 8014794:	b580      	push	{r7, lr}
 8014796:	b084      	sub	sp, #16
 8014798:	af00      	add	r7, sp, #0
 801479a:	6078      	str	r0, [r7, #4]
 801479c:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	685b      	ldr	r3, [r3, #4]
 80147a2:	60fb      	str	r3, [r7, #12]
    while (current && current->getNext() != test)
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d00b      	beq.n	80147c2 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	330c      	adds	r3, #12
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	68f8      	ldr	r0, [r7, #12]
 80147b4:	4798      	blx	r3
 80147b6:	4602      	mov	r2, r0
 80147b8:	683b      	ldr	r3, [r7, #0]
 80147ba:	4293      	cmp	r3, r2
 80147bc:	d001      	beq.n	80147c2 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 80147be:	2301      	movs	r3, #1
 80147c0:	e000      	b.n	80147c4 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x30>
 80147c2:	2300      	movs	r3, #0
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d007      	beq.n	80147d8 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x44>
        current = current->getNext();
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	330c      	adds	r3, #12
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	68f8      	ldr	r0, [r7, #12]
 80147d2:	4798      	blx	r3
 80147d4:	60f8      	str	r0, [r7, #12]
    while (current && current->getNext() != test)
 80147d6:	e7e5      	b.n	80147a4 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x10>
    return current;
 80147d8:	68fb      	ldr	r3, [r7, #12]
}
 80147da:	4618      	mov	r0, r3
 80147dc:	3710      	adds	r7, #16
 80147de:	46bd      	mov	sp, r7
 80147e0:	bd80      	pop	{r7, pc}

080147e2 <_ZN12TestRegistry16findTestWithNameERK12SimpleString>:

UtestShell* TestRegistry::findTestWithName(const SimpleString& name)
{
 80147e2:	b590      	push	{r4, r7, lr}
 80147e4:	b087      	sub	sp, #28
 80147e6:	af00      	add	r7, sp, #0
 80147e8:	6078      	str	r0, [r7, #4]
 80147ea:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	685b      	ldr	r3, [r3, #4]
 80147f0:	617b      	str	r3, [r7, #20]
    while (current) {
 80147f2:	697b      	ldr	r3, [r7, #20]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d01e      	beq.n	8014836 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x54>
        if (current->getName() == name)
 80147f8:	f107 030c 	add.w	r3, r7, #12
 80147fc:	6979      	ldr	r1, [r7, #20]
 80147fe:	4618      	mov	r0, r3
 8014800:	f000 fd4e 	bl	80152a0 <_ZNK10UtestShell7getNameEv>
 8014804:	f107 030c 	add.w	r3, r7, #12
 8014808:	6839      	ldr	r1, [r7, #0]
 801480a:	4618      	mov	r0, r3
 801480c:	f7fa ff11 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8014810:	4603      	mov	r3, r0
 8014812:	461c      	mov	r4, r3
 8014814:	f107 030c 	add.w	r3, r7, #12
 8014818:	4618      	mov	r0, r3
 801481a:	f7fa fefe 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801481e:	2c00      	cmp	r4, #0
 8014820:	d001      	beq.n	8014826 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x44>
            return current;
 8014822:	697b      	ldr	r3, [r7, #20]
 8014824:	e008      	b.n	8014838 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x56>
        current = current->getNext();
 8014826:	697b      	ldr	r3, [r7, #20]
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	330c      	adds	r3, #12
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	6978      	ldr	r0, [r7, #20]
 8014830:	4798      	blx	r3
 8014832:	6178      	str	r0, [r7, #20]
    while (current) {
 8014834:	e7dd      	b.n	80147f2 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x10>
    }
    return NULLPTR;
 8014836:	2300      	movs	r3, #0
}
 8014838:	4618      	mov	r0, r3
 801483a:	371c      	adds	r7, #28
 801483c:	46bd      	mov	sp, r7
 801483e:	bd90      	pop	{r4, r7, pc}

08014840 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString>:

UtestShell* TestRegistry::findTestWithGroup(const SimpleString& group)
{
 8014840:	b590      	push	{r4, r7, lr}
 8014842:	b087      	sub	sp, #28
 8014844:	af00      	add	r7, sp, #0
 8014846:	6078      	str	r0, [r7, #4]
 8014848:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	685b      	ldr	r3, [r3, #4]
 801484e:	617b      	str	r3, [r7, #20]
    while (current) {
 8014850:	697b      	ldr	r3, [r7, #20]
 8014852:	2b00      	cmp	r3, #0
 8014854:	d01e      	beq.n	8014894 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x54>
        if (current->getGroup() == group)
 8014856:	f107 030c 	add.w	r3, r7, #12
 801485a:	6979      	ldr	r1, [r7, #20]
 801485c:	4618      	mov	r0, r3
 801485e:	f000 fd2e 	bl	80152be <_ZNK10UtestShell8getGroupEv>
 8014862:	f107 030c 	add.w	r3, r7, #12
 8014866:	6839      	ldr	r1, [r7, #0]
 8014868:	4618      	mov	r0, r3
 801486a:	f7fa fee2 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 801486e:	4603      	mov	r3, r0
 8014870:	461c      	mov	r4, r3
 8014872:	f107 030c 	add.w	r3, r7, #12
 8014876:	4618      	mov	r0, r3
 8014878:	f7fa fecf 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801487c:	2c00      	cmp	r4, #0
 801487e:	d001      	beq.n	8014884 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x44>
            return current;
 8014880:	697b      	ldr	r3, [r7, #20]
 8014882:	e008      	b.n	8014896 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x56>
        current = current->getNext();
 8014884:	697b      	ldr	r3, [r7, #20]
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	330c      	adds	r3, #12
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	6978      	ldr	r0, [r7, #20]
 801488e:	4798      	blx	r3
 8014890:	6178      	str	r0, [r7, #20]
    while (current) {
 8014892:	e7dd      	b.n	8014850 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x10>
    }
    return NULLPTR;
 8014894:	2300      	movs	r3, #0
}
 8014896:	4618      	mov	r0, r3
 8014898:	371c      	adds	r7, #28
 801489a:	46bd      	mov	sp, r7
 801489c:	bd90      	pop	{r4, r7, pc}
	...

080148a0 <_ZN10TestResultC1ER10TestOutput>:
#include "CppUTest/TestResult.h"
#include "CppUTest/TestFailure.h"
#include "CppUTest/TestOutput.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestResult::TestResult(TestOutput& p) :
 80148a0:	b480      	push	{r7}
 80148a2:	b083      	sub	sp, #12
 80148a4:	af00      	add	r7, sp, #0
 80148a6:	6078      	str	r0, [r7, #4]
 80148a8:	6039      	str	r1, [r7, #0]
    output_(p), testCount_(0), runCount_(0), checkCount_(0), failureCount_(0), filteredOutCount_(0), ignoredCount_(0), totalExecutionTime_(0), timeStarted_(0), currentTestTimeStarted_(0),
            currentTestTotalExecutionTime_(0), currentGroupTimeStarted_(0), currentGroupTotalExecutionTime_(0)
 80148aa:	4a18      	ldr	r2, [pc, #96]	; (801490c <_ZN10TestResultC1ER10TestOutput+0x6c>)
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	601a      	str	r2, [r3, #0]
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	683a      	ldr	r2, [r7, #0]
 80148b4:	605a      	str	r2, [r3, #4]
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	2200      	movs	r2, #0
 80148ba:	609a      	str	r2, [r3, #8]
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	2200      	movs	r2, #0
 80148c0:	60da      	str	r2, [r3, #12]
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	2200      	movs	r2, #0
 80148c6:	611a      	str	r2, [r3, #16]
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	2200      	movs	r2, #0
 80148cc:	615a      	str	r2, [r3, #20]
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	2200      	movs	r2, #0
 80148d2:	619a      	str	r2, [r3, #24]
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	2200      	movs	r2, #0
 80148d8:	61da      	str	r2, [r3, #28]
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	2200      	movs	r2, #0
 80148de:	621a      	str	r2, [r3, #32]
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	2200      	movs	r2, #0
 80148e4:	625a      	str	r2, [r3, #36]	; 0x24
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	2200      	movs	r2, #0
 80148ea:	629a      	str	r2, [r3, #40]	; 0x28
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	2200      	movs	r2, #0
 80148f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	2200      	movs	r2, #0
 80148f6:	631a      	str	r2, [r3, #48]	; 0x30
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	2200      	movs	r2, #0
 80148fc:	635a      	str	r2, [r3, #52]	; 0x34
{
}
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	4618      	mov	r0, r3
 8014902:	370c      	adds	r7, #12
 8014904:	46bd      	mov	sp, r7
 8014906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801490a:	4770      	bx	lr
 801490c:	0802b870 	.word	0x0802b870

08014910 <_ZN10TestResultD1Ev>:

TestResult::~TestResult()
 8014910:	b480      	push	{r7}
 8014912:	b083      	sub	sp, #12
 8014914:	af00      	add	r7, sp, #0
 8014916:	6078      	str	r0, [r7, #4]
 8014918:	4a04      	ldr	r2, [pc, #16]	; (801492c <_ZN10TestResultD1Ev+0x1c>)
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	601a      	str	r2, [r3, #0]
{
}
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	4618      	mov	r0, r3
 8014922:	370c      	adds	r7, #12
 8014924:	46bd      	mov	sp, r7
 8014926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801492a:	4770      	bx	lr
 801492c:	0802b870 	.word	0x0802b870

08014930 <_ZN10TestResultD0Ev>:
TestResult::~TestResult()
 8014930:	b580      	push	{r7, lr}
 8014932:	b082      	sub	sp, #8
 8014934:	af00      	add	r7, sp, #0
 8014936:	6078      	str	r0, [r7, #4]
}
 8014938:	6878      	ldr	r0, [r7, #4]
 801493a:	f7ff ffe9 	bl	8014910 <_ZN10TestResultD1Ev>
 801493e:	2138      	movs	r1, #56	; 0x38
 8014940:	6878      	ldr	r0, [r7, #4]
 8014942:	f7f7 ff03 	bl	800c74c <_ZdlPvj>
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	4618      	mov	r0, r3
 801494a:	3708      	adds	r7, #8
 801494c:	46bd      	mov	sp, r7
 801494e:	bd80      	pop	{r7, pc}

08014950 <_ZN10TestResult19currentGroupStartedEP10UtestShell>:

void TestResult::currentGroupStarted(UtestShell* test)
{
 8014950:	b580      	push	{r7, lr}
 8014952:	b082      	sub	sp, #8
 8014954:	af00      	add	r7, sp, #0
 8014956:	6078      	str	r0, [r7, #4]
 8014958:	6039      	str	r1, [r7, #0]
    output_.printCurrentGroupStarted(*test);
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	685a      	ldr	r2, [r3, #4]
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	685b      	ldr	r3, [r3, #4]
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	3318      	adds	r3, #24
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	6839      	ldr	r1, [r7, #0]
 801496a:	4610      	mov	r0, r2
 801496c:	4798      	blx	r3
    currentGroupTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 801496e:	4b05      	ldr	r3, [pc, #20]	; (8014984 <_ZN10TestResult19currentGroupStartedEP10UtestShell+0x34>)
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	4798      	blx	r3
 8014974:	4603      	mov	r3, r0
 8014976:	461a      	mov	r2, r3
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	631a      	str	r2, [r3, #48]	; 0x30
}
 801497c:	bf00      	nop
 801497e:	3708      	adds	r7, #8
 8014980:	46bd      	mov	sp, r7
 8014982:	bd80      	pop	{r7, pc}
 8014984:	200000a8 	.word	0x200000a8

08014988 <_ZN10TestResult17currentGroupEndedEP10UtestShell>:

void TestResult::currentGroupEnded(UtestShell* /*test*/)
{
 8014988:	b580      	push	{r7, lr}
 801498a:	b082      	sub	sp, #8
 801498c:	af00      	add	r7, sp, #0
 801498e:	6078      	str	r0, [r7, #4]
 8014990:	6039      	str	r1, [r7, #0]
    currentGroupTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentGroupTimeStarted_;
 8014992:	4b0c      	ldr	r3, [pc, #48]	; (80149c4 <_ZN10TestResult17currentGroupEndedEP10UtestShell+0x3c>)
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	4798      	blx	r3
 8014998:	4603      	mov	r3, r0
 801499a:	461a      	mov	r2, r3
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149a0:	1ad2      	subs	r2, r2, r3
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	635a      	str	r2, [r3, #52]	; 0x34
    output_.printCurrentGroupEnded(*this);
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	685a      	ldr	r2, [r3, #4]
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	685b      	ldr	r3, [r3, #4]
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	331c      	adds	r3, #28
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	6879      	ldr	r1, [r7, #4]
 80149b6:	4610      	mov	r0, r2
 80149b8:	4798      	blx	r3
}
 80149ba:	bf00      	nop
 80149bc:	3708      	adds	r7, #8
 80149be:	46bd      	mov	sp, r7
 80149c0:	bd80      	pop	{r7, pc}
 80149c2:	bf00      	nop
 80149c4:	200000a8 	.word	0x200000a8

080149c8 <_ZN10TestResult18currentTestStartedEP10UtestShell>:

void TestResult::currentTestStarted(UtestShell* test)
{
 80149c8:	b580      	push	{r7, lr}
 80149ca:	b082      	sub	sp, #8
 80149cc:	af00      	add	r7, sp, #0
 80149ce:	6078      	str	r0, [r7, #4]
 80149d0:	6039      	str	r1, [r7, #0]
    output_.printCurrentTestStarted(*test);
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	685a      	ldr	r2, [r3, #4]
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	685b      	ldr	r3, [r3, #4]
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	3310      	adds	r3, #16
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	6839      	ldr	r1, [r7, #0]
 80149e2:	4610      	mov	r0, r2
 80149e4:	4798      	blx	r3
    currentTestTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 80149e6:	4b05      	ldr	r3, [pc, #20]	; (80149fc <_ZN10TestResult18currentTestStartedEP10UtestShell+0x34>)
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	4798      	blx	r3
 80149ec:	4603      	mov	r3, r0
 80149ee:	461a      	mov	r2, r3
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80149f4:	bf00      	nop
 80149f6:	3708      	adds	r7, #8
 80149f8:	46bd      	mov	sp, r7
 80149fa:	bd80      	pop	{r7, pc}
 80149fc:	200000a8 	.word	0x200000a8

08014a00 <_ZN10TestResult5printEPKc>:

void TestResult::print(const char* text)
{
 8014a00:	b580      	push	{r7, lr}
 8014a02:	b082      	sub	sp, #8
 8014a04:	af00      	add	r7, sp, #0
 8014a06:	6078      	str	r0, [r7, #4]
 8014a08:	6039      	str	r1, [r7, #0]
    output_.print(text);
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	685a      	ldr	r2, [r3, #4]
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	685b      	ldr	r3, [r3, #4]
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	332c      	adds	r3, #44	; 0x2c
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	6839      	ldr	r1, [r7, #0]
 8014a1a:	4610      	mov	r0, r2
 8014a1c:	4798      	blx	r3
}
 8014a1e:	bf00      	nop
 8014a20:	3708      	adds	r7, #8
 8014a22:	46bd      	mov	sp, r7
 8014a24:	bd80      	pop	{r7, pc}

08014a26 <_ZN10TestResult16printVeryVerboseEPKc>:

void TestResult::printVeryVerbose(const char* text)
{
 8014a26:	b580      	push	{r7, lr}
 8014a28:	b082      	sub	sp, #8
 8014a2a:	af00      	add	r7, sp, #0
 8014a2c:	6078      	str	r0, [r7, #4]
 8014a2e:	6039      	str	r1, [r7, #0]
    output_.printVeryVerbose(text);
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	685a      	ldr	r2, [r3, #4]
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	685b      	ldr	r3, [r3, #4]
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	3348      	adds	r3, #72	; 0x48
 8014a3c:	681b      	ldr	r3, [r3, #0]
 8014a3e:	6839      	ldr	r1, [r7, #0]
 8014a40:	4610      	mov	r0, r2
 8014a42:	4798      	blx	r3
}
 8014a44:	bf00      	nop
 8014a46:	3708      	adds	r7, #8
 8014a48:	46bd      	mov	sp, r7
 8014a4a:	bd80      	pop	{r7, pc}

08014a4c <_ZN10TestResult16currentTestEndedEP10UtestShell>:

void TestResult::currentTestEnded(UtestShell* /*test*/)
{
 8014a4c:	b580      	push	{r7, lr}
 8014a4e:	b082      	sub	sp, #8
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	6078      	str	r0, [r7, #4]
 8014a54:	6039      	str	r1, [r7, #0]
    currentTestTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentTestTimeStarted_;
 8014a56:	4b0c      	ldr	r3, [pc, #48]	; (8014a88 <_ZN10TestResult16currentTestEndedEP10UtestShell+0x3c>)
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	4798      	blx	r3
 8014a5c:	4603      	mov	r3, r0
 8014a5e:	461a      	mov	r2, r3
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a64:	1ad2      	subs	r2, r2, r3
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	62da      	str	r2, [r3, #44]	; 0x2c
    output_.printCurrentTestEnded(*this);
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	685a      	ldr	r2, [r3, #4]
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	685b      	ldr	r3, [r3, #4]
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	3314      	adds	r3, #20
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	6879      	ldr	r1, [r7, #4]
 8014a7a:	4610      	mov	r0, r2
 8014a7c:	4798      	blx	r3

}
 8014a7e:	bf00      	nop
 8014a80:	3708      	adds	r7, #8
 8014a82:	46bd      	mov	sp, r7
 8014a84:	bd80      	pop	{r7, pc}
 8014a86:	bf00      	nop
 8014a88:	200000a8 	.word	0x200000a8

08014a8c <_ZN10TestResult10addFailureERK11TestFailure>:

void TestResult::addFailure(const TestFailure& failure)
{
 8014a8c:	b580      	push	{r7, lr}
 8014a8e:	b082      	sub	sp, #8
 8014a90:	af00      	add	r7, sp, #0
 8014a92:	6078      	str	r0, [r7, #4]
 8014a94:	6039      	str	r1, [r7, #0]
    output_.printFailure(failure);
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	685a      	ldr	r2, [r3, #4]
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	685b      	ldr	r3, [r3, #4]
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	333c      	adds	r3, #60	; 0x3c
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	6839      	ldr	r1, [r7, #0]
 8014aa6:	4610      	mov	r0, r2
 8014aa8:	4798      	blx	r3
    failureCount_++;
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	695b      	ldr	r3, [r3, #20]
 8014aae:	1c5a      	adds	r2, r3, #1
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	615a      	str	r2, [r3, #20]
}
 8014ab4:	bf00      	nop
 8014ab6:	3708      	adds	r7, #8
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	bd80      	pop	{r7, pc}

08014abc <_ZN10TestResult9countTestEv>:

void TestResult::countTest()
{
 8014abc:	b480      	push	{r7}
 8014abe:	b083      	sub	sp, #12
 8014ac0:	af00      	add	r7, sp, #0
 8014ac2:	6078      	str	r0, [r7, #4]
    testCount_++;
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	689b      	ldr	r3, [r3, #8]
 8014ac8:	1c5a      	adds	r2, r3, #1
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	609a      	str	r2, [r3, #8]
}
 8014ace:	bf00      	nop
 8014ad0:	370c      	adds	r7, #12
 8014ad2:	46bd      	mov	sp, r7
 8014ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ad8:	4770      	bx	lr

08014ada <_ZN10TestResult8countRunEv>:

void TestResult::countRun()
{
 8014ada:	b480      	push	{r7}
 8014adc:	b083      	sub	sp, #12
 8014ade:	af00      	add	r7, sp, #0
 8014ae0:	6078      	str	r0, [r7, #4]
    runCount_++;
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	68db      	ldr	r3, [r3, #12]
 8014ae6:	1c5a      	adds	r2, r3, #1
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	60da      	str	r2, [r3, #12]
}
 8014aec:	bf00      	nop
 8014aee:	370c      	adds	r7, #12
 8014af0:	46bd      	mov	sp, r7
 8014af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af6:	4770      	bx	lr

08014af8 <_ZN10TestResult10countCheckEv>:

void TestResult::countCheck()
{
 8014af8:	b480      	push	{r7}
 8014afa:	b083      	sub	sp, #12
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	6078      	str	r0, [r7, #4]
    checkCount_++;
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	691b      	ldr	r3, [r3, #16]
 8014b04:	1c5a      	adds	r2, r3, #1
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	611a      	str	r2, [r3, #16]
}
 8014b0a:	bf00      	nop
 8014b0c:	370c      	adds	r7, #12
 8014b0e:	46bd      	mov	sp, r7
 8014b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b14:	4770      	bx	lr

08014b16 <_ZN10TestResult16countFilteredOutEv>:

void TestResult::countFilteredOut()
{
 8014b16:	b480      	push	{r7}
 8014b18:	b083      	sub	sp, #12
 8014b1a:	af00      	add	r7, sp, #0
 8014b1c:	6078      	str	r0, [r7, #4]
    filteredOutCount_++;
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	699b      	ldr	r3, [r3, #24]
 8014b22:	1c5a      	adds	r2, r3, #1
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	619a      	str	r2, [r3, #24]
}
 8014b28:	bf00      	nop
 8014b2a:	370c      	adds	r7, #12
 8014b2c:	46bd      	mov	sp, r7
 8014b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b32:	4770      	bx	lr

08014b34 <_ZN10TestResult12countIgnoredEv>:

void TestResult::countIgnored()
{
 8014b34:	b480      	push	{r7}
 8014b36:	b083      	sub	sp, #12
 8014b38:	af00      	add	r7, sp, #0
 8014b3a:	6078      	str	r0, [r7, #4]
    ignoredCount_++;
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	69db      	ldr	r3, [r3, #28]
 8014b40:	1c5a      	adds	r2, r3, #1
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	61da      	str	r2, [r3, #28]
}
 8014b46:	bf00      	nop
 8014b48:	370c      	adds	r7, #12
 8014b4a:	46bd      	mov	sp, r7
 8014b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b50:	4770      	bx	lr
	...

08014b54 <_ZN10TestResult12testsStartedEv>:

void TestResult::testsStarted()
{
 8014b54:	b580      	push	{r7, lr}
 8014b56:	b082      	sub	sp, #8
 8014b58:	af00      	add	r7, sp, #0
 8014b5a:	6078      	str	r0, [r7, #4]
    timeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8014b5c:	4b09      	ldr	r3, [pc, #36]	; (8014b84 <_ZN10TestResult12testsStartedEv+0x30>)
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	4798      	blx	r3
 8014b62:	4603      	mov	r3, r0
 8014b64:	461a      	mov	r2, r3
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	625a      	str	r2, [r3, #36]	; 0x24
    output_.printTestsStarted();
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	685a      	ldr	r2, [r3, #4]
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	685b      	ldr	r3, [r3, #4]
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	3308      	adds	r3, #8
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	4610      	mov	r0, r2
 8014b7a:	4798      	blx	r3
}
 8014b7c:	bf00      	nop
 8014b7e:	3708      	adds	r7, #8
 8014b80:	46bd      	mov	sp, r7
 8014b82:	bd80      	pop	{r7, pc}
 8014b84:	200000a8 	.word	0x200000a8

08014b88 <_ZN10TestResult10testsEndedEv>:

void TestResult::testsEnded()
{
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	b084      	sub	sp, #16
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	6078      	str	r0, [r7, #4]
    size_t timeEnded = (size_t) GetPlatformSpecificTimeInMillis();
 8014b90:	4b0c      	ldr	r3, [pc, #48]	; (8014bc4 <_ZN10TestResult10testsEndedEv+0x3c>)
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	4798      	blx	r3
 8014b96:	4603      	mov	r3, r0
 8014b98:	60fb      	str	r3, [r7, #12]
    totalExecutionTime_ = timeEnded - timeStarted_;
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b9e:	68fa      	ldr	r2, [r7, #12]
 8014ba0:	1ad2      	subs	r2, r2, r3
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	621a      	str	r2, [r3, #32]
    output_.printTestsEnded(*this);
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	685a      	ldr	r2, [r3, #4]
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	685b      	ldr	r3, [r3, #4]
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	330c      	adds	r3, #12
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	6879      	ldr	r1, [r7, #4]
 8014bb6:	4610      	mov	r0, r2
 8014bb8:	4798      	blx	r3
}
 8014bba:	bf00      	nop
 8014bbc:	3710      	adds	r7, #16
 8014bbe:	46bd      	mov	sp, r7
 8014bc0:	bd80      	pop	{r7, pc}
 8014bc2:	bf00      	nop
 8014bc4:	200000a8 	.word	0x200000a8

08014bc8 <_ZNK10TestResult21getTotalExecutionTimeEv>:

size_t TestResult::getTotalExecutionTime() const
{
 8014bc8:	b480      	push	{r7}
 8014bca:	b083      	sub	sp, #12
 8014bcc:	af00      	add	r7, sp, #0
 8014bce:	6078      	str	r0, [r7, #4]
    return totalExecutionTime_;
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	6a1b      	ldr	r3, [r3, #32]
}
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	370c      	adds	r7, #12
 8014bd8:	46bd      	mov	sp, r7
 8014bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bde:	4770      	bx	lr

08014be0 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>:
{
    totalExecutionTime_ = exTime;
}

size_t TestResult::getCurrentTestTotalExecutionTime() const
{
 8014be0:	b480      	push	{r7}
 8014be2:	b083      	sub	sp, #12
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	6078      	str	r0, [r7, #4]
    return currentTestTotalExecutionTime_;
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8014bec:	4618      	mov	r0, r3
 8014bee:	370c      	adds	r7, #12
 8014bf0:	46bd      	mov	sp, r7
 8014bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf6:	4770      	bx	lr

08014bf8 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>:

size_t TestResult::getCurrentGroupTotalExecutionTime() const
{
 8014bf8:	b480      	push	{r7}
 8014bfa:	b083      	sub	sp, #12
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	6078      	str	r0, [r7, #4]
    return currentGroupTotalExecutionTime_;
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8014c04:	4618      	mov	r0, r3
 8014c06:	370c      	adds	r7, #12
 8014c08:	46bd      	mov	sp, r7
 8014c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c0e:	4770      	bx	lr

08014c10 <_Z13doubles_equalddd>:
#if defined(__GNUC__) && __GNUC__ >= 11
# define NEEDS_DISABLE_NULL_WARNING
#endif /* GCC >= 11 */

bool doubles_equal(double d1, double d2, double threshold)
{
 8014c10:	b590      	push	{r4, r7, lr}
 8014c12:	b087      	sub	sp, #28
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	ed87 0b04 	vstr	d0, [r7, #16]
 8014c1a:	ed87 1b02 	vstr	d1, [r7, #8]
 8014c1e:	ed87 2b00 	vstr	d2, [r7]
    if (PlatformSpecificIsNan(d1) || PlatformSpecificIsNan(d2) || PlatformSpecificIsNan(threshold))
 8014c22:	4b2c      	ldr	r3, [pc, #176]	; (8014cd4 <_Z13doubles_equalddd+0xc4>)
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	ed97 0b04 	vldr	d0, [r7, #16]
 8014c2a:	4798      	blx	r3
 8014c2c:	4603      	mov	r3, r0
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d10f      	bne.n	8014c52 <_Z13doubles_equalddd+0x42>
 8014c32:	4b28      	ldr	r3, [pc, #160]	; (8014cd4 <_Z13doubles_equalddd+0xc4>)
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	ed97 0b02 	vldr	d0, [r7, #8]
 8014c3a:	4798      	blx	r3
 8014c3c:	4603      	mov	r3, r0
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d107      	bne.n	8014c52 <_Z13doubles_equalddd+0x42>
 8014c42:	4b24      	ldr	r3, [pc, #144]	; (8014cd4 <_Z13doubles_equalddd+0xc4>)
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	ed97 0b00 	vldr	d0, [r7]
 8014c4a:	4798      	blx	r3
 8014c4c:	4603      	mov	r3, r0
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d001      	beq.n	8014c56 <_Z13doubles_equalddd+0x46>
 8014c52:	2301      	movs	r3, #1
 8014c54:	e000      	b.n	8014c58 <_Z13doubles_equalddd+0x48>
 8014c56:	2300      	movs	r3, #0
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d001      	beq.n	8014c60 <_Z13doubles_equalddd+0x50>
        return false;
 8014c5c:	2300      	movs	r3, #0
 8014c5e:	e035      	b.n	8014ccc <_Z13doubles_equalddd+0xbc>

    if (PlatformSpecificIsInf(d1) && PlatformSpecificIsInf(d2))
 8014c60:	4b1d      	ldr	r3, [pc, #116]	; (8014cd8 <_Z13doubles_equalddd+0xc8>)
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	ed97 0b04 	vldr	d0, [r7, #16]
 8014c68:	4798      	blx	r3
 8014c6a:	4603      	mov	r3, r0
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d009      	beq.n	8014c84 <_Z13doubles_equalddd+0x74>
 8014c70:	4b19      	ldr	r3, [pc, #100]	; (8014cd8 <_Z13doubles_equalddd+0xc8>)
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	ed97 0b02 	vldr	d0, [r7, #8]
 8014c78:	4798      	blx	r3
 8014c7a:	4603      	mov	r3, r0
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d001      	beq.n	8014c84 <_Z13doubles_equalddd+0x74>
 8014c80:	2301      	movs	r3, #1
 8014c82:	e000      	b.n	8014c86 <_Z13doubles_equalddd+0x76>
 8014c84:	2300      	movs	r3, #0
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d001      	beq.n	8014c8e <_Z13doubles_equalddd+0x7e>
    {
        return true;
 8014c8a:	2301      	movs	r3, #1
 8014c8c:	e01e      	b.n	8014ccc <_Z13doubles_equalddd+0xbc>
    }

    return PlatformSpecificFabs(d1 - d2) <= threshold;
 8014c8e:	4b13      	ldr	r3, [pc, #76]	; (8014cdc <_Z13doubles_equalddd+0xcc>)
 8014c90:	681c      	ldr	r4, [r3, #0]
 8014c92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014c96:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8014c9a:	f7eb fb35 	bl	8000308 <__aeabi_dsub>
 8014c9e:	4602      	mov	r2, r0
 8014ca0:	460b      	mov	r3, r1
 8014ca2:	ec43 2b17 	vmov	d7, r2, r3
 8014ca6:	eeb0 0a47 	vmov.f32	s0, s14
 8014caa:	eef0 0a67 	vmov.f32	s1, s15
 8014cae:	47a0      	blx	r4
 8014cb0:	ec53 2b10 	vmov	r2, r3, d0
 8014cb4:	2101      	movs	r1, #1
 8014cb6:	460c      	mov	r4, r1
 8014cb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8014cbc:	f7eb fd50 	bl	8000760 <__aeabi_dcmpge>
 8014cc0:	4603      	mov	r3, r0
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d101      	bne.n	8014cca <_Z13doubles_equalddd+0xba>
 8014cc6:	2300      	movs	r3, #0
 8014cc8:	461c      	mov	r4, r3
 8014cca:	b2e3      	uxtb	r3, r4
}
 8014ccc:	4618      	mov	r0, r3
 8014cce:	371c      	adds	r7, #28
 8014cd0:	46bd      	mov	sp, r7
 8014cd2:	bd90      	pop	{r4, r7, pc}
 8014cd4:	200000e8 	.word	0x200000e8
 8014cd8:	200000ec 	.word	0x200000ec
 8014cdc:	200000dc 	.word	0x200000dc

08014ce0 <_ZN22OutsideTestRunnerUTest13getTestResultEv>:
 */
class OutsideTestRunnerUTest: public UtestShell
{
public:
    static OutsideTestRunnerUTest& instance();
    virtual TestResult& getTestResult()
 8014ce0:	b480      	push	{r7}
 8014ce2:	b083      	sub	sp, #12
 8014ce4:	af00      	add	r7, sp, #0
 8014ce6:	6078      	str	r0, [r7, #4]
    {
        return defaultTestResult;
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	332c      	adds	r3, #44	; 0x2c
    }
 8014cec:	4618      	mov	r0, r3
 8014cee:	370c      	adds	r7, #12
 8014cf0:	46bd      	mov	sp, r7
 8014cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cf6:	4770      	bx	lr

08014cf8 <_ZN22OutsideTestRunnerUTestD1Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 8014cf8:	b580      	push	{r7, lr}
 8014cfa:	b082      	sub	sp, #8
 8014cfc:	af00      	add	r7, sp, #0
 8014cfe:	6078      	str	r0, [r7, #4]
    {
 8014d00:	4a0a      	ldr	r2, [pc, #40]	; (8014d2c <_ZN22OutsideTestRunnerUTestD1Ev+0x34>)
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	601a      	str	r2, [r3, #0]
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	332c      	adds	r3, #44	; 0x2c
 8014d0a:	4618      	mov	r0, r3
 8014d0c:	f7ff fe00 	bl	8014910 <_ZN10TestResultD1Ev>
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	331c      	adds	r3, #28
 8014d14:	4618      	mov	r0, r3
 8014d16:	f7f6 f815 	bl	800ad44 <_ZN17ConsoleTestOutputD1Ev>
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	4618      	mov	r0, r3
 8014d1e:	f000 f943 	bl	8014fa8 <_ZN10UtestShellD1Ev>
    }
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	4618      	mov	r0, r3
 8014d26:	3708      	adds	r7, #8
 8014d28:	46bd      	mov	sp, r7
 8014d2a:	bd80      	pop	{r7, pc}
 8014d2c:	0802b8b8 	.word	0x0802b8b8

08014d30 <_ZN22OutsideTestRunnerUTestD0Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 8014d30:	b580      	push	{r7, lr}
 8014d32:	b082      	sub	sp, #8
 8014d34:	af00      	add	r7, sp, #0
 8014d36:	6078      	str	r0, [r7, #4]
    }
 8014d38:	6878      	ldr	r0, [r7, #4]
 8014d3a:	f7ff ffdd 	bl	8014cf8 <_ZN22OutsideTestRunnerUTestD1Ev>
 8014d3e:	2164      	movs	r1, #100	; 0x64
 8014d40:	6878      	ldr	r0, [r7, #4]
 8014d42:	f7f7 fd03 	bl	800c74c <_ZdlPvj>
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	4618      	mov	r0, r3
 8014d4a:	3708      	adds	r7, #8
 8014d4c:	46bd      	mov	sp, r7
 8014d4e:	bd80      	pop	{r7, pc}

08014d50 <_ZN22OutsideTestRunnerUTestC1Ev>:
private:
    OutsideTestRunnerUTest() :
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b084      	sub	sp, #16
 8014d54:	af02      	add	r7, sp, #8
 8014d56:	6078      	str	r0, [r7, #4]
        UtestShell("\n\t NOTE: Assertion happened without being in a test run (perhaps in main?)", "\n\t       Something is very wrong. Check this assertion and fix", "unknown file", 0),
                defaultTestResult(defaultOutput)
 8014d58:	6878      	ldr	r0, [r7, #4]
 8014d5a:	2300      	movs	r3, #0
 8014d5c:	9300      	str	r3, [sp, #0]
 8014d5e:	4b0d      	ldr	r3, [pc, #52]	; (8014d94 <_ZN22OutsideTestRunnerUTestC1Ev+0x44>)
 8014d60:	4a0d      	ldr	r2, [pc, #52]	; (8014d98 <_ZN22OutsideTestRunnerUTestC1Ev+0x48>)
 8014d62:	490e      	ldr	r1, [pc, #56]	; (8014d9c <_ZN22OutsideTestRunnerUTestC1Ev+0x4c>)
 8014d64:	f000 f8f8 	bl	8014f58 <_ZN10UtestShellC1EPKcS1_S1_j>
 8014d68:	4a0d      	ldr	r2, [pc, #52]	; (8014da0 <_ZN22OutsideTestRunnerUTestC1Ev+0x50>)
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	601a      	str	r2, [r3, #0]
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	331c      	adds	r3, #28
 8014d72:	4618      	mov	r0, r3
 8014d74:	f7f5 ffd4 	bl	800ad20 <_ZN17ConsoleTestOutputC1Ev>
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	331c      	adds	r3, #28
 8014d82:	4619      	mov	r1, r3
 8014d84:	4610      	mov	r0, r2
 8014d86:	f7ff fd8b 	bl	80148a0 <_ZN10TestResultC1ER10TestOutput>
    {
    }
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	4618      	mov	r0, r3
 8014d8e:	3708      	adds	r7, #8
 8014d90:	46bd      	mov	sp, r7
 8014d92:	bd80      	pop	{r7, pc}
 8014d94:	08027a70 	.word	0x08027a70
 8014d98:	08027a80 	.word	0x08027a80
 8014d9c:	08027ac0 	.word	0x08027ac0
 8014da0:	0802b8b8 	.word	0x0802b8b8

08014da4 <__tcf_0>:
    TestResult defaultTestResult;
};

OutsideTestRunnerUTest& OutsideTestRunnerUTest::instance()
{
    static OutsideTestRunnerUTest instance_;
 8014da4:	b580      	push	{r7, lr}
 8014da6:	af00      	add	r7, sp, #0
 8014da8:	4801      	ldr	r0, [pc, #4]	; (8014db0 <__tcf_0+0xc>)
 8014daa:	f7ff ffa5 	bl	8014cf8 <_ZN22OutsideTestRunnerUTestD1Ev>
 8014dae:	bd80      	pop	{r7, pc}
 8014db0:	20000bc8 	.word	0x20000bc8

08014db4 <_ZN22OutsideTestRunnerUTest8instanceEv>:
{
 8014db4:	b580      	push	{r7, lr}
 8014db6:	af00      	add	r7, sp, #0
    static OutsideTestRunnerUTest instance_;
 8014db8:	4b12      	ldr	r3, [pc, #72]	; (8014e04 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8014dba:	781b      	ldrb	r3, [r3, #0]
 8014dbc:	f3bf 8f5b 	dmb	ish
 8014dc0:	b2db      	uxtb	r3, r3
 8014dc2:	f003 0301 	and.w	r3, r3, #1
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	bf0c      	ite	eq
 8014dca:	2301      	moveq	r3, #1
 8014dcc:	2300      	movne	r3, #0
 8014dce:	b2db      	uxtb	r3, r3
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d013      	beq.n	8014dfc <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 8014dd4:	480b      	ldr	r0, [pc, #44]	; (8014e04 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8014dd6:	f00c ff27 	bl	8021c28 <__cxa_guard_acquire>
 8014dda:	4603      	mov	r3, r0
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	bf14      	ite	ne
 8014de0:	2301      	movne	r3, #1
 8014de2:	2300      	moveq	r3, #0
 8014de4:	b2db      	uxtb	r3, r3
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d008      	beq.n	8014dfc <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 8014dea:	4807      	ldr	r0, [pc, #28]	; (8014e08 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
 8014dec:	f7ff ffb0 	bl	8014d50 <_ZN22OutsideTestRunnerUTestC1Ev>
 8014df0:	4804      	ldr	r0, [pc, #16]	; (8014e04 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8014df2:	f00c ff25 	bl	8021c40 <__cxa_guard_release>
 8014df6:	4805      	ldr	r0, [pc, #20]	; (8014e0c <_ZN22OutsideTestRunnerUTest8instanceEv+0x58>)
 8014df8:	f00c ff49 	bl	8021c8e <atexit>
    return instance_;
 8014dfc:	4b02      	ldr	r3, [pc, #8]	; (8014e08 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
}
 8014dfe:	4618      	mov	r0, r3
 8014e00:	bd80      	pop	{r7, pc}
 8014e02:	bf00      	nop
 8014e04:	20000c2c 	.word	0x20000c2c
 8014e08:	20000bc8 	.word	0x20000bc8
 8014e0c:	08014da5 	.word	0x08014da5

08014e10 <helperDoTestSetup>:
 */

extern "C" {

    static void helperDoTestSetup(void* data)
    {
 8014e10:	b580      	push	{r7, lr}
 8014e12:	b082      	sub	sp, #8
 8014e14:	af00      	add	r7, sp, #0
 8014e16:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->setup();
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	330c      	adds	r3, #12
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	6878      	ldr	r0, [r7, #4]
 8014e22:	4798      	blx	r3
    }
 8014e24:	bf00      	nop
 8014e26:	3708      	adds	r7, #8
 8014e28:	46bd      	mov	sp, r7
 8014e2a:	bd80      	pop	{r7, pc}

08014e2c <helperDoTestBody>:

    static void helperDoTestBody(void* data)
    {
 8014e2c:	b580      	push	{r7, lr}
 8014e2e:	b082      	sub	sp, #8
 8014e30:	af00      	add	r7, sp, #0
 8014e32:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->testBody();
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	3314      	adds	r3, #20
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	6878      	ldr	r0, [r7, #4]
 8014e3e:	4798      	blx	r3
    }
 8014e40:	bf00      	nop
 8014e42:	3708      	adds	r7, #8
 8014e44:	46bd      	mov	sp, r7
 8014e46:	bd80      	pop	{r7, pc}

08014e48 <helperDoTestTeardown>:

    static void helperDoTestTeardown(void* data)
    {
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b082      	sub	sp, #8
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->teardown();
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	3310      	adds	r3, #16
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	6878      	ldr	r0, [r7, #4]
 8014e5a:	4798      	blx	r3
    }
 8014e5c:	bf00      	nop
 8014e5e:	3708      	adds	r7, #8
 8014e60:	46bd      	mov	sp, r7
 8014e62:	bd80      	pop	{r7, pc}

08014e64 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>:

    struct HelperTestRunInfo
    {
        HelperTestRunInfo(UtestShell* shell, TestPlugin* plugin, TestResult* result) : shell_(shell), plugin_(plugin), result_(result){}
 8014e64:	b480      	push	{r7}
 8014e66:	b085      	sub	sp, #20
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	60f8      	str	r0, [r7, #12]
 8014e6c:	60b9      	str	r1, [r7, #8]
 8014e6e:	607a      	str	r2, [r7, #4]
 8014e70:	603b      	str	r3, [r7, #0]
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	68ba      	ldr	r2, [r7, #8]
 8014e76:	601a      	str	r2, [r3, #0]
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	687a      	ldr	r2, [r7, #4]
 8014e7c:	605a      	str	r2, [r3, #4]
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	683a      	ldr	r2, [r7, #0]
 8014e82:	609a      	str	r2, [r3, #8]
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	4618      	mov	r0, r3
 8014e88:	3714      	adds	r7, #20
 8014e8a:	46bd      	mov	sp, r7
 8014e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e90:	4770      	bx	lr

08014e92 <helperDoRunOneTestInCurrentProcess>:
        TestPlugin* plugin_;
        TestResult* result_;
    };

    static void helperDoRunOneTestInCurrentProcess(void* data)
    {
 8014e92:	b580      	push	{r7, lr}
 8014e94:	b086      	sub	sp, #24
 8014e96:	af00      	add	r7, sp, #0
 8014e98:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 8014e9e:	697b      	ldr	r3, [r7, #20]
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 8014ea4:	697b      	ldr	r3, [r7, #20]
 8014ea6:	685b      	ldr	r3, [r3, #4]
 8014ea8:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 8014eaa:	697b      	ldr	r3, [r7, #20]
 8014eac:	689b      	ldr	r3, [r3, #8]
 8014eae:	60bb      	str	r3, [r7, #8]

        shell->runOneTestInCurrentProcess(plugin, *result);
 8014eb0:	693b      	ldr	r3, [r7, #16]
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	3394      	adds	r3, #148	; 0x94
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	68ba      	ldr	r2, [r7, #8]
 8014eba:	68f9      	ldr	r1, [r7, #12]
 8014ebc:	6938      	ldr	r0, [r7, #16]
 8014ebe:	4798      	blx	r3
    }
 8014ec0:	bf00      	nop
 8014ec2:	3718      	adds	r7, #24
 8014ec4:	46bd      	mov	sp, r7
 8014ec6:	bd80      	pop	{r7, pc}

08014ec8 <helperDoRunOneTestSeperateProcess>:

    static void helperDoRunOneTestSeperateProcess(void* data)
    {
 8014ec8:	b580      	push	{r7, lr}
 8014eca:	b086      	sub	sp, #24
 8014ecc:	af00      	add	r7, sp, #0
 8014ece:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 8014ed4:	697b      	ldr	r3, [r7, #20]
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 8014eda:	697b      	ldr	r3, [r7, #20]
 8014edc:	685b      	ldr	r3, [r3, #4]
 8014ede:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 8014ee0:	697b      	ldr	r3, [r7, #20]
 8014ee2:	689b      	ldr	r3, [r3, #8]
 8014ee4:	60bb      	str	r3, [r7, #8]
        PlatformSpecificRunTestInASeperateProcess(shell, plugin, result);
 8014ee6:	4b05      	ldr	r3, [pc, #20]	; (8014efc <helperDoRunOneTestSeperateProcess+0x34>)
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	68ba      	ldr	r2, [r7, #8]
 8014eec:	68f9      	ldr	r1, [r7, #12]
 8014eee:	6938      	ldr	r0, [r7, #16]
 8014ef0:	4798      	blx	r3
    }
 8014ef2:	bf00      	nop
 8014ef4:	3718      	adds	r7, #24
 8014ef6:	46bd      	mov	sp, r7
 8014ef8:	bd80      	pop	{r7, pc}
 8014efa:	bf00      	nop
 8014efc:	2000009c 	.word	0x2000009c

08014f00 <_ZN10UtestShellC1Ev>:

const TestTerminator *UtestShell::currentTestTerminator_ = &normalTestTerminator;

/******************************** */

UtestShell::UtestShell() :
 8014f00:	b480      	push	{r7}
 8014f02:	b083      	sub	sp, #12
 8014f04:	af00      	add	r7, sp, #0
 8014f06:	6078      	str	r0, [r7, #4]
    group_("UndefinedTestGroup"), name_("UndefinedTest"), file_("UndefinedFile"), lineNumber_(0), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 8014f08:	4a0f      	ldr	r2, [pc, #60]	; (8014f48 <_ZN10UtestShellC1Ev+0x48>)
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	601a      	str	r2, [r3, #0]
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	4a0e      	ldr	r2, [pc, #56]	; (8014f4c <_ZN10UtestShellC1Ev+0x4c>)
 8014f12:	605a      	str	r2, [r3, #4]
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	4a0e      	ldr	r2, [pc, #56]	; (8014f50 <_ZN10UtestShellC1Ev+0x50>)
 8014f18:	609a      	str	r2, [r3, #8]
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	4a0d      	ldr	r2, [pc, #52]	; (8014f54 <_ZN10UtestShellC1Ev+0x54>)
 8014f1e:	60da      	str	r2, [r3, #12]
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	2200      	movs	r2, #0
 8014f24:	611a      	str	r2, [r3, #16]
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	2200      	movs	r2, #0
 8014f2a:	615a      	str	r2, [r3, #20]
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	2200      	movs	r2, #0
 8014f30:	761a      	strb	r2, [r3, #24]
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	2200      	movs	r2, #0
 8014f36:	765a      	strb	r2, [r3, #25]
{
}
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	370c      	adds	r7, #12
 8014f3e:	46bd      	mov	sp, r7
 8014f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f44:	4770      	bx	lr
 8014f46:	bf00      	nop
 8014f48:	0802b978 	.word	0x0802b978
 8014f4c:	08027b0c 	.word	0x08027b0c
 8014f50:	08027b20 	.word	0x08027b20
 8014f54:	08027b30 	.word	0x08027b30

08014f58 <_ZN10UtestShellC1EPKcS1_S1_j>:

UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber) :
 8014f58:	b480      	push	{r7}
 8014f5a:	b085      	sub	sp, #20
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	60f8      	str	r0, [r7, #12]
 8014f60:	60b9      	str	r1, [r7, #8]
 8014f62:	607a      	str	r2, [r7, #4]
 8014f64:	603b      	str	r3, [r7, #0]
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 8014f66:	4a0f      	ldr	r2, [pc, #60]	; (8014fa4 <_ZN10UtestShellC1EPKcS1_S1_j+0x4c>)
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	601a      	str	r2, [r3, #0]
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	68ba      	ldr	r2, [r7, #8]
 8014f70:	605a      	str	r2, [r3, #4]
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	687a      	ldr	r2, [r7, #4]
 8014f76:	609a      	str	r2, [r3, #8]
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	683a      	ldr	r2, [r7, #0]
 8014f7c:	60da      	str	r2, [r3, #12]
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	69ba      	ldr	r2, [r7, #24]
 8014f82:	611a      	str	r2, [r3, #16]
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	2200      	movs	r2, #0
 8014f88:	615a      	str	r2, [r3, #20]
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	2200      	movs	r2, #0
 8014f8e:	761a      	strb	r2, [r3, #24]
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	2200      	movs	r2, #0
 8014f94:	765a      	strb	r2, [r3, #25]
{
}
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	4618      	mov	r0, r3
 8014f9a:	3714      	adds	r7, #20
 8014f9c:	46bd      	mov	sp, r7
 8014f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa2:	4770      	bx	lr
 8014fa4:	0802b978 	.word	0x0802b978

08014fa8 <_ZN10UtestShellD1Ev>:
UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber, UtestShell* nextTest) :
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(nextTest), isRunAsSeperateProcess_(false), hasFailed_(false)
{
}

UtestShell::~UtestShell()
 8014fa8:	b480      	push	{r7}
 8014faa:	b083      	sub	sp, #12
 8014fac:	af00      	add	r7, sp, #0
 8014fae:	6078      	str	r0, [r7, #4]
 8014fb0:	4a04      	ldr	r2, [pc, #16]	; (8014fc4 <_ZN10UtestShellD1Ev+0x1c>)
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	601a      	str	r2, [r3, #0]
{
}
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	4618      	mov	r0, r3
 8014fba:	370c      	adds	r7, #12
 8014fbc:	46bd      	mov	sp, r7
 8014fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fc2:	4770      	bx	lr
 8014fc4:	0802b978 	.word	0x0802b978

08014fc8 <_ZN10UtestShellD0Ev>:
UtestShell::~UtestShell()
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	b082      	sub	sp, #8
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	6078      	str	r0, [r7, #4]
}
 8014fd0:	6878      	ldr	r0, [r7, #4]
 8014fd2:	f7ff ffe9 	bl	8014fa8 <_ZN10UtestShellD1Ev>
 8014fd6:	211c      	movs	r1, #28
 8014fd8:	6878      	ldr	r0, [r7, #4]
 8014fda:	f7f7 fbb7 	bl	800c74c <_ZdlPvj>
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	4618      	mov	r0, r3
 8014fe2:	3708      	adds	r7, #8
 8014fe4:	46bd      	mov	sp, r7
 8014fe6:	bd80      	pop	{r7, pc}

08014fe8 <_ZL18defaultCrashMethodv>:
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Wnonnull"
#endif /* NEEDS_DISABLE_NULL_WARNING */

static void defaultCrashMethod()
{
 8014fe8:	b580      	push	{r7, lr}
 8014fea:	b082      	sub	sp, #8
 8014fec:	af00      	add	r7, sp, #0
    UtestShell* ptr = (UtestShell*) NULLPTR;
 8014fee:	2300      	movs	r3, #0
 8014ff0:	607b      	str	r3, [r7, #4]
    ptr->countTests();
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	3310      	adds	r3, #16
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	6878      	ldr	r0, [r7, #4]
 8014ffc:	4798      	blx	r3
}
 8014ffe:	bf00      	nop
 8015000:	3708      	adds	r7, #8
 8015002:	46bd      	mov	sp, r7
 8015004:	bd80      	pop	{r7, pc}
	...

08015008 <_ZN10UtestShell5crashEv>:
{
    pleaseCrashMeRightNow = defaultCrashMethod;
}

void UtestShell::crash()
{
 8015008:	b580      	push	{r7, lr}
 801500a:	af00      	add	r7, sp, #0
    pleaseCrashMeRightNow();
 801500c:	4b02      	ldr	r3, [pc, #8]	; (8015018 <_ZN10UtestShell5crashEv+0x10>)
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	4798      	blx	r3
}
 8015012:	bf00      	nop
 8015014:	bd80      	pop	{r7, pc}
 8015016:	bf00      	nop
 8015018:	20000098 	.word	0x20000098

0801501c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult>:

void UtestShell::runOneTest(TestPlugin* plugin, TestResult& result)
{
 801501c:	b580      	push	{r7, lr}
 801501e:	b088      	sub	sp, #32
 8015020:	af00      	add	r7, sp, #0
 8015022:	60f8      	str	r0, [r7, #12]
 8015024:	60b9      	str	r1, [r7, #8]
 8015026:	607a      	str	r2, [r7, #4]
    hasFailed_ = false;
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	2200      	movs	r2, #0
 801502c:	765a      	strb	r2, [r3, #25]
    result.countRun();
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	3324      	adds	r3, #36	; 0x24
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	6878      	ldr	r0, [r7, #4]
 8015038:	4798      	blx	r3
    HelperTestRunInfo runInfo(this, plugin, &result);
 801503a:	f107 0014 	add.w	r0, r7, #20
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	68ba      	ldr	r2, [r7, #8]
 8015042:	68f9      	ldr	r1, [r7, #12]
 8015044:	f7ff ff0e 	bl	8014e64 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>
    if (isRunInSeperateProcess())
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	337c      	adds	r3, #124	; 0x7c
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	68f8      	ldr	r0, [r7, #12]
 8015052:	4798      	blx	r3
 8015054:	4603      	mov	r3, r0
 8015056:	2b00      	cmp	r3, #0
 8015058:	d007      	beq.n	801506a <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x4e>
        PlatformSpecificSetJmp(helperDoRunOneTestSeperateProcess, &runInfo);
 801505a:	4b09      	ldr	r3, [pc, #36]	; (8015080 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	f107 0214 	add.w	r2, r7, #20
 8015062:	4611      	mov	r1, r2
 8015064:	4807      	ldr	r0, [pc, #28]	; (8015084 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x68>)
 8015066:	4798      	blx	r3
    else
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
}
 8015068:	e006      	b.n	8015078 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x5c>
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
 801506a:	4b05      	ldr	r3, [pc, #20]	; (8015080 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 801506c:	681b      	ldr	r3, [r3, #0]
 801506e:	f107 0214 	add.w	r2, r7, #20
 8015072:	4611      	mov	r1, r2
 8015074:	4804      	ldr	r0, [pc, #16]	; (8015088 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x6c>)
 8015076:	4798      	blx	r3
}
 8015078:	bf00      	nop
 801507a:	3720      	adds	r7, #32
 801507c:	46bd      	mov	sp, r7
 801507e:	bd80      	pop	{r7, pc}
 8015080:	200000a4 	.word	0x200000a4
 8015084:	08014ec9 	.word	0x08014ec9
 8015088:	08014e93 	.word	0x08014e93

0801508c <_ZN10UtestShell10createTestEv>:

Utest* UtestShell::createTest()
{
 801508c:	b590      	push	{r4, r7, lr}
 801508e:	b083      	sub	sp, #12
 8015090:	af00      	add	r7, sp, #0
 8015092:	6078      	str	r0, [r7, #4]
    return new Utest();
 8015094:	22d3      	movs	r2, #211	; 0xd3
 8015096:	4906      	ldr	r1, [pc, #24]	; (80150b0 <_ZN10UtestShell10createTestEv+0x24>)
 8015098:	2004      	movs	r0, #4
 801509a:	f7f7 fb43 	bl	800c724 <_ZnwjPKci>
 801509e:	4604      	mov	r4, r0
 80150a0:	4620      	mov	r0, r4
 80150a2:	f001 fb0f 	bl	80166c4 <_ZN5UtestC1Ev>
 80150a6:	4623      	mov	r3, r4
}
 80150a8:	4618      	mov	r0, r3
 80150aa:	370c      	adds	r7, #12
 80150ac:	46bd      	mov	sp, r7
 80150ae:	bd90      	pop	{r4, r7, pc}
 80150b0:	08027b40 	.word	0x08027b40

080150b4 <_ZN10UtestShell11destroyTestEP5Utest>:

void UtestShell::destroyTest(Utest* test)
{
 80150b4:	b580      	push	{r7, lr}
 80150b6:	b082      	sub	sp, #8
 80150b8:	af00      	add	r7, sp, #0
 80150ba:	6078      	str	r0, [r7, #4]
 80150bc:	6039      	str	r1, [r7, #0]
    delete test;
 80150be:	683b      	ldr	r3, [r7, #0]
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d004      	beq.n	80150ce <_ZN10UtestShell11destroyTestEP5Utest+0x1a>
 80150c4:	681a      	ldr	r2, [r3, #0]
 80150c6:	3204      	adds	r2, #4
 80150c8:	6812      	ldr	r2, [r2, #0]
 80150ca:	4618      	mov	r0, r3
 80150cc:	4790      	blx	r2
}
 80150ce:	bf00      	nop
 80150d0:	3708      	adds	r7, #8
 80150d2:	46bd      	mov	sp, r7
 80150d4:	bd80      	pop	{r7, pc}
	...

080150d8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult>:

void UtestShell::runOneTestInCurrentProcess(TestPlugin* plugin, TestResult& result)
{
 80150d8:	b580      	push	{r7, lr}
 80150da:	b088      	sub	sp, #32
 80150dc:	af00      	add	r7, sp, #0
 80150de:	60f8      	str	r0, [r7, #12]
 80150e0:	60b9      	str	r1, [r7, #8]
 80150e2:	607a      	str	r2, [r7, #4]
    result.printVeryVerbose("\n-- before runAllPreTestAction: ");
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	333c      	adds	r3, #60	; 0x3c
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	4940      	ldr	r1, [pc, #256]	; (80151f0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x118>)
 80150ee:	6878      	ldr	r0, [r7, #4]
 80150f0:	4798      	blx	r3
    plugin->runAllPreTestAction(*this, result);
 80150f2:	68bb      	ldr	r3, [r7, #8]
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	3314      	adds	r3, #20
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	687a      	ldr	r2, [r7, #4]
 80150fc:	68f9      	ldr	r1, [r7, #12]
 80150fe:	68b8      	ldr	r0, [r7, #8]
 8015100:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPreTestAction: ");
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	333c      	adds	r3, #60	; 0x3c
 8015108:	681b      	ldr	r3, [r3, #0]
 801510a:	493a      	ldr	r1, [pc, #232]	; (80151f4 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x11c>)
 801510c:	6878      	ldr	r0, [r7, #4]
 801510e:	4798      	blx	r3

    //save test context, so that test class can be tested
    UtestShell* savedTest = UtestShell::getCurrent();
 8015110:	f001 faae 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8015114:	61f8      	str	r0, [r7, #28]
    TestResult* savedResult = UtestShell::getTestResult();
 8015116:	68f8      	ldr	r0, [r7, #12]
 8015118:	f001 fa90 	bl	801663c <_ZN10UtestShell13getTestResultEv>
 801511c:	61b8      	str	r0, [r7, #24]

    UtestShell::setTestResult(&result);
 801511e:	6879      	ldr	r1, [r7, #4]
 8015120:	68f8      	ldr	r0, [r7, #12]
 8015122:	f001 fa6b 	bl	80165fc <_ZN10UtestShell13setTestResultEP10TestResult>
    UtestShell::setCurrentTest(this);
 8015126:	68f9      	ldr	r1, [r7, #12]
 8015128:	68f8      	ldr	r0, [r7, #12]
 801512a:	f001 fa77 	bl	801661c <_ZN10UtestShell14setCurrentTestEPS_>

    result.printVeryVerbose("\n---- before createTest: ");
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	681b      	ldr	r3, [r3, #0]
 8015132:	333c      	adds	r3, #60	; 0x3c
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	4930      	ldr	r1, [pc, #192]	; (80151f8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x120>)
 8015138:	6878      	ldr	r0, [r7, #4]
 801513a:	4798      	blx	r3
    Utest* testToRun = createTest();
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	3388      	adds	r3, #136	; 0x88
 8015142:	681b      	ldr	r3, [r3, #0]
 8015144:	68f8      	ldr	r0, [r7, #12]
 8015146:	4798      	blx	r3
 8015148:	6178      	str	r0, [r7, #20]
    result.printVeryVerbose("\n---- after createTest: ");
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	333c      	adds	r3, #60	; 0x3c
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	492a      	ldr	r1, [pc, #168]	; (80151fc <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x124>)
 8015154:	6878      	ldr	r0, [r7, #4]
 8015156:	4798      	blx	r3

    result.printVeryVerbose("\n------ before runTest: ");
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	333c      	adds	r3, #60	; 0x3c
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	4927      	ldr	r1, [pc, #156]	; (8015200 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x128>)
 8015162:	6878      	ldr	r0, [r7, #4]
 8015164:	4798      	blx	r3
    testToRun->run();
 8015166:	697b      	ldr	r3, [r7, #20]
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	3308      	adds	r3, #8
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	6978      	ldr	r0, [r7, #20]
 8015170:	4798      	blx	r3
    result.printVeryVerbose("\n------ after runTest: ");
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	333c      	adds	r3, #60	; 0x3c
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	4922      	ldr	r1, [pc, #136]	; (8015204 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x12c>)
 801517c:	6878      	ldr	r0, [r7, #4]
 801517e:	4798      	blx	r3

    UtestShell::setCurrentTest(savedTest);
 8015180:	69f9      	ldr	r1, [r7, #28]
 8015182:	68f8      	ldr	r0, [r7, #12]
 8015184:	f001 fa4a 	bl	801661c <_ZN10UtestShell14setCurrentTestEPS_>
    UtestShell::setTestResult(savedResult);
 8015188:	69b9      	ldr	r1, [r7, #24]
 801518a:	68f8      	ldr	r0, [r7, #12]
 801518c:	f001 fa36 	bl	80165fc <_ZN10UtestShell13setTestResultEP10TestResult>

    result.printVeryVerbose("\n---- before destroyTest: ");
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	681b      	ldr	r3, [r3, #0]
 8015194:	333c      	adds	r3, #60	; 0x3c
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	491b      	ldr	r1, [pc, #108]	; (8015208 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x130>)
 801519a:	6878      	ldr	r0, [r7, #4]
 801519c:	4798      	blx	r3
    destroyTest(testToRun);
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	338c      	adds	r3, #140	; 0x8c
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	6979      	ldr	r1, [r7, #20]
 80151a8:	68f8      	ldr	r0, [r7, #12]
 80151aa:	4798      	blx	r3
    result.printVeryVerbose("\n---- after destroyTest: ");
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	333c      	adds	r3, #60	; 0x3c
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	4915      	ldr	r1, [pc, #84]	; (801520c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x134>)
 80151b6:	6878      	ldr	r0, [r7, #4]
 80151b8:	4798      	blx	r3

    result.printVeryVerbose("\n-- before runAllPostTestAction: ");
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	333c      	adds	r3, #60	; 0x3c
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	4913      	ldr	r1, [pc, #76]	; (8015210 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x138>)
 80151c4:	6878      	ldr	r0, [r7, #4]
 80151c6:	4798      	blx	r3
    plugin->runAllPostTestAction(*this, result);
 80151c8:	68bb      	ldr	r3, [r7, #8]
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	3318      	adds	r3, #24
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	687a      	ldr	r2, [r7, #4]
 80151d2:	68f9      	ldr	r1, [r7, #12]
 80151d4:	68b8      	ldr	r0, [r7, #8]
 80151d6:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPostTestAction: ");
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	333c      	adds	r3, #60	; 0x3c
 80151de:	681b      	ldr	r3, [r3, #0]
 80151e0:	490c      	ldr	r1, [pc, #48]	; (8015214 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x13c>)
 80151e2:	6878      	ldr	r0, [r7, #4]
 80151e4:	4798      	blx	r3
}
 80151e6:	bf00      	nop
 80151e8:	3720      	adds	r7, #32
 80151ea:	46bd      	mov	sp, r7
 80151ec:	bd80      	pop	{r7, pc}
 80151ee:	bf00      	nop
 80151f0:	08027b54 	.word	0x08027b54
 80151f4:	08027b78 	.word	0x08027b78
 80151f8:	08027b98 	.word	0x08027b98
 80151fc:	08027bb4 	.word	0x08027bb4
 8015200:	08027bd0 	.word	0x08027bd0
 8015204:	08027bec 	.word	0x08027bec
 8015208:	08027c04 	.word	0x08027c04
 801520c:	08027c20 	.word	0x08027c20
 8015210:	08027c3c 	.word	0x08027c3c
 8015214:	08027c60 	.word	0x08027c60

08015218 <_ZNK10UtestShell7getNextEv>:

UtestShell *UtestShell::getNext() const
{
 8015218:	b480      	push	{r7}
 801521a:	b083      	sub	sp, #12
 801521c:	af00      	add	r7, sp, #0
 801521e:	6078      	str	r0, [r7, #4]
    return next_;
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	695b      	ldr	r3, [r3, #20]
}
 8015224:	4618      	mov	r0, r3
 8015226:	370c      	adds	r7, #12
 8015228:	46bd      	mov	sp, r7
 801522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801522e:	4770      	bx	lr

08015230 <_ZN10UtestShell7addTestEPS_>:

UtestShell* UtestShell::addTest(UtestShell *test)
{
 8015230:	b480      	push	{r7}
 8015232:	b083      	sub	sp, #12
 8015234:	af00      	add	r7, sp, #0
 8015236:	6078      	str	r0, [r7, #4]
 8015238:	6039      	str	r1, [r7, #0]
    next_ = test;
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	683a      	ldr	r2, [r7, #0]
 801523e:	615a      	str	r2, [r3, #20]
    return this;
 8015240:	687b      	ldr	r3, [r7, #4]
}
 8015242:	4618      	mov	r0, r3
 8015244:	370c      	adds	r7, #12
 8015246:	46bd      	mov	sp, r7
 8015248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801524c:	4770      	bx	lr

0801524e <_ZN10UtestShell10countTestsEv>:

size_t UtestShell::countTests()
{
 801524e:	b580      	push	{r7, lr}
 8015250:	b082      	sub	sp, #8
 8015252:	af00      	add	r7, sp, #0
 8015254:	6078      	str	r0, [r7, #4]
    return next_ ? next_->countTests() + 1 : 1;
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	695b      	ldr	r3, [r3, #20]
 801525a:	2b00      	cmp	r3, #0
 801525c:	d00b      	beq.n	8015276 <_ZN10UtestShell10countTestsEv+0x28>
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	695a      	ldr	r2, [r3, #20]
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	695b      	ldr	r3, [r3, #20]
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	3310      	adds	r3, #16
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	4610      	mov	r0, r2
 801526e:	4798      	blx	r3
 8015270:	4603      	mov	r3, r0
 8015272:	3301      	adds	r3, #1
 8015274:	e000      	b.n	8015278 <_ZN10UtestShell10countTestsEv+0x2a>
 8015276:	2301      	movs	r3, #1
}
 8015278:	4618      	mov	r0, r3
 801527a:	3708      	adds	r7, #8
 801527c:	46bd      	mov	sp, r7
 801527e:	bd80      	pop	{r7, pc}

08015280 <_ZNK10UtestShell12getMacroNameEv>:

SimpleString UtestShell::getMacroName() const
{
 8015280:	b580      	push	{r7, lr}
 8015282:	b082      	sub	sp, #8
 8015284:	af00      	add	r7, sp, #0
 8015286:	6078      	str	r0, [r7, #4]
 8015288:	6039      	str	r1, [r7, #0]
    return "TEST";
 801528a:	4904      	ldr	r1, [pc, #16]	; (801529c <_ZNK10UtestShell12getMacroNameEv+0x1c>)
 801528c:	6878      	ldr	r0, [r7, #4]
 801528e:	f7f9 fe0c 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
}
 8015292:	6878      	ldr	r0, [r7, #4]
 8015294:	3708      	adds	r7, #8
 8015296:	46bd      	mov	sp, r7
 8015298:	bd80      	pop	{r7, pc}
 801529a:	bf00      	nop
 801529c:	08027c84 	.word	0x08027c84

080152a0 <_ZNK10UtestShell7getNameEv>:

const SimpleString UtestShell::getName() const
{
 80152a0:	b580      	push	{r7, lr}
 80152a2:	b082      	sub	sp, #8
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	6078      	str	r0, [r7, #4]
 80152a8:	6039      	str	r1, [r7, #0]
    return SimpleString(name_);
 80152aa:	683b      	ldr	r3, [r7, #0]
 80152ac:	689b      	ldr	r3, [r3, #8]
 80152ae:	4619      	mov	r1, r3
 80152b0:	6878      	ldr	r0, [r7, #4]
 80152b2:	f7f9 fdfa 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
}
 80152b6:	6878      	ldr	r0, [r7, #4]
 80152b8:	3708      	adds	r7, #8
 80152ba:	46bd      	mov	sp, r7
 80152bc:	bd80      	pop	{r7, pc}

080152be <_ZNK10UtestShell8getGroupEv>:

const SimpleString UtestShell::getGroup() const
{
 80152be:	b580      	push	{r7, lr}
 80152c0:	b082      	sub	sp, #8
 80152c2:	af00      	add	r7, sp, #0
 80152c4:	6078      	str	r0, [r7, #4]
 80152c6:	6039      	str	r1, [r7, #0]
    return SimpleString(group_);
 80152c8:	683b      	ldr	r3, [r7, #0]
 80152ca:	685b      	ldr	r3, [r3, #4]
 80152cc:	4619      	mov	r1, r3
 80152ce:	6878      	ldr	r0, [r7, #4]
 80152d0:	f7f9 fdeb 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
}
 80152d4:	6878      	ldr	r0, [r7, #4]
 80152d6:	3708      	adds	r7, #8
 80152d8:	46bd      	mov	sp, r7
 80152da:	bd80      	pop	{r7, pc}

080152dc <_ZNK10UtestShell16getFormattedNameEv>:

SimpleString UtestShell::getFormattedName() const
{
 80152dc:	b580      	push	{r7, lr}
 80152de:	b082      	sub	sp, #8
 80152e0:	af00      	add	r7, sp, #0
 80152e2:	6078      	str	r0, [r7, #4]
 80152e4:	6039      	str	r1, [r7, #0]
    SimpleString formattedName(getMacroName());
 80152e6:	683b      	ldr	r3, [r7, #0]
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	33a0      	adds	r3, #160	; 0xa0
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	687a      	ldr	r2, [r7, #4]
 80152f0:	6839      	ldr	r1, [r7, #0]
 80152f2:	4610      	mov	r0, r2
 80152f4:	4798      	blx	r3
    formattedName += "(";
 80152f6:	490e      	ldr	r1, [pc, #56]	; (8015330 <_ZNK10UtestShell16getFormattedNameEv+0x54>)
 80152f8:	6878      	ldr	r0, [r7, #4]
 80152fa:	f7fa fa1d 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    formattedName += group_;
 80152fe:	683b      	ldr	r3, [r7, #0]
 8015300:	685b      	ldr	r3, [r3, #4]
 8015302:	4619      	mov	r1, r3
 8015304:	6878      	ldr	r0, [r7, #4]
 8015306:	f7fa fa17 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    formattedName += ", ";
 801530a:	490a      	ldr	r1, [pc, #40]	; (8015334 <_ZNK10UtestShell16getFormattedNameEv+0x58>)
 801530c:	6878      	ldr	r0, [r7, #4]
 801530e:	f7fa fa13 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    formattedName += name_;
 8015312:	683b      	ldr	r3, [r7, #0]
 8015314:	689b      	ldr	r3, [r3, #8]
 8015316:	4619      	mov	r1, r3
 8015318:	6878      	ldr	r0, [r7, #4]
 801531a:	f7fa fa0d 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    formattedName += ")";
 801531e:	4906      	ldr	r1, [pc, #24]	; (8015338 <_ZNK10UtestShell16getFormattedNameEv+0x5c>)
 8015320:	6878      	ldr	r0, [r7, #4]
 8015322:	f7fa fa09 	bl	800f738 <_ZN12SimpleStringpLEPKc>

    return formattedName;
 8015326:	bf00      	nop
}
 8015328:	6878      	ldr	r0, [r7, #4]
 801532a:	3708      	adds	r7, #8
 801532c:	46bd      	mov	sp, r7
 801532e:	bd80      	pop	{r7, pc}
 8015330:	08027c8c 	.word	0x08027c8c
 8015334:	08027c90 	.word	0x08027c90
 8015338:	08027c94 	.word	0x08027c94

0801533c <_ZNK10UtestShell9hasFailedEv>:

bool UtestShell::hasFailed() const
{
 801533c:	b480      	push	{r7}
 801533e:	b083      	sub	sp, #12
 8015340:	af00      	add	r7, sp, #0
 8015342:	6078      	str	r0, [r7, #4]
    return hasFailed_;
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	7e5b      	ldrb	r3, [r3, #25]
}
 8015348:	4618      	mov	r0, r3
 801534a:	370c      	adds	r7, #12
 801534c:	46bd      	mov	sp, r7
 801534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015352:	4770      	bx	lr

08015354 <_ZN10UtestShell10countCheckEv>:

void UtestShell::countCheck()
{
 8015354:	b580      	push	{r7, lr}
 8015356:	b082      	sub	sp, #8
 8015358:	af00      	add	r7, sp, #0
 801535a:	6078      	str	r0, [r7, #4]
    getTestResult()->countCheck();
 801535c:	6878      	ldr	r0, [r7, #4]
 801535e:	f001 f96d 	bl	801663c <_ZN10UtestShell13getTestResultEv>
 8015362:	4603      	mov	r3, r0
 8015364:	681a      	ldr	r2, [r3, #0]
 8015366:	3228      	adds	r2, #40	; 0x28
 8015368:	6812      	ldr	r2, [r2, #0]
 801536a:	4618      	mov	r0, r3
 801536c:	4790      	blx	r2
}
 801536e:	bf00      	nop
 8015370:	3708      	adds	r7, #8
 8015372:	46bd      	mov	sp, r7
 8015374:	bd80      	pop	{r7, pc}

08015376 <_ZNK10UtestShell7willRunEv>:

bool UtestShell::willRun() const
{
 8015376:	b480      	push	{r7}
 8015378:	b083      	sub	sp, #12
 801537a:	af00      	add	r7, sp, #0
 801537c:	6078      	str	r0, [r7, #4]
    return true;
 801537e:	2301      	movs	r3, #1
}
 8015380:	4618      	mov	r0, r3
 8015382:	370c      	adds	r7, #12
 8015384:	46bd      	mov	sp, r7
 8015386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801538a:	4770      	bx	lr

0801538c <_ZNK10UtestShell22isRunInSeperateProcessEv>:

bool UtestShell::isRunInSeperateProcess() const
{
 801538c:	b480      	push	{r7}
 801538e:	b083      	sub	sp, #12
 8015390:	af00      	add	r7, sp, #0
 8015392:	6078      	str	r0, [r7, #4]
    return isRunAsSeperateProcess_;
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	7e1b      	ldrb	r3, [r3, #24]
}
 8015398:	4618      	mov	r0, r3
 801539a:	370c      	adds	r7, #12
 801539c:	46bd      	mov	sp, r7
 801539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153a2:	4770      	bx	lr

080153a4 <_ZN10UtestShell23setRunInSeperateProcessEv>:

void UtestShell::setRunInSeperateProcess()
{
 80153a4:	b480      	push	{r7}
 80153a6:	b083      	sub	sp, #12
 80153a8:	af00      	add	r7, sp, #0
 80153aa:	6078      	str	r0, [r7, #4]
    isRunAsSeperateProcess_ = true;
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	2201      	movs	r2, #1
 80153b0:	761a      	strb	r2, [r3, #24]
}
 80153b2:	bf00      	nop
 80153b4:	370c      	adds	r7, #12
 80153b6:	46bd      	mov	sp, r7
 80153b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153bc:	4770      	bx	lr

080153be <_ZN10UtestShell13setRunIgnoredEv>:


void UtestShell::setRunIgnored()
{
 80153be:	b480      	push	{r7}
 80153c0:	b083      	sub	sp, #12
 80153c2:	af00      	add	r7, sp, #0
 80153c4:	6078      	str	r0, [r7, #4]

}
 80153c6:	bf00      	nop
 80153c8:	370c      	adds	r7, #12
 80153ca:	46bd      	mov	sp, r7
 80153cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d0:	4770      	bx	lr

080153d2 <_ZN10UtestShell11setFileNameEPKc>:

void UtestShell::setFileName(const char* fileName)
{
 80153d2:	b480      	push	{r7}
 80153d4:	b083      	sub	sp, #12
 80153d6:	af00      	add	r7, sp, #0
 80153d8:	6078      	str	r0, [r7, #4]
 80153da:	6039      	str	r1, [r7, #0]
    file_ = fileName;
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	683a      	ldr	r2, [r7, #0]
 80153e0:	60da      	str	r2, [r3, #12]
}
 80153e2:	bf00      	nop
 80153e4:	370c      	adds	r7, #12
 80153e6:	46bd      	mov	sp, r7
 80153e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ec:	4770      	bx	lr

080153ee <_ZN10UtestShell13setLineNumberEj>:

void UtestShell::setLineNumber(size_t lineNumber)
{
 80153ee:	b480      	push	{r7}
 80153f0:	b083      	sub	sp, #12
 80153f2:	af00      	add	r7, sp, #0
 80153f4:	6078      	str	r0, [r7, #4]
 80153f6:	6039      	str	r1, [r7, #0]
    lineNumber_ = lineNumber;
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	683a      	ldr	r2, [r7, #0]
 80153fc:	611a      	str	r2, [r3, #16]
}
 80153fe:	bf00      	nop
 8015400:	370c      	adds	r7, #12
 8015402:	46bd      	mov	sp, r7
 8015404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015408:	4770      	bx	lr

0801540a <_ZN10UtestShell12setGroupNameEPKc>:

void UtestShell::setGroupName(const char* groupName)
{
 801540a:	b480      	push	{r7}
 801540c:	b083      	sub	sp, #12
 801540e:	af00      	add	r7, sp, #0
 8015410:	6078      	str	r0, [r7, #4]
 8015412:	6039      	str	r1, [r7, #0]
    group_ = groupName;
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	683a      	ldr	r2, [r7, #0]
 8015418:	605a      	str	r2, [r3, #4]
}
 801541a:	bf00      	nop
 801541c:	370c      	adds	r7, #12
 801541e:	46bd      	mov	sp, r7
 8015420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015424:	4770      	bx	lr

08015426 <_ZN10UtestShell11setTestNameEPKc>:

void UtestShell::setTestName(const char* testName)
{
 8015426:	b480      	push	{r7}
 8015428:	b083      	sub	sp, #12
 801542a:	af00      	add	r7, sp, #0
 801542c:	6078      	str	r0, [r7, #4]
 801542e:	6039      	str	r1, [r7, #0]
    name_ = testName;
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	683a      	ldr	r2, [r7, #0]
 8015434:	609a      	str	r2, [r3, #8]
}
 8015436:	bf00      	nop
 8015438:	370c      	adds	r7, #12
 801543a:	46bd      	mov	sp, r7
 801543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015440:	4770      	bx	lr

08015442 <_ZNK10UtestShell7getFileEv>:

const SimpleString UtestShell::getFile() const
{
 8015442:	b580      	push	{r7, lr}
 8015444:	b082      	sub	sp, #8
 8015446:	af00      	add	r7, sp, #0
 8015448:	6078      	str	r0, [r7, #4]
 801544a:	6039      	str	r1, [r7, #0]
    return SimpleString(file_);
 801544c:	683b      	ldr	r3, [r7, #0]
 801544e:	68db      	ldr	r3, [r3, #12]
 8015450:	4619      	mov	r1, r3
 8015452:	6878      	ldr	r0, [r7, #4]
 8015454:	f7f9 fd29 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
}
 8015458:	6878      	ldr	r0, [r7, #4]
 801545a:	3708      	adds	r7, #8
 801545c:	46bd      	mov	sp, r7
 801545e:	bd80      	pop	{r7, pc}

08015460 <_ZNK10UtestShell13getLineNumberEv>:

size_t UtestShell::getLineNumber() const
{
 8015460:	b480      	push	{r7}
 8015462:	b083      	sub	sp, #12
 8015464:	af00      	add	r7, sp, #0
 8015466:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	691b      	ldr	r3, [r3, #16]
}
 801546c:	4618      	mov	r0, r3
 801546e:	370c      	adds	r7, #12
 8015470:	46bd      	mov	sp, r7
 8015472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015476:	4770      	bx	lr

08015478 <_ZNK10UtestShell5matchEPKcPK10TestFilter>:

bool UtestShell::match(const char* target, const TestFilter* filters) const
{
 8015478:	b590      	push	{r4, r7, lr}
 801547a:	b087      	sub	sp, #28
 801547c:	af00      	add	r7, sp, #0
 801547e:	60f8      	str	r0, [r7, #12]
 8015480:	60b9      	str	r1, [r7, #8]
 8015482:	607a      	str	r2, [r7, #4]
    if(filters == NULLPTR) return true;
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	2b00      	cmp	r3, #0
 8015488:	d101      	bne.n	801548e <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>
 801548a:	2301      	movs	r3, #1
 801548c:	e01f      	b.n	80154ce <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>

    for(; filters != NULLPTR; filters = filters->getNext())
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	2b00      	cmp	r3, #0
 8015492:	d01b      	beq.n	80154cc <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x54>
        if(filters->match(target)) return true;
 8015494:	f107 0310 	add.w	r3, r7, #16
 8015498:	68b9      	ldr	r1, [r7, #8]
 801549a:	4618      	mov	r0, r3
 801549c:	f7f9 fd05 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80154a0:	f107 0310 	add.w	r3, r7, #16
 80154a4:	4619      	mov	r1, r3
 80154a6:	6878      	ldr	r0, [r7, #4]
 80154a8:	f00c fb91 	bl	8021bce <_ZNK10TestFilter5matchERK12SimpleString>
 80154ac:	4603      	mov	r3, r0
 80154ae:	461c      	mov	r4, r3
 80154b0:	f107 0310 	add.w	r3, r7, #16
 80154b4:	4618      	mov	r0, r3
 80154b6:	f7fa f8b0 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80154ba:	2c00      	cmp	r4, #0
 80154bc:	d001      	beq.n	80154c2 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x4a>
 80154be:	2301      	movs	r3, #1
 80154c0:	e005      	b.n	80154ce <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>
    for(; filters != NULLPTR; filters = filters->getNext())
 80154c2:	6878      	ldr	r0, [r7, #4]
 80154c4:	f00c fb5d 	bl	8021b82 <_ZNK10TestFilter7getNextEv>
 80154c8:	6078      	str	r0, [r7, #4]
 80154ca:	e7e0      	b.n	801548e <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>

    return false;
 80154cc:	2300      	movs	r3, #0
}
 80154ce:	4618      	mov	r0, r3
 80154d0:	371c      	adds	r7, #28
 80154d2:	46bd      	mov	sp, r7
 80154d4:	bd90      	pop	{r4, r7, pc}

080154d6 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>:

bool UtestShell::shouldRun(const TestFilter* groupFilters, const TestFilter* nameFilters) const
{
 80154d6:	b580      	push	{r7, lr}
 80154d8:	b084      	sub	sp, #16
 80154da:	af00      	add	r7, sp, #0
 80154dc:	60f8      	str	r0, [r7, #12]
 80154de:	60b9      	str	r1, [r7, #8]
 80154e0:	607a      	str	r2, [r7, #4]
    return match(group_, groupFilters) && match(name_, nameFilters);
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	685b      	ldr	r3, [r3, #4]
 80154e6:	68ba      	ldr	r2, [r7, #8]
 80154e8:	4619      	mov	r1, r3
 80154ea:	68f8      	ldr	r0, [r7, #12]
 80154ec:	f7ff ffc4 	bl	8015478 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 80154f0:	4603      	mov	r3, r0
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d00b      	beq.n	801550e <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	689b      	ldr	r3, [r3, #8]
 80154fa:	687a      	ldr	r2, [r7, #4]
 80154fc:	4619      	mov	r1, r3
 80154fe:	68f8      	ldr	r0, [r7, #12]
 8015500:	f7ff ffba 	bl	8015478 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 8015504:	4603      	mov	r3, r0
 8015506:	2b00      	cmp	r3, #0
 8015508:	d001      	beq.n	801550e <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 801550a:	2301      	movs	r3, #1
 801550c:	e000      	b.n	8015510 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x3a>
 801550e:	2300      	movs	r3, #0
}
 8015510:	4618      	mov	r0, r3
 8015512:	3710      	adds	r7, #16
 8015514:	46bd      	mov	sp, r7
 8015516:	bd80      	pop	{r7, pc}

08015518 <_ZN10UtestShell8failWithERK11TestFailure>:

void UtestShell::failWith(const TestFailure& failure)
{
 8015518:	b590      	push	{r4, r7, lr}
 801551a:	b083      	sub	sp, #12
 801551c:	af00      	add	r7, sp, #0
 801551e:	6078      	str	r0, [r7, #4]
 8015520:	6039      	str	r1, [r7, #0]
    failWith(failure, getCurrentTestTerminator());
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	339c      	adds	r3, #156	; 0x9c
 8015528:	681c      	ldr	r4, [r3, #0]
 801552a:	f001 f8b1 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801552e:	4603      	mov	r3, r0
 8015530:	461a      	mov	r2, r3
 8015532:	6839      	ldr	r1, [r7, #0]
 8015534:	6878      	ldr	r0, [r7, #4]
 8015536:	47a0      	blx	r4
} // LCOV_EXCL_LINE
 8015538:	bf00      	nop
 801553a:	370c      	adds	r7, #12
 801553c:	46bd      	mov	sp, r7
 801553e:	bd90      	pop	{r4, r7, pc}

08015540 <_ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator>:

void UtestShell::failWith(const TestFailure& failure, const TestTerminator& terminator)
{
 8015540:	b580      	push	{r7, lr}
 8015542:	b084      	sub	sp, #16
 8015544:	af00      	add	r7, sp, #0
 8015546:	60f8      	str	r0, [r7, #12]
 8015548:	60b9      	str	r1, [r7, #8]
 801554a:	607a      	str	r2, [r7, #4]
    hasFailed_ = true;
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	2201      	movs	r2, #1
 8015550:	765a      	strb	r2, [r3, #25]
    getTestResult()->addFailure(failure);
 8015552:	68f8      	ldr	r0, [r7, #12]
 8015554:	f001 f872 	bl	801663c <_ZN10UtestShell13getTestResultEv>
 8015558:	4603      	mov	r3, r0
 801555a:	681a      	ldr	r2, [r3, #0]
 801555c:	3234      	adds	r2, #52	; 0x34
 801555e:	6812      	ldr	r2, [r2, #0]
 8015560:	68b9      	ldr	r1, [r7, #8]
 8015562:	4618      	mov	r0, r3
 8015564:	4790      	blx	r2
    terminator.exitCurrentTest();
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	6878      	ldr	r0, [r7, #4]
 801556e:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8015570:	bf00      	nop
 8015572:	3710      	adds	r7, #16
 8015574:	46bd      	mov	sp, r7
 8015576:	bd80      	pop	{r7, pc}

08015578 <_ZN10UtestShell8exitTestERK14TestTerminator>:

void UtestShell::exitTest(const TestTerminator& terminator)
{
 8015578:	b580      	push	{r7, lr}
 801557a:	b082      	sub	sp, #8
 801557c:	af00      	add	r7, sp, #0
 801557e:	6078      	str	r0, [r7, #4]
 8015580:	6039      	str	r1, [r7, #0]
    terminator.exitCurrentTest();
 8015582:	683b      	ldr	r3, [r7, #0]
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	6838      	ldr	r0, [r7, #0]
 801558a:	4798      	blx	r3
} // LCOV_EXCL_LINE
 801558c:	bf00      	nop
 801558e:	3708      	adds	r7, #8
 8015590:	46bd      	mov	sp, r7
 8015592:	bd80      	pop	{r7, pc}

08015594 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertTrue(bool condition, const char *checkString, const char *conditionString, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8015594:	b590      	push	{r4, r7, lr}
 8015596:	b09d      	sub	sp, #116	; 0x74
 8015598:	af04      	add	r7, sp, #16
 801559a:	60f8      	str	r0, [r7, #12]
 801559c:	607a      	str	r2, [r7, #4]
 801559e:	603b      	str	r3, [r7, #0]
 80155a0:	460b      	mov	r3, r1
 80155a2:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 80155a4:	68f8      	ldr	r0, [r7, #12]
 80155a6:	f001 f849 	bl	801663c <_ZN10UtestShell13getTestResultEv>
 80155aa:	4603      	mov	r3, r0
 80155ac:	681a      	ldr	r2, [r3, #0]
 80155ae:	3228      	adds	r2, #40	; 0x28
 80155b0:	6812      	ldr	r2, [r2, #0]
 80155b2:	4618      	mov	r0, r3
 80155b4:	4790      	blx	r2
    if (!condition)
 80155b6:	7afb      	ldrb	r3, [r7, #11]
 80155b8:	f083 0301 	eor.w	r3, r3, #1
 80155bc:	b2db      	uxtb	r3, r3
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d03f      	beq.n	8015642 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(CheckFailure(this, fileName, lineNumber, checkString, conditionString, text), testTerminator);
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	339c      	adds	r3, #156	; 0x9c
 80155c8:	681c      	ldr	r4, [r3, #0]
 80155ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80155ce:	6879      	ldr	r1, [r7, #4]
 80155d0:	4618      	mov	r0, r3
 80155d2:	f7f9 fc6a 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80155d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80155da:	6839      	ldr	r1, [r7, #0]
 80155dc:	4618      	mov	r0, r3
 80155de:	f7f9 fc64 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80155e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80155e6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80155e8:	4618      	mov	r0, r3
 80155ea:	f7f9 fc5e 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80155ee:	f107 0014 	add.w	r0, r7, #20
 80155f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80155f6:	9302      	str	r3, [sp, #8]
 80155f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80155fc:	9301      	str	r3, [sp, #4]
 80155fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015602:	9300      	str	r3, [sp, #0]
 8015604:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015606:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015608:	68f9      	ldr	r1, [r7, #12]
 801560a:	f7fb ff6b 	bl	80114e4 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 801560e:	f107 0314 	add.w	r3, r7, #20
 8015612:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015614:	4619      	mov	r1, r3
 8015616:	68f8      	ldr	r0, [r7, #12]
 8015618:	47a0      	blx	r4
 801561a:	f107 0314 	add.w	r3, r7, #20
 801561e:	4618      	mov	r0, r3
 8015620:	f7fc fdce 	bl	80121c0 <_ZN12CheckFailureD1Ev>
 8015624:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015628:	4618      	mov	r0, r3
 801562a:	f7f9 fff6 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801562e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015632:	4618      	mov	r0, r3
 8015634:	f7f9 fff1 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8015638:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801563c:	4618      	mov	r0, r3
 801563e:	f7f9 ffec 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 8015642:	bf00      	nop
 8015644:	3764      	adds	r7, #100	; 0x64
 8015646:	46bd      	mov	sp, r7
 8015648:	bd90      	pop	{r4, r7, pc}

0801564a <_ZN10UtestShell4failEPKcS1_jRK14TestTerminator>:

void UtestShell::fail(const char *text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801564a:	b590      	push	{r4, r7, lr}
 801564c:	b097      	sub	sp, #92	; 0x5c
 801564e:	af02      	add	r7, sp, #8
 8015650:	60f8      	str	r0, [r7, #12]
 8015652:	60b9      	str	r1, [r7, #8]
 8015654:	607a      	str	r2, [r7, #4]
 8015656:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8015658:	68f8      	ldr	r0, [r7, #12]
 801565a:	f000 ffef 	bl	801663c <_ZN10UtestShell13getTestResultEv>
 801565e:	4603      	mov	r3, r0
 8015660:	681a      	ldr	r2, [r3, #0]
 8015662:	3228      	adds	r2, #40	; 0x28
 8015664:	6812      	ldr	r2, [r2, #0]
 8015666:	4618      	mov	r0, r3
 8015668:	4790      	blx	r2
    failWith(FailFailure(this, fileName, lineNumber, text), testTerminator);
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	339c      	adds	r3, #156	; 0x9c
 8015670:	681c      	ldr	r4, [r3, #0]
 8015672:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015676:	68b9      	ldr	r1, [r7, #8]
 8015678:	4618      	mov	r0, r3
 801567a:	f7f9 fc16 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801567e:	f107 0014 	add.w	r0, r7, #20
 8015682:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015686:	9300      	str	r3, [sp, #0]
 8015688:	683b      	ldr	r3, [r7, #0]
 801568a:	687a      	ldr	r2, [r7, #4]
 801568c:	68f9      	ldr	r1, [r7, #12]
 801568e:	f7fb ff71 	bl	8011574 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 8015692:	f107 0314 	add.w	r3, r7, #20
 8015696:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015698:	4619      	mov	r1, r3
 801569a:	68f8      	ldr	r0, [r7, #12]
 801569c:	47a0      	blx	r4
 801569e:	f107 0314 	add.w	r3, r7, #20
 80156a2:	4618      	mov	r0, r3
 80156a4:	f7f7 fc16 	bl	800ced4 <_ZN11FailFailureD1Ev>
 80156a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80156ac:	4618      	mov	r0, r3
 80156ae:	f7f9 ffb4 	bl	800f61a <_ZN12SimpleStringD1Ev>
} // LCOV_EXCL_LINE
 80156b2:	bf00      	nop
 80156b4:	3754      	adds	r7, #84	; 0x54
 80156b6:	46bd      	mov	sp, r7
 80156b8:	bd90      	pop	{r4, r7, pc}

080156ba <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80156ba:	b590      	push	{r4, r7, lr}
 80156bc:	b0a7      	sub	sp, #156	; 0x9c
 80156be:	af04      	add	r7, sp, #16
 80156c0:	60f8      	str	r0, [r7, #12]
 80156c2:	60b9      	str	r1, [r7, #8]
 80156c4:	607a      	str	r2, [r7, #4]
 80156c6:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80156c8:	68f8      	ldr	r0, [r7, #12]
 80156ca:	f000 ffb7 	bl	801663c <_ZN10UtestShell13getTestResultEv>
 80156ce:	4603      	mov	r3, r0
 80156d0:	681a      	ldr	r2, [r3, #0]
 80156d2:	3228      	adds	r2, #40	; 0x28
 80156d4:	6812      	ldr	r2, [r2, #0]
 80156d6:	4618      	mov	r0, r3
 80156d8:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d102      	bne.n	80156e6 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x2c>
 80156e0:	68bb      	ldr	r3, [r7, #8]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d068      	beq.n	80157b8 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0xfe>
    if (actual == NULLPTR || expected == NULLPTR)
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d002      	beq.n	80156f2 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x38>
 80156ec:	68bb      	ldr	r3, [r7, #8]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d12a      	bne.n	8015748 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x8e>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	339c      	adds	r3, #156	; 0x9c
 80156f8:	681c      	ldr	r4, [r3, #0]
 80156fa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80156fe:	6839      	ldr	r1, [r7, #0]
 8015700:	4618      	mov	r0, r3
 8015702:	f7f9 fbd2 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8015706:	f107 0010 	add.w	r0, r7, #16
 801570a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801570e:	9302      	str	r3, [sp, #8]
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	9301      	str	r3, [sp, #4]
 8015714:	68bb      	ldr	r3, [r7, #8]
 8015716:	9300      	str	r3, [sp, #0]
 8015718:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801571c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8015720:	68f9      	ldr	r1, [r7, #12]
 8015722:	f7fc f9ad 	bl	8011a80 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8015726:	f107 0310 	add.w	r3, r7, #16
 801572a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801572e:	4619      	mov	r1, r3
 8015730:	68f8      	ldr	r0, [r7, #12]
 8015732:	47a0      	blx	r4
 8015734:	f107 0310 	add.w	r3, r7, #16
 8015738:	4618      	mov	r0, r3
 801573a:	f7fc fcb9 	bl	80120b0 <_ZN18StringEqualFailureD1Ev>
 801573e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015742:	4618      	mov	r0, r3
 8015744:	f7f9 ff69 	bl	800f61a <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrCmp(expected, actual) != 0)
 8015748:	6879      	ldr	r1, [r7, #4]
 801574a:	68b8      	ldr	r0, [r7, #8]
 801574c:	f7f9 f9ea 	bl	800eb24 <_ZN12SimpleString6StrCmpEPKcS1_>
 8015750:	4603      	mov	r3, r0
 8015752:	2b00      	cmp	r3, #0
 8015754:	bf14      	ite	ne
 8015756:	2301      	movne	r3, #1
 8015758:	2300      	moveq	r3, #0
 801575a:	b2db      	uxtb	r3, r3
 801575c:	2b00      	cmp	r3, #0
 801575e:	d02c      	beq.n	80157ba <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	339c      	adds	r3, #156	; 0x9c
 8015766:	681c      	ldr	r4, [r3, #0]
 8015768:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801576c:	6839      	ldr	r1, [r7, #0]
 801576e:	4618      	mov	r0, r3
 8015770:	f7f9 fb9b 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8015774:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8015778:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801577c:	9302      	str	r3, [sp, #8]
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	9301      	str	r3, [sp, #4]
 8015782:	68bb      	ldr	r3, [r7, #8]
 8015784:	9300      	str	r3, [sp, #0]
 8015786:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801578a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801578e:	68f9      	ldr	r1, [r7, #12]
 8015790:	f7fc f976 	bl	8011a80 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8015794:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8015798:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801579c:	4619      	mov	r1, r3
 801579e:	68f8      	ldr	r0, [r7, #12]
 80157a0:	47a0      	blx	r4
 80157a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80157a6:	4618      	mov	r0, r3
 80157a8:	f7fc fc82 	bl	80120b0 <_ZN18StringEqualFailureD1Ev>
 80157ac:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80157b0:	4618      	mov	r0, r3
 80157b2:	f7f9 ff32 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80157b6:	e000      	b.n	80157ba <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80157b8:	bf00      	nop
}
 80157ba:	378c      	adds	r7, #140	; 0x8c
 80157bc:	46bd      	mov	sp, r7
 80157be:	bd90      	pop	{r4, r7, pc}

080157c0 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrNEqual(const char* expected, const char* actual, size_t length, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80157c0:	b590      	push	{r4, r7, lr}
 80157c2:	b0a7      	sub	sp, #156	; 0x9c
 80157c4:	af04      	add	r7, sp, #16
 80157c6:	60f8      	str	r0, [r7, #12]
 80157c8:	60b9      	str	r1, [r7, #8]
 80157ca:	607a      	str	r2, [r7, #4]
 80157cc:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80157ce:	68f8      	ldr	r0, [r7, #12]
 80157d0:	f000 ff34 	bl	801663c <_ZN10UtestShell13getTestResultEv>
 80157d4:	4603      	mov	r3, r0
 80157d6:	681a      	ldr	r2, [r3, #0]
 80157d8:	3228      	adds	r2, #40	; 0x28
 80157da:	6812      	ldr	r2, [r2, #0]
 80157dc:	4618      	mov	r0, r3
 80157de:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d102      	bne.n	80157ec <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x2c>
 80157e6:	68bb      	ldr	r3, [r7, #8]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d06b      	beq.n	80158c4 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x104>
    if (actual == NULLPTR || expected == NULLPTR)
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d002      	beq.n	80157f8 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x38>
 80157f2:	68bb      	ldr	r3, [r7, #8]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d12b      	bne.n	8015850 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x90>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	339c      	adds	r3, #156	; 0x9c
 80157fe:	681c      	ldr	r4, [r3, #0]
 8015800:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015804:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8015808:	4618      	mov	r0, r3
 801580a:	f7f9 fb4e 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801580e:	f107 0010 	add.w	r0, r7, #16
 8015812:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015816:	9302      	str	r3, [sp, #8]
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	9301      	str	r3, [sp, #4]
 801581c:	68bb      	ldr	r3, [r7, #8]
 801581e:	9300      	str	r3, [sp, #0]
 8015820:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015824:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8015828:	68f9      	ldr	r1, [r7, #12]
 801582a:	f7fc f929 	bl	8011a80 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 801582e:	f107 0310 	add.w	r3, r7, #16
 8015832:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8015836:	4619      	mov	r1, r3
 8015838:	68f8      	ldr	r0, [r7, #12]
 801583a:	47a0      	blx	r4
 801583c:	f107 0310 	add.w	r3, r7, #16
 8015840:	4618      	mov	r0, r3
 8015842:	f7fc fc35 	bl	80120b0 <_ZN18StringEqualFailureD1Ev>
 8015846:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801584a:	4618      	mov	r0, r3
 801584c:	f7f9 fee5 	bl	800f61a <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrNCmp(expected, actual, length) != 0)
 8015850:	683a      	ldr	r2, [r7, #0]
 8015852:	6879      	ldr	r1, [r7, #4]
 8015854:	68b8      	ldr	r0, [r7, #8]
 8015856:	f7f9 f9a4 	bl	800eba2 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 801585a:	4603      	mov	r3, r0
 801585c:	2b00      	cmp	r3, #0
 801585e:	bf14      	ite	ne
 8015860:	2301      	movne	r3, #1
 8015862:	2300      	moveq	r3, #0
 8015864:	b2db      	uxtb	r3, r3
 8015866:	2b00      	cmp	r3, #0
 8015868:	d02d      	beq.n	80158c6 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	339c      	adds	r3, #156	; 0x9c
 8015870:	681c      	ldr	r4, [r3, #0]
 8015872:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015876:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801587a:	4618      	mov	r0, r3
 801587c:	f7f9 fb15 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8015880:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8015884:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015888:	9302      	str	r3, [sp, #8]
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	9301      	str	r3, [sp, #4]
 801588e:	68bb      	ldr	r3, [r7, #8]
 8015890:	9300      	str	r3, [sp, #0]
 8015892:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015896:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801589a:	68f9      	ldr	r1, [r7, #12]
 801589c:	f7fc f8f0 	bl	8011a80 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 80158a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80158a4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80158a8:	4619      	mov	r1, r3
 80158aa:	68f8      	ldr	r0, [r7, #12]
 80158ac:	47a0      	blx	r4
 80158ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80158b2:	4618      	mov	r0, r3
 80158b4:	f7fc fbfc 	bl	80120b0 <_ZN18StringEqualFailureD1Ev>
 80158b8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80158bc:	4618      	mov	r0, r3
 80158be:	f7f9 feac 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80158c2:	e000      	b.n	80158c6 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80158c4:	bf00      	nop
}
 80158c6:	378c      	adds	r7, #140	; 0x8c
 80158c8:	46bd      	mov	sp, r7
 80158ca:	bd90      	pop	{r4, r7, pc}

080158cc <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 80158cc:	b590      	push	{r4, r7, lr}
 80158ce:	b0ab      	sub	sp, #172	; 0xac
 80158d0:	af04      	add	r7, sp, #16
 80158d2:	60f8      	str	r0, [r7, #12]
 80158d4:	60b9      	str	r1, [r7, #8]
 80158d6:	607a      	str	r2, [r7, #4]
 80158d8:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80158da:	68f8      	ldr	r0, [r7, #12]
 80158dc:	f000 feae 	bl	801663c <_ZN10UtestShell13getTestResultEv>
 80158e0:	4603      	mov	r3, r0
 80158e2:	681a      	ldr	r2, [r3, #0]
 80158e4:	3228      	adds	r2, #40	; 0x28
 80158e6:	6812      	ldr	r2, [r2, #0]
 80158e8:	4618      	mov	r0, r3
 80158ea:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d102      	bne.n	80158f8 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x2c>
 80158f2:	68bb      	ldr	r3, [r7, #8]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d07c      	beq.n	80159f2 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x126>
    if (actual == NULLPTR || expected == NULLPTR)
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d002      	beq.n	8015904 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x38>
 80158fe:	68bb      	ldr	r3, [r7, #8]
 8015900:	2b00      	cmp	r3, #0
 8015902:	d128      	bne.n	8015956 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x8a>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	3398      	adds	r3, #152	; 0x98
 801590a:	681c      	ldr	r4, [r3, #0]
 801590c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015910:	6839      	ldr	r1, [r7, #0]
 8015912:	4618      	mov	r0, r3
 8015914:	f7f9 fac9 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8015918:	f107 0010 	add.w	r0, r7, #16
 801591c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015920:	9302      	str	r3, [sp, #8]
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	9301      	str	r3, [sp, #4]
 8015926:	68bb      	ldr	r3, [r7, #8]
 8015928:	9300      	str	r3, [sp, #0]
 801592a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801592e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8015932:	68f9      	ldr	r1, [r7, #12]
 8015934:	f7fc f948 	bl	8011bc8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8015938:	f107 0310 	add.w	r3, r7, #16
 801593c:	4619      	mov	r1, r3
 801593e:	68f8      	ldr	r0, [r7, #12]
 8015940:	47a0      	blx	r4
 8015942:	f107 0310 	add.w	r3, r7, #16
 8015946:	4618      	mov	r0, r3
 8015948:	f7fc fb90 	bl	801206c <_ZN24StringEqualNoCaseFailureD1Ev>
 801594c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015950:	4618      	mov	r0, r3
 8015952:	f7f9 fe62 	bl	800f61a <_ZN12SimpleStringD1Ev>
    if (!SimpleString(expected).equalsNoCase(actual))
 8015956:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801595a:	68b9      	ldr	r1, [r7, #8]
 801595c:	4618      	mov	r0, r3
 801595e:	f7f9 faa4 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8015962:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015966:	6879      	ldr	r1, [r7, #4]
 8015968:	4618      	mov	r0, r3
 801596a:	f7f9 fa9e 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801596e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8015972:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8015976:	4611      	mov	r1, r2
 8015978:	4618      	mov	r0, r3
 801597a:	f7f9 fe75 	bl	800f668 <_ZNK12SimpleString12equalsNoCaseERKS_>
 801597e:	4603      	mov	r3, r0
 8015980:	f083 0301 	eor.w	r3, r3, #1
 8015984:	b2dc      	uxtb	r4, r3
 8015986:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801598a:	4618      	mov	r0, r3
 801598c:	f7f9 fe45 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8015990:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8015994:	4618      	mov	r0, r3
 8015996:	f7f9 fe40 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801599a:	2c00      	cmp	r4, #0
 801599c:	d02a      	beq.n	80159f4 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	3398      	adds	r3, #152	; 0x98
 80159a4:	681c      	ldr	r4, [r3, #0]
 80159a6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80159aa:	6839      	ldr	r1, [r7, #0]
 80159ac:	4618      	mov	r0, r3
 80159ae:	f7f9 fa7c 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80159b2:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80159b6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80159ba:	9302      	str	r3, [sp, #8]
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	9301      	str	r3, [sp, #4]
 80159c0:	68bb      	ldr	r3, [r7, #8]
 80159c2:	9300      	str	r3, [sp, #0]
 80159c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80159c8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80159cc:	68f9      	ldr	r1, [r7, #12]
 80159ce:	f7fc f8fb 	bl	8011bc8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 80159d2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80159d6:	4619      	mov	r1, r3
 80159d8:	68f8      	ldr	r0, [r7, #12]
 80159da:	47a0      	blx	r4
 80159dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80159e0:	4618      	mov	r0, r3
 80159e2:	f7fc fb43 	bl	801206c <_ZN24StringEqualNoCaseFailureD1Ev>
 80159e6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80159ea:	4618      	mov	r0, r3
 80159ec:	f7f9 fe15 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80159f0:	e000      	b.n	80159f4 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80159f2:	bf00      	nop
}
 80159f4:	379c      	adds	r7, #156	; 0x9c
 80159f6:	46bd      	mov	sp, r7
 80159f8:	bd90      	pop	{r4, r7, pc}

080159fa <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 80159fa:	b590      	push	{r4, r7, lr}
 80159fc:	b0b3      	sub	sp, #204	; 0xcc
 80159fe:	af04      	add	r7, sp, #16
 8015a00:	60f8      	str	r0, [r7, #12]
 8015a02:	60b9      	str	r1, [r7, #8]
 8015a04:	607a      	str	r2, [r7, #4]
 8015a06:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8015a08:	68f8      	ldr	r0, [r7, #12]
 8015a0a:	f000 fe17 	bl	801663c <_ZN10UtestShell13getTestResultEv>
 8015a0e:	4603      	mov	r3, r0
 8015a10:	681a      	ldr	r2, [r3, #0]
 8015a12:	3228      	adds	r2, #40	; 0x28
 8015a14:	6812      	ldr	r2, [r2, #0]
 8015a16:	4618      	mov	r0, r3
 8015a18:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d103      	bne.n	8015a28 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x2e>
 8015a20:	68bb      	ldr	r3, [r7, #8]
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	f000 80ad 	beq.w	8015b82 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d002      	beq.n	8015a34 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x3a>
 8015a2e:	68bb      	ldr	r3, [r7, #8]
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d140      	bne.n	8015ab6 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	681b      	ldr	r3, [r3, #0]
 8015a38:	3398      	adds	r3, #152	; 0x98
 8015a3a:	681c      	ldr	r4, [r3, #0]
 8015a3c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015a40:	68b9      	ldr	r1, [r7, #8]
 8015a42:	4618      	mov	r0, r3
 8015a44:	f7f9 fa31 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8015a48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8015a4c:	6879      	ldr	r1, [r7, #4]
 8015a4e:	4618      	mov	r0, r3
 8015a50:	f7f9 fa2b 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8015a54:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015a58:	6839      	ldr	r1, [r7, #0]
 8015a5a:	4618      	mov	r0, r3
 8015a5c:	f7f9 fa25 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8015a60:	f107 0010 	add.w	r0, r7, #16
 8015a64:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015a68:	9302      	str	r3, [sp, #8]
 8015a6a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8015a6e:	9301      	str	r3, [sp, #4]
 8015a70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015a74:	9300      	str	r3, [sp, #0]
 8015a76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015a7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8015a7e:	68f9      	ldr	r1, [r7, #12]
 8015a80:	f7fb fce6 	bl	8011450 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8015a84:	f107 0310 	add.w	r3, r7, #16
 8015a88:	4619      	mov	r1, r3
 8015a8a:	68f8      	ldr	r0, [r7, #12]
 8015a8c:	47a0      	blx	r4
 8015a8e:	f107 0310 	add.w	r3, r7, #16
 8015a92:	4618      	mov	r0, r3
 8015a94:	f7fc fbb6 	bl	8012204 <_ZN15ContainsFailureD1Ev>
 8015a98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	f7f9 fdbc 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8015aa2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8015aa6:	4618      	mov	r0, r3
 8015aa8:	f7f9 fdb7 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8015aac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015ab0:	4618      	mov	r0, r3
 8015ab2:	f7f9 fdb2 	bl	800f61a <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).contains(expected))
 8015ab6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8015aba:	6879      	ldr	r1, [r7, #4]
 8015abc:	4618      	mov	r0, r3
 8015abe:	f7f9 f9f4 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8015ac2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8015ac6:	68b9      	ldr	r1, [r7, #8]
 8015ac8:	4618      	mov	r0, r3
 8015aca:	f7f9 f9ee 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8015ace:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8015ad2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8015ad6:	4611      	mov	r1, r2
 8015ad8:	4618      	mov	r0, r3
 8015ada:	f7f9 fa64 	bl	800efa6 <_ZNK12SimpleString8containsERKS_>
 8015ade:	4603      	mov	r3, r0
 8015ae0:	f083 0301 	eor.w	r3, r3, #1
 8015ae4:	b2dc      	uxtb	r4, r3
 8015ae6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8015aea:	4618      	mov	r0, r3
 8015aec:	f7f9 fd95 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8015af0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8015af4:	4618      	mov	r0, r3
 8015af6:	f7f9 fd90 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8015afa:	2c00      	cmp	r4, #0
 8015afc:	d042      	beq.n	8015b84 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	3398      	adds	r3, #152	; 0x98
 8015b04:	681c      	ldr	r4, [r3, #0]
 8015b06:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8015b0a:	68b9      	ldr	r1, [r7, #8]
 8015b0c:	4618      	mov	r0, r3
 8015b0e:	f7f9 f9cc 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8015b12:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8015b16:	6879      	ldr	r1, [r7, #4]
 8015b18:	4618      	mov	r0, r3
 8015b1a:	f7f9 f9c6 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8015b1e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8015b22:	6839      	ldr	r1, [r7, #0]
 8015b24:	4618      	mov	r0, r3
 8015b26:	f7f9 f9c0 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8015b2a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8015b2e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8015b32:	9302      	str	r3, [sp, #8]
 8015b34:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8015b38:	9301      	str	r3, [sp, #4]
 8015b3a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8015b3e:	9300      	str	r3, [sp, #0]
 8015b40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015b44:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8015b48:	68f9      	ldr	r1, [r7, #12]
 8015b4a:	f7fb fc81 	bl	8011450 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8015b4e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015b52:	4619      	mov	r1, r3
 8015b54:	68f8      	ldr	r0, [r7, #12]
 8015b56:	47a0      	blx	r4
 8015b58:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015b5c:	4618      	mov	r0, r3
 8015b5e:	f7fc fb51 	bl	8012204 <_ZN15ContainsFailureD1Ev>
 8015b62:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8015b66:	4618      	mov	r0, r3
 8015b68:	f7f9 fd57 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8015b6c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8015b70:	4618      	mov	r0, r3
 8015b72:	f7f9 fd52 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8015b76:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8015b7a:	4618      	mov	r0, r3
 8015b7c:	f7f9 fd4d 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8015b80:	e000      	b.n	8015b84 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8015b82:	bf00      	nop
}
 8015b84:	37bc      	adds	r7, #188	; 0xbc
 8015b86:	46bd      	mov	sp, r7
 8015b88:	bd90      	pop	{r4, r7, pc}

08015b8a <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8015b8a:	b590      	push	{r4, r7, lr}
 8015b8c:	b0b3      	sub	sp, #204	; 0xcc
 8015b8e:	af04      	add	r7, sp, #16
 8015b90:	60f8      	str	r0, [r7, #12]
 8015b92:	60b9      	str	r1, [r7, #8]
 8015b94:	607a      	str	r2, [r7, #4]
 8015b96:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8015b98:	68f8      	ldr	r0, [r7, #12]
 8015b9a:	f000 fd4f 	bl	801663c <_ZN10UtestShell13getTestResultEv>
 8015b9e:	4603      	mov	r3, r0
 8015ba0:	681a      	ldr	r2, [r3, #0]
 8015ba2:	3228      	adds	r2, #40	; 0x28
 8015ba4:	6812      	ldr	r2, [r2, #0]
 8015ba6:	4618      	mov	r0, r3
 8015ba8:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d103      	bne.n	8015bb8 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x2e>
 8015bb0:	68bb      	ldr	r3, [r7, #8]
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	f000 80ad 	beq.w	8015d12 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d002      	beq.n	8015bc4 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x3a>
 8015bbe:	68bb      	ldr	r3, [r7, #8]
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d140      	bne.n	8015c46 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8015bc4:	68fb      	ldr	r3, [r7, #12]
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	3398      	adds	r3, #152	; 0x98
 8015bca:	681c      	ldr	r4, [r3, #0]
 8015bcc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015bd0:	68b9      	ldr	r1, [r7, #8]
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	f7f9 f969 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8015bd8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8015bdc:	6879      	ldr	r1, [r7, #4]
 8015bde:	4618      	mov	r0, r3
 8015be0:	f7f9 f963 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8015be4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015be8:	6839      	ldr	r1, [r7, #0]
 8015bea:	4618      	mov	r0, r3
 8015bec:	f7f9 f95d 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8015bf0:	f107 0010 	add.w	r0, r7, #16
 8015bf4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015bf8:	9302      	str	r3, [sp, #8]
 8015bfa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8015bfe:	9301      	str	r3, [sp, #4]
 8015c00:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015c04:	9300      	str	r3, [sp, #0]
 8015c06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015c0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8015c0e:	68f9      	ldr	r1, [r7, #12]
 8015c10:	f7fb fc1e 	bl	8011450 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8015c14:	f107 0310 	add.w	r3, r7, #16
 8015c18:	4619      	mov	r1, r3
 8015c1a:	68f8      	ldr	r0, [r7, #12]
 8015c1c:	47a0      	blx	r4
 8015c1e:	f107 0310 	add.w	r3, r7, #16
 8015c22:	4618      	mov	r0, r3
 8015c24:	f7fc faee 	bl	8012204 <_ZN15ContainsFailureD1Ev>
 8015c28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015c2c:	4618      	mov	r0, r3
 8015c2e:	f7f9 fcf4 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8015c32:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8015c36:	4618      	mov	r0, r3
 8015c38:	f7f9 fcef 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8015c3c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015c40:	4618      	mov	r0, r3
 8015c42:	f7f9 fcea 	bl	800f61a <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).containsNoCase(expected))
 8015c46:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8015c4a:	6879      	ldr	r1, [r7, #4]
 8015c4c:	4618      	mov	r0, r3
 8015c4e:	f7f9 f92c 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8015c52:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8015c56:	68b9      	ldr	r1, [r7, #8]
 8015c58:	4618      	mov	r0, r3
 8015c5a:	f7f9 f926 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8015c5e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8015c62:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8015c66:	4611      	mov	r1, r2
 8015c68:	4618      	mov	r0, r3
 8015c6a:	f7f9 f9b7 	bl	800efdc <_ZNK12SimpleString14containsNoCaseERKS_>
 8015c6e:	4603      	mov	r3, r0
 8015c70:	f083 0301 	eor.w	r3, r3, #1
 8015c74:	b2dc      	uxtb	r4, r3
 8015c76:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	f7f9 fccd 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8015c80:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8015c84:	4618      	mov	r0, r3
 8015c86:	f7f9 fcc8 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8015c8a:	2c00      	cmp	r4, #0
 8015c8c:	d042      	beq.n	8015d14 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	3398      	adds	r3, #152	; 0x98
 8015c94:	681c      	ldr	r4, [r3, #0]
 8015c96:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8015c9a:	68b9      	ldr	r1, [r7, #8]
 8015c9c:	4618      	mov	r0, r3
 8015c9e:	f7f9 f904 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8015ca2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8015ca6:	6879      	ldr	r1, [r7, #4]
 8015ca8:	4618      	mov	r0, r3
 8015caa:	f7f9 f8fe 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8015cae:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8015cb2:	6839      	ldr	r1, [r7, #0]
 8015cb4:	4618      	mov	r0, r3
 8015cb6:	f7f9 f8f8 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8015cba:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8015cbe:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8015cc2:	9302      	str	r3, [sp, #8]
 8015cc4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8015cc8:	9301      	str	r3, [sp, #4]
 8015cca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8015cce:	9300      	str	r3, [sp, #0]
 8015cd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8015cd4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8015cd8:	68f9      	ldr	r1, [r7, #12]
 8015cda:	f7fb fbb9 	bl	8011450 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8015cde:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015ce2:	4619      	mov	r1, r3
 8015ce4:	68f8      	ldr	r0, [r7, #12]
 8015ce6:	47a0      	blx	r4
 8015ce8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015cec:	4618      	mov	r0, r3
 8015cee:	f7fc fa89 	bl	8012204 <_ZN15ContainsFailureD1Ev>
 8015cf2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8015cf6:	4618      	mov	r0, r3
 8015cf8:	f7f9 fc8f 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8015cfc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8015d00:	4618      	mov	r0, r3
 8015d02:	f7f9 fc8a 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8015d06:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	f7f9 fc85 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8015d10:	e000      	b.n	8015d14 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8015d12:	bf00      	nop
}
 8015d14:	37bc      	adds	r7, #188	; 0xbc
 8015d16:	46bd      	mov	sp, r7
 8015d18:	bd90      	pop	{r4, r7, pc}

08015d1a <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator>:

void UtestShell::assertLongsEqual(long expected, long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8015d1a:	b590      	push	{r4, r7, lr}
 8015d1c:	b099      	sub	sp, #100	; 0x64
 8015d1e:	af04      	add	r7, sp, #16
 8015d20:	60f8      	str	r0, [r7, #12]
 8015d22:	60b9      	str	r1, [r7, #8]
 8015d24:	607a      	str	r2, [r7, #4]
 8015d26:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8015d28:	68f8      	ldr	r0, [r7, #12]
 8015d2a:	f000 fc87 	bl	801663c <_ZN10UtestShell13getTestResultEv>
 8015d2e:	4603      	mov	r3, r0
 8015d30:	681a      	ldr	r2, [r3, #0]
 8015d32:	3228      	adds	r2, #40	; 0x28
 8015d34:	6812      	ldr	r2, [r2, #0]
 8015d36:	4618      	mov	r0, r3
 8015d38:	4790      	blx	r2
    if (expected != actual)
 8015d3a:	68ba      	ldr	r2, [r7, #8]
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	429a      	cmp	r2, r3
 8015d40:	d027      	beq.n	8015d92 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator+0x78>
        failWith(LongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	339c      	adds	r3, #156	; 0x9c
 8015d48:	681c      	ldr	r4, [r3, #0]
 8015d4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015d4e:	6839      	ldr	r1, [r7, #0]
 8015d50:	4618      	mov	r0, r3
 8015d52:	f7f9 f8aa 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8015d56:	f107 0014 	add.w	r0, r7, #20
 8015d5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015d5e:	9302      	str	r3, [sp, #8]
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	9301      	str	r3, [sp, #4]
 8015d64:	68bb      	ldr	r3, [r7, #8]
 8015d66:	9300      	str	r3, [sp, #0]
 8015d68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015d6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015d6c:	68f9      	ldr	r1, [r7, #12]
 8015d6e:	f7fb fc1f 	bl	80115b0 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>
 8015d72:	f107 0314 	add.w	r3, r7, #20
 8015d76:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015d78:	4619      	mov	r1, r3
 8015d7a:	68f8      	ldr	r0, [r7, #12]
 8015d7c:	47a0      	blx	r4
 8015d7e:	f107 0314 	add.w	r3, r7, #20
 8015d82:	4618      	mov	r0, r3
 8015d84:	f7fc f9fa 	bl	801217c <_ZN17LongsEqualFailureD1Ev>
 8015d88:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	f7f9 fc44 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 8015d92:	bf00      	nop
 8015d94:	3754      	adds	r7, #84	; 0x54
 8015d96:	46bd      	mov	sp, r7
 8015d98:	bd90      	pop	{r4, r7, pc}

08015d9a <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongsEqual(unsigned long expected, unsigned long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8015d9a:	b590      	push	{r4, r7, lr}
 8015d9c:	b099      	sub	sp, #100	; 0x64
 8015d9e:	af04      	add	r7, sp, #16
 8015da0:	60f8      	str	r0, [r7, #12]
 8015da2:	60b9      	str	r1, [r7, #8]
 8015da4:	607a      	str	r2, [r7, #4]
 8015da6:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8015da8:	68f8      	ldr	r0, [r7, #12]
 8015daa:	f000 fc47 	bl	801663c <_ZN10UtestShell13getTestResultEv>
 8015dae:	4603      	mov	r3, r0
 8015db0:	681a      	ldr	r2, [r3, #0]
 8015db2:	3228      	adds	r2, #40	; 0x28
 8015db4:	6812      	ldr	r2, [r2, #0]
 8015db6:	4618      	mov	r0, r3
 8015db8:	4790      	blx	r2
    if (expected != actual)
 8015dba:	68ba      	ldr	r2, [r7, #8]
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	429a      	cmp	r2, r3
 8015dc0:	d027      	beq.n	8015e12 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator+0x78>
        failWith(UnsignedLongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	681b      	ldr	r3, [r3, #0]
 8015dc6:	339c      	adds	r3, #156	; 0x9c
 8015dc8:	681c      	ldr	r4, [r3, #0]
 8015dca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015dce:	6839      	ldr	r1, [r7, #0]
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	f7f9 f86a 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8015dd6:	f107 0014 	add.w	r0, r7, #20
 8015dda:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015dde:	9302      	str	r3, [sp, #8]
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	9301      	str	r3, [sp, #4]
 8015de4:	68bb      	ldr	r3, [r7, #8]
 8015de6:	9300      	str	r3, [sp, #0]
 8015de8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015dea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015dec:	68f9      	ldr	r1, [r7, #12]
 8015dee:	f7fb fcab 	bl	8011748 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>
 8015df2:	f107 0314 	add.w	r3, r7, #20
 8015df6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015df8:	4619      	mov	r1, r3
 8015dfa:	68f8      	ldr	r0, [r7, #12]
 8015dfc:	47a0      	blx	r4
 8015dfe:	f107 0314 	add.w	r3, r7, #20
 8015e02:	4618      	mov	r0, r3
 8015e04:	f7fc f998 	bl	8012138 <_ZN25UnsignedLongsEqualFailureD1Ev>
 8015e08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015e0c:	4618      	mov	r0, r3
 8015e0e:	f7f9 fc04 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 8015e12:	bf00      	nop
 8015e14:	3754      	adds	r7, #84	; 0x54
 8015e16:	46bd      	mov	sp, r7
 8015e18:	bd90      	pop	{r4, r7, pc}
	...

08015e1c <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertLongLongsEqual(cpputest_longlong expected, cpputest_longlong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8015e1c:	b082      	sub	sp, #8
 8015e1e:	b590      	push	{r4, r7, lr}
 8015e20:	b099      	sub	sp, #100	; 0x64
 8015e22:	af02      	add	r7, sp, #8
 8015e24:	60f8      	str	r0, [r7, #12]
 8015e26:	1d38      	adds	r0, r7, #4
 8015e28:	e880 0006 	stmia.w	r0, {r1, r2}
 8015e2c:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 8015e2e:	68f8      	ldr	r0, [r7, #12]
 8015e30:	f000 fc04 	bl	801663c <_ZN10UtestShell13getTestResultEv>
 8015e34:	4603      	mov	r3, r0
 8015e36:	681a      	ldr	r2, [r3, #0]
 8015e38:	3228      	adds	r2, #40	; 0x28
 8015e3a:	6812      	ldr	r2, [r2, #0]
 8015e3c:	4618      	mov	r0, r3
 8015e3e:	4790      	blx	r2
    if (expected != actual)
        failWith(LongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 8015e40:	68fb      	ldr	r3, [r7, #12]
 8015e42:	681b      	ldr	r3, [r3, #0]
 8015e44:	339c      	adds	r3, #156	; 0x9c
 8015e46:	681c      	ldr	r4, [r3, #0]
 8015e48:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015e4c:	4919      	ldr	r1, [pc, #100]	; (8015eb4 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator+0x98>)
 8015e4e:	4618      	mov	r0, r3
 8015e50:	f7f9 f82b 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8015e54:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015e58:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	f7f9 f825 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8015e60:	f107 0014 	add.w	r0, r7, #20
 8015e64:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015e68:	9301      	str	r3, [sp, #4]
 8015e6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015e6e:	9300      	str	r3, [sp, #0]
 8015e70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015e72:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8015e74:	68f9      	ldr	r1, [r7, #12]
 8015e76:	f7fc f84d 	bl	8011f14 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 8015e7a:	f107 0314 	add.w	r3, r7, #20
 8015e7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8015e82:	4619      	mov	r1, r3
 8015e84:	68f8      	ldr	r0, [r7, #12]
 8015e86:	47a0      	blx	r4
 8015e88:	f107 0314 	add.w	r3, r7, #20
 8015e8c:	4618      	mov	r0, r3
 8015e8e:	f7fc f887 	bl	8011fa0 <_ZN25FeatureUnsupportedFailureD1Ev>
 8015e92:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015e96:	4618      	mov	r0, r3
 8015e98:	f7f9 fbbf 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8015e9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015ea0:	4618      	mov	r0, r3
 8015ea2:	f7f9 fbba 	bl	800f61a <_ZN12SimpleStringD1Ev>
#endif
}
 8015ea6:	bf00      	nop
 8015ea8:	375c      	adds	r7, #92	; 0x5c
 8015eaa:	46bd      	mov	sp, r7
 8015eac:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8015eb0:	b002      	add	sp, #8
 8015eb2:	4770      	bx	lr
 8015eb4:	08027c98 	.word	0x08027c98

08015eb8 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongLongsEqual(cpputest_ulonglong expected, cpputest_ulonglong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8015eb8:	b082      	sub	sp, #8
 8015eba:	b590      	push	{r4, r7, lr}
 8015ebc:	b099      	sub	sp, #100	; 0x64
 8015ebe:	af02      	add	r7, sp, #8
 8015ec0:	60f8      	str	r0, [r7, #12]
 8015ec2:	1d38      	adds	r0, r7, #4
 8015ec4:	e880 0006 	stmia.w	r0, {r1, r2}
 8015ec8:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 8015eca:	68f8      	ldr	r0, [r7, #12]
 8015ecc:	f000 fbb6 	bl	801663c <_ZN10UtestShell13getTestResultEv>
 8015ed0:	4603      	mov	r3, r0
 8015ed2:	681a      	ldr	r2, [r3, #0]
 8015ed4:	3228      	adds	r2, #40	; 0x28
 8015ed6:	6812      	ldr	r2, [r2, #0]
 8015ed8:	4618      	mov	r0, r3
 8015eda:	4790      	blx	r2
    if (expected != actual)
        failWith(UnsignedLongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 8015edc:	68fb      	ldr	r3, [r7, #12]
 8015ede:	681b      	ldr	r3, [r3, #0]
 8015ee0:	339c      	adds	r3, #156	; 0x9c
 8015ee2:	681c      	ldr	r4, [r3, #0]
 8015ee4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015ee8:	4919      	ldr	r1, [pc, #100]	; (8015f50 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator+0x98>)
 8015eea:	4618      	mov	r0, r3
 8015eec:	f7f8 ffdd 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8015ef0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015ef4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8015ef6:	4618      	mov	r0, r3
 8015ef8:	f7f8 ffd7 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8015efc:	f107 0014 	add.w	r0, r7, #20
 8015f00:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015f04:	9301      	str	r3, [sp, #4]
 8015f06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015f0a:	9300      	str	r3, [sp, #0]
 8015f0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015f0e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8015f10:	68f9      	ldr	r1, [r7, #12]
 8015f12:	f7fb ffff 	bl	8011f14 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 8015f16:	f107 0314 	add.w	r3, r7, #20
 8015f1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8015f1e:	4619      	mov	r1, r3
 8015f20:	68f8      	ldr	r0, [r7, #12]
 8015f22:	47a0      	blx	r4
 8015f24:	f107 0314 	add.w	r3, r7, #20
 8015f28:	4618      	mov	r0, r3
 8015f2a:	f7fc f839 	bl	8011fa0 <_ZN25FeatureUnsupportedFailureD1Ev>
 8015f2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015f32:	4618      	mov	r0, r3
 8015f34:	f7f9 fb71 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8015f38:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015f3c:	4618      	mov	r0, r3
 8015f3e:	f7f9 fb6c 	bl	800f61a <_ZN12SimpleStringD1Ev>
#endif
}
 8015f42:	bf00      	nop
 8015f44:	375c      	adds	r7, #92	; 0x5c
 8015f46:	46bd      	mov	sp, r7
 8015f48:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8015f4c:	b002      	add	sp, #8
 8015f4e:	4770      	bx	lr
 8015f50:	08027c98 	.word	0x08027c98

08015f54 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator>:

void UtestShell::assertSignedBytesEqual(signed char expected, signed char actual, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8015f54:	b590      	push	{r4, r7, lr}
 8015f56:	b099      	sub	sp, #100	; 0x64
 8015f58:	af04      	add	r7, sp, #16
 8015f5a:	60f8      	str	r0, [r7, #12]
 8015f5c:	607b      	str	r3, [r7, #4]
 8015f5e:	460b      	mov	r3, r1
 8015f60:	72fb      	strb	r3, [r7, #11]
 8015f62:	4613      	mov	r3, r2
 8015f64:	72bb      	strb	r3, [r7, #10]
    getTestResult()->countCheck();
 8015f66:	68f8      	ldr	r0, [r7, #12]
 8015f68:	f000 fb68 	bl	801663c <_ZN10UtestShell13getTestResultEv>
 8015f6c:	4603      	mov	r3, r0
 8015f6e:	681a      	ldr	r2, [r3, #0]
 8015f70:	3228      	adds	r2, #40	; 0x28
 8015f72:	6812      	ldr	r2, [r2, #0]
 8015f74:	4618      	mov	r0, r3
 8015f76:	4790      	blx	r2
    if (expected != actual)
 8015f78:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8015f7c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8015f80:	429a      	cmp	r2, r3
 8015f82:	d029      	beq.n	8015fd8 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator+0x84>
        failWith(SignedBytesEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	339c      	adds	r3, #156	; 0x9c
 8015f8a:	681c      	ldr	r4, [r3, #0]
 8015f8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015f90:	6879      	ldr	r1, [r7, #4]
 8015f92:	4618      	mov	r0, r3
 8015f94:	f7f8 ff89 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8015f98:	f107 0014 	add.w	r0, r7, #20
 8015f9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015fa0:	9302      	str	r3, [sp, #8]
 8015fa2:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8015fa6:	9301      	str	r3, [sp, #4]
 8015fa8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8015fac:	9300      	str	r3, [sp, #0]
 8015fae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015fb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015fb2:	68f9      	ldr	r1, [r7, #12]
 8015fb4:	f7fb fc94 	bl	80118e0 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>
 8015fb8:	f107 0314 	add.w	r3, r7, #20
 8015fbc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015fbe:	4619      	mov	r1, r3
 8015fc0:	68f8      	ldr	r0, [r7, #12]
 8015fc2:	47a0      	blx	r4
 8015fc4:	f107 0314 	add.w	r3, r7, #20
 8015fc8:	4618      	mov	r0, r3
 8015fca:	f7fc f893 	bl	80120f4 <_ZN23SignedBytesEqualFailureD1Ev>
 8015fce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	f7f9 fb21 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 8015fd8:	bf00      	nop
 8015fda:	3754      	adds	r7, #84	; 0x54
 8015fdc:	46bd      	mov	sp, r7
 8015fde:	bd90      	pop	{r4, r7, pc}

08015fe0 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertPointersEqual(const void* expected, const void* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8015fe0:	b590      	push	{r4, r7, lr}
 8015fe2:	b09d      	sub	sp, #116	; 0x74
 8015fe4:	af04      	add	r7, sp, #16
 8015fe6:	60f8      	str	r0, [r7, #12]
 8015fe8:	60b9      	str	r1, [r7, #8]
 8015fea:	607a      	str	r2, [r7, #4]
 8015fec:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8015fee:	68f8      	ldr	r0, [r7, #12]
 8015ff0:	f000 fb24 	bl	801663c <_ZN10UtestShell13getTestResultEv>
 8015ff4:	4603      	mov	r3, r0
 8015ff6:	681a      	ldr	r2, [r3, #0]
 8015ff8:	3228      	adds	r2, #40	; 0x28
 8015ffa:	6812      	ldr	r2, [r2, #0]
 8015ffc:	4618      	mov	r0, r3
 8015ffe:	4790      	blx	r2
    if (expected != actual)
 8016000:	68ba      	ldr	r2, [r7, #8]
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	429a      	cmp	r2, r3
 8016006:	d03f      	beq.n	8016088 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 8016008:	68fb      	ldr	r3, [r7, #12]
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	339c      	adds	r3, #156	; 0x9c
 801600e:	681c      	ldr	r4, [r3, #0]
 8016010:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016014:	68b9      	ldr	r1, [r7, #8]
 8016016:	4618      	mov	r0, r3
 8016018:	f7f9 fdea 	bl	800fbf0 <_Z10StringFromPKv>
 801601c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8016020:	6879      	ldr	r1, [r7, #4]
 8016022:	4618      	mov	r0, r3
 8016024:	f7f9 fde4 	bl	800fbf0 <_Z10StringFromPKv>
 8016028:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801602c:	6839      	ldr	r1, [r7, #0]
 801602e:	4618      	mov	r0, r3
 8016030:	f7f8 ff3b 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8016034:	f107 0014 	add.w	r0, r7, #20
 8016038:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801603c:	9302      	str	r3, [sp, #8]
 801603e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8016042:	9301      	str	r3, [sp, #4]
 8016044:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016048:	9300      	str	r3, [sp, #0]
 801604a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801604c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801604e:	68f9      	ldr	r1, [r7, #12]
 8016050:	f7fb f814 	bl	801107c <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8016054:	f107 0314 	add.w	r3, r7, #20
 8016058:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801605a:	4619      	mov	r1, r3
 801605c:	68f8      	ldr	r0, [r7, #12]
 801605e:	47a0      	blx	r4
 8016060:	f107 0314 	add.w	r3, r7, #20
 8016064:	4618      	mov	r0, r3
 8016066:	f7fc f955 	bl	8012314 <_ZN13EqualsFailureD1Ev>
 801606a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801606e:	4618      	mov	r0, r3
 8016070:	f7f9 fad3 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8016074:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8016078:	4618      	mov	r0, r3
 801607a:	f7f9 face 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801607e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016082:	4618      	mov	r0, r3
 8016084:	f7f9 fac9 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 8016088:	bf00      	nop
 801608a:	3764      	adds	r7, #100	; 0x64
 801608c:	46bd      	mov	sp, r7
 801608e:	bd90      	pop	{r4, r7, pc}

08016090 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertFunctionPointersEqual(void (*expected)(), void (*actual)(), const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8016090:	b590      	push	{r4, r7, lr}
 8016092:	b09d      	sub	sp, #116	; 0x74
 8016094:	af04      	add	r7, sp, #16
 8016096:	60f8      	str	r0, [r7, #12]
 8016098:	60b9      	str	r1, [r7, #8]
 801609a:	607a      	str	r2, [r7, #4]
 801609c:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801609e:	68f8      	ldr	r0, [r7, #12]
 80160a0:	f000 facc 	bl	801663c <_ZN10UtestShell13getTestResultEv>
 80160a4:	4603      	mov	r3, r0
 80160a6:	681a      	ldr	r2, [r3, #0]
 80160a8:	3228      	adds	r2, #40	; 0x28
 80160aa:	6812      	ldr	r2, [r2, #0]
 80160ac:	4618      	mov	r0, r3
 80160ae:	4790      	blx	r2
    if (expected != actual)
 80160b0:	68ba      	ldr	r2, [r7, #8]
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	429a      	cmp	r2, r3
 80160b6:	d03f      	beq.n	8016138 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	339c      	adds	r3, #156	; 0x9c
 80160be:	681c      	ldr	r4, [r3, #0]
 80160c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80160c4:	68b9      	ldr	r1, [r7, #8]
 80160c6:	4618      	mov	r0, r3
 80160c8:	f7f9 fdbc 	bl	800fc44 <_Z10StringFromPFvvE>
 80160cc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80160d0:	6879      	ldr	r1, [r7, #4]
 80160d2:	4618      	mov	r0, r3
 80160d4:	f7f9 fdb6 	bl	800fc44 <_Z10StringFromPFvvE>
 80160d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80160dc:	6839      	ldr	r1, [r7, #0]
 80160de:	4618      	mov	r0, r3
 80160e0:	f7f8 fee3 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80160e4:	f107 0014 	add.w	r0, r7, #20
 80160e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80160ec:	9302      	str	r3, [sp, #8]
 80160ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80160f2:	9301      	str	r3, [sp, #4]
 80160f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80160f8:	9300      	str	r3, [sp, #0]
 80160fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80160fc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80160fe:	68f9      	ldr	r1, [r7, #12]
 8016100:	f7fa ffbc 	bl	801107c <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8016104:	f107 0314 	add.w	r3, r7, #20
 8016108:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801610a:	4619      	mov	r1, r3
 801610c:	68f8      	ldr	r0, [r7, #12]
 801610e:	47a0      	blx	r4
 8016110:	f107 0314 	add.w	r3, r7, #20
 8016114:	4618      	mov	r0, r3
 8016116:	f7fc f8fd 	bl	8012314 <_ZN13EqualsFailureD1Ev>
 801611a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801611e:	4618      	mov	r0, r3
 8016120:	f7f9 fa7b 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8016124:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8016128:	4618      	mov	r0, r3
 801612a:	f7f9 fa76 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801612e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016132:	4618      	mov	r0, r3
 8016134:	f7f9 fa71 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 8016138:	bf00      	nop
 801613a:	3764      	adds	r7, #100	; 0x64
 801613c:	46bd      	mov	sp, r7
 801613e:	bd90      	pop	{r4, r7, pc}

08016140 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator>:

void UtestShell::assertDoublesEqual(double expected, double actual, double threshold, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8016140:	b590      	push	{r4, r7, lr}
 8016142:	b09d      	sub	sp, #116	; 0x74
 8016144:	af02      	add	r7, sp, #8
 8016146:	6278      	str	r0, [r7, #36]	; 0x24
 8016148:	ed87 0b06 	vstr	d0, [r7, #24]
 801614c:	ed87 1b04 	vstr	d1, [r7, #16]
 8016150:	ed87 2b02 	vstr	d2, [r7, #8]
 8016154:	6239      	str	r1, [r7, #32]
 8016156:	607a      	str	r2, [r7, #4]
 8016158:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801615a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801615c:	f000 fa6e 	bl	801663c <_ZN10UtestShell13getTestResultEv>
 8016160:	4603      	mov	r3, r0
 8016162:	681a      	ldr	r2, [r3, #0]
 8016164:	3228      	adds	r2, #40	; 0x28
 8016166:	6812      	ldr	r2, [r2, #0]
 8016168:	4618      	mov	r0, r3
 801616a:	4790      	blx	r2
    if (!doubles_equal(expected, actual, threshold))
 801616c:	ed97 2b02 	vldr	d2, [r7, #8]
 8016170:	ed97 1b04 	vldr	d1, [r7, #16]
 8016174:	ed97 0b06 	vldr	d0, [r7, #24]
 8016178:	f7fe fd4a 	bl	8014c10 <_Z13doubles_equalddd>
 801617c:	4603      	mov	r3, r0
 801617e:	f083 0301 	eor.w	r3, r3, #1
 8016182:	b2db      	uxtb	r3, r3
 8016184:	2b00      	cmp	r3, #0
 8016186:	d029      	beq.n	80161dc <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator+0x9c>
        failWith(DoublesEqualFailure(this, fileName, lineNumber, expected, actual, threshold, text), testTerminator);
 8016188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801618a:	681b      	ldr	r3, [r3, #0]
 801618c:	339c      	adds	r3, #156	; 0x9c
 801618e:	681c      	ldr	r4, [r3, #0]
 8016190:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8016194:	6a39      	ldr	r1, [r7, #32]
 8016196:	4618      	mov	r0, r3
 8016198:	f7f8 fe87 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801619c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80161a0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80161a4:	9300      	str	r3, [sp, #0]
 80161a6:	ed97 2b02 	vldr	d2, [r7, #8]
 80161aa:	ed97 1b04 	vldr	d1, [r7, #16]
 80161ae:	ed97 0b06 	vldr	d0, [r7, #24]
 80161b2:	683b      	ldr	r3, [r7, #0]
 80161b4:	687a      	ldr	r2, [r7, #4]
 80161b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80161b8:	f7fa ffa2 	bl	8011100 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>
 80161bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80161c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80161c2:	4619      	mov	r1, r3
 80161c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80161c6:	47a0      	blx	r4
 80161c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80161cc:	4618      	mov	r0, r3
 80161ce:	f7fc f87f 	bl	80122d0 <_ZN19DoublesEqualFailureD1Ev>
 80161d2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80161d6:	4618      	mov	r0, r3
 80161d8:	f7f9 fa1f 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 80161dc:	bf00      	nop
 80161de:	376c      	adds	r7, #108	; 0x6c
 80161e0:	46bd      	mov	sp, r7
 80161e2:	bd90      	pop	{r4, r7, pc}

080161e4 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator>:

void UtestShell::assertBinaryEqual(const void *expected, const void *actual, size_t length, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80161e4:	b590      	push	{r4, r7, lr}
 80161e6:	b0a7      	sub	sp, #156	; 0x9c
 80161e8:	af04      	add	r7, sp, #16
 80161ea:	60f8      	str	r0, [r7, #12]
 80161ec:	60b9      	str	r1, [r7, #8]
 80161ee:	607a      	str	r2, [r7, #4]
 80161f0:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80161f2:	68f8      	ldr	r0, [r7, #12]
 80161f4:	f000 fa22 	bl	801663c <_ZN10UtestShell13getTestResultEv>
 80161f8:	4603      	mov	r3, r0
 80161fa:	681a      	ldr	r2, [r3, #0]
 80161fc:	3228      	adds	r2, #40	; 0x28
 80161fe:	6812      	ldr	r2, [r2, #0]
 8016200:	4618      	mov	r0, r3
 8016202:	4790      	blx	r2
	if (length == 0) return;
 8016204:	683b      	ldr	r3, [r7, #0]
 8016206:	2b00      	cmp	r3, #0
 8016208:	d075      	beq.n	80162f6 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x112>
    if (actual == NULLPTR && expected == NULLPTR) return;
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	2b00      	cmp	r3, #0
 801620e:	d102      	bne.n	8016216 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x32>
 8016210:	68bb      	ldr	r3, [r7, #8]
 8016212:	2b00      	cmp	r3, #0
 8016214:	d071      	beq.n	80162fa <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x116>
    if (actual == NULLPTR || expected == NULLPTR)
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	2b00      	cmp	r3, #0
 801621a:	d002      	beq.n	8016222 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x3e>
 801621c:	68bb      	ldr	r3, [r7, #8]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d12d      	bne.n	801627e <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x9a>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 8016222:	68fb      	ldr	r3, [r7, #12]
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	339c      	adds	r3, #156	; 0x9c
 8016228:	681c      	ldr	r4, [r3, #0]
 801622a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801622e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8016232:	4618      	mov	r0, r3
 8016234:	f7f8 fe39 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8016238:	f107 0010 	add.w	r0, r7, #16
 801623c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8016240:	9303      	str	r3, [sp, #12]
 8016242:	683b      	ldr	r3, [r7, #0]
 8016244:	9302      	str	r3, [sp, #8]
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	9301      	str	r3, [sp, #4]
 801624a:	68bb      	ldr	r3, [r7, #8]
 801624c:	9300      	str	r3, [sp, #0]
 801624e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016252:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8016256:	68f9      	ldr	r1, [r7, #12]
 8016258:	f7fb fd70 	bl	8011d3c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 801625c:	f107 0310 	add.w	r3, r7, #16
 8016260:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8016264:	4619      	mov	r1, r3
 8016266:	68f8      	ldr	r0, [r7, #12]
 8016268:	47a0      	blx	r4
 801626a:	f107 0310 	add.w	r3, r7, #16
 801626e:	4618      	mov	r0, r3
 8016270:	f7fb feda 	bl	8012028 <_ZN18BinaryEqualFailureD1Ev>
 8016274:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8016278:	4618      	mov	r0, r3
 801627a:	f7f9 f9ce 	bl	800f61a <_ZN12SimpleStringD1Ev>
    if (SimpleString::MemCmp(expected, actual, length) != 0)
 801627e:	683a      	ldr	r2, [r7, #0]
 8016280:	6879      	ldr	r1, [r7, #4]
 8016282:	68b8      	ldr	r0, [r7, #8]
 8016284:	f7f8 fd30 	bl	800ece8 <_ZN12SimpleString6MemCmpEPKvS1_j>
 8016288:	4603      	mov	r3, r0
 801628a:	2b00      	cmp	r3, #0
 801628c:	bf14      	ite	ne
 801628e:	2301      	movne	r3, #1
 8016290:	2300      	moveq	r3, #0
 8016292:	b2db      	uxtb	r3, r3
 8016294:	2b00      	cmp	r3, #0
 8016296:	d031      	beq.n	80162fc <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	681b      	ldr	r3, [r3, #0]
 801629c:	339c      	adds	r3, #156	; 0x9c
 801629e:	681c      	ldr	r4, [r3, #0]
 80162a0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80162a4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80162a8:	4618      	mov	r0, r3
 80162aa:	f7f8 fdfe 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80162ae:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80162b2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80162b6:	9303      	str	r3, [sp, #12]
 80162b8:	683b      	ldr	r3, [r7, #0]
 80162ba:	9302      	str	r3, [sp, #8]
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	9301      	str	r3, [sp, #4]
 80162c0:	68bb      	ldr	r3, [r7, #8]
 80162c2:	9300      	str	r3, [sp, #0]
 80162c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80162c8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80162cc:	68f9      	ldr	r1, [r7, #12]
 80162ce:	f7fb fd35 	bl	8011d3c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 80162d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80162d6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80162da:	4619      	mov	r1, r3
 80162dc:	68f8      	ldr	r0, [r7, #12]
 80162de:	47a0      	blx	r4
 80162e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80162e4:	4618      	mov	r0, r3
 80162e6:	f7fb fe9f 	bl	8012028 <_ZN18BinaryEqualFailureD1Ev>
 80162ea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80162ee:	4618      	mov	r0, r3
 80162f0:	f7f9 f993 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80162f4:	e002      	b.n	80162fc <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
	if (length == 0) return;
 80162f6:	bf00      	nop
 80162f8:	e000      	b.n	80162fc <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80162fa:	bf00      	nop
}
 80162fc:	378c      	adds	r7, #140	; 0x8c
 80162fe:	46bd      	mov	sp, r7
 8016300:	bd90      	pop	{r4, r7, pc}

08016302 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator>:

void UtestShell::assertBitsEqual(unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8016302:	b590      	push	{r4, r7, lr}
 8016304:	b09b      	sub	sp, #108	; 0x6c
 8016306:	af06      	add	r7, sp, #24
 8016308:	60f8      	str	r0, [r7, #12]
 801630a:	60b9      	str	r1, [r7, #8]
 801630c:	607a      	str	r2, [r7, #4]
 801630e:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8016310:	68f8      	ldr	r0, [r7, #12]
 8016312:	f000 f993 	bl	801663c <_ZN10UtestShell13getTestResultEv>
 8016316:	4603      	mov	r3, r0
 8016318:	681a      	ldr	r2, [r3, #0]
 801631a:	3228      	adds	r2, #40	; 0x28
 801631c:	6812      	ldr	r2, [r2, #0]
 801631e:	4618      	mov	r0, r3
 8016320:	4790      	blx	r2
    if ((expected & mask) != (actual & mask))
 8016322:	68ba      	ldr	r2, [r7, #8]
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	405a      	eors	r2, r3
 8016328:	683b      	ldr	r3, [r7, #0]
 801632a:	4013      	ands	r3, r2
 801632c:	2b00      	cmp	r3, #0
 801632e:	d02b      	beq.n	8016388 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator+0x86>
        failWith(BitsEqualFailure(this, fileName, lineNumber, expected, actual, mask, byteCount, text), testTerminator);
 8016330:	68fb      	ldr	r3, [r7, #12]
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	339c      	adds	r3, #156	; 0x9c
 8016336:	681c      	ldr	r4, [r3, #0]
 8016338:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801633c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801633e:	4618      	mov	r0, r3
 8016340:	f7f8 fdb3 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8016344:	f107 0014 	add.w	r0, r7, #20
 8016348:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801634c:	9304      	str	r3, [sp, #16]
 801634e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016350:	9303      	str	r3, [sp, #12]
 8016352:	683b      	ldr	r3, [r7, #0]
 8016354:	9302      	str	r3, [sp, #8]
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	9301      	str	r3, [sp, #4]
 801635a:	68bb      	ldr	r3, [r7, #8]
 801635c:	9300      	str	r3, [sp, #0]
 801635e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016360:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016362:	68f9      	ldr	r1, [r7, #12]
 8016364:	f7fb fd7a 	bl	8011e5c <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>
 8016368:	f107 0314 	add.w	r3, r7, #20
 801636c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801636e:	4619      	mov	r1, r3
 8016370:	68f8      	ldr	r0, [r7, #12]
 8016372:	47a0      	blx	r4
 8016374:	f107 0314 	add.w	r3, r7, #20
 8016378:	4618      	mov	r0, r3
 801637a:	f7fb fe33 	bl	8011fe4 <_ZN16BitsEqualFailureD1Ev>
 801637e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016382:	4618      	mov	r0, r3
 8016384:	f7f9 f949 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 8016388:	bf00      	nop
 801638a:	3754      	adds	r7, #84	; 0x54
 801638c:	46bd      	mov	sp, r7
 801638e:	bd90      	pop	{r4, r7, pc}

08016390 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertEquals(bool failed, const char* expected, const char* actual, const char* text, const char* file, size_t line, const TestTerminator& testTerminator)
{
 8016390:	b590      	push	{r4, r7, lr}
 8016392:	b09d      	sub	sp, #116	; 0x74
 8016394:	af04      	add	r7, sp, #16
 8016396:	60f8      	str	r0, [r7, #12]
 8016398:	607a      	str	r2, [r7, #4]
 801639a:	603b      	str	r3, [r7, #0]
 801639c:	460b      	mov	r3, r1
 801639e:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 80163a0:	68f8      	ldr	r0, [r7, #12]
 80163a2:	f000 f94b 	bl	801663c <_ZN10UtestShell13getTestResultEv>
 80163a6:	4603      	mov	r3, r0
 80163a8:	681a      	ldr	r2, [r3, #0]
 80163aa:	3228      	adds	r2, #40	; 0x28
 80163ac:	6812      	ldr	r2, [r2, #0]
 80163ae:	4618      	mov	r0, r3
 80163b0:	4790      	blx	r2
    if (failed)
 80163b2:	7afb      	ldrb	r3, [r7, #11]
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d03f      	beq.n	8016438 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator+0xa8>
        failWith(CheckEqualFailure(this, file, line, expected, actual, text), testTerminator);
 80163b8:	68fb      	ldr	r3, [r7, #12]
 80163ba:	681b      	ldr	r3, [r3, #0]
 80163bc:	339c      	adds	r3, #156	; 0x9c
 80163be:	681c      	ldr	r4, [r3, #0]
 80163c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80163c4:	6879      	ldr	r1, [r7, #4]
 80163c6:	4618      	mov	r0, r3
 80163c8:	f7f8 fd6f 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80163cc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80163d0:	6839      	ldr	r1, [r7, #0]
 80163d2:	4618      	mov	r0, r3
 80163d4:	f7f8 fd69 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80163d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80163dc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80163de:	4618      	mov	r0, r3
 80163e0:	f7f8 fd63 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80163e4:	f107 0014 	add.w	r0, r7, #20
 80163e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80163ec:	9302      	str	r3, [sp, #8]
 80163ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80163f2:	9301      	str	r3, [sp, #4]
 80163f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80163f8:	9300      	str	r3, [sp, #0]
 80163fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80163fc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80163fe:	68f9      	ldr	r1, [r7, #12]
 8016400:	f7fa ff30 	bl	8011264 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8016404:	f107 0314 	add.w	r3, r7, #20
 8016408:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801640a:	4619      	mov	r1, r3
 801640c:	68f8      	ldr	r0, [r7, #12]
 801640e:	47a0      	blx	r4
 8016410:	f107 0314 	add.w	r3, r7, #20
 8016414:	4618      	mov	r0, r3
 8016416:	f7fb ff39 	bl	801228c <_ZN17CheckEqualFailureD1Ev>
 801641a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801641e:	4618      	mov	r0, r3
 8016420:	f7f9 f8fb 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8016424:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8016428:	4618      	mov	r0, r3
 801642a:	f7f9 f8f6 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801642e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016432:	4618      	mov	r0, r3
 8016434:	f7f9 f8f1 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 8016438:	bf00      	nop
 801643a:	3764      	adds	r7, #100	; 0x64
 801643c:	46bd      	mov	sp, r7
 801643e:	bd90      	pop	{r4, r7, pc}

08016440 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCompare(bool comparison, const char *checkString, const char *comparisonString, const char *text, const char *fileName, size_t lineNumber, const TestTerminator &testTerminator)
{
 8016440:	b590      	push	{r4, r7, lr}
 8016442:	b09d      	sub	sp, #116	; 0x74
 8016444:	af04      	add	r7, sp, #16
 8016446:	60f8      	str	r0, [r7, #12]
 8016448:	607a      	str	r2, [r7, #4]
 801644a:	603b      	str	r3, [r7, #0]
 801644c:	460b      	mov	r3, r1
 801644e:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8016450:	68f8      	ldr	r0, [r7, #12]
 8016452:	f000 f8f3 	bl	801663c <_ZN10UtestShell13getTestResultEv>
 8016456:	4603      	mov	r3, r0
 8016458:	681a      	ldr	r2, [r3, #0]
 801645a:	3228      	adds	r2, #40	; 0x28
 801645c:	6812      	ldr	r2, [r2, #0]
 801645e:	4618      	mov	r0, r3
 8016460:	4790      	blx	r2
    if (!comparison)
 8016462:	7afb      	ldrb	r3, [r7, #11]
 8016464:	f083 0301 	eor.w	r3, r3, #1
 8016468:	b2db      	uxtb	r3, r3
 801646a:	2b00      	cmp	r3, #0
 801646c:	d03f      	beq.n	80164ee <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(ComparisonFailure(this, fileName, lineNumber, checkString, comparisonString, text), testTerminator);
 801646e:	68fb      	ldr	r3, [r7, #12]
 8016470:	681b      	ldr	r3, [r3, #0]
 8016472:	339c      	adds	r3, #156	; 0x9c
 8016474:	681c      	ldr	r4, [r3, #0]
 8016476:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801647a:	6879      	ldr	r1, [r7, #4]
 801647c:	4618      	mov	r0, r3
 801647e:	f7f8 fd14 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8016482:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8016486:	6839      	ldr	r1, [r7, #0]
 8016488:	4618      	mov	r0, r3
 801648a:	f7f8 fd0e 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801648e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8016492:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8016494:	4618      	mov	r0, r3
 8016496:	f7f8 fd08 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801649a:	f107 0014 	add.w	r0, r7, #20
 801649e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80164a2:	9302      	str	r3, [sp, #8]
 80164a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80164a8:	9301      	str	r3, [sp, #4]
 80164aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80164ae:	9300      	str	r3, [sp, #0]
 80164b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80164b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80164b4:	68f9      	ldr	r1, [r7, #12]
 80164b6:	f7fa ff83 	bl	80113c0 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80164ba:	f107 0314 	add.w	r3, r7, #20
 80164be:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80164c0:	4619      	mov	r1, r3
 80164c2:	68f8      	ldr	r0, [r7, #12]
 80164c4:	47a0      	blx	r4
 80164c6:	f107 0314 	add.w	r3, r7, #20
 80164ca:	4618      	mov	r0, r3
 80164cc:	f7fb febc 	bl	8012248 <_ZN17ComparisonFailureD1Ev>
 80164d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80164d4:	4618      	mov	r0, r3
 80164d6:	f7f9 f8a0 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80164da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80164de:	4618      	mov	r0, r3
 80164e0:	f7f9 f89b 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80164e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80164e8:	4618      	mov	r0, r3
 80164ea:	f7f9 f896 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 80164ee:	bf00      	nop
 80164f0:	3764      	adds	r7, #100	; 0x64
 80164f2:	46bd      	mov	sp, r7
 80164f4:	bd90      	pop	{r4, r7, pc}
	...

080164f8 <_ZN10UtestShell5printEPKcS1_j>:

void UtestShell::print(const char *text, const char* fileName, size_t lineNumber)
{
 80164f8:	b5b0      	push	{r4, r5, r7, lr}
 80164fa:	b088      	sub	sp, #32
 80164fc:	af00      	add	r7, sp, #0
 80164fe:	60f8      	str	r0, [r7, #12]
 8016500:	60b9      	str	r1, [r7, #8]
 8016502:	607a      	str	r2, [r7, #4]
 8016504:	603b      	str	r3, [r7, #0]
    SimpleString stringToPrint = "\n";
 8016506:	f107 0310 	add.w	r3, r7, #16
 801650a:	4924      	ldr	r1, [pc, #144]	; (801659c <_ZN10UtestShell5printEPKcS1_j+0xa4>)
 801650c:	4618      	mov	r0, r3
 801650e:	f7f8 fccc 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
    stringToPrint += fileName;
 8016512:	f107 0310 	add.w	r3, r7, #16
 8016516:	6879      	ldr	r1, [r7, #4]
 8016518:	4618      	mov	r0, r3
 801651a:	f7f9 f90d 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    stringToPrint += ":";
 801651e:	f107 0310 	add.w	r3, r7, #16
 8016522:	491f      	ldr	r1, [pc, #124]	; (80165a0 <_ZN10UtestShell5printEPKcS1_j+0xa8>)
 8016524:	4618      	mov	r0, r3
 8016526:	f7f9 f907 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    stringToPrint += StringFrom(lineNumber);
 801652a:	f107 0318 	add.w	r3, r7, #24
 801652e:	6839      	ldr	r1, [r7, #0]
 8016530:	4618      	mov	r0, r3
 8016532:	f7f9 fda1 	bl	8010078 <_Z10StringFromj>
 8016536:	f107 0218 	add.w	r2, r7, #24
 801653a:	f107 0310 	add.w	r3, r7, #16
 801653e:	4611      	mov	r1, r2
 8016540:	4618      	mov	r0, r3
 8016542:	f7f9 f8e7 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 8016546:	f107 0318 	add.w	r3, r7, #24
 801654a:	4618      	mov	r0, r3
 801654c:	f7f9 f865 	bl	800f61a <_ZN12SimpleStringD1Ev>
    stringToPrint += " ";
 8016550:	f107 0310 	add.w	r3, r7, #16
 8016554:	4913      	ldr	r1, [pc, #76]	; (80165a4 <_ZN10UtestShell5printEPKcS1_j+0xac>)
 8016556:	4618      	mov	r0, r3
 8016558:	f7f9 f8ee 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    stringToPrint += text;
 801655c:	f107 0310 	add.w	r3, r7, #16
 8016560:	68b9      	ldr	r1, [r7, #8]
 8016562:	4618      	mov	r0, r3
 8016564:	f7f9 f8e8 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    getTestResult()->print(stringToPrint.asCharString());
 8016568:	68f8      	ldr	r0, [r7, #12]
 801656a:	f000 f867 	bl	801663c <_ZN10UtestShell13getTestResultEv>
 801656e:	4604      	mov	r4, r0
 8016570:	6823      	ldr	r3, [r4, #0]
 8016572:	3338      	adds	r3, #56	; 0x38
 8016574:	681d      	ldr	r5, [r3, #0]
 8016576:	f107 0310 	add.w	r3, r7, #16
 801657a:	4618      	mov	r0, r3
 801657c:	f7f9 f820 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 8016580:	4603      	mov	r3, r0
 8016582:	4619      	mov	r1, r3
 8016584:	4620      	mov	r0, r4
 8016586:	47a8      	blx	r5
    SimpleString stringToPrint = "\n";
 8016588:	f107 0310 	add.w	r3, r7, #16
 801658c:	4618      	mov	r0, r3
 801658e:	f7f9 f844 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 8016592:	bf00      	nop
 8016594:	3720      	adds	r7, #32
 8016596:	46bd      	mov	sp, r7
 8016598:	bdb0      	pop	{r4, r5, r7, pc}
 801659a:	bf00      	nop
 801659c:	08027cb0 	.word	0x08027cb0
 80165a0:	08027cb4 	.word	0x08027cb4
 80165a4:	08027cb8 	.word	0x08027cb8

080165a8 <_ZN10UtestShell5printERK12SimpleStringPKcj>:

void UtestShell::print(const SimpleString& text, const char* fileName, size_t lineNumber)
{
 80165a8:	b590      	push	{r4, r7, lr}
 80165aa:	b085      	sub	sp, #20
 80165ac:	af00      	add	r7, sp, #0
 80165ae:	60f8      	str	r0, [r7, #12]
 80165b0:	60b9      	str	r1, [r7, #8]
 80165b2:	607a      	str	r2, [r7, #4]
 80165b4:	603b      	str	r3, [r7, #0]
    print(text.asCharString(), fileName, lineNumber);
 80165b6:	68fb      	ldr	r3, [r7, #12]
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	3370      	adds	r3, #112	; 0x70
 80165bc:	681c      	ldr	r4, [r3, #0]
 80165be:	68b8      	ldr	r0, [r7, #8]
 80165c0:	f7f8 fffe 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 80165c4:	4601      	mov	r1, r0
 80165c6:	683b      	ldr	r3, [r7, #0]
 80165c8:	687a      	ldr	r2, [r7, #4]
 80165ca:	68f8      	ldr	r0, [r7, #12]
 80165cc:	47a0      	blx	r4
}
 80165ce:	bf00      	nop
 80165d0:	3714      	adds	r7, #20
 80165d2:	46bd      	mov	sp, r7
 80165d4:	bd90      	pop	{r4, r7, pc}

080165d6 <_ZN10UtestShell16printVeryVerboseEPKc>:

void UtestShell::printVeryVerbose(const char* text)
{
 80165d6:	b580      	push	{r7, lr}
 80165d8:	b082      	sub	sp, #8
 80165da:	af00      	add	r7, sp, #0
 80165dc:	6078      	str	r0, [r7, #4]
 80165de:	6039      	str	r1, [r7, #0]
    getTestResult()->printVeryVerbose(text);
 80165e0:	6878      	ldr	r0, [r7, #4]
 80165e2:	f000 f82b 	bl	801663c <_ZN10UtestShell13getTestResultEv>
 80165e6:	4603      	mov	r3, r0
 80165e8:	681a      	ldr	r2, [r3, #0]
 80165ea:	323c      	adds	r2, #60	; 0x3c
 80165ec:	6812      	ldr	r2, [r2, #0]
 80165ee:	6839      	ldr	r1, [r7, #0]
 80165f0:	4618      	mov	r0, r3
 80165f2:	4790      	blx	r2
}
 80165f4:	bf00      	nop
 80165f6:	3708      	adds	r7, #8
 80165f8:	46bd      	mov	sp, r7
 80165fa:	bd80      	pop	{r7, pc}

080165fc <_ZN10UtestShell13setTestResultEP10TestResult>:

TestResult* UtestShell::testResult_ = NULLPTR;
UtestShell* UtestShell::currentTest_ = NULLPTR;

void UtestShell::setTestResult(TestResult* result)
{
 80165fc:	b480      	push	{r7}
 80165fe:	b083      	sub	sp, #12
 8016600:	af00      	add	r7, sp, #0
 8016602:	6078      	str	r0, [r7, #4]
 8016604:	6039      	str	r1, [r7, #0]
    testResult_ = result;
 8016606:	4a04      	ldr	r2, [pc, #16]	; (8016618 <_ZN10UtestShell13setTestResultEP10TestResult+0x1c>)
 8016608:	683b      	ldr	r3, [r7, #0]
 801660a:	6013      	str	r3, [r2, #0]
}
 801660c:	bf00      	nop
 801660e:	370c      	adds	r7, #12
 8016610:	46bd      	mov	sp, r7
 8016612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016616:	4770      	bx	lr
 8016618:	20000c30 	.word	0x20000c30

0801661c <_ZN10UtestShell14setCurrentTestEPS_>:

void UtestShell::setCurrentTest(UtestShell* test)
{
 801661c:	b480      	push	{r7}
 801661e:	b083      	sub	sp, #12
 8016620:	af00      	add	r7, sp, #0
 8016622:	6078      	str	r0, [r7, #4]
 8016624:	6039      	str	r1, [r7, #0]
    currentTest_ = test;
 8016626:	4a04      	ldr	r2, [pc, #16]	; (8016638 <_ZN10UtestShell14setCurrentTestEPS_+0x1c>)
 8016628:	683b      	ldr	r3, [r7, #0]
 801662a:	6013      	str	r3, [r2, #0]
}
 801662c:	bf00      	nop
 801662e:	370c      	adds	r7, #12
 8016630:	46bd      	mov	sp, r7
 8016632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016636:	4770      	bx	lr
 8016638:	20000c34 	.word	0x20000c34

0801663c <_ZN10UtestShell13getTestResultEv>:

TestResult* UtestShell::getTestResult()
{
 801663c:	b580      	push	{r7, lr}
 801663e:	b082      	sub	sp, #8
 8016640:	af00      	add	r7, sp, #0
 8016642:	6078      	str	r0, [r7, #4]
    if (testResult_ == NULLPTR)
 8016644:	4b09      	ldr	r3, [pc, #36]	; (801666c <_ZN10UtestShell13getTestResultEv+0x30>)
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	2b00      	cmp	r3, #0
 801664a:	d109      	bne.n	8016660 <_ZN10UtestShell13getTestResultEv+0x24>
        return &OutsideTestRunnerUTest::instance().getTestResult();
 801664c:	f7fe fbb2 	bl	8014db4 <_ZN22OutsideTestRunnerUTest8instanceEv>
 8016650:	4603      	mov	r3, r0
 8016652:	681a      	ldr	r2, [r3, #0]
 8016654:	32a4      	adds	r2, #164	; 0xa4
 8016656:	6812      	ldr	r2, [r2, #0]
 8016658:	4618      	mov	r0, r3
 801665a:	4790      	blx	r2
 801665c:	4603      	mov	r3, r0
 801665e:	e001      	b.n	8016664 <_ZN10UtestShell13getTestResultEv+0x28>
    return testResult_;
 8016660:	4b02      	ldr	r3, [pc, #8]	; (801666c <_ZN10UtestShell13getTestResultEv+0x30>)
 8016662:	681b      	ldr	r3, [r3, #0]
}
 8016664:	4618      	mov	r0, r3
 8016666:	3708      	adds	r7, #8
 8016668:	46bd      	mov	sp, r7
 801666a:	bd80      	pop	{r7, pc}
 801666c:	20000c30 	.word	0x20000c30

08016670 <_ZN10UtestShell10getCurrentEv>:

UtestShell* UtestShell::getCurrent()
{
 8016670:	b580      	push	{r7, lr}
 8016672:	af00      	add	r7, sp, #0
    if (currentTest_ == NULLPTR)
 8016674:	4b05      	ldr	r3, [pc, #20]	; (801668c <_ZN10UtestShell10getCurrentEv+0x1c>)
 8016676:	681b      	ldr	r3, [r3, #0]
 8016678:	2b00      	cmp	r3, #0
 801667a:	d103      	bne.n	8016684 <_ZN10UtestShell10getCurrentEv+0x14>
        return &OutsideTestRunnerUTest::instance();
 801667c:	f7fe fb9a 	bl	8014db4 <_ZN22OutsideTestRunnerUTest8instanceEv>
 8016680:	4603      	mov	r3, r0
 8016682:	e001      	b.n	8016688 <_ZN10UtestShell10getCurrentEv+0x18>
    return currentTest_;
 8016684:	4b01      	ldr	r3, [pc, #4]	; (801668c <_ZN10UtestShell10getCurrentEv+0x1c>)
 8016686:	681b      	ldr	r3, [r3, #0]
}
 8016688:	4618      	mov	r0, r3
 801668a:	bd80      	pop	{r7, pc}
 801668c:	20000c34 	.word	0x20000c34

08016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>:

const TestTerminator &UtestShell::getCurrentTestTerminator()
{
 8016690:	b480      	push	{r7}
 8016692:	af00      	add	r7, sp, #0
    return *currentTestTerminator_;
 8016694:	4b03      	ldr	r3, [pc, #12]	; (80166a4 <_ZN10UtestShell24getCurrentTestTerminatorEv+0x14>)
 8016696:	681b      	ldr	r3, [r3, #0]
}
 8016698:	4618      	mov	r0, r3
 801669a:	46bd      	mov	sp, r7
 801669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166a0:	4770      	bx	lr
 80166a2:	bf00      	nop
 80166a4:	20000094 	.word	0x20000094

080166a8 <_ZN10UtestShell14setCrashOnFailEv>:

void UtestShell::setCrashOnFail()
{
 80166a8:	b480      	push	{r7}
 80166aa:	af00      	add	r7, sp, #0
    currentTestTerminator_ = &crashingTestTerminator;
 80166ac:	4b03      	ldr	r3, [pc, #12]	; (80166bc <_ZN10UtestShell14setCrashOnFailEv+0x14>)
 80166ae:	4a04      	ldr	r2, [pc, #16]	; (80166c0 <_ZN10UtestShell14setCrashOnFailEv+0x18>)
 80166b0:	601a      	str	r2, [r3, #0]
}
 80166b2:	bf00      	nop
 80166b4:	46bd      	mov	sp, r7
 80166b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ba:	4770      	bx	lr
 80166bc:	20000094 	.word	0x20000094
 80166c0:	20000090 	.word	0x20000090

080166c4 <_ZN5UtestC1Ev>:
{
}

////////////// Utest ////////////

Utest::Utest()
 80166c4:	b480      	push	{r7}
 80166c6:	b083      	sub	sp, #12
 80166c8:	af00      	add	r7, sp, #0
 80166ca:	6078      	str	r0, [r7, #4]
 80166cc:	4a04      	ldr	r2, [pc, #16]	; (80166e0 <_ZN5UtestC1Ev+0x1c>)
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	601a      	str	r2, [r3, #0]
{
}
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	4618      	mov	r0, r3
 80166d6:	370c      	adds	r7, #12
 80166d8:	46bd      	mov	sp, r7
 80166da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166de:	4770      	bx	lr
 80166e0:	0802ba74 	.word	0x0802ba74

080166e4 <_ZN5UtestD1Ev>:

Utest::~Utest()
 80166e4:	b480      	push	{r7}
 80166e6:	b083      	sub	sp, #12
 80166e8:	af00      	add	r7, sp, #0
 80166ea:	6078      	str	r0, [r7, #4]
 80166ec:	4a04      	ldr	r2, [pc, #16]	; (8016700 <_ZN5UtestD1Ev+0x1c>)
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	601a      	str	r2, [r3, #0]
{
}
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	4618      	mov	r0, r3
 80166f6:	370c      	adds	r7, #12
 80166f8:	46bd      	mov	sp, r7
 80166fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166fe:	4770      	bx	lr
 8016700:	0802ba74 	.word	0x0802ba74

08016704 <_ZN5UtestD0Ev>:
Utest::~Utest()
 8016704:	b580      	push	{r7, lr}
 8016706:	b082      	sub	sp, #8
 8016708:	af00      	add	r7, sp, #0
 801670a:	6078      	str	r0, [r7, #4]
}
 801670c:	6878      	ldr	r0, [r7, #4]
 801670e:	f7ff ffe9 	bl	80166e4 <_ZN5UtestD1Ev>
 8016712:	2104      	movs	r1, #4
 8016714:	6878      	ldr	r0, [r7, #4]
 8016716:	f7f6 f819 	bl	800c74c <_ZdlPvj>
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	4618      	mov	r0, r3
 801671e:	3708      	adds	r7, #8
 8016720:	46bd      	mov	sp, r7
 8016722:	bd80      	pop	{r7, pc}

08016724 <_ZN5Utest3runEv>:

}
#else

void Utest::run()
{
 8016724:	b580      	push	{r7, lr}
 8016726:	b082      	sub	sp, #8
 8016728:	af00      	add	r7, sp, #0
 801672a:	6078      	str	r0, [r7, #4]
    if (PlatformSpecificSetJmp(helperDoTestSetup, this)) {
 801672c:	4b0d      	ldr	r3, [pc, #52]	; (8016764 <_ZN5Utest3runEv+0x40>)
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	6879      	ldr	r1, [r7, #4]
 8016732:	480d      	ldr	r0, [pc, #52]	; (8016768 <_ZN5Utest3runEv+0x44>)
 8016734:	4798      	blx	r3
 8016736:	4603      	mov	r3, r0
 8016738:	2b00      	cmp	r3, #0
 801673a:	bf14      	ite	ne
 801673c:	2301      	movne	r3, #1
 801673e:	2300      	moveq	r3, #0
 8016740:	b2db      	uxtb	r3, r3
 8016742:	2b00      	cmp	r3, #0
 8016744:	d004      	beq.n	8016750 <_ZN5Utest3runEv+0x2c>
        PlatformSpecificSetJmp(helperDoTestBody, this);
 8016746:	4b07      	ldr	r3, [pc, #28]	; (8016764 <_ZN5Utest3runEv+0x40>)
 8016748:	681b      	ldr	r3, [r3, #0]
 801674a:	6879      	ldr	r1, [r7, #4]
 801674c:	4807      	ldr	r0, [pc, #28]	; (801676c <_ZN5Utest3runEv+0x48>)
 801674e:	4798      	blx	r3
    }
    PlatformSpecificSetJmp(helperDoTestTeardown, this);
 8016750:	4b04      	ldr	r3, [pc, #16]	; (8016764 <_ZN5Utest3runEv+0x40>)
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	6879      	ldr	r1, [r7, #4]
 8016756:	4806      	ldr	r0, [pc, #24]	; (8016770 <_ZN5Utest3runEv+0x4c>)
 8016758:	4798      	blx	r3
}
 801675a:	bf00      	nop
 801675c:	3708      	adds	r7, #8
 801675e:	46bd      	mov	sp, r7
 8016760:	bd80      	pop	{r7, pc}
 8016762:	bf00      	nop
 8016764:	200000a4 	.word	0x200000a4
 8016768:	08014e11 	.word	0x08014e11
 801676c:	08014e2d 	.word	0x08014e2d
 8016770:	08014e49 	.word	0x08014e49

08016774 <_ZN5Utest5setupEv>:

#endif

void Utest::setup()
{
 8016774:	b480      	push	{r7}
 8016776:	b083      	sub	sp, #12
 8016778:	af00      	add	r7, sp, #0
 801677a:	6078      	str	r0, [r7, #4]
}
 801677c:	bf00      	nop
 801677e:	370c      	adds	r7, #12
 8016780:	46bd      	mov	sp, r7
 8016782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016786:	4770      	bx	lr

08016788 <_ZN5Utest8testBodyEv>:

void Utest::testBody()
{
 8016788:	b480      	push	{r7}
 801678a:	b083      	sub	sp, #12
 801678c:	af00      	add	r7, sp, #0
 801678e:	6078      	str	r0, [r7, #4]
}
 8016790:	bf00      	nop
 8016792:	370c      	adds	r7, #12
 8016794:	46bd      	mov	sp, r7
 8016796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801679a:	4770      	bx	lr

0801679c <_ZN5Utest8teardownEv>:

void Utest::teardown()
{
 801679c:	b480      	push	{r7}
 801679e:	b083      	sub	sp, #12
 80167a0:	af00      	add	r7, sp, #0
 80167a2:	6078      	str	r0, [r7, #4]
}
 80167a4:	bf00      	nop
 80167a6:	370c      	adds	r7, #12
 80167a8:	46bd      	mov	sp, r7
 80167aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ae:	4770      	bx	lr

080167b0 <_ZN14TestTerminatorD1Ev>:


/////////////////// Terminators

TestTerminator::~TestTerminator()
 80167b0:	b480      	push	{r7}
 80167b2:	b083      	sub	sp, #12
 80167b4:	af00      	add	r7, sp, #0
 80167b6:	6078      	str	r0, [r7, #4]
 80167b8:	4a04      	ldr	r2, [pc, #16]	; (80167cc <_ZN14TestTerminatorD1Ev+0x1c>)
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	601a      	str	r2, [r3, #0]
{
}
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	4618      	mov	r0, r3
 80167c2:	370c      	adds	r7, #12
 80167c4:	46bd      	mov	sp, r7
 80167c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ca:	4770      	bx	lr
 80167cc:	0802ba60 	.word	0x0802ba60

080167d0 <_ZNK20NormalTestTerminator15exitCurrentTestEv>:

void NormalTestTerminator::exitCurrentTest() const
{
 80167d0:	b580      	push	{r7, lr}
 80167d2:	b084      	sub	sp, #16
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	6078      	str	r0, [r7, #4]
    #if CPPUTEST_USE_STD_CPP_LIB
        throw CppUTestFailedException();
    #else
        TestTerminatorWithoutExceptions().exitCurrentTest();
 80167d8:	2300      	movs	r3, #0
 80167da:	60fb      	str	r3, [r7, #12]
 80167dc:	f107 030c 	add.w	r3, r7, #12
 80167e0:	4618      	mov	r0, r3
 80167e2:	f7f6 f975 	bl	800cad0 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 80167e6:	f107 030c 	add.w	r3, r7, #12
 80167ea:	4618      	mov	r0, r3
 80167ec:	f000 f82c 	bl	8016848 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>
 80167f0:	f107 030c 	add.w	r3, r7, #12
 80167f4:	4618      	mov	r0, r3
 80167f6:	f000 f835 	bl	8016864 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
    #endif
}
 80167fa:	bf00      	nop
 80167fc:	3710      	adds	r7, #16
 80167fe:	46bd      	mov	sp, r7
 8016800:	bd80      	pop	{r7, pc}
	...

08016804 <_ZN20NormalTestTerminatorD1Ev>:

NormalTestTerminator::~NormalTestTerminator()
 8016804:	b580      	push	{r7, lr}
 8016806:	b082      	sub	sp, #8
 8016808:	af00      	add	r7, sp, #0
 801680a:	6078      	str	r0, [r7, #4]
 801680c:	4a05      	ldr	r2, [pc, #20]	; (8016824 <_ZN20NormalTestTerminatorD1Ev+0x20>)
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	601a      	str	r2, [r3, #0]
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	4618      	mov	r0, r3
 8016816:	f7ff ffcb 	bl	80167b0 <_ZN14TestTerminatorD1Ev>
{
}
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	4618      	mov	r0, r3
 801681e:	3708      	adds	r7, #8
 8016820:	46bd      	mov	sp, r7
 8016822:	bd80      	pop	{r7, pc}
 8016824:	0802ba4c 	.word	0x0802ba4c

08016828 <_ZN20NormalTestTerminatorD0Ev>:
NormalTestTerminator::~NormalTestTerminator()
 8016828:	b580      	push	{r7, lr}
 801682a:	b082      	sub	sp, #8
 801682c:	af00      	add	r7, sp, #0
 801682e:	6078      	str	r0, [r7, #4]
}
 8016830:	6878      	ldr	r0, [r7, #4]
 8016832:	f7ff ffe7 	bl	8016804 <_ZN20NormalTestTerminatorD1Ev>
 8016836:	2104      	movs	r1, #4
 8016838:	6878      	ldr	r0, [r7, #4]
 801683a:	f7f5 ff87 	bl	800c74c <_ZdlPvj>
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	4618      	mov	r0, r3
 8016842:	3708      	adds	r7, #8
 8016844:	46bd      	mov	sp, r7
 8016846:	bd80      	pop	{r7, pc}

08016848 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>:

void TestTerminatorWithoutExceptions::exitCurrentTest() const
{
 8016848:	b580      	push	{r7, lr}
 801684a:	b082      	sub	sp, #8
 801684c:	af00      	add	r7, sp, #0
 801684e:	6078      	str	r0, [r7, #4]
    PlatformSpecificLongJmp();
 8016850:	4b03      	ldr	r3, [pc, #12]	; (8016860 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv+0x18>)
 8016852:	681b      	ldr	r3, [r3, #0]
 8016854:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8016856:	bf00      	nop
 8016858:	3708      	adds	r7, #8
 801685a:	46bd      	mov	sp, r7
 801685c:	bd80      	pop	{r7, pc}
 801685e:	bf00      	nop
 8016860:	200000a0 	.word	0x200000a0

08016864 <_ZN31TestTerminatorWithoutExceptionsD1Ev>:

TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8016864:	b580      	push	{r7, lr}
 8016866:	b082      	sub	sp, #8
 8016868:	af00      	add	r7, sp, #0
 801686a:	6078      	str	r0, [r7, #4]
 801686c:	4a05      	ldr	r2, [pc, #20]	; (8016884 <_ZN31TestTerminatorWithoutExceptionsD1Ev+0x20>)
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	601a      	str	r2, [r3, #0]
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	4618      	mov	r0, r3
 8016876:	f7ff ff9b 	bl	80167b0 <_ZN14TestTerminatorD1Ev>
{
}
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	4618      	mov	r0, r3
 801687e:	3708      	adds	r7, #8
 8016880:	46bd      	mov	sp, r7
 8016882:	bd80      	pop	{r7, pc}
 8016884:	0802ba38 	.word	0x0802ba38

08016888 <_ZN31TestTerminatorWithoutExceptionsD0Ev>:
TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8016888:	b580      	push	{r7, lr}
 801688a:	b082      	sub	sp, #8
 801688c:	af00      	add	r7, sp, #0
 801688e:	6078      	str	r0, [r7, #4]
}
 8016890:	6878      	ldr	r0, [r7, #4]
 8016892:	f7ff ffe7 	bl	8016864 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 8016896:	2104      	movs	r1, #4
 8016898:	6878      	ldr	r0, [r7, #4]
 801689a:	f7f5 ff57 	bl	800c74c <_ZdlPvj>
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	4618      	mov	r0, r3
 80168a2:	3708      	adds	r7, #8
 80168a4:	46bd      	mov	sp, r7
 80168a6:	bd80      	pop	{r7, pc}

080168a8 <_ZNK22CrashingTestTerminator15exitCurrentTestEv>:

void CrashingTestTerminator::exitCurrentTest() const
{
 80168a8:	b580      	push	{r7, lr}
 80168aa:	b082      	sub	sp, #8
 80168ac:	af00      	add	r7, sp, #0
 80168ae:	6078      	str	r0, [r7, #4]
    UtestShell::crash();
 80168b0:	f7fe fbaa 	bl	8015008 <_ZN10UtestShell5crashEv>
    NormalTestTerminator::exitCurrentTest();
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	4618      	mov	r0, r3
 80168b8:	f7ff ff8a 	bl	80167d0 <_ZNK20NormalTestTerminator15exitCurrentTestEv>
}
 80168bc:	bf00      	nop
 80168be:	3708      	adds	r7, #8
 80168c0:	46bd      	mov	sp, r7
 80168c2:	bd80      	pop	{r7, pc}

080168c4 <_ZN22CrashingTestTerminatorD1Ev>:

CrashingTestTerminator::~CrashingTestTerminator()
 80168c4:	b580      	push	{r7, lr}
 80168c6:	b082      	sub	sp, #8
 80168c8:	af00      	add	r7, sp, #0
 80168ca:	6078      	str	r0, [r7, #4]
 80168cc:	4a05      	ldr	r2, [pc, #20]	; (80168e4 <_ZN22CrashingTestTerminatorD1Ev+0x20>)
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	601a      	str	r2, [r3, #0]
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	4618      	mov	r0, r3
 80168d6:	f7ff ff95 	bl	8016804 <_ZN20NormalTestTerminatorD1Ev>
{
}
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	4618      	mov	r0, r3
 80168de:	3708      	adds	r7, #8
 80168e0:	46bd      	mov	sp, r7
 80168e2:	bd80      	pop	{r7, pc}
 80168e4:	0802ba24 	.word	0x0802ba24

080168e8 <_ZN22CrashingTestTerminatorD0Ev>:
CrashingTestTerminator::~CrashingTestTerminator()
 80168e8:	b580      	push	{r7, lr}
 80168ea:	b082      	sub	sp, #8
 80168ec:	af00      	add	r7, sp, #0
 80168ee:	6078      	str	r0, [r7, #4]
}
 80168f0:	6878      	ldr	r0, [r7, #4]
 80168f2:	f7ff ffe7 	bl	80168c4 <_ZN22CrashingTestTerminatorD1Ev>
 80168f6:	2104      	movs	r1, #4
 80168f8:	6878      	ldr	r0, [r7, #4]
 80168fa:	f7f5 ff27 	bl	800c74c <_ZdlPvj>
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	4618      	mov	r0, r3
 8016902:	3708      	adds	r7, #8
 8016904:	46bd      	mov	sp, r7
 8016906:	bd80      	pop	{r7, pc}

08016908 <_ZN22UtestShellPointerArrayC1EP10UtestShell>:
    runIgnored_ = true;
}

//////////////////// UtestShellPointerArray

UtestShellPointerArray::UtestShellPointerArray(UtestShell* firstTest)
 8016908:	b580      	push	{r7, lr}
 801690a:	b084      	sub	sp, #16
 801690c:	af00      	add	r7, sp, #0
 801690e:	6078      	str	r0, [r7, #4]
 8016910:	6039      	str	r1, [r7, #0]
    : arrayOfTests_(NULLPTR), count_(0)
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	2200      	movs	r2, #0
 8016916:	601a      	str	r2, [r3, #0]
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	2200      	movs	r2, #0
 801691c:	605a      	str	r2, [r3, #4]
{
    count_ = (firstTest) ? firstTest->countTests() : 0;
 801691e:	683b      	ldr	r3, [r7, #0]
 8016920:	2b00      	cmp	r3, #0
 8016922:	d007      	beq.n	8016934 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2c>
 8016924:	683b      	ldr	r3, [r7, #0]
 8016926:	681b      	ldr	r3, [r3, #0]
 8016928:	3310      	adds	r3, #16
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	6838      	ldr	r0, [r7, #0]
 801692e:	4798      	blx	r3
 8016930:	4603      	mov	r3, r0
 8016932:	e000      	b.n	8016936 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2e>
 8016934:	2300      	movs	r3, #0
 8016936:	687a      	ldr	r2, [r7, #4]
 8016938:	6053      	str	r3, [r2, #4]
    if (count_ == 0) return;
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	685b      	ldr	r3, [r3, #4]
 801693e:	2b00      	cmp	r3, #0
 8016940:	d02d      	beq.n	801699e <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x96>

    arrayOfTests_ = new UtestShell*[count_];
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	685b      	ldr	r3, [r3, #4]
 8016946:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 801694a:	4293      	cmp	r3, r2
 801694c:	d201      	bcs.n	8016952 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4a>
 801694e:	009b      	lsls	r3, r3, #2
 8016950:	e001      	b.n	8016956 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4e>
 8016952:	f04f 33ff 	mov.w	r3, #4294967295
 8016956:	f240 3237 	movw	r2, #823	; 0x337
 801695a:	4914      	ldr	r1, [pc, #80]	; (80169ac <_ZN22UtestShellPointerArrayC1EP10UtestShell+0xa4>)
 801695c:	4618      	mov	r0, r3
 801695e:	f7f5 ff05 	bl	800c76c <_ZnajPKci>
 8016962:	4602      	mov	r2, r0
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	601a      	str	r2, [r3, #0]

    UtestShell*currentTest = firstTest;
 8016968:	683b      	ldr	r3, [r7, #0]
 801696a:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 801696c:	2300      	movs	r3, #0
 801696e:	60bb      	str	r3, [r7, #8]
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	685b      	ldr	r3, [r3, #4]
 8016974:	68ba      	ldr	r2, [r7, #8]
 8016976:	429a      	cmp	r2, r3
 8016978:	d212      	bcs.n	80169a0 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x98>
    {
        arrayOfTests_[i] = currentTest;
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	681a      	ldr	r2, [r3, #0]
 801697e:	68bb      	ldr	r3, [r7, #8]
 8016980:	009b      	lsls	r3, r3, #2
 8016982:	4413      	add	r3, r2
 8016984:	68fa      	ldr	r2, [r7, #12]
 8016986:	601a      	str	r2, [r3, #0]
        currentTest = currentTest->getNext();
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	330c      	adds	r3, #12
 801698e:	681b      	ldr	r3, [r3, #0]
 8016990:	68f8      	ldr	r0, [r7, #12]
 8016992:	4798      	blx	r3
 8016994:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8016996:	68bb      	ldr	r3, [r7, #8]
 8016998:	3301      	adds	r3, #1
 801699a:	60bb      	str	r3, [r7, #8]
 801699c:	e7e8      	b.n	8016970 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x68>
    if (count_ == 0) return;
 801699e:	bf00      	nop
    }
}
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	4618      	mov	r0, r3
 80169a4:	3710      	adds	r7, #16
 80169a6:	46bd      	mov	sp, r7
 80169a8:	bd80      	pop	{r7, pc}
 80169aa:	bf00      	nop
 80169ac:	08027b40 	.word	0x08027b40

080169b0 <_ZN22UtestShellPointerArrayD1Ev>:

UtestShellPointerArray::~UtestShellPointerArray()
 80169b0:	b580      	push	{r7, lr}
 80169b2:	b082      	sub	sp, #8
 80169b4:	af00      	add	r7, sp, #0
 80169b6:	6078      	str	r0, [r7, #4]
{
    delete [] arrayOfTests_;
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	681b      	ldr	r3, [r3, #0]
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d004      	beq.n	80169ca <_ZN22UtestShellPointerArrayD1Ev+0x1a>
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	4618      	mov	r0, r3
 80169c6:	f7f5 fee5 	bl	800c794 <_ZdaPv>
}
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	4618      	mov	r0, r3
 80169ce:	3708      	adds	r7, #8
 80169d0:	46bd      	mov	sp, r7
 80169d2:	bd80      	pop	{r7, pc}

080169d4 <_ZN22UtestShellPointerArray4swapEjj>:

void UtestShellPointerArray::swap(size_t index1, size_t index2)
{
 80169d4:	b480      	push	{r7}
 80169d6:	b087      	sub	sp, #28
 80169d8:	af00      	add	r7, sp, #0
 80169da:	60f8      	str	r0, [r7, #12]
 80169dc:	60b9      	str	r1, [r7, #8]
 80169de:	607a      	str	r2, [r7, #4]
        UtestShell* e2 = arrayOfTests_[index2];
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	681a      	ldr	r2, [r3, #0]
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	009b      	lsls	r3, r3, #2
 80169e8:	4413      	add	r3, r2
 80169ea:	681b      	ldr	r3, [r3, #0]
 80169ec:	617b      	str	r3, [r7, #20]
        UtestShell* e1 = arrayOfTests_[index1];
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	681a      	ldr	r2, [r3, #0]
 80169f2:	68bb      	ldr	r3, [r7, #8]
 80169f4:	009b      	lsls	r3, r3, #2
 80169f6:	4413      	add	r3, r2
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	613b      	str	r3, [r7, #16]
        arrayOfTests_[index1] = e2;
 80169fc:	68fb      	ldr	r3, [r7, #12]
 80169fe:	681a      	ldr	r2, [r3, #0]
 8016a00:	68bb      	ldr	r3, [r7, #8]
 8016a02:	009b      	lsls	r3, r3, #2
 8016a04:	4413      	add	r3, r2
 8016a06:	697a      	ldr	r2, [r7, #20]
 8016a08:	601a      	str	r2, [r3, #0]
        arrayOfTests_[index2] = e1;
 8016a0a:	68fb      	ldr	r3, [r7, #12]
 8016a0c:	681a      	ldr	r2, [r3, #0]
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	009b      	lsls	r3, r3, #2
 8016a12:	4413      	add	r3, r2
 8016a14:	693a      	ldr	r2, [r7, #16]
 8016a16:	601a      	str	r2, [r3, #0]
}
 8016a18:	bf00      	nop
 8016a1a:	371c      	adds	r7, #28
 8016a1c:	46bd      	mov	sp, r7
 8016a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a22:	4770      	bx	lr

08016a24 <_ZN22UtestShellPointerArray7shuffleEj>:

void UtestShellPointerArray::shuffle(size_t seed)
{
 8016a24:	b580      	push	{r7, lr}
 8016a26:	b084      	sub	sp, #16
 8016a28:	af00      	add	r7, sp, #0
 8016a2a:	6078      	str	r0, [r7, #4]
 8016a2c:	6039      	str	r1, [r7, #0]
    if (count_ == 0) return;
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	685b      	ldr	r3, [r3, #4]
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d028      	beq.n	8016a88 <_ZN22UtestShellPointerArray7shuffleEj+0x64>

    PlatformSpecificSrand((unsigned int) seed);
 8016a36:	4b17      	ldr	r3, [pc, #92]	; (8016a94 <_ZN22UtestShellPointerArray7shuffleEj+0x70>)
 8016a38:	681b      	ldr	r3, [r3, #0]
 8016a3a:	6838      	ldr	r0, [r7, #0]
 8016a3c:	4798      	blx	r3

    for (size_t i = count_ - 1; i >= 1; --i)
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	685b      	ldr	r3, [r3, #4]
 8016a42:	3b01      	subs	r3, #1
 8016a44:	60fb      	str	r3, [r7, #12]
 8016a46:	68fb      	ldr	r3, [r7, #12]
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	d019      	beq.n	8016a80 <_ZN22UtestShellPointerArray7shuffleEj+0x5c>
    {
        if (count_ == 0) return;
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	685b      	ldr	r3, [r3, #4]
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d01b      	beq.n	8016a8c <_ZN22UtestShellPointerArray7shuffleEj+0x68>

        const size_t j = ((size_t)PlatformSpecificRand()) % (i + 1); // distribution biased by modulo, but good enough for shuffling
 8016a54:	4b10      	ldr	r3, [pc, #64]	; (8016a98 <_ZN22UtestShellPointerArray7shuffleEj+0x74>)
 8016a56:	681b      	ldr	r3, [r3, #0]
 8016a58:	4798      	blx	r3
 8016a5a:	4603      	mov	r3, r0
 8016a5c:	461a      	mov	r2, r3
 8016a5e:	68fb      	ldr	r3, [r7, #12]
 8016a60:	3301      	adds	r3, #1
 8016a62:	fbb2 f1f3 	udiv	r1, r2, r3
 8016a66:	fb03 f301 	mul.w	r3, r3, r1
 8016a6a:	1ad3      	subs	r3, r2, r3
 8016a6c:	60bb      	str	r3, [r7, #8]
        swap(i, j);
 8016a6e:	68ba      	ldr	r2, [r7, #8]
 8016a70:	68f9      	ldr	r1, [r7, #12]
 8016a72:	6878      	ldr	r0, [r7, #4]
 8016a74:	f7ff ffae 	bl	80169d4 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = count_ - 1; i >= 1; --i)
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	3b01      	subs	r3, #1
 8016a7c:	60fb      	str	r3, [r7, #12]
 8016a7e:	e7e2      	b.n	8016a46 <_ZN22UtestShellPointerArray7shuffleEj+0x22>
   }
   relinkTestsInOrder();
 8016a80:	6878      	ldr	r0, [r7, #4]
 8016a82:	f000 f834 	bl	8016aee <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 8016a86:	e002      	b.n	8016a8e <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
    if (count_ == 0) return;
 8016a88:	bf00      	nop
 8016a8a:	e000      	b.n	8016a8e <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
        if (count_ == 0) return;
 8016a8c:	bf00      	nop
}
 8016a8e:	3710      	adds	r7, #16
 8016a90:	46bd      	mov	sp, r7
 8016a92:	bd80      	pop	{r7, pc}
 8016a94:	200000e0 	.word	0x200000e0
 8016a98:	200000e4 	.word	0x200000e4

08016a9c <_ZN22UtestShellPointerArray7reverseEv>:

void UtestShellPointerArray::reverse()
{
 8016a9c:	b580      	push	{r7, lr}
 8016a9e:	b086      	sub	sp, #24
 8016aa0:	af00      	add	r7, sp, #0
 8016aa2:	6078      	str	r0, [r7, #4]
    if (count_ == 0) return;
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	685b      	ldr	r3, [r3, #4]
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d01c      	beq.n	8016ae6 <_ZN22UtestShellPointerArray7reverseEv+0x4a>

    size_t halfCount = count_ / 2;
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	685b      	ldr	r3, [r3, #4]
 8016ab0:	085b      	lsrs	r3, r3, #1
 8016ab2:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < halfCount; i++)
 8016ab4:	2300      	movs	r3, #0
 8016ab6:	617b      	str	r3, [r7, #20]
 8016ab8:	697a      	ldr	r2, [r7, #20]
 8016aba:	693b      	ldr	r3, [r7, #16]
 8016abc:	429a      	cmp	r2, r3
 8016abe:	d20e      	bcs.n	8016ade <_ZN22UtestShellPointerArray7reverseEv+0x42>
    {
        size_t j = count_ - i - 1;
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	685a      	ldr	r2, [r3, #4]
 8016ac4:	697b      	ldr	r3, [r7, #20]
 8016ac6:	1ad3      	subs	r3, r2, r3
 8016ac8:	3b01      	subs	r3, #1
 8016aca:	60fb      	str	r3, [r7, #12]
        swap(i, j);
 8016acc:	68fa      	ldr	r2, [r7, #12]
 8016ace:	6979      	ldr	r1, [r7, #20]
 8016ad0:	6878      	ldr	r0, [r7, #4]
 8016ad2:	f7ff ff7f 	bl	80169d4 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = 0; i < halfCount; i++)
 8016ad6:	697b      	ldr	r3, [r7, #20]
 8016ad8:	3301      	adds	r3, #1
 8016ada:	617b      	str	r3, [r7, #20]
 8016adc:	e7ec      	b.n	8016ab8 <_ZN22UtestShellPointerArray7reverseEv+0x1c>
   }
   relinkTestsInOrder();
 8016ade:	6878      	ldr	r0, [r7, #4]
 8016ae0:	f000 f805 	bl	8016aee <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 8016ae4:	e000      	b.n	8016ae8 <_ZN22UtestShellPointerArray7reverseEv+0x4c>
    if (count_ == 0) return;
 8016ae6:	bf00      	nop
}
 8016ae8:	3718      	adds	r7, #24
 8016aea:	46bd      	mov	sp, r7
 8016aec:	bd80      	pop	{r7, pc}

08016aee <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>:

void UtestShellPointerArray::relinkTestsInOrder()
{
 8016aee:	b580      	push	{r7, lr}
 8016af0:	b084      	sub	sp, #16
 8016af2:	af00      	add	r7, sp, #0
 8016af4:	6078      	str	r0, [r7, #4]
    UtestShell *tests = NULLPTR;
 8016af6:	2300      	movs	r3, #0
 8016af8:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8016afa:	2300      	movs	r3, #0
 8016afc:	60bb      	str	r3, [r7, #8]
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	685b      	ldr	r3, [r3, #4]
 8016b02:	68ba      	ldr	r2, [r7, #8]
 8016b04:	429a      	cmp	r2, r3
 8016b06:	d221      	bcs.n	8016b4c <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x5e>
        tests = arrayOfTests_[count_ - i - 1]->addTest(tests);
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	681a      	ldr	r2, [r3, #0]
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	6859      	ldr	r1, [r3, #4]
 8016b10:	68bb      	ldr	r3, [r7, #8]
 8016b12:	1acb      	subs	r3, r1, r3
 8016b14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016b18:	3b01      	subs	r3, #1
 8016b1a:	009b      	lsls	r3, r3, #2
 8016b1c:	4413      	add	r3, r2
 8016b1e:	6818      	ldr	r0, [r3, #0]
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	681a      	ldr	r2, [r3, #0]
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	6859      	ldr	r1, [r3, #4]
 8016b28:	68bb      	ldr	r3, [r7, #8]
 8016b2a:	1acb      	subs	r3, r1, r3
 8016b2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016b30:	3b01      	subs	r3, #1
 8016b32:	009b      	lsls	r3, r3, #2
 8016b34:	4413      	add	r3, r2
 8016b36:	681b      	ldr	r3, [r3, #0]
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	3308      	adds	r3, #8
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	68f9      	ldr	r1, [r7, #12]
 8016b40:	4798      	blx	r3
 8016b42:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8016b44:	68bb      	ldr	r3, [r7, #8]
 8016b46:	3301      	adds	r3, #1
 8016b48:	60bb      	str	r3, [r7, #8]
 8016b4a:	e7d8      	b.n	8016afe <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x10>
}
 8016b4c:	bf00      	nop
 8016b4e:	3710      	adds	r7, #16
 8016b50:	46bd      	mov	sp, r7
 8016b52:	bd80      	pop	{r7, pc}

08016b54 <_ZNK22UtestShellPointerArray12getFirstTestEv>:

UtestShell* UtestShellPointerArray::getFirstTest() const
{
 8016b54:	b580      	push	{r7, lr}
 8016b56:	b082      	sub	sp, #8
 8016b58:	af00      	add	r7, sp, #0
 8016b5a:	6078      	str	r0, [r7, #4]
    return get(0);
 8016b5c:	2100      	movs	r1, #0
 8016b5e:	6878      	ldr	r0, [r7, #4]
 8016b60:	f000 f805 	bl	8016b6e <_ZNK22UtestShellPointerArray3getEj>
 8016b64:	4603      	mov	r3, r0
}
 8016b66:	4618      	mov	r0, r3
 8016b68:	3708      	adds	r7, #8
 8016b6a:	46bd      	mov	sp, r7
 8016b6c:	bd80      	pop	{r7, pc}

08016b6e <_ZNK22UtestShellPointerArray3getEj>:

UtestShell* UtestShellPointerArray::get(size_t index) const
{
 8016b6e:	b480      	push	{r7}
 8016b70:	b083      	sub	sp, #12
 8016b72:	af00      	add	r7, sp, #0
 8016b74:	6078      	str	r0, [r7, #4]
 8016b76:	6039      	str	r1, [r7, #0]
    if (index >= count_) return NULLPTR;
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	685b      	ldr	r3, [r3, #4]
 8016b7c:	683a      	ldr	r2, [r7, #0]
 8016b7e:	429a      	cmp	r2, r3
 8016b80:	d301      	bcc.n	8016b86 <_ZNK22UtestShellPointerArray3getEj+0x18>
 8016b82:	2300      	movs	r3, #0
 8016b84:	e005      	b.n	8016b92 <_ZNK22UtestShellPointerArray3getEj+0x24>
    return arrayOfTests_[index];
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	681a      	ldr	r2, [r3, #0]
 8016b8a:	683b      	ldr	r3, [r7, #0]
 8016b8c:	009b      	lsls	r3, r3, #2
 8016b8e:	4413      	add	r3, r2
 8016b90:	681b      	ldr	r3, [r3, #0]
}
 8016b92:	4618      	mov	r0, r3
 8016b94:	370c      	adds	r7, #12
 8016b96:	46bd      	mov	sp, r7
 8016b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b9c:	4770      	bx	lr
	...

08016ba0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>:



////////////// TestInstaller ////////////

TestInstaller::TestInstaller(UtestShell& shell, const char* groupName, const char* testName, const char* fileName, size_t lineNumber)
 8016ba0:	b580      	push	{r7, lr}
 8016ba2:	b084      	sub	sp, #16
 8016ba4:	af00      	add	r7, sp, #0
 8016ba6:	60f8      	str	r0, [r7, #12]
 8016ba8:	60b9      	str	r1, [r7, #8]
 8016baa:	607a      	str	r2, [r7, #4]
 8016bac:	603b      	str	r3, [r7, #0]
 8016bae:	4a10      	ldr	r2, [pc, #64]	; (8016bf0 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j+0x50>)
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	601a      	str	r2, [r3, #0]
{
    shell.setGroupName(groupName);
 8016bb4:	6879      	ldr	r1, [r7, #4]
 8016bb6:	68b8      	ldr	r0, [r7, #8]
 8016bb8:	f7fe fc27 	bl	801540a <_ZN10UtestShell12setGroupNameEPKc>
    shell.setTestName(testName);
 8016bbc:	6839      	ldr	r1, [r7, #0]
 8016bbe:	68b8      	ldr	r0, [r7, #8]
 8016bc0:	f7fe fc31 	bl	8015426 <_ZN10UtestShell11setTestNameEPKc>
    shell.setFileName(fileName);
 8016bc4:	69b9      	ldr	r1, [r7, #24]
 8016bc6:	68b8      	ldr	r0, [r7, #8]
 8016bc8:	f7fe fc03 	bl	80153d2 <_ZN10UtestShell11setFileNameEPKc>
    shell.setLineNumber(lineNumber);
 8016bcc:	69f9      	ldr	r1, [r7, #28]
 8016bce:	68b8      	ldr	r0, [r7, #8]
 8016bd0:	f7fe fc0d 	bl	80153ee <_ZN10UtestShell13setLineNumberEj>
    TestRegistry::getCurrentRegistry()->addTest(&shell);
 8016bd4:	f7fd fc20 	bl	8014418 <_ZN12TestRegistry18getCurrentRegistryEv>
 8016bd8:	4603      	mov	r3, r0
 8016bda:	681a      	ldr	r2, [r3, #0]
 8016bdc:	3208      	adds	r2, #8
 8016bde:	6812      	ldr	r2, [r2, #0]
 8016be0:	68b9      	ldr	r1, [r7, #8]
 8016be2:	4618      	mov	r0, r3
 8016be4:	4790      	blx	r2
}
 8016be6:	68fb      	ldr	r3, [r7, #12]
 8016be8:	4618      	mov	r0, r3
 8016bea:	3710      	adds	r7, #16
 8016bec:	46bd      	mov	sp, r7
 8016bee:	bd80      	pop	{r7, pc}
 8016bf0:	0802b968 	.word	0x0802b968

08016bf4 <_ZN13TestInstallerD1Ev>:

TestInstaller::~TestInstaller()
 8016bf4:	b480      	push	{r7}
 8016bf6:	b083      	sub	sp, #12
 8016bf8:	af00      	add	r7, sp, #0
 8016bfa:	6078      	str	r0, [r7, #4]
 8016bfc:	4a04      	ldr	r2, [pc, #16]	; (8016c10 <_ZN13TestInstallerD1Ev+0x1c>)
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	601a      	str	r2, [r3, #0]
{
}
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	4618      	mov	r0, r3
 8016c06:	370c      	adds	r7, #12
 8016c08:	46bd      	mov	sp, r7
 8016c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c0e:	4770      	bx	lr
 8016c10:	0802b968 	.word	0x0802b968

08016c14 <_ZN13TestInstallerD0Ev>:
TestInstaller::~TestInstaller()
 8016c14:	b580      	push	{r7, lr}
 8016c16:	b082      	sub	sp, #8
 8016c18:	af00      	add	r7, sp, #0
 8016c1a:	6078      	str	r0, [r7, #4]
}
 8016c1c:	6878      	ldr	r0, [r7, #4]
 8016c1e:	f7ff ffe9 	bl	8016bf4 <_ZN13TestInstallerD1Ev>
 8016c22:	2104      	movs	r1, #4
 8016c24:	6878      	ldr	r0, [r7, #4]
 8016c26:	f7f5 fd91 	bl	800c74c <_ZdlPvj>
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	4618      	mov	r0, r3
 8016c2e:	3708      	adds	r7, #8
 8016c30:	46bd      	mov	sp, r7
 8016c32:	bd80      	pop	{r7, pc}

08016c34 <_Z41__static_initialization_and_destruction_0ii>:

void TestInstaller::unDo()
{
    TestRegistry::getCurrentRegistry()->unDoLastAddTest();
}
 8016c34:	b580      	push	{r7, lr}
 8016c36:	b082      	sub	sp, #8
 8016c38:	af00      	add	r7, sp, #0
 8016c3a:	6078      	str	r0, [r7, #4]
 8016c3c:	6039      	str	r1, [r7, #0]
static const CrashingTestTerminator crashingTestTerminator;
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d10a      	bne.n	8016c5a <_Z41__static_initialization_and_destruction_0ii+0x26>
 8016c44:	683b      	ldr	r3, [r7, #0]
 8016c46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016c4a:	4293      	cmp	r3, r2
 8016c4c:	d105      	bne.n	8016c5a <_Z41__static_initialization_and_destruction_0ii+0x26>
 8016c4e:	4805      	ldr	r0, [pc, #20]	; (8016c64 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8016c50:	f7ff fe38 	bl	80168c4 <_ZN22CrashingTestTerminatorD1Ev>
static const NormalTestTerminator normalTestTerminator;
 8016c54:	4804      	ldr	r0, [pc, #16]	; (8016c68 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8016c56:	f7ff fdd5 	bl	8016804 <_ZN20NormalTestTerminatorD1Ev>
}
 8016c5a:	bf00      	nop
 8016c5c:	3708      	adds	r7, #8
 8016c5e:	46bd      	mov	sp, r7
 8016c60:	bd80      	pop	{r7, pc}
 8016c62:	bf00      	nop
 8016c64:	20000090 	.word	0x20000090
 8016c68:	2000008c 	.word	0x2000008c

08016c6c <_GLOBAL__sub_I__Z13doubles_equalddd>:
 8016c6c:	b580      	push	{r7, lr}
 8016c6e:	af00      	add	r7, sp, #0
 8016c70:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016c74:	2001      	movs	r0, #1
 8016c76:	f7ff ffdd 	bl	8016c34 <_Z41__static_initialization_and_destruction_0ii>
 8016c7a:	bd80      	pop	{r7, pc}

08016c7c <_GLOBAL__sub_D__Z13doubles_equalddd>:
 8016c7c:	b580      	push	{r7, lr}
 8016c7e:	af00      	add	r7, sp, #0
 8016c80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016c84:	2000      	movs	r0, #0
 8016c86:	f7ff ffd5 	bl	8016c34 <_Z41__static_initialization_and_destruction_0ii>
 8016c8a:	bd80      	pop	{r7, pc}

08016c8c <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 8016c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c8e:	b083      	sub	sp, #12
 8016c90:	af00      	add	r7, sp, #0
 8016c92:	ed87 0b00 	vstr	d0, [r7]
 8016c96:	683c      	ldr	r4, [r7, #0]
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8016c9e:	2301      	movs	r3, #1
 8016ca0:	461e      	mov	r6, r3
 8016ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8016ca6:	4b10      	ldr	r3, [pc, #64]	; (8016ce8 <_ZSt5isinfd+0x5c>)
 8016ca8:	4620      	mov	r0, r4
 8016caa:	4629      	mov	r1, r5
 8016cac:	f7e9 fd6c 	bl	8000788 <__aeabi_dcmpun>
 8016cb0:	4603      	mov	r3, r0
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	d10b      	bne.n	8016cce <_ZSt5isinfd+0x42>
 8016cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8016cba:	4b0b      	ldr	r3, [pc, #44]	; (8016ce8 <_ZSt5isinfd+0x5c>)
 8016cbc:	4620      	mov	r0, r4
 8016cbe:	4629      	mov	r1, r5
 8016cc0:	f7e9 fd44 	bl	800074c <__aeabi_dcmple>
 8016cc4:	4603      	mov	r3, r0
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d101      	bne.n	8016cce <_ZSt5isinfd+0x42>
 8016cca:	2300      	movs	r3, #0
 8016ccc:	461e      	mov	r6, r3
 8016cce:	b2f3      	uxtb	r3, r6
 8016cd0:	f083 0301 	eor.w	r3, r3, #1
 8016cd4:	b2db      	uxtb	r3, r3
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	bf14      	ite	ne
 8016cda:	2301      	movne	r3, #1
 8016cdc:	2300      	moveq	r3, #0
 8016cde:	b2db      	uxtb	r3, r3
 8016ce0:	4618      	mov	r0, r3
 8016ce2:	370c      	adds	r7, #12
 8016ce4:	46bd      	mov	sp, r7
 8016ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ce8:	7fefffff 	.word	0x7fefffff

08016cec <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 8016cec:	b590      	push	{r4, r7, lr}
 8016cee:	b083      	sub	sp, #12
 8016cf0:	af00      	add	r7, sp, #0
 8016cf2:	ed87 0b00 	vstr	d0, [r7]
 8016cf6:	2301      	movs	r3, #1
 8016cf8:	461c      	mov	r4, r3
 8016cfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016cfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8016d02:	f7e9 fd41 	bl	8000788 <__aeabi_dcmpun>
 8016d06:	4603      	mov	r3, r0
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d101      	bne.n	8016d10 <_ZSt5isnand+0x24>
 8016d0c:	2300      	movs	r3, #0
 8016d0e:	461c      	mov	r4, r3
 8016d10:	b2e3      	uxtb	r3, r4
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	bf14      	ite	ne
 8016d16:	2301      	movne	r3, #1
 8016d18:	2300      	moveq	r3, #0
 8016d1a:	b2db      	uxtb	r3, r3
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	370c      	adds	r7, #12
 8016d20:	46bd      	mov	sp, r7
 8016d22:	bd90      	pop	{r4, r7, pc}

08016d24 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult>:

// There is a possibility that a compiler provides fork but not waitpid.
#if !defined(CPPUTEST_HAVE_FORK) || !defined(CPPUTEST_HAVE_WAITPID)

static void GccPlatformSpecificRunTestInASeperateProcess(UtestShell* shell, TestPlugin*, TestResult* result)
{
 8016d24:	b590      	push	{r4, r7, lr}
 8016d26:	b095      	sub	sp, #84	; 0x54
 8016d28:	af00      	add	r7, sp, #0
 8016d2a:	60f8      	str	r0, [r7, #12]
 8016d2c:	60b9      	str	r1, [r7, #8]
 8016d2e:	607a      	str	r2, [r7, #4]
    result->addFailure(TestFailure(shell, "-p doesn't work on this platform, as it is lacking fork.\b"));
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	3334      	adds	r3, #52	; 0x34
 8016d36:	681c      	ldr	r4, [r3, #0]
 8016d38:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016d3c:	490f      	ldr	r1, [pc, #60]	; (8016d7c <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult+0x58>)
 8016d3e:	4618      	mov	r0, r3
 8016d40:	f7f8 f8b3 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8016d44:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8016d48:	f107 0314 	add.w	r3, r7, #20
 8016d4c:	68f9      	ldr	r1, [r7, #12]
 8016d4e:	4618      	mov	r0, r3
 8016d50:	f7f9 ff0a 	bl	8010b68 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 8016d54:	f107 0314 	add.w	r3, r7, #20
 8016d58:	4619      	mov	r1, r3
 8016d5a:	6878      	ldr	r0, [r7, #4]
 8016d5c:	47a0      	blx	r4
 8016d5e:	f107 0314 	add.w	r3, r7, #20
 8016d62:	4618      	mov	r0, r3
 8016d64:	f7f9 ffc0 	bl	8010ce8 <_ZN11TestFailureD1Ev>
 8016d68:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016d6c:	4618      	mov	r0, r3
 8016d6e:	f7f8 fc54 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 8016d72:	bf00      	nop
 8016d74:	3754      	adds	r7, #84	; 0x54
 8016d76:	46bd      	mov	sp, r7
 8016d78:	bd90      	pop	{r4, r7, pc}
 8016d7a:	bf00      	nop
 8016d7c:	08027cc8 	.word	0x08027cc8

08016d80 <_Z37PlatformSpecificGetWorkingEnvironmentv>:
}

#endif

TestOutput::WorkingEnvironment PlatformSpecificGetWorkingEnvironment()
{
 8016d80:	b480      	push	{r7}
 8016d82:	af00      	add	r7, sp, #0
    return TestOutput::eclipse;
 8016d84:	2301      	movs	r3, #1
}
 8016d86:	4618      	mov	r0, r3
 8016d88:	46bd      	mov	sp, r7
 8016d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d8e:	4770      	bx	lr

08016d90 <PlatformSpecificSetJmpImplementation>:
int (*PlatformSpecificWaitPid)(int, int*, int) = PlatformSpecificWaitPidImplementation;

extern "C" {

static int PlatformSpecificSetJmpImplementation(void (*function) (void* data), void* data)
{
 8016d90:	b580      	push	{r7, lr}
 8016d92:	b082      	sub	sp, #8
 8016d94:	af00      	add	r7, sp, #0
 8016d96:	6078      	str	r0, [r7, #4]
 8016d98:	6039      	str	r1, [r7, #0]
    if (0 == setjmp(test_exit_jmp_buf[jmp_buf_index])) {
 8016d9a:	4b13      	ldr	r3, [pc, #76]	; (8016de8 <PlatformSpecificSetJmpImplementation+0x58>)
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	225c      	movs	r2, #92	; 0x5c
 8016da0:	fb02 f303 	mul.w	r3, r2, r3
 8016da4:	4a11      	ldr	r2, [pc, #68]	; (8016dec <PlatformSpecificSetJmpImplementation+0x5c>)
 8016da6:	4413      	add	r3, r2
 8016da8:	4618      	mov	r0, r3
 8016daa:	f7e9 fa39 	bl	8000220 <setjmp>
 8016dae:	4603      	mov	r3, r0
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	bf0c      	ite	eq
 8016db4:	2301      	moveq	r3, #1
 8016db6:	2300      	movne	r3, #0
 8016db8:	b2db      	uxtb	r3, r3
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d00e      	beq.n	8016ddc <PlatformSpecificSetJmpImplementation+0x4c>
        jmp_buf_index++;
 8016dbe:	4b0a      	ldr	r3, [pc, #40]	; (8016de8 <PlatformSpecificSetJmpImplementation+0x58>)
 8016dc0:	681b      	ldr	r3, [r3, #0]
 8016dc2:	3301      	adds	r3, #1
 8016dc4:	4a08      	ldr	r2, [pc, #32]	; (8016de8 <PlatformSpecificSetJmpImplementation+0x58>)
 8016dc6:	6013      	str	r3, [r2, #0]
        function(data);
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	6838      	ldr	r0, [r7, #0]
 8016dcc:	4798      	blx	r3
        jmp_buf_index--;
 8016dce:	4b06      	ldr	r3, [pc, #24]	; (8016de8 <PlatformSpecificSetJmpImplementation+0x58>)
 8016dd0:	681b      	ldr	r3, [r3, #0]
 8016dd2:	3b01      	subs	r3, #1
 8016dd4:	4a04      	ldr	r2, [pc, #16]	; (8016de8 <PlatformSpecificSetJmpImplementation+0x58>)
 8016dd6:	6013      	str	r3, [r2, #0]
        return 1;
 8016dd8:	2301      	movs	r3, #1
 8016dda:	e000      	b.n	8016dde <PlatformSpecificSetJmpImplementation+0x4e>
    }
    return 0;
 8016ddc:	2300      	movs	r3, #0
}
 8016dde:	4618      	mov	r0, r3
 8016de0:	3708      	adds	r7, #8
 8016de2:	46bd      	mov	sp, r7
 8016de4:	bd80      	pop	{r7, pc}
 8016de6:	bf00      	nop
 8016de8:	20000fd0 	.word	0x20000fd0
 8016dec:	20000c38 	.word	0x20000c38

08016df0 <PlatformSpecificLongJmpImplementation>:
 #if !((__clang_major__ == 3) && (__clang_minor__ == 0))
 _no_return_
 #endif
#endif
static void PlatformSpecificLongJmpImplementation()
{
 8016df0:	b580      	push	{r7, lr}
 8016df2:	af00      	add	r7, sp, #0
    jmp_buf_index--;
 8016df4:	4b07      	ldr	r3, [pc, #28]	; (8016e14 <PlatformSpecificLongJmpImplementation+0x24>)
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	3b01      	subs	r3, #1
 8016dfa:	4a06      	ldr	r2, [pc, #24]	; (8016e14 <PlatformSpecificLongJmpImplementation+0x24>)
 8016dfc:	6013      	str	r3, [r2, #0]
    longjmp(test_exit_jmp_buf[jmp_buf_index], 1);
 8016dfe:	4b05      	ldr	r3, [pc, #20]	; (8016e14 <PlatformSpecificLongJmpImplementation+0x24>)
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	225c      	movs	r2, #92	; 0x5c
 8016e04:	fb02 f303 	mul.w	r3, r2, r3
 8016e08:	4a03      	ldr	r2, [pc, #12]	; (8016e18 <PlatformSpecificLongJmpImplementation+0x28>)
 8016e0a:	4413      	add	r3, r2
 8016e0c:	2101      	movs	r1, #1
 8016e0e:	4618      	mov	r0, r3
 8016e10:	f7e9 fa0c 	bl	800022c <longjmp>
 8016e14:	20000fd0 	.word	0x20000fd0
 8016e18:	20000c38 	.word	0x20000c38

08016e1c <TimeInMillisImplementation>:
void (*PlatformSpecificRestoreJumpBuffer)() = PlatformSpecificRestoreJumpBufferImplementation;

///////////// Time in millis

static long TimeInMillisImplementation()
{
 8016e1c:	b480      	push	{r7}
 8016e1e:	af00      	add	r7, sp, #0
    struct timeval tv;
    struct timezone tz;
    gettimeofday(&tv, &tz);
    return (tv.tv_sec * 1000) + (long)((double)tv.tv_usec * 0.001);
#else
    return 0;
 8016e20:	2300      	movs	r3, #0
#endif
}
 8016e22:	4618      	mov	r0, r3
 8016e24:	46bd      	mov	sp, r7
 8016e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e2a:	4770      	bx	lr

08016e2c <TimeStringImplementation>:

static const char* TimeStringImplementation()
{
 8016e2c:	b580      	push	{r7, lr}
 8016e2e:	b084      	sub	sp, #16
 8016e30:	af00      	add	r7, sp, #0
    time_t theTime = time(NULLPTR);
 8016e32:	2000      	movs	r0, #0
 8016e34:	f00e ec4c 	blx	80256d0 <__time_veneer>
 8016e38:	4602      	mov	r2, r0
 8016e3a:	460b      	mov	r3, r1
 8016e3c:	e9c7 2300 	strd	r2, r3, [r7]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
    static struct tm lastlocaltime;
    localtime_s(&lastlocaltime, &theTime);
    struct tm *tmp = &lastlocaltime;
#else
    struct tm *tmp = localtime(&theTime);
 8016e40:	463b      	mov	r3, r7
 8016e42:	4618      	mov	r0, r3
 8016e44:	f00b fb78 	bl	8022538 <localtime>
 8016e48:	60f8      	str	r0, [r7, #12]
#endif
    strftime(dateTime, 80, "%Y-%m-%dT%H:%M:%S", tmp);
 8016e4a:	68fb      	ldr	r3, [r7, #12]
 8016e4c:	4a04      	ldr	r2, [pc, #16]	; (8016e60 <TimeStringImplementation+0x34>)
 8016e4e:	2150      	movs	r1, #80	; 0x50
 8016e50:	4804      	ldr	r0, [pc, #16]	; (8016e64 <TimeStringImplementation+0x38>)
 8016e52:	f00c fc81 	bl	8023758 <strftime>
    return dateTime;
 8016e56:	4b03      	ldr	r3, [pc, #12]	; (8016e64 <TimeStringImplementation+0x38>)
}
 8016e58:	4618      	mov	r0, r3
 8016e5a:	3710      	adds	r7, #16
 8016e5c:	46bd      	mov	sp, r7
 8016e5e:	bd80      	pop	{r7, pc}
 8016e60:	08027d04 	.word	0x08027d04
 8016e64:	20000fd4 	.word	0x20000fd4

08016e68 <PlatformSpecificFOpenImplementation>:
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
#endif
int (*PlatformSpecificVSNprintf)(char *str, size_t size, const char* format, va_list va_args_list) = vsnprintf;

static PlatformSpecificFile PlatformSpecificFOpenImplementation(const char* filename, const char* flag)
{
 8016e68:	b580      	push	{r7, lr}
 8016e6a:	b082      	sub	sp, #8
 8016e6c:	af00      	add	r7, sp, #0
 8016e6e:	6078      	str	r0, [r7, #4]
 8016e70:	6039      	str	r1, [r7, #0]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
  FILE* file;
   fopen_s(&file, filename, flag);
   return file;
#else
   return fopen(filename, flag);
 8016e72:	6839      	ldr	r1, [r7, #0]
 8016e74:	6878      	ldr	r0, [r7, #4]
 8016e76:	f00b f995 	bl	80221a4 <fopen>
 8016e7a:	4603      	mov	r3, r0
#endif
}
 8016e7c:	4618      	mov	r0, r3
 8016e7e:	3708      	adds	r7, #8
 8016e80:	46bd      	mov	sp, r7
 8016e82:	bd80      	pop	{r7, pc}

08016e84 <PlatformSpecificFPutsImplementation>:

static void PlatformSpecificFPutsImplementation(const char* str, PlatformSpecificFile file)
{
 8016e84:	b580      	push	{r7, lr}
 8016e86:	b082      	sub	sp, #8
 8016e88:	af00      	add	r7, sp, #0
 8016e8a:	6078      	str	r0, [r7, #4]
 8016e8c:	6039      	str	r1, [r7, #0]
   fputs(str, (FILE*)file);
 8016e8e:	6839      	ldr	r1, [r7, #0]
 8016e90:	6878      	ldr	r0, [r7, #4]
 8016e92:	f00b f9f5 	bl	8022280 <fputs>
}
 8016e96:	bf00      	nop
 8016e98:	3708      	adds	r7, #8
 8016e9a:	46bd      	mov	sp, r7
 8016e9c:	bd80      	pop	{r7, pc}

08016e9e <PlatformSpecificFCloseImplementation>:

static void PlatformSpecificFCloseImplementation(PlatformSpecificFile file)
{
 8016e9e:	b580      	push	{r7, lr}
 8016ea0:	b082      	sub	sp, #8
 8016ea2:	af00      	add	r7, sp, #0
 8016ea4:	6078      	str	r0, [r7, #4]
   fclose((FILE*)file);
 8016ea6:	6878      	ldr	r0, [r7, #4]
 8016ea8:	f00a ff76 	bl	8021d98 <fclose>
}
 8016eac:	bf00      	nop
 8016eae:	3708      	adds	r7, #8
 8016eb0:	46bd      	mov	sp, r7
 8016eb2:	bd80      	pop	{r7, pc}

08016eb4 <PlatformSpecificFlushImplementation>:

static void PlatformSpecificFlushImplementation()
{
 8016eb4:	b580      	push	{r7, lr}
 8016eb6:	af00      	add	r7, sp, #0
  fflush(stdout);
 8016eb8:	4b03      	ldr	r3, [pc, #12]	; (8016ec8 <PlatformSpecificFlushImplementation+0x14>)
 8016eba:	681b      	ldr	r3, [r3, #0]
 8016ebc:	689b      	ldr	r3, [r3, #8]
 8016ebe:	4618      	mov	r0, r3
 8016ec0:	f00b f834 	bl	8021f2c <fflush>
}
 8016ec4:	bf00      	nop
 8016ec6:	bd80      	pop	{r7, pc}
 8016ec8:	20000108 	.word	0x20000108

08016ecc <IsNanImplementation>:
#if defined(__GNUC__) && (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ > 8))
#pragma GCC diagnostic ignored "-Wfloat-conversion"
#endif

static int IsNanImplementation(double d)
{
 8016ecc:	b580      	push	{r7, lr}
 8016ece:	b082      	sub	sp, #8
 8016ed0:	af00      	add	r7, sp, #0
 8016ed2:	ed87 0b00 	vstr	d0, [r7]
    return isnan(d);
 8016ed6:	ed97 0b00 	vldr	d0, [r7]
 8016eda:	f7ff ff07 	bl	8016cec <_ZSt5isnand>
 8016ede:	4603      	mov	r3, r0
}
 8016ee0:	4618      	mov	r0, r3
 8016ee2:	3708      	adds	r7, #8
 8016ee4:	46bd      	mov	sp, r7
 8016ee6:	bd80      	pop	{r7, pc}

08016ee8 <IsInfImplementation>:

static int IsInfImplementation(double d)
{
 8016ee8:	b580      	push	{r7, lr}
 8016eea:	b082      	sub	sp, #8
 8016eec:	af00      	add	r7, sp, #0
 8016eee:	ed87 0b00 	vstr	d0, [r7]
    return isinf(d);
 8016ef2:	ed97 0b00 	vldr	d0, [r7]
 8016ef6:	f7ff fec9 	bl	8016c8c <_ZSt5isinfd>
 8016efa:	4603      	mov	r3, r0
}
 8016efc:	4618      	mov	r0, r3
 8016efe:	3708      	adds	r7, #8
 8016f00:	46bd      	mov	sp, r7
 8016f02:	bd80      	pop	{r7, pc}

08016f04 <PThreadMutexCreate>:
int (*PlatformSpecificIsNan)(double) = IsNanImplementation;
int (*PlatformSpecificIsInf)(double) = IsInfImplementation;
int (*PlatformSpecificAtExit)(void(*func)(void)) = atexit;  /// this was undefined before

static PlatformSpecificMutex PThreadMutexCreate(void)
{
 8016f04:	b480      	push	{r7}
 8016f06:	af00      	add	r7, sp, #0
    pthread_mutex_t *mutex = new pthread_mutex_t;

    pthread_mutex_init(mutex, NULLPTR);
    return (PlatformSpecificMutex)mutex;
#else
    return NULLPTR;
 8016f08:	2300      	movs	r3, #0
#endif

}
 8016f0a:	4618      	mov	r0, r3
 8016f0c:	46bd      	mov	sp, r7
 8016f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f12:	4770      	bx	lr

08016f14 <PThreadMutexLock>:
{
    pthread_mutex_lock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexLock(PlatformSpecificMutex)
{
 8016f14:	b480      	push	{r7}
 8016f16:	b083      	sub	sp, #12
 8016f18:	af00      	add	r7, sp, #0
 8016f1a:	6078      	str	r0, [r7, #4]
}
 8016f1c:	bf00      	nop
 8016f1e:	370c      	adds	r7, #12
 8016f20:	46bd      	mov	sp, r7
 8016f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f26:	4770      	bx	lr

08016f28 <PThreadMutexUnlock>:
{
    pthread_mutex_unlock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexUnlock(PlatformSpecificMutex)
{
 8016f28:	b480      	push	{r7}
 8016f2a:	b083      	sub	sp, #12
 8016f2c:	af00      	add	r7, sp, #0
 8016f2e:	6078      	str	r0, [r7, #4]
}
 8016f30:	bf00      	nop
 8016f32:	370c      	adds	r7, #12
 8016f34:	46bd      	mov	sp, r7
 8016f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f3a:	4770      	bx	lr

08016f3c <PThreadMutexDestroy>:
    pthread_mutex_destroy(mutex);
    delete mutex;
}
#else
static void PThreadMutexDestroy(PlatformSpecificMutex)
{
 8016f3c:	b480      	push	{r7}
 8016f3e:	b083      	sub	sp, #12
 8016f40:	af00      	add	r7, sp, #0
 8016f42:	6078      	str	r0, [r7, #4]
}
 8016f44:	bf00      	nop
 8016f46:	370c      	adds	r7, #12
 8016f48:	46bd      	mov	sp, r7
 8016f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f4e:	4770      	bx	lr

08016f50 <_ZN20CommandLineArgumentsC1EiPKPKc>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/CommandLineArguments.h"
#include "CppUTest/PlatformSpecificFunctions.h"

CommandLineArguments::CommandLineArguments(int ac, const char *const *av) :
 8016f50:	b580      	push	{r7, lr}
 8016f52:	b084      	sub	sp, #16
 8016f54:	af00      	add	r7, sp, #0
 8016f56:	60f8      	str	r0, [r7, #12]
 8016f58:	60b9      	str	r1, [r7, #8]
 8016f5a:	607a      	str	r2, [r7, #4]
    ac_(ac), av_(av), needHelp_(false), verbose_(false), veryVerbose_(false), color_(false), runTestsAsSeperateProcess_(false), listTestGroupNames_(false), listTestGroupAndCaseNames_(false), listTestLocations_(false), runIgnored_(false), reversing_(false), crashOnFail_(false), shuffling_(false), shufflingPreSeeded_(false), repeat_(1), shuffleSeed_(0), groupFilters_(NULLPTR), nameFilters_(NULLPTR), outputType_(OUTPUT_ECLIPSE)
 8016f5c:	4a25      	ldr	r2, [pc, #148]	; (8016ff4 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa4>)
 8016f5e:	68fb      	ldr	r3, [r7, #12]
 8016f60:	601a      	str	r2, [r3, #0]
 8016f62:	68fb      	ldr	r3, [r7, #12]
 8016f64:	68ba      	ldr	r2, [r7, #8]
 8016f66:	605a      	str	r2, [r3, #4]
 8016f68:	68fb      	ldr	r3, [r7, #12]
 8016f6a:	687a      	ldr	r2, [r7, #4]
 8016f6c:	609a      	str	r2, [r3, #8]
 8016f6e:	68fb      	ldr	r3, [r7, #12]
 8016f70:	2200      	movs	r2, #0
 8016f72:	731a      	strb	r2, [r3, #12]
 8016f74:	68fb      	ldr	r3, [r7, #12]
 8016f76:	2200      	movs	r2, #0
 8016f78:	735a      	strb	r2, [r3, #13]
 8016f7a:	68fb      	ldr	r3, [r7, #12]
 8016f7c:	2200      	movs	r2, #0
 8016f7e:	739a      	strb	r2, [r3, #14]
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	2200      	movs	r2, #0
 8016f84:	73da      	strb	r2, [r3, #15]
 8016f86:	68fb      	ldr	r3, [r7, #12]
 8016f88:	2200      	movs	r2, #0
 8016f8a:	741a      	strb	r2, [r3, #16]
 8016f8c:	68fb      	ldr	r3, [r7, #12]
 8016f8e:	2200      	movs	r2, #0
 8016f90:	745a      	strb	r2, [r3, #17]
 8016f92:	68fb      	ldr	r3, [r7, #12]
 8016f94:	2200      	movs	r2, #0
 8016f96:	749a      	strb	r2, [r3, #18]
 8016f98:	68fb      	ldr	r3, [r7, #12]
 8016f9a:	2200      	movs	r2, #0
 8016f9c:	74da      	strb	r2, [r3, #19]
 8016f9e:	68fb      	ldr	r3, [r7, #12]
 8016fa0:	2200      	movs	r2, #0
 8016fa2:	751a      	strb	r2, [r3, #20]
 8016fa4:	68fb      	ldr	r3, [r7, #12]
 8016fa6:	2200      	movs	r2, #0
 8016fa8:	755a      	strb	r2, [r3, #21]
 8016faa:	68fb      	ldr	r3, [r7, #12]
 8016fac:	2200      	movs	r2, #0
 8016fae:	759a      	strb	r2, [r3, #22]
 8016fb0:	68fb      	ldr	r3, [r7, #12]
 8016fb2:	2200      	movs	r2, #0
 8016fb4:	75da      	strb	r2, [r3, #23]
 8016fb6:	68fb      	ldr	r3, [r7, #12]
 8016fb8:	2200      	movs	r2, #0
 8016fba:	761a      	strb	r2, [r3, #24]
 8016fbc:	68fb      	ldr	r3, [r7, #12]
 8016fbe:	2201      	movs	r2, #1
 8016fc0:	61da      	str	r2, [r3, #28]
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	2200      	movs	r2, #0
 8016fc6:	621a      	str	r2, [r3, #32]
 8016fc8:	68fb      	ldr	r3, [r7, #12]
 8016fca:	2200      	movs	r2, #0
 8016fcc:	625a      	str	r2, [r3, #36]	; 0x24
 8016fce:	68fb      	ldr	r3, [r7, #12]
 8016fd0:	2200      	movs	r2, #0
 8016fd2:	629a      	str	r2, [r3, #40]	; 0x28
 8016fd4:	68fb      	ldr	r3, [r7, #12]
 8016fd6:	2200      	movs	r2, #0
 8016fd8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8016fdc:	68fb      	ldr	r3, [r7, #12]
 8016fde:	3330      	adds	r3, #48	; 0x30
 8016fe0:	4905      	ldr	r1, [pc, #20]	; (8016ff8 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa8>)
 8016fe2:	4618      	mov	r0, r3
 8016fe4:	f7f7 ff61 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
{
}
 8016fe8:	68fb      	ldr	r3, [r7, #12]
 8016fea:	4618      	mov	r0, r3
 8016fec:	3710      	adds	r7, #16
 8016fee:	46bd      	mov	sp, r7
 8016ff0:	bd80      	pop	{r7, pc}
 8016ff2:	bf00      	nop
 8016ff4:	0802ba94 	.word	0x0802ba94
 8016ff8:	08027d18 	.word	0x08027d18

08016ffc <_ZN10TestFilterD1Ev>:
#ifndef TESTFILTER_H_
#define TESTFILTER_H_

#include "SimpleString.h"

class TestFilter
 8016ffc:	b580      	push	{r7, lr}
 8016ffe:	b082      	sub	sp, #8
 8017000:	af00      	add	r7, sp, #0
 8017002:	6078      	str	r0, [r7, #4]
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	4618      	mov	r0, r3
 8017008:	f7f8 fb07 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	4618      	mov	r0, r3
 8017010:	3708      	adds	r7, #8
 8017012:	46bd      	mov	sp, r7
 8017014:	bd80      	pop	{r7, pc}
	...

08017018 <_ZN20CommandLineArgumentsD1Ev>:

CommandLineArguments::~CommandLineArguments()
 8017018:	b590      	push	{r4, r7, lr}
 801701a:	b085      	sub	sp, #20
 801701c:	af00      	add	r7, sp, #0
 801701e:	6078      	str	r0, [r7, #4]
 8017020:	4a20      	ldr	r2, [pc, #128]	; (80170a4 <_ZN20CommandLineArgumentsD1Ev+0x8c>)
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	601a      	str	r2, [r3, #0]
{
    while(groupFilters_) {
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801702a:	2b00      	cmp	r3, #0
 801702c:	d015      	beq.n	801705a <_ZN20CommandLineArgumentsD1Ev+0x42>
        TestFilter* current = groupFilters_;
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017032:	60fb      	str	r3, [r7, #12]
        groupFilters_ = groupFilters_->getNext();
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017038:	4618      	mov	r0, r3
 801703a:	f00a fda2 	bl	8021b82 <_ZNK10TestFilter7getNextEv>
 801703e:	4602      	mov	r2, r0
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	625a      	str	r2, [r3, #36]	; 0x24
        delete current;
 8017044:	68fc      	ldr	r4, [r7, #12]
 8017046:	2c00      	cmp	r4, #0
 8017048:	d0ed      	beq.n	8017026 <_ZN20CommandLineArgumentsD1Ev+0xe>
 801704a:	4620      	mov	r0, r4
 801704c:	f7ff ffd6 	bl	8016ffc <_ZN10TestFilterD1Ev>
 8017050:	2110      	movs	r1, #16
 8017052:	4620      	mov	r0, r4
 8017054:	f7f5 fb7a 	bl	800c74c <_ZdlPvj>
    while(groupFilters_) {
 8017058:	e7e5      	b.n	8017026 <_ZN20CommandLineArgumentsD1Ev+0xe>
    }
    while(nameFilters_) {
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801705e:	2b00      	cmp	r3, #0
 8017060:	d015      	beq.n	801708e <_ZN20CommandLineArgumentsD1Ev+0x76>
        TestFilter* current = nameFilters_;
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017066:	60bb      	str	r3, [r7, #8]
        nameFilters_ = nameFilters_->getNext();
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801706c:	4618      	mov	r0, r3
 801706e:	f00a fd88 	bl	8021b82 <_ZNK10TestFilter7getNextEv>
 8017072:	4602      	mov	r2, r0
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	629a      	str	r2, [r3, #40]	; 0x28
        delete current;
 8017078:	68bc      	ldr	r4, [r7, #8]
 801707a:	2c00      	cmp	r4, #0
 801707c:	d0ed      	beq.n	801705a <_ZN20CommandLineArgumentsD1Ev+0x42>
 801707e:	4620      	mov	r0, r4
 8017080:	f7ff ffbc 	bl	8016ffc <_ZN10TestFilterD1Ev>
 8017084:	2110      	movs	r1, #16
 8017086:	4620      	mov	r0, r4
 8017088:	f7f5 fb60 	bl	800c74c <_ZdlPvj>
    while(nameFilters_) {
 801708c:	e7e5      	b.n	801705a <_ZN20CommandLineArgumentsD1Ev+0x42>
CommandLineArguments::~CommandLineArguments()
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	3330      	adds	r3, #48	; 0x30
 8017092:	4618      	mov	r0, r3
 8017094:	f7f8 fac1 	bl	800f61a <_ZN12SimpleStringD1Ev>
    }
}
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	4618      	mov	r0, r3
 801709c:	3714      	adds	r7, #20
 801709e:	46bd      	mov	sp, r7
 80170a0:	bd90      	pop	{r4, r7, pc}
 80170a2:	bf00      	nop
 80170a4:	0802ba94 	.word	0x0802ba94

080170a8 <_ZN20CommandLineArgumentsD0Ev>:
CommandLineArguments::~CommandLineArguments()
 80170a8:	b580      	push	{r7, lr}
 80170aa:	b082      	sub	sp, #8
 80170ac:	af00      	add	r7, sp, #0
 80170ae:	6078      	str	r0, [r7, #4]
}
 80170b0:	6878      	ldr	r0, [r7, #4]
 80170b2:	f7ff ffb1 	bl	8017018 <_ZN20CommandLineArgumentsD1Ev>
 80170b6:	2138      	movs	r1, #56	; 0x38
 80170b8:	6878      	ldr	r0, [r7, #4]
 80170ba:	f7f5 fb47 	bl	800c74c <_ZdlPvj>
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	4618      	mov	r0, r3
 80170c2:	3708      	adds	r7, #8
 80170c4:	46bd      	mov	sp, r7
 80170c6:	bd80      	pop	{r7, pc}

080170c8 <_ZN20CommandLineArguments5parseEP10TestPlugin>:

bool CommandLineArguments::parse(TestPlugin* plugin)
{
 80170c8:	b5b0      	push	{r4, r5, r7, lr}
 80170ca:	b0be      	sub	sp, #248	; 0xf8
 80170cc:	af02      	add	r7, sp, #8
 80170ce:	6078      	str	r0, [r7, #4]
 80170d0:	6039      	str	r1, [r7, #0]
 80170d2:	2400      	movs	r4, #0
    bool correctParameters = true;
 80170d4:	2301      	movs	r3, #1
 80170d6:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    for (int i = 1; i < ac_; i++) {
 80170da:	2301      	movs	r3, #1
 80170dc:	613b      	str	r3, [r7, #16]
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	685a      	ldr	r2, [r3, #4]
 80170e2:	693b      	ldr	r3, [r7, #16]
 80170e4:	429a      	cmp	r2, r3
 80170e6:	f340 83a4 	ble.w	8017832 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76a>
        SimpleString argument = av_[i];
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	689a      	ldr	r2, [r3, #8]
 80170ee:	693b      	ldr	r3, [r7, #16]
 80170f0:	009b      	lsls	r3, r3, #2
 80170f2:	4413      	add	r3, r2
 80170f4:	681a      	ldr	r2, [r3, #0]
 80170f6:	f107 0308 	add.w	r3, r7, #8
 80170fa:	4611      	mov	r1, r2
 80170fc:	4618      	mov	r0, r3
 80170fe:	f7f7 fed4 	bl	800eeaa <_ZN12SimpleStringC1EPKc>

        if (argument == "-h") {
 8017102:	f107 0314 	add.w	r3, r7, #20
 8017106:	49c8      	ldr	r1, [pc, #800]	; (8017428 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x360>)
 8017108:	4618      	mov	r0, r3
 801710a:	f7f7 fece 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801710e:	f107 0214 	add.w	r2, r7, #20
 8017112:	f107 0308 	add.w	r3, r7, #8
 8017116:	4611      	mov	r1, r2
 8017118:	4618      	mov	r0, r3
 801711a:	f7f8 fa8a 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 801711e:	4603      	mov	r3, r0
 8017120:	461d      	mov	r5, r3
 8017122:	f107 0314 	add.w	r3, r7, #20
 8017126:	4618      	mov	r0, r3
 8017128:	f7f8 fa77 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801712c:	2d00      	cmp	r5, #0
 801712e:	d006      	beq.n	801713e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76>
            needHelp_ = true;
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	2201      	movs	r2, #1
 8017134:	731a      	strb	r2, [r3, #12]
            correctParameters = false;
 8017136:	2300      	movs	r3, #0
 8017138:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 801713c:	e366      	b.n	801780c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        }
        else if (argument == "-v") verbose_ = true;
 801713e:	f107 031c 	add.w	r3, r7, #28
 8017142:	49ba      	ldr	r1, [pc, #744]	; (801742c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x364>)
 8017144:	4618      	mov	r0, r3
 8017146:	f7f7 feb0 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801714a:	f107 021c 	add.w	r2, r7, #28
 801714e:	f107 0308 	add.w	r3, r7, #8
 8017152:	4611      	mov	r1, r2
 8017154:	4618      	mov	r0, r3
 8017156:	f7f8 fa6c 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 801715a:	4603      	mov	r3, r0
 801715c:	461d      	mov	r5, r3
 801715e:	f107 031c 	add.w	r3, r7, #28
 8017162:	4618      	mov	r0, r3
 8017164:	f7f8 fa59 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8017168:	2d00      	cmp	r5, #0
 801716a:	d003      	beq.n	8017174 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xac>
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	2201      	movs	r2, #1
 8017170:	735a      	strb	r2, [r3, #13]
 8017172:	e34b      	b.n	801780c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-vv") veryVerbose_ = true;
 8017174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017178:	49ad      	ldr	r1, [pc, #692]	; (8017430 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x368>)
 801717a:	4618      	mov	r0, r3
 801717c:	f7f7 fe95 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8017180:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8017184:	f107 0308 	add.w	r3, r7, #8
 8017188:	4611      	mov	r1, r2
 801718a:	4618      	mov	r0, r3
 801718c:	f7f8 fa51 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8017190:	4603      	mov	r3, r0
 8017192:	461d      	mov	r5, r3
 8017194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017198:	4618      	mov	r0, r3
 801719a:	f7f8 fa3e 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801719e:	2d00      	cmp	r5, #0
 80171a0:	d003      	beq.n	80171aa <_ZN20CommandLineArguments5parseEP10TestPlugin+0xe2>
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	2201      	movs	r2, #1
 80171a6:	739a      	strb	r2, [r3, #14]
 80171a8:	e330      	b.n	801780c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-c") color_ = true;
 80171aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80171ae:	49a1      	ldr	r1, [pc, #644]	; (8017434 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x36c>)
 80171b0:	4618      	mov	r0, r3
 80171b2:	f7f7 fe7a 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80171b6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80171ba:	f107 0308 	add.w	r3, r7, #8
 80171be:	4611      	mov	r1, r2
 80171c0:	4618      	mov	r0, r3
 80171c2:	f7f8 fa36 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 80171c6:	4603      	mov	r3, r0
 80171c8:	461d      	mov	r5, r3
 80171ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80171ce:	4618      	mov	r0, r3
 80171d0:	f7f8 fa23 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80171d4:	2d00      	cmp	r5, #0
 80171d6:	d003      	beq.n	80171e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x118>
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	2201      	movs	r2, #1
 80171dc:	73da      	strb	r2, [r3, #15]
 80171de:	e315      	b.n	801780c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-p") runTestsAsSeperateProcess_ = true;
 80171e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80171e4:	4994      	ldr	r1, [pc, #592]	; (8017438 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x370>)
 80171e6:	4618      	mov	r0, r3
 80171e8:	f7f7 fe5f 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80171ec:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80171f0:	f107 0308 	add.w	r3, r7, #8
 80171f4:	4611      	mov	r1, r2
 80171f6:	4618      	mov	r0, r3
 80171f8:	f7f8 fa1b 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 80171fc:	4603      	mov	r3, r0
 80171fe:	461d      	mov	r5, r3
 8017200:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017204:	4618      	mov	r0, r3
 8017206:	f7f8 fa08 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801720a:	2d00      	cmp	r5, #0
 801720c:	d003      	beq.n	8017216 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x14e>
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	2201      	movs	r2, #1
 8017212:	741a      	strb	r2, [r3, #16]
 8017214:	e2fa      	b.n	801780c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-b") reversing_ = true;
 8017216:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801721a:	4988      	ldr	r1, [pc, #544]	; (801743c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x374>)
 801721c:	4618      	mov	r0, r3
 801721e:	f7f7 fe44 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8017222:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8017226:	f107 0308 	add.w	r3, r7, #8
 801722a:	4611      	mov	r1, r2
 801722c:	4618      	mov	r0, r3
 801722e:	f7f8 fa00 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8017232:	4603      	mov	r3, r0
 8017234:	461d      	mov	r5, r3
 8017236:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801723a:	4618      	mov	r0, r3
 801723c:	f7f8 f9ed 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8017240:	2d00      	cmp	r5, #0
 8017242:	d003      	beq.n	801724c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x184>
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	2201      	movs	r2, #1
 8017248:	755a      	strb	r2, [r3, #21]
 801724a:	e2df      	b.n	801780c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-lg") listTestGroupNames_ = true;
 801724c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8017250:	497b      	ldr	r1, [pc, #492]	; (8017440 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x378>)
 8017252:	4618      	mov	r0, r3
 8017254:	f7f7 fe29 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8017258:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801725c:	f107 0308 	add.w	r3, r7, #8
 8017260:	4611      	mov	r1, r2
 8017262:	4618      	mov	r0, r3
 8017264:	f7f8 f9e5 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8017268:	4603      	mov	r3, r0
 801726a:	461d      	mov	r5, r3
 801726c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8017270:	4618      	mov	r0, r3
 8017272:	f7f8 f9d2 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8017276:	2d00      	cmp	r5, #0
 8017278:	d003      	beq.n	8017282 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1ba>
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	2201      	movs	r2, #1
 801727e:	745a      	strb	r2, [r3, #17]
 8017280:	e2c4      	b.n	801780c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ln") listTestGroupAndCaseNames_ = true;
 8017282:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8017286:	496f      	ldr	r1, [pc, #444]	; (8017444 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x37c>)
 8017288:	4618      	mov	r0, r3
 801728a:	f7f7 fe0e 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801728e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8017292:	f107 0308 	add.w	r3, r7, #8
 8017296:	4611      	mov	r1, r2
 8017298:	4618      	mov	r0, r3
 801729a:	f7f8 f9ca 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 801729e:	4603      	mov	r3, r0
 80172a0:	461d      	mov	r5, r3
 80172a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80172a6:	4618      	mov	r0, r3
 80172a8:	f7f8 f9b7 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80172ac:	2d00      	cmp	r5, #0
 80172ae:	d003      	beq.n	80172b8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1f0>
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	2201      	movs	r2, #1
 80172b4:	749a      	strb	r2, [r3, #18]
 80172b6:	e2a9      	b.n	801780c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ll") listTestLocations_ = true;
 80172b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80172bc:	4962      	ldr	r1, [pc, #392]	; (8017448 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x380>)
 80172be:	4618      	mov	r0, r3
 80172c0:	f7f7 fdf3 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80172c4:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80172c8:	f107 0308 	add.w	r3, r7, #8
 80172cc:	4611      	mov	r1, r2
 80172ce:	4618      	mov	r0, r3
 80172d0:	f7f8 f9af 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 80172d4:	4603      	mov	r3, r0
 80172d6:	461d      	mov	r5, r3
 80172d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80172dc:	4618      	mov	r0, r3
 80172de:	f7f8 f99c 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80172e2:	2d00      	cmp	r5, #0
 80172e4:	d003      	beq.n	80172ee <_ZN20CommandLineArguments5parseEP10TestPlugin+0x226>
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	2201      	movs	r2, #1
 80172ea:	74da      	strb	r2, [r3, #19]
 80172ec:	e28e      	b.n	801780c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ri") runIgnored_ = true;
 80172ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80172f2:	4956      	ldr	r1, [pc, #344]	; (801744c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x384>)
 80172f4:	4618      	mov	r0, r3
 80172f6:	f7f7 fdd8 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80172fa:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80172fe:	f107 0308 	add.w	r3, r7, #8
 8017302:	4611      	mov	r1, r2
 8017304:	4618      	mov	r0, r3
 8017306:	f7f8 f994 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 801730a:	4603      	mov	r3, r0
 801730c:	461d      	mov	r5, r3
 801730e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8017312:	4618      	mov	r0, r3
 8017314:	f7f8 f981 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8017318:	2d00      	cmp	r5, #0
 801731a:	d003      	beq.n	8017324 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x25c>
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	2201      	movs	r2, #1
 8017320:	751a      	strb	r2, [r3, #20]
 8017322:	e273      	b.n	801780c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-f") crashOnFail_ = true;
 8017324:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8017328:	4949      	ldr	r1, [pc, #292]	; (8017450 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x388>)
 801732a:	4618      	mov	r0, r3
 801732c:	f7f7 fdbd 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8017330:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8017334:	f107 0308 	add.w	r3, r7, #8
 8017338:	4611      	mov	r1, r2
 801733a:	4618      	mov	r0, r3
 801733c:	f7f8 f979 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8017340:	4603      	mov	r3, r0
 8017342:	461d      	mov	r5, r3
 8017344:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8017348:	4618      	mov	r0, r3
 801734a:	f7f8 f966 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801734e:	2d00      	cmp	r5, #0
 8017350:	d003      	beq.n	801735a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x292>
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	2201      	movs	r2, #1
 8017356:	759a      	strb	r2, [r3, #22]
 8017358:	e258      	b.n	801780c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-r")) setRepeatCount(ac_, av_, i);
 801735a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801735e:	493d      	ldr	r1, [pc, #244]	; (8017454 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x38c>)
 8017360:	4618      	mov	r0, r3
 8017362:	f7f7 fda2 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8017366:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801736a:	f107 0308 	add.w	r3, r7, #8
 801736e:	4611      	mov	r1, r2
 8017370:	4618      	mov	r0, r3
 8017372:	f7f7 fe5e 	bl	800f032 <_ZNK12SimpleString10startsWithERKS_>
 8017376:	4603      	mov	r3, r0
 8017378:	461d      	mov	r5, r3
 801737a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801737e:	4618      	mov	r0, r3
 8017380:	f7f8 f94b 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8017384:	2d00      	cmp	r5, #0
 8017386:	d009      	beq.n	801739c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x2d4>
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	6859      	ldr	r1, [r3, #4]
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	689a      	ldr	r2, [r3, #8]
 8017390:	f107 0310 	add.w	r3, r7, #16
 8017394:	6878      	ldr	r0, [r7, #4]
 8017396:	f000 fb33 	bl	8017a00 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>
 801739a:	e237      	b.n	801780c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-g")) addGroupFilter(ac_, av_, i);
 801739c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80173a0:	492d      	ldr	r1, [pc, #180]	; (8017458 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x390>)
 80173a2:	4618      	mov	r0, r3
 80173a4:	f7f7 fd81 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80173a8:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80173ac:	f107 0308 	add.w	r3, r7, #8
 80173b0:	4611      	mov	r1, r2
 80173b2:	4618      	mov	r0, r3
 80173b4:	f7f7 fe3d 	bl	800f032 <_ZNK12SimpleString10startsWithERKS_>
 80173b8:	4603      	mov	r3, r0
 80173ba:	461d      	mov	r5, r3
 80173bc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80173c0:	4618      	mov	r0, r3
 80173c2:	f7f8 f92a 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80173c6:	2d00      	cmp	r5, #0
 80173c8:	d009      	beq.n	80173de <_ZN20CommandLineArguments5parseEP10TestPlugin+0x316>
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	6859      	ldr	r1, [r3, #4]
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	689a      	ldr	r2, [r3, #8]
 80173d2:	f107 0310 	add.w	r3, r7, #16
 80173d6:	6878      	ldr	r0, [r7, #4]
 80173d8:	f000 fc40 	bl	8017c5c <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>
 80173dc:	e216      	b.n	801780c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-t")) correctParameters = addGroupDotNameFilter(ac_, av_, i);
 80173de:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80173e2:	491e      	ldr	r1, [pc, #120]	; (801745c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x394>)
 80173e4:	4618      	mov	r0, r3
 80173e6:	f7f7 fd60 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80173ea:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80173ee:	f107 0308 	add.w	r3, r7, #8
 80173f2:	4611      	mov	r1, r2
 80173f4:	4618      	mov	r0, r3
 80173f6:	f7f7 fe1c 	bl	800f032 <_ZNK12SimpleString10startsWithERKS_>
 80173fa:	4603      	mov	r3, r0
 80173fc:	461d      	mov	r5, r3
 80173fe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8017402:	4618      	mov	r0, r3
 8017404:	f7f8 f909 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8017408:	2d00      	cmp	r5, #0
 801740a:	d029      	beq.n	8017460 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x398>
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	6859      	ldr	r1, [r3, #4]
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	689a      	ldr	r2, [r3, #8]
 8017414:	f107 0310 	add.w	r3, r7, #16
 8017418:	6878      	ldr	r0, [r7, #4]
 801741a:	f000 fc61 	bl	8017ce0 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>
 801741e:	4603      	mov	r3, r0
 8017420:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8017424:	e1f2      	b.n	801780c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 8017426:	bf00      	nop
 8017428:	08027d1c 	.word	0x08027d1c
 801742c:	08027d20 	.word	0x08027d20
 8017430:	08027d24 	.word	0x08027d24
 8017434:	08027d28 	.word	0x08027d28
 8017438:	08027d2c 	.word	0x08027d2c
 801743c:	08027d30 	.word	0x08027d30
 8017440:	08027d34 	.word	0x08027d34
 8017444:	08027d38 	.word	0x08027d38
 8017448:	08027d3c 	.word	0x08027d3c
 801744c:	08027d40 	.word	0x08027d40
 8017450:	08027d44 	.word	0x08027d44
 8017454:	08027d48 	.word	0x08027d48
 8017458:	08027d4c 	.word	0x08027d4c
 801745c:	08027d50 	.word	0x08027d50
        else if (argument.startsWith("-sg")) addStrictGroupFilter(ac_, av_, i);
 8017460:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8017464:	49b9      	ldr	r1, [pc, #740]	; (801774c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x684>)
 8017466:	4618      	mov	r0, r3
 8017468:	f7f7 fd1f 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801746c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8017470:	f107 0308 	add.w	r3, r7, #8
 8017474:	4611      	mov	r1, r2
 8017476:	4618      	mov	r0, r3
 8017478:	f7f7 fddb 	bl	800f032 <_ZNK12SimpleString10startsWithERKS_>
 801747c:	4603      	mov	r3, r0
 801747e:	461d      	mov	r5, r3
 8017480:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8017484:	4618      	mov	r0, r3
 8017486:	f7f8 f8c8 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801748a:	2d00      	cmp	r5, #0
 801748c:	d009      	beq.n	80174a2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x3da>
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	6859      	ldr	r1, [r3, #4]
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	689a      	ldr	r2, [r3, #8]
 8017496:	f107 0310 	add.w	r3, r7, #16
 801749a:	6878      	ldr	r0, [r7, #4]
 801749c:	f000 fccc 	bl	8017e38 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>
 80174a0:	e1b4      	b.n	801780c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xg")) addExcludeGroupFilter(ac_, av_, i);
 80174a2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80174a6:	49aa      	ldr	r1, [pc, #680]	; (8017750 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x688>)
 80174a8:	4618      	mov	r0, r3
 80174aa:	f7f7 fcfe 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80174ae:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80174b2:	f107 0308 	add.w	r3, r7, #8
 80174b6:	4611      	mov	r1, r2
 80174b8:	4618      	mov	r0, r3
 80174ba:	f7f7 fdba 	bl	800f032 <_ZNK12SimpleString10startsWithERKS_>
 80174be:	4603      	mov	r3, r0
 80174c0:	461d      	mov	r5, r3
 80174c2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80174c6:	4618      	mov	r0, r3
 80174c8:	f7f8 f8a7 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80174cc:	2d00      	cmp	r5, #0
 80174ce:	d009      	beq.n	80174e4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x41c>
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	6859      	ldr	r1, [r3, #4]
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	689a      	ldr	r2, [r3, #8]
 80174d8:	f107 0310 	add.w	r3, r7, #16
 80174dc:	6878      	ldr	r0, [r7, #4]
 80174de:	f000 fcf1 	bl	8017ec4 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>
 80174e2:	e193      	b.n	801780c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsg")) addExcludeStrictGroupFilter(ac_, av_, i);
 80174e4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80174e8:	499a      	ldr	r1, [pc, #616]	; (8017754 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x68c>)
 80174ea:	4618      	mov	r0, r3
 80174ec:	f7f7 fcdd 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80174f0:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80174f4:	f107 0308 	add.w	r3, r7, #8
 80174f8:	4611      	mov	r1, r2
 80174fa:	4618      	mov	r0, r3
 80174fc:	f7f7 fd99 	bl	800f032 <_ZNK12SimpleString10startsWithERKS_>
 8017500:	4603      	mov	r3, r0
 8017502:	461d      	mov	r5, r3
 8017504:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8017508:	4618      	mov	r0, r3
 801750a:	f7f8 f886 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801750e:	2d00      	cmp	r5, #0
 8017510:	d009      	beq.n	8017526 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x45e>
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	6859      	ldr	r1, [r3, #4]
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	689a      	ldr	r2, [r3, #8]
 801751a:	f107 0310 	add.w	r3, r7, #16
 801751e:	6878      	ldr	r0, [r7, #4]
 8017520:	f000 fd16 	bl	8017f50 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>
 8017524:	e172      	b.n	801780c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-n")) addNameFilter(ac_, av_, i);
 8017526:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801752a:	498b      	ldr	r1, [pc, #556]	; (8017758 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x690>)
 801752c:	4618      	mov	r0, r3
 801752e:	f7f7 fcbc 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8017532:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8017536:	f107 0308 	add.w	r3, r7, #8
 801753a:	4611      	mov	r1, r2
 801753c:	4618      	mov	r0, r3
 801753e:	f7f7 fd78 	bl	800f032 <_ZNK12SimpleString10startsWithERKS_>
 8017542:	4603      	mov	r3, r0
 8017544:	461d      	mov	r5, r3
 8017546:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801754a:	4618      	mov	r0, r3
 801754c:	f7f8 f865 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8017550:	2d00      	cmp	r5, #0
 8017552:	d009      	beq.n	8017568 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4a0>
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	6859      	ldr	r1, [r3, #4]
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	689a      	ldr	r2, [r3, #8]
 801755c:	f107 0310 	add.w	r3, r7, #16
 8017560:	6878      	ldr	r0, [r7, #4]
 8017562:	f000 fd3d 	bl	8017fe0 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>
 8017566:	e151      	b.n	801780c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-sn")) addStrictNameFilter(ac_, av_, i);
 8017568:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801756c:	497b      	ldr	r1, [pc, #492]	; (801775c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x694>)
 801756e:	4618      	mov	r0, r3
 8017570:	f7f7 fc9b 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8017574:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8017578:	f107 0308 	add.w	r3, r7, #8
 801757c:	4611      	mov	r1, r2
 801757e:	4618      	mov	r0, r3
 8017580:	f7f7 fd57 	bl	800f032 <_ZNK12SimpleString10startsWithERKS_>
 8017584:	4603      	mov	r3, r0
 8017586:	461d      	mov	r5, r3
 8017588:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801758c:	4618      	mov	r0, r3
 801758e:	f7f8 f844 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8017592:	2d00      	cmp	r5, #0
 8017594:	d009      	beq.n	80175aa <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4e2>
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	6859      	ldr	r1, [r3, #4]
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	689a      	ldr	r2, [r3, #8]
 801759e:	f107 0310 	add.w	r3, r7, #16
 80175a2:	6878      	ldr	r0, [r7, #4]
 80175a4:	f000 fd5e 	bl	8018064 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>
 80175a8:	e130      	b.n	801780c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xn")) addExcludeNameFilter(ac_, av_, i);
 80175aa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80175ae:	496c      	ldr	r1, [pc, #432]	; (8017760 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x698>)
 80175b0:	4618      	mov	r0, r3
 80175b2:	f7f7 fc7a 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80175b6:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80175ba:	f107 0308 	add.w	r3, r7, #8
 80175be:	4611      	mov	r1, r2
 80175c0:	4618      	mov	r0, r3
 80175c2:	f7f7 fd36 	bl	800f032 <_ZNK12SimpleString10startsWithERKS_>
 80175c6:	4603      	mov	r3, r0
 80175c8:	461d      	mov	r5, r3
 80175ca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80175ce:	4618      	mov	r0, r3
 80175d0:	f7f8 f823 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80175d4:	2d00      	cmp	r5, #0
 80175d6:	d009      	beq.n	80175ec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x524>
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	6859      	ldr	r1, [r3, #4]
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	689a      	ldr	r2, [r3, #8]
 80175e0:	f107 0310 	add.w	r3, r7, #16
 80175e4:	6878      	ldr	r0, [r7, #4]
 80175e6:	f000 fd83 	bl	80180f0 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>
 80175ea:	e10f      	b.n	801780c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsn")) addExcludeStrictNameFilter(ac_, av_, i);
 80175ec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80175f0:	495c      	ldr	r1, [pc, #368]	; (8017764 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x69c>)
 80175f2:	4618      	mov	r0, r3
 80175f4:	f7f7 fc59 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80175f8:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80175fc:	f107 0308 	add.w	r3, r7, #8
 8017600:	4611      	mov	r1, r2
 8017602:	4618      	mov	r0, r3
 8017604:	f7f7 fd15 	bl	800f032 <_ZNK12SimpleString10startsWithERKS_>
 8017608:	4603      	mov	r3, r0
 801760a:	461d      	mov	r5, r3
 801760c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8017610:	4618      	mov	r0, r3
 8017612:	f7f8 f802 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8017616:	2d00      	cmp	r5, #0
 8017618:	d009      	beq.n	801762e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x566>
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	6859      	ldr	r1, [r3, #4]
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	689a      	ldr	r2, [r3, #8]
 8017622:	f107 0310 	add.w	r3, r7, #16
 8017626:	6878      	ldr	r0, [r7, #4]
 8017628:	f000 fda8 	bl	801817c <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>
 801762c:	e0ee      	b.n	801780c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-s")) correctParameters = setShuffle(ac_, av_, i);
 801762e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8017632:	494d      	ldr	r1, [pc, #308]	; (8017768 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a0>)
 8017634:	4618      	mov	r0, r3
 8017636:	f7f7 fc38 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801763a:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 801763e:	f107 0308 	add.w	r3, r7, #8
 8017642:	4611      	mov	r1, r2
 8017644:	4618      	mov	r0, r3
 8017646:	f7f7 fcf4 	bl	800f032 <_ZNK12SimpleString10startsWithERKS_>
 801764a:	4603      	mov	r3, r0
 801764c:	461d      	mov	r5, r3
 801764e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8017652:	4618      	mov	r0, r3
 8017654:	f7f7 ffe1 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8017658:	2d00      	cmp	r5, #0
 801765a:	d00c      	beq.n	8017676 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5ae>
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	6859      	ldr	r1, [r3, #4]
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	689a      	ldr	r2, [r3, #8]
 8017664:	f107 0310 	add.w	r3, r7, #16
 8017668:	6878      	ldr	r0, [r7, #4]
 801766a:	f000 fa29 	bl	8017ac0 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>
 801766e:	4603      	mov	r3, r0
 8017670:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8017674:	e0ca      	b.n	801780c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "TEST(");
 8017676:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801767a:	493c      	ldr	r1, [pc, #240]	; (801776c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 801767c:	4618      	mov	r0, r3
 801767e:	f7f7 fc14 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8017682:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8017686:	f107 0308 	add.w	r3, r7, #8
 801768a:	4611      	mov	r1, r2
 801768c:	4618      	mov	r0, r3
 801768e:	f7f7 fcd0 	bl	800f032 <_ZNK12SimpleString10startsWithERKS_>
 8017692:	4603      	mov	r3, r0
 8017694:	461d      	mov	r5, r3
 8017696:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801769a:	4618      	mov	r0, r3
 801769c:	f7f7 ffbd 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80176a0:	2d00      	cmp	r5, #0
 80176a2:	d00b      	beq.n	80176bc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5f4>
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	6859      	ldr	r1, [r3, #4]
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	689a      	ldr	r2, [r3, #8]
 80176ac:	f107 0310 	add.w	r3, r7, #16
 80176b0:	482e      	ldr	r0, [pc, #184]	; (801776c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 80176b2:	9000      	str	r0, [sp, #0]
 80176b4:	6878      	ldr	r0, [r7, #4]
 80176b6:	f000 fda9 	bl	801820c <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 80176ba:	e0a7      	b.n	801780c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("IGNORE_TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "IGNORE_TEST(");
 80176bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80176c0:	492b      	ldr	r1, [pc, #172]	; (8017770 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 80176c2:	4618      	mov	r0, r3
 80176c4:	f7f7 fbf1 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80176c8:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80176cc:	f107 0308 	add.w	r3, r7, #8
 80176d0:	4611      	mov	r1, r2
 80176d2:	4618      	mov	r0, r3
 80176d4:	f7f7 fcad 	bl	800f032 <_ZNK12SimpleString10startsWithERKS_>
 80176d8:	4603      	mov	r3, r0
 80176da:	461d      	mov	r5, r3
 80176dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80176e0:	4618      	mov	r0, r3
 80176e2:	f7f7 ff9a 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80176e6:	2d00      	cmp	r5, #0
 80176e8:	d00b      	beq.n	8017702 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x63a>
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	6859      	ldr	r1, [r3, #4]
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	689a      	ldr	r2, [r3, #8]
 80176f2:	f107 0310 	add.w	r3, r7, #16
 80176f6:	481e      	ldr	r0, [pc, #120]	; (8017770 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 80176f8:	9000      	str	r0, [sp, #0]
 80176fa:	6878      	ldr	r0, [r7, #4]
 80176fc:	f000 fd86 	bl	801820c <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 8017700:	e084      	b.n	801780c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-o")) correctParameters = setOutputType(ac_, av_, i);
 8017702:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8017706:	491b      	ldr	r1, [pc, #108]	; (8017774 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6ac>)
 8017708:	4618      	mov	r0, r3
 801770a:	f7f7 fbce 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801770e:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8017712:	f107 0308 	add.w	r3, r7, #8
 8017716:	4611      	mov	r1, r2
 8017718:	4618      	mov	r0, r3
 801771a:	f7f7 fc8a 	bl	800f032 <_ZNK12SimpleString10startsWithERKS_>
 801771e:	4603      	mov	r3, r0
 8017720:	461d      	mov	r5, r3
 8017722:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8017726:	4618      	mov	r0, r3
 8017728:	f7f7 ff77 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801772c:	2d00      	cmp	r5, #0
 801772e:	d023      	beq.n	8017778 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6b0>
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	6859      	ldr	r1, [r3, #4]
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	689a      	ldr	r2, [r3, #8]
 8017738:	f107 0310 	add.w	r3, r7, #16
 801773c:	6878      	ldr	r0, [r7, #4]
 801773e:	f000 fe3b 	bl	80183b8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>
 8017742:	4603      	mov	r3, r0
 8017744:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8017748:	e060      	b.n	801780c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 801774a:	bf00      	nop
 801774c:	08027d54 	.word	0x08027d54
 8017750:	08027d58 	.word	0x08027d58
 8017754:	08027d5c 	.word	0x08027d5c
 8017758:	08027d64 	.word	0x08027d64
 801775c:	08027d68 	.word	0x08027d68
 8017760:	08027d6c 	.word	0x08027d6c
 8017764:	08027d70 	.word	0x08027d70
 8017768:	08027d78 	.word	0x08027d78
 801776c:	08027d7c 	.word	0x08027d7c
 8017770:	08027d84 	.word	0x08027d84
 8017774:	08027d94 	.word	0x08027d94
        else if (argument.startsWith("-p")) correctParameters = plugin->parseAllArguments(ac_, av_, i);
 8017778:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801777c:	4930      	ldr	r1, [pc, #192]	; (8017840 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x778>)
 801777e:	4618      	mov	r0, r3
 8017780:	f7f7 fb93 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8017784:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8017788:	f107 0308 	add.w	r3, r7, #8
 801778c:	4611      	mov	r1, r2
 801778e:	4618      	mov	r0, r3
 8017790:	f7f7 fc4f 	bl	800f032 <_ZNK12SimpleString10startsWithERKS_>
 8017794:	4603      	mov	r3, r0
 8017796:	461d      	mov	r5, r3
 8017798:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 801779c:	4618      	mov	r0, r3
 801779e:	f7f7 ff3c 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80177a2:	2d00      	cmp	r5, #0
 80177a4:	d00e      	beq.n	80177c4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6fc>
 80177a6:	683b      	ldr	r3, [r7, #0]
 80177a8:	681b      	ldr	r3, [r3, #0]
 80177aa:	331c      	adds	r3, #28
 80177ac:	681d      	ldr	r5, [r3, #0]
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	6859      	ldr	r1, [r3, #4]
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	689a      	ldr	r2, [r3, #8]
 80177b6:	693b      	ldr	r3, [r7, #16]
 80177b8:	6838      	ldr	r0, [r7, #0]
 80177ba:	47a8      	blx	r5
 80177bc:	4603      	mov	r3, r0
 80177be:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80177c2:	e023      	b.n	801780c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-k")) setPackageName(ac_, av_, i);
 80177c4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80177c8:	491e      	ldr	r1, [pc, #120]	; (8017844 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x77c>)
 80177ca:	4618      	mov	r0, r3
 80177cc:	f7f7 fb6d 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80177d0:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 80177d4:	f107 0308 	add.w	r3, r7, #8
 80177d8:	4611      	mov	r1, r2
 80177da:	4618      	mov	r0, r3
 80177dc:	f7f7 fc29 	bl	800f032 <_ZNK12SimpleString10startsWithERKS_>
 80177e0:	4603      	mov	r3, r0
 80177e2:	461d      	mov	r5, r3
 80177e4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80177e8:	4618      	mov	r0, r3
 80177ea:	f7f7 ff16 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80177ee:	2d00      	cmp	r5, #0
 80177f0:	d009      	beq.n	8017806 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x73e>
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	6859      	ldr	r1, [r3, #4]
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	689a      	ldr	r2, [r3, #8]
 80177fa:	f107 0310 	add.w	r3, r7, #16
 80177fe:	6878      	ldr	r0, [r7, #4]
 8017800:	f000 fd98 	bl	8018334 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>
 8017804:	e002      	b.n	801780c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else correctParameters = false;
 8017806:	2300      	movs	r3, #0
 8017808:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

        if (correctParameters == false) {
 801780c:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8017810:	2b00      	cmp	r3, #0
 8017812:	d102      	bne.n	801781a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x752>
            return false;
 8017814:	2400      	movs	r4, #0
 8017816:	2500      	movs	r5, #0
 8017818:	e000      	b.n	801781c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x754>
        SimpleString argument = av_[i];
 801781a:	2501      	movs	r5, #1
 801781c:	f107 0308 	add.w	r3, r7, #8
 8017820:	4618      	mov	r0, r3
 8017822:	f7f7 fefa 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8017826:	2d01      	cmp	r5, #1
 8017828:	d104      	bne.n	8017834 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76c>
    for (int i = 1; i < ac_; i++) {
 801782a:	693b      	ldr	r3, [r7, #16]
 801782c:	3301      	adds	r3, #1
 801782e:	613b      	str	r3, [r7, #16]
 8017830:	e455      	b.n	80170de <_ZN20CommandLineArguments5parseEP10TestPlugin+0x16>
        }
    }
    return true;
 8017832:	2401      	movs	r4, #1
 8017834:	4623      	mov	r3, r4
}
 8017836:	4618      	mov	r0, r3
 8017838:	37f0      	adds	r7, #240	; 0xf0
 801783a:	46bd      	mov	sp, r7
 801783c:	bdb0      	pop	{r4, r5, r7, pc}
 801783e:	bf00      	nop
 8017840:	08027d2c 	.word	0x08027d2c
 8017844:	08027d98 	.word	0x08027d98

08017848 <_ZNK20CommandLineArguments5usageEv>:

const char* CommandLineArguments::usage() const
{
 8017848:	b480      	push	{r7}
 801784a:	b083      	sub	sp, #12
 801784c:	af00      	add	r7, sp, #0
 801784e:	6078      	str	r0, [r7, #4]
    return "use -h for more extensive help\n"
           "usage [-h] [-v] [-vv] [-c] [-p] [-lg] [-ln] [-ri] [-r#] [-f]\n"
           "      [-g|sg|xg|xsg groupName]... [-n|sn|xn|xsn testName]... [-t groupName.testName]...\n"
           "      [-b] [-s [randomizerSeed>0]] [\"TEST(groupName, testName)\"]...\n"
           "      [-o{normal, junit, teamcity}] [-k packageName]\n";
 8017850:	4b03      	ldr	r3, [pc, #12]	; (8017860 <_ZNK20CommandLineArguments5usageEv+0x18>)
}
 8017852:	4618      	mov	r0, r3
 8017854:	370c      	adds	r7, #12
 8017856:	46bd      	mov	sp, r7
 8017858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801785c:	4770      	bx	lr
 801785e:	bf00      	nop
 8017860:	08027d9c 	.word	0x08027d9c

08017864 <_ZNK20CommandLineArguments4helpEv>:

const char* CommandLineArguments::help() const
{
 8017864:	b480      	push	{r7}
 8017866:	b083      	sub	sp, #12
 8017868:	af00      	add	r7, sp, #0
 801786a:	6078      	str	r0, [r7, #4]
      "Options that control how the tests are run:\n"
      "  -p               - run tests in a separate process.\n"
      "  -b               - run the tests backwards, reversing the normal way\n"
      "  -s [seed]        - shuffle tests randomly. Seed is optional\n"
      "  -r#              - repeat the tests some number (#) of times, or twice if # is not specified.\n"
      "  -f               - Cause the tests to crash on failure (to allow the test to be debugged if necessary)\n";
 801786c:	4b03      	ldr	r3, [pc, #12]	; (801787c <_ZNK20CommandLineArguments4helpEv+0x18>)
}
 801786e:	4618      	mov	r0, r3
 8017870:	370c      	adds	r7, #12
 8017872:	46bd      	mov	sp, r7
 8017874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017878:	4770      	bx	lr
 801787a:	bf00      	nop
 801787c:	08027ecc 	.word	0x08027ecc

08017880 <_ZNK20CommandLineArguments8needHelpEv>:

bool CommandLineArguments::needHelp() const
{
 8017880:	b480      	push	{r7}
 8017882:	b083      	sub	sp, #12
 8017884:	af00      	add	r7, sp, #0
 8017886:	6078      	str	r0, [r7, #4]
    return needHelp_;
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	7b1b      	ldrb	r3, [r3, #12]
}
 801788c:	4618      	mov	r0, r3
 801788e:	370c      	adds	r7, #12
 8017890:	46bd      	mov	sp, r7
 8017892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017896:	4770      	bx	lr

08017898 <_ZNK20CommandLineArguments9isVerboseEv>:

bool CommandLineArguments::isVerbose() const
{
 8017898:	b480      	push	{r7}
 801789a:	b083      	sub	sp, #12
 801789c:	af00      	add	r7, sp, #0
 801789e:	6078      	str	r0, [r7, #4]
    return verbose_;
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	7b5b      	ldrb	r3, [r3, #13]
}
 80178a4:	4618      	mov	r0, r3
 80178a6:	370c      	adds	r7, #12
 80178a8:	46bd      	mov	sp, r7
 80178aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ae:	4770      	bx	lr

080178b0 <_ZNK20CommandLineArguments13isVeryVerboseEv>:

bool CommandLineArguments::isVeryVerbose() const
{
 80178b0:	b480      	push	{r7}
 80178b2:	b083      	sub	sp, #12
 80178b4:	af00      	add	r7, sp, #0
 80178b6:	6078      	str	r0, [r7, #4]
    return veryVerbose_;
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	7b9b      	ldrb	r3, [r3, #14]
}
 80178bc:	4618      	mov	r0, r3
 80178be:	370c      	adds	r7, #12
 80178c0:	46bd      	mov	sp, r7
 80178c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178c6:	4770      	bx	lr

080178c8 <_ZNK20CommandLineArguments7isColorEv>:

bool CommandLineArguments::isColor() const
{
 80178c8:	b480      	push	{r7}
 80178ca:	b083      	sub	sp, #12
 80178cc:	af00      	add	r7, sp, #0
 80178ce:	6078      	str	r0, [r7, #4]
    return color_;
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	7bdb      	ldrb	r3, [r3, #15]
}
 80178d4:	4618      	mov	r0, r3
 80178d6:	370c      	adds	r7, #12
 80178d8:	46bd      	mov	sp, r7
 80178da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178de:	4770      	bx	lr

080178e0 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>:

bool CommandLineArguments::isListingTestGroupNames() const
{
 80178e0:	b480      	push	{r7}
 80178e2:	b083      	sub	sp, #12
 80178e4:	af00      	add	r7, sp, #0
 80178e6:	6078      	str	r0, [r7, #4]
    return listTestGroupNames_;
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	7c5b      	ldrb	r3, [r3, #17]
}
 80178ec:	4618      	mov	r0, r3
 80178ee:	370c      	adds	r7, #12
 80178f0:	46bd      	mov	sp, r7
 80178f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178f6:	4770      	bx	lr

080178f8 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>:

bool CommandLineArguments::isListingTestGroupAndCaseNames() const
{
 80178f8:	b480      	push	{r7}
 80178fa:	b083      	sub	sp, #12
 80178fc:	af00      	add	r7, sp, #0
 80178fe:	6078      	str	r0, [r7, #4]
    return listTestGroupAndCaseNames_;
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	7c9b      	ldrb	r3, [r3, #18]
}
 8017904:	4618      	mov	r0, r3
 8017906:	370c      	adds	r7, #12
 8017908:	46bd      	mov	sp, r7
 801790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801790e:	4770      	bx	lr

08017910 <_ZNK20CommandLineArguments22isListingTestLocationsEv>:

bool CommandLineArguments::isListingTestLocations() const
{
 8017910:	b480      	push	{r7}
 8017912:	b083      	sub	sp, #12
 8017914:	af00      	add	r7, sp, #0
 8017916:	6078      	str	r0, [r7, #4]
    return listTestLocations_;
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	7cdb      	ldrb	r3, [r3, #19]
}
 801791c:	4618      	mov	r0, r3
 801791e:	370c      	adds	r7, #12
 8017920:	46bd      	mov	sp, r7
 8017922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017926:	4770      	bx	lr

08017928 <_ZNK20CommandLineArguments12isRunIgnoredEv>:

bool CommandLineArguments::isRunIgnored() const
{
 8017928:	b480      	push	{r7}
 801792a:	b083      	sub	sp, #12
 801792c:	af00      	add	r7, sp, #0
 801792e:	6078      	str	r0, [r7, #4]
    return runIgnored_;
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	7d1b      	ldrb	r3, [r3, #20]
}
 8017934:	4618      	mov	r0, r3
 8017936:	370c      	adds	r7, #12
 8017938:	46bd      	mov	sp, r7
 801793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801793e:	4770      	bx	lr

08017940 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>:

bool CommandLineArguments::runTestsInSeperateProcess() const
{
 8017940:	b480      	push	{r7}
 8017942:	b083      	sub	sp, #12
 8017944:	af00      	add	r7, sp, #0
 8017946:	6078      	str	r0, [r7, #4]
    return runTestsAsSeperateProcess_;
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	7c1b      	ldrb	r3, [r3, #16]
}
 801794c:	4618      	mov	r0, r3
 801794e:	370c      	adds	r7, #12
 8017950:	46bd      	mov	sp, r7
 8017952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017956:	4770      	bx	lr

08017958 <_ZNK20CommandLineArguments14getRepeatCountEv>:


size_t CommandLineArguments::getRepeatCount() const
{
 8017958:	b480      	push	{r7}
 801795a:	b083      	sub	sp, #12
 801795c:	af00      	add	r7, sp, #0
 801795e:	6078      	str	r0, [r7, #4]
    return repeat_;
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	69db      	ldr	r3, [r3, #28]
}
 8017964:	4618      	mov	r0, r3
 8017966:	370c      	adds	r7, #12
 8017968:	46bd      	mov	sp, r7
 801796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801796e:	4770      	bx	lr

08017970 <_ZNK20CommandLineArguments11isReversingEv>:

bool CommandLineArguments::isReversing() const
{
 8017970:	b480      	push	{r7}
 8017972:	b083      	sub	sp, #12
 8017974:	af00      	add	r7, sp, #0
 8017976:	6078      	str	r0, [r7, #4]
    return reversing_;
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	7d5b      	ldrb	r3, [r3, #21]
}
 801797c:	4618      	mov	r0, r3
 801797e:	370c      	adds	r7, #12
 8017980:	46bd      	mov	sp, r7
 8017982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017986:	4770      	bx	lr

08017988 <_ZNK20CommandLineArguments16isCrashingOnFailEv>:

bool CommandLineArguments::isCrashingOnFail() const
{
 8017988:	b480      	push	{r7}
 801798a:	b083      	sub	sp, #12
 801798c:	af00      	add	r7, sp, #0
 801798e:	6078      	str	r0, [r7, #4]
    return crashOnFail_;
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	7d9b      	ldrb	r3, [r3, #22]
}
 8017994:	4618      	mov	r0, r3
 8017996:	370c      	adds	r7, #12
 8017998:	46bd      	mov	sp, r7
 801799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801799e:	4770      	bx	lr

080179a0 <_ZNK20CommandLineArguments11isShufflingEv>:

bool CommandLineArguments::isShuffling() const
{
 80179a0:	b480      	push	{r7}
 80179a2:	b083      	sub	sp, #12
 80179a4:	af00      	add	r7, sp, #0
 80179a6:	6078      	str	r0, [r7, #4]
    return shuffling_;
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	7ddb      	ldrb	r3, [r3, #23]
}
 80179ac:	4618      	mov	r0, r3
 80179ae:	370c      	adds	r7, #12
 80179b0:	46bd      	mov	sp, r7
 80179b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179b6:	4770      	bx	lr

080179b8 <_ZNK20CommandLineArguments14getShuffleSeedEv>:

size_t CommandLineArguments::getShuffleSeed() const
{
 80179b8:	b480      	push	{r7}
 80179ba:	b083      	sub	sp, #12
 80179bc:	af00      	add	r7, sp, #0
 80179be:	6078      	str	r0, [r7, #4]
    return shuffleSeed_;
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	6a1b      	ldr	r3, [r3, #32]
}
 80179c4:	4618      	mov	r0, r3
 80179c6:	370c      	adds	r7, #12
 80179c8:	46bd      	mov	sp, r7
 80179ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179ce:	4770      	bx	lr

080179d0 <_ZNK20CommandLineArguments15getGroupFiltersEv>:

const TestFilter* CommandLineArguments::getGroupFilters() const
{
 80179d0:	b480      	push	{r7}
 80179d2:	b083      	sub	sp, #12
 80179d4:	af00      	add	r7, sp, #0
 80179d6:	6078      	str	r0, [r7, #4]
    return groupFilters_;
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80179dc:	4618      	mov	r0, r3
 80179de:	370c      	adds	r7, #12
 80179e0:	46bd      	mov	sp, r7
 80179e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179e6:	4770      	bx	lr

080179e8 <_ZNK20CommandLineArguments14getNameFiltersEv>:

const TestFilter* CommandLineArguments::getNameFilters() const
{
 80179e8:	b480      	push	{r7}
 80179ea:	b083      	sub	sp, #12
 80179ec:	af00      	add	r7, sp, #0
 80179ee:	6078      	str	r0, [r7, #4]
    return nameFilters_;
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80179f4:	4618      	mov	r0, r3
 80179f6:	370c      	adds	r7, #12
 80179f8:	46bd      	mov	sp, r7
 80179fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179fe:	4770      	bx	lr

08017a00 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>:

void CommandLineArguments::setRepeatCount(int ac, const char *const *av, int& i)
{
 8017a00:	b580      	push	{r7, lr}
 8017a02:	b086      	sub	sp, #24
 8017a04:	af00      	add	r7, sp, #0
 8017a06:	60f8      	str	r0, [r7, #12]
 8017a08:	60b9      	str	r1, [r7, #8]
 8017a0a:	607a      	str	r2, [r7, #4]
 8017a0c:	603b      	str	r3, [r7, #0]
    repeat_ = 0;
 8017a0e:	68fb      	ldr	r3, [r7, #12]
 8017a10:	2200      	movs	r2, #0
 8017a12:	61da      	str	r2, [r3, #28]

    SimpleString repeatParameter(av[i]);
 8017a14:	683b      	ldr	r3, [r7, #0]
 8017a16:	681b      	ldr	r3, [r3, #0]
 8017a18:	009b      	lsls	r3, r3, #2
 8017a1a:	687a      	ldr	r2, [r7, #4]
 8017a1c:	4413      	add	r3, r2
 8017a1e:	681a      	ldr	r2, [r3, #0]
 8017a20:	f107 0310 	add.w	r3, r7, #16
 8017a24:	4611      	mov	r1, r2
 8017a26:	4618      	mov	r0, r3
 8017a28:	f7f7 fa3f 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
    if (repeatParameter.size() > 2) repeat_ = (size_t) (SimpleString::AtoI(av[i] + 2));
 8017a2c:	f107 0310 	add.w	r3, r7, #16
 8017a30:	4618      	mov	r0, r3
 8017a32:	f7f7 fdd1 	bl	800f5d8 <_ZNK12SimpleString4sizeEv>
 8017a36:	4603      	mov	r3, r0
 8017a38:	2b02      	cmp	r3, #2
 8017a3a:	bf8c      	ite	hi
 8017a3c:	2301      	movhi	r3, #1
 8017a3e:	2300      	movls	r3, #0
 8017a40:	b2db      	uxtb	r3, r3
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	d00e      	beq.n	8017a64 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x64>
 8017a46:	683b      	ldr	r3, [r7, #0]
 8017a48:	681b      	ldr	r3, [r3, #0]
 8017a4a:	009b      	lsls	r3, r3, #2
 8017a4c:	687a      	ldr	r2, [r7, #4]
 8017a4e:	4413      	add	r3, r2
 8017a50:	681b      	ldr	r3, [r3, #0]
 8017a52:	3302      	adds	r3, #2
 8017a54:	4618      	mov	r0, r3
 8017a56:	f7f7 f824 	bl	800eaa2 <_ZN12SimpleString4AtoIEPKc>
 8017a5a:	4603      	mov	r3, r0
 8017a5c:	461a      	mov	r2, r3
 8017a5e:	68fb      	ldr	r3, [r7, #12]
 8017a60:	61da      	str	r2, [r3, #28]
 8017a62:	e01c      	b.n	8017a9e <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
    else if (i + 1 < ac) {
 8017a64:	683b      	ldr	r3, [r7, #0]
 8017a66:	681b      	ldr	r3, [r3, #0]
 8017a68:	3301      	adds	r3, #1
 8017a6a:	68ba      	ldr	r2, [r7, #8]
 8017a6c:	429a      	cmp	r2, r3
 8017a6e:	dd16      	ble.n	8017a9e <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
        repeat_ = (size_t) (SimpleString::AtoI(av[i + 1]));
 8017a70:	683b      	ldr	r3, [r7, #0]
 8017a72:	681b      	ldr	r3, [r3, #0]
 8017a74:	3301      	adds	r3, #1
 8017a76:	009b      	lsls	r3, r3, #2
 8017a78:	687a      	ldr	r2, [r7, #4]
 8017a7a:	4413      	add	r3, r2
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	4618      	mov	r0, r3
 8017a80:	f7f7 f80f 	bl	800eaa2 <_ZN12SimpleString4AtoIEPKc>
 8017a84:	4603      	mov	r3, r0
 8017a86:	461a      	mov	r2, r3
 8017a88:	68fb      	ldr	r3, [r7, #12]
 8017a8a:	61da      	str	r2, [r3, #28]
        if (repeat_ != 0) i++;
 8017a8c:	68fb      	ldr	r3, [r7, #12]
 8017a8e:	69db      	ldr	r3, [r3, #28]
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	d004      	beq.n	8017a9e <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
 8017a94:	683b      	ldr	r3, [r7, #0]
 8017a96:	681b      	ldr	r3, [r3, #0]
 8017a98:	1c5a      	adds	r2, r3, #1
 8017a9a:	683b      	ldr	r3, [r7, #0]
 8017a9c:	601a      	str	r2, [r3, #0]
    }

    if (0 == repeat_) repeat_ = 2;
 8017a9e:	68fb      	ldr	r3, [r7, #12]
 8017aa0:	69db      	ldr	r3, [r3, #28]
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d102      	bne.n	8017aac <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0xac>
 8017aa6:	68fb      	ldr	r3, [r7, #12]
 8017aa8:	2202      	movs	r2, #2
 8017aaa:	61da      	str	r2, [r3, #28]
    SimpleString repeatParameter(av[i]);
 8017aac:	f107 0310 	add.w	r3, r7, #16
 8017ab0:	4618      	mov	r0, r3
 8017ab2:	f7f7 fdb2 	bl	800f61a <_ZN12SimpleStringD1Ev>

}
 8017ab6:	bf00      	nop
 8017ab8:	3718      	adds	r7, #24
 8017aba:	46bd      	mov	sp, r7
 8017abc:	bd80      	pop	{r7, pc}
	...

08017ac0 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>:

bool CommandLineArguments::setShuffle(int ac, const char * const *av, int& i)
{
 8017ac0:	b590      	push	{r4, r7, lr}
 8017ac2:	b089      	sub	sp, #36	; 0x24
 8017ac4:	af00      	add	r7, sp, #0
 8017ac6:	60f8      	str	r0, [r7, #12]
 8017ac8:	60b9      	str	r1, [r7, #8]
 8017aca:	607a      	str	r2, [r7, #4]
 8017acc:	603b      	str	r3, [r7, #0]
    shuffling_ = true;
 8017ace:	68fb      	ldr	r3, [r7, #12]
 8017ad0:	2201      	movs	r2, #1
 8017ad2:	75da      	strb	r2, [r3, #23]
    shuffleSeed_ = (unsigned int)GetPlatformSpecificTimeInMillis();
 8017ad4:	4b34      	ldr	r3, [pc, #208]	; (8017ba8 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xe8>)
 8017ad6:	681b      	ldr	r3, [r3, #0]
 8017ad8:	4798      	blx	r3
 8017ada:	4603      	mov	r3, r0
 8017adc:	461a      	mov	r2, r3
 8017ade:	68fb      	ldr	r3, [r7, #12]
 8017ae0:	621a      	str	r2, [r3, #32]
    if (shuffleSeed_ == 0) shuffleSeed_++;
 8017ae2:	68fb      	ldr	r3, [r7, #12]
 8017ae4:	6a1b      	ldr	r3, [r3, #32]
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	d104      	bne.n	8017af4 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x34>
 8017aea:	68fb      	ldr	r3, [r7, #12]
 8017aec:	6a1b      	ldr	r3, [r3, #32]
 8017aee:	1c5a      	adds	r2, r3, #1
 8017af0:	68fb      	ldr	r3, [r7, #12]
 8017af2:	621a      	str	r2, [r3, #32]

    SimpleString shuffleParameter = av[i];
 8017af4:	683b      	ldr	r3, [r7, #0]
 8017af6:	681b      	ldr	r3, [r3, #0]
 8017af8:	009b      	lsls	r3, r3, #2
 8017afa:	687a      	ldr	r2, [r7, #4]
 8017afc:	4413      	add	r3, r2
 8017afe:	681a      	ldr	r2, [r3, #0]
 8017b00:	f107 0314 	add.w	r3, r7, #20
 8017b04:	4611      	mov	r1, r2
 8017b06:	4618      	mov	r0, r3
 8017b08:	f7f7 f9cf 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
    if (shuffleParameter.size() > 2) {
 8017b0c:	f107 0314 	add.w	r3, r7, #20
 8017b10:	4618      	mov	r0, r3
 8017b12:	f7f7 fd61 	bl	800f5d8 <_ZNK12SimpleString4sizeEv>
 8017b16:	4603      	mov	r3, r0
 8017b18:	2b02      	cmp	r3, #2
 8017b1a:	bf8c      	ite	hi
 8017b1c:	2301      	movhi	r3, #1
 8017b1e:	2300      	movls	r3, #0
 8017b20:	b2db      	uxtb	r3, r3
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d010      	beq.n	8017b48 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x88>
        shufflingPreSeeded_ = true;
 8017b26:	68fb      	ldr	r3, [r7, #12]
 8017b28:	2201      	movs	r2, #1
 8017b2a:	761a      	strb	r2, [r3, #24]
        shuffleSeed_ = SimpleString::AtoU(av[i] + 2);
 8017b2c:	683b      	ldr	r3, [r7, #0]
 8017b2e:	681b      	ldr	r3, [r3, #0]
 8017b30:	009b      	lsls	r3, r3, #2
 8017b32:	687a      	ldr	r2, [r7, #4]
 8017b34:	4413      	add	r3, r2
 8017b36:	681b      	ldr	r3, [r3, #0]
 8017b38:	3302      	adds	r3, #2
 8017b3a:	4618      	mov	r0, r3
 8017b3c:	f7f6 ff78 	bl	800ea30 <_ZN12SimpleString4AtoUEPKc>
 8017b40:	4602      	mov	r2, r0
 8017b42:	68fb      	ldr	r3, [r7, #12]
 8017b44:	621a      	str	r2, [r3, #32]
 8017b46:	e01e      	b.n	8017b86 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
    } else if (i + 1 < ac) {
 8017b48:	683b      	ldr	r3, [r7, #0]
 8017b4a:	681b      	ldr	r3, [r3, #0]
 8017b4c:	3301      	adds	r3, #1
 8017b4e:	68ba      	ldr	r2, [r7, #8]
 8017b50:	429a      	cmp	r2, r3
 8017b52:	dd18      	ble.n	8017b86 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        unsigned int parsedParameter = SimpleString::AtoU(av[i + 1]);
 8017b54:	683b      	ldr	r3, [r7, #0]
 8017b56:	681b      	ldr	r3, [r3, #0]
 8017b58:	3301      	adds	r3, #1
 8017b5a:	009b      	lsls	r3, r3, #2
 8017b5c:	687a      	ldr	r2, [r7, #4]
 8017b5e:	4413      	add	r3, r2
 8017b60:	681b      	ldr	r3, [r3, #0]
 8017b62:	4618      	mov	r0, r3
 8017b64:	f7f6 ff64 	bl	800ea30 <_ZN12SimpleString4AtoUEPKc>
 8017b68:	61f8      	str	r0, [r7, #28]
        if (parsedParameter != 0)
 8017b6a:	69fb      	ldr	r3, [r7, #28]
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d00a      	beq.n	8017b86 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        {
            shufflingPreSeeded_ = true;
 8017b70:	68fb      	ldr	r3, [r7, #12]
 8017b72:	2201      	movs	r2, #1
 8017b74:	761a      	strb	r2, [r3, #24]
            shuffleSeed_ = parsedParameter;
 8017b76:	68fb      	ldr	r3, [r7, #12]
 8017b78:	69fa      	ldr	r2, [r7, #28]
 8017b7a:	621a      	str	r2, [r3, #32]
            i++;
 8017b7c:	683b      	ldr	r3, [r7, #0]
 8017b7e:	681b      	ldr	r3, [r3, #0]
 8017b80:	1c5a      	adds	r2, r3, #1
 8017b82:	683b      	ldr	r3, [r7, #0]
 8017b84:	601a      	str	r2, [r3, #0]
        }
    }
    return (shuffleSeed_ != 0);
 8017b86:	68fb      	ldr	r3, [r7, #12]
 8017b88:	6a1b      	ldr	r3, [r3, #32]
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	bf14      	ite	ne
 8017b8e:	2301      	movne	r3, #1
 8017b90:	2300      	moveq	r3, #0
 8017b92:	b2dc      	uxtb	r4, r3
    SimpleString shuffleParameter = av[i];
 8017b94:	f107 0314 	add.w	r3, r7, #20
 8017b98:	4618      	mov	r0, r3
 8017b9a:	f7f7 fd3e 	bl	800f61a <_ZN12SimpleStringD1Ev>
    return (shuffleSeed_ != 0);
 8017b9e:	4623      	mov	r3, r4
}
 8017ba0:	4618      	mov	r0, r3
 8017ba2:	3724      	adds	r7, #36	; 0x24
 8017ba4:	46bd      	mov	sp, r7
 8017ba6:	bd90      	pop	{r4, r7, pc}
 8017ba8:	200000a8 	.word	0x200000a8

08017bac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>:

SimpleString CommandLineArguments::getParameterField(int ac, const char * const *av, int& i, const SimpleString& parameterName)
{
 8017bac:	b580      	push	{r7, lr}
 8017bae:	b088      	sub	sp, #32
 8017bb0:	af00      	add	r7, sp, #0
 8017bb2:	60f8      	str	r0, [r7, #12]
 8017bb4:	60b9      	str	r1, [r7, #8]
 8017bb6:	607a      	str	r2, [r7, #4]
 8017bb8:	603b      	str	r3, [r7, #0]
    size_t parameterLength = parameterName.size();
 8017bba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017bbc:	f7f7 fd0c 	bl	800f5d8 <_ZNK12SimpleString4sizeEv>
 8017bc0:	61f8      	str	r0, [r7, #28]
    SimpleString parameter(av[i]);
 8017bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bc4:	681b      	ldr	r3, [r3, #0]
 8017bc6:	009b      	lsls	r3, r3, #2
 8017bc8:	683a      	ldr	r2, [r7, #0]
 8017bca:	4413      	add	r3, r2
 8017bcc:	681a      	ldr	r2, [r3, #0]
 8017bce:	f107 0314 	add.w	r3, r7, #20
 8017bd2:	4611      	mov	r1, r2
 8017bd4:	4618      	mov	r0, r3
 8017bd6:	f7f7 f968 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
    if (parameter.size() >  parameterLength) return av[i] + parameterLength;
 8017bda:	f107 0314 	add.w	r3, r7, #20
 8017bde:	4618      	mov	r0, r3
 8017be0:	f7f7 fcfa 	bl	800f5d8 <_ZNK12SimpleString4sizeEv>
 8017be4:	4602      	mov	r2, r0
 8017be6:	69fb      	ldr	r3, [r7, #28]
 8017be8:	4293      	cmp	r3, r2
 8017bea:	bf34      	ite	cc
 8017bec:	2301      	movcc	r3, #1
 8017bee:	2300      	movcs	r3, #0
 8017bf0:	b2db      	uxtb	r3, r3
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	d00c      	beq.n	8017c10 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x64>
 8017bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bf8:	681b      	ldr	r3, [r3, #0]
 8017bfa:	009b      	lsls	r3, r3, #2
 8017bfc:	683a      	ldr	r2, [r7, #0]
 8017bfe:	4413      	add	r3, r2
 8017c00:	681a      	ldr	r2, [r3, #0]
 8017c02:	69fb      	ldr	r3, [r7, #28]
 8017c04:	4413      	add	r3, r2
 8017c06:	4619      	mov	r1, r3
 8017c08:	68f8      	ldr	r0, [r7, #12]
 8017c0a:	f7f7 f94e 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8017c0e:	e019      	b.n	8017c44 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    else if (i + 1 < ac) return av[++i];
 8017c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c12:	681b      	ldr	r3, [r3, #0]
 8017c14:	3301      	adds	r3, #1
 8017c16:	687a      	ldr	r2, [r7, #4]
 8017c18:	429a      	cmp	r2, r3
 8017c1a:	dd0f      	ble.n	8017c3c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x90>
 8017c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c1e:	681b      	ldr	r3, [r3, #0]
 8017c20:	1c5a      	adds	r2, r3, #1
 8017c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c24:	601a      	str	r2, [r3, #0]
 8017c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c28:	681b      	ldr	r3, [r3, #0]
 8017c2a:	009b      	lsls	r3, r3, #2
 8017c2c:	683a      	ldr	r2, [r7, #0]
 8017c2e:	4413      	add	r3, r2
 8017c30:	681b      	ldr	r3, [r3, #0]
 8017c32:	4619      	mov	r1, r3
 8017c34:	68f8      	ldr	r0, [r7, #12]
 8017c36:	f7f7 f938 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8017c3a:	e003      	b.n	8017c44 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    return "";
 8017c3c:	4906      	ldr	r1, [pc, #24]	; (8017c58 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0xac>)
 8017c3e:	68f8      	ldr	r0, [r7, #12]
 8017c40:	f7f7 f933 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
    SimpleString parameter(av[i]);
 8017c44:	f107 0314 	add.w	r3, r7, #20
 8017c48:	4618      	mov	r0, r3
 8017c4a:	f7f7 fce6 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 8017c4e:	68f8      	ldr	r0, [r7, #12]
 8017c50:	3720      	adds	r7, #32
 8017c52:	46bd      	mov	sp, r7
 8017c54:	bd80      	pop	{r7, pc}
 8017c56:	bf00      	nop
 8017c58:	08027d18 	.word	0x08027d18

08017c5c <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>:

void CommandLineArguments::addGroupFilter(int ac, const char *const *av, int& i)
{
 8017c5c:	b5b0      	push	{r4, r5, r7, lr}
 8017c5e:	b08c      	sub	sp, #48	; 0x30
 8017c60:	af02      	add	r7, sp, #8
 8017c62:	60f8      	str	r0, [r7, #12]
 8017c64:	60b9      	str	r1, [r7, #8]
 8017c66:	607a      	str	r2, [r7, #4]
 8017c68:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-g"));
 8017c6a:	f107 031c 	add.w	r3, r7, #28
 8017c6e:	491a      	ldr	r1, [pc, #104]	; (8017cd8 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x7c>)
 8017c70:	4618      	mov	r0, r3
 8017c72:	f7f7 f91a 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8017c76:	f107 0014 	add.w	r0, r7, #20
 8017c7a:	f107 031c 	add.w	r3, r7, #28
 8017c7e:	9301      	str	r3, [sp, #4]
 8017c80:	683b      	ldr	r3, [r7, #0]
 8017c82:	9300      	str	r3, [sp, #0]
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	68ba      	ldr	r2, [r7, #8]
 8017c88:	68f9      	ldr	r1, [r7, #12]
 8017c8a:	f7ff ff8f 	bl	8017bac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8017c8e:	f107 0514 	add.w	r5, r7, #20
 8017c92:	f44f 7289 	mov.w	r2, #274	; 0x112
 8017c96:	4911      	ldr	r1, [pc, #68]	; (8017cdc <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x80>)
 8017c98:	2010      	movs	r0, #16
 8017c9a:	f7f4 fd43 	bl	800c724 <_ZnwjPKci>
 8017c9e:	4604      	mov	r4, r0
 8017ca0:	4629      	mov	r1, r5
 8017ca2:	4620      	mov	r0, r4
 8017ca4:	f009 ff3e 	bl	8021b24 <_ZN10TestFilterC1ERK12SimpleString>
 8017ca8:	627c      	str	r4, [r7, #36]	; 0x24
 8017caa:	f107 0314 	add.w	r3, r7, #20
 8017cae:	4618      	mov	r0, r3
 8017cb0:	f7f7 fcb3 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8017cb4:	f107 031c 	add.w	r3, r7, #28
 8017cb8:	4618      	mov	r0, r3
 8017cba:	f7f7 fcae 	bl	800f61a <_ZN12SimpleStringD1Ev>
    groupFilters_ = groupFilter->add(groupFilters_);
 8017cbe:	68fb      	ldr	r3, [r7, #12]
 8017cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017cc2:	4619      	mov	r1, r3
 8017cc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017cc6:	f009 ff4d 	bl	8021b64 <_ZN10TestFilter3addEPS_>
 8017cca:	4602      	mov	r2, r0
 8017ccc:	68fb      	ldr	r3, [r7, #12]
 8017cce:	625a      	str	r2, [r3, #36]	; 0x24
}
 8017cd0:	bf00      	nop
 8017cd2:	3728      	adds	r7, #40	; 0x28
 8017cd4:	46bd      	mov	sp, r7
 8017cd6:	bdb0      	pop	{r4, r5, r7, pc}
 8017cd8:	08027d4c 	.word	0x08027d4c
 8017cdc:	080286e0 	.word	0x080286e0

08017ce0 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>:

bool CommandLineArguments::addGroupDotNameFilter(int ac, const char *const *av, int& i)
{
 8017ce0:	b5b0      	push	{r4, r5, r7, lr}
 8017ce2:	b092      	sub	sp, #72	; 0x48
 8017ce4:	af02      	add	r7, sp, #8
 8017ce6:	60f8      	str	r0, [r7, #12]
 8017ce8:	60b9      	str	r1, [r7, #8]
 8017cea:	607a      	str	r2, [r7, #4]
 8017cec:	603b      	str	r3, [r7, #0]
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 8017cee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017cf2:	494e      	ldr	r1, [pc, #312]	; (8017e2c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x14c>)
 8017cf4:	4618      	mov	r0, r3
 8017cf6:	f7f7 f8d8 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8017cfa:	f107 0020 	add.w	r0, r7, #32
 8017cfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017d02:	9301      	str	r3, [sp, #4]
 8017d04:	683b      	ldr	r3, [r7, #0]
 8017d06:	9300      	str	r3, [sp, #0]
 8017d08:	687b      	ldr	r3, [r7, #4]
 8017d0a:	68ba      	ldr	r2, [r7, #8]
 8017d0c:	68f9      	ldr	r1, [r7, #12]
 8017d0e:	f7ff ff4d 	bl	8017bac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8017d12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017d16:	4618      	mov	r0, r3
 8017d18:	f7f7 fc7f 	bl	800f61a <_ZN12SimpleStringD1Ev>
    SimpleStringCollection collection;
 8017d1c:	f107 0310 	add.w	r3, r7, #16
 8017d20:	4618      	mov	r0, r3
 8017d22:	f7f8 fb8f 	bl	8010444 <_ZN22SimpleStringCollectionC1Ev>
    groupDotName.split(".", collection);
 8017d26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017d2a:	4941      	ldr	r1, [pc, #260]	; (8017e30 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x150>)
 8017d2c:	4618      	mov	r0, r3
 8017d2e:	f7f7 f8bc 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8017d32:	f107 0210 	add.w	r2, r7, #16
 8017d36:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8017d3a:	f107 0320 	add.w	r3, r7, #32
 8017d3e:	4618      	mov	r0, r3
 8017d40:	f7f7 fa1f 	bl	800f182 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>
 8017d44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017d48:	4618      	mov	r0, r3
 8017d4a:	f7f7 fc66 	bl	800f61a <_ZN12SimpleStringD1Ev>

    if (collection.size() != 2) return false;
 8017d4e:	f107 0310 	add.w	r3, r7, #16
 8017d52:	4618      	mov	r0, r3
 8017d54:	f7f8 fc1b 	bl	801058e <_ZNK22SimpleStringCollection4sizeEv>
 8017d58:	4603      	mov	r3, r0
 8017d5a:	2b02      	cmp	r3, #2
 8017d5c:	bf14      	ite	ne
 8017d5e:	2301      	movne	r3, #1
 8017d60:	2300      	moveq	r3, #0
 8017d62:	b2db      	uxtb	r3, r3
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d001      	beq.n	8017d6c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x8c>
 8017d68:	2400      	movs	r4, #0
 8017d6a:	e04f      	b.n	8017e0c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x12c>

    groupFilters_ = (new TestFilter(collection[0].subString(0, collection[0].size()-1)))->add(groupFilters_);
 8017d6c:	f107 0310 	add.w	r3, r7, #16
 8017d70:	2100      	movs	r1, #0
 8017d72:	4618      	mov	r0, r3
 8017d74:	f7f8 fc18 	bl	80105a8 <_ZN22SimpleStringCollectionixEj>
 8017d78:	4604      	mov	r4, r0
 8017d7a:	f107 0310 	add.w	r3, r7, #16
 8017d7e:	2100      	movs	r1, #0
 8017d80:	4618      	mov	r0, r3
 8017d82:	f7f8 fc11 	bl	80105a8 <_ZN22SimpleStringCollectionixEj>
 8017d86:	4603      	mov	r3, r0
 8017d88:	4618      	mov	r0, r3
 8017d8a:	f7f7 fc25 	bl	800f5d8 <_ZNK12SimpleString4sizeEv>
 8017d8e:	4603      	mov	r3, r0
 8017d90:	3b01      	subs	r3, #1
 8017d92:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8017d96:	2200      	movs	r2, #0
 8017d98:	4621      	mov	r1, r4
 8017d9a:	f7f7 fd47 	bl	800f82c <_ZNK12SimpleString9subStringEjj>
 8017d9e:	f107 0538 	add.w	r5, r7, #56	; 0x38
 8017da2:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8017da6:	4923      	ldr	r1, [pc, #140]	; (8017e34 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8017da8:	2010      	movs	r0, #16
 8017daa:	f7f4 fcbb 	bl	800c724 <_ZnwjPKci>
 8017dae:	4604      	mov	r4, r0
 8017db0:	4629      	mov	r1, r5
 8017db2:	4620      	mov	r0, r4
 8017db4:	f009 feb6 	bl	8021b24 <_ZN10TestFilterC1ERK12SimpleString>
 8017db8:	68fb      	ldr	r3, [r7, #12]
 8017dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017dbc:	4619      	mov	r1, r3
 8017dbe:	4620      	mov	r0, r4
 8017dc0:	f009 fed0 	bl	8021b64 <_ZN10TestFilter3addEPS_>
 8017dc4:	4602      	mov	r2, r0
 8017dc6:	68fb      	ldr	r3, [r7, #12]
 8017dc8:	625a      	str	r2, [r3, #36]	; 0x24
 8017dca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8017dce:	4618      	mov	r0, r3
 8017dd0:	f7f7 fc23 	bl	800f61a <_ZN12SimpleStringD1Ev>
    nameFilters_ = (new TestFilter(collection[1]))->add(nameFilters_);
 8017dd4:	f107 0310 	add.w	r3, r7, #16
 8017dd8:	2101      	movs	r1, #1
 8017dda:	4618      	mov	r0, r3
 8017ddc:	f7f8 fbe4 	bl	80105a8 <_ZN22SimpleStringCollectionixEj>
 8017de0:	4605      	mov	r5, r0
 8017de2:	f240 121f 	movw	r2, #287	; 0x11f
 8017de6:	4913      	ldr	r1, [pc, #76]	; (8017e34 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 8017de8:	2010      	movs	r0, #16
 8017dea:	f7f4 fc9b 	bl	800c724 <_ZnwjPKci>
 8017dee:	4604      	mov	r4, r0
 8017df0:	4629      	mov	r1, r5
 8017df2:	4620      	mov	r0, r4
 8017df4:	f009 fe96 	bl	8021b24 <_ZN10TestFilterC1ERK12SimpleString>
 8017df8:	68fb      	ldr	r3, [r7, #12]
 8017dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017dfc:	4619      	mov	r1, r3
 8017dfe:	4620      	mov	r0, r4
 8017e00:	f009 feb0 	bl	8021b64 <_ZN10TestFilter3addEPS_>
 8017e04:	4602      	mov	r2, r0
 8017e06:	68fb      	ldr	r3, [r7, #12]
 8017e08:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 8017e0a:	2401      	movs	r4, #1
    SimpleStringCollection collection;
 8017e0c:	f107 0310 	add.w	r3, r7, #16
 8017e10:	4618      	mov	r0, r3
 8017e12:	f7f8 fb8b 	bl	801052c <_ZN22SimpleStringCollectionD1Ev>
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 8017e16:	f107 0320 	add.w	r3, r7, #32
 8017e1a:	4618      	mov	r0, r3
 8017e1c:	f7f7 fbfd 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8017e20:	4623      	mov	r3, r4
}
 8017e22:	4618      	mov	r0, r3
 8017e24:	3740      	adds	r7, #64	; 0x40
 8017e26:	46bd      	mov	sp, r7
 8017e28:	bdb0      	pop	{r4, r5, r7, pc}
 8017e2a:	bf00      	nop
 8017e2c:	08027d50 	.word	0x08027d50
 8017e30:	08028700 	.word	0x08028700
 8017e34:	080286e0 	.word	0x080286e0

08017e38 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8017e38:	b5b0      	push	{r4, r5, r7, lr}
 8017e3a:	b08c      	sub	sp, #48	; 0x30
 8017e3c:	af02      	add	r7, sp, #8
 8017e3e:	60f8      	str	r0, [r7, #12]
 8017e40:	60b9      	str	r1, [r7, #8]
 8017e42:	607a      	str	r2, [r7, #4]
 8017e44:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-sg"));
 8017e46:	f107 031c 	add.w	r3, r7, #28
 8017e4a:	491c      	ldr	r1, [pc, #112]	; (8017ebc <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x84>)
 8017e4c:	4618      	mov	r0, r3
 8017e4e:	f7f7 f82c 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8017e52:	f107 0014 	add.w	r0, r7, #20
 8017e56:	f107 031c 	add.w	r3, r7, #28
 8017e5a:	9301      	str	r3, [sp, #4]
 8017e5c:	683b      	ldr	r3, [r7, #0]
 8017e5e:	9300      	str	r3, [sp, #0]
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	68ba      	ldr	r2, [r7, #8]
 8017e64:	68f9      	ldr	r1, [r7, #12]
 8017e66:	f7ff fea1 	bl	8017bac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8017e6a:	f107 0514 	add.w	r5, r7, #20
 8017e6e:	f240 1225 	movw	r2, #293	; 0x125
 8017e72:	4913      	ldr	r1, [pc, #76]	; (8017ec0 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x88>)
 8017e74:	2010      	movs	r0, #16
 8017e76:	f7f4 fc55 	bl	800c724 <_ZnwjPKci>
 8017e7a:	4604      	mov	r4, r0
 8017e7c:	4629      	mov	r1, r5
 8017e7e:	4620      	mov	r0, r4
 8017e80:	f009 fe50 	bl	8021b24 <_ZN10TestFilterC1ERK12SimpleString>
 8017e84:	627c      	str	r4, [r7, #36]	; 0x24
 8017e86:	f107 0314 	add.w	r3, r7, #20
 8017e8a:	4618      	mov	r0, r3
 8017e8c:	f7f7 fbc5 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8017e90:	f107 031c 	add.w	r3, r7, #28
 8017e94:	4618      	mov	r0, r3
 8017e96:	f7f7 fbc0 	bl	800f61a <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8017e9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017e9c:	f009 fe7d 	bl	8021b9a <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8017ea0:	68fb      	ldr	r3, [r7, #12]
 8017ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ea4:	4619      	mov	r1, r3
 8017ea6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017ea8:	f009 fe5c 	bl	8021b64 <_ZN10TestFilter3addEPS_>
 8017eac:	4602      	mov	r2, r0
 8017eae:	68fb      	ldr	r3, [r7, #12]
 8017eb0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8017eb2:	bf00      	nop
 8017eb4:	3728      	adds	r7, #40	; 0x28
 8017eb6:	46bd      	mov	sp, r7
 8017eb8:	bdb0      	pop	{r4, r5, r7, pc}
 8017eba:	bf00      	nop
 8017ebc:	08027d54 	.word	0x08027d54
 8017ec0:	080286e0 	.word	0x080286e0

08017ec4 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeGroupFilter(int ac, const char *const *av, int& i)
{
 8017ec4:	b5b0      	push	{r4, r5, r7, lr}
 8017ec6:	b08c      	sub	sp, #48	; 0x30
 8017ec8:	af02      	add	r7, sp, #8
 8017eca:	60f8      	str	r0, [r7, #12]
 8017ecc:	60b9      	str	r1, [r7, #8]
 8017ece:	607a      	str	r2, [r7, #4]
 8017ed0:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xg"));
 8017ed2:	f107 031c 	add.w	r3, r7, #28
 8017ed6:	491c      	ldr	r1, [pc, #112]	; (8017f48 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x84>)
 8017ed8:	4618      	mov	r0, r3
 8017eda:	f7f6 ffe6 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8017ede:	f107 0014 	add.w	r0, r7, #20
 8017ee2:	f107 031c 	add.w	r3, r7, #28
 8017ee6:	9301      	str	r3, [sp, #4]
 8017ee8:	683b      	ldr	r3, [r7, #0]
 8017eea:	9300      	str	r3, [sp, #0]
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	68ba      	ldr	r2, [r7, #8]
 8017ef0:	68f9      	ldr	r1, [r7, #12]
 8017ef2:	f7ff fe5b 	bl	8017bac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8017ef6:	f107 0514 	add.w	r5, r7, #20
 8017efa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8017efe:	4913      	ldr	r1, [pc, #76]	; (8017f4c <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x88>)
 8017f00:	2010      	movs	r0, #16
 8017f02:	f7f4 fc0f 	bl	800c724 <_ZnwjPKci>
 8017f06:	4604      	mov	r4, r0
 8017f08:	4629      	mov	r1, r5
 8017f0a:	4620      	mov	r0, r4
 8017f0c:	f009 fe0a 	bl	8021b24 <_ZN10TestFilterC1ERK12SimpleString>
 8017f10:	627c      	str	r4, [r7, #36]	; 0x24
 8017f12:	f107 0314 	add.w	r3, r7, #20
 8017f16:	4618      	mov	r0, r3
 8017f18:	f7f7 fb7f 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8017f1c:	f107 031c 	add.w	r3, r7, #28
 8017f20:	4618      	mov	r0, r3
 8017f22:	f7f7 fb7a 	bl	800f61a <_ZN12SimpleStringD1Ev>
    groupFilter->invertMatching();
 8017f26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017f28:	f009 fe44 	bl	8021bb4 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8017f2c:	68fb      	ldr	r3, [r7, #12]
 8017f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f30:	4619      	mov	r1, r3
 8017f32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017f34:	f009 fe16 	bl	8021b64 <_ZN10TestFilter3addEPS_>
 8017f38:	4602      	mov	r2, r0
 8017f3a:	68fb      	ldr	r3, [r7, #12]
 8017f3c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8017f3e:	bf00      	nop
 8017f40:	3728      	adds	r7, #40	; 0x28
 8017f42:	46bd      	mov	sp, r7
 8017f44:	bdb0      	pop	{r4, r5, r7, pc}
 8017f46:	bf00      	nop
 8017f48:	08027d58 	.word	0x08027d58
 8017f4c:	080286e0 	.word	0x080286e0

08017f50 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8017f50:	b5b0      	push	{r4, r5, r7, lr}
 8017f52:	b08c      	sub	sp, #48	; 0x30
 8017f54:	af02      	add	r7, sp, #8
 8017f56:	60f8      	str	r0, [r7, #12]
 8017f58:	60b9      	str	r1, [r7, #8]
 8017f5a:	607a      	str	r2, [r7, #4]
 8017f5c:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xsg"));
 8017f5e:	f107 031c 	add.w	r3, r7, #28
 8017f62:	491d      	ldr	r1, [pc, #116]	; (8017fd8 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x88>)
 8017f64:	4618      	mov	r0, r3
 8017f66:	f7f6 ffa0 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8017f6a:	f107 0014 	add.w	r0, r7, #20
 8017f6e:	f107 031c 	add.w	r3, r7, #28
 8017f72:	9301      	str	r3, [sp, #4]
 8017f74:	683b      	ldr	r3, [r7, #0]
 8017f76:	9300      	str	r3, [sp, #0]
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	68ba      	ldr	r2, [r7, #8]
 8017f7c:	68f9      	ldr	r1, [r7, #12]
 8017f7e:	f7ff fe15 	bl	8017bac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8017f82:	f107 0514 	add.w	r5, r7, #20
 8017f86:	f240 1233 	movw	r2, #307	; 0x133
 8017f8a:	4914      	ldr	r1, [pc, #80]	; (8017fdc <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x8c>)
 8017f8c:	2010      	movs	r0, #16
 8017f8e:	f7f4 fbc9 	bl	800c724 <_ZnwjPKci>
 8017f92:	4604      	mov	r4, r0
 8017f94:	4629      	mov	r1, r5
 8017f96:	4620      	mov	r0, r4
 8017f98:	f009 fdc4 	bl	8021b24 <_ZN10TestFilterC1ERK12SimpleString>
 8017f9c:	627c      	str	r4, [r7, #36]	; 0x24
 8017f9e:	f107 0314 	add.w	r3, r7, #20
 8017fa2:	4618      	mov	r0, r3
 8017fa4:	f7f7 fb39 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8017fa8:	f107 031c 	add.w	r3, r7, #28
 8017fac:	4618      	mov	r0, r3
 8017fae:	f7f7 fb34 	bl	800f61a <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 8017fb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017fb4:	f009 fdf1 	bl	8021b9a <_ZN10TestFilter14strictMatchingEv>
    groupFilter->invertMatching();
 8017fb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017fba:	f009 fdfb 	bl	8021bb4 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8017fbe:	68fb      	ldr	r3, [r7, #12]
 8017fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017fc2:	4619      	mov	r1, r3
 8017fc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017fc6:	f009 fdcd 	bl	8021b64 <_ZN10TestFilter3addEPS_>
 8017fca:	4602      	mov	r2, r0
 8017fcc:	68fb      	ldr	r3, [r7, #12]
 8017fce:	625a      	str	r2, [r3, #36]	; 0x24
}
 8017fd0:	bf00      	nop
 8017fd2:	3728      	adds	r7, #40	; 0x28
 8017fd4:	46bd      	mov	sp, r7
 8017fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8017fd8:	08027d5c 	.word	0x08027d5c
 8017fdc:	080286e0 	.word	0x080286e0

08017fe0 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>:

void CommandLineArguments::addNameFilter(int ac, const char *const *av, int& i)
{
 8017fe0:	b5b0      	push	{r4, r5, r7, lr}
 8017fe2:	b08c      	sub	sp, #48	; 0x30
 8017fe4:	af02      	add	r7, sp, #8
 8017fe6:	60f8      	str	r0, [r7, #12]
 8017fe8:	60b9      	str	r1, [r7, #8]
 8017fea:	607a      	str	r2, [r7, #4]
 8017fec:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, i, "-n"));
 8017fee:	f107 031c 	add.w	r3, r7, #28
 8017ff2:	491a      	ldr	r1, [pc, #104]	; (801805c <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x7c>)
 8017ff4:	4618      	mov	r0, r3
 8017ff6:	f7f6 ff58 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8017ffa:	f107 0014 	add.w	r0, r7, #20
 8017ffe:	f107 031c 	add.w	r3, r7, #28
 8018002:	9301      	str	r3, [sp, #4]
 8018004:	683b      	ldr	r3, [r7, #0]
 8018006:	9300      	str	r3, [sp, #0]
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	68ba      	ldr	r2, [r7, #8]
 801800c:	68f9      	ldr	r1, [r7, #12]
 801800e:	f7ff fdcd 	bl	8017bac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8018012:	f107 0514 	add.w	r5, r7, #20
 8018016:	f240 123b 	movw	r2, #315	; 0x13b
 801801a:	4911      	ldr	r1, [pc, #68]	; (8018060 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x80>)
 801801c:	2010      	movs	r0, #16
 801801e:	f7f4 fb81 	bl	800c724 <_ZnwjPKci>
 8018022:	4604      	mov	r4, r0
 8018024:	4629      	mov	r1, r5
 8018026:	4620      	mov	r0, r4
 8018028:	f009 fd7c 	bl	8021b24 <_ZN10TestFilterC1ERK12SimpleString>
 801802c:	627c      	str	r4, [r7, #36]	; 0x24
 801802e:	f107 0314 	add.w	r3, r7, #20
 8018032:	4618      	mov	r0, r3
 8018034:	f7f7 faf1 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8018038:	f107 031c 	add.w	r3, r7, #28
 801803c:	4618      	mov	r0, r3
 801803e:	f7f7 faec 	bl	800f61a <_ZN12SimpleStringD1Ev>
    nameFilters_ = nameFilter->add(nameFilters_);
 8018042:	68fb      	ldr	r3, [r7, #12]
 8018044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018046:	4619      	mov	r1, r3
 8018048:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801804a:	f009 fd8b 	bl	8021b64 <_ZN10TestFilter3addEPS_>
 801804e:	4602      	mov	r2, r0
 8018050:	68fb      	ldr	r3, [r7, #12]
 8018052:	629a      	str	r2, [r3, #40]	; 0x28
}
 8018054:	bf00      	nop
 8018056:	3728      	adds	r7, #40	; 0x28
 8018058:	46bd      	mov	sp, r7
 801805a:	bdb0      	pop	{r4, r5, r7, pc}
 801805c:	08027d64 	.word	0x08027d64
 8018060:	080286e0 	.word	0x080286e0

08018064 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addStrictNameFilter(int ac, const char *const *av, int& index)
{
 8018064:	b5b0      	push	{r4, r5, r7, lr}
 8018066:	b08c      	sub	sp, #48	; 0x30
 8018068:	af02      	add	r7, sp, #8
 801806a:	60f8      	str	r0, [r7, #12]
 801806c:	60b9      	str	r1, [r7, #8]
 801806e:	607a      	str	r2, [r7, #4]
 8018070:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-sn"));
 8018072:	f107 031c 	add.w	r3, r7, #28
 8018076:	491c      	ldr	r1, [pc, #112]	; (80180e8 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x84>)
 8018078:	4618      	mov	r0, r3
 801807a:	f7f6 ff16 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801807e:	f107 0014 	add.w	r0, r7, #20
 8018082:	f107 031c 	add.w	r3, r7, #28
 8018086:	9301      	str	r3, [sp, #4]
 8018088:	683b      	ldr	r3, [r7, #0]
 801808a:	9300      	str	r3, [sp, #0]
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	68ba      	ldr	r2, [r7, #8]
 8018090:	68f9      	ldr	r1, [r7, #12]
 8018092:	f7ff fd8b 	bl	8017bac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8018096:	f107 0514 	add.w	r5, r7, #20
 801809a:	f240 1241 	movw	r2, #321	; 0x141
 801809e:	4913      	ldr	r1, [pc, #76]	; (80180ec <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x88>)
 80180a0:	2010      	movs	r0, #16
 80180a2:	f7f4 fb3f 	bl	800c724 <_ZnwjPKci>
 80180a6:	4604      	mov	r4, r0
 80180a8:	4629      	mov	r1, r5
 80180aa:	4620      	mov	r0, r4
 80180ac:	f009 fd3a 	bl	8021b24 <_ZN10TestFilterC1ERK12SimpleString>
 80180b0:	627c      	str	r4, [r7, #36]	; 0x24
 80180b2:	f107 0314 	add.w	r3, r7, #20
 80180b6:	4618      	mov	r0, r3
 80180b8:	f7f7 faaf 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80180bc:	f107 031c 	add.w	r3, r7, #28
 80180c0:	4618      	mov	r0, r3
 80180c2:	f7f7 faaa 	bl	800f61a <_ZN12SimpleStringD1Ev>
    nameFilter->strictMatching();
 80180c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80180c8:	f009 fd67 	bl	8021b9a <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 80180cc:	68fb      	ldr	r3, [r7, #12]
 80180ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80180d0:	4619      	mov	r1, r3
 80180d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80180d4:	f009 fd46 	bl	8021b64 <_ZN10TestFilter3addEPS_>
 80180d8:	4602      	mov	r2, r0
 80180da:	68fb      	ldr	r3, [r7, #12]
 80180dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80180de:	bf00      	nop
 80180e0:	3728      	adds	r7, #40	; 0x28
 80180e2:	46bd      	mov	sp, r7
 80180e4:	bdb0      	pop	{r4, r5, r7, pc}
 80180e6:	bf00      	nop
 80180e8:	08027d68 	.word	0x08027d68
 80180ec:	080286e0 	.word	0x080286e0

080180f0 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeNameFilter(int ac, const char *const *av, int& index)
{
 80180f0:	b5b0      	push	{r4, r5, r7, lr}
 80180f2:	b08c      	sub	sp, #48	; 0x30
 80180f4:	af02      	add	r7, sp, #8
 80180f6:	60f8      	str	r0, [r7, #12]
 80180f8:	60b9      	str	r1, [r7, #8]
 80180fa:	607a      	str	r2, [r7, #4]
 80180fc:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xn"));
 80180fe:	f107 031c 	add.w	r3, r7, #28
 8018102:	491c      	ldr	r1, [pc, #112]	; (8018174 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x84>)
 8018104:	4618      	mov	r0, r3
 8018106:	f7f6 fed0 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801810a:	f107 0014 	add.w	r0, r7, #20
 801810e:	f107 031c 	add.w	r3, r7, #28
 8018112:	9301      	str	r3, [sp, #4]
 8018114:	683b      	ldr	r3, [r7, #0]
 8018116:	9300      	str	r3, [sp, #0]
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	68ba      	ldr	r2, [r7, #8]
 801811c:	68f9      	ldr	r1, [r7, #12]
 801811e:	f7ff fd45 	bl	8017bac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8018122:	f107 0514 	add.w	r5, r7, #20
 8018126:	f44f 72a4 	mov.w	r2, #328	; 0x148
 801812a:	4913      	ldr	r1, [pc, #76]	; (8018178 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x88>)
 801812c:	2010      	movs	r0, #16
 801812e:	f7f4 faf9 	bl	800c724 <_ZnwjPKci>
 8018132:	4604      	mov	r4, r0
 8018134:	4629      	mov	r1, r5
 8018136:	4620      	mov	r0, r4
 8018138:	f009 fcf4 	bl	8021b24 <_ZN10TestFilterC1ERK12SimpleString>
 801813c:	627c      	str	r4, [r7, #36]	; 0x24
 801813e:	f107 0314 	add.w	r3, r7, #20
 8018142:	4618      	mov	r0, r3
 8018144:	f7f7 fa69 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8018148:	f107 031c 	add.w	r3, r7, #28
 801814c:	4618      	mov	r0, r3
 801814e:	f7f7 fa64 	bl	800f61a <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 8018152:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018154:	f009 fd2e 	bl	8021bb4 <_ZN10TestFilter14invertMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8018158:	68fb      	ldr	r3, [r7, #12]
 801815a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801815c:	4619      	mov	r1, r3
 801815e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018160:	f009 fd00 	bl	8021b64 <_ZN10TestFilter3addEPS_>
 8018164:	4602      	mov	r2, r0
 8018166:	68fb      	ldr	r3, [r7, #12]
 8018168:	629a      	str	r2, [r3, #40]	; 0x28
}
 801816a:	bf00      	nop
 801816c:	3728      	adds	r7, #40	; 0x28
 801816e:	46bd      	mov	sp, r7
 8018170:	bdb0      	pop	{r4, r5, r7, pc}
 8018172:	bf00      	nop
 8018174:	08027d6c 	.word	0x08027d6c
 8018178:	080286e0 	.word	0x080286e0

0801817c <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictNameFilter(int ac, const char *const *av, int& index)
{
 801817c:	b5b0      	push	{r4, r5, r7, lr}
 801817e:	b08c      	sub	sp, #48	; 0x30
 8018180:	af02      	add	r7, sp, #8
 8018182:	60f8      	str	r0, [r7, #12]
 8018184:	60b9      	str	r1, [r7, #8]
 8018186:	607a      	str	r2, [r7, #4]
 8018188:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xsn"));
 801818a:	f107 031c 	add.w	r3, r7, #28
 801818e:	491d      	ldr	r1, [pc, #116]	; (8018204 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x88>)
 8018190:	4618      	mov	r0, r3
 8018192:	f7f6 fe8a 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8018196:	f107 0014 	add.w	r0, r7, #20
 801819a:	f107 031c 	add.w	r3, r7, #28
 801819e:	9301      	str	r3, [sp, #4]
 80181a0:	683b      	ldr	r3, [r7, #0]
 80181a2:	9300      	str	r3, [sp, #0]
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	68ba      	ldr	r2, [r7, #8]
 80181a8:	68f9      	ldr	r1, [r7, #12]
 80181aa:	f7ff fcff 	bl	8017bac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80181ae:	f107 0514 	add.w	r5, r7, #20
 80181b2:	f240 124f 	movw	r2, #335	; 0x14f
 80181b6:	4914      	ldr	r1, [pc, #80]	; (8018208 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x8c>)
 80181b8:	2010      	movs	r0, #16
 80181ba:	f7f4 fab3 	bl	800c724 <_ZnwjPKci>
 80181be:	4604      	mov	r4, r0
 80181c0:	4629      	mov	r1, r5
 80181c2:	4620      	mov	r0, r4
 80181c4:	f009 fcae 	bl	8021b24 <_ZN10TestFilterC1ERK12SimpleString>
 80181c8:	627c      	str	r4, [r7, #36]	; 0x24
 80181ca:	f107 0314 	add.w	r3, r7, #20
 80181ce:	4618      	mov	r0, r3
 80181d0:	f7f7 fa23 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80181d4:	f107 031c 	add.w	r3, r7, #28
 80181d8:	4618      	mov	r0, r3
 80181da:	f7f7 fa1e 	bl	800f61a <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 80181de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80181e0:	f009 fce8 	bl	8021bb4 <_ZN10TestFilter14invertMatchingEv>
    nameFilter->strictMatching();
 80181e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80181e6:	f009 fcd8 	bl	8021b9a <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 80181ea:	68fb      	ldr	r3, [r7, #12]
 80181ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80181ee:	4619      	mov	r1, r3
 80181f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80181f2:	f009 fcb7 	bl	8021b64 <_ZN10TestFilter3addEPS_>
 80181f6:	4602      	mov	r2, r0
 80181f8:	68fb      	ldr	r3, [r7, #12]
 80181fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80181fc:	bf00      	nop
 80181fe:	3728      	adds	r7, #40	; 0x28
 8018200:	46bd      	mov	sp, r7
 8018202:	bdb0      	pop	{r4, r5, r7, pc}
 8018204:	08027d70 	.word	0x08027d70
 8018208:	080286e0 	.word	0x080286e0

0801820c <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>:

void CommandLineArguments::addTestToRunBasedOnVerboseOutput(int ac, const char *const *av, int& index, const char* parameterName)
{
 801820c:	b5b0      	push	{r4, r5, r7, lr}
 801820e:	b092      	sub	sp, #72	; 0x48
 8018210:	af02      	add	r7, sp, #8
 8018212:	60f8      	str	r0, [r7, #12]
 8018214:	60b9      	str	r1, [r7, #8]
 8018216:	607a      	str	r2, [r7, #4]
 8018218:	603b      	str	r3, [r7, #0]
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 801821a:	f107 0320 	add.w	r3, r7, #32
 801821e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018220:	4618      	mov	r0, r3
 8018222:	f7f6 fe42 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8018226:	f107 0018 	add.w	r0, r7, #24
 801822a:	f107 0320 	add.w	r3, r7, #32
 801822e:	9301      	str	r3, [sp, #4]
 8018230:	683b      	ldr	r3, [r7, #0]
 8018232:	9300      	str	r3, [sp, #0]
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	68ba      	ldr	r2, [r7, #8]
 8018238:	68f9      	ldr	r1, [r7, #12]
 801823a:	f7ff fcb7 	bl	8017bac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801823e:	f107 0320 	add.w	r3, r7, #32
 8018242:	4618      	mov	r0, r3
 8018244:	f7f7 f9e9 	bl	800f61a <_ZN12SimpleStringD1Ev>
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8018248:	f107 0010 	add.w	r0, r7, #16
 801824c:	f107 0118 	add.w	r1, r7, #24
 8018250:	2329      	movs	r3, #41	; 0x29
 8018252:	222c      	movs	r2, #44	; 0x2c
 8018254:	f7f7 fb92 	bl	800f97c <_ZNK12SimpleString17subStringFromTillEcc>
    testname = testname.subString(2);
 8018258:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801825c:	f107 0110 	add.w	r1, r7, #16
 8018260:	2202      	movs	r2, #2
 8018262:	4618      	mov	r0, r3
 8018264:	f7f7 fb2c 	bl	800f8c0 <_ZNK12SimpleString9subStringEj>
 8018268:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801826c:	f107 0310 	add.w	r3, r7, #16
 8018270:	4611      	mov	r1, r2
 8018272:	4618      	mov	r0, r3
 8018274:	f7f6 fe85 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 8018278:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801827c:	4618      	mov	r0, r3
 801827e:	f7f7 f9cc 	bl	800f61a <_ZN12SimpleStringD1Ev>
    TestFilter* namefilter = new TestFilter(testname);
 8018282:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8018286:	492a      	ldr	r1, [pc, #168]	; (8018330 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 8018288:	2010      	movs	r0, #16
 801828a:	f7f4 fa4b 	bl	800c724 <_ZnwjPKci>
 801828e:	4604      	mov	r4, r0
 8018290:	f107 0310 	add.w	r3, r7, #16
 8018294:	4619      	mov	r1, r3
 8018296:	4620      	mov	r0, r4
 8018298:	f009 fc44 	bl	8021b24 <_ZN10TestFilterC1ERK12SimpleString>
 801829c:	63fc      	str	r4, [r7, #60]	; 0x3c
    TestFilter* groupfilter = new TestFilter(wholename.subStringFromTill(wholename.at(0), ','));
 801829e:	f107 0318 	add.w	r3, r7, #24
 80182a2:	2100      	movs	r1, #0
 80182a4:	4618      	mov	r0, r3
 80182a6:	f7f7 fb1c 	bl	800f8e2 <_ZNK12SimpleString2atEj>
 80182aa:	4603      	mov	r3, r0
 80182ac:	461a      	mov	r2, r3
 80182ae:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80182b2:	f107 0118 	add.w	r1, r7, #24
 80182b6:	232c      	movs	r3, #44	; 0x2c
 80182b8:	f7f7 fb60 	bl	800f97c <_ZNK12SimpleString17subStringFromTillEcc>
 80182bc:	f107 0530 	add.w	r5, r7, #48	; 0x30
 80182c0:	f240 125b 	movw	r2, #347	; 0x15b
 80182c4:	491a      	ldr	r1, [pc, #104]	; (8018330 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 80182c6:	2010      	movs	r0, #16
 80182c8:	f7f4 fa2c 	bl	800c724 <_ZnwjPKci>
 80182cc:	4604      	mov	r4, r0
 80182ce:	4629      	mov	r1, r5
 80182d0:	4620      	mov	r0, r4
 80182d2:	f009 fc27 	bl	8021b24 <_ZN10TestFilterC1ERK12SimpleString>
 80182d6:	63bc      	str	r4, [r7, #56]	; 0x38
 80182d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80182dc:	4618      	mov	r0, r3
 80182de:	f7f7 f99c 	bl	800f61a <_ZN12SimpleStringD1Ev>
    namefilter->strictMatching();
 80182e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80182e4:	f009 fc59 	bl	8021b9a <_ZN10TestFilter14strictMatchingEv>
    groupfilter->strictMatching();
 80182e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80182ea:	f009 fc56 	bl	8021b9a <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupfilter->add(groupFilters_);
 80182ee:	68fb      	ldr	r3, [r7, #12]
 80182f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182f2:	4619      	mov	r1, r3
 80182f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80182f6:	f009 fc35 	bl	8021b64 <_ZN10TestFilter3addEPS_>
 80182fa:	4602      	mov	r2, r0
 80182fc:	68fb      	ldr	r3, [r7, #12]
 80182fe:	625a      	str	r2, [r3, #36]	; 0x24
    nameFilters_ = namefilter->add(nameFilters_);
 8018300:	68fb      	ldr	r3, [r7, #12]
 8018302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018304:	4619      	mov	r1, r3
 8018306:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8018308:	f009 fc2c 	bl	8021b64 <_ZN10TestFilter3addEPS_>
 801830c:	4602      	mov	r2, r0
 801830e:	68fb      	ldr	r3, [r7, #12]
 8018310:	629a      	str	r2, [r3, #40]	; 0x28
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8018312:	f107 0310 	add.w	r3, r7, #16
 8018316:	4618      	mov	r0, r3
 8018318:	f7f7 f97f 	bl	800f61a <_ZN12SimpleStringD1Ev>
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 801831c:	f107 0318 	add.w	r3, r7, #24
 8018320:	4618      	mov	r0, r3
 8018322:	f7f7 f97a 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 8018326:	bf00      	nop
 8018328:	3740      	adds	r7, #64	; 0x40
 801832a:	46bd      	mov	sp, r7
 801832c:	bdb0      	pop	{r4, r5, r7, pc}
 801832e:	bf00      	nop
 8018330:	080286e0 	.word	0x080286e0

08018334 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>:

void CommandLineArguments::setPackageName(int ac, const char *const *av, int& i)
{
 8018334:	b590      	push	{r4, r7, lr}
 8018336:	b08b      	sub	sp, #44	; 0x2c
 8018338:	af02      	add	r7, sp, #8
 801833a:	60f8      	str	r0, [r7, #12]
 801833c:	60b9      	str	r1, [r7, #8]
 801833e:	607a      	str	r2, [r7, #4]
 8018340:	603b      	str	r3, [r7, #0]
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8018342:	f107 0318 	add.w	r3, r7, #24
 8018346:	491b      	ldr	r1, [pc, #108]	; (80183b4 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x80>)
 8018348:	4618      	mov	r0, r3
 801834a:	f7f6 fdae 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801834e:	f107 0010 	add.w	r0, r7, #16
 8018352:	f107 0318 	add.w	r3, r7, #24
 8018356:	9301      	str	r3, [sp, #4]
 8018358:	683b      	ldr	r3, [r7, #0]
 801835a:	9300      	str	r3, [sp, #0]
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	68ba      	ldr	r2, [r7, #8]
 8018360:	68f9      	ldr	r1, [r7, #12]
 8018362:	f7ff fc23 	bl	8017bac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8018366:	f107 0318 	add.w	r3, r7, #24
 801836a:	4618      	mov	r0, r3
 801836c:	f7f7 f955 	bl	800f61a <_ZN12SimpleStringD1Ev>
    if (packageName.size() == 0) return;
 8018370:	f107 0310 	add.w	r3, r7, #16
 8018374:	4618      	mov	r0, r3
 8018376:	f7f7 f92f 	bl	800f5d8 <_ZNK12SimpleString4sizeEv>
 801837a:	4603      	mov	r3, r0
 801837c:	2b00      	cmp	r3, #0
 801837e:	bf0c      	ite	eq
 8018380:	2301      	moveq	r3, #1
 8018382:	2300      	movne	r3, #0
 8018384:	b2db      	uxtb	r3, r3
 8018386:	2b00      	cmp	r3, #0
 8018388:	d001      	beq.n	801838e <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x5a>
 801838a:	2400      	movs	r4, #0
 801838c:	e008      	b.n	80183a0 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x6c>

    packageName_ = packageName;
 801838e:	68fb      	ldr	r3, [r7, #12]
 8018390:	3330      	adds	r3, #48	; 0x30
 8018392:	f107 0210 	add.w	r2, r7, #16
 8018396:	4611      	mov	r1, r2
 8018398:	4618      	mov	r0, r3
 801839a:	f7f6 fdf2 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 801839e:	2401      	movs	r4, #1
 80183a0:	f107 0310 	add.w	r3, r7, #16
 80183a4:	4618      	mov	r0, r3
 80183a6:	f7f7 f938 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80183aa:	2c01      	cmp	r4, #1
}
 80183ac:	3724      	adds	r7, #36	; 0x24
 80183ae:	46bd      	mov	sp, r7
 80183b0:	bd90      	pop	{r4, r7, pc}
 80183b2:	bf00      	nop
 80183b4:	08027d98 	.word	0x08027d98

080183b8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>:

bool CommandLineArguments::setOutputType(int ac, const char *const *av, int& i)
{
 80183b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80183ba:	b093      	sub	sp, #76	; 0x4c
 80183bc:	af02      	add	r7, sp, #8
 80183be:	60f8      	str	r0, [r7, #12]
 80183c0:	60b9      	str	r1, [r7, #8]
 80183c2:	607a      	str	r2, [r7, #4]
 80183c4:	603b      	str	r3, [r7, #0]
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 80183c6:	f107 0318 	add.w	r3, r7, #24
 80183ca:	4953      	ldr	r1, [pc, #332]	; (8018518 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x160>)
 80183cc:	4618      	mov	r0, r3
 80183ce:	f7f6 fd6c 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80183d2:	f107 0010 	add.w	r0, r7, #16
 80183d6:	f107 0318 	add.w	r3, r7, #24
 80183da:	9301      	str	r3, [sp, #4]
 80183dc:	683b      	ldr	r3, [r7, #0]
 80183de:	9300      	str	r3, [sp, #0]
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	68ba      	ldr	r2, [r7, #8]
 80183e4:	68f9      	ldr	r1, [r7, #12]
 80183e6:	f7ff fbe1 	bl	8017bac <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80183ea:	f107 0318 	add.w	r3, r7, #24
 80183ee:	4618      	mov	r0, r3
 80183f0:	f7f7 f913 	bl	800f61a <_ZN12SimpleStringD1Ev>
    if (outputType.size() == 0) return false;
 80183f4:	f107 0310 	add.w	r3, r7, #16
 80183f8:	4618      	mov	r0, r3
 80183fa:	f7f7 f8ed 	bl	800f5d8 <_ZNK12SimpleString4sizeEv>
 80183fe:	4603      	mov	r3, r0
 8018400:	2b00      	cmp	r3, #0
 8018402:	bf0c      	ite	eq
 8018404:	2301      	moveq	r3, #1
 8018406:	2300      	movne	r3, #0
 8018408:	b2db      	uxtb	r3, r3
 801840a:	2b00      	cmp	r3, #0
 801840c:	d001      	beq.n	8018412 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x5a>
 801840e:	2400      	movs	r4, #0
 8018410:	e078      	b.n	8018504 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>

    if (outputType == "normal" || outputType == "eclipse") {
 8018412:	2500      	movs	r5, #0
 8018414:	f107 0320 	add.w	r3, r7, #32
 8018418:	4940      	ldr	r1, [pc, #256]	; (801851c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x164>)
 801841a:	4618      	mov	r0, r3
 801841c:	f7f6 fd45 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8018420:	2601      	movs	r6, #1
 8018422:	f107 0220 	add.w	r2, r7, #32
 8018426:	f107 0310 	add.w	r3, r7, #16
 801842a:	4611      	mov	r1, r2
 801842c:	4618      	mov	r0, r3
 801842e:	f7f7 f900 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8018432:	4603      	mov	r3, r0
 8018434:	2b00      	cmp	r3, #0
 8018436:	d111      	bne.n	801845c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa4>
 8018438:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801843c:	4938      	ldr	r1, [pc, #224]	; (8018520 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x168>)
 801843e:	4618      	mov	r0, r3
 8018440:	f7f6 fd33 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8018444:	2501      	movs	r5, #1
 8018446:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801844a:	f107 0310 	add.w	r3, r7, #16
 801844e:	4611      	mov	r1, r2
 8018450:	4618      	mov	r0, r3
 8018452:	f7f7 f8ee 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8018456:	4603      	mov	r3, r0
 8018458:	2b00      	cmp	r3, #0
 801845a:	d001      	beq.n	8018460 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa8>
 801845c:	2401      	movs	r4, #1
 801845e:	e000      	b.n	8018462 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xaa>
 8018460:	2400      	movs	r4, #0
 8018462:	2d00      	cmp	r5, #0
 8018464:	d004      	beq.n	8018470 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xb8>
 8018466:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801846a:	4618      	mov	r0, r3
 801846c:	f7f7 f8d5 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8018470:	2e00      	cmp	r6, #0
 8018472:	d004      	beq.n	801847e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xc6>
 8018474:	f107 0320 	add.w	r3, r7, #32
 8018478:	4618      	mov	r0, r3
 801847a:	f7f7 f8ce 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801847e:	2c00      	cmp	r4, #0
 8018480:	d005      	beq.n	801848e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xd6>
        outputType_ = OUTPUT_ECLIPSE;
 8018482:	68fb      	ldr	r3, [r7, #12]
 8018484:	2200      	movs	r2, #0
 8018486:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 801848a:	2401      	movs	r4, #1
 801848c:	e03a      	b.n	8018504 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "junit") {
 801848e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018492:	4924      	ldr	r1, [pc, #144]	; (8018524 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x16c>)
 8018494:	4618      	mov	r0, r3
 8018496:	f7f6 fd08 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801849a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801849e:	f107 0310 	add.w	r3, r7, #16
 80184a2:	4611      	mov	r1, r2
 80184a4:	4618      	mov	r0, r3
 80184a6:	f7f7 f8c4 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 80184aa:	4603      	mov	r3, r0
 80184ac:	461c      	mov	r4, r3
 80184ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80184b2:	4618      	mov	r0, r3
 80184b4:	f7f7 f8b1 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80184b8:	2c00      	cmp	r4, #0
 80184ba:	d005      	beq.n	80184c8 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x110>
        outputType_ = OUTPUT_JUNIT;
 80184bc:	68fb      	ldr	r3, [r7, #12]
 80184be:	2201      	movs	r2, #1
 80184c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 80184c4:	2401      	movs	r4, #1
 80184c6:	e01d      	b.n	8018504 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "teamcity") {
 80184c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80184cc:	4916      	ldr	r1, [pc, #88]	; (8018528 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x170>)
 80184ce:	4618      	mov	r0, r3
 80184d0:	f7f6 fceb 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80184d4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80184d8:	f107 0310 	add.w	r3, r7, #16
 80184dc:	4611      	mov	r1, r2
 80184de:	4618      	mov	r0, r3
 80184e0:	f7f7 f8a7 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 80184e4:	4603      	mov	r3, r0
 80184e6:	461c      	mov	r4, r3
 80184e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80184ec:	4618      	mov	r0, r3
 80184ee:	f7f7 f894 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80184f2:	2c00      	cmp	r4, #0
 80184f4:	d005      	beq.n	8018502 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14a>
        outputType_ = OUTPUT_TEAMCITY;
 80184f6:	68fb      	ldr	r3, [r7, #12]
 80184f8:	2202      	movs	r2, #2
 80184fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 80184fe:	2401      	movs	r4, #1
 8018500:	e000      	b.n	8018504 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }

    return false;
 8018502:	2400      	movs	r4, #0
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8018504:	f107 0310 	add.w	r3, r7, #16
 8018508:	4618      	mov	r0, r3
 801850a:	f7f7 f886 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801850e:	4623      	mov	r3, r4
}
 8018510:	4618      	mov	r0, r3
 8018512:	3744      	adds	r7, #68	; 0x44
 8018514:	46bd      	mov	sp, r7
 8018516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018518:	08027d94 	.word	0x08027d94
 801851c:	08028704 	.word	0x08028704
 8018520:	0802870c 	.word	0x0802870c
 8018524:	08028714 	.word	0x08028714
 8018528:	0802871c 	.word	0x0802871c

0801852c <_ZNK20CommandLineArguments13isJUnitOutputEv>:
{
    return outputType_ == OUTPUT_ECLIPSE;
}

bool CommandLineArguments::isJUnitOutput() const
{
 801852c:	b480      	push	{r7}
 801852e:	b083      	sub	sp, #12
 8018530:	af00      	add	r7, sp, #0
 8018532:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_JUNIT;
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801853a:	2b01      	cmp	r3, #1
 801853c:	bf0c      	ite	eq
 801853e:	2301      	moveq	r3, #1
 8018540:	2300      	movne	r3, #0
 8018542:	b2db      	uxtb	r3, r3
}
 8018544:	4618      	mov	r0, r3
 8018546:	370c      	adds	r7, #12
 8018548:	46bd      	mov	sp, r7
 801854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801854e:	4770      	bx	lr

08018550 <_ZNK20CommandLineArguments16isTeamCityOutputEv>:

bool CommandLineArguments::isTeamCityOutput() const
{
 8018550:	b480      	push	{r7}
 8018552:	b083      	sub	sp, #12
 8018554:	af00      	add	r7, sp, #0
 8018556:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_TEAMCITY;
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801855e:	2b02      	cmp	r3, #2
 8018560:	bf0c      	ite	eq
 8018562:	2301      	moveq	r3, #1
 8018564:	2300      	movne	r3, #0
 8018566:	b2db      	uxtb	r3, r3
}
 8018568:	4618      	mov	r0, r3
 801856a:	370c      	adds	r7, #12
 801856c:	46bd      	mov	sp, r7
 801856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018572:	4770      	bx	lr

08018574 <_ZNK20CommandLineArguments14getPackageNameEv>:

const SimpleString& CommandLineArguments::getPackageName() const
{
 8018574:	b480      	push	{r7}
 8018576:	b083      	sub	sp, #12
 8018578:	af00      	add	r7, sp, #0
 801857a:	6078      	str	r0, [r7, #4]
    return packageName_;
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	3330      	adds	r3, #48	; 0x30
}
 8018580:	4618      	mov	r0, r3
 8018582:	370c      	adds	r7, #12
 8018584:	46bd      	mov	sp, r7
 8018586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801858a:	4770      	bx	lr

0801858c <_ZN22MemoryLeakDetectorListC1Ev>:
    MemoryLeakDetectorNode* next_;
};

struct MemoryLeakDetectorList
{
    MemoryLeakDetectorList() :
 801858c:	b480      	push	{r7}
 801858e:	b083      	sub	sp, #12
 8018590:	af00      	add	r7, sp, #0
 8018592:	6078      	str	r0, [r7, #4]
        head_(NULLPTR)
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	2200      	movs	r2, #0
 8018598:	601a      	str	r2, [r3, #0]
    {}
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	4618      	mov	r0, r3
 801859e:	370c      	adds	r7, #12
 80185a0:	46bd      	mov	sp, r7
 80185a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185a6:	4770      	bx	lr

080185a8 <_ZN18SimpleStringBufferC1Ev>:

static const char* UNKNOWN = "<unknown>";

static const char GuardBytes[] = {'B','A','S'};

SimpleStringBuffer::SimpleStringBuffer() :
 80185a8:	b480      	push	{r7}
 80185aa:	b083      	sub	sp, #12
 80185ac:	af00      	add	r7, sp, #0
 80185ae:	6078      	str	r0, [r7, #4]
    positions_filled_(0), write_limit_(SIMPLE_STRING_BUFFER_LEN-1)
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80185b6:	2200      	movs	r2, #0
 80185b8:	601a      	str	r2, [r3, #0]
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80185c0:	3304      	adds	r3, #4
 80185c2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80185c6:	601a      	str	r2, [r3, #0]
{
    buffer_[0] = '\0';
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	2200      	movs	r2, #0
 80185cc:	701a      	strb	r2, [r3, #0]
}
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	4618      	mov	r0, r3
 80185d2:	370c      	adds	r7, #12
 80185d4:	46bd      	mov	sp, r7
 80185d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185da:	4770      	bx	lr

080185dc <_ZN18SimpleStringBuffer5clearEv>:

void SimpleStringBuffer::clear()
{
 80185dc:	b480      	push	{r7}
 80185de:	b083      	sub	sp, #12
 80185e0:	af00      	add	r7, sp, #0
 80185e2:	6078      	str	r0, [r7, #4]
    positions_filled_ = 0;
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80185ea:	2200      	movs	r2, #0
 80185ec:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	2200      	movs	r2, #0
 80185f2:	701a      	strb	r2, [r3, #0]
}
 80185f4:	bf00      	nop
 80185f6:	370c      	adds	r7, #12
 80185f8:	46bd      	mov	sp, r7
 80185fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185fe:	4770      	bx	lr

08018600 <_ZN18SimpleStringBuffer3addEPKcz>:

void SimpleStringBuffer::add(const char* format, ...)
{
 8018600:	b40e      	push	{r1, r2, r3}
 8018602:	b590      	push	{r4, r7, lr}
 8018604:	b086      	sub	sp, #24
 8018606:	af00      	add	r7, sp, #0
 8018608:	6078      	str	r0, [r7, #4]
    const size_t positions_left = write_limit_ - positions_filled_;
 801860a:	687b      	ldr	r3, [r7, #4]
 801860c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018610:	3304      	adds	r3, #4
 8018612:	681a      	ldr	r2, [r3, #0]
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801861a:	681b      	ldr	r3, [r3, #0]
 801861c:	1ad3      	subs	r3, r2, r3
 801861e:	617b      	str	r3, [r7, #20]
    if (positions_left == 0) return;
 8018620:	697b      	ldr	r3, [r7, #20]
 8018622:	2b00      	cmp	r3, #0
 8018624:	d032      	beq.n	801868c <_ZN18SimpleStringBuffer3addEPKcz+0x8c>

    va_list arguments;
    va_start(arguments, format);
 8018626:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801862a:	60fb      	str	r3, [r7, #12]
    const int count = PlatformSpecificVSNprintf(buffer_ + positions_filled_, positions_left+1, format, arguments);
 801862c:	4b1b      	ldr	r3, [pc, #108]	; (801869c <_ZN18SimpleStringBuffer3addEPKcz+0x9c>)
 801862e:	681c      	ldr	r4, [r3, #0]
 8018630:	687a      	ldr	r2, [r7, #4]
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018638:	681b      	ldr	r3, [r3, #0]
 801863a:	18d0      	adds	r0, r2, r3
 801863c:	697b      	ldr	r3, [r7, #20]
 801863e:	1c59      	adds	r1, r3, #1
 8018640:	68fb      	ldr	r3, [r7, #12]
 8018642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018644:	47a0      	blx	r4
 8018646:	6138      	str	r0, [r7, #16]
    if (count > 0) positions_filled_ += (size_t) count;
 8018648:	693b      	ldr	r3, [r7, #16]
 801864a:	2b00      	cmp	r3, #0
 801864c:	dd09      	ble.n	8018662 <_ZN18SimpleStringBuffer3addEPKcz+0x62>
 801864e:	687b      	ldr	r3, [r7, #4]
 8018650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018654:	681a      	ldr	r2, [r3, #0]
 8018656:	693b      	ldr	r3, [r7, #16]
 8018658:	441a      	add	r2, r3
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018660:	601a      	str	r2, [r3, #0]
    if (positions_filled_ > write_limit_) positions_filled_ = write_limit_;
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018668:	681a      	ldr	r2, [r3, #0]
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018670:	3304      	adds	r3, #4
 8018672:	681b      	ldr	r3, [r3, #0]
 8018674:	429a      	cmp	r2, r3
 8018676:	d90a      	bls.n	801868e <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801867e:	3304      	adds	r3, #4
 8018680:	681a      	ldr	r2, [r3, #0]
 8018682:	687b      	ldr	r3, [r7, #4]
 8018684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018688:	601a      	str	r2, [r3, #0]
 801868a:	e000      	b.n	801868e <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
    if (positions_left == 0) return;
 801868c:	bf00      	nop
    va_end(arguments);
}
 801868e:	3718      	adds	r7, #24
 8018690:	46bd      	mov	sp, r7
 8018692:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8018696:	b003      	add	sp, #12
 8018698:	4770      	bx	lr
 801869a:	bf00      	nop
 801869c:	200000b0 	.word	0x200000b0

080186a0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>:

void SimpleStringBuffer::addMemoryDump(const void* memory, size_t memorySize)
{
 80186a0:	b580      	push	{r7, lr}
 80186a2:	b08c      	sub	sp, #48	; 0x30
 80186a4:	af00      	add	r7, sp, #0
 80186a6:	60f8      	str	r0, [r7, #12]
 80186a8:	60b9      	str	r1, [r7, #8]
 80186aa:	607a      	str	r2, [r7, #4]
    const unsigned char* byteMemory = (const unsigned char*)memory;
 80186ac:	68bb      	ldr	r3, [r7, #8]
 80186ae:	61fb      	str	r3, [r7, #28]
    const size_t maxLineBytes = 16;
 80186b0:	2310      	movs	r3, #16
 80186b2:	61bb      	str	r3, [r7, #24]
    size_t currentPos = 0;
 80186b4:	2300      	movs	r3, #0
 80186b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t p;

    while (currentPos < memorySize) {
 80186b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	429a      	cmp	r2, r3
 80186be:	d273      	bcs.n	80187a8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x108>
        add("    %04lx: ", (unsigned long) currentPos);
 80186c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80186c2:	493b      	ldr	r1, [pc, #236]	; (80187b0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x110>)
 80186c4:	68f8      	ldr	r0, [r7, #12]
 80186c6:	f7ff ff9b 	bl	8018600 <_ZN18SimpleStringBuffer3addEPKcz>
        size_t bytesInLine = memorySize - currentPos;
 80186ca:	687a      	ldr	r2, [r7, #4]
 80186cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186ce:	1ad3      	subs	r3, r2, r3
 80186d0:	627b      	str	r3, [r7, #36]	; 0x24
        if (bytesInLine > maxLineBytes) {
 80186d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186d4:	2b10      	cmp	r3, #16
 80186d6:	d901      	bls.n	80186dc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x3c>
            bytesInLine = maxLineBytes;
 80186d8:	2310      	movs	r3, #16
 80186da:	627b      	str	r3, [r7, #36]	; 0x24
        }
        const size_t leftoverBytes = maxLineBytes - bytesInLine;
 80186dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186de:	f1c3 0310 	rsb	r3, r3, #16
 80186e2:	617b      	str	r3, [r7, #20]

        for (p = 0; p < bytesInLine; p++) {
 80186e4:	2300      	movs	r3, #0
 80186e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80186e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80186ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186ec:	429a      	cmp	r2, r3
 80186ee:	d215      	bcs.n	801871c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x7c>
            add("%02hx ", (unsigned short) byteMemory[currentPos + p]);
 80186f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80186f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186f4:	4413      	add	r3, r2
 80186f6:	69fa      	ldr	r2, [r7, #28]
 80186f8:	4413      	add	r3, r2
 80186fa:	781b      	ldrb	r3, [r3, #0]
 80186fc:	461a      	mov	r2, r3
 80186fe:	492d      	ldr	r1, [pc, #180]	; (80187b4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x114>)
 8018700:	68f8      	ldr	r0, [r7, #12]
 8018702:	f7ff ff7d 	bl	8018600 <_ZN18SimpleStringBuffer3addEPKcz>
            if (p == ((maxLineBytes / 2) - 1)) {
 8018706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018708:	2b07      	cmp	r3, #7
 801870a:	d103      	bne.n	8018714 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x74>
                add(" ");
 801870c:	492a      	ldr	r1, [pc, #168]	; (80187b8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 801870e:	68f8      	ldr	r0, [r7, #12]
 8018710:	f7ff ff76 	bl	8018600 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8018714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018716:	3301      	adds	r3, #1
 8018718:	62bb      	str	r3, [r7, #40]	; 0x28
 801871a:	e7e5      	b.n	80186e8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x48>
            }
        }
        for (p = 0; p < leftoverBytes; p++) {
 801871c:	2300      	movs	r3, #0
 801871e:	62bb      	str	r3, [r7, #40]	; 0x28
 8018720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018722:	697b      	ldr	r3, [r7, #20]
 8018724:	429a      	cmp	r2, r3
 8018726:	d207      	bcs.n	8018738 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x98>
            add("   ");
 8018728:	4924      	ldr	r1, [pc, #144]	; (80187bc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x11c>)
 801872a:	68f8      	ldr	r0, [r7, #12]
 801872c:	f7ff ff68 	bl	8018600 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < leftoverBytes; p++) {
 8018730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018732:	3301      	adds	r3, #1
 8018734:	62bb      	str	r3, [r7, #40]	; 0x28
 8018736:	e7f3      	b.n	8018720 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x80>
        }
        if (leftoverBytes > (maxLineBytes/2)) {
 8018738:	697b      	ldr	r3, [r7, #20]
 801873a:	2b08      	cmp	r3, #8
 801873c:	d903      	bls.n	8018746 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xa6>
            add(" ");
 801873e:	491e      	ldr	r1, [pc, #120]	; (80187b8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8018740:	68f8      	ldr	r0, [r7, #12]
 8018742:	f7ff ff5d 	bl	8018600 <_ZN18SimpleStringBuffer3addEPKcz>
        }

        add("|");
 8018746:	491e      	ldr	r1, [pc, #120]	; (80187c0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x120>)
 8018748:	68f8      	ldr	r0, [r7, #12]
 801874a:	f7ff ff59 	bl	8018600 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 801874e:	2300      	movs	r3, #0
 8018750:	62bb      	str	r3, [r7, #40]	; 0x28
 8018752:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018756:	429a      	cmp	r2, r3
 8018758:	d21d      	bcs.n	8018796 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xf6>
            char toAdd = (char)byteMemory[currentPos + p];
 801875a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801875c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801875e:	4413      	add	r3, r2
 8018760:	69fa      	ldr	r2, [r7, #28]
 8018762:	4413      	add	r3, r2
 8018764:	781b      	ldrb	r3, [r3, #0]
 8018766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (toAdd < ' ' || toAdd > '~') {
 801876a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801876e:	2b1f      	cmp	r3, #31
 8018770:	d903      	bls.n	801877a <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xda>
 8018772:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018776:	2b7e      	cmp	r3, #126	; 0x7e
 8018778:	d902      	bls.n	8018780 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xe0>
                toAdd = '.';
 801877a:	232e      	movs	r3, #46	; 0x2e
 801877c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }
            add("%c", (int)toAdd);
 8018780:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018784:	461a      	mov	r2, r3
 8018786:	490f      	ldr	r1, [pc, #60]	; (80187c4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x124>)
 8018788:	68f8      	ldr	r0, [r7, #12]
 801878a:	f7ff ff39 	bl	8018600 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 801878e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018790:	3301      	adds	r3, #1
 8018792:	62bb      	str	r3, [r7, #40]	; 0x28
 8018794:	e7dd      	b.n	8018752 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xb2>
        }
        add("|\n");
 8018796:	490c      	ldr	r1, [pc, #48]	; (80187c8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x128>)
 8018798:	68f8      	ldr	r0, [r7, #12]
 801879a:	f7ff ff31 	bl	8018600 <_ZN18SimpleStringBuffer3addEPKcz>
        currentPos += bytesInLine;
 801879e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80187a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187a2:	4413      	add	r3, r2
 80187a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (currentPos < memorySize) {
 80187a6:	e787      	b.n	80186b8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x18>
    }
}
 80187a8:	bf00      	nop
 80187aa:	3730      	adds	r7, #48	; 0x30
 80187ac:	46bd      	mov	sp, r7
 80187ae:	bd80      	pop	{r7, pc}
 80187b0:	08028734 	.word	0x08028734
 80187b4:	08028740 	.word	0x08028740
 80187b8:	08028748 	.word	0x08028748
 80187bc:	0802874c 	.word	0x0802874c
 80187c0:	08028750 	.word	0x08028750
 80187c4:	08028754 	.word	0x08028754
 80187c8:	08028758 	.word	0x08028758

080187cc <_ZN18SimpleStringBuffer8toStringEv>:

char* SimpleStringBuffer::toString()
{
 80187cc:	b480      	push	{r7}
 80187ce:	b083      	sub	sp, #12
 80187d0:	af00      	add	r7, sp, #0
 80187d2:	6078      	str	r0, [r7, #4]
    return buffer_;
 80187d4:	687b      	ldr	r3, [r7, #4]
}
 80187d6:	4618      	mov	r0, r3
 80187d8:	370c      	adds	r7, #12
 80187da:	46bd      	mov	sp, r7
 80187dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187e0:	4770      	bx	lr

080187e2 <_ZN18SimpleStringBuffer13setWriteLimitEj>:

void SimpleStringBuffer::setWriteLimit(size_t write_limit)
{
 80187e2:	b480      	push	{r7}
 80187e4:	b083      	sub	sp, #12
 80187e6:	af00      	add	r7, sp, #0
 80187e8:	6078      	str	r0, [r7, #4]
 80187ea:	6039      	str	r1, [r7, #0]
    write_limit_ = write_limit;
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80187f2:	3304      	adds	r3, #4
 80187f4:	683a      	ldr	r2, [r7, #0]
 80187f6:	601a      	str	r2, [r3, #0]
    if (write_limit_ > SIMPLE_STRING_BUFFER_LEN-1)
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80187fe:	3304      	adds	r3, #4
 8018800:	681b      	ldr	r3, [r3, #0]
 8018802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018806:	d306      	bcc.n	8018816 <_ZN18SimpleStringBuffer13setWriteLimitEj+0x34>
        write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801880e:	3304      	adds	r3, #4
 8018810:	f640 72ff 	movw	r2, #4095	; 0xfff
 8018814:	601a      	str	r2, [r3, #0]
}
 8018816:	bf00      	nop
 8018818:	370c      	adds	r7, #12
 801881a:	46bd      	mov	sp, r7
 801881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018820:	4770      	bx	lr

08018822 <_ZN18SimpleStringBuffer15resetWriteLimitEv>:
void SimpleStringBuffer::resetWriteLimit()
{
 8018822:	b480      	push	{r7}
 8018824:	b083      	sub	sp, #12
 8018826:	af00      	add	r7, sp, #0
 8018828:	6078      	str	r0, [r7, #4]
    write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018830:	3304      	adds	r3, #4
 8018832:	f640 72ff 	movw	r2, #4095	; 0xfff
 8018836:	601a      	str	r2, [r3, #0]
}
 8018838:	bf00      	nop
 801883a:	370c      	adds	r7, #12
 801883c:	46bd      	mov	sp, r7
 801883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018842:	4770      	bx	lr

08018844 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>:

bool SimpleStringBuffer::reachedItsCapacity()
{
 8018844:	b480      	push	{r7}
 8018846:	b083      	sub	sp, #12
 8018848:	af00      	add	r7, sp, #0
 801884a:	6078      	str	r0, [r7, #4]
    return positions_filled_ >= write_limit_;
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018852:	681a      	ldr	r2, [r3, #0]
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801885a:	3304      	adds	r3, #4
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	429a      	cmp	r2, r3
 8018860:	bf2c      	ite	cs
 8018862:	2301      	movcs	r3, #1
 8018864:	2300      	movcc	r3, #0
 8018866:	b2db      	uxtb	r3, r3
}
 8018868:	4618      	mov	r0, r3
 801886a:	370c      	adds	r7, #12
 801886c:	46bd      	mov	sp, r7
 801886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018872:	4770      	bx	lr

08018874 <_ZN28MemoryLeakOutputStringBufferC1Ev>:
#define MEM_LEAK_ADDITION_MALLOC_WARNING "NOTE:\n" \
                                         "\tMemory leak reports about malloc and free can be caused by allocating using the cpputest version of malloc,\n" \
                                         "\tbut deallocate using the standard free.\n" \
                                         "\tIf this is the case, check whether your malloc/free replacements are working (#define malloc cpputest_malloc etc).\n"

MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
 8018874:	b580      	push	{r7, lr}
 8018876:	b082      	sub	sp, #8
 8018878:	af00      	add	r7, sp, #0
 801887a:	6078      	str	r0, [r7, #4]
    : total_leaks_(0), giveWarningOnUsingMalloc_(false)
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	2200      	movs	r2, #0
 8018880:	601a      	str	r2, [r3, #0]
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	2200      	movs	r2, #0
 8018886:	711a      	strb	r2, [r3, #4]
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	3308      	adds	r3, #8
 801888c:	4618      	mov	r0, r3
 801888e:	f7ff fe8b 	bl	80185a8 <_ZN18SimpleStringBufferC1Ev>
{
}
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	4618      	mov	r0, r3
 8018896:	3708      	adds	r7, #8
 8018898:	46bd      	mov	sp, r7
 801889a:	bd80      	pop	{r7, pc}

0801889c <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addAllocationLocation(const char* allocationFile, size_t allocationLineNumber, size_t allocationSize, TestMemoryAllocator* allocator)
{
 801889c:	b5b0      	push	{r4, r5, r7, lr}
 801889e:	b086      	sub	sp, #24
 80188a0:	af02      	add	r7, sp, #8
 80188a2:	60f8      	str	r0, [r7, #12]
 80188a4:	60b9      	str	r1, [r7, #8]
 80188a6:	607a      	str	r2, [r7, #4]
 80188a8:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   allocated at file: %s line: %d size: %lu type: %s\n", allocationFile, (int) allocationLineNumber, (unsigned long) allocationSize, allocator->alloc_name());
 80188aa:	68fb      	ldr	r3, [r7, #12]
 80188ac:	f103 0408 	add.w	r4, r3, #8
 80188b0:	687d      	ldr	r5, [r7, #4]
 80188b2:	6a3b      	ldr	r3, [r7, #32]
 80188b4:	681b      	ldr	r3, [r3, #0]
 80188b6:	3314      	adds	r3, #20
 80188b8:	681b      	ldr	r3, [r3, #0]
 80188ba:	6a38      	ldr	r0, [r7, #32]
 80188bc:	4798      	blx	r3
 80188be:	4603      	mov	r3, r0
 80188c0:	9301      	str	r3, [sp, #4]
 80188c2:	683b      	ldr	r3, [r7, #0]
 80188c4:	9300      	str	r3, [sp, #0]
 80188c6:	462b      	mov	r3, r5
 80188c8:	68ba      	ldr	r2, [r7, #8]
 80188ca:	4904      	ldr	r1, [pc, #16]	; (80188dc <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator+0x40>)
 80188cc:	4620      	mov	r0, r4
 80188ce:	f7ff fe97 	bl	8018600 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80188d2:	bf00      	nop
 80188d4:	3710      	adds	r7, #16
 80188d6:	46bd      	mov	sp, r7
 80188d8:	bdb0      	pop	{r4, r5, r7, pc}
 80188da:	bf00      	nop
 80188dc:	0802875c 	.word	0x0802875c

080188e0 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addDeallocationLocation(const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* allocator)
{
 80188e0:	b5b0      	push	{r4, r5, r7, lr}
 80188e2:	b086      	sub	sp, #24
 80188e4:	af02      	add	r7, sp, #8
 80188e6:	60f8      	str	r0, [r7, #12]
 80188e8:	60b9      	str	r1, [r7, #8]
 80188ea:	607a      	str	r2, [r7, #4]
 80188ec:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   deallocated at file: %s line: %d type: %s\n", freeFile, (int) freeLineNumber, allocator->free_name());
 80188ee:	68fb      	ldr	r3, [r7, #12]
 80188f0:	f103 0408 	add.w	r4, r3, #8
 80188f4:	687d      	ldr	r5, [r7, #4]
 80188f6:	683b      	ldr	r3, [r7, #0]
 80188f8:	681b      	ldr	r3, [r3, #0]
 80188fa:	3318      	adds	r3, #24
 80188fc:	681b      	ldr	r3, [r3, #0]
 80188fe:	6838      	ldr	r0, [r7, #0]
 8018900:	4798      	blx	r3
 8018902:	4603      	mov	r3, r0
 8018904:	9300      	str	r3, [sp, #0]
 8018906:	462b      	mov	r3, r5
 8018908:	68ba      	ldr	r2, [r7, #8]
 801890a:	4904      	ldr	r1, [pc, #16]	; (801891c <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator+0x3c>)
 801890c:	4620      	mov	r0, r4
 801890e:	f7ff fe77 	bl	8018600 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8018912:	bf00      	nop
 8018914:	3710      	adds	r7, #16
 8018916:	46bd      	mov	sp, r7
 8018918:	bdb0      	pop	{r4, r5, r7, pc}
 801891a:	bf00      	nop
 801891c:	08028794 	.word	0x08028794

08018920 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>:

void MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
{
 8018920:	b580      	push	{r7, lr}
 8018922:	b082      	sub	sp, #8
 8018924:	af00      	add	r7, sp, #0
 8018926:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("No memory leaks were detected.");
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	3308      	adds	r3, #8
 801892c:	4903      	ldr	r1, [pc, #12]	; (801893c <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv+0x1c>)
 801892e:	4618      	mov	r0, r3
 8018930:	f7ff fe66 	bl	8018600 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8018934:	bf00      	nop
 8018936:	3708      	adds	r7, #8
 8018938:	46bd      	mov	sp, r7
 801893a:	bd80      	pop	{r7, pc}
 801893c:	080287c4 	.word	0x080287c4

08018940 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
{
 8018940:	b580      	push	{r7, lr}
 8018942:	b084      	sub	sp, #16
 8018944:	af00      	add	r7, sp, #0
 8018946:	6078      	str	r0, [r7, #4]
    giveWarningOnUsingMalloc_ = false;
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	2200      	movs	r2, #0
 801894c:	711a      	strb	r2, [r3, #4]
    total_leaks_ = 0;
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	2200      	movs	r2, #0
 8018952:	601a      	str	r2, [r3, #0]

    size_t memory_leak_normal_footer_size = sizeof(MEM_LEAK_FOOTER) + 10 + sizeof(MEM_LEAK_TOO_MUCH); /* the number of leaks */
 8018954:	2367      	movs	r3, #103	; 0x67
 8018956:	60fb      	str	r3, [r7, #12]
    size_t memory_leak_foot_size_with_malloc_warning = memory_leak_normal_footer_size + sizeof(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8018958:	68fb      	ldr	r3, [r7, #12]
 801895a:	f203 1311 	addw	r3, r3, #273	; 0x111
 801895e:	60bb      	str	r3, [r7, #8]

    outputBuffer_.setWriteLimit(SimpleStringBuffer::SIMPLE_STRING_BUFFER_LEN - memory_leak_foot_size_with_malloc_warning);
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	f103 0208 	add.w	r2, r3, #8
 8018966:	68bb      	ldr	r3, [r7, #8]
 8018968:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 801896c:	4619      	mov	r1, r3
 801896e:	4610      	mov	r0, r2
 8018970:	f7ff ff37 	bl	80187e2 <_ZN18SimpleStringBuffer13setWriteLimitEj>
}
 8018974:	bf00      	nop
 8018976:	3710      	adds	r7, #16
 8018978:	46bd      	mov	sp, r7
 801897a:	bd80      	pop	{r7, pc}

0801897c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>:

void MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode* leak)
{
 801897c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801897e:	b089      	sub	sp, #36	; 0x24
 8018980:	af04      	add	r7, sp, #16
 8018982:	60f8      	str	r0, [r7, #12]
 8018984:	60b9      	str	r1, [r7, #8]
    if (total_leaks_ == 0) {
 8018986:	68fb      	ldr	r3, [r7, #12]
 8018988:	681b      	ldr	r3, [r3, #0]
 801898a:	2b00      	cmp	r3, #0
 801898c:	d102      	bne.n	8018994 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0x18>
        addMemoryLeakHeader();
 801898e:	68f8      	ldr	r0, [r7, #12]
 8018990:	f000 f882 	bl	8018a98 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>
    }

    total_leaks_++;
 8018994:	68fb      	ldr	r3, [r7, #12]
 8018996:	681b      	ldr	r3, [r3, #0]
 8018998:	1c5a      	adds	r2, r3, #1
 801899a:	68fb      	ldr	r3, [r7, #12]
 801899c:	601a      	str	r2, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 801899e:	68fb      	ldr	r3, [r7, #12]
 80189a0:	f103 0508 	add.w	r5, r3, #8
 80189a4:	68bb      	ldr	r3, [r7, #8]
 80189a6:	685e      	ldr	r6, [r3, #4]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80189a8:	68bb      	ldr	r3, [r7, #8]
 80189aa:	681b      	ldr	r3, [r3, #0]
 80189ac:	607b      	str	r3, [r7, #4]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80189ae:	68bb      	ldr	r3, [r7, #8]
 80189b0:	68dc      	ldr	r4, [r3, #12]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80189b2:	68bb      	ldr	r3, [r7, #8]
 80189b4:	691b      	ldr	r3, [r3, #16]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80189b6:	603b      	str	r3, [r7, #0]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80189b8:	68bb      	ldr	r3, [r7, #8]
 80189ba:	695a      	ldr	r2, [r3, #20]
 80189bc:	68bb      	ldr	r3, [r7, #8]
 80189be:	695b      	ldr	r3, [r3, #20]
 80189c0:	681b      	ldr	r3, [r3, #0]
 80189c2:	3314      	adds	r3, #20
 80189c4:	681b      	ldr	r3, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80189c6:	4610      	mov	r0, r2
 80189c8:	4798      	blx	r3
 80189ca:	4602      	mov	r2, r0
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80189cc:	68bb      	ldr	r3, [r7, #8]
 80189ce:	689b      	ldr	r3, [r3, #8]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80189d0:	9303      	str	r3, [sp, #12]
 80189d2:	9202      	str	r2, [sp, #8]
 80189d4:	683a      	ldr	r2, [r7, #0]
 80189d6:	9201      	str	r2, [sp, #4]
 80189d8:	9400      	str	r4, [sp, #0]
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	4632      	mov	r2, r6
 80189de:	4915      	ldr	r1, [pc, #84]	; (8018a34 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb8>)
 80189e0:	4628      	mov	r0, r5
 80189e2:	f7ff fe0d 	bl	8018600 <_ZN18SimpleStringBuffer3addEPKcz>
    outputBuffer_.addMemoryDump(leak->memory_, leak->size_);
 80189e6:	68fb      	ldr	r3, [r7, #12]
 80189e8:	f103 0008 	add.w	r0, r3, #8
 80189ec:	68bb      	ldr	r3, [r7, #8]
 80189ee:	6899      	ldr	r1, [r3, #8]
 80189f0:	68bb      	ldr	r3, [r7, #8]
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	461a      	mov	r2, r3
 80189f6:	f7ff fe53 	bl	80186a0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>

    if (SimpleString::StrCmp(leak->allocator_->alloc_name(), (const char*) "malloc") == 0)
 80189fa:	68bb      	ldr	r3, [r7, #8]
 80189fc:	695a      	ldr	r2, [r3, #20]
 80189fe:	68bb      	ldr	r3, [r7, #8]
 8018a00:	695b      	ldr	r3, [r3, #20]
 8018a02:	681b      	ldr	r3, [r3, #0]
 8018a04:	3314      	adds	r3, #20
 8018a06:	681b      	ldr	r3, [r3, #0]
 8018a08:	4610      	mov	r0, r2
 8018a0a:	4798      	blx	r3
 8018a0c:	4603      	mov	r3, r0
 8018a0e:	490a      	ldr	r1, [pc, #40]	; (8018a38 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xbc>)
 8018a10:	4618      	mov	r0, r3
 8018a12:	f7f6 f887 	bl	800eb24 <_ZN12SimpleString6StrCmpEPKcS1_>
 8018a16:	4603      	mov	r3, r0
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	bf0c      	ite	eq
 8018a1c:	2301      	moveq	r3, #1
 8018a1e:	2300      	movne	r3, #0
 8018a20:	b2db      	uxtb	r3, r3
 8018a22:	2b00      	cmp	r3, #0
 8018a24:	d002      	beq.n	8018a2c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb0>
        giveWarningOnUsingMalloc_ = true;
 8018a26:	68fb      	ldr	r3, [r7, #12]
 8018a28:	2201      	movs	r2, #1
 8018a2a:	711a      	strb	r2, [r3, #4]
}
 8018a2c:	bf00      	nop
 8018a2e:	3714      	adds	r7, #20
 8018a30:	46bd      	mov	sp, r7
 8018a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a34:	080287e4 	.word	0x080287e4
 8018a38:	08028844 	.word	0x08028844

08018a3c <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
{
 8018a3c:	b580      	push	{r7, lr}
 8018a3e:	b084      	sub	sp, #16
 8018a40:	af00      	add	r7, sp, #0
 8018a42:	6078      	str	r0, [r7, #4]
    if (total_leaks_ == 0) {
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	681b      	ldr	r3, [r3, #0]
 8018a48:	2b00      	cmp	r3, #0
 8018a4a:	d103      	bne.n	8018a54 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x18>
        addNoMemoryLeaksMessage();
 8018a4c:	6878      	ldr	r0, [r7, #4]
 8018a4e:	f7ff ff67 	bl	8018920 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>
        return;
 8018a52:	e01e      	b.n	8018a92 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
    }

    bool buffer_reached_its_capacity = outputBuffer_.reachedItsCapacity();
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	3308      	adds	r3, #8
 8018a58:	4618      	mov	r0, r3
 8018a5a:	f7ff fef3 	bl	8018844 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>
 8018a5e:	4603      	mov	r3, r0
 8018a60:	73fb      	strb	r3, [r7, #15]
    outputBuffer_.resetWriteLimit();
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	3308      	adds	r3, #8
 8018a66:	4618      	mov	r0, r3
 8018a68:	f7ff fedb 	bl	8018822 <_ZN18SimpleStringBuffer15resetWriteLimitEv>

    if (buffer_reached_its_capacity)
 8018a6c:	7bfb      	ldrb	r3, [r7, #15]
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	d002      	beq.n	8018a78 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x3c>
        addErrorMessageForTooMuchLeaks();
 8018a72:	6878      	ldr	r0, [r7, #4]
 8018a74:	f000 f820 	bl	8018ab8 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>

    addMemoryLeakFooter(total_leaks_);
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	681b      	ldr	r3, [r3, #0]
 8018a7c:	4619      	mov	r1, r3
 8018a7e:	6878      	ldr	r0, [r7, #4]
 8018a80:	f000 f82a 	bl	8018ad8 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>

    if (giveWarningOnUsingMalloc_)
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	791b      	ldrb	r3, [r3, #4]
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	d002      	beq.n	8018a92 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
        addWarningForUsingMalloc();
 8018a8c:	6878      	ldr	r0, [r7, #4]
 8018a8e:	f000 f839 	bl	8018b04 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>

}
 8018a92:	3710      	adds	r7, #16
 8018a94:	46bd      	mov	sp, r7
 8018a96:	bd80      	pop	{r7, pc}

08018a98 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>:

void MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
{
 8018a98:	b580      	push	{r7, lr}
 8018a9a:	b082      	sub	sp, #8
 8018a9c:	af00      	add	r7, sp, #0
 8018a9e:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("Memory leak(s) found.\n");
 8018aa0:	687b      	ldr	r3, [r7, #4]
 8018aa2:	3308      	adds	r3, #8
 8018aa4:	4903      	ldr	r1, [pc, #12]	; (8018ab4 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv+0x1c>)
 8018aa6:	4618      	mov	r0, r3
 8018aa8:	f7ff fdaa 	bl	8018600 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8018aac:	bf00      	nop
 8018aae:	3708      	adds	r7, #8
 8018ab0:	46bd      	mov	sp, r7
 8018ab2:	bd80      	pop	{r7, pc}
 8018ab4:	0802884c 	.word	0x0802884c

08018ab8 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>:

void MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
{
 8018ab8:	b580      	push	{r7, lr}
 8018aba:	b082      	sub	sp, #8
 8018abc:	af00      	add	r7, sp, #0
 8018abe:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_TOO_MUCH);
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	3308      	adds	r3, #8
 8018ac4:	4903      	ldr	r1, [pc, #12]	; (8018ad4 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv+0x1c>)
 8018ac6:	4618      	mov	r0, r3
 8018ac8:	f7ff fd9a 	bl	8018600 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8018acc:	bf00      	nop
 8018ace:	3708      	adds	r7, #8
 8018ad0:	46bd      	mov	sp, r7
 8018ad2:	bd80      	pop	{r7, pc}
 8018ad4:	08028864 	.word	0x08028864

08018ad8 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>:

void MemoryLeakOutputStringBuffer::addMemoryLeakFooter(size_t amountOfLeaks)
{
 8018ad8:	b580      	push	{r7, lr}
 8018ada:	b082      	sub	sp, #8
 8018adc:	af00      	add	r7, sp, #0
 8018ade:	6078      	str	r0, [r7, #4]
 8018ae0:	6039      	str	r1, [r7, #0]
    outputBuffer_.add("%s %d\n", MEM_LEAK_FOOTER, (int) amountOfLeaks);
 8018ae2:	687b      	ldr	r3, [r7, #4]
 8018ae4:	f103 0008 	add.w	r0, r3, #8
 8018ae8:	683b      	ldr	r3, [r7, #0]
 8018aea:	4a04      	ldr	r2, [pc, #16]	; (8018afc <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x24>)
 8018aec:	4904      	ldr	r1, [pc, #16]	; (8018b00 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x28>)
 8018aee:	f7ff fd87 	bl	8018600 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8018af2:	bf00      	nop
 8018af4:	3708      	adds	r7, #8
 8018af6:	46bd      	mov	sp, r7
 8018af8:	bd80      	pop	{r7, pc}
 8018afa:	bf00      	nop
 8018afc:	080288ac 	.word	0x080288ac
 8018b00:	080288c4 	.word	0x080288c4

08018b04 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>:

void MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
{
 8018b04:	b580      	push	{r7, lr}
 8018b06:	b082      	sub	sp, #8
 8018b08:	af00      	add	r7, sp, #0
 8018b0a:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	3308      	adds	r3, #8
 8018b10:	4903      	ldr	r1, [pc, #12]	; (8018b20 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv+0x1c>)
 8018b12:	4618      	mov	r0, r3
 8018b14:	f7ff fd74 	bl	8018600 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8018b18:	bf00      	nop
 8018b1a:	3708      	adds	r7, #8
 8018b1c:	46bd      	mov	sp, r7
 8018b1e:	bd80      	pop	{r7, pc}
 8018b20:	080288cc 	.word	0x080288cc

08018b24 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char* freeFile, size_t freeLine, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8018b24:	b580      	push	{r7, lr}
 8018b26:	b08a      	sub	sp, #40	; 0x28
 8018b28:	af06      	add	r7, sp, #24
 8018b2a:	60f8      	str	r0, [r7, #12]
 8018b2c:	60b9      	str	r1, [r7, #8]
 8018b2e:	607a      	str	r2, [r7, #4]
 8018b30:	603b      	str	r3, [r7, #0]
    reportFailure("Deallocating non-allocated memory\n", "<unknown>", 0, 0, NullUnknownAllocator::defaultAllocator(), freeFile, freeLine, freeAllocator, reporter);
 8018b32:	f7f9 fe8d 	bl	8012850 <_ZN20NullUnknownAllocator16defaultAllocatorEv>
 8018b36:	4602      	mov	r2, r0
 8018b38:	69bb      	ldr	r3, [r7, #24]
 8018b3a:	9305      	str	r3, [sp, #20]
 8018b3c:	683b      	ldr	r3, [r7, #0]
 8018b3e:	9304      	str	r3, [sp, #16]
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	9303      	str	r3, [sp, #12]
 8018b44:	68bb      	ldr	r3, [r7, #8]
 8018b46:	9302      	str	r3, [sp, #8]
 8018b48:	9201      	str	r2, [sp, #4]
 8018b4a:	2300      	movs	r3, #0
 8018b4c:	9300      	str	r3, [sp, #0]
 8018b4e:	2300      	movs	r3, #0
 8018b50:	4a04      	ldr	r2, [pc, #16]	; (8018b64 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x40>)
 8018b52:	4905      	ldr	r1, [pc, #20]	; (8018b68 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x44>)
 8018b54:	68f8      	ldr	r0, [r7, #12]
 8018b56:	f000 f855 	bl	8018c04 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8018b5a:	bf00      	nop
 8018b5c:	3710      	adds	r7, #16
 8018b5e:	46bd      	mov	sp, r7
 8018b60:	bd80      	pop	{r7, pc}
 8018b62:	bf00      	nop
 8018b64:	08028728 	.word	0x08028728
 8018b68:	080289e0 	.word	0x080289e0

08018b6c <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8018b6c:	b590      	push	{r4, r7, lr}
 8018b6e:	b08b      	sub	sp, #44	; 0x2c
 8018b70:	af06      	add	r7, sp, #24
 8018b72:	60f8      	str	r0, [r7, #12]
 8018b74:	60b9      	str	r1, [r7, #8]
 8018b76:	607a      	str	r2, [r7, #4]
 8018b78:	603b      	str	r3, [r7, #0]
    reportFailure("Allocation/deallocation type mismatch\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8018b7a:	68bb      	ldr	r3, [r7, #8]
 8018b7c:	68d8      	ldr	r0, [r3, #12]
 8018b7e:	68bb      	ldr	r3, [r7, #8]
 8018b80:	691c      	ldr	r4, [r3, #16]
 8018b82:	68bb      	ldr	r3, [r7, #8]
 8018b84:	681b      	ldr	r3, [r3, #0]
 8018b86:	68ba      	ldr	r2, [r7, #8]
 8018b88:	6952      	ldr	r2, [r2, #20]
 8018b8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018b8c:	9105      	str	r1, [sp, #20]
 8018b8e:	6a39      	ldr	r1, [r7, #32]
 8018b90:	9104      	str	r1, [sp, #16]
 8018b92:	6839      	ldr	r1, [r7, #0]
 8018b94:	9103      	str	r1, [sp, #12]
 8018b96:	6879      	ldr	r1, [r7, #4]
 8018b98:	9102      	str	r1, [sp, #8]
 8018b9a:	9201      	str	r2, [sp, #4]
 8018b9c:	9300      	str	r3, [sp, #0]
 8018b9e:	4623      	mov	r3, r4
 8018ba0:	4602      	mov	r2, r0
 8018ba2:	4904      	ldr	r1, [pc, #16]	; (8018bb4 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8018ba4:	68f8      	ldr	r0, [r7, #12]
 8018ba6:	f000 f82d 	bl	8018c04 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8018baa:	bf00      	nop
 8018bac:	3714      	adds	r7, #20
 8018bae:	46bd      	mov	sp, r7
 8018bb0:	bd90      	pop	{r4, r7, pc}
 8018bb2:	bf00      	nop
 8018bb4:	08028a04 	.word	0x08028a04

08018bb8 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8018bb8:	b590      	push	{r4, r7, lr}
 8018bba:	b08b      	sub	sp, #44	; 0x2c
 8018bbc:	af06      	add	r7, sp, #24
 8018bbe:	60f8      	str	r0, [r7, #12]
 8018bc0:	60b9      	str	r1, [r7, #8]
 8018bc2:	607a      	str	r2, [r7, #4]
 8018bc4:	603b      	str	r3, [r7, #0]
        reportFailure("Memory corruption (written out of bounds?)\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8018bc6:	68bb      	ldr	r3, [r7, #8]
 8018bc8:	68d8      	ldr	r0, [r3, #12]
 8018bca:	68bb      	ldr	r3, [r7, #8]
 8018bcc:	691c      	ldr	r4, [r3, #16]
 8018bce:	68bb      	ldr	r3, [r7, #8]
 8018bd0:	681b      	ldr	r3, [r3, #0]
 8018bd2:	68ba      	ldr	r2, [r7, #8]
 8018bd4:	6952      	ldr	r2, [r2, #20]
 8018bd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018bd8:	9105      	str	r1, [sp, #20]
 8018bda:	6a39      	ldr	r1, [r7, #32]
 8018bdc:	9104      	str	r1, [sp, #16]
 8018bde:	6839      	ldr	r1, [r7, #0]
 8018be0:	9103      	str	r1, [sp, #12]
 8018be2:	6879      	ldr	r1, [r7, #4]
 8018be4:	9102      	str	r1, [sp, #8]
 8018be6:	9201      	str	r2, [sp, #4]
 8018be8:	9300      	str	r3, [sp, #0]
 8018bea:	4623      	mov	r3, r4
 8018bec:	4602      	mov	r2, r0
 8018bee:	4904      	ldr	r1, [pc, #16]	; (8018c00 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8018bf0:	68f8      	ldr	r0, [r7, #12]
 8018bf2:	f000 f807 	bl	8018c04 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8018bf6:	bf00      	nop
 8018bf8:	3714      	adds	r7, #20
 8018bfa:	46bd      	mov	sp, r7
 8018bfc:	bd90      	pop	{r4, r7, pc}
 8018bfe:	bf00      	nop
 8018c00:	08028a2c 	.word	0x08028a2c

08018c04 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportFailure(const char* message, const char* allocFile, size_t allocLine, size_t allocSize, TestMemoryAllocator* allocAllocator, const char* freeFile, size_t freeLine,
        TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8018c04:	b590      	push	{r4, r7, lr}
 8018c06:	b087      	sub	sp, #28
 8018c08:	af02      	add	r7, sp, #8
 8018c0a:	60f8      	str	r0, [r7, #12]
 8018c0c:	60b9      	str	r1, [r7, #8]
 8018c0e:	607a      	str	r2, [r7, #4]
 8018c10:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("%s", message);
 8018c12:	68fb      	ldr	r3, [r7, #12]
 8018c14:	3308      	adds	r3, #8
 8018c16:	68ba      	ldr	r2, [r7, #8]
 8018c18:	4910      	ldr	r1, [pc, #64]	; (8018c5c <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure+0x58>)
 8018c1a:	4618      	mov	r0, r3
 8018c1c:	f7ff fcf0 	bl	8018600 <_ZN18SimpleStringBuffer3addEPKcz>
    addAllocationLocation(allocFile, allocLine, allocSize, allocAllocator);
 8018c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c22:	9300      	str	r3, [sp, #0]
 8018c24:	6a3b      	ldr	r3, [r7, #32]
 8018c26:	683a      	ldr	r2, [r7, #0]
 8018c28:	6879      	ldr	r1, [r7, #4]
 8018c2a:	68f8      	ldr	r0, [r7, #12]
 8018c2c:	f7ff fe36 	bl	801889c <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>
    addDeallocationLocation(freeFile, freeLine, freeAllocator);
 8018c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018c34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018c36:	68f8      	ldr	r0, [r7, #12]
 8018c38:	f7ff fe52 	bl	80188e0 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>
    reporter->fail(toString());
 8018c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018c3e:	681b      	ldr	r3, [r3, #0]
 8018c40:	3308      	adds	r3, #8
 8018c42:	681c      	ldr	r4, [r3, #0]
 8018c44:	68f8      	ldr	r0, [r7, #12]
 8018c46:	f000 f80b 	bl	8018c60 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8018c4a:	4603      	mov	r3, r0
 8018c4c:	4619      	mov	r1, r3
 8018c4e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018c50:	47a0      	blx	r4
}
 8018c52:	bf00      	nop
 8018c54:	3714      	adds	r7, #20
 8018c56:	46bd      	mov	sp, r7
 8018c58:	bd90      	pop	{r4, r7, pc}
 8018c5a:	bf00      	nop
 8018c5c:	08028a58 	.word	0x08028a58

08018c60 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>:


char* MemoryLeakOutputStringBuffer::toString()
{
 8018c60:	b580      	push	{r7, lr}
 8018c62:	b082      	sub	sp, #8
 8018c64:	af00      	add	r7, sp, #0
 8018c66:	6078      	str	r0, [r7, #4]
    return outputBuffer_.toString();
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	3308      	adds	r3, #8
 8018c6c:	4618      	mov	r0, r3
 8018c6e:	f7ff fdad 	bl	80187cc <_ZN18SimpleStringBuffer8toStringEv>
 8018c72:	4603      	mov	r3, r0
}
 8018c74:	4618      	mov	r0, r3
 8018c76:	3708      	adds	r7, #8
 8018c78:	46bd      	mov	sp, r7
 8018c7a:	bd80      	pop	{r7, pc}

08018c7c <_ZN28MemoryLeakOutputStringBuffer5clearEv>:

void MemoryLeakOutputStringBuffer::clear()
{
 8018c7c:	b580      	push	{r7, lr}
 8018c7e:	b082      	sub	sp, #8
 8018c80:	af00      	add	r7, sp, #0
 8018c82:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	3308      	adds	r3, #8
 8018c88:	4618      	mov	r0, r3
 8018c8a:	f7ff fca7 	bl	80185dc <_ZN18SimpleStringBuffer5clearEv>
}
 8018c8e:	bf00      	nop
 8018c90:	3708      	adds	r7, #8
 8018c92:	46bd      	mov	sp, r7
 8018c94:	bd80      	pop	{r7, pc}

08018c96 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>:

////////////////////////

void MemoryLeakDetectorNode::init(char* memory, unsigned number, size_t size, TestMemoryAllocator* allocator, MemLeakPeriod period, unsigned char allocation_stage, const char* file, size_t line)
{
 8018c96:	b480      	push	{r7}
 8018c98:	b085      	sub	sp, #20
 8018c9a:	af00      	add	r7, sp, #0
 8018c9c:	60f8      	str	r0, [r7, #12]
 8018c9e:	60b9      	str	r1, [r7, #8]
 8018ca0:	607a      	str	r2, [r7, #4]
 8018ca2:	603b      	str	r3, [r7, #0]
    number_ = number;
 8018ca4:	68fb      	ldr	r3, [r7, #12]
 8018ca6:	687a      	ldr	r2, [r7, #4]
 8018ca8:	605a      	str	r2, [r3, #4]
    memory_ = memory;
 8018caa:	68fb      	ldr	r3, [r7, #12]
 8018cac:	68ba      	ldr	r2, [r7, #8]
 8018cae:	609a      	str	r2, [r3, #8]
    size_ = size;
 8018cb0:	68fb      	ldr	r3, [r7, #12]
 8018cb2:	683a      	ldr	r2, [r7, #0]
 8018cb4:	601a      	str	r2, [r3, #0]
    allocator_ = allocator;
 8018cb6:	68fb      	ldr	r3, [r7, #12]
 8018cb8:	69ba      	ldr	r2, [r7, #24]
 8018cba:	615a      	str	r2, [r3, #20]
    period_ = period;
 8018cbc:	68fb      	ldr	r3, [r7, #12]
 8018cbe:	7f3a      	ldrb	r2, [r7, #28]
 8018cc0:	761a      	strb	r2, [r3, #24]
    allocation_stage_ = allocation_stage;
 8018cc2:	68fb      	ldr	r3, [r7, #12]
 8018cc4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8018cc8:	765a      	strb	r2, [r3, #25]
    file_ = file;
 8018cca:	68fb      	ldr	r3, [r7, #12]
 8018ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018cce:	60da      	str	r2, [r3, #12]
    line_ = line;
 8018cd0:	68fb      	ldr	r3, [r7, #12]
 8018cd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018cd4:	611a      	str	r2, [r3, #16]
}
 8018cd6:	bf00      	nop
 8018cd8:	3714      	adds	r7, #20
 8018cda:	46bd      	mov	sp, r7
 8018cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ce0:	4770      	bx	lr

08018ce2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>:

///////////////////////

bool MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8018ce2:	b480      	push	{r7}
 8018ce4:	b085      	sub	sp, #20
 8018ce6:	af00      	add	r7, sp, #0
 8018ce8:	60f8      	str	r0, [r7, #12]
 8018cea:	60b9      	str	r1, [r7, #8]
 8018cec:	4613      	mov	r3, r2
 8018cee:	71fb      	strb	r3, [r7, #7]
    return period == mem_leak_period_all || node->period_ == period || (node->period_ != mem_leak_period_disabled && period == mem_leak_period_enabled);
 8018cf0:	79fb      	ldrb	r3, [r7, #7]
 8018cf2:	2b00      	cmp	r3, #0
 8018cf4:	d00b      	beq.n	8018d0e <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 8018cf6:	68bb      	ldr	r3, [r7, #8]
 8018cf8:	7e1b      	ldrb	r3, [r3, #24]
 8018cfa:	79fa      	ldrb	r2, [r7, #7]
 8018cfc:	429a      	cmp	r2, r3
 8018cfe:	d006      	beq.n	8018d0e <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 8018d00:	68bb      	ldr	r3, [r7, #8]
 8018d02:	7e1b      	ldrb	r3, [r3, #24]
 8018d04:	2b01      	cmp	r3, #1
 8018d06:	d004      	beq.n	8018d12 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 8018d08:	79fb      	ldrb	r3, [r7, #7]
 8018d0a:	2b02      	cmp	r3, #2
 8018d0c:	d101      	bne.n	8018d12 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 8018d0e:	2301      	movs	r3, #1
 8018d10:	e000      	b.n	8018d14 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x32>
 8018d12:	2300      	movs	r3, #0
}
 8018d14:	4618      	mov	r0, r3
 8018d16:	3714      	adds	r7, #20
 8018d18:	46bd      	mov	sp, r7
 8018d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d1e:	4770      	bx	lr

08018d20 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>:
        cur = cur->next_;
    }
}

void MemoryLeakDetectorList::addNewNode(MemoryLeakDetectorNode* node)
{
 8018d20:	b480      	push	{r7}
 8018d22:	b083      	sub	sp, #12
 8018d24:	af00      	add	r7, sp, #0
 8018d26:	6078      	str	r0, [r7, #4]
 8018d28:	6039      	str	r1, [r7, #0]
    node->next_ = head_;
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	681a      	ldr	r2, [r3, #0]
 8018d2e:	683b      	ldr	r3, [r7, #0]
 8018d30:	61da      	str	r2, [r3, #28]
    head_ = node;
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	683a      	ldr	r2, [r7, #0]
 8018d36:	601a      	str	r2, [r3, #0]
}
 8018d38:	bf00      	nop
 8018d3a:	370c      	adds	r7, #12
 8018d3c:	46bd      	mov	sp, r7
 8018d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d42:	4770      	bx	lr

08018d44 <_ZN22MemoryLeakDetectorList10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::removeNode(char* memory)
{
 8018d44:	b480      	push	{r7}
 8018d46:	b085      	sub	sp, #20
 8018d48:	af00      	add	r7, sp, #0
 8018d4a:	6078      	str	r0, [r7, #4]
 8018d4c:	6039      	str	r1, [r7, #0]
    MemoryLeakDetectorNode* cur = head_;
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	681b      	ldr	r3, [r3, #0]
 8018d52:	60fb      	str	r3, [r7, #12]
    MemoryLeakDetectorNode* prev = NULLPTR;
 8018d54:	2300      	movs	r3, #0
 8018d56:	60bb      	str	r3, [r7, #8]
    while (cur) {
 8018d58:	68fb      	ldr	r3, [r7, #12]
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	d019      	beq.n	8018d92 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x4e>
        if (cur->memory_ == memory) {
 8018d5e:	68fb      	ldr	r3, [r7, #12]
 8018d60:	689b      	ldr	r3, [r3, #8]
 8018d62:	683a      	ldr	r2, [r7, #0]
 8018d64:	429a      	cmp	r2, r3
 8018d66:	d10e      	bne.n	8018d86 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x42>
            if (prev) {
 8018d68:	68bb      	ldr	r3, [r7, #8]
 8018d6a:	2b00      	cmp	r3, #0
 8018d6c:	d005      	beq.n	8018d7a <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x36>
                prev->next_ = cur->next_;
 8018d6e:	68fb      	ldr	r3, [r7, #12]
 8018d70:	69da      	ldr	r2, [r3, #28]
 8018d72:	68bb      	ldr	r3, [r7, #8]
 8018d74:	61da      	str	r2, [r3, #28]
                return cur;
 8018d76:	68fb      	ldr	r3, [r7, #12]
 8018d78:	e00c      	b.n	8018d94 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
            else {
                head_ = cur->next_;
 8018d7a:	68fb      	ldr	r3, [r7, #12]
 8018d7c:	69da      	ldr	r2, [r3, #28]
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	601a      	str	r2, [r3, #0]
                return cur;
 8018d82:	68fb      	ldr	r3, [r7, #12]
 8018d84:	e006      	b.n	8018d94 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
        }
        prev = cur;
 8018d86:	68fb      	ldr	r3, [r7, #12]
 8018d88:	60bb      	str	r3, [r7, #8]
        cur = cur->next_;
 8018d8a:	68fb      	ldr	r3, [r7, #12]
 8018d8c:	69db      	ldr	r3, [r3, #28]
 8018d8e:	60fb      	str	r3, [r7, #12]
    while (cur) {
 8018d90:	e7e2      	b.n	8018d58 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x14>
    }
    return NULLPTR;
 8018d92:	2300      	movs	r3, #0
}
 8018d94:	4618      	mov	r0, r3
 8018d96:	3714      	adds	r7, #20
 8018d98:	46bd      	mov	sp, r7
 8018d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d9e:	4770      	bx	lr

08018da0 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::retrieveNode(char* memory)
{
 8018da0:	b480      	push	{r7}
 8018da2:	b085      	sub	sp, #20
 8018da4:	af00      	add	r7, sp, #0
 8018da6:	6078      	str	r0, [r7, #4]
 8018da8:	6039      	str	r1, [r7, #0]
  MemoryLeakDetectorNode* cur = head_;
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	681b      	ldr	r3, [r3, #0]
 8018dae:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8018db0:	68fb      	ldr	r3, [r7, #12]
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	d00a      	beq.n	8018dcc <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2c>
    if (cur->memory_ == memory)
 8018db6:	68fb      	ldr	r3, [r7, #12]
 8018db8:	689b      	ldr	r3, [r3, #8]
 8018dba:	683a      	ldr	r2, [r7, #0]
 8018dbc:	429a      	cmp	r2, r3
 8018dbe:	d101      	bne.n	8018dc4 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x24>
      return cur;
 8018dc0:	68fb      	ldr	r3, [r7, #12]
 8018dc2:	e004      	b.n	8018dce <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2e>
    cur = cur->next_;
 8018dc4:	68fb      	ldr	r3, [r7, #12]
 8018dc6:	69db      	ldr	r3, [r3, #28]
 8018dc8:	60fb      	str	r3, [r7, #12]
  while (cur) {
 8018dca:	e7f1      	b.n	8018db0 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x10>
  }
  return NULLPTR;
 8018dcc:	2300      	movs	r3, #0
}
 8018dce:	4618      	mov	r0, r3
 8018dd0:	3714      	adds	r7, #20
 8018dd2:	46bd      	mov	sp, r7
 8018dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dd8:	4770      	bx	lr

08018dda <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8018dda:	b580      	push	{r7, lr}
 8018ddc:	b086      	sub	sp, #24
 8018dde:	af00      	add	r7, sp, #0
 8018de0:	60f8      	str	r0, [r7, #12]
 8018de2:	60b9      	str	r1, [r7, #8]
 8018de4:	4613      	mov	r3, r2
 8018de6:	71fb      	strb	r3, [r7, #7]
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8018de8:	68bb      	ldr	r3, [r7, #8]
 8018dea:	617b      	str	r3, [r7, #20]
 8018dec:	697b      	ldr	r3, [r7, #20]
 8018dee:	2b00      	cmp	r3, #0
 8018df0:	d00e      	beq.n	8018e10 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x36>
        if (isInPeriod(cur, period)) return cur;
 8018df2:	79fb      	ldrb	r3, [r7, #7]
 8018df4:	461a      	mov	r2, r3
 8018df6:	6979      	ldr	r1, [r7, #20]
 8018df8:	68f8      	ldr	r0, [r7, #12]
 8018dfa:	f7ff ff72 	bl	8018ce2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8018dfe:	4603      	mov	r3, r0
 8018e00:	2b00      	cmp	r3, #0
 8018e02:	d001      	beq.n	8018e08 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2e>
 8018e04:	697b      	ldr	r3, [r7, #20]
 8018e06:	e004      	b.n	8018e12 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x38>
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8018e08:	697b      	ldr	r3, [r7, #20]
 8018e0a:	69db      	ldr	r3, [r3, #28]
 8018e0c:	617b      	str	r3, [r7, #20]
 8018e0e:	e7ed      	b.n	8018dec <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x12>
    return NULLPTR;
 8018e10:	2300      	movs	r3, #0
}
 8018e12:	4618      	mov	r0, r3
 8018e14:	3718      	adds	r7, #24
 8018e16:	46bd      	mov	sp, r7
 8018e18:	bd80      	pop	{r7, pc}

08018e1a <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>:
        if (isInAllocationStage(cur, allocation_stage)) return cur;
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod period)
{
 8018e1a:	b580      	push	{r7, lr}
 8018e1c:	b082      	sub	sp, #8
 8018e1e:	af00      	add	r7, sp, #0
 8018e20:	6078      	str	r0, [r7, #4]
 8018e22:	460b      	mov	r3, r1
 8018e24:	70fb      	strb	r3, [r7, #3]
    return getLeakFrom(head_, period);
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	681b      	ldr	r3, [r3, #0]
 8018e2a:	78fa      	ldrb	r2, [r7, #3]
 8018e2c:	4619      	mov	r1, r3
 8018e2e:	6878      	ldr	r0, [r7, #4]
 8018e30:	f7ff ffd3 	bl	8018dda <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8018e34:	4603      	mov	r3, r0
}
 8018e36:	4618      	mov	r0, r3
 8018e38:	3708      	adds	r7, #8
 8018e3a:	46bd      	mov	sp, r7
 8018e3c:	bd80      	pop	{r7, pc}

08018e3e <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
{
    return getLeakForAllocationStageFrom(head_, allocation_stage);
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8018e3e:	b580      	push	{r7, lr}
 8018e40:	b084      	sub	sp, #16
 8018e42:	af00      	add	r7, sp, #0
 8018e44:	60f8      	str	r0, [r7, #12]
 8018e46:	60b9      	str	r1, [r7, #8]
 8018e48:	4613      	mov	r3, r2
 8018e4a:	71fb      	strb	r3, [r7, #7]
    return getLeakFrom(node->next_, period);
 8018e4c:	68bb      	ldr	r3, [r7, #8]
 8018e4e:	69db      	ldr	r3, [r3, #28]
 8018e50:	79fa      	ldrb	r2, [r7, #7]
 8018e52:	4619      	mov	r1, r3
 8018e54:	68f8      	ldr	r0, [r7, #12]
 8018e56:	f7ff ffc0 	bl	8018dda <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8018e5a:	4603      	mov	r3, r0
}
 8018e5c:	4618      	mov	r0, r3
 8018e5e:	3710      	adds	r7, #16
 8018e60:	46bd      	mov	sp, r7
 8018e62:	bd80      	pop	{r7, pc}

08018e64 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>:
}



size_t MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod period)
{
 8018e64:	b580      	push	{r7, lr}
 8018e66:	b084      	sub	sp, #16
 8018e68:	af00      	add	r7, sp, #0
 8018e6a:	6078      	str	r0, [r7, #4]
 8018e6c:	460b      	mov	r3, r1
 8018e6e:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8018e70:	2300      	movs	r3, #0
 8018e72:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	681b      	ldr	r3, [r3, #0]
 8018e78:	60bb      	str	r3, [r7, #8]
 8018e7a:	68bb      	ldr	r3, [r7, #8]
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	d00f      	beq.n	8018ea0 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x3c>
        if (isInPeriod(node, period)) total_leaks++;
 8018e80:	78fb      	ldrb	r3, [r7, #3]
 8018e82:	461a      	mov	r2, r3
 8018e84:	68b9      	ldr	r1, [r7, #8]
 8018e86:	6878      	ldr	r0, [r7, #4]
 8018e88:	f7ff ff2b 	bl	8018ce2 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8018e8c:	4603      	mov	r3, r0
 8018e8e:	2b00      	cmp	r3, #0
 8018e90:	d002      	beq.n	8018e98 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x34>
 8018e92:	68fb      	ldr	r3, [r7, #12]
 8018e94:	3301      	adds	r3, #1
 8018e96:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8018e98:	68bb      	ldr	r3, [r7, #8]
 8018e9a:	69db      	ldr	r3, [r3, #28]
 8018e9c:	60bb      	str	r3, [r7, #8]
 8018e9e:	e7ec      	b.n	8018e7a <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x16>
    }
    return total_leaks;
 8018ea0:	68fb      	ldr	r3, [r7, #12]
}
 8018ea2:	4618      	mov	r0, r3
 8018ea4:	3710      	adds	r7, #16
 8018ea6:	46bd      	mov	sp, r7
 8018ea8:	bd80      	pop	{r7, pc}
	...

08018eac <_ZN23MemoryLeakDetectorTable4hashEPc>:

/////////////////////////////////////////////////////////////

unsigned long MemoryLeakDetectorTable::hash(char* memory)
{
 8018eac:	b480      	push	{r7}
 8018eae:	b083      	sub	sp, #12
 8018eb0:	af00      	add	r7, sp, #0
 8018eb2:	6078      	str	r0, [r7, #4]
 8018eb4:	6039      	str	r1, [r7, #0]
    return (unsigned long)((size_t)memory % hash_prime);
 8018eb6:	6839      	ldr	r1, [r7, #0]
 8018eb8:	4b09      	ldr	r3, [pc, #36]	; (8018ee0 <_ZN23MemoryLeakDetectorTable4hashEPc+0x34>)
 8018eba:	fba3 2301 	umull	r2, r3, r3, r1
 8018ebe:	1aca      	subs	r2, r1, r3
 8018ec0:	0852      	lsrs	r2, r2, #1
 8018ec2:	4413      	add	r3, r2
 8018ec4:	099a      	lsrs	r2, r3, #6
 8018ec6:	4613      	mov	r3, r2
 8018ec8:	00db      	lsls	r3, r3, #3
 8018eca:	4413      	add	r3, r2
 8018ecc:	00db      	lsls	r3, r3, #3
 8018ece:	4413      	add	r3, r2
 8018ed0:	1aca      	subs	r2, r1, r3
 8018ed2:	4613      	mov	r3, r2
}
 8018ed4:	4618      	mov	r0, r3
 8018ed6:	370c      	adds	r7, #12
 8018ed8:	46bd      	mov	sp, r7
 8018eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ede:	4770      	bx	lr
 8018ee0:	c0e07039 	.word	0xc0e07039

08018ee4 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>:
    for (int i = 0; i < hash_prime; i++)
        table_[i].clearAllAccounting(period);
}

void MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode* node)
{
 8018ee4:	b580      	push	{r7, lr}
 8018ee6:	b082      	sub	sp, #8
 8018ee8:	af00      	add	r7, sp, #0
 8018eea:	6078      	str	r0, [r7, #4]
 8018eec:	6039      	str	r1, [r7, #0]
    table_[hash(node->memory_)].addNewNode(node);
 8018eee:	683b      	ldr	r3, [r7, #0]
 8018ef0:	689b      	ldr	r3, [r3, #8]
 8018ef2:	4619      	mov	r1, r3
 8018ef4:	6878      	ldr	r0, [r7, #4]
 8018ef6:	f7ff ffd9 	bl	8018eac <_ZN23MemoryLeakDetectorTable4hashEPc>
 8018efa:	4603      	mov	r3, r0
 8018efc:	009b      	lsls	r3, r3, #2
 8018efe:	687a      	ldr	r2, [r7, #4]
 8018f00:	4413      	add	r3, r2
 8018f02:	6839      	ldr	r1, [r7, #0]
 8018f04:	4618      	mov	r0, r3
 8018f06:	f7ff ff0b 	bl	8018d20 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>
}
 8018f0a:	bf00      	nop
 8018f0c:	3708      	adds	r7, #8
 8018f0e:	46bd      	mov	sp, r7
 8018f10:	bd80      	pop	{r7, pc}

08018f12 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::removeNode(char* memory)
{
 8018f12:	b580      	push	{r7, lr}
 8018f14:	b082      	sub	sp, #8
 8018f16:	af00      	add	r7, sp, #0
 8018f18:	6078      	str	r0, [r7, #4]
 8018f1a:	6039      	str	r1, [r7, #0]
    return table_[hash(memory)].removeNode(memory);
 8018f1c:	6839      	ldr	r1, [r7, #0]
 8018f1e:	6878      	ldr	r0, [r7, #4]
 8018f20:	f7ff ffc4 	bl	8018eac <_ZN23MemoryLeakDetectorTable4hashEPc>
 8018f24:	4603      	mov	r3, r0
 8018f26:	009b      	lsls	r3, r3, #2
 8018f28:	687a      	ldr	r2, [r7, #4]
 8018f2a:	4413      	add	r3, r2
 8018f2c:	6839      	ldr	r1, [r7, #0]
 8018f2e:	4618      	mov	r0, r3
 8018f30:	f7ff ff08 	bl	8018d44 <_ZN22MemoryLeakDetectorList10removeNodeEPc>
 8018f34:	4603      	mov	r3, r0
}
 8018f36:	4618      	mov	r0, r3
 8018f38:	3708      	adds	r7, #8
 8018f3a:	46bd      	mov	sp, r7
 8018f3c:	bd80      	pop	{r7, pc}

08018f3e <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::retrieveNode(char* memory)
{
 8018f3e:	b580      	push	{r7, lr}
 8018f40:	b082      	sub	sp, #8
 8018f42:	af00      	add	r7, sp, #0
 8018f44:	6078      	str	r0, [r7, #4]
 8018f46:	6039      	str	r1, [r7, #0]
  return table_[hash(memory)].retrieveNode(memory);
 8018f48:	6839      	ldr	r1, [r7, #0]
 8018f4a:	6878      	ldr	r0, [r7, #4]
 8018f4c:	f7ff ffae 	bl	8018eac <_ZN23MemoryLeakDetectorTable4hashEPc>
 8018f50:	4603      	mov	r3, r0
 8018f52:	009b      	lsls	r3, r3, #2
 8018f54:	687a      	ldr	r2, [r7, #4]
 8018f56:	4413      	add	r3, r2
 8018f58:	6839      	ldr	r1, [r7, #0]
 8018f5a:	4618      	mov	r0, r3
 8018f5c:	f7ff ff20 	bl	8018da0 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>
 8018f60:	4603      	mov	r3, r0
}
 8018f62:	4618      	mov	r0, r3
 8018f64:	3708      	adds	r7, #8
 8018f66:	46bd      	mov	sp, r7
 8018f68:	bd80      	pop	{r7, pc}

08018f6a <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod period)
{
 8018f6a:	b580      	push	{r7, lr}
 8018f6c:	b084      	sub	sp, #16
 8018f6e:	af00      	add	r7, sp, #0
 8018f70:	6078      	str	r0, [r7, #4]
 8018f72:	460b      	mov	r3, r1
 8018f74:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8018f76:	2300      	movs	r3, #0
 8018f78:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8018f7a:	2300      	movs	r3, #0
 8018f7c:	60bb      	str	r3, [r7, #8]
 8018f7e:	68bb      	ldr	r3, [r7, #8]
 8018f80:	2b48      	cmp	r3, #72	; 0x48
 8018f82:	dc10      	bgt.n	8018fa6 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x3c>
        total_leaks += table_[i].getTotalLeaks(period);
 8018f84:	68bb      	ldr	r3, [r7, #8]
 8018f86:	009b      	lsls	r3, r3, #2
 8018f88:	687a      	ldr	r2, [r7, #4]
 8018f8a:	4413      	add	r3, r2
 8018f8c:	78fa      	ldrb	r2, [r7, #3]
 8018f8e:	4611      	mov	r1, r2
 8018f90:	4618      	mov	r0, r3
 8018f92:	f7ff ff67 	bl	8018e64 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>
 8018f96:	4602      	mov	r2, r0
 8018f98:	68fb      	ldr	r3, [r7, #12]
 8018f9a:	4413      	add	r3, r2
 8018f9c:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8018f9e:	68bb      	ldr	r3, [r7, #8]
 8018fa0:	3301      	adds	r3, #1
 8018fa2:	60bb      	str	r3, [r7, #8]
 8018fa4:	e7eb      	b.n	8018f7e <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x14>
    return total_leaks;
 8018fa6:	68fb      	ldr	r3, [r7, #12]
}
 8018fa8:	4618      	mov	r0, r3
 8018faa:	3710      	adds	r7, #16
 8018fac:	46bd      	mov	sp, r7
 8018fae:	bd80      	pop	{r7, pc}

08018fb0 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod period)
{
 8018fb0:	b580      	push	{r7, lr}
 8018fb2:	b084      	sub	sp, #16
 8018fb4:	af00      	add	r7, sp, #0
 8018fb6:	6078      	str	r0, [r7, #4]
 8018fb8:	460b      	mov	r3, r1
 8018fba:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < hash_prime; i++) {
 8018fbc:	2300      	movs	r3, #0
 8018fbe:	60fb      	str	r3, [r7, #12]
 8018fc0:	68fb      	ldr	r3, [r7, #12]
 8018fc2:	2b48      	cmp	r3, #72	; 0x48
 8018fc4:	dc12      	bgt.n	8018fec <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3c>
        MemoryLeakDetectorNode* node = table_[i].getFirstLeak(period);
 8018fc6:	68fb      	ldr	r3, [r7, #12]
 8018fc8:	009b      	lsls	r3, r3, #2
 8018fca:	687a      	ldr	r2, [r7, #4]
 8018fcc:	4413      	add	r3, r2
 8018fce:	78fa      	ldrb	r2, [r7, #3]
 8018fd0:	4611      	mov	r1, r2
 8018fd2:	4618      	mov	r0, r3
 8018fd4:	f7ff ff21 	bl	8018e1a <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 8018fd8:	60b8      	str	r0, [r7, #8]
        if (node) return node;
 8018fda:	68bb      	ldr	r3, [r7, #8]
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	d001      	beq.n	8018fe4 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x34>
 8018fe0:	68bb      	ldr	r3, [r7, #8]
 8018fe2:	e004      	b.n	8018fee <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3e>
    for (int i = 0; i < hash_prime; i++) {
 8018fe4:	68fb      	ldr	r3, [r7, #12]
 8018fe6:	3301      	adds	r3, #1
 8018fe8:	60fb      	str	r3, [r7, #12]
 8018fea:	e7e9      	b.n	8018fc0 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x10>
    }
    return NULLPTR;
 8018fec:	2300      	movs	r3, #0
}
 8018fee:	4618      	mov	r0, r3
 8018ff0:	3710      	adds	r7, #16
 8018ff2:	46bd      	mov	sp, r7
 8018ff4:	bd80      	pop	{r7, pc}

08018ff6 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
    }
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode* leak, MemLeakPeriod period)
{
 8018ff6:	b580      	push	{r7, lr}
 8018ff8:	b086      	sub	sp, #24
 8018ffa:	af00      	add	r7, sp, #0
 8018ffc:	60f8      	str	r0, [r7, #12]
 8018ffe:	60b9      	str	r1, [r7, #8]
 8019000:	4613      	mov	r3, r2
 8019002:	71fb      	strb	r3, [r7, #7]
    unsigned long i = hash(leak->memory_);
 8019004:	68bb      	ldr	r3, [r7, #8]
 8019006:	689b      	ldr	r3, [r3, #8]
 8019008:	4619      	mov	r1, r3
 801900a:	68f8      	ldr	r0, [r7, #12]
 801900c:	f7ff ff4e 	bl	8018eac <_ZN23MemoryLeakDetectorTable4hashEPc>
 8019010:	6178      	str	r0, [r7, #20]
    MemoryLeakDetectorNode* node = table_[i].getNextLeak(leak, period);
 8019012:	697b      	ldr	r3, [r7, #20]
 8019014:	009b      	lsls	r3, r3, #2
 8019016:	68fa      	ldr	r2, [r7, #12]
 8019018:	4413      	add	r3, r2
 801901a:	79fa      	ldrb	r2, [r7, #7]
 801901c:	68b9      	ldr	r1, [r7, #8]
 801901e:	4618      	mov	r0, r3
 8019020:	f7ff ff0d 	bl	8018e3e <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8019024:	6138      	str	r0, [r7, #16]
    if (node) return node;
 8019026:	693b      	ldr	r3, [r7, #16]
 8019028:	2b00      	cmp	r3, #0
 801902a:	d001      	beq.n	8019030 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x3a>
 801902c:	693b      	ldr	r3, [r7, #16]
 801902e:	e019      	b.n	8019064 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>

    for (++i; i < hash_prime; i++) {
 8019030:	697b      	ldr	r3, [r7, #20]
 8019032:	3301      	adds	r3, #1
 8019034:	617b      	str	r3, [r7, #20]
 8019036:	697b      	ldr	r3, [r7, #20]
 8019038:	2b48      	cmp	r3, #72	; 0x48
 801903a:	d812      	bhi.n	8019062 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6c>
        node = table_[i].getFirstLeak(period);
 801903c:	697b      	ldr	r3, [r7, #20]
 801903e:	009b      	lsls	r3, r3, #2
 8019040:	68fa      	ldr	r2, [r7, #12]
 8019042:	4413      	add	r3, r2
 8019044:	79fa      	ldrb	r2, [r7, #7]
 8019046:	4611      	mov	r1, r2
 8019048:	4618      	mov	r0, r3
 801904a:	f7ff fee6 	bl	8018e1a <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 801904e:	6138      	str	r0, [r7, #16]
        if (node) return node;
 8019050:	693b      	ldr	r3, [r7, #16]
 8019052:	2b00      	cmp	r3, #0
 8019054:	d001      	beq.n	801905a <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x64>
 8019056:	693b      	ldr	r3, [r7, #16]
 8019058:	e004      	b.n	8019064 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>
    for (++i; i < hash_prime; i++) {
 801905a:	697b      	ldr	r3, [r7, #20]
 801905c:	3301      	adds	r3, #1
 801905e:	617b      	str	r3, [r7, #20]
 8019060:	e7e9      	b.n	8019036 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x40>
    }
    return NULLPTR;
 8019062:	2300      	movs	r3, #0
}
 8019064:	4618      	mov	r0, r3
 8019066:	3718      	adds	r7, #24
 8019068:	46bd      	mov	sp, r7
 801906a:	bd80      	pop	{r7, pc}

0801906c <_ZN23MemoryLeakDetectorTableC1Ev>:

private:
    MemoryLeakDetectorNode* head_;
};

struct MemoryLeakDetectorTable
 801906c:	b5b0      	push	{r4, r5, r7, lr}
 801906e:	b082      	sub	sp, #8
 8019070:	af00      	add	r7, sp, #0
 8019072:	6078      	str	r0, [r7, #4]
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	2448      	movs	r4, #72	; 0x48
 8019078:	461d      	mov	r5, r3
 801907a:	2c00      	cmp	r4, #0
 801907c:	db05      	blt.n	801908a <_ZN23MemoryLeakDetectorTableC1Ev+0x1e>
 801907e:	4628      	mov	r0, r5
 8019080:	f7ff fa84 	bl	801858c <_ZN22MemoryLeakDetectorListC1Ev>
 8019084:	3504      	adds	r5, #4
 8019086:	3c01      	subs	r4, #1
 8019088:	e7f7      	b.n	801907a <_ZN23MemoryLeakDetectorTableC1Ev+0xe>
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	4618      	mov	r0, r3
 801908e:	3708      	adds	r7, #8
 8019090:	46bd      	mov	sp, r7
 8019092:	bdb0      	pop	{r4, r5, r7, pc}

08019094 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>:
    return NULLPTR;
}

/////////////////////////////////////////////////////////////

MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure* reporter)
 8019094:	b590      	push	{r4, r7, lr}
 8019096:	b083      	sub	sp, #12
 8019098:	af00      	add	r7, sp, #0
 801909a:	6078      	str	r0, [r7, #4]
 801909c:	6039      	str	r1, [r7, #0]
 801909e:	4a1d      	ldr	r2, [pc, #116]	; (8019114 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x80>)
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	601a      	str	r2, [r3, #0]
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	330c      	adds	r3, #12
 80190a8:	4618      	mov	r0, r3
 80190aa:	f7ff fbe3 	bl	8018874 <_ZN28MemoryLeakOutputStringBufferC1Ev>
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80190b4:	331c      	adds	r3, #28
 80190b6:	4618      	mov	r0, r3
 80190b8:	f7ff ffd8 	bl	801906c <_ZN23MemoryLeakDetectorTableC1Ev>
{
    doAllocationTypeChecking_ = true;
 80190bc:	687b      	ldr	r3, [r7, #4]
 80190be:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80190c2:	2201      	movs	r2, #1
 80190c4:	701a      	strb	r2, [r3, #0]
    allocationSequenceNumber_ = 1;
 80190c6:	687b      	ldr	r3, [r7, #4]
 80190c8:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80190cc:	3304      	adds	r3, #4
 80190ce:	2201      	movs	r2, #1
 80190d0:	601a      	str	r2, [r3, #0]
    current_period_ = mem_leak_period_disabled;
 80190d2:	687b      	ldr	r3, [r7, #4]
 80190d4:	2201      	movs	r2, #1
 80190d6:	721a      	strb	r2, [r3, #8]
    current_allocation_stage_ = 0;
 80190d8:	687b      	ldr	r3, [r7, #4]
 80190da:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80190de:	3308      	adds	r3, #8
 80190e0:	2200      	movs	r2, #0
 80190e2:	701a      	strb	r2, [r3, #0]
    reporter_ = reporter;
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	683a      	ldr	r2, [r7, #0]
 80190e8:	605a      	str	r2, [r3, #4]
    mutex_ = new SimpleMutex;
 80190ea:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 80190ee:	490a      	ldr	r1, [pc, #40]	; (8019118 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x84>)
 80190f0:	2004      	movs	r0, #4
 80190f2:	f7f3 fb17 	bl	800c724 <_ZnwjPKci>
 80190f6:	4604      	mov	r4, r0
 80190f8:	4620      	mov	r0, r4
 80190fa:	f7f5 fbe7 	bl	800e8cc <_ZN11SimpleMutexC1Ev>
 80190fe:	687b      	ldr	r3, [r7, #4]
 8019100:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8019104:	330c      	adds	r3, #12
 8019106:	601c      	str	r4, [r3, #0]
}
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	4618      	mov	r0, r3
 801910c:	370c      	adds	r7, #12
 801910e:	46bd      	mov	sp, r7
 8019110:	bd90      	pop	{r4, r7, pc}
 8019112:	bf00      	nop
 8019114:	0802baa8 	.word	0x0802baa8
 8019118:	08028a5c 	.word	0x08028a5c

0801911c <_ZN18MemoryLeakDetectorD1Ev>:

MemoryLeakDetector::~MemoryLeakDetector()
 801911c:	b590      	push	{r4, r7, lr}
 801911e:	b083      	sub	sp, #12
 8019120:	af00      	add	r7, sp, #0
 8019122:	6078      	str	r0, [r7, #4]
 8019124:	4a0e      	ldr	r2, [pc, #56]	; (8019160 <_ZN18MemoryLeakDetectorD1Ev+0x44>)
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	601a      	str	r2, [r3, #0]
{
    if (mutex_)
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8019130:	330c      	adds	r3, #12
 8019132:	681b      	ldr	r3, [r3, #0]
 8019134:	2b00      	cmp	r3, #0
 8019136:	d00d      	beq.n	8019154 <_ZN18MemoryLeakDetectorD1Ev+0x38>
    {
        delete mutex_;
 8019138:	687b      	ldr	r3, [r7, #4]
 801913a:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801913e:	330c      	adds	r3, #12
 8019140:	681c      	ldr	r4, [r3, #0]
 8019142:	2c00      	cmp	r4, #0
 8019144:	d006      	beq.n	8019154 <_ZN18MemoryLeakDetectorD1Ev+0x38>
 8019146:	4620      	mov	r0, r4
 8019148:	f7f5 fbd2 	bl	800e8f0 <_ZN11SimpleMutexD1Ev>
 801914c:	2104      	movs	r1, #4
 801914e:	4620      	mov	r0, r4
 8019150:	f7f3 fafc 	bl	800c74c <_ZdlPvj>
    }
}
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	4618      	mov	r0, r3
 8019158:	370c      	adds	r7, #12
 801915a:	46bd      	mov	sp, r7
 801915c:	bd90      	pop	{r4, r7, pc}
 801915e:	bf00      	nop
 8019160:	0802baa8 	.word	0x0802baa8

08019164 <_ZN18MemoryLeakDetectorD0Ev>:
MemoryLeakDetector::~MemoryLeakDetector()
 8019164:	b580      	push	{r7, lr}
 8019166:	b082      	sub	sp, #8
 8019168:	af00      	add	r7, sp, #0
 801916a:	6078      	str	r0, [r7, #4]
}
 801916c:	6878      	ldr	r0, [r7, #4]
 801916e:	f7ff ffd5 	bl	801911c <_ZN18MemoryLeakDetectorD1Ev>
 8019172:	f241 1150 	movw	r1, #4432	; 0x1150
 8019176:	6878      	ldr	r0, [r7, #4]
 8019178:	f7f3 fae8 	bl	800c74c <_ZdlPvj>
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	4618      	mov	r0, r3
 8019180:	3708      	adds	r7, #8
 8019182:	46bd      	mov	sp, r7
 8019184:	bd80      	pop	{r7, pc}

08019186 <_ZN18MemoryLeakDetector13startCheckingEv>:
{
    memoryTable_.clearAllAccounting(period);
}

void MemoryLeakDetector::startChecking()
{
 8019186:	b580      	push	{r7, lr}
 8019188:	b082      	sub	sp, #8
 801918a:	af00      	add	r7, sp, #0
 801918c:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	330c      	adds	r3, #12
 8019192:	4618      	mov	r0, r3
 8019194:	f7ff fd72 	bl	8018c7c <_ZN28MemoryLeakOutputStringBuffer5clearEv>
    current_period_ = mem_leak_period_checking;
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	2203      	movs	r2, #3
 801919c:	721a      	strb	r2, [r3, #8]
}
 801919e:	bf00      	nop
 80191a0:	3708      	adds	r7, #8
 80191a2:	46bd      	mov	sp, r7
 80191a4:	bd80      	pop	{r7, pc}

080191a6 <_ZN18MemoryLeakDetector12stopCheckingEv>:

void MemoryLeakDetector::stopChecking()
{
 80191a6:	b480      	push	{r7}
 80191a8:	b083      	sub	sp, #12
 80191aa:	af00      	add	r7, sp, #0
 80191ac:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	2202      	movs	r2, #2
 80191b2:	721a      	strb	r2, [r3, #8]
}
 80191b4:	bf00      	nop
 80191b6:	370c      	adds	r7, #12
 80191b8:	46bd      	mov	sp, r7
 80191ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191be:	4770      	bx	lr

080191c0 <_ZN18MemoryLeakDetector6enableEv>:
{
    return current_allocation_stage_;
}

void MemoryLeakDetector::enable()
{
 80191c0:	b480      	push	{r7}
 80191c2:	b083      	sub	sp, #12
 80191c4:	af00      	add	r7, sp, #0
 80191c6:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	2202      	movs	r2, #2
 80191cc:	721a      	strb	r2, [r3, #8]
}
 80191ce:	bf00      	nop
 80191d0:	370c      	adds	r7, #12
 80191d2:	46bd      	mov	sp, r7
 80191d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191d8:	4770      	bx	lr

080191da <_ZN18MemoryLeakDetector8getMutexEv>:
{
    current_allocation_stage_--;
}

SimpleMutex *MemoryLeakDetector::getMutex()
{
 80191da:	b480      	push	{r7}
 80191dc:	b083      	sub	sp, #12
 80191de:	af00      	add	r7, sp, #0
 80191e0:	6078      	str	r0, [r7, #4]
    return mutex_;
 80191e2:	687b      	ldr	r3, [r7, #4]
 80191e4:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80191e8:	330c      	adds	r3, #12
 80191ea:	681b      	ldr	r3, [r3, #0]
}
 80191ec:	4618      	mov	r0, r3
 80191ee:	370c      	adds	r7, #12
 80191f0:	46bd      	mov	sp, r7
 80191f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191f6:	4770      	bx	lr

080191f8 <_ZL31calculateVoidPointerAlignedSizej>:

static size_t calculateVoidPointerAlignedSize(size_t size)
{
 80191f8:	b480      	push	{r7}
 80191fa:	b083      	sub	sp, #12
 80191fc:	af00      	add	r7, sp, #0
 80191fe:	6078      	str	r0, [r7, #4]
#ifndef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
    return (sizeof(void*) - (size % sizeof(void*))) + size;
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	f023 0303 	bic.w	r3, r3, #3
 8019206:	3304      	adds	r3, #4
#else
   return size;
#endif
}
 8019208:	4618      	mov	r0, r3
 801920a:	370c      	adds	r7, #12
 801920c:	46bd      	mov	sp, r7
 801920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019212:	4770      	bx	lr

08019214 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>:

size_t MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(size_t size)
{
 8019214:	b580      	push	{r7, lr}
 8019216:	b082      	sub	sp, #8
 8019218:	af00      	add	r7, sp, #0
 801921a:	6078      	str	r0, [r7, #4]
 801921c:	6039      	str	r1, [r7, #0]
    return calculateVoidPointerAlignedSize(size + memory_corruption_buffer_size);
 801921e:	683b      	ldr	r3, [r7, #0]
 8019220:	3303      	adds	r3, #3
 8019222:	4618      	mov	r0, r3
 8019224:	f7ff ffe8 	bl	80191f8 <_ZL31calculateVoidPointerAlignedSizej>
 8019228:	4603      	mov	r3, r0
}
 801922a:	4618      	mov	r0, r3
 801922c:	3708      	adds	r7, #8
 801922e:	46bd      	mov	sp, r7
 8019230:	bd80      	pop	{r7, pc}

08019232 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>:

MemoryLeakDetectorNode* MemoryLeakDetector::getNodeFromMemoryPointer(char* memory, size_t memory_size)
{
 8019232:	b580      	push	{r7, lr}
 8019234:	b084      	sub	sp, #16
 8019236:	af00      	add	r7, sp, #0
 8019238:	60f8      	str	r0, [r7, #12]
 801923a:	60b9      	str	r1, [r7, #8]
 801923c:	607a      	str	r2, [r7, #4]
    return (MemoryLeakDetectorNode*) (void*) (memory + sizeOfMemoryWithCorruptionInfo(memory_size));
 801923e:	6879      	ldr	r1, [r7, #4]
 8019240:	68f8      	ldr	r0, [r7, #12]
 8019242:	f7ff ffe7 	bl	8019214 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8019246:	4602      	mov	r2, r0
 8019248:	68bb      	ldr	r3, [r7, #8]
 801924a:	4413      	add	r3, r2
}
 801924c:	4618      	mov	r0, r3
 801924e:	3710      	adds	r7, #16
 8019250:	46bd      	mov	sp, r7
 8019252:	bd80      	pop	{r7, pc}

08019254 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>:

void MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode * node, char *new_memory, size_t size, TestMemoryAllocator *allocator, const char *file, size_t line)
{
 8019254:	b580      	push	{r7, lr}
 8019256:	b08a      	sub	sp, #40	; 0x28
 8019258:	af06      	add	r7, sp, #24
 801925a:	60f8      	str	r0, [r7, #12]
 801925c:	60b9      	str	r1, [r7, #8]
 801925e:	607a      	str	r2, [r7, #4]
 8019260:	603b      	str	r3, [r7, #0]
    node->init(new_memory, allocationSequenceNumber_++, size, allocator, current_period_, current_allocation_stage_, file, line);
 8019262:	68fb      	ldr	r3, [r7, #12]
 8019264:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8019268:	3304      	adds	r3, #4
 801926a:	681a      	ldr	r2, [r3, #0]
 801926c:	1c51      	adds	r1, r2, #1
 801926e:	68fb      	ldr	r3, [r7, #12]
 8019270:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8019274:	3304      	adds	r3, #4
 8019276:	6019      	str	r1, [r3, #0]
 8019278:	68fb      	ldr	r3, [r7, #12]
 801927a:	7a19      	ldrb	r1, [r3, #8]
 801927c:	68fb      	ldr	r3, [r7, #12]
 801927e:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8019282:	3308      	adds	r3, #8
 8019284:	781b      	ldrb	r3, [r3, #0]
 8019286:	6a38      	ldr	r0, [r7, #32]
 8019288:	9004      	str	r0, [sp, #16]
 801928a:	69f8      	ldr	r0, [r7, #28]
 801928c:	9003      	str	r0, [sp, #12]
 801928e:	9302      	str	r3, [sp, #8]
 8019290:	9101      	str	r1, [sp, #4]
 8019292:	69bb      	ldr	r3, [r7, #24]
 8019294:	9300      	str	r3, [sp, #0]
 8019296:	683b      	ldr	r3, [r7, #0]
 8019298:	6879      	ldr	r1, [r7, #4]
 801929a:	68b8      	ldr	r0, [r7, #8]
 801929c:	f7ff fcfb 	bl	8018c96 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>
    addMemoryCorruptionInformation(node->memory_ + node->size_);
 80192a0:	68bb      	ldr	r3, [r7, #8]
 80192a2:	689a      	ldr	r2, [r3, #8]
 80192a4:	68bb      	ldr	r3, [r7, #8]
 80192a6:	681b      	ldr	r3, [r3, #0]
 80192a8:	4413      	add	r3, r2
 80192aa:	4619      	mov	r1, r3
 80192ac:	68f8      	ldr	r0, [r7, #12]
 80192ae:	f000 f861 	bl	8019374 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>
    memoryTable_.addNewNode(node);
 80192b2:	68fb      	ldr	r3, [r7, #12]
 80192b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80192b8:	331c      	adds	r3, #28
 80192ba:	68b9      	ldr	r1, [r7, #8]
 80192bc:	4618      	mov	r0, r3
 80192be:	f7ff fe11 	bl	8018ee4 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>
}
 80192c2:	bf00      	nop
 80192c4:	3710      	adds	r7, #16
 80192c6:	46bd      	mov	sp, r7
 80192c8:	bd80      	pop	{r7, pc}

080192ca <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 80192ca:	b580      	push	{r7, lr}
 80192cc:	b08a      	sub	sp, #40	; 0x28
 80192ce:	af04      	add	r7, sp, #16
 80192d0:	60f8      	str	r0, [r7, #12]
 80192d2:	60b9      	str	r1, [r7, #8]
 80192d4:	607a      	str	r2, [r7, #4]
 80192d6:	603b      	str	r3, [r7, #0]
    char* new_memory = reallocateMemoryWithAccountingInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 80192d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80192dc:	9302      	str	r3, [sp, #8]
 80192de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192e0:	9301      	str	r3, [sp, #4]
 80192e2:	6a3b      	ldr	r3, [r7, #32]
 80192e4:	9300      	str	r3, [sp, #0]
 80192e6:	683b      	ldr	r3, [r7, #0]
 80192e8:	687a      	ldr	r2, [r7, #4]
 80192ea:	68b9      	ldr	r1, [r7, #8]
 80192ec:	68f8      	ldr	r0, [r7, #12]
 80192ee:	f000 f96f 	bl	80195d0 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>
 80192f2:	6178      	str	r0, [r7, #20]
    if (new_memory == NULLPTR) return NULLPTR;
 80192f4:	697b      	ldr	r3, [r7, #20]
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	d101      	bne.n	80192fe <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x34>
 80192fa:	2300      	movs	r3, #0
 80192fc:	e017      	b.n	801932e <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x64>

    MemoryLeakDetectorNode *node = createMemoryLeakAccountingInformation(allocator, size, new_memory, allocatNodesSeperately);
 80192fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019302:	9300      	str	r3, [sp, #0]
 8019304:	697b      	ldr	r3, [r7, #20]
 8019306:	683a      	ldr	r2, [r7, #0]
 8019308:	68b9      	ldr	r1, [r7, #8]
 801930a:	68f8      	ldr	r0, [r7, #12]
 801930c:	f000 f98a 	bl	8019624 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8019310:	6138      	str	r0, [r7, #16]
    storeLeakInformation(node, new_memory, size, allocator, file, line);
 8019312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019314:	9302      	str	r3, [sp, #8]
 8019316:	6a3b      	ldr	r3, [r7, #32]
 8019318:	9301      	str	r3, [sp, #4]
 801931a:	68bb      	ldr	r3, [r7, #8]
 801931c:	9300      	str	r3, [sp, #0]
 801931e:	683b      	ldr	r3, [r7, #0]
 8019320:	697a      	ldr	r2, [r7, #20]
 8019322:	6939      	ldr	r1, [r7, #16]
 8019324:	68f8      	ldr	r0, [r7, #12]
 8019326:	f7ff ff95 	bl	8019254 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 801932a:	693b      	ldr	r3, [r7, #16]
 801932c:	689b      	ldr	r3, [r3, #8]
}
 801932e:	4618      	mov	r0, r3
 8019330:	3718      	adds	r7, #24
 8019332:	46bd      	mov	sp, r7
 8019334:	bd80      	pop	{r7, pc}
	...

08019338 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>:

void MemoryLeakDetector::invalidateMemory(char* memory)
{
 8019338:	b580      	push	{r7, lr}
 801933a:	b084      	sub	sp, #16
 801933c:	af00      	add	r7, sp, #0
 801933e:	6078      	str	r0, [r7, #4]
 8019340:	6039      	str	r1, [r7, #0]
#ifndef CPPUTEST_DISABLE_HEAP_POISON
  MemoryLeakDetectorNode* node = memoryTable_.retrieveNode(memory);
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019348:	331c      	adds	r3, #28
 801934a:	6839      	ldr	r1, [r7, #0]
 801934c:	4618      	mov	r0, r3
 801934e:	f7ff fdf6 	bl	8018f3e <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>
 8019352:	60f8      	str	r0, [r7, #12]
  if (node)
 8019354:	68fb      	ldr	r3, [r7, #12]
 8019356:	2b00      	cmp	r3, #0
 8019358:	d006      	beq.n	8019368 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x30>
    PlatformSpecificMemset(memory, 0xCD, node->size_);
 801935a:	4b05      	ldr	r3, [pc, #20]	; (8019370 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x38>)
 801935c:	681b      	ldr	r3, [r3, #0]
 801935e:	68fa      	ldr	r2, [r7, #12]
 8019360:	6812      	ldr	r2, [r2, #0]
 8019362:	21cd      	movs	r1, #205	; 0xcd
 8019364:	6838      	ldr	r0, [r7, #0]
 8019366:	4798      	blx	r3
#endif
}
 8019368:	bf00      	nop
 801936a:	3710      	adds	r7, #16
 801936c:	46bd      	mov	sp, r7
 801936e:	bd80      	pop	{r7, pc}
 8019370:	200000d8 	.word	0x200000d8

08019374 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>:

void MemoryLeakDetector::addMemoryCorruptionInformation(char* memory)
{
 8019374:	b480      	push	{r7}
 8019376:	b085      	sub	sp, #20
 8019378:	af00      	add	r7, sp, #0
 801937a:	6078      	str	r0, [r7, #4]
 801937c:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 801937e:	2300      	movs	r3, #0
 8019380:	60fb      	str	r3, [r7, #12]
 8019382:	68fb      	ldr	r3, [r7, #12]
 8019384:	2b02      	cmp	r3, #2
 8019386:	d812      	bhi.n	80193ae <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x3a>
      memory[i] = GuardBytes[i % sizeof(GuardBytes)];
 8019388:	68f9      	ldr	r1, [r7, #12]
 801938a:	4b0c      	ldr	r3, [pc, #48]	; (80193bc <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x48>)
 801938c:	fba3 2301 	umull	r2, r3, r3, r1
 8019390:	085a      	lsrs	r2, r3, #1
 8019392:	4613      	mov	r3, r2
 8019394:	005b      	lsls	r3, r3, #1
 8019396:	4413      	add	r3, r2
 8019398:	1aca      	subs	r2, r1, r3
 801939a:	6839      	ldr	r1, [r7, #0]
 801939c:	68fb      	ldr	r3, [r7, #12]
 801939e:	440b      	add	r3, r1
 80193a0:	4907      	ldr	r1, [pc, #28]	; (80193c0 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x4c>)
 80193a2:	5c8a      	ldrb	r2, [r1, r2]
 80193a4:	701a      	strb	r2, [r3, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80193a6:	68fb      	ldr	r3, [r7, #12]
 80193a8:	3301      	adds	r3, #1
 80193aa:	60fb      	str	r3, [r7, #12]
 80193ac:	e7e9      	b.n	8019382 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0xe>
}
 80193ae:	bf00      	nop
 80193b0:	3714      	adds	r7, #20
 80193b2:	46bd      	mov	sp, r7
 80193b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193b8:	4770      	bx	lr
 80193ba:	bf00      	nop
 80193bc:	aaaaaaab 	.word	0xaaaaaaab
 80193c0:	0802ba9c 	.word	0x0802ba9c

080193c4 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>:

bool MemoryLeakDetector::validMemoryCorruptionInformation(char* memory)
{
 80193c4:	b480      	push	{r7}
 80193c6:	b085      	sub	sp, #20
 80193c8:	af00      	add	r7, sp, #0
 80193ca:	6078      	str	r0, [r7, #4]
 80193cc:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80193ce:	2300      	movs	r3, #0
 80193d0:	60fb      	str	r3, [r7, #12]
 80193d2:	68fb      	ldr	r3, [r7, #12]
 80193d4:	2b02      	cmp	r3, #2
 80193d6:	d816      	bhi.n	8019406 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x42>
      if (memory[i] != GuardBytes[i % sizeof(GuardBytes)])
 80193d8:	683a      	ldr	r2, [r7, #0]
 80193da:	68fb      	ldr	r3, [r7, #12]
 80193dc:	4413      	add	r3, r2
 80193de:	7818      	ldrb	r0, [r3, #0]
 80193e0:	68f9      	ldr	r1, [r7, #12]
 80193e2:	4b0c      	ldr	r3, [pc, #48]	; (8019414 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x50>)
 80193e4:	fba3 2301 	umull	r2, r3, r3, r1
 80193e8:	085a      	lsrs	r2, r3, #1
 80193ea:	4613      	mov	r3, r2
 80193ec:	005b      	lsls	r3, r3, #1
 80193ee:	4413      	add	r3, r2
 80193f0:	1aca      	subs	r2, r1, r3
 80193f2:	4b09      	ldr	r3, [pc, #36]	; (8019418 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x54>)
 80193f4:	5c9b      	ldrb	r3, [r3, r2]
 80193f6:	4298      	cmp	r0, r3
 80193f8:	d001      	beq.n	80193fe <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x3a>
          return false;
 80193fa:	2300      	movs	r3, #0
 80193fc:	e004      	b.n	8019408 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x44>
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80193fe:	68fb      	ldr	r3, [r7, #12]
 8019400:	3301      	adds	r3, #1
 8019402:	60fb      	str	r3, [r7, #12]
 8019404:	e7e5      	b.n	80193d2 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0xe>
   return true;
 8019406:	2301      	movs	r3, #1
}
 8019408:	4618      	mov	r0, r3
 801940a:	3714      	adds	r7, #20
 801940c:	46bd      	mov	sp, r7
 801940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019412:	4770      	bx	lr
 8019414:	aaaaaaab 	.word	0xaaaaaaab
 8019418:	0802ba9c 	.word	0x0802ba9c

0801941c <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>:

bool MemoryLeakDetector::matchingAllocation(TestMemoryAllocator *alloc_allocator, TestMemoryAllocator *free_allocator)
{
 801941c:	b580      	push	{r7, lr}
 801941e:	b084      	sub	sp, #16
 8019420:	af00      	add	r7, sp, #0
 8019422:	60f8      	str	r0, [r7, #12]
 8019424:	60b9      	str	r1, [r7, #8]
 8019426:	607a      	str	r2, [r7, #4]
    if (alloc_allocator == free_allocator) return true;
 8019428:	68ba      	ldr	r2, [r7, #8]
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	429a      	cmp	r2, r3
 801942e:	d101      	bne.n	8019434 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x18>
 8019430:	2301      	movs	r3, #1
 8019432:	e013      	b.n	801945c <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    if (!doAllocationTypeChecking_) return true;
 8019434:	68fb      	ldr	r3, [r7, #12]
 8019436:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801943a:	781b      	ldrb	r3, [r3, #0]
 801943c:	f083 0301 	eor.w	r3, r3, #1
 8019440:	b2db      	uxtb	r3, r3
 8019442:	2b00      	cmp	r3, #0
 8019444:	d001      	beq.n	801944a <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x2e>
 8019446:	2301      	movs	r3, #1
 8019448:	e008      	b.n	801945c <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    return free_allocator->isOfEqualType(alloc_allocator);
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	681b      	ldr	r3, [r3, #0]
 801944e:	331c      	adds	r3, #28
 8019450:	681b      	ldr	r3, [r3, #0]
 8019452:	68b9      	ldr	r1, [r7, #8]
 8019454:	6878      	ldr	r0, [r7, #4]
 8019456:	4798      	blx	r3
 8019458:	4603      	mov	r3, r0
 801945a:	bf00      	nop
}
 801945c:	4618      	mov	r0, r3
 801945e:	3710      	adds	r7, #16
 8019460:	46bd      	mov	sp, r7
 8019462:	bd80      	pop	{r7, pc}

08019464 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>:

void MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode* node, const char* file, size_t line, TestMemoryAllocator* allocator, bool allocateNodesSeperately)
{
 8019464:	b590      	push	{r4, r7, lr}
 8019466:	b087      	sub	sp, #28
 8019468:	af02      	add	r7, sp, #8
 801946a:	60f8      	str	r0, [r7, #12]
 801946c:	60b9      	str	r1, [r7, #8]
 801946e:	607a      	str	r2, [r7, #4]
 8019470:	603b      	str	r3, [r7, #0]
    if (!matchingAllocation(node->allocator_->actualAllocator(), allocator->actualAllocator()))
 8019472:	68bb      	ldr	r3, [r7, #8]
 8019474:	695a      	ldr	r2, [r3, #20]
 8019476:	68bb      	ldr	r3, [r7, #8]
 8019478:	695b      	ldr	r3, [r3, #20]
 801947a:	681b      	ldr	r3, [r3, #0]
 801947c:	3328      	adds	r3, #40	; 0x28
 801947e:	681b      	ldr	r3, [r3, #0]
 8019480:	4610      	mov	r0, r2
 8019482:	4798      	blx	r3
 8019484:	4604      	mov	r4, r0
 8019486:	6a3b      	ldr	r3, [r7, #32]
 8019488:	681b      	ldr	r3, [r3, #0]
 801948a:	3328      	adds	r3, #40	; 0x28
 801948c:	681b      	ldr	r3, [r3, #0]
 801948e:	6a38      	ldr	r0, [r7, #32]
 8019490:	4798      	blx	r3
 8019492:	4603      	mov	r3, r0
 8019494:	461a      	mov	r2, r3
 8019496:	4621      	mov	r1, r4
 8019498:	68f8      	ldr	r0, [r7, #12]
 801949a:	f7ff ffbf 	bl	801941c <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>
 801949e:	4603      	mov	r3, r0
 80194a0:	f083 0301 	eor.w	r3, r3, #1
 80194a4:	b2db      	uxtb	r3, r3
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d014      	beq.n	80194d4 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0x70>
        outputBuffer_.reportAllocationDeallocationMismatchFailure(node, file, line, allocator->actualAllocator(), reporter_);
 80194aa:	68fb      	ldr	r3, [r7, #12]
 80194ac:	f103 040c 	add.w	r4, r3, #12
 80194b0:	6a3b      	ldr	r3, [r7, #32]
 80194b2:	681b      	ldr	r3, [r3, #0]
 80194b4:	3328      	adds	r3, #40	; 0x28
 80194b6:	681b      	ldr	r3, [r3, #0]
 80194b8:	6a38      	ldr	r0, [r7, #32]
 80194ba:	4798      	blx	r3
 80194bc:	4602      	mov	r2, r0
 80194be:	68fb      	ldr	r3, [r7, #12]
 80194c0:	685b      	ldr	r3, [r3, #4]
 80194c2:	9301      	str	r3, [sp, #4]
 80194c4:	9200      	str	r2, [sp, #0]
 80194c6:	683b      	ldr	r3, [r7, #0]
 80194c8:	687a      	ldr	r2, [r7, #4]
 80194ca:	68b9      	ldr	r1, [r7, #8]
 80194cc:	4620      	mov	r0, r4
 80194ce:	f7ff fb4d 	bl	8018b6c <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
    else if (allocateNodesSeperately)
        allocator->freeMemoryLeakNode((char*) node);
}
 80194d2:	e02e      	b.n	8019532 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
 80194d4:	68bb      	ldr	r3, [r7, #8]
 80194d6:	689a      	ldr	r2, [r3, #8]
 80194d8:	68bb      	ldr	r3, [r7, #8]
 80194da:	681b      	ldr	r3, [r3, #0]
 80194dc:	4413      	add	r3, r2
 80194de:	4619      	mov	r1, r3
 80194e0:	68f8      	ldr	r0, [r7, #12]
 80194e2:	f7ff ff6f 	bl	80193c4 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>
 80194e6:	4603      	mov	r3, r0
 80194e8:	f083 0301 	eor.w	r3, r3, #1
 80194ec:	b2db      	uxtb	r3, r3
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	d014      	beq.n	801951c <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xb8>
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
 80194f2:	68fb      	ldr	r3, [r7, #12]
 80194f4:	f103 040c 	add.w	r4, r3, #12
 80194f8:	6a3b      	ldr	r3, [r7, #32]
 80194fa:	681b      	ldr	r3, [r3, #0]
 80194fc:	3328      	adds	r3, #40	; 0x28
 80194fe:	681b      	ldr	r3, [r3, #0]
 8019500:	6a38      	ldr	r0, [r7, #32]
 8019502:	4798      	blx	r3
 8019504:	4602      	mov	r2, r0
 8019506:	68fb      	ldr	r3, [r7, #12]
 8019508:	685b      	ldr	r3, [r3, #4]
 801950a:	9301      	str	r3, [sp, #4]
 801950c:	9200      	str	r2, [sp, #0]
 801950e:	683b      	ldr	r3, [r7, #0]
 8019510:	687a      	ldr	r2, [r7, #4]
 8019512:	68b9      	ldr	r1, [r7, #8]
 8019514:	4620      	mov	r0, r4
 8019516:	f7ff fb4f 	bl	8018bb8 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
}
 801951a:	e00a      	b.n	8019532 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (allocateNodesSeperately)
 801951c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019520:	2b00      	cmp	r3, #0
 8019522:	d006      	beq.n	8019532 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
        allocator->freeMemoryLeakNode((char*) node);
 8019524:	6a3b      	ldr	r3, [r7, #32]
 8019526:	681b      	ldr	r3, [r3, #0]
 8019528:	3324      	adds	r3, #36	; 0x24
 801952a:	681b      	ldr	r3, [r3, #0]
 801952c:	68b9      	ldr	r1, [r7, #8]
 801952e:	6a38      	ldr	r0, [r7, #32]
 8019530:	4798      	blx	r3
}
 8019532:	bf00      	nop
 8019534:	3714      	adds	r7, #20
 8019536:	46bd      	mov	sp, r7
 8019538:	bd90      	pop	{r4, r7, pc}
	...

0801953c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, bool allocatNodesSeperately)
{
 801953c:	b580      	push	{r7, lr}
 801953e:	b086      	sub	sp, #24
 8019540:	af02      	add	r7, sp, #8
 8019542:	60f8      	str	r0, [r7, #12]
 8019544:	60b9      	str	r1, [r7, #8]
 8019546:	607a      	str	r2, [r7, #4]
 8019548:	70fb      	strb	r3, [r7, #3]
    return allocMemory(allocator, size, UNKNOWN, 0, allocatNodesSeperately);
 801954a:	4b08      	ldr	r3, [pc, #32]	; (801956c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb+0x30>)
 801954c:	681a      	ldr	r2, [r3, #0]
 801954e:	78fb      	ldrb	r3, [r7, #3]
 8019550:	9301      	str	r3, [sp, #4]
 8019552:	2300      	movs	r3, #0
 8019554:	9300      	str	r3, [sp, #0]
 8019556:	4613      	mov	r3, r2
 8019558:	687a      	ldr	r2, [r7, #4]
 801955a:	68b9      	ldr	r1, [r7, #8]
 801955c:	68f8      	ldr	r0, [r7, #12]
 801955e:	f000 f87f 	bl	8019660 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8019562:	4603      	mov	r3, r0
}
 8019564:	4618      	mov	r0, r3
 8019566:	3710      	adds	r7, #16
 8019568:	46bd      	mov	sp, r7
 801956a:	bd80      	pop	{r7, pc}
 801956c:	20000100 	.word	0x20000100

08019570 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8019570:	b590      	push	{r4, r7, lr}
 8019572:	b085      	sub	sp, #20
 8019574:	af00      	add	r7, sp, #0
 8019576:	60f8      	str	r0, [r7, #12]
 8019578:	60b9      	str	r1, [r7, #8]
 801957a:	607a      	str	r2, [r7, #4]
 801957c:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size), file, line);
 801957e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019582:	2b00      	cmp	r3, #0
 8019584:	d00e      	beq.n	80195a4 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x34>
 8019586:	68bb      	ldr	r3, [r7, #8]
 8019588:	681b      	ldr	r3, [r3, #0]
 801958a:	3308      	adds	r3, #8
 801958c:	681c      	ldr	r4, [r3, #0]
 801958e:	6879      	ldr	r1, [r7, #4]
 8019590:	68f8      	ldr	r0, [r7, #12]
 8019592:	f7ff fe3f 	bl	8019214 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8019596:	4601      	mov	r1, r0
 8019598:	6a3b      	ldr	r3, [r7, #32]
 801959a:	683a      	ldr	r2, [r7, #0]
 801959c:	68b8      	ldr	r0, [r7, #8]
 801959e:	47a0      	blx	r4
 80195a0:	4603      	mov	r3, r0
 80195a2:	e010      	b.n	80195c6 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x56>
    else return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode), file, line);
 80195a4:	68bb      	ldr	r3, [r7, #8]
 80195a6:	681b      	ldr	r3, [r3, #0]
 80195a8:	3308      	adds	r3, #8
 80195aa:	681c      	ldr	r4, [r3, #0]
 80195ac:	6879      	ldr	r1, [r7, #4]
 80195ae:	68f8      	ldr	r0, [r7, #12]
 80195b0:	f7ff fe30 	bl	8019214 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 80195b4:	4603      	mov	r3, r0
 80195b6:	f103 0120 	add.w	r1, r3, #32
 80195ba:	6a3b      	ldr	r3, [r7, #32]
 80195bc:	683a      	ldr	r2, [r7, #0]
 80195be:	68b8      	ldr	r0, [r7, #8]
 80195c0:	47a0      	blx	r4
 80195c2:	4603      	mov	r3, r0
 80195c4:	bf00      	nop
}
 80195c6:	4618      	mov	r0, r3
 80195c8:	3714      	adds	r7, #20
 80195ca:	46bd      	mov	sp, r7
 80195cc:	bd90      	pop	{r4, r7, pc}
	...

080195d0 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator* /*allocator*/, char* memory, size_t size, const char* /*file*/, size_t /*line*/, bool allocatNodesSeperately)
{
 80195d0:	b590      	push	{r4, r7, lr}
 80195d2:	b085      	sub	sp, #20
 80195d4:	af00      	add	r7, sp, #0
 80195d6:	60f8      	str	r0, [r7, #12]
 80195d8:	60b9      	str	r1, [r7, #8]
 80195da:	607a      	str	r2, [r7, #4]
 80195dc:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size));
 80195de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80195e2:	2b00      	cmp	r3, #0
 80195e4:	d00b      	beq.n	80195fe <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x2e>
 80195e6:	4b0e      	ldr	r3, [pc, #56]	; (8019620 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 80195e8:	681c      	ldr	r4, [r3, #0]
 80195ea:	6839      	ldr	r1, [r7, #0]
 80195ec:	68f8      	ldr	r0, [r7, #12]
 80195ee:	f7ff fe11 	bl	8019214 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 80195f2:	4603      	mov	r3, r0
 80195f4:	4619      	mov	r1, r3
 80195f6:	6878      	ldr	r0, [r7, #4]
 80195f8:	47a0      	blx	r4
 80195fa:	4603      	mov	r3, r0
 80195fc:	e00c      	b.n	8019618 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x48>
    else return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode));
 80195fe:	4b08      	ldr	r3, [pc, #32]	; (8019620 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8019600:	681c      	ldr	r4, [r3, #0]
 8019602:	6839      	ldr	r1, [r7, #0]
 8019604:	68f8      	ldr	r0, [r7, #12]
 8019606:	f7ff fe05 	bl	8019214 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 801960a:	4603      	mov	r3, r0
 801960c:	3320      	adds	r3, #32
 801960e:	4619      	mov	r1, r3
 8019610:	6878      	ldr	r0, [r7, #4]
 8019612:	47a0      	blx	r4
 8019614:	4603      	mov	r3, r0
 8019616:	bf00      	nop
}
 8019618:	4618      	mov	r0, r3
 801961a:	3714      	adds	r7, #20
 801961c:	46bd      	mov	sp, r7
 801961e:	bd90      	pop	{r4, r7, pc}
 8019620:	200000cc 	.word	0x200000cc

08019624 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>:

MemoryLeakDetectorNode* MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator* allocator, size_t size, char* memory, bool allocatNodesSeperately)
{
 8019624:	b580      	push	{r7, lr}
 8019626:	b084      	sub	sp, #16
 8019628:	af00      	add	r7, sp, #0
 801962a:	60f8      	str	r0, [r7, #12]
 801962c:	60b9      	str	r1, [r7, #8]
 801962e:	607a      	str	r2, [r7, #4]
 8019630:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (MemoryLeakDetectorNode*) (void*) allocator->allocMemoryLeakNode(sizeof(MemoryLeakDetectorNode));
 8019632:	7e3b      	ldrb	r3, [r7, #24]
 8019634:	2b00      	cmp	r3, #0
 8019636:	d008      	beq.n	801964a <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x26>
 8019638:	68bb      	ldr	r3, [r7, #8]
 801963a:	681b      	ldr	r3, [r3, #0]
 801963c:	3320      	adds	r3, #32
 801963e:	681b      	ldr	r3, [r3, #0]
 8019640:	2120      	movs	r1, #32
 8019642:	68b8      	ldr	r0, [r7, #8]
 8019644:	4798      	blx	r3
 8019646:	4603      	mov	r3, r0
 8019648:	e006      	b.n	8019658 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x34>
    else return getNodeFromMemoryPointer(memory, size);
 801964a:	687a      	ldr	r2, [r7, #4]
 801964c:	6839      	ldr	r1, [r7, #0]
 801964e:	68f8      	ldr	r0, [r7, #12]
 8019650:	f7ff fdef 	bl	8019232 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>
 8019654:	4603      	mov	r3, r0
 8019656:	bf00      	nop
}
 8019658:	4618      	mov	r0, r3
 801965a:	3710      	adds	r7, #16
 801965c:	46bd      	mov	sp, r7
 801965e:	bd80      	pop	{r7, pc}

08019660 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8019660:	b580      	push	{r7, lr}
 8019662:	b08a      	sub	sp, #40	; 0x28
 8019664:	af04      	add	r7, sp, #16
 8019666:	60f8      	str	r0, [r7, #12]
 8019668:	60b9      	str	r1, [r7, #8]
 801966a:	607a      	str	r2, [r7, #4]
 801966c:	603b      	str	r3, [r7, #0]
     * If the same allocation is used and the wrong free is called, it will deallocate the memory leak information
     * without the memory leak detector ever noticing it!
     * So, for malloc, we'll allocate the memory separately so we can detect this and give a proper error.
     */

    char* memory = allocateMemoryWithAccountingInformation(allocator, size, file, line, allocatNodesSeperately);
 801966e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019672:	9301      	str	r3, [sp, #4]
 8019674:	6a3b      	ldr	r3, [r7, #32]
 8019676:	9300      	str	r3, [sp, #0]
 8019678:	683b      	ldr	r3, [r7, #0]
 801967a:	687a      	ldr	r2, [r7, #4]
 801967c:	68b9      	ldr	r1, [r7, #8]
 801967e:	68f8      	ldr	r0, [r7, #12]
 8019680:	f7ff ff76 	bl	8019570 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>
 8019684:	6178      	str	r0, [r7, #20]
    if (memory == NULLPTR) return NULLPTR;
 8019686:	697b      	ldr	r3, [r7, #20]
 8019688:	2b00      	cmp	r3, #0
 801968a:	d101      	bne.n	8019690 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x30>
 801968c:	2300      	movs	r3, #0
 801968e:	e017      	b.n	80196c0 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x60>
    MemoryLeakDetectorNode* node = createMemoryLeakAccountingInformation(allocator, size, memory, allocatNodesSeperately);
 8019690:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019694:	9300      	str	r3, [sp, #0]
 8019696:	697b      	ldr	r3, [r7, #20]
 8019698:	687a      	ldr	r2, [r7, #4]
 801969a:	68b9      	ldr	r1, [r7, #8]
 801969c:	68f8      	ldr	r0, [r7, #12]
 801969e:	f7ff ffc1 	bl	8019624 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 80196a2:	6138      	str	r0, [r7, #16]

    storeLeakInformation(node, memory, size, allocator, file, line);
 80196a4:	6a3b      	ldr	r3, [r7, #32]
 80196a6:	9302      	str	r3, [sp, #8]
 80196a8:	683b      	ldr	r3, [r7, #0]
 80196aa:	9301      	str	r3, [sp, #4]
 80196ac:	68bb      	ldr	r3, [r7, #8]
 80196ae:	9300      	str	r3, [sp, #0]
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	697a      	ldr	r2, [r7, #20]
 80196b4:	6939      	ldr	r1, [r7, #16]
 80196b6:	68f8      	ldr	r0, [r7, #12]
 80196b8:	f7ff fdcc 	bl	8019254 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 80196bc:	693b      	ldr	r3, [r7, #16]
 80196be:	689b      	ldr	r3, [r3, #8]
}
 80196c0:	4618      	mov	r0, r3
 80196c2:	3718      	adds	r7, #24
 80196c4:	46bd      	mov	sp, r7
 80196c6:	bd80      	pop	{r7, pc}

080196c8 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>:
    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
    if (allocatNodesSeperately) allocator->freeMemoryLeakNode( (char*) node);
}

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, const char* file, size_t line, bool allocatNodesSeperately)
{
 80196c8:	b590      	push	{r4, r7, lr}
 80196ca:	b089      	sub	sp, #36	; 0x24
 80196cc:	af02      	add	r7, sp, #8
 80196ce:	60f8      	str	r0, [r7, #12]
 80196d0:	60b9      	str	r1, [r7, #8]
 80196d2:	607a      	str	r2, [r7, #4]
 80196d4:	603b      	str	r3, [r7, #0]
    if (memory == NULLPTR) return;
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	2b00      	cmp	r3, #0
 80196da:	d03a      	beq.n	8019752 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8a>

    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
 80196dc:	68fb      	ldr	r3, [r7, #12]
 80196de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80196e2:	331c      	adds	r3, #28
 80196e4:	6879      	ldr	r1, [r7, #4]
 80196e6:	4618      	mov	r0, r3
 80196e8:	f7ff fc13 	bl	8018f12 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 80196ec:	6178      	str	r0, [r7, #20]
    if (node == NULLPTR) {
 80196ee:	697b      	ldr	r3, [r7, #20]
 80196f0:	2b00      	cmp	r3, #0
 80196f2:	d10b      	bne.n	801970c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x44>
        outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 80196f4:	68fb      	ldr	r3, [r7, #12]
 80196f6:	f103 000c 	add.w	r0, r3, #12
 80196fa:	68fb      	ldr	r3, [r7, #12]
 80196fc:	685b      	ldr	r3, [r3, #4]
 80196fe:	9300      	str	r3, [sp, #0]
 8019700:	68bb      	ldr	r3, [r7, #8]
 8019702:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019704:	6839      	ldr	r1, [r7, #0]
 8019706:	f7ff fa0d 	bl	8018b24 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
        return;
 801970a:	e023      	b.n	8019754 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    }
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (!allocator->hasBeenDestroyed()) {
 801970c:	68b8      	ldr	r0, [r7, #8]
 801970e:	f7f8 ff95 	bl	801263c <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>
 8019712:	4603      	mov	r3, r0
 8019714:	f083 0301 	eor.w	r3, r3, #1
 8019718:	b2db      	uxtb	r3, r3
 801971a:	2b00      	cmp	r3, #0
 801971c:	d01a      	beq.n	8019754 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
        size_t size = node->size_;
 801971e:	697b      	ldr	r3, [r7, #20]
 8019720:	681b      	ldr	r3, [r3, #0]
 8019722:	613b      	str	r3, [r7, #16]
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8019724:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019728:	9301      	str	r3, [sp, #4]
 801972a:	68bb      	ldr	r3, [r7, #8]
 801972c:	9300      	str	r3, [sp, #0]
 801972e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019730:	683a      	ldr	r2, [r7, #0]
 8019732:	6979      	ldr	r1, [r7, #20]
 8019734:	68f8      	ldr	r0, [r7, #12]
 8019736:	f7ff fe95 	bl	8019464 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
        allocator->free_memory((char*) memory, size, file, line);
 801973a:	68bb      	ldr	r3, [r7, #8]
 801973c:	681b      	ldr	r3, [r3, #0]
 801973e:	330c      	adds	r3, #12
 8019740:	681c      	ldr	r4, [r3, #0]
 8019742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019744:	9300      	str	r3, [sp, #0]
 8019746:	683b      	ldr	r3, [r7, #0]
 8019748:	693a      	ldr	r2, [r7, #16]
 801974a:	6879      	ldr	r1, [r7, #4]
 801974c:	68b8      	ldr	r0, [r7, #8]
 801974e:	47a0      	blx	r4
 8019750:	e000      	b.n	8019754 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    if (memory == NULLPTR) return;
 8019752:	bf00      	nop
    }
}
 8019754:	371c      	adds	r7, #28
 8019756:	46bd      	mov	sp, r7
 8019758:	bd90      	pop	{r4, r7, pc}
	...

0801975c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>:

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, bool allocatNodesSeperately)
{
 801975c:	b580      	push	{r7, lr}
 801975e:	b086      	sub	sp, #24
 8019760:	af02      	add	r7, sp, #8
 8019762:	60f8      	str	r0, [r7, #12]
 8019764:	60b9      	str	r1, [r7, #8]
 8019766:	607a      	str	r2, [r7, #4]
 8019768:	70fb      	strb	r3, [r7, #3]
    deallocMemory(allocator, (char*) memory, UNKNOWN, 0, allocatNodesSeperately);
 801976a:	4b08      	ldr	r3, [pc, #32]	; (801978c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb+0x30>)
 801976c:	681a      	ldr	r2, [r3, #0]
 801976e:	78fb      	ldrb	r3, [r7, #3]
 8019770:	9301      	str	r3, [sp, #4]
 8019772:	2300      	movs	r3, #0
 8019774:	9300      	str	r3, [sp, #0]
 8019776:	4613      	mov	r3, r2
 8019778:	687a      	ldr	r2, [r7, #4]
 801977a:	68b9      	ldr	r1, [r7, #8]
 801977c:	68f8      	ldr	r0, [r7, #12]
 801977e:	f7ff ffa3 	bl	80196c8 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8019782:	bf00      	nop
 8019784:	3710      	adds	r7, #16
 8019786:	46bd      	mov	sp, r7
 8019788:	bd80      	pop	{r7, pc}
 801978a:	bf00      	nop
 801978c:	20000100 	.word	0x20000100

08019790 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>:
        deallocMemory(allocator, memory, __FILE__, __LINE__);
    }
}

char* MemoryLeakDetector::reallocMemory(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8019790:	b580      	push	{r7, lr}
 8019792:	b08a      	sub	sp, #40	; 0x28
 8019794:	af04      	add	r7, sp, #16
 8019796:	60f8      	str	r0, [r7, #12]
 8019798:	60b9      	str	r1, [r7, #8]
 801979a:	607a      	str	r2, [r7, #4]
 801979c:	603b      	str	r3, [r7, #0]
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (memory) {
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	2b00      	cmp	r3, #0
 80197a2:	d023      	beq.n	80197ec <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x5c>
        MemoryLeakDetectorNode* node = memoryTable_.removeNode(memory);
 80197a4:	68fb      	ldr	r3, [r7, #12]
 80197a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80197aa:	331c      	adds	r3, #28
 80197ac:	6879      	ldr	r1, [r7, #4]
 80197ae:	4618      	mov	r0, r3
 80197b0:	f7ff fbaf 	bl	8018f12 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 80197b4:	6178      	str	r0, [r7, #20]
        if (node == NULLPTR) {
 80197b6:	697b      	ldr	r3, [r7, #20]
 80197b8:	2b00      	cmp	r3, #0
 80197ba:	d10c      	bne.n	80197d6 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x46>
            outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 80197bc:	68fb      	ldr	r3, [r7, #12]
 80197be:	f103 000c 	add.w	r0, r3, #12
 80197c2:	68fb      	ldr	r3, [r7, #12]
 80197c4:	685b      	ldr	r3, [r3, #4]
 80197c6:	9300      	str	r3, [sp, #0]
 80197c8:	68bb      	ldr	r3, [r7, #8]
 80197ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80197cc:	6a39      	ldr	r1, [r7, #32]
 80197ce:	f7ff f9a9 	bl	8018b24 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
            return NULLPTR;
 80197d2:	2300      	movs	r3, #0
 80197d4:	e019      	b.n	801980a <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x7a>
        }
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 80197d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80197da:	9301      	str	r3, [sp, #4]
 80197dc:	68bb      	ldr	r3, [r7, #8]
 80197de:	9300      	str	r3, [sp, #0]
 80197e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197e2:	6a3a      	ldr	r2, [r7, #32]
 80197e4:	6979      	ldr	r1, [r7, #20]
 80197e6:	68f8      	ldr	r0, [r7, #12]
 80197e8:	f7ff fe3c 	bl	8019464 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
    }
    return reallocateMemoryAndLeakInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 80197ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80197f0:	9302      	str	r3, [sp, #8]
 80197f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197f4:	9301      	str	r3, [sp, #4]
 80197f6:	6a3b      	ldr	r3, [r7, #32]
 80197f8:	9300      	str	r3, [sp, #0]
 80197fa:	683b      	ldr	r3, [r7, #0]
 80197fc:	687a      	ldr	r2, [r7, #4]
 80197fe:	68b9      	ldr	r1, [r7, #8]
 8019800:	68f8      	ldr	r0, [r7, #12]
 8019802:	f7ff fd62 	bl	80192ca <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>
 8019806:	4603      	mov	r3, r0
 8019808:	bf00      	nop
}
 801980a:	4618      	mov	r0, r3
 801980c:	3718      	adds	r7, #24
 801980e:	46bd      	mov	sp, r7
 8019810:	bd80      	pop	{r7, pc}

08019812 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>:

void MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod period)
{
 8019812:	b580      	push	{r7, lr}
 8019814:	b084      	sub	sp, #16
 8019816:	af00      	add	r7, sp, #0
 8019818:	6078      	str	r0, [r7, #4]
 801981a:	460b      	mov	r3, r1
 801981c:	70fb      	strb	r3, [r7, #3]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(period);
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019824:	331c      	adds	r3, #28
 8019826:	78fa      	ldrb	r2, [r7, #3]
 8019828:	4611      	mov	r1, r2
 801982a:	4618      	mov	r0, r3
 801982c:	f7ff fbc0 	bl	8018fb0 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8019830:	60f8      	str	r0, [r7, #12]

    outputBuffer_.startMemoryLeakReporting();
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	330c      	adds	r3, #12
 8019836:	4618      	mov	r0, r3
 8019838:	f7ff f882 	bl	8018940 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>

    while (leak) {
 801983c:	68fb      	ldr	r3, [r7, #12]
 801983e:	2b00      	cmp	r3, #0
 8019840:	d010      	beq.n	8019864 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x52>
        outputBuffer_.reportMemoryLeak(leak);
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	330c      	adds	r3, #12
 8019846:	68f9      	ldr	r1, [r7, #12]
 8019848:	4618      	mov	r0, r3
 801984a:	f7ff f897 	bl	801897c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>
        leak = memoryTable_.getNextLeak(leak, period);
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019854:	331c      	adds	r3, #28
 8019856:	78fa      	ldrb	r2, [r7, #3]
 8019858:	68f9      	ldr	r1, [r7, #12]
 801985a:	4618      	mov	r0, r3
 801985c:	f7ff fbcb 	bl	8018ff6 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8019860:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8019862:	e7eb      	b.n	801983c <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x2a>
    }

    outputBuffer_.stopMemoryLeakReporting();
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	330c      	adds	r3, #12
 8019868:	4618      	mov	r0, r3
 801986a:	f7ff f8e7 	bl	8018a3c <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>
}
 801986e:	bf00      	nop
 8019870:	3710      	adds	r7, #16
 8019872:	46bd      	mov	sp, r7
 8019874:	bd80      	pop	{r7, pc}

08019876 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>:

const char* MemoryLeakDetector::report(MemLeakPeriod period)
{
 8019876:	b580      	push	{r7, lr}
 8019878:	b082      	sub	sp, #8
 801987a:	af00      	add	r7, sp, #0
 801987c:	6078      	str	r0, [r7, #4]
 801987e:	460b      	mov	r3, r1
 8019880:	70fb      	strb	r3, [r7, #3]
    ConstructMemoryLeakReport(period);
 8019882:	78fb      	ldrb	r3, [r7, #3]
 8019884:	4619      	mov	r1, r3
 8019886:	6878      	ldr	r0, [r7, #4]
 8019888:	f7ff ffc3 	bl	8019812 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>

    return outputBuffer_.toString();
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	330c      	adds	r3, #12
 8019890:	4618      	mov	r0, r3
 8019892:	f7ff f9e5 	bl	8018c60 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8019896:	4603      	mov	r3, r0
}
 8019898:	4618      	mov	r0, r3
 801989a:	3708      	adds	r7, #8
 801989c:	46bd      	mov	sp, r7
 801989e:	bd80      	pop	{r7, pc}

080198a0 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>:

void MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
{
 80198a0:	b580      	push	{r7, lr}
 80198a2:	b084      	sub	sp, #16
 80198a4:	af00      	add	r7, sp, #0
 80198a6:	6078      	str	r0, [r7, #4]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(mem_leak_period_checking);
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80198ae:	331c      	adds	r3, #28
 80198b0:	2103      	movs	r1, #3
 80198b2:	4618      	mov	r0, r3
 80198b4:	f7ff fb7c 	bl	8018fb0 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 80198b8:	60f8      	str	r0, [r7, #12]
    while (leak) {
 80198ba:	68fb      	ldr	r3, [r7, #12]
 80198bc:	2b00      	cmp	r3, #0
 80198be:	d011      	beq.n	80198e4 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x44>
        if (leak->period_ == mem_leak_period_checking) leak->period_ = mem_leak_period_enabled;
 80198c0:	68fb      	ldr	r3, [r7, #12]
 80198c2:	7e1b      	ldrb	r3, [r3, #24]
 80198c4:	2b03      	cmp	r3, #3
 80198c6:	d102      	bne.n	80198ce <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x2e>
 80198c8:	68fb      	ldr	r3, [r7, #12]
 80198ca:	2202      	movs	r2, #2
 80198cc:	761a      	strb	r2, [r3, #24]
        leak = memoryTable_.getNextLeak(leak, mem_leak_period_checking);
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80198d4:	331c      	adds	r3, #28
 80198d6:	2203      	movs	r2, #3
 80198d8:	68f9      	ldr	r1, [r7, #12]
 80198da:	4618      	mov	r0, r3
 80198dc:	f7ff fb8b 	bl	8018ff6 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80198e0:	60f8      	str	r0, [r7, #12]
    while (leak) {
 80198e2:	e7ea      	b.n	80198ba <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x1a>
    }
}
 80198e4:	bf00      	nop
 80198e6:	3710      	adds	r7, #16
 80198e8:	46bd      	mov	sp, r7
 80198ea:	bd80      	pop	{r7, pc}

080198ec <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod period)
{
 80198ec:	b580      	push	{r7, lr}
 80198ee:	b082      	sub	sp, #8
 80198f0:	af00      	add	r7, sp, #0
 80198f2:	6078      	str	r0, [r7, #4]
 80198f4:	460b      	mov	r3, r1
 80198f6:	70fb      	strb	r3, [r7, #3]
    return memoryTable_.getTotalLeaks(period);
 80198f8:	687b      	ldr	r3, [r7, #4]
 80198fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80198fe:	331c      	adds	r3, #28
 8019900:	78fa      	ldrb	r2, [r7, #3]
 8019902:	4611      	mov	r1, r2
 8019904:	4618      	mov	r0, r3
 8019906:	f7ff fb30 	bl	8018f6a <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>
 801990a:	4603      	mov	r3, r0
}
 801990c:	4618      	mov	r0, r3
 801990e:	3708      	adds	r7, #8
 8019910:	46bd      	mov	sp, r7
 8019912:	bd80      	pop	{r7, pc}

08019914 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>:
        SimpleString name_;
        SimpleString type_;
        void* ptr_;

        MockOutputParametersListNode* next_;
        MockOutputParametersListNode(const SimpleString& name, const SimpleString& type, void* ptr)
 8019914:	b580      	push	{r7, lr}
 8019916:	b084      	sub	sp, #16
 8019918:	af00      	add	r7, sp, #0
 801991a:	60f8      	str	r0, [r7, #12]
 801991c:	60b9      	str	r1, [r7, #8]
 801991e:	607a      	str	r2, [r7, #4]
 8019920:	603b      	str	r3, [r7, #0]
            : name_(name), type_(type), ptr_(ptr), next_(NULLPTR) {}
 8019922:	68fb      	ldr	r3, [r7, #12]
 8019924:	68b9      	ldr	r1, [r7, #8]
 8019926:	4618      	mov	r0, r3
 8019928:	f7f5 fb13 	bl	800ef52 <_ZN12SimpleStringC1ERKS_>
 801992c:	68fb      	ldr	r3, [r7, #12]
 801992e:	3308      	adds	r3, #8
 8019930:	6879      	ldr	r1, [r7, #4]
 8019932:	4618      	mov	r0, r3
 8019934:	f7f5 fb0d 	bl	800ef52 <_ZN12SimpleStringC1ERKS_>
 8019938:	68fb      	ldr	r3, [r7, #12]
 801993a:	683a      	ldr	r2, [r7, #0]
 801993c:	611a      	str	r2, [r3, #16]
 801993e:	68fb      	ldr	r3, [r7, #12]
 8019940:	2200      	movs	r2, #0
 8019942:	615a      	str	r2, [r3, #20]
 8019944:	68fb      	ldr	r3, [r7, #12]
 8019946:	4618      	mov	r0, r3
 8019948:	3710      	adds	r7, #16
 801994a:	46bd      	mov	sp, r7
 801994c:	bd80      	pop	{r7, pc}

0801994e <_ZN21MockIgnoredActualCall8withNameERK12SimpleString>:
};

class MockIgnoredActualCall: public MockActualCall
{
public:
    virtual MockActualCall& withName(const SimpleString&) _override { return *this;}
 801994e:	b480      	push	{r7}
 8019950:	b083      	sub	sp, #12
 8019952:	af00      	add	r7, sp, #0
 8019954:	6078      	str	r0, [r7, #4]
 8019956:	6039      	str	r1, [r7, #0]
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	4618      	mov	r0, r3
 801995c:	370c      	adds	r7, #12
 801995e:	46bd      	mov	sp, r7
 8019960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019964:	4770      	bx	lr

08019966 <_ZN21MockIgnoredActualCall13withCallOrderEj>:
    virtual MockActualCall& withCallOrder(unsigned int) _override { return *this; }
 8019966:	b480      	push	{r7}
 8019968:	b083      	sub	sp, #12
 801996a:	af00      	add	r7, sp, #0
 801996c:	6078      	str	r0, [r7, #4]
 801996e:	6039      	str	r1, [r7, #0]
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	4618      	mov	r0, r3
 8019974:	370c      	adds	r7, #12
 8019976:	46bd      	mov	sp, r7
 8019978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801997c:	4770      	bx	lr

0801997e <_ZN21MockIgnoredActualCall17withBoolParameterERK12SimpleStringb>:
    virtual MockActualCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 801997e:	b480      	push	{r7}
 8019980:	b085      	sub	sp, #20
 8019982:	af00      	add	r7, sp, #0
 8019984:	60f8      	str	r0, [r7, #12]
 8019986:	60b9      	str	r1, [r7, #8]
 8019988:	4613      	mov	r3, r2
 801998a:	71fb      	strb	r3, [r7, #7]
 801998c:	68fb      	ldr	r3, [r7, #12]
 801998e:	4618      	mov	r0, r3
 8019990:	3714      	adds	r7, #20
 8019992:	46bd      	mov	sp, r7
 8019994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019998:	4770      	bx	lr

0801999a <_ZN21MockIgnoredActualCall16withIntParameterERK12SimpleStringi>:
    virtual MockActualCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 801999a:	b480      	push	{r7}
 801999c:	b085      	sub	sp, #20
 801999e:	af00      	add	r7, sp, #0
 80199a0:	60f8      	str	r0, [r7, #12]
 80199a2:	60b9      	str	r1, [r7, #8]
 80199a4:	607a      	str	r2, [r7, #4]
 80199a6:	68fb      	ldr	r3, [r7, #12]
 80199a8:	4618      	mov	r0, r3
 80199aa:	3714      	adds	r7, #20
 80199ac:	46bd      	mov	sp, r7
 80199ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199b2:	4770      	bx	lr

080199b4 <_ZN21MockIgnoredActualCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockActualCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override { return *this; }
 80199b4:	b480      	push	{r7}
 80199b6:	b085      	sub	sp, #20
 80199b8:	af00      	add	r7, sp, #0
 80199ba:	60f8      	str	r0, [r7, #12]
 80199bc:	60b9      	str	r1, [r7, #8]
 80199be:	607a      	str	r2, [r7, #4]
 80199c0:	68fb      	ldr	r3, [r7, #12]
 80199c2:	4618      	mov	r0, r3
 80199c4:	3714      	adds	r7, #20
 80199c6:	46bd      	mov	sp, r7
 80199c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199cc:	4770      	bx	lr

080199ce <_ZN21MockIgnoredActualCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockActualCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 80199ce:	b480      	push	{r7}
 80199d0:	b085      	sub	sp, #20
 80199d2:	af00      	add	r7, sp, #0
 80199d4:	60f8      	str	r0, [r7, #12]
 80199d6:	60b9      	str	r1, [r7, #8]
 80199d8:	607a      	str	r2, [r7, #4]
 80199da:	68fb      	ldr	r3, [r7, #12]
 80199dc:	4618      	mov	r0, r3
 80199de:	3714      	adds	r7, #20
 80199e0:	46bd      	mov	sp, r7
 80199e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199e6:	4770      	bx	lr

080199e8 <_ZN21MockIgnoredActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockActualCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 80199e8:	b480      	push	{r7}
 80199ea:	b085      	sub	sp, #20
 80199ec:	af00      	add	r7, sp, #0
 80199ee:	60f8      	str	r0, [r7, #12]
 80199f0:	60b9      	str	r1, [r7, #8]
 80199f2:	607a      	str	r2, [r7, #4]
 80199f4:	68fb      	ldr	r3, [r7, #12]
 80199f6:	4618      	mov	r0, r3
 80199f8:	3714      	adds	r7, #20
 80199fa:	46bd      	mov	sp, r7
 80199fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a00:	4770      	bx	lr

08019a02 <_ZN21MockIgnoredActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockActualCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 8019a02:	b480      	push	{r7}
 8019a04:	b085      	sub	sp, #20
 8019a06:	af00      	add	r7, sp, #0
 8019a08:	60f8      	str	r0, [r7, #12]
 8019a0a:	60b9      	str	r1, [r7, #8]
 8019a0c:	4639      	mov	r1, r7
 8019a0e:	e881 000c 	stmia.w	r1, {r2, r3}
 8019a12:	68fb      	ldr	r3, [r7, #12]
 8019a14:	4618      	mov	r0, r3
 8019a16:	3714      	adds	r7, #20
 8019a18:	46bd      	mov	sp, r7
 8019a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a1e:	4770      	bx	lr

08019a20 <_ZN21MockIgnoredActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockActualCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 8019a20:	b480      	push	{r7}
 8019a22:	b085      	sub	sp, #20
 8019a24:	af00      	add	r7, sp, #0
 8019a26:	60f8      	str	r0, [r7, #12]
 8019a28:	60b9      	str	r1, [r7, #8]
 8019a2a:	4639      	mov	r1, r7
 8019a2c:	e881 000c 	stmia.w	r1, {r2, r3}
 8019a30:	68fb      	ldr	r3, [r7, #12]
 8019a32:	4618      	mov	r0, r3
 8019a34:	3714      	adds	r7, #20
 8019a36:	46bd      	mov	sp, r7
 8019a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a3c:	4770      	bx	lr

08019a3e <_ZN21MockIgnoredActualCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockActualCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 8019a3e:	b480      	push	{r7}
 8019a40:	b085      	sub	sp, #20
 8019a42:	af00      	add	r7, sp, #0
 8019a44:	60f8      	str	r0, [r7, #12]
 8019a46:	60b9      	str	r1, [r7, #8]
 8019a48:	ed87 0b00 	vstr	d0, [r7]
 8019a4c:	68fb      	ldr	r3, [r7, #12]
 8019a4e:	4618      	mov	r0, r3
 8019a50:	3714      	adds	r7, #20
 8019a52:	46bd      	mov	sp, r7
 8019a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a58:	4770      	bx	lr

08019a5a <_ZN21MockIgnoredActualCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockActualCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 8019a5a:	b480      	push	{r7}
 8019a5c:	b085      	sub	sp, #20
 8019a5e:	af00      	add	r7, sp, #0
 8019a60:	60f8      	str	r0, [r7, #12]
 8019a62:	60b9      	str	r1, [r7, #8]
 8019a64:	607a      	str	r2, [r7, #4]
 8019a66:	68fb      	ldr	r3, [r7, #12]
 8019a68:	4618      	mov	r0, r3
 8019a6a:	3714      	adds	r7, #20
 8019a6c:	46bd      	mov	sp, r7
 8019a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a72:	4770      	bx	lr

08019a74 <_ZN21MockIgnoredActualCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockActualCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 8019a74:	b480      	push	{r7}
 8019a76:	b085      	sub	sp, #20
 8019a78:	af00      	add	r7, sp, #0
 8019a7a:	60f8      	str	r0, [r7, #12]
 8019a7c:	60b9      	str	r1, [r7, #8]
 8019a7e:	607a      	str	r2, [r7, #4]
 8019a80:	68fb      	ldr	r3, [r7, #12]
 8019a82:	4618      	mov	r0, r3
 8019a84:	3714      	adds	r7, #20
 8019a86:	46bd      	mov	sp, r7
 8019a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a8c:	4770      	bx	lr

08019a8e <_ZN21MockIgnoredActualCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockActualCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 8019a8e:	b480      	push	{r7}
 8019a90:	b085      	sub	sp, #20
 8019a92:	af00      	add	r7, sp, #0
 8019a94:	60f8      	str	r0, [r7, #12]
 8019a96:	60b9      	str	r1, [r7, #8]
 8019a98:	607a      	str	r2, [r7, #4]
 8019a9a:	68fb      	ldr	r3, [r7, #12]
 8019a9c:	4618      	mov	r0, r3
 8019a9e:	3714      	adds	r7, #20
 8019aa0:	46bd      	mov	sp, r7
 8019aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aa6:	4770      	bx	lr

08019aa8 <_ZN21MockIgnoredActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockActualCall& withFunctionPointerParameter(const SimpleString& , void (*)()) _override { return *this; }
 8019aa8:	b480      	push	{r7}
 8019aaa:	b085      	sub	sp, #20
 8019aac:	af00      	add	r7, sp, #0
 8019aae:	60f8      	str	r0, [r7, #12]
 8019ab0:	60b9      	str	r1, [r7, #8]
 8019ab2:	607a      	str	r2, [r7, #4]
 8019ab4:	68fb      	ldr	r3, [r7, #12]
 8019ab6:	4618      	mov	r0, r3
 8019ab8:	3714      	adds	r7, #20
 8019aba:	46bd      	mov	sp, r7
 8019abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ac0:	4770      	bx	lr

08019ac2 <_ZN21MockIgnoredActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockActualCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override  { return *this; }
 8019ac2:	b480      	push	{r7}
 8019ac4:	b085      	sub	sp, #20
 8019ac6:	af00      	add	r7, sp, #0
 8019ac8:	60f8      	str	r0, [r7, #12]
 8019aca:	60b9      	str	r1, [r7, #8]
 8019acc:	607a      	str	r2, [r7, #4]
 8019ace:	603b      	str	r3, [r7, #0]
 8019ad0:	68fb      	ldr	r3, [r7, #12]
 8019ad2:	4618      	mov	r0, r3
 8019ad4:	3714      	adds	r7, #20
 8019ad6:	46bd      	mov	sp, r7
 8019ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019adc:	4770      	bx	lr

08019ade <_ZN21MockIgnoredActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockActualCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 8019ade:	b480      	push	{r7}
 8019ae0:	b085      	sub	sp, #20
 8019ae2:	af00      	add	r7, sp, #0
 8019ae4:	60f8      	str	r0, [r7, #12]
 8019ae6:	60b9      	str	r1, [r7, #8]
 8019ae8:	607a      	str	r2, [r7, #4]
 8019aea:	603b      	str	r3, [r7, #0]
 8019aec:	68fb      	ldr	r3, [r7, #12]
 8019aee:	4618      	mov	r0, r3
 8019af0:	3714      	adds	r7, #20
 8019af2:	46bd      	mov	sp, r7
 8019af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019af8:	4770      	bx	lr

08019afa <_ZN21MockIgnoredActualCall19withOutputParameterERK12SimpleStringPv>:
    virtual MockActualCall& withOutputParameter(const SimpleString&, void*) _override { return *this; }
 8019afa:	b480      	push	{r7}
 8019afc:	b085      	sub	sp, #20
 8019afe:	af00      	add	r7, sp, #0
 8019b00:	60f8      	str	r0, [r7, #12]
 8019b02:	60b9      	str	r1, [r7, #8]
 8019b04:	607a      	str	r2, [r7, #4]
 8019b06:	68fb      	ldr	r3, [r7, #12]
 8019b08:	4618      	mov	r0, r3
 8019b0a:	3714      	adds	r7, #20
 8019b0c:	46bd      	mov	sp, r7
 8019b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b12:	4770      	bx	lr

08019b14 <_ZN21MockIgnoredActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:
    virtual MockActualCall& withOutputParameterOfType(const SimpleString&, const SimpleString&, void*) _override { return *this; }
 8019b14:	b480      	push	{r7}
 8019b16:	b085      	sub	sp, #20
 8019b18:	af00      	add	r7, sp, #0
 8019b1a:	60f8      	str	r0, [r7, #12]
 8019b1c:	60b9      	str	r1, [r7, #8]
 8019b1e:	607a      	str	r2, [r7, #4]
 8019b20:	603b      	str	r3, [r7, #0]
 8019b22:	68fb      	ldr	r3, [r7, #12]
 8019b24:	4618      	mov	r0, r3
 8019b26:	3714      	adds	r7, #20
 8019b28:	46bd      	mov	sp, r7
 8019b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b2e:	4770      	bx	lr

08019b30 <_ZN21MockIgnoredActualCall14hasReturnValueEv>:

    virtual bool hasReturnValue() _override { return false; }
 8019b30:	b480      	push	{r7}
 8019b32:	b083      	sub	sp, #12
 8019b34:	af00      	add	r7, sp, #0
 8019b36:	6078      	str	r0, [r7, #4]
 8019b38:	2300      	movs	r3, #0
 8019b3a:	4618      	mov	r0, r3
 8019b3c:	370c      	adds	r7, #12
 8019b3e:	46bd      	mov	sp, r7
 8019b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b44:	4770      	bx	lr
	...

08019b48 <_ZN21MockIgnoredActualCall11returnValueEv>:
    virtual MockNamedValue returnValue() _override { return MockNamedValue(""); }
 8019b48:	b580      	push	{r7, lr}
 8019b4a:	b084      	sub	sp, #16
 8019b4c:	af00      	add	r7, sp, #0
 8019b4e:	6078      	str	r0, [r7, #4]
 8019b50:	6039      	str	r1, [r7, #0]
 8019b52:	f107 0308 	add.w	r3, r7, #8
 8019b56:	4909      	ldr	r1, [pc, #36]	; (8019b7c <_ZN21MockIgnoredActualCall11returnValueEv+0x34>)
 8019b58:	4618      	mov	r0, r3
 8019b5a:	f7f5 f9a6 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8019b5e:	f107 0308 	add.w	r3, r7, #8
 8019b62:	4619      	mov	r1, r3
 8019b64:	6878      	ldr	r0, [r7, #4]
 8019b66:	f005 fec5 	bl	801f8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
 8019b6a:	f107 0308 	add.w	r3, r7, #8
 8019b6e:	4618      	mov	r0, r3
 8019b70:	f7f5 fd53 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8019b74:	6878      	ldr	r0, [r7, #4]
 8019b76:	3710      	adds	r7, #16
 8019b78:	46bd      	mov	sp, r7
 8019b7a:	bd80      	pop	{r7, pc}
 8019b7c:	08028a7c 	.word	0x08028a7c

08019b80 <_ZN21MockIgnoredActualCall24returnBoolValueOrDefaultEb>:

    virtual bool returnBoolValueOrDefault(bool value) _override { return value; }
 8019b80:	b480      	push	{r7}
 8019b82:	b083      	sub	sp, #12
 8019b84:	af00      	add	r7, sp, #0
 8019b86:	6078      	str	r0, [r7, #4]
 8019b88:	460b      	mov	r3, r1
 8019b8a:	70fb      	strb	r3, [r7, #3]
 8019b8c:	78fb      	ldrb	r3, [r7, #3]
 8019b8e:	4618      	mov	r0, r3
 8019b90:	370c      	adds	r7, #12
 8019b92:	46bd      	mov	sp, r7
 8019b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b98:	4770      	bx	lr

08019b9a <_ZN21MockIgnoredActualCall15returnBoolValueEv>:
    virtual bool returnBoolValue() _override { return false; }
 8019b9a:	b480      	push	{r7}
 8019b9c:	b083      	sub	sp, #12
 8019b9e:	af00      	add	r7, sp, #0
 8019ba0:	6078      	str	r0, [r7, #4]
 8019ba2:	2300      	movs	r3, #0
 8019ba4:	4618      	mov	r0, r3
 8019ba6:	370c      	adds	r7, #12
 8019ba8:	46bd      	mov	sp, r7
 8019baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bae:	4770      	bx	lr

08019bb0 <_ZN21MockIgnoredActualCall14returnIntValueEv>:

    virtual int returnIntValue() _override { return 0; }
 8019bb0:	b480      	push	{r7}
 8019bb2:	b083      	sub	sp, #12
 8019bb4:	af00      	add	r7, sp, #0
 8019bb6:	6078      	str	r0, [r7, #4]
 8019bb8:	2300      	movs	r3, #0
 8019bba:	4618      	mov	r0, r3
 8019bbc:	370c      	adds	r7, #12
 8019bbe:	46bd      	mov	sp, r7
 8019bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bc4:	4770      	bx	lr

08019bc6 <_ZN21MockIgnoredActualCall23returnIntValueOrDefaultEi>:
    virtual int returnIntValueOrDefault(int value) _override { return value; }
 8019bc6:	b480      	push	{r7}
 8019bc8:	b083      	sub	sp, #12
 8019bca:	af00      	add	r7, sp, #0
 8019bcc:	6078      	str	r0, [r7, #4]
 8019bce:	6039      	str	r1, [r7, #0]
 8019bd0:	683b      	ldr	r3, [r7, #0]
 8019bd2:	4618      	mov	r0, r3
 8019bd4:	370c      	adds	r7, #12
 8019bd6:	46bd      	mov	sp, r7
 8019bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bdc:	4770      	bx	lr

08019bde <_ZN21MockIgnoredActualCall26returnUnsignedLongIntValueEv>:

    virtual unsigned long int returnUnsignedLongIntValue() _override { return 0; }
 8019bde:	b480      	push	{r7}
 8019be0:	b083      	sub	sp, #12
 8019be2:	af00      	add	r7, sp, #0
 8019be4:	6078      	str	r0, [r7, #4]
 8019be6:	2300      	movs	r3, #0
 8019be8:	4618      	mov	r0, r3
 8019bea:	370c      	adds	r7, #12
 8019bec:	46bd      	mov	sp, r7
 8019bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bf2:	4770      	bx	lr

08019bf4 <_ZN21MockIgnoredActualCall35returnUnsignedLongIntValueOrDefaultEm>:
    virtual unsigned long int returnUnsignedLongIntValueOrDefault(unsigned long int value) _override { return value; }
 8019bf4:	b480      	push	{r7}
 8019bf6:	b083      	sub	sp, #12
 8019bf8:	af00      	add	r7, sp, #0
 8019bfa:	6078      	str	r0, [r7, #4]
 8019bfc:	6039      	str	r1, [r7, #0]
 8019bfe:	683b      	ldr	r3, [r7, #0]
 8019c00:	4618      	mov	r0, r3
 8019c02:	370c      	adds	r7, #12
 8019c04:	46bd      	mov	sp, r7
 8019c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c0a:	4770      	bx	lr

08019c0c <_ZN21MockIgnoredActualCall18returnLongIntValueEv>:

    virtual long int returnLongIntValue() _override { return 0; }
 8019c0c:	b480      	push	{r7}
 8019c0e:	b083      	sub	sp, #12
 8019c10:	af00      	add	r7, sp, #0
 8019c12:	6078      	str	r0, [r7, #4]
 8019c14:	2300      	movs	r3, #0
 8019c16:	4618      	mov	r0, r3
 8019c18:	370c      	adds	r7, #12
 8019c1a:	46bd      	mov	sp, r7
 8019c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c20:	4770      	bx	lr

08019c22 <_ZN21MockIgnoredActualCall27returnLongIntValueOrDefaultEl>:
    virtual long int returnLongIntValueOrDefault(long int value) _override { return value; }
 8019c22:	b480      	push	{r7}
 8019c24:	b083      	sub	sp, #12
 8019c26:	af00      	add	r7, sp, #0
 8019c28:	6078      	str	r0, [r7, #4]
 8019c2a:	6039      	str	r1, [r7, #0]
 8019c2c:	683b      	ldr	r3, [r7, #0]
 8019c2e:	4618      	mov	r0, r3
 8019c30:	370c      	adds	r7, #12
 8019c32:	46bd      	mov	sp, r7
 8019c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c38:	4770      	bx	lr

08019c3a <_ZN21MockIgnoredActualCall30returnUnsignedLongLongIntValueEv>:

    virtual cpputest_ulonglong returnUnsignedLongLongIntValue() _override { return 0; }
 8019c3a:	b580      	push	{r7, lr}
 8019c3c:	b082      	sub	sp, #8
 8019c3e:	af00      	add	r7, sp, #0
 8019c40:	6078      	str	r0, [r7, #4]
 8019c42:	6039      	str	r1, [r7, #0]
 8019c44:	2100      	movs	r1, #0
 8019c46:	6878      	ldr	r0, [r7, #4]
 8019c48:	f7f3 f972 	bl	800cf30 <_ZN18cpputest_ulonglongC1Ei>
 8019c4c:	6878      	ldr	r0, [r7, #4]
 8019c4e:	3708      	adds	r7, #8
 8019c50:	46bd      	mov	sp, r7
 8019c52:	bd80      	pop	{r7, pc}

08019c54 <_ZN21MockIgnoredActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:
    virtual cpputest_ulonglong returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong value) _override { return value; }
 8019c54:	b480      	push	{r7}
 8019c56:	b085      	sub	sp, #20
 8019c58:	af00      	add	r7, sp, #0
 8019c5a:	60f8      	str	r0, [r7, #12]
 8019c5c:	60b9      	str	r1, [r7, #8]
 8019c5e:	4639      	mov	r1, r7
 8019c60:	e881 000c 	stmia.w	r1, {r2, r3}
 8019c64:	68fb      	ldr	r3, [r7, #12]
 8019c66:	461a      	mov	r2, r3
 8019c68:	463b      	mov	r3, r7
 8019c6a:	cb03      	ldmia	r3!, {r0, r1}
 8019c6c:	6010      	str	r0, [r2, #0]
 8019c6e:	6051      	str	r1, [r2, #4]
 8019c70:	68f8      	ldr	r0, [r7, #12]
 8019c72:	3714      	adds	r7, #20
 8019c74:	46bd      	mov	sp, r7
 8019c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c7a:	4770      	bx	lr

08019c7c <_ZN21MockIgnoredActualCall22returnLongLongIntValueEv>:

    virtual cpputest_longlong returnLongLongIntValue() _override { return 0; }
 8019c7c:	b580      	push	{r7, lr}
 8019c7e:	b082      	sub	sp, #8
 8019c80:	af00      	add	r7, sp, #0
 8019c82:	6078      	str	r0, [r7, #4]
 8019c84:	6039      	str	r1, [r7, #0]
 8019c86:	2100      	movs	r1, #0
 8019c88:	6878      	ldr	r0, [r7, #4]
 8019c8a:	f7f3 f945 	bl	800cf18 <_ZN17cpputest_longlongC1Ei>
 8019c8e:	6878      	ldr	r0, [r7, #4]
 8019c90:	3708      	adds	r7, #8
 8019c92:	46bd      	mov	sp, r7
 8019c94:	bd80      	pop	{r7, pc}

08019c96 <_ZN21MockIgnoredActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:
    virtual cpputest_longlong returnLongLongIntValueOrDefault(cpputest_longlong value) _override { return value; }
 8019c96:	b480      	push	{r7}
 8019c98:	b085      	sub	sp, #20
 8019c9a:	af00      	add	r7, sp, #0
 8019c9c:	60f8      	str	r0, [r7, #12]
 8019c9e:	60b9      	str	r1, [r7, #8]
 8019ca0:	4639      	mov	r1, r7
 8019ca2:	e881 000c 	stmia.w	r1, {r2, r3}
 8019ca6:	68fb      	ldr	r3, [r7, #12]
 8019ca8:	461a      	mov	r2, r3
 8019caa:	463b      	mov	r3, r7
 8019cac:	cb03      	ldmia	r3!, {r0, r1}
 8019cae:	6010      	str	r0, [r2, #0]
 8019cb0:	6051      	str	r1, [r2, #4]
 8019cb2:	68f8      	ldr	r0, [r7, #12]
 8019cb4:	3714      	adds	r7, #20
 8019cb6:	46bd      	mov	sp, r7
 8019cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cbc:	4770      	bx	lr

08019cbe <_ZN21MockIgnoredActualCall22returnUnsignedIntValueEv>:

    virtual unsigned int returnUnsignedIntValue() _override { return 0; }
 8019cbe:	b480      	push	{r7}
 8019cc0:	b083      	sub	sp, #12
 8019cc2:	af00      	add	r7, sp, #0
 8019cc4:	6078      	str	r0, [r7, #4]
 8019cc6:	2300      	movs	r3, #0
 8019cc8:	4618      	mov	r0, r3
 8019cca:	370c      	adds	r7, #12
 8019ccc:	46bd      	mov	sp, r7
 8019cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cd2:	4770      	bx	lr

08019cd4 <_ZN21MockIgnoredActualCall31returnUnsignedIntValueOrDefaultEj>:
    virtual unsigned int returnUnsignedIntValueOrDefault(unsigned int value) _override { return value; }
 8019cd4:	b480      	push	{r7}
 8019cd6:	b083      	sub	sp, #12
 8019cd8:	af00      	add	r7, sp, #0
 8019cda:	6078      	str	r0, [r7, #4]
 8019cdc:	6039      	str	r1, [r7, #0]
 8019cde:	683b      	ldr	r3, [r7, #0]
 8019ce0:	4618      	mov	r0, r3
 8019ce2:	370c      	adds	r7, #12
 8019ce4:	46bd      	mov	sp, r7
 8019ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cea:	4770      	bx	lr

08019cec <_ZN21MockIgnoredActualCall17returnDoubleValueEv>:

    virtual double returnDoubleValue() _override { return 0.0; }
 8019cec:	b480      	push	{r7}
 8019cee:	b083      	sub	sp, #12
 8019cf0:	af00      	add	r7, sp, #0
 8019cf2:	6078      	str	r0, [r7, #4]
 8019cf4:	f04f 0200 	mov.w	r2, #0
 8019cf8:	f04f 0300 	mov.w	r3, #0
 8019cfc:	ec43 2b17 	vmov	d7, r2, r3
 8019d00:	eeb0 0a47 	vmov.f32	s0, s14
 8019d04:	eef0 0a67 	vmov.f32	s1, s15
 8019d08:	370c      	adds	r7, #12
 8019d0a:	46bd      	mov	sp, r7
 8019d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d10:	4770      	bx	lr

08019d12 <_ZN21MockIgnoredActualCall26returnDoubleValueOrDefaultEd>:
    virtual double returnDoubleValueOrDefault(double value) _override { return value; }
 8019d12:	b480      	push	{r7}
 8019d14:	b085      	sub	sp, #20
 8019d16:	af00      	add	r7, sp, #0
 8019d18:	60f8      	str	r0, [r7, #12]
 8019d1a:	ed87 0b00 	vstr	d0, [r7]
 8019d1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019d22:	ec43 2b17 	vmov	d7, r2, r3
 8019d26:	eeb0 0a47 	vmov.f32	s0, s14
 8019d2a:	eef0 0a67 	vmov.f32	s1, s15
 8019d2e:	3714      	adds	r7, #20
 8019d30:	46bd      	mov	sp, r7
 8019d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d36:	4770      	bx	lr

08019d38 <_ZN21MockIgnoredActualCall17returnStringValueEv>:

    virtual const char * returnStringValue() _override { return ""; }
 8019d38:	b480      	push	{r7}
 8019d3a:	b083      	sub	sp, #12
 8019d3c:	af00      	add	r7, sp, #0
 8019d3e:	6078      	str	r0, [r7, #4]
 8019d40:	4b03      	ldr	r3, [pc, #12]	; (8019d50 <_ZN21MockIgnoredActualCall17returnStringValueEv+0x18>)
 8019d42:	4618      	mov	r0, r3
 8019d44:	370c      	adds	r7, #12
 8019d46:	46bd      	mov	sp, r7
 8019d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d4c:	4770      	bx	lr
 8019d4e:	bf00      	nop
 8019d50:	08028a7c 	.word	0x08028a7c

08019d54 <_ZN21MockIgnoredActualCall26returnStringValueOrDefaultEPKc>:
    virtual const char * returnStringValueOrDefault(const char * value) _override { return value; }
 8019d54:	b480      	push	{r7}
 8019d56:	b083      	sub	sp, #12
 8019d58:	af00      	add	r7, sp, #0
 8019d5a:	6078      	str	r0, [r7, #4]
 8019d5c:	6039      	str	r1, [r7, #0]
 8019d5e:	683b      	ldr	r3, [r7, #0]
 8019d60:	4618      	mov	r0, r3
 8019d62:	370c      	adds	r7, #12
 8019d64:	46bd      	mov	sp, r7
 8019d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d6a:	4770      	bx	lr

08019d6c <_ZN21MockIgnoredActualCall18returnPointerValueEv>:

    virtual void * returnPointerValue() _override { return NULLPTR; }
 8019d6c:	b480      	push	{r7}
 8019d6e:	b083      	sub	sp, #12
 8019d70:	af00      	add	r7, sp, #0
 8019d72:	6078      	str	r0, [r7, #4]
 8019d74:	2300      	movs	r3, #0
 8019d76:	4618      	mov	r0, r3
 8019d78:	370c      	adds	r7, #12
 8019d7a:	46bd      	mov	sp, r7
 8019d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d80:	4770      	bx	lr

08019d82 <_ZN21MockIgnoredActualCall27returnPointerValueOrDefaultEPv>:
    virtual void * returnPointerValueOrDefault(void * value) _override { return value; }
 8019d82:	b480      	push	{r7}
 8019d84:	b083      	sub	sp, #12
 8019d86:	af00      	add	r7, sp, #0
 8019d88:	6078      	str	r0, [r7, #4]
 8019d8a:	6039      	str	r1, [r7, #0]
 8019d8c:	683b      	ldr	r3, [r7, #0]
 8019d8e:	4618      	mov	r0, r3
 8019d90:	370c      	adds	r7, #12
 8019d92:	46bd      	mov	sp, r7
 8019d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d98:	4770      	bx	lr

08019d9a <_ZN21MockIgnoredActualCall23returnConstPointerValueEv>:

    virtual const void * returnConstPointerValue() _override { return NULLPTR; }
 8019d9a:	b480      	push	{r7}
 8019d9c:	b083      	sub	sp, #12
 8019d9e:	af00      	add	r7, sp, #0
 8019da0:	6078      	str	r0, [r7, #4]
 8019da2:	2300      	movs	r3, #0
 8019da4:	4618      	mov	r0, r3
 8019da6:	370c      	adds	r7, #12
 8019da8:	46bd      	mov	sp, r7
 8019daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dae:	4770      	bx	lr

08019db0 <_ZN21MockIgnoredActualCall32returnConstPointerValueOrDefaultEPKv>:
    virtual const void * returnConstPointerValueOrDefault(const void * value) _override { return value; }
 8019db0:	b480      	push	{r7}
 8019db2:	b083      	sub	sp, #12
 8019db4:	af00      	add	r7, sp, #0
 8019db6:	6078      	str	r0, [r7, #4]
 8019db8:	6039      	str	r1, [r7, #0]
 8019dba:	683b      	ldr	r3, [r7, #0]
 8019dbc:	4618      	mov	r0, r3
 8019dbe:	370c      	adds	r7, #12
 8019dc0:	46bd      	mov	sp, r7
 8019dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dc6:	4770      	bx	lr

08019dc8 <_ZN21MockIgnoredActualCall26returnFunctionPointerValueEv>:

    virtual void (*returnFunctionPointerValue())() _override { return NULLPTR; }
 8019dc8:	b480      	push	{r7}
 8019dca:	b083      	sub	sp, #12
 8019dcc:	af00      	add	r7, sp, #0
 8019dce:	6078      	str	r0, [r7, #4]
 8019dd0:	2300      	movs	r3, #0
 8019dd2:	4618      	mov	r0, r3
 8019dd4:	370c      	adds	r7, #12
 8019dd6:	46bd      	mov	sp, r7
 8019dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ddc:	4770      	bx	lr

08019dde <_ZN21MockIgnoredActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:
    virtual void (*returnFunctionPointerValueOrDefault(void (*value)()))() _override { return value; }
 8019dde:	b480      	push	{r7}
 8019de0:	b083      	sub	sp, #12
 8019de2:	af00      	add	r7, sp, #0
 8019de4:	6078      	str	r0, [r7, #4]
 8019de6:	6039      	str	r1, [r7, #0]
 8019de8:	683b      	ldr	r3, [r7, #0]
 8019dea:	4618      	mov	r0, r3
 8019dec:	370c      	adds	r7, #12
 8019dee:	46bd      	mov	sp, r7
 8019df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019df4:	4770      	bx	lr

08019df6 <_ZN21MockIgnoredActualCall8onObjectEPKv>:

    virtual MockActualCall& onObject(const void* ) _override { return *this; }
 8019df6:	b480      	push	{r7}
 8019df8:	b083      	sub	sp, #12
 8019dfa:	af00      	add	r7, sp, #0
 8019dfc:	6078      	str	r0, [r7, #4]
 8019dfe:	6039      	str	r1, [r7, #0]
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	4618      	mov	r0, r3
 8019e04:	370c      	adds	r7, #12
 8019e06:	46bd      	mov	sp, r7
 8019e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e0c:	4770      	bx	lr
	...

08019e10 <_ZN14MockActualCallC1Ev>:
#include "CppUTestExt/MockCheckedActualCall.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"
#include "CppUTestExt/MockFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

MockActualCall::MockActualCall()
 8019e10:	b480      	push	{r7}
 8019e12:	b083      	sub	sp, #12
 8019e14:	af00      	add	r7, sp, #0
 8019e16:	6078      	str	r0, [r7, #4]
 8019e18:	4a04      	ldr	r2, [pc, #16]	; (8019e2c <_ZN14MockActualCallC1Ev+0x1c>)
 8019e1a:	687b      	ldr	r3, [r7, #4]
 8019e1c:	601a      	str	r2, [r3, #0]
{
}
 8019e1e:	687b      	ldr	r3, [r7, #4]
 8019e20:	4618      	mov	r0, r3
 8019e22:	370c      	adds	r7, #12
 8019e24:	46bd      	mov	sp, r7
 8019e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e2a:	4770      	bx	lr
 8019e2c:	0802bea0 	.word	0x0802bea0

08019e30 <_ZN14MockActualCallD1Ev>:

MockActualCall::~MockActualCall()
 8019e30:	b480      	push	{r7}
 8019e32:	b083      	sub	sp, #12
 8019e34:	af00      	add	r7, sp, #0
 8019e36:	6078      	str	r0, [r7, #4]
 8019e38:	4a04      	ldr	r2, [pc, #16]	; (8019e4c <_ZN14MockActualCallD1Ev+0x1c>)
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	601a      	str	r2, [r3, #0]
{
}
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	4618      	mov	r0, r3
 8019e42:	370c      	adds	r7, #12
 8019e44:	46bd      	mov	sp, r7
 8019e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e4a:	4770      	bx	lr
 8019e4c:	0802bea0 	.word	0x0802bea0

08019e50 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>:

void MockCheckedActualCall::setName(const SimpleString& name)
{
 8019e50:	b580      	push	{r7, lr}
 8019e52:	b082      	sub	sp, #8
 8019e54:	af00      	add	r7, sp, #0
 8019e56:	6078      	str	r0, [r7, #4]
 8019e58:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 8019e5a:	687b      	ldr	r3, [r7, #4]
 8019e5c:	3304      	adds	r3, #4
 8019e5e:	6839      	ldr	r1, [r7, #0]
 8019e60:	4618      	mov	r0, r3
 8019e62:	f7f5 f88e 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
}
 8019e66:	bf00      	nop
 8019e68:	3708      	adds	r7, #8
 8019e6a:	46bd      	mov	sp, r7
 8019e6c:	bd80      	pop	{r7, pc}

08019e6e <_ZNK21MockCheckedActualCall7getNameEv>:

SimpleString MockCheckedActualCall::getName() const
{
 8019e6e:	b580      	push	{r7, lr}
 8019e70:	b082      	sub	sp, #8
 8019e72:	af00      	add	r7, sp, #0
 8019e74:	6078      	str	r0, [r7, #4]
 8019e76:	6039      	str	r1, [r7, #0]
    return functionName_;
 8019e78:	683b      	ldr	r3, [r7, #0]
 8019e7a:	3304      	adds	r3, #4
 8019e7c:	4619      	mov	r1, r3
 8019e7e:	6878      	ldr	r0, [r7, #4]
 8019e80:	f7f5 f867 	bl	800ef52 <_ZN12SimpleStringC1ERKS_>
}
 8019e84:	6878      	ldr	r0, [r7, #4]
 8019e86:	3708      	adds	r7, #8
 8019e88:	46bd      	mov	sp, r7
 8019e8a:	bd80      	pop	{r7, pc}

08019e8c <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>:

MockCheckedActualCall::MockCheckedActualCall(unsigned int callOrder, MockFailureReporter* reporter, const MockExpectedCallsList& allExpectations)
 8019e8c:	b580      	push	{r7, lr}
 8019e8e:	b084      	sub	sp, #16
 8019e90:	af00      	add	r7, sp, #0
 8019e92:	60f8      	str	r0, [r7, #12]
 8019e94:	60b9      	str	r1, [r7, #8]
 8019e96:	607a      	str	r2, [r7, #4]
 8019e98:	603b      	str	r3, [r7, #0]
    : callOrder_(callOrder), reporter_(reporter), state_(CALL_SUCCEED), expectationsChecked_(false), matchingExpectation_(NULLPTR),
      allExpectations_(allExpectations), outputParameterExpectations_(NULLPTR)
 8019e9a:	68fb      	ldr	r3, [r7, #12]
 8019e9c:	4618      	mov	r0, r3
 8019e9e:	f7ff ffb7 	bl	8019e10 <_ZN14MockActualCallC1Ev>
 8019ea2:	4a17      	ldr	r2, [pc, #92]	; (8019f00 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x74>)
 8019ea4:	68fb      	ldr	r3, [r7, #12]
 8019ea6:	601a      	str	r2, [r3, #0]
 8019ea8:	68fb      	ldr	r3, [r7, #12]
 8019eaa:	3304      	adds	r3, #4
 8019eac:	4915      	ldr	r1, [pc, #84]	; (8019f04 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x78>)
 8019eae:	4618      	mov	r0, r3
 8019eb0:	f7f4 fffb 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8019eb4:	68fb      	ldr	r3, [r7, #12]
 8019eb6:	68ba      	ldr	r2, [r7, #8]
 8019eb8:	60da      	str	r2, [r3, #12]
 8019eba:	68fb      	ldr	r3, [r7, #12]
 8019ebc:	687a      	ldr	r2, [r7, #4]
 8019ebe:	611a      	str	r2, [r3, #16]
 8019ec0:	68fb      	ldr	r3, [r7, #12]
 8019ec2:	2202      	movs	r2, #2
 8019ec4:	751a      	strb	r2, [r3, #20]
 8019ec6:	68fb      	ldr	r3, [r7, #12]
 8019ec8:	2200      	movs	r2, #0
 8019eca:	755a      	strb	r2, [r3, #21]
 8019ecc:	68fb      	ldr	r3, [r7, #12]
 8019ece:	2200      	movs	r2, #0
 8019ed0:	619a      	str	r2, [r3, #24]
 8019ed2:	68fb      	ldr	r3, [r7, #12]
 8019ed4:	331c      	adds	r3, #28
 8019ed6:	4618      	mov	r0, r3
 8019ed8:	f004 f814 	bl	801df04 <_ZN21MockExpectedCallsListC1Ev>
 8019edc:	68fb      	ldr	r3, [r7, #12]
 8019ede:	683a      	ldr	r2, [r7, #0]
 8019ee0:	625a      	str	r2, [r3, #36]	; 0x24
 8019ee2:	68fb      	ldr	r3, [r7, #12]
 8019ee4:	2200      	movs	r2, #0
 8019ee6:	629a      	str	r2, [r3, #40]	; 0x28
{
    potentiallyMatchingExpectations_.addPotentiallyMatchingExpectations(allExpectations);
 8019ee8:	68fb      	ldr	r3, [r7, #12]
 8019eea:	331c      	adds	r3, #28
 8019eec:	6839      	ldr	r1, [r7, #0]
 8019eee:	4618      	mov	r0, r3
 8019ef0:	f004 f986 	bl	801e200 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>
}
 8019ef4:	68fb      	ldr	r3, [r7, #12]
 8019ef6:	4618      	mov	r0, r3
 8019ef8:	3710      	adds	r7, #16
 8019efa:	46bd      	mov	sp, r7
 8019efc:	bd80      	pop	{r7, pc}
 8019efe:	bf00      	nop
 8019f00:	0802bda0 	.word	0x0802bda0
 8019f04:	08028a7c 	.word	0x08028a7c

08019f08 <_ZN21MockCheckedActualCallD1Ev>:

MockCheckedActualCall::~MockCheckedActualCall()
 8019f08:	b580      	push	{r7, lr}
 8019f0a:	b082      	sub	sp, #8
 8019f0c:	af00      	add	r7, sp, #0
 8019f0e:	6078      	str	r0, [r7, #4]
 8019f10:	4a0c      	ldr	r2, [pc, #48]	; (8019f44 <_ZN21MockCheckedActualCallD1Ev+0x3c>)
 8019f12:	687b      	ldr	r3, [r7, #4]
 8019f14:	601a      	str	r2, [r3, #0]
{
    cleanUpOutputParameterList();
 8019f16:	6878      	ldr	r0, [r7, #4]
 8019f18:	f001 fae4 	bl	801b4e4 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>
MockCheckedActualCall::~MockCheckedActualCall()
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	331c      	adds	r3, #28
 8019f20:	4618      	mov	r0, r3
 8019f22:	f004 f803 	bl	801df2c <_ZN21MockExpectedCallsListD1Ev>
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	3304      	adds	r3, #4
 8019f2a:	4618      	mov	r0, r3
 8019f2c:	f7f5 fb75 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8019f30:	687b      	ldr	r3, [r7, #4]
 8019f32:	4618      	mov	r0, r3
 8019f34:	f7ff ff7c 	bl	8019e30 <_ZN14MockActualCallD1Ev>
}
 8019f38:	687b      	ldr	r3, [r7, #4]
 8019f3a:	4618      	mov	r0, r3
 8019f3c:	3708      	adds	r7, #8
 8019f3e:	46bd      	mov	sp, r7
 8019f40:	bd80      	pop	{r7, pc}
 8019f42:	bf00      	nop
 8019f44:	0802bda0 	.word	0x0802bda0

08019f48 <_ZN21MockCheckedActualCallD0Ev>:
MockCheckedActualCall::~MockCheckedActualCall()
 8019f48:	b580      	push	{r7, lr}
 8019f4a:	b082      	sub	sp, #8
 8019f4c:	af00      	add	r7, sp, #0
 8019f4e:	6078      	str	r0, [r7, #4]
}
 8019f50:	6878      	ldr	r0, [r7, #4]
 8019f52:	f7ff ffd9 	bl	8019f08 <_ZN21MockCheckedActualCallD1Ev>
 8019f56:	212c      	movs	r1, #44	; 0x2c
 8019f58:	6878      	ldr	r0, [r7, #4]
 8019f5a:	f7f2 fbf7 	bl	800c74c <_ZdlPvj>
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	4618      	mov	r0, r3
 8019f62:	3708      	adds	r7, #8
 8019f64:	46bd      	mov	sp, r7
 8019f66:	bd80      	pop	{r7, pc}

08019f68 <_ZN21MockCheckedActualCall22setMockFailureReporterEP19MockFailureReporter>:

void MockCheckedActualCall::setMockFailureReporter(MockFailureReporter* reporter)
{
 8019f68:	b480      	push	{r7}
 8019f6a:	b083      	sub	sp, #12
 8019f6c:	af00      	add	r7, sp, #0
 8019f6e:	6078      	str	r0, [r7, #4]
 8019f70:	6039      	str	r1, [r7, #0]
    reporter_ = reporter;
 8019f72:	687b      	ldr	r3, [r7, #4]
 8019f74:	683a      	ldr	r2, [r7, #0]
 8019f76:	611a      	str	r2, [r3, #16]
}
 8019f78:	bf00      	nop
 8019f7a:	370c      	adds	r7, #12
 8019f7c:	46bd      	mov	sp, r7
 8019f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f82:	4770      	bx	lr

08019f84 <_ZNK21MockCheckedActualCall7getTestEv>:

UtestShell* MockCheckedActualCall::getTest() const
{
 8019f84:	b580      	push	{r7, lr}
 8019f86:	b082      	sub	sp, #8
 8019f88:	af00      	add	r7, sp, #0
 8019f8a:	6078      	str	r0, [r7, #4]
    return reporter_->getTestToFail();
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	691a      	ldr	r2, [r3, #16]
 8019f90:	687b      	ldr	r3, [r7, #4]
 8019f92:	691b      	ldr	r3, [r3, #16]
 8019f94:	681b      	ldr	r3, [r3, #0]
 8019f96:	330c      	adds	r3, #12
 8019f98:	681b      	ldr	r3, [r3, #0]
 8019f9a:	4610      	mov	r0, r2
 8019f9c:	4798      	blx	r3
 8019f9e:	4603      	mov	r3, r0
}
 8019fa0:	4618      	mov	r0, r3
 8019fa2:	3708      	adds	r7, #8
 8019fa4:	46bd      	mov	sp, r7
 8019fa6:	bd80      	pop	{r7, pc}

08019fa8 <_ZN21MockCheckedActualCall8failTestERK11MockFailure>:

void MockCheckedActualCall::failTest(const MockFailure& failure)
{
 8019fa8:	b580      	push	{r7, lr}
 8019faa:	b082      	sub	sp, #8
 8019fac:	af00      	add	r7, sp, #0
 8019fae:	6078      	str	r0, [r7, #4]
 8019fb0:	6039      	str	r1, [r7, #0]
    if (!hasFailed()) {
 8019fb2:	687b      	ldr	r3, [r7, #4]
 8019fb4:	681b      	ldr	r3, [r3, #0]
 8019fb6:	33c0      	adds	r3, #192	; 0xc0
 8019fb8:	681b      	ldr	r3, [r3, #0]
 8019fba:	6878      	ldr	r0, [r7, #4]
 8019fbc:	4798      	blx	r3
 8019fbe:	4603      	mov	r3, r0
 8019fc0:	f083 0301 	eor.w	r3, r3, #1
 8019fc4:	b2db      	uxtb	r3, r3
 8019fc6:	2b00      	cmp	r3, #0
 8019fc8:	d010      	beq.n	8019fec <_ZN21MockCheckedActualCall8failTestERK11MockFailure+0x44>
        setState(CALL_FAILED);
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	681b      	ldr	r3, [r3, #0]
 8019fce:	33ec      	adds	r3, #236	; 0xec
 8019fd0:	681b      	ldr	r3, [r3, #0]
 8019fd2:	2101      	movs	r1, #1
 8019fd4:	6878      	ldr	r0, [r7, #4]
 8019fd6:	4798      	blx	r3
        reporter_->failTest(failure);
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	691a      	ldr	r2, [r3, #16]
 8019fdc:	687b      	ldr	r3, [r7, #4]
 8019fde:	691b      	ldr	r3, [r3, #16]
 8019fe0:	681b      	ldr	r3, [r3, #0]
 8019fe2:	3308      	adds	r3, #8
 8019fe4:	681b      	ldr	r3, [r3, #0]
 8019fe6:	6839      	ldr	r1, [r7, #0]
 8019fe8:	4610      	mov	r0, r2
 8019fea:	4798      	blx	r3
    }
}
 8019fec:	bf00      	nop
 8019fee:	3708      	adds	r7, #8
 8019ff0:	46bd      	mov	sp, r7
 8019ff2:	bd80      	pop	{r7, pc}

08019ff4 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall>:

void MockCheckedActualCall::copyOutputParameters(MockCheckedExpectedCall* expectedCall)
{
 8019ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ff8:	b0bc      	sub	sp, #240	; 0xf0
 8019ffa:	af00      	add	r7, sp, #0
 8019ffc:	6078      	str	r0, [r7, #4]
 8019ffe:	6039      	str	r1, [r7, #0]
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a004:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801a008:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801a00c:	2b00      	cmp	r3, #0
 801a00e:	f000 80f5 	beq.w	801a1fc <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x208>
    {
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 801a012:	683b      	ldr	r3, [r7, #0]
 801a014:	681b      	ldr	r3, [r3, #0]
 801a016:	339c      	adds	r3, #156	; 0x9c
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801a01e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 801a022:	6839      	ldr	r1, [r7, #0]
 801a024:	4798      	blx	r3
        MockNamedValueCopier* copier = outputParameter.getCopier();
 801a026:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a02a:	4618      	mov	r0, r3
 801a02c:	f006 fa6c 	bl	8020508 <_ZNK14MockNamedValue9getCopierEv>
 801a030:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        if (copier)
 801a034:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801a038:	2b00      	cmp	r3, #0
 801a03a:	d013      	beq.n	801a064 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x70>
        {
            copier->copy(p->ptr_, outputParameter.getConstObjectPointer());
 801a03c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801a040:	681b      	ldr	r3, [r3, #0]
 801a042:	3308      	adds	r3, #8
 801a044:	681c      	ldr	r4, [r3, #0]
 801a046:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801a04a:	691d      	ldr	r5, [r3, #16]
 801a04c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a050:	4618      	mov	r0, r3
 801a052:	f006 fa29 	bl	80204a8 <_ZNK14MockNamedValue21getConstObjectPointerEv>
 801a056:	4603      	mov	r3, r0
 801a058:	461a      	mov	r2, r3
 801a05a:	4629      	mov	r1, r5
 801a05c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 801a060:	47a0      	blx	r4
 801a062:	e0c0      	b.n	801a1e6 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if ((outputParameter.getType() == "const void*") && (p->type_ == "void*"))
 801a064:	2500      	movs	r5, #0
 801a066:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801a06a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801a06e:	4611      	mov	r1, r2
 801a070:	4618      	mov	r0, r3
 801a072:	f005 ff0c 	bl	801fe8e <_ZNK14MockNamedValue7getTypeEv>
 801a076:	2601      	movs	r6, #1
 801a078:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801a07c:	4962      	ldr	r1, [pc, #392]	; (801a208 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x214>)
 801a07e:	4618      	mov	r0, r3
 801a080:	f7f4 ff13 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801a084:	f04f 0801 	mov.w	r8, #1
 801a088:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801a08c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801a090:	4611      	mov	r1, r2
 801a092:	4618      	mov	r0, r3
 801a094:	f7f5 facd 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 801a098:	4603      	mov	r3, r0
 801a09a:	2b00      	cmp	r3, #0
 801a09c:	d015      	beq.n	801a0ca <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 801a09e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801a0a2:	f103 0408 	add.w	r4, r3, #8
 801a0a6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801a0aa:	4958      	ldr	r1, [pc, #352]	; (801a20c <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x218>)
 801a0ac:	4618      	mov	r0, r3
 801a0ae:	f7f4 fefc 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801a0b2:	2501      	movs	r5, #1
 801a0b4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801a0b8:	4619      	mov	r1, r3
 801a0ba:	4620      	mov	r0, r4
 801a0bc:	f7f5 fab9 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 801a0c0:	4603      	mov	r3, r0
 801a0c2:	2b00      	cmp	r3, #0
 801a0c4:	d001      	beq.n	801a0ca <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 801a0c6:	2401      	movs	r4, #1
 801a0c8:	e000      	b.n	801a0cc <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd8>
 801a0ca:	2400      	movs	r4, #0
 801a0cc:	2d00      	cmp	r5, #0
 801a0ce:	d004      	beq.n	801a0da <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xe6>
 801a0d0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801a0d4:	4618      	mov	r0, r3
 801a0d6:	f7f5 faa0 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801a0da:	f1b8 0f00 	cmp.w	r8, #0
 801a0de:	d004      	beq.n	801a0ea <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xf6>
 801a0e0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801a0e4:	4618      	mov	r0, r3
 801a0e6:	f7f5 fa98 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801a0ea:	2e00      	cmp	r6, #0
 801a0ec:	d004      	beq.n	801a0f8 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x104>
 801a0ee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801a0f2:	4618      	mov	r0, r3
 801a0f4:	f7f5 fa91 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801a0f8:	2c00      	cmp	r4, #0
 801a0fa:	d018      	beq.n	801a12e <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x13a>
        {
            const void* data = outputParameter.getConstPointerValue();
 801a0fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a100:	4618      	mov	r0, r3
 801a102:	f006 f959 	bl	80203b8 <_ZNK14MockNamedValue20getConstPointerValueEv>
 801a106:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
            size_t size = outputParameter.getSize();
 801a10a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a10e:	4618      	mov	r0, r3
 801a110:	f006 f9e2 	bl	80204d8 <_ZNK14MockNamedValue7getSizeEv>
 801a114:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
            PlatformSpecificMemCpy(p->ptr_, data, size);
 801a118:	4b3d      	ldr	r3, [pc, #244]	; (801a210 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x21c>)
 801a11a:	681b      	ldr	r3, [r3, #0]
 801a11c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801a120:	6910      	ldr	r0, [r2, #16]
 801a122:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801a126:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 801a12a:	4798      	blx	r3
 801a12c:	e05b      	b.n	801a1e6 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if (outputParameter.getName() != "")
 801a12e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801a132:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801a136:	4611      	mov	r1, r2
 801a138:	4618      	mov	r0, r3
 801a13a:	f005 fe99 	bl	801fe70 <_ZNK14MockNamedValue7getNameEv>
 801a13e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801a142:	4934      	ldr	r1, [pc, #208]	; (801a214 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x220>)
 801a144:	4618      	mov	r0, r3
 801a146:	f7f4 feb0 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801a14a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801a14e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801a152:	4611      	mov	r1, r2
 801a154:	4618      	mov	r0, r3
 801a156:	f7f5 fab1 	bl	800f6bc <_ZneRK12SimpleStringS1_>
 801a15a:	4603      	mov	r3, r0
 801a15c:	461c      	mov	r4, r3
 801a15e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801a162:	4618      	mov	r0, r3
 801a164:	f7f5 fa59 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801a168:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801a16c:	4618      	mov	r0, r3
 801a16e:	f7f5 fa54 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801a172:	2c00      	cmp	r4, #0
 801a174:	d037      	beq.n	801a1e6 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        {
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 801a176:	683b      	ldr	r3, [r7, #0]
 801a178:	681b      	ldr	r3, [r3, #0]
 801a17a:	339c      	adds	r3, #156	; 0x9c
 801a17c:	681b      	ldr	r3, [r3, #0]
 801a17e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801a182:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 801a186:	6839      	ldr	r1, [r7, #0]
 801a188:	4798      	blx	r3
 801a18a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801a18e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801a192:	4611      	mov	r1, r2
 801a194:	4618      	mov	r0, r3
 801a196:	f005 fe7a 	bl	801fe8e <_ZNK14MockNamedValue7getTypeEv>
 801a19a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801a19e:	4618      	mov	r0, r3
 801a1a0:	f005 fbd2 	bl	801f948 <_ZN14MockNamedValueD1Ev>
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	681b      	ldr	r3, [r3, #0]
 801a1a8:	33cc      	adds	r3, #204	; 0xcc
 801a1aa:	681b      	ldr	r3, [r3, #0]
 801a1ac:	6878      	ldr	r0, [r7, #4]
 801a1ae:	4798      	blx	r3
 801a1b0:	4601      	mov	r1, r0
 801a1b2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801a1b6:	f107 030c 	add.w	r3, r7, #12
 801a1ba:	4618      	mov	r0, r3
 801a1bc:	f005 faee 	bl	801f79c <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>
            failTest(failure);
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	681b      	ldr	r3, [r3, #0]
 801a1c4:	33dc      	adds	r3, #220	; 0xdc
 801a1c6:	681b      	ldr	r3, [r3, #0]
 801a1c8:	f107 020c 	add.w	r2, r7, #12
 801a1cc:	4611      	mov	r1, r2
 801a1ce:	6878      	ldr	r0, [r7, #4]
 801a1d0:	4798      	blx	r3
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 801a1d2:	f107 030c 	add.w	r3, r7, #12
 801a1d6:	4618      	mov	r0, r3
 801a1d8:	f001 ffe2 	bl	801c1a0 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 801a1dc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801a1e0:	4618      	mov	r0, r3
 801a1e2:	f7f5 fa1a 	bl	800f61a <_ZN12SimpleStringD1Ev>
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 801a1e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a1ea:	4618      	mov	r0, r3
 801a1ec:	f005 fbac 	bl	801f948 <_ZN14MockNamedValueD1Ev>
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 801a1f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801a1f4:	695b      	ldr	r3, [r3, #20]
 801a1f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801a1fa:	e705      	b.n	801a008 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x14>
        }
    }
}
 801a1fc:	bf00      	nop
 801a1fe:	37f0      	adds	r7, #240	; 0xf0
 801a200:	46bd      	mov	sp, r7
 801a202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a206:	bf00      	nop
 801a208:	08028a80 	.word	0x08028a80
 801a20c:	08028a8c 	.word	0x08028a8c
 801a210:	200000d4 	.word	0x200000d4
 801a214:	08028a7c 	.word	0x08028a7c

0801a218 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv>:

void MockCheckedActualCall::completeCallWhenMatchIsFound()
{
 801a218:	b580      	push	{r7, lr}
 801a21a:	b084      	sub	sp, #16
 801a21c:	af00      	add	r7, sp, #0
 801a21e:	6078      	str	r0, [r7, #4]
    // Expectations that don't ignore parameters have higher fulfillment preference than those that ignore parameters

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstFinalizedMatchingExpectation();
 801a220:	687b      	ldr	r3, [r7, #4]
 801a222:	331c      	adds	r3, #28
 801a224:	4618      	mov	r0, r3
 801a226:	f004 f9bb 	bl	801e5a0 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>
 801a22a:	4602      	mov	r2, r0
 801a22c:	687b      	ldr	r3, [r7, #4]
 801a22e:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 801a230:	687b      	ldr	r3, [r7, #4]
 801a232:	699b      	ldr	r3, [r3, #24]
 801a234:	2b00      	cmp	r3, #0
 801a236:	d00f      	beq.n	801a258 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x40>
        copyOutputParameters(matchingExpectation_);
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	681b      	ldr	r3, [r3, #0]
 801a23c:	33d4      	adds	r3, #212	; 0xd4
 801a23e:	681b      	ldr	r3, [r3, #0]
 801a240:	687a      	ldr	r2, [r7, #4]
 801a242:	6992      	ldr	r2, [r2, #24]
 801a244:	4611      	mov	r1, r2
 801a246:	6878      	ldr	r0, [r7, #4]
 801a248:	4798      	blx	r3
        callHasSucceeded();
 801a24a:	687b      	ldr	r3, [r7, #4]
 801a24c:	681b      	ldr	r3, [r3, #0]
 801a24e:	33d0      	adds	r3, #208	; 0xd0
 801a250:	681b      	ldr	r3, [r3, #0]
 801a252:	6878      	ldr	r0, [r7, #4]
 801a254:	4798      	blx	r3
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
        if (matchingExpectationWithIgnoredParameters) {
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
        }
    }
}
 801a256:	e00f      	b.n	801a278 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	331c      	adds	r3, #28
 801a25c:	4618      	mov	r0, r3
 801a25e:	f004 f9cc 	bl	801e5fa <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>
 801a262:	60f8      	str	r0, [r7, #12]
        if (matchingExpectationWithIgnoredParameters) {
 801a264:	68fb      	ldr	r3, [r7, #12]
 801a266:	2b00      	cmp	r3, #0
 801a268:	d006      	beq.n	801a278 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
 801a26a:	687b      	ldr	r3, [r7, #4]
 801a26c:	681b      	ldr	r3, [r3, #0]
 801a26e:	33d4      	adds	r3, #212	; 0xd4
 801a270:	681b      	ldr	r3, [r3, #0]
 801a272:	68f9      	ldr	r1, [r7, #12]
 801a274:	6878      	ldr	r0, [r7, #4]
 801a276:	4798      	blx	r3
}
 801a278:	bf00      	nop
 801a27a:	3710      	adds	r7, #16
 801a27c:	46bd      	mov	sp, r7
 801a27e:	bd80      	pop	{r7, pc}

0801a280 <_ZN21MockCheckedActualCall16callHasSucceededEv>:

void MockCheckedActualCall::callHasSucceeded()
{
 801a280:	b580      	push	{r7, lr}
 801a282:	b082      	sub	sp, #8
 801a284:	af00      	add	r7, sp, #0
 801a286:	6078      	str	r0, [r7, #4]
    setState(CALL_SUCCEED);
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	681b      	ldr	r3, [r3, #0]
 801a28c:	33ec      	adds	r3, #236	; 0xec
 801a28e:	681b      	ldr	r3, [r3, #0]
 801a290:	2102      	movs	r1, #2
 801a292:	6878      	ldr	r0, [r7, #4]
 801a294:	4798      	blx	r3
}
 801a296:	bf00      	nop
 801a298:	3708      	adds	r7, #8
 801a29a:	46bd      	mov	sp, r7
 801a29c:	bd80      	pop	{r7, pc}

0801a29e <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv>:

void MockCheckedActualCall::discardCurrentlyMatchingExpectations()
{
 801a29e:	b580      	push	{r7, lr}
 801a2a0:	b082      	sub	sp, #8
 801a2a2:	af00      	add	r7, sp, #0
 801a2a4:	6078      	str	r0, [r7, #4]
    if (matchingExpectation_)
 801a2a6:	687b      	ldr	r3, [r7, #4]
 801a2a8:	699b      	ldr	r3, [r3, #24]
 801a2aa:	2b00      	cmp	r3, #0
 801a2ac:	d00b      	beq.n	801a2c6 <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv+0x28>
    {
        matchingExpectation_->resetActualCallMatchingState();
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	699a      	ldr	r2, [r3, #24]
 801a2b2:	687b      	ldr	r3, [r7, #4]
 801a2b4:	699b      	ldr	r3, [r3, #24]
 801a2b6:	681b      	ldr	r3, [r3, #0]
 801a2b8:	33ec      	adds	r3, #236	; 0xec
 801a2ba:	681b      	ldr	r3, [r3, #0]
 801a2bc:	4610      	mov	r0, r2
 801a2be:	4798      	blx	r3
        matchingExpectation_ = NULLPTR;
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	2200      	movs	r2, #0
 801a2c4:	619a      	str	r2, [r3, #24]
    }
    potentiallyMatchingExpectations_.onlyKeepUnmatchingExpectations();
 801a2c6:	687b      	ldr	r3, [r7, #4]
 801a2c8:	331c      	adds	r3, #28
 801a2ca:	4618      	mov	r0, r3
 801a2cc:	f004 f85c 	bl	801e388 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>
}
 801a2d0:	bf00      	nop
 801a2d2:	3708      	adds	r7, #8
 801a2d4:	46bd      	mov	sp, r7
 801a2d6:	bd80      	pop	{r7, pc}

0801a2d8 <_ZN21MockCheckedActualCall8withNameERK12SimpleString>:

MockActualCall& MockCheckedActualCall::withName(const SimpleString& name)
{
 801a2d8:	b590      	push	{r4, r7, lr}
 801a2da:	b091      	sub	sp, #68	; 0x44
 801a2dc:	af00      	add	r7, sp, #0
 801a2de:	6078      	str	r0, [r7, #4]
 801a2e0:	6039      	str	r1, [r7, #0]
    setName(name);
 801a2e2:	6839      	ldr	r1, [r7, #0]
 801a2e4:	6878      	ldr	r0, [r7, #4]
 801a2e6:	f7ff fdb3 	bl	8019e50 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>
    setState(CALL_IN_PROGRESS);
 801a2ea:	687b      	ldr	r3, [r7, #4]
 801a2ec:	681b      	ldr	r3, [r3, #0]
 801a2ee:	33ec      	adds	r3, #236	; 0xec
 801a2f0:	681b      	ldr	r3, [r3, #0]
 801a2f2:	2100      	movs	r1, #0
 801a2f4:	6878      	ldr	r0, [r7, #4]
 801a2f6:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsRelatedTo(name);
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	331c      	adds	r3, #28
 801a2fc:	6839      	ldr	r1, [r7, #0]
 801a2fe:	4618      	mov	r0, r3
 801a300:	f003 ffec 	bl	801e2dc <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>
    if (potentiallyMatchingExpectations_.isEmpty()) {
 801a304:	687b      	ldr	r3, [r7, #4]
 801a306:	331c      	adds	r3, #28
 801a308:	4618      	mov	r0, r3
 801a30a:	f003 fe7c 	bl	801e006 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801a30e:	4603      	mov	r3, r0
 801a310:	2b00      	cmp	r3, #0
 801a312:	d01d      	beq.n	801a350 <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x78>
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 801a314:	687b      	ldr	r3, [r7, #4]
 801a316:	681b      	ldr	r3, [r3, #0]
 801a318:	33cc      	adds	r3, #204	; 0xcc
 801a31a:	681b      	ldr	r3, [r3, #0]
 801a31c:	6878      	ldr	r0, [r7, #4]
 801a31e:	4798      	blx	r3
 801a320:	4601      	mov	r1, r0
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a326:	f107 000c 	add.w	r0, r7, #12
 801a32a:	683a      	ldr	r2, [r7, #0]
 801a32c:	f004 fe24 	bl	801ef78 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
        failTest(failure);
 801a330:	687b      	ldr	r3, [r7, #4]
 801a332:	681b      	ldr	r3, [r3, #0]
 801a334:	33dc      	adds	r3, #220	; 0xdc
 801a336:	681b      	ldr	r3, [r3, #0]
 801a338:	f107 020c 	add.w	r2, r7, #12
 801a33c:	4611      	mov	r1, r2
 801a33e:	6878      	ldr	r0, [r7, #4]
 801a340:	4798      	blx	r3
        return *this;
 801a342:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 801a344:	f107 030c 	add.w	r3, r7, #12
 801a348:	4618      	mov	r0, r3
 801a34a:	f001 ff4b 	bl	801c1e4 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 801a34e:	e006      	b.n	801a35e <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x86>
    }

    completeCallWhenMatchIsFound();
 801a350:	687b      	ldr	r3, [r7, #4]
 801a352:	681b      	ldr	r3, [r3, #0]
 801a354:	33d8      	adds	r3, #216	; 0xd8
 801a356:	681b      	ldr	r3, [r3, #0]
 801a358:	6878      	ldr	r0, [r7, #4]
 801a35a:	4798      	blx	r3

    return *this;
 801a35c:	687c      	ldr	r4, [r7, #4]
 801a35e:	4623      	mov	r3, r4
}
 801a360:	4618      	mov	r0, r3
 801a362:	3744      	adds	r7, #68	; 0x44
 801a364:	46bd      	mov	sp, r7
 801a366:	bd90      	pop	{r4, r7, pc}

0801a368 <_ZN21MockCheckedActualCall13withCallOrderEj>:

MockActualCall& MockCheckedActualCall::withCallOrder(unsigned int)
{
 801a368:	b480      	push	{r7}
 801a36a:	b083      	sub	sp, #12
 801a36c:	af00      	add	r7, sp, #0
 801a36e:	6078      	str	r0, [r7, #4]
 801a370:	6039      	str	r1, [r7, #0]
    return *this;
 801a372:	687b      	ldr	r3, [r7, #4]
}
 801a374:	4618      	mov	r0, r3
 801a376:	370c      	adds	r7, #12
 801a378:	46bd      	mov	sp, r7
 801a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a37e:	4770      	bx	lr

0801a380 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkInputParameter(const MockNamedValue& actualParameter)
{
 801a380:	b590      	push	{r4, r7, lr}
 801a382:	b097      	sub	sp, #92	; 0x5c
 801a384:	af02      	add	r7, sp, #8
 801a386:	6078      	str	r0, [r7, #4]
 801a388:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	681b      	ldr	r3, [r3, #0]
 801a38e:	33c0      	adds	r3, #192	; 0xc0
 801a390:	681b      	ldr	r3, [r3, #0]
 801a392:	6878      	ldr	r0, [r7, #4]
 801a394:	4798      	blx	r3
 801a396:	4603      	mov	r3, r0
 801a398:	2b00      	cmp	r3, #0
 801a39a:	d164      	bne.n	801a466 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	681b      	ldr	r3, [r3, #0]
 801a3a0:	33ec      	adds	r3, #236	; 0xec
 801a3a2:	681b      	ldr	r3, [r3, #0]
 801a3a4:	2100      	movs	r1, #0
 801a3a6:	6878      	ldr	r0, [r7, #4]
 801a3a8:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	681b      	ldr	r3, [r3, #0]
 801a3ae:	33e8      	adds	r3, #232	; 0xe8
 801a3b0:	681b      	ldr	r3, [r3, #0]
 801a3b2:	6878      	ldr	r0, [r7, #4]
 801a3b4:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithInputParameter(actualParameter);
 801a3b6:	687b      	ldr	r3, [r7, #4]
 801a3b8:	331c      	adds	r3, #28
 801a3ba:	6839      	ldr	r1, [r7, #0]
 801a3bc:	4618      	mov	r0, r3
 801a3be:	f004 f86b 	bl	801e498 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 801a3c2:	687b      	ldr	r3, [r7, #4]
 801a3c4:	331c      	adds	r3, #28
 801a3c6:	4618      	mov	r0, r3
 801a3c8:	f003 fe1d 	bl	801e006 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801a3cc:	4603      	mov	r3, r0
 801a3ce:	2b00      	cmp	r3, #0
 801a3d0:	d02b      	beq.n	801a42a <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	681b      	ldr	r3, [r3, #0]
 801a3d6:	33cc      	adds	r3, #204	; 0xcc
 801a3d8:	681b      	ldr	r3, [r3, #0]
 801a3da:	6878      	ldr	r0, [r7, #4]
 801a3dc:	4798      	blx	r3
 801a3de:	4604      	mov	r4, r0
 801a3e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a3e4:	6879      	ldr	r1, [r7, #4]
 801a3e6:	4618      	mov	r0, r3
 801a3e8:	f7ff fd41 	bl	8019e6e <_ZNK21MockCheckedActualCall7getNameEv>
 801a3ec:	687b      	ldr	r3, [r7, #4]
 801a3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3f0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801a3f4:	f107 000c 	add.w	r0, r7, #12
 801a3f8:	9300      	str	r3, [sp, #0]
 801a3fa:	683b      	ldr	r3, [r7, #0]
 801a3fc:	4621      	mov	r1, r4
 801a3fe:	f004 fe7f 	bl	801f100 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 801a402:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a406:	4618      	mov	r0, r3
 801a408:	f7f5 f907 	bl	800f61a <_ZN12SimpleStringD1Ev>
        failTest(failure);
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	681b      	ldr	r3, [r3, #0]
 801a410:	33dc      	adds	r3, #220	; 0xdc
 801a412:	681b      	ldr	r3, [r3, #0]
 801a414:	f107 020c 	add.w	r2, r7, #12
 801a418:	4611      	mov	r1, r2
 801a41a:	6878      	ldr	r0, [r7, #4]
 801a41c:	4798      	blx	r3
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 801a41e:	f107 030c 	add.w	r3, r7, #12
 801a422:	4618      	mov	r0, r3
 801a424:	f001 ff00 	bl	801c228 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 801a428:	e01e      	b.n	801a468 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.parameterWasPassed(actualParameter.getName());
 801a42a:	687b      	ldr	r3, [r7, #4]
 801a42c:	f103 041c 	add.w	r4, r3, #28
 801a430:	683b      	ldr	r3, [r7, #0]
 801a432:	681b      	ldr	r3, [r3, #0]
 801a434:	335c      	adds	r3, #92	; 0x5c
 801a436:	681b      	ldr	r3, [r3, #0]
 801a438:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801a43c:	6839      	ldr	r1, [r7, #0]
 801a43e:	4610      	mov	r0, r2
 801a440:	4798      	blx	r3
 801a442:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a446:	4619      	mov	r1, r3
 801a448:	4620      	mov	r0, r4
 801a44a:	f004 f9b8 	bl	801e7be <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>
 801a44e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a452:	4618      	mov	r0, r3
 801a454:	f7f5 f8e1 	bl	800f61a <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 801a458:	687b      	ldr	r3, [r7, #4]
 801a45a:	681b      	ldr	r3, [r3, #0]
 801a45c:	33d8      	adds	r3, #216	; 0xd8
 801a45e:	681b      	ldr	r3, [r3, #0]
 801a460:	6878      	ldr	r0, [r7, #4]
 801a462:	4798      	blx	r3
 801a464:	e000      	b.n	801a468 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
 801a466:	bf00      	nop
}
 801a468:	3754      	adds	r7, #84	; 0x54
 801a46a:	46bd      	mov	sp, r7
 801a46c:	bd90      	pop	{r4, r7, pc}

0801a46e <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkOutputParameter(const MockNamedValue& outputParameter)
{
 801a46e:	b590      	push	{r4, r7, lr}
 801a470:	b097      	sub	sp, #92	; 0x5c
 801a472:	af02      	add	r7, sp, #8
 801a474:	6078      	str	r0, [r7, #4]
 801a476:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	681b      	ldr	r3, [r3, #0]
 801a47c:	33c0      	adds	r3, #192	; 0xc0
 801a47e:	681b      	ldr	r3, [r3, #0]
 801a480:	6878      	ldr	r0, [r7, #4]
 801a482:	4798      	blx	r3
 801a484:	4603      	mov	r3, r0
 801a486:	2b00      	cmp	r3, #0
 801a488:	d164      	bne.n	801a554 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 801a48a:	687b      	ldr	r3, [r7, #4]
 801a48c:	681b      	ldr	r3, [r3, #0]
 801a48e:	33ec      	adds	r3, #236	; 0xec
 801a490:	681b      	ldr	r3, [r3, #0]
 801a492:	2100      	movs	r1, #0
 801a494:	6878      	ldr	r0, [r7, #4]
 801a496:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	681b      	ldr	r3, [r3, #0]
 801a49c:	33e8      	adds	r3, #232	; 0xe8
 801a49e:	681b      	ldr	r3, [r3, #0]
 801a4a0:	6878      	ldr	r0, [r7, #4]
 801a4a2:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithOutputParameter(outputParameter);
 801a4a4:	687b      	ldr	r3, [r7, #4]
 801a4a6:	331c      	adds	r3, #28
 801a4a8:	6839      	ldr	r1, [r7, #0]
 801a4aa:	4618      	mov	r0, r3
 801a4ac:	f004 f820 	bl	801e4f0 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 801a4b0:	687b      	ldr	r3, [r7, #4]
 801a4b2:	331c      	adds	r3, #28
 801a4b4:	4618      	mov	r0, r3
 801a4b6:	f003 fda6 	bl	801e006 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801a4ba:	4603      	mov	r3, r0
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	d02b      	beq.n	801a518 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	681b      	ldr	r3, [r3, #0]
 801a4c4:	33cc      	adds	r3, #204	; 0xcc
 801a4c6:	681b      	ldr	r3, [r3, #0]
 801a4c8:	6878      	ldr	r0, [r7, #4]
 801a4ca:	4798      	blx	r3
 801a4cc:	4604      	mov	r4, r0
 801a4ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a4d2:	6879      	ldr	r1, [r7, #4]
 801a4d4:	4618      	mov	r0, r3
 801a4d6:	f7ff fcca 	bl	8019e6e <_ZNK21MockCheckedActualCall7getNameEv>
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4de:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801a4e2:	f107 000c 	add.w	r0, r7, #12
 801a4e6:	9300      	str	r3, [sp, #0]
 801a4e8:	683b      	ldr	r3, [r7, #0]
 801a4ea:	4621      	mov	r1, r4
 801a4ec:	f004 ff6a 	bl	801f3c4 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 801a4f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a4f4:	4618      	mov	r0, r3
 801a4f6:	f7f5 f890 	bl	800f61a <_ZN12SimpleStringD1Ev>
        failTest(failure);
 801a4fa:	687b      	ldr	r3, [r7, #4]
 801a4fc:	681b      	ldr	r3, [r3, #0]
 801a4fe:	33dc      	adds	r3, #220	; 0xdc
 801a500:	681b      	ldr	r3, [r3, #0]
 801a502:	f107 020c 	add.w	r2, r7, #12
 801a506:	4611      	mov	r1, r2
 801a508:	6878      	ldr	r0, [r7, #4]
 801a50a:	4798      	blx	r3
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 801a50c:	f107 030c 	add.w	r3, r7, #12
 801a510:	4618      	mov	r0, r3
 801a512:	f001 feab 	bl	801c26c <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 801a516:	e01e      	b.n	801a556 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.outputParameterWasPassed(outputParameter.getName());
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	f103 041c 	add.w	r4, r3, #28
 801a51e:	683b      	ldr	r3, [r7, #0]
 801a520:	681b      	ldr	r3, [r3, #0]
 801a522:	335c      	adds	r3, #92	; 0x5c
 801a524:	681b      	ldr	r3, [r3, #0]
 801a526:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801a52a:	6839      	ldr	r1, [r7, #0]
 801a52c:	4610      	mov	r0, r2
 801a52e:	4798      	blx	r3
 801a530:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a534:	4619      	mov	r1, r3
 801a536:	4620      	mov	r0, r4
 801a538:	f004 f95e 	bl	801e7f8 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>
 801a53c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a540:	4618      	mov	r0, r3
 801a542:	f7f5 f86a 	bl	800f61a <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 801a546:	687b      	ldr	r3, [r7, #4]
 801a548:	681b      	ldr	r3, [r3, #0]
 801a54a:	33d8      	adds	r3, #216	; 0xd8
 801a54c:	681b      	ldr	r3, [r3, #0]
 801a54e:	6878      	ldr	r0, [r7, #4]
 801a550:	4798      	blx	r3
 801a552:	e000      	b.n	801a556 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
 801a554:	bf00      	nop
}
 801a556:	3754      	adds	r7, #84	; 0x54
 801a558:	46bd      	mov	sp, r7
 801a55a:	bd90      	pop	{r4, r7, pc}

0801a55c <_ZN21MockCheckedActualCall17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockCheckedActualCall::withBoolParameter(const SimpleString& name, bool value)
{
 801a55c:	b590      	push	{r4, r7, lr}
 801a55e:	b093      	sub	sp, #76	; 0x4c
 801a560:	af00      	add	r7, sp, #0
 801a562:	60f8      	str	r0, [r7, #12]
 801a564:	60b9      	str	r1, [r7, #8]
 801a566:	4613      	mov	r3, r2
 801a568:	71fb      	strb	r3, [r7, #7]
    MockNamedValue actualParameter(name);
 801a56a:	f107 0310 	add.w	r3, r7, #16
 801a56e:	68b9      	ldr	r1, [r7, #8]
 801a570:	4618      	mov	r0, r3
 801a572:	f005 f9bf 	bl	801f8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801a576:	79fa      	ldrb	r2, [r7, #7]
 801a578:	f107 0310 	add.w	r3, r7, #16
 801a57c:	4611      	mov	r1, r2
 801a57e:	4618      	mov	r0, r3
 801a580:	f005 fa0a 	bl	801f998 <_ZN14MockNamedValue8setValueEb>
    checkInputParameter(actualParameter);
 801a584:	68fb      	ldr	r3, [r7, #12]
 801a586:	681b      	ldr	r3, [r3, #0]
 801a588:	33e0      	adds	r3, #224	; 0xe0
 801a58a:	681b      	ldr	r3, [r3, #0]
 801a58c:	f107 0210 	add.w	r2, r7, #16
 801a590:	4611      	mov	r1, r2
 801a592:	68f8      	ldr	r0, [r7, #12]
 801a594:	4798      	blx	r3
    return *this;
 801a596:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801a598:	f107 0310 	add.w	r3, r7, #16
 801a59c:	4618      	mov	r0, r3
 801a59e:	f005 f9d3 	bl	801f948 <_ZN14MockNamedValueD1Ev>
    return *this;
 801a5a2:	4623      	mov	r3, r4
}
 801a5a4:	4618      	mov	r0, r3
 801a5a6:	374c      	adds	r7, #76	; 0x4c
 801a5a8:	46bd      	mov	sp, r7
 801a5aa:	bd90      	pop	{r4, r7, pc}

0801a5ac <_ZN21MockCheckedActualCall24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockCheckedActualCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 801a5ac:	b590      	push	{r4, r7, lr}
 801a5ae:	b093      	sub	sp, #76	; 0x4c
 801a5b0:	af00      	add	r7, sp, #0
 801a5b2:	60f8      	str	r0, [r7, #12]
 801a5b4:	60b9      	str	r1, [r7, #8]
 801a5b6:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801a5b8:	f107 0310 	add.w	r3, r7, #16
 801a5bc:	68b9      	ldr	r1, [r7, #8]
 801a5be:	4618      	mov	r0, r3
 801a5c0:	f005 f998 	bl	801f8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801a5c4:	f107 0310 	add.w	r3, r7, #16
 801a5c8:	6879      	ldr	r1, [r7, #4]
 801a5ca:	4618      	mov	r0, r3
 801a5cc:	f005 fa08 	bl	801f9e0 <_ZN14MockNamedValue8setValueEj>
    checkInputParameter(actualParameter);
 801a5d0:	68fb      	ldr	r3, [r7, #12]
 801a5d2:	681b      	ldr	r3, [r3, #0]
 801a5d4:	33e0      	adds	r3, #224	; 0xe0
 801a5d6:	681b      	ldr	r3, [r3, #0]
 801a5d8:	f107 0210 	add.w	r2, r7, #16
 801a5dc:	4611      	mov	r1, r2
 801a5de:	68f8      	ldr	r0, [r7, #12]
 801a5e0:	4798      	blx	r3
    return *this;
 801a5e2:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801a5e4:	f107 0310 	add.w	r3, r7, #16
 801a5e8:	4618      	mov	r0, r3
 801a5ea:	f005 f9ad 	bl	801f948 <_ZN14MockNamedValueD1Ev>
    return *this;
 801a5ee:	4623      	mov	r3, r4
}
 801a5f0:	4618      	mov	r0, r3
 801a5f2:	374c      	adds	r7, #76	; 0x4c
 801a5f4:	46bd      	mov	sp, r7
 801a5f6:	bd90      	pop	{r4, r7, pc}

0801a5f8 <_ZN21MockCheckedActualCall16withIntParameterERK12SimpleStringi>:

MockActualCall& MockCheckedActualCall::withIntParameter(const SimpleString& name, int value)
{
 801a5f8:	b590      	push	{r4, r7, lr}
 801a5fa:	b093      	sub	sp, #76	; 0x4c
 801a5fc:	af00      	add	r7, sp, #0
 801a5fe:	60f8      	str	r0, [r7, #12]
 801a600:	60b9      	str	r1, [r7, #8]
 801a602:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801a604:	f107 0310 	add.w	r3, r7, #16
 801a608:	68b9      	ldr	r1, [r7, #8]
 801a60a:	4618      	mov	r0, r3
 801a60c:	f005 f972 	bl	801f8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801a610:	f107 0310 	add.w	r3, r7, #16
 801a614:	6879      	ldr	r1, [r7, #4]
 801a616:	4618      	mov	r0, r3
 801a618:	f005 fa04 	bl	801fa24 <_ZN14MockNamedValue8setValueEi>
    checkInputParameter(actualParameter);
 801a61c:	68fb      	ldr	r3, [r7, #12]
 801a61e:	681b      	ldr	r3, [r3, #0]
 801a620:	33e0      	adds	r3, #224	; 0xe0
 801a622:	681b      	ldr	r3, [r3, #0]
 801a624:	f107 0210 	add.w	r2, r7, #16
 801a628:	4611      	mov	r1, r2
 801a62a:	68f8      	ldr	r0, [r7, #12]
 801a62c:	4798      	blx	r3
    return *this;
 801a62e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801a630:	f107 0310 	add.w	r3, r7, #16
 801a634:	4618      	mov	r0, r3
 801a636:	f005 f987 	bl	801f948 <_ZN14MockNamedValueD1Ev>
    return *this;
 801a63a:	4623      	mov	r3, r4
}
 801a63c:	4618      	mov	r0, r3
 801a63e:	374c      	adds	r7, #76	; 0x4c
 801a640:	46bd      	mov	sp, r7
 801a642:	bd90      	pop	{r4, r7, pc}

0801a644 <_ZN21MockCheckedActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockCheckedActualCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 801a644:	b590      	push	{r4, r7, lr}
 801a646:	b093      	sub	sp, #76	; 0x4c
 801a648:	af00      	add	r7, sp, #0
 801a64a:	60f8      	str	r0, [r7, #12]
 801a64c:	60b9      	str	r1, [r7, #8]
 801a64e:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801a650:	f107 0310 	add.w	r3, r7, #16
 801a654:	68b9      	ldr	r1, [r7, #8]
 801a656:	4618      	mov	r0, r3
 801a658:	f005 f94c 	bl	801f8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801a65c:	f107 0310 	add.w	r3, r7, #16
 801a660:	6879      	ldr	r1, [r7, #4]
 801a662:	4618      	mov	r0, r3
 801a664:	f005 fa22 	bl	801faac <_ZN14MockNamedValue8setValueEm>
    checkInputParameter(actualParameter);
 801a668:	68fb      	ldr	r3, [r7, #12]
 801a66a:	681b      	ldr	r3, [r3, #0]
 801a66c:	33e0      	adds	r3, #224	; 0xe0
 801a66e:	681b      	ldr	r3, [r3, #0]
 801a670:	f107 0210 	add.w	r2, r7, #16
 801a674:	4611      	mov	r1, r2
 801a676:	68f8      	ldr	r0, [r7, #12]
 801a678:	4798      	blx	r3
    return *this;
 801a67a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801a67c:	f107 0310 	add.w	r3, r7, #16
 801a680:	4618      	mov	r0, r3
 801a682:	f005 f961 	bl	801f948 <_ZN14MockNamedValueD1Ev>
    return *this;
 801a686:	4623      	mov	r3, r4
}
 801a688:	4618      	mov	r0, r3
 801a68a:	374c      	adds	r7, #76	; 0x4c
 801a68c:	46bd      	mov	sp, r7
 801a68e:	bd90      	pop	{r4, r7, pc}

0801a690 <_ZN21MockCheckedActualCall20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockCheckedActualCall::withLongIntParameter(const SimpleString& name, long int value)
{
 801a690:	b590      	push	{r4, r7, lr}
 801a692:	b093      	sub	sp, #76	; 0x4c
 801a694:	af00      	add	r7, sp, #0
 801a696:	60f8      	str	r0, [r7, #12]
 801a698:	60b9      	str	r1, [r7, #8]
 801a69a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801a69c:	f107 0310 	add.w	r3, r7, #16
 801a6a0:	68b9      	ldr	r1, [r7, #8]
 801a6a2:	4618      	mov	r0, r3
 801a6a4:	f005 f926 	bl	801f8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801a6a8:	f107 0310 	add.w	r3, r7, #16
 801a6ac:	6879      	ldr	r1, [r7, #4]
 801a6ae:	4618      	mov	r0, r3
 801a6b0:	f005 f9da 	bl	801fa68 <_ZN14MockNamedValue8setValueEl>
    checkInputParameter(actualParameter);
 801a6b4:	68fb      	ldr	r3, [r7, #12]
 801a6b6:	681b      	ldr	r3, [r3, #0]
 801a6b8:	33e0      	adds	r3, #224	; 0xe0
 801a6ba:	681b      	ldr	r3, [r3, #0]
 801a6bc:	f107 0210 	add.w	r2, r7, #16
 801a6c0:	4611      	mov	r1, r2
 801a6c2:	68f8      	ldr	r0, [r7, #12]
 801a6c4:	4798      	blx	r3
    return *this;
 801a6c6:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801a6c8:	f107 0310 	add.w	r3, r7, #16
 801a6cc:	4618      	mov	r0, r3
 801a6ce:	f005 f93b 	bl	801f948 <_ZN14MockNamedValueD1Ev>
    return *this;
 801a6d2:	4623      	mov	r3, r4
}
 801a6d4:	4618      	mov	r0, r3
 801a6d6:	374c      	adds	r7, #76	; 0x4c
 801a6d8:	46bd      	mov	sp, r7
 801a6da:	bd90      	pop	{r4, r7, pc}

0801a6dc <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockCheckedActualCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 801a6dc:	b5b0      	push	{r4, r5, r7, lr}
 801a6de:	b086      	sub	sp, #24
 801a6e0:	af02      	add	r7, sp, #8
 801a6e2:	60f8      	str	r0, [r7, #12]
 801a6e4:	60b9      	str	r1, [r7, #8]
 801a6e6:	4639      	mov	r1, r7
 801a6e8:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801a6ec:	f7fb ffc0 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 801a6f0:	4604      	mov	r4, r0
 801a6f2:	6823      	ldr	r3, [r4, #0]
 801a6f4:	3368      	adds	r3, #104	; 0x68
 801a6f6:	681d      	ldr	r5, [r3, #0]
 801a6f8:	f7fb ffca 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a6fc:	4603      	mov	r3, r0
 801a6fe:	9300      	str	r3, [sp, #0]
 801a700:	f44f 7385 	mov.w	r3, #266	; 0x10a
 801a704:	4a04      	ldr	r2, [pc, #16]	; (801a718 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 801a706:	4905      	ldr	r1, [pc, #20]	; (801a71c <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 801a708:	4620      	mov	r0, r4
 801a70a:	47a8      	blx	r5
    return *this;
 801a70c:	68fb      	ldr	r3, [r7, #12]
}
 801a70e:	4618      	mov	r0, r3
 801a710:	3710      	adds	r7, #16
 801a712:	46bd      	mov	sp, r7
 801a714:	bdb0      	pop	{r4, r5, r7, pc}
 801a716:	bf00      	nop
 801a718:	08028a94 	.word	0x08028a94
 801a71c:	08028ab0 	.word	0x08028ab0

0801a720 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockCheckedActualCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 801a720:	b5b0      	push	{r4, r5, r7, lr}
 801a722:	b086      	sub	sp, #24
 801a724:	af02      	add	r7, sp, #8
 801a726:	60f8      	str	r0, [r7, #12]
 801a728:	60b9      	str	r1, [r7, #8]
 801a72a:	4639      	mov	r1, r7
 801a72c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801a730:	f7fb ff9e 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 801a734:	4604      	mov	r4, r0
 801a736:	6823      	ldr	r3, [r4, #0]
 801a738:	3368      	adds	r3, #104	; 0x68
 801a73a:	681d      	ldr	r5, [r3, #0]
 801a73c:	f7fb ffa8 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a740:	4603      	mov	r3, r0
 801a742:	9300      	str	r3, [sp, #0]
 801a744:	f44f 7388 	mov.w	r3, #272	; 0x110
 801a748:	4a04      	ldr	r2, [pc, #16]	; (801a75c <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801a74a:	4905      	ldr	r1, [pc, #20]	; (801a760 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 801a74c:	4620      	mov	r0, r4
 801a74e:	47a8      	blx	r5
    return *this;
 801a750:	68fb      	ldr	r3, [r7, #12]
}
 801a752:	4618      	mov	r0, r3
 801a754:	3710      	adds	r7, #16
 801a756:	46bd      	mov	sp, r7
 801a758:	bdb0      	pop	{r4, r5, r7, pc}
 801a75a:	bf00      	nop
 801a75c:	08028a94 	.word	0x08028a94
 801a760:	08028adc 	.word	0x08028adc

0801a764 <_ZN21MockCheckedActualCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockCheckedActualCall::withDoubleParameter(const SimpleString& name, double value)
{
 801a764:	b590      	push	{r4, r7, lr}
 801a766:	b093      	sub	sp, #76	; 0x4c
 801a768:	af00      	add	r7, sp, #0
 801a76a:	60f8      	str	r0, [r7, #12]
 801a76c:	60b9      	str	r1, [r7, #8]
 801a76e:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue actualParameter(name);
 801a772:	f107 0310 	add.w	r3, r7, #16
 801a776:	68b9      	ldr	r1, [r7, #8]
 801a778:	4618      	mov	r0, r3
 801a77a:	f005 f8bb 	bl	801f8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801a77e:	f107 0310 	add.w	r3, r7, #16
 801a782:	ed97 0b00 	vldr	d0, [r7]
 801a786:	4618      	mov	r0, r3
 801a788:	f005 f9ee 	bl	801fb68 <_ZN14MockNamedValue8setValueEd>
    checkInputParameter(actualParameter);
 801a78c:	68fb      	ldr	r3, [r7, #12]
 801a78e:	681b      	ldr	r3, [r3, #0]
 801a790:	33e0      	adds	r3, #224	; 0xe0
 801a792:	681b      	ldr	r3, [r3, #0]
 801a794:	f107 0210 	add.w	r2, r7, #16
 801a798:	4611      	mov	r1, r2
 801a79a:	68f8      	ldr	r0, [r7, #12]
 801a79c:	4798      	blx	r3
    return *this;
 801a79e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801a7a0:	f107 0310 	add.w	r3, r7, #16
 801a7a4:	4618      	mov	r0, r3
 801a7a6:	f005 f8cf 	bl	801f948 <_ZN14MockNamedValueD1Ev>
    return *this;
 801a7aa:	4623      	mov	r3, r4
}
 801a7ac:	4618      	mov	r0, r3
 801a7ae:	374c      	adds	r7, #76	; 0x4c
 801a7b0:	46bd      	mov	sp, r7
 801a7b2:	bd90      	pop	{r4, r7, pc}

0801a7b4 <_ZN21MockCheckedActualCall19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockCheckedActualCall::withStringParameter(const SimpleString& name, const char* value)
{
 801a7b4:	b590      	push	{r4, r7, lr}
 801a7b6:	b093      	sub	sp, #76	; 0x4c
 801a7b8:	af00      	add	r7, sp, #0
 801a7ba:	60f8      	str	r0, [r7, #12]
 801a7bc:	60b9      	str	r1, [r7, #8]
 801a7be:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801a7c0:	f107 0310 	add.w	r3, r7, #16
 801a7c4:	68b9      	ldr	r1, [r7, #8]
 801a7c6:	4618      	mov	r0, r3
 801a7c8:	f005 f894 	bl	801f8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801a7cc:	f107 0310 	add.w	r3, r7, #16
 801a7d0:	6879      	ldr	r1, [r7, #4]
 801a7d2:	4618      	mov	r0, r3
 801a7d4:	f005 fa72 	bl	801fcbc <_ZN14MockNamedValue8setValueEPKc>
    checkInputParameter(actualParameter);
 801a7d8:	68fb      	ldr	r3, [r7, #12]
 801a7da:	681b      	ldr	r3, [r3, #0]
 801a7dc:	33e0      	adds	r3, #224	; 0xe0
 801a7de:	681b      	ldr	r3, [r3, #0]
 801a7e0:	f107 0210 	add.w	r2, r7, #16
 801a7e4:	4611      	mov	r1, r2
 801a7e6:	68f8      	ldr	r0, [r7, #12]
 801a7e8:	4798      	blx	r3
    return *this;
 801a7ea:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801a7ec:	f107 0310 	add.w	r3, r7, #16
 801a7f0:	4618      	mov	r0, r3
 801a7f2:	f005 f8a9 	bl	801f948 <_ZN14MockNamedValueD1Ev>
    return *this;
 801a7f6:	4623      	mov	r3, r4
}
 801a7f8:	4618      	mov	r0, r3
 801a7fa:	374c      	adds	r7, #76	; 0x4c
 801a7fc:	46bd      	mov	sp, r7
 801a7fe:	bd90      	pop	{r4, r7, pc}

0801a800 <_ZN21MockCheckedActualCall20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withPointerParameter(const SimpleString& name, void* value)
{
 801a800:	b590      	push	{r4, r7, lr}
 801a802:	b093      	sub	sp, #76	; 0x4c
 801a804:	af00      	add	r7, sp, #0
 801a806:	60f8      	str	r0, [r7, #12]
 801a808:	60b9      	str	r1, [r7, #8]
 801a80a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801a80c:	f107 0310 	add.w	r3, r7, #16
 801a810:	68b9      	ldr	r1, [r7, #8]
 801a812:	4618      	mov	r0, r3
 801a814:	f005 f86e 	bl	801f8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801a818:	f107 0310 	add.w	r3, r7, #16
 801a81c:	6879      	ldr	r1, [r7, #4]
 801a81e:	4618      	mov	r0, r3
 801a820:	f005 f9e6 	bl	801fbf0 <_ZN14MockNamedValue8setValueEPv>
    checkInputParameter(actualParameter);
 801a824:	68fb      	ldr	r3, [r7, #12]
 801a826:	681b      	ldr	r3, [r3, #0]
 801a828:	33e0      	adds	r3, #224	; 0xe0
 801a82a:	681b      	ldr	r3, [r3, #0]
 801a82c:	f107 0210 	add.w	r2, r7, #16
 801a830:	4611      	mov	r1, r2
 801a832:	68f8      	ldr	r0, [r7, #12]
 801a834:	4798      	blx	r3
    return *this;
 801a836:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801a838:	f107 0310 	add.w	r3, r7, #16
 801a83c:	4618      	mov	r0, r3
 801a83e:	f005 f883 	bl	801f948 <_ZN14MockNamedValueD1Ev>
    return *this;
 801a842:	4623      	mov	r3, r4
}
 801a844:	4618      	mov	r0, r3
 801a846:	374c      	adds	r7, #76	; 0x4c
 801a848:	46bd      	mov	sp, r7
 801a84a:	bd90      	pop	{r4, r7, pc}

0801a84c <_ZN21MockCheckedActualCall25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockCheckedActualCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 801a84c:	b590      	push	{r4, r7, lr}
 801a84e:	b093      	sub	sp, #76	; 0x4c
 801a850:	af00      	add	r7, sp, #0
 801a852:	60f8      	str	r0, [r7, #12]
 801a854:	60b9      	str	r1, [r7, #8]
 801a856:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801a858:	f107 0310 	add.w	r3, r7, #16
 801a85c:	68b9      	ldr	r1, [r7, #8]
 801a85e:	4618      	mov	r0, r3
 801a860:	f005 f848 	bl	801f8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801a864:	f107 0310 	add.w	r3, r7, #16
 801a868:	6879      	ldr	r1, [r7, #4]
 801a86a:	4618      	mov	r0, r3
 801a86c:	f005 f9e2 	bl	801fc34 <_ZN14MockNamedValue8setValueEPKv>
    checkInputParameter(actualParameter);
 801a870:	68fb      	ldr	r3, [r7, #12]
 801a872:	681b      	ldr	r3, [r3, #0]
 801a874:	33e0      	adds	r3, #224	; 0xe0
 801a876:	681b      	ldr	r3, [r3, #0]
 801a878:	f107 0210 	add.w	r2, r7, #16
 801a87c:	4611      	mov	r1, r2
 801a87e:	68f8      	ldr	r0, [r7, #12]
 801a880:	4798      	blx	r3
    return *this;
 801a882:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801a884:	f107 0310 	add.w	r3, r7, #16
 801a888:	4618      	mov	r0, r3
 801a88a:	f005 f85d 	bl	801f948 <_ZN14MockNamedValueD1Ev>
    return *this;
 801a88e:	4623      	mov	r3, r4
}
 801a890:	4618      	mov	r0, r3
 801a892:	374c      	adds	r7, #76	; 0x4c
 801a894:	46bd      	mov	sp, r7
 801a896:	bd90      	pop	{r4, r7, pc}

0801a898 <_ZN21MockCheckedActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockCheckedActualCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 801a898:	b590      	push	{r4, r7, lr}
 801a89a:	b093      	sub	sp, #76	; 0x4c
 801a89c:	af00      	add	r7, sp, #0
 801a89e:	60f8      	str	r0, [r7, #12]
 801a8a0:	60b9      	str	r1, [r7, #8]
 801a8a2:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 801a8a4:	f107 0310 	add.w	r3, r7, #16
 801a8a8:	68b9      	ldr	r1, [r7, #8]
 801a8aa:	4618      	mov	r0, r3
 801a8ac:	f005 f822 	bl	801f8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801a8b0:	f107 0310 	add.w	r3, r7, #16
 801a8b4:	6879      	ldr	r1, [r7, #4]
 801a8b6:	4618      	mov	r0, r3
 801a8b8:	f005 f9de 	bl	801fc78 <_ZN14MockNamedValue8setValueEPFvvE>
    checkInputParameter(actualParameter);
 801a8bc:	68fb      	ldr	r3, [r7, #12]
 801a8be:	681b      	ldr	r3, [r3, #0]
 801a8c0:	33e0      	adds	r3, #224	; 0xe0
 801a8c2:	681b      	ldr	r3, [r3, #0]
 801a8c4:	f107 0210 	add.w	r2, r7, #16
 801a8c8:	4611      	mov	r1, r2
 801a8ca:	68f8      	ldr	r0, [r7, #12]
 801a8cc:	4798      	blx	r3
    return *this;
 801a8ce:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801a8d0:	f107 0310 	add.w	r3, r7, #16
 801a8d4:	4618      	mov	r0, r3
 801a8d6:	f005 f837 	bl	801f948 <_ZN14MockNamedValueD1Ev>
    return *this;
 801a8da:	4623      	mov	r3, r4
}
 801a8dc:	4618      	mov	r0, r3
 801a8de:	374c      	adds	r7, #76	; 0x4c
 801a8e0:	46bd      	mov	sp, r7
 801a8e2:	bd90      	pop	{r4, r7, pc}

0801a8e4 <_ZN21MockCheckedActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockCheckedActualCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 801a8e4:	b590      	push	{r4, r7, lr}
 801a8e6:	b093      	sub	sp, #76	; 0x4c
 801a8e8:	af00      	add	r7, sp, #0
 801a8ea:	60f8      	str	r0, [r7, #12]
 801a8ec:	60b9      	str	r1, [r7, #8]
 801a8ee:	607a      	str	r2, [r7, #4]
 801a8f0:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 801a8f2:	f107 0310 	add.w	r3, r7, #16
 801a8f6:	68b9      	ldr	r1, [r7, #8]
 801a8f8:	4618      	mov	r0, r3
 801a8fa:	f004 fffb 	bl	801f8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setMemoryBuffer(value, size);
 801a8fe:	f107 0310 	add.w	r3, r7, #16
 801a902:	683a      	ldr	r2, [r7, #0]
 801a904:	6879      	ldr	r1, [r7, #4]
 801a906:	4618      	mov	r0, r3
 801a908:	f005 f9fa 	bl	801fd00 <_ZN14MockNamedValue15setMemoryBufferEPKhj>
    checkInputParameter(actualParameter);
 801a90c:	68fb      	ldr	r3, [r7, #12]
 801a90e:	681b      	ldr	r3, [r3, #0]
 801a910:	33e0      	adds	r3, #224	; 0xe0
 801a912:	681b      	ldr	r3, [r3, #0]
 801a914:	f107 0210 	add.w	r2, r7, #16
 801a918:	4611      	mov	r1, r2
 801a91a:	68f8      	ldr	r0, [r7, #12]
 801a91c:	4798      	blx	r3
    return *this;
 801a91e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801a920:	f107 0310 	add.w	r3, r7, #16
 801a924:	4618      	mov	r0, r3
 801a926:	f005 f80f 	bl	801f948 <_ZN14MockNamedValueD1Ev>
    return *this;
 801a92a:	4623      	mov	r3, r4
}
 801a92c:	4618      	mov	r0, r3
 801a92e:	374c      	adds	r7, #76	; 0x4c
 801a930:	46bd      	mov	sp, r7
 801a932:	bd90      	pop	{r4, r7, pc}

0801a934 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockCheckedActualCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 801a934:	b590      	push	{r4, r7, lr}
 801a936:	b0a1      	sub	sp, #132	; 0x84
 801a938:	af00      	add	r7, sp, #0
 801a93a:	60f8      	str	r0, [r7, #12]
 801a93c:	60b9      	str	r1, [r7, #8]
 801a93e:	607a      	str	r2, [r7, #4]
 801a940:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 801a942:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a946:	6879      	ldr	r1, [r7, #4]
 801a948:	4618      	mov	r0, r3
 801a94a:	f004 ffd3 	bl	801f8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setConstObjectPointer(type, value);
 801a94e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a952:	683a      	ldr	r2, [r7, #0]
 801a954:	68b9      	ldr	r1, [r7, #8]
 801a956:	4618      	mov	r0, r3
 801a958:	f005 f9f8 	bl	801fd4c <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>

    if (actualParameter.getComparator() == NULLPTR) {
 801a95c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a960:	4618      	mov	r0, r3
 801a962:	f005 fdc5 	bl	80204f0 <_ZNK14MockNamedValue13getComparatorEv>
 801a966:	4603      	mov	r3, r0
 801a968:	2b00      	cmp	r3, #0
 801a96a:	bf0c      	ite	eq
 801a96c:	2301      	moveq	r3, #1
 801a96e:	2300      	movne	r3, #0
 801a970:	b2db      	uxtb	r3, r3
 801a972:	2b00      	cmp	r3, #0
 801a974:	d01c      	beq.n	801a9b0 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x7c>
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 801a976:	68fb      	ldr	r3, [r7, #12]
 801a978:	681b      	ldr	r3, [r3, #0]
 801a97a:	33cc      	adds	r3, #204	; 0xcc
 801a97c:	681b      	ldr	r3, [r3, #0]
 801a97e:	68f8      	ldr	r0, [r7, #12]
 801a980:	4798      	blx	r3
 801a982:	4601      	mov	r1, r0
 801a984:	f107 0314 	add.w	r3, r7, #20
 801a988:	68ba      	ldr	r2, [r7, #8]
 801a98a:	4618      	mov	r0, r3
 801a98c:	f004 fed6 	bl	801f73c <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>
        failTest(failure);
 801a990:	68fb      	ldr	r3, [r7, #12]
 801a992:	681b      	ldr	r3, [r3, #0]
 801a994:	33dc      	adds	r3, #220	; 0xdc
 801a996:	681b      	ldr	r3, [r3, #0]
 801a998:	f107 0214 	add.w	r2, r7, #20
 801a99c:	4611      	mov	r1, r2
 801a99e:	68f8      	ldr	r0, [r7, #12]
 801a9a0:	4798      	blx	r3
        return *this;
 801a9a2:	68fc      	ldr	r4, [r7, #12]
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 801a9a4:	f107 0314 	add.w	r3, r7, #20
 801a9a8:	4618      	mov	r0, r3
 801a9aa:	f001 fc81 	bl	801c2b0 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 801a9ae:	e009      	b.n	801a9c4 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x90>
    }
    checkInputParameter(actualParameter);
 801a9b0:	68fb      	ldr	r3, [r7, #12]
 801a9b2:	681b      	ldr	r3, [r3, #0]
 801a9b4:	33e0      	adds	r3, #224	; 0xe0
 801a9b6:	681b      	ldr	r3, [r3, #0]
 801a9b8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801a9bc:	4611      	mov	r1, r2
 801a9be:	68f8      	ldr	r0, [r7, #12]
 801a9c0:	4798      	blx	r3
    return *this;
 801a9c2:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801a9c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a9c8:	4618      	mov	r0, r3
 801a9ca:	f004 ffbd 	bl	801f948 <_ZN14MockNamedValueD1Ev>
 801a9ce:	4623      	mov	r3, r4
}
 801a9d0:	4618      	mov	r0, r3
 801a9d2:	3784      	adds	r7, #132	; 0x84
 801a9d4:	46bd      	mov	sp, r7
 801a9d6:	bd90      	pop	{r4, r7, pc}

0801a9d8 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withOutputParameter(const SimpleString& name, void* output)
{
 801a9d8:	b590      	push	{r4, r7, lr}
 801a9da:	b095      	sub	sp, #84	; 0x54
 801a9dc:	af00      	add	r7, sp, #0
 801a9de:	60f8      	str	r0, [r7, #12]
 801a9e0:	60b9      	str	r1, [r7, #8]
 801a9e2:	607a      	str	r2, [r7, #4]
    addOutputParameter(name, "void*", output);
 801a9e4:	68fb      	ldr	r3, [r7, #12]
 801a9e6:	681b      	ldr	r3, [r3, #0]
 801a9e8:	33f0      	adds	r3, #240	; 0xf0
 801a9ea:	681c      	ldr	r4, [r3, #0]
 801a9ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a9f0:	4917      	ldr	r1, [pc, #92]	; (801aa50 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv+0x78>)
 801a9f2:	4618      	mov	r0, r3
 801a9f4:	f7f4 fa59 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801a9f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801a9fc:	687b      	ldr	r3, [r7, #4]
 801a9fe:	68b9      	ldr	r1, [r7, #8]
 801aa00:	68f8      	ldr	r0, [r7, #12]
 801aa02:	47a0      	blx	r4
 801aa04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801aa08:	4618      	mov	r0, r3
 801aa0a:	f7f4 fe06 	bl	800f61a <_ZN12SimpleStringD1Ev>

    MockNamedValue outputParameter(name);
 801aa0e:	f107 0310 	add.w	r3, r7, #16
 801aa12:	68b9      	ldr	r1, [r7, #8]
 801aa14:	4618      	mov	r0, r3
 801aa16:	f004 ff6d 	bl	801f8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setValue(output);
 801aa1a:	f107 0310 	add.w	r3, r7, #16
 801aa1e:	6879      	ldr	r1, [r7, #4]
 801aa20:	4618      	mov	r0, r3
 801aa22:	f005 f8e5 	bl	801fbf0 <_ZN14MockNamedValue8setValueEPv>
    checkOutputParameter(outputParameter);
 801aa26:	68fb      	ldr	r3, [r7, #12]
 801aa28:	681b      	ldr	r3, [r3, #0]
 801aa2a:	33e4      	adds	r3, #228	; 0xe4
 801aa2c:	681b      	ldr	r3, [r3, #0]
 801aa2e:	f107 0210 	add.w	r2, r7, #16
 801aa32:	4611      	mov	r1, r2
 801aa34:	68f8      	ldr	r0, [r7, #12]
 801aa36:	4798      	blx	r3

    return *this;
 801aa38:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 801aa3a:	f107 0310 	add.w	r3, r7, #16
 801aa3e:	4618      	mov	r0, r3
 801aa40:	f004 ff82 	bl	801f948 <_ZN14MockNamedValueD1Ev>
    return *this;
 801aa44:	4623      	mov	r3, r4
}
 801aa46:	4618      	mov	r0, r3
 801aa48:	3754      	adds	r7, #84	; 0x54
 801aa4a:	46bd      	mov	sp, r7
 801aa4c:	bd90      	pop	{r4, r7, pc}
 801aa4e:	bf00      	nop
 801aa50:	08028a8c 	.word	0x08028a8c

0801aa54 <_ZN21MockCheckedActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockCheckedActualCall::withOutputParameterOfType(const SimpleString& type, const SimpleString& name, void* output)
{
 801aa54:	b590      	push	{r4, r7, lr}
 801aa56:	b093      	sub	sp, #76	; 0x4c
 801aa58:	af00      	add	r7, sp, #0
 801aa5a:	60f8      	str	r0, [r7, #12]
 801aa5c:	60b9      	str	r1, [r7, #8]
 801aa5e:	607a      	str	r2, [r7, #4]
 801aa60:	603b      	str	r3, [r7, #0]
    addOutputParameter(name, type, output);
 801aa62:	68fb      	ldr	r3, [r7, #12]
 801aa64:	681b      	ldr	r3, [r3, #0]
 801aa66:	33f0      	adds	r3, #240	; 0xf0
 801aa68:	681c      	ldr	r4, [r3, #0]
 801aa6a:	683b      	ldr	r3, [r7, #0]
 801aa6c:	68ba      	ldr	r2, [r7, #8]
 801aa6e:	6879      	ldr	r1, [r7, #4]
 801aa70:	68f8      	ldr	r0, [r7, #12]
 801aa72:	47a0      	blx	r4

    MockNamedValue outputParameter(name);
 801aa74:	f107 0310 	add.w	r3, r7, #16
 801aa78:	6879      	ldr	r1, [r7, #4]
 801aa7a:	4618      	mov	r0, r3
 801aa7c:	f004 ff3a 	bl	801f8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setConstObjectPointer(type, output);
 801aa80:	f107 0310 	add.w	r3, r7, #16
 801aa84:	683a      	ldr	r2, [r7, #0]
 801aa86:	68b9      	ldr	r1, [r7, #8]
 801aa88:	4618      	mov	r0, r3
 801aa8a:	f005 f95f 	bl	801fd4c <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>
    checkOutputParameter(outputParameter);
 801aa8e:	68fb      	ldr	r3, [r7, #12]
 801aa90:	681b      	ldr	r3, [r3, #0]
 801aa92:	33e4      	adds	r3, #228	; 0xe4
 801aa94:	681b      	ldr	r3, [r3, #0]
 801aa96:	f107 0210 	add.w	r2, r7, #16
 801aa9a:	4611      	mov	r1, r2
 801aa9c:	68f8      	ldr	r0, [r7, #12]
 801aa9e:	4798      	blx	r3

    return *this;
 801aaa0:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 801aaa2:	f107 0310 	add.w	r3, r7, #16
 801aaa6:	4618      	mov	r0, r3
 801aaa8:	f004 ff4e 	bl	801f948 <_ZN14MockNamedValueD1Ev>
    return *this;
 801aaac:	4623      	mov	r3, r4
}
 801aaae:	4618      	mov	r0, r3
 801aab0:	374c      	adds	r7, #76	; 0x4c
 801aab2:	46bd      	mov	sp, r7
 801aab4:	bd90      	pop	{r4, r7, pc}

0801aab6 <_ZNK21MockCheckedActualCall11isFulfilledEv>:

bool MockCheckedActualCall::isFulfilled() const
{
 801aab6:	b480      	push	{r7}
 801aab8:	b083      	sub	sp, #12
 801aaba:	af00      	add	r7, sp, #0
 801aabc:	6078      	str	r0, [r7, #4]
    return state_ == CALL_SUCCEED;
 801aabe:	687b      	ldr	r3, [r7, #4]
 801aac0:	7d1b      	ldrb	r3, [r3, #20]
 801aac2:	2b02      	cmp	r3, #2
 801aac4:	bf0c      	ite	eq
 801aac6:	2301      	moveq	r3, #1
 801aac8:	2300      	movne	r3, #0
 801aaca:	b2db      	uxtb	r3, r3
}
 801aacc:	4618      	mov	r0, r3
 801aace:	370c      	adds	r7, #12
 801aad0:	46bd      	mov	sp, r7
 801aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aad6:	4770      	bx	lr

0801aad8 <_ZNK21MockCheckedActualCall9hasFailedEv>:

bool MockCheckedActualCall::hasFailed() const
{
 801aad8:	b480      	push	{r7}
 801aada:	b083      	sub	sp, #12
 801aadc:	af00      	add	r7, sp, #0
 801aade:	6078      	str	r0, [r7, #4]
    return state_ == CALL_FAILED;
 801aae0:	687b      	ldr	r3, [r7, #4]
 801aae2:	7d1b      	ldrb	r3, [r3, #20]
 801aae4:	2b01      	cmp	r3, #1
 801aae6:	bf0c      	ite	eq
 801aae8:	2301      	moveq	r3, #1
 801aaea:	2300      	movne	r3, #0
 801aaec:	b2db      	uxtb	r3, r3
}
 801aaee:	4618      	mov	r0, r3
 801aaf0:	370c      	adds	r7, #12
 801aaf2:	46bd      	mov	sp, r7
 801aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaf8:	4770      	bx	lr
	...

0801aafc <_ZN21MockCheckedActualCall17checkExpectationsEv>:

void MockCheckedActualCall::checkExpectations()
{
 801aafc:	b5b0      	push	{r4, r5, r7, lr}
 801aafe:	b096      	sub	sp, #88	; 0x58
 801ab00:	af02      	add	r7, sp, #8
 801ab02:	6078      	str	r0, [r7, #4]
    if(expectationsChecked_) {
 801ab04:	687b      	ldr	r3, [r7, #4]
 801ab06:	7d5b      	ldrb	r3, [r3, #21]
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	f040 80bc 	bne.w	801ac86 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18a>
        return;
    }

    expectationsChecked_ = true;
 801ab0e:	687b      	ldr	r3, [r7, #4]
 801ab10:	2201      	movs	r2, #1
 801ab12:	755a      	strb	r2, [r3, #21]

    if (state_ != CALL_IN_PROGRESS) {
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	7d1b      	ldrb	r3, [r3, #20]
 801ab18:	2b00      	cmp	r3, #0
 801ab1a:	d014      	beq.n	801ab46 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x4a>
        if(state_ == CALL_SUCCEED) {
 801ab1c:	687b      	ldr	r3, [r7, #4]
 801ab1e:	7d1b      	ldrb	r3, [r3, #20]
 801ab20:	2b02      	cmp	r3, #2
 801ab22:	d10a      	bne.n	801ab3a <_ZN21MockCheckedActualCall17checkExpectationsEv+0x3e>
            matchingExpectation_->callWasMade(callOrder_);
 801ab24:	687b      	ldr	r3, [r7, #4]
 801ab26:	6998      	ldr	r0, [r3, #24]
 801ab28:	687b      	ldr	r3, [r7, #4]
 801ab2a:	699b      	ldr	r3, [r3, #24]
 801ab2c:	681b      	ldr	r3, [r3, #0]
 801ab2e:	33d8      	adds	r3, #216	; 0xd8
 801ab30:	681b      	ldr	r3, [r3, #0]
 801ab32:	687a      	ldr	r2, [r7, #4]
 801ab34:	68d2      	ldr	r2, [r2, #12]
 801ab36:	4611      	mov	r1, r2
 801ab38:	4798      	blx	r3
        }
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	331c      	adds	r3, #28
 801ab3e:	4618      	mov	r0, r3
 801ab40:	f003 fe07 	bl	801e752 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 801ab44:	e0a0      	b.n	801ac88 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasFinalizedMatchingExpectations())
 801ab46:	687b      	ldr	r3, [r7, #4]
 801ab48:	331c      	adds	r3, #28
 801ab4a:	4618      	mov	r0, r3
 801ab4c:	f003 fac3 	bl	801e0d6 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>
 801ab50:	4603      	mov	r3, r0
 801ab52:	2b00      	cmp	r3, #0
 801ab54:	d00f      	beq.n	801ab76 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x7a>
        FAIL("Actual call is in progress, but there are finalized matching expectations when checking expectations. This cannot happen."); // LCOV_EXCL_LINE
 801ab56:	f7fb fd8b 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 801ab5a:	4604      	mov	r4, r0
 801ab5c:	6823      	ldr	r3, [r4, #0]
 801ab5e:	3368      	adds	r3, #104	; 0x68
 801ab60:	681d      	ldr	r5, [r3, #0]
 801ab62:	f7fb fd95 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ab66:	4603      	mov	r3, r0
 801ab68:	9300      	str	r3, [sp, #0]
 801ab6a:	f240 1385 	movw	r3, #389	; 0x185
 801ab6e:	4a48      	ldr	r2, [pc, #288]	; (801ac90 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x194>)
 801ab70:	4948      	ldr	r1, [pc, #288]	; (801ac94 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x198>)
 801ab72:	4620      	mov	r0, r4
 801ab74:	47a8      	blx	r5

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstMatchingExpectation();
 801ab76:	687b      	ldr	r3, [r7, #4]
 801ab78:	331c      	adds	r3, #28
 801ab7a:	4618      	mov	r0, r3
 801ab7c:	f003 fd5f 	bl	801e63e <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>
 801ab80:	4602      	mov	r2, r0
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 801ab86:	687b      	ldr	r3, [r7, #4]
 801ab88:	699b      	ldr	r3, [r3, #24]
 801ab8a:	2b00      	cmp	r3, #0
 801ab8c:	d01f      	beq.n	801abce <_ZN21MockCheckedActualCall17checkExpectationsEv+0xd2>
        matchingExpectation_->finalizeActualCallMatch();
 801ab8e:	687b      	ldr	r3, [r7, #4]
 801ab90:	699a      	ldr	r2, [r3, #24]
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	699b      	ldr	r3, [r3, #24]
 801ab96:	681b      	ldr	r3, [r3, #0]
 801ab98:	33e4      	adds	r3, #228	; 0xe4
 801ab9a:	681b      	ldr	r3, [r3, #0]
 801ab9c:	4610      	mov	r0, r2
 801ab9e:	4798      	blx	r3
        callHasSucceeded();
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	681b      	ldr	r3, [r3, #0]
 801aba4:	33d0      	adds	r3, #208	; 0xd0
 801aba6:	681b      	ldr	r3, [r3, #0]
 801aba8:	6878      	ldr	r0, [r7, #4]
 801abaa:	4798      	blx	r3
        matchingExpectation_->callWasMade(callOrder_);
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	6998      	ldr	r0, [r3, #24]
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	699b      	ldr	r3, [r3, #24]
 801abb4:	681b      	ldr	r3, [r3, #0]
 801abb6:	33d8      	adds	r3, #216	; 0xd8
 801abb8:	681b      	ldr	r3, [r3, #0]
 801abba:	687a      	ldr	r2, [r7, #4]
 801abbc:	68d2      	ldr	r2, [r2, #12]
 801abbe:	4611      	mov	r1, r2
 801abc0:	4798      	blx	r3
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	331c      	adds	r3, #28
 801abc6:	4618      	mov	r0, r3
 801abc8:	f003 fdc3 	bl	801e752 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 801abcc:	e05c      	b.n	801ac88 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasUnmatchingExpectationsBecauseOfMissingParameters()) {
 801abce:	687b      	ldr	r3, [r7, #4]
 801abd0:	331c      	adds	r3, #28
 801abd2:	4618      	mov	r0, r3
 801abd4:	f003 ffc4 	bl	801eb60 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>
 801abd8:	4603      	mov	r3, r0
 801abda:	2b00      	cmp	r3, #0
 801abdc:	d029      	beq.n	801ac32 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x136>
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 801abde:	687b      	ldr	r3, [r7, #4]
 801abe0:	681b      	ldr	r3, [r3, #0]
 801abe2:	33cc      	adds	r3, #204	; 0xcc
 801abe4:	681b      	ldr	r3, [r3, #0]
 801abe6:	6878      	ldr	r0, [r7, #4]
 801abe8:	4798      	blx	r3
 801abea:	4604      	mov	r4, r0
 801abec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801abf0:	6879      	ldr	r1, [r7, #4]
 801abf2:	4618      	mov	r0, r3
 801abf4:	f7ff f93b 	bl	8019e6e <_ZNK21MockCheckedActualCall7getNameEv>
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801abfc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801ac00:	f107 000c 	add.w	r0, r7, #12
 801ac04:	4621      	mov	r1, r4
 801ac06:	f004 fd21 	bl	801f64c <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 801ac0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ac0e:	4618      	mov	r0, r3
 801ac10:	f7f4 fd03 	bl	800f61a <_ZN12SimpleStringD1Ev>
        failTest(failure);
 801ac14:	687b      	ldr	r3, [r7, #4]
 801ac16:	681b      	ldr	r3, [r3, #0]
 801ac18:	33dc      	adds	r3, #220	; 0xdc
 801ac1a:	681b      	ldr	r3, [r3, #0]
 801ac1c:	f107 020c 	add.w	r2, r7, #12
 801ac20:	4611      	mov	r1, r2
 801ac22:	6878      	ldr	r0, [r7, #4]
 801ac24:	4798      	blx	r3
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 801ac26:	f107 030c 	add.w	r3, r7, #12
 801ac2a:	4618      	mov	r0, r3
 801ac2c:	f001 fb62 	bl	801c2f4 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 801ac30:	e02a      	b.n	801ac88 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }
    else {
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 801ac32:	687b      	ldr	r3, [r7, #4]
 801ac34:	681b      	ldr	r3, [r3, #0]
 801ac36:	33cc      	adds	r3, #204	; 0xcc
 801ac38:	681b      	ldr	r3, [r3, #0]
 801ac3a:	6878      	ldr	r0, [r7, #4]
 801ac3c:	4798      	blx	r3
 801ac3e:	4604      	mov	r4, r0
 801ac40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801ac44:	6879      	ldr	r1, [r7, #4]
 801ac46:	4618      	mov	r0, r3
 801ac48:	f7ff f911 	bl	8019e6e <_ZNK21MockCheckedActualCall7getNameEv>
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ac50:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801ac54:	f107 000c 	add.w	r0, r7, #12
 801ac58:	4621      	mov	r1, r4
 801ac5a:	f004 fe05 	bl	801f868 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 801ac5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801ac62:	4618      	mov	r0, r3
 801ac64:	f7f4 fcd9 	bl	800f61a <_ZN12SimpleStringD1Ev>
        failTest(failure);
 801ac68:	687b      	ldr	r3, [r7, #4]
 801ac6a:	681b      	ldr	r3, [r3, #0]
 801ac6c:	33dc      	adds	r3, #220	; 0xdc
 801ac6e:	681b      	ldr	r3, [r3, #0]
 801ac70:	f107 020c 	add.w	r2, r7, #12
 801ac74:	4611      	mov	r1, r2
 801ac76:	6878      	ldr	r0, [r7, #4]
 801ac78:	4798      	blx	r3
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 801ac7a:	f107 030c 	add.w	r3, r7, #12
 801ac7e:	4618      	mov	r0, r3
 801ac80:	f001 fb5a 	bl	801c338 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 801ac84:	e000      	b.n	801ac88 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
        return;
 801ac86:	bf00      	nop
    }
}
 801ac88:	3750      	adds	r7, #80	; 0x50
 801ac8a:	46bd      	mov	sp, r7
 801ac8c:	bdb0      	pop	{r4, r5, r7, pc}
 801ac8e:	bf00      	nop
 801ac90:	08028a94 	.word	0x08028a94
 801ac94:	08028afc 	.word	0x08028afc

0801ac98 <_ZN21MockCheckedActualCall8setStateENS_15ActualCallStateE>:

void MockCheckedActualCall::setState(ActualCallState state)
{
 801ac98:	b480      	push	{r7}
 801ac9a:	b083      	sub	sp, #12
 801ac9c:	af00      	add	r7, sp, #0
 801ac9e:	6078      	str	r0, [r7, #4]
 801aca0:	460b      	mov	r3, r1
 801aca2:	70fb      	strb	r3, [r7, #3]
    state_ = state;
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	78fa      	ldrb	r2, [r7, #3]
 801aca8:	751a      	strb	r2, [r3, #20]
}
 801acaa:	bf00      	nop
 801acac:	370c      	adds	r7, #12
 801acae:	46bd      	mov	sp, r7
 801acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acb4:	4770      	bx	lr
	...

0801acb8 <_ZN21MockCheckedActualCall11returnValueEv>:

MockNamedValue MockCheckedActualCall::returnValue()
{
 801acb8:	b580      	push	{r7, lr}
 801acba:	b084      	sub	sp, #16
 801acbc:	af00      	add	r7, sp, #0
 801acbe:	6078      	str	r0, [r7, #4]
 801acc0:	6039      	str	r1, [r7, #0]
    checkExpectations();
 801acc2:	683b      	ldr	r3, [r7, #0]
 801acc4:	681b      	ldr	r3, [r3, #0]
 801acc6:	33c4      	adds	r3, #196	; 0xc4
 801acc8:	681b      	ldr	r3, [r3, #0]
 801acca:	6838      	ldr	r0, [r7, #0]
 801accc:	4798      	blx	r3
    if (matchingExpectation_)
 801acce:	683b      	ldr	r3, [r7, #0]
 801acd0:	699b      	ldr	r3, [r3, #24]
 801acd2:	2b00      	cmp	r3, #0
 801acd4:	d00a      	beq.n	801acec <_ZN21MockCheckedActualCall11returnValueEv+0x34>
        return matchingExpectation_->returnValue();
 801acd6:	683b      	ldr	r3, [r7, #0]
 801acd8:	6999      	ldr	r1, [r3, #24]
 801acda:	683b      	ldr	r3, [r7, #0]
 801acdc:	699b      	ldr	r3, [r3, #24]
 801acde:	681b      	ldr	r3, [r3, #0]
 801ace0:	3394      	adds	r3, #148	; 0x94
 801ace2:	681b      	ldr	r3, [r3, #0]
 801ace4:	687a      	ldr	r2, [r7, #4]
 801ace6:	4610      	mov	r0, r2
 801ace8:	4798      	blx	r3
 801acea:	e010      	b.n	801ad0e <_ZN21MockCheckedActualCall11returnValueEv+0x56>
    return MockNamedValue("no return value");
 801acec:	f107 0308 	add.w	r3, r7, #8
 801acf0:	4909      	ldr	r1, [pc, #36]	; (801ad18 <_ZN21MockCheckedActualCall11returnValueEv+0x60>)
 801acf2:	4618      	mov	r0, r3
 801acf4:	f7f4 f8d9 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801acf8:	f107 0308 	add.w	r3, r7, #8
 801acfc:	4619      	mov	r1, r3
 801acfe:	6878      	ldr	r0, [r7, #4]
 801ad00:	f004 fdf8 	bl	801f8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
 801ad04:	f107 0308 	add.w	r3, r7, #8
 801ad08:	4618      	mov	r0, r3
 801ad0a:	f7f4 fc86 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 801ad0e:	6878      	ldr	r0, [r7, #4]
 801ad10:	3710      	adds	r7, #16
 801ad12:	46bd      	mov	sp, r7
 801ad14:	bd80      	pop	{r7, pc}
 801ad16:	bf00      	nop
 801ad18:	08028b78 	.word	0x08028b78

0801ad1c <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb>:

bool MockCheckedActualCall::returnBoolValueOrDefault(bool default_value)
{
 801ad1c:	b580      	push	{r7, lr}
 801ad1e:	b082      	sub	sp, #8
 801ad20:	af00      	add	r7, sp, #0
 801ad22:	6078      	str	r0, [r7, #4]
 801ad24:	460b      	mov	r3, r1
 801ad26:	70fb      	strb	r3, [r7, #3]
    if (!hasReturnValue()) {
 801ad28:	687b      	ldr	r3, [r7, #4]
 801ad2a:	681b      	ldr	r3, [r3, #0]
 801ad2c:	3350      	adds	r3, #80	; 0x50
 801ad2e:	681b      	ldr	r3, [r3, #0]
 801ad30:	6878      	ldr	r0, [r7, #4]
 801ad32:	4798      	blx	r3
 801ad34:	4603      	mov	r3, r0
 801ad36:	f083 0301 	eor.w	r3, r3, #1
 801ad3a:	b2db      	uxtb	r3, r3
 801ad3c:	2b00      	cmp	r3, #0
 801ad3e:	d001      	beq.n	801ad44 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x28>
        return default_value;
 801ad40:	78fb      	ldrb	r3, [r7, #3]
 801ad42:	e007      	b.n	801ad54 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x38>
    }
    return returnBoolValue();
 801ad44:	687b      	ldr	r3, [r7, #4]
 801ad46:	681b      	ldr	r3, [r3, #0]
 801ad48:	335c      	adds	r3, #92	; 0x5c
 801ad4a:	681b      	ldr	r3, [r3, #0]
 801ad4c:	6878      	ldr	r0, [r7, #4]
 801ad4e:	4798      	blx	r3
 801ad50:	4603      	mov	r3, r0
 801ad52:	bf00      	nop
}
 801ad54:	4618      	mov	r0, r3
 801ad56:	3708      	adds	r7, #8
 801ad58:	46bd      	mov	sp, r7
 801ad5a:	bd80      	pop	{r7, pc}

0801ad5c <_ZN21MockCheckedActualCall15returnBoolValueEv>:

bool MockCheckedActualCall::returnBoolValue()
{
 801ad5c:	b590      	push	{r4, r7, lr}
 801ad5e:	b091      	sub	sp, #68	; 0x44
 801ad60:	af00      	add	r7, sp, #0
 801ad62:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 801ad64:	687b      	ldr	r3, [r7, #4]
 801ad66:	681b      	ldr	r3, [r3, #0]
 801ad68:	3354      	adds	r3, #84	; 0x54
 801ad6a:	681b      	ldr	r3, [r3, #0]
 801ad6c:	f107 0208 	add.w	r2, r7, #8
 801ad70:	6879      	ldr	r1, [r7, #4]
 801ad72:	4610      	mov	r0, r2
 801ad74:	4798      	blx	r3
 801ad76:	f107 0308 	add.w	r3, r7, #8
 801ad7a:	4618      	mov	r0, r3
 801ad7c:	f005 f896 	bl	801feac <_ZNK14MockNamedValue12getBoolValueEv>
 801ad80:	4603      	mov	r3, r0
 801ad82:	461c      	mov	r4, r3
 801ad84:	bf00      	nop
 801ad86:	f107 0308 	add.w	r3, r7, #8
 801ad8a:	4618      	mov	r0, r3
 801ad8c:	f004 fddc 	bl	801f948 <_ZN14MockNamedValueD1Ev>
 801ad90:	4623      	mov	r3, r4
}
 801ad92:	4618      	mov	r0, r3
 801ad94:	3744      	adds	r7, #68	; 0x44
 801ad96:	46bd      	mov	sp, r7
 801ad98:	bd90      	pop	{r4, r7, pc}

0801ad9a <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi>:

int MockCheckedActualCall::returnIntValueOrDefault(int default_value)
{
 801ad9a:	b580      	push	{r7, lr}
 801ad9c:	b082      	sub	sp, #8
 801ad9e:	af00      	add	r7, sp, #0
 801ada0:	6078      	str	r0, [r7, #4]
 801ada2:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	681b      	ldr	r3, [r3, #0]
 801ada8:	3350      	adds	r3, #80	; 0x50
 801adaa:	681b      	ldr	r3, [r3, #0]
 801adac:	6878      	ldr	r0, [r7, #4]
 801adae:	4798      	blx	r3
 801adb0:	4603      	mov	r3, r0
 801adb2:	f083 0301 	eor.w	r3, r3, #1
 801adb6:	b2db      	uxtb	r3, r3
 801adb8:	2b00      	cmp	r3, #0
 801adba:	d001      	beq.n	801adc0 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x26>
        return default_value;
 801adbc:	683b      	ldr	r3, [r7, #0]
 801adbe:	e007      	b.n	801add0 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x36>
    }
    return returnIntValue();
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	681b      	ldr	r3, [r3, #0]
 801adc4:	3364      	adds	r3, #100	; 0x64
 801adc6:	681b      	ldr	r3, [r3, #0]
 801adc8:	6878      	ldr	r0, [r7, #4]
 801adca:	4798      	blx	r3
 801adcc:	4603      	mov	r3, r0
 801adce:	bf00      	nop
}
 801add0:	4618      	mov	r0, r3
 801add2:	3708      	adds	r7, #8
 801add4:	46bd      	mov	sp, r7
 801add6:	bd80      	pop	{r7, pc}

0801add8 <_ZN21MockCheckedActualCall14returnIntValueEv>:

int MockCheckedActualCall::returnIntValue()
{
 801add8:	b590      	push	{r4, r7, lr}
 801adda:	b091      	sub	sp, #68	; 0x44
 801addc:	af00      	add	r7, sp, #0
 801adde:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 801ade0:	687b      	ldr	r3, [r7, #4]
 801ade2:	681b      	ldr	r3, [r3, #0]
 801ade4:	3354      	adds	r3, #84	; 0x54
 801ade6:	681b      	ldr	r3, [r3, #0]
 801ade8:	f107 0208 	add.w	r2, r7, #8
 801adec:	6879      	ldr	r1, [r7, #4]
 801adee:	4610      	mov	r0, r2
 801adf0:	4798      	blx	r3
 801adf2:	f107 0308 	add.w	r3, r7, #8
 801adf6:	4618      	mov	r0, r3
 801adf8:	f005 f8d0 	bl	801ff9c <_ZNK14MockNamedValue11getIntValueEv>
 801adfc:	4604      	mov	r4, r0
 801adfe:	bf00      	nop
 801ae00:	f107 0308 	add.w	r3, r7, #8
 801ae04:	4618      	mov	r0, r3
 801ae06:	f004 fd9f 	bl	801f948 <_ZN14MockNamedValueD1Ev>
 801ae0a:	4623      	mov	r3, r4
}
 801ae0c:	4618      	mov	r0, r3
 801ae0e:	3744      	adds	r7, #68	; 0x44
 801ae10:	46bd      	mov	sp, r7
 801ae12:	bd90      	pop	{r4, r7, pc}

0801ae14 <_ZN21MockCheckedActualCall26returnUnsignedLongIntValueEv>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValue()
{
 801ae14:	b590      	push	{r4, r7, lr}
 801ae16:	b091      	sub	sp, #68	; 0x44
 801ae18:	af00      	add	r7, sp, #0
 801ae1a:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 801ae1c:	687b      	ldr	r3, [r7, #4]
 801ae1e:	681b      	ldr	r3, [r3, #0]
 801ae20:	3354      	adds	r3, #84	; 0x54
 801ae22:	681b      	ldr	r3, [r3, #0]
 801ae24:	f107 0208 	add.w	r2, r7, #8
 801ae28:	6879      	ldr	r1, [r7, #4]
 801ae2a:	4610      	mov	r0, r2
 801ae2c:	4798      	blx	r3
 801ae2e:	f107 0308 	add.w	r3, r7, #8
 801ae32:	4618      	mov	r0, r3
 801ae34:	f005 f93c 	bl	80200b0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 801ae38:	4604      	mov	r4, r0
 801ae3a:	bf00      	nop
 801ae3c:	f107 0308 	add.w	r3, r7, #8
 801ae40:	4618      	mov	r0, r3
 801ae42:	f004 fd81 	bl	801f948 <_ZN14MockNamedValueD1Ev>
 801ae46:	4623      	mov	r3, r4
}
 801ae48:	4618      	mov	r0, r3
 801ae4a:	3744      	adds	r7, #68	; 0x44
 801ae4c:	46bd      	mov	sp, r7
 801ae4e:	bd90      	pop	{r4, r7, pc}

0801ae50 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValueOrDefault(unsigned long int default_value)
{
 801ae50:	b580      	push	{r7, lr}
 801ae52:	b082      	sub	sp, #8
 801ae54:	af00      	add	r7, sp, #0
 801ae56:	6078      	str	r0, [r7, #4]
 801ae58:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801ae5a:	687b      	ldr	r3, [r7, #4]
 801ae5c:	681b      	ldr	r3, [r3, #0]
 801ae5e:	3350      	adds	r3, #80	; 0x50
 801ae60:	681b      	ldr	r3, [r3, #0]
 801ae62:	6878      	ldr	r0, [r7, #4]
 801ae64:	4798      	blx	r3
 801ae66:	4603      	mov	r3, r0
 801ae68:	f083 0301 	eor.w	r3, r3, #1
 801ae6c:	b2db      	uxtb	r3, r3
 801ae6e:	2b00      	cmp	r3, #0
 801ae70:	d001      	beq.n	801ae76 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x26>
        return default_value;
 801ae72:	683b      	ldr	r3, [r7, #0]
 801ae74:	e007      	b.n	801ae86 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x36>
    }
    return returnUnsignedLongIntValue();
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	681b      	ldr	r3, [r3, #0]
 801ae7a:	3368      	adds	r3, #104	; 0x68
 801ae7c:	681b      	ldr	r3, [r3, #0]
 801ae7e:	6878      	ldr	r0, [r7, #4]
 801ae80:	4798      	blx	r3
 801ae82:	4603      	mov	r3, r0
 801ae84:	bf00      	nop
}
 801ae86:	4618      	mov	r0, r3
 801ae88:	3708      	adds	r7, #8
 801ae8a:	46bd      	mov	sp, r7
 801ae8c:	bd80      	pop	{r7, pc}

0801ae8e <_ZN21MockCheckedActualCall18returnLongIntValueEv>:

long int MockCheckedActualCall::returnLongIntValue()
{
 801ae8e:	b590      	push	{r4, r7, lr}
 801ae90:	b091      	sub	sp, #68	; 0x44
 801ae92:	af00      	add	r7, sp, #0
 801ae94:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 801ae96:	687b      	ldr	r3, [r7, #4]
 801ae98:	681b      	ldr	r3, [r3, #0]
 801ae9a:	3354      	adds	r3, #84	; 0x54
 801ae9c:	681b      	ldr	r3, [r3, #0]
 801ae9e:	f107 0208 	add.w	r2, r7, #8
 801aea2:	6879      	ldr	r1, [r7, #4]
 801aea4:	4610      	mov	r0, r2
 801aea6:	4798      	blx	r3
 801aea8:	f107 0308 	add.w	r3, r7, #8
 801aeac:	4618      	mov	r0, r3
 801aeae:	f005 f89d 	bl	801ffec <_ZNK14MockNamedValue15getLongIntValueEv>
 801aeb2:	4604      	mov	r4, r0
 801aeb4:	bf00      	nop
 801aeb6:	f107 0308 	add.w	r3, r7, #8
 801aeba:	4618      	mov	r0, r3
 801aebc:	f004 fd44 	bl	801f948 <_ZN14MockNamedValueD1Ev>
 801aec0:	4623      	mov	r3, r4
}
 801aec2:	4618      	mov	r0, r3
 801aec4:	3744      	adds	r7, #68	; 0x44
 801aec6:	46bd      	mov	sp, r7
 801aec8:	bd90      	pop	{r4, r7, pc}

0801aeca <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl>:

long int MockCheckedActualCall::returnLongIntValueOrDefault(long int default_value)
{
 801aeca:	b580      	push	{r7, lr}
 801aecc:	b082      	sub	sp, #8
 801aece:	af00      	add	r7, sp, #0
 801aed0:	6078      	str	r0, [r7, #4]
 801aed2:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801aed4:	687b      	ldr	r3, [r7, #4]
 801aed6:	681b      	ldr	r3, [r3, #0]
 801aed8:	3350      	adds	r3, #80	; 0x50
 801aeda:	681b      	ldr	r3, [r3, #0]
 801aedc:	6878      	ldr	r0, [r7, #4]
 801aede:	4798      	blx	r3
 801aee0:	4603      	mov	r3, r0
 801aee2:	f083 0301 	eor.w	r3, r3, #1
 801aee6:	b2db      	uxtb	r3, r3
 801aee8:	2b00      	cmp	r3, #0
 801aeea:	d001      	beq.n	801aef0 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x26>
        return default_value;
 801aeec:	683b      	ldr	r3, [r7, #0]
 801aeee:	e007      	b.n	801af00 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x36>
    }
    return returnLongIntValue();
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	681b      	ldr	r3, [r3, #0]
 801aef4:	3370      	adds	r3, #112	; 0x70
 801aef6:	681b      	ldr	r3, [r3, #0]
 801aef8:	6878      	ldr	r0, [r7, #4]
 801aefa:	4798      	blx	r3
 801aefc:	4603      	mov	r3, r0
 801aefe:	bf00      	nop
}
 801af00:	4618      	mov	r0, r3
 801af02:	3708      	adds	r7, #8
 801af04:	46bd      	mov	sp, r7
 801af06:	bd80      	pop	{r7, pc}

0801af08 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv>:
}

#else

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValue()
{
 801af08:	b5b0      	push	{r4, r5, r7, lr}
 801af0a:	b084      	sub	sp, #16
 801af0c:	af02      	add	r7, sp, #8
 801af0e:	6078      	str	r0, [r7, #4]
 801af10:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801af12:	f7fb fbad 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 801af16:	4604      	mov	r4, r0
 801af18:	6823      	ldr	r3, [r4, #0]
 801af1a:	3368      	adds	r3, #104	; 0x68
 801af1c:	681d      	ldr	r5, [r3, #0]
 801af1e:	f7fb fbb7 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801af22:	4603      	mov	r3, r0
 801af24:	9300      	str	r3, [sp, #0]
 801af26:	f240 13fb 	movw	r3, #507	; 0x1fb
 801af2a:	4a06      	ldr	r2, [pc, #24]	; (801af44 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x3c>)
 801af2c:	4906      	ldr	r1, [pc, #24]	; (801af48 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x40>)
 801af2e:	4620      	mov	r0, r4
 801af30:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801af32:	2100      	movs	r1, #0
 801af34:	6878      	ldr	r0, [r7, #4]
 801af36:	f7f1 fffb 	bl	800cf30 <_ZN18cpputest_ulonglongC1Ei>
}
 801af3a:	6878      	ldr	r0, [r7, #4]
 801af3c:	3708      	adds	r7, #8
 801af3e:	46bd      	mov	sp, r7
 801af40:	bdb0      	pop	{r4, r5, r7, pc}
 801af42:	bf00      	nop
 801af44:	08028a94 	.word	0x08028a94
 801af48:	08028ab0 	.word	0x08028ab0

0801af4c <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong default_value)
{
 801af4c:	b5b0      	push	{r4, r5, r7, lr}
 801af4e:	b086      	sub	sp, #24
 801af50:	af02      	add	r7, sp, #8
 801af52:	60f8      	str	r0, [r7, #12]
 801af54:	60b9      	str	r1, [r7, #8]
 801af56:	4639      	mov	r1, r7
 801af58:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801af5c:	f7fb fb88 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 801af60:	4604      	mov	r4, r0
 801af62:	6823      	ldr	r3, [r4, #0]
 801af64:	3368      	adds	r3, #104	; 0x68
 801af66:	681d      	ldr	r5, [r3, #0]
 801af68:	f7fb fb92 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801af6c:	4603      	mov	r3, r0
 801af6e:	9300      	str	r3, [sp, #0]
 801af70:	f240 2301 	movw	r3, #513	; 0x201
 801af74:	4a06      	ldr	r2, [pc, #24]	; (801af90 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 801af76:	4907      	ldr	r1, [pc, #28]	; (801af94 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 801af78:	4620      	mov	r0, r4
 801af7a:	47a8      	blx	r5
    return default_value;
 801af7c:	68fb      	ldr	r3, [r7, #12]
 801af7e:	461a      	mov	r2, r3
 801af80:	463b      	mov	r3, r7
 801af82:	cb03      	ldmia	r3!, {r0, r1}
 801af84:	6010      	str	r0, [r2, #0]
 801af86:	6051      	str	r1, [r2, #4]
}
 801af88:	68f8      	ldr	r0, [r7, #12]
 801af8a:	3710      	adds	r7, #16
 801af8c:	46bd      	mov	sp, r7
 801af8e:	bdb0      	pop	{r4, r5, r7, pc}
 801af90:	08028a94 	.word	0x08028a94
 801af94:	08028ab0 	.word	0x08028ab0

0801af98 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValue()
{
 801af98:	b5b0      	push	{r4, r5, r7, lr}
 801af9a:	b084      	sub	sp, #16
 801af9c:	af02      	add	r7, sp, #8
 801af9e:	6078      	str	r0, [r7, #4]
 801afa0:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801afa2:	f7fb fb65 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 801afa6:	4604      	mov	r4, r0
 801afa8:	6823      	ldr	r3, [r4, #0]
 801afaa:	3368      	adds	r3, #104	; 0x68
 801afac:	681d      	ldr	r5, [r3, #0]
 801afae:	f7fb fb6f 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801afb2:	4603      	mov	r3, r0
 801afb4:	9300      	str	r3, [sp, #0]
 801afb6:	f240 2307 	movw	r3, #519	; 0x207
 801afba:	4a06      	ldr	r2, [pc, #24]	; (801afd4 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x3c>)
 801afbc:	4906      	ldr	r1, [pc, #24]	; (801afd8 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x40>)
 801afbe:	4620      	mov	r0, r4
 801afc0:	47a8      	blx	r5
    return cpputest_longlong(0);
 801afc2:	2100      	movs	r1, #0
 801afc4:	6878      	ldr	r0, [r7, #4]
 801afc6:	f7f1 ffa7 	bl	800cf18 <_ZN17cpputest_longlongC1Ei>
}
 801afca:	6878      	ldr	r0, [r7, #4]
 801afcc:	3708      	adds	r7, #8
 801afce:	46bd      	mov	sp, r7
 801afd0:	bdb0      	pop	{r4, r5, r7, pc}
 801afd2:	bf00      	nop
 801afd4:	08028a94 	.word	0x08028a94
 801afd8:	08028adc 	.word	0x08028adc

0801afdc <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValueOrDefault(cpputest_longlong default_value)
{
 801afdc:	b5b0      	push	{r4, r5, r7, lr}
 801afde:	b086      	sub	sp, #24
 801afe0:	af02      	add	r7, sp, #8
 801afe2:	60f8      	str	r0, [r7, #12]
 801afe4:	60b9      	str	r1, [r7, #8]
 801afe6:	4639      	mov	r1, r7
 801afe8:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801afec:	f7fb fb40 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 801aff0:	4604      	mov	r4, r0
 801aff2:	6823      	ldr	r3, [r4, #0]
 801aff4:	3368      	adds	r3, #104	; 0x68
 801aff6:	681d      	ldr	r5, [r3, #0]
 801aff8:	f7fb fb4a 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801affc:	4603      	mov	r3, r0
 801affe:	9300      	str	r3, [sp, #0]
 801b000:	f240 230d 	movw	r3, #525	; 0x20d
 801b004:	4a06      	ldr	r2, [pc, #24]	; (801b020 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 801b006:	4907      	ldr	r1, [pc, #28]	; (801b024 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 801b008:	4620      	mov	r0, r4
 801b00a:	47a8      	blx	r5
    return default_value;
 801b00c:	68fb      	ldr	r3, [r7, #12]
 801b00e:	461a      	mov	r2, r3
 801b010:	463b      	mov	r3, r7
 801b012:	cb03      	ldmia	r3!, {r0, r1}
 801b014:	6010      	str	r0, [r2, #0]
 801b016:	6051      	str	r1, [r2, #4]
}
 801b018:	68f8      	ldr	r0, [r7, #12]
 801b01a:	3710      	adds	r7, #16
 801b01c:	46bd      	mov	sp, r7
 801b01e:	bdb0      	pop	{r4, r5, r7, pc}
 801b020:	08028a94 	.word	0x08028a94
 801b024:	08028adc 	.word	0x08028adc

0801b028 <_ZN21MockCheckedActualCall17returnDoubleValueEv>:

#endif

double MockCheckedActualCall::returnDoubleValue()
{
 801b028:	b580      	push	{r7, lr}
 801b02a:	ed2d 8b02 	vpush	{d8}
 801b02e:	b090      	sub	sp, #64	; 0x40
 801b030:	af00      	add	r7, sp, #0
 801b032:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 801b034:	687b      	ldr	r3, [r7, #4]
 801b036:	681b      	ldr	r3, [r3, #0]
 801b038:	3354      	adds	r3, #84	; 0x54
 801b03a:	681b      	ldr	r3, [r3, #0]
 801b03c:	f107 0208 	add.w	r2, r7, #8
 801b040:	6879      	ldr	r1, [r7, #4]
 801b042:	4610      	mov	r0, r2
 801b044:	4798      	blx	r3
 801b046:	f107 0308 	add.w	r3, r7, #8
 801b04a:	4618      	mov	r0, r3
 801b04c:	f005 f908 	bl	8020260 <_ZNK14MockNamedValue14getDoubleValueEv>
 801b050:	eeb0 8a40 	vmov.f32	s16, s0
 801b054:	eef0 8a60 	vmov.f32	s17, s1
 801b058:	bf00      	nop
 801b05a:	f107 0308 	add.w	r3, r7, #8
 801b05e:	4618      	mov	r0, r3
 801b060:	f004 fc72 	bl	801f948 <_ZN14MockNamedValueD1Ev>
 801b064:	eeb0 7a48 	vmov.f32	s14, s16
 801b068:	eef0 7a68 	vmov.f32	s15, s17
}
 801b06c:	eeb0 0a47 	vmov.f32	s0, s14
 801b070:	eef0 0a67 	vmov.f32	s1, s15
 801b074:	3740      	adds	r7, #64	; 0x40
 801b076:	46bd      	mov	sp, r7
 801b078:	ecbd 8b02 	vpop	{d8}
 801b07c:	bd80      	pop	{r7, pc}

0801b07e <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd>:

double MockCheckedActualCall::returnDoubleValueOrDefault(double default_value)
{
 801b07e:	b580      	push	{r7, lr}
 801b080:	b084      	sub	sp, #16
 801b082:	af00      	add	r7, sp, #0
 801b084:	60f8      	str	r0, [r7, #12]
 801b086:	ed87 0b00 	vstr	d0, [r7]
    if (!hasReturnValue()) {
 801b08a:	68fb      	ldr	r3, [r7, #12]
 801b08c:	681b      	ldr	r3, [r3, #0]
 801b08e:	3350      	adds	r3, #80	; 0x50
 801b090:	681b      	ldr	r3, [r3, #0]
 801b092:	68f8      	ldr	r0, [r7, #12]
 801b094:	4798      	blx	r3
 801b096:	4603      	mov	r3, r0
 801b098:	f083 0301 	eor.w	r3, r3, #1
 801b09c:	b2db      	uxtb	r3, r3
 801b09e:	2b00      	cmp	r3, #0
 801b0a0:	d002      	beq.n	801b0a8 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x2a>
        return default_value;
 801b0a2:	ed97 7b00 	vldr	d7, [r7]
 801b0a6:	e00a      	b.n	801b0be <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x40>
    }
    return returnDoubleValue();
 801b0a8:	68fb      	ldr	r3, [r7, #12]
 801b0aa:	681b      	ldr	r3, [r3, #0]
 801b0ac:	3398      	adds	r3, #152	; 0x98
 801b0ae:	681b      	ldr	r3, [r3, #0]
 801b0b0:	68f8      	ldr	r0, [r7, #12]
 801b0b2:	4798      	blx	r3
 801b0b4:	eeb0 7a40 	vmov.f32	s14, s0
 801b0b8:	eef0 7a60 	vmov.f32	s15, s1
 801b0bc:	bf00      	nop
}
 801b0be:	eeb0 0a47 	vmov.f32	s0, s14
 801b0c2:	eef0 0a67 	vmov.f32	s1, s15
 801b0c6:	3710      	adds	r7, #16
 801b0c8:	46bd      	mov	sp, r7
 801b0ca:	bd80      	pop	{r7, pc}

0801b0cc <_ZN21MockCheckedActualCall22returnUnsignedIntValueEv>:

unsigned int MockCheckedActualCall::returnUnsignedIntValue()
{
 801b0cc:	b590      	push	{r4, r7, lr}
 801b0ce:	b091      	sub	sp, #68	; 0x44
 801b0d0:	af00      	add	r7, sp, #0
 801b0d2:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 801b0d4:	687b      	ldr	r3, [r7, #4]
 801b0d6:	681b      	ldr	r3, [r3, #0]
 801b0d8:	3354      	adds	r3, #84	; 0x54
 801b0da:	681b      	ldr	r3, [r3, #0]
 801b0dc:	f107 0208 	add.w	r2, r7, #8
 801b0e0:	6879      	ldr	r1, [r7, #4]
 801b0e2:	4610      	mov	r0, r2
 801b0e4:	4798      	blx	r3
 801b0e6:	f107 0308 	add.w	r3, r7, #8
 801b0ea:	4618      	mov	r0, r3
 801b0ec:	f004 ff06 	bl	801fefc <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 801b0f0:	4604      	mov	r4, r0
 801b0f2:	bf00      	nop
 801b0f4:	f107 0308 	add.w	r3, r7, #8
 801b0f8:	4618      	mov	r0, r3
 801b0fa:	f004 fc25 	bl	801f948 <_ZN14MockNamedValueD1Ev>
 801b0fe:	4623      	mov	r3, r4
}
 801b100:	4618      	mov	r0, r3
 801b102:	3744      	adds	r7, #68	; 0x44
 801b104:	46bd      	mov	sp, r7
 801b106:	bd90      	pop	{r4, r7, pc}

0801b108 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockCheckedActualCall::returnUnsignedIntValueOrDefault(unsigned int default_value)
{
 801b108:	b580      	push	{r7, lr}
 801b10a:	b082      	sub	sp, #8
 801b10c:	af00      	add	r7, sp, #0
 801b10e:	6078      	str	r0, [r7, #4]
 801b110:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801b112:	687b      	ldr	r3, [r7, #4]
 801b114:	681b      	ldr	r3, [r3, #0]
 801b116:	3350      	adds	r3, #80	; 0x50
 801b118:	681b      	ldr	r3, [r3, #0]
 801b11a:	6878      	ldr	r0, [r7, #4]
 801b11c:	4798      	blx	r3
 801b11e:	4603      	mov	r3, r0
 801b120:	f083 0301 	eor.w	r3, r3, #1
 801b124:	b2db      	uxtb	r3, r3
 801b126:	2b00      	cmp	r3, #0
 801b128:	d001      	beq.n	801b12e <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x26>
        return default_value;
 801b12a:	683b      	ldr	r3, [r7, #0]
 801b12c:	e007      	b.n	801b13e <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x36>
    }
    return returnUnsignedIntValue();
 801b12e:	687b      	ldr	r3, [r7, #4]
 801b130:	681b      	ldr	r3, [r3, #0]
 801b132:	3388      	adds	r3, #136	; 0x88
 801b134:	681b      	ldr	r3, [r3, #0]
 801b136:	6878      	ldr	r0, [r7, #4]
 801b138:	4798      	blx	r3
 801b13a:	4603      	mov	r3, r0
 801b13c:	bf00      	nop
}
 801b13e:	4618      	mov	r0, r3
 801b140:	3708      	adds	r7, #8
 801b142:	46bd      	mov	sp, r7
 801b144:	bd80      	pop	{r7, pc}

0801b146 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv>:

void * MockCheckedActualCall::returnPointerValueOrDefault(void * default_value)
{
 801b146:	b580      	push	{r7, lr}
 801b148:	b082      	sub	sp, #8
 801b14a:	af00      	add	r7, sp, #0
 801b14c:	6078      	str	r0, [r7, #4]
 801b14e:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	681b      	ldr	r3, [r3, #0]
 801b154:	3350      	adds	r3, #80	; 0x50
 801b156:	681b      	ldr	r3, [r3, #0]
 801b158:	6878      	ldr	r0, [r7, #4]
 801b15a:	4798      	blx	r3
 801b15c:	4603      	mov	r3, r0
 801b15e:	f083 0301 	eor.w	r3, r3, #1
 801b162:	b2db      	uxtb	r3, r3
 801b164:	2b00      	cmp	r3, #0
 801b166:	d001      	beq.n	801b16c <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x26>
        return default_value;
 801b168:	683b      	ldr	r3, [r7, #0]
 801b16a:	e007      	b.n	801b17c <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x36>
    }
    return returnPointerValue();
 801b16c:	687b      	ldr	r3, [r7, #4]
 801b16e:	681b      	ldr	r3, [r3, #0]
 801b170:	33a0      	adds	r3, #160	; 0xa0
 801b172:	681b      	ldr	r3, [r3, #0]
 801b174:	6878      	ldr	r0, [r7, #4]
 801b176:	4798      	blx	r3
 801b178:	4603      	mov	r3, r0
 801b17a:	bf00      	nop
}
 801b17c:	4618      	mov	r0, r3
 801b17e:	3708      	adds	r7, #8
 801b180:	46bd      	mov	sp, r7
 801b182:	bd80      	pop	{r7, pc}

0801b184 <_ZN21MockCheckedActualCall18returnPointerValueEv>:

void * MockCheckedActualCall::returnPointerValue()
{
 801b184:	b590      	push	{r4, r7, lr}
 801b186:	b091      	sub	sp, #68	; 0x44
 801b188:	af00      	add	r7, sp, #0
 801b18a:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	681b      	ldr	r3, [r3, #0]
 801b190:	3354      	adds	r3, #84	; 0x54
 801b192:	681b      	ldr	r3, [r3, #0]
 801b194:	f107 0208 	add.w	r2, r7, #8
 801b198:	6879      	ldr	r1, [r7, #4]
 801b19a:	4610      	mov	r0, r2
 801b19c:	4798      	blx	r3
 801b19e:	f107 0308 	add.w	r3, r7, #8
 801b1a2:	4618      	mov	r0, r3
 801b1a4:	f005 f8e0 	bl	8020368 <_ZNK14MockNamedValue15getPointerValueEv>
 801b1a8:	4604      	mov	r4, r0
 801b1aa:	bf00      	nop
 801b1ac:	f107 0308 	add.w	r3, r7, #8
 801b1b0:	4618      	mov	r0, r3
 801b1b2:	f004 fbc9 	bl	801f948 <_ZN14MockNamedValueD1Ev>
 801b1b6:	4623      	mov	r3, r4
}
 801b1b8:	4618      	mov	r0, r3
 801b1ba:	3744      	adds	r7, #68	; 0x44
 801b1bc:	46bd      	mov	sp, r7
 801b1be:	bd90      	pop	{r4, r7, pc}

0801b1c0 <_ZN21MockCheckedActualCall23returnConstPointerValueEv>:

const void * MockCheckedActualCall::returnConstPointerValue()
{
 801b1c0:	b590      	push	{r4, r7, lr}
 801b1c2:	b091      	sub	sp, #68	; 0x44
 801b1c4:	af00      	add	r7, sp, #0
 801b1c6:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 801b1c8:	687b      	ldr	r3, [r7, #4]
 801b1ca:	681b      	ldr	r3, [r3, #0]
 801b1cc:	3354      	adds	r3, #84	; 0x54
 801b1ce:	681b      	ldr	r3, [r3, #0]
 801b1d0:	f107 0208 	add.w	r2, r7, #8
 801b1d4:	6879      	ldr	r1, [r7, #4]
 801b1d6:	4610      	mov	r0, r2
 801b1d8:	4798      	blx	r3
 801b1da:	f107 0308 	add.w	r3, r7, #8
 801b1de:	4618      	mov	r0, r3
 801b1e0:	f005 f8ea 	bl	80203b8 <_ZNK14MockNamedValue20getConstPointerValueEv>
 801b1e4:	4604      	mov	r4, r0
 801b1e6:	bf00      	nop
 801b1e8:	f107 0308 	add.w	r3, r7, #8
 801b1ec:	4618      	mov	r0, r3
 801b1ee:	f004 fbab 	bl	801f948 <_ZN14MockNamedValueD1Ev>
 801b1f2:	4623      	mov	r3, r4
}
 801b1f4:	4618      	mov	r0, r3
 801b1f6:	3744      	adds	r7, #68	; 0x44
 801b1f8:	46bd      	mov	sp, r7
 801b1fa:	bd90      	pop	{r4, r7, pc}

0801b1fc <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv>:

const void * MockCheckedActualCall::returnConstPointerValueOrDefault(const void * default_value)
{
 801b1fc:	b580      	push	{r7, lr}
 801b1fe:	b082      	sub	sp, #8
 801b200:	af00      	add	r7, sp, #0
 801b202:	6078      	str	r0, [r7, #4]
 801b204:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801b206:	687b      	ldr	r3, [r7, #4]
 801b208:	681b      	ldr	r3, [r3, #0]
 801b20a:	3350      	adds	r3, #80	; 0x50
 801b20c:	681b      	ldr	r3, [r3, #0]
 801b20e:	6878      	ldr	r0, [r7, #4]
 801b210:	4798      	blx	r3
 801b212:	4603      	mov	r3, r0
 801b214:	f083 0301 	eor.w	r3, r3, #1
 801b218:	b2db      	uxtb	r3, r3
 801b21a:	2b00      	cmp	r3, #0
 801b21c:	d001      	beq.n	801b222 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x26>
        return default_value;
 801b21e:	683b      	ldr	r3, [r7, #0]
 801b220:	e007      	b.n	801b232 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x36>
    }
    return returnConstPointerValue();
 801b222:	687b      	ldr	r3, [r7, #4]
 801b224:	681b      	ldr	r3, [r3, #0]
 801b226:	33a8      	adds	r3, #168	; 0xa8
 801b228:	681b      	ldr	r3, [r3, #0]
 801b22a:	6878      	ldr	r0, [r7, #4]
 801b22c:	4798      	blx	r3
 801b22e:	4603      	mov	r3, r0
 801b230:	bf00      	nop
}
 801b232:	4618      	mov	r0, r3
 801b234:	3708      	adds	r7, #8
 801b236:	46bd      	mov	sp, r7
 801b238:	bd80      	pop	{r7, pc}

0801b23a <_ZN21MockCheckedActualCall26returnFunctionPointerValueEv>:

void (*MockCheckedActualCall::returnFunctionPointerValue())()
{
 801b23a:	b590      	push	{r4, r7, lr}
 801b23c:	b091      	sub	sp, #68	; 0x44
 801b23e:	af00      	add	r7, sp, #0
 801b240:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 801b242:	687b      	ldr	r3, [r7, #4]
 801b244:	681b      	ldr	r3, [r3, #0]
 801b246:	3354      	adds	r3, #84	; 0x54
 801b248:	681b      	ldr	r3, [r3, #0]
 801b24a:	f107 0208 	add.w	r2, r7, #8
 801b24e:	6879      	ldr	r1, [r7, #4]
 801b250:	4610      	mov	r0, r2
 801b252:	4798      	blx	r3
 801b254:	f107 0308 	add.w	r3, r7, #8
 801b258:	4618      	mov	r0, r3
 801b25a:	f005 f8d5 	bl	8020408 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 801b25e:	4604      	mov	r4, r0
 801b260:	bf00      	nop
 801b262:	f107 0308 	add.w	r3, r7, #8
 801b266:	4618      	mov	r0, r3
 801b268:	f004 fb6e 	bl	801f948 <_ZN14MockNamedValueD1Ev>
 801b26c:	4623      	mov	r3, r4
}
 801b26e:	4618      	mov	r0, r3
 801b270:	3744      	adds	r7, #68	; 0x44
 801b272:	46bd      	mov	sp, r7
 801b274:	bd90      	pop	{r4, r7, pc}

0801b276 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockCheckedActualCall::returnFunctionPointerValueOrDefault(void (*default_value)()))()
{
 801b276:	b580      	push	{r7, lr}
 801b278:	b082      	sub	sp, #8
 801b27a:	af00      	add	r7, sp, #0
 801b27c:	6078      	str	r0, [r7, #4]
 801b27e:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801b280:	687b      	ldr	r3, [r7, #4]
 801b282:	681b      	ldr	r3, [r3, #0]
 801b284:	3350      	adds	r3, #80	; 0x50
 801b286:	681b      	ldr	r3, [r3, #0]
 801b288:	6878      	ldr	r0, [r7, #4]
 801b28a:	4798      	blx	r3
 801b28c:	4603      	mov	r3, r0
 801b28e:	f083 0301 	eor.w	r3, r3, #1
 801b292:	b2db      	uxtb	r3, r3
 801b294:	2b00      	cmp	r3, #0
 801b296:	d001      	beq.n	801b29c <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x26>
        return default_value;
 801b298:	683b      	ldr	r3, [r7, #0]
 801b29a:	e007      	b.n	801b2ac <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x36>
    }
    return returnFunctionPointerValue();
 801b29c:	687b      	ldr	r3, [r7, #4]
 801b29e:	681b      	ldr	r3, [r3, #0]
 801b2a0:	33b0      	adds	r3, #176	; 0xb0
 801b2a2:	681b      	ldr	r3, [r3, #0]
 801b2a4:	6878      	ldr	r0, [r7, #4]
 801b2a6:	4798      	blx	r3
 801b2a8:	4603      	mov	r3, r0
 801b2aa:	bf00      	nop
}
 801b2ac:	4618      	mov	r0, r3
 801b2ae:	3708      	adds	r7, #8
 801b2b0:	46bd      	mov	sp, r7
 801b2b2:	bd80      	pop	{r7, pc}

0801b2b4 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc>:

const char * MockCheckedActualCall::returnStringValueOrDefault(const char * default_value)
{
 801b2b4:	b580      	push	{r7, lr}
 801b2b6:	b082      	sub	sp, #8
 801b2b8:	af00      	add	r7, sp, #0
 801b2ba:	6078      	str	r0, [r7, #4]
 801b2bc:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801b2be:	687b      	ldr	r3, [r7, #4]
 801b2c0:	681b      	ldr	r3, [r3, #0]
 801b2c2:	3350      	adds	r3, #80	; 0x50
 801b2c4:	681b      	ldr	r3, [r3, #0]
 801b2c6:	6878      	ldr	r0, [r7, #4]
 801b2c8:	4798      	blx	r3
 801b2ca:	4603      	mov	r3, r0
 801b2cc:	f083 0301 	eor.w	r3, r3, #1
 801b2d0:	b2db      	uxtb	r3, r3
 801b2d2:	2b00      	cmp	r3, #0
 801b2d4:	d001      	beq.n	801b2da <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x26>
        return default_value;
 801b2d6:	683b      	ldr	r3, [r7, #0]
 801b2d8:	e007      	b.n	801b2ea <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x36>
    }
    return returnStringValue();
 801b2da:	687b      	ldr	r3, [r7, #4]
 801b2dc:	681b      	ldr	r3, [r3, #0]
 801b2de:	3394      	adds	r3, #148	; 0x94
 801b2e0:	681b      	ldr	r3, [r3, #0]
 801b2e2:	6878      	ldr	r0, [r7, #4]
 801b2e4:	4798      	blx	r3
 801b2e6:	4603      	mov	r3, r0
 801b2e8:	bf00      	nop
}
 801b2ea:	4618      	mov	r0, r3
 801b2ec:	3708      	adds	r7, #8
 801b2ee:	46bd      	mov	sp, r7
 801b2f0:	bd80      	pop	{r7, pc}

0801b2f2 <_ZN21MockCheckedActualCall17returnStringValueEv>:

const char * MockCheckedActualCall::returnStringValue()
{
 801b2f2:	b590      	push	{r4, r7, lr}
 801b2f4:	b091      	sub	sp, #68	; 0x44
 801b2f6:	af00      	add	r7, sp, #0
 801b2f8:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 801b2fa:	687b      	ldr	r3, [r7, #4]
 801b2fc:	681b      	ldr	r3, [r3, #0]
 801b2fe:	3354      	adds	r3, #84	; 0x54
 801b300:	681b      	ldr	r3, [r3, #0]
 801b302:	f107 0208 	add.w	r2, r7, #8
 801b306:	6879      	ldr	r1, [r7, #4]
 801b308:	4610      	mov	r0, r2
 801b30a:	4798      	blx	r3
 801b30c:	f107 0308 	add.w	r3, r7, #8
 801b310:	4618      	mov	r0, r3
 801b312:	f005 f801 	bl	8020318 <_ZNK14MockNamedValue14getStringValueEv>
 801b316:	4604      	mov	r4, r0
 801b318:	bf00      	nop
 801b31a:	f107 0308 	add.w	r3, r7, #8
 801b31e:	4618      	mov	r0, r3
 801b320:	f004 fb12 	bl	801f948 <_ZN14MockNamedValueD1Ev>
 801b324:	4623      	mov	r3, r4
}
 801b326:	4618      	mov	r0, r3
 801b328:	3744      	adds	r7, #68	; 0x44
 801b32a:	46bd      	mov	sp, r7
 801b32c:	bd90      	pop	{r4, r7, pc}

0801b32e <_ZN21MockCheckedActualCall14hasReturnValueEv>:

bool MockCheckedActualCall::hasReturnValue()
{
 801b32e:	b590      	push	{r4, r7, lr}
 801b330:	b093      	sub	sp, #76	; 0x4c
 801b332:	af00      	add	r7, sp, #0
 801b334:	6078      	str	r0, [r7, #4]
    return ! returnValue().getName().isEmpty();
 801b336:	687b      	ldr	r3, [r7, #4]
 801b338:	681b      	ldr	r3, [r3, #0]
 801b33a:	3354      	adds	r3, #84	; 0x54
 801b33c:	681b      	ldr	r3, [r3, #0]
 801b33e:	f107 0210 	add.w	r2, r7, #16
 801b342:	6879      	ldr	r1, [r7, #4]
 801b344:	4610      	mov	r0, r2
 801b346:	4798      	blx	r3
 801b348:	f107 0308 	add.w	r3, r7, #8
 801b34c:	f107 0210 	add.w	r2, r7, #16
 801b350:	4611      	mov	r1, r2
 801b352:	4618      	mov	r0, r3
 801b354:	f004 fd8c 	bl	801fe70 <_ZNK14MockNamedValue7getNameEv>
 801b358:	f107 0308 	add.w	r3, r7, #8
 801b35c:	4618      	mov	r0, r3
 801b35e:	f7f4 f94b 	bl	800f5f8 <_ZNK12SimpleString7isEmptyEv>
 801b362:	4603      	mov	r3, r0
 801b364:	f083 0301 	eor.w	r3, r3, #1
 801b368:	b2dc      	uxtb	r4, r3
 801b36a:	f107 0308 	add.w	r3, r7, #8
 801b36e:	4618      	mov	r0, r3
 801b370:	f7f4 f953 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801b374:	f107 0310 	add.w	r3, r7, #16
 801b378:	4618      	mov	r0, r3
 801b37a:	f004 fae5 	bl	801f948 <_ZN14MockNamedValueD1Ev>
 801b37e:	4623      	mov	r3, r4
}
 801b380:	4618      	mov	r0, r3
 801b382:	374c      	adds	r7, #76	; 0x4c
 801b384:	46bd      	mov	sp, r7
 801b386:	bd90      	pop	{r4, r7, pc}

0801b388 <_ZN21MockCheckedActualCall8onObjectEPKv>:

MockActualCall& MockCheckedActualCall::onObject(const void* objectPtr)
{
 801b388:	b590      	push	{r4, r7, lr}
 801b38a:	b095      	sub	sp, #84	; 0x54
 801b38c:	af02      	add	r7, sp, #8
 801b38e:	6078      	str	r0, [r7, #4]
 801b390:	6039      	str	r1, [r7, #0]
    if(hasFailed()) {
 801b392:	687b      	ldr	r3, [r7, #4]
 801b394:	681b      	ldr	r3, [r3, #0]
 801b396:	33c0      	adds	r3, #192	; 0xc0
 801b398:	681b      	ldr	r3, [r3, #0]
 801b39a:	6878      	ldr	r0, [r7, #4]
 801b39c:	4798      	blx	r3
 801b39e:	4603      	mov	r3, r0
 801b3a0:	2b00      	cmp	r3, #0
 801b3a2:	d001      	beq.n	801b3a8 <_ZN21MockCheckedActualCall8onObjectEPKv+0x20>
        return *this;
 801b3a4:	687c      	ldr	r4, [r7, #4]
 801b3a6:	e053      	b.n	801b450 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    // Currently matching expectations are not discarded because the passed object
    // is ignored if not specifically set in the expectation

    potentiallyMatchingExpectations_.onlyKeepExpectationsOnObject(objectPtr);
 801b3a8:	687b      	ldr	r3, [r7, #4]
 801b3aa:	331c      	adds	r3, #28
 801b3ac:	6839      	ldr	r1, [r7, #0]
 801b3ae:	4618      	mov	r0, r3
 801b3b0:	f003 f8ca 	bl	801e548 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>

    if ((!matchingExpectation_) && potentiallyMatchingExpectations_.isEmpty()) {
 801b3b4:	687b      	ldr	r3, [r7, #4]
 801b3b6:	699b      	ldr	r3, [r3, #24]
 801b3b8:	2b00      	cmp	r3, #0
 801b3ba:	d109      	bne.n	801b3d0 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 801b3bc:	687b      	ldr	r3, [r7, #4]
 801b3be:	331c      	adds	r3, #28
 801b3c0:	4618      	mov	r0, r3
 801b3c2:	f002 fe20 	bl	801e006 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801b3c6:	4603      	mov	r3, r0
 801b3c8:	2b00      	cmp	r3, #0
 801b3ca:	d001      	beq.n	801b3d0 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 801b3cc:	2301      	movs	r3, #1
 801b3ce:	e000      	b.n	801b3d2 <_ZN21MockCheckedActualCall8onObjectEPKv+0x4a>
 801b3d0:	2300      	movs	r3, #0
 801b3d2:	2b00      	cmp	r3, #0
 801b3d4:	d02c      	beq.n	801b430 <_ZN21MockCheckedActualCall8onObjectEPKv+0xa8>
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	681b      	ldr	r3, [r3, #0]
 801b3da:	33cc      	adds	r3, #204	; 0xcc
 801b3dc:	681b      	ldr	r3, [r3, #0]
 801b3de:	6878      	ldr	r0, [r7, #4]
 801b3e0:	4798      	blx	r3
 801b3e2:	4604      	mov	r4, r0
 801b3e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b3e8:	6879      	ldr	r1, [r7, #4]
 801b3ea:	4618      	mov	r0, r3
 801b3ec:	f7fe fd3f 	bl	8019e6e <_ZNK21MockCheckedActualCall7getNameEv>
 801b3f0:	687b      	ldr	r3, [r7, #4]
 801b3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b3f4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801b3f8:	f107 000c 	add.w	r0, r7, #12
 801b3fc:	9300      	str	r3, [sp, #0]
 801b3fe:	683b      	ldr	r3, [r7, #0]
 801b400:	4621      	mov	r1, r4
 801b402:	f004 f9fb 	bl	801f7fc <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>
 801b406:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b40a:	4618      	mov	r0, r3
 801b40c:	f7f4 f905 	bl	800f61a <_ZN12SimpleStringD1Ev>
        failTest(failure);
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	681b      	ldr	r3, [r3, #0]
 801b414:	33dc      	adds	r3, #220	; 0xdc
 801b416:	681b      	ldr	r3, [r3, #0]
 801b418:	f107 020c 	add.w	r2, r7, #12
 801b41c:	4611      	mov	r1, r2
 801b41e:	6878      	ldr	r0, [r7, #4]
 801b420:	4798      	blx	r3
        return *this;
 801b422:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 801b424:	f107 030c 	add.w	r3, r7, #12
 801b428:	4618      	mov	r0, r3
 801b42a:	f000 ffa7 	bl	801c37c <_ZN27MockUnexpectedObjectFailureD1Ev>
 801b42e:	e00f      	b.n	801b450 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    potentiallyMatchingExpectations_.wasPassedToObject();
 801b430:	687b      	ldr	r3, [r7, #4]
 801b432:	331c      	adds	r3, #28
 801b434:	4618      	mov	r0, r3
 801b436:	f003 f9a7 	bl	801e788 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>

    if (!matchingExpectation_) {
 801b43a:	687b      	ldr	r3, [r7, #4]
 801b43c:	699b      	ldr	r3, [r3, #24]
 801b43e:	2b00      	cmp	r3, #0
 801b440:	d105      	bne.n	801b44e <_ZN21MockCheckedActualCall8onObjectEPKv+0xc6>
        completeCallWhenMatchIsFound();
 801b442:	687b      	ldr	r3, [r7, #4]
 801b444:	681b      	ldr	r3, [r3, #0]
 801b446:	33d8      	adds	r3, #216	; 0xd8
 801b448:	681b      	ldr	r3, [r3, #0]
 801b44a:	6878      	ldr	r0, [r7, #4]
 801b44c:	4798      	blx	r3
    }

    return *this;
 801b44e:	687c      	ldr	r4, [r7, #4]
 801b450:	4623      	mov	r3, r4
}
 801b452:	4618      	mov	r0, r3
 801b454:	374c      	adds	r7, #76	; 0x4c
 801b456:	46bd      	mov	sp, r7
 801b458:	bd90      	pop	{r4, r7, pc}
	...

0801b45c <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv>:

void MockCheckedActualCall::addOutputParameter(const SimpleString& name, const SimpleString& type, void* ptr)
{
 801b45c:	b590      	push	{r4, r7, lr}
 801b45e:	b087      	sub	sp, #28
 801b460:	af00      	add	r7, sp, #0
 801b462:	60f8      	str	r0, [r7, #12]
 801b464:	60b9      	str	r1, [r7, #8]
 801b466:	607a      	str	r2, [r7, #4]
 801b468:	603b      	str	r3, [r7, #0]
    MockOutputParametersListNode* newNode = new MockOutputParametersListNode(name, type, ptr);
 801b46a:	f240 2282 	movw	r2, #642	; 0x282
 801b46e:	4913      	ldr	r1, [pc, #76]	; (801b4bc <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x60>)
 801b470:	2018      	movs	r0, #24
 801b472:	f7f1 f957 	bl	800c724 <_ZnwjPKci>
 801b476:	4604      	mov	r4, r0
 801b478:	683b      	ldr	r3, [r7, #0]
 801b47a:	687a      	ldr	r2, [r7, #4]
 801b47c:	68b9      	ldr	r1, [r7, #8]
 801b47e:	4620      	mov	r0, r4
 801b480:	f7fe fa48 	bl	8019914 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>
 801b484:	613c      	str	r4, [r7, #16]

    if (outputParameterExpectations_ == NULLPTR)
 801b486:	68fb      	ldr	r3, [r7, #12]
 801b488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	d103      	bne.n	801b496 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x3a>
        outputParameterExpectations_ = newNode;
 801b48e:	68fb      	ldr	r3, [r7, #12]
 801b490:	693a      	ldr	r2, [r7, #16]
 801b492:	629a      	str	r2, [r3, #40]	; 0x28
    else {
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
        while (lastNode->next_) lastNode = lastNode->next_;
        lastNode->next_ = newNode;
    }
}
 801b494:	e00d      	b.n	801b4b2 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x56>
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
 801b496:	68fb      	ldr	r3, [r7, #12]
 801b498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b49a:	617b      	str	r3, [r7, #20]
        while (lastNode->next_) lastNode = lastNode->next_;
 801b49c:	697b      	ldr	r3, [r7, #20]
 801b49e:	695b      	ldr	r3, [r3, #20]
 801b4a0:	2b00      	cmp	r3, #0
 801b4a2:	d003      	beq.n	801b4ac <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x50>
 801b4a4:	697b      	ldr	r3, [r7, #20]
 801b4a6:	695b      	ldr	r3, [r3, #20]
 801b4a8:	617b      	str	r3, [r7, #20]
 801b4aa:	e7f7      	b.n	801b49c <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x40>
        lastNode->next_ = newNode;
 801b4ac:	697b      	ldr	r3, [r7, #20]
 801b4ae:	693a      	ldr	r2, [r7, #16]
 801b4b0:	615a      	str	r2, [r3, #20]
}
 801b4b2:	bf00      	nop
 801b4b4:	371c      	adds	r7, #28
 801b4b6:	46bd      	mov	sp, r7
 801b4b8:	bd90      	pop	{r4, r7, pc}
 801b4ba:	bf00      	nop
 801b4bc:	08028a94 	.word	0x08028a94

0801b4c0 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>:
    class MockOutputParametersListNode
 801b4c0:	b580      	push	{r7, lr}
 801b4c2:	b082      	sub	sp, #8
 801b4c4:	af00      	add	r7, sp, #0
 801b4c6:	6078      	str	r0, [r7, #4]
 801b4c8:	687b      	ldr	r3, [r7, #4]
 801b4ca:	3308      	adds	r3, #8
 801b4cc:	4618      	mov	r0, r3
 801b4ce:	f7f4 f8a4 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801b4d2:	687b      	ldr	r3, [r7, #4]
 801b4d4:	4618      	mov	r0, r3
 801b4d6:	f7f4 f8a0 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801b4da:	687b      	ldr	r3, [r7, #4]
 801b4dc:	4618      	mov	r0, r3
 801b4de:	3708      	adds	r7, #8
 801b4e0:	46bd      	mov	sp, r7
 801b4e2:	bd80      	pop	{r7, pc}

0801b4e4 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>:

void MockCheckedActualCall::cleanUpOutputParameterList()
{
 801b4e4:	b590      	push	{r4, r7, lr}
 801b4e6:	b085      	sub	sp, #20
 801b4e8:	af00      	add	r7, sp, #0
 801b4ea:	6078      	str	r0, [r7, #4]
    MockOutputParametersListNode* current = outputParameterExpectations_;
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b4f0:	60fb      	str	r3, [r7, #12]
    MockOutputParametersListNode* toBeDeleted = NULLPTR;
 801b4f2:	2300      	movs	r3, #0
 801b4f4:	60bb      	str	r3, [r7, #8]

    while (current) {
 801b4f6:	68fb      	ldr	r3, [r7, #12]
 801b4f8:	2b00      	cmp	r3, #0
 801b4fa:	d012      	beq.n	801b522 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x3e>
        toBeDeleted = current;
 801b4fc:	68fb      	ldr	r3, [r7, #12]
 801b4fe:	60bb      	str	r3, [r7, #8]
        outputParameterExpectations_ = current = current->next_;
 801b500:	68fb      	ldr	r3, [r7, #12]
 801b502:	695b      	ldr	r3, [r3, #20]
 801b504:	60fb      	str	r3, [r7, #12]
 801b506:	687b      	ldr	r3, [r7, #4]
 801b508:	68fa      	ldr	r2, [r7, #12]
 801b50a:	629a      	str	r2, [r3, #40]	; 0x28
        delete toBeDeleted;
 801b50c:	68bc      	ldr	r4, [r7, #8]
 801b50e:	2c00      	cmp	r4, #0
 801b510:	d0f1      	beq.n	801b4f6 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
 801b512:	4620      	mov	r0, r4
 801b514:	f7ff ffd4 	bl	801b4c0 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>
 801b518:	2118      	movs	r1, #24
 801b51a:	4620      	mov	r0, r4
 801b51c:	f7f1 f916 	bl	800c74c <_ZdlPvj>
    while (current) {
 801b520:	e7e9      	b.n	801b4f6 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
    }
}
 801b522:	bf00      	nop
 801b524:	3714      	adds	r7, #20
 801b526:	46bd      	mov	sp, r7
 801b528:	bd90      	pop	{r4, r7, pc}
	...

0801b52c <_ZN19MockActualCallTraceC1Ev>:


MockActualCallTrace::MockActualCallTrace()
 801b52c:	b580      	push	{r7, lr}
 801b52e:	b082      	sub	sp, #8
 801b530:	af00      	add	r7, sp, #0
 801b532:	6078      	str	r0, [r7, #4]
 801b534:	687b      	ldr	r3, [r7, #4]
 801b536:	4618      	mov	r0, r3
 801b538:	f7fe fc6a 	bl	8019e10 <_ZN14MockActualCallC1Ev>
 801b53c:	4a06      	ldr	r2, [pc, #24]	; (801b558 <_ZN19MockActualCallTraceC1Ev+0x2c>)
 801b53e:	687b      	ldr	r3, [r7, #4]
 801b540:	601a      	str	r2, [r3, #0]
 801b542:	687b      	ldr	r3, [r7, #4]
 801b544:	3304      	adds	r3, #4
 801b546:	4905      	ldr	r1, [pc, #20]	; (801b55c <_ZN19MockActualCallTraceC1Ev+0x30>)
 801b548:	4618      	mov	r0, r3
 801b54a:	f7f3 fcae 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
{
}
 801b54e:	687b      	ldr	r3, [r7, #4]
 801b550:	4618      	mov	r0, r3
 801b552:	3708      	adds	r7, #8
 801b554:	46bd      	mov	sp, r7
 801b556:	bd80      	pop	{r7, pc}
 801b558:	0802bcdc 	.word	0x0802bcdc
 801b55c:	08028a7c 	.word	0x08028a7c

0801b560 <_ZN19MockActualCallTraceD1Ev>:

MockActualCallTrace::~MockActualCallTrace()
 801b560:	b580      	push	{r7, lr}
 801b562:	b082      	sub	sp, #8
 801b564:	af00      	add	r7, sp, #0
 801b566:	6078      	str	r0, [r7, #4]
 801b568:	4a08      	ldr	r2, [pc, #32]	; (801b58c <_ZN19MockActualCallTraceD1Ev+0x2c>)
 801b56a:	687b      	ldr	r3, [r7, #4]
 801b56c:	601a      	str	r2, [r3, #0]
 801b56e:	687b      	ldr	r3, [r7, #4]
 801b570:	3304      	adds	r3, #4
 801b572:	4618      	mov	r0, r3
 801b574:	f7f4 f851 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801b578:	687b      	ldr	r3, [r7, #4]
 801b57a:	4618      	mov	r0, r3
 801b57c:	f7fe fc58 	bl	8019e30 <_ZN14MockActualCallD1Ev>
{
}
 801b580:	687b      	ldr	r3, [r7, #4]
 801b582:	4618      	mov	r0, r3
 801b584:	3708      	adds	r7, #8
 801b586:	46bd      	mov	sp, r7
 801b588:	bd80      	pop	{r7, pc}
 801b58a:	bf00      	nop
 801b58c:	0802bcdc 	.word	0x0802bcdc

0801b590 <_ZN19MockActualCallTraceD0Ev>:
MockActualCallTrace::~MockActualCallTrace()
 801b590:	b580      	push	{r7, lr}
 801b592:	b082      	sub	sp, #8
 801b594:	af00      	add	r7, sp, #0
 801b596:	6078      	str	r0, [r7, #4]
}
 801b598:	6878      	ldr	r0, [r7, #4]
 801b59a:	f7ff ffe1 	bl	801b560 <_ZN19MockActualCallTraceD1Ev>
 801b59e:	210c      	movs	r1, #12
 801b5a0:	6878      	ldr	r0, [r7, #4]
 801b5a2:	f7f1 f8d3 	bl	800c74c <_ZdlPvj>
 801b5a6:	687b      	ldr	r3, [r7, #4]
 801b5a8:	4618      	mov	r0, r3
 801b5aa:	3708      	adds	r7, #8
 801b5ac:	46bd      	mov	sp, r7
 801b5ae:	bd80      	pop	{r7, pc}

0801b5b0 <_ZN19MockActualCallTrace8withNameERK12SimpleString>:

MockActualCall& MockActualCallTrace::withName(const SimpleString& name)
{
 801b5b0:	b580      	push	{r7, lr}
 801b5b2:	b082      	sub	sp, #8
 801b5b4:	af00      	add	r7, sp, #0
 801b5b6:	6078      	str	r0, [r7, #4]
 801b5b8:	6039      	str	r1, [r7, #0]
    traceBuffer_ += "\nFunction name:";
 801b5ba:	687b      	ldr	r3, [r7, #4]
 801b5bc:	3304      	adds	r3, #4
 801b5be:	4907      	ldr	r1, [pc, #28]	; (801b5dc <_ZN19MockActualCallTrace8withNameERK12SimpleString+0x2c>)
 801b5c0:	4618      	mov	r0, r3
 801b5c2:	f7f4 f8b9 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 801b5c6:	687b      	ldr	r3, [r7, #4]
 801b5c8:	3304      	adds	r3, #4
 801b5ca:	6839      	ldr	r1, [r7, #0]
 801b5cc:	4618      	mov	r0, r3
 801b5ce:	f7f4 f8a1 	bl	800f714 <_ZN12SimpleStringpLERKS_>
    return *this;
 801b5d2:	687b      	ldr	r3, [r7, #4]
}
 801b5d4:	4618      	mov	r0, r3
 801b5d6:	3708      	adds	r7, #8
 801b5d8:	46bd      	mov	sp, r7
 801b5da:	bd80      	pop	{r7, pc}
 801b5dc:	08028b88 	.word	0x08028b88

0801b5e0 <_ZN19MockActualCallTrace13withCallOrderEj>:

MockActualCall& MockActualCallTrace::withCallOrder(unsigned int callOrder)
{
 801b5e0:	b590      	push	{r4, r7, lr}
 801b5e2:	b085      	sub	sp, #20
 801b5e4:	af00      	add	r7, sp, #0
 801b5e6:	6078      	str	r0, [r7, #4]
 801b5e8:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " withCallOrder:";
 801b5ea:	687b      	ldr	r3, [r7, #4]
 801b5ec:	3304      	adds	r3, #4
 801b5ee:	490e      	ldr	r1, [pc, #56]	; (801b628 <_ZN19MockActualCallTrace13withCallOrderEj+0x48>)
 801b5f0:	4618      	mov	r0, r3
 801b5f2:	f7f4 f8a1 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(callOrder);
 801b5f6:	687b      	ldr	r3, [r7, #4]
 801b5f8:	1d1c      	adds	r4, r3, #4
 801b5fa:	f107 0308 	add.w	r3, r7, #8
 801b5fe:	6839      	ldr	r1, [r7, #0]
 801b600:	4618      	mov	r0, r3
 801b602:	f7f4 fd39 	bl	8010078 <_Z10StringFromj>
 801b606:	f107 0308 	add.w	r3, r7, #8
 801b60a:	4619      	mov	r1, r3
 801b60c:	4620      	mov	r0, r4
 801b60e:	f7f4 f881 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801b612:	f107 0308 	add.w	r3, r7, #8
 801b616:	4618      	mov	r0, r3
 801b618:	f7f3 ffff 	bl	800f61a <_ZN12SimpleStringD1Ev>
    return *this;
 801b61c:	687b      	ldr	r3, [r7, #4]
}
 801b61e:	4618      	mov	r0, r3
 801b620:	3714      	adds	r7, #20
 801b622:	46bd      	mov	sp, r7
 801b624:	bd90      	pop	{r4, r7, pc}
 801b626:	bf00      	nop
 801b628:	08028b98 	.word	0x08028b98

0801b62c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>:

void MockActualCallTrace::addParameterName(const SimpleString& name)
{
 801b62c:	b580      	push	{r7, lr}
 801b62e:	b082      	sub	sp, #8
 801b630:	af00      	add	r7, sp, #0
 801b632:	6078      	str	r0, [r7, #4]
 801b634:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " ";
 801b636:	687b      	ldr	r3, [r7, #4]
 801b638:	3304      	adds	r3, #4
 801b63a:	490a      	ldr	r1, [pc, #40]	; (801b664 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x38>)
 801b63c:	4618      	mov	r0, r3
 801b63e:	f7f4 f87b 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 801b642:	687b      	ldr	r3, [r7, #4]
 801b644:	3304      	adds	r3, #4
 801b646:	6839      	ldr	r1, [r7, #0]
 801b648:	4618      	mov	r0, r3
 801b64a:	f7f4 f863 	bl	800f714 <_ZN12SimpleStringpLERKS_>
    traceBuffer_ += ":";
 801b64e:	687b      	ldr	r3, [r7, #4]
 801b650:	3304      	adds	r3, #4
 801b652:	4905      	ldr	r1, [pc, #20]	; (801b668 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x3c>)
 801b654:	4618      	mov	r0, r3
 801b656:	f7f4 f86f 	bl	800f738 <_ZN12SimpleStringpLEPKc>
}
 801b65a:	bf00      	nop
 801b65c:	3708      	adds	r7, #8
 801b65e:	46bd      	mov	sp, r7
 801b660:	bd80      	pop	{r7, pc}
 801b662:	bf00      	nop
 801b664:	08028ba8 	.word	0x08028ba8
 801b668:	08028bac 	.word	0x08028bac

0801b66c <_ZN19MockActualCallTrace17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockActualCallTrace::withBoolParameter(const SimpleString& name, bool value)
{
 801b66c:	b590      	push	{r4, r7, lr}
 801b66e:	b087      	sub	sp, #28
 801b670:	af00      	add	r7, sp, #0
 801b672:	60f8      	str	r0, [r7, #12]
 801b674:	60b9      	str	r1, [r7, #8]
 801b676:	4613      	mov	r3, r2
 801b678:	71fb      	strb	r3, [r7, #7]
    addParameterName(name);
 801b67a:	68b9      	ldr	r1, [r7, #8]
 801b67c:	68f8      	ldr	r0, [r7, #12]
 801b67e:	f7ff ffd5 	bl	801b62c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801b682:	68fb      	ldr	r3, [r7, #12]
 801b684:	1d1c      	adds	r4, r3, #4
 801b686:	f107 0310 	add.w	r3, r7, #16
 801b68a:	79fa      	ldrb	r2, [r7, #7]
 801b68c:	4611      	mov	r1, r2
 801b68e:	4618      	mov	r0, r3
 801b690:	f7f4 fa34 	bl	800fafc <_Z10StringFromb>
 801b694:	f107 0310 	add.w	r3, r7, #16
 801b698:	4619      	mov	r1, r3
 801b69a:	4620      	mov	r0, r4
 801b69c:	f7f4 f83a 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801b6a0:	f107 0310 	add.w	r3, r7, #16
 801b6a4:	4618      	mov	r0, r3
 801b6a6:	f7f3 ffb8 	bl	800f61a <_ZN12SimpleStringD1Ev>
    return *this;
 801b6aa:	68fb      	ldr	r3, [r7, #12]
}
 801b6ac:	4618      	mov	r0, r3
 801b6ae:	371c      	adds	r7, #28
 801b6b0:	46bd      	mov	sp, r7
 801b6b2:	bd90      	pop	{r4, r7, pc}

0801b6b4 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockActualCallTrace::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 801b6b4:	b590      	push	{r4, r7, lr}
 801b6b6:	b08f      	sub	sp, #60	; 0x3c
 801b6b8:	af00      	add	r7, sp, #0
 801b6ba:	60f8      	str	r0, [r7, #12]
 801b6bc:	60b9      	str	r1, [r7, #8]
 801b6be:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801b6c0:	68b9      	ldr	r1, [r7, #8]
 801b6c2:	68f8      	ldr	r0, [r7, #12]
 801b6c4:	f7ff ffb2 	bl	801b62c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 801b6c8:	68fb      	ldr	r3, [r7, #12]
 801b6ca:	1d1c      	adds	r4, r3, #4
 801b6cc:	f107 0320 	add.w	r3, r7, #32
 801b6d0:	6879      	ldr	r1, [r7, #4]
 801b6d2:	4618      	mov	r0, r3
 801b6d4:	f7f4 fcd0 	bl	8010078 <_Z10StringFromj>
 801b6d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b6dc:	491f      	ldr	r1, [pc, #124]	; (801b75c <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj+0xa8>)
 801b6de:	4618      	mov	r0, r3
 801b6e0:	f7f3 fbe3 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801b6e4:	f107 0318 	add.w	r3, r7, #24
 801b6e8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801b6ec:	f107 0120 	add.w	r1, r7, #32
 801b6f0:	4618      	mov	r0, r3
 801b6f2:	f7f3 fff4 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 801b6f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b6fa:	6879      	ldr	r1, [r7, #4]
 801b6fc:	4618      	mov	r0, r3
 801b6fe:	f7f4 fb5f 	bl	800fdc0 <_Z30BracketsFormattedHexStringFromj>
 801b702:	f107 0310 	add.w	r3, r7, #16
 801b706:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801b70a:	f107 0118 	add.w	r1, r7, #24
 801b70e:	4618      	mov	r0, r3
 801b710:	f7f3 ffe5 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 801b714:	f107 0310 	add.w	r3, r7, #16
 801b718:	4619      	mov	r1, r3
 801b71a:	4620      	mov	r0, r4
 801b71c:	f7f3 fffa 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801b720:	f107 0310 	add.w	r3, r7, #16
 801b724:	4618      	mov	r0, r3
 801b726:	f7f3 ff78 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801b72a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b72e:	4618      	mov	r0, r3
 801b730:	f7f3 ff73 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801b734:	f107 0318 	add.w	r3, r7, #24
 801b738:	4618      	mov	r0, r3
 801b73a:	f7f3 ff6e 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801b73e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b742:	4618      	mov	r0, r3
 801b744:	f7f3 ff69 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801b748:	f107 0320 	add.w	r3, r7, #32
 801b74c:	4618      	mov	r0, r3
 801b74e:	f7f3 ff64 	bl	800f61a <_ZN12SimpleStringD1Ev>
    return *this;
 801b752:	68fb      	ldr	r3, [r7, #12]
}
 801b754:	4618      	mov	r0, r3
 801b756:	373c      	adds	r7, #60	; 0x3c
 801b758:	46bd      	mov	sp, r7
 801b75a:	bd90      	pop	{r4, r7, pc}
 801b75c:	08028ba8 	.word	0x08028ba8

0801b760 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi>:

MockActualCall& MockActualCallTrace::withIntParameter(const SimpleString& name, int value)
{
 801b760:	b590      	push	{r4, r7, lr}
 801b762:	b08f      	sub	sp, #60	; 0x3c
 801b764:	af00      	add	r7, sp, #0
 801b766:	60f8      	str	r0, [r7, #12]
 801b768:	60b9      	str	r1, [r7, #8]
 801b76a:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801b76c:	68b9      	ldr	r1, [r7, #8]
 801b76e:	68f8      	ldr	r0, [r7, #12]
 801b770:	f7ff ff5c 	bl	801b62c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 801b774:	68fb      	ldr	r3, [r7, #12]
 801b776:	1d1c      	adds	r4, r3, #4
 801b778:	f107 0320 	add.w	r3, r7, #32
 801b77c:	6879      	ldr	r1, [r7, #4]
 801b77e:	4618      	mov	r0, r3
 801b780:	f7f4 fa12 	bl	800fba8 <_Z10StringFromi>
 801b784:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b788:	491f      	ldr	r1, [pc, #124]	; (801b808 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi+0xa8>)
 801b78a:	4618      	mov	r0, r3
 801b78c:	f7f3 fb8d 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801b790:	f107 0318 	add.w	r3, r7, #24
 801b794:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801b798:	f107 0120 	add.w	r1, r7, #32
 801b79c:	4618      	mov	r0, r3
 801b79e:	f7f3 ff9e 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 801b7a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b7a6:	6879      	ldr	r1, [r7, #4]
 801b7a8:	4618      	mov	r0, r3
 801b7aa:	f7f4 faed 	bl	800fd88 <_Z30BracketsFormattedHexStringFromi>
 801b7ae:	f107 0310 	add.w	r3, r7, #16
 801b7b2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801b7b6:	f107 0118 	add.w	r1, r7, #24
 801b7ba:	4618      	mov	r0, r3
 801b7bc:	f7f3 ff8f 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 801b7c0:	f107 0310 	add.w	r3, r7, #16
 801b7c4:	4619      	mov	r1, r3
 801b7c6:	4620      	mov	r0, r4
 801b7c8:	f7f3 ffa4 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801b7cc:	f107 0310 	add.w	r3, r7, #16
 801b7d0:	4618      	mov	r0, r3
 801b7d2:	f7f3 ff22 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801b7d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b7da:	4618      	mov	r0, r3
 801b7dc:	f7f3 ff1d 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801b7e0:	f107 0318 	add.w	r3, r7, #24
 801b7e4:	4618      	mov	r0, r3
 801b7e6:	f7f3 ff18 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801b7ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b7ee:	4618      	mov	r0, r3
 801b7f0:	f7f3 ff13 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801b7f4:	f107 0320 	add.w	r3, r7, #32
 801b7f8:	4618      	mov	r0, r3
 801b7fa:	f7f3 ff0e 	bl	800f61a <_ZN12SimpleStringD1Ev>
    return *this;
 801b7fe:	68fb      	ldr	r3, [r7, #12]
}
 801b800:	4618      	mov	r0, r3
 801b802:	373c      	adds	r7, #60	; 0x3c
 801b804:	46bd      	mov	sp, r7
 801b806:	bd90      	pop	{r4, r7, pc}
 801b808:	08028ba8 	.word	0x08028ba8

0801b80c <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockActualCallTrace::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 801b80c:	b590      	push	{r4, r7, lr}
 801b80e:	b08f      	sub	sp, #60	; 0x3c
 801b810:	af00      	add	r7, sp, #0
 801b812:	60f8      	str	r0, [r7, #12]
 801b814:	60b9      	str	r1, [r7, #8]
 801b816:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801b818:	68b9      	ldr	r1, [r7, #8]
 801b81a:	68f8      	ldr	r0, [r7, #12]
 801b81c:	f7ff ff06 	bl	801b62c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 801b820:	68fb      	ldr	r3, [r7, #12]
 801b822:	1d1c      	adds	r4, r3, #4
 801b824:	f107 0320 	add.w	r3, r7, #32
 801b828:	6879      	ldr	r1, [r7, #4]
 801b82a:	4618      	mov	r0, r3
 801b82c:	f7f4 fc36 	bl	801009c <_Z10StringFromm>
 801b830:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b834:	491f      	ldr	r1, [pc, #124]	; (801b8b4 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm+0xa8>)
 801b836:	4618      	mov	r0, r3
 801b838:	f7f3 fb37 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801b83c:	f107 0318 	add.w	r3, r7, #24
 801b840:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801b844:	f107 0120 	add.w	r1, r7, #32
 801b848:	4618      	mov	r0, r3
 801b84a:	f7f3 ff48 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 801b84e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b852:	6879      	ldr	r1, [r7, #4]
 801b854:	4618      	mov	r0, r3
 801b856:	f7f4 faeb 	bl	800fe30 <_Z30BracketsFormattedHexStringFromm>
 801b85a:	f107 0310 	add.w	r3, r7, #16
 801b85e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801b862:	f107 0118 	add.w	r1, r7, #24
 801b866:	4618      	mov	r0, r3
 801b868:	f7f3 ff39 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 801b86c:	f107 0310 	add.w	r3, r7, #16
 801b870:	4619      	mov	r1, r3
 801b872:	4620      	mov	r0, r4
 801b874:	f7f3 ff4e 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801b878:	f107 0310 	add.w	r3, r7, #16
 801b87c:	4618      	mov	r0, r3
 801b87e:	f7f3 fecc 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801b882:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b886:	4618      	mov	r0, r3
 801b888:	f7f3 fec7 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801b88c:	f107 0318 	add.w	r3, r7, #24
 801b890:	4618      	mov	r0, r3
 801b892:	f7f3 fec2 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801b896:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b89a:	4618      	mov	r0, r3
 801b89c:	f7f3 febd 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801b8a0:	f107 0320 	add.w	r3, r7, #32
 801b8a4:	4618      	mov	r0, r3
 801b8a6:	f7f3 feb8 	bl	800f61a <_ZN12SimpleStringD1Ev>
    return *this;
 801b8aa:	68fb      	ldr	r3, [r7, #12]
}
 801b8ac:	4618      	mov	r0, r3
 801b8ae:	373c      	adds	r7, #60	; 0x3c
 801b8b0:	46bd      	mov	sp, r7
 801b8b2:	bd90      	pop	{r4, r7, pc}
 801b8b4:	08028ba8 	.word	0x08028ba8

0801b8b8 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockActualCallTrace::withLongIntParameter(const SimpleString& name, long int value)
{
 801b8b8:	b590      	push	{r4, r7, lr}
 801b8ba:	b08f      	sub	sp, #60	; 0x3c
 801b8bc:	af00      	add	r7, sp, #0
 801b8be:	60f8      	str	r0, [r7, #12]
 801b8c0:	60b9      	str	r1, [r7, #8]
 801b8c2:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801b8c4:	68b9      	ldr	r1, [r7, #8]
 801b8c6:	68f8      	ldr	r0, [r7, #12]
 801b8c8:	f7ff feb0 	bl	801b62c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 801b8cc:	68fb      	ldr	r3, [r7, #12]
 801b8ce:	1d1c      	adds	r4, r3, #4
 801b8d0:	f107 0320 	add.w	r3, r7, #32
 801b8d4:	6879      	ldr	r1, [r7, #4]
 801b8d6:	4618      	mov	r0, r3
 801b8d8:	f7f4 f978 	bl	800fbcc <_Z10StringFroml>
 801b8dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b8e0:	491f      	ldr	r1, [pc, #124]	; (801b960 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl+0xa8>)
 801b8e2:	4618      	mov	r0, r3
 801b8e4:	f7f3 fae1 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801b8e8:	f107 0318 	add.w	r3, r7, #24
 801b8ec:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801b8f0:	f107 0120 	add.w	r1, r7, #32
 801b8f4:	4618      	mov	r0, r3
 801b8f6:	f7f3 fef2 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 801b8fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b8fe:	6879      	ldr	r1, [r7, #4]
 801b900:	4618      	mov	r0, r3
 801b902:	f7f4 fa79 	bl	800fdf8 <_Z30BracketsFormattedHexStringFroml>
 801b906:	f107 0310 	add.w	r3, r7, #16
 801b90a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801b90e:	f107 0118 	add.w	r1, r7, #24
 801b912:	4618      	mov	r0, r3
 801b914:	f7f3 fee3 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 801b918:	f107 0310 	add.w	r3, r7, #16
 801b91c:	4619      	mov	r1, r3
 801b91e:	4620      	mov	r0, r4
 801b920:	f7f3 fef8 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801b924:	f107 0310 	add.w	r3, r7, #16
 801b928:	4618      	mov	r0, r3
 801b92a:	f7f3 fe76 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801b92e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b932:	4618      	mov	r0, r3
 801b934:	f7f3 fe71 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801b938:	f107 0318 	add.w	r3, r7, #24
 801b93c:	4618      	mov	r0, r3
 801b93e:	f7f3 fe6c 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801b942:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b946:	4618      	mov	r0, r3
 801b948:	f7f3 fe67 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801b94c:	f107 0320 	add.w	r3, r7, #32
 801b950:	4618      	mov	r0, r3
 801b952:	f7f3 fe62 	bl	800f61a <_ZN12SimpleStringD1Ev>
    return *this;
 801b956:	68fb      	ldr	r3, [r7, #12]
}
 801b958:	4618      	mov	r0, r3
 801b95a:	373c      	adds	r7, #60	; 0x3c
 801b95c:	46bd      	mov	sp, r7
 801b95e:	bd90      	pop	{r4, r7, pc}
 801b960:	08028ba8 	.word	0x08028ba8

0801b964 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockActualCallTrace::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 801b964:	b5b0      	push	{r4, r5, r7, lr}
 801b966:	b086      	sub	sp, #24
 801b968:	af02      	add	r7, sp, #8
 801b96a:	60f8      	str	r0, [r7, #12]
 801b96c:	60b9      	str	r1, [r7, #8]
 801b96e:	4639      	mov	r1, r7
 801b970:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801b974:	f7fa fe7c 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 801b978:	4604      	mov	r4, r0
 801b97a:	6823      	ldr	r3, [r4, #0]
 801b97c:	3368      	adds	r3, #104	; 0x68
 801b97e:	681d      	ldr	r5, [r3, #0]
 801b980:	f7fa fe86 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b984:	4603      	mov	r3, r0
 801b986:	9300      	str	r3, [sp, #0]
 801b988:	f240 23ee 	movw	r3, #750	; 0x2ee
 801b98c:	4a04      	ldr	r2, [pc, #16]	; (801b9a0 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 801b98e:	4905      	ldr	r1, [pc, #20]	; (801b9a4 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 801b990:	4620      	mov	r0, r4
 801b992:	47a8      	blx	r5
    return *this;
 801b994:	68fb      	ldr	r3, [r7, #12]
}
 801b996:	4618      	mov	r0, r3
 801b998:	3710      	adds	r7, #16
 801b99a:	46bd      	mov	sp, r7
 801b99c:	bdb0      	pop	{r4, r5, r7, pc}
 801b99e:	bf00      	nop
 801b9a0:	08028a94 	.word	0x08028a94
 801b9a4:	08028ab0 	.word	0x08028ab0

0801b9a8 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockActualCallTrace::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 801b9a8:	b5b0      	push	{r4, r5, r7, lr}
 801b9aa:	b086      	sub	sp, #24
 801b9ac:	af02      	add	r7, sp, #8
 801b9ae:	60f8      	str	r0, [r7, #12]
 801b9b0:	60b9      	str	r1, [r7, #8]
 801b9b2:	4639      	mov	r1, r7
 801b9b4:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801b9b8:	f7fa fe5a 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 801b9bc:	4604      	mov	r4, r0
 801b9be:	6823      	ldr	r3, [r4, #0]
 801b9c0:	3368      	adds	r3, #104	; 0x68
 801b9c2:	681d      	ldr	r5, [r3, #0]
 801b9c4:	f7fa fe64 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b9c8:	4603      	mov	r3, r0
 801b9ca:	9300      	str	r3, [sp, #0]
 801b9cc:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 801b9d0:	4a04      	ldr	r2, [pc, #16]	; (801b9e4 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801b9d2:	4905      	ldr	r1, [pc, #20]	; (801b9e8 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 801b9d4:	4620      	mov	r0, r4
 801b9d6:	47a8      	blx	r5
    return *this;
 801b9d8:	68fb      	ldr	r3, [r7, #12]
}
 801b9da:	4618      	mov	r0, r3
 801b9dc:	3710      	adds	r7, #16
 801b9de:	46bd      	mov	sp, r7
 801b9e0:	bdb0      	pop	{r4, r5, r7, pc}
 801b9e2:	bf00      	nop
 801b9e4:	08028a94 	.word	0x08028a94
 801b9e8:	08028adc 	.word	0x08028adc

0801b9ec <_ZN19MockActualCallTrace19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockActualCallTrace::withDoubleParameter(const SimpleString& name, double value)
{
 801b9ec:	b590      	push	{r4, r7, lr}
 801b9ee:	b087      	sub	sp, #28
 801b9f0:	af00      	add	r7, sp, #0
 801b9f2:	60f8      	str	r0, [r7, #12]
 801b9f4:	60b9      	str	r1, [r7, #8]
 801b9f6:	ed87 0b00 	vstr	d0, [r7]
    addParameterName(name);
 801b9fa:	68b9      	ldr	r1, [r7, #8]
 801b9fc:	68f8      	ldr	r0, [r7, #12]
 801b9fe:	f7ff fe15 	bl	801b62c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801ba02:	68fb      	ldr	r3, [r7, #12]
 801ba04:	1d1c      	adds	r4, r3, #4
 801ba06:	f107 0310 	add.w	r3, r7, #16
 801ba0a:	2106      	movs	r1, #6
 801ba0c:	ed97 0b00 	vldr	d0, [r7]
 801ba10:	4618      	mov	r0, r3
 801ba12:	f7f4 fac7 	bl	800ffa4 <_Z10StringFromdi>
 801ba16:	f107 0310 	add.w	r3, r7, #16
 801ba1a:	4619      	mov	r1, r3
 801ba1c:	4620      	mov	r0, r4
 801ba1e:	f7f3 fe79 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801ba22:	f107 0310 	add.w	r3, r7, #16
 801ba26:	4618      	mov	r0, r3
 801ba28:	f7f3 fdf7 	bl	800f61a <_ZN12SimpleStringD1Ev>
    return *this;
 801ba2c:	68fb      	ldr	r3, [r7, #12]
}
 801ba2e:	4618      	mov	r0, r3
 801ba30:	371c      	adds	r7, #28
 801ba32:	46bd      	mov	sp, r7
 801ba34:	bd90      	pop	{r4, r7, pc}

0801ba36 <_ZN19MockActualCallTrace19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockActualCallTrace::withStringParameter(const SimpleString& name, const char* value)
{
 801ba36:	b590      	push	{r4, r7, lr}
 801ba38:	b087      	sub	sp, #28
 801ba3a:	af00      	add	r7, sp, #0
 801ba3c:	60f8      	str	r0, [r7, #12]
 801ba3e:	60b9      	str	r1, [r7, #8]
 801ba40:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801ba42:	68b9      	ldr	r1, [r7, #8]
 801ba44:	68f8      	ldr	r0, [r7, #12]
 801ba46:	f7ff fdf1 	bl	801b62c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801ba4a:	68fb      	ldr	r3, [r7, #12]
 801ba4c:	1d1c      	adds	r4, r3, #4
 801ba4e:	f107 0310 	add.w	r3, r7, #16
 801ba52:	6879      	ldr	r1, [r7, #4]
 801ba54:	4618      	mov	r0, r3
 801ba56:	f7f4 f86d 	bl	800fb34 <_Z10StringFromPKc>
 801ba5a:	f107 0310 	add.w	r3, r7, #16
 801ba5e:	4619      	mov	r1, r3
 801ba60:	4620      	mov	r0, r4
 801ba62:	f7f3 fe57 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801ba66:	f107 0310 	add.w	r3, r7, #16
 801ba6a:	4618      	mov	r0, r3
 801ba6c:	f7f3 fdd5 	bl	800f61a <_ZN12SimpleStringD1Ev>
    return *this;
 801ba70:	68fb      	ldr	r3, [r7, #12]
}
 801ba72:	4618      	mov	r0, r3
 801ba74:	371c      	adds	r7, #28
 801ba76:	46bd      	mov	sp, r7
 801ba78:	bd90      	pop	{r4, r7, pc}

0801ba7a <_ZN19MockActualCallTrace20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withPointerParameter(const SimpleString& name, void* value)
{
 801ba7a:	b590      	push	{r4, r7, lr}
 801ba7c:	b087      	sub	sp, #28
 801ba7e:	af00      	add	r7, sp, #0
 801ba80:	60f8      	str	r0, [r7, #12]
 801ba82:	60b9      	str	r1, [r7, #8]
 801ba84:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801ba86:	68b9      	ldr	r1, [r7, #8]
 801ba88:	68f8      	ldr	r0, [r7, #12]
 801ba8a:	f7ff fdcf 	bl	801b62c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801ba8e:	68fb      	ldr	r3, [r7, #12]
 801ba90:	1d1c      	adds	r4, r3, #4
 801ba92:	f107 0310 	add.w	r3, r7, #16
 801ba96:	6879      	ldr	r1, [r7, #4]
 801ba98:	4618      	mov	r0, r3
 801ba9a:	f7f4 f8a9 	bl	800fbf0 <_Z10StringFromPKv>
 801ba9e:	f107 0310 	add.w	r3, r7, #16
 801baa2:	4619      	mov	r1, r3
 801baa4:	4620      	mov	r0, r4
 801baa6:	f7f3 fe35 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801baaa:	f107 0310 	add.w	r3, r7, #16
 801baae:	4618      	mov	r0, r3
 801bab0:	f7f3 fdb3 	bl	800f61a <_ZN12SimpleStringD1Ev>
    return *this;
 801bab4:	68fb      	ldr	r3, [r7, #12]
}
 801bab6:	4618      	mov	r0, r3
 801bab8:	371c      	adds	r7, #28
 801baba:	46bd      	mov	sp, r7
 801babc:	bd90      	pop	{r4, r7, pc}

0801babe <_ZN19MockActualCallTrace25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockActualCallTrace::withConstPointerParameter(const SimpleString& name, const void* value)
{
 801babe:	b590      	push	{r4, r7, lr}
 801bac0:	b087      	sub	sp, #28
 801bac2:	af00      	add	r7, sp, #0
 801bac4:	60f8      	str	r0, [r7, #12]
 801bac6:	60b9      	str	r1, [r7, #8]
 801bac8:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801baca:	68b9      	ldr	r1, [r7, #8]
 801bacc:	68f8      	ldr	r0, [r7, #12]
 801bace:	f7ff fdad 	bl	801b62c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801bad2:	68fb      	ldr	r3, [r7, #12]
 801bad4:	1d1c      	adds	r4, r3, #4
 801bad6:	f107 0310 	add.w	r3, r7, #16
 801bada:	6879      	ldr	r1, [r7, #4]
 801badc:	4618      	mov	r0, r3
 801bade:	f7f4 f887 	bl	800fbf0 <_Z10StringFromPKv>
 801bae2:	f107 0310 	add.w	r3, r7, #16
 801bae6:	4619      	mov	r1, r3
 801bae8:	4620      	mov	r0, r4
 801baea:	f7f3 fe13 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801baee:	f107 0310 	add.w	r3, r7, #16
 801baf2:	4618      	mov	r0, r3
 801baf4:	f7f3 fd91 	bl	800f61a <_ZN12SimpleStringD1Ev>
    return *this;
 801baf8:	68fb      	ldr	r3, [r7, #12]
}
 801bafa:	4618      	mov	r0, r3
 801bafc:	371c      	adds	r7, #28
 801bafe:	46bd      	mov	sp, r7
 801bb00:	bd90      	pop	{r4, r7, pc}

0801bb02 <_ZN19MockActualCallTrace28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockActualCallTrace::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 801bb02:	b590      	push	{r4, r7, lr}
 801bb04:	b087      	sub	sp, #28
 801bb06:	af00      	add	r7, sp, #0
 801bb08:	60f8      	str	r0, [r7, #12]
 801bb0a:	60b9      	str	r1, [r7, #8]
 801bb0c:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801bb0e:	68b9      	ldr	r1, [r7, #8]
 801bb10:	68f8      	ldr	r0, [r7, #12]
 801bb12:	f7ff fd8b 	bl	801b62c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801bb16:	68fb      	ldr	r3, [r7, #12]
 801bb18:	1d1c      	adds	r4, r3, #4
 801bb1a:	f107 0310 	add.w	r3, r7, #16
 801bb1e:	6879      	ldr	r1, [r7, #4]
 801bb20:	4618      	mov	r0, r3
 801bb22:	f7f4 f88f 	bl	800fc44 <_Z10StringFromPFvvE>
 801bb26:	f107 0310 	add.w	r3, r7, #16
 801bb2a:	4619      	mov	r1, r3
 801bb2c:	4620      	mov	r0, r4
 801bb2e:	f7f3 fdf1 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801bb32:	f107 0310 	add.w	r3, r7, #16
 801bb36:	4618      	mov	r0, r3
 801bb38:	f7f3 fd6f 	bl	800f61a <_ZN12SimpleStringD1Ev>
    return *this;
 801bb3c:	68fb      	ldr	r3, [r7, #12]
}
 801bb3e:	4618      	mov	r0, r3
 801bb40:	371c      	adds	r7, #28
 801bb42:	46bd      	mov	sp, r7
 801bb44:	bd90      	pop	{r4, r7, pc}

0801bb46 <_ZN19MockActualCallTrace25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockActualCallTrace::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 801bb46:	b590      	push	{r4, r7, lr}
 801bb48:	b087      	sub	sp, #28
 801bb4a:	af00      	add	r7, sp, #0
 801bb4c:	60f8      	str	r0, [r7, #12]
 801bb4e:	60b9      	str	r1, [r7, #8]
 801bb50:	607a      	str	r2, [r7, #4]
 801bb52:	603b      	str	r3, [r7, #0]
    addParameterName(name);
 801bb54:	68b9      	ldr	r1, [r7, #8]
 801bb56:	68f8      	ldr	r0, [r7, #12]
 801bb58:	f7ff fd68 	bl	801b62c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFromBinaryWithSizeOrNull(value, size);
 801bb5c:	68fb      	ldr	r3, [r7, #12]
 801bb5e:	1d1c      	adds	r4, r3, #4
 801bb60:	f107 0310 	add.w	r3, r7, #16
 801bb64:	683a      	ldr	r2, [r7, #0]
 801bb66:	6879      	ldr	r1, [r7, #4]
 801bb68:	4618      	mov	r0, r3
 801bb6a:	f7f4 fbaf 	bl	80102cc <_Z30StringFromBinaryWithSizeOrNullPKhj>
 801bb6e:	f107 0310 	add.w	r3, r7, #16
 801bb72:	4619      	mov	r1, r3
 801bb74:	4620      	mov	r0, r4
 801bb76:	f7f3 fdcd 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801bb7a:	f107 0310 	add.w	r3, r7, #16
 801bb7e:	4618      	mov	r0, r3
 801bb80:	f7f3 fd4b 	bl	800f61a <_ZN12SimpleStringD1Ev>
    return *this;
 801bb84:	68fb      	ldr	r3, [r7, #12]
}
 801bb86:	4618      	mov	r0, r3
 801bb88:	371c      	adds	r7, #28
 801bb8a:	46bd      	mov	sp, r7
 801bb8c:	bd90      	pop	{r4, r7, pc}
	...

0801bb90 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockActualCallTrace::withParameterOfType(const SimpleString& typeName, const SimpleString& name, const void* value)
{
 801bb90:	b590      	push	{r4, r7, lr}
 801bb92:	b087      	sub	sp, #28
 801bb94:	af00      	add	r7, sp, #0
 801bb96:	60f8      	str	r0, [r7, #12]
 801bb98:	60b9      	str	r1, [r7, #8]
 801bb9a:	607a      	str	r2, [r7, #4]
 801bb9c:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 801bb9e:	68fb      	ldr	r3, [r7, #12]
 801bba0:	3304      	adds	r3, #4
 801bba2:	4913      	ldr	r1, [pc, #76]	; (801bbf0 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv+0x60>)
 801bba4:	4618      	mov	r0, r3
 801bba6:	f7f3 fdc7 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 801bbaa:	68fb      	ldr	r3, [r7, #12]
 801bbac:	3304      	adds	r3, #4
 801bbae:	68b9      	ldr	r1, [r7, #8]
 801bbb0:	4618      	mov	r0, r3
 801bbb2:	f7f3 fdaf 	bl	800f714 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 801bbb6:	6879      	ldr	r1, [r7, #4]
 801bbb8:	68f8      	ldr	r0, [r7, #12]
 801bbba:	f7ff fd37 	bl	801b62c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801bbbe:	68fb      	ldr	r3, [r7, #12]
 801bbc0:	1d1c      	adds	r4, r3, #4
 801bbc2:	f107 0310 	add.w	r3, r7, #16
 801bbc6:	6839      	ldr	r1, [r7, #0]
 801bbc8:	4618      	mov	r0, r3
 801bbca:	f7f4 f811 	bl	800fbf0 <_Z10StringFromPKv>
 801bbce:	f107 0310 	add.w	r3, r7, #16
 801bbd2:	4619      	mov	r1, r3
 801bbd4:	4620      	mov	r0, r4
 801bbd6:	f7f3 fd9d 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801bbda:	f107 0310 	add.w	r3, r7, #16
 801bbde:	4618      	mov	r0, r3
 801bbe0:	f7f3 fd1b 	bl	800f61a <_ZN12SimpleStringD1Ev>
    return *this;
 801bbe4:	68fb      	ldr	r3, [r7, #12]
}
 801bbe6:	4618      	mov	r0, r3
 801bbe8:	371c      	adds	r7, #28
 801bbea:	46bd      	mov	sp, r7
 801bbec:	bd90      	pop	{r4, r7, pc}
 801bbee:	bf00      	nop
 801bbf0:	08028ba8 	.word	0x08028ba8

0801bbf4 <_ZN19MockActualCallTrace19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withOutputParameter(const SimpleString& name, void* output)
{
 801bbf4:	b590      	push	{r4, r7, lr}
 801bbf6:	b087      	sub	sp, #28
 801bbf8:	af00      	add	r7, sp, #0
 801bbfa:	60f8      	str	r0, [r7, #12]
 801bbfc:	60b9      	str	r1, [r7, #8]
 801bbfe:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801bc00:	68b9      	ldr	r1, [r7, #8]
 801bc02:	68f8      	ldr	r0, [r7, #12]
 801bc04:	f7ff fd12 	bl	801b62c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 801bc08:	68fb      	ldr	r3, [r7, #12]
 801bc0a:	1d1c      	adds	r4, r3, #4
 801bc0c:	f107 0310 	add.w	r3, r7, #16
 801bc10:	6879      	ldr	r1, [r7, #4]
 801bc12:	4618      	mov	r0, r3
 801bc14:	f7f3 ffec 	bl	800fbf0 <_Z10StringFromPKv>
 801bc18:	f107 0310 	add.w	r3, r7, #16
 801bc1c:	4619      	mov	r1, r3
 801bc1e:	4620      	mov	r0, r4
 801bc20:	f7f3 fd78 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801bc24:	f107 0310 	add.w	r3, r7, #16
 801bc28:	4618      	mov	r0, r3
 801bc2a:	f7f3 fcf6 	bl	800f61a <_ZN12SimpleStringD1Ev>
    return *this;
 801bc2e:	68fb      	ldr	r3, [r7, #12]
}
 801bc30:	4618      	mov	r0, r3
 801bc32:	371c      	adds	r7, #28
 801bc34:	46bd      	mov	sp, r7
 801bc36:	bd90      	pop	{r4, r7, pc}

0801bc38 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockActualCallTrace::withOutputParameterOfType(const SimpleString& typeName, const SimpleString& name, void* output)
{
 801bc38:	b590      	push	{r4, r7, lr}
 801bc3a:	b087      	sub	sp, #28
 801bc3c:	af00      	add	r7, sp, #0
 801bc3e:	60f8      	str	r0, [r7, #12]
 801bc40:	60b9      	str	r1, [r7, #8]
 801bc42:	607a      	str	r2, [r7, #4]
 801bc44:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 801bc46:	68fb      	ldr	r3, [r7, #12]
 801bc48:	3304      	adds	r3, #4
 801bc4a:	4913      	ldr	r1, [pc, #76]	; (801bc98 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv+0x60>)
 801bc4c:	4618      	mov	r0, r3
 801bc4e:	f7f3 fd73 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 801bc52:	68fb      	ldr	r3, [r7, #12]
 801bc54:	3304      	adds	r3, #4
 801bc56:	68b9      	ldr	r1, [r7, #8]
 801bc58:	4618      	mov	r0, r3
 801bc5a:	f7f3 fd5b 	bl	800f714 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 801bc5e:	6879      	ldr	r1, [r7, #4]
 801bc60:	68f8      	ldr	r0, [r7, #12]
 801bc62:	f7ff fce3 	bl	801b62c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 801bc66:	68fb      	ldr	r3, [r7, #12]
 801bc68:	1d1c      	adds	r4, r3, #4
 801bc6a:	f107 0310 	add.w	r3, r7, #16
 801bc6e:	6839      	ldr	r1, [r7, #0]
 801bc70:	4618      	mov	r0, r3
 801bc72:	f7f3 ffbd 	bl	800fbf0 <_Z10StringFromPKv>
 801bc76:	f107 0310 	add.w	r3, r7, #16
 801bc7a:	4619      	mov	r1, r3
 801bc7c:	4620      	mov	r0, r4
 801bc7e:	f7f3 fd49 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801bc82:	f107 0310 	add.w	r3, r7, #16
 801bc86:	4618      	mov	r0, r3
 801bc88:	f7f3 fcc7 	bl	800f61a <_ZN12SimpleStringD1Ev>
    return *this;
 801bc8c:	68fb      	ldr	r3, [r7, #12]
}
 801bc8e:	4618      	mov	r0, r3
 801bc90:	371c      	adds	r7, #28
 801bc92:	46bd      	mov	sp, r7
 801bc94:	bd90      	pop	{r4, r7, pc}
 801bc96:	bf00      	nop
 801bc98:	08028ba8 	.word	0x08028ba8

0801bc9c <_ZN19MockActualCallTrace14hasReturnValueEv>:

bool MockActualCallTrace::hasReturnValue()
{
 801bc9c:	b480      	push	{r7}
 801bc9e:	b083      	sub	sp, #12
 801bca0:	af00      	add	r7, sp, #0
 801bca2:	6078      	str	r0, [r7, #4]
    return false;
 801bca4:	2300      	movs	r3, #0
}
 801bca6:	4618      	mov	r0, r3
 801bca8:	370c      	adds	r7, #12
 801bcaa:	46bd      	mov	sp, r7
 801bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcb0:	4770      	bx	lr
	...

0801bcb4 <_ZN19MockActualCallTrace11returnValueEv>:

MockNamedValue MockActualCallTrace::returnValue()
{
 801bcb4:	b580      	push	{r7, lr}
 801bcb6:	b084      	sub	sp, #16
 801bcb8:	af00      	add	r7, sp, #0
 801bcba:	6078      	str	r0, [r7, #4]
 801bcbc:	6039      	str	r1, [r7, #0]
    return MockNamedValue("");
 801bcbe:	f107 0308 	add.w	r3, r7, #8
 801bcc2:	4909      	ldr	r1, [pc, #36]	; (801bce8 <_ZN19MockActualCallTrace11returnValueEv+0x34>)
 801bcc4:	4618      	mov	r0, r3
 801bcc6:	f7f3 f8f0 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801bcca:	f107 0308 	add.w	r3, r7, #8
 801bcce:	4619      	mov	r1, r3
 801bcd0:	6878      	ldr	r0, [r7, #4]
 801bcd2:	f003 fe0f 	bl	801f8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
 801bcd6:	f107 0308 	add.w	r3, r7, #8
 801bcda:	4618      	mov	r0, r3
 801bcdc:	f7f3 fc9d 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 801bce0:	6878      	ldr	r0, [r7, #4]
 801bce2:	3710      	adds	r7, #16
 801bce4:	46bd      	mov	sp, r7
 801bce6:	bd80      	pop	{r7, pc}
 801bce8:	08028a7c 	.word	0x08028a7c

0801bcec <_ZN19MockActualCallTrace18returnLongIntValueEv>:

long int MockActualCallTrace::returnLongIntValue()
{
 801bcec:	b480      	push	{r7}
 801bcee:	b083      	sub	sp, #12
 801bcf0:	af00      	add	r7, sp, #0
 801bcf2:	6078      	str	r0, [r7, #4]
    return 0;
 801bcf4:	2300      	movs	r3, #0
}
 801bcf6:	4618      	mov	r0, r3
 801bcf8:	370c      	adds	r7, #12
 801bcfa:	46bd      	mov	sp, r7
 801bcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd00:	4770      	bx	lr

0801bd02 <_ZN19MockActualCallTrace26returnUnsignedLongIntValueEv>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValue()
{
 801bd02:	b480      	push	{r7}
 801bd04:	b083      	sub	sp, #12
 801bd06:	af00      	add	r7, sp, #0
 801bd08:	6078      	str	r0, [r7, #4]
    return 0;
 801bd0a:	2300      	movs	r3, #0
}
 801bd0c:	4618      	mov	r0, r3
 801bd0e:	370c      	adds	r7, #12
 801bd10:	46bd      	mov	sp, r7
 801bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd16:	4770      	bx	lr

0801bd18 <_ZN19MockActualCallTrace35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValueOrDefault(unsigned long)
{
 801bd18:	b480      	push	{r7}
 801bd1a:	b083      	sub	sp, #12
 801bd1c:	af00      	add	r7, sp, #0
 801bd1e:	6078      	str	r0, [r7, #4]
 801bd20:	6039      	str	r1, [r7, #0]
    return 0;
 801bd22:	2300      	movs	r3, #0
}
 801bd24:	4618      	mov	r0, r3
 801bd26:	370c      	adds	r7, #12
 801bd28:	46bd      	mov	sp, r7
 801bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd2e:	4770      	bx	lr

0801bd30 <_ZN19MockActualCallTrace27returnLongIntValueOrDefaultEl>:

long int MockActualCallTrace::returnLongIntValueOrDefault(long int)
{
 801bd30:	b480      	push	{r7}
 801bd32:	b083      	sub	sp, #12
 801bd34:	af00      	add	r7, sp, #0
 801bd36:	6078      	str	r0, [r7, #4]
 801bd38:	6039      	str	r1, [r7, #0]
    return 0;
 801bd3a:	2300      	movs	r3, #0
}
 801bd3c:	4618      	mov	r0, r3
 801bd3e:	370c      	adds	r7, #12
 801bd40:	46bd      	mov	sp, r7
 801bd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd46:	4770      	bx	lr

0801bd48 <_ZN19MockActualCallTrace22returnLongLongIntValueEv>:
}

#else

cpputest_longlong MockActualCallTrace::returnLongLongIntValue()
{
 801bd48:	b5b0      	push	{r4, r5, r7, lr}
 801bd4a:	b084      	sub	sp, #16
 801bd4c:	af02      	add	r7, sp, #8
 801bd4e:	6078      	str	r0, [r7, #4]
 801bd50:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801bd52:	f7fa fc8d 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 801bd56:	4604      	mov	r4, r0
 801bd58:	6823      	ldr	r3, [r4, #0]
 801bd5a:	3368      	adds	r3, #104	; 0x68
 801bd5c:	681d      	ldr	r5, [r3, #0]
 801bd5e:	f7fa fc97 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801bd62:	4603      	mov	r3, r0
 801bd64:	9300      	str	r3, [sp, #0]
 801bd66:	f240 3375 	movw	r3, #885	; 0x375
 801bd6a:	4a06      	ldr	r2, [pc, #24]	; (801bd84 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x3c>)
 801bd6c:	4906      	ldr	r1, [pc, #24]	; (801bd88 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x40>)
 801bd6e:	4620      	mov	r0, r4
 801bd70:	47a8      	blx	r5
    return cpputest_longlong(0);
 801bd72:	2100      	movs	r1, #0
 801bd74:	6878      	ldr	r0, [r7, #4]
 801bd76:	f7f1 f8cf 	bl	800cf18 <_ZN17cpputest_longlongC1Ei>
}
 801bd7a:	6878      	ldr	r0, [r7, #4]
 801bd7c:	3708      	adds	r7, #8
 801bd7e:	46bd      	mov	sp, r7
 801bd80:	bdb0      	pop	{r4, r5, r7, pc}
 801bd82:	bf00      	nop
 801bd84:	08028a94 	.word	0x08028a94
 801bd88:	08028adc 	.word	0x08028adc

0801bd8c <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValue()
{
 801bd8c:	b5b0      	push	{r4, r5, r7, lr}
 801bd8e:	b084      	sub	sp, #16
 801bd90:	af02      	add	r7, sp, #8
 801bd92:	6078      	str	r0, [r7, #4]
 801bd94:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801bd96:	f7fa fc6b 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 801bd9a:	4604      	mov	r4, r0
 801bd9c:	6823      	ldr	r3, [r4, #0]
 801bd9e:	3368      	adds	r3, #104	; 0x68
 801bda0:	681d      	ldr	r5, [r3, #0]
 801bda2:	f7fa fc75 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801bda6:	4603      	mov	r3, r0
 801bda8:	9300      	str	r3, [sp, #0]
 801bdaa:	f240 337b 	movw	r3, #891	; 0x37b
 801bdae:	4a06      	ldr	r2, [pc, #24]	; (801bdc8 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x3c>)
 801bdb0:	4906      	ldr	r1, [pc, #24]	; (801bdcc <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x40>)
 801bdb2:	4620      	mov	r0, r4
 801bdb4:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801bdb6:	2100      	movs	r1, #0
 801bdb8:	6878      	ldr	r0, [r7, #4]
 801bdba:	f7f1 f8b9 	bl	800cf30 <_ZN18cpputest_ulonglongC1Ei>
}
 801bdbe:	6878      	ldr	r0, [r7, #4]
 801bdc0:	3708      	adds	r7, #8
 801bdc2:	46bd      	mov	sp, r7
 801bdc4:	bdb0      	pop	{r4, r5, r7, pc}
 801bdc6:	bf00      	nop
 801bdc8:	08028a94 	.word	0x08028a94
 801bdcc:	08028ab0 	.word	0x08028ab0

0801bdd0 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong)
{
 801bdd0:	b5b0      	push	{r4, r5, r7, lr}
 801bdd2:	b086      	sub	sp, #24
 801bdd4:	af02      	add	r7, sp, #8
 801bdd6:	60f8      	str	r0, [r7, #12]
 801bdd8:	60b9      	str	r1, [r7, #8]
 801bdda:	4639      	mov	r1, r7
 801bddc:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801bde0:	f7fa fc46 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 801bde4:	4604      	mov	r4, r0
 801bde6:	6823      	ldr	r3, [r4, #0]
 801bde8:	3368      	adds	r3, #104	; 0x68
 801bdea:	681d      	ldr	r5, [r3, #0]
 801bdec:	f7fa fc50 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801bdf0:	4603      	mov	r3, r0
 801bdf2:	9300      	str	r3, [sp, #0]
 801bdf4:	f240 3381 	movw	r3, #897	; 0x381
 801bdf8:	4a05      	ldr	r2, [pc, #20]	; (801be10 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x40>)
 801bdfa:	4906      	ldr	r1, [pc, #24]	; (801be14 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 801bdfc:	4620      	mov	r0, r4
 801bdfe:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801be00:	2100      	movs	r1, #0
 801be02:	68f8      	ldr	r0, [r7, #12]
 801be04:	f7f1 f894 	bl	800cf30 <_ZN18cpputest_ulonglongC1Ei>
}
 801be08:	68f8      	ldr	r0, [r7, #12]
 801be0a:	3710      	adds	r7, #16
 801be0c:	46bd      	mov	sp, r7
 801be0e:	bdb0      	pop	{r4, r5, r7, pc}
 801be10:	08028a94 	.word	0x08028a94
 801be14:	08028ab0 	.word	0x08028ab0

0801be18 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockActualCallTrace::returnLongLongIntValueOrDefault(cpputest_longlong)
{
 801be18:	b5b0      	push	{r4, r5, r7, lr}
 801be1a:	b086      	sub	sp, #24
 801be1c:	af02      	add	r7, sp, #8
 801be1e:	60f8      	str	r0, [r7, #12]
 801be20:	60b9      	str	r1, [r7, #8]
 801be22:	4639      	mov	r1, r7
 801be24:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801be28:	f7fa fc22 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 801be2c:	4604      	mov	r4, r0
 801be2e:	6823      	ldr	r3, [r4, #0]
 801be30:	3368      	adds	r3, #104	; 0x68
 801be32:	681d      	ldr	r5, [r3, #0]
 801be34:	f7fa fc2c 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801be38:	4603      	mov	r3, r0
 801be3a:	9300      	str	r3, [sp, #0]
 801be3c:	f240 3387 	movw	r3, #903	; 0x387
 801be40:	4a05      	ldr	r2, [pc, #20]	; (801be58 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x40>)
 801be42:	4906      	ldr	r1, [pc, #24]	; (801be5c <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 801be44:	4620      	mov	r0, r4
 801be46:	47a8      	blx	r5
    return cpputest_longlong(0);
 801be48:	2100      	movs	r1, #0
 801be4a:	68f8      	ldr	r0, [r7, #12]
 801be4c:	f7f1 f864 	bl	800cf18 <_ZN17cpputest_longlongC1Ei>
}
 801be50:	68f8      	ldr	r0, [r7, #12]
 801be52:	3710      	adds	r7, #16
 801be54:	46bd      	mov	sp, r7
 801be56:	bdb0      	pop	{r4, r5, r7, pc}
 801be58:	08028a94 	.word	0x08028a94
 801be5c:	08028adc 	.word	0x08028adc

0801be60 <_ZN19MockActualCallTrace15returnBoolValueEv>:

#endif

bool MockActualCallTrace::returnBoolValue()
{
 801be60:	b480      	push	{r7}
 801be62:	b083      	sub	sp, #12
 801be64:	af00      	add	r7, sp, #0
 801be66:	6078      	str	r0, [r7, #4]
    return false;
 801be68:	2300      	movs	r3, #0
}
 801be6a:	4618      	mov	r0, r3
 801be6c:	370c      	adds	r7, #12
 801be6e:	46bd      	mov	sp, r7
 801be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be74:	4770      	bx	lr

0801be76 <_ZN19MockActualCallTrace24returnBoolValueOrDefaultEb>:

bool MockActualCallTrace::returnBoolValueOrDefault(bool)
{
 801be76:	b480      	push	{r7}
 801be78:	b083      	sub	sp, #12
 801be7a:	af00      	add	r7, sp, #0
 801be7c:	6078      	str	r0, [r7, #4]
 801be7e:	460b      	mov	r3, r1
 801be80:	70fb      	strb	r3, [r7, #3]
    return false;
 801be82:	2300      	movs	r3, #0
}
 801be84:	4618      	mov	r0, r3
 801be86:	370c      	adds	r7, #12
 801be88:	46bd      	mov	sp, r7
 801be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be8e:	4770      	bx	lr

0801be90 <_ZN19MockActualCallTrace14returnIntValueEv>:

int MockActualCallTrace::returnIntValue()
{
 801be90:	b480      	push	{r7}
 801be92:	b083      	sub	sp, #12
 801be94:	af00      	add	r7, sp, #0
 801be96:	6078      	str	r0, [r7, #4]
    return 0;
 801be98:	2300      	movs	r3, #0
}
 801be9a:	4618      	mov	r0, r3
 801be9c:	370c      	adds	r7, #12
 801be9e:	46bd      	mov	sp, r7
 801bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bea4:	4770      	bx	lr

0801bea6 <_ZN19MockActualCallTrace17returnDoubleValueEv>:

double MockActualCallTrace::returnDoubleValue()
{
 801bea6:	b480      	push	{r7}
 801bea8:	b083      	sub	sp, #12
 801beaa:	af00      	add	r7, sp, #0
 801beac:	6078      	str	r0, [r7, #4]
    return 0.0;
 801beae:	f04f 0200 	mov.w	r2, #0
 801beb2:	f04f 0300 	mov.w	r3, #0
 801beb6:	ec43 2b17 	vmov	d7, r2, r3
}
 801beba:	eeb0 0a47 	vmov.f32	s0, s14
 801bebe:	eef0 0a67 	vmov.f32	s1, s15
 801bec2:	370c      	adds	r7, #12
 801bec4:	46bd      	mov	sp, r7
 801bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801beca:	4770      	bx	lr

0801becc <_ZN19MockActualCallTrace26returnDoubleValueOrDefaultEd>:

double MockActualCallTrace::returnDoubleValueOrDefault(double)
{
 801becc:	b580      	push	{r7, lr}
 801bece:	b084      	sub	sp, #16
 801bed0:	af00      	add	r7, sp, #0
 801bed2:	60f8      	str	r0, [r7, #12]
 801bed4:	ed87 0b00 	vstr	d0, [r7]
    return returnDoubleValue();
 801bed8:	68fb      	ldr	r3, [r7, #12]
 801beda:	681b      	ldr	r3, [r3, #0]
 801bedc:	3398      	adds	r3, #152	; 0x98
 801bede:	681b      	ldr	r3, [r3, #0]
 801bee0:	68f8      	ldr	r0, [r7, #12]
 801bee2:	4798      	blx	r3
 801bee4:	eeb0 7a40 	vmov.f32	s14, s0
 801bee8:	eef0 7a60 	vmov.f32	s15, s1
}
 801beec:	eeb0 0a47 	vmov.f32	s0, s14
 801bef0:	eef0 0a67 	vmov.f32	s1, s15
 801bef4:	3710      	adds	r7, #16
 801bef6:	46bd      	mov	sp, r7
 801bef8:	bd80      	pop	{r7, pc}

0801befa <_ZN19MockActualCallTrace22returnUnsignedIntValueEv>:

unsigned int MockActualCallTrace::returnUnsignedIntValue()
{
 801befa:	b480      	push	{r7}
 801befc:	b083      	sub	sp, #12
 801befe:	af00      	add	r7, sp, #0
 801bf00:	6078      	str	r0, [r7, #4]
    return 0;
 801bf02:	2300      	movs	r3, #0
}
 801bf04:	4618      	mov	r0, r3
 801bf06:	370c      	adds	r7, #12
 801bf08:	46bd      	mov	sp, r7
 801bf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf0e:	4770      	bx	lr

0801bf10 <_ZN19MockActualCallTrace18returnPointerValueEv>:

void * MockActualCallTrace::returnPointerValue()
{
 801bf10:	b480      	push	{r7}
 801bf12:	b083      	sub	sp, #12
 801bf14:	af00      	add	r7, sp, #0
 801bf16:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 801bf18:	2300      	movs	r3, #0
}
 801bf1a:	4618      	mov	r0, r3
 801bf1c:	370c      	adds	r7, #12
 801bf1e:	46bd      	mov	sp, r7
 801bf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf24:	4770      	bx	lr

0801bf26 <_ZN19MockActualCallTrace23returnConstPointerValueEv>:

const void * MockActualCallTrace::returnConstPointerValue()
{
 801bf26:	b480      	push	{r7}
 801bf28:	b083      	sub	sp, #12
 801bf2a:	af00      	add	r7, sp, #0
 801bf2c:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 801bf2e:	2300      	movs	r3, #0
}
 801bf30:	4618      	mov	r0, r3
 801bf32:	370c      	adds	r7, #12
 801bf34:	46bd      	mov	sp, r7
 801bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf3a:	4770      	bx	lr

0801bf3c <_ZN19MockActualCallTrace26returnFunctionPointerValueEv>:

void (*MockActualCallTrace::returnFunctionPointerValue())()
{
 801bf3c:	b480      	push	{r7}
 801bf3e:	b083      	sub	sp, #12
 801bf40:	af00      	add	r7, sp, #0
 801bf42:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 801bf44:	2300      	movs	r3, #0
}
 801bf46:	4618      	mov	r0, r3
 801bf48:	370c      	adds	r7, #12
 801bf4a:	46bd      	mov	sp, r7
 801bf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf50:	4770      	bx	lr

0801bf52 <_ZN19MockActualCallTrace32returnConstPointerValueOrDefaultEPKv>:

const void * MockActualCallTrace::returnConstPointerValueOrDefault(const void *)
{
 801bf52:	b580      	push	{r7, lr}
 801bf54:	b082      	sub	sp, #8
 801bf56:	af00      	add	r7, sp, #0
 801bf58:	6078      	str	r0, [r7, #4]
 801bf5a:	6039      	str	r1, [r7, #0]
    return returnConstPointerValue();
 801bf5c:	687b      	ldr	r3, [r7, #4]
 801bf5e:	681b      	ldr	r3, [r3, #0]
 801bf60:	33a8      	adds	r3, #168	; 0xa8
 801bf62:	681b      	ldr	r3, [r3, #0]
 801bf64:	6878      	ldr	r0, [r7, #4]
 801bf66:	4798      	blx	r3
 801bf68:	4603      	mov	r3, r0
}
 801bf6a:	4618      	mov	r0, r3
 801bf6c:	3708      	adds	r7, #8
 801bf6e:	46bd      	mov	sp, r7
 801bf70:	bd80      	pop	{r7, pc}

0801bf72 <_ZN19MockActualCallTrace27returnPointerValueOrDefaultEPv>:

void * MockActualCallTrace::returnPointerValueOrDefault(void *)
{
 801bf72:	b580      	push	{r7, lr}
 801bf74:	b082      	sub	sp, #8
 801bf76:	af00      	add	r7, sp, #0
 801bf78:	6078      	str	r0, [r7, #4]
 801bf7a:	6039      	str	r1, [r7, #0]
    return returnPointerValue();
 801bf7c:	687b      	ldr	r3, [r7, #4]
 801bf7e:	681b      	ldr	r3, [r3, #0]
 801bf80:	33a0      	adds	r3, #160	; 0xa0
 801bf82:	681b      	ldr	r3, [r3, #0]
 801bf84:	6878      	ldr	r0, [r7, #4]
 801bf86:	4798      	blx	r3
 801bf88:	4603      	mov	r3, r0
}
 801bf8a:	4618      	mov	r0, r3
 801bf8c:	3708      	adds	r7, #8
 801bf8e:	46bd      	mov	sp, r7
 801bf90:	bd80      	pop	{r7, pc}

0801bf92 <_ZN19MockActualCallTrace35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockActualCallTrace::returnFunctionPointerValueOrDefault(void (*)()))()
{
 801bf92:	b580      	push	{r7, lr}
 801bf94:	b082      	sub	sp, #8
 801bf96:	af00      	add	r7, sp, #0
 801bf98:	6078      	str	r0, [r7, #4]
 801bf9a:	6039      	str	r1, [r7, #0]
    return returnFunctionPointerValue();
 801bf9c:	687b      	ldr	r3, [r7, #4]
 801bf9e:	681b      	ldr	r3, [r3, #0]
 801bfa0:	33b0      	adds	r3, #176	; 0xb0
 801bfa2:	681b      	ldr	r3, [r3, #0]
 801bfa4:	6878      	ldr	r0, [r7, #4]
 801bfa6:	4798      	blx	r3
 801bfa8:	4603      	mov	r3, r0
}
 801bfaa:	4618      	mov	r0, r3
 801bfac:	3708      	adds	r7, #8
 801bfae:	46bd      	mov	sp, r7
 801bfb0:	bd80      	pop	{r7, pc}
	...

0801bfb4 <_ZN19MockActualCallTrace17returnStringValueEv>:

const char * MockActualCallTrace::returnStringValue()
{
 801bfb4:	b480      	push	{r7}
 801bfb6:	b083      	sub	sp, #12
 801bfb8:	af00      	add	r7, sp, #0
 801bfba:	6078      	str	r0, [r7, #4]
    return "";
 801bfbc:	4b03      	ldr	r3, [pc, #12]	; (801bfcc <_ZN19MockActualCallTrace17returnStringValueEv+0x18>)
}
 801bfbe:	4618      	mov	r0, r3
 801bfc0:	370c      	adds	r7, #12
 801bfc2:	46bd      	mov	sp, r7
 801bfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfc8:	4770      	bx	lr
 801bfca:	bf00      	nop
 801bfcc:	08028a7c 	.word	0x08028a7c

0801bfd0 <_ZN19MockActualCallTrace26returnStringValueOrDefaultEPKc>:

const char * MockActualCallTrace::returnStringValueOrDefault(const char *)
{
 801bfd0:	b580      	push	{r7, lr}
 801bfd2:	b082      	sub	sp, #8
 801bfd4:	af00      	add	r7, sp, #0
 801bfd6:	6078      	str	r0, [r7, #4]
 801bfd8:	6039      	str	r1, [r7, #0]
    return returnStringValue();
 801bfda:	687b      	ldr	r3, [r7, #4]
 801bfdc:	681b      	ldr	r3, [r3, #0]
 801bfde:	3394      	adds	r3, #148	; 0x94
 801bfe0:	681b      	ldr	r3, [r3, #0]
 801bfe2:	6878      	ldr	r0, [r7, #4]
 801bfe4:	4798      	blx	r3
 801bfe6:	4603      	mov	r3, r0
}
 801bfe8:	4618      	mov	r0, r3
 801bfea:	3708      	adds	r7, #8
 801bfec:	46bd      	mov	sp, r7
 801bfee:	bd80      	pop	{r7, pc}

0801bff0 <_ZN19MockActualCallTrace23returnIntValueOrDefaultEi>:

int MockActualCallTrace::returnIntValueOrDefault(int)
{
 801bff0:	b480      	push	{r7}
 801bff2:	b083      	sub	sp, #12
 801bff4:	af00      	add	r7, sp, #0
 801bff6:	6078      	str	r0, [r7, #4]
 801bff8:	6039      	str	r1, [r7, #0]
    return 0;
 801bffa:	2300      	movs	r3, #0
}
 801bffc:	4618      	mov	r0, r3
 801bffe:	370c      	adds	r7, #12
 801c000:	46bd      	mov	sp, r7
 801c002:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c006:	4770      	bx	lr

0801c008 <_ZN19MockActualCallTrace31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockActualCallTrace::returnUnsignedIntValueOrDefault(unsigned int)
{
 801c008:	b580      	push	{r7, lr}
 801c00a:	b082      	sub	sp, #8
 801c00c:	af00      	add	r7, sp, #0
 801c00e:	6078      	str	r0, [r7, #4]
 801c010:	6039      	str	r1, [r7, #0]
    return returnUnsignedIntValue();
 801c012:	687b      	ldr	r3, [r7, #4]
 801c014:	681b      	ldr	r3, [r3, #0]
 801c016:	3388      	adds	r3, #136	; 0x88
 801c018:	681b      	ldr	r3, [r3, #0]
 801c01a:	6878      	ldr	r0, [r7, #4]
 801c01c:	4798      	blx	r3
 801c01e:	4603      	mov	r3, r0
}
 801c020:	4618      	mov	r0, r3
 801c022:	3708      	adds	r7, #8
 801c024:	46bd      	mov	sp, r7
 801c026:	bd80      	pop	{r7, pc}

0801c028 <_ZN19MockActualCallTrace8onObjectEPKv>:

MockActualCall& MockActualCallTrace::onObject(const void* objectPtr)
{
 801c028:	b590      	push	{r4, r7, lr}
 801c02a:	b085      	sub	sp, #20
 801c02c:	af00      	add	r7, sp, #0
 801c02e:	6078      	str	r0, [r7, #4]
 801c030:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " onObject:";
 801c032:	687b      	ldr	r3, [r7, #4]
 801c034:	3304      	adds	r3, #4
 801c036:	490e      	ldr	r1, [pc, #56]	; (801c070 <_ZN19MockActualCallTrace8onObjectEPKv+0x48>)
 801c038:	4618      	mov	r0, r3
 801c03a:	f7f3 fb7d 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(objectPtr);
 801c03e:	687b      	ldr	r3, [r7, #4]
 801c040:	1d1c      	adds	r4, r3, #4
 801c042:	f107 0308 	add.w	r3, r7, #8
 801c046:	6839      	ldr	r1, [r7, #0]
 801c048:	4618      	mov	r0, r3
 801c04a:	f7f3 fdd1 	bl	800fbf0 <_Z10StringFromPKv>
 801c04e:	f107 0308 	add.w	r3, r7, #8
 801c052:	4619      	mov	r1, r3
 801c054:	4620      	mov	r0, r4
 801c056:	f7f3 fb5d 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801c05a:	f107 0308 	add.w	r3, r7, #8
 801c05e:	4618      	mov	r0, r3
 801c060:	f7f3 fadb 	bl	800f61a <_ZN12SimpleStringD1Ev>
    return *this;
 801c064:	687b      	ldr	r3, [r7, #4]
}
 801c066:	4618      	mov	r0, r3
 801c068:	3714      	adds	r7, #20
 801c06a:	46bd      	mov	sp, r7
 801c06c:	bd90      	pop	{r4, r7, pc}
 801c06e:	bf00      	nop
 801c070:	08028bb0 	.word	0x08028bb0

0801c074 <_ZN19MockActualCallTrace8instanceEv>:
}

MockActualCallTrace* MockActualCallTrace::instance_ = NULLPTR;

MockActualCallTrace& MockActualCallTrace::instance()
{
 801c074:	b598      	push	{r3, r4, r7, lr}
 801c076:	af00      	add	r7, sp, #0
    if (instance_ == NULLPTR)
 801c078:	4b09      	ldr	r3, [pc, #36]	; (801c0a0 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 801c07a:	681b      	ldr	r3, [r3, #0]
 801c07c:	2b00      	cmp	r3, #0
 801c07e:	d10b      	bne.n	801c098 <_ZN19MockActualCallTrace8instanceEv+0x24>
        instance_ = new MockActualCallTrace;
 801c080:	f240 32f3 	movw	r2, #1011	; 0x3f3
 801c084:	4907      	ldr	r1, [pc, #28]	; (801c0a4 <_ZN19MockActualCallTrace8instanceEv+0x30>)
 801c086:	200c      	movs	r0, #12
 801c088:	f7f0 fb4c 	bl	800c724 <_ZnwjPKci>
 801c08c:	4604      	mov	r4, r0
 801c08e:	4620      	mov	r0, r4
 801c090:	f7ff fa4c 	bl	801b52c <_ZN19MockActualCallTraceC1Ev>
 801c094:	4b02      	ldr	r3, [pc, #8]	; (801c0a0 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 801c096:	601c      	str	r4, [r3, #0]
    return *instance_;
 801c098:	4b01      	ldr	r3, [pc, #4]	; (801c0a0 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 801c09a:	681b      	ldr	r3, [r3, #0]
}
 801c09c:	4618      	mov	r0, r3
 801c09e:	bd98      	pop	{r3, r4, r7, pc}
 801c0a0:	20001024 	.word	0x20001024
 801c0a4:	08028a94 	.word	0x08028a94

0801c0a8 <_ZN19MockActualCallTrace13clearInstanceEv>:

void MockActualCallTrace::clearInstance()
{
 801c0a8:	b580      	push	{r7, lr}
 801c0aa:	af00      	add	r7, sp, #0
    delete instance_;
 801c0ac:	4b06      	ldr	r3, [pc, #24]	; (801c0c8 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 801c0ae:	681b      	ldr	r3, [r3, #0]
 801c0b0:	2b00      	cmp	r3, #0
 801c0b2:	d004      	beq.n	801c0be <_ZN19MockActualCallTrace13clearInstanceEv+0x16>
 801c0b4:	681a      	ldr	r2, [r3, #0]
 801c0b6:	3204      	adds	r2, #4
 801c0b8:	6812      	ldr	r2, [r2, #0]
 801c0ba:	4618      	mov	r0, r3
 801c0bc:	4790      	blx	r2
    instance_ = NULLPTR;
 801c0be:	4b02      	ldr	r3, [pc, #8]	; (801c0c8 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 801c0c0:	2200      	movs	r2, #0
 801c0c2:	601a      	str	r2, [r3, #0]
}
 801c0c4:	bf00      	nop
 801c0c6:	bd80      	pop	{r7, pc}
 801c0c8:	20001024 	.word	0x20001024

0801c0cc <_ZN21MockIgnoredActualCallC1Ev>:
class MockIgnoredActualCall: public MockActualCall
 801c0cc:	b580      	push	{r7, lr}
 801c0ce:	b082      	sub	sp, #8
 801c0d0:	af00      	add	r7, sp, #0
 801c0d2:	6078      	str	r0, [r7, #4]
 801c0d4:	687b      	ldr	r3, [r7, #4]
 801c0d6:	4618      	mov	r0, r3
 801c0d8:	f7fd fe9a 	bl	8019e10 <_ZN14MockActualCallC1Ev>
 801c0dc:	4a03      	ldr	r2, [pc, #12]	; (801c0ec <_ZN21MockIgnoredActualCallC1Ev+0x20>)
 801c0de:	687b      	ldr	r3, [r7, #4]
 801c0e0:	601a      	str	r2, [r3, #0]
 801c0e2:	687b      	ldr	r3, [r7, #4]
 801c0e4:	4618      	mov	r0, r3
 801c0e6:	3708      	adds	r7, #8
 801c0e8:	46bd      	mov	sp, r7
 801c0ea:	bd80      	pop	{r7, pc}
 801c0ec:	0802bc18 	.word	0x0802bc18

0801c0f0 <__tcf_0>:

MockIgnoredActualCall& MockIgnoredActualCall::instance()
{
    static MockIgnoredActualCall call;
 801c0f0:	b580      	push	{r7, lr}
 801c0f2:	af00      	add	r7, sp, #0
 801c0f4:	4801      	ldr	r0, [pc, #4]	; (801c0fc <__tcf_0+0xc>)
 801c0f6:	f000 f831 	bl	801c15c <_ZN21MockIgnoredActualCallD1Ev>
 801c0fa:	bd80      	pop	{r7, pc}
 801c0fc:	20001028 	.word	0x20001028

0801c100 <_ZN21MockIgnoredActualCall8instanceEv>:
{
 801c100:	b580      	push	{r7, lr}
 801c102:	af00      	add	r7, sp, #0
    static MockIgnoredActualCall call;
 801c104:	4b12      	ldr	r3, [pc, #72]	; (801c150 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 801c106:	781b      	ldrb	r3, [r3, #0]
 801c108:	f3bf 8f5b 	dmb	ish
 801c10c:	b2db      	uxtb	r3, r3
 801c10e:	f003 0301 	and.w	r3, r3, #1
 801c112:	2b00      	cmp	r3, #0
 801c114:	bf0c      	ite	eq
 801c116:	2301      	moveq	r3, #1
 801c118:	2300      	movne	r3, #0
 801c11a:	b2db      	uxtb	r3, r3
 801c11c:	2b00      	cmp	r3, #0
 801c11e:	d013      	beq.n	801c148 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 801c120:	480b      	ldr	r0, [pc, #44]	; (801c150 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 801c122:	f005 fd81 	bl	8021c28 <__cxa_guard_acquire>
 801c126:	4603      	mov	r3, r0
 801c128:	2b00      	cmp	r3, #0
 801c12a:	bf14      	ite	ne
 801c12c:	2301      	movne	r3, #1
 801c12e:	2300      	moveq	r3, #0
 801c130:	b2db      	uxtb	r3, r3
 801c132:	2b00      	cmp	r3, #0
 801c134:	d008      	beq.n	801c148 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 801c136:	4807      	ldr	r0, [pc, #28]	; (801c154 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
 801c138:	f7ff ffc8 	bl	801c0cc <_ZN21MockIgnoredActualCallC1Ev>
 801c13c:	4804      	ldr	r0, [pc, #16]	; (801c150 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 801c13e:	f005 fd7f 	bl	8021c40 <__cxa_guard_release>
 801c142:	4805      	ldr	r0, [pc, #20]	; (801c158 <_ZN21MockIgnoredActualCall8instanceEv+0x58>)
 801c144:	f005 fda3 	bl	8021c8e <atexit>
    return call;
 801c148:	4b02      	ldr	r3, [pc, #8]	; (801c154 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
}
 801c14a:	4618      	mov	r0, r3
 801c14c:	bd80      	pop	{r7, pc}
 801c14e:	bf00      	nop
 801c150:	2000102c 	.word	0x2000102c
 801c154:	20001028 	.word	0x20001028
 801c158:	0801c0f1 	.word	0x0801c0f1

0801c15c <_ZN21MockIgnoredActualCallD1Ev>:
 801c15c:	b580      	push	{r7, lr}
 801c15e:	b082      	sub	sp, #8
 801c160:	af00      	add	r7, sp, #0
 801c162:	6078      	str	r0, [r7, #4]
 801c164:	4a05      	ldr	r2, [pc, #20]	; (801c17c <_ZN21MockIgnoredActualCallD1Ev+0x20>)
 801c166:	687b      	ldr	r3, [r7, #4]
 801c168:	601a      	str	r2, [r3, #0]
 801c16a:	687b      	ldr	r3, [r7, #4]
 801c16c:	4618      	mov	r0, r3
 801c16e:	f7fd fe5f 	bl	8019e30 <_ZN14MockActualCallD1Ev>
 801c172:	687b      	ldr	r3, [r7, #4]
 801c174:	4618      	mov	r0, r3
 801c176:	3708      	adds	r7, #8
 801c178:	46bd      	mov	sp, r7
 801c17a:	bd80      	pop	{r7, pc}
 801c17c:	0802bc18 	.word	0x0802bc18

0801c180 <_ZN21MockIgnoredActualCallD0Ev>:
 801c180:	b580      	push	{r7, lr}
 801c182:	b082      	sub	sp, #8
 801c184:	af00      	add	r7, sp, #0
 801c186:	6078      	str	r0, [r7, #4]
 801c188:	6878      	ldr	r0, [r7, #4]
 801c18a:	f7ff ffe7 	bl	801c15c <_ZN21MockIgnoredActualCallD1Ev>
 801c18e:	2104      	movs	r1, #4
 801c190:	6878      	ldr	r0, [r7, #4]
 801c192:	f7f0 fadb 	bl	800c74c <_ZdlPvj>
 801c196:	687b      	ldr	r3, [r7, #4]
 801c198:	4618      	mov	r0, r3
 801c19a:	3708      	adds	r7, #8
 801c19c:	46bd      	mov	sp, r7
 801c19e:	bd80      	pop	{r7, pc}

0801c1a0 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>:
{
public:
    MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName);
};

class MockNoWayToCopyCustomTypeFailure : public MockFailure
 801c1a0:	b580      	push	{r7, lr}
 801c1a2:	b082      	sub	sp, #8
 801c1a4:	af00      	add	r7, sp, #0
 801c1a6:	6078      	str	r0, [r7, #4]
 801c1a8:	4a05      	ldr	r2, [pc, #20]	; (801c1c0 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev+0x20>)
 801c1aa:	687b      	ldr	r3, [r7, #4]
 801c1ac:	601a      	str	r2, [r3, #0]
 801c1ae:	687b      	ldr	r3, [r7, #4]
 801c1b0:	4618      	mov	r0, r3
 801c1b2:	f7f0 fefd 	bl	800cfb0 <_ZN11MockFailureD1Ev>
 801c1b6:	687b      	ldr	r3, [r7, #4]
 801c1b8:	4618      	mov	r0, r3
 801c1ba:	3708      	adds	r7, #8
 801c1bc:	46bd      	mov	sp, r7
 801c1be:	bd80      	pop	{r7, pc}
 801c1c0:	0802bb10 	.word	0x0802bb10

0801c1c4 <_ZN32MockNoWayToCopyCustomTypeFailureD0Ev>:
 801c1c4:	b580      	push	{r7, lr}
 801c1c6:	b082      	sub	sp, #8
 801c1c8:	af00      	add	r7, sp, #0
 801c1ca:	6078      	str	r0, [r7, #4]
 801c1cc:	6878      	ldr	r0, [r7, #4]
 801c1ce:	f7ff ffe7 	bl	801c1a0 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
 801c1d2:	2134      	movs	r1, #52	; 0x34
 801c1d4:	6878      	ldr	r0, [r7, #4]
 801c1d6:	f7f0 fab9 	bl	800c74c <_ZdlPvj>
 801c1da:	687b      	ldr	r3, [r7, #4]
 801c1dc:	4618      	mov	r0, r3
 801c1de:	3708      	adds	r7, #8
 801c1e0:	46bd      	mov	sp, r7
 801c1e2:	bd80      	pop	{r7, pc}

0801c1e4 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>:
class MockUnexpectedCallHappenedFailure : public MockFailure
 801c1e4:	b580      	push	{r7, lr}
 801c1e6:	b082      	sub	sp, #8
 801c1e8:	af00      	add	r7, sp, #0
 801c1ea:	6078      	str	r0, [r7, #4]
 801c1ec:	4a05      	ldr	r2, [pc, #20]	; (801c204 <_ZN33MockUnexpectedCallHappenedFailureD1Ev+0x20>)
 801c1ee:	687b      	ldr	r3, [r7, #4]
 801c1f0:	601a      	str	r2, [r3, #0]
 801c1f2:	687b      	ldr	r3, [r7, #4]
 801c1f4:	4618      	mov	r0, r3
 801c1f6:	f7f0 fedb 	bl	800cfb0 <_ZN11MockFailureD1Ev>
 801c1fa:	687b      	ldr	r3, [r7, #4]
 801c1fc:	4618      	mov	r0, r3
 801c1fe:	3708      	adds	r7, #8
 801c200:	46bd      	mov	sp, r7
 801c202:	bd80      	pop	{r7, pc}
 801c204:	0802bbec 	.word	0x0802bbec

0801c208 <_ZN33MockUnexpectedCallHappenedFailureD0Ev>:
 801c208:	b580      	push	{r7, lr}
 801c20a:	b082      	sub	sp, #8
 801c20c:	af00      	add	r7, sp, #0
 801c20e:	6078      	str	r0, [r7, #4]
 801c210:	6878      	ldr	r0, [r7, #4]
 801c212:	f7ff ffe7 	bl	801c1e4 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 801c216:	2134      	movs	r1, #52	; 0x34
 801c218:	6878      	ldr	r0, [r7, #4]
 801c21a:	f7f0 fa97 	bl	800c74c <_ZdlPvj>
 801c21e:	687b      	ldr	r3, [r7, #4]
 801c220:	4618      	mov	r0, r3
 801c222:	3708      	adds	r7, #8
 801c224:	46bd      	mov	sp, r7
 801c226:	bd80      	pop	{r7, pc}

0801c228 <_ZN35MockUnexpectedInputParameterFailureD1Ev>:
class MockUnexpectedInputParameterFailure : public MockFailure
 801c228:	b580      	push	{r7, lr}
 801c22a:	b082      	sub	sp, #8
 801c22c:	af00      	add	r7, sp, #0
 801c22e:	6078      	str	r0, [r7, #4]
 801c230:	4a05      	ldr	r2, [pc, #20]	; (801c248 <_ZN35MockUnexpectedInputParameterFailureD1Ev+0x20>)
 801c232:	687b      	ldr	r3, [r7, #4]
 801c234:	601a      	str	r2, [r3, #0]
 801c236:	687b      	ldr	r3, [r7, #4]
 801c238:	4618      	mov	r0, r3
 801c23a:	f7f0 feb9 	bl	800cfb0 <_ZN11MockFailureD1Ev>
 801c23e:	687b      	ldr	r3, [r7, #4]
 801c240:	4618      	mov	r0, r3
 801c242:	3708      	adds	r7, #8
 801c244:	46bd      	mov	sp, r7
 801c246:	bd80      	pop	{r7, pc}
 801c248:	0802bbc0 	.word	0x0802bbc0

0801c24c <_ZN35MockUnexpectedInputParameterFailureD0Ev>:
 801c24c:	b580      	push	{r7, lr}
 801c24e:	b082      	sub	sp, #8
 801c250:	af00      	add	r7, sp, #0
 801c252:	6078      	str	r0, [r7, #4]
 801c254:	6878      	ldr	r0, [r7, #4]
 801c256:	f7ff ffe7 	bl	801c228 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 801c25a:	2134      	movs	r1, #52	; 0x34
 801c25c:	6878      	ldr	r0, [r7, #4]
 801c25e:	f7f0 fa75 	bl	800c74c <_ZdlPvj>
 801c262:	687b      	ldr	r3, [r7, #4]
 801c264:	4618      	mov	r0, r3
 801c266:	3708      	adds	r7, #8
 801c268:	46bd      	mov	sp, r7
 801c26a:	bd80      	pop	{r7, pc}

0801c26c <_ZN36MockUnexpectedOutputParameterFailureD1Ev>:
class MockUnexpectedOutputParameterFailure : public MockFailure
 801c26c:	b580      	push	{r7, lr}
 801c26e:	b082      	sub	sp, #8
 801c270:	af00      	add	r7, sp, #0
 801c272:	6078      	str	r0, [r7, #4]
 801c274:	4a05      	ldr	r2, [pc, #20]	; (801c28c <_ZN36MockUnexpectedOutputParameterFailureD1Ev+0x20>)
 801c276:	687b      	ldr	r3, [r7, #4]
 801c278:	601a      	str	r2, [r3, #0]
 801c27a:	687b      	ldr	r3, [r7, #4]
 801c27c:	4618      	mov	r0, r3
 801c27e:	f7f0 fe97 	bl	800cfb0 <_ZN11MockFailureD1Ev>
 801c282:	687b      	ldr	r3, [r7, #4]
 801c284:	4618      	mov	r0, r3
 801c286:	3708      	adds	r7, #8
 801c288:	46bd      	mov	sp, r7
 801c28a:	bd80      	pop	{r7, pc}
 801c28c:	0802bb94 	.word	0x0802bb94

0801c290 <_ZN36MockUnexpectedOutputParameterFailureD0Ev>:
 801c290:	b580      	push	{r7, lr}
 801c292:	b082      	sub	sp, #8
 801c294:	af00      	add	r7, sp, #0
 801c296:	6078      	str	r0, [r7, #4]
 801c298:	6878      	ldr	r0, [r7, #4]
 801c29a:	f7ff ffe7 	bl	801c26c <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 801c29e:	2134      	movs	r1, #52	; 0x34
 801c2a0:	6878      	ldr	r0, [r7, #4]
 801c2a2:	f7f0 fa53 	bl	800c74c <_ZdlPvj>
 801c2a6:	687b      	ldr	r3, [r7, #4]
 801c2a8:	4618      	mov	r0, r3
 801c2aa:	3708      	adds	r7, #8
 801c2ac:	46bd      	mov	sp, r7
 801c2ae:	bd80      	pop	{r7, pc}

0801c2b0 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>:
class MockNoWayToCompareCustomTypeFailure : public MockFailure
 801c2b0:	b580      	push	{r7, lr}
 801c2b2:	b082      	sub	sp, #8
 801c2b4:	af00      	add	r7, sp, #0
 801c2b6:	6078      	str	r0, [r7, #4]
 801c2b8:	4a05      	ldr	r2, [pc, #20]	; (801c2d0 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev+0x20>)
 801c2ba:	687b      	ldr	r3, [r7, #4]
 801c2bc:	601a      	str	r2, [r3, #0]
 801c2be:	687b      	ldr	r3, [r7, #4]
 801c2c0:	4618      	mov	r0, r3
 801c2c2:	f7f0 fe75 	bl	800cfb0 <_ZN11MockFailureD1Ev>
 801c2c6:	687b      	ldr	r3, [r7, #4]
 801c2c8:	4618      	mov	r0, r3
 801c2ca:	3708      	adds	r7, #8
 801c2cc:	46bd      	mov	sp, r7
 801c2ce:	bd80      	pop	{r7, pc}
 801c2d0:	0802bb3c 	.word	0x0802bb3c

0801c2d4 <_ZN35MockNoWayToCompareCustomTypeFailureD0Ev>:
 801c2d4:	b580      	push	{r7, lr}
 801c2d6:	b082      	sub	sp, #8
 801c2d8:	af00      	add	r7, sp, #0
 801c2da:	6078      	str	r0, [r7, #4]
 801c2dc:	6878      	ldr	r0, [r7, #4]
 801c2de:	f7ff ffe7 	bl	801c2b0 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 801c2e2:	2134      	movs	r1, #52	; 0x34
 801c2e4:	6878      	ldr	r0, [r7, #4]
 801c2e6:	f7f0 fa31 	bl	800c74c <_ZdlPvj>
 801c2ea:	687b      	ldr	r3, [r7, #4]
 801c2ec:	4618      	mov	r0, r3
 801c2ee:	3708      	adds	r7, #8
 801c2f0:	46bd      	mov	sp, r7
 801c2f2:	bd80      	pop	{r7, pc}

0801c2f4 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>:
class MockExpectedParameterDidntHappenFailure : public MockFailure
 801c2f4:	b580      	push	{r7, lr}
 801c2f6:	b082      	sub	sp, #8
 801c2f8:	af00      	add	r7, sp, #0
 801c2fa:	6078      	str	r0, [r7, #4]
 801c2fc:	4a05      	ldr	r2, [pc, #20]	; (801c314 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev+0x20>)
 801c2fe:	687b      	ldr	r3, [r7, #4]
 801c300:	601a      	str	r2, [r3, #0]
 801c302:	687b      	ldr	r3, [r7, #4]
 801c304:	4618      	mov	r0, r3
 801c306:	f7f0 fe53 	bl	800cfb0 <_ZN11MockFailureD1Ev>
 801c30a:	687b      	ldr	r3, [r7, #4]
 801c30c:	4618      	mov	r0, r3
 801c30e:	3708      	adds	r7, #8
 801c310:	46bd      	mov	sp, r7
 801c312:	bd80      	pop	{r7, pc}
 801c314:	0802bb68 	.word	0x0802bb68

0801c318 <_ZN39MockExpectedParameterDidntHappenFailureD0Ev>:
 801c318:	b580      	push	{r7, lr}
 801c31a:	b082      	sub	sp, #8
 801c31c:	af00      	add	r7, sp, #0
 801c31e:	6078      	str	r0, [r7, #4]
 801c320:	6878      	ldr	r0, [r7, #4]
 801c322:	f7ff ffe7 	bl	801c2f4 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 801c326:	2134      	movs	r1, #52	; 0x34
 801c328:	6878      	ldr	r0, [r7, #4]
 801c32a:	f7f0 fa0f 	bl	800c74c <_ZdlPvj>
 801c32e:	687b      	ldr	r3, [r7, #4]
 801c330:	4618      	mov	r0, r3
 801c332:	3708      	adds	r7, #8
 801c334:	46bd      	mov	sp, r7
 801c336:	bd80      	pop	{r7, pc}

0801c338 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>:
{
public:
    MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* expected, const MockExpectedCallsList& expectations);
};

class MockExpectedObjectDidntHappenFailure : public MockFailure
 801c338:	b580      	push	{r7, lr}
 801c33a:	b082      	sub	sp, #8
 801c33c:	af00      	add	r7, sp, #0
 801c33e:	6078      	str	r0, [r7, #4]
 801c340:	4a05      	ldr	r2, [pc, #20]	; (801c358 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev+0x20>)
 801c342:	687b      	ldr	r3, [r7, #4]
 801c344:	601a      	str	r2, [r3, #0]
 801c346:	687b      	ldr	r3, [r7, #4]
 801c348:	4618      	mov	r0, r3
 801c34a:	f7f0 fe31 	bl	800cfb0 <_ZN11MockFailureD1Ev>
 801c34e:	687b      	ldr	r3, [r7, #4]
 801c350:	4618      	mov	r0, r3
 801c352:	3708      	adds	r7, #8
 801c354:	46bd      	mov	sp, r7
 801c356:	bd80      	pop	{r7, pc}
 801c358:	0802bab8 	.word	0x0802bab8

0801c35c <_ZN36MockExpectedObjectDidntHappenFailureD0Ev>:
 801c35c:	b580      	push	{r7, lr}
 801c35e:	b082      	sub	sp, #8
 801c360:	af00      	add	r7, sp, #0
 801c362:	6078      	str	r0, [r7, #4]
 801c364:	6878      	ldr	r0, [r7, #4]
 801c366:	f7ff ffe7 	bl	801c338 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 801c36a:	2134      	movs	r1, #52	; 0x34
 801c36c:	6878      	ldr	r0, [r7, #4]
 801c36e:	f7f0 f9ed 	bl	800c74c <_ZdlPvj>
 801c372:	687b      	ldr	r3, [r7, #4]
 801c374:	4618      	mov	r0, r3
 801c376:	3708      	adds	r7, #8
 801c378:	46bd      	mov	sp, r7
 801c37a:	bd80      	pop	{r7, pc}

0801c37c <_ZN27MockUnexpectedObjectFailureD1Ev>:
class MockUnexpectedObjectFailure : public MockFailure
 801c37c:	b580      	push	{r7, lr}
 801c37e:	b082      	sub	sp, #8
 801c380:	af00      	add	r7, sp, #0
 801c382:	6078      	str	r0, [r7, #4]
 801c384:	4a05      	ldr	r2, [pc, #20]	; (801c39c <_ZN27MockUnexpectedObjectFailureD1Ev+0x20>)
 801c386:	687b      	ldr	r3, [r7, #4]
 801c388:	601a      	str	r2, [r3, #0]
 801c38a:	687b      	ldr	r3, [r7, #4]
 801c38c:	4618      	mov	r0, r3
 801c38e:	f7f0 fe0f 	bl	800cfb0 <_ZN11MockFailureD1Ev>
 801c392:	687b      	ldr	r3, [r7, #4]
 801c394:	4618      	mov	r0, r3
 801c396:	3708      	adds	r7, #8
 801c398:	46bd      	mov	sp, r7
 801c39a:	bd80      	pop	{r7, pc}
 801c39c:	0802bae4 	.word	0x0802bae4

0801c3a0 <_ZN27MockUnexpectedObjectFailureD0Ev>:
 801c3a0:	b580      	push	{r7, lr}
 801c3a2:	b082      	sub	sp, #8
 801c3a4:	af00      	add	r7, sp, #0
 801c3a6:	6078      	str	r0, [r7, #4]
 801c3a8:	6878      	ldr	r0, [r7, #4]
 801c3aa:	f7ff ffe7 	bl	801c37c <_ZN27MockUnexpectedObjectFailureD1Ev>
 801c3ae:	2134      	movs	r1, #52	; 0x34
 801c3b0:	6878      	ldr	r0, [r7, #4]
 801c3b2:	f7f0 f9cb 	bl	800c74c <_ZdlPvj>
 801c3b6:	687b      	ldr	r3, [r7, #4]
 801c3b8:	4618      	mov	r0, r3
 801c3ba:	3708      	adds	r7, #8
 801c3bc:	46bd      	mov	sp, r7
 801c3be:	bd80      	pop	{r7, pc}

0801c3c0 <_ZN23MockCheckedExpectedCall13withCallOrderEj>:
    MockCheckedExpectedCall();
    MockCheckedExpectedCall(unsigned int numCalls);
    virtual ~MockCheckedExpectedCall() _destructor_override;

    virtual MockExpectedCall& withName(const SimpleString& name) _override;
    virtual MockExpectedCall& withCallOrder(unsigned int callOrder) _override { return withCallOrder(callOrder, callOrder); }
 801c3c0:	b580      	push	{r7, lr}
 801c3c2:	b082      	sub	sp, #8
 801c3c4:	af00      	add	r7, sp, #0
 801c3c6:	6078      	str	r0, [r7, #4]
 801c3c8:	6039      	str	r1, [r7, #0]
 801c3ca:	687b      	ldr	r3, [r7, #4]
 801c3cc:	681b      	ldr	r3, [r3, #0]
 801c3ce:	3310      	adds	r3, #16
 801c3d0:	681b      	ldr	r3, [r3, #0]
 801c3d2:	683a      	ldr	r2, [r7, #0]
 801c3d4:	6839      	ldr	r1, [r7, #0]
 801c3d6:	6878      	ldr	r0, [r7, #4]
 801c3d8:	4798      	blx	r3
 801c3da:	4603      	mov	r3, r0
 801c3dc:	4618      	mov	r0, r3
 801c3de:	3708      	adds	r7, #8
 801c3e0:	46bd      	mov	sp, r7
 801c3e2:	bd80      	pop	{r7, pc}

0801c3e4 <_ZN23MockIgnoredExpectedCall8withNameERK12SimpleString>:

class MockIgnoredExpectedCall: public MockExpectedCall
{
public:

    virtual MockExpectedCall& withName(const SimpleString&) _override { return *this;}
 801c3e4:	b480      	push	{r7}
 801c3e6:	b083      	sub	sp, #12
 801c3e8:	af00      	add	r7, sp, #0
 801c3ea:	6078      	str	r0, [r7, #4]
 801c3ec:	6039      	str	r1, [r7, #0]
 801c3ee:	687b      	ldr	r3, [r7, #4]
 801c3f0:	4618      	mov	r0, r3
 801c3f2:	370c      	adds	r7, #12
 801c3f4:	46bd      	mov	sp, r7
 801c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3fa:	4770      	bx	lr

0801c3fc <_ZN23MockIgnoredExpectedCall13withCallOrderEj>:
    virtual MockExpectedCall& withCallOrder(unsigned int) _override { return *this; }
 801c3fc:	b480      	push	{r7}
 801c3fe:	b083      	sub	sp, #12
 801c400:	af00      	add	r7, sp, #0
 801c402:	6078      	str	r0, [r7, #4]
 801c404:	6039      	str	r1, [r7, #0]
 801c406:	687b      	ldr	r3, [r7, #4]
 801c408:	4618      	mov	r0, r3
 801c40a:	370c      	adds	r7, #12
 801c40c:	46bd      	mov	sp, r7
 801c40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c412:	4770      	bx	lr

0801c414 <_ZN23MockIgnoredExpectedCall13withCallOrderEjj>:
    virtual MockExpectedCall& withCallOrder(unsigned int, unsigned int) _override { return *this; }
 801c414:	b480      	push	{r7}
 801c416:	b085      	sub	sp, #20
 801c418:	af00      	add	r7, sp, #0
 801c41a:	60f8      	str	r0, [r7, #12]
 801c41c:	60b9      	str	r1, [r7, #8]
 801c41e:	607a      	str	r2, [r7, #4]
 801c420:	68fb      	ldr	r3, [r7, #12]
 801c422:	4618      	mov	r0, r3
 801c424:	3714      	adds	r7, #20
 801c426:	46bd      	mov	sp, r7
 801c428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c42c:	4770      	bx	lr

0801c42e <_ZN23MockIgnoredExpectedCall17withBoolParameterERK12SimpleStringb>:
    virtual MockExpectedCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 801c42e:	b480      	push	{r7}
 801c430:	b085      	sub	sp, #20
 801c432:	af00      	add	r7, sp, #0
 801c434:	60f8      	str	r0, [r7, #12]
 801c436:	60b9      	str	r1, [r7, #8]
 801c438:	4613      	mov	r3, r2
 801c43a:	71fb      	strb	r3, [r7, #7]
 801c43c:	68fb      	ldr	r3, [r7, #12]
 801c43e:	4618      	mov	r0, r3
 801c440:	3714      	adds	r7, #20
 801c442:	46bd      	mov	sp, r7
 801c444:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c448:	4770      	bx	lr

0801c44a <_ZN23MockIgnoredExpectedCall16withIntParameterERK12SimpleStringi>:
    virtual MockExpectedCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 801c44a:	b480      	push	{r7}
 801c44c:	b085      	sub	sp, #20
 801c44e:	af00      	add	r7, sp, #0
 801c450:	60f8      	str	r0, [r7, #12]
 801c452:	60b9      	str	r1, [r7, #8]
 801c454:	607a      	str	r2, [r7, #4]
 801c456:	68fb      	ldr	r3, [r7, #12]
 801c458:	4618      	mov	r0, r3
 801c45a:	3714      	adds	r7, #20
 801c45c:	46bd      	mov	sp, r7
 801c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c462:	4770      	bx	lr

0801c464 <_ZN23MockIgnoredExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockExpectedCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override{ return *this; }
 801c464:	b480      	push	{r7}
 801c466:	b085      	sub	sp, #20
 801c468:	af00      	add	r7, sp, #0
 801c46a:	60f8      	str	r0, [r7, #12]
 801c46c:	60b9      	str	r1, [r7, #8]
 801c46e:	607a      	str	r2, [r7, #4]
 801c470:	68fb      	ldr	r3, [r7, #12]
 801c472:	4618      	mov	r0, r3
 801c474:	3714      	adds	r7, #20
 801c476:	46bd      	mov	sp, r7
 801c478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c47c:	4770      	bx	lr

0801c47e <_ZN23MockIgnoredExpectedCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockExpectedCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 801c47e:	b480      	push	{r7}
 801c480:	b085      	sub	sp, #20
 801c482:	af00      	add	r7, sp, #0
 801c484:	60f8      	str	r0, [r7, #12]
 801c486:	60b9      	str	r1, [r7, #8]
 801c488:	607a      	str	r2, [r7, #4]
 801c48a:	68fb      	ldr	r3, [r7, #12]
 801c48c:	4618      	mov	r0, r3
 801c48e:	3714      	adds	r7, #20
 801c490:	46bd      	mov	sp, r7
 801c492:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c496:	4770      	bx	lr

0801c498 <_ZN23MockIgnoredExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockExpectedCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 801c498:	b480      	push	{r7}
 801c49a:	b085      	sub	sp, #20
 801c49c:	af00      	add	r7, sp, #0
 801c49e:	60f8      	str	r0, [r7, #12]
 801c4a0:	60b9      	str	r1, [r7, #8]
 801c4a2:	607a      	str	r2, [r7, #4]
 801c4a4:	68fb      	ldr	r3, [r7, #12]
 801c4a6:	4618      	mov	r0, r3
 801c4a8:	3714      	adds	r7, #20
 801c4aa:	46bd      	mov	sp, r7
 801c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4b0:	4770      	bx	lr

0801c4b2 <_ZN23MockIgnoredExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockExpectedCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 801c4b2:	b480      	push	{r7}
 801c4b4:	b085      	sub	sp, #20
 801c4b6:	af00      	add	r7, sp, #0
 801c4b8:	60f8      	str	r0, [r7, #12]
 801c4ba:	60b9      	str	r1, [r7, #8]
 801c4bc:	4639      	mov	r1, r7
 801c4be:	e881 000c 	stmia.w	r1, {r2, r3}
 801c4c2:	68fb      	ldr	r3, [r7, #12]
 801c4c4:	4618      	mov	r0, r3
 801c4c6:	3714      	adds	r7, #20
 801c4c8:	46bd      	mov	sp, r7
 801c4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4ce:	4770      	bx	lr

0801c4d0 <_ZN23MockIgnoredExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockExpectedCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 801c4d0:	b480      	push	{r7}
 801c4d2:	b085      	sub	sp, #20
 801c4d4:	af00      	add	r7, sp, #0
 801c4d6:	60f8      	str	r0, [r7, #12]
 801c4d8:	60b9      	str	r1, [r7, #8]
 801c4da:	4639      	mov	r1, r7
 801c4dc:	e881 000c 	stmia.w	r1, {r2, r3}
 801c4e0:	68fb      	ldr	r3, [r7, #12]
 801c4e2:	4618      	mov	r0, r3
 801c4e4:	3714      	adds	r7, #20
 801c4e6:	46bd      	mov	sp, r7
 801c4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4ec:	4770      	bx	lr

0801c4ee <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 801c4ee:	b480      	push	{r7}
 801c4f0:	b085      	sub	sp, #20
 801c4f2:	af00      	add	r7, sp, #0
 801c4f4:	60f8      	str	r0, [r7, #12]
 801c4f6:	60b9      	str	r1, [r7, #8]
 801c4f8:	ed87 0b00 	vstr	d0, [r7]
 801c4fc:	68fb      	ldr	r3, [r7, #12]
 801c4fe:	4618      	mov	r0, r3
 801c500:	3714      	adds	r7, #20
 801c502:	46bd      	mov	sp, r7
 801c504:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c508:	4770      	bx	lr

0801c50a <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringdd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double, double) _override { return *this; }
 801c50a:	b480      	push	{r7}
 801c50c:	b087      	sub	sp, #28
 801c50e:	af00      	add	r7, sp, #0
 801c510:	6178      	str	r0, [r7, #20]
 801c512:	6139      	str	r1, [r7, #16]
 801c514:	ed87 0b02 	vstr	d0, [r7, #8]
 801c518:	ed87 1b00 	vstr	d1, [r7]
 801c51c:	697b      	ldr	r3, [r7, #20]
 801c51e:	4618      	mov	r0, r3
 801c520:	371c      	adds	r7, #28
 801c522:	46bd      	mov	sp, r7
 801c524:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c528:	4770      	bx	lr

0801c52a <_ZN23MockIgnoredExpectedCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockExpectedCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 801c52a:	b480      	push	{r7}
 801c52c:	b085      	sub	sp, #20
 801c52e:	af00      	add	r7, sp, #0
 801c530:	60f8      	str	r0, [r7, #12]
 801c532:	60b9      	str	r1, [r7, #8]
 801c534:	607a      	str	r2, [r7, #4]
 801c536:	68fb      	ldr	r3, [r7, #12]
 801c538:	4618      	mov	r0, r3
 801c53a:	3714      	adds	r7, #20
 801c53c:	46bd      	mov	sp, r7
 801c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c542:	4770      	bx	lr

0801c544 <_ZN23MockIgnoredExpectedCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockExpectedCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 801c544:	b480      	push	{r7}
 801c546:	b085      	sub	sp, #20
 801c548:	af00      	add	r7, sp, #0
 801c54a:	60f8      	str	r0, [r7, #12]
 801c54c:	60b9      	str	r1, [r7, #8]
 801c54e:	607a      	str	r2, [r7, #4]
 801c550:	68fb      	ldr	r3, [r7, #12]
 801c552:	4618      	mov	r0, r3
 801c554:	3714      	adds	r7, #20
 801c556:	46bd      	mov	sp, r7
 801c558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c55c:	4770      	bx	lr

0801c55e <_ZN23MockIgnoredExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockExpectedCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 801c55e:	b480      	push	{r7}
 801c560:	b085      	sub	sp, #20
 801c562:	af00      	add	r7, sp, #0
 801c564:	60f8      	str	r0, [r7, #12]
 801c566:	60b9      	str	r1, [r7, #8]
 801c568:	607a      	str	r2, [r7, #4]
 801c56a:	68fb      	ldr	r3, [r7, #12]
 801c56c:	4618      	mov	r0, r3
 801c56e:	3714      	adds	r7, #20
 801c570:	46bd      	mov	sp, r7
 801c572:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c576:	4770      	bx	lr

0801c578 <_ZN23MockIgnoredExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockExpectedCall& withFunctionPointerParameter(const SimpleString& , void(*)()) _override { return *this; }
 801c578:	b480      	push	{r7}
 801c57a:	b085      	sub	sp, #20
 801c57c:	af00      	add	r7, sp, #0
 801c57e:	60f8      	str	r0, [r7, #12]
 801c580:	60b9      	str	r1, [r7, #8]
 801c582:	607a      	str	r2, [r7, #4]
 801c584:	68fb      	ldr	r3, [r7, #12]
 801c586:	4618      	mov	r0, r3
 801c588:	3714      	adds	r7, #20
 801c58a:	46bd      	mov	sp, r7
 801c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c590:	4770      	bx	lr

0801c592 <_ZN23MockIgnoredExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockExpectedCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override { return *this; }
 801c592:	b480      	push	{r7}
 801c594:	b085      	sub	sp, #20
 801c596:	af00      	add	r7, sp, #0
 801c598:	60f8      	str	r0, [r7, #12]
 801c59a:	60b9      	str	r1, [r7, #8]
 801c59c:	607a      	str	r2, [r7, #4]
 801c59e:	603b      	str	r3, [r7, #0]
 801c5a0:	68fb      	ldr	r3, [r7, #12]
 801c5a2:	4618      	mov	r0, r3
 801c5a4:	3714      	adds	r7, #20
 801c5a6:	46bd      	mov	sp, r7
 801c5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5ac:	4770      	bx	lr

0801c5ae <_ZN23MockIgnoredExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 801c5ae:	b480      	push	{r7}
 801c5b0:	b085      	sub	sp, #20
 801c5b2:	af00      	add	r7, sp, #0
 801c5b4:	60f8      	str	r0, [r7, #12]
 801c5b6:	60b9      	str	r1, [r7, #8]
 801c5b8:	607a      	str	r2, [r7, #4]
 801c5ba:	603b      	str	r3, [r7, #0]
 801c5bc:	68fb      	ldr	r3, [r7, #12]
 801c5be:	4618      	mov	r0, r3
 801c5c0:	3714      	adds	r7, #20
 801c5c2:	46bd      	mov	sp, r7
 801c5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5c8:	4770      	bx	lr

0801c5ca <_ZN23MockIgnoredExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:
    virtual MockExpectedCall& withOutputParameterReturning(const SimpleString&, const void*, size_t) _override { return *this; }
 801c5ca:	b480      	push	{r7}
 801c5cc:	b085      	sub	sp, #20
 801c5ce:	af00      	add	r7, sp, #0
 801c5d0:	60f8      	str	r0, [r7, #12]
 801c5d2:	60b9      	str	r1, [r7, #8]
 801c5d4:	607a      	str	r2, [r7, #4]
 801c5d6:	603b      	str	r3, [r7, #0]
 801c5d8:	68fb      	ldr	r3, [r7, #12]
 801c5da:	4618      	mov	r0, r3
 801c5dc:	3714      	adds	r7, #20
 801c5de:	46bd      	mov	sp, r7
 801c5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5e4:	4770      	bx	lr

0801c5e6 <_ZN23MockIgnoredExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withOutputParameterOfTypeReturning(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 801c5e6:	b480      	push	{r7}
 801c5e8:	b085      	sub	sp, #20
 801c5ea:	af00      	add	r7, sp, #0
 801c5ec:	60f8      	str	r0, [r7, #12]
 801c5ee:	60b9      	str	r1, [r7, #8]
 801c5f0:	607a      	str	r2, [r7, #4]
 801c5f2:	603b      	str	r3, [r7, #0]
 801c5f4:	68fb      	ldr	r3, [r7, #12]
 801c5f6:	4618      	mov	r0, r3
 801c5f8:	3714      	adds	r7, #20
 801c5fa:	46bd      	mov	sp, r7
 801c5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c600:	4770      	bx	lr

0801c602 <_ZN23MockIgnoredExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:
    virtual MockExpectedCall& withUnmodifiedOutputParameter(const SimpleString&) _override { return *this; }
 801c602:	b480      	push	{r7}
 801c604:	b083      	sub	sp, #12
 801c606:	af00      	add	r7, sp, #0
 801c608:	6078      	str	r0, [r7, #4]
 801c60a:	6039      	str	r1, [r7, #0]
 801c60c:	687b      	ldr	r3, [r7, #4]
 801c60e:	4618      	mov	r0, r3
 801c610:	370c      	adds	r7, #12
 801c612:	46bd      	mov	sp, r7
 801c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c618:	4770      	bx	lr

0801c61a <_ZN23MockIgnoredExpectedCall21ignoreOtherParametersEv>:
    virtual MockExpectedCall& ignoreOtherParameters() _override { return *this;}
 801c61a:	b480      	push	{r7}
 801c61c:	b083      	sub	sp, #12
 801c61e:	af00      	add	r7, sp, #0
 801c620:	6078      	str	r0, [r7, #4]
 801c622:	687b      	ldr	r3, [r7, #4]
 801c624:	4618      	mov	r0, r3
 801c626:	370c      	adds	r7, #12
 801c628:	46bd      	mov	sp, r7
 801c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c62e:	4770      	bx	lr

0801c630 <_ZN23MockIgnoredExpectedCall14andReturnValueEb>:

    virtual MockExpectedCall& andReturnValue(bool) _override { return *this; }
 801c630:	b480      	push	{r7}
 801c632:	b083      	sub	sp, #12
 801c634:	af00      	add	r7, sp, #0
 801c636:	6078      	str	r0, [r7, #4]
 801c638:	460b      	mov	r3, r1
 801c63a:	70fb      	strb	r3, [r7, #3]
 801c63c:	687b      	ldr	r3, [r7, #4]
 801c63e:	4618      	mov	r0, r3
 801c640:	370c      	adds	r7, #12
 801c642:	46bd      	mov	sp, r7
 801c644:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c648:	4770      	bx	lr

0801c64a <_ZN23MockIgnoredExpectedCall14andReturnValueEi>:
    virtual MockExpectedCall& andReturnValue(int) _override { return *this; }
 801c64a:	b480      	push	{r7}
 801c64c:	b083      	sub	sp, #12
 801c64e:	af00      	add	r7, sp, #0
 801c650:	6078      	str	r0, [r7, #4]
 801c652:	6039      	str	r1, [r7, #0]
 801c654:	687b      	ldr	r3, [r7, #4]
 801c656:	4618      	mov	r0, r3
 801c658:	370c      	adds	r7, #12
 801c65a:	46bd      	mov	sp, r7
 801c65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c660:	4770      	bx	lr

0801c662 <_ZN23MockIgnoredExpectedCall14andReturnValueEj>:
    virtual MockExpectedCall& andReturnValue(unsigned int) _override { return *this; }
 801c662:	b480      	push	{r7}
 801c664:	b083      	sub	sp, #12
 801c666:	af00      	add	r7, sp, #0
 801c668:	6078      	str	r0, [r7, #4]
 801c66a:	6039      	str	r1, [r7, #0]
 801c66c:	687b      	ldr	r3, [r7, #4]
 801c66e:	4618      	mov	r0, r3
 801c670:	370c      	adds	r7, #12
 801c672:	46bd      	mov	sp, r7
 801c674:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c678:	4770      	bx	lr

0801c67a <_ZN23MockIgnoredExpectedCall14andReturnValueEl>:
    virtual MockExpectedCall& andReturnValue(long int) _override { return *this; }
 801c67a:	b480      	push	{r7}
 801c67c:	b083      	sub	sp, #12
 801c67e:	af00      	add	r7, sp, #0
 801c680:	6078      	str	r0, [r7, #4]
 801c682:	6039      	str	r1, [r7, #0]
 801c684:	687b      	ldr	r3, [r7, #4]
 801c686:	4618      	mov	r0, r3
 801c688:	370c      	adds	r7, #12
 801c68a:	46bd      	mov	sp, r7
 801c68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c690:	4770      	bx	lr

0801c692 <_ZN23MockIgnoredExpectedCall14andReturnValueEm>:
    virtual MockExpectedCall& andReturnValue(unsigned long int) _override { return *this; }
 801c692:	b480      	push	{r7}
 801c694:	b083      	sub	sp, #12
 801c696:	af00      	add	r7, sp, #0
 801c698:	6078      	str	r0, [r7, #4]
 801c69a:	6039      	str	r1, [r7, #0]
 801c69c:	687b      	ldr	r3, [r7, #4]
 801c69e:	4618      	mov	r0, r3
 801c6a0:	370c      	adds	r7, #12
 801c6a2:	46bd      	mov	sp, r7
 801c6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6a8:	4770      	bx	lr

0801c6aa <_ZN23MockIgnoredExpectedCall14andReturnValueE17cpputest_longlong>:
    virtual MockExpectedCall& andReturnValue(cpputest_longlong) _override { return *this; }
 801c6aa:	b480      	push	{r7}
 801c6ac:	b085      	sub	sp, #20
 801c6ae:	af00      	add	r7, sp, #0
 801c6b0:	60f8      	str	r0, [r7, #12]
 801c6b2:	1d3b      	adds	r3, r7, #4
 801c6b4:	e883 0006 	stmia.w	r3, {r1, r2}
 801c6b8:	68fb      	ldr	r3, [r7, #12]
 801c6ba:	4618      	mov	r0, r3
 801c6bc:	3714      	adds	r7, #20
 801c6be:	46bd      	mov	sp, r7
 801c6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6c4:	4770      	bx	lr

0801c6c6 <_ZN23MockIgnoredExpectedCall14andReturnValueE18cpputest_ulonglong>:
    virtual MockExpectedCall& andReturnValue(cpputest_ulonglong) _override { return *this; }
 801c6c6:	b480      	push	{r7}
 801c6c8:	b085      	sub	sp, #20
 801c6ca:	af00      	add	r7, sp, #0
 801c6cc:	60f8      	str	r0, [r7, #12]
 801c6ce:	1d3b      	adds	r3, r7, #4
 801c6d0:	e883 0006 	stmia.w	r3, {r1, r2}
 801c6d4:	68fb      	ldr	r3, [r7, #12]
 801c6d6:	4618      	mov	r0, r3
 801c6d8:	3714      	adds	r7, #20
 801c6da:	46bd      	mov	sp, r7
 801c6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6e0:	4770      	bx	lr

0801c6e2 <_ZN23MockIgnoredExpectedCall14andReturnValueEd>:
    virtual MockExpectedCall& andReturnValue(double) _override { return *this;}
 801c6e2:	b480      	push	{r7}
 801c6e4:	b085      	sub	sp, #20
 801c6e6:	af00      	add	r7, sp, #0
 801c6e8:	60f8      	str	r0, [r7, #12]
 801c6ea:	ed87 0b00 	vstr	d0, [r7]
 801c6ee:	68fb      	ldr	r3, [r7, #12]
 801c6f0:	4618      	mov	r0, r3
 801c6f2:	3714      	adds	r7, #20
 801c6f4:	46bd      	mov	sp, r7
 801c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6fa:	4770      	bx	lr

0801c6fc <_ZN23MockIgnoredExpectedCall14andReturnValueEPKc>:
    virtual MockExpectedCall& andReturnValue(const char*) _override { return *this; }
 801c6fc:	b480      	push	{r7}
 801c6fe:	b083      	sub	sp, #12
 801c700:	af00      	add	r7, sp, #0
 801c702:	6078      	str	r0, [r7, #4]
 801c704:	6039      	str	r1, [r7, #0]
 801c706:	687b      	ldr	r3, [r7, #4]
 801c708:	4618      	mov	r0, r3
 801c70a:	370c      	adds	r7, #12
 801c70c:	46bd      	mov	sp, r7
 801c70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c712:	4770      	bx	lr

0801c714 <_ZN23MockIgnoredExpectedCall14andReturnValueEPv>:
    virtual MockExpectedCall& andReturnValue(void*) _override { return *this; }
 801c714:	b480      	push	{r7}
 801c716:	b083      	sub	sp, #12
 801c718:	af00      	add	r7, sp, #0
 801c71a:	6078      	str	r0, [r7, #4]
 801c71c:	6039      	str	r1, [r7, #0]
 801c71e:	687b      	ldr	r3, [r7, #4]
 801c720:	4618      	mov	r0, r3
 801c722:	370c      	adds	r7, #12
 801c724:	46bd      	mov	sp, r7
 801c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c72a:	4770      	bx	lr

0801c72c <_ZN23MockIgnoredExpectedCall14andReturnValueEPKv>:
    virtual MockExpectedCall& andReturnValue(const void*) _override { return *this; }
 801c72c:	b480      	push	{r7}
 801c72e:	b083      	sub	sp, #12
 801c730:	af00      	add	r7, sp, #0
 801c732:	6078      	str	r0, [r7, #4]
 801c734:	6039      	str	r1, [r7, #0]
 801c736:	687b      	ldr	r3, [r7, #4]
 801c738:	4618      	mov	r0, r3
 801c73a:	370c      	adds	r7, #12
 801c73c:	46bd      	mov	sp, r7
 801c73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c742:	4770      	bx	lr

0801c744 <_ZN23MockIgnoredExpectedCall14andReturnValueEPFvvE>:
    virtual MockExpectedCall& andReturnValue(void (*)()) _override { return *this; }
 801c744:	b480      	push	{r7}
 801c746:	b083      	sub	sp, #12
 801c748:	af00      	add	r7, sp, #0
 801c74a:	6078      	str	r0, [r7, #4]
 801c74c:	6039      	str	r1, [r7, #0]
 801c74e:	687b      	ldr	r3, [r7, #4]
 801c750:	4618      	mov	r0, r3
 801c752:	370c      	adds	r7, #12
 801c754:	46bd      	mov	sp, r7
 801c756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c75a:	4770      	bx	lr

0801c75c <_ZN23MockIgnoredExpectedCall8onObjectEPv>:

    virtual MockExpectedCall& onObject(void*) _override { return *this; }
 801c75c:	b480      	push	{r7}
 801c75e:	b083      	sub	sp, #12
 801c760:	af00      	add	r7, sp, #0
 801c762:	6078      	str	r0, [r7, #4]
 801c764:	6039      	str	r1, [r7, #0]
 801c766:	687b      	ldr	r3, [r7, #4]
 801c768:	4618      	mov	r0, r3
 801c76a:	370c      	adds	r7, #12
 801c76c:	46bd      	mov	sp, r7
 801c76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c772:	4770      	bx	lr

0801c774 <_ZN16MockExpectedCallC1Ev>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCall::MockExpectedCall()
 801c774:	b480      	push	{r7}
 801c776:	b083      	sub	sp, #12
 801c778:	af00      	add	r7, sp, #0
 801c77a:	6078      	str	r0, [r7, #4]
 801c77c:	4a04      	ldr	r2, [pc, #16]	; (801c790 <_ZN16MockExpectedCallC1Ev+0x1c>)
 801c77e:	687b      	ldr	r3, [r7, #4]
 801c780:	601a      	str	r2, [r3, #0]
{
}
 801c782:	687b      	ldr	r3, [r7, #4]
 801c784:	4618      	mov	r0, r3
 801c786:	370c      	adds	r7, #12
 801c788:	46bd      	mov	sp, r7
 801c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c78e:	4770      	bx	lr
 801c790:	0802c1bc 	.word	0x0802c1bc

0801c794 <_ZN16MockExpectedCallD1Ev>:

MockExpectedCall::~MockExpectedCall()
 801c794:	b480      	push	{r7}
 801c796:	b083      	sub	sp, #12
 801c798:	af00      	add	r7, sp, #0
 801c79a:	6078      	str	r0, [r7, #4]
 801c79c:	4a04      	ldr	r2, [pc, #16]	; (801c7b0 <_ZN16MockExpectedCallD1Ev+0x1c>)
 801c79e:	687b      	ldr	r3, [r7, #4]
 801c7a0:	601a      	str	r2, [r3, #0]
{
}
 801c7a2:	687b      	ldr	r3, [r7, #4]
 801c7a4:	4618      	mov	r0, r3
 801c7a6:	370c      	adds	r7, #12
 801c7a8:	46bd      	mov	sp, r7
 801c7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7ae:	4770      	bx	lr
 801c7b0:	0802c1bc 	.word	0x0802c1bc

0801c7b4 <_Z10StringFromRK14MockNamedValue>:

SimpleString StringFrom(const MockNamedValue& parameter)
{
 801c7b4:	b580      	push	{r7, lr}
 801c7b6:	b082      	sub	sp, #8
 801c7b8:	af00      	add	r7, sp, #0
 801c7ba:	6078      	str	r0, [r7, #4]
 801c7bc:	6039      	str	r1, [r7, #0]
    return parameter.toString();
 801c7be:	683b      	ldr	r3, [r7, #0]
 801c7c0:	681b      	ldr	r3, [r3, #0]
 801c7c2:	3358      	adds	r3, #88	; 0x58
 801c7c4:	681b      	ldr	r3, [r3, #0]
 801c7c6:	687a      	ldr	r2, [r7, #4]
 801c7c8:	6839      	ldr	r1, [r7, #0]
 801c7ca:	4610      	mov	r0, r2
 801c7cc:	4798      	blx	r3
}
 801c7ce:	6878      	ldr	r0, [r7, #4]
 801c7d0:	3708      	adds	r7, #8
 801c7d2:	46bd      	mov	sp, r7
 801c7d4:	bd80      	pop	{r7, pc}

0801c7d6 <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>:

void MockCheckedExpectedCall::setName(const SimpleString& name)
{
 801c7d6:	b580      	push	{r7, lr}
 801c7d8:	b082      	sub	sp, #8
 801c7da:	af00      	add	r7, sp, #0
 801c7dc:	6078      	str	r0, [r7, #4]
 801c7de:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 801c7e0:	687b      	ldr	r3, [r7, #4]
 801c7e2:	3304      	adds	r3, #4
 801c7e4:	6839      	ldr	r1, [r7, #0]
 801c7e6:	4618      	mov	r0, r3
 801c7e8:	f7f2 fbcb 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
}
 801c7ec:	bf00      	nop
 801c7ee:	3708      	adds	r7, #8
 801c7f0:	46bd      	mov	sp, r7
 801c7f2:	bd80      	pop	{r7, pc}

0801c7f4 <_ZNK23MockCheckedExpectedCall7getNameEv>:

SimpleString MockCheckedExpectedCall::getName() const
{
 801c7f4:	b580      	push	{r7, lr}
 801c7f6:	b082      	sub	sp, #8
 801c7f8:	af00      	add	r7, sp, #0
 801c7fa:	6078      	str	r0, [r7, #4]
 801c7fc:	6039      	str	r1, [r7, #0]
    return functionName_;
 801c7fe:	683b      	ldr	r3, [r7, #0]
 801c800:	3304      	adds	r3, #4
 801c802:	4619      	mov	r1, r3
 801c804:	6878      	ldr	r0, [r7, #4]
 801c806:	f7f2 fba4 	bl	800ef52 <_ZN12SimpleStringC1ERKS_>
}
 801c80a:	6878      	ldr	r0, [r7, #4]
 801c80c:	3708      	adds	r7, #8
 801c80e:	46bd      	mov	sp, r7
 801c810:	bd80      	pop	{r7, pc}
	...

0801c814 <_ZN23MockCheckedExpectedCallC1Ej>:
{
    inputParameters_ = new MockNamedValueList();
    outputParameters_ = new MockNamedValueList();
}

MockCheckedExpectedCall::MockCheckedExpectedCall(unsigned int numCalls)
 801c814:	b590      	push	{r4, r7, lr}
 801c816:	b085      	sub	sp, #20
 801c818:	af00      	add	r7, sp, #0
 801c81a:	6078      	str	r0, [r7, #4]
 801c81c:	6039      	str	r1, [r7, #0]
    : ignoreOtherParameters_(false), isActualCallMatchFinalized_(false),
      initialExpectedCallOrder_(NO_EXPECTED_CALL_ORDER), finalExpectedCallOrder_(NO_EXPECTED_CALL_ORDER),
      outOfOrder_(false), returnValue_(""), objectPtr_(NULLPTR), isSpecificObjectExpected_(false), wasPassedToObject_(true),
      actualCalls_(0), expectedCalls_(numCalls)
 801c81e:	687b      	ldr	r3, [r7, #4]
 801c820:	4618      	mov	r0, r3
 801c822:	f7ff ffa7 	bl	801c774 <_ZN16MockExpectedCallC1Ev>
 801c826:	4a2c      	ldr	r2, [pc, #176]	; (801c8d8 <_ZN23MockCheckedExpectedCallC1Ej+0xc4>)
 801c828:	687b      	ldr	r3, [r7, #4]
 801c82a:	601a      	str	r2, [r3, #0]
 801c82c:	687b      	ldr	r3, [r7, #4]
 801c82e:	3304      	adds	r3, #4
 801c830:	492a      	ldr	r1, [pc, #168]	; (801c8dc <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 801c832:	4618      	mov	r0, r3
 801c834:	f7f2 fb39 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801c838:	687b      	ldr	r3, [r7, #4]
 801c83a:	2200      	movs	r2, #0
 801c83c:	731a      	strb	r2, [r3, #12]
 801c83e:	687b      	ldr	r3, [r7, #4]
 801c840:	2200      	movs	r2, #0
 801c842:	735a      	strb	r2, [r3, #13]
 801c844:	687b      	ldr	r3, [r7, #4]
 801c846:	2200      	movs	r2, #0
 801c848:	611a      	str	r2, [r3, #16]
 801c84a:	687b      	ldr	r3, [r7, #4]
 801c84c:	2200      	movs	r2, #0
 801c84e:	615a      	str	r2, [r3, #20]
 801c850:	687b      	ldr	r3, [r7, #4]
 801c852:	2200      	movs	r2, #0
 801c854:	761a      	strb	r2, [r3, #24]
 801c856:	687b      	ldr	r3, [r7, #4]
 801c858:	f103 0428 	add.w	r4, r3, #40	; 0x28
 801c85c:	f107 0308 	add.w	r3, r7, #8
 801c860:	491e      	ldr	r1, [pc, #120]	; (801c8dc <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 801c862:	4618      	mov	r0, r3
 801c864:	f7f2 fb21 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801c868:	f107 0308 	add.w	r3, r7, #8
 801c86c:	4619      	mov	r1, r3
 801c86e:	4620      	mov	r0, r4
 801c870:	f003 f840 	bl	801f8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
 801c874:	f107 0308 	add.w	r3, r7, #8
 801c878:	4618      	mov	r0, r3
 801c87a:	f7f2 fece 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801c87e:	687b      	ldr	r3, [r7, #4]
 801c880:	2200      	movs	r2, #0
 801c882:	661a      	str	r2, [r3, #96]	; 0x60
 801c884:	687b      	ldr	r3, [r7, #4]
 801c886:	2200      	movs	r2, #0
 801c888:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 801c88c:	687b      	ldr	r3, [r7, #4]
 801c88e:	2201      	movs	r2, #1
 801c890:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 801c894:	687b      	ldr	r3, [r7, #4]
 801c896:	2200      	movs	r2, #0
 801c898:	669a      	str	r2, [r3, #104]	; 0x68
 801c89a:	687b      	ldr	r3, [r7, #4]
 801c89c:	683a      	ldr	r2, [r7, #0]
 801c89e:	66da      	str	r2, [r3, #108]	; 0x6c
{
    inputParameters_ = new MockNamedValueList();
 801c8a0:	2246      	movs	r2, #70	; 0x46
 801c8a2:	490f      	ldr	r1, [pc, #60]	; (801c8e0 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 801c8a4:	2004      	movs	r0, #4
 801c8a6:	f7ef ff3d 	bl	800c724 <_ZnwjPKci>
 801c8aa:	4604      	mov	r4, r0
 801c8ac:	4620      	mov	r0, r4
 801c8ae:	f004 ff34 	bl	802171a <_ZN18MockNamedValueListC1Ev>
 801c8b2:	687b      	ldr	r3, [r7, #4]
 801c8b4:	61dc      	str	r4, [r3, #28]
    outputParameters_ = new MockNamedValueList();
 801c8b6:	2247      	movs	r2, #71	; 0x47
 801c8b8:	4909      	ldr	r1, [pc, #36]	; (801c8e0 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 801c8ba:	2004      	movs	r0, #4
 801c8bc:	f7ef ff32 	bl	800c724 <_ZnwjPKci>
 801c8c0:	4604      	mov	r4, r0
 801c8c2:	4620      	mov	r0, r4
 801c8c4:	f004 ff29 	bl	802171a <_ZN18MockNamedValueListC1Ev>
 801c8c8:	687b      	ldr	r3, [r7, #4]
 801c8ca:	621c      	str	r4, [r3, #32]
}
 801c8cc:	687b      	ldr	r3, [r7, #4]
 801c8ce:	4618      	mov	r0, r3
 801c8d0:	3714      	adds	r7, #20
 801c8d2:	46bd      	mov	sp, r7
 801c8d4:	bd90      	pop	{r4, r7, pc}
 801c8d6:	bf00      	nop
 801c8d8:	0802c000 	.word	0x0802c000
 801c8dc:	08028bbc 	.word	0x08028bbc
 801c8e0:	08028bc0 	.word	0x08028bc0

0801c8e4 <_ZN23MockCheckedExpectedCallD1Ev>:

MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801c8e4:	b580      	push	{r7, lr}
 801c8e6:	b082      	sub	sp, #8
 801c8e8:	af00      	add	r7, sp, #0
 801c8ea:	6078      	str	r0, [r7, #4]
 801c8ec:	4a17      	ldr	r2, [pc, #92]	; (801c94c <_ZN23MockCheckedExpectedCallD1Ev+0x68>)
 801c8ee:	687b      	ldr	r3, [r7, #4]
 801c8f0:	601a      	str	r2, [r3, #0]
{
    inputParameters_->clear();
 801c8f2:	687b      	ldr	r3, [r7, #4]
 801c8f4:	69db      	ldr	r3, [r3, #28]
 801c8f6:	4618      	mov	r0, r3
 801c8f8:	f004 ff1d 	bl	8021736 <_ZN18MockNamedValueList5clearEv>
    delete inputParameters_;
 801c8fc:	687b      	ldr	r3, [r7, #4]
 801c8fe:	69db      	ldr	r3, [r3, #28]
 801c900:	2b00      	cmp	r3, #0
 801c902:	d003      	beq.n	801c90c <_ZN23MockCheckedExpectedCallD1Ev+0x28>
 801c904:	2104      	movs	r1, #4
 801c906:	4618      	mov	r0, r3
 801c908:	f7ef ff20 	bl	800c74c <_ZdlPvj>
    outputParameters_->clear();
 801c90c:	687b      	ldr	r3, [r7, #4]
 801c90e:	6a1b      	ldr	r3, [r3, #32]
 801c910:	4618      	mov	r0, r3
 801c912:	f004 ff10 	bl	8021736 <_ZN18MockNamedValueList5clearEv>
    delete outputParameters_;
 801c916:	687b      	ldr	r3, [r7, #4]
 801c918:	6a1b      	ldr	r3, [r3, #32]
 801c91a:	2b00      	cmp	r3, #0
 801c91c:	d003      	beq.n	801c926 <_ZN23MockCheckedExpectedCallD1Ev+0x42>
 801c91e:	2104      	movs	r1, #4
 801c920:	4618      	mov	r0, r3
 801c922:	f7ef ff13 	bl	800c74c <_ZdlPvj>
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801c926:	687b      	ldr	r3, [r7, #4]
 801c928:	3328      	adds	r3, #40	; 0x28
 801c92a:	4618      	mov	r0, r3
 801c92c:	f003 f80c 	bl	801f948 <_ZN14MockNamedValueD1Ev>
 801c930:	687b      	ldr	r3, [r7, #4]
 801c932:	3304      	adds	r3, #4
 801c934:	4618      	mov	r0, r3
 801c936:	f7f2 fe70 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801c93a:	687b      	ldr	r3, [r7, #4]
 801c93c:	4618      	mov	r0, r3
 801c93e:	f7ff ff29 	bl	801c794 <_ZN16MockExpectedCallD1Ev>
}
 801c942:	687b      	ldr	r3, [r7, #4]
 801c944:	4618      	mov	r0, r3
 801c946:	3708      	adds	r7, #8
 801c948:	46bd      	mov	sp, r7
 801c94a:	bd80      	pop	{r7, pc}
 801c94c:	0802c000 	.word	0x0802c000

0801c950 <_ZN23MockCheckedExpectedCallD0Ev>:
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801c950:	b580      	push	{r7, lr}
 801c952:	b082      	sub	sp, #8
 801c954:	af00      	add	r7, sp, #0
 801c956:	6078      	str	r0, [r7, #4]
}
 801c958:	6878      	ldr	r0, [r7, #4]
 801c95a:	f7ff ffc3 	bl	801c8e4 <_ZN23MockCheckedExpectedCallD1Ev>
 801c95e:	2170      	movs	r1, #112	; 0x70
 801c960:	6878      	ldr	r0, [r7, #4]
 801c962:	f7ef fef3 	bl	800c74c <_ZdlPvj>
 801c966:	687b      	ldr	r3, [r7, #4]
 801c968:	4618      	mov	r0, r3
 801c96a:	3708      	adds	r7, #8
 801c96c:	46bd      	mov	sp, r7
 801c96e:	bd80      	pop	{r7, pc}

0801c970 <_ZN23MockCheckedExpectedCall8withNameERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withName(const SimpleString& name)
{
 801c970:	b580      	push	{r7, lr}
 801c972:	b082      	sub	sp, #8
 801c974:	af00      	add	r7, sp, #0
 801c976:	6078      	str	r0, [r7, #4]
 801c978:	6039      	str	r1, [r7, #0]
    setName(name);
 801c97a:	6839      	ldr	r1, [r7, #0]
 801c97c:	6878      	ldr	r0, [r7, #4]
 801c97e:	f7ff ff2a 	bl	801c7d6 <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>
    return *this;
 801c982:	687b      	ldr	r3, [r7, #4]
}
 801c984:	4618      	mov	r0, r3
 801c986:	3708      	adds	r7, #8
 801c988:	46bd      	mov	sp, r7
 801c98a:	bd80      	pop	{r7, pc}

0801c98c <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb>:

MockExpectedCall& MockCheckedExpectedCall::withBoolParameter(const SimpleString& name, bool value)
{
 801c98c:	b590      	push	{r4, r7, lr}
 801c98e:	b087      	sub	sp, #28
 801c990:	af00      	add	r7, sp, #0
 801c992:	60f8      	str	r0, [r7, #12]
 801c994:	60b9      	str	r1, [r7, #8]
 801c996:	4613      	mov	r3, r2
 801c998:	71fb      	strb	r3, [r7, #7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801c99a:	225a      	movs	r2, #90	; 0x5a
 801c99c:	490e      	ldr	r1, [pc, #56]	; (801c9d8 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb+0x4c>)
 801c99e:	2038      	movs	r0, #56	; 0x38
 801c9a0:	f7ef fec0 	bl	800c724 <_ZnwjPKci>
 801c9a4:	4604      	mov	r4, r0
 801c9a6:	68b9      	ldr	r1, [r7, #8]
 801c9a8:	4620      	mov	r0, r4
 801c9aa:	f001 f851 	bl	801da50 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801c9ae:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801c9b0:	68fb      	ldr	r3, [r7, #12]
 801c9b2:	69db      	ldr	r3, [r3, #28]
 801c9b4:	6979      	ldr	r1, [r7, #20]
 801c9b6:	4618      	mov	r0, r3
 801c9b8:	f004 fee0 	bl	802177c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801c9bc:	697b      	ldr	r3, [r7, #20]
 801c9be:	681b      	ldr	r3, [r3, #0]
 801c9c0:	3308      	adds	r3, #8
 801c9c2:	681b      	ldr	r3, [r3, #0]
 801c9c4:	79fa      	ldrb	r2, [r7, #7]
 801c9c6:	4611      	mov	r1, r2
 801c9c8:	6978      	ldr	r0, [r7, #20]
 801c9ca:	4798      	blx	r3
    return *this;
 801c9cc:	68fb      	ldr	r3, [r7, #12]
}
 801c9ce:	4618      	mov	r0, r3
 801c9d0:	371c      	adds	r7, #28
 801c9d2:	46bd      	mov	sp, r7
 801c9d4:	bd90      	pop	{r4, r7, pc}
 801c9d6:	bf00      	nop
 801c9d8:	08028bc0 	.word	0x08028bc0

0801c9dc <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 801c9dc:	b590      	push	{r4, r7, lr}
 801c9de:	b087      	sub	sp, #28
 801c9e0:	af00      	add	r7, sp, #0
 801c9e2:	60f8      	str	r0, [r7, #12]
 801c9e4:	60b9      	str	r1, [r7, #8]
 801c9e6:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801c9e8:	2262      	movs	r2, #98	; 0x62
 801c9ea:	490e      	ldr	r1, [pc, #56]	; (801ca24 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj+0x48>)
 801c9ec:	2038      	movs	r0, #56	; 0x38
 801c9ee:	f7ef fe99 	bl	800c724 <_ZnwjPKci>
 801c9f2:	4604      	mov	r4, r0
 801c9f4:	68b9      	ldr	r1, [r7, #8]
 801c9f6:	4620      	mov	r0, r4
 801c9f8:	f001 f82a 	bl	801da50 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801c9fc:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801c9fe:	68fb      	ldr	r3, [r7, #12]
 801ca00:	69db      	ldr	r3, [r3, #28]
 801ca02:	6979      	ldr	r1, [r7, #20]
 801ca04:	4618      	mov	r0, r3
 801ca06:	f004 feb9 	bl	802177c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801ca0a:	697b      	ldr	r3, [r7, #20]
 801ca0c:	681b      	ldr	r3, [r3, #0]
 801ca0e:	3310      	adds	r3, #16
 801ca10:	681b      	ldr	r3, [r3, #0]
 801ca12:	6879      	ldr	r1, [r7, #4]
 801ca14:	6978      	ldr	r0, [r7, #20]
 801ca16:	4798      	blx	r3
    return *this;
 801ca18:	68fb      	ldr	r3, [r7, #12]
}
 801ca1a:	4618      	mov	r0, r3
 801ca1c:	371c      	adds	r7, #28
 801ca1e:	46bd      	mov	sp, r7
 801ca20:	bd90      	pop	{r4, r7, pc}
 801ca22:	bf00      	nop
 801ca24:	08028bc0 	.word	0x08028bc0

0801ca28 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi>:

MockExpectedCall& MockCheckedExpectedCall::withIntParameter(const SimpleString& name, int value)
{
 801ca28:	b590      	push	{r4, r7, lr}
 801ca2a:	b087      	sub	sp, #28
 801ca2c:	af00      	add	r7, sp, #0
 801ca2e:	60f8      	str	r0, [r7, #12]
 801ca30:	60b9      	str	r1, [r7, #8]
 801ca32:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801ca34:	226a      	movs	r2, #106	; 0x6a
 801ca36:	490e      	ldr	r1, [pc, #56]	; (801ca70 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi+0x48>)
 801ca38:	2038      	movs	r0, #56	; 0x38
 801ca3a:	f7ef fe73 	bl	800c724 <_ZnwjPKci>
 801ca3e:	4604      	mov	r4, r0
 801ca40:	68b9      	ldr	r1, [r7, #8]
 801ca42:	4620      	mov	r0, r4
 801ca44:	f001 f804 	bl	801da50 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801ca48:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801ca4a:	68fb      	ldr	r3, [r7, #12]
 801ca4c:	69db      	ldr	r3, [r3, #28]
 801ca4e:	6979      	ldr	r1, [r7, #20]
 801ca50:	4618      	mov	r0, r3
 801ca52:	f004 fe93 	bl	802177c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801ca56:	697b      	ldr	r3, [r7, #20]
 801ca58:	681b      	ldr	r3, [r3, #0]
 801ca5a:	330c      	adds	r3, #12
 801ca5c:	681b      	ldr	r3, [r3, #0]
 801ca5e:	6879      	ldr	r1, [r7, #4]
 801ca60:	6978      	ldr	r0, [r7, #20]
 801ca62:	4798      	blx	r3
    return *this;
 801ca64:	68fb      	ldr	r3, [r7, #12]
}
 801ca66:	4618      	mov	r0, r3
 801ca68:	371c      	adds	r7, #28
 801ca6a:	46bd      	mov	sp, r7
 801ca6c:	bd90      	pop	{r4, r7, pc}
 801ca6e:	bf00      	nop
 801ca70:	08028bc0 	.word	0x08028bc0

0801ca74 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl>:

MockExpectedCall& MockCheckedExpectedCall::withLongIntParameter(const SimpleString& name, long int value)
{
 801ca74:	b590      	push	{r4, r7, lr}
 801ca76:	b087      	sub	sp, #28
 801ca78:	af00      	add	r7, sp, #0
 801ca7a:	60f8      	str	r0, [r7, #12]
 801ca7c:	60b9      	str	r1, [r7, #8]
 801ca7e:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801ca80:	2272      	movs	r2, #114	; 0x72
 801ca82:	490e      	ldr	r1, [pc, #56]	; (801cabc <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl+0x48>)
 801ca84:	2038      	movs	r0, #56	; 0x38
 801ca86:	f7ef fe4d 	bl	800c724 <_ZnwjPKci>
 801ca8a:	4604      	mov	r4, r0
 801ca8c:	68b9      	ldr	r1, [r7, #8]
 801ca8e:	4620      	mov	r0, r4
 801ca90:	f000 ffde 	bl	801da50 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801ca94:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801ca96:	68fb      	ldr	r3, [r7, #12]
 801ca98:	69db      	ldr	r3, [r3, #28]
 801ca9a:	6979      	ldr	r1, [r7, #20]
 801ca9c:	4618      	mov	r0, r3
 801ca9e:	f004 fe6d 	bl	802177c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801caa2:	697b      	ldr	r3, [r7, #20]
 801caa4:	681b      	ldr	r3, [r3, #0]
 801caa6:	3314      	adds	r3, #20
 801caa8:	681b      	ldr	r3, [r3, #0]
 801caaa:	6879      	ldr	r1, [r7, #4]
 801caac:	6978      	ldr	r0, [r7, #20]
 801caae:	4798      	blx	r3
    return *this;
 801cab0:	68fb      	ldr	r3, [r7, #12]
}
 801cab2:	4618      	mov	r0, r3
 801cab4:	371c      	adds	r7, #28
 801cab6:	46bd      	mov	sp, r7
 801cab8:	bd90      	pop	{r4, r7, pc}
 801caba:	bf00      	nop
 801cabc:	08028bc0 	.word	0x08028bc0

0801cac0 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 801cac0:	b590      	push	{r4, r7, lr}
 801cac2:	b087      	sub	sp, #28
 801cac4:	af00      	add	r7, sp, #0
 801cac6:	60f8      	str	r0, [r7, #12]
 801cac8:	60b9      	str	r1, [r7, #8]
 801caca:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801cacc:	227a      	movs	r2, #122	; 0x7a
 801cace:	490e      	ldr	r1, [pc, #56]	; (801cb08 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm+0x48>)
 801cad0:	2038      	movs	r0, #56	; 0x38
 801cad2:	f7ef fe27 	bl	800c724 <_ZnwjPKci>
 801cad6:	4604      	mov	r4, r0
 801cad8:	68b9      	ldr	r1, [r7, #8]
 801cada:	4620      	mov	r0, r4
 801cadc:	f000 ffb8 	bl	801da50 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801cae0:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801cae2:	68fb      	ldr	r3, [r7, #12]
 801cae4:	69db      	ldr	r3, [r3, #28]
 801cae6:	6979      	ldr	r1, [r7, #20]
 801cae8:	4618      	mov	r0, r3
 801caea:	f004 fe47 	bl	802177c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801caee:	697b      	ldr	r3, [r7, #20]
 801caf0:	681b      	ldr	r3, [r3, #0]
 801caf2:	3318      	adds	r3, #24
 801caf4:	681b      	ldr	r3, [r3, #0]
 801caf6:	6879      	ldr	r1, [r7, #4]
 801caf8:	6978      	ldr	r0, [r7, #20]
 801cafa:	4798      	blx	r3
    return *this;
 801cafc:	68fb      	ldr	r3, [r7, #12]
}
 801cafe:	4618      	mov	r0, r3
 801cb00:	371c      	adds	r7, #28
 801cb02:	46bd      	mov	sp, r7
 801cb04:	bd90      	pop	{r4, r7, pc}
 801cb06:	bf00      	nop
 801cb08:	08028bc0 	.word	0x08028bc0

0801cb0c <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 801cb0c:	b5b0      	push	{r4, r5, r7, lr}
 801cb0e:	b086      	sub	sp, #24
 801cb10:	af02      	add	r7, sp, #8
 801cb12:	60f8      	str	r0, [r7, #12]
 801cb14:	60b9      	str	r1, [r7, #8]
 801cb16:	4639      	mov	r1, r7
 801cb18:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801cb1c:	f7f9 fda8 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 801cb20:	4604      	mov	r4, r0
 801cb22:	6823      	ldr	r3, [r4, #0]
 801cb24:	3368      	adds	r3, #104	; 0x68
 801cb26:	681d      	ldr	r5, [r3, #0]
 801cb28:	f7f9 fdb2 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801cb2c:	4603      	mov	r3, r0
 801cb2e:	9300      	str	r3, [sp, #0]
 801cb30:	2396      	movs	r3, #150	; 0x96
 801cb32:	4a04      	ldr	r2, [pc, #16]	; (801cb44 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x38>)
 801cb34:	4904      	ldr	r1, [pc, #16]	; (801cb48 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801cb36:	4620      	mov	r0, r4
 801cb38:	47a8      	blx	r5
    return *this;
 801cb3a:	68fb      	ldr	r3, [r7, #12]
}
 801cb3c:	4618      	mov	r0, r3
 801cb3e:	3710      	adds	r7, #16
 801cb40:	46bd      	mov	sp, r7
 801cb42:	bdb0      	pop	{r4, r5, r7, pc}
 801cb44:	08028bc0 	.word	0x08028bc0
 801cb48:	08028bdc 	.word	0x08028bdc

0801cb4c <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 801cb4c:	b5b0      	push	{r4, r5, r7, lr}
 801cb4e:	b086      	sub	sp, #24
 801cb50:	af02      	add	r7, sp, #8
 801cb52:	60f8      	str	r0, [r7, #12]
 801cb54:	60b9      	str	r1, [r7, #8]
 801cb56:	4639      	mov	r1, r7
 801cb58:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801cb5c:	f7f9 fd88 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 801cb60:	4604      	mov	r4, r0
 801cb62:	6823      	ldr	r3, [r4, #0]
 801cb64:	3368      	adds	r3, #104	; 0x68
 801cb66:	681d      	ldr	r5, [r3, #0]
 801cb68:	f7f9 fd92 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801cb6c:	4603      	mov	r3, r0
 801cb6e:	9300      	str	r3, [sp, #0]
 801cb70:	239c      	movs	r3, #156	; 0x9c
 801cb72:	4a04      	ldr	r2, [pc, #16]	; (801cb84 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x38>)
 801cb74:	4904      	ldr	r1, [pc, #16]	; (801cb88 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 801cb76:	4620      	mov	r0, r4
 801cb78:	47a8      	blx	r5
    return *this;
 801cb7a:	68fb      	ldr	r3, [r7, #12]
}
 801cb7c:	4618      	mov	r0, r3
 801cb7e:	3710      	adds	r7, #16
 801cb80:	46bd      	mov	sp, r7
 801cb82:	bdb0      	pop	{r4, r5, r7, pc}
 801cb84:	08028bc0 	.word	0x08028bc0
 801cb88:	08028bfc 	.word	0x08028bfc

0801cb8c <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value)
{
 801cb8c:	b590      	push	{r4, r7, lr}
 801cb8e:	b087      	sub	sp, #28
 801cb90:	af00      	add	r7, sp, #0
 801cb92:	60f8      	str	r0, [r7, #12]
 801cb94:	60b9      	str	r1, [r7, #8]
 801cb96:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801cb9a:	22a4      	movs	r2, #164	; 0xa4
 801cb9c:	490e      	ldr	r1, [pc, #56]	; (801cbd8 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd+0x4c>)
 801cb9e:	2038      	movs	r0, #56	; 0x38
 801cba0:	f7ef fdc0 	bl	800c724 <_ZnwjPKci>
 801cba4:	4604      	mov	r4, r0
 801cba6:	68b9      	ldr	r1, [r7, #8]
 801cba8:	4620      	mov	r0, r4
 801cbaa:	f000 ff51 	bl	801da50 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801cbae:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801cbb0:	68fb      	ldr	r3, [r7, #12]
 801cbb2:	69db      	ldr	r3, [r3, #28]
 801cbb4:	6979      	ldr	r1, [r7, #20]
 801cbb6:	4618      	mov	r0, r3
 801cbb8:	f004 fde0 	bl	802177c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801cbbc:	697b      	ldr	r3, [r7, #20]
 801cbbe:	681b      	ldr	r3, [r3, #0]
 801cbc0:	3324      	adds	r3, #36	; 0x24
 801cbc2:	681b      	ldr	r3, [r3, #0]
 801cbc4:	ed97 0b00 	vldr	d0, [r7]
 801cbc8:	6978      	ldr	r0, [r7, #20]
 801cbca:	4798      	blx	r3
    return *this;
 801cbcc:	68fb      	ldr	r3, [r7, #12]
}
 801cbce:	4618      	mov	r0, r3
 801cbd0:	371c      	adds	r7, #28
 801cbd2:	46bd      	mov	sp, r7
 801cbd4:	bd90      	pop	{r4, r7, pc}
 801cbd6:	bf00      	nop
 801cbd8:	08028bc0 	.word	0x08028bc0

0801cbdc <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd>:

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value, double tolerance)
{
 801cbdc:	b590      	push	{r4, r7, lr}
 801cbde:	b089      	sub	sp, #36	; 0x24
 801cbe0:	af00      	add	r7, sp, #0
 801cbe2:	6178      	str	r0, [r7, #20]
 801cbe4:	6139      	str	r1, [r7, #16]
 801cbe6:	ed87 0b02 	vstr	d0, [r7, #8]
 801cbea:	ed87 1b00 	vstr	d1, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801cbee:	22ac      	movs	r2, #172	; 0xac
 801cbf0:	490f      	ldr	r1, [pc, #60]	; (801cc30 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd+0x54>)
 801cbf2:	2038      	movs	r0, #56	; 0x38
 801cbf4:	f7ef fd96 	bl	800c724 <_ZnwjPKci>
 801cbf8:	4604      	mov	r4, r0
 801cbfa:	6939      	ldr	r1, [r7, #16]
 801cbfc:	4620      	mov	r0, r4
 801cbfe:	f000 ff27 	bl	801da50 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801cc02:	61fc      	str	r4, [r7, #28]
    inputParameters_->add(newParameter);
 801cc04:	697b      	ldr	r3, [r7, #20]
 801cc06:	69db      	ldr	r3, [r3, #28]
 801cc08:	69f9      	ldr	r1, [r7, #28]
 801cc0a:	4618      	mov	r0, r3
 801cc0c:	f004 fdb6 	bl	802177c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value, tolerance);
 801cc10:	69fb      	ldr	r3, [r7, #28]
 801cc12:	681b      	ldr	r3, [r3, #0]
 801cc14:	3328      	adds	r3, #40	; 0x28
 801cc16:	681b      	ldr	r3, [r3, #0]
 801cc18:	ed97 1b00 	vldr	d1, [r7]
 801cc1c:	ed97 0b02 	vldr	d0, [r7, #8]
 801cc20:	69f8      	ldr	r0, [r7, #28]
 801cc22:	4798      	blx	r3
    return *this;
 801cc24:	697b      	ldr	r3, [r7, #20]
}
 801cc26:	4618      	mov	r0, r3
 801cc28:	3724      	adds	r7, #36	; 0x24
 801cc2a:	46bd      	mov	sp, r7
 801cc2c:	bd90      	pop	{r4, r7, pc}
 801cc2e:	bf00      	nop
 801cc30:	08028bc0 	.word	0x08028bc0

0801cc34 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc>:

MockExpectedCall& MockCheckedExpectedCall::withStringParameter(const SimpleString& name, const char* value)
{
 801cc34:	b590      	push	{r4, r7, lr}
 801cc36:	b087      	sub	sp, #28
 801cc38:	af00      	add	r7, sp, #0
 801cc3a:	60f8      	str	r0, [r7, #12]
 801cc3c:	60b9      	str	r1, [r7, #8]
 801cc3e:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801cc40:	22b4      	movs	r2, #180	; 0xb4
 801cc42:	490e      	ldr	r1, [pc, #56]	; (801cc7c <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc+0x48>)
 801cc44:	2038      	movs	r0, #56	; 0x38
 801cc46:	f7ef fd6d 	bl	800c724 <_ZnwjPKci>
 801cc4a:	4604      	mov	r4, r0
 801cc4c:	68b9      	ldr	r1, [r7, #8]
 801cc4e:	4620      	mov	r0, r4
 801cc50:	f000 fefe 	bl	801da50 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801cc54:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801cc56:	68fb      	ldr	r3, [r7, #12]
 801cc58:	69db      	ldr	r3, [r3, #28]
 801cc5a:	6979      	ldr	r1, [r7, #20]
 801cc5c:	4618      	mov	r0, r3
 801cc5e:	f004 fd8d 	bl	802177c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801cc62:	697b      	ldr	r3, [r7, #20]
 801cc64:	681b      	ldr	r3, [r3, #0]
 801cc66:	3338      	adds	r3, #56	; 0x38
 801cc68:	681b      	ldr	r3, [r3, #0]
 801cc6a:	6879      	ldr	r1, [r7, #4]
 801cc6c:	6978      	ldr	r0, [r7, #20]
 801cc6e:	4798      	blx	r3
    return *this;
 801cc70:	68fb      	ldr	r3, [r7, #12]
}
 801cc72:	4618      	mov	r0, r3
 801cc74:	371c      	adds	r7, #28
 801cc76:	46bd      	mov	sp, r7
 801cc78:	bd90      	pop	{r4, r7, pc}
 801cc7a:	bf00      	nop
 801cc7c:	08028bc0 	.word	0x08028bc0

0801cc80 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv>:

MockExpectedCall& MockCheckedExpectedCall::withPointerParameter(const SimpleString& name, void* value)
{
 801cc80:	b590      	push	{r4, r7, lr}
 801cc82:	b087      	sub	sp, #28
 801cc84:	af00      	add	r7, sp, #0
 801cc86:	60f8      	str	r0, [r7, #12]
 801cc88:	60b9      	str	r1, [r7, #8]
 801cc8a:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801cc8c:	22bc      	movs	r2, #188	; 0xbc
 801cc8e:	490e      	ldr	r1, [pc, #56]	; (801ccc8 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv+0x48>)
 801cc90:	2038      	movs	r0, #56	; 0x38
 801cc92:	f7ef fd47 	bl	800c724 <_ZnwjPKci>
 801cc96:	4604      	mov	r4, r0
 801cc98:	68b9      	ldr	r1, [r7, #8]
 801cc9a:	4620      	mov	r0, r4
 801cc9c:	f000 fed8 	bl	801da50 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801cca0:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801cca2:	68fb      	ldr	r3, [r7, #12]
 801cca4:	69db      	ldr	r3, [r3, #28]
 801cca6:	6979      	ldr	r1, [r7, #20]
 801cca8:	4618      	mov	r0, r3
 801ccaa:	f004 fd67 	bl	802177c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801ccae:	697b      	ldr	r3, [r7, #20]
 801ccb0:	681b      	ldr	r3, [r3, #0]
 801ccb2:	332c      	adds	r3, #44	; 0x2c
 801ccb4:	681b      	ldr	r3, [r3, #0]
 801ccb6:	6879      	ldr	r1, [r7, #4]
 801ccb8:	6978      	ldr	r0, [r7, #20]
 801ccba:	4798      	blx	r3
    return *this;
 801ccbc:	68fb      	ldr	r3, [r7, #12]
}
 801ccbe:	4618      	mov	r0, r3
 801ccc0:	371c      	adds	r7, #28
 801ccc2:	46bd      	mov	sp, r7
 801ccc4:	bd90      	pop	{r4, r7, pc}
 801ccc6:	bf00      	nop
 801ccc8:	08028bc0 	.word	0x08028bc0

0801cccc <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:

MockExpectedCall& MockCheckedExpectedCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 801cccc:	b590      	push	{r4, r7, lr}
 801ccce:	b087      	sub	sp, #28
 801ccd0:	af00      	add	r7, sp, #0
 801ccd2:	60f8      	str	r0, [r7, #12]
 801ccd4:	60b9      	str	r1, [r7, #8]
 801ccd6:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801ccd8:	22c4      	movs	r2, #196	; 0xc4
 801ccda:	490e      	ldr	r1, [pc, #56]	; (801cd14 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv+0x48>)
 801ccdc:	2038      	movs	r0, #56	; 0x38
 801ccde:	f7ef fd21 	bl	800c724 <_ZnwjPKci>
 801cce2:	4604      	mov	r4, r0
 801cce4:	68b9      	ldr	r1, [r7, #8]
 801cce6:	4620      	mov	r0, r4
 801cce8:	f000 feb2 	bl	801da50 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801ccec:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801ccee:	68fb      	ldr	r3, [r7, #12]
 801ccf0:	69db      	ldr	r3, [r3, #28]
 801ccf2:	6979      	ldr	r1, [r7, #20]
 801ccf4:	4618      	mov	r0, r3
 801ccf6:	f004 fd41 	bl	802177c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801ccfa:	697b      	ldr	r3, [r7, #20]
 801ccfc:	681b      	ldr	r3, [r3, #0]
 801ccfe:	3330      	adds	r3, #48	; 0x30
 801cd00:	681b      	ldr	r3, [r3, #0]
 801cd02:	6879      	ldr	r1, [r7, #4]
 801cd04:	6978      	ldr	r0, [r7, #20]
 801cd06:	4798      	blx	r3
    return *this;
 801cd08:	68fb      	ldr	r3, [r7, #12]
}
 801cd0a:	4618      	mov	r0, r3
 801cd0c:	371c      	adds	r7, #28
 801cd0e:	46bd      	mov	sp, r7
 801cd10:	bd90      	pop	{r4, r7, pc}
 801cd12:	bf00      	nop
 801cd14:	08028bc0 	.word	0x08028bc0

0801cd18 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 801cd18:	b590      	push	{r4, r7, lr}
 801cd1a:	b087      	sub	sp, #28
 801cd1c:	af00      	add	r7, sp, #0
 801cd1e:	60f8      	str	r0, [r7, #12]
 801cd20:	60b9      	str	r1, [r7, #8]
 801cd22:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801cd24:	22cc      	movs	r2, #204	; 0xcc
 801cd26:	490e      	ldr	r1, [pc, #56]	; (801cd60 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE+0x48>)
 801cd28:	2038      	movs	r0, #56	; 0x38
 801cd2a:	f7ef fcfb 	bl	800c724 <_ZnwjPKci>
 801cd2e:	4604      	mov	r4, r0
 801cd30:	68b9      	ldr	r1, [r7, #8]
 801cd32:	4620      	mov	r0, r4
 801cd34:	f000 fe8c 	bl	801da50 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801cd38:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801cd3a:	68fb      	ldr	r3, [r7, #12]
 801cd3c:	69db      	ldr	r3, [r3, #28]
 801cd3e:	6979      	ldr	r1, [r7, #20]
 801cd40:	4618      	mov	r0, r3
 801cd42:	f004 fd1b 	bl	802177c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801cd46:	697b      	ldr	r3, [r7, #20]
 801cd48:	681b      	ldr	r3, [r3, #0]
 801cd4a:	3334      	adds	r3, #52	; 0x34
 801cd4c:	681b      	ldr	r3, [r3, #0]
 801cd4e:	6879      	ldr	r1, [r7, #4]
 801cd50:	6978      	ldr	r0, [r7, #20]
 801cd52:	4798      	blx	r3
    return *this;
 801cd54:	68fb      	ldr	r3, [r7, #12]
}
 801cd56:	4618      	mov	r0, r3
 801cd58:	371c      	adds	r7, #28
 801cd5a:	46bd      	mov	sp, r7
 801cd5c:	bd90      	pop	{r4, r7, pc}
 801cd5e:	bf00      	nop
 801cd60:	08028bc0 	.word	0x08028bc0

0801cd64 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockExpectedCall& MockCheckedExpectedCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 801cd64:	b590      	push	{r4, r7, lr}
 801cd66:	b087      	sub	sp, #28
 801cd68:	af00      	add	r7, sp, #0
 801cd6a:	60f8      	str	r0, [r7, #12]
 801cd6c:	60b9      	str	r1, [r7, #8]
 801cd6e:	607a      	str	r2, [r7, #4]
 801cd70:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801cd72:	22d4      	movs	r2, #212	; 0xd4
 801cd74:	490e      	ldr	r1, [pc, #56]	; (801cdb0 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj+0x4c>)
 801cd76:	2038      	movs	r0, #56	; 0x38
 801cd78:	f7ef fcd4 	bl	800c724 <_ZnwjPKci>
 801cd7c:	4604      	mov	r4, r0
 801cd7e:	68b9      	ldr	r1, [r7, #8]
 801cd80:	4620      	mov	r0, r4
 801cd82:	f000 fe65 	bl	801da50 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801cd86:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801cd88:	68fb      	ldr	r3, [r7, #12]
 801cd8a:	69db      	ldr	r3, [r3, #28]
 801cd8c:	6979      	ldr	r1, [r7, #20]
 801cd8e:	4618      	mov	r0, r3
 801cd90:	f004 fcf4 	bl	802177c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setMemoryBuffer(value, size);
 801cd94:	697b      	ldr	r3, [r7, #20]
 801cd96:	681b      	ldr	r3, [r3, #0]
 801cd98:	333c      	adds	r3, #60	; 0x3c
 801cd9a:	681b      	ldr	r3, [r3, #0]
 801cd9c:	683a      	ldr	r2, [r7, #0]
 801cd9e:	6879      	ldr	r1, [r7, #4]
 801cda0:	6978      	ldr	r0, [r7, #20]
 801cda2:	4798      	blx	r3
    return *this;
 801cda4:	68fb      	ldr	r3, [r7, #12]
}
 801cda6:	4618      	mov	r0, r3
 801cda8:	371c      	adds	r7, #28
 801cdaa:	46bd      	mov	sp, r7
 801cdac:	bd90      	pop	{r4, r7, pc}
 801cdae:	bf00      	nop
 801cdb0:	08028bc0 	.word	0x08028bc0

0801cdb4 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 801cdb4:	b590      	push	{r4, r7, lr}
 801cdb6:	b087      	sub	sp, #28
 801cdb8:	af00      	add	r7, sp, #0
 801cdba:	60f8      	str	r0, [r7, #12]
 801cdbc:	60b9      	str	r1, [r7, #8]
 801cdbe:	607a      	str	r2, [r7, #4]
 801cdc0:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801cdc2:	22dc      	movs	r2, #220	; 0xdc
 801cdc4:	490e      	ldr	r1, [pc, #56]	; (801ce00 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x4c>)
 801cdc6:	2038      	movs	r0, #56	; 0x38
 801cdc8:	f7ef fcac 	bl	800c724 <_ZnwjPKci>
 801cdcc:	4604      	mov	r4, r0
 801cdce:	6879      	ldr	r1, [r7, #4]
 801cdd0:	4620      	mov	r0, r4
 801cdd2:	f000 fe3d 	bl	801da50 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801cdd6:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801cdd8:	68fb      	ldr	r3, [r7, #12]
 801cdda:	69db      	ldr	r3, [r3, #28]
 801cddc:	6979      	ldr	r1, [r7, #20]
 801cdde:	4618      	mov	r0, r3
 801cde0:	f004 fccc 	bl	802177c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 801cde4:	697b      	ldr	r3, [r7, #20]
 801cde6:	681b      	ldr	r3, [r3, #0]
 801cde8:	3340      	adds	r3, #64	; 0x40
 801cdea:	681b      	ldr	r3, [r3, #0]
 801cdec:	683a      	ldr	r2, [r7, #0]
 801cdee:	68b9      	ldr	r1, [r7, #8]
 801cdf0:	6978      	ldr	r0, [r7, #20]
 801cdf2:	4798      	blx	r3
    return *this;
 801cdf4:	68fb      	ldr	r3, [r7, #12]
}
 801cdf6:	4618      	mov	r0, r3
 801cdf8:	371c      	adds	r7, #28
 801cdfa:	46bd      	mov	sp, r7
 801cdfc:	bd90      	pop	{r4, r7, pc}
 801cdfe:	bf00      	nop
 801ce00:	08028bc0 	.word	0x08028bc0

0801ce04 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterReturning(const SimpleString& name, const void* value, size_t size)
{
 801ce04:	b590      	push	{r4, r7, lr}
 801ce06:	b087      	sub	sp, #28
 801ce08:	af00      	add	r7, sp, #0
 801ce0a:	60f8      	str	r0, [r7, #12]
 801ce0c:	60b9      	str	r1, [r7, #8]
 801ce0e:	607a      	str	r2, [r7, #4]
 801ce10:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801ce12:	22e4      	movs	r2, #228	; 0xe4
 801ce14:	4911      	ldr	r1, [pc, #68]	; (801ce5c <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj+0x58>)
 801ce16:	2038      	movs	r0, #56	; 0x38
 801ce18:	f7ef fc84 	bl	800c724 <_ZnwjPKci>
 801ce1c:	4604      	mov	r4, r0
 801ce1e:	68b9      	ldr	r1, [r7, #8]
 801ce20:	4620      	mov	r0, r4
 801ce22:	f000 fe15 	bl	801da50 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801ce26:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 801ce28:	68fb      	ldr	r3, [r7, #12]
 801ce2a:	6a1b      	ldr	r3, [r3, #32]
 801ce2c:	6979      	ldr	r1, [r7, #20]
 801ce2e:	4618      	mov	r0, r3
 801ce30:	f004 fca4 	bl	802177c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801ce34:	697b      	ldr	r3, [r7, #20]
 801ce36:	681b      	ldr	r3, [r3, #0]
 801ce38:	3330      	adds	r3, #48	; 0x30
 801ce3a:	681b      	ldr	r3, [r3, #0]
 801ce3c:	6879      	ldr	r1, [r7, #4]
 801ce3e:	6978      	ldr	r0, [r7, #20]
 801ce40:	4798      	blx	r3
    newParameter->setSize(size);
 801ce42:	697b      	ldr	r3, [r7, #20]
 801ce44:	681b      	ldr	r3, [r3, #0]
 801ce46:	3348      	adds	r3, #72	; 0x48
 801ce48:	681b      	ldr	r3, [r3, #0]
 801ce4a:	6839      	ldr	r1, [r7, #0]
 801ce4c:	6978      	ldr	r0, [r7, #20]
 801ce4e:	4798      	blx	r3
    return *this;
 801ce50:	68fb      	ldr	r3, [r7, #12]
}
 801ce52:	4618      	mov	r0, r3
 801ce54:	371c      	adds	r7, #28
 801ce56:	46bd      	mov	sp, r7
 801ce58:	bd90      	pop	{r4, r7, pc}
 801ce5a:	bf00      	nop
 801ce5c:	08028bc0 	.word	0x08028bc0

0801ce60 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterOfTypeReturning(const SimpleString& type, const SimpleString& name, const void* value)
{
 801ce60:	b590      	push	{r4, r7, lr}
 801ce62:	b087      	sub	sp, #28
 801ce64:	af00      	add	r7, sp, #0
 801ce66:	60f8      	str	r0, [r7, #12]
 801ce68:	60b9      	str	r1, [r7, #8]
 801ce6a:	607a      	str	r2, [r7, #4]
 801ce6c:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801ce6e:	22ed      	movs	r2, #237	; 0xed
 801ce70:	490e      	ldr	r1, [pc, #56]	; (801ceac <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv+0x4c>)
 801ce72:	2038      	movs	r0, #56	; 0x38
 801ce74:	f7ef fc56 	bl	800c724 <_ZnwjPKci>
 801ce78:	4604      	mov	r4, r0
 801ce7a:	6879      	ldr	r1, [r7, #4]
 801ce7c:	4620      	mov	r0, r4
 801ce7e:	f000 fde7 	bl	801da50 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801ce82:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 801ce84:	68fb      	ldr	r3, [r7, #12]
 801ce86:	6a1b      	ldr	r3, [r3, #32]
 801ce88:	6979      	ldr	r1, [r7, #20]
 801ce8a:	4618      	mov	r0, r3
 801ce8c:	f004 fc76 	bl	802177c <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 801ce90:	697b      	ldr	r3, [r7, #20]
 801ce92:	681b      	ldr	r3, [r3, #0]
 801ce94:	3340      	adds	r3, #64	; 0x40
 801ce96:	681b      	ldr	r3, [r3, #0]
 801ce98:	683a      	ldr	r2, [r7, #0]
 801ce9a:	68b9      	ldr	r1, [r7, #8]
 801ce9c:	6978      	ldr	r0, [r7, #20]
 801ce9e:	4798      	blx	r3
    return *this;
 801cea0:	68fb      	ldr	r3, [r7, #12]
}
 801cea2:	4618      	mov	r0, r3
 801cea4:	371c      	adds	r7, #28
 801cea6:	46bd      	mov	sp, r7
 801cea8:	bd90      	pop	{r4, r7, pc}
 801ceaa:	bf00      	nop
 801ceac:	08028bc0 	.word	0x08028bc0

0801ceb0 <_ZN23MockCheckedExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withUnmodifiedOutputParameter(const SimpleString& name)
{
 801ceb0:	b590      	push	{r4, r7, lr}
 801ceb2:	b083      	sub	sp, #12
 801ceb4:	af00      	add	r7, sp, #0
 801ceb6:	6078      	str	r0, [r7, #4]
 801ceb8:	6039      	str	r1, [r7, #0]
    return withOutputParameterReturning(name, NULLPTR, 0);
 801ceba:	687b      	ldr	r3, [r7, #4]
 801cebc:	681b      	ldr	r3, [r3, #0]
 801cebe:	3318      	adds	r3, #24
 801cec0:	681c      	ldr	r4, [r3, #0]
 801cec2:	2300      	movs	r3, #0
 801cec4:	2200      	movs	r2, #0
 801cec6:	6839      	ldr	r1, [r7, #0]
 801cec8:	6878      	ldr	r0, [r7, #4]
 801ceca:	47a0      	blx	r4
 801cecc:	4603      	mov	r3, r0
}
 801cece:	4618      	mov	r0, r3
 801ced0:	370c      	adds	r7, #12
 801ced2:	46bd      	mov	sp, r7
 801ced4:	bd90      	pop	{r4, r7, pc}
	...

0801ced8 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterType(const SimpleString& name)
{
 801ced8:	b580      	push	{r7, lr}
 801ceda:	b086      	sub	sp, #24
 801cedc:	af00      	add	r7, sp, #0
 801cede:	60f8      	str	r0, [r7, #12]
 801cee0:	60b9      	str	r1, [r7, #8]
 801cee2:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801cee4:	68bb      	ldr	r3, [r7, #8]
 801cee6:	69db      	ldr	r3, [r3, #28]
 801cee8:	6879      	ldr	r1, [r7, #4]
 801ceea:	4618      	mov	r0, r3
 801ceec:	f004 fc7c 	bl	80217e8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801cef0:	6178      	str	r0, [r7, #20]
    return (p) ? p->getType() : StringFrom("");
 801cef2:	697b      	ldr	r3, [r7, #20]
 801cef4:	2b00      	cmp	r3, #0
 801cef6:	d008      	beq.n	801cf0a <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x32>
 801cef8:	697b      	ldr	r3, [r7, #20]
 801cefa:	681b      	ldr	r3, [r3, #0]
 801cefc:	3360      	adds	r3, #96	; 0x60
 801cefe:	681b      	ldr	r3, [r3, #0]
 801cf00:	68fa      	ldr	r2, [r7, #12]
 801cf02:	6979      	ldr	r1, [r7, #20]
 801cf04:	4610      	mov	r0, r2
 801cf06:	4798      	blx	r3
 801cf08:	e004      	b.n	801cf14 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x3c>
 801cf0a:	68fb      	ldr	r3, [r7, #12]
 801cf0c:	4903      	ldr	r1, [pc, #12]	; (801cf1c <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x44>)
 801cf0e:	4618      	mov	r0, r3
 801cf10:	f7f2 fe10 	bl	800fb34 <_Z10StringFromPKc>
}
 801cf14:	68f8      	ldr	r0, [r7, #12]
 801cf16:	3718      	adds	r7, #24
 801cf18:	46bd      	mov	sp, r7
 801cf1a:	bd80      	pop	{r7, pc}
 801cf1c:	08028bbc 	.word	0x08028bbc

0801cf20 <_ZN23MockCheckedExpectedCall25hasInputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasInputParameterWithName(const SimpleString& name)
{
 801cf20:	b580      	push	{r7, lr}
 801cf22:	b084      	sub	sp, #16
 801cf24:	af00      	add	r7, sp, #0
 801cf26:	6078      	str	r0, [r7, #4]
 801cf28:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801cf2a:	687b      	ldr	r3, [r7, #4]
 801cf2c:	69db      	ldr	r3, [r3, #28]
 801cf2e:	6839      	ldr	r1, [r7, #0]
 801cf30:	4618      	mov	r0, r3
 801cf32:	f004 fc59 	bl	80217e8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801cf36:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 801cf38:	68fb      	ldr	r3, [r7, #12]
 801cf3a:	2b00      	cmp	r3, #0
 801cf3c:	bf14      	ite	ne
 801cf3e:	2301      	movne	r3, #1
 801cf40:	2300      	moveq	r3, #0
 801cf42:	b2db      	uxtb	r3, r3
}
 801cf44:	4618      	mov	r0, r3
 801cf46:	3710      	adds	r7, #16
 801cf48:	46bd      	mov	sp, r7
 801cf4a:	bd80      	pop	{r7, pc}

0801cf4c <_ZN23MockCheckedExpectedCall26hasOutputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasOutputParameterWithName(const SimpleString& name)
{
 801cf4c:	b580      	push	{r7, lr}
 801cf4e:	b084      	sub	sp, #16
 801cf50:	af00      	add	r7, sp, #0
 801cf52:	6078      	str	r0, [r7, #4]
 801cf54:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 801cf56:	687b      	ldr	r3, [r7, #4]
 801cf58:	6a1b      	ldr	r3, [r3, #32]
 801cf5a:	6839      	ldr	r1, [r7, #0]
 801cf5c:	4618      	mov	r0, r3
 801cf5e:	f004 fc43 	bl	80217e8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801cf62:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 801cf64:	68fb      	ldr	r3, [r7, #12]
 801cf66:	2b00      	cmp	r3, #0
 801cf68:	bf14      	ite	ne
 801cf6a:	2301      	movne	r3, #1
 801cf6c:	2300      	moveq	r3, #0
 801cf6e:	b2db      	uxtb	r3, r3
}
 801cf70:	4618      	mov	r0, r3
 801cf72:	3710      	adds	r7, #16
 801cf74:	46bd      	mov	sp, r7
 801cf76:	bd80      	pop	{r7, pc}

0801cf78 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getInputParameter(const SimpleString& name)
{
 801cf78:	b590      	push	{r4, r7, lr}
 801cf7a:	b089      	sub	sp, #36	; 0x24
 801cf7c:	af00      	add	r7, sp, #0
 801cf7e:	60f8      	str	r0, [r7, #12]
 801cf80:	60b9      	str	r1, [r7, #8]
 801cf82:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801cf84:	68bb      	ldr	r3, [r7, #8]
 801cf86:	69db      	ldr	r3, [r3, #28]
 801cf88:	6879      	ldr	r1, [r7, #4]
 801cf8a:	4618      	mov	r0, r3
 801cf8c:	f004 fc2c 	bl	80217e8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801cf90:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 801cf92:	2400      	movs	r4, #0
 801cf94:	69fb      	ldr	r3, [r7, #28]
 801cf96:	2b00      	cmp	r3, #0
 801cf98:	d004      	beq.n	801cfa4 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x2c>
 801cf9a:	69f9      	ldr	r1, [r7, #28]
 801cf9c:	68f8      	ldr	r0, [r7, #12]
 801cf9e:	f7f0 f829 	bl	800cff4 <_ZN14MockNamedValueC1ERKS_>
 801cfa2:	e00c      	b.n	801cfbe <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x46>
 801cfa4:	f107 0314 	add.w	r3, r7, #20
 801cfa8:	490a      	ldr	r1, [pc, #40]	; (801cfd4 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x5c>)
 801cfaa:	4618      	mov	r0, r3
 801cfac:	f7f1 ff7d 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801cfb0:	2401      	movs	r4, #1
 801cfb2:	f107 0314 	add.w	r3, r7, #20
 801cfb6:	4619      	mov	r1, r3
 801cfb8:	68f8      	ldr	r0, [r7, #12]
 801cfba:	f002 fc9b 	bl	801f8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
 801cfbe:	2c00      	cmp	r4, #0
 801cfc0:	d004      	beq.n	801cfcc <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x54>
 801cfc2:	f107 0314 	add.w	r3, r7, #20
 801cfc6:	4618      	mov	r0, r3
 801cfc8:	f7f2 fb27 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 801cfcc:	68f8      	ldr	r0, [r7, #12]
 801cfce:	3724      	adds	r7, #36	; 0x24
 801cfd0:	46bd      	mov	sp, r7
 801cfd2:	bd90      	pop	{r4, r7, pc}
 801cfd4:	08028bbc 	.word	0x08028bbc

0801cfd8 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getOutputParameter(const SimpleString& name)
{
 801cfd8:	b590      	push	{r4, r7, lr}
 801cfda:	b089      	sub	sp, #36	; 0x24
 801cfdc:	af00      	add	r7, sp, #0
 801cfde:	60f8      	str	r0, [r7, #12]
 801cfe0:	60b9      	str	r1, [r7, #8]
 801cfe2:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 801cfe4:	68bb      	ldr	r3, [r7, #8]
 801cfe6:	6a1b      	ldr	r3, [r3, #32]
 801cfe8:	6879      	ldr	r1, [r7, #4]
 801cfea:	4618      	mov	r0, r3
 801cfec:	f004 fbfc 	bl	80217e8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801cff0:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 801cff2:	2400      	movs	r4, #0
 801cff4:	69fb      	ldr	r3, [r7, #28]
 801cff6:	2b00      	cmp	r3, #0
 801cff8:	d004      	beq.n	801d004 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x2c>
 801cffa:	69f9      	ldr	r1, [r7, #28]
 801cffc:	68f8      	ldr	r0, [r7, #12]
 801cffe:	f7ef fff9 	bl	800cff4 <_ZN14MockNamedValueC1ERKS_>
 801d002:	e00c      	b.n	801d01e <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x46>
 801d004:	f107 0314 	add.w	r3, r7, #20
 801d008:	490a      	ldr	r1, [pc, #40]	; (801d034 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x5c>)
 801d00a:	4618      	mov	r0, r3
 801d00c:	f7f1 ff4d 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801d010:	2401      	movs	r4, #1
 801d012:	f107 0314 	add.w	r3, r7, #20
 801d016:	4619      	mov	r1, r3
 801d018:	68f8      	ldr	r0, [r7, #12]
 801d01a:	f002 fc6b 	bl	801f8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
 801d01e:	2c00      	cmp	r4, #0
 801d020:	d004      	beq.n	801d02c <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x54>
 801d022:	f107 0314 	add.w	r3, r7, #20
 801d026:	4618      	mov	r0, r3
 801d028:	f7f2 faf7 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 801d02c:	68f8      	ldr	r0, [r7, #12]
 801d02e:	3724      	adds	r7, #36	; 0x24
 801d030:	46bd      	mov	sp, r7
 801d032:	bd90      	pop	{r4, r7, pc}
 801d034:	08028bbc 	.word	0x08028bbc

0801d038 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv>:

bool MockCheckedExpectedCall::areParametersMatchingActualCall()
{
 801d038:	b580      	push	{r7, lr}
 801d03a:	b084      	sub	sp, #16
 801d03c:	af00      	add	r7, sp, #0
 801d03e:	6078      	str	r0, [r7, #4]
    MockNamedValueListNode* p;
    for (p = inputParameters_->begin(); p; p = p->next())
 801d040:	687b      	ldr	r3, [r7, #4]
 801d042:	69db      	ldr	r3, [r3, #28]
 801d044:	4618      	mov	r0, r3
 801d046:	f004 fbfe 	bl	8021846 <_ZN18MockNamedValueList5beginEv>
 801d04a:	60f8      	str	r0, [r7, #12]
 801d04c:	68fb      	ldr	r3, [r7, #12]
 801d04e:	2b00      	cmp	r3, #0
 801d050:	d014      	beq.n	801d07c <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x44>
        if (! item(p)->isMatchingActualCall())
 801d052:	68f9      	ldr	r1, [r7, #12]
 801d054:	6878      	ldr	r0, [r7, #4]
 801d056:	f000 fced 	bl	801da34 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801d05a:	4603      	mov	r3, r0
 801d05c:	4618      	mov	r0, r3
 801d05e:	f000 fd1f 	bl	801daa0 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801d062:	4603      	mov	r3, r0
 801d064:	f083 0301 	eor.w	r3, r3, #1
 801d068:	b2db      	uxtb	r3, r3
 801d06a:	2b00      	cmp	r3, #0
 801d06c:	d001      	beq.n	801d072 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x3a>
            return false;
 801d06e:	2300      	movs	r3, #0
 801d070:	e023      	b.n	801d0ba <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = inputParameters_->begin(); p; p = p->next())
 801d072:	68f8      	ldr	r0, [r7, #12]
 801d074:	f004 faf0 	bl	8021658 <_ZN22MockNamedValueListNode4nextEv>
 801d078:	60f8      	str	r0, [r7, #12]
 801d07a:	e7e7      	b.n	801d04c <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x14>
    for (p = outputParameters_->begin(); p; p = p->next())
 801d07c:	687b      	ldr	r3, [r7, #4]
 801d07e:	6a1b      	ldr	r3, [r3, #32]
 801d080:	4618      	mov	r0, r3
 801d082:	f004 fbe0 	bl	8021846 <_ZN18MockNamedValueList5beginEv>
 801d086:	60f8      	str	r0, [r7, #12]
 801d088:	68fb      	ldr	r3, [r7, #12]
 801d08a:	2b00      	cmp	r3, #0
 801d08c:	d014      	beq.n	801d0b8 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x80>
        if (! item(p)->isMatchingActualCall())
 801d08e:	68f9      	ldr	r1, [r7, #12]
 801d090:	6878      	ldr	r0, [r7, #4]
 801d092:	f000 fccf 	bl	801da34 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801d096:	4603      	mov	r3, r0
 801d098:	4618      	mov	r0, r3
 801d09a:	f000 fd01 	bl	801daa0 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801d09e:	4603      	mov	r3, r0
 801d0a0:	f083 0301 	eor.w	r3, r3, #1
 801d0a4:	b2db      	uxtb	r3, r3
 801d0a6:	2b00      	cmp	r3, #0
 801d0a8:	d001      	beq.n	801d0ae <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x76>
            return false;
 801d0aa:	2300      	movs	r3, #0
 801d0ac:	e005      	b.n	801d0ba <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = outputParameters_->begin(); p; p = p->next())
 801d0ae:	68f8      	ldr	r0, [r7, #12]
 801d0b0:	f004 fad2 	bl	8021658 <_ZN22MockNamedValueListNode4nextEv>
 801d0b4:	60f8      	str	r0, [r7, #12]
 801d0b6:	e7e7      	b.n	801d088 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x50>
    return true;
 801d0b8:	2301      	movs	r3, #1
}
 801d0ba:	4618      	mov	r0, r3
 801d0bc:	3710      	adds	r7, #16
 801d0be:	46bd      	mov	sp, r7
 801d0c0:	bd80      	pop	{r7, pc}

0801d0c2 <_ZN23MockCheckedExpectedCall21ignoreOtherParametersEv>:

MockExpectedCall& MockCheckedExpectedCall::ignoreOtherParameters()
{
 801d0c2:	b480      	push	{r7}
 801d0c4:	b083      	sub	sp, #12
 801d0c6:	af00      	add	r7, sp, #0
 801d0c8:	6078      	str	r0, [r7, #4]
    ignoreOtherParameters_ = true;
 801d0ca:	687b      	ldr	r3, [r7, #4]
 801d0cc:	2201      	movs	r2, #1
 801d0ce:	731a      	strb	r2, [r3, #12]
    return *this;
 801d0d0:	687b      	ldr	r3, [r7, #4]
}
 801d0d2:	4618      	mov	r0, r3
 801d0d4:	370c      	adds	r7, #12
 801d0d6:	46bd      	mov	sp, r7
 801d0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0dc:	4770      	bx	lr

0801d0de <_ZN23MockCheckedExpectedCall11isFulfilledEv>:

bool MockCheckedExpectedCall::isFulfilled()
{
 801d0de:	b480      	push	{r7}
 801d0e0:	b083      	sub	sp, #12
 801d0e2:	af00      	add	r7, sp, #0
 801d0e4:	6078      	str	r0, [r7, #4]
    return (actualCalls_ == expectedCalls_);
 801d0e6:	687b      	ldr	r3, [r7, #4]
 801d0e8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801d0ea:	687b      	ldr	r3, [r7, #4]
 801d0ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d0ee:	429a      	cmp	r2, r3
 801d0f0:	bf0c      	ite	eq
 801d0f2:	2301      	moveq	r3, #1
 801d0f4:	2300      	movne	r3, #0
 801d0f6:	b2db      	uxtb	r3, r3
}
 801d0f8:	4618      	mov	r0, r3
 801d0fa:	370c      	adds	r7, #12
 801d0fc:	46bd      	mov	sp, r7
 801d0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d102:	4770      	bx	lr

0801d104 <_ZN23MockCheckedExpectedCall19canMatchActualCallsEv>:

bool MockCheckedExpectedCall::canMatchActualCalls()
{
 801d104:	b480      	push	{r7}
 801d106:	b083      	sub	sp, #12
 801d108:	af00      	add	r7, sp, #0
 801d10a:	6078      	str	r0, [r7, #4]
    return (actualCalls_ < expectedCalls_);
 801d10c:	687b      	ldr	r3, [r7, #4]
 801d10e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801d110:	687b      	ldr	r3, [r7, #4]
 801d112:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d114:	429a      	cmp	r2, r3
 801d116:	bf34      	ite	cc
 801d118:	2301      	movcc	r3, #1
 801d11a:	2300      	movcs	r3, #0
 801d11c:	b2db      	uxtb	r3, r3
}
 801d11e:	4618      	mov	r0, r3
 801d120:	370c      	adds	r7, #12
 801d122:	46bd      	mov	sp, r7
 801d124:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d128:	4770      	bx	lr

0801d12a <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv>:

bool MockCheckedExpectedCall::isMatchingActualCallAndFinalized()
{
 801d12a:	b580      	push	{r7, lr}
 801d12c:	b082      	sub	sp, #8
 801d12e:	af00      	add	r7, sp, #0
 801d130:	6078      	str	r0, [r7, #4]
    return isMatchingActualCall() && (!ignoreOtherParameters_ || isActualCallMatchFinalized_);
 801d132:	687b      	ldr	r3, [r7, #4]
 801d134:	681b      	ldr	r3, [r3, #0]
 801d136:	33cc      	adds	r3, #204	; 0xcc
 801d138:	681b      	ldr	r3, [r3, #0]
 801d13a:	6878      	ldr	r0, [r7, #4]
 801d13c:	4798      	blx	r3
 801d13e:	4603      	mov	r3, r0
 801d140:	2b00      	cmp	r3, #0
 801d142:	d00c      	beq.n	801d15e <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 801d144:	687b      	ldr	r3, [r7, #4]
 801d146:	7b1b      	ldrb	r3, [r3, #12]
 801d148:	f083 0301 	eor.w	r3, r3, #1
 801d14c:	b2db      	uxtb	r3, r3
 801d14e:	2b00      	cmp	r3, #0
 801d150:	d103      	bne.n	801d15a <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x30>
 801d152:	687b      	ldr	r3, [r7, #4]
 801d154:	7b5b      	ldrb	r3, [r3, #13]
 801d156:	2b00      	cmp	r3, #0
 801d158:	d001      	beq.n	801d15e <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 801d15a:	2301      	movs	r3, #1
 801d15c:	e000      	b.n	801d160 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x36>
 801d15e:	2300      	movs	r3, #0
}
 801d160:	4618      	mov	r0, r3
 801d162:	3708      	adds	r7, #8
 801d164:	46bd      	mov	sp, r7
 801d166:	bd80      	pop	{r7, pc}

0801d168 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::isMatchingActualCall()
{
 801d168:	b580      	push	{r7, lr}
 801d16a:	b082      	sub	sp, #8
 801d16c:	af00      	add	r7, sp, #0
 801d16e:	6078      	str	r0, [r7, #4]
    return areParametersMatchingActualCall() && wasPassedToObject_;
 801d170:	687b      	ldr	r3, [r7, #4]
 801d172:	681b      	ldr	r3, [r3, #0]
 801d174:	33d0      	adds	r3, #208	; 0xd0
 801d176:	681b      	ldr	r3, [r3, #0]
 801d178:	6878      	ldr	r0, [r7, #4]
 801d17a:	4798      	blx	r3
 801d17c:	4603      	mov	r3, r0
 801d17e:	2b00      	cmp	r3, #0
 801d180:	d006      	beq.n	801d190 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 801d182:	687b      	ldr	r3, [r7, #4]
 801d184:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 801d188:	2b00      	cmp	r3, #0
 801d18a:	d001      	beq.n	801d190 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 801d18c:	2301      	movs	r3, #1
 801d18e:	e000      	b.n	801d192 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x2a>
 801d190:	2300      	movs	r3, #0
}
 801d192:	4618      	mov	r0, r3
 801d194:	3708      	adds	r7, #8
 801d196:	46bd      	mov	sp, r7
 801d198:	bd80      	pop	{r7, pc}

0801d19a <_ZN23MockCheckedExpectedCall11callWasMadeEj>:

void MockCheckedExpectedCall::callWasMade(unsigned int callOrder)
{
 801d19a:	b580      	push	{r7, lr}
 801d19c:	b082      	sub	sp, #8
 801d19e:	af00      	add	r7, sp, #0
 801d1a0:	6078      	str	r0, [r7, #4]
 801d1a2:	6039      	str	r1, [r7, #0]
    actualCalls_++;
 801d1a4:	687b      	ldr	r3, [r7, #4]
 801d1a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801d1a8:	1c5a      	adds	r2, r3, #1
 801d1aa:	687b      	ldr	r3, [r7, #4]
 801d1ac:	669a      	str	r2, [r3, #104]	; 0x68

    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801d1ae:	687b      	ldr	r3, [r7, #4]
 801d1b0:	691b      	ldr	r3, [r3, #16]
 801d1b2:	2b00      	cmp	r3, #0
 801d1b4:	d00c      	beq.n	801d1d0 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 801d1b6:	687b      	ldr	r3, [r7, #4]
 801d1b8:	691b      	ldr	r3, [r3, #16]
    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 801d1ba:	683a      	ldr	r2, [r7, #0]
 801d1bc:	429a      	cmp	r2, r3
 801d1be:	d304      	bcc.n	801d1ca <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x30>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 801d1c0:	687b      	ldr	r3, [r7, #4]
 801d1c2:	695b      	ldr	r3, [r3, #20]
 801d1c4:	683a      	ldr	r2, [r7, #0]
 801d1c6:	429a      	cmp	r2, r3
 801d1c8:	d902      	bls.n	801d1d0 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
        outOfOrder_ = true;
 801d1ca:	687b      	ldr	r3, [r7, #4]
 801d1cc:	2201      	movs	r2, #1
 801d1ce:	761a      	strb	r2, [r3, #24]
    }

    resetActualCallMatchingState();
 801d1d0:	687b      	ldr	r3, [r7, #4]
 801d1d2:	681b      	ldr	r3, [r3, #0]
 801d1d4:	33ec      	adds	r3, #236	; 0xec
 801d1d6:	681b      	ldr	r3, [r3, #0]
 801d1d8:	6878      	ldr	r0, [r7, #4]
 801d1da:	4798      	blx	r3
}
 801d1dc:	bf00      	nop
 801d1de:	3708      	adds	r7, #8
 801d1e0:	46bd      	mov	sp, r7
 801d1e2:	bd80      	pop	{r7, pc}

0801d1e4 <_ZN23MockCheckedExpectedCall23finalizeActualCallMatchEv>:

void MockCheckedExpectedCall::finalizeActualCallMatch()
{
 801d1e4:	b480      	push	{r7}
 801d1e6:	b083      	sub	sp, #12
 801d1e8:	af00      	add	r7, sp, #0
 801d1ea:	6078      	str	r0, [r7, #4]
    isActualCallMatchFinalized_ = true;
 801d1ec:	687b      	ldr	r3, [r7, #4]
 801d1ee:	2201      	movs	r2, #1
 801d1f0:	735a      	strb	r2, [r3, #13]
}
 801d1f2:	bf00      	nop
 801d1f4:	370c      	adds	r7, #12
 801d1f6:	46bd      	mov	sp, r7
 801d1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d1fc:	4770      	bx	lr

0801d1fe <_ZN23MockCheckedExpectedCall17wasPassedToObjectEv>:


void MockCheckedExpectedCall::wasPassedToObject()
{
 801d1fe:	b480      	push	{r7}
 801d200:	b083      	sub	sp, #12
 801d202:	af00      	add	r7, sp, #0
 801d204:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = true;
 801d206:	687b      	ldr	r3, [r7, #4]
 801d208:	2201      	movs	r2, #1
 801d20a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
}
 801d20e:	bf00      	nop
 801d210:	370c      	adds	r7, #12
 801d212:	46bd      	mov	sp, r7
 801d214:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d218:	4770      	bx	lr

0801d21a <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv>:

void MockCheckedExpectedCall::resetActualCallMatchingState()
{
 801d21a:	b580      	push	{r7, lr}
 801d21c:	b084      	sub	sp, #16
 801d21e:	af00      	add	r7, sp, #0
 801d220:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = !isSpecificObjectExpected_;
 801d222:	687b      	ldr	r3, [r7, #4]
 801d224:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801d228:	f083 0301 	eor.w	r3, r3, #1
 801d22c:	b2da      	uxtb	r2, r3
 801d22e:	687b      	ldr	r3, [r7, #4]
 801d230:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    isActualCallMatchFinalized_ = false;
 801d234:	687b      	ldr	r3, [r7, #4]
 801d236:	2200      	movs	r2, #0
 801d238:	735a      	strb	r2, [r3, #13]

    MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next())
 801d23a:	687b      	ldr	r3, [r7, #4]
 801d23c:	69db      	ldr	r3, [r3, #28]
 801d23e:	4618      	mov	r0, r3
 801d240:	f004 fb01 	bl	8021846 <_ZN18MockNamedValueList5beginEv>
 801d244:	60f8      	str	r0, [r7, #12]
 801d246:	68fb      	ldr	r3, [r7, #12]
 801d248:	2b00      	cmp	r3, #0
 801d24a:	d00d      	beq.n	801d268 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x4e>
        item(p)->setMatchesActualCall(false);
 801d24c:	68f9      	ldr	r1, [r7, #12]
 801d24e:	6878      	ldr	r0, [r7, #4]
 801d250:	f000 fbf0 	bl	801da34 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801d254:	4603      	mov	r3, r0
 801d256:	2100      	movs	r1, #0
 801d258:	4618      	mov	r0, r3
 801d25a:	f000 fc11 	bl	801da80 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = inputParameters_->begin(); p; p = p->next())
 801d25e:	68f8      	ldr	r0, [r7, #12]
 801d260:	f004 f9fa 	bl	8021658 <_ZN22MockNamedValueListNode4nextEv>
 801d264:	60f8      	str	r0, [r7, #12]
 801d266:	e7ee      	b.n	801d246 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x2c>
    for (p = outputParameters_->begin(); p; p = p->next())
 801d268:	687b      	ldr	r3, [r7, #4]
 801d26a:	6a1b      	ldr	r3, [r3, #32]
 801d26c:	4618      	mov	r0, r3
 801d26e:	f004 faea 	bl	8021846 <_ZN18MockNamedValueList5beginEv>
 801d272:	60f8      	str	r0, [r7, #12]
 801d274:	68fb      	ldr	r3, [r7, #12]
 801d276:	2b00      	cmp	r3, #0
 801d278:	d00d      	beq.n	801d296 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x7c>
        item(p)->setMatchesActualCall(false);
 801d27a:	68f9      	ldr	r1, [r7, #12]
 801d27c:	6878      	ldr	r0, [r7, #4]
 801d27e:	f000 fbd9 	bl	801da34 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801d282:	4603      	mov	r3, r0
 801d284:	2100      	movs	r1, #0
 801d286:	4618      	mov	r0, r3
 801d288:	f000 fbfa 	bl	801da80 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = outputParameters_->begin(); p; p = p->next())
 801d28c:	68f8      	ldr	r0, [r7, #12]
 801d28e:	f004 f9e3 	bl	8021658 <_ZN22MockNamedValueListNode4nextEv>
 801d292:	60f8      	str	r0, [r7, #12]
 801d294:	e7ee      	b.n	801d274 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x5a>
}
 801d296:	bf00      	nop
 801d298:	3710      	adds	r7, #16
 801d29a:	46bd      	mov	sp, r7
 801d29c:	bd80      	pop	{r7, pc}

0801d29e <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::inputParameterWasPassed(const SimpleString& name)
{
 801d29e:	b590      	push	{r4, r7, lr}
 801d2a0:	b087      	sub	sp, #28
 801d2a2:	af00      	add	r7, sp, #0
 801d2a4:	6078      	str	r0, [r7, #4]
 801d2a6:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 801d2a8:	687b      	ldr	r3, [r7, #4]
 801d2aa:	69db      	ldr	r3, [r3, #28]
 801d2ac:	4618      	mov	r0, r3
 801d2ae:	f004 faca 	bl	8021846 <_ZN18MockNamedValueList5beginEv>
 801d2b2:	6178      	str	r0, [r7, #20]
 801d2b4:	697b      	ldr	r3, [r7, #20]
 801d2b6:	2b00      	cmp	r3, #0
 801d2b8:	d022      	beq.n	801d300 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 801d2ba:	f107 030c 	add.w	r3, r7, #12
 801d2be:	6979      	ldr	r1, [r7, #20]
 801d2c0:	4618      	mov	r0, r3
 801d2c2:	f004 fa04 	bl	80216ce <_ZNK22MockNamedValueListNode7getNameEv>
 801d2c6:	f107 030c 	add.w	r3, r7, #12
 801d2ca:	6839      	ldr	r1, [r7, #0]
 801d2cc:	4618      	mov	r0, r3
 801d2ce:	f7f2 f9b0 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 801d2d2:	4603      	mov	r3, r0
 801d2d4:	461c      	mov	r4, r3
 801d2d6:	f107 030c 	add.w	r3, r7, #12
 801d2da:	4618      	mov	r0, r3
 801d2dc:	f7f2 f99d 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801d2e0:	2c00      	cmp	r4, #0
 801d2e2:	d008      	beq.n	801d2f6 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 801d2e4:	6979      	ldr	r1, [r7, #20]
 801d2e6:	6878      	ldr	r0, [r7, #4]
 801d2e8:	f000 fba4 	bl	801da34 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801d2ec:	4603      	mov	r3, r0
 801d2ee:	2101      	movs	r1, #1
 801d2f0:	4618      	mov	r0, r3
 801d2f2:	f000 fbc5 	bl	801da80 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 801d2f6:	6978      	ldr	r0, [r7, #20]
 801d2f8:	f004 f9ae 	bl	8021658 <_ZN22MockNamedValueListNode4nextEv>
 801d2fc:	6178      	str	r0, [r7, #20]
 801d2fe:	e7d9      	b.n	801d2b4 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x16>
    }
}
 801d300:	bf00      	nop
 801d302:	371c      	adds	r7, #28
 801d304:	46bd      	mov	sp, r7
 801d306:	bd90      	pop	{r4, r7, pc}

0801d308 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::outputParameterWasPassed(const SimpleString& name)
{
 801d308:	b590      	push	{r4, r7, lr}
 801d30a:	b087      	sub	sp, #28
 801d30c:	af00      	add	r7, sp, #0
 801d30e:	6078      	str	r0, [r7, #4]
 801d310:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 801d312:	687b      	ldr	r3, [r7, #4]
 801d314:	6a1b      	ldr	r3, [r3, #32]
 801d316:	4618      	mov	r0, r3
 801d318:	f004 fa95 	bl	8021846 <_ZN18MockNamedValueList5beginEv>
 801d31c:	6178      	str	r0, [r7, #20]
 801d31e:	697b      	ldr	r3, [r7, #20]
 801d320:	2b00      	cmp	r3, #0
 801d322:	d022      	beq.n	801d36a <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 801d324:	f107 030c 	add.w	r3, r7, #12
 801d328:	6979      	ldr	r1, [r7, #20]
 801d32a:	4618      	mov	r0, r3
 801d32c:	f004 f9cf 	bl	80216ce <_ZNK22MockNamedValueListNode7getNameEv>
 801d330:	f107 030c 	add.w	r3, r7, #12
 801d334:	6839      	ldr	r1, [r7, #0]
 801d336:	4618      	mov	r0, r3
 801d338:	f7f2 f97b 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 801d33c:	4603      	mov	r3, r0
 801d33e:	461c      	mov	r4, r3
 801d340:	f107 030c 	add.w	r3, r7, #12
 801d344:	4618      	mov	r0, r3
 801d346:	f7f2 f968 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801d34a:	2c00      	cmp	r4, #0
 801d34c:	d008      	beq.n	801d360 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 801d34e:	6979      	ldr	r1, [r7, #20]
 801d350:	6878      	ldr	r0, [r7, #4]
 801d352:	f000 fb6f 	bl	801da34 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801d356:	4603      	mov	r3, r0
 801d358:	2101      	movs	r1, #1
 801d35a:	4618      	mov	r0, r3
 801d35c:	f000 fb90 	bl	801da80 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 801d360:	6978      	ldr	r0, [r7, #20]
 801d362:	f004 f979 	bl	8021658 <_ZN22MockNamedValueListNode4nextEv>
 801d366:	6178      	str	r0, [r7, #20]
 801d368:	e7d9      	b.n	801d31e <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x16>
    }
}
 801d36a:	bf00      	nop
 801d36c:	371c      	adds	r7, #28
 801d36e:	46bd      	mov	sp, r7
 801d370:	bd90      	pop	{r4, r7, pc}
	...

0801d374 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterValueString(const SimpleString& name)
{
 801d374:	b580      	push	{r7, lr}
 801d376:	b086      	sub	sp, #24
 801d378:	af00      	add	r7, sp, #0
 801d37a:	60f8      	str	r0, [r7, #12]
 801d37c:	60b9      	str	r1, [r7, #8]
 801d37e:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801d380:	68bb      	ldr	r3, [r7, #8]
 801d382:	69db      	ldr	r3, [r3, #28]
 801d384:	6879      	ldr	r1, [r7, #4]
 801d386:	4618      	mov	r0, r3
 801d388:	f004 fa2e 	bl	80217e8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801d38c:	6178      	str	r0, [r7, #20]
    return (p) ? StringFrom(*p) : "failed";
 801d38e:	697b      	ldr	r3, [r7, #20]
 801d390:	2b00      	cmp	r3, #0
 801d392:	d005      	beq.n	801d3a0 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x2c>
 801d394:	68fb      	ldr	r3, [r7, #12]
 801d396:	6979      	ldr	r1, [r7, #20]
 801d398:	4618      	mov	r0, r3
 801d39a:	f7ff fa0b 	bl	801c7b4 <_Z10StringFromRK14MockNamedValue>
 801d39e:	e003      	b.n	801d3a8 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x34>
 801d3a0:	4903      	ldr	r1, [pc, #12]	; (801d3b0 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x3c>)
 801d3a2:	68f8      	ldr	r0, [r7, #12]
 801d3a4:	f7f1 fd81 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
}
 801d3a8:	68f8      	ldr	r0, [r7, #12]
 801d3aa:	3718      	adds	r7, #24
 801d3ac:	46bd      	mov	sp, r7
 801d3ae:	bd80      	pop	{r7, pc}
 801d3b0:	08028c28 	.word	0x08028c28

0801d3b4 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasInputParameter(const MockNamedValue& parameter)
{
 801d3b4:	b590      	push	{r4, r7, lr}
 801d3b6:	b087      	sub	sp, #28
 801d3b8:	af00      	add	r7, sp, #0
 801d3ba:	6078      	str	r0, [r7, #4]
 801d3bc:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(parameter.getName());
 801d3be:	687b      	ldr	r3, [r7, #4]
 801d3c0:	69dc      	ldr	r4, [r3, #28]
 801d3c2:	683b      	ldr	r3, [r7, #0]
 801d3c4:	681b      	ldr	r3, [r3, #0]
 801d3c6:	335c      	adds	r3, #92	; 0x5c
 801d3c8:	681b      	ldr	r3, [r3, #0]
 801d3ca:	f107 020c 	add.w	r2, r7, #12
 801d3ce:	6839      	ldr	r1, [r7, #0]
 801d3d0:	4610      	mov	r0, r2
 801d3d2:	4798      	blx	r3
 801d3d4:	f107 030c 	add.w	r3, r7, #12
 801d3d8:	4619      	mov	r1, r3
 801d3da:	4620      	mov	r0, r4
 801d3dc:	f004 fa04 	bl	80217e8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801d3e0:	6178      	str	r0, [r7, #20]
 801d3e2:	f107 030c 	add.w	r3, r7, #12
 801d3e6:	4618      	mov	r0, r3
 801d3e8:	f7f2 f917 	bl	800f61a <_ZN12SimpleStringD1Ev>
    return (p) ? p->equals(parameter) : ignoreOtherParameters_;
 801d3ec:	697b      	ldr	r3, [r7, #20]
 801d3ee:	2b00      	cmp	r3, #0
 801d3f0:	d00d      	beq.n	801d40e <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x5a>
 801d3f2:	697b      	ldr	r3, [r7, #20]
 801d3f4:	681b      	ldr	r3, [r3, #0]
 801d3f6:	3350      	adds	r3, #80	; 0x50
 801d3f8:	681b      	ldr	r3, [r3, #0]
 801d3fa:	6839      	ldr	r1, [r7, #0]
 801d3fc:	6978      	ldr	r0, [r7, #20]
 801d3fe:	4798      	blx	r3
 801d400:	4603      	mov	r3, r0
 801d402:	2b00      	cmp	r3, #0
 801d404:	bf14      	ite	ne
 801d406:	2301      	movne	r3, #1
 801d408:	2300      	moveq	r3, #0
 801d40a:	b2db      	uxtb	r3, r3
 801d40c:	e006      	b.n	801d41c <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x68>
 801d40e:	687b      	ldr	r3, [r7, #4]
 801d410:	7b1b      	ldrb	r3, [r3, #12]
 801d412:	2b00      	cmp	r3, #0
 801d414:	bf14      	ite	ne
 801d416:	2301      	movne	r3, #1
 801d418:	2300      	moveq	r3, #0
 801d41a:	b2db      	uxtb	r3, r3
}
 801d41c:	4618      	mov	r0, r3
 801d41e:	371c      	adds	r7, #28
 801d420:	46bd      	mov	sp, r7
 801d422:	bd90      	pop	{r4, r7, pc}

0801d424 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasOutputParameter(const MockNamedValue& parameter)
{
 801d424:	b590      	push	{r4, r7, lr}
 801d426:	b087      	sub	sp, #28
 801d428:	af00      	add	r7, sp, #0
 801d42a:	6078      	str	r0, [r7, #4]
 801d42c:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(parameter.getName());
 801d42e:	687b      	ldr	r3, [r7, #4]
 801d430:	6a1c      	ldr	r4, [r3, #32]
 801d432:	683b      	ldr	r3, [r7, #0]
 801d434:	681b      	ldr	r3, [r3, #0]
 801d436:	335c      	adds	r3, #92	; 0x5c
 801d438:	681b      	ldr	r3, [r3, #0]
 801d43a:	f107 020c 	add.w	r2, r7, #12
 801d43e:	6839      	ldr	r1, [r7, #0]
 801d440:	4610      	mov	r0, r2
 801d442:	4798      	blx	r3
 801d444:	f107 030c 	add.w	r3, r7, #12
 801d448:	4619      	mov	r1, r3
 801d44a:	4620      	mov	r0, r4
 801d44c:	f004 f9cc 	bl	80217e8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801d450:	6178      	str	r0, [r7, #20]
 801d452:	f107 030c 	add.w	r3, r7, #12
 801d456:	4618      	mov	r0, r3
 801d458:	f7f2 f8df 	bl	800f61a <_ZN12SimpleStringD1Ev>
    return (p) ? p->compatibleForCopying(parameter) : ignoreOtherParameters_;
 801d45c:	697b      	ldr	r3, [r7, #20]
 801d45e:	2b00      	cmp	r3, #0
 801d460:	d00d      	beq.n	801d47e <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x5a>
 801d462:	697b      	ldr	r3, [r7, #20]
 801d464:	681b      	ldr	r3, [r3, #0]
 801d466:	3354      	adds	r3, #84	; 0x54
 801d468:	681b      	ldr	r3, [r3, #0]
 801d46a:	6839      	ldr	r1, [r7, #0]
 801d46c:	6978      	ldr	r0, [r7, #20]
 801d46e:	4798      	blx	r3
 801d470:	4603      	mov	r3, r0
 801d472:	2b00      	cmp	r3, #0
 801d474:	bf14      	ite	ne
 801d476:	2301      	movne	r3, #1
 801d478:	2300      	moveq	r3, #0
 801d47a:	b2db      	uxtb	r3, r3
 801d47c:	e006      	b.n	801d48c <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x68>
 801d47e:	687b      	ldr	r3, [r7, #4]
 801d480:	7b1b      	ldrb	r3, [r3, #12]
 801d482:	2b00      	cmp	r3, #0
 801d484:	bf14      	ite	ne
 801d486:	2301      	movne	r3, #1
 801d488:	2300      	moveq	r3, #0
 801d48a:	b2db      	uxtb	r3, r3
}
 801d48c:	4618      	mov	r0, r3
 801d48e:	371c      	adds	r7, #28
 801d490:	46bd      	mov	sp, r7
 801d492:	bd90      	pop	{r4, r7, pc}

0801d494 <_ZN23MockCheckedExpectedCall12callToStringEv>:

SimpleString MockCheckedExpectedCall::callToString()
{
 801d494:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d496:	b0a1      	sub	sp, #132	; 0x84
 801d498:	af02      	add	r7, sp, #8
 801d49a:	6078      	str	r0, [r7, #4]
 801d49c:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801d49e:	49bc      	ldr	r1, [pc, #752]	; (801d790 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801d4a0:	6878      	ldr	r0, [r7, #4]
 801d4a2:	f7f1 fd02 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
    if (isSpecificObjectExpected_)
 801d4a6:	683b      	ldr	r3, [r7, #0]
 801d4a8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801d4ac:	2b00      	cmp	r3, #0
 801d4ae:	d012      	beq.n	801d4d6 <_ZN23MockCheckedExpectedCall12callToStringEv+0x42>
        str = StringFromFormat("(object address: %p)::", objectPtr_);
 801d4b0:	683b      	ldr	r3, [r7, #0]
 801d4b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801d4b4:	f107 030c 	add.w	r3, r7, #12
 801d4b8:	49b6      	ldr	r1, [pc, #728]	; (801d794 <_ZN23MockCheckedExpectedCall12callToStringEv+0x300>)
 801d4ba:	4618      	mov	r0, r3
 801d4bc:	f7f2 fdb4 	bl	8010028 <_Z16StringFromFormatPKcz>
 801d4c0:	f107 030c 	add.w	r3, r7, #12
 801d4c4:	4619      	mov	r1, r3
 801d4c6:	6878      	ldr	r0, [r7, #4]
 801d4c8:	f7f1 fd5b 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 801d4cc:	f107 030c 	add.w	r3, r7, #12
 801d4d0:	4618      	mov	r0, r3
 801d4d2:	f7f2 f8a2 	bl	800f61a <_ZN12SimpleStringD1Ev>

    str += getName();
 801d4d6:	f107 0314 	add.w	r3, r7, #20
 801d4da:	6839      	ldr	r1, [r7, #0]
 801d4dc:	4618      	mov	r0, r3
 801d4de:	f7ff f989 	bl	801c7f4 <_ZNK23MockCheckedExpectedCall7getNameEv>
 801d4e2:	f107 0314 	add.w	r3, r7, #20
 801d4e6:	4619      	mov	r1, r3
 801d4e8:	6878      	ldr	r0, [r7, #4]
 801d4ea:	f7f2 f913 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801d4ee:	f107 0314 	add.w	r3, r7, #20
 801d4f2:	4618      	mov	r0, r3
 801d4f4:	f7f2 f891 	bl	800f61a <_ZN12SimpleStringD1Ev>
    str += " -> ";
 801d4f8:	49a7      	ldr	r1, [pc, #668]	; (801d798 <_ZN23MockCheckedExpectedCall12callToStringEv+0x304>)
 801d4fa:	6878      	ldr	r0, [r7, #4]
 801d4fc:	f7f2 f91c 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    if (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) {
 801d500:	683b      	ldr	r3, [r7, #0]
 801d502:	691b      	ldr	r3, [r3, #16]
 801d504:	2b00      	cmp	r3, #0
 801d506:	d02d      	beq.n	801d564 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        if (initialExpectedCallOrder_ == finalExpectedCallOrder_) {
 801d508:	683b      	ldr	r3, [r7, #0]
 801d50a:	691a      	ldr	r2, [r3, #16]
 801d50c:	683b      	ldr	r3, [r7, #0]
 801d50e:	695b      	ldr	r3, [r3, #20]
 801d510:	429a      	cmp	r2, r3
 801d512:	d113      	bne.n	801d53c <_ZN23MockCheckedExpectedCall12callToStringEv+0xa8>
            str += StringFromFormat("expected call order: <%u> -> ", initialExpectedCallOrder_);
 801d514:	683b      	ldr	r3, [r7, #0]
 801d516:	691a      	ldr	r2, [r3, #16]
 801d518:	f107 031c 	add.w	r3, r7, #28
 801d51c:	499f      	ldr	r1, [pc, #636]	; (801d79c <_ZN23MockCheckedExpectedCall12callToStringEv+0x308>)
 801d51e:	4618      	mov	r0, r3
 801d520:	f7f2 fd82 	bl	8010028 <_Z16StringFromFormatPKcz>
 801d524:	f107 031c 	add.w	r3, r7, #28
 801d528:	4619      	mov	r1, r3
 801d52a:	6878      	ldr	r0, [r7, #4]
 801d52c:	f7f2 f8f2 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801d530:	f107 031c 	add.w	r3, r7, #28
 801d534:	4618      	mov	r0, r3
 801d536:	f7f2 f870 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801d53a:	e013      	b.n	801d564 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        } else {
            str += StringFromFormat("expected calls order: <%u..%u> -> ", initialExpectedCallOrder_, finalExpectedCallOrder_);
 801d53c:	683b      	ldr	r3, [r7, #0]
 801d53e:	691a      	ldr	r2, [r3, #16]
 801d540:	683b      	ldr	r3, [r7, #0]
 801d542:	695b      	ldr	r3, [r3, #20]
 801d544:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801d548:	4995      	ldr	r1, [pc, #596]	; (801d7a0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x30c>)
 801d54a:	f7f2 fd6d 	bl	8010028 <_Z16StringFromFormatPKcz>
 801d54e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d552:	4619      	mov	r1, r3
 801d554:	6878      	ldr	r0, [r7, #4]
 801d556:	f7f2 f8dd 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801d55a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d55e:	4618      	mov	r0, r3
 801d560:	f7f2 f85b 	bl	800f61a <_ZN12SimpleStringD1Ev>
        }
    }

    if (inputParameters_->begin() == NULLPTR && outputParameters_->begin() == NULLPTR) {
 801d564:	683b      	ldr	r3, [r7, #0]
 801d566:	69db      	ldr	r3, [r3, #28]
 801d568:	4618      	mov	r0, r3
 801d56a:	f004 f96c 	bl	8021846 <_ZN18MockNamedValueList5beginEv>
 801d56e:	4603      	mov	r3, r0
 801d570:	2b00      	cmp	r3, #0
 801d572:	d109      	bne.n	801d588 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 801d574:	683b      	ldr	r3, [r7, #0]
 801d576:	6a1b      	ldr	r3, [r3, #32]
 801d578:	4618      	mov	r0, r3
 801d57a:	f004 f964 	bl	8021846 <_ZN18MockNamedValueList5beginEv>
 801d57e:	4603      	mov	r3, r0
 801d580:	2b00      	cmp	r3, #0
 801d582:	d101      	bne.n	801d588 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 801d584:	2301      	movs	r3, #1
 801d586:	e000      	b.n	801d58a <_ZN23MockCheckedExpectedCall12callToStringEv+0xf6>
 801d588:	2300      	movs	r3, #0
 801d58a:	2b00      	cmp	r3, #0
 801d58c:	d00b      	beq.n	801d5a6 <_ZN23MockCheckedExpectedCall12callToStringEv+0x112>
        str += (ignoreOtherParameters_) ? "all parameters ignored" : "no parameters";
 801d58e:	683b      	ldr	r3, [r7, #0]
 801d590:	7b1b      	ldrb	r3, [r3, #12]
 801d592:	2b00      	cmp	r3, #0
 801d594:	d001      	beq.n	801d59a <_ZN23MockCheckedExpectedCall12callToStringEv+0x106>
 801d596:	4b83      	ldr	r3, [pc, #524]	; (801d7a4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x310>)
 801d598:	e000      	b.n	801d59c <_ZN23MockCheckedExpectedCall12callToStringEv+0x108>
 801d59a:	4b83      	ldr	r3, [pc, #524]	; (801d7a8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x314>)
 801d59c:	4619      	mov	r1, r3
 801d59e:	6878      	ldr	r0, [r7, #4]
 801d5a0:	f7f2 f8ca 	bl	800f738 <_ZN12SimpleStringpLEPKc>
 801d5a4:	e0e3      	b.n	801d76e <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
    } else {
        MockNamedValueListNode* p;

        for (p = inputParameters_->begin(); p; p = p->next()) {
 801d5a6:	683b      	ldr	r3, [r7, #0]
 801d5a8:	69db      	ldr	r3, [r3, #28]
 801d5aa:	4618      	mov	r0, r3
 801d5ac:	f004 f94b 	bl	8021846 <_ZN18MockNamedValueList5beginEv>
 801d5b0:	6778      	str	r0, [r7, #116]	; 0x74
 801d5b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d5b4:	2b00      	cmp	r3, #0
 801d5b6:	d069      	beq.n	801d68c <_ZN23MockCheckedExpectedCall12callToStringEv+0x1f8>
            str += StringFromFormat("%s %s: <%s>", p->getType().asCharString(), p->getName().asCharString(), getInputParameterValueString(p->getName()).asCharString());
 801d5b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801d5bc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801d5be:	4618      	mov	r0, r3
 801d5c0:	f004 f898 	bl	80216f4 <_ZNK22MockNamedValueListNode7getTypeEv>
 801d5c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801d5c8:	4618      	mov	r0, r3
 801d5ca:	f7f1 fff9 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 801d5ce:	4605      	mov	r5, r0
 801d5d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801d5d4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801d5d6:	4618      	mov	r0, r3
 801d5d8:	f004 f879 	bl	80216ce <_ZNK22MockNamedValueListNode7getNameEv>
 801d5dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801d5e0:	4618      	mov	r0, r3
 801d5e2:	f7f1 ffed 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 801d5e6:	4606      	mov	r6, r0
 801d5e8:	683b      	ldr	r3, [r7, #0]
 801d5ea:	681b      	ldr	r3, [r3, #0]
 801d5ec:	33a4      	adds	r3, #164	; 0xa4
 801d5ee:	681c      	ldr	r4, [r3, #0]
 801d5f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801d5f4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801d5f6:	4618      	mov	r0, r3
 801d5f8:	f004 f869 	bl	80216ce <_ZNK22MockNamedValueListNode7getNameEv>
 801d5fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d600:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801d604:	6839      	ldr	r1, [r7, #0]
 801d606:	4618      	mov	r0, r3
 801d608:	47a0      	blx	r4
 801d60a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d60e:	4618      	mov	r0, r3
 801d610:	f7f1 ffd6 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 801d614:	4603      	mov	r3, r0
 801d616:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801d61a:	9300      	str	r3, [sp, #0]
 801d61c:	4633      	mov	r3, r6
 801d61e:	462a      	mov	r2, r5
 801d620:	4962      	ldr	r1, [pc, #392]	; (801d7ac <_ZN23MockCheckedExpectedCall12callToStringEv+0x318>)
 801d622:	f7f2 fd01 	bl	8010028 <_Z16StringFromFormatPKcz>
 801d626:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d62a:	4619      	mov	r1, r3
 801d62c:	6878      	ldr	r0, [r7, #4]
 801d62e:	f7f2 f871 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801d632:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d636:	4618      	mov	r0, r3
 801d638:	f7f1 ffef 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801d63c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d640:	4618      	mov	r0, r3
 801d642:	f7f1 ffea 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801d646:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801d64a:	4618      	mov	r0, r3
 801d64c:	f7f1 ffe5 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801d650:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801d654:	4618      	mov	r0, r3
 801d656:	f7f1 ffe0 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801d65a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801d65e:	4618      	mov	r0, r3
 801d660:	f7f1 ffdb 	bl	800f61a <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 801d664:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801d666:	f003 fff7 	bl	8021658 <_ZN22MockNamedValueListNode4nextEv>
 801d66a:	4603      	mov	r3, r0
 801d66c:	2b00      	cmp	r3, #0
 801d66e:	bf14      	ite	ne
 801d670:	2301      	movne	r3, #1
 801d672:	2300      	moveq	r3, #0
 801d674:	b2db      	uxtb	r3, r3
 801d676:	2b00      	cmp	r3, #0
 801d678:	d003      	beq.n	801d682 <_ZN23MockCheckedExpectedCall12callToStringEv+0x1ee>
 801d67a:	494d      	ldr	r1, [pc, #308]	; (801d7b0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801d67c:	6878      	ldr	r0, [r7, #4]
 801d67e:	f7f2 f85b 	bl	800f738 <_ZN12SimpleStringpLEPKc>
        for (p = inputParameters_->begin(); p; p = p->next()) {
 801d682:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801d684:	f003 ffe8 	bl	8021658 <_ZN22MockNamedValueListNode4nextEv>
 801d688:	6778      	str	r0, [r7, #116]	; 0x74
 801d68a:	e792      	b.n	801d5b2 <_ZN23MockCheckedExpectedCall12callToStringEv+0x11e>
        }

        if (inputParameters_->begin() && outputParameters_->begin())
 801d68c:	683b      	ldr	r3, [r7, #0]
 801d68e:	69db      	ldr	r3, [r3, #28]
 801d690:	4618      	mov	r0, r3
 801d692:	f004 f8d8 	bl	8021846 <_ZN18MockNamedValueList5beginEv>
 801d696:	4603      	mov	r3, r0
 801d698:	2b00      	cmp	r3, #0
 801d69a:	d009      	beq.n	801d6b0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 801d69c:	683b      	ldr	r3, [r7, #0]
 801d69e:	6a1b      	ldr	r3, [r3, #32]
 801d6a0:	4618      	mov	r0, r3
 801d6a2:	f004 f8d0 	bl	8021846 <_ZN18MockNamedValueList5beginEv>
 801d6a6:	4603      	mov	r3, r0
 801d6a8:	2b00      	cmp	r3, #0
 801d6aa:	d001      	beq.n	801d6b0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 801d6ac:	2301      	movs	r3, #1
 801d6ae:	e000      	b.n	801d6b2 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21e>
 801d6b0:	2300      	movs	r3, #0
 801d6b2:	2b00      	cmp	r3, #0
 801d6b4:	d003      	beq.n	801d6be <_ZN23MockCheckedExpectedCall12callToStringEv+0x22a>
        {
            str += ", ";
 801d6b6:	493e      	ldr	r1, [pc, #248]	; (801d7b0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801d6b8:	6878      	ldr	r0, [r7, #4]
 801d6ba:	f7f2 f83d 	bl	800f738 <_ZN12SimpleStringpLEPKc>
        }

        for (p = outputParameters_->begin(); p; p = p->next()) {
 801d6be:	683b      	ldr	r3, [r7, #0]
 801d6c0:	6a1b      	ldr	r3, [r3, #32]
 801d6c2:	4618      	mov	r0, r3
 801d6c4:	f004 f8bf 	bl	8021846 <_ZN18MockNamedValueList5beginEv>
 801d6c8:	6778      	str	r0, [r7, #116]	; 0x74
 801d6ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d6cc:	2b00      	cmp	r3, #0
 801d6ce:	d046      	beq.n	801d75e <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ca>
            str += StringFromFormat("%s %s: <output>", p->getType().asCharString(), p->getName().asCharString());
 801d6d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801d6d4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801d6d6:	4618      	mov	r0, r3
 801d6d8:	f004 f80c 	bl	80216f4 <_ZNK22MockNamedValueListNode7getTypeEv>
 801d6dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801d6e0:	4618      	mov	r0, r3
 801d6e2:	f7f1 ff6d 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 801d6e6:	4604      	mov	r4, r0
 801d6e8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801d6ec:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801d6ee:	4618      	mov	r0, r3
 801d6f0:	f003 ffed 	bl	80216ce <_ZNK22MockNamedValueListNode7getNameEv>
 801d6f4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801d6f8:	4618      	mov	r0, r3
 801d6fa:	f7f1 ff61 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 801d6fe:	4603      	mov	r3, r0
 801d700:	f107 0054 	add.w	r0, r7, #84	; 0x54
 801d704:	4622      	mov	r2, r4
 801d706:	492b      	ldr	r1, [pc, #172]	; (801d7b4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x320>)
 801d708:	f7f2 fc8e 	bl	8010028 <_Z16StringFromFormatPKcz>
 801d70c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801d710:	4619      	mov	r1, r3
 801d712:	6878      	ldr	r0, [r7, #4]
 801d714:	f7f1 fffe 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801d718:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801d71c:	4618      	mov	r0, r3
 801d71e:	f7f1 ff7c 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801d722:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801d726:	4618      	mov	r0, r3
 801d728:	f7f1 ff77 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801d72c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801d730:	4618      	mov	r0, r3
 801d732:	f7f1 ff72 	bl	800f61a <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 801d736:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801d738:	f003 ff8e 	bl	8021658 <_ZN22MockNamedValueListNode4nextEv>
 801d73c:	4603      	mov	r3, r0
 801d73e:	2b00      	cmp	r3, #0
 801d740:	bf14      	ite	ne
 801d742:	2301      	movne	r3, #1
 801d744:	2300      	moveq	r3, #0
 801d746:	b2db      	uxtb	r3, r3
 801d748:	2b00      	cmp	r3, #0
 801d74a:	d003      	beq.n	801d754 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2c0>
 801d74c:	4918      	ldr	r1, [pc, #96]	; (801d7b0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801d74e:	6878      	ldr	r0, [r7, #4]
 801d750:	f7f1 fff2 	bl	800f738 <_ZN12SimpleStringpLEPKc>
        for (p = outputParameters_->begin(); p; p = p->next()) {
 801d754:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801d756:	f003 ff7f 	bl	8021658 <_ZN22MockNamedValueListNode4nextEv>
 801d75a:	6778      	str	r0, [r7, #116]	; 0x74
 801d75c:	e7b5      	b.n	801d6ca <_ZN23MockCheckedExpectedCall12callToStringEv+0x236>
        }

        if (ignoreOtherParameters_)
 801d75e:	683b      	ldr	r3, [r7, #0]
 801d760:	7b1b      	ldrb	r3, [r3, #12]
 801d762:	2b00      	cmp	r3, #0
 801d764:	d003      	beq.n	801d76e <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
            str += ", other parameters are ignored";
 801d766:	4914      	ldr	r1, [pc, #80]	; (801d7b8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x324>)
 801d768:	6878      	ldr	r0, [r7, #4]
 801d76a:	f7f1 ffe5 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    }

    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801d76e:	683b      	ldr	r3, [r7, #0]
 801d770:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801d772:	683b      	ldr	r3, [r7, #0]
 801d774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801d776:	2b01      	cmp	r3, #1
 801d778:	d101      	bne.n	801d77e <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ea>
 801d77a:	4c05      	ldr	r4, [pc, #20]	; (801d790 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801d77c:	e000      	b.n	801d780 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ec>
 801d77e:	4c0f      	ldr	r4, [pc, #60]	; (801d7bc <_ZN23MockCheckedExpectedCall12callToStringEv+0x328>)
 801d780:	683b      	ldr	r3, [r7, #0]
 801d782:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801d784:	683a      	ldr	r2, [r7, #0]
 801d786:	6e92      	ldr	r2, [r2, #104]	; 0x68
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801d788:	2a01      	cmp	r2, #1
 801d78a:	d119      	bne.n	801d7c0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x32c>
 801d78c:	4a00      	ldr	r2, [pc, #0]	; (801d790 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801d78e:	e018      	b.n	801d7c2 <_ZN23MockCheckedExpectedCall12callToStringEv+0x32e>
 801d790:	08028bbc 	.word	0x08028bbc
 801d794:	08028c30 	.word	0x08028c30
 801d798:	08028c48 	.word	0x08028c48
 801d79c:	08028c50 	.word	0x08028c50
 801d7a0:	08028c70 	.word	0x08028c70
 801d7a4:	08028c94 	.word	0x08028c94
 801d7a8:	08028cac 	.word	0x08028cac
 801d7ac:	08028cbc 	.word	0x08028cbc
 801d7b0:	08028cc8 	.word	0x08028cc8
 801d7b4:	08028ccc 	.word	0x08028ccc
 801d7b8:	08028cdc 	.word	0x08028cdc
 801d7bc:	08028cfc 	.word	0x08028cfc
 801d7c0:	4a0c      	ldr	r2, [pc, #48]	; (801d7f4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x360>)
 801d7c2:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 801d7c6:	9201      	str	r2, [sp, #4]
 801d7c8:	9300      	str	r3, [sp, #0]
 801d7ca:	4623      	mov	r3, r4
 801d7cc:	460a      	mov	r2, r1
 801d7ce:	490a      	ldr	r1, [pc, #40]	; (801d7f8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x364>)
 801d7d0:	f7f2 fc2a 	bl	8010028 <_Z16StringFromFormatPKcz>
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801d7d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801d7d8:	4619      	mov	r1, r3
 801d7da:	6878      	ldr	r0, [r7, #4]
 801d7dc:	f7f1 ff9a 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801d7e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801d7e4:	4618      	mov	r0, r3
 801d7e6:	f7f1 ff18 	bl	800f61a <_ZN12SimpleStringD1Ev>

    return str;
 801d7ea:	bf00      	nop
}
 801d7ec:	6878      	ldr	r0, [r7, #4]
 801d7ee:	377c      	adds	r7, #124	; 0x7c
 801d7f0:	46bd      	mov	sp, r7
 801d7f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d7f4:	08028cfc 	.word	0x08028cfc
 801d7f8:	08028d00 	.word	0x08028d00

0801d7fc <_ZN23MockCheckedExpectedCall25missingParametersToStringEv>:

SimpleString MockCheckedExpectedCall::missingParametersToString()
{
 801d7fc:	b590      	push	{r4, r7, lr}
 801d7fe:	b095      	sub	sp, #84	; 0x54
 801d800:	af00      	add	r7, sp, #0
 801d802:	6078      	str	r0, [r7, #4]
 801d804:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801d806:	496c      	ldr	r1, [pc, #432]	; (801d9b8 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801d808:	6878      	ldr	r0, [r7, #4]
 801d80a:	f7f1 fb4e 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
	MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next()) {
 801d80e:	683b      	ldr	r3, [r7, #0]
 801d810:	69db      	ldr	r3, [r3, #28]
 801d812:	4618      	mov	r0, r3
 801d814:	f004 f817 	bl	8021846 <_ZN18MockNamedValueList5beginEv>
 801d818:	64f8      	str	r0, [r7, #76]	; 0x4c
 801d81a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d81c:	2b00      	cmp	r3, #0
 801d81e:	d05e      	beq.n	801d8de <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xe2>
        if (! item(p)->isMatchingActualCall()) {
 801d820:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801d822:	6838      	ldr	r0, [r7, #0]
 801d824:	f000 f906 	bl	801da34 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801d828:	4603      	mov	r3, r0
 801d82a:	4618      	mov	r0, r3
 801d82c:	f000 f938 	bl	801daa0 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801d830:	4603      	mov	r3, r0
 801d832:	f083 0301 	eor.w	r3, r3, #1
 801d836:	b2db      	uxtb	r3, r3
 801d838:	2b00      	cmp	r3, #0
 801d83a:	d04b      	beq.n	801d8d4 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xd8>
            if (str != "") str += ", ";
 801d83c:	f107 030c 	add.w	r3, r7, #12
 801d840:	495d      	ldr	r1, [pc, #372]	; (801d9b8 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801d842:	4618      	mov	r0, r3
 801d844:	f7f1 fb31 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801d848:	f107 030c 	add.w	r3, r7, #12
 801d84c:	4619      	mov	r1, r3
 801d84e:	6878      	ldr	r0, [r7, #4]
 801d850:	f7f1 ff34 	bl	800f6bc <_ZneRK12SimpleStringS1_>
 801d854:	4603      	mov	r3, r0
 801d856:	461c      	mov	r4, r3
 801d858:	f107 030c 	add.w	r3, r7, #12
 801d85c:	4618      	mov	r0, r3
 801d85e:	f7f1 fedc 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801d862:	2c00      	cmp	r4, #0
 801d864:	d003      	beq.n	801d86e <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x72>
 801d866:	4955      	ldr	r1, [pc, #340]	; (801d9bc <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 801d868:	6878      	ldr	r0, [r7, #4]
 801d86a:	f7f1 ff65 	bl	800f738 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801d86e:	f107 031c 	add.w	r3, r7, #28
 801d872:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801d874:	4618      	mov	r0, r3
 801d876:	f003 ff3d 	bl	80216f4 <_ZNK22MockNamedValueListNode7getTypeEv>
 801d87a:	f107 031c 	add.w	r3, r7, #28
 801d87e:	4618      	mov	r0, r3
 801d880:	f7f1 fe9e 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 801d884:	4604      	mov	r4, r0
 801d886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d88a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801d88c:	4618      	mov	r0, r3
 801d88e:	f003 ff1e 	bl	80216ce <_ZNK22MockNamedValueListNode7getNameEv>
 801d892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d896:	4618      	mov	r0, r3
 801d898:	f7f1 fe92 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 801d89c:	4603      	mov	r3, r0
 801d89e:	f107 0014 	add.w	r0, r7, #20
 801d8a2:	4622      	mov	r2, r4
 801d8a4:	4946      	ldr	r1, [pc, #280]	; (801d9c0 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 801d8a6:	f7f2 fbbf 	bl	8010028 <_Z16StringFromFormatPKcz>
 801d8aa:	f107 0314 	add.w	r3, r7, #20
 801d8ae:	4619      	mov	r1, r3
 801d8b0:	6878      	ldr	r0, [r7, #4]
 801d8b2:	f7f1 ff2f 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801d8b6:	f107 0314 	add.w	r3, r7, #20
 801d8ba:	4618      	mov	r0, r3
 801d8bc:	f7f1 fead 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801d8c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d8c4:	4618      	mov	r0, r3
 801d8c6:	f7f1 fea8 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801d8ca:	f107 031c 	add.w	r3, r7, #28
 801d8ce:	4618      	mov	r0, r3
 801d8d0:	f7f1 fea3 	bl	800f61a <_ZN12SimpleStringD1Ev>
    for (p = inputParameters_->begin(); p; p = p->next()) {
 801d8d4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801d8d6:	f003 febf 	bl	8021658 <_ZN22MockNamedValueListNode4nextEv>
 801d8da:	64f8      	str	r0, [r7, #76]	; 0x4c
 801d8dc:	e79d      	b.n	801d81a <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1e>
        }
    }
    for (p = outputParameters_->begin(); p; p = p->next()) {
 801d8de:	683b      	ldr	r3, [r7, #0]
 801d8e0:	6a1b      	ldr	r3, [r3, #32]
 801d8e2:	4618      	mov	r0, r3
 801d8e4:	f003 ffaf 	bl	8021846 <_ZN18MockNamedValueList5beginEv>
 801d8e8:	64f8      	str	r0, [r7, #76]	; 0x4c
 801d8ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d8ec:	2b00      	cmp	r3, #0
 801d8ee:	d05e      	beq.n	801d9ae <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1b2>
        if (! item(p)->isMatchingActualCall()) {
 801d8f0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801d8f2:	6838      	ldr	r0, [r7, #0]
 801d8f4:	f000 f89e 	bl	801da34 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801d8f8:	4603      	mov	r3, r0
 801d8fa:	4618      	mov	r0, r3
 801d8fc:	f000 f8d0 	bl	801daa0 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801d900:	4603      	mov	r3, r0
 801d902:	f083 0301 	eor.w	r3, r3, #1
 801d906:	b2db      	uxtb	r3, r3
 801d908:	2b00      	cmp	r3, #0
 801d90a:	d04b      	beq.n	801d9a4 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1a8>
            if (str != "") str += ", ";
 801d90c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d910:	4929      	ldr	r1, [pc, #164]	; (801d9b8 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801d912:	4618      	mov	r0, r3
 801d914:	f7f1 fac9 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801d918:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d91c:	4619      	mov	r1, r3
 801d91e:	6878      	ldr	r0, [r7, #4]
 801d920:	f7f1 fecc 	bl	800f6bc <_ZneRK12SimpleStringS1_>
 801d924:	4603      	mov	r3, r0
 801d926:	461c      	mov	r4, r3
 801d928:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d92c:	4618      	mov	r0, r3
 801d92e:	f7f1 fe74 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801d932:	2c00      	cmp	r4, #0
 801d934:	d003      	beq.n	801d93e <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x142>
 801d936:	4921      	ldr	r1, [pc, #132]	; (801d9bc <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 801d938:	6878      	ldr	r0, [r7, #4]
 801d93a:	f7f1 fefd 	bl	800f738 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801d93e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801d942:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801d944:	4618      	mov	r0, r3
 801d946:	f003 fed5 	bl	80216f4 <_ZNK22MockNamedValueListNode7getTypeEv>
 801d94a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801d94e:	4618      	mov	r0, r3
 801d950:	f7f1 fe36 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 801d954:	4604      	mov	r4, r0
 801d956:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d95a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801d95c:	4618      	mov	r0, r3
 801d95e:	f003 feb6 	bl	80216ce <_ZNK22MockNamedValueListNode7getNameEv>
 801d962:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d966:	4618      	mov	r0, r3
 801d968:	f7f1 fe2a 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 801d96c:	4603      	mov	r3, r0
 801d96e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801d972:	4622      	mov	r2, r4
 801d974:	4912      	ldr	r1, [pc, #72]	; (801d9c0 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 801d976:	f7f2 fb57 	bl	8010028 <_Z16StringFromFormatPKcz>
 801d97a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801d97e:	4619      	mov	r1, r3
 801d980:	6878      	ldr	r0, [r7, #4]
 801d982:	f7f1 fec7 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801d986:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801d98a:	4618      	mov	r0, r3
 801d98c:	f7f1 fe45 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801d990:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801d994:	4618      	mov	r0, r3
 801d996:	f7f1 fe40 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801d99a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801d99e:	4618      	mov	r0, r3
 801d9a0:	f7f1 fe3b 	bl	800f61a <_ZN12SimpleStringD1Ev>
    for (p = outputParameters_->begin(); p; p = p->next()) {
 801d9a4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801d9a6:	f003 fe57 	bl	8021658 <_ZN22MockNamedValueListNode4nextEv>
 801d9aa:	64f8      	str	r0, [r7, #76]	; 0x4c
 801d9ac:	e79d      	b.n	801d8ea <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xee>
        }
    }
    return str;
 801d9ae:	bf00      	nop
}
 801d9b0:	6878      	ldr	r0, [r7, #4]
 801d9b2:	3754      	adds	r7, #84	; 0x54
 801d9b4:	46bd      	mov	sp, r7
 801d9b6:	bd90      	pop	{r4, r7, pc}
 801d9b8:	08028bbc 	.word	0x08028bbc
 801d9bc:	08028cc8 	.word	0x08028cc8
 801d9c0:	08028d28 	.word	0x08028d28

0801d9c4 <_ZN23MockCheckedExpectedCall9relatesToERK12SimpleString>:

bool MockCheckedExpectedCall::relatesTo(const SimpleString& functionName)
{
 801d9c4:	b590      	push	{r4, r7, lr}
 801d9c6:	b085      	sub	sp, #20
 801d9c8:	af00      	add	r7, sp, #0
 801d9ca:	6078      	str	r0, [r7, #4]
 801d9cc:	6039      	str	r1, [r7, #0]
    return functionName == getName();
 801d9ce:	f107 0308 	add.w	r3, r7, #8
 801d9d2:	6879      	ldr	r1, [r7, #4]
 801d9d4:	4618      	mov	r0, r3
 801d9d6:	f7fe ff0d 	bl	801c7f4 <_ZNK23MockCheckedExpectedCall7getNameEv>
 801d9da:	f107 0308 	add.w	r3, r7, #8
 801d9de:	4619      	mov	r1, r3
 801d9e0:	6838      	ldr	r0, [r7, #0]
 801d9e2:	f7f1 fe26 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 801d9e6:	4603      	mov	r3, r0
 801d9e8:	461c      	mov	r4, r3
 801d9ea:	f107 0308 	add.w	r3, r7, #8
 801d9ee:	4618      	mov	r0, r3
 801d9f0:	f7f1 fe13 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801d9f4:	4623      	mov	r3, r4
}
 801d9f6:	4618      	mov	r0, r3
 801d9f8:	3714      	adds	r7, #20
 801d9fa:	46bd      	mov	sp, r7
 801d9fc:	bd90      	pop	{r4, r7, pc}

0801d9fe <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv>:

bool MockCheckedExpectedCall::relatesToObject(const void* objectPtr) const
{
 801d9fe:	b480      	push	{r7}
 801da00:	b083      	sub	sp, #12
 801da02:	af00      	add	r7, sp, #0
 801da04:	6078      	str	r0, [r7, #4]
 801da06:	6039      	str	r1, [r7, #0]
    return (!isSpecificObjectExpected_) || (objectPtr_ == objectPtr);
 801da08:	687b      	ldr	r3, [r7, #4]
 801da0a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801da0e:	f083 0301 	eor.w	r3, r3, #1
 801da12:	b2db      	uxtb	r3, r3
 801da14:	2b00      	cmp	r3, #0
 801da16:	d104      	bne.n	801da22 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x24>
 801da18:	687b      	ldr	r3, [r7, #4]
 801da1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801da1c:	683a      	ldr	r2, [r7, #0]
 801da1e:	429a      	cmp	r2, r3
 801da20:	d101      	bne.n	801da26 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x28>
 801da22:	2301      	movs	r3, #1
 801da24:	e000      	b.n	801da28 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x2a>
 801da26:	2300      	movs	r3, #0
}
 801da28:	4618      	mov	r0, r3
 801da2a:	370c      	adds	r7, #12
 801da2c:	46bd      	mov	sp, r7
 801da2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da32:	4770      	bx	lr

0801da34 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>:

MockCheckedExpectedCall::MockExpectedFunctionParameter* MockCheckedExpectedCall::item(MockNamedValueListNode* node)
{
 801da34:	b580      	push	{r7, lr}
 801da36:	b082      	sub	sp, #8
 801da38:	af00      	add	r7, sp, #0
 801da3a:	6078      	str	r0, [r7, #4]
 801da3c:	6039      	str	r1, [r7, #0]
    return (MockExpectedFunctionParameter*) node->item();
 801da3e:	6838      	ldr	r0, [r7, #0]
 801da40:	f003 fe16 	bl	8021670 <_ZN22MockNamedValueListNode4itemEv>
 801da44:	4603      	mov	r3, r0
}
 801da46:	4618      	mov	r0, r3
 801da48:	3708      	adds	r7, #8
 801da4a:	46bd      	mov	sp, r7
 801da4c:	bd80      	pop	{r7, pc}
	...

0801da50 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>:

MockCheckedExpectedCall::MockExpectedFunctionParameter::MockExpectedFunctionParameter(const SimpleString& name)
 801da50:	b580      	push	{r7, lr}
 801da52:	b082      	sub	sp, #8
 801da54:	af00      	add	r7, sp, #0
 801da56:	6078      	str	r0, [r7, #4]
 801da58:	6039      	str	r1, [r7, #0]
            : MockNamedValue(name), matchesActualCall_(false)
 801da5a:	687b      	ldr	r3, [r7, #4]
 801da5c:	6839      	ldr	r1, [r7, #0]
 801da5e:	4618      	mov	r0, r3
 801da60:	f001 ff48 	bl	801f8f4 <_ZN14MockNamedValueC1ERK12SimpleString>
 801da64:	4a05      	ldr	r2, [pc, #20]	; (801da7c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString+0x2c>)
 801da66:	687b      	ldr	r3, [r7, #4]
 801da68:	601a      	str	r2, [r3, #0]
 801da6a:	687b      	ldr	r3, [r7, #4]
 801da6c:	2200      	movs	r2, #0
 801da6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
{
}
 801da72:	687b      	ldr	r3, [r7, #4]
 801da74:	4618      	mov	r0, r3
 801da76:	3708      	adds	r7, #8
 801da78:	46bd      	mov	sp, r7
 801da7a:	bd80      	pop	{r7, pc}
 801da7c:	0802c104 	.word	0x0802c104

0801da80 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>:

void MockCheckedExpectedCall::MockExpectedFunctionParameter::setMatchesActualCall(bool b)
{
 801da80:	b480      	push	{r7}
 801da82:	b083      	sub	sp, #12
 801da84:	af00      	add	r7, sp, #0
 801da86:	6078      	str	r0, [r7, #4]
 801da88:	460b      	mov	r3, r1
 801da8a:	70fb      	strb	r3, [r7, #3]
    matchesActualCall_ = b;
 801da8c:	687b      	ldr	r3, [r7, #4]
 801da8e:	78fa      	ldrb	r2, [r7, #3]
 801da90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 801da94:	bf00      	nop
 801da96:	370c      	adds	r7, #12
 801da98:	46bd      	mov	sp, r7
 801da9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da9e:	4770      	bx	lr

0801daa0 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::MockExpectedFunctionParameter::isMatchingActualCall() const
{
 801daa0:	b480      	push	{r7}
 801daa2:	b083      	sub	sp, #12
 801daa4:	af00      	add	r7, sp, #0
 801daa6:	6078      	str	r0, [r7, #4]
    return matchesActualCall_;
 801daa8:	687b      	ldr	r3, [r7, #4]
 801daaa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 801daae:	4618      	mov	r0, r3
 801dab0:	370c      	adds	r7, #12
 801dab2:	46bd      	mov	sp, r7
 801dab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dab8:	4770      	bx	lr
	...

0801dabc <_ZN23MockCheckedExpectedCall14andReturnValueEb>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(bool value)
{
 801dabc:	b580      	push	{r7, lr}
 801dabe:	b082      	sub	sp, #8
 801dac0:	af00      	add	r7, sp, #0
 801dac2:	6078      	str	r0, [r7, #4]
 801dac4:	460b      	mov	r3, r1
 801dac6:	70fb      	strb	r3, [r7, #3]
    returnValue_.setName("returnValue");
 801dac8:	687b      	ldr	r3, [r7, #4]
 801daca:	3328      	adds	r3, #40	; 0x28
 801dacc:	4907      	ldr	r1, [pc, #28]	; (801daec <_ZN23MockCheckedExpectedCall14andReturnValueEb+0x30>)
 801dace:	4618      	mov	r0, r3
 801dad0:	f002 f9b2 	bl	801fe38 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801dad4:	687b      	ldr	r3, [r7, #4]
 801dad6:	3328      	adds	r3, #40	; 0x28
 801dad8:	78fa      	ldrb	r2, [r7, #3]
 801dada:	4611      	mov	r1, r2
 801dadc:	4618      	mov	r0, r3
 801dade:	f001 ff5b 	bl	801f998 <_ZN14MockNamedValue8setValueEb>
    return *this;
 801dae2:	687b      	ldr	r3, [r7, #4]
}
 801dae4:	4618      	mov	r0, r3
 801dae6:	3708      	adds	r7, #8
 801dae8:	46bd      	mov	sp, r7
 801daea:	bd80      	pop	{r7, pc}
 801daec:	08028d30 	.word	0x08028d30

0801daf0 <_ZN23MockCheckedExpectedCall14andReturnValueEj>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned int value)
{
 801daf0:	b580      	push	{r7, lr}
 801daf2:	b082      	sub	sp, #8
 801daf4:	af00      	add	r7, sp, #0
 801daf6:	6078      	str	r0, [r7, #4]
 801daf8:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801dafa:	687b      	ldr	r3, [r7, #4]
 801dafc:	3328      	adds	r3, #40	; 0x28
 801dafe:	4907      	ldr	r1, [pc, #28]	; (801db1c <_ZN23MockCheckedExpectedCall14andReturnValueEj+0x2c>)
 801db00:	4618      	mov	r0, r3
 801db02:	f002 f999 	bl	801fe38 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801db06:	687b      	ldr	r3, [r7, #4]
 801db08:	3328      	adds	r3, #40	; 0x28
 801db0a:	6839      	ldr	r1, [r7, #0]
 801db0c:	4618      	mov	r0, r3
 801db0e:	f001 ff67 	bl	801f9e0 <_ZN14MockNamedValue8setValueEj>
    return *this;
 801db12:	687b      	ldr	r3, [r7, #4]
}
 801db14:	4618      	mov	r0, r3
 801db16:	3708      	adds	r7, #8
 801db18:	46bd      	mov	sp, r7
 801db1a:	bd80      	pop	{r7, pc}
 801db1c:	08028d30 	.word	0x08028d30

0801db20 <_ZN23MockCheckedExpectedCall14andReturnValueEi>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(int value)
{
 801db20:	b580      	push	{r7, lr}
 801db22:	b082      	sub	sp, #8
 801db24:	af00      	add	r7, sp, #0
 801db26:	6078      	str	r0, [r7, #4]
 801db28:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801db2a:	687b      	ldr	r3, [r7, #4]
 801db2c:	3328      	adds	r3, #40	; 0x28
 801db2e:	4907      	ldr	r1, [pc, #28]	; (801db4c <_ZN23MockCheckedExpectedCall14andReturnValueEi+0x2c>)
 801db30:	4618      	mov	r0, r3
 801db32:	f002 f981 	bl	801fe38 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801db36:	687b      	ldr	r3, [r7, #4]
 801db38:	3328      	adds	r3, #40	; 0x28
 801db3a:	6839      	ldr	r1, [r7, #0]
 801db3c:	4618      	mov	r0, r3
 801db3e:	f001 ff71 	bl	801fa24 <_ZN14MockNamedValue8setValueEi>
    return *this;
 801db42:	687b      	ldr	r3, [r7, #4]
}
 801db44:	4618      	mov	r0, r3
 801db46:	3708      	adds	r7, #8
 801db48:	46bd      	mov	sp, r7
 801db4a:	bd80      	pop	{r7, pc}
 801db4c:	08028d30 	.word	0x08028d30

0801db50 <_ZN23MockCheckedExpectedCall14andReturnValueEl>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(long int value)
{
 801db50:	b580      	push	{r7, lr}
 801db52:	b082      	sub	sp, #8
 801db54:	af00      	add	r7, sp, #0
 801db56:	6078      	str	r0, [r7, #4]
 801db58:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801db5a:	687b      	ldr	r3, [r7, #4]
 801db5c:	3328      	adds	r3, #40	; 0x28
 801db5e:	4907      	ldr	r1, [pc, #28]	; (801db7c <_ZN23MockCheckedExpectedCall14andReturnValueEl+0x2c>)
 801db60:	4618      	mov	r0, r3
 801db62:	f002 f969 	bl	801fe38 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801db66:	687b      	ldr	r3, [r7, #4]
 801db68:	3328      	adds	r3, #40	; 0x28
 801db6a:	6839      	ldr	r1, [r7, #0]
 801db6c:	4618      	mov	r0, r3
 801db6e:	f001 ff7b 	bl	801fa68 <_ZN14MockNamedValue8setValueEl>
    return *this;
 801db72:	687b      	ldr	r3, [r7, #4]
}
 801db74:	4618      	mov	r0, r3
 801db76:	3708      	adds	r7, #8
 801db78:	46bd      	mov	sp, r7
 801db7a:	bd80      	pop	{r7, pc}
 801db7c:	08028d30 	.word	0x08028d30

0801db80 <_ZN23MockCheckedExpectedCall14andReturnValueEm>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned long int value)
{
 801db80:	b580      	push	{r7, lr}
 801db82:	b082      	sub	sp, #8
 801db84:	af00      	add	r7, sp, #0
 801db86:	6078      	str	r0, [r7, #4]
 801db88:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801db8a:	687b      	ldr	r3, [r7, #4]
 801db8c:	3328      	adds	r3, #40	; 0x28
 801db8e:	4907      	ldr	r1, [pc, #28]	; (801dbac <_ZN23MockCheckedExpectedCall14andReturnValueEm+0x2c>)
 801db90:	4618      	mov	r0, r3
 801db92:	f002 f951 	bl	801fe38 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801db96:	687b      	ldr	r3, [r7, #4]
 801db98:	3328      	adds	r3, #40	; 0x28
 801db9a:	6839      	ldr	r1, [r7, #0]
 801db9c:	4618      	mov	r0, r3
 801db9e:	f001 ff85 	bl	801faac <_ZN14MockNamedValue8setValueEm>
    return *this;
 801dba2:	687b      	ldr	r3, [r7, #4]
}
 801dba4:	4618      	mov	r0, r3
 801dba6:	3708      	adds	r7, #8
 801dba8:	46bd      	mov	sp, r7
 801dbaa:	bd80      	pop	{r7, pc}
 801dbac:	08028d30 	.word	0x08028d30

0801dbb0 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_longlong)
{
 801dbb0:	b5b0      	push	{r4, r5, r7, lr}
 801dbb2:	b086      	sub	sp, #24
 801dbb4:	af02      	add	r7, sp, #8
 801dbb6:	60f8      	str	r0, [r7, #12]
 801dbb8:	1d3b      	adds	r3, r7, #4
 801dbba:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801dbbe:	f7f8 fd57 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 801dbc2:	4604      	mov	r4, r0
 801dbc4:	6823      	ldr	r3, [r4, #0]
 801dbc6:	3368      	adds	r3, #104	; 0x68
 801dbc8:	681d      	ldr	r5, [r3, #0]
 801dbca:	f7f8 fd61 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801dbce:	4603      	mov	r3, r0
 801dbd0:	9300      	str	r3, [sp, #0]
 801dbd2:	f240 2319 	movw	r3, #537	; 0x219
 801dbd6:	4a04      	ldr	r2, [pc, #16]	; (801dbe8 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x38>)
 801dbd8:	4904      	ldr	r1, [pc, #16]	; (801dbec <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x3c>)
 801dbda:	4620      	mov	r0, r4
 801dbdc:	47a8      	blx	r5
    return *this;
 801dbde:	68fb      	ldr	r3, [r7, #12]
}
 801dbe0:	4618      	mov	r0, r3
 801dbe2:	3710      	adds	r7, #16
 801dbe4:	46bd      	mov	sp, r7
 801dbe6:	bdb0      	pop	{r4, r5, r7, pc}
 801dbe8:	08028bc0 	.word	0x08028bc0
 801dbec:	08028bdc 	.word	0x08028bdc

0801dbf0 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_ulonglong)
{
 801dbf0:	b5b0      	push	{r4, r5, r7, lr}
 801dbf2:	b086      	sub	sp, #24
 801dbf4:	af02      	add	r7, sp, #8
 801dbf6:	60f8      	str	r0, [r7, #12]
 801dbf8:	1d3b      	adds	r3, r7, #4
 801dbfa:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801dbfe:	f7f8 fd37 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 801dc02:	4604      	mov	r4, r0
 801dc04:	6823      	ldr	r3, [r4, #0]
 801dc06:	3368      	adds	r3, #104	; 0x68
 801dc08:	681d      	ldr	r5, [r3, #0]
 801dc0a:	f7f8 fd41 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801dc0e:	4603      	mov	r3, r0
 801dc10:	9300      	str	r3, [sp, #0]
 801dc12:	f240 231f 	movw	r3, #543	; 0x21f
 801dc16:	4a04      	ldr	r2, [pc, #16]	; (801dc28 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x38>)
 801dc18:	4904      	ldr	r1, [pc, #16]	; (801dc2c <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x3c>)
 801dc1a:	4620      	mov	r0, r4
 801dc1c:	47a8      	blx	r5
    return *this;
 801dc1e:	68fb      	ldr	r3, [r7, #12]
}
 801dc20:	4618      	mov	r0, r3
 801dc22:	3710      	adds	r7, #16
 801dc24:	46bd      	mov	sp, r7
 801dc26:	bdb0      	pop	{r4, r5, r7, pc}
 801dc28:	08028bc0 	.word	0x08028bc0
 801dc2c:	08028bfc 	.word	0x08028bfc

0801dc30 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc>:

#endif

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const char* value)
{
 801dc30:	b580      	push	{r7, lr}
 801dc32:	b082      	sub	sp, #8
 801dc34:	af00      	add	r7, sp, #0
 801dc36:	6078      	str	r0, [r7, #4]
 801dc38:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801dc3a:	687b      	ldr	r3, [r7, #4]
 801dc3c:	3328      	adds	r3, #40	; 0x28
 801dc3e:	4907      	ldr	r1, [pc, #28]	; (801dc5c <_ZN23MockCheckedExpectedCall14andReturnValueEPKc+0x2c>)
 801dc40:	4618      	mov	r0, r3
 801dc42:	f002 f8f9 	bl	801fe38 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801dc46:	687b      	ldr	r3, [r7, #4]
 801dc48:	3328      	adds	r3, #40	; 0x28
 801dc4a:	6839      	ldr	r1, [r7, #0]
 801dc4c:	4618      	mov	r0, r3
 801dc4e:	f002 f835 	bl	801fcbc <_ZN14MockNamedValue8setValueEPKc>
    return *this;
 801dc52:	687b      	ldr	r3, [r7, #4]
}
 801dc54:	4618      	mov	r0, r3
 801dc56:	3708      	adds	r7, #8
 801dc58:	46bd      	mov	sp, r7
 801dc5a:	bd80      	pop	{r7, pc}
 801dc5c:	08028d30 	.word	0x08028d30

0801dc60 <_ZN23MockCheckedExpectedCall14andReturnValueEd>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(double value)
{
 801dc60:	b580      	push	{r7, lr}
 801dc62:	b084      	sub	sp, #16
 801dc64:	af00      	add	r7, sp, #0
 801dc66:	60f8      	str	r0, [r7, #12]
 801dc68:	ed87 0b00 	vstr	d0, [r7]
    returnValue_.setName("returnValue");
 801dc6c:	68fb      	ldr	r3, [r7, #12]
 801dc6e:	3328      	adds	r3, #40	; 0x28
 801dc70:	4907      	ldr	r1, [pc, #28]	; (801dc90 <_ZN23MockCheckedExpectedCall14andReturnValueEd+0x30>)
 801dc72:	4618      	mov	r0, r3
 801dc74:	f002 f8e0 	bl	801fe38 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801dc78:	68fb      	ldr	r3, [r7, #12]
 801dc7a:	3328      	adds	r3, #40	; 0x28
 801dc7c:	ed97 0b00 	vldr	d0, [r7]
 801dc80:	4618      	mov	r0, r3
 801dc82:	f001 ff71 	bl	801fb68 <_ZN14MockNamedValue8setValueEd>
    return *this;
 801dc86:	68fb      	ldr	r3, [r7, #12]
}
 801dc88:	4618      	mov	r0, r3
 801dc8a:	3710      	adds	r7, #16
 801dc8c:	46bd      	mov	sp, r7
 801dc8e:	bd80      	pop	{r7, pc}
 801dc90:	08028d30 	.word	0x08028d30

0801dc94 <_ZN23MockCheckedExpectedCall14andReturnValueEPv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void* value)
{
 801dc94:	b580      	push	{r7, lr}
 801dc96:	b082      	sub	sp, #8
 801dc98:	af00      	add	r7, sp, #0
 801dc9a:	6078      	str	r0, [r7, #4]
 801dc9c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801dc9e:	687b      	ldr	r3, [r7, #4]
 801dca0:	3328      	adds	r3, #40	; 0x28
 801dca2:	4907      	ldr	r1, [pc, #28]	; (801dcc0 <_ZN23MockCheckedExpectedCall14andReturnValueEPv+0x2c>)
 801dca4:	4618      	mov	r0, r3
 801dca6:	f002 f8c7 	bl	801fe38 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801dcaa:	687b      	ldr	r3, [r7, #4]
 801dcac:	3328      	adds	r3, #40	; 0x28
 801dcae:	6839      	ldr	r1, [r7, #0]
 801dcb0:	4618      	mov	r0, r3
 801dcb2:	f001 ff9d 	bl	801fbf0 <_ZN14MockNamedValue8setValueEPv>
    return *this;
 801dcb6:	687b      	ldr	r3, [r7, #4]
}
 801dcb8:	4618      	mov	r0, r3
 801dcba:	3708      	adds	r7, #8
 801dcbc:	46bd      	mov	sp, r7
 801dcbe:	bd80      	pop	{r7, pc}
 801dcc0:	08028d30 	.word	0x08028d30

0801dcc4 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const void* value)
{
 801dcc4:	b580      	push	{r7, lr}
 801dcc6:	b082      	sub	sp, #8
 801dcc8:	af00      	add	r7, sp, #0
 801dcca:	6078      	str	r0, [r7, #4]
 801dccc:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801dcce:	687b      	ldr	r3, [r7, #4]
 801dcd0:	3328      	adds	r3, #40	; 0x28
 801dcd2:	4907      	ldr	r1, [pc, #28]	; (801dcf0 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv+0x2c>)
 801dcd4:	4618      	mov	r0, r3
 801dcd6:	f002 f8af 	bl	801fe38 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801dcda:	687b      	ldr	r3, [r7, #4]
 801dcdc:	3328      	adds	r3, #40	; 0x28
 801dcde:	6839      	ldr	r1, [r7, #0]
 801dce0:	4618      	mov	r0, r3
 801dce2:	f001 ffa7 	bl	801fc34 <_ZN14MockNamedValue8setValueEPKv>
    return *this;
 801dce6:	687b      	ldr	r3, [r7, #4]
}
 801dce8:	4618      	mov	r0, r3
 801dcea:	3708      	adds	r7, #8
 801dcec:	46bd      	mov	sp, r7
 801dcee:	bd80      	pop	{r7, pc}
 801dcf0:	08028d30 	.word	0x08028d30

0801dcf4 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void (*value)())
{
 801dcf4:	b580      	push	{r7, lr}
 801dcf6:	b082      	sub	sp, #8
 801dcf8:	af00      	add	r7, sp, #0
 801dcfa:	6078      	str	r0, [r7, #4]
 801dcfc:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801dcfe:	687b      	ldr	r3, [r7, #4]
 801dd00:	3328      	adds	r3, #40	; 0x28
 801dd02:	4907      	ldr	r1, [pc, #28]	; (801dd20 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE+0x2c>)
 801dd04:	4618      	mov	r0, r3
 801dd06:	f002 f897 	bl	801fe38 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801dd0a:	687b      	ldr	r3, [r7, #4]
 801dd0c:	3328      	adds	r3, #40	; 0x28
 801dd0e:	6839      	ldr	r1, [r7, #0]
 801dd10:	4618      	mov	r0, r3
 801dd12:	f001 ffb1 	bl	801fc78 <_ZN14MockNamedValue8setValueEPFvvE>
    return *this;
 801dd16:	687b      	ldr	r3, [r7, #4]
}
 801dd18:	4618      	mov	r0, r3
 801dd1a:	3708      	adds	r7, #8
 801dd1c:	46bd      	mov	sp, r7
 801dd1e:	bd80      	pop	{r7, pc}
 801dd20:	08028d30 	.word	0x08028d30

0801dd24 <_ZN23MockCheckedExpectedCall8onObjectEPv>:

MockExpectedCall& MockCheckedExpectedCall::onObject(void* objectPtr)
{
 801dd24:	b480      	push	{r7}
 801dd26:	b083      	sub	sp, #12
 801dd28:	af00      	add	r7, sp, #0
 801dd2a:	6078      	str	r0, [r7, #4]
 801dd2c:	6039      	str	r1, [r7, #0]
    isSpecificObjectExpected_ = true;
 801dd2e:	687b      	ldr	r3, [r7, #4]
 801dd30:	2201      	movs	r2, #1
 801dd32:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    wasPassedToObject_ = false;
 801dd36:	687b      	ldr	r3, [r7, #4]
 801dd38:	2200      	movs	r2, #0
 801dd3a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    objectPtr_ = objectPtr;
 801dd3e:	687b      	ldr	r3, [r7, #4]
 801dd40:	683a      	ldr	r2, [r7, #0]
 801dd42:	661a      	str	r2, [r3, #96]	; 0x60
    return *this;
 801dd44:	687b      	ldr	r3, [r7, #4]
}
 801dd46:	4618      	mov	r0, r3
 801dd48:	370c      	adds	r7, #12
 801dd4a:	46bd      	mov	sp, r7
 801dd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd50:	4770      	bx	lr

0801dd52 <_ZN23MockCheckedExpectedCall11returnValueEv>:

MockNamedValue MockCheckedExpectedCall::returnValue()
{
 801dd52:	b580      	push	{r7, lr}
 801dd54:	b082      	sub	sp, #8
 801dd56:	af00      	add	r7, sp, #0
 801dd58:	6078      	str	r0, [r7, #4]
 801dd5a:	6039      	str	r1, [r7, #0]
    return returnValue_;
 801dd5c:	683b      	ldr	r3, [r7, #0]
 801dd5e:	3328      	adds	r3, #40	; 0x28
 801dd60:	4619      	mov	r1, r3
 801dd62:	6878      	ldr	r0, [r7, #4]
 801dd64:	f7ef f946 	bl	800cff4 <_ZN14MockNamedValueC1ERKS_>
}
 801dd68:	6878      	ldr	r0, [r7, #4]
 801dd6a:	3708      	adds	r7, #8
 801dd6c:	46bd      	mov	sp, r7
 801dd6e:	bd80      	pop	{r7, pc}

0801dd70 <_ZN23MockCheckedExpectedCall13withCallOrderEjj>:

MockExpectedCall& MockCheckedExpectedCall::withCallOrder(unsigned int initialCallOrder, unsigned int finalCallOrder)
{
 801dd70:	b480      	push	{r7}
 801dd72:	b085      	sub	sp, #20
 801dd74:	af00      	add	r7, sp, #0
 801dd76:	60f8      	str	r0, [r7, #12]
 801dd78:	60b9      	str	r1, [r7, #8]
 801dd7a:	607a      	str	r2, [r7, #4]
    initialExpectedCallOrder_ = initialCallOrder;
 801dd7c:	68fb      	ldr	r3, [r7, #12]
 801dd7e:	68ba      	ldr	r2, [r7, #8]
 801dd80:	611a      	str	r2, [r3, #16]
    finalExpectedCallOrder_ = finalCallOrder;
 801dd82:	68fb      	ldr	r3, [r7, #12]
 801dd84:	687a      	ldr	r2, [r7, #4]
 801dd86:	615a      	str	r2, [r3, #20]
    return *this;
 801dd88:	68fb      	ldr	r3, [r7, #12]
}
 801dd8a:	4618      	mov	r0, r3
 801dd8c:	3714      	adds	r7, #20
 801dd8e:	46bd      	mov	sp, r7
 801dd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd94:	4770      	bx	lr

0801dd96 <_ZNK23MockCheckedExpectedCall12isOutOfOrderEv>:

bool MockCheckedExpectedCall::isOutOfOrder() const
{
 801dd96:	b480      	push	{r7}
 801dd98:	b083      	sub	sp, #12
 801dd9a:	af00      	add	r7, sp, #0
 801dd9c:	6078      	str	r0, [r7, #4]
    return outOfOrder_;
 801dd9e:	687b      	ldr	r3, [r7, #4]
 801dda0:	7e1b      	ldrb	r3, [r3, #24]
}
 801dda2:	4618      	mov	r0, r3
 801dda4:	370c      	adds	r7, #12
 801dda6:	46bd      	mov	sp, r7
 801dda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddac:	4770      	bx	lr

0801ddae <_ZNK23MockCheckedExpectedCall23getActualCallsFulfilledEv>:

unsigned int MockCheckedExpectedCall::getActualCallsFulfilled() const
{
 801ddae:	b480      	push	{r7}
 801ddb0:	b083      	sub	sp, #12
 801ddb2:	af00      	add	r7, sp, #0
 801ddb4:	6078      	str	r0, [r7, #4]
    return actualCalls_;
 801ddb6:	687b      	ldr	r3, [r7, #4]
 801ddb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
 801ddba:	4618      	mov	r0, r3
 801ddbc:	370c      	adds	r7, #12
 801ddbe:	46bd      	mov	sp, r7
 801ddc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddc4:	4770      	bx	lr
	...

0801ddc8 <_ZN23MockIgnoredExpectedCallC1Ev>:
class MockIgnoredExpectedCall: public MockExpectedCall
 801ddc8:	b580      	push	{r7, lr}
 801ddca:	b082      	sub	sp, #8
 801ddcc:	af00      	add	r7, sp, #0
 801ddce:	6078      	str	r0, [r7, #4]
 801ddd0:	687b      	ldr	r3, [r7, #4]
 801ddd2:	4618      	mov	r0, r3
 801ddd4:	f7fe fcce 	bl	801c774 <_ZN16MockExpectedCallC1Ev>
 801ddd8:	4a03      	ldr	r2, [pc, #12]	; (801dde8 <_ZN23MockIgnoredExpectedCallC1Ev+0x20>)
 801ddda:	687b      	ldr	r3, [r7, #4]
 801dddc:	601a      	str	r2, [r3, #0]
 801ddde:	687b      	ldr	r3, [r7, #4]
 801dde0:	4618      	mov	r0, r3
 801dde2:	3708      	adds	r7, #8
 801dde4:	46bd      	mov	sp, r7
 801dde6:	bd80      	pop	{r7, pc}
 801dde8:	0802bf64 	.word	0x0802bf64

0801ddec <__tcf_0>:

MockExpectedCall& MockIgnoredExpectedCall::instance()
{
    static MockIgnoredExpectedCall call;
 801ddec:	b580      	push	{r7, lr}
 801ddee:	af00      	add	r7, sp, #0
 801ddf0:	4801      	ldr	r0, [pc, #4]	; (801ddf8 <__tcf_0+0xc>)
 801ddf2:	f000 f831 	bl	801de58 <_ZN23MockIgnoredExpectedCallD1Ev>
 801ddf6:	bd80      	pop	{r7, pc}
 801ddf8:	20001030 	.word	0x20001030

0801ddfc <_ZN23MockIgnoredExpectedCall8instanceEv>:
{
 801ddfc:	b580      	push	{r7, lr}
 801ddfe:	af00      	add	r7, sp, #0
    static MockIgnoredExpectedCall call;
 801de00:	4b12      	ldr	r3, [pc, #72]	; (801de4c <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801de02:	781b      	ldrb	r3, [r3, #0]
 801de04:	f3bf 8f5b 	dmb	ish
 801de08:	b2db      	uxtb	r3, r3
 801de0a:	f003 0301 	and.w	r3, r3, #1
 801de0e:	2b00      	cmp	r3, #0
 801de10:	bf0c      	ite	eq
 801de12:	2301      	moveq	r3, #1
 801de14:	2300      	movne	r3, #0
 801de16:	b2db      	uxtb	r3, r3
 801de18:	2b00      	cmp	r3, #0
 801de1a:	d013      	beq.n	801de44 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801de1c:	480b      	ldr	r0, [pc, #44]	; (801de4c <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801de1e:	f003 ff03 	bl	8021c28 <__cxa_guard_acquire>
 801de22:	4603      	mov	r3, r0
 801de24:	2b00      	cmp	r3, #0
 801de26:	bf14      	ite	ne
 801de28:	2301      	movne	r3, #1
 801de2a:	2300      	moveq	r3, #0
 801de2c:	b2db      	uxtb	r3, r3
 801de2e:	2b00      	cmp	r3, #0
 801de30:	d008      	beq.n	801de44 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801de32:	4807      	ldr	r0, [pc, #28]	; (801de50 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
 801de34:	f7ff ffc8 	bl	801ddc8 <_ZN23MockIgnoredExpectedCallC1Ev>
 801de38:	4804      	ldr	r0, [pc, #16]	; (801de4c <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801de3a:	f003 ff01 	bl	8021c40 <__cxa_guard_release>
 801de3e:	4805      	ldr	r0, [pc, #20]	; (801de54 <_ZN23MockIgnoredExpectedCall8instanceEv+0x58>)
 801de40:	f003 ff25 	bl	8021c8e <atexit>
    return call;
 801de44:	4b02      	ldr	r3, [pc, #8]	; (801de50 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
}
 801de46:	4618      	mov	r0, r3
 801de48:	bd80      	pop	{r7, pc}
 801de4a:	bf00      	nop
 801de4c:	20001034 	.word	0x20001034
 801de50:	20001030 	.word	0x20001030
 801de54:	0801dded 	.word	0x0801dded

0801de58 <_ZN23MockIgnoredExpectedCallD1Ev>:
 801de58:	b580      	push	{r7, lr}
 801de5a:	b082      	sub	sp, #8
 801de5c:	af00      	add	r7, sp, #0
 801de5e:	6078      	str	r0, [r7, #4]
 801de60:	4a05      	ldr	r2, [pc, #20]	; (801de78 <_ZN23MockIgnoredExpectedCallD1Ev+0x20>)
 801de62:	687b      	ldr	r3, [r7, #4]
 801de64:	601a      	str	r2, [r3, #0]
 801de66:	687b      	ldr	r3, [r7, #4]
 801de68:	4618      	mov	r0, r3
 801de6a:	f7fe fc93 	bl	801c794 <_ZN16MockExpectedCallD1Ev>
 801de6e:	687b      	ldr	r3, [r7, #4]
 801de70:	4618      	mov	r0, r3
 801de72:	3708      	adds	r7, #8
 801de74:	46bd      	mov	sp, r7
 801de76:	bd80      	pop	{r7, pc}
 801de78:	0802bf64 	.word	0x0802bf64

0801de7c <_ZN23MockIgnoredExpectedCallD0Ev>:
 801de7c:	b580      	push	{r7, lr}
 801de7e:	b082      	sub	sp, #8
 801de80:	af00      	add	r7, sp, #0
 801de82:	6078      	str	r0, [r7, #4]
 801de84:	6878      	ldr	r0, [r7, #4]
 801de86:	f7ff ffe7 	bl	801de58 <_ZN23MockIgnoredExpectedCallD1Ev>
 801de8a:	2104      	movs	r1, #4
 801de8c:	6878      	ldr	r0, [r7, #4]
 801de8e:	f7ee fc5d 	bl	800c74c <_ZdlPvj>
 801de92:	687b      	ldr	r3, [r7, #4]
 801de94:	4618      	mov	r0, r3
 801de96:	3708      	adds	r7, #8
 801de98:	46bd      	mov	sp, r7
 801de9a:	bd80      	pop	{r7, pc}

0801de9c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>:
    class MockExpectedFunctionParameter : public MockNamedValue
 801de9c:	b580      	push	{r7, lr}
 801de9e:	b082      	sub	sp, #8
 801dea0:	af00      	add	r7, sp, #0
 801dea2:	6078      	str	r0, [r7, #4]
 801dea4:	4a05      	ldr	r2, [pc, #20]	; (801debc <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev+0x20>)
 801dea6:	687b      	ldr	r3, [r7, #4]
 801dea8:	601a      	str	r2, [r3, #0]
 801deaa:	687b      	ldr	r3, [r7, #4]
 801deac:	4618      	mov	r0, r3
 801deae:	f001 fd4b 	bl	801f948 <_ZN14MockNamedValueD1Ev>
 801deb2:	687b      	ldr	r3, [r7, #4]
 801deb4:	4618      	mov	r0, r3
 801deb6:	3708      	adds	r7, #8
 801deb8:	46bd      	mov	sp, r7
 801deba:	bd80      	pop	{r7, pc}
 801debc:	0802c104 	.word	0x0802c104

0801dec0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD0Ev>:
 801dec0:	b580      	push	{r7, lr}
 801dec2:	b082      	sub	sp, #8
 801dec4:	af00      	add	r7, sp, #0
 801dec6:	6078      	str	r0, [r7, #4]
 801dec8:	6878      	ldr	r0, [r7, #4]
 801deca:	f7ff ffe7 	bl	801de9c <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>
 801dece:	2138      	movs	r1, #56	; 0x38
 801ded0:	6878      	ldr	r0, [r7, #4]
 801ded2:	f7ee fc3b 	bl	800c74c <_ZdlPvj>
 801ded6:	687b      	ldr	r3, [r7, #4]
 801ded8:	4618      	mov	r0, r3
 801deda:	3708      	adds	r7, #8
 801dedc:	46bd      	mov	sp, r7
 801dede:	bd80      	pop	{r7, pc}

0801dee0 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>:
    {
    public:
        MockCheckedExpectedCall* expectedCall_;

        MockExpectedCallsListNode* next_;
        MockExpectedCallsListNode(MockCheckedExpectedCall* expectedCall)
 801dee0:	b480      	push	{r7}
 801dee2:	b083      	sub	sp, #12
 801dee4:	af00      	add	r7, sp, #0
 801dee6:	6078      	str	r0, [r7, #4]
 801dee8:	6039      	str	r1, [r7, #0]
            : expectedCall_(expectedCall), next_(NULLPTR) {}
 801deea:	687b      	ldr	r3, [r7, #4]
 801deec:	683a      	ldr	r2, [r7, #0]
 801deee:	601a      	str	r2, [r3, #0]
 801def0:	687b      	ldr	r3, [r7, #4]
 801def2:	2200      	movs	r2, #0
 801def4:	605a      	str	r2, [r3, #4]
 801def6:	687b      	ldr	r3, [r7, #4]
 801def8:	4618      	mov	r0, r3
 801defa:	370c      	adds	r7, #12
 801defc:	46bd      	mov	sp, r7
 801defe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df02:	4770      	bx	lr

0801df04 <_ZN21MockExpectedCallsListC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockExpectedCallsList.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCallsList::MockExpectedCallsList() : head_(NULLPTR)
 801df04:	b480      	push	{r7}
 801df06:	b083      	sub	sp, #12
 801df08:	af00      	add	r7, sp, #0
 801df0a:	6078      	str	r0, [r7, #4]
 801df0c:	4a06      	ldr	r2, [pc, #24]	; (801df28 <_ZN21MockExpectedCallsListC1Ev+0x24>)
 801df0e:	687b      	ldr	r3, [r7, #4]
 801df10:	601a      	str	r2, [r3, #0]
 801df12:	687b      	ldr	r3, [r7, #4]
 801df14:	2200      	movs	r2, #0
 801df16:	605a      	str	r2, [r3, #4]
{
}
 801df18:	687b      	ldr	r3, [r7, #4]
 801df1a:	4618      	mov	r0, r3
 801df1c:	370c      	adds	r7, #12
 801df1e:	46bd      	mov	sp, r7
 801df20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df24:	4770      	bx	lr
 801df26:	bf00      	nop
 801df28:	0802c258 	.word	0x0802c258

0801df2c <_ZN21MockExpectedCallsListD1Ev>:

MockExpectedCallsList::~MockExpectedCallsList()
 801df2c:	b580      	push	{r7, lr}
 801df2e:	b084      	sub	sp, #16
 801df30:	af00      	add	r7, sp, #0
 801df32:	6078      	str	r0, [r7, #4]
 801df34:	4a0d      	ldr	r2, [pc, #52]	; (801df6c <_ZN21MockExpectedCallsListD1Ev+0x40>)
 801df36:	687b      	ldr	r3, [r7, #4]
 801df38:	601a      	str	r2, [r3, #0]
{
    while (head_) {
 801df3a:	687b      	ldr	r3, [r7, #4]
 801df3c:	685b      	ldr	r3, [r3, #4]
 801df3e:	2b00      	cmp	r3, #0
 801df40:	d00f      	beq.n	801df62 <_ZN21MockExpectedCallsListD1Ev+0x36>
        MockExpectedCallsListNode* next = head_->next_;
 801df42:	687b      	ldr	r3, [r7, #4]
 801df44:	685b      	ldr	r3, [r3, #4]
 801df46:	685b      	ldr	r3, [r3, #4]
 801df48:	60fb      	str	r3, [r7, #12]
        delete head_;
 801df4a:	687b      	ldr	r3, [r7, #4]
 801df4c:	685b      	ldr	r3, [r3, #4]
 801df4e:	2b00      	cmp	r3, #0
 801df50:	d003      	beq.n	801df5a <_ZN21MockExpectedCallsListD1Ev+0x2e>
 801df52:	2108      	movs	r1, #8
 801df54:	4618      	mov	r0, r3
 801df56:	f7ee fbf9 	bl	800c74c <_ZdlPvj>
        head_ = next;
 801df5a:	687b      	ldr	r3, [r7, #4]
 801df5c:	68fa      	ldr	r2, [r7, #12]
 801df5e:	605a      	str	r2, [r3, #4]
    while (head_) {
 801df60:	e7eb      	b.n	801df3a <_ZN21MockExpectedCallsListD1Ev+0xe>
    }
}
 801df62:	687b      	ldr	r3, [r7, #4]
 801df64:	4618      	mov	r0, r3
 801df66:	3710      	adds	r7, #16
 801df68:	46bd      	mov	sp, r7
 801df6a:	bd80      	pop	{r7, pc}
 801df6c:	0802c258 	.word	0x0802c258

0801df70 <_ZN21MockExpectedCallsListD0Ev>:
MockExpectedCallsList::~MockExpectedCallsList()
 801df70:	b580      	push	{r7, lr}
 801df72:	b082      	sub	sp, #8
 801df74:	af00      	add	r7, sp, #0
 801df76:	6078      	str	r0, [r7, #4]
}
 801df78:	6878      	ldr	r0, [r7, #4]
 801df7a:	f7ff ffd7 	bl	801df2c <_ZN21MockExpectedCallsListD1Ev>
 801df7e:	2108      	movs	r1, #8
 801df80:	6878      	ldr	r0, [r7, #4]
 801df82:	f7ee fbe3 	bl	800c74c <_ZdlPvj>
 801df86:	687b      	ldr	r3, [r7, #4]
 801df88:	4618      	mov	r0, r3
 801df8a:	3708      	adds	r7, #8
 801df8c:	46bd      	mov	sp, r7
 801df8e:	bd80      	pop	{r7, pc}

0801df90 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>:

bool MockExpectedCallsList::hasCallsOutOfOrder() const
{
 801df90:	b580      	push	{r7, lr}
 801df92:	b084      	sub	sp, #16
 801df94:	af00      	add	r7, sp, #0
 801df96:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801df98:	687b      	ldr	r3, [r7, #4]
 801df9a:	685b      	ldr	r3, [r3, #4]
 801df9c:	60fb      	str	r3, [r7, #12]
 801df9e:	68fb      	ldr	r3, [r7, #12]
 801dfa0:	2b00      	cmp	r3, #0
 801dfa2:	d011      	beq.n	801dfc8 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x38>
        if (p->expectedCall_->isOutOfOrder())
 801dfa4:	68fb      	ldr	r3, [r7, #12]
 801dfa6:	681a      	ldr	r2, [r3, #0]
 801dfa8:	68fb      	ldr	r3, [r7, #12]
 801dfaa:	681b      	ldr	r3, [r3, #0]
 801dfac:	681b      	ldr	r3, [r3, #0]
 801dfae:	33d4      	adds	r3, #212	; 0xd4
 801dfb0:	681b      	ldr	r3, [r3, #0]
 801dfb2:	4610      	mov	r0, r2
 801dfb4:	4798      	blx	r3
 801dfb6:	4603      	mov	r3, r0
 801dfb8:	2b00      	cmp	r3, #0
 801dfba:	d001      	beq.n	801dfc0 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x30>
            return true;
 801dfbc:	2301      	movs	r3, #1
 801dfbe:	e004      	b.n	801dfca <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801dfc0:	68fb      	ldr	r3, [r7, #12]
 801dfc2:	685b      	ldr	r3, [r3, #4]
 801dfc4:	60fb      	str	r3, [r7, #12]
 801dfc6:	e7ea      	b.n	801df9e <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0xe>
    return false;
 801dfc8:	2300      	movs	r3, #0
}
 801dfca:	4618      	mov	r0, r3
 801dfcc:	3710      	adds	r7, #16
 801dfce:	46bd      	mov	sp, r7
 801dfd0:	bd80      	pop	{r7, pc}

0801dfd2 <_ZNK21MockExpectedCallsList4sizeEv>:

unsigned int MockExpectedCallsList::size() const
{
 801dfd2:	b480      	push	{r7}
 801dfd4:	b085      	sub	sp, #20
 801dfd6:	af00      	add	r7, sp, #0
 801dfd8:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801dfda:	2300      	movs	r3, #0
 801dfdc:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801dfde:	687b      	ldr	r3, [r7, #4]
 801dfe0:	685b      	ldr	r3, [r3, #4]
 801dfe2:	60bb      	str	r3, [r7, #8]
 801dfe4:	68bb      	ldr	r3, [r7, #8]
 801dfe6:	2b00      	cmp	r3, #0
 801dfe8:	d006      	beq.n	801dff8 <_ZNK21MockExpectedCallsList4sizeEv+0x26>
        count++;
 801dfea:	68fb      	ldr	r3, [r7, #12]
 801dfec:	3301      	adds	r3, #1
 801dfee:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801dff0:	68bb      	ldr	r3, [r7, #8]
 801dff2:	685b      	ldr	r3, [r3, #4]
 801dff4:	60bb      	str	r3, [r7, #8]
 801dff6:	e7f5      	b.n	801dfe4 <_ZNK21MockExpectedCallsList4sizeEv+0x12>
    return count;
 801dff8:	68fb      	ldr	r3, [r7, #12]
}
 801dffa:	4618      	mov	r0, r3
 801dffc:	3714      	adds	r7, #20
 801dffe:	46bd      	mov	sp, r7
 801e000:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e004:	4770      	bx	lr

0801e006 <_ZNK21MockExpectedCallsList7isEmptyEv>:

bool MockExpectedCallsList::isEmpty() const
{
 801e006:	b480      	push	{r7}
 801e008:	b083      	sub	sp, #12
 801e00a:	af00      	add	r7, sp, #0
 801e00c:	6078      	str	r0, [r7, #4]
    return head_ == NULLPTR;
 801e00e:	687b      	ldr	r3, [r7, #4]
 801e010:	685b      	ldr	r3, [r3, #4]
 801e012:	2b00      	cmp	r3, #0
 801e014:	bf0c      	ite	eq
 801e016:	2301      	moveq	r3, #1
 801e018:	2300      	movne	r3, #0
 801e01a:	b2db      	uxtb	r3, r3
}
 801e01c:	4618      	mov	r0, r3
 801e01e:	370c      	adds	r7, #12
 801e020:	46bd      	mov	sp, r7
 801e022:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e026:	4770      	bx	lr

0801e028 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString>:

unsigned int MockExpectedCallsList::amountOfActualCallsFulfilledFor(const SimpleString& name) const
{
 801e028:	b580      	push	{r7, lr}
 801e02a:	b084      	sub	sp, #16
 801e02c:	af00      	add	r7, sp, #0
 801e02e:	6078      	str	r0, [r7, #4]
 801e030:	6039      	str	r1, [r7, #0]
    unsigned int count = 0;
 801e032:	2300      	movs	r3, #0
 801e034:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801e036:	687b      	ldr	r3, [r7, #4]
 801e038:	685b      	ldr	r3, [r3, #4]
 801e03a:	60bb      	str	r3, [r7, #8]
 801e03c:	68bb      	ldr	r3, [r7, #8]
 801e03e:	2b00      	cmp	r3, #0
 801e040:	d01d      	beq.n	801e07e <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x56>
        if (p->expectedCall_->relatesTo(name)) {
 801e042:	68bb      	ldr	r3, [r7, #8]
 801e044:	681a      	ldr	r2, [r3, #0]
 801e046:	68bb      	ldr	r3, [r7, #8]
 801e048:	681b      	ldr	r3, [r3, #0]
 801e04a:	681b      	ldr	r3, [r3, #0]
 801e04c:	33b8      	adds	r3, #184	; 0xb8
 801e04e:	681b      	ldr	r3, [r3, #0]
 801e050:	6839      	ldr	r1, [r7, #0]
 801e052:	4610      	mov	r0, r2
 801e054:	4798      	blx	r3
 801e056:	4603      	mov	r3, r0
 801e058:	2b00      	cmp	r3, #0
 801e05a:	d00c      	beq.n	801e076 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x4e>
            count += p->expectedCall_->getActualCallsFulfilled();
 801e05c:	68bb      	ldr	r3, [r7, #8]
 801e05e:	681a      	ldr	r2, [r3, #0]
 801e060:	68bb      	ldr	r3, [r7, #8]
 801e062:	681b      	ldr	r3, [r3, #0]
 801e064:	681b      	ldr	r3, [r3, #0]
 801e066:	33f8      	adds	r3, #248	; 0xf8
 801e068:	681b      	ldr	r3, [r3, #0]
 801e06a:	4610      	mov	r0, r2
 801e06c:	4798      	blx	r3
 801e06e:	4602      	mov	r2, r0
 801e070:	68fb      	ldr	r3, [r7, #12]
 801e072:	4413      	add	r3, r2
 801e074:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801e076:	68bb      	ldr	r3, [r7, #8]
 801e078:	685b      	ldr	r3, [r3, #4]
 801e07a:	60bb      	str	r3, [r7, #8]
 801e07c:	e7de      	b.n	801e03c <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x14>
        }
    }
    return count;
 801e07e:	68fb      	ldr	r3, [r7, #12]
}
 801e080:	4618      	mov	r0, r3
 801e082:	3710      	adds	r7, #16
 801e084:	46bd      	mov	sp, r7
 801e086:	bd80      	pop	{r7, pc}

0801e088 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv>:

unsigned int MockExpectedCallsList::amountOfUnfulfilledExpectations() const
{
 801e088:	b580      	push	{r7, lr}
 801e08a:	b084      	sub	sp, #16
 801e08c:	af00      	add	r7, sp, #0
 801e08e:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801e090:	2300      	movs	r3, #0
 801e092:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e094:	687b      	ldr	r3, [r7, #4]
 801e096:	685b      	ldr	r3, [r3, #4]
 801e098:	60bb      	str	r3, [r7, #8]
 801e09a:	68bb      	ldr	r3, [r7, #8]
 801e09c:	2b00      	cmp	r3, #0
 801e09e:	d015      	beq.n	801e0cc <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x44>
        if (! p->expectedCall_->isFulfilled()) count++;
 801e0a0:	68bb      	ldr	r3, [r7, #8]
 801e0a2:	681a      	ldr	r2, [r3, #0]
 801e0a4:	68bb      	ldr	r3, [r7, #8]
 801e0a6:	681b      	ldr	r3, [r3, #0]
 801e0a8:	681b      	ldr	r3, [r3, #0]
 801e0aa:	33c0      	adds	r3, #192	; 0xc0
 801e0ac:	681b      	ldr	r3, [r3, #0]
 801e0ae:	4610      	mov	r0, r2
 801e0b0:	4798      	blx	r3
 801e0b2:	4603      	mov	r3, r0
 801e0b4:	f083 0301 	eor.w	r3, r3, #1
 801e0b8:	b2db      	uxtb	r3, r3
 801e0ba:	2b00      	cmp	r3, #0
 801e0bc:	d002      	beq.n	801e0c4 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x3c>
 801e0be:	68fb      	ldr	r3, [r7, #12]
 801e0c0:	3301      	adds	r3, #1
 801e0c2:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e0c4:	68bb      	ldr	r3, [r7, #8]
 801e0c6:	685b      	ldr	r3, [r3, #4]
 801e0c8:	60bb      	str	r3, [r7, #8]
 801e0ca:	e7e6      	b.n	801e09a <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x12>
    return count;
 801e0cc:	68fb      	ldr	r3, [r7, #12]
}
 801e0ce:	4618      	mov	r0, r3
 801e0d0:	3710      	adds	r7, #16
 801e0d2:	46bd      	mov	sp, r7
 801e0d4:	bd80      	pop	{r7, pc}

0801e0d6 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>:

bool MockExpectedCallsList::hasFinalizedMatchingExpectations() const
{
 801e0d6:	b580      	push	{r7, lr}
 801e0d8:	b084      	sub	sp, #16
 801e0da:	af00      	add	r7, sp, #0
 801e0dc:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801e0de:	687b      	ldr	r3, [r7, #4]
 801e0e0:	685b      	ldr	r3, [r3, #4]
 801e0e2:	60fb      	str	r3, [r7, #12]
 801e0e4:	68fb      	ldr	r3, [r7, #12]
 801e0e6:	2b00      	cmp	r3, #0
 801e0e8:	d011      	beq.n	801e10e <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x38>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801e0ea:	68fb      	ldr	r3, [r7, #12]
 801e0ec:	681a      	ldr	r2, [r3, #0]
 801e0ee:	68fb      	ldr	r3, [r7, #12]
 801e0f0:	681b      	ldr	r3, [r3, #0]
 801e0f2:	681b      	ldr	r3, [r3, #0]
 801e0f4:	33c8      	adds	r3, #200	; 0xc8
 801e0f6:	681b      	ldr	r3, [r3, #0]
 801e0f8:	4610      	mov	r0, r2
 801e0fa:	4798      	blx	r3
 801e0fc:	4603      	mov	r3, r0
 801e0fe:	2b00      	cmp	r3, #0
 801e100:	d001      	beq.n	801e106 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x30>
            return true;
 801e102:	2301      	movs	r3, #1
 801e104:	e004      	b.n	801e110 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801e106:	68fb      	ldr	r3, [r7, #12]
 801e108:	685b      	ldr	r3, [r3, #4]
 801e10a:	60fb      	str	r3, [r7, #12]
 801e10c:	e7ea      	b.n	801e0e4 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0xe>
        }
    }
    return false;
 801e10e:	2300      	movs	r3, #0
}
 801e110:	4618      	mov	r0, r3
 801e112:	3710      	adds	r7, #16
 801e114:	46bd      	mov	sp, r7
 801e116:	bd80      	pop	{r7, pc}

0801e118 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>:

bool MockExpectedCallsList::hasUnfulfilledExpectations() const
{
 801e118:	b580      	push	{r7, lr}
 801e11a:	b084      	sub	sp, #16
 801e11c:	af00      	add	r7, sp, #0
 801e11e:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801e120:	687b      	ldr	r3, [r7, #4]
 801e122:	685b      	ldr	r3, [r3, #4]
 801e124:	60fb      	str	r3, [r7, #12]
 801e126:	68fb      	ldr	r3, [r7, #12]
 801e128:	2b00      	cmp	r3, #0
 801e12a:	d014      	beq.n	801e156 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x3e>
        if (!p->expectedCall_->isFulfilled()) {
 801e12c:	68fb      	ldr	r3, [r7, #12]
 801e12e:	681a      	ldr	r2, [r3, #0]
 801e130:	68fb      	ldr	r3, [r7, #12]
 801e132:	681b      	ldr	r3, [r3, #0]
 801e134:	681b      	ldr	r3, [r3, #0]
 801e136:	33c0      	adds	r3, #192	; 0xc0
 801e138:	681b      	ldr	r3, [r3, #0]
 801e13a:	4610      	mov	r0, r2
 801e13c:	4798      	blx	r3
 801e13e:	4603      	mov	r3, r0
 801e140:	f083 0301 	eor.w	r3, r3, #1
 801e144:	b2db      	uxtb	r3, r3
 801e146:	2b00      	cmp	r3, #0
 801e148:	d001      	beq.n	801e14e <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x36>
            return true;
 801e14a:	2301      	movs	r3, #1
 801e14c:	e004      	b.n	801e158 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801e14e:	68fb      	ldr	r3, [r7, #12]
 801e150:	685b      	ldr	r3, [r3, #4]
 801e152:	60fb      	str	r3, [r7, #12]
 801e154:	e7e7      	b.n	801e126 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0xe>
        }
    }
    return false;
 801e156:	2300      	movs	r3, #0
}
 801e158:	4618      	mov	r0, r3
 801e15a:	3710      	adds	r7, #16
 801e15c:	46bd      	mov	sp, r7
 801e15e:	bd80      	pop	{r7, pc}

0801e160 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>:

bool MockExpectedCallsList::hasExpectationWithName(const SimpleString& name) const
{
 801e160:	b580      	push	{r7, lr}
 801e162:	b084      	sub	sp, #16
 801e164:	af00      	add	r7, sp, #0
 801e166:	6078      	str	r0, [r7, #4]
 801e168:	6039      	str	r1, [r7, #0]
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e16a:	687b      	ldr	r3, [r7, #4]
 801e16c:	685b      	ldr	r3, [r3, #4]
 801e16e:	60fb      	str	r3, [r7, #12]
 801e170:	68fb      	ldr	r3, [r7, #12]
 801e172:	2b00      	cmp	r3, #0
 801e174:	d012      	beq.n	801e19c <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3c>
            if (p->expectedCall_->relatesTo(name))
 801e176:	68fb      	ldr	r3, [r7, #12]
 801e178:	681a      	ldr	r2, [r3, #0]
 801e17a:	68fb      	ldr	r3, [r7, #12]
 801e17c:	681b      	ldr	r3, [r3, #0]
 801e17e:	681b      	ldr	r3, [r3, #0]
 801e180:	33b8      	adds	r3, #184	; 0xb8
 801e182:	681b      	ldr	r3, [r3, #0]
 801e184:	6839      	ldr	r1, [r7, #0]
 801e186:	4610      	mov	r0, r2
 801e188:	4798      	blx	r3
 801e18a:	4603      	mov	r3, r0
 801e18c:	2b00      	cmp	r3, #0
 801e18e:	d001      	beq.n	801e194 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x34>
                return true;
 801e190:	2301      	movs	r3, #1
 801e192:	e004      	b.n	801e19e <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3e>
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e194:	68fb      	ldr	r3, [r7, #12]
 801e196:	685b      	ldr	r3, [r3, #4]
 801e198:	60fb      	str	r3, [r7, #12]
 801e19a:	e7e9      	b.n	801e170 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x10>
    return false;
 801e19c:	2300      	movs	r3, #0
}
 801e19e:	4618      	mov	r0, r3
 801e1a0:	3710      	adds	r7, #16
 801e1a2:	46bd      	mov	sp, r7
 801e1a4:	bd80      	pop	{r7, pc}
	...

0801e1a8 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>:

void MockExpectedCallsList::addExpectedCall(MockCheckedExpectedCall* call)
{
 801e1a8:	b590      	push	{r4, r7, lr}
 801e1aa:	b085      	sub	sp, #20
 801e1ac:	af00      	add	r7, sp, #0
 801e1ae:	6078      	str	r0, [r7, #4]
 801e1b0:	6039      	str	r1, [r7, #0]
    MockExpectedCallsListNode* newCall = new MockExpectedCallsListNode(call);
 801e1b2:	2273      	movs	r2, #115	; 0x73
 801e1b4:	4911      	ldr	r1, [pc, #68]	; (801e1fc <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x54>)
 801e1b6:	2008      	movs	r0, #8
 801e1b8:	f7ee fab4 	bl	800c724 <_ZnwjPKci>
 801e1bc:	4604      	mov	r4, r0
 801e1be:	6839      	ldr	r1, [r7, #0]
 801e1c0:	4620      	mov	r0, r4
 801e1c2:	f7ff fe8d 	bl	801dee0 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>
 801e1c6:	60bc      	str	r4, [r7, #8]

    if (head_ == NULLPTR)
 801e1c8:	687b      	ldr	r3, [r7, #4]
 801e1ca:	685b      	ldr	r3, [r3, #4]
 801e1cc:	2b00      	cmp	r3, #0
 801e1ce:	d103      	bne.n	801e1d8 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x30>
        head_ = newCall;
 801e1d0:	687b      	ldr	r3, [r7, #4]
 801e1d2:	68ba      	ldr	r2, [r7, #8]
 801e1d4:	605a      	str	r2, [r3, #4]
    else {
        MockExpectedCallsListNode* lastCall = head_;
        while (lastCall->next_) lastCall = lastCall->next_;
        lastCall->next_ = newCall;
    }
}
 801e1d6:	e00d      	b.n	801e1f4 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x4c>
        MockExpectedCallsListNode* lastCall = head_;
 801e1d8:	687b      	ldr	r3, [r7, #4]
 801e1da:	685b      	ldr	r3, [r3, #4]
 801e1dc:	60fb      	str	r3, [r7, #12]
        while (lastCall->next_) lastCall = lastCall->next_;
 801e1de:	68fb      	ldr	r3, [r7, #12]
 801e1e0:	685b      	ldr	r3, [r3, #4]
 801e1e2:	2b00      	cmp	r3, #0
 801e1e4:	d003      	beq.n	801e1ee <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x46>
 801e1e6:	68fb      	ldr	r3, [r7, #12]
 801e1e8:	685b      	ldr	r3, [r3, #4]
 801e1ea:	60fb      	str	r3, [r7, #12]
 801e1ec:	e7f7      	b.n	801e1de <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x36>
        lastCall->next_ = newCall;
 801e1ee:	68fb      	ldr	r3, [r7, #12]
 801e1f0:	68ba      	ldr	r2, [r7, #8]
 801e1f2:	605a      	str	r2, [r3, #4]
}
 801e1f4:	bf00      	nop
 801e1f6:	3714      	adds	r7, #20
 801e1f8:	46bd      	mov	sp, r7
 801e1fa:	bd90      	pop	{r4, r7, pc}
 801e1fc:	08028d3c 	.word	0x08028d3c

0801e200 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>:

void MockExpectedCallsList::addPotentiallyMatchingExpectations(const MockExpectedCallsList& list)
{
 801e200:	b580      	push	{r7, lr}
 801e202:	b084      	sub	sp, #16
 801e204:	af00      	add	r7, sp, #0
 801e206:	6078      	str	r0, [r7, #4]
 801e208:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801e20a:	683b      	ldr	r3, [r7, #0]
 801e20c:	685b      	ldr	r3, [r3, #4]
 801e20e:	60fb      	str	r3, [r7, #12]
 801e210:	68fb      	ldr	r3, [r7, #12]
 801e212:	2b00      	cmp	r3, #0
 801e214:	d018      	beq.n	801e248 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x48>
        if (p->expectedCall_->canMatchActualCalls())
 801e216:	68fb      	ldr	r3, [r7, #12]
 801e218:	681a      	ldr	r2, [r3, #0]
 801e21a:	68fb      	ldr	r3, [r7, #12]
 801e21c:	681b      	ldr	r3, [r3, #0]
 801e21e:	681b      	ldr	r3, [r3, #0]
 801e220:	33c4      	adds	r3, #196	; 0xc4
 801e222:	681b      	ldr	r3, [r3, #0]
 801e224:	4610      	mov	r0, r2
 801e226:	4798      	blx	r3
 801e228:	4603      	mov	r3, r0
 801e22a:	2b00      	cmp	r3, #0
 801e22c:	d008      	beq.n	801e240 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x40>
            addExpectedCall(p->expectedCall_);
 801e22e:	687b      	ldr	r3, [r7, #4]
 801e230:	681b      	ldr	r3, [r3, #0]
 801e232:	3330      	adds	r3, #48	; 0x30
 801e234:	681b      	ldr	r3, [r3, #0]
 801e236:	68fa      	ldr	r2, [r7, #12]
 801e238:	6812      	ldr	r2, [r2, #0]
 801e23a:	4611      	mov	r1, r2
 801e23c:	6878      	ldr	r0, [r7, #4]
 801e23e:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801e240:	68fb      	ldr	r3, [r7, #12]
 801e242:	685b      	ldr	r3, [r3, #4]
 801e244:	60fb      	str	r3, [r7, #12]
 801e246:	e7e3      	b.n	801e210 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x10>
}
 801e248:	bf00      	nop
 801e24a:	3710      	adds	r7, #16
 801e24c:	46bd      	mov	sp, r7
 801e24e:	bd80      	pop	{r7, pc}

0801e250 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>:

void MockExpectedCallsList::addExpectationsRelatedTo(const SimpleString& name, const MockExpectedCallsList& list)
{
 801e250:	b580      	push	{r7, lr}
 801e252:	b086      	sub	sp, #24
 801e254:	af00      	add	r7, sp, #0
 801e256:	60f8      	str	r0, [r7, #12]
 801e258:	60b9      	str	r1, [r7, #8]
 801e25a:	607a      	str	r2, [r7, #4]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801e25c:	687b      	ldr	r3, [r7, #4]
 801e25e:	685b      	ldr	r3, [r3, #4]
 801e260:	617b      	str	r3, [r7, #20]
 801e262:	697b      	ldr	r3, [r7, #20]
 801e264:	2b00      	cmp	r3, #0
 801e266:	d019      	beq.n	801e29c <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x4c>
        if (p->expectedCall_->relatesTo(name))
 801e268:	697b      	ldr	r3, [r7, #20]
 801e26a:	681a      	ldr	r2, [r3, #0]
 801e26c:	697b      	ldr	r3, [r7, #20]
 801e26e:	681b      	ldr	r3, [r3, #0]
 801e270:	681b      	ldr	r3, [r3, #0]
 801e272:	33b8      	adds	r3, #184	; 0xb8
 801e274:	681b      	ldr	r3, [r3, #0]
 801e276:	68b9      	ldr	r1, [r7, #8]
 801e278:	4610      	mov	r0, r2
 801e27a:	4798      	blx	r3
 801e27c:	4603      	mov	r3, r0
 801e27e:	2b00      	cmp	r3, #0
 801e280:	d008      	beq.n	801e294 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x44>
            addExpectedCall(p->expectedCall_);
 801e282:	68fb      	ldr	r3, [r7, #12]
 801e284:	681b      	ldr	r3, [r3, #0]
 801e286:	3330      	adds	r3, #48	; 0x30
 801e288:	681b      	ldr	r3, [r3, #0]
 801e28a:	697a      	ldr	r2, [r7, #20]
 801e28c:	6812      	ldr	r2, [r2, #0]
 801e28e:	4611      	mov	r1, r2
 801e290:	68f8      	ldr	r0, [r7, #12]
 801e292:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801e294:	697b      	ldr	r3, [r7, #20]
 801e296:	685b      	ldr	r3, [r3, #4]
 801e298:	617b      	str	r3, [r7, #20]
 801e29a:	e7e2      	b.n	801e262 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x12>
}
 801e29c:	bf00      	nop
 801e29e:	3718      	adds	r7, #24
 801e2a0:	46bd      	mov	sp, r7
 801e2a2:	bd80      	pop	{r7, pc}

0801e2a4 <_ZN21MockExpectedCallsList15addExpectationsERKS_>:

void MockExpectedCallsList::addExpectations(const MockExpectedCallsList& list)
{
 801e2a4:	b580      	push	{r7, lr}
 801e2a6:	b084      	sub	sp, #16
 801e2a8:	af00      	add	r7, sp, #0
 801e2aa:	6078      	str	r0, [r7, #4]
 801e2ac:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801e2ae:	683b      	ldr	r3, [r7, #0]
 801e2b0:	685b      	ldr	r3, [r3, #4]
 801e2b2:	60fb      	str	r3, [r7, #12]
 801e2b4:	68fb      	ldr	r3, [r7, #12]
 801e2b6:	2b00      	cmp	r3, #0
 801e2b8:	d00c      	beq.n	801e2d4 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x30>
        addExpectedCall(p->expectedCall_);
 801e2ba:	687b      	ldr	r3, [r7, #4]
 801e2bc:	681b      	ldr	r3, [r3, #0]
 801e2be:	3330      	adds	r3, #48	; 0x30
 801e2c0:	681b      	ldr	r3, [r3, #0]
 801e2c2:	68fa      	ldr	r2, [r7, #12]
 801e2c4:	6812      	ldr	r2, [r2, #0]
 801e2c6:	4611      	mov	r1, r2
 801e2c8:	6878      	ldr	r0, [r7, #4]
 801e2ca:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801e2cc:	68fb      	ldr	r3, [r7, #12]
 801e2ce:	685b      	ldr	r3, [r3, #4]
 801e2d0:	60fb      	str	r3, [r7, #12]
 801e2d2:	e7ef      	b.n	801e2b4 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x10>
}
 801e2d4:	bf00      	nop
 801e2d6:	3710      	adds	r7, #16
 801e2d8:	46bd      	mov	sp, r7
 801e2da:	bd80      	pop	{r7, pc}

0801e2dc <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsRelatedTo(const SimpleString& name)
{
 801e2dc:	b580      	push	{r7, lr}
 801e2de:	b084      	sub	sp, #16
 801e2e0:	af00      	add	r7, sp, #0
 801e2e2:	6078      	str	r0, [r7, #4]
 801e2e4:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e2e6:	687b      	ldr	r3, [r7, #4]
 801e2e8:	685b      	ldr	r3, [r3, #4]
 801e2ea:	60fb      	str	r3, [r7, #12]
 801e2ec:	68fb      	ldr	r3, [r7, #12]
 801e2ee:	2b00      	cmp	r3, #0
 801e2f0:	d016      	beq.n	801e320 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x44>
        if (! p->expectedCall_->relatesTo(name))
 801e2f2:	68fb      	ldr	r3, [r7, #12]
 801e2f4:	681a      	ldr	r2, [r3, #0]
 801e2f6:	68fb      	ldr	r3, [r7, #12]
 801e2f8:	681b      	ldr	r3, [r3, #0]
 801e2fa:	681b      	ldr	r3, [r3, #0]
 801e2fc:	33b8      	adds	r3, #184	; 0xb8
 801e2fe:	681b      	ldr	r3, [r3, #0]
 801e300:	6839      	ldr	r1, [r7, #0]
 801e302:	4610      	mov	r0, r2
 801e304:	4798      	blx	r3
 801e306:	4603      	mov	r3, r0
 801e308:	f083 0301 	eor.w	r3, r3, #1
 801e30c:	b2db      	uxtb	r3, r3
 801e30e:	2b00      	cmp	r3, #0
 801e310:	d002      	beq.n	801e318 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801e312:	68fb      	ldr	r3, [r7, #12]
 801e314:	2200      	movs	r2, #0
 801e316:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e318:	68fb      	ldr	r3, [r7, #12]
 801e31a:	685b      	ldr	r3, [r3, #4]
 801e31c:	60fb      	str	r3, [r7, #12]
 801e31e:	e7e5      	b.n	801e2ec <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x10>

    pruneEmptyNodeFromList();
 801e320:	687b      	ldr	r3, [r7, #4]
 801e322:	681b      	ldr	r3, [r3, #0]
 801e324:	3388      	adds	r3, #136	; 0x88
 801e326:	681b      	ldr	r3, [r3, #0]
 801e328:	6878      	ldr	r0, [r7, #4]
 801e32a:	4798      	blx	r3
}
 801e32c:	bf00      	nop
 801e32e:	3710      	adds	r7, #16
 801e330:	46bd      	mov	sp, r7
 801e332:	bd80      	pop	{r7, pc}

0801e334 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>:

void MockExpectedCallsList::onlyKeepOutOfOrderExpectations()
{
 801e334:	b580      	push	{r7, lr}
 801e336:	b084      	sub	sp, #16
 801e338:	af00      	add	r7, sp, #0
 801e33a:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e33c:	687b      	ldr	r3, [r7, #4]
 801e33e:	685b      	ldr	r3, [r3, #4]
 801e340:	60fb      	str	r3, [r7, #12]
 801e342:	68fb      	ldr	r3, [r7, #12]
 801e344:	2b00      	cmp	r3, #0
 801e346:	d015      	beq.n	801e374 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x40>
        if (!p->expectedCall_->isOutOfOrder())
 801e348:	68fb      	ldr	r3, [r7, #12]
 801e34a:	681a      	ldr	r2, [r3, #0]
 801e34c:	68fb      	ldr	r3, [r7, #12]
 801e34e:	681b      	ldr	r3, [r3, #0]
 801e350:	681b      	ldr	r3, [r3, #0]
 801e352:	33d4      	adds	r3, #212	; 0xd4
 801e354:	681b      	ldr	r3, [r3, #0]
 801e356:	4610      	mov	r0, r2
 801e358:	4798      	blx	r3
 801e35a:	4603      	mov	r3, r0
 801e35c:	f083 0301 	eor.w	r3, r3, #1
 801e360:	b2db      	uxtb	r3, r3
 801e362:	2b00      	cmp	r3, #0
 801e364:	d002      	beq.n	801e36c <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x38>
            p->expectedCall_ = NULLPTR;
 801e366:	68fb      	ldr	r3, [r7, #12]
 801e368:	2200      	movs	r2, #0
 801e36a:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e36c:	68fb      	ldr	r3, [r7, #12]
 801e36e:	685b      	ldr	r3, [r3, #4]
 801e370:	60fb      	str	r3, [r7, #12]
 801e372:	e7e6      	b.n	801e342 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0xe>
    pruneEmptyNodeFromList();
 801e374:	687b      	ldr	r3, [r7, #4]
 801e376:	681b      	ldr	r3, [r3, #0]
 801e378:	3388      	adds	r3, #136	; 0x88
 801e37a:	681b      	ldr	r3, [r3, #0]
 801e37c:	6878      	ldr	r0, [r7, #4]
 801e37e:	4798      	blx	r3
}
 801e380:	bf00      	nop
 801e382:	3710      	adds	r7, #16
 801e384:	46bd      	mov	sp, r7
 801e386:	bd80      	pop	{r7, pc}

0801e388 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>:

void MockExpectedCallsList::onlyKeepUnmatchingExpectations()
{
 801e388:	b580      	push	{r7, lr}
 801e38a:	b084      	sub	sp, #16
 801e38c:	af00      	add	r7, sp, #0
 801e38e:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e390:	687b      	ldr	r3, [r7, #4]
 801e392:	685b      	ldr	r3, [r3, #4]
 801e394:	60fb      	str	r3, [r7, #12]
 801e396:	68fb      	ldr	r3, [r7, #12]
 801e398:	2b00      	cmp	r3, #0
 801e39a:	d01b      	beq.n	801e3d4 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x4c>
        if (p->expectedCall_->isMatchingActualCallAndFinalized())
 801e39c:	68fb      	ldr	r3, [r7, #12]
 801e39e:	681a      	ldr	r2, [r3, #0]
 801e3a0:	68fb      	ldr	r3, [r7, #12]
 801e3a2:	681b      	ldr	r3, [r3, #0]
 801e3a4:	681b      	ldr	r3, [r3, #0]
 801e3a6:	33c8      	adds	r3, #200	; 0xc8
 801e3a8:	681b      	ldr	r3, [r3, #0]
 801e3aa:	4610      	mov	r0, r2
 801e3ac:	4798      	blx	r3
 801e3ae:	4603      	mov	r3, r0
 801e3b0:	2b00      	cmp	r3, #0
 801e3b2:	d00b      	beq.n	801e3cc <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x44>
        {
            p->expectedCall_->resetActualCallMatchingState();
 801e3b4:	68fb      	ldr	r3, [r7, #12]
 801e3b6:	681a      	ldr	r2, [r3, #0]
 801e3b8:	68fb      	ldr	r3, [r7, #12]
 801e3ba:	681b      	ldr	r3, [r3, #0]
 801e3bc:	681b      	ldr	r3, [r3, #0]
 801e3be:	33ec      	adds	r3, #236	; 0xec
 801e3c0:	681b      	ldr	r3, [r3, #0]
 801e3c2:	4610      	mov	r0, r2
 801e3c4:	4798      	blx	r3
            p->expectedCall_ = NULLPTR;
 801e3c6:	68fb      	ldr	r3, [r7, #12]
 801e3c8:	2200      	movs	r2, #0
 801e3ca:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e3cc:	68fb      	ldr	r3, [r7, #12]
 801e3ce:	685b      	ldr	r3, [r3, #4]
 801e3d0:	60fb      	str	r3, [r7, #12]
 801e3d2:	e7e0      	b.n	801e396 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0xe>
        }

    pruneEmptyNodeFromList();
 801e3d4:	687b      	ldr	r3, [r7, #4]
 801e3d6:	681b      	ldr	r3, [r3, #0]
 801e3d8:	3388      	adds	r3, #136	; 0x88
 801e3da:	681b      	ldr	r3, [r3, #0]
 801e3dc:	6878      	ldr	r0, [r7, #4]
 801e3de:	4798      	blx	r3
}
 801e3e0:	bf00      	nop
 801e3e2:	3710      	adds	r7, #16
 801e3e4:	46bd      	mov	sp, r7
 801e3e6:	bd80      	pop	{r7, pc}

0801e3e8 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameterName(const SimpleString& name)
{
 801e3e8:	b580      	push	{r7, lr}
 801e3ea:	b084      	sub	sp, #16
 801e3ec:	af00      	add	r7, sp, #0
 801e3ee:	6078      	str	r0, [r7, #4]
 801e3f0:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e3f2:	687b      	ldr	r3, [r7, #4]
 801e3f4:	685b      	ldr	r3, [r3, #4]
 801e3f6:	60fb      	str	r3, [r7, #12]
 801e3f8:	68fb      	ldr	r3, [r7, #12]
 801e3fa:	2b00      	cmp	r3, #0
 801e3fc:	d016      	beq.n	801e42c <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasInputParameterWithName(name))
 801e3fe:	68fb      	ldr	r3, [r7, #12]
 801e400:	681a      	ldr	r2, [r3, #0]
 801e402:	68fb      	ldr	r3, [r7, #12]
 801e404:	681b      	ldr	r3, [r3, #0]
 801e406:	681b      	ldr	r3, [r3, #0]
 801e408:	33a8      	adds	r3, #168	; 0xa8
 801e40a:	681b      	ldr	r3, [r3, #0]
 801e40c:	6839      	ldr	r1, [r7, #0]
 801e40e:	4610      	mov	r0, r2
 801e410:	4798      	blx	r3
 801e412:	4603      	mov	r3, r0
 801e414:	f083 0301 	eor.w	r3, r3, #1
 801e418:	b2db      	uxtb	r3, r3
 801e41a:	2b00      	cmp	r3, #0
 801e41c:	d002      	beq.n	801e424 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801e41e:	68fb      	ldr	r3, [r7, #12]
 801e420:	2200      	movs	r2, #0
 801e422:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e424:	68fb      	ldr	r3, [r7, #12]
 801e426:	685b      	ldr	r3, [r3, #4]
 801e428:	60fb      	str	r3, [r7, #12]
 801e42a:	e7e5      	b.n	801e3f8 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801e42c:	687b      	ldr	r3, [r7, #4]
 801e42e:	681b      	ldr	r3, [r3, #0]
 801e430:	3388      	adds	r3, #136	; 0x88
 801e432:	681b      	ldr	r3, [r3, #0]
 801e434:	6878      	ldr	r0, [r7, #4]
 801e436:	4798      	blx	r3
}
 801e438:	bf00      	nop
 801e43a:	3710      	adds	r7, #16
 801e43c:	46bd      	mov	sp, r7
 801e43e:	bd80      	pop	{r7, pc}

0801e440 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameterName(const SimpleString& name)
{
 801e440:	b580      	push	{r7, lr}
 801e442:	b084      	sub	sp, #16
 801e444:	af00      	add	r7, sp, #0
 801e446:	6078      	str	r0, [r7, #4]
 801e448:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e44a:	687b      	ldr	r3, [r7, #4]
 801e44c:	685b      	ldr	r3, [r3, #4]
 801e44e:	60fb      	str	r3, [r7, #12]
 801e450:	68fb      	ldr	r3, [r7, #12]
 801e452:	2b00      	cmp	r3, #0
 801e454:	d016      	beq.n	801e484 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasOutputParameterWithName(name))
 801e456:	68fb      	ldr	r3, [r7, #12]
 801e458:	681a      	ldr	r2, [r3, #0]
 801e45a:	68fb      	ldr	r3, [r7, #12]
 801e45c:	681b      	ldr	r3, [r3, #0]
 801e45e:	681b      	ldr	r3, [r3, #0]
 801e460:	33b0      	adds	r3, #176	; 0xb0
 801e462:	681b      	ldr	r3, [r3, #0]
 801e464:	6839      	ldr	r1, [r7, #0]
 801e466:	4610      	mov	r0, r2
 801e468:	4798      	blx	r3
 801e46a:	4603      	mov	r3, r0
 801e46c:	f083 0301 	eor.w	r3, r3, #1
 801e470:	b2db      	uxtb	r3, r3
 801e472:	2b00      	cmp	r3, #0
 801e474:	d002      	beq.n	801e47c <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801e476:	68fb      	ldr	r3, [r7, #12]
 801e478:	2200      	movs	r2, #0
 801e47a:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e47c:	68fb      	ldr	r3, [r7, #12]
 801e47e:	685b      	ldr	r3, [r3, #4]
 801e480:	60fb      	str	r3, [r7, #12]
 801e482:	e7e5      	b.n	801e450 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801e484:	687b      	ldr	r3, [r7, #4]
 801e486:	681b      	ldr	r3, [r3, #0]
 801e488:	3388      	adds	r3, #136	; 0x88
 801e48a:	681b      	ldr	r3, [r3, #0]
 801e48c:	6878      	ldr	r0, [r7, #4]
 801e48e:	4798      	blx	r3
}
 801e490:	bf00      	nop
 801e492:	3710      	adds	r7, #16
 801e494:	46bd      	mov	sp, r7
 801e496:	bd80      	pop	{r7, pc}

0801e498 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameter(const MockNamedValue& parameter)
{
 801e498:	b580      	push	{r7, lr}
 801e49a:	b084      	sub	sp, #16
 801e49c:	af00      	add	r7, sp, #0
 801e49e:	6078      	str	r0, [r7, #4]
 801e4a0:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e4a2:	687b      	ldr	r3, [r7, #4]
 801e4a4:	685b      	ldr	r3, [r3, #4]
 801e4a6:	60fb      	str	r3, [r7, #12]
 801e4a8:	68fb      	ldr	r3, [r7, #12]
 801e4aa:	2b00      	cmp	r3, #0
 801e4ac:	d016      	beq.n	801e4dc <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasInputParameter(parameter))
 801e4ae:	68fb      	ldr	r3, [r7, #12]
 801e4b0:	681a      	ldr	r2, [r3, #0]
 801e4b2:	68fb      	ldr	r3, [r7, #12]
 801e4b4:	681b      	ldr	r3, [r3, #0]
 801e4b6:	681b      	ldr	r3, [r3, #0]
 801e4b8:	33ac      	adds	r3, #172	; 0xac
 801e4ba:	681b      	ldr	r3, [r3, #0]
 801e4bc:	6839      	ldr	r1, [r7, #0]
 801e4be:	4610      	mov	r0, r2
 801e4c0:	4798      	blx	r3
 801e4c2:	4603      	mov	r3, r0
 801e4c4:	f083 0301 	eor.w	r3, r3, #1
 801e4c8:	b2db      	uxtb	r3, r3
 801e4ca:	2b00      	cmp	r3, #0
 801e4cc:	d002      	beq.n	801e4d4 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801e4ce:	68fb      	ldr	r3, [r7, #12]
 801e4d0:	2200      	movs	r2, #0
 801e4d2:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e4d4:	68fb      	ldr	r3, [r7, #12]
 801e4d6:	685b      	ldr	r3, [r3, #4]
 801e4d8:	60fb      	str	r3, [r7, #12]
 801e4da:	e7e5      	b.n	801e4a8 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801e4dc:	687b      	ldr	r3, [r7, #4]
 801e4de:	681b      	ldr	r3, [r3, #0]
 801e4e0:	3388      	adds	r3, #136	; 0x88
 801e4e2:	681b      	ldr	r3, [r3, #0]
 801e4e4:	6878      	ldr	r0, [r7, #4]
 801e4e6:	4798      	blx	r3
}
 801e4e8:	bf00      	nop
 801e4ea:	3710      	adds	r7, #16
 801e4ec:	46bd      	mov	sp, r7
 801e4ee:	bd80      	pop	{r7, pc}

0801e4f0 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameter(const MockNamedValue& parameter)
{
 801e4f0:	b580      	push	{r7, lr}
 801e4f2:	b084      	sub	sp, #16
 801e4f4:	af00      	add	r7, sp, #0
 801e4f6:	6078      	str	r0, [r7, #4]
 801e4f8:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e4fa:	687b      	ldr	r3, [r7, #4]
 801e4fc:	685b      	ldr	r3, [r3, #4]
 801e4fe:	60fb      	str	r3, [r7, #12]
 801e500:	68fb      	ldr	r3, [r7, #12]
 801e502:	2b00      	cmp	r3, #0
 801e504:	d016      	beq.n	801e534 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasOutputParameter(parameter))
 801e506:	68fb      	ldr	r3, [r7, #12]
 801e508:	681a      	ldr	r2, [r3, #0]
 801e50a:	68fb      	ldr	r3, [r7, #12]
 801e50c:	681b      	ldr	r3, [r3, #0]
 801e50e:	681b      	ldr	r3, [r3, #0]
 801e510:	33b4      	adds	r3, #180	; 0xb4
 801e512:	681b      	ldr	r3, [r3, #0]
 801e514:	6839      	ldr	r1, [r7, #0]
 801e516:	4610      	mov	r0, r2
 801e518:	4798      	blx	r3
 801e51a:	4603      	mov	r3, r0
 801e51c:	f083 0301 	eor.w	r3, r3, #1
 801e520:	b2db      	uxtb	r3, r3
 801e522:	2b00      	cmp	r3, #0
 801e524:	d002      	beq.n	801e52c <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801e526:	68fb      	ldr	r3, [r7, #12]
 801e528:	2200      	movs	r2, #0
 801e52a:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e52c:	68fb      	ldr	r3, [r7, #12]
 801e52e:	685b      	ldr	r3, [r3, #4]
 801e530:	60fb      	str	r3, [r7, #12]
 801e532:	e7e5      	b.n	801e500 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801e534:	687b      	ldr	r3, [r7, #4]
 801e536:	681b      	ldr	r3, [r3, #0]
 801e538:	3388      	adds	r3, #136	; 0x88
 801e53a:	681b      	ldr	r3, [r3, #0]
 801e53c:	6878      	ldr	r0, [r7, #4]
 801e53e:	4798      	blx	r3
}
 801e540:	bf00      	nop
 801e542:	3710      	adds	r7, #16
 801e544:	46bd      	mov	sp, r7
 801e546:	bd80      	pop	{r7, pc}

0801e548 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>:

void MockExpectedCallsList::onlyKeepExpectationsOnObject(const void* objectPtr)
{
 801e548:	b580      	push	{r7, lr}
 801e54a:	b084      	sub	sp, #16
 801e54c:	af00      	add	r7, sp, #0
 801e54e:	6078      	str	r0, [r7, #4]
 801e550:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e552:	687b      	ldr	r3, [r7, #4]
 801e554:	685b      	ldr	r3, [r3, #4]
 801e556:	60fb      	str	r3, [r7, #12]
 801e558:	68fb      	ldr	r3, [r7, #12]
 801e55a:	2b00      	cmp	r3, #0
 801e55c:	d016      	beq.n	801e58c <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x44>
        if (! p->expectedCall_->relatesToObject(objectPtr))
 801e55e:	68fb      	ldr	r3, [r7, #12]
 801e560:	681a      	ldr	r2, [r3, #0]
 801e562:	68fb      	ldr	r3, [r7, #12]
 801e564:	681b      	ldr	r3, [r3, #0]
 801e566:	681b      	ldr	r3, [r3, #0]
 801e568:	33bc      	adds	r3, #188	; 0xbc
 801e56a:	681b      	ldr	r3, [r3, #0]
 801e56c:	6839      	ldr	r1, [r7, #0]
 801e56e:	4610      	mov	r0, r2
 801e570:	4798      	blx	r3
 801e572:	4603      	mov	r3, r0
 801e574:	f083 0301 	eor.w	r3, r3, #1
 801e578:	b2db      	uxtb	r3, r3
 801e57a:	2b00      	cmp	r3, #0
 801e57c:	d002      	beq.n	801e584 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x3c>
            p->expectedCall_ = NULLPTR;
 801e57e:	68fb      	ldr	r3, [r7, #12]
 801e580:	2200      	movs	r2, #0
 801e582:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e584:	68fb      	ldr	r3, [r7, #12]
 801e586:	685b      	ldr	r3, [r3, #4]
 801e588:	60fb      	str	r3, [r7, #12]
 801e58a:	e7e5      	b.n	801e558 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x10>
    pruneEmptyNodeFromList();
 801e58c:	687b      	ldr	r3, [r7, #4]
 801e58e:	681b      	ldr	r3, [r3, #0]
 801e590:	3388      	adds	r3, #136	; 0x88
 801e592:	681b      	ldr	r3, [r3, #0]
 801e594:	6878      	ldr	r0, [r7, #4]
 801e596:	4798      	blx	r3
}
 801e598:	bf00      	nop
 801e59a:	3710      	adds	r7, #16
 801e59c:	46bd      	mov	sp, r7
 801e59e:	bd80      	pop	{r7, pc}

0801e5a0 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstFinalizedMatchingExpectation()
{
 801e5a0:	b580      	push	{r7, lr}
 801e5a2:	b084      	sub	sp, #16
 801e5a4:	af00      	add	r7, sp, #0
 801e5a6:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801e5a8:	687b      	ldr	r3, [r7, #4]
 801e5aa:	685b      	ldr	r3, [r3, #4]
 801e5ac:	60fb      	str	r3, [r7, #12]
 801e5ae:	68fb      	ldr	r3, [r7, #12]
 801e5b0:	2b00      	cmp	r3, #0
 801e5b2:	d01d      	beq.n	801e5f0 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801e5b4:	68fb      	ldr	r3, [r7, #12]
 801e5b6:	681a      	ldr	r2, [r3, #0]
 801e5b8:	68fb      	ldr	r3, [r7, #12]
 801e5ba:	681b      	ldr	r3, [r3, #0]
 801e5bc:	681b      	ldr	r3, [r3, #0]
 801e5be:	33c8      	adds	r3, #200	; 0xc8
 801e5c0:	681b      	ldr	r3, [r3, #0]
 801e5c2:	4610      	mov	r0, r2
 801e5c4:	4798      	blx	r3
 801e5c6:	4603      	mov	r3, r0
 801e5c8:	2b00      	cmp	r3, #0
 801e5ca:	d00d      	beq.n	801e5e8 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801e5cc:	68fb      	ldr	r3, [r7, #12]
 801e5ce:	681b      	ldr	r3, [r3, #0]
 801e5d0:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801e5d2:	68fb      	ldr	r3, [r7, #12]
 801e5d4:	2200      	movs	r2, #0
 801e5d6:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801e5d8:	687b      	ldr	r3, [r7, #4]
 801e5da:	681b      	ldr	r3, [r3, #0]
 801e5dc:	3388      	adds	r3, #136	; 0x88
 801e5de:	681b      	ldr	r3, [r3, #0]
 801e5e0:	6878      	ldr	r0, [r7, #4]
 801e5e2:	4798      	blx	r3
            return matchingCall;
 801e5e4:	68bb      	ldr	r3, [r7, #8]
 801e5e6:	e004      	b.n	801e5f2 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801e5e8:	68fb      	ldr	r3, [r7, #12]
 801e5ea:	685b      	ldr	r3, [r3, #4]
 801e5ec:	60fb      	str	r3, [r7, #12]
 801e5ee:	e7de      	b.n	801e5ae <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801e5f0:	2300      	movs	r3, #0
}
 801e5f2:	4618      	mov	r0, r3
 801e5f4:	3710      	adds	r7, #16
 801e5f6:	46bd      	mov	sp, r7
 801e5f8:	bd80      	pop	{r7, pc}

0801e5fa <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::getFirstMatchingExpectation()
{
 801e5fa:	b580      	push	{r7, lr}
 801e5fc:	b084      	sub	sp, #16
 801e5fe:	af00      	add	r7, sp, #0
 801e600:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801e602:	687b      	ldr	r3, [r7, #4]
 801e604:	685b      	ldr	r3, [r3, #4]
 801e606:	60fb      	str	r3, [r7, #12]
 801e608:	68fb      	ldr	r3, [r7, #12]
 801e60a:	2b00      	cmp	r3, #0
 801e60c:	d012      	beq.n	801e634 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3a>
        if (p->expectedCall_->isMatchingActualCall()) {
 801e60e:	68fb      	ldr	r3, [r7, #12]
 801e610:	681a      	ldr	r2, [r3, #0]
 801e612:	68fb      	ldr	r3, [r7, #12]
 801e614:	681b      	ldr	r3, [r3, #0]
 801e616:	681b      	ldr	r3, [r3, #0]
 801e618:	33cc      	adds	r3, #204	; 0xcc
 801e61a:	681b      	ldr	r3, [r3, #0]
 801e61c:	4610      	mov	r0, r2
 801e61e:	4798      	blx	r3
 801e620:	4603      	mov	r3, r0
 801e622:	2b00      	cmp	r3, #0
 801e624:	d002      	beq.n	801e62c <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x32>
            return p->expectedCall_;
 801e626:	68fb      	ldr	r3, [r7, #12]
 801e628:	681b      	ldr	r3, [r3, #0]
 801e62a:	e004      	b.n	801e636 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3c>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801e62c:	68fb      	ldr	r3, [r7, #12]
 801e62e:	685b      	ldr	r3, [r3, #4]
 801e630:	60fb      	str	r3, [r7, #12]
 801e632:	e7e9      	b.n	801e608 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801e634:	2300      	movs	r3, #0
}
 801e636:	4618      	mov	r0, r3
 801e638:	3710      	adds	r7, #16
 801e63a:	46bd      	mov	sp, r7
 801e63c:	bd80      	pop	{r7, pc}

0801e63e <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstMatchingExpectation()
{
 801e63e:	b580      	push	{r7, lr}
 801e640:	b084      	sub	sp, #16
 801e642:	af00      	add	r7, sp, #0
 801e644:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801e646:	687b      	ldr	r3, [r7, #4]
 801e648:	685b      	ldr	r3, [r3, #4]
 801e64a:	60fb      	str	r3, [r7, #12]
 801e64c:	68fb      	ldr	r3, [r7, #12]
 801e64e:	2b00      	cmp	r3, #0
 801e650:	d01d      	beq.n	801e68e <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCall()) {
 801e652:	68fb      	ldr	r3, [r7, #12]
 801e654:	681a      	ldr	r2, [r3, #0]
 801e656:	68fb      	ldr	r3, [r7, #12]
 801e658:	681b      	ldr	r3, [r3, #0]
 801e65a:	681b      	ldr	r3, [r3, #0]
 801e65c:	33cc      	adds	r3, #204	; 0xcc
 801e65e:	681b      	ldr	r3, [r3, #0]
 801e660:	4610      	mov	r0, r2
 801e662:	4798      	blx	r3
 801e664:	4603      	mov	r3, r0
 801e666:	2b00      	cmp	r3, #0
 801e668:	d00d      	beq.n	801e686 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801e66a:	68fb      	ldr	r3, [r7, #12]
 801e66c:	681b      	ldr	r3, [r3, #0]
 801e66e:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801e670:	68fb      	ldr	r3, [r7, #12]
 801e672:	2200      	movs	r2, #0
 801e674:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801e676:	687b      	ldr	r3, [r7, #4]
 801e678:	681b      	ldr	r3, [r3, #0]
 801e67a:	3388      	adds	r3, #136	; 0x88
 801e67c:	681b      	ldr	r3, [r3, #0]
 801e67e:	6878      	ldr	r0, [r7, #4]
 801e680:	4798      	blx	r3
            return matchingCall;
 801e682:	68bb      	ldr	r3, [r7, #8]
 801e684:	e004      	b.n	801e690 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801e686:	68fb      	ldr	r3, [r7, #12]
 801e688:	685b      	ldr	r3, [r3, #4]
 801e68a:	60fb      	str	r3, [r7, #12]
 801e68c:	e7de      	b.n	801e64c <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801e68e:	2300      	movs	r3, #0
}
 801e690:	4618      	mov	r0, r3
 801e692:	3710      	adds	r7, #16
 801e694:	46bd      	mov	sp, r7
 801e696:	bd80      	pop	{r7, pc}

0801e698 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv>:

void MockExpectedCallsList::pruneEmptyNodeFromList()
{
 801e698:	b580      	push	{r7, lr}
 801e69a:	b086      	sub	sp, #24
 801e69c:	af00      	add	r7, sp, #0
 801e69e:	6078      	str	r0, [r7, #4]
    MockExpectedCallsListNode* current = head_;
 801e6a0:	687b      	ldr	r3, [r7, #4]
 801e6a2:	685b      	ldr	r3, [r3, #4]
 801e6a4:	617b      	str	r3, [r7, #20]
    MockExpectedCallsListNode* previous = NULLPTR;
 801e6a6:	2300      	movs	r3, #0
 801e6a8:	613b      	str	r3, [r7, #16]
    MockExpectedCallsListNode* toBeDeleted = NULLPTR;
 801e6aa:	2300      	movs	r3, #0
 801e6ac:	60fb      	str	r3, [r7, #12]

    while (current) {
 801e6ae:	697b      	ldr	r3, [r7, #20]
 801e6b0:	2b00      	cmp	r3, #0
 801e6b2:	d024      	beq.n	801e6fe <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x66>
        if (current->expectedCall_ == NULLPTR) {
 801e6b4:	697b      	ldr	r3, [r7, #20]
 801e6b6:	681b      	ldr	r3, [r3, #0]
 801e6b8:	2b00      	cmp	r3, #0
 801e6ba:	d11a      	bne.n	801e6f2 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x5a>
            toBeDeleted = current;
 801e6bc:	697b      	ldr	r3, [r7, #20]
 801e6be:	60fb      	str	r3, [r7, #12]
            if (previous == NULLPTR)
 801e6c0:	693b      	ldr	r3, [r7, #16]
 801e6c2:	2b00      	cmp	r3, #0
 801e6c4:	d106      	bne.n	801e6d4 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x3c>
                head_ = current = current->next_;
 801e6c6:	697b      	ldr	r3, [r7, #20]
 801e6c8:	685b      	ldr	r3, [r3, #4]
 801e6ca:	617b      	str	r3, [r7, #20]
 801e6cc:	687b      	ldr	r3, [r7, #4]
 801e6ce:	697a      	ldr	r2, [r7, #20]
 801e6d0:	605a      	str	r2, [r3, #4]
 801e6d2:	e006      	b.n	801e6e2 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x4a>
            else
                current = previous->next_ = current->next_;
 801e6d4:	697b      	ldr	r3, [r7, #20]
 801e6d6:	685a      	ldr	r2, [r3, #4]
 801e6d8:	693b      	ldr	r3, [r7, #16]
 801e6da:	605a      	str	r2, [r3, #4]
 801e6dc:	693b      	ldr	r3, [r7, #16]
 801e6de:	685b      	ldr	r3, [r3, #4]
 801e6e0:	617b      	str	r3, [r7, #20]
            delete toBeDeleted;
 801e6e2:	68fb      	ldr	r3, [r7, #12]
 801e6e4:	2b00      	cmp	r3, #0
 801e6e6:	d0e2      	beq.n	801e6ae <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
 801e6e8:	2108      	movs	r1, #8
 801e6ea:	4618      	mov	r0, r3
 801e6ec:	f7ee f82e 	bl	800c74c <_ZdlPvj>
 801e6f0:	e7dd      	b.n	801e6ae <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
        else {
            previous = current;
 801e6f2:	697b      	ldr	r3, [r7, #20]
 801e6f4:	613b      	str	r3, [r7, #16]
            current = current->next_;
 801e6f6:	697b      	ldr	r3, [r7, #20]
 801e6f8:	685b      	ldr	r3, [r3, #4]
 801e6fa:	617b      	str	r3, [r7, #20]
    while (current) {
 801e6fc:	e7d7      	b.n	801e6ae <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
    }
}
 801e6fe:	bf00      	nop
 801e700:	3718      	adds	r7, #24
 801e702:	46bd      	mov	sp, r7
 801e704:	bd80      	pop	{r7, pc}

0801e706 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>:

void MockExpectedCallsList::deleteAllExpectationsAndClearList()
{
 801e706:	b580      	push	{r7, lr}
 801e708:	b084      	sub	sp, #16
 801e70a:	af00      	add	r7, sp, #0
 801e70c:	6078      	str	r0, [r7, #4]
    while (head_) {
 801e70e:	687b      	ldr	r3, [r7, #4]
 801e710:	685b      	ldr	r3, [r3, #4]
 801e712:	2b00      	cmp	r3, #0
 801e714:	d019      	beq.n	801e74a <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x44>
        MockExpectedCallsListNode* next = head_->next_;
 801e716:	687b      	ldr	r3, [r7, #4]
 801e718:	685b      	ldr	r3, [r3, #4]
 801e71a:	685b      	ldr	r3, [r3, #4]
 801e71c:	60fb      	str	r3, [r7, #12]
        delete head_->expectedCall_;
 801e71e:	687b      	ldr	r3, [r7, #4]
 801e720:	685b      	ldr	r3, [r3, #4]
 801e722:	681b      	ldr	r3, [r3, #0]
 801e724:	2b00      	cmp	r3, #0
 801e726:	d004      	beq.n	801e732 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x2c>
 801e728:	681a      	ldr	r2, [r3, #0]
 801e72a:	3204      	adds	r2, #4
 801e72c:	6812      	ldr	r2, [r2, #0]
 801e72e:	4618      	mov	r0, r3
 801e730:	4790      	blx	r2
        delete head_;
 801e732:	687b      	ldr	r3, [r7, #4]
 801e734:	685b      	ldr	r3, [r3, #4]
 801e736:	2b00      	cmp	r3, #0
 801e738:	d003      	beq.n	801e742 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x3c>
 801e73a:	2108      	movs	r1, #8
 801e73c:	4618      	mov	r0, r3
 801e73e:	f7ee f805 	bl	800c74c <_ZdlPvj>
        head_ = next;
 801e742:	687b      	ldr	r3, [r7, #4]
 801e744:	68fa      	ldr	r2, [r7, #12]
 801e746:	605a      	str	r2, [r3, #4]
    while (head_) {
 801e748:	e7e1      	b.n	801e70e <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x8>
    }
}
 801e74a:	bf00      	nop
 801e74c:	3710      	adds	r7, #16
 801e74e:	46bd      	mov	sp, r7
 801e750:	bd80      	pop	{r7, pc}

0801e752 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>:

void MockExpectedCallsList::resetActualCallMatchingState()
{
 801e752:	b580      	push	{r7, lr}
 801e754:	b084      	sub	sp, #16
 801e756:	af00      	add	r7, sp, #0
 801e758:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e75a:	687b      	ldr	r3, [r7, #4]
 801e75c:	685b      	ldr	r3, [r3, #4]
 801e75e:	60fb      	str	r3, [r7, #12]
 801e760:	68fb      	ldr	r3, [r7, #12]
 801e762:	2b00      	cmp	r3, #0
 801e764:	d00c      	beq.n	801e780 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0x2e>
        p->expectedCall_->resetActualCallMatchingState();
 801e766:	68fb      	ldr	r3, [r7, #12]
 801e768:	681a      	ldr	r2, [r3, #0]
 801e76a:	68fb      	ldr	r3, [r7, #12]
 801e76c:	681b      	ldr	r3, [r3, #0]
 801e76e:	681b      	ldr	r3, [r3, #0]
 801e770:	33ec      	adds	r3, #236	; 0xec
 801e772:	681b      	ldr	r3, [r3, #0]
 801e774:	4610      	mov	r0, r2
 801e776:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e778:	68fb      	ldr	r3, [r7, #12]
 801e77a:	685b      	ldr	r3, [r3, #4]
 801e77c:	60fb      	str	r3, [r7, #12]
 801e77e:	e7ef      	b.n	801e760 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0xe>
}
 801e780:	bf00      	nop
 801e782:	3710      	adds	r7, #16
 801e784:	46bd      	mov	sp, r7
 801e786:	bd80      	pop	{r7, pc}

0801e788 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>:

void MockExpectedCallsList::wasPassedToObject()
{
 801e788:	b580      	push	{r7, lr}
 801e78a:	b084      	sub	sp, #16
 801e78c:	af00      	add	r7, sp, #0
 801e78e:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e790:	687b      	ldr	r3, [r7, #4]
 801e792:	685b      	ldr	r3, [r3, #4]
 801e794:	60fb      	str	r3, [r7, #12]
 801e796:	68fb      	ldr	r3, [r7, #12]
 801e798:	2b00      	cmp	r3, #0
 801e79a:	d00c      	beq.n	801e7b6 <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0x2e>
        p->expectedCall_->wasPassedToObject();
 801e79c:	68fb      	ldr	r3, [r7, #12]
 801e79e:	681a      	ldr	r2, [r3, #0]
 801e7a0:	68fb      	ldr	r3, [r7, #12]
 801e7a2:	681b      	ldr	r3, [r3, #0]
 801e7a4:	681b      	ldr	r3, [r3, #0]
 801e7a6:	33e8      	adds	r3, #232	; 0xe8
 801e7a8:	681b      	ldr	r3, [r3, #0]
 801e7aa:	4610      	mov	r0, r2
 801e7ac:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e7ae:	68fb      	ldr	r3, [r7, #12]
 801e7b0:	685b      	ldr	r3, [r3, #4]
 801e7b2:	60fb      	str	r3, [r7, #12]
 801e7b4:	e7ef      	b.n	801e796 <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0xe>
}
 801e7b6:	bf00      	nop
 801e7b8:	3710      	adds	r7, #16
 801e7ba:	46bd      	mov	sp, r7
 801e7bc:	bd80      	pop	{r7, pc}

0801e7be <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>:


void MockExpectedCallsList::parameterWasPassed(const SimpleString& parameterName)
{
 801e7be:	b580      	push	{r7, lr}
 801e7c0:	b084      	sub	sp, #16
 801e7c2:	af00      	add	r7, sp, #0
 801e7c4:	6078      	str	r0, [r7, #4]
 801e7c6:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e7c8:	687b      	ldr	r3, [r7, #4]
 801e7ca:	685b      	ldr	r3, [r3, #4]
 801e7cc:	60fb      	str	r3, [r7, #12]
 801e7ce:	68fb      	ldr	r3, [r7, #12]
 801e7d0:	2b00      	cmp	r3, #0
 801e7d2:	d00d      	beq.n	801e7f0 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->inputParameterWasPassed(parameterName);
 801e7d4:	68fb      	ldr	r3, [r7, #12]
 801e7d6:	681a      	ldr	r2, [r3, #0]
 801e7d8:	68fb      	ldr	r3, [r7, #12]
 801e7da:	681b      	ldr	r3, [r3, #0]
 801e7dc:	681b      	ldr	r3, [r3, #0]
 801e7de:	33dc      	adds	r3, #220	; 0xdc
 801e7e0:	681b      	ldr	r3, [r3, #0]
 801e7e2:	6839      	ldr	r1, [r7, #0]
 801e7e4:	4610      	mov	r0, r2
 801e7e6:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e7e8:	68fb      	ldr	r3, [r7, #12]
 801e7ea:	685b      	ldr	r3, [r3, #4]
 801e7ec:	60fb      	str	r3, [r7, #12]
 801e7ee:	e7ee      	b.n	801e7ce <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x10>
}
 801e7f0:	bf00      	nop
 801e7f2:	3710      	adds	r7, #16
 801e7f4:	46bd      	mov	sp, r7
 801e7f6:	bd80      	pop	{r7, pc}

0801e7f8 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>:

void MockExpectedCallsList::outputParameterWasPassed(const SimpleString& parameterName)
{
 801e7f8:	b580      	push	{r7, lr}
 801e7fa:	b084      	sub	sp, #16
 801e7fc:	af00      	add	r7, sp, #0
 801e7fe:	6078      	str	r0, [r7, #4]
 801e800:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e802:	687b      	ldr	r3, [r7, #4]
 801e804:	685b      	ldr	r3, [r3, #4]
 801e806:	60fb      	str	r3, [r7, #12]
 801e808:	68fb      	ldr	r3, [r7, #12]
 801e80a:	2b00      	cmp	r3, #0
 801e80c:	d00d      	beq.n	801e82a <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->outputParameterWasPassed(parameterName);
 801e80e:	68fb      	ldr	r3, [r7, #12]
 801e810:	681a      	ldr	r2, [r3, #0]
 801e812:	68fb      	ldr	r3, [r7, #12]
 801e814:	681b      	ldr	r3, [r3, #0]
 801e816:	681b      	ldr	r3, [r3, #0]
 801e818:	33e0      	adds	r3, #224	; 0xe0
 801e81a:	681b      	ldr	r3, [r3, #0]
 801e81c:	6839      	ldr	r1, [r7, #0]
 801e81e:	4610      	mov	r0, r2
 801e820:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e822:	68fb      	ldr	r3, [r7, #12]
 801e824:	685b      	ldr	r3, [r3, #4]
 801e826:	60fb      	str	r3, [r7, #12]
 801e828:	e7ee      	b.n	801e808 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x10>
}
 801e82a:	bf00      	nop
 801e82c:	3710      	adds	r7, #16
 801e82e:	46bd      	mov	sp, r7
 801e830:	bd80      	pop	{r7, pc}
	...

0801e834 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>:

static SimpleString stringOrNoneTextWhenEmpty(const SimpleString& inputString, const SimpleString& linePrefix)
{
 801e834:	b590      	push	{r4, r7, lr}
 801e836:	b087      	sub	sp, #28
 801e838:	af00      	add	r7, sp, #0
 801e83a:	60f8      	str	r0, [r7, #12]
 801e83c:	60b9      	str	r1, [r7, #8]
 801e83e:	607a      	str	r2, [r7, #4]
    SimpleString str = inputString;
 801e840:	68b9      	ldr	r1, [r7, #8]
 801e842:	68f8      	ldr	r0, [r7, #12]
 801e844:	f7f0 fb85 	bl	800ef52 <_ZN12SimpleStringC1ERKS_>
    if (str == "") {
 801e848:	f107 0310 	add.w	r3, r7, #16
 801e84c:	490f      	ldr	r1, [pc, #60]	; (801e88c <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x58>)
 801e84e:	4618      	mov	r0, r3
 801e850:	f7f0 fb2b 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801e854:	f107 0310 	add.w	r3, r7, #16
 801e858:	4619      	mov	r1, r3
 801e85a:	68f8      	ldr	r0, [r7, #12]
 801e85c:	f7f0 fee9 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 801e860:	4603      	mov	r3, r0
 801e862:	461c      	mov	r4, r3
 801e864:	f107 0310 	add.w	r3, r7, #16
 801e868:	4618      	mov	r0, r3
 801e86a:	f7f0 fed6 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801e86e:	2c00      	cmp	r4, #0
 801e870:	d007      	beq.n	801e882 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x4e>
        str += linePrefix;
 801e872:	6879      	ldr	r1, [r7, #4]
 801e874:	68f8      	ldr	r0, [r7, #12]
 801e876:	f7f0 ff4d 	bl	800f714 <_ZN12SimpleStringpLERKS_>
        str += "<none>";
 801e87a:	4905      	ldr	r1, [pc, #20]	; (801e890 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x5c>)
 801e87c:	68f8      	ldr	r0, [r7, #12]
 801e87e:	f7f0 ff5b 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    }
    return str;
 801e882:	bf00      	nop
}
 801e884:	68f8      	ldr	r0, [r7, #12]
 801e886:	371c      	adds	r7, #28
 801e888:	46bd      	mov	sp, r7
 801e88a:	bd90      	pop	{r4, r7, pc}
 801e88c:	08028d60 	.word	0x08028d60
 801e890:	08028d64 	.word	0x08028d64

0801e894 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>:

static SimpleString appendStringOnANewLine(const SimpleString& inputString, const SimpleString& linePrefix, const SimpleString& stringToAppend)
{
 801e894:	b590      	push	{r4, r7, lr}
 801e896:	b087      	sub	sp, #28
 801e898:	af00      	add	r7, sp, #0
 801e89a:	60f8      	str	r0, [r7, #12]
 801e89c:	60b9      	str	r1, [r7, #8]
 801e89e:	607a      	str	r2, [r7, #4]
 801e8a0:	603b      	str	r3, [r7, #0]
    SimpleString str = inputString;
 801e8a2:	68b9      	ldr	r1, [r7, #8]
 801e8a4:	68f8      	ldr	r0, [r7, #12]
 801e8a6:	f7f0 fb54 	bl	800ef52 <_ZN12SimpleStringC1ERKS_>
    if (str != "") str += "\n";
 801e8aa:	f107 0310 	add.w	r3, r7, #16
 801e8ae:	4912      	ldr	r1, [pc, #72]	; (801e8f8 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x64>)
 801e8b0:	4618      	mov	r0, r3
 801e8b2:	f7f0 fafa 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801e8b6:	f107 0310 	add.w	r3, r7, #16
 801e8ba:	4619      	mov	r1, r3
 801e8bc:	68f8      	ldr	r0, [r7, #12]
 801e8be:	f7f0 fefd 	bl	800f6bc <_ZneRK12SimpleStringS1_>
 801e8c2:	4603      	mov	r3, r0
 801e8c4:	461c      	mov	r4, r3
 801e8c6:	f107 0310 	add.w	r3, r7, #16
 801e8ca:	4618      	mov	r0, r3
 801e8cc:	f7f0 fea5 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801e8d0:	2c00      	cmp	r4, #0
 801e8d2:	d003      	beq.n	801e8dc <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x48>
 801e8d4:	4909      	ldr	r1, [pc, #36]	; (801e8fc <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x68>)
 801e8d6:	68f8      	ldr	r0, [r7, #12]
 801e8d8:	f7f0 ff2e 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    str += linePrefix;
 801e8dc:	6879      	ldr	r1, [r7, #4]
 801e8de:	68f8      	ldr	r0, [r7, #12]
 801e8e0:	f7f0 ff18 	bl	800f714 <_ZN12SimpleStringpLERKS_>
    str += stringToAppend;
 801e8e4:	6839      	ldr	r1, [r7, #0]
 801e8e6:	68f8      	ldr	r0, [r7, #12]
 801e8e8:	f7f0 ff14 	bl	800f714 <_ZN12SimpleStringpLERKS_>
    return str;
 801e8ec:	bf00      	nop
}
 801e8ee:	68f8      	ldr	r0, [r7, #12]
 801e8f0:	371c      	adds	r7, #28
 801e8f2:	46bd      	mov	sp, r7
 801e8f4:	bd90      	pop	{r4, r7, pc}
 801e8f6:	bf00      	nop
 801e8f8:	08028d60 	.word	0x08028d60
 801e8fc:	08028d6c 	.word	0x08028d6c

0801e900 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::unfulfilledCallsToString(const SimpleString& linePrefix) const
{
 801e900:	b580      	push	{r7, lr}
 801e902:	b08c      	sub	sp, #48	; 0x30
 801e904:	af00      	add	r7, sp, #0
 801e906:	60f8      	str	r0, [r7, #12]
 801e908:	60b9      	str	r1, [r7, #8]
 801e90a:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801e90c:	f107 0314 	add.w	r3, r7, #20
 801e910:	4929      	ldr	r1, [pc, #164]	; (801e9b8 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0xb8>)
 801e912:	4618      	mov	r0, r3
 801e914:	f7f0 fac9 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e918:	68bb      	ldr	r3, [r7, #8]
 801e91a:	685b      	ldr	r3, [r3, #4]
 801e91c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e920:	2b00      	cmp	r3, #0
 801e922:	d038      	beq.n	801e996 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x96>
        if (!p->expectedCall_->isFulfilled())
 801e924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e926:	681a      	ldr	r2, [r3, #0]
 801e928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e92a:	681b      	ldr	r3, [r3, #0]
 801e92c:	681b      	ldr	r3, [r3, #0]
 801e92e:	33c0      	adds	r3, #192	; 0xc0
 801e930:	681b      	ldr	r3, [r3, #0]
 801e932:	4610      	mov	r0, r2
 801e934:	4798      	blx	r3
 801e936:	4603      	mov	r3, r0
 801e938:	f083 0301 	eor.w	r3, r3, #1
 801e93c:	b2db      	uxtb	r3, r3
 801e93e:	2b00      	cmp	r3, #0
 801e940:	d025      	beq.n	801e98e <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x8e>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801e942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e944:	6819      	ldr	r1, [r3, #0]
 801e946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e948:	681b      	ldr	r3, [r3, #0]
 801e94a:	681b      	ldr	r3, [r3, #0]
 801e94c:	33f0      	adds	r3, #240	; 0xf0
 801e94e:	681b      	ldr	r3, [r3, #0]
 801e950:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801e954:	4610      	mov	r0, r2
 801e956:	4798      	blx	r3
 801e958:	f107 001c 	add.w	r0, r7, #28
 801e95c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e960:	f107 0114 	add.w	r1, r7, #20
 801e964:	687a      	ldr	r2, [r7, #4]
 801e966:	f7ff ff95 	bl	801e894 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801e96a:	f107 021c 	add.w	r2, r7, #28
 801e96e:	f107 0314 	add.w	r3, r7, #20
 801e972:	4611      	mov	r1, r2
 801e974:	4618      	mov	r0, r3
 801e976:	f7f0 fb04 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 801e97a:	f107 031c 	add.w	r3, r7, #28
 801e97e:	4618      	mov	r0, r3
 801e980:	f7f0 fe4b 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801e984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e988:	4618      	mov	r0, r3
 801e98a:	f7f0 fe46 	bl	800f61a <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e990:	685b      	ldr	r3, [r3, #4]
 801e992:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e994:	e7c3      	b.n	801e91e <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x1e>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801e996:	68fb      	ldr	r3, [r7, #12]
 801e998:	f107 0114 	add.w	r1, r7, #20
 801e99c:	687a      	ldr	r2, [r7, #4]
 801e99e:	4618      	mov	r0, r3
 801e9a0:	f7ff ff48 	bl	801e834 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801e9a4:	f107 0314 	add.w	r3, r7, #20
 801e9a8:	4618      	mov	r0, r3
 801e9aa:	f7f0 fe36 	bl	800f61a <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801e9ae:	bf00      	nop
}
 801e9b0:	68f8      	ldr	r0, [r7, #12]
 801e9b2:	3730      	adds	r7, #48	; 0x30
 801e9b4:	46bd      	mov	sp, r7
 801e9b6:	bd80      	pop	{r7, pc}
 801e9b8:	08028d60 	.word	0x08028d60

0801e9bc <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::fulfilledCallsToString(const SimpleString& linePrefix) const
{
 801e9bc:	b580      	push	{r7, lr}
 801e9be:	b08c      	sub	sp, #48	; 0x30
 801e9c0:	af00      	add	r7, sp, #0
 801e9c2:	60f8      	str	r0, [r7, #12]
 801e9c4:	60b9      	str	r1, [r7, #8]
 801e9c6:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801e9c8:	f107 0314 	add.w	r3, r7, #20
 801e9cc:	4928      	ldr	r1, [pc, #160]	; (801ea70 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0xb4>)
 801e9ce:	4618      	mov	r0, r3
 801e9d0:	f7f0 fa6b 	bl	800eeaa <_ZN12SimpleStringC1EPKc>

    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801e9d4:	68bb      	ldr	r3, [r7, #8]
 801e9d6:	685b      	ldr	r3, [r3, #4]
 801e9d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e9dc:	2b00      	cmp	r3, #0
 801e9de:	d035      	beq.n	801ea4c <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x90>
        if (p->expectedCall_->isFulfilled())
 801e9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e9e2:	681a      	ldr	r2, [r3, #0]
 801e9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e9e6:	681b      	ldr	r3, [r3, #0]
 801e9e8:	681b      	ldr	r3, [r3, #0]
 801e9ea:	33c0      	adds	r3, #192	; 0xc0
 801e9ec:	681b      	ldr	r3, [r3, #0]
 801e9ee:	4610      	mov	r0, r2
 801e9f0:	4798      	blx	r3
 801e9f2:	4603      	mov	r3, r0
 801e9f4:	2b00      	cmp	r3, #0
 801e9f6:	d025      	beq.n	801ea44 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x88>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801e9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e9fa:	6819      	ldr	r1, [r3, #0]
 801e9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e9fe:	681b      	ldr	r3, [r3, #0]
 801ea00:	681b      	ldr	r3, [r3, #0]
 801ea02:	33f0      	adds	r3, #240	; 0xf0
 801ea04:	681b      	ldr	r3, [r3, #0]
 801ea06:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801ea0a:	4610      	mov	r0, r2
 801ea0c:	4798      	blx	r3
 801ea0e:	f107 001c 	add.w	r0, r7, #28
 801ea12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ea16:	f107 0114 	add.w	r1, r7, #20
 801ea1a:	687a      	ldr	r2, [r7, #4]
 801ea1c:	f7ff ff3a 	bl	801e894 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801ea20:	f107 021c 	add.w	r2, r7, #28
 801ea24:	f107 0314 	add.w	r3, r7, #20
 801ea28:	4611      	mov	r1, r2
 801ea2a:	4618      	mov	r0, r3
 801ea2c:	f7f0 faa9 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 801ea30:	f107 031c 	add.w	r3, r7, #28
 801ea34:	4618      	mov	r0, r3
 801ea36:	f7f0 fdf0 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801ea3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801ea3e:	4618      	mov	r0, r3
 801ea40:	f7f0 fdeb 	bl	800f61a <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ea44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ea46:	685b      	ldr	r3, [r3, #4]
 801ea48:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ea4a:	e7c6      	b.n	801e9da <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x1e>

    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801ea4c:	68fb      	ldr	r3, [r7, #12]
 801ea4e:	f107 0114 	add.w	r1, r7, #20
 801ea52:	687a      	ldr	r2, [r7, #4]
 801ea54:	4618      	mov	r0, r3
 801ea56:	f7ff feed 	bl	801e834 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801ea5a:	f107 0314 	add.w	r3, r7, #20
 801ea5e:	4618      	mov	r0, r3
 801ea60:	f7f0 fddb 	bl	800f61a <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801ea64:	bf00      	nop
}
 801ea66:	68f8      	ldr	r0, [r7, #12]
 801ea68:	3730      	adds	r7, #48	; 0x30
 801ea6a:	46bd      	mov	sp, r7
 801ea6c:	bd80      	pop	{r7, pc}
 801ea6e:	bf00      	nop
 801ea70:	08028d60 	.word	0x08028d60

0801ea74 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>:

SimpleString MockExpectedCallsList::missingParametersToString() const
{
 801ea74:	b580      	push	{r7, lr}
 801ea76:	b08e      	sub	sp, #56	; 0x38
 801ea78:	af00      	add	r7, sp, #0
 801ea7a:	6078      	str	r0, [r7, #4]
 801ea7c:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801ea7e:	f107 030c 	add.w	r3, r7, #12
 801ea82:	4936      	ldr	r1, [pc, #216]	; (801eb5c <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801ea84:	4618      	mov	r0, r3
 801ea86:	f7f0 fa10 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ea8a:	683b      	ldr	r3, [r7, #0]
 801ea8c:	685b      	ldr	r3, [r3, #4]
 801ea8e:	637b      	str	r3, [r7, #52]	; 0x34
 801ea90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ea92:	2b00      	cmp	r3, #0
 801ea94:	d044      	beq.n	801eb20 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xac>
        if (! p->expectedCall_->isMatchingActualCall())
 801ea96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ea98:	681a      	ldr	r2, [r3, #0]
 801ea9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ea9c:	681b      	ldr	r3, [r3, #0]
 801ea9e:	681b      	ldr	r3, [r3, #0]
 801eaa0:	33cc      	adds	r3, #204	; 0xcc
 801eaa2:	681b      	ldr	r3, [r3, #0]
 801eaa4:	4610      	mov	r0, r2
 801eaa6:	4798      	blx	r3
 801eaa8:	4603      	mov	r3, r0
 801eaaa:	f083 0301 	eor.w	r3, r3, #1
 801eaae:	b2db      	uxtb	r3, r3
 801eab0:	2b00      	cmp	r3, #0
 801eab2:	d031      	beq.n	801eb18 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xa4>
            str = appendStringOnANewLine(str, "", p->expectedCall_->missingParametersToString());
 801eab4:	f107 031c 	add.w	r3, r7, #28
 801eab8:	4928      	ldr	r1, [pc, #160]	; (801eb5c <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801eaba:	4618      	mov	r0, r3
 801eabc:	f7f0 f9f5 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801eac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801eac2:	6819      	ldr	r1, [r3, #0]
 801eac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801eac6:	681b      	ldr	r3, [r3, #0]
 801eac8:	681b      	ldr	r3, [r3, #0]
 801eaca:	33f4      	adds	r3, #244	; 0xf4
 801eacc:	681b      	ldr	r3, [r3, #0]
 801eace:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801ead2:	4610      	mov	r0, r2
 801ead4:	4798      	blx	r3
 801ead6:	f107 0014 	add.w	r0, r7, #20
 801eada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801eade:	f107 021c 	add.w	r2, r7, #28
 801eae2:	f107 010c 	add.w	r1, r7, #12
 801eae6:	f7ff fed5 	bl	801e894 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801eaea:	f107 0214 	add.w	r2, r7, #20
 801eaee:	f107 030c 	add.w	r3, r7, #12
 801eaf2:	4611      	mov	r1, r2
 801eaf4:	4618      	mov	r0, r3
 801eaf6:	f7f0 fa44 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 801eafa:	f107 0314 	add.w	r3, r7, #20
 801eafe:	4618      	mov	r0, r3
 801eb00:	f7f0 fd8b 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801eb04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801eb08:	4618      	mov	r0, r3
 801eb0a:	f7f0 fd86 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801eb0e:	f107 031c 	add.w	r3, r7, #28
 801eb12:	4618      	mov	r0, r3
 801eb14:	f7f0 fd81 	bl	800f61a <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801eb18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801eb1a:	685b      	ldr	r3, [r3, #4]
 801eb1c:	637b      	str	r3, [r7, #52]	; 0x34
 801eb1e:	e7b7      	b.n	801ea90 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0x1c>

    return stringOrNoneTextWhenEmpty(str, "");
 801eb20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801eb24:	490d      	ldr	r1, [pc, #52]	; (801eb5c <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801eb26:	4618      	mov	r0, r3
 801eb28:	f7f0 f9bf 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801eb2c:	687b      	ldr	r3, [r7, #4]
 801eb2e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801eb32:	f107 010c 	add.w	r1, r7, #12
 801eb36:	4618      	mov	r0, r3
 801eb38:	f7ff fe7c 	bl	801e834 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
 801eb3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801eb40:	4618      	mov	r0, r3
 801eb42:	f7f0 fd6a 	bl	800f61a <_ZN12SimpleStringD1Ev>
    SimpleString str;
 801eb46:	f107 030c 	add.w	r3, r7, #12
 801eb4a:	4618      	mov	r0, r3
 801eb4c:	f7f0 fd65 	bl	800f61a <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, "");
 801eb50:	bf00      	nop
}
 801eb52:	6878      	ldr	r0, [r7, #4]
 801eb54:	3738      	adds	r7, #56	; 0x38
 801eb56:	46bd      	mov	sp, r7
 801eb58:	bd80      	pop	{r7, pc}
 801eb5a:	bf00      	nop
 801eb5c:	08028d60 	.word	0x08028d60

0801eb60 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>:

bool MockExpectedCallsList::hasUnmatchingExpectationsBecauseOfMissingParameters() const
{
 801eb60:	b580      	push	{r7, lr}
 801eb62:	b084      	sub	sp, #16
 801eb64:	af00      	add	r7, sp, #0
 801eb66:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801eb68:	687b      	ldr	r3, [r7, #4]
 801eb6a:	685b      	ldr	r3, [r3, #4]
 801eb6c:	60fb      	str	r3, [r7, #12]
 801eb6e:	68fb      	ldr	r3, [r7, #12]
 801eb70:	2b00      	cmp	r3, #0
 801eb72:	d014      	beq.n	801eb9e <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x3e>
        if (! p->expectedCall_->areParametersMatchingActualCall())
 801eb74:	68fb      	ldr	r3, [r7, #12]
 801eb76:	681a      	ldr	r2, [r3, #0]
 801eb78:	68fb      	ldr	r3, [r7, #12]
 801eb7a:	681b      	ldr	r3, [r3, #0]
 801eb7c:	681b      	ldr	r3, [r3, #0]
 801eb7e:	33d0      	adds	r3, #208	; 0xd0
 801eb80:	681b      	ldr	r3, [r3, #0]
 801eb82:	4610      	mov	r0, r2
 801eb84:	4798      	blx	r3
 801eb86:	4603      	mov	r3, r0
 801eb88:	f083 0301 	eor.w	r3, r3, #1
 801eb8c:	b2db      	uxtb	r3, r3
 801eb8e:	2b00      	cmp	r3, #0
 801eb90:	d001      	beq.n	801eb96 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x36>
            return true;
 801eb92:	2301      	movs	r3, #1
 801eb94:	e004      	b.n	801eba0 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801eb96:	68fb      	ldr	r3, [r7, #12]
 801eb98:	685b      	ldr	r3, [r3, #4]
 801eb9a:	60fb      	str	r3, [r7, #12]
 801eb9c:	e7e7      	b.n	801eb6e <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0xe>
    return false;
 801eb9e:	2300      	movs	r3, #0
}
 801eba0:	4618      	mov	r0, r3
 801eba2:	3710      	adds	r7, #16
 801eba4:	46bd      	mov	sp, r7
 801eba6:	bd80      	pop	{r7, pc}

0801eba8 <_ZN19MockFailureReporter14crashOnFailureEb>:
    virtual void crashOnFailure(bool shouldCrash) { crashOnFailure_ = shouldCrash; }
 801eba8:	b480      	push	{r7}
 801ebaa:	b083      	sub	sp, #12
 801ebac:	af00      	add	r7, sp, #0
 801ebae:	6078      	str	r0, [r7, #4]
 801ebb0:	460b      	mov	r3, r1
 801ebb2:	70fb      	strb	r3, [r7, #3]
 801ebb4:	687b      	ldr	r3, [r7, #4]
 801ebb6:	78fa      	ldrb	r2, [r7, #3]
 801ebb8:	711a      	strb	r2, [r3, #4]
 801ebba:	bf00      	nop
 801ebbc:	370c      	adds	r7, #12
 801ebbe:	46bd      	mov	sp, r7
 801ebc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ebc4:	4770      	bx	lr
	...

0801ebc8 <_ZN33MockFailureReporterTestTerminatorC1Eb>:
#include "CppUTestExt/MockNamedValue.h"

class MockFailureReporterTestTerminator : public TestTerminator
{
public:
    MockFailureReporterTestTerminator(bool crashOnFailure) : crashOnFailure_(crashOnFailure)
 801ebc8:	b580      	push	{r7, lr}
 801ebca:	b082      	sub	sp, #8
 801ebcc:	af00      	add	r7, sp, #0
 801ebce:	6078      	str	r0, [r7, #4]
 801ebd0:	460b      	mov	r3, r1
 801ebd2:	70fb      	strb	r3, [r7, #3]
 801ebd4:	687b      	ldr	r3, [r7, #4]
 801ebd6:	4618      	mov	r0, r3
 801ebd8:	f7ed ff6a 	bl	800cab0 <_ZN14TestTerminatorC1Ev>
 801ebdc:	4a05      	ldr	r2, [pc, #20]	; (801ebf4 <_ZN33MockFailureReporterTestTerminatorC1Eb+0x2c>)
 801ebde:	687b      	ldr	r3, [r7, #4]
 801ebe0:	601a      	str	r2, [r3, #0]
 801ebe2:	687b      	ldr	r3, [r7, #4]
 801ebe4:	78fa      	ldrb	r2, [r7, #3]
 801ebe6:	711a      	strb	r2, [r3, #4]
    {
    }
 801ebe8:	687b      	ldr	r3, [r7, #4]
 801ebea:	4618      	mov	r0, r3
 801ebec:	3708      	adds	r7, #8
 801ebee:	46bd      	mov	sp, r7
 801ebf0:	bd80      	pop	{r7, pc}
 801ebf2:	bf00      	nop
 801ebf4:	0802c2ec 	.word	0x0802c2ec

0801ebf8 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv>:

    virtual void exitCurrentTest() const _override
 801ebf8:	b580      	push	{r7, lr}
 801ebfa:	b082      	sub	sp, #8
 801ebfc:	af00      	add	r7, sp, #0
 801ebfe:	6078      	str	r0, [r7, #4]
    {
        if (crashOnFailure_)
 801ec00:	687b      	ldr	r3, [r7, #4]
 801ec02:	791b      	ldrb	r3, [r3, #4]
 801ec04:	2b00      	cmp	r3, #0
 801ec06:	d001      	beq.n	801ec0c <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv+0x14>
            UT_CRASH();
 801ec08:	f7f6 f9fe 	bl	8015008 <_ZN10UtestShell5crashEv>

        UtestShell::getCurrentTestTerminator().exitCurrentTest();
 801ec0c:	f7f7 fd40 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ec10:	4603      	mov	r3, r0
 801ec12:	681a      	ldr	r2, [r3, #0]
 801ec14:	6812      	ldr	r2, [r2, #0]
 801ec16:	4618      	mov	r0, r3
 801ec18:	4790      	blx	r2
    } // LCOV_EXCL_LINE
 801ec1a:	bf00      	nop
 801ec1c:	3708      	adds	r7, #8
 801ec1e:	46bd      	mov	sp, r7
 801ec20:	bd80      	pop	{r7, pc}
	...

0801ec24 <_ZN33MockFailureReporterTestTerminatorD1Ev>:

    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801ec24:	b580      	push	{r7, lr}
 801ec26:	b082      	sub	sp, #8
 801ec28:	af00      	add	r7, sp, #0
 801ec2a:	6078      	str	r0, [r7, #4]
    {
 801ec2c:	4a05      	ldr	r2, [pc, #20]	; (801ec44 <_ZN33MockFailureReporterTestTerminatorD1Ev+0x20>)
 801ec2e:	687b      	ldr	r3, [r7, #4]
 801ec30:	601a      	str	r2, [r3, #0]
 801ec32:	687b      	ldr	r3, [r7, #4]
 801ec34:	4618      	mov	r0, r3
 801ec36:	f7f7 fdbb 	bl	80167b0 <_ZN14TestTerminatorD1Ev>
    }
 801ec3a:	687b      	ldr	r3, [r7, #4]
 801ec3c:	4618      	mov	r0, r3
 801ec3e:	3708      	adds	r7, #8
 801ec40:	46bd      	mov	sp, r7
 801ec42:	bd80      	pop	{r7, pc}
 801ec44:	0802c2ec 	.word	0x0802c2ec

0801ec48 <_ZN33MockFailureReporterTestTerminatorD0Ev>:
    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801ec48:	b580      	push	{r7, lr}
 801ec4a:	b082      	sub	sp, #8
 801ec4c:	af00      	add	r7, sp, #0
 801ec4e:	6078      	str	r0, [r7, #4]
    }
 801ec50:	6878      	ldr	r0, [r7, #4]
 801ec52:	f7ff ffe7 	bl	801ec24 <_ZN33MockFailureReporterTestTerminatorD1Ev>
 801ec56:	2108      	movs	r1, #8
 801ec58:	6878      	ldr	r0, [r7, #4]
 801ec5a:	f7ed fd77 	bl	800c74c <_ZdlPvj>
 801ec5e:	687b      	ldr	r3, [r7, #4]
 801ec60:	4618      	mov	r0, r3
 801ec62:	3708      	adds	r7, #8
 801ec64:	46bd      	mov	sp, r7
 801ec66:	bd80      	pop	{r7, pc}

0801ec68 <_ZN19MockFailureReporter8failTestERK11MockFailure>:
    bool crashOnFailure_;

};

void MockFailureReporter::failTest(const MockFailure& failure)
{
 801ec68:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ec6a:	b085      	sub	sp, #20
 801ec6c:	af00      	add	r7, sp, #0
 801ec6e:	6078      	str	r0, [r7, #4]
 801ec70:	6039      	str	r1, [r7, #0]
    if (!getTestToFail()->hasFailed())
 801ec72:	687b      	ldr	r3, [r7, #4]
 801ec74:	681b      	ldr	r3, [r3, #0]
 801ec76:	330c      	adds	r3, #12
 801ec78:	681b      	ldr	r3, [r3, #0]
 801ec7a:	6878      	ldr	r0, [r7, #4]
 801ec7c:	4798      	blx	r3
 801ec7e:	4603      	mov	r3, r0
 801ec80:	681a      	ldr	r2, [r3, #0]
 801ec82:	321c      	adds	r2, #28
 801ec84:	6812      	ldr	r2, [r2, #0]
 801ec86:	4618      	mov	r0, r3
 801ec88:	4790      	blx	r2
 801ec8a:	4603      	mov	r3, r0
 801ec8c:	f083 0301 	eor.w	r3, r3, #1
 801ec90:	b2db      	uxtb	r3, r3
 801ec92:	2b00      	cmp	r3, #0
 801ec94:	d01d      	beq.n	801ecd2 <_ZN19MockFailureReporter8failTestERK11MockFailure+0x6a>
        getTestToFail()->failWith(failure, MockFailureReporterTestTerminator(crashOnFailure_));
 801ec96:	687b      	ldr	r3, [r7, #4]
 801ec98:	681b      	ldr	r3, [r3, #0]
 801ec9a:	330c      	adds	r3, #12
 801ec9c:	681b      	ldr	r3, [r3, #0]
 801ec9e:	6878      	ldr	r0, [r7, #4]
 801eca0:	4798      	blx	r3
 801eca2:	4604      	mov	r4, r0
 801eca4:	6823      	ldr	r3, [r4, #0]
 801eca6:	339c      	adds	r3, #156	; 0x9c
 801eca8:	681d      	ldr	r5, [r3, #0]
 801ecaa:	683e      	ldr	r6, [r7, #0]
 801ecac:	687b      	ldr	r3, [r7, #4]
 801ecae:	791a      	ldrb	r2, [r3, #4]
 801ecb0:	f107 0308 	add.w	r3, r7, #8
 801ecb4:	4611      	mov	r1, r2
 801ecb6:	4618      	mov	r0, r3
 801ecb8:	f7ff ff86 	bl	801ebc8 <_ZN33MockFailureReporterTestTerminatorC1Eb>
 801ecbc:	f107 0308 	add.w	r3, r7, #8
 801ecc0:	461a      	mov	r2, r3
 801ecc2:	4631      	mov	r1, r6
 801ecc4:	4620      	mov	r0, r4
 801ecc6:	47a8      	blx	r5
 801ecc8:	f107 0308 	add.w	r3, r7, #8
 801eccc:	4618      	mov	r0, r3
 801ecce:	f7ff ffa9 	bl	801ec24 <_ZN33MockFailureReporterTestTerminatorD1Ev>
} // LCOV_EXCL_LINE
 801ecd2:	bf00      	nop
 801ecd4:	3714      	adds	r7, #20
 801ecd6:	46bd      	mov	sp, r7
 801ecd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ecda <_ZN19MockFailureReporter13getTestToFailEv>:

UtestShell* MockFailureReporter::getTestToFail()
{
 801ecda:	b580      	push	{r7, lr}
 801ecdc:	b082      	sub	sp, #8
 801ecde:	af00      	add	r7, sp, #0
 801ece0:	6078      	str	r0, [r7, #4]
    return UtestShell::getCurrent();
 801ece2:	f7f7 fcc5 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 801ece6:	4603      	mov	r3, r0
}
 801ece8:	4618      	mov	r0, r3
 801ecea:	3708      	adds	r7, #8
 801ecec:	46bd      	mov	sp, r7
 801ecee:	bd80      	pop	{r7, pc}

0801ecf0 <_ZN11MockFailureC1EP10UtestShell>:

MockFailure::MockFailure(UtestShell* test) : TestFailure(test, "Test failed with MockFailure without an error! Something went seriously wrong.")
 801ecf0:	b590      	push	{r4, r7, lr}
 801ecf2:	b085      	sub	sp, #20
 801ecf4:	af00      	add	r7, sp, #0
 801ecf6:	6078      	str	r0, [r7, #4]
 801ecf8:	6039      	str	r1, [r7, #0]
 801ecfa:	687c      	ldr	r4, [r7, #4]
 801ecfc:	f107 0308 	add.w	r3, r7, #8
 801ed00:	490b      	ldr	r1, [pc, #44]	; (801ed30 <_ZN11MockFailureC1EP10UtestShell+0x40>)
 801ed02:	4618      	mov	r0, r3
 801ed04:	f7f0 f8d1 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801ed08:	f107 0308 	add.w	r3, r7, #8
 801ed0c:	461a      	mov	r2, r3
 801ed0e:	6839      	ldr	r1, [r7, #0]
 801ed10:	4620      	mov	r0, r4
 801ed12:	f7f1 ff29 	bl	8010b68 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 801ed16:	f107 0308 	add.w	r3, r7, #8
 801ed1a:	4618      	mov	r0, r3
 801ed1c:	f7f0 fc7d 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801ed20:	4a04      	ldr	r2, [pc, #16]	; (801ed34 <_ZN11MockFailureC1EP10UtestShell+0x44>)
 801ed22:	687b      	ldr	r3, [r7, #4]
 801ed24:	601a      	str	r2, [r3, #0]
{
}
 801ed26:	687b      	ldr	r3, [r7, #4]
 801ed28:	4618      	mov	r0, r3
 801ed2a:	3714      	adds	r7, #20
 801ed2c:	46bd      	mov	sp, r7
 801ed2e:	bd90      	pop	{r4, r7, pc}
 801ed30:	08028d70 	.word	0x08028d70
 801ed34:	0802b278 	.word	0x0802b278

0801ed38 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistory(const MockExpectedCallsList& expectations)
{
 801ed38:	b5b0      	push	{r4, r5, r7, lr}
 801ed3a:	b08a      	sub	sp, #40	; 0x28
 801ed3c:	af00      	add	r7, sp, #0
 801ed3e:	6078      	str	r0, [r7, #4]
 801ed40:	6039      	str	r1, [r7, #0]
    message_ += "\tEXPECTED calls that WERE NOT fulfilled:\n";
 801ed42:	687b      	ldr	r3, [r7, #4]
 801ed44:	332c      	adds	r3, #44	; 0x2c
 801ed46:	492b      	ldr	r1, [pc, #172]	; (801edf4 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xbc>)
 801ed48:	4618      	mov	r0, r3
 801ed4a:	f7f0 fcf5 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.unfulfilledCallsToString("\t\t");
 801ed4e:	687b      	ldr	r3, [r7, #4]
 801ed50:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801ed54:	683b      	ldr	r3, [r7, #0]
 801ed56:	681b      	ldr	r3, [r3, #0]
 801ed58:	337c      	adds	r3, #124	; 0x7c
 801ed5a:	681c      	ldr	r4, [r3, #0]
 801ed5c:	f107 0310 	add.w	r3, r7, #16
 801ed60:	4925      	ldr	r1, [pc, #148]	; (801edf8 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801ed62:	4618      	mov	r0, r3
 801ed64:	f7f0 f8a1 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801ed68:	f107 0308 	add.w	r3, r7, #8
 801ed6c:	f107 0210 	add.w	r2, r7, #16
 801ed70:	6839      	ldr	r1, [r7, #0]
 801ed72:	4618      	mov	r0, r3
 801ed74:	47a0      	blx	r4
 801ed76:	f107 0308 	add.w	r3, r7, #8
 801ed7a:	4619      	mov	r1, r3
 801ed7c:	4628      	mov	r0, r5
 801ed7e:	f7f0 fcc9 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801ed82:	f107 0308 	add.w	r3, r7, #8
 801ed86:	4618      	mov	r0, r3
 801ed88:	f7f0 fc47 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801ed8c:	f107 0310 	add.w	r3, r7, #16
 801ed90:	4618      	mov	r0, r3
 801ed92:	f7f0 fc42 	bl	800f61a <_ZN12SimpleStringD1Ev>
    message_ += "\n\tEXPECTED calls that WERE fulfilled:\n";
 801ed96:	687b      	ldr	r3, [r7, #4]
 801ed98:	332c      	adds	r3, #44	; 0x2c
 801ed9a:	4918      	ldr	r1, [pc, #96]	; (801edfc <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc4>)
 801ed9c:	4618      	mov	r0, r3
 801ed9e:	f7f0 fccb 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.fulfilledCallsToString("\t\t");
 801eda2:	687b      	ldr	r3, [r7, #4]
 801eda4:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801eda8:	683b      	ldr	r3, [r7, #0]
 801edaa:	681b      	ldr	r3, [r3, #0]
 801edac:	3380      	adds	r3, #128	; 0x80
 801edae:	681c      	ldr	r4, [r3, #0]
 801edb0:	f107 0320 	add.w	r3, r7, #32
 801edb4:	4910      	ldr	r1, [pc, #64]	; (801edf8 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801edb6:	4618      	mov	r0, r3
 801edb8:	f7f0 f877 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801edbc:	f107 0318 	add.w	r3, r7, #24
 801edc0:	f107 0220 	add.w	r2, r7, #32
 801edc4:	6839      	ldr	r1, [r7, #0]
 801edc6:	4618      	mov	r0, r3
 801edc8:	47a0      	blx	r4
 801edca:	f107 0318 	add.w	r3, r7, #24
 801edce:	4619      	mov	r1, r3
 801edd0:	4628      	mov	r0, r5
 801edd2:	f7f0 fc9f 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801edd6:	f107 0318 	add.w	r3, r7, #24
 801edda:	4618      	mov	r0, r3
 801eddc:	f7f0 fc1d 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801ede0:	f107 0320 	add.w	r3, r7, #32
 801ede4:	4618      	mov	r0, r3
 801ede6:	f7f0 fc18 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 801edea:	bf00      	nop
 801edec:	3728      	adds	r7, #40	; 0x28
 801edee:	46bd      	mov	sp, r7
 801edf0:	bdb0      	pop	{r4, r5, r7, pc}
 801edf2:	bf00      	nop
 801edf4:	08028dc0 	.word	0x08028dc0
 801edf8:	08028dec 	.word	0x08028dec
 801edfc:	08028df0 	.word	0x08028df0

0801ee00 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistoryRelatedTo(const SimpleString& name, const MockExpectedCallsList& expectations)
{
 801ee00:	b590      	push	{r4, r7, lr}
 801ee02:	b08f      	sub	sp, #60	; 0x3c
 801ee04:	af00      	add	r7, sp, #0
 801ee06:	60f8      	str	r0, [r7, #12]
 801ee08:	60b9      	str	r1, [r7, #8]
 801ee0a:	607a      	str	r2, [r7, #4]
    MockExpectedCallsList expectationsForFunction;
 801ee0c:	f107 0310 	add.w	r3, r7, #16
 801ee10:	4618      	mov	r0, r3
 801ee12:	f7ff f877 	bl	801df04 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(name, expectations);
 801ee16:	f107 0310 	add.w	r3, r7, #16
 801ee1a:	687a      	ldr	r2, [r7, #4]
 801ee1c:	68b9      	ldr	r1, [r7, #8]
 801ee1e:	4618      	mov	r0, r3
 801ee20:	f7ff fa16 	bl	801e250 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ += "\tEXPECTED calls that WERE NOT fulfilled related to function: ";
 801ee24:	68fb      	ldr	r3, [r7, #12]
 801ee26:	332c      	adds	r3, #44	; 0x2c
 801ee28:	4937      	ldr	r1, [pc, #220]	; (801ef08 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x108>)
 801ee2a:	4618      	mov	r0, r3
 801ee2c:	f7f0 fc84 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801ee30:	68fb      	ldr	r3, [r7, #12]
 801ee32:	332c      	adds	r3, #44	; 0x2c
 801ee34:	68b9      	ldr	r1, [r7, #8]
 801ee36:	4618      	mov	r0, r3
 801ee38:	f7f0 fc6c 	bl	800f714 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801ee3c:	68fb      	ldr	r3, [r7, #12]
 801ee3e:	332c      	adds	r3, #44	; 0x2c
 801ee40:	4932      	ldr	r1, [pc, #200]	; (801ef0c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801ee42:	4618      	mov	r0, r3
 801ee44:	f7f0 fc78 	bl	800f738 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.unfulfilledCallsToString("\t\t");
 801ee48:	68fb      	ldr	r3, [r7, #12]
 801ee4a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ee4e:	f107 0320 	add.w	r3, r7, #32
 801ee52:	492f      	ldr	r1, [pc, #188]	; (801ef10 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801ee54:	4618      	mov	r0, r3
 801ee56:	f7f0 f828 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801ee5a:	f107 0318 	add.w	r3, r7, #24
 801ee5e:	f107 0220 	add.w	r2, r7, #32
 801ee62:	f107 0110 	add.w	r1, r7, #16
 801ee66:	4618      	mov	r0, r3
 801ee68:	f7ff fd4a 	bl	801e900 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>
 801ee6c:	f107 0318 	add.w	r3, r7, #24
 801ee70:	4619      	mov	r1, r3
 801ee72:	4620      	mov	r0, r4
 801ee74:	f7f0 fc4e 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801ee78:	f107 0318 	add.w	r3, r7, #24
 801ee7c:	4618      	mov	r0, r3
 801ee7e:	f7f0 fbcc 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801ee82:	f107 0320 	add.w	r3, r7, #32
 801ee86:	4618      	mov	r0, r3
 801ee88:	f7f0 fbc7 	bl	800f61a <_ZN12SimpleStringD1Ev>

    message_ += "\n\tEXPECTED calls that WERE fulfilled related to function: ";
 801ee8c:	68fb      	ldr	r3, [r7, #12]
 801ee8e:	332c      	adds	r3, #44	; 0x2c
 801ee90:	4920      	ldr	r1, [pc, #128]	; (801ef14 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x114>)
 801ee92:	4618      	mov	r0, r3
 801ee94:	f7f0 fc50 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801ee98:	68fb      	ldr	r3, [r7, #12]
 801ee9a:	332c      	adds	r3, #44	; 0x2c
 801ee9c:	68b9      	ldr	r1, [r7, #8]
 801ee9e:	4618      	mov	r0, r3
 801eea0:	f7f0 fc38 	bl	800f714 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801eea4:	68fb      	ldr	r3, [r7, #12]
 801eea6:	332c      	adds	r3, #44	; 0x2c
 801eea8:	4918      	ldr	r1, [pc, #96]	; (801ef0c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801eeaa:	4618      	mov	r0, r3
 801eeac:	f7f0 fc44 	bl	800f738 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.fulfilledCallsToString("\t\t");
 801eeb0:	68fb      	ldr	r3, [r7, #12]
 801eeb2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801eeb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801eeba:	4915      	ldr	r1, [pc, #84]	; (801ef10 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801eebc:	4618      	mov	r0, r3
 801eebe:	f7ef fff4 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801eec2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801eec6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801eeca:	f107 0110 	add.w	r1, r7, #16
 801eece:	4618      	mov	r0, r3
 801eed0:	f7ff fd74 	bl	801e9bc <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>
 801eed4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801eed8:	4619      	mov	r1, r3
 801eeda:	4620      	mov	r0, r4
 801eedc:	f7f0 fc1a 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801eee0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801eee4:	4618      	mov	r0, r3
 801eee6:	f7f0 fb98 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801eeea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801eeee:	4618      	mov	r0, r3
 801eef0:	f7f0 fb93 	bl	800f61a <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801eef4:	f107 0310 	add.w	r3, r7, #16
 801eef8:	4618      	mov	r0, r3
 801eefa:	f7ff f817 	bl	801df2c <_ZN21MockExpectedCallsListD1Ev>
}
 801eefe:	bf00      	nop
 801ef00:	373c      	adds	r7, #60	; 0x3c
 801ef02:	46bd      	mov	sp, r7
 801ef04:	bd90      	pop	{r4, r7, pc}
 801ef06:	bf00      	nop
 801ef08:	08028e18 	.word	0x08028e18
 801ef0c:	08028e58 	.word	0x08028e58
 801ef10:	08028dec 	.word	0x08028dec
 801ef14:	08028e5c 	.word	0x08028e5c

0801ef18 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockExpectedCallsDidntHappenFailure::MockExpectedCallsDidntHappenFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801ef18:	b590      	push	{r4, r7, lr}
 801ef1a:	b087      	sub	sp, #28
 801ef1c:	af00      	add	r7, sp, #0
 801ef1e:	60f8      	str	r0, [r7, #12]
 801ef20:	60b9      	str	r1, [r7, #8]
 801ef22:	607a      	str	r2, [r7, #4]
 801ef24:	68fb      	ldr	r3, [r7, #12]
 801ef26:	68b9      	ldr	r1, [r7, #8]
 801ef28:	4618      	mov	r0, r3
 801ef2a:	f7ff fee1 	bl	801ecf0 <_ZN11MockFailureC1EP10UtestShell>
 801ef2e:	4a10      	ldr	r2, [pc, #64]	; (801ef70 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x58>)
 801ef30:	68fb      	ldr	r3, [r7, #12]
 801ef32:	601a      	str	r2, [r3, #0]
{
    message_ = "Mock Failure: Expected call WAS NOT fulfilled.\n";
 801ef34:	68fb      	ldr	r3, [r7, #12]
 801ef36:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ef3a:	f107 0310 	add.w	r3, r7, #16
 801ef3e:	490d      	ldr	r1, [pc, #52]	; (801ef74 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x5c>)
 801ef40:	4618      	mov	r0, r3
 801ef42:	f7ef ffb2 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801ef46:	f107 0310 	add.w	r3, r7, #16
 801ef4a:	4619      	mov	r1, r3
 801ef4c:	4620      	mov	r0, r4
 801ef4e:	f7f0 f818 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 801ef52:	f107 0310 	add.w	r3, r7, #16
 801ef56:	4618      	mov	r0, r3
 801ef58:	f7f0 fb5f 	bl	800f61a <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistory(expectations);
 801ef5c:	68fb      	ldr	r3, [r7, #12]
 801ef5e:	6879      	ldr	r1, [r7, #4]
 801ef60:	4618      	mov	r0, r3
 801ef62:	f7ff fee9 	bl	801ed38 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801ef66:	68fb      	ldr	r3, [r7, #12]
 801ef68:	4618      	mov	r0, r3
 801ef6a:	371c      	adds	r7, #28
 801ef6c:	46bd      	mov	sp, r7
 801ef6e:	bd90      	pop	{r4, r7, pc}
 801ef70:	0802b24c 	.word	0x0802b24c
 801ef74:	08028e98 	.word	0x08028e98

0801ef78 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockUnexpectedCallHappenedFailure::MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations) : MockFailure(test)
 801ef78:	b590      	push	{r4, r7, lr}
 801ef7a:	b08d      	sub	sp, #52	; 0x34
 801ef7c:	af00      	add	r7, sp, #0
 801ef7e:	60f8      	str	r0, [r7, #12]
 801ef80:	60b9      	str	r1, [r7, #8]
 801ef82:	607a      	str	r2, [r7, #4]
 801ef84:	603b      	str	r3, [r7, #0]
 801ef86:	68fb      	ldr	r3, [r7, #12]
 801ef88:	68b9      	ldr	r1, [r7, #8]
 801ef8a:	4618      	mov	r0, r3
 801ef8c:	f7ff feb0 	bl	801ecf0 <_ZN11MockFailureC1EP10UtestShell>
 801ef90:	4a2f      	ldr	r2, [pc, #188]	; (801f050 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xd8>)
 801ef92:	68fb      	ldr	r3, [r7, #12]
 801ef94:	601a      	str	r2, [r3, #0]
{
    unsigned int amountOfActualCalls = expectations.amountOfActualCallsFulfilledFor(name);
 801ef96:	683b      	ldr	r3, [r7, #0]
 801ef98:	681b      	ldr	r3, [r3, #0]
 801ef9a:	3310      	adds	r3, #16
 801ef9c:	681b      	ldr	r3, [r3, #0]
 801ef9e:	6879      	ldr	r1, [r7, #4]
 801efa0:	6838      	ldr	r0, [r7, #0]
 801efa2:	4798      	blx	r3
 801efa4:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (amountOfActualCalls > 0) {
 801efa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801efa8:	2b00      	cmp	r3, #0
 801efaa:	d027      	beq.n	801effc <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x84>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801efac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801efae:	1c5a      	adds	r2, r3, #1
 801efb0:	f107 0314 	add.w	r3, r7, #20
 801efb4:	4611      	mov	r1, r2
 801efb6:	4618      	mov	r0, r3
 801efb8:	f7f1 fa00 	bl	80103bc <_Z23StringFromOrdinalNumberj>
        message_ = StringFromFormat("Mock Failure: Unexpected additional (%s) call to function: ", ordinalNumber.asCharString());
 801efbc:	68fb      	ldr	r3, [r7, #12]
 801efbe:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801efc2:	f107 0314 	add.w	r3, r7, #20
 801efc6:	4618      	mov	r0, r3
 801efc8:	f7f0 fafa 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 801efcc:	4602      	mov	r2, r0
 801efce:	f107 031c 	add.w	r3, r7, #28
 801efd2:	4920      	ldr	r1, [pc, #128]	; (801f054 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801efd4:	4618      	mov	r0, r3
 801efd6:	f7f1 f827 	bl	8010028 <_Z16StringFromFormatPKcz>
 801efda:	f107 031c 	add.w	r3, r7, #28
 801efde:	4619      	mov	r1, r3
 801efe0:	4620      	mov	r0, r4
 801efe2:	f7ef ffce 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 801efe6:	f107 031c 	add.w	r3, r7, #28
 801efea:	4618      	mov	r0, r3
 801efec:	f7f0 fb15 	bl	800f61a <_ZN12SimpleStringD1Ev>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801eff0:	f107 0314 	add.w	r3, r7, #20
 801eff4:	4618      	mov	r0, r3
 801eff6:	f7f0 fb10 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801effa:	e013      	b.n	801f024 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xac>
    } else {
        message_ = "Mock Failure: Unexpected call to function: ";
 801effc:	68fb      	ldr	r3, [r7, #12]
 801effe:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f006:	4914      	ldr	r1, [pc, #80]	; (801f058 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801f008:	4618      	mov	r0, r3
 801f00a:	f7ef ff4e 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801f00e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f012:	4619      	mov	r1, r3
 801f014:	4620      	mov	r0, r4
 801f016:	f7ef ffb4 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 801f01a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801f01e:	4618      	mov	r0, r3
 801f020:	f7f0 fafb 	bl	800f61a <_ZN12SimpleStringD1Ev>
    }
    message_ += name;
 801f024:	68fb      	ldr	r3, [r7, #12]
 801f026:	332c      	adds	r3, #44	; 0x2c
 801f028:	6879      	ldr	r1, [r7, #4]
 801f02a:	4618      	mov	r0, r3
 801f02c:	f7f0 fb72 	bl	800f714 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801f030:	68fb      	ldr	r3, [r7, #12]
 801f032:	332c      	adds	r3, #44	; 0x2c
 801f034:	4909      	ldr	r1, [pc, #36]	; (801f05c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801f036:	4618      	mov	r0, r3
 801f038:	f7f0 fb7e 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectations);
 801f03c:	68fb      	ldr	r3, [r7, #12]
 801f03e:	6839      	ldr	r1, [r7, #0]
 801f040:	4618      	mov	r0, r3
 801f042:	f7ff fe79 	bl	801ed38 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801f046:	68fb      	ldr	r3, [r7, #12]
 801f048:	4618      	mov	r0, r3
 801f04a:	3734      	adds	r7, #52	; 0x34
 801f04c:	46bd      	mov	sp, r7
 801f04e:	bd90      	pop	{r4, r7, pc}
 801f050:	0802bbec 	.word	0x0802bbec
 801f054:	08028ec8 	.word	0x08028ec8
 801f058:	08028f04 	.word	0x08028f04
 801f05c:	08028e58 	.word	0x08028e58

0801f060 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockCallOrderFailure::MockCallOrderFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801f060:	b590      	push	{r4, r7, lr}
 801f062:	b089      	sub	sp, #36	; 0x24
 801f064:	af00      	add	r7, sp, #0
 801f066:	60f8      	str	r0, [r7, #12]
 801f068:	60b9      	str	r1, [r7, #8]
 801f06a:	607a      	str	r2, [r7, #4]
 801f06c:	68fb      	ldr	r3, [r7, #12]
 801f06e:	68b9      	ldr	r1, [r7, #8]
 801f070:	4618      	mov	r0, r3
 801f072:	f7ff fe3d 	bl	801ecf0 <_ZN11MockFailureC1EP10UtestShell>
 801f076:	4a1f      	ldr	r2, [pc, #124]	; (801f0f4 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x94>)
 801f078:	68fb      	ldr	r3, [r7, #12]
 801f07a:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForOutOfOrder;
 801f07c:	f107 0310 	add.w	r3, r7, #16
 801f080:	4618      	mov	r0, r3
 801f082:	f7fe ff3f 	bl	801df04 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForOutOfOrder.addExpectations(expectations);
 801f086:	f107 0310 	add.w	r3, r7, #16
 801f08a:	6879      	ldr	r1, [r7, #4]
 801f08c:	4618      	mov	r0, r3
 801f08e:	f7ff f909 	bl	801e2a4 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    expectationsForOutOfOrder.onlyKeepOutOfOrderExpectations();
 801f092:	f107 0310 	add.w	r3, r7, #16
 801f096:	4618      	mov	r0, r3
 801f098:	f7ff f94c 	bl	801e334 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>

    message_ = "Mock Failure: Out of order calls";
 801f09c:	68fb      	ldr	r3, [r7, #12]
 801f09e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f0a2:	f107 0318 	add.w	r3, r7, #24
 801f0a6:	4914      	ldr	r1, [pc, #80]	; (801f0f8 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x98>)
 801f0a8:	4618      	mov	r0, r3
 801f0aa:	f7ef fefe 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801f0ae:	f107 0318 	add.w	r3, r7, #24
 801f0b2:	4619      	mov	r1, r3
 801f0b4:	4620      	mov	r0, r4
 801f0b6:	f7ef ff64 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 801f0ba:	f107 0318 	add.w	r3, r7, #24
 801f0be:	4618      	mov	r0, r3
 801f0c0:	f7f0 faab 	bl	800f61a <_ZN12SimpleStringD1Ev>
    message_ += "\n";
 801f0c4:	68fb      	ldr	r3, [r7, #12]
 801f0c6:	332c      	adds	r3, #44	; 0x2c
 801f0c8:	490c      	ldr	r1, [pc, #48]	; (801f0fc <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x9c>)
 801f0ca:	4618      	mov	r0, r3
 801f0cc:	f7f0 fb34 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectationsForOutOfOrder);
 801f0d0:	68fb      	ldr	r3, [r7, #12]
 801f0d2:	f107 0210 	add.w	r2, r7, #16
 801f0d6:	4611      	mov	r1, r2
 801f0d8:	4618      	mov	r0, r3
 801f0da:	f7ff fe2d 	bl	801ed38 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
    MockExpectedCallsList expectationsForOutOfOrder;
 801f0de:	f107 0310 	add.w	r3, r7, #16
 801f0e2:	4618      	mov	r0, r3
 801f0e4:	f7fe ff22 	bl	801df2c <_ZN21MockExpectedCallsListD1Ev>
}
 801f0e8:	68fb      	ldr	r3, [r7, #12]
 801f0ea:	4618      	mov	r0, r3
 801f0ec:	3724      	adds	r7, #36	; 0x24
 801f0ee:	46bd      	mov	sp, r7
 801f0f0:	bd90      	pop	{r4, r7, pc}
 801f0f2:	bf00      	nop
 801f0f4:	0802b220 	.word	0x0802b220
 801f0f8:	08028f30 	.word	0x08028f30
 801f0fc:	08028e58 	.word	0x08028e58

0801f100 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedInputParameterFailure::MockUnexpectedInputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801f100:	b590      	push	{r4, r7, lr}
 801f102:	b099      	sub	sp, #100	; 0x64
 801f104:	af00      	add	r7, sp, #0
 801f106:	60f8      	str	r0, [r7, #12]
 801f108:	60b9      	str	r1, [r7, #8]
 801f10a:	607a      	str	r2, [r7, #4]
 801f10c:	603b      	str	r3, [r7, #0]
 801f10e:	68fb      	ldr	r3, [r7, #12]
 801f110:	68b9      	ldr	r1, [r7, #8]
 801f112:	4618      	mov	r0, r3
 801f114:	f7ff fdec 	bl	801ecf0 <_ZN11MockFailureC1EP10UtestShell>
 801f118:	4a9e      	ldr	r2, [pc, #632]	; (801f394 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x294>)
 801f11a:	68fb      	ldr	r3, [r7, #12]
 801f11c:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801f11e:	f107 0310 	add.w	r3, r7, #16
 801f122:	4618      	mov	r0, r3
 801f124:	f7fe feee 	bl	801df04 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801f128:	f107 0310 	add.w	r3, r7, #16
 801f12c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801f12e:	6879      	ldr	r1, [r7, #4]
 801f130:	4618      	mov	r0, r3
 801f132:	f7ff f88d 	bl	801e250 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithInputParameterName(parameter.getName());
 801f136:	683b      	ldr	r3, [r7, #0]
 801f138:	681b      	ldr	r3, [r3, #0]
 801f13a:	335c      	adds	r3, #92	; 0x5c
 801f13c:	681b      	ldr	r3, [r3, #0]
 801f13e:	f107 0218 	add.w	r2, r7, #24
 801f142:	6839      	ldr	r1, [r7, #0]
 801f144:	4610      	mov	r0, r2
 801f146:	4798      	blx	r3
 801f148:	f107 0218 	add.w	r2, r7, #24
 801f14c:	f107 0310 	add.w	r3, r7, #16
 801f150:	4611      	mov	r1, r2
 801f152:	4618      	mov	r0, r3
 801f154:	f7ff f948 	bl	801e3e8 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>
 801f158:	f107 0318 	add.w	r3, r7, #24
 801f15c:	4618      	mov	r0, r3
 801f15e:	f7f0 fa5c 	bl	800f61a <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801f162:	f107 0310 	add.w	r3, r7, #16
 801f166:	4618      	mov	r0, r3
 801f168:	f7fe ff4d 	bl	801e006 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801f16c:	4603      	mov	r3, r0
 801f16e:	2b00      	cmp	r3, #0
 801f170:	d037      	beq.n	801f1e2 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected parameter name to function \"";
 801f172:	68fb      	ldr	r3, [r7, #12]
 801f174:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f178:	f107 0320 	add.w	r3, r7, #32
 801f17c:	4986      	ldr	r1, [pc, #536]	; (801f398 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x298>)
 801f17e:	4618      	mov	r0, r3
 801f180:	f7ef fe93 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801f184:	f107 0320 	add.w	r3, r7, #32
 801f188:	4619      	mov	r1, r3
 801f18a:	4620      	mov	r0, r4
 801f18c:	f7ef fef9 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 801f190:	f107 0320 	add.w	r3, r7, #32
 801f194:	4618      	mov	r0, r3
 801f196:	f7f0 fa40 	bl	800f61a <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801f19a:	68fb      	ldr	r3, [r7, #12]
 801f19c:	332c      	adds	r3, #44	; 0x2c
 801f19e:	6879      	ldr	r1, [r7, #4]
 801f1a0:	4618      	mov	r0, r3
 801f1a2:	f7f0 fab7 	bl	800f714 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801f1a6:	68fb      	ldr	r3, [r7, #12]
 801f1a8:	332c      	adds	r3, #44	; 0x2c
 801f1aa:	497c      	ldr	r1, [pc, #496]	; (801f39c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x29c>)
 801f1ac:	4618      	mov	r0, r3
 801f1ae:	f7f0 fac3 	bl	800f738 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801f1b2:	68fb      	ldr	r3, [r7, #12]
 801f1b4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f1b8:	683b      	ldr	r3, [r7, #0]
 801f1ba:	681b      	ldr	r3, [r3, #0]
 801f1bc:	335c      	adds	r3, #92	; 0x5c
 801f1be:	681b      	ldr	r3, [r3, #0]
 801f1c0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801f1c4:	6839      	ldr	r1, [r7, #0]
 801f1c6:	4610      	mov	r0, r2
 801f1c8:	4798      	blx	r3
 801f1ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f1ce:	4619      	mov	r1, r3
 801f1d0:	4620      	mov	r0, r4
 801f1d2:	f7f0 fa9f 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801f1d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f1da:	4618      	mov	r0, r3
 801f1dc:	f7f0 fa1d 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801f1e0:	e056      	b.n	801f290 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x190>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter value to parameter \"";
 801f1e2:	68fb      	ldr	r3, [r7, #12]
 801f1e4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f1e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f1ec:	496c      	ldr	r1, [pc, #432]	; (801f3a0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a0>)
 801f1ee:	4618      	mov	r0, r3
 801f1f0:	f7ef fe5b 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801f1f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f1f8:	4619      	mov	r1, r3
 801f1fa:	4620      	mov	r0, r4
 801f1fc:	f7ef fec1 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 801f200:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f204:	4618      	mov	r0, r3
 801f206:	f7f0 fa08 	bl	800f61a <_ZN12SimpleStringD1Ev>
        message_ += parameter.getName();
 801f20a:	68fb      	ldr	r3, [r7, #12]
 801f20c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f210:	683b      	ldr	r3, [r7, #0]
 801f212:	681b      	ldr	r3, [r3, #0]
 801f214:	335c      	adds	r3, #92	; 0x5c
 801f216:	681b      	ldr	r3, [r3, #0]
 801f218:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801f21c:	6839      	ldr	r1, [r7, #0]
 801f21e:	4610      	mov	r0, r2
 801f220:	4798      	blx	r3
 801f222:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801f226:	4619      	mov	r1, r3
 801f228:	4620      	mov	r0, r4
 801f22a:	f7f0 fa73 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801f22e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801f232:	4618      	mov	r0, r3
 801f234:	f7f0 f9f1 	bl	800f61a <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801f238:	68fb      	ldr	r3, [r7, #12]
 801f23a:	332c      	adds	r3, #44	; 0x2c
 801f23c:	4959      	ldr	r1, [pc, #356]	; (801f3a4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a4>)
 801f23e:	4618      	mov	r0, r3
 801f240:	f7f0 fa7a 	bl	800f738 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801f244:	68fb      	ldr	r3, [r7, #12]
 801f246:	332c      	adds	r3, #44	; 0x2c
 801f248:	6879      	ldr	r1, [r7, #4]
 801f24a:	4618      	mov	r0, r3
 801f24c:	f7f0 fa62 	bl	800f714 <_ZN12SimpleStringpLERKS_>
        message_ += "\": <";
 801f250:	68fb      	ldr	r3, [r7, #12]
 801f252:	332c      	adds	r3, #44	; 0x2c
 801f254:	4954      	ldr	r1, [pc, #336]	; (801f3a8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a8>)
 801f256:	4618      	mov	r0, r3
 801f258:	f7f0 fa6e 	bl	800f738 <_ZN12SimpleStringpLEPKc>
        message_ += StringFrom(parameter);
 801f25c:	68fb      	ldr	r3, [r7, #12]
 801f25e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f262:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801f266:	6839      	ldr	r1, [r7, #0]
 801f268:	4618      	mov	r0, r3
 801f26a:	f7fd faa3 	bl	801c7b4 <_Z10StringFromRK14MockNamedValue>
 801f26e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801f272:	4619      	mov	r1, r3
 801f274:	4620      	mov	r0, r4
 801f276:	f7f0 fa4d 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801f27a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801f27e:	4618      	mov	r0, r3
 801f280:	f7f0 f9cb 	bl	800f61a <_ZN12SimpleStringD1Ev>
        message_ += ">";
 801f284:	68fb      	ldr	r3, [r7, #12]
 801f286:	332c      	adds	r3, #44	; 0x2c
 801f288:	4948      	ldr	r1, [pc, #288]	; (801f3ac <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801f28a:	4618      	mov	r0, r3
 801f28c:	f7f0 fa54 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801f290:	68fb      	ldr	r3, [r7, #12]
 801f292:	332c      	adds	r3, #44	; 0x2c
 801f294:	4946      	ldr	r1, [pc, #280]	; (801f3b0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801f296:	4618      	mov	r0, r3
 801f298:	f7f0 fa4e 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801f29c:	68fb      	ldr	r3, [r7, #12]
 801f29e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801f2a0:	6879      	ldr	r1, [r7, #4]
 801f2a2:	4618      	mov	r0, r3
 801f2a4:	f7ff fdac 	bl	801ee00 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected parameter passed to function: ";
 801f2a8:	68fb      	ldr	r3, [r7, #12]
 801f2aa:	332c      	adds	r3, #44	; 0x2c
 801f2ac:	4941      	ldr	r1, [pc, #260]	; (801f3b4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b4>)
 801f2ae:	4618      	mov	r0, r3
 801f2b0:	f7f0 fa42 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801f2b4:	68fb      	ldr	r3, [r7, #12]
 801f2b6:	332c      	adds	r3, #44	; 0x2c
 801f2b8:	6879      	ldr	r1, [r7, #4]
 801f2ba:	4618      	mov	r0, r3
 801f2bc:	f7f0 fa2a 	bl	800f714 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801f2c0:	68fb      	ldr	r3, [r7, #12]
 801f2c2:	332c      	adds	r3, #44	; 0x2c
 801f2c4:	493a      	ldr	r1, [pc, #232]	; (801f3b0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801f2c6:	4618      	mov	r0, r3
 801f2c8:	f7f0 fa36 	bl	800f738 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801f2cc:	68fb      	ldr	r3, [r7, #12]
 801f2ce:	332c      	adds	r3, #44	; 0x2c
 801f2d0:	4939      	ldr	r1, [pc, #228]	; (801f3b8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b8>)
 801f2d2:	4618      	mov	r0, r3
 801f2d4:	f7f0 fa30 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801f2d8:	68fb      	ldr	r3, [r7, #12]
 801f2da:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f2de:	683b      	ldr	r3, [r7, #0]
 801f2e0:	681b      	ldr	r3, [r3, #0]
 801f2e2:	3360      	adds	r3, #96	; 0x60
 801f2e4:	681b      	ldr	r3, [r3, #0]
 801f2e6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801f2ea:	6839      	ldr	r1, [r7, #0]
 801f2ec:	4610      	mov	r0, r2
 801f2ee:	4798      	blx	r3
 801f2f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801f2f4:	4619      	mov	r1, r3
 801f2f6:	4620      	mov	r0, r4
 801f2f8:	f7f0 fa0c 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801f2fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801f300:	4618      	mov	r0, r3
 801f302:	f7f0 f98a 	bl	800f61a <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801f306:	68fb      	ldr	r3, [r7, #12]
 801f308:	332c      	adds	r3, #44	; 0x2c
 801f30a:	492c      	ldr	r1, [pc, #176]	; (801f3bc <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2bc>)
 801f30c:	4618      	mov	r0, r3
 801f30e:	f7f0 fa13 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801f312:	68fb      	ldr	r3, [r7, #12]
 801f314:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f318:	683b      	ldr	r3, [r7, #0]
 801f31a:	681b      	ldr	r3, [r3, #0]
 801f31c:	335c      	adds	r3, #92	; 0x5c
 801f31e:	681b      	ldr	r3, [r3, #0]
 801f320:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801f324:	6839      	ldr	r1, [r7, #0]
 801f326:	4610      	mov	r0, r2
 801f328:	4798      	blx	r3
 801f32a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801f32e:	4619      	mov	r1, r3
 801f330:	4620      	mov	r0, r4
 801f332:	f7f0 f9ef 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801f336:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801f33a:	4618      	mov	r0, r3
 801f33c:	f7f0 f96d 	bl	800f61a <_ZN12SimpleStringD1Ev>
    message_ += ": <";
 801f340:	68fb      	ldr	r3, [r7, #12]
 801f342:	332c      	adds	r3, #44	; 0x2c
 801f344:	491e      	ldr	r1, [pc, #120]	; (801f3c0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2c0>)
 801f346:	4618      	mov	r0, r3
 801f348:	f7f0 f9f6 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(parameter);
 801f34c:	68fb      	ldr	r3, [r7, #12]
 801f34e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f352:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801f356:	6839      	ldr	r1, [r7, #0]
 801f358:	4618      	mov	r0, r3
 801f35a:	f7fd fa2b 	bl	801c7b4 <_Z10StringFromRK14MockNamedValue>
 801f35e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801f362:	4619      	mov	r1, r3
 801f364:	4620      	mov	r0, r4
 801f366:	f7f0 f9d5 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801f36a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801f36e:	4618      	mov	r0, r3
 801f370:	f7f0 f953 	bl	800f61a <_ZN12SimpleStringD1Ev>
    message_ += ">";
 801f374:	68fb      	ldr	r3, [r7, #12]
 801f376:	332c      	adds	r3, #44	; 0x2c
 801f378:	490c      	ldr	r1, [pc, #48]	; (801f3ac <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801f37a:	4618      	mov	r0, r3
 801f37c:	f7f0 f9dc 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801f380:	f107 0310 	add.w	r3, r7, #16
 801f384:	4618      	mov	r0, r3
 801f386:	f7fe fdd1 	bl	801df2c <_ZN21MockExpectedCallsListD1Ev>
}
 801f38a:	68fb      	ldr	r3, [r7, #12]
 801f38c:	4618      	mov	r0, r3
 801f38e:	3764      	adds	r7, #100	; 0x64
 801f390:	46bd      	mov	sp, r7
 801f392:	bd90      	pop	{r4, r7, pc}
 801f394:	0802bbc0 	.word	0x0802bbc0
 801f398:	08028f54 	.word	0x08028f54
 801f39c:	08028f8c 	.word	0x08028f8c
 801f3a0:	08028f90 	.word	0x08028f90
 801f3a4:	08028fc8 	.word	0x08028fc8
 801f3a8:	08028fd8 	.word	0x08028fd8
 801f3ac:	08028fe0 	.word	0x08028fe0
 801f3b0:	08028e58 	.word	0x08028e58
 801f3b4:	08028fe4 	.word	0x08028fe4
 801f3b8:	08028dec 	.word	0x08028dec
 801f3bc:	08029018 	.word	0x08029018
 801f3c0:	0802901c 	.word	0x0802901c

0801f3c4 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedOutputParameterFailure::MockUnexpectedOutputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801f3c4:	b590      	push	{r4, r7, lr}
 801f3c6:	b097      	sub	sp, #92	; 0x5c
 801f3c8:	af00      	add	r7, sp, #0
 801f3ca:	60f8      	str	r0, [r7, #12]
 801f3cc:	60b9      	str	r1, [r7, #8]
 801f3ce:	607a      	str	r2, [r7, #4]
 801f3d0:	603b      	str	r3, [r7, #0]
 801f3d2:	68fb      	ldr	r3, [r7, #12]
 801f3d4:	68b9      	ldr	r1, [r7, #8]
 801f3d6:	4618      	mov	r0, r3
 801f3d8:	f7ff fc8a 	bl	801ecf0 <_ZN11MockFailureC1EP10UtestShell>
 801f3dc:	4a90      	ldr	r2, [pc, #576]	; (801f620 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x25c>)
 801f3de:	68fb      	ldr	r3, [r7, #12]
 801f3e0:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801f3e2:	f107 0310 	add.w	r3, r7, #16
 801f3e6:	4618      	mov	r0, r3
 801f3e8:	f7fe fd8c 	bl	801df04 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801f3ec:	f107 0310 	add.w	r3, r7, #16
 801f3f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801f3f2:	6879      	ldr	r1, [r7, #4]
 801f3f4:	4618      	mov	r0, r3
 801f3f6:	f7fe ff2b 	bl	801e250 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithOutputParameterName(parameter.getName());
 801f3fa:	683b      	ldr	r3, [r7, #0]
 801f3fc:	681b      	ldr	r3, [r3, #0]
 801f3fe:	335c      	adds	r3, #92	; 0x5c
 801f400:	681b      	ldr	r3, [r3, #0]
 801f402:	f107 0218 	add.w	r2, r7, #24
 801f406:	6839      	ldr	r1, [r7, #0]
 801f408:	4610      	mov	r0, r2
 801f40a:	4798      	blx	r3
 801f40c:	f107 0218 	add.w	r2, r7, #24
 801f410:	f107 0310 	add.w	r3, r7, #16
 801f414:	4611      	mov	r1, r2
 801f416:	4618      	mov	r0, r3
 801f418:	f7ff f812 	bl	801e440 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>
 801f41c:	f107 0318 	add.w	r3, r7, #24
 801f420:	4618      	mov	r0, r3
 801f422:	f7f0 f8fa 	bl	800f61a <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801f426:	f107 0310 	add.w	r3, r7, #16
 801f42a:	4618      	mov	r0, r3
 801f42c:	f7fe fdeb 	bl	801e006 <_ZNK21MockExpectedCallsList7isEmptyEv>
 801f430:	4603      	mov	r3, r0
 801f432:	2b00      	cmp	r3, #0
 801f434:	d037      	beq.n	801f4a6 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected output parameter name to function \"";
 801f436:	68fb      	ldr	r3, [r7, #12]
 801f438:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f43c:	f107 0320 	add.w	r3, r7, #32
 801f440:	4978      	ldr	r1, [pc, #480]	; (801f624 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x260>)
 801f442:	4618      	mov	r0, r3
 801f444:	f7ef fd31 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801f448:	f107 0320 	add.w	r3, r7, #32
 801f44c:	4619      	mov	r1, r3
 801f44e:	4620      	mov	r0, r4
 801f450:	f7ef fd97 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 801f454:	f107 0320 	add.w	r3, r7, #32
 801f458:	4618      	mov	r0, r3
 801f45a:	f7f0 f8de 	bl	800f61a <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801f45e:	68fb      	ldr	r3, [r7, #12]
 801f460:	332c      	adds	r3, #44	; 0x2c
 801f462:	6879      	ldr	r1, [r7, #4]
 801f464:	4618      	mov	r0, r3
 801f466:	f7f0 f955 	bl	800f714 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801f46a:	68fb      	ldr	r3, [r7, #12]
 801f46c:	332c      	adds	r3, #44	; 0x2c
 801f46e:	496e      	ldr	r1, [pc, #440]	; (801f628 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x264>)
 801f470:	4618      	mov	r0, r3
 801f472:	f7f0 f961 	bl	800f738 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801f476:	68fb      	ldr	r3, [r7, #12]
 801f478:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f47c:	683b      	ldr	r3, [r7, #0]
 801f47e:	681b      	ldr	r3, [r3, #0]
 801f480:	335c      	adds	r3, #92	; 0x5c
 801f482:	681b      	ldr	r3, [r3, #0]
 801f484:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801f488:	6839      	ldr	r1, [r7, #0]
 801f48a:	4610      	mov	r0, r2
 801f48c:	4798      	blx	r3
 801f48e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f492:	4619      	mov	r1, r3
 801f494:	4620      	mov	r0, r4
 801f496:	f7f0 f93d 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801f49a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801f49e:	4618      	mov	r0, r3
 801f4a0:	f7f0 f8bb 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801f4a4:	e059      	b.n	801f55a <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x196>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter type \"";
 801f4a6:	68fb      	ldr	r3, [r7, #12]
 801f4a8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f4ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f4b0:	495e      	ldr	r1, [pc, #376]	; (801f62c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x268>)
 801f4b2:	4618      	mov	r0, r3
 801f4b4:	f7ef fcf9 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801f4b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f4bc:	4619      	mov	r1, r3
 801f4be:	4620      	mov	r0, r4
 801f4c0:	f7ef fd5f 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 801f4c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801f4c8:	4618      	mov	r0, r3
 801f4ca:	f7f0 f8a6 	bl	800f61a <_ZN12SimpleStringD1Ev>
        message_ += parameter.getType();
 801f4ce:	68fb      	ldr	r3, [r7, #12]
 801f4d0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f4d4:	683b      	ldr	r3, [r7, #0]
 801f4d6:	681b      	ldr	r3, [r3, #0]
 801f4d8:	3360      	adds	r3, #96	; 0x60
 801f4da:	681b      	ldr	r3, [r3, #0]
 801f4dc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801f4e0:	6839      	ldr	r1, [r7, #0]
 801f4e2:	4610      	mov	r0, r2
 801f4e4:	4798      	blx	r3
 801f4e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801f4ea:	4619      	mov	r1, r3
 801f4ec:	4620      	mov	r0, r4
 801f4ee:	f7f0 f911 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801f4f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801f4f6:	4618      	mov	r0, r3
 801f4f8:	f7f0 f88f 	bl	800f61a <_ZN12SimpleStringD1Ev>
        message_ += "\" to output parameter \"";
 801f4fc:	68fb      	ldr	r3, [r7, #12]
 801f4fe:	332c      	adds	r3, #44	; 0x2c
 801f500:	494b      	ldr	r1, [pc, #300]	; (801f630 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x26c>)
 801f502:	4618      	mov	r0, r3
 801f504:	f7f0 f918 	bl	800f738 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801f508:	68fb      	ldr	r3, [r7, #12]
 801f50a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f50e:	683b      	ldr	r3, [r7, #0]
 801f510:	681b      	ldr	r3, [r3, #0]
 801f512:	335c      	adds	r3, #92	; 0x5c
 801f514:	681b      	ldr	r3, [r3, #0]
 801f516:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801f51a:	6839      	ldr	r1, [r7, #0]
 801f51c:	4610      	mov	r0, r2
 801f51e:	4798      	blx	r3
 801f520:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801f524:	4619      	mov	r1, r3
 801f526:	4620      	mov	r0, r4
 801f528:	f7f0 f8f4 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801f52c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801f530:	4618      	mov	r0, r3
 801f532:	f7f0 f872 	bl	800f61a <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801f536:	68fb      	ldr	r3, [r7, #12]
 801f538:	332c      	adds	r3, #44	; 0x2c
 801f53a:	493e      	ldr	r1, [pc, #248]	; (801f634 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x270>)
 801f53c:	4618      	mov	r0, r3
 801f53e:	f7f0 f8fb 	bl	800f738 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801f542:	68fb      	ldr	r3, [r7, #12]
 801f544:	332c      	adds	r3, #44	; 0x2c
 801f546:	6879      	ldr	r1, [r7, #4]
 801f548:	4618      	mov	r0, r3
 801f54a:	f7f0 f8e3 	bl	800f714 <_ZN12SimpleStringpLERKS_>
        message_ += "\"";
 801f54e:	68fb      	ldr	r3, [r7, #12]
 801f550:	332c      	adds	r3, #44	; 0x2c
 801f552:	4939      	ldr	r1, [pc, #228]	; (801f638 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x274>)
 801f554:	4618      	mov	r0, r3
 801f556:	f7f0 f8ef 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801f55a:	68fb      	ldr	r3, [r7, #12]
 801f55c:	332c      	adds	r3, #44	; 0x2c
 801f55e:	4937      	ldr	r1, [pc, #220]	; (801f63c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801f560:	4618      	mov	r0, r3
 801f562:	f7f0 f8e9 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801f566:	68fb      	ldr	r3, [r7, #12]
 801f568:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801f56a:	6879      	ldr	r1, [r7, #4]
 801f56c:	4618      	mov	r0, r3
 801f56e:	f7ff fc47 	bl	801ee00 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected output parameter passed to function: ";
 801f572:	68fb      	ldr	r3, [r7, #12]
 801f574:	332c      	adds	r3, #44	; 0x2c
 801f576:	4932      	ldr	r1, [pc, #200]	; (801f640 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x27c>)
 801f578:	4618      	mov	r0, r3
 801f57a:	f7f0 f8dd 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801f57e:	68fb      	ldr	r3, [r7, #12]
 801f580:	332c      	adds	r3, #44	; 0x2c
 801f582:	6879      	ldr	r1, [r7, #4]
 801f584:	4618      	mov	r0, r3
 801f586:	f7f0 f8c5 	bl	800f714 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801f58a:	68fb      	ldr	r3, [r7, #12]
 801f58c:	332c      	adds	r3, #44	; 0x2c
 801f58e:	492b      	ldr	r1, [pc, #172]	; (801f63c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801f590:	4618      	mov	r0, r3
 801f592:	f7f0 f8d1 	bl	800f738 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801f596:	68fb      	ldr	r3, [r7, #12]
 801f598:	332c      	adds	r3, #44	; 0x2c
 801f59a:	492a      	ldr	r1, [pc, #168]	; (801f644 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x280>)
 801f59c:	4618      	mov	r0, r3
 801f59e:	f7f0 f8cb 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801f5a2:	68fb      	ldr	r3, [r7, #12]
 801f5a4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f5a8:	683b      	ldr	r3, [r7, #0]
 801f5aa:	681b      	ldr	r3, [r3, #0]
 801f5ac:	3360      	adds	r3, #96	; 0x60
 801f5ae:	681b      	ldr	r3, [r3, #0]
 801f5b0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801f5b4:	6839      	ldr	r1, [r7, #0]
 801f5b6:	4610      	mov	r0, r2
 801f5b8:	4798      	blx	r3
 801f5ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801f5be:	4619      	mov	r1, r3
 801f5c0:	4620      	mov	r0, r4
 801f5c2:	f7f0 f8a7 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801f5c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801f5ca:	4618      	mov	r0, r3
 801f5cc:	f7f0 f825 	bl	800f61a <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801f5d0:	68fb      	ldr	r3, [r7, #12]
 801f5d2:	332c      	adds	r3, #44	; 0x2c
 801f5d4:	491c      	ldr	r1, [pc, #112]	; (801f648 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x284>)
 801f5d6:	4618      	mov	r0, r3
 801f5d8:	f7f0 f8ae 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801f5dc:	68fb      	ldr	r3, [r7, #12]
 801f5de:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f5e2:	683b      	ldr	r3, [r7, #0]
 801f5e4:	681b      	ldr	r3, [r3, #0]
 801f5e6:	335c      	adds	r3, #92	; 0x5c
 801f5e8:	681b      	ldr	r3, [r3, #0]
 801f5ea:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801f5ee:	6839      	ldr	r1, [r7, #0]
 801f5f0:	4610      	mov	r0, r2
 801f5f2:	4798      	blx	r3
 801f5f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801f5f8:	4619      	mov	r1, r3
 801f5fa:	4620      	mov	r0, r4
 801f5fc:	f7f0 f88a 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801f600:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801f604:	4618      	mov	r0, r3
 801f606:	f7f0 f808 	bl	800f61a <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801f60a:	f107 0310 	add.w	r3, r7, #16
 801f60e:	4618      	mov	r0, r3
 801f610:	f7fe fc8c 	bl	801df2c <_ZN21MockExpectedCallsListD1Ev>
}
 801f614:	68fb      	ldr	r3, [r7, #12]
 801f616:	4618      	mov	r0, r3
 801f618:	375c      	adds	r7, #92	; 0x5c
 801f61a:	46bd      	mov	sp, r7
 801f61c:	bd90      	pop	{r4, r7, pc}
 801f61e:	bf00      	nop
 801f620:	0802bb94 	.word	0x0802bb94
 801f624:	08029020 	.word	0x08029020
 801f628:	08028f8c 	.word	0x08028f8c
 801f62c:	08029060 	.word	0x08029060
 801f630:	0802908c 	.word	0x0802908c
 801f634:	08028fc8 	.word	0x08028fc8
 801f638:	080290a4 	.word	0x080290a4
 801f63c:	08028e58 	.word	0x08028e58
 801f640:	080290a8 	.word	0x080290a8
 801f644:	08028dec 	.word	0x08028dec
 801f648:	08029018 	.word	0x08029018

0801f64c <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedParameterDidntHappenFailure::MockExpectedParameterDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801f64c:	b590      	push	{r4, r7, lr}
 801f64e:	b08b      	sub	sp, #44	; 0x2c
 801f650:	af00      	add	r7, sp, #0
 801f652:	60f8      	str	r0, [r7, #12]
 801f654:	60b9      	str	r1, [r7, #8]
 801f656:	607a      	str	r2, [r7, #4]
 801f658:	603b      	str	r3, [r7, #0]
 801f65a:	68fb      	ldr	r3, [r7, #12]
 801f65c:	68b9      	ldr	r1, [r7, #8]
 801f65e:	4618      	mov	r0, r3
 801f660:	f7ff fb46 	bl	801ecf0 <_ZN11MockFailureC1EP10UtestShell>
 801f664:	4a30      	ldr	r2, [pc, #192]	; (801f728 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801f666:	68fb      	ldr	r3, [r7, #12]
 801f668:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunction;
 801f66a:	f107 0310 	add.w	r3, r7, #16
 801f66e:	4618      	mov	r0, r3
 801f670:	f7fe fc48 	bl	801df04 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(functionName, expectations);
 801f674:	f107 0310 	add.w	r3, r7, #16
 801f678:	683a      	ldr	r2, [r7, #0]
 801f67a:	6879      	ldr	r1, [r7, #4]
 801f67c:	4618      	mov	r0, r3
 801f67e:	f7fe fde7 	bl	801e250 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ = "Mock Failure: Expected parameter for function \"";
 801f682:	68fb      	ldr	r3, [r7, #12]
 801f684:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f688:	f107 0318 	add.w	r3, r7, #24
 801f68c:	4927      	ldr	r1, [pc, #156]	; (801f72c <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801f68e:	4618      	mov	r0, r3
 801f690:	f7ef fc0b 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801f694:	f107 0318 	add.w	r3, r7, #24
 801f698:	4619      	mov	r1, r3
 801f69a:	4620      	mov	r0, r4
 801f69c:	f7ef fc71 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 801f6a0:	f107 0318 	add.w	r3, r7, #24
 801f6a4:	4618      	mov	r0, r3
 801f6a6:	f7ef ffb8 	bl	800f61a <_ZN12SimpleStringD1Ev>
    message_ += functionName;
 801f6aa:	68fb      	ldr	r3, [r7, #12]
 801f6ac:	332c      	adds	r3, #44	; 0x2c
 801f6ae:	6879      	ldr	r1, [r7, #4]
 801f6b0:	4618      	mov	r0, r3
 801f6b2:	f7f0 f82f 	bl	800f714 <_ZN12SimpleStringpLERKS_>
    message_ += "\" did not happen.\n";
 801f6b6:	68fb      	ldr	r3, [r7, #12]
 801f6b8:	332c      	adds	r3, #44	; 0x2c
 801f6ba:	491d      	ldr	r1, [pc, #116]	; (801f730 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801f6bc:	4618      	mov	r0, r3
 801f6be:	f7f0 f83b 	bl	800f738 <_ZN12SimpleStringpLEPKc>

    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801f6c2:	68fb      	ldr	r3, [r7, #12]
 801f6c4:	683a      	ldr	r2, [r7, #0]
 801f6c6:	6879      	ldr	r1, [r7, #4]
 801f6c8:	4618      	mov	r0, r3
 801f6ca:	f7ff fb99 	bl	801ee00 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tMISSING parameters that didn't happen:\n";
 801f6ce:	68fb      	ldr	r3, [r7, #12]
 801f6d0:	332c      	adds	r3, #44	; 0x2c
 801f6d2:	4918      	ldr	r1, [pc, #96]	; (801f734 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe8>)
 801f6d4:	4618      	mov	r0, r3
 801f6d6:	f7f0 f82f 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    message_ += "\t\t";
 801f6da:	68fb      	ldr	r3, [r7, #12]
 801f6dc:	332c      	adds	r3, #44	; 0x2c
 801f6de:	4916      	ldr	r1, [pc, #88]	; (801f738 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xec>)
 801f6e0:	4618      	mov	r0, r3
 801f6e2:	f7f0 f829 	bl	800f738 <_ZN12SimpleStringpLEPKc>
    message_ += expectationsForFunction.missingParametersToString();
 801f6e6:	68fb      	ldr	r3, [r7, #12]
 801f6e8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f6ec:	f107 0320 	add.w	r3, r7, #32
 801f6f0:	f107 0210 	add.w	r2, r7, #16
 801f6f4:	4611      	mov	r1, r2
 801f6f6:	4618      	mov	r0, r3
 801f6f8:	f7ff f9bc 	bl	801ea74 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>
 801f6fc:	f107 0320 	add.w	r3, r7, #32
 801f700:	4619      	mov	r1, r3
 801f702:	4620      	mov	r0, r4
 801f704:	f7f0 f806 	bl	800f714 <_ZN12SimpleStringpLERKS_>
 801f708:	f107 0320 	add.w	r3, r7, #32
 801f70c:	4618      	mov	r0, r3
 801f70e:	f7ef ff84 	bl	800f61a <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801f712:	f107 0310 	add.w	r3, r7, #16
 801f716:	4618      	mov	r0, r3
 801f718:	f7fe fc08 	bl	801df2c <_ZN21MockExpectedCallsListD1Ev>
}
 801f71c:	68fb      	ldr	r3, [r7, #12]
 801f71e:	4618      	mov	r0, r3
 801f720:	372c      	adds	r7, #44	; 0x2c
 801f722:	46bd      	mov	sp, r7
 801f724:	bd90      	pop	{r4, r7, pc}
 801f726:	bf00      	nop
 801f728:	0802bb68 	.word	0x0802bb68
 801f72c:	080290e4 	.word	0x080290e4
 801f730:	08029114 	.word	0x08029114
 801f734:	08029128 	.word	0x08029128
 801f738:	08028dec 	.word	0x08028dec

0801f73c <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCompareCustomTypeFailure::MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801f73c:	b590      	push	{r4, r7, lr}
 801f73e:	b087      	sub	sp, #28
 801f740:	af00      	add	r7, sp, #0
 801f742:	60f8      	str	r0, [r7, #12]
 801f744:	60b9      	str	r1, [r7, #8]
 801f746:	607a      	str	r2, [r7, #4]
 801f748:	68fb      	ldr	r3, [r7, #12]
 801f74a:	68b9      	ldr	r1, [r7, #8]
 801f74c:	4618      	mov	r0, r3
 801f74e:	f7ff facf 	bl	801ecf0 <_ZN11MockFailureC1EP10UtestShell>
 801f752:	4a10      	ldr	r2, [pc, #64]	; (801f794 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801f754:	68fb      	ldr	r3, [r7, #12]
 801f756:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to compare type <%s>. Please install a MockNamedValueComparator.", typeName.asCharString());
 801f758:	68fb      	ldr	r3, [r7, #12]
 801f75a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f75e:	6878      	ldr	r0, [r7, #4]
 801f760:	f7ef ff2e 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 801f764:	4602      	mov	r2, r0
 801f766:	f107 0310 	add.w	r3, r7, #16
 801f76a:	490b      	ldr	r1, [pc, #44]	; (801f798 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801f76c:	4618      	mov	r0, r3
 801f76e:	f7f0 fc5b 	bl	8010028 <_Z16StringFromFormatPKcz>
 801f772:	f107 0310 	add.w	r3, r7, #16
 801f776:	4619      	mov	r1, r3
 801f778:	4620      	mov	r0, r4
 801f77a:	f7ef fc02 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 801f77e:	f107 0310 	add.w	r3, r7, #16
 801f782:	4618      	mov	r0, r3
 801f784:	f7ef ff49 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 801f788:	68fb      	ldr	r3, [r7, #12]
 801f78a:	4618      	mov	r0, r3
 801f78c:	371c      	adds	r7, #28
 801f78e:	46bd      	mov	sp, r7
 801f790:	bd90      	pop	{r4, r7, pc}
 801f792:	bf00      	nop
 801f794:	0802bb3c 	.word	0x0802bb3c
 801f798:	08029154 	.word	0x08029154

0801f79c <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCopyCustomTypeFailure::MockNoWayToCopyCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801f79c:	b590      	push	{r4, r7, lr}
 801f79e:	b087      	sub	sp, #28
 801f7a0:	af00      	add	r7, sp, #0
 801f7a2:	60f8      	str	r0, [r7, #12]
 801f7a4:	60b9      	str	r1, [r7, #8]
 801f7a6:	607a      	str	r2, [r7, #4]
 801f7a8:	68fb      	ldr	r3, [r7, #12]
 801f7aa:	68b9      	ldr	r1, [r7, #8]
 801f7ac:	4618      	mov	r0, r3
 801f7ae:	f7ff fa9f 	bl	801ecf0 <_ZN11MockFailureC1EP10UtestShell>
 801f7b2:	4a10      	ldr	r2, [pc, #64]	; (801f7f4 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801f7b4:	68fb      	ldr	r3, [r7, #12]
 801f7b6:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to copy type <%s>. Please install a MockNamedValueCopier.", typeName.asCharString());
 801f7b8:	68fb      	ldr	r3, [r7, #12]
 801f7ba:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f7be:	6878      	ldr	r0, [r7, #4]
 801f7c0:	f7ef fefe 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 801f7c4:	4602      	mov	r2, r0
 801f7c6:	f107 0310 	add.w	r3, r7, #16
 801f7ca:	490b      	ldr	r1, [pc, #44]	; (801f7f8 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801f7cc:	4618      	mov	r0, r3
 801f7ce:	f7f0 fc2b 	bl	8010028 <_Z16StringFromFormatPKcz>
 801f7d2:	f107 0310 	add.w	r3, r7, #16
 801f7d6:	4619      	mov	r1, r3
 801f7d8:	4620      	mov	r0, r4
 801f7da:	f7ef fbd2 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 801f7de:	f107 0310 	add.w	r3, r7, #16
 801f7e2:	4618      	mov	r0, r3
 801f7e4:	f7ef ff19 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 801f7e8:	68fb      	ldr	r3, [r7, #12]
 801f7ea:	4618      	mov	r0, r3
 801f7ec:	371c      	adds	r7, #28
 801f7ee:	46bd      	mov	sp, r7
 801f7f0:	bd90      	pop	{r4, r7, pc}
 801f7f2:	bf00      	nop
 801f7f4:	0802bb10 	.word	0x0802bb10
 801f7f8:	080291ac 	.word	0x080291ac

0801f7fc <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>:

MockUnexpectedObjectFailure::MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* actual, const MockExpectedCallsList& expectations) : MockFailure(test)
 801f7fc:	b590      	push	{r4, r7, lr}
 801f7fe:	b087      	sub	sp, #28
 801f800:	af00      	add	r7, sp, #0
 801f802:	60f8      	str	r0, [r7, #12]
 801f804:	60b9      	str	r1, [r7, #8]
 801f806:	607a      	str	r2, [r7, #4]
 801f808:	603b      	str	r3, [r7, #0]
 801f80a:	68fb      	ldr	r3, [r7, #12]
 801f80c:	68b9      	ldr	r1, [r7, #8]
 801f80e:	4618      	mov	r0, r3
 801f810:	f7ff fa6e 	bl	801ecf0 <_ZN11MockFailureC1EP10UtestShell>
 801f814:	4a12      	ldr	r2, [pc, #72]	; (801f860 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x64>)
 801f816:	68fb      	ldr	r3, [r7, #12]
 801f818:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801f81a:	68fb      	ldr	r3, [r7, #12]
 801f81c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
 801f820:	6878      	ldr	r0, [r7, #4]
 801f822:	f7ef fecd 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 801f826:	4602      	mov	r2, r0
 801f828:	f107 0010 	add.w	r0, r7, #16
 801f82c:	683b      	ldr	r3, [r7, #0]
 801f82e:	490d      	ldr	r1, [pc, #52]	; (801f864 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x68>)
 801f830:	f7f0 fbfa 	bl	8010028 <_Z16StringFromFormatPKcz>
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801f834:	f107 0310 	add.w	r3, r7, #16
 801f838:	4619      	mov	r1, r3
 801f83a:	4620      	mov	r0, r4
 801f83c:	f7ef fba1 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 801f840:	f107 0310 	add.w	r3, r7, #16
 801f844:	4618      	mov	r0, r3
 801f846:	f7ef fee8 	bl	800f61a <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801f84a:	68fb      	ldr	r3, [r7, #12]
 801f84c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f84e:	6879      	ldr	r1, [r7, #4]
 801f850:	4618      	mov	r0, r3
 801f852:	f7ff fad5 	bl	801ee00 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801f856:	68fb      	ldr	r3, [r7, #12]
 801f858:	4618      	mov	r0, r3
 801f85a:	371c      	adds	r7, #28
 801f85c:	46bd      	mov	sp, r7
 801f85e:	bd90      	pop	{r4, r7, pc}
 801f860:	0802bae4 	.word	0x0802bae4
 801f864:	080291fc 	.word	0x080291fc

0801f868 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedObjectDidntHappenFailure::MockExpectedObjectDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801f868:	b590      	push	{r4, r7, lr}
 801f86a:	b087      	sub	sp, #28
 801f86c:	af00      	add	r7, sp, #0
 801f86e:	60f8      	str	r0, [r7, #12]
 801f870:	60b9      	str	r1, [r7, #8]
 801f872:	607a      	str	r2, [r7, #4]
 801f874:	603b      	str	r3, [r7, #0]
 801f876:	68fb      	ldr	r3, [r7, #12]
 801f878:	68b9      	ldr	r1, [r7, #8]
 801f87a:	4618      	mov	r0, r3
 801f87c:	f7ff fa38 	bl	801ecf0 <_ZN11MockFailureC1EP10UtestShell>
 801f880:	4a12      	ldr	r2, [pc, #72]	; (801f8cc <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x64>)
 801f882:	68fb      	ldr	r3, [r7, #12]
 801f884:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("Mock Failure: Expected call on object for function \"%s\" but it did not happen.\n", functionName.asCharString());
 801f886:	68fb      	ldr	r3, [r7, #12]
 801f888:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801f88c:	6878      	ldr	r0, [r7, #4]
 801f88e:	f7ef fe97 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 801f892:	4602      	mov	r2, r0
 801f894:	f107 0310 	add.w	r3, r7, #16
 801f898:	490d      	ldr	r1, [pc, #52]	; (801f8d0 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x68>)
 801f89a:	4618      	mov	r0, r3
 801f89c:	f7f0 fbc4 	bl	8010028 <_Z16StringFromFormatPKcz>
 801f8a0:	f107 0310 	add.w	r3, r7, #16
 801f8a4:	4619      	mov	r1, r3
 801f8a6:	4620      	mov	r0, r4
 801f8a8:	f7ef fb6b 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 801f8ac:	f107 0310 	add.w	r3, r7, #16
 801f8b0:	4618      	mov	r0, r3
 801f8b2:	f7ef feb2 	bl	800f61a <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801f8b6:	68fb      	ldr	r3, [r7, #12]
 801f8b8:	683a      	ldr	r2, [r7, #0]
 801f8ba:	6879      	ldr	r1, [r7, #4]
 801f8bc:	4618      	mov	r0, r3
 801f8be:	f7ff fa9f 	bl	801ee00 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801f8c2:	68fb      	ldr	r3, [r7, #12]
 801f8c4:	4618      	mov	r0, r3
 801f8c6:	371c      	adds	r7, #28
 801f8c8:	46bd      	mov	sp, r7
 801f8ca:	bd90      	pop	{r4, r7, pc}
 801f8cc:	0802bab8 	.word	0x0802bab8
 801f8d0:	08029260 	.word	0x08029260

0801f8d4 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>:

MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::defaultRepository_ = NULLPTR;
const double MockNamedValue::defaultDoubleTolerance = 0.005;

void MockNamedValue::setDefaultComparatorsAndCopiersRepository(MockNamedValueComparatorsAndCopiersRepository* repository)
{
 801f8d4:	b480      	push	{r7}
 801f8d6:	b083      	sub	sp, #12
 801f8d8:	af00      	add	r7, sp, #0
 801f8da:	6078      	str	r0, [r7, #4]
    defaultRepository_ = repository;
 801f8dc:	4a04      	ldr	r2, [pc, #16]	; (801f8f0 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository+0x1c>)
 801f8de:	687b      	ldr	r3, [r7, #4]
 801f8e0:	6013      	str	r3, [r2, #0]
}
 801f8e2:	bf00      	nop
 801f8e4:	370c      	adds	r7, #12
 801f8e6:	46bd      	mov	sp, r7
 801f8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8ec:	4770      	bx	lr
 801f8ee:	bf00      	nop
 801f8f0:	20001038 	.word	0x20001038

0801f8f4 <_ZN14MockNamedValueC1ERK12SimpleString>:
MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::getDefaultComparatorsAndCopiersRepository()
{
    return defaultRepository_;
}

MockNamedValue::MockNamedValue(const SimpleString& name) : name_(name), type_("int"), size_(0), comparator_(NULLPTR), copier_(NULLPTR)
 801f8f4:	b580      	push	{r7, lr}
 801f8f6:	b082      	sub	sp, #8
 801f8f8:	af00      	add	r7, sp, #0
 801f8fa:	6078      	str	r0, [r7, #4]
 801f8fc:	6039      	str	r1, [r7, #0]
 801f8fe:	4a10      	ldr	r2, [pc, #64]	; (801f940 <_ZN14MockNamedValueC1ERK12SimpleString+0x4c>)
 801f900:	687b      	ldr	r3, [r7, #4]
 801f902:	601a      	str	r2, [r3, #0]
 801f904:	687b      	ldr	r3, [r7, #4]
 801f906:	3304      	adds	r3, #4
 801f908:	6839      	ldr	r1, [r7, #0]
 801f90a:	4618      	mov	r0, r3
 801f90c:	f7ef fb21 	bl	800ef52 <_ZN12SimpleStringC1ERKS_>
 801f910:	687b      	ldr	r3, [r7, #4]
 801f912:	330c      	adds	r3, #12
 801f914:	490b      	ldr	r1, [pc, #44]	; (801f944 <_ZN14MockNamedValueC1ERK12SimpleString+0x50>)
 801f916:	4618      	mov	r0, r3
 801f918:	f7ef fac7 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801f91c:	687b      	ldr	r3, [r7, #4]
 801f91e:	2200      	movs	r2, #0
 801f920:	629a      	str	r2, [r3, #40]	; 0x28
 801f922:	687b      	ldr	r3, [r7, #4]
 801f924:	2200      	movs	r2, #0
 801f926:	62da      	str	r2, [r3, #44]	; 0x2c
 801f928:	687b      	ldr	r3, [r7, #4]
 801f92a:	2200      	movs	r2, #0
 801f92c:	631a      	str	r2, [r3, #48]	; 0x30
{
    value_.intValue_ = 0;
 801f92e:	687b      	ldr	r3, [r7, #4]
 801f930:	2200      	movs	r2, #0
 801f932:	619a      	str	r2, [r3, #24]
}
 801f934:	687b      	ldr	r3, [r7, #4]
 801f936:	4618      	mov	r0, r3
 801f938:	3708      	adds	r7, #8
 801f93a:	46bd      	mov	sp, r7
 801f93c:	bd80      	pop	{r7, pc}
 801f93e:	bf00      	nop
 801f940:	0802c340 	.word	0x0802c340
 801f944:	080292b0 	.word	0x080292b0

0801f948 <_ZN14MockNamedValueD1Ev>:

MockNamedValue::~MockNamedValue()
 801f948:	b580      	push	{r7, lr}
 801f94a:	b082      	sub	sp, #8
 801f94c:	af00      	add	r7, sp, #0
 801f94e:	6078      	str	r0, [r7, #4]
 801f950:	4a08      	ldr	r2, [pc, #32]	; (801f974 <_ZN14MockNamedValueD1Ev+0x2c>)
 801f952:	687b      	ldr	r3, [r7, #4]
 801f954:	601a      	str	r2, [r3, #0]
 801f956:	687b      	ldr	r3, [r7, #4]
 801f958:	330c      	adds	r3, #12
 801f95a:	4618      	mov	r0, r3
 801f95c:	f7ef fe5d 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801f960:	687b      	ldr	r3, [r7, #4]
 801f962:	3304      	adds	r3, #4
 801f964:	4618      	mov	r0, r3
 801f966:	f7ef fe58 	bl	800f61a <_ZN12SimpleStringD1Ev>
{
}
 801f96a:	687b      	ldr	r3, [r7, #4]
 801f96c:	4618      	mov	r0, r3
 801f96e:	3708      	adds	r7, #8
 801f970:	46bd      	mov	sp, r7
 801f972:	bd80      	pop	{r7, pc}
 801f974:	0802c340 	.word	0x0802c340

0801f978 <_ZN14MockNamedValueD0Ev>:
MockNamedValue::~MockNamedValue()
 801f978:	b580      	push	{r7, lr}
 801f97a:	b082      	sub	sp, #8
 801f97c:	af00      	add	r7, sp, #0
 801f97e:	6078      	str	r0, [r7, #4]
}
 801f980:	6878      	ldr	r0, [r7, #4]
 801f982:	f7ff ffe1 	bl	801f948 <_ZN14MockNamedValueD1Ev>
 801f986:	2138      	movs	r1, #56	; 0x38
 801f988:	6878      	ldr	r0, [r7, #4]
 801f98a:	f7ec fedf 	bl	800c74c <_ZdlPvj>
 801f98e:	687b      	ldr	r3, [r7, #4]
 801f990:	4618      	mov	r0, r3
 801f992:	3708      	adds	r7, #8
 801f994:	46bd      	mov	sp, r7
 801f996:	bd80      	pop	{r7, pc}

0801f998 <_ZN14MockNamedValue8setValueEb>:

void MockNamedValue::setValue(bool value)
{
 801f998:	b590      	push	{r4, r7, lr}
 801f99a:	b085      	sub	sp, #20
 801f99c:	af00      	add	r7, sp, #0
 801f99e:	6078      	str	r0, [r7, #4]
 801f9a0:	460b      	mov	r3, r1
 801f9a2:	70fb      	strb	r3, [r7, #3]
    type_ = "bool";
 801f9a4:	687b      	ldr	r3, [r7, #4]
 801f9a6:	f103 040c 	add.w	r4, r3, #12
 801f9aa:	f107 0308 	add.w	r3, r7, #8
 801f9ae:	490b      	ldr	r1, [pc, #44]	; (801f9dc <_ZN14MockNamedValue8setValueEb+0x44>)
 801f9b0:	4618      	mov	r0, r3
 801f9b2:	f7ef fa7a 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801f9b6:	f107 0308 	add.w	r3, r7, #8
 801f9ba:	4619      	mov	r1, r3
 801f9bc:	4620      	mov	r0, r4
 801f9be:	f7ef fae0 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 801f9c2:	f107 0308 	add.w	r3, r7, #8
 801f9c6:	4618      	mov	r0, r3
 801f9c8:	f7ef fe27 	bl	800f61a <_ZN12SimpleStringD1Ev>
    value_.boolValue_ = value;
 801f9cc:	687b      	ldr	r3, [r7, #4]
 801f9ce:	78fa      	ldrb	r2, [r7, #3]
 801f9d0:	761a      	strb	r2, [r3, #24]
}
 801f9d2:	bf00      	nop
 801f9d4:	3714      	adds	r7, #20
 801f9d6:	46bd      	mov	sp, r7
 801f9d8:	bd90      	pop	{r4, r7, pc}
 801f9da:	bf00      	nop
 801f9dc:	080292b4 	.word	0x080292b4

0801f9e0 <_ZN14MockNamedValue8setValueEj>:

void MockNamedValue::setValue(unsigned int value)
{
 801f9e0:	b590      	push	{r4, r7, lr}
 801f9e2:	b085      	sub	sp, #20
 801f9e4:	af00      	add	r7, sp, #0
 801f9e6:	6078      	str	r0, [r7, #4]
 801f9e8:	6039      	str	r1, [r7, #0]
    type_ = "unsigned int";
 801f9ea:	687b      	ldr	r3, [r7, #4]
 801f9ec:	f103 040c 	add.w	r4, r3, #12
 801f9f0:	f107 0308 	add.w	r3, r7, #8
 801f9f4:	490a      	ldr	r1, [pc, #40]	; (801fa20 <_ZN14MockNamedValue8setValueEj+0x40>)
 801f9f6:	4618      	mov	r0, r3
 801f9f8:	f7ef fa57 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801f9fc:	f107 0308 	add.w	r3, r7, #8
 801fa00:	4619      	mov	r1, r3
 801fa02:	4620      	mov	r0, r4
 801fa04:	f7ef fabd 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 801fa08:	f107 0308 	add.w	r3, r7, #8
 801fa0c:	4618      	mov	r0, r3
 801fa0e:	f7ef fe04 	bl	800f61a <_ZN12SimpleStringD1Ev>
    value_.unsignedIntValue_ = value;
 801fa12:	687b      	ldr	r3, [r7, #4]
 801fa14:	683a      	ldr	r2, [r7, #0]
 801fa16:	619a      	str	r2, [r3, #24]
}
 801fa18:	bf00      	nop
 801fa1a:	3714      	adds	r7, #20
 801fa1c:	46bd      	mov	sp, r7
 801fa1e:	bd90      	pop	{r4, r7, pc}
 801fa20:	080292bc 	.word	0x080292bc

0801fa24 <_ZN14MockNamedValue8setValueEi>:

void MockNamedValue::setValue(int value)
{
 801fa24:	b590      	push	{r4, r7, lr}
 801fa26:	b085      	sub	sp, #20
 801fa28:	af00      	add	r7, sp, #0
 801fa2a:	6078      	str	r0, [r7, #4]
 801fa2c:	6039      	str	r1, [r7, #0]
    type_ = "int";
 801fa2e:	687b      	ldr	r3, [r7, #4]
 801fa30:	f103 040c 	add.w	r4, r3, #12
 801fa34:	f107 0308 	add.w	r3, r7, #8
 801fa38:	490a      	ldr	r1, [pc, #40]	; (801fa64 <_ZN14MockNamedValue8setValueEi+0x40>)
 801fa3a:	4618      	mov	r0, r3
 801fa3c:	f7ef fa35 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801fa40:	f107 0308 	add.w	r3, r7, #8
 801fa44:	4619      	mov	r1, r3
 801fa46:	4620      	mov	r0, r4
 801fa48:	f7ef fa9b 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 801fa4c:	f107 0308 	add.w	r3, r7, #8
 801fa50:	4618      	mov	r0, r3
 801fa52:	f7ef fde2 	bl	800f61a <_ZN12SimpleStringD1Ev>
    value_.intValue_ = value;
 801fa56:	687b      	ldr	r3, [r7, #4]
 801fa58:	683a      	ldr	r2, [r7, #0]
 801fa5a:	619a      	str	r2, [r3, #24]
}
 801fa5c:	bf00      	nop
 801fa5e:	3714      	adds	r7, #20
 801fa60:	46bd      	mov	sp, r7
 801fa62:	bd90      	pop	{r4, r7, pc}
 801fa64:	080292b0 	.word	0x080292b0

0801fa68 <_ZN14MockNamedValue8setValueEl>:

void MockNamedValue::setValue(long int value)
{
 801fa68:	b590      	push	{r4, r7, lr}
 801fa6a:	b085      	sub	sp, #20
 801fa6c:	af00      	add	r7, sp, #0
 801fa6e:	6078      	str	r0, [r7, #4]
 801fa70:	6039      	str	r1, [r7, #0]
    type_ = "long int";
 801fa72:	687b      	ldr	r3, [r7, #4]
 801fa74:	f103 040c 	add.w	r4, r3, #12
 801fa78:	f107 0308 	add.w	r3, r7, #8
 801fa7c:	490a      	ldr	r1, [pc, #40]	; (801faa8 <_ZN14MockNamedValue8setValueEl+0x40>)
 801fa7e:	4618      	mov	r0, r3
 801fa80:	f7ef fa13 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801fa84:	f107 0308 	add.w	r3, r7, #8
 801fa88:	4619      	mov	r1, r3
 801fa8a:	4620      	mov	r0, r4
 801fa8c:	f7ef fa79 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 801fa90:	f107 0308 	add.w	r3, r7, #8
 801fa94:	4618      	mov	r0, r3
 801fa96:	f7ef fdc0 	bl	800f61a <_ZN12SimpleStringD1Ev>
    value_.longIntValue_ = value;
 801fa9a:	687b      	ldr	r3, [r7, #4]
 801fa9c:	683a      	ldr	r2, [r7, #0]
 801fa9e:	619a      	str	r2, [r3, #24]
}
 801faa0:	bf00      	nop
 801faa2:	3714      	adds	r7, #20
 801faa4:	46bd      	mov	sp, r7
 801faa6:	bd90      	pop	{r4, r7, pc}
 801faa8:	080292cc 	.word	0x080292cc

0801faac <_ZN14MockNamedValue8setValueEm>:

void MockNamedValue::setValue(unsigned long int value)
{
 801faac:	b590      	push	{r4, r7, lr}
 801faae:	b085      	sub	sp, #20
 801fab0:	af00      	add	r7, sp, #0
 801fab2:	6078      	str	r0, [r7, #4]
 801fab4:	6039      	str	r1, [r7, #0]
    type_ = "unsigned long int";
 801fab6:	687b      	ldr	r3, [r7, #4]
 801fab8:	f103 040c 	add.w	r4, r3, #12
 801fabc:	f107 0308 	add.w	r3, r7, #8
 801fac0:	490a      	ldr	r1, [pc, #40]	; (801faec <_ZN14MockNamedValue8setValueEm+0x40>)
 801fac2:	4618      	mov	r0, r3
 801fac4:	f7ef f9f1 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801fac8:	f107 0308 	add.w	r3, r7, #8
 801facc:	4619      	mov	r1, r3
 801face:	4620      	mov	r0, r4
 801fad0:	f7ef fa57 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 801fad4:	f107 0308 	add.w	r3, r7, #8
 801fad8:	4618      	mov	r0, r3
 801fada:	f7ef fd9e 	bl	800f61a <_ZN12SimpleStringD1Ev>
    value_.unsignedLongIntValue_ = value;
 801fade:	687b      	ldr	r3, [r7, #4]
 801fae0:	683a      	ldr	r2, [r7, #0]
 801fae2:	619a      	str	r2, [r3, #24]
}
 801fae4:	bf00      	nop
 801fae6:	3714      	adds	r7, #20
 801fae8:	46bd      	mov	sp, r7
 801faea:	bd90      	pop	{r4, r7, pc}
 801faec:	080292d8 	.word	0x080292d8

0801faf0 <_ZN14MockNamedValue8setValueE17cpputest_longlong>:
}

#else

void MockNamedValue::setValue(cpputest_longlong)
{
 801faf0:	b5b0      	push	{r4, r5, r7, lr}
 801faf2:	b086      	sub	sp, #24
 801faf4:	af02      	add	r7, sp, #8
 801faf6:	60f8      	str	r0, [r7, #12]
 801faf8:	1d3b      	adds	r3, r7, #4
 801fafa:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801fafe:	f7f6 fdb7 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 801fb02:	4604      	mov	r4, r0
 801fb04:	6823      	ldr	r3, [r4, #0]
 801fb06:	3368      	adds	r3, #104	; 0x68
 801fb08:	681d      	ldr	r5, [r3, #0]
 801fb0a:	f7f6 fdc1 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801fb0e:	4603      	mov	r3, r0
 801fb10:	9300      	str	r3, [sp, #0]
 801fb12:	2367      	movs	r3, #103	; 0x67
 801fb14:	4a03      	ldr	r2, [pc, #12]	; (801fb24 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x34>)
 801fb16:	4904      	ldr	r1, [pc, #16]	; (801fb28 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x38>)
 801fb18:	4620      	mov	r0, r4
 801fb1a:	47a8      	blx	r5
}
 801fb1c:	bf00      	nop
 801fb1e:	3710      	adds	r7, #16
 801fb20:	46bd      	mov	sp, r7
 801fb22:	bdb0      	pop	{r4, r5, r7, pc}
 801fb24:	080292ec 	.word	0x080292ec
 801fb28:	08029308 	.word	0x08029308

0801fb2c <_ZN14MockNamedValue8setValueE18cpputest_ulonglong>:

void MockNamedValue::setValue(cpputest_ulonglong)
{
 801fb2c:	b5b0      	push	{r4, r5, r7, lr}
 801fb2e:	b086      	sub	sp, #24
 801fb30:	af02      	add	r7, sp, #8
 801fb32:	60f8      	str	r0, [r7, #12]
 801fb34:	1d3b      	adds	r3, r7, #4
 801fb36:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801fb3a:	f7f6 fd99 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 801fb3e:	4604      	mov	r4, r0
 801fb40:	6823      	ldr	r3, [r4, #0]
 801fb42:	3368      	adds	r3, #104	; 0x68
 801fb44:	681d      	ldr	r5, [r3, #0]
 801fb46:	f7f6 fda3 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801fb4a:	4603      	mov	r3, r0
 801fb4c:	9300      	str	r3, [sp, #0]
 801fb4e:	236c      	movs	r3, #108	; 0x6c
 801fb50:	4a03      	ldr	r2, [pc, #12]	; (801fb60 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x34>)
 801fb52:	4904      	ldr	r1, [pc, #16]	; (801fb64 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x38>)
 801fb54:	4620      	mov	r0, r4
 801fb56:	47a8      	blx	r5
}
 801fb58:	bf00      	nop
 801fb5a:	3710      	adds	r7, #16
 801fb5c:	46bd      	mov	sp, r7
 801fb5e:	bdb0      	pop	{r4, r5, r7, pc}
 801fb60:	080292ec 	.word	0x080292ec
 801fb64:	08029328 	.word	0x08029328

0801fb68 <_ZN14MockNamedValue8setValueEd>:

#endif

void MockNamedValue::setValue(double value)
{
 801fb68:	b580      	push	{r7, lr}
 801fb6a:	b084      	sub	sp, #16
 801fb6c:	af00      	add	r7, sp, #0
 801fb6e:	60f8      	str	r0, [r7, #12]
 801fb70:	ed87 0b00 	vstr	d0, [r7]
    setValue(value, defaultDoubleTolerance);
 801fb74:	68fb      	ldr	r3, [r7, #12]
 801fb76:	681b      	ldr	r3, [r3, #0]
 801fb78:	3328      	adds	r3, #40	; 0x28
 801fb7a:	681b      	ldr	r3, [r3, #0]
 801fb7c:	ed9f 1b04 	vldr	d1, [pc, #16]	; 801fb90 <_ZN14MockNamedValue8setValueEd+0x28>
 801fb80:	ed97 0b00 	vldr	d0, [r7]
 801fb84:	68f8      	ldr	r0, [r7, #12]
 801fb86:	4798      	blx	r3
}
 801fb88:	bf00      	nop
 801fb8a:	3710      	adds	r7, #16
 801fb8c:	46bd      	mov	sp, r7
 801fb8e:	bd80      	pop	{r7, pc}
 801fb90:	47ae147b 	.word	0x47ae147b
 801fb94:	3f747ae1 	.word	0x3f747ae1

0801fb98 <_ZN14MockNamedValue8setValueEdd>:

void MockNamedValue::setValue(double value, double tolerance)
{
 801fb98:	b590      	push	{r4, r7, lr}
 801fb9a:	b089      	sub	sp, #36	; 0x24
 801fb9c:	af00      	add	r7, sp, #0
 801fb9e:	6178      	str	r0, [r7, #20]
 801fba0:	ed87 0b02 	vstr	d0, [r7, #8]
 801fba4:	ed87 1b00 	vstr	d1, [r7]
    type_ = "double";
 801fba8:	697b      	ldr	r3, [r7, #20]
 801fbaa:	f103 040c 	add.w	r4, r3, #12
 801fbae:	f107 0318 	add.w	r3, r7, #24
 801fbb2:	490e      	ldr	r1, [pc, #56]	; (801fbec <_ZN14MockNamedValue8setValueEdd+0x54>)
 801fbb4:	4618      	mov	r0, r3
 801fbb6:	f7ef f978 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801fbba:	f107 0318 	add.w	r3, r7, #24
 801fbbe:	4619      	mov	r1, r3
 801fbc0:	4620      	mov	r0, r4
 801fbc2:	f7ef f9de 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 801fbc6:	f107 0318 	add.w	r3, r7, #24
 801fbca:	4618      	mov	r0, r3
 801fbcc:	f7ef fd25 	bl	800f61a <_ZN12SimpleStringD1Ev>
    value_.doubleValue_.value = value;
 801fbd0:	6979      	ldr	r1, [r7, #20]
 801fbd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801fbd6:	e9c1 2306 	strd	r2, r3, [r1, #24]
    value_.doubleValue_.tolerance = tolerance;
 801fbda:	6979      	ldr	r1, [r7, #20]
 801fbdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 801fbe0:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 801fbe4:	bf00      	nop
 801fbe6:	3724      	adds	r7, #36	; 0x24
 801fbe8:	46bd      	mov	sp, r7
 801fbea:	bd90      	pop	{r4, r7, pc}
 801fbec:	08029354 	.word	0x08029354

0801fbf0 <_ZN14MockNamedValue8setValueEPv>:

void MockNamedValue::setValue(void* value)
{
 801fbf0:	b590      	push	{r4, r7, lr}
 801fbf2:	b085      	sub	sp, #20
 801fbf4:	af00      	add	r7, sp, #0
 801fbf6:	6078      	str	r0, [r7, #4]
 801fbf8:	6039      	str	r1, [r7, #0]
    type_ = "void*";
 801fbfa:	687b      	ldr	r3, [r7, #4]
 801fbfc:	f103 040c 	add.w	r4, r3, #12
 801fc00:	f107 0308 	add.w	r3, r7, #8
 801fc04:	490a      	ldr	r1, [pc, #40]	; (801fc30 <_ZN14MockNamedValue8setValueEPv+0x40>)
 801fc06:	4618      	mov	r0, r3
 801fc08:	f7ef f94f 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801fc0c:	f107 0308 	add.w	r3, r7, #8
 801fc10:	4619      	mov	r1, r3
 801fc12:	4620      	mov	r0, r4
 801fc14:	f7ef f9b5 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 801fc18:	f107 0308 	add.w	r3, r7, #8
 801fc1c:	4618      	mov	r0, r3
 801fc1e:	f7ef fcfc 	bl	800f61a <_ZN12SimpleStringD1Ev>
    value_.pointerValue_ = value;
 801fc22:	687b      	ldr	r3, [r7, #4]
 801fc24:	683a      	ldr	r2, [r7, #0]
 801fc26:	619a      	str	r2, [r3, #24]
}
 801fc28:	bf00      	nop
 801fc2a:	3714      	adds	r7, #20
 801fc2c:	46bd      	mov	sp, r7
 801fc2e:	bd90      	pop	{r4, r7, pc}
 801fc30:	0802935c 	.word	0x0802935c

0801fc34 <_ZN14MockNamedValue8setValueEPKv>:

void MockNamedValue::setValue(const void* value)
{
 801fc34:	b590      	push	{r4, r7, lr}
 801fc36:	b085      	sub	sp, #20
 801fc38:	af00      	add	r7, sp, #0
 801fc3a:	6078      	str	r0, [r7, #4]
 801fc3c:	6039      	str	r1, [r7, #0]
    type_ = "const void*";
 801fc3e:	687b      	ldr	r3, [r7, #4]
 801fc40:	f103 040c 	add.w	r4, r3, #12
 801fc44:	f107 0308 	add.w	r3, r7, #8
 801fc48:	490a      	ldr	r1, [pc, #40]	; (801fc74 <_ZN14MockNamedValue8setValueEPKv+0x40>)
 801fc4a:	4618      	mov	r0, r3
 801fc4c:	f7ef f92d 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801fc50:	f107 0308 	add.w	r3, r7, #8
 801fc54:	4619      	mov	r1, r3
 801fc56:	4620      	mov	r0, r4
 801fc58:	f7ef f993 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 801fc5c:	f107 0308 	add.w	r3, r7, #8
 801fc60:	4618      	mov	r0, r3
 801fc62:	f7ef fcda 	bl	800f61a <_ZN12SimpleStringD1Ev>
    value_.constPointerValue_ = value;
 801fc66:	687b      	ldr	r3, [r7, #4]
 801fc68:	683a      	ldr	r2, [r7, #0]
 801fc6a:	619a      	str	r2, [r3, #24]
}
 801fc6c:	bf00      	nop
 801fc6e:	3714      	adds	r7, #20
 801fc70:	46bd      	mov	sp, r7
 801fc72:	bd90      	pop	{r4, r7, pc}
 801fc74:	08029364 	.word	0x08029364

0801fc78 <_ZN14MockNamedValue8setValueEPFvvE>:

void MockNamedValue::setValue(void (*value)())
{
 801fc78:	b590      	push	{r4, r7, lr}
 801fc7a:	b085      	sub	sp, #20
 801fc7c:	af00      	add	r7, sp, #0
 801fc7e:	6078      	str	r0, [r7, #4]
 801fc80:	6039      	str	r1, [r7, #0]
    type_ = "void (*)()";
 801fc82:	687b      	ldr	r3, [r7, #4]
 801fc84:	f103 040c 	add.w	r4, r3, #12
 801fc88:	f107 0308 	add.w	r3, r7, #8
 801fc8c:	490a      	ldr	r1, [pc, #40]	; (801fcb8 <_ZN14MockNamedValue8setValueEPFvvE+0x40>)
 801fc8e:	4618      	mov	r0, r3
 801fc90:	f7ef f90b 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801fc94:	f107 0308 	add.w	r3, r7, #8
 801fc98:	4619      	mov	r1, r3
 801fc9a:	4620      	mov	r0, r4
 801fc9c:	f7ef f971 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 801fca0:	f107 0308 	add.w	r3, r7, #8
 801fca4:	4618      	mov	r0, r3
 801fca6:	f7ef fcb8 	bl	800f61a <_ZN12SimpleStringD1Ev>
    value_.functionPointerValue_ = value;
 801fcaa:	687b      	ldr	r3, [r7, #4]
 801fcac:	683a      	ldr	r2, [r7, #0]
 801fcae:	619a      	str	r2, [r3, #24]
}
 801fcb0:	bf00      	nop
 801fcb2:	3714      	adds	r7, #20
 801fcb4:	46bd      	mov	sp, r7
 801fcb6:	bd90      	pop	{r4, r7, pc}
 801fcb8:	08029370 	.word	0x08029370

0801fcbc <_ZN14MockNamedValue8setValueEPKc>:

void MockNamedValue::setValue(const char* value)
{
 801fcbc:	b590      	push	{r4, r7, lr}
 801fcbe:	b085      	sub	sp, #20
 801fcc0:	af00      	add	r7, sp, #0
 801fcc2:	6078      	str	r0, [r7, #4]
 801fcc4:	6039      	str	r1, [r7, #0]
    type_ = "const char*";
 801fcc6:	687b      	ldr	r3, [r7, #4]
 801fcc8:	f103 040c 	add.w	r4, r3, #12
 801fccc:	f107 0308 	add.w	r3, r7, #8
 801fcd0:	490a      	ldr	r1, [pc, #40]	; (801fcfc <_ZN14MockNamedValue8setValueEPKc+0x40>)
 801fcd2:	4618      	mov	r0, r3
 801fcd4:	f7ef f8e9 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801fcd8:	f107 0308 	add.w	r3, r7, #8
 801fcdc:	4619      	mov	r1, r3
 801fcde:	4620      	mov	r0, r4
 801fce0:	f7ef f94f 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 801fce4:	f107 0308 	add.w	r3, r7, #8
 801fce8:	4618      	mov	r0, r3
 801fcea:	f7ef fc96 	bl	800f61a <_ZN12SimpleStringD1Ev>
    value_.stringValue_ = value;
 801fcee:	687b      	ldr	r3, [r7, #4]
 801fcf0:	683a      	ldr	r2, [r7, #0]
 801fcf2:	619a      	str	r2, [r3, #24]
}
 801fcf4:	bf00      	nop
 801fcf6:	3714      	adds	r7, #20
 801fcf8:	46bd      	mov	sp, r7
 801fcfa:	bd90      	pop	{r4, r7, pc}
 801fcfc:	0802937c 	.word	0x0802937c

0801fd00 <_ZN14MockNamedValue15setMemoryBufferEPKhj>:

void MockNamedValue::setMemoryBuffer(const unsigned char* value, size_t size)
{
 801fd00:	b590      	push	{r4, r7, lr}
 801fd02:	b087      	sub	sp, #28
 801fd04:	af00      	add	r7, sp, #0
 801fd06:	60f8      	str	r0, [r7, #12]
 801fd08:	60b9      	str	r1, [r7, #8]
 801fd0a:	607a      	str	r2, [r7, #4]
    type_ = "const unsigned char*";
 801fd0c:	68fb      	ldr	r3, [r7, #12]
 801fd0e:	f103 040c 	add.w	r4, r3, #12
 801fd12:	f107 0310 	add.w	r3, r7, #16
 801fd16:	490c      	ldr	r1, [pc, #48]	; (801fd48 <_ZN14MockNamedValue15setMemoryBufferEPKhj+0x48>)
 801fd18:	4618      	mov	r0, r3
 801fd1a:	f7ef f8c6 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801fd1e:	f107 0310 	add.w	r3, r7, #16
 801fd22:	4619      	mov	r1, r3
 801fd24:	4620      	mov	r0, r4
 801fd26:	f7ef f92c 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 801fd2a:	f107 0310 	add.w	r3, r7, #16
 801fd2e:	4618      	mov	r0, r3
 801fd30:	f7ef fc73 	bl	800f61a <_ZN12SimpleStringD1Ev>
    value_.memoryBufferValue_ = value;
 801fd34:	68fb      	ldr	r3, [r7, #12]
 801fd36:	68ba      	ldr	r2, [r7, #8]
 801fd38:	619a      	str	r2, [r3, #24]
    size_ = size;
 801fd3a:	68fb      	ldr	r3, [r7, #12]
 801fd3c:	687a      	ldr	r2, [r7, #4]
 801fd3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 801fd40:	bf00      	nop
 801fd42:	371c      	adds	r7, #28
 801fd44:	46bd      	mov	sp, r7
 801fd46:	bd90      	pop	{r4, r7, pc}
 801fd48:	08029388 	.word	0x08029388

0801fd4c <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>:

void MockNamedValue::setConstObjectPointer(const SimpleString& type, const void* objectPtr)
{
 801fd4c:	b580      	push	{r7, lr}
 801fd4e:	b084      	sub	sp, #16
 801fd50:	af00      	add	r7, sp, #0
 801fd52:	60f8      	str	r0, [r7, #12]
 801fd54:	60b9      	str	r1, [r7, #8]
 801fd56:	607a      	str	r2, [r7, #4]
    type_ = type;
 801fd58:	68fb      	ldr	r3, [r7, #12]
 801fd5a:	330c      	adds	r3, #12
 801fd5c:	68b9      	ldr	r1, [r7, #8]
 801fd5e:	4618      	mov	r0, r3
 801fd60:	f7ef f90f 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
    value_.constObjectPointerValue_ = objectPtr;
 801fd64:	68fb      	ldr	r3, [r7, #12]
 801fd66:	687a      	ldr	r2, [r7, #4]
 801fd68:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801fd6a:	4b11      	ldr	r3, [pc, #68]	; (801fdb0 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801fd6c:	681b      	ldr	r3, [r3, #0]
 801fd6e:	2b00      	cmp	r3, #0
 801fd70:	d019      	beq.n	801fda6 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801fd72:	4b0f      	ldr	r3, [pc, #60]	; (801fdb0 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801fd74:	681a      	ldr	r2, [r3, #0]
 801fd76:	4b0e      	ldr	r3, [pc, #56]	; (801fdb0 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801fd78:	681b      	ldr	r3, [r3, #0]
 801fd7a:	681b      	ldr	r3, [r3, #0]
 801fd7c:	3314      	adds	r3, #20
 801fd7e:	681b      	ldr	r3, [r3, #0]
 801fd80:	68b9      	ldr	r1, [r7, #8]
 801fd82:	4610      	mov	r0, r2
 801fd84:	4798      	blx	r3
 801fd86:	4602      	mov	r2, r0
 801fd88:	68fb      	ldr	r3, [r7, #12]
 801fd8a:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801fd8c:	4b08      	ldr	r3, [pc, #32]	; (801fdb0 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801fd8e:	681a      	ldr	r2, [r3, #0]
 801fd90:	4b07      	ldr	r3, [pc, #28]	; (801fdb0 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801fd92:	681b      	ldr	r3, [r3, #0]
 801fd94:	681b      	ldr	r3, [r3, #0]
 801fd96:	3318      	adds	r3, #24
 801fd98:	681b      	ldr	r3, [r3, #0]
 801fd9a:	68b9      	ldr	r1, [r7, #8]
 801fd9c:	4610      	mov	r0, r2
 801fd9e:	4798      	blx	r3
 801fda0:	4602      	mov	r2, r0
 801fda2:	68fb      	ldr	r3, [r7, #12]
 801fda4:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801fda6:	bf00      	nop
 801fda8:	3710      	adds	r7, #16
 801fdaa:	46bd      	mov	sp, r7
 801fdac:	bd80      	pop	{r7, pc}
 801fdae:	bf00      	nop
 801fdb0:	20001038 	.word	0x20001038

0801fdb4 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv>:

void MockNamedValue::setObjectPointer(const SimpleString& type, void* objectPtr)
{
 801fdb4:	b580      	push	{r7, lr}
 801fdb6:	b084      	sub	sp, #16
 801fdb8:	af00      	add	r7, sp, #0
 801fdba:	60f8      	str	r0, [r7, #12]
 801fdbc:	60b9      	str	r1, [r7, #8]
 801fdbe:	607a      	str	r2, [r7, #4]
    type_ = type;
 801fdc0:	68fb      	ldr	r3, [r7, #12]
 801fdc2:	330c      	adds	r3, #12
 801fdc4:	68b9      	ldr	r1, [r7, #8]
 801fdc6:	4618      	mov	r0, r3
 801fdc8:	f7ef f8db 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
    value_.objectPointerValue_ = objectPtr;
 801fdcc:	68fb      	ldr	r3, [r7, #12]
 801fdce:	687a      	ldr	r2, [r7, #4]
 801fdd0:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801fdd2:	4b11      	ldr	r3, [pc, #68]	; (801fe18 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801fdd4:	681b      	ldr	r3, [r3, #0]
 801fdd6:	2b00      	cmp	r3, #0
 801fdd8:	d019      	beq.n	801fe0e <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801fdda:	4b0f      	ldr	r3, [pc, #60]	; (801fe18 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801fddc:	681a      	ldr	r2, [r3, #0]
 801fdde:	4b0e      	ldr	r3, [pc, #56]	; (801fe18 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801fde0:	681b      	ldr	r3, [r3, #0]
 801fde2:	681b      	ldr	r3, [r3, #0]
 801fde4:	3314      	adds	r3, #20
 801fde6:	681b      	ldr	r3, [r3, #0]
 801fde8:	68b9      	ldr	r1, [r7, #8]
 801fdea:	4610      	mov	r0, r2
 801fdec:	4798      	blx	r3
 801fdee:	4602      	mov	r2, r0
 801fdf0:	68fb      	ldr	r3, [r7, #12]
 801fdf2:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801fdf4:	4b08      	ldr	r3, [pc, #32]	; (801fe18 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801fdf6:	681a      	ldr	r2, [r3, #0]
 801fdf8:	4b07      	ldr	r3, [pc, #28]	; (801fe18 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801fdfa:	681b      	ldr	r3, [r3, #0]
 801fdfc:	681b      	ldr	r3, [r3, #0]
 801fdfe:	3318      	adds	r3, #24
 801fe00:	681b      	ldr	r3, [r3, #0]
 801fe02:	68b9      	ldr	r1, [r7, #8]
 801fe04:	4610      	mov	r0, r2
 801fe06:	4798      	blx	r3
 801fe08:	4602      	mov	r2, r0
 801fe0a:	68fb      	ldr	r3, [r7, #12]
 801fe0c:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801fe0e:	bf00      	nop
 801fe10:	3710      	adds	r7, #16
 801fe12:	46bd      	mov	sp, r7
 801fe14:	bd80      	pop	{r7, pc}
 801fe16:	bf00      	nop
 801fe18:	20001038 	.word	0x20001038

0801fe1c <_ZN14MockNamedValue7setSizeEj>:

void MockNamedValue::setSize(size_t size)
{
 801fe1c:	b480      	push	{r7}
 801fe1e:	b083      	sub	sp, #12
 801fe20:	af00      	add	r7, sp, #0
 801fe22:	6078      	str	r0, [r7, #4]
 801fe24:	6039      	str	r1, [r7, #0]
    size_ = size;
 801fe26:	687b      	ldr	r3, [r7, #4]
 801fe28:	683a      	ldr	r2, [r7, #0]
 801fe2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 801fe2c:	bf00      	nop
 801fe2e:	370c      	adds	r7, #12
 801fe30:	46bd      	mov	sp, r7
 801fe32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe36:	4770      	bx	lr

0801fe38 <_ZN14MockNamedValue7setNameEPKc>:

void MockNamedValue::setName(const char* name)
{
 801fe38:	b590      	push	{r4, r7, lr}
 801fe3a:	b085      	sub	sp, #20
 801fe3c:	af00      	add	r7, sp, #0
 801fe3e:	6078      	str	r0, [r7, #4]
 801fe40:	6039      	str	r1, [r7, #0]
    name_ = name;
 801fe42:	687b      	ldr	r3, [r7, #4]
 801fe44:	1d1c      	adds	r4, r3, #4
 801fe46:	f107 0308 	add.w	r3, r7, #8
 801fe4a:	6839      	ldr	r1, [r7, #0]
 801fe4c:	4618      	mov	r0, r3
 801fe4e:	f7ef f82c 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801fe52:	f107 0308 	add.w	r3, r7, #8
 801fe56:	4619      	mov	r1, r3
 801fe58:	4620      	mov	r0, r4
 801fe5a:	f7ef f892 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
 801fe5e:	f107 0308 	add.w	r3, r7, #8
 801fe62:	4618      	mov	r0, r3
 801fe64:	f7ef fbd9 	bl	800f61a <_ZN12SimpleStringD1Ev>
}
 801fe68:	bf00      	nop
 801fe6a:	3714      	adds	r7, #20
 801fe6c:	46bd      	mov	sp, r7
 801fe6e:	bd90      	pop	{r4, r7, pc}

0801fe70 <_ZNK14MockNamedValue7getNameEv>:

SimpleString MockNamedValue::getName() const
{
 801fe70:	b580      	push	{r7, lr}
 801fe72:	b082      	sub	sp, #8
 801fe74:	af00      	add	r7, sp, #0
 801fe76:	6078      	str	r0, [r7, #4]
 801fe78:	6039      	str	r1, [r7, #0]
    return name_;
 801fe7a:	683b      	ldr	r3, [r7, #0]
 801fe7c:	3304      	adds	r3, #4
 801fe7e:	4619      	mov	r1, r3
 801fe80:	6878      	ldr	r0, [r7, #4]
 801fe82:	f7ef f866 	bl	800ef52 <_ZN12SimpleStringC1ERKS_>
}
 801fe86:	6878      	ldr	r0, [r7, #4]
 801fe88:	3708      	adds	r7, #8
 801fe8a:	46bd      	mov	sp, r7
 801fe8c:	bd80      	pop	{r7, pc}

0801fe8e <_ZNK14MockNamedValue7getTypeEv>:

SimpleString MockNamedValue::getType() const
{
 801fe8e:	b580      	push	{r7, lr}
 801fe90:	b082      	sub	sp, #8
 801fe92:	af00      	add	r7, sp, #0
 801fe94:	6078      	str	r0, [r7, #4]
 801fe96:	6039      	str	r1, [r7, #0]
    return type_;
 801fe98:	683b      	ldr	r3, [r7, #0]
 801fe9a:	330c      	adds	r3, #12
 801fe9c:	4619      	mov	r1, r3
 801fe9e:	6878      	ldr	r0, [r7, #4]
 801fea0:	f7ef f857 	bl	800ef52 <_ZN12SimpleStringC1ERKS_>
}
 801fea4:	6878      	ldr	r0, [r7, #4]
 801fea6:	3708      	adds	r7, #8
 801fea8:	46bd      	mov	sp, r7
 801feaa:	bd80      	pop	{r7, pc}

0801feac <_ZNK14MockNamedValue12getBoolValueEv>:

bool MockNamedValue::getBoolValue() const
{
 801feac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801feae:	b087      	sub	sp, #28
 801feb0:	af04      	add	r7, sp, #16
 801feb2:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("bool", type_.asCharString());
 801feb4:	f7f6 fbdc 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 801feb8:	4604      	mov	r4, r0
 801feba:	6823      	ldr	r3, [r4, #0]
 801febc:	3324      	adds	r3, #36	; 0x24
 801febe:	681d      	ldr	r5, [r3, #0]
 801fec0:	687b      	ldr	r3, [r7, #4]
 801fec2:	330c      	adds	r3, #12
 801fec4:	4618      	mov	r0, r3
 801fec6:	f7ef fb7b 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 801feca:	4606      	mov	r6, r0
 801fecc:	f7f6 fbe0 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801fed0:	4603      	mov	r3, r0
 801fed2:	9302      	str	r3, [sp, #8]
 801fed4:	23c8      	movs	r3, #200	; 0xc8
 801fed6:	9301      	str	r3, [sp, #4]
 801fed8:	4b06      	ldr	r3, [pc, #24]	; (801fef4 <_ZNK14MockNamedValue12getBoolValueEv+0x48>)
 801feda:	9300      	str	r3, [sp, #0]
 801fedc:	2300      	movs	r3, #0
 801fede:	4632      	mov	r2, r6
 801fee0:	4905      	ldr	r1, [pc, #20]	; (801fef8 <_ZNK14MockNamedValue12getBoolValueEv+0x4c>)
 801fee2:	4620      	mov	r0, r4
 801fee4:	47a8      	blx	r5
    return value_.boolValue_;
 801fee6:	687b      	ldr	r3, [r7, #4]
 801fee8:	7e1b      	ldrb	r3, [r3, #24]
}
 801feea:	4618      	mov	r0, r3
 801feec:	370c      	adds	r7, #12
 801feee:	46bd      	mov	sp, r7
 801fef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fef2:	bf00      	nop
 801fef4:	080292ec 	.word	0x080292ec
 801fef8:	080292b4 	.word	0x080292b4

0801fefc <_ZNK14MockNamedValue19getUnsignedIntValueEv>:

unsigned int MockNamedValue::getUnsignedIntValue() const
{
 801fefc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fefe:	b089      	sub	sp, #36	; 0x24
 801ff00:	af04      	add	r7, sp, #16
 801ff02:	6078      	str	r0, [r7, #4]
    if(type_ == "int" && value_.intValue_ >= 0)
 801ff04:	687b      	ldr	r3, [r7, #4]
 801ff06:	f103 040c 	add.w	r4, r3, #12
 801ff0a:	f107 0308 	add.w	r3, r7, #8
 801ff0e:	4920      	ldr	r1, [pc, #128]	; (801ff90 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x94>)
 801ff10:	4618      	mov	r0, r3
 801ff12:	f7ee ffca 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 801ff16:	2501      	movs	r5, #1
 801ff18:	f107 0308 	add.w	r3, r7, #8
 801ff1c:	4619      	mov	r1, r3
 801ff1e:	4620      	mov	r0, r4
 801ff20:	f7ef fb87 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 801ff24:	4603      	mov	r3, r0
 801ff26:	2b00      	cmp	r3, #0
 801ff28:	d005      	beq.n	801ff36 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801ff2a:	687b      	ldr	r3, [r7, #4]
 801ff2c:	699b      	ldr	r3, [r3, #24]
 801ff2e:	2b00      	cmp	r3, #0
 801ff30:	db01      	blt.n	801ff36 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801ff32:	2401      	movs	r4, #1
 801ff34:	e000      	b.n	801ff38 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3c>
 801ff36:	2400      	movs	r4, #0
 801ff38:	2d00      	cmp	r5, #0
 801ff3a:	d004      	beq.n	801ff46 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x4a>
 801ff3c:	f107 0308 	add.w	r3, r7, #8
 801ff40:	4618      	mov	r0, r3
 801ff42:	f7ef fb6a 	bl	800f61a <_ZN12SimpleStringD1Ev>
 801ff46:	2c00      	cmp	r4, #0
 801ff48:	d002      	beq.n	801ff50 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x54>
        return (unsigned int)value_.intValue_;
 801ff4a:	687b      	ldr	r3, [r7, #4]
 801ff4c:	699b      	ldr	r3, [r3, #24]
 801ff4e:	e01a      	b.n	801ff86 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x8a>
    else
    {
        STRCMP_EQUAL("unsigned int", type_.asCharString());
 801ff50:	f7f6 fb8e 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 801ff54:	4604      	mov	r4, r0
 801ff56:	6823      	ldr	r3, [r4, #0]
 801ff58:	3324      	adds	r3, #36	; 0x24
 801ff5a:	681d      	ldr	r5, [r3, #0]
 801ff5c:	687b      	ldr	r3, [r7, #4]
 801ff5e:	330c      	adds	r3, #12
 801ff60:	4618      	mov	r0, r3
 801ff62:	f7ef fb2d 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 801ff66:	4606      	mov	r6, r0
 801ff68:	f7f6 fb92 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ff6c:	4603      	mov	r3, r0
 801ff6e:	9302      	str	r3, [sp, #8]
 801ff70:	23d2      	movs	r3, #210	; 0xd2
 801ff72:	9301      	str	r3, [sp, #4]
 801ff74:	4b07      	ldr	r3, [pc, #28]	; (801ff94 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x98>)
 801ff76:	9300      	str	r3, [sp, #0]
 801ff78:	2300      	movs	r3, #0
 801ff7a:	4632      	mov	r2, r6
 801ff7c:	4906      	ldr	r1, [pc, #24]	; (801ff98 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x9c>)
 801ff7e:	4620      	mov	r0, r4
 801ff80:	47a8      	blx	r5
        return value_.unsignedIntValue_;
 801ff82:	687b      	ldr	r3, [r7, #4]
 801ff84:	699b      	ldr	r3, [r3, #24]
    }
}
 801ff86:	4618      	mov	r0, r3
 801ff88:	3714      	adds	r7, #20
 801ff8a:	46bd      	mov	sp, r7
 801ff8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ff8e:	bf00      	nop
 801ff90:	080292b0 	.word	0x080292b0
 801ff94:	080292ec 	.word	0x080292ec
 801ff98:	080292bc 	.word	0x080292bc

0801ff9c <_ZNK14MockNamedValue11getIntValueEv>:

int MockNamedValue::getIntValue() const
{
 801ff9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ff9e:	b087      	sub	sp, #28
 801ffa0:	af04      	add	r7, sp, #16
 801ffa2:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("int", type_.asCharString());
 801ffa4:	f7f6 fb64 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 801ffa8:	4604      	mov	r4, r0
 801ffaa:	6823      	ldr	r3, [r4, #0]
 801ffac:	3324      	adds	r3, #36	; 0x24
 801ffae:	681d      	ldr	r5, [r3, #0]
 801ffb0:	687b      	ldr	r3, [r7, #4]
 801ffb2:	330c      	adds	r3, #12
 801ffb4:	4618      	mov	r0, r3
 801ffb6:	f7ef fb03 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 801ffba:	4606      	mov	r6, r0
 801ffbc:	f7f6 fb68 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ffc0:	4603      	mov	r3, r0
 801ffc2:	9302      	str	r3, [sp, #8]
 801ffc4:	23d9      	movs	r3, #217	; 0xd9
 801ffc6:	9301      	str	r3, [sp, #4]
 801ffc8:	4b06      	ldr	r3, [pc, #24]	; (801ffe4 <_ZNK14MockNamedValue11getIntValueEv+0x48>)
 801ffca:	9300      	str	r3, [sp, #0]
 801ffcc:	2300      	movs	r3, #0
 801ffce:	4632      	mov	r2, r6
 801ffd0:	4905      	ldr	r1, [pc, #20]	; (801ffe8 <_ZNK14MockNamedValue11getIntValueEv+0x4c>)
 801ffd2:	4620      	mov	r0, r4
 801ffd4:	47a8      	blx	r5
    return value_.intValue_;
 801ffd6:	687b      	ldr	r3, [r7, #4]
 801ffd8:	699b      	ldr	r3, [r3, #24]
}
 801ffda:	4618      	mov	r0, r3
 801ffdc:	370c      	adds	r7, #12
 801ffde:	46bd      	mov	sp, r7
 801ffe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ffe2:	bf00      	nop
 801ffe4:	080292ec 	.word	0x080292ec
 801ffe8:	080292b0 	.word	0x080292b0

0801ffec <_ZNK14MockNamedValue15getLongIntValueEv>:

long int MockNamedValue::getLongIntValue() const
{
 801ffec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ffee:	b08b      	sub	sp, #44	; 0x2c
 801fff0:	af04      	add	r7, sp, #16
 801fff2:	6078      	str	r0, [r7, #4]
    if(type_ == "int")
 801fff4:	687b      	ldr	r3, [r7, #4]
 801fff6:	f103 040c 	add.w	r4, r3, #12
 801fffa:	f107 0308 	add.w	r3, r7, #8
 801fffe:	4928      	ldr	r1, [pc, #160]	; (80200a0 <_ZNK14MockNamedValue15getLongIntValueEv+0xb4>)
 8020000:	4618      	mov	r0, r3
 8020002:	f7ee ff52 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8020006:	f107 0308 	add.w	r3, r7, #8
 802000a:	4619      	mov	r1, r3
 802000c:	4620      	mov	r0, r4
 802000e:	f7ef fb10 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8020012:	4603      	mov	r3, r0
 8020014:	461c      	mov	r4, r3
 8020016:	f107 0308 	add.w	r3, r7, #8
 802001a:	4618      	mov	r0, r3
 802001c:	f7ef fafd 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8020020:	2c00      	cmp	r4, #0
 8020022:	d002      	beq.n	802002a <_ZNK14MockNamedValue15getLongIntValueEv+0x3e>
        return value_.intValue_;
 8020024:	687b      	ldr	r3, [r7, #4]
 8020026:	699b      	ldr	r3, [r3, #24]
 8020028:	e035      	b.n	8020096 <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else if(type_ == "unsigned int")
 802002a:	687b      	ldr	r3, [r7, #4]
 802002c:	f103 040c 	add.w	r4, r3, #12
 8020030:	f107 0310 	add.w	r3, r7, #16
 8020034:	491b      	ldr	r1, [pc, #108]	; (80200a4 <_ZNK14MockNamedValue15getLongIntValueEv+0xb8>)
 8020036:	4618      	mov	r0, r3
 8020038:	f7ee ff37 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 802003c:	f107 0310 	add.w	r3, r7, #16
 8020040:	4619      	mov	r1, r3
 8020042:	4620      	mov	r0, r4
 8020044:	f7ef faf5 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8020048:	4603      	mov	r3, r0
 802004a:	461c      	mov	r4, r3
 802004c:	f107 0310 	add.w	r3, r7, #16
 8020050:	4618      	mov	r0, r3
 8020052:	f7ef fae2 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8020056:	2c00      	cmp	r4, #0
 8020058:	d002      	beq.n	8020060 <_ZNK14MockNamedValue15getLongIntValueEv+0x74>
        return (long int)value_.unsignedIntValue_;
 802005a:	687b      	ldr	r3, [r7, #4]
 802005c:	699b      	ldr	r3, [r3, #24]
 802005e:	e01a      	b.n	8020096 <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else
    {
        STRCMP_EQUAL("long int", type_.asCharString());
 8020060:	f7f6 fb06 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8020064:	4604      	mov	r4, r0
 8020066:	6823      	ldr	r3, [r4, #0]
 8020068:	3324      	adds	r3, #36	; 0x24
 802006a:	681d      	ldr	r5, [r3, #0]
 802006c:	687b      	ldr	r3, [r7, #4]
 802006e:	330c      	adds	r3, #12
 8020070:	4618      	mov	r0, r3
 8020072:	f7ef faa5 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 8020076:	4606      	mov	r6, r0
 8020078:	f7f6 fb0a 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 802007c:	4603      	mov	r3, r0
 802007e:	9302      	str	r3, [sp, #8]
 8020080:	23e5      	movs	r3, #229	; 0xe5
 8020082:	9301      	str	r3, [sp, #4]
 8020084:	4b08      	ldr	r3, [pc, #32]	; (80200a8 <_ZNK14MockNamedValue15getLongIntValueEv+0xbc>)
 8020086:	9300      	str	r3, [sp, #0]
 8020088:	2300      	movs	r3, #0
 802008a:	4632      	mov	r2, r6
 802008c:	4907      	ldr	r1, [pc, #28]	; (80200ac <_ZNK14MockNamedValue15getLongIntValueEv+0xc0>)
 802008e:	4620      	mov	r0, r4
 8020090:	47a8      	blx	r5
        return value_.longIntValue_;
 8020092:	687b      	ldr	r3, [r7, #4]
 8020094:	699b      	ldr	r3, [r3, #24]
    }
}
 8020096:	4618      	mov	r0, r3
 8020098:	371c      	adds	r7, #28
 802009a:	46bd      	mov	sp, r7
 802009c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802009e:	bf00      	nop
 80200a0:	080292b0 	.word	0x080292b0
 80200a4:	080292bc 	.word	0x080292bc
 80200a8:	080292ec 	.word	0x080292ec
 80200ac:	080292cc 	.word	0x080292cc

080200b0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>:

unsigned long int MockNamedValue::getUnsignedLongIntValue() const
{
 80200b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80200b2:	b08d      	sub	sp, #52	; 0x34
 80200b4:	af04      	add	r7, sp, #16
 80200b6:	6078      	str	r0, [r7, #4]
    if(type_ == "unsigned int")
 80200b8:	687b      	ldr	r3, [r7, #4]
 80200ba:	f103 040c 	add.w	r4, r3, #12
 80200be:	f107 0308 	add.w	r3, r7, #8
 80200c2:	4940      	ldr	r1, [pc, #256]	; (80201c4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x114>)
 80200c4:	4618      	mov	r0, r3
 80200c6:	f7ee fef0 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80200ca:	f107 0308 	add.w	r3, r7, #8
 80200ce:	4619      	mov	r1, r3
 80200d0:	4620      	mov	r0, r4
 80200d2:	f7ef faae 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 80200d6:	4603      	mov	r3, r0
 80200d8:	461c      	mov	r4, r3
 80200da:	f107 0308 	add.w	r3, r7, #8
 80200de:	4618      	mov	r0, r3
 80200e0:	f7ef fa9b 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80200e4:	2c00      	cmp	r4, #0
 80200e6:	d002      	beq.n	80200ee <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x3e>
        return value_.unsignedIntValue_;
 80200e8:	687b      	ldr	r3, [r7, #4]
 80200ea:	699b      	ldr	r3, [r3, #24]
 80200ec:	e066      	b.n	80201bc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "int" && value_.intValue_ >= 0)
 80200ee:	687b      	ldr	r3, [r7, #4]
 80200f0:	f103 040c 	add.w	r4, r3, #12
 80200f4:	f107 0310 	add.w	r3, r7, #16
 80200f8:	4933      	ldr	r1, [pc, #204]	; (80201c8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x118>)
 80200fa:	4618      	mov	r0, r3
 80200fc:	f7ee fed5 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8020100:	2501      	movs	r5, #1
 8020102:	f107 0310 	add.w	r3, r7, #16
 8020106:	4619      	mov	r1, r3
 8020108:	4620      	mov	r0, r4
 802010a:	f7ef fa92 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 802010e:	4603      	mov	r3, r0
 8020110:	2b00      	cmp	r3, #0
 8020112:	d005      	beq.n	8020120 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 8020114:	687b      	ldr	r3, [r7, #4]
 8020116:	699b      	ldr	r3, [r3, #24]
 8020118:	2b00      	cmp	r3, #0
 802011a:	db01      	blt.n	8020120 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 802011c:	2401      	movs	r4, #1
 802011e:	e000      	b.n	8020122 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x72>
 8020120:	2400      	movs	r4, #0
 8020122:	2d00      	cmp	r5, #0
 8020124:	d004      	beq.n	8020130 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x80>
 8020126:	f107 0310 	add.w	r3, r7, #16
 802012a:	4618      	mov	r0, r3
 802012c:	f7ef fa75 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8020130:	2c00      	cmp	r4, #0
 8020132:	d002      	beq.n	802013a <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x8a>
        return (unsigned long int)value_.intValue_;
 8020134:	687b      	ldr	r3, [r7, #4]
 8020136:	699b      	ldr	r3, [r3, #24]
 8020138:	e040      	b.n	80201bc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "long int" && value_.longIntValue_ >= 0)
 802013a:	687b      	ldr	r3, [r7, #4]
 802013c:	f103 040c 	add.w	r4, r3, #12
 8020140:	f107 0318 	add.w	r3, r7, #24
 8020144:	4921      	ldr	r1, [pc, #132]	; (80201cc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x11c>)
 8020146:	4618      	mov	r0, r3
 8020148:	f7ee feaf 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 802014c:	2501      	movs	r5, #1
 802014e:	f107 0318 	add.w	r3, r7, #24
 8020152:	4619      	mov	r1, r3
 8020154:	4620      	mov	r0, r4
 8020156:	f7ef fa6c 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 802015a:	4603      	mov	r3, r0
 802015c:	2b00      	cmp	r3, #0
 802015e:	d005      	beq.n	802016c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 8020160:	687b      	ldr	r3, [r7, #4]
 8020162:	699b      	ldr	r3, [r3, #24]
 8020164:	2b00      	cmp	r3, #0
 8020166:	db01      	blt.n	802016c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 8020168:	2401      	movs	r4, #1
 802016a:	e000      	b.n	802016e <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbe>
 802016c:	2400      	movs	r4, #0
 802016e:	2d00      	cmp	r5, #0
 8020170:	d004      	beq.n	802017c <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xcc>
 8020172:	f107 0318 	add.w	r3, r7, #24
 8020176:	4618      	mov	r0, r3
 8020178:	f7ef fa4f 	bl	800f61a <_ZN12SimpleStringD1Ev>
 802017c:	2c00      	cmp	r4, #0
 802017e:	d002      	beq.n	8020186 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xd6>
        return (unsigned long int)value_.longIntValue_;
 8020180:	687b      	ldr	r3, [r7, #4]
 8020182:	699b      	ldr	r3, [r3, #24]
 8020184:	e01a      	b.n	80201bc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else
    {
        STRCMP_EQUAL("unsigned long int", type_.asCharString());
 8020186:	f7f6 fa73 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 802018a:	4604      	mov	r4, r0
 802018c:	6823      	ldr	r3, [r4, #0]
 802018e:	3324      	adds	r3, #36	; 0x24
 8020190:	681d      	ldr	r5, [r3, #0]
 8020192:	687b      	ldr	r3, [r7, #4]
 8020194:	330c      	adds	r3, #12
 8020196:	4618      	mov	r0, r3
 8020198:	f7ef fa12 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 802019c:	4606      	mov	r6, r0
 802019e:	f7f6 fa77 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80201a2:	4603      	mov	r3, r0
 80201a4:	9302      	str	r3, [sp, #8]
 80201a6:	23f4      	movs	r3, #244	; 0xf4
 80201a8:	9301      	str	r3, [sp, #4]
 80201aa:	4b09      	ldr	r3, [pc, #36]	; (80201d0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x120>)
 80201ac:	9300      	str	r3, [sp, #0]
 80201ae:	2300      	movs	r3, #0
 80201b0:	4632      	mov	r2, r6
 80201b2:	4908      	ldr	r1, [pc, #32]	; (80201d4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x124>)
 80201b4:	4620      	mov	r0, r4
 80201b6:	47a8      	blx	r5
        return value_.unsignedLongIntValue_;
 80201b8:	687b      	ldr	r3, [r7, #4]
 80201ba:	699b      	ldr	r3, [r3, #24]
    }
}
 80201bc:	4618      	mov	r0, r3
 80201be:	3724      	adds	r7, #36	; 0x24
 80201c0:	46bd      	mov	sp, r7
 80201c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80201c4:	080292bc 	.word	0x080292bc
 80201c8:	080292b0 	.word	0x080292b0
 80201cc:	080292cc 	.word	0x080292cc
 80201d0:	080292ec 	.word	0x080292ec
 80201d4:	080292d8 	.word	0x080292d8

080201d8 <_ZNK14MockNamedValue19getLongLongIntValueEv>:
}

#else

cpputest_longlong MockNamedValue::getLongLongIntValue() const
{
 80201d8:	b5b0      	push	{r4, r5, r7, lr}
 80201da:	b084      	sub	sp, #16
 80201dc:	af02      	add	r7, sp, #8
 80201de:	6078      	str	r0, [r7, #4]
 80201e0:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 80201e2:	f7f6 fa45 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 80201e6:	4604      	mov	r4, r0
 80201e8:	6823      	ldr	r3, [r4, #0]
 80201ea:	3368      	adds	r3, #104	; 0x68
 80201ec:	681d      	ldr	r5, [r3, #0]
 80201ee:	f7f6 fa4f 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80201f2:	4603      	mov	r3, r0
 80201f4:	9300      	str	r3, [sp, #0]
 80201f6:	f240 1323 	movw	r3, #291	; 0x123
 80201fa:	4a06      	ldr	r2, [pc, #24]	; (8020214 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x3c>)
 80201fc:	4906      	ldr	r1, [pc, #24]	; (8020218 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x40>)
 80201fe:	4620      	mov	r0, r4
 8020200:	47a8      	blx	r5
    return cpputest_longlong(0);
 8020202:	2100      	movs	r1, #0
 8020204:	6878      	ldr	r0, [r7, #4]
 8020206:	f7ec fe87 	bl	800cf18 <_ZN17cpputest_longlongC1Ei>
}
 802020a:	6878      	ldr	r0, [r7, #4]
 802020c:	3708      	adds	r7, #8
 802020e:	46bd      	mov	sp, r7
 8020210:	bdb0      	pop	{r4, r5, r7, pc}
 8020212:	bf00      	nop
 8020214:	080292ec 	.word	0x080292ec
 8020218:	08029308 	.word	0x08029308

0802021c <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockNamedValue::getUnsignedLongLongIntValue() const
{
 802021c:	b5b0      	push	{r4, r5, r7, lr}
 802021e:	b084      	sub	sp, #16
 8020220:	af02      	add	r7, sp, #8
 8020222:	6078      	str	r0, [r7, #4]
 8020224:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 8020226:	f7f6 fa23 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 802022a:	4604      	mov	r4, r0
 802022c:	6823      	ldr	r3, [r4, #0]
 802022e:	3368      	adds	r3, #104	; 0x68
 8020230:	681d      	ldr	r5, [r3, #0]
 8020232:	f7f6 fa2d 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8020236:	4603      	mov	r3, r0
 8020238:	9300      	str	r3, [sp, #0]
 802023a:	f240 1329 	movw	r3, #297	; 0x129
 802023e:	4a06      	ldr	r2, [pc, #24]	; (8020258 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x3c>)
 8020240:	4906      	ldr	r1, [pc, #24]	; (802025c <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x40>)
 8020242:	4620      	mov	r0, r4
 8020244:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8020246:	2100      	movs	r1, #0
 8020248:	6878      	ldr	r0, [r7, #4]
 802024a:	f7ec fe71 	bl	800cf30 <_ZN18cpputest_ulonglongC1Ei>
}
 802024e:	6878      	ldr	r0, [r7, #4]
 8020250:	3708      	adds	r7, #8
 8020252:	46bd      	mov	sp, r7
 8020254:	bdb0      	pop	{r4, r5, r7, pc}
 8020256:	bf00      	nop
 8020258:	080292ec 	.word	0x080292ec
 802025c:	08029328 	.word	0x08029328

08020260 <_ZNK14MockNamedValue14getDoubleValueEv>:

#endif

double MockNamedValue::getDoubleValue() const
{
 8020260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020262:	b087      	sub	sp, #28
 8020264:	af04      	add	r7, sp, #16
 8020266:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 8020268:	f7f6 fa02 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 802026c:	4604      	mov	r4, r0
 802026e:	6823      	ldr	r3, [r4, #0]
 8020270:	3324      	adds	r3, #36	; 0x24
 8020272:	681d      	ldr	r5, [r3, #0]
 8020274:	687b      	ldr	r3, [r7, #4]
 8020276:	330c      	adds	r3, #12
 8020278:	4618      	mov	r0, r3
 802027a:	f7ef f9a1 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 802027e:	4606      	mov	r6, r0
 8020280:	f7f6 fa06 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8020284:	4603      	mov	r3, r0
 8020286:	9302      	str	r3, [sp, #8]
 8020288:	f240 1331 	movw	r3, #305	; 0x131
 802028c:	9301      	str	r3, [sp, #4]
 802028e:	4b09      	ldr	r3, [pc, #36]	; (80202b4 <_ZNK14MockNamedValue14getDoubleValueEv+0x54>)
 8020290:	9300      	str	r3, [sp, #0]
 8020292:	2300      	movs	r3, #0
 8020294:	4632      	mov	r2, r6
 8020296:	4908      	ldr	r1, [pc, #32]	; (80202b8 <_ZNK14MockNamedValue14getDoubleValueEv+0x58>)
 8020298:	4620      	mov	r0, r4
 802029a:	47a8      	blx	r5
    return value_.doubleValue_.value;
 802029c:	687b      	ldr	r3, [r7, #4]
 802029e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80202a2:	ec43 2b17 	vmov	d7, r2, r3
}
 80202a6:	eeb0 0a47 	vmov.f32	s0, s14
 80202aa:	eef0 0a67 	vmov.f32	s1, s15
 80202ae:	370c      	adds	r7, #12
 80202b0:	46bd      	mov	sp, r7
 80202b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80202b4:	080292ec 	.word	0x080292ec
 80202b8:	08029354 	.word	0x08029354

080202bc <_ZNK14MockNamedValue18getDoubleToleranceEv>:

double MockNamedValue::getDoubleTolerance() const
{
 80202bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80202be:	b087      	sub	sp, #28
 80202c0:	af04      	add	r7, sp, #16
 80202c2:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 80202c4:	f7f6 f9d4 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 80202c8:	4604      	mov	r4, r0
 80202ca:	6823      	ldr	r3, [r4, #0]
 80202cc:	3324      	adds	r3, #36	; 0x24
 80202ce:	681d      	ldr	r5, [r3, #0]
 80202d0:	687b      	ldr	r3, [r7, #4]
 80202d2:	330c      	adds	r3, #12
 80202d4:	4618      	mov	r0, r3
 80202d6:	f7ef f973 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 80202da:	4606      	mov	r6, r0
 80202dc:	f7f6 f9d8 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80202e0:	4603      	mov	r3, r0
 80202e2:	9302      	str	r3, [sp, #8]
 80202e4:	f240 1337 	movw	r3, #311	; 0x137
 80202e8:	9301      	str	r3, [sp, #4]
 80202ea:	4b09      	ldr	r3, [pc, #36]	; (8020310 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x54>)
 80202ec:	9300      	str	r3, [sp, #0]
 80202ee:	2300      	movs	r3, #0
 80202f0:	4632      	mov	r2, r6
 80202f2:	4908      	ldr	r1, [pc, #32]	; (8020314 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x58>)
 80202f4:	4620      	mov	r0, r4
 80202f6:	47a8      	blx	r5
    return value_.doubleValue_.tolerance;
 80202f8:	687b      	ldr	r3, [r7, #4]
 80202fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80202fe:	ec43 2b17 	vmov	d7, r2, r3
}
 8020302:	eeb0 0a47 	vmov.f32	s0, s14
 8020306:	eef0 0a67 	vmov.f32	s1, s15
 802030a:	370c      	adds	r7, #12
 802030c:	46bd      	mov	sp, r7
 802030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020310:	080292ec 	.word	0x080292ec
 8020314:	08029354 	.word	0x08029354

08020318 <_ZNK14MockNamedValue14getStringValueEv>:

const char* MockNamedValue::getStringValue() const
{
 8020318:	b5f0      	push	{r4, r5, r6, r7, lr}
 802031a:	b087      	sub	sp, #28
 802031c:	af04      	add	r7, sp, #16
 802031e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const char*", type_.asCharString());
 8020320:	f7f6 f9a6 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8020324:	4604      	mov	r4, r0
 8020326:	6823      	ldr	r3, [r4, #0]
 8020328:	3324      	adds	r3, #36	; 0x24
 802032a:	681d      	ldr	r5, [r3, #0]
 802032c:	687b      	ldr	r3, [r7, #4]
 802032e:	330c      	adds	r3, #12
 8020330:	4618      	mov	r0, r3
 8020332:	f7ef f945 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 8020336:	4606      	mov	r6, r0
 8020338:	f7f6 f9aa 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 802033c:	4603      	mov	r3, r0
 802033e:	9302      	str	r3, [sp, #8]
 8020340:	f240 133d 	movw	r3, #317	; 0x13d
 8020344:	9301      	str	r3, [sp, #4]
 8020346:	4b06      	ldr	r3, [pc, #24]	; (8020360 <_ZNK14MockNamedValue14getStringValueEv+0x48>)
 8020348:	9300      	str	r3, [sp, #0]
 802034a:	2300      	movs	r3, #0
 802034c:	4632      	mov	r2, r6
 802034e:	4905      	ldr	r1, [pc, #20]	; (8020364 <_ZNK14MockNamedValue14getStringValueEv+0x4c>)
 8020350:	4620      	mov	r0, r4
 8020352:	47a8      	blx	r5
    return value_.stringValue_;
 8020354:	687b      	ldr	r3, [r7, #4]
 8020356:	699b      	ldr	r3, [r3, #24]
}
 8020358:	4618      	mov	r0, r3
 802035a:	370c      	adds	r7, #12
 802035c:	46bd      	mov	sp, r7
 802035e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020360:	080292ec 	.word	0x080292ec
 8020364:	0802937c 	.word	0x0802937c

08020368 <_ZNK14MockNamedValue15getPointerValueEv>:

void* MockNamedValue::getPointerValue() const
{
 8020368:	b5f0      	push	{r4, r5, r6, r7, lr}
 802036a:	b087      	sub	sp, #28
 802036c:	af04      	add	r7, sp, #16
 802036e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void*", type_.asCharString());
 8020370:	f7f6 f97e 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8020374:	4604      	mov	r4, r0
 8020376:	6823      	ldr	r3, [r4, #0]
 8020378:	3324      	adds	r3, #36	; 0x24
 802037a:	681d      	ldr	r5, [r3, #0]
 802037c:	687b      	ldr	r3, [r7, #4]
 802037e:	330c      	adds	r3, #12
 8020380:	4618      	mov	r0, r3
 8020382:	f7ef f91d 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 8020386:	4606      	mov	r6, r0
 8020388:	f7f6 f982 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 802038c:	4603      	mov	r3, r0
 802038e:	9302      	str	r3, [sp, #8]
 8020390:	f240 1343 	movw	r3, #323	; 0x143
 8020394:	9301      	str	r3, [sp, #4]
 8020396:	4b06      	ldr	r3, [pc, #24]	; (80203b0 <_ZNK14MockNamedValue15getPointerValueEv+0x48>)
 8020398:	9300      	str	r3, [sp, #0]
 802039a:	2300      	movs	r3, #0
 802039c:	4632      	mov	r2, r6
 802039e:	4905      	ldr	r1, [pc, #20]	; (80203b4 <_ZNK14MockNamedValue15getPointerValueEv+0x4c>)
 80203a0:	4620      	mov	r0, r4
 80203a2:	47a8      	blx	r5
    return value_.pointerValue_;
 80203a4:	687b      	ldr	r3, [r7, #4]
 80203a6:	699b      	ldr	r3, [r3, #24]
}
 80203a8:	4618      	mov	r0, r3
 80203aa:	370c      	adds	r7, #12
 80203ac:	46bd      	mov	sp, r7
 80203ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80203b0:	080292ec 	.word	0x080292ec
 80203b4:	0802935c 	.word	0x0802935c

080203b8 <_ZNK14MockNamedValue20getConstPointerValueEv>:

const void* MockNamedValue::getConstPointerValue() const
{
 80203b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80203ba:	b087      	sub	sp, #28
 80203bc:	af04      	add	r7, sp, #16
 80203be:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const void*", type_.asCharString());
 80203c0:	f7f6 f956 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 80203c4:	4604      	mov	r4, r0
 80203c6:	6823      	ldr	r3, [r4, #0]
 80203c8:	3324      	adds	r3, #36	; 0x24
 80203ca:	681d      	ldr	r5, [r3, #0]
 80203cc:	687b      	ldr	r3, [r7, #4]
 80203ce:	330c      	adds	r3, #12
 80203d0:	4618      	mov	r0, r3
 80203d2:	f7ef f8f5 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 80203d6:	4606      	mov	r6, r0
 80203d8:	f7f6 f95a 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80203dc:	4603      	mov	r3, r0
 80203de:	9302      	str	r3, [sp, #8]
 80203e0:	f240 1349 	movw	r3, #329	; 0x149
 80203e4:	9301      	str	r3, [sp, #4]
 80203e6:	4b06      	ldr	r3, [pc, #24]	; (8020400 <_ZNK14MockNamedValue20getConstPointerValueEv+0x48>)
 80203e8:	9300      	str	r3, [sp, #0]
 80203ea:	2300      	movs	r3, #0
 80203ec:	4632      	mov	r2, r6
 80203ee:	4905      	ldr	r1, [pc, #20]	; (8020404 <_ZNK14MockNamedValue20getConstPointerValueEv+0x4c>)
 80203f0:	4620      	mov	r0, r4
 80203f2:	47a8      	blx	r5
    return value_.pointerValue_;
 80203f4:	687b      	ldr	r3, [r7, #4]
 80203f6:	699b      	ldr	r3, [r3, #24]
}
 80203f8:	4618      	mov	r0, r3
 80203fa:	370c      	adds	r7, #12
 80203fc:	46bd      	mov	sp, r7
 80203fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020400:	080292ec 	.word	0x080292ec
 8020404:	08029364 	.word	0x08029364

08020408 <_ZNK14MockNamedValue23getFunctionPointerValueEv>:

void (*MockNamedValue::getFunctionPointerValue() const)()
{
 8020408:	b5f0      	push	{r4, r5, r6, r7, lr}
 802040a:	b087      	sub	sp, #28
 802040c:	af04      	add	r7, sp, #16
 802040e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void (*)()", type_.asCharString());
 8020410:	f7f6 f92e 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8020414:	4604      	mov	r4, r0
 8020416:	6823      	ldr	r3, [r4, #0]
 8020418:	3324      	adds	r3, #36	; 0x24
 802041a:	681d      	ldr	r5, [r3, #0]
 802041c:	687b      	ldr	r3, [r7, #4]
 802041e:	330c      	adds	r3, #12
 8020420:	4618      	mov	r0, r3
 8020422:	f7ef f8cd 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 8020426:	4606      	mov	r6, r0
 8020428:	f7f6 f932 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 802042c:	4603      	mov	r3, r0
 802042e:	9302      	str	r3, [sp, #8]
 8020430:	f240 134f 	movw	r3, #335	; 0x14f
 8020434:	9301      	str	r3, [sp, #4]
 8020436:	4b06      	ldr	r3, [pc, #24]	; (8020450 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x48>)
 8020438:	9300      	str	r3, [sp, #0]
 802043a:	2300      	movs	r3, #0
 802043c:	4632      	mov	r2, r6
 802043e:	4905      	ldr	r1, [pc, #20]	; (8020454 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x4c>)
 8020440:	4620      	mov	r0, r4
 8020442:	47a8      	blx	r5
    return value_.functionPointerValue_;
 8020444:	687b      	ldr	r3, [r7, #4]
 8020446:	699b      	ldr	r3, [r3, #24]
}
 8020448:	4618      	mov	r0, r3
 802044a:	370c      	adds	r7, #12
 802044c:	46bd      	mov	sp, r7
 802044e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020450:	080292ec 	.word	0x080292ec
 8020454:	08029370 	.word	0x08029370

08020458 <_ZNK14MockNamedValue15getMemoryBufferEv>:

const unsigned char* MockNamedValue::getMemoryBuffer() const
{
 8020458:	b5f0      	push	{r4, r5, r6, r7, lr}
 802045a:	b087      	sub	sp, #28
 802045c:	af04      	add	r7, sp, #16
 802045e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const unsigned char*", type_.asCharString());
 8020460:	f7f6 f906 	bl	8016670 <_ZN10UtestShell10getCurrentEv>
 8020464:	4604      	mov	r4, r0
 8020466:	6823      	ldr	r3, [r4, #0]
 8020468:	3324      	adds	r3, #36	; 0x24
 802046a:	681d      	ldr	r5, [r3, #0]
 802046c:	687b      	ldr	r3, [r7, #4]
 802046e:	330c      	adds	r3, #12
 8020470:	4618      	mov	r0, r3
 8020472:	f7ef f8a5 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 8020476:	4606      	mov	r6, r0
 8020478:	f7f6 f90a 	bl	8016690 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 802047c:	4603      	mov	r3, r0
 802047e:	9302      	str	r3, [sp, #8]
 8020480:	f240 1355 	movw	r3, #341	; 0x155
 8020484:	9301      	str	r3, [sp, #4]
 8020486:	4b06      	ldr	r3, [pc, #24]	; (80204a0 <_ZNK14MockNamedValue15getMemoryBufferEv+0x48>)
 8020488:	9300      	str	r3, [sp, #0]
 802048a:	2300      	movs	r3, #0
 802048c:	4632      	mov	r2, r6
 802048e:	4905      	ldr	r1, [pc, #20]	; (80204a4 <_ZNK14MockNamedValue15getMemoryBufferEv+0x4c>)
 8020490:	4620      	mov	r0, r4
 8020492:	47a8      	blx	r5
    return value_.memoryBufferValue_;
 8020494:	687b      	ldr	r3, [r7, #4]
 8020496:	699b      	ldr	r3, [r3, #24]
}
 8020498:	4618      	mov	r0, r3
 802049a:	370c      	adds	r7, #12
 802049c:	46bd      	mov	sp, r7
 802049e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80204a0:	080292ec 	.word	0x080292ec
 80204a4:	08029388 	.word	0x08029388

080204a8 <_ZNK14MockNamedValue21getConstObjectPointerEv>:

const void* MockNamedValue::getConstObjectPointer() const
{
 80204a8:	b480      	push	{r7}
 80204aa:	b083      	sub	sp, #12
 80204ac:	af00      	add	r7, sp, #0
 80204ae:	6078      	str	r0, [r7, #4]
    return value_.constObjectPointerValue_;
 80204b0:	687b      	ldr	r3, [r7, #4]
 80204b2:	699b      	ldr	r3, [r3, #24]
}
 80204b4:	4618      	mov	r0, r3
 80204b6:	370c      	adds	r7, #12
 80204b8:	46bd      	mov	sp, r7
 80204ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204be:	4770      	bx	lr

080204c0 <_ZNK14MockNamedValue16getObjectPointerEv>:

void* MockNamedValue::getObjectPointer() const
{
 80204c0:	b480      	push	{r7}
 80204c2:	b083      	sub	sp, #12
 80204c4:	af00      	add	r7, sp, #0
 80204c6:	6078      	str	r0, [r7, #4]
    return value_.objectPointerValue_;
 80204c8:	687b      	ldr	r3, [r7, #4]
 80204ca:	699b      	ldr	r3, [r3, #24]
}
 80204cc:	4618      	mov	r0, r3
 80204ce:	370c      	adds	r7, #12
 80204d0:	46bd      	mov	sp, r7
 80204d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204d6:	4770      	bx	lr

080204d8 <_ZNK14MockNamedValue7getSizeEv>:

size_t MockNamedValue::getSize() const
{
 80204d8:	b480      	push	{r7}
 80204da:	b083      	sub	sp, #12
 80204dc:	af00      	add	r7, sp, #0
 80204de:	6078      	str	r0, [r7, #4]
    return size_;
 80204e0:	687b      	ldr	r3, [r7, #4]
 80204e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80204e4:	4618      	mov	r0, r3
 80204e6:	370c      	adds	r7, #12
 80204e8:	46bd      	mov	sp, r7
 80204ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204ee:	4770      	bx	lr

080204f0 <_ZNK14MockNamedValue13getComparatorEv>:

MockNamedValueComparator* MockNamedValue::getComparator() const
{
 80204f0:	b480      	push	{r7}
 80204f2:	b083      	sub	sp, #12
 80204f4:	af00      	add	r7, sp, #0
 80204f6:	6078      	str	r0, [r7, #4]
    return comparator_;
 80204f8:	687b      	ldr	r3, [r7, #4]
 80204fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80204fc:	4618      	mov	r0, r3
 80204fe:	370c      	adds	r7, #12
 8020500:	46bd      	mov	sp, r7
 8020502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020506:	4770      	bx	lr

08020508 <_ZNK14MockNamedValue9getCopierEv>:

MockNamedValueCopier* MockNamedValue::getCopier() const
{
 8020508:	b480      	push	{r7}
 802050a:	b083      	sub	sp, #12
 802050c:	af00      	add	r7, sp, #0
 802050e:	6078      	str	r0, [r7, #4]
    return copier_;
 8020510:	687b      	ldr	r3, [r7, #4]
 8020512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8020514:	4618      	mov	r0, r3
 8020516:	370c      	adds	r7, #12
 8020518:	46bd      	mov	sp, r7
 802051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802051e:	4770      	bx	lr

08020520 <_ZNK14MockNamedValue6equalsERKS_>:

bool MockNamedValue::equals(const MockNamedValue& p) const
{
 8020520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020522:	b0cd      	sub	sp, #308	; 0x134
 8020524:	af00      	add	r7, sp, #0
 8020526:	1d3b      	adds	r3, r7, #4
 8020528:	6018      	str	r0, [r3, #0]
 802052a:	463b      	mov	r3, r7
 802052c:	6019      	str	r1, [r3, #0]
    if((type_ == "long int") && (p.type_ == "int"))
 802052e:	2500      	movs	r5, #0
 8020530:	1d3b      	adds	r3, r7, #4
 8020532:	681b      	ldr	r3, [r3, #0]
 8020534:	f103 040c 	add.w	r4, r3, #12
 8020538:	f107 0308 	add.w	r3, r7, #8
 802053c:	49bb      	ldr	r1, [pc, #748]	; (802082c <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 802053e:	4618      	mov	r0, r3
 8020540:	f7ee fcb3 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8020544:	2601      	movs	r6, #1
 8020546:	f107 0308 	add.w	r3, r7, #8
 802054a:	4619      	mov	r1, r3
 802054c:	4620      	mov	r0, r4
 802054e:	f7ef f870 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8020552:	4603      	mov	r3, r0
 8020554:	2b00      	cmp	r3, #0
 8020556:	d015      	beq.n	8020584 <_ZNK14MockNamedValue6equalsERKS_+0x64>
 8020558:	463b      	mov	r3, r7
 802055a:	681b      	ldr	r3, [r3, #0]
 802055c:	f103 040c 	add.w	r4, r3, #12
 8020560:	f107 0310 	add.w	r3, r7, #16
 8020564:	49b2      	ldr	r1, [pc, #712]	; (8020830 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 8020566:	4618      	mov	r0, r3
 8020568:	f7ee fc9f 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 802056c:	2501      	movs	r5, #1
 802056e:	f107 0310 	add.w	r3, r7, #16
 8020572:	4619      	mov	r1, r3
 8020574:	4620      	mov	r0, r4
 8020576:	f7ef f85c 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 802057a:	4603      	mov	r3, r0
 802057c:	2b00      	cmp	r3, #0
 802057e:	d001      	beq.n	8020584 <_ZNK14MockNamedValue6equalsERKS_+0x64>
 8020580:	2401      	movs	r4, #1
 8020582:	e000      	b.n	8020586 <_ZNK14MockNamedValue6equalsERKS_+0x66>
 8020584:	2400      	movs	r4, #0
 8020586:	2d00      	cmp	r5, #0
 8020588:	d004      	beq.n	8020594 <_ZNK14MockNamedValue6equalsERKS_+0x74>
 802058a:	f107 0310 	add.w	r3, r7, #16
 802058e:	4618      	mov	r0, r3
 8020590:	f7ef f843 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8020594:	2e00      	cmp	r6, #0
 8020596:	d004      	beq.n	80205a2 <_ZNK14MockNamedValue6equalsERKS_+0x82>
 8020598:	f107 0308 	add.w	r3, r7, #8
 802059c:	4618      	mov	r0, r3
 802059e:	f7ef f83c 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80205a2:	2c00      	cmp	r4, #0
 80205a4:	d00c      	beq.n	80205c0 <_ZNK14MockNamedValue6equalsERKS_+0xa0>
        return value_.longIntValue_ == p.value_.intValue_;
 80205a6:	1d3b      	adds	r3, r7, #4
 80205a8:	681b      	ldr	r3, [r3, #0]
 80205aa:	699a      	ldr	r2, [r3, #24]
 80205ac:	463b      	mov	r3, r7
 80205ae:	681b      	ldr	r3, [r3, #0]
 80205b0:	699b      	ldr	r3, [r3, #24]
 80205b2:	429a      	cmp	r2, r3
 80205b4:	bf0c      	ite	eq
 80205b6:	2301      	moveq	r3, #1
 80205b8:	2300      	movne	r3, #0
 80205ba:	b2dc      	uxtb	r4, r3
 80205bc:	f000 bd60 	b.w	8021080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "long int"))
 80205c0:	2500      	movs	r5, #0
 80205c2:	1d3b      	adds	r3, r7, #4
 80205c4:	681b      	ldr	r3, [r3, #0]
 80205c6:	f103 040c 	add.w	r4, r3, #12
 80205ca:	f107 0318 	add.w	r3, r7, #24
 80205ce:	4998      	ldr	r1, [pc, #608]	; (8020830 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 80205d0:	4618      	mov	r0, r3
 80205d2:	f7ee fc6a 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80205d6:	2601      	movs	r6, #1
 80205d8:	f107 0318 	add.w	r3, r7, #24
 80205dc:	4619      	mov	r1, r3
 80205de:	4620      	mov	r0, r4
 80205e0:	f7ef f827 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 80205e4:	4603      	mov	r3, r0
 80205e6:	2b00      	cmp	r3, #0
 80205e8:	d015      	beq.n	8020616 <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 80205ea:	463b      	mov	r3, r7
 80205ec:	681b      	ldr	r3, [r3, #0]
 80205ee:	f103 040c 	add.w	r4, r3, #12
 80205f2:	f107 0320 	add.w	r3, r7, #32
 80205f6:	498d      	ldr	r1, [pc, #564]	; (802082c <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 80205f8:	4618      	mov	r0, r3
 80205fa:	f7ee fc56 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80205fe:	2501      	movs	r5, #1
 8020600:	f107 0320 	add.w	r3, r7, #32
 8020604:	4619      	mov	r1, r3
 8020606:	4620      	mov	r0, r4
 8020608:	f7ef f813 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 802060c:	4603      	mov	r3, r0
 802060e:	2b00      	cmp	r3, #0
 8020610:	d001      	beq.n	8020616 <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 8020612:	2401      	movs	r4, #1
 8020614:	e000      	b.n	8020618 <_ZNK14MockNamedValue6equalsERKS_+0xf8>
 8020616:	2400      	movs	r4, #0
 8020618:	2d00      	cmp	r5, #0
 802061a:	d004      	beq.n	8020626 <_ZNK14MockNamedValue6equalsERKS_+0x106>
 802061c:	f107 0320 	add.w	r3, r7, #32
 8020620:	4618      	mov	r0, r3
 8020622:	f7ee fffa 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8020626:	2e00      	cmp	r6, #0
 8020628:	d004      	beq.n	8020634 <_ZNK14MockNamedValue6equalsERKS_+0x114>
 802062a:	f107 0318 	add.w	r3, r7, #24
 802062e:	4618      	mov	r0, r3
 8020630:	f7ee fff3 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8020634:	2c00      	cmp	r4, #0
 8020636:	d00c      	beq.n	8020652 <_ZNK14MockNamedValue6equalsERKS_+0x132>
        return value_.intValue_ == p.value_.longIntValue_;
 8020638:	1d3b      	adds	r3, r7, #4
 802063a:	681b      	ldr	r3, [r3, #0]
 802063c:	699a      	ldr	r2, [r3, #24]
 802063e:	463b      	mov	r3, r7
 8020640:	681b      	ldr	r3, [r3, #0]
 8020642:	699b      	ldr	r3, [r3, #24]
 8020644:	429a      	cmp	r2, r3
 8020646:	bf0c      	ite	eq
 8020648:	2301      	moveq	r3, #1
 802064a:	2300      	movne	r3, #0
 802064c:	b2dc      	uxtb	r4, r3
 802064e:	f000 bd17 	b.w	8021080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "int"))
 8020652:	2500      	movs	r5, #0
 8020654:	1d3b      	adds	r3, r7, #4
 8020656:	681b      	ldr	r3, [r3, #0]
 8020658:	f103 040c 	add.w	r4, r3, #12
 802065c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8020660:	4974      	ldr	r1, [pc, #464]	; (8020834 <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 8020662:	4618      	mov	r0, r3
 8020664:	f7ee fc21 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8020668:	2601      	movs	r6, #1
 802066a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802066e:	4619      	mov	r1, r3
 8020670:	4620      	mov	r0, r4
 8020672:	f7ee ffde 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8020676:	4603      	mov	r3, r0
 8020678:	2b00      	cmp	r3, #0
 802067a:	d015      	beq.n	80206a8 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 802067c:	463b      	mov	r3, r7
 802067e:	681b      	ldr	r3, [r3, #0]
 8020680:	f103 040c 	add.w	r4, r3, #12
 8020684:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8020688:	4969      	ldr	r1, [pc, #420]	; (8020830 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 802068a:	4618      	mov	r0, r3
 802068c:	f7ee fc0d 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8020690:	2501      	movs	r5, #1
 8020692:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8020696:	4619      	mov	r1, r3
 8020698:	4620      	mov	r0, r4
 802069a:	f7ee ffca 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 802069e:	4603      	mov	r3, r0
 80206a0:	2b00      	cmp	r3, #0
 80206a2:	d001      	beq.n	80206a8 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 80206a4:	2401      	movs	r4, #1
 80206a6:	e000      	b.n	80206aa <_ZNK14MockNamedValue6equalsERKS_+0x18a>
 80206a8:	2400      	movs	r4, #0
 80206aa:	2d00      	cmp	r5, #0
 80206ac:	d004      	beq.n	80206b8 <_ZNK14MockNamedValue6equalsERKS_+0x198>
 80206ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80206b2:	4618      	mov	r0, r3
 80206b4:	f7ee ffb1 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80206b8:	2e00      	cmp	r6, #0
 80206ba:	d004      	beq.n	80206c6 <_ZNK14MockNamedValue6equalsERKS_+0x1a6>
 80206bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80206c0:	4618      	mov	r0, r3
 80206c2:	f7ee ffaa 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80206c6:	2c00      	cmp	r4, #0
 80206c8:	d012      	beq.n	80206f0 <_ZNK14MockNamedValue6equalsERKS_+0x1d0>
        return (p.value_.intValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned int)p.value_.intValue_);
 80206ca:	463b      	mov	r3, r7
 80206cc:	681b      	ldr	r3, [r3, #0]
 80206ce:	699b      	ldr	r3, [r3, #24]
 80206d0:	2b00      	cmp	r3, #0
 80206d2:	db0a      	blt.n	80206ea <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 80206d4:	1d3b      	adds	r3, r7, #4
 80206d6:	681b      	ldr	r3, [r3, #0]
 80206d8:	699b      	ldr	r3, [r3, #24]
 80206da:	463a      	mov	r2, r7
 80206dc:	6812      	ldr	r2, [r2, #0]
 80206de:	6992      	ldr	r2, [r2, #24]
 80206e0:	4293      	cmp	r3, r2
 80206e2:	d102      	bne.n	80206ea <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 80206e4:	2401      	movs	r4, #1
 80206e6:	f000 bccb 	b.w	8021080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 80206ea:	2400      	movs	r4, #0
 80206ec:	f000 bcc8 	b.w	8021080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "unsigned int"))
 80206f0:	2500      	movs	r5, #0
 80206f2:	1d3b      	adds	r3, r7, #4
 80206f4:	681b      	ldr	r3, [r3, #0]
 80206f6:	f103 040c 	add.w	r4, r3, #12
 80206fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80206fe:	494c      	ldr	r1, [pc, #304]	; (8020830 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 8020700:	4618      	mov	r0, r3
 8020702:	f7ee fbd2 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8020706:	2601      	movs	r6, #1
 8020708:	f107 0338 	add.w	r3, r7, #56	; 0x38
 802070c:	4619      	mov	r1, r3
 802070e:	4620      	mov	r0, r4
 8020710:	f7ee ff8f 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8020714:	4603      	mov	r3, r0
 8020716:	2b00      	cmp	r3, #0
 8020718:	d015      	beq.n	8020746 <_ZNK14MockNamedValue6equalsERKS_+0x226>
 802071a:	463b      	mov	r3, r7
 802071c:	681b      	ldr	r3, [r3, #0]
 802071e:	f103 040c 	add.w	r4, r3, #12
 8020722:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8020726:	4943      	ldr	r1, [pc, #268]	; (8020834 <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 8020728:	4618      	mov	r0, r3
 802072a:	f7ee fbbe 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 802072e:	2501      	movs	r5, #1
 8020730:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8020734:	4619      	mov	r1, r3
 8020736:	4620      	mov	r0, r4
 8020738:	f7ee ff7b 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 802073c:	4603      	mov	r3, r0
 802073e:	2b00      	cmp	r3, #0
 8020740:	d001      	beq.n	8020746 <_ZNK14MockNamedValue6equalsERKS_+0x226>
 8020742:	2401      	movs	r4, #1
 8020744:	e000      	b.n	8020748 <_ZNK14MockNamedValue6equalsERKS_+0x228>
 8020746:	2400      	movs	r4, #0
 8020748:	2d00      	cmp	r5, #0
 802074a:	d004      	beq.n	8020756 <_ZNK14MockNamedValue6equalsERKS_+0x236>
 802074c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8020750:	4618      	mov	r0, r3
 8020752:	f7ee ff62 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8020756:	2e00      	cmp	r6, #0
 8020758:	d004      	beq.n	8020764 <_ZNK14MockNamedValue6equalsERKS_+0x244>
 802075a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 802075e:	4618      	mov	r0, r3
 8020760:	f7ee ff5b 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8020764:	2c00      	cmp	r4, #0
 8020766:	d012      	beq.n	802078e <_ZNK14MockNamedValue6equalsERKS_+0x26e>
        return (value_.intValue_ >= 0) && ((unsigned int)value_.intValue_ == p.value_.unsignedIntValue_);
 8020768:	1d3b      	adds	r3, r7, #4
 802076a:	681b      	ldr	r3, [r3, #0]
 802076c:	699b      	ldr	r3, [r3, #24]
 802076e:	2b00      	cmp	r3, #0
 8020770:	db0a      	blt.n	8020788 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 8020772:	1d3b      	adds	r3, r7, #4
 8020774:	681b      	ldr	r3, [r3, #0]
 8020776:	699b      	ldr	r3, [r3, #24]
 8020778:	463a      	mov	r2, r7
 802077a:	6812      	ldr	r2, [r2, #0]
 802077c:	6992      	ldr	r2, [r2, #24]
 802077e:	4293      	cmp	r3, r2
 8020780:	d102      	bne.n	8020788 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 8020782:	2401      	movs	r4, #1
 8020784:	f000 bc7c 	b.w	8021080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 8020788:	2400      	movs	r4, #0
 802078a:	f000 bc79 	b.w	8021080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "int"))
 802078e:	2500      	movs	r5, #0
 8020790:	1d3b      	adds	r3, r7, #4
 8020792:	681b      	ldr	r3, [r3, #0]
 8020794:	f103 040c 	add.w	r4, r3, #12
 8020798:	f107 0348 	add.w	r3, r7, #72	; 0x48
 802079c:	4926      	ldr	r1, [pc, #152]	; (8020838 <_ZNK14MockNamedValue6equalsERKS_+0x318>)
 802079e:	4618      	mov	r0, r3
 80207a0:	f7ee fb83 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80207a4:	2601      	movs	r6, #1
 80207a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80207aa:	4619      	mov	r1, r3
 80207ac:	4620      	mov	r0, r4
 80207ae:	f7ee ff40 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 80207b2:	4603      	mov	r3, r0
 80207b4:	2b00      	cmp	r3, #0
 80207b6:	d015      	beq.n	80207e4 <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 80207b8:	463b      	mov	r3, r7
 80207ba:	681b      	ldr	r3, [r3, #0]
 80207bc:	f103 040c 	add.w	r4, r3, #12
 80207c0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80207c4:	491a      	ldr	r1, [pc, #104]	; (8020830 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 80207c6:	4618      	mov	r0, r3
 80207c8:	f7ee fb6f 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80207cc:	2501      	movs	r5, #1
 80207ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80207d2:	4619      	mov	r1, r3
 80207d4:	4620      	mov	r0, r4
 80207d6:	f7ee ff2c 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 80207da:	4603      	mov	r3, r0
 80207dc:	2b00      	cmp	r3, #0
 80207de:	d001      	beq.n	80207e4 <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 80207e0:	2401      	movs	r4, #1
 80207e2:	e000      	b.n	80207e6 <_ZNK14MockNamedValue6equalsERKS_+0x2c6>
 80207e4:	2400      	movs	r4, #0
 80207e6:	2d00      	cmp	r5, #0
 80207e8:	d004      	beq.n	80207f4 <_ZNK14MockNamedValue6equalsERKS_+0x2d4>
 80207ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80207ee:	4618      	mov	r0, r3
 80207f0:	f7ee ff13 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80207f4:	2e00      	cmp	r6, #0
 80207f6:	d004      	beq.n	8020802 <_ZNK14MockNamedValue6equalsERKS_+0x2e2>
 80207f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80207fc:	4618      	mov	r0, r3
 80207fe:	f7ee ff0c 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8020802:	2c00      	cmp	r4, #0
 8020804:	d01a      	beq.n	802083c <_ZNK14MockNamedValue6equalsERKS_+0x31c>
        return (p.value_.intValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long)p.value_.intValue_);
 8020806:	463b      	mov	r3, r7
 8020808:	681b      	ldr	r3, [r3, #0]
 802080a:	699b      	ldr	r3, [r3, #24]
 802080c:	2b00      	cmp	r3, #0
 802080e:	db0a      	blt.n	8020826 <_ZNK14MockNamedValue6equalsERKS_+0x306>
 8020810:	1d3b      	adds	r3, r7, #4
 8020812:	681b      	ldr	r3, [r3, #0]
 8020814:	699b      	ldr	r3, [r3, #24]
 8020816:	463a      	mov	r2, r7
 8020818:	6812      	ldr	r2, [r2, #0]
 802081a:	6992      	ldr	r2, [r2, #24]
 802081c:	4293      	cmp	r3, r2
 802081e:	d102      	bne.n	8020826 <_ZNK14MockNamedValue6equalsERKS_+0x306>
 8020820:	2401      	movs	r4, #1
 8020822:	f000 bc2d 	b.w	8021080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 8020826:	2400      	movs	r4, #0
 8020828:	f000 bc2a 	b.w	8021080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 802082c:	080292cc 	.word	0x080292cc
 8020830:	080292b0 	.word	0x080292b0
 8020834:	080292bc 	.word	0x080292bc
 8020838:	080292d8 	.word	0x080292d8
    else if((type_ == "int") && (p.type_ == "unsigned long int"))
 802083c:	2500      	movs	r5, #0
 802083e:	1d3b      	adds	r3, r7, #4
 8020840:	681b      	ldr	r3, [r3, #0]
 8020842:	f103 040c 	add.w	r4, r3, #12
 8020846:	f107 0358 	add.w	r3, r7, #88	; 0x58
 802084a:	49b8      	ldr	r1, [pc, #736]	; (8020b2c <_ZNK14MockNamedValue6equalsERKS_+0x60c>)
 802084c:	4618      	mov	r0, r3
 802084e:	f7ee fb2c 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8020852:	2601      	movs	r6, #1
 8020854:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8020858:	4619      	mov	r1, r3
 802085a:	4620      	mov	r0, r4
 802085c:	f7ee fee9 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8020860:	4603      	mov	r3, r0
 8020862:	2b00      	cmp	r3, #0
 8020864:	d015      	beq.n	8020892 <_ZNK14MockNamedValue6equalsERKS_+0x372>
 8020866:	463b      	mov	r3, r7
 8020868:	681b      	ldr	r3, [r3, #0]
 802086a:	f103 040c 	add.w	r4, r3, #12
 802086e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8020872:	49af      	ldr	r1, [pc, #700]	; (8020b30 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 8020874:	4618      	mov	r0, r3
 8020876:	f7ee fb18 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 802087a:	2501      	movs	r5, #1
 802087c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8020880:	4619      	mov	r1, r3
 8020882:	4620      	mov	r0, r4
 8020884:	f7ee fed5 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8020888:	4603      	mov	r3, r0
 802088a:	2b00      	cmp	r3, #0
 802088c:	d001      	beq.n	8020892 <_ZNK14MockNamedValue6equalsERKS_+0x372>
 802088e:	2401      	movs	r4, #1
 8020890:	e000      	b.n	8020894 <_ZNK14MockNamedValue6equalsERKS_+0x374>
 8020892:	2400      	movs	r4, #0
 8020894:	2d00      	cmp	r5, #0
 8020896:	d004      	beq.n	80208a2 <_ZNK14MockNamedValue6equalsERKS_+0x382>
 8020898:	f107 0360 	add.w	r3, r7, #96	; 0x60
 802089c:	4618      	mov	r0, r3
 802089e:	f7ee febc 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80208a2:	2e00      	cmp	r6, #0
 80208a4:	d004      	beq.n	80208b0 <_ZNK14MockNamedValue6equalsERKS_+0x390>
 80208a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80208aa:	4618      	mov	r0, r3
 80208ac:	f7ee feb5 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80208b0:	2c00      	cmp	r4, #0
 80208b2:	d010      	beq.n	80208d6 <_ZNK14MockNamedValue6equalsERKS_+0x3b6>
        return (value_.intValue_ >= 0) && ((unsigned long)value_.intValue_ == p.value_.unsignedLongIntValue_);
 80208b4:	1d3b      	adds	r3, r7, #4
 80208b6:	681b      	ldr	r3, [r3, #0]
 80208b8:	699b      	ldr	r3, [r3, #24]
 80208ba:	2b00      	cmp	r3, #0
 80208bc:	db09      	blt.n	80208d2 <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 80208be:	1d3b      	adds	r3, r7, #4
 80208c0:	681b      	ldr	r3, [r3, #0]
 80208c2:	699b      	ldr	r3, [r3, #24]
 80208c4:	463a      	mov	r2, r7
 80208c6:	6812      	ldr	r2, [r2, #0]
 80208c8:	6992      	ldr	r2, [r2, #24]
 80208ca:	4293      	cmp	r3, r2
 80208cc:	d101      	bne.n	80208d2 <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 80208ce:	2401      	movs	r4, #1
 80208d0:	e3d6      	b.n	8021080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 80208d2:	2400      	movs	r4, #0
 80208d4:	e3d4      	b.n	8021080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "long int"))
 80208d6:	2500      	movs	r5, #0
 80208d8:	1d3b      	adds	r3, r7, #4
 80208da:	681b      	ldr	r3, [r3, #0]
 80208dc:	f103 040c 	add.w	r4, r3, #12
 80208e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80208e4:	4993      	ldr	r1, [pc, #588]	; (8020b34 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 80208e6:	4618      	mov	r0, r3
 80208e8:	f7ee fadf 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80208ec:	2601      	movs	r6, #1
 80208ee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80208f2:	4619      	mov	r1, r3
 80208f4:	4620      	mov	r0, r4
 80208f6:	f7ee fe9c 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 80208fa:	4603      	mov	r3, r0
 80208fc:	2b00      	cmp	r3, #0
 80208fe:	d015      	beq.n	802092c <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 8020900:	463b      	mov	r3, r7
 8020902:	681b      	ldr	r3, [r3, #0]
 8020904:	f103 040c 	add.w	r4, r3, #12
 8020908:	f107 0370 	add.w	r3, r7, #112	; 0x70
 802090c:	498a      	ldr	r1, [pc, #552]	; (8020b38 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 802090e:	4618      	mov	r0, r3
 8020910:	f7ee facb 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8020914:	2501      	movs	r5, #1
 8020916:	f107 0370 	add.w	r3, r7, #112	; 0x70
 802091a:	4619      	mov	r1, r3
 802091c:	4620      	mov	r0, r4
 802091e:	f7ee fe88 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8020922:	4603      	mov	r3, r0
 8020924:	2b00      	cmp	r3, #0
 8020926:	d001      	beq.n	802092c <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 8020928:	2401      	movs	r4, #1
 802092a:	e000      	b.n	802092e <_ZNK14MockNamedValue6equalsERKS_+0x40e>
 802092c:	2400      	movs	r4, #0
 802092e:	2d00      	cmp	r5, #0
 8020930:	d004      	beq.n	802093c <_ZNK14MockNamedValue6equalsERKS_+0x41c>
 8020932:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8020936:	4618      	mov	r0, r3
 8020938:	f7ee fe6f 	bl	800f61a <_ZN12SimpleStringD1Ev>
 802093c:	2e00      	cmp	r6, #0
 802093e:	d004      	beq.n	802094a <_ZNK14MockNamedValue6equalsERKS_+0x42a>
 8020940:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8020944:	4618      	mov	r0, r3
 8020946:	f7ee fe68 	bl	800f61a <_ZN12SimpleStringD1Ev>
 802094a:	2c00      	cmp	r4, #0
 802094c:	d010      	beq.n	8020970 <_ZNK14MockNamedValue6equalsERKS_+0x450>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned long)p.value_.longIntValue_);
 802094e:	463b      	mov	r3, r7
 8020950:	681b      	ldr	r3, [r3, #0]
 8020952:	699b      	ldr	r3, [r3, #24]
 8020954:	2b00      	cmp	r3, #0
 8020956:	db09      	blt.n	802096c <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 8020958:	1d3b      	adds	r3, r7, #4
 802095a:	681b      	ldr	r3, [r3, #0]
 802095c:	699b      	ldr	r3, [r3, #24]
 802095e:	463a      	mov	r2, r7
 8020960:	6812      	ldr	r2, [r2, #0]
 8020962:	6992      	ldr	r2, [r2, #24]
 8020964:	4293      	cmp	r3, r2
 8020966:	d101      	bne.n	802096c <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 8020968:	2401      	movs	r4, #1
 802096a:	e389      	b.n	8021080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 802096c:	2400      	movs	r4, #0
 802096e:	e387      	b.n	8021080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "long int") && (p.type_ == "unsigned int"))
 8020970:	2500      	movs	r5, #0
 8020972:	1d3b      	adds	r3, r7, #4
 8020974:	681b      	ldr	r3, [r3, #0]
 8020976:	f103 040c 	add.w	r4, r3, #12
 802097a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 802097e:	496e      	ldr	r1, [pc, #440]	; (8020b38 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 8020980:	4618      	mov	r0, r3
 8020982:	f7ee fa92 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8020986:	2601      	movs	r6, #1
 8020988:	f107 0378 	add.w	r3, r7, #120	; 0x78
 802098c:	4619      	mov	r1, r3
 802098e:	4620      	mov	r0, r4
 8020990:	f7ee fe4f 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8020994:	4603      	mov	r3, r0
 8020996:	2b00      	cmp	r3, #0
 8020998:	d015      	beq.n	80209c6 <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 802099a:	463b      	mov	r3, r7
 802099c:	681b      	ldr	r3, [r3, #0]
 802099e:	f103 040c 	add.w	r4, r3, #12
 80209a2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80209a6:	4963      	ldr	r1, [pc, #396]	; (8020b34 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 80209a8:	4618      	mov	r0, r3
 80209aa:	f7ee fa7e 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80209ae:	2501      	movs	r5, #1
 80209b0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80209b4:	4619      	mov	r1, r3
 80209b6:	4620      	mov	r0, r4
 80209b8:	f7ee fe3b 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 80209bc:	4603      	mov	r3, r0
 80209be:	2b00      	cmp	r3, #0
 80209c0:	d001      	beq.n	80209c6 <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 80209c2:	2401      	movs	r4, #1
 80209c4:	e000      	b.n	80209c8 <_ZNK14MockNamedValue6equalsERKS_+0x4a8>
 80209c6:	2400      	movs	r4, #0
 80209c8:	2d00      	cmp	r5, #0
 80209ca:	d004      	beq.n	80209d6 <_ZNK14MockNamedValue6equalsERKS_+0x4b6>
 80209cc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80209d0:	4618      	mov	r0, r3
 80209d2:	f7ee fe22 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80209d6:	2e00      	cmp	r6, #0
 80209d8:	d004      	beq.n	80209e4 <_ZNK14MockNamedValue6equalsERKS_+0x4c4>
 80209da:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80209de:	4618      	mov	r0, r3
 80209e0:	f7ee fe1b 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80209e4:	2c00      	cmp	r4, #0
 80209e6:	d010      	beq.n	8020a0a <_ZNK14MockNamedValue6equalsERKS_+0x4ea>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedIntValue_);
 80209e8:	1d3b      	adds	r3, r7, #4
 80209ea:	681b      	ldr	r3, [r3, #0]
 80209ec:	699b      	ldr	r3, [r3, #24]
 80209ee:	2b00      	cmp	r3, #0
 80209f0:	db09      	blt.n	8020a06 <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 80209f2:	1d3b      	adds	r3, r7, #4
 80209f4:	681b      	ldr	r3, [r3, #0]
 80209f6:	699b      	ldr	r3, [r3, #24]
 80209f8:	463a      	mov	r2, r7
 80209fa:	6812      	ldr	r2, [r2, #0]
 80209fc:	6992      	ldr	r2, [r2, #24]
 80209fe:	4293      	cmp	r3, r2
 8020a00:	d101      	bne.n	8020a06 <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 8020a02:	2401      	movs	r4, #1
 8020a04:	e33c      	b.n	8021080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 8020a06:	2400      	movs	r4, #0
 8020a08:	e33a      	b.n	8021080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "unsigned long int"))
 8020a0a:	2500      	movs	r5, #0
 8020a0c:	1d3b      	adds	r3, r7, #4
 8020a0e:	681b      	ldr	r3, [r3, #0]
 8020a10:	f103 040c 	add.w	r4, r3, #12
 8020a14:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8020a18:	4946      	ldr	r1, [pc, #280]	; (8020b34 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 8020a1a:	4618      	mov	r0, r3
 8020a1c:	f7ee fa45 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8020a20:	2601      	movs	r6, #1
 8020a22:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8020a26:	4619      	mov	r1, r3
 8020a28:	4620      	mov	r0, r4
 8020a2a:	f7ee fe02 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8020a2e:	4603      	mov	r3, r0
 8020a30:	2b00      	cmp	r3, #0
 8020a32:	d015      	beq.n	8020a60 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 8020a34:	463b      	mov	r3, r7
 8020a36:	681b      	ldr	r3, [r3, #0]
 8020a38:	f103 040c 	add.w	r4, r3, #12
 8020a3c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8020a40:	493b      	ldr	r1, [pc, #236]	; (8020b30 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 8020a42:	4618      	mov	r0, r3
 8020a44:	f7ee fa31 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8020a48:	2501      	movs	r5, #1
 8020a4a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8020a4e:	4619      	mov	r1, r3
 8020a50:	4620      	mov	r0, r4
 8020a52:	f7ee fdee 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8020a56:	4603      	mov	r3, r0
 8020a58:	2b00      	cmp	r3, #0
 8020a5a:	d001      	beq.n	8020a60 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 8020a5c:	2401      	movs	r4, #1
 8020a5e:	e000      	b.n	8020a62 <_ZNK14MockNamedValue6equalsERKS_+0x542>
 8020a60:	2400      	movs	r4, #0
 8020a62:	2d00      	cmp	r5, #0
 8020a64:	d004      	beq.n	8020a70 <_ZNK14MockNamedValue6equalsERKS_+0x550>
 8020a66:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8020a6a:	4618      	mov	r0, r3
 8020a6c:	f7ee fdd5 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8020a70:	2e00      	cmp	r6, #0
 8020a72:	d004      	beq.n	8020a7e <_ZNK14MockNamedValue6equalsERKS_+0x55e>
 8020a74:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8020a78:	4618      	mov	r0, r3
 8020a7a:	f7ee fdce 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8020a7e:	2c00      	cmp	r4, #0
 8020a80:	d00b      	beq.n	8020a9a <_ZNK14MockNamedValue6equalsERKS_+0x57a>
        return value_.unsignedIntValue_ == p.value_.unsignedLongIntValue_;
 8020a82:	1d3b      	adds	r3, r7, #4
 8020a84:	681b      	ldr	r3, [r3, #0]
 8020a86:	699a      	ldr	r2, [r3, #24]
 8020a88:	463b      	mov	r3, r7
 8020a8a:	681b      	ldr	r3, [r3, #0]
 8020a8c:	699b      	ldr	r3, [r3, #24]
 8020a8e:	429a      	cmp	r2, r3
 8020a90:	bf0c      	ite	eq
 8020a92:	2301      	moveq	r3, #1
 8020a94:	2300      	movne	r3, #0
 8020a96:	b2dc      	uxtb	r4, r3
 8020a98:	e2f2      	b.n	8021080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "unsigned int"))
 8020a9a:	2500      	movs	r5, #0
 8020a9c:	1d3b      	adds	r3, r7, #4
 8020a9e:	681b      	ldr	r3, [r3, #0]
 8020aa0:	f103 040c 	add.w	r4, r3, #12
 8020aa4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8020aa8:	4921      	ldr	r1, [pc, #132]	; (8020b30 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 8020aaa:	4618      	mov	r0, r3
 8020aac:	f7ee f9fd 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8020ab0:	2601      	movs	r6, #1
 8020ab2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8020ab6:	4619      	mov	r1, r3
 8020ab8:	4620      	mov	r0, r4
 8020aba:	f7ee fdba 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8020abe:	4603      	mov	r3, r0
 8020ac0:	2b00      	cmp	r3, #0
 8020ac2:	d015      	beq.n	8020af0 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 8020ac4:	463b      	mov	r3, r7
 8020ac6:	681b      	ldr	r3, [r3, #0]
 8020ac8:	f103 040c 	add.w	r4, r3, #12
 8020acc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8020ad0:	4918      	ldr	r1, [pc, #96]	; (8020b34 <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 8020ad2:	4618      	mov	r0, r3
 8020ad4:	f7ee f9e9 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8020ad8:	2501      	movs	r5, #1
 8020ada:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8020ade:	4619      	mov	r1, r3
 8020ae0:	4620      	mov	r0, r4
 8020ae2:	f7ee fda6 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8020ae6:	4603      	mov	r3, r0
 8020ae8:	2b00      	cmp	r3, #0
 8020aea:	d001      	beq.n	8020af0 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 8020aec:	2401      	movs	r4, #1
 8020aee:	e000      	b.n	8020af2 <_ZNK14MockNamedValue6equalsERKS_+0x5d2>
 8020af0:	2400      	movs	r4, #0
 8020af2:	2d00      	cmp	r5, #0
 8020af4:	d004      	beq.n	8020b00 <_ZNK14MockNamedValue6equalsERKS_+0x5e0>
 8020af6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8020afa:	4618      	mov	r0, r3
 8020afc:	f7ee fd8d 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8020b00:	2e00      	cmp	r6, #0
 8020b02:	d004      	beq.n	8020b0e <_ZNK14MockNamedValue6equalsERKS_+0x5ee>
 8020b04:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8020b08:	4618      	mov	r0, r3
 8020b0a:	f7ee fd86 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8020b0e:	2c00      	cmp	r4, #0
 8020b10:	d014      	beq.n	8020b3c <_ZNK14MockNamedValue6equalsERKS_+0x61c>
        return value_.unsignedLongIntValue_ == p.value_.unsignedIntValue_;
 8020b12:	1d3b      	adds	r3, r7, #4
 8020b14:	681b      	ldr	r3, [r3, #0]
 8020b16:	699a      	ldr	r2, [r3, #24]
 8020b18:	463b      	mov	r3, r7
 8020b1a:	681b      	ldr	r3, [r3, #0]
 8020b1c:	699b      	ldr	r3, [r3, #24]
 8020b1e:	429a      	cmp	r2, r3
 8020b20:	bf0c      	ite	eq
 8020b22:	2301      	moveq	r3, #1
 8020b24:	2300      	movne	r3, #0
 8020b26:	b2dc      	uxtb	r4, r3
 8020b28:	e2aa      	b.n	8021080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 8020b2a:	bf00      	nop
 8020b2c:	080292b0 	.word	0x080292b0
 8020b30:	080292d8 	.word	0x080292d8
 8020b34:	080292bc 	.word	0x080292bc
 8020b38:	080292cc 	.word	0x080292cc
    else if((type_ == "long int") && (p.type_ == "unsigned long int"))
 8020b3c:	2500      	movs	r5, #0
 8020b3e:	1d3b      	adds	r3, r7, #4
 8020b40:	681b      	ldr	r3, [r3, #0]
 8020b42:	f103 040c 	add.w	r4, r3, #12
 8020b46:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8020b4a:	49ae      	ldr	r1, [pc, #696]	; (8020e04 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 8020b4c:	4618      	mov	r0, r3
 8020b4e:	f7ee f9ac 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8020b52:	2601      	movs	r6, #1
 8020b54:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8020b58:	4619      	mov	r1, r3
 8020b5a:	4620      	mov	r0, r4
 8020b5c:	f7ee fd69 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8020b60:	4603      	mov	r3, r0
 8020b62:	2b00      	cmp	r3, #0
 8020b64:	d015      	beq.n	8020b92 <_ZNK14MockNamedValue6equalsERKS_+0x672>
 8020b66:	463b      	mov	r3, r7
 8020b68:	681b      	ldr	r3, [r3, #0]
 8020b6a:	f103 040c 	add.w	r4, r3, #12
 8020b6e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8020b72:	49a5      	ldr	r1, [pc, #660]	; (8020e08 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 8020b74:	4618      	mov	r0, r3
 8020b76:	f7ee f998 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8020b7a:	2501      	movs	r5, #1
 8020b7c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8020b80:	4619      	mov	r1, r3
 8020b82:	4620      	mov	r0, r4
 8020b84:	f7ee fd55 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8020b88:	4603      	mov	r3, r0
 8020b8a:	2b00      	cmp	r3, #0
 8020b8c:	d001      	beq.n	8020b92 <_ZNK14MockNamedValue6equalsERKS_+0x672>
 8020b8e:	2401      	movs	r4, #1
 8020b90:	e000      	b.n	8020b94 <_ZNK14MockNamedValue6equalsERKS_+0x674>
 8020b92:	2400      	movs	r4, #0
 8020b94:	2d00      	cmp	r5, #0
 8020b96:	d004      	beq.n	8020ba2 <_ZNK14MockNamedValue6equalsERKS_+0x682>
 8020b98:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8020b9c:	4618      	mov	r0, r3
 8020b9e:	f7ee fd3c 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8020ba2:	2e00      	cmp	r6, #0
 8020ba4:	d004      	beq.n	8020bb0 <_ZNK14MockNamedValue6equalsERKS_+0x690>
 8020ba6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8020baa:	4618      	mov	r0, r3
 8020bac:	f7ee fd35 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8020bb0:	2c00      	cmp	r4, #0
 8020bb2:	d010      	beq.n	8020bd6 <_ZNK14MockNamedValue6equalsERKS_+0x6b6>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedLongIntValue_);
 8020bb4:	1d3b      	adds	r3, r7, #4
 8020bb6:	681b      	ldr	r3, [r3, #0]
 8020bb8:	699b      	ldr	r3, [r3, #24]
 8020bba:	2b00      	cmp	r3, #0
 8020bbc:	db09      	blt.n	8020bd2 <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 8020bbe:	1d3b      	adds	r3, r7, #4
 8020bc0:	681b      	ldr	r3, [r3, #0]
 8020bc2:	699b      	ldr	r3, [r3, #24]
 8020bc4:	463a      	mov	r2, r7
 8020bc6:	6812      	ldr	r2, [r2, #0]
 8020bc8:	6992      	ldr	r2, [r2, #24]
 8020bca:	4293      	cmp	r3, r2
 8020bcc:	d101      	bne.n	8020bd2 <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 8020bce:	2401      	movs	r4, #1
 8020bd0:	e256      	b.n	8021080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 8020bd2:	2400      	movs	r4, #0
 8020bd4:	e254      	b.n	8021080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "long int"))
 8020bd6:	2500      	movs	r5, #0
 8020bd8:	1d3b      	adds	r3, r7, #4
 8020bda:	681b      	ldr	r3, [r3, #0]
 8020bdc:	f103 040c 	add.w	r4, r3, #12
 8020be0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8020be4:	4988      	ldr	r1, [pc, #544]	; (8020e08 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 8020be6:	4618      	mov	r0, r3
 8020be8:	f7ee f95f 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8020bec:	2601      	movs	r6, #1
 8020bee:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8020bf2:	4619      	mov	r1, r3
 8020bf4:	4620      	mov	r0, r4
 8020bf6:	f7ee fd1c 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8020bfa:	4603      	mov	r3, r0
 8020bfc:	2b00      	cmp	r3, #0
 8020bfe:	d015      	beq.n	8020c2c <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 8020c00:	463b      	mov	r3, r7
 8020c02:	681b      	ldr	r3, [r3, #0]
 8020c04:	f103 040c 	add.w	r4, r3, #12
 8020c08:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8020c0c:	497d      	ldr	r1, [pc, #500]	; (8020e04 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 8020c0e:	4618      	mov	r0, r3
 8020c10:	f7ee f94b 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8020c14:	2501      	movs	r5, #1
 8020c16:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8020c1a:	4619      	mov	r1, r3
 8020c1c:	4620      	mov	r0, r4
 8020c1e:	f7ee fd08 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8020c22:	4603      	mov	r3, r0
 8020c24:	2b00      	cmp	r3, #0
 8020c26:	d001      	beq.n	8020c2c <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 8020c28:	2401      	movs	r4, #1
 8020c2a:	e000      	b.n	8020c2e <_ZNK14MockNamedValue6equalsERKS_+0x70e>
 8020c2c:	2400      	movs	r4, #0
 8020c2e:	2d00      	cmp	r5, #0
 8020c30:	d004      	beq.n	8020c3c <_ZNK14MockNamedValue6equalsERKS_+0x71c>
 8020c32:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8020c36:	4618      	mov	r0, r3
 8020c38:	f7ee fcef 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8020c3c:	2e00      	cmp	r6, #0
 8020c3e:	d004      	beq.n	8020c4a <_ZNK14MockNamedValue6equalsERKS_+0x72a>
 8020c40:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8020c44:	4618      	mov	r0, r3
 8020c46:	f7ee fce8 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8020c4a:	2c00      	cmp	r4, #0
 8020c4c:	d010      	beq.n	8020c70 <_ZNK14MockNamedValue6equalsERKS_+0x750>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long) p.value_.longIntValue_);
 8020c4e:	463b      	mov	r3, r7
 8020c50:	681b      	ldr	r3, [r3, #0]
 8020c52:	699b      	ldr	r3, [r3, #24]
 8020c54:	2b00      	cmp	r3, #0
 8020c56:	db09      	blt.n	8020c6c <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 8020c58:	1d3b      	adds	r3, r7, #4
 8020c5a:	681b      	ldr	r3, [r3, #0]
 8020c5c:	699b      	ldr	r3, [r3, #24]
 8020c5e:	463a      	mov	r2, r7
 8020c60:	6812      	ldr	r2, [r2, #0]
 8020c62:	6992      	ldr	r2, [r2, #24]
 8020c64:	4293      	cmp	r3, r2
 8020c66:	d101      	bne.n	8020c6c <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 8020c68:	2401      	movs	r4, #1
 8020c6a:	e209      	b.n	8021080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 8020c6c:	2400      	movs	r4, #0
 8020c6e:	e207      	b.n	8021080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongIntValue_;
    else if ((type_ == "unsigned long int") && (p.type_ == "unsigned long long int"))
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif

    if (type_ != p.type_) return false;
 8020c70:	1d3b      	adds	r3, r7, #4
 8020c72:	681b      	ldr	r3, [r3, #0]
 8020c74:	f103 020c 	add.w	r2, r3, #12
 8020c78:	463b      	mov	r3, r7
 8020c7a:	681b      	ldr	r3, [r3, #0]
 8020c7c:	330c      	adds	r3, #12
 8020c7e:	4619      	mov	r1, r3
 8020c80:	4610      	mov	r0, r2
 8020c82:	f7ee fd1b 	bl	800f6bc <_ZneRK12SimpleStringS1_>
 8020c86:	4603      	mov	r3, r0
 8020c88:	2b00      	cmp	r3, #0
 8020c8a:	d001      	beq.n	8020c90 <_ZNK14MockNamedValue6equalsERKS_+0x770>
 8020c8c:	2400      	movs	r4, #0
 8020c8e:	e1f7      	b.n	8021080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    if (type_ == "bool")
 8020c90:	1d3b      	adds	r3, r7, #4
 8020c92:	681b      	ldr	r3, [r3, #0]
 8020c94:	f103 040c 	add.w	r4, r3, #12
 8020c98:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8020c9c:	495b      	ldr	r1, [pc, #364]	; (8020e0c <_ZNK14MockNamedValue6equalsERKS_+0x8ec>)
 8020c9e:	4618      	mov	r0, r3
 8020ca0:	f7ee f903 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8020ca4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8020ca8:	4619      	mov	r1, r3
 8020caa:	4620      	mov	r0, r4
 8020cac:	f7ee fcc1 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8020cb0:	4603      	mov	r3, r0
 8020cb2:	461c      	mov	r4, r3
 8020cb4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8020cb8:	4618      	mov	r0, r3
 8020cba:	f7ee fcae 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8020cbe:	2c00      	cmp	r4, #0
 8020cc0:	d00b      	beq.n	8020cda <_ZNK14MockNamedValue6equalsERKS_+0x7ba>
        return value_.boolValue_ == p.value_.boolValue_;
 8020cc2:	1d3b      	adds	r3, r7, #4
 8020cc4:	681b      	ldr	r3, [r3, #0]
 8020cc6:	7e1a      	ldrb	r2, [r3, #24]
 8020cc8:	463b      	mov	r3, r7
 8020cca:	681b      	ldr	r3, [r3, #0]
 8020ccc:	7e1b      	ldrb	r3, [r3, #24]
 8020cce:	429a      	cmp	r2, r3
 8020cd0:	bf0c      	ite	eq
 8020cd2:	2301      	moveq	r3, #1
 8020cd4:	2300      	movne	r3, #0
 8020cd6:	b2dc      	uxtb	r4, r3
 8020cd8:	e1d2      	b.n	8021080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "int")
 8020cda:	1d3b      	adds	r3, r7, #4
 8020cdc:	681b      	ldr	r3, [r3, #0]
 8020cde:	f103 040c 	add.w	r4, r3, #12
 8020ce2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8020ce6:	494a      	ldr	r1, [pc, #296]	; (8020e10 <_ZNK14MockNamedValue6equalsERKS_+0x8f0>)
 8020ce8:	4618      	mov	r0, r3
 8020cea:	f7ee f8de 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8020cee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8020cf2:	4619      	mov	r1, r3
 8020cf4:	4620      	mov	r0, r4
 8020cf6:	f7ee fc9c 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8020cfa:	4603      	mov	r3, r0
 8020cfc:	461c      	mov	r4, r3
 8020cfe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8020d02:	4618      	mov	r0, r3
 8020d04:	f7ee fc89 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8020d08:	2c00      	cmp	r4, #0
 8020d0a:	d00b      	beq.n	8020d24 <_ZNK14MockNamedValue6equalsERKS_+0x804>
        return value_.intValue_ == p.value_.intValue_;
 8020d0c:	1d3b      	adds	r3, r7, #4
 8020d0e:	681b      	ldr	r3, [r3, #0]
 8020d10:	699a      	ldr	r2, [r3, #24]
 8020d12:	463b      	mov	r3, r7
 8020d14:	681b      	ldr	r3, [r3, #0]
 8020d16:	699b      	ldr	r3, [r3, #24]
 8020d18:	429a      	cmp	r2, r3
 8020d1a:	bf0c      	ite	eq
 8020d1c:	2301      	moveq	r3, #1
 8020d1e:	2300      	movne	r3, #0
 8020d20:	b2dc      	uxtb	r4, r3
 8020d22:	e1ad      	b.n	8021080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned int")
 8020d24:	1d3b      	adds	r3, r7, #4
 8020d26:	681b      	ldr	r3, [r3, #0]
 8020d28:	f103 040c 	add.w	r4, r3, #12
 8020d2c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8020d30:	4938      	ldr	r1, [pc, #224]	; (8020e14 <_ZNK14MockNamedValue6equalsERKS_+0x8f4>)
 8020d32:	4618      	mov	r0, r3
 8020d34:	f7ee f8b9 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8020d38:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8020d3c:	4619      	mov	r1, r3
 8020d3e:	4620      	mov	r0, r4
 8020d40:	f7ee fc77 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8020d44:	4603      	mov	r3, r0
 8020d46:	461c      	mov	r4, r3
 8020d48:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8020d4c:	4618      	mov	r0, r3
 8020d4e:	f7ee fc64 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8020d52:	2c00      	cmp	r4, #0
 8020d54:	d00b      	beq.n	8020d6e <_ZNK14MockNamedValue6equalsERKS_+0x84e>
        return value_.unsignedIntValue_ == p.value_.unsignedIntValue_;
 8020d56:	1d3b      	adds	r3, r7, #4
 8020d58:	681b      	ldr	r3, [r3, #0]
 8020d5a:	699a      	ldr	r2, [r3, #24]
 8020d5c:	463b      	mov	r3, r7
 8020d5e:	681b      	ldr	r3, [r3, #0]
 8020d60:	699b      	ldr	r3, [r3, #24]
 8020d62:	429a      	cmp	r2, r3
 8020d64:	bf0c      	ite	eq
 8020d66:	2301      	moveq	r3, #1
 8020d68:	2300      	movne	r3, #0
 8020d6a:	b2dc      	uxtb	r4, r3
 8020d6c:	e188      	b.n	8021080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "long int")
 8020d6e:	1d3b      	adds	r3, r7, #4
 8020d70:	681b      	ldr	r3, [r3, #0]
 8020d72:	f103 040c 	add.w	r4, r3, #12
 8020d76:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8020d7a:	4922      	ldr	r1, [pc, #136]	; (8020e04 <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 8020d7c:	4618      	mov	r0, r3
 8020d7e:	f7ee f894 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8020d82:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8020d86:	4619      	mov	r1, r3
 8020d88:	4620      	mov	r0, r4
 8020d8a:	f7ee fc52 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8020d8e:	4603      	mov	r3, r0
 8020d90:	461c      	mov	r4, r3
 8020d92:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8020d96:	4618      	mov	r0, r3
 8020d98:	f7ee fc3f 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8020d9c:	2c00      	cmp	r4, #0
 8020d9e:	d00b      	beq.n	8020db8 <_ZNK14MockNamedValue6equalsERKS_+0x898>
        return value_.longIntValue_ == p.value_.longIntValue_;
 8020da0:	1d3b      	adds	r3, r7, #4
 8020da2:	681b      	ldr	r3, [r3, #0]
 8020da4:	699a      	ldr	r2, [r3, #24]
 8020da6:	463b      	mov	r3, r7
 8020da8:	681b      	ldr	r3, [r3, #0]
 8020daa:	699b      	ldr	r3, [r3, #24]
 8020dac:	429a      	cmp	r2, r3
 8020dae:	bf0c      	ite	eq
 8020db0:	2301      	moveq	r3, #1
 8020db2:	2300      	movne	r3, #0
 8020db4:	b2dc      	uxtb	r4, r3
 8020db6:	e163      	b.n	8021080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned long int")
 8020db8:	1d3b      	adds	r3, r7, #4
 8020dba:	681b      	ldr	r3, [r3, #0]
 8020dbc:	f103 040c 	add.w	r4, r3, #12
 8020dc0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8020dc4:	4910      	ldr	r1, [pc, #64]	; (8020e08 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 8020dc6:	4618      	mov	r0, r3
 8020dc8:	f7ee f86f 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8020dcc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8020dd0:	4619      	mov	r1, r3
 8020dd2:	4620      	mov	r0, r4
 8020dd4:	f7ee fc2d 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8020dd8:	4603      	mov	r3, r0
 8020dda:	461c      	mov	r4, r3
 8020ddc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8020de0:	4618      	mov	r0, r3
 8020de2:	f7ee fc1a 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8020de6:	2c00      	cmp	r4, #0
 8020de8:	d016      	beq.n	8020e18 <_ZNK14MockNamedValue6equalsERKS_+0x8f8>
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongIntValue_;
 8020dea:	1d3b      	adds	r3, r7, #4
 8020dec:	681b      	ldr	r3, [r3, #0]
 8020dee:	699a      	ldr	r2, [r3, #24]
 8020df0:	463b      	mov	r3, r7
 8020df2:	681b      	ldr	r3, [r3, #0]
 8020df4:	699b      	ldr	r3, [r3, #24]
 8020df6:	429a      	cmp	r2, r3
 8020df8:	bf0c      	ite	eq
 8020dfa:	2301      	moveq	r3, #1
 8020dfc:	2300      	movne	r3, #0
 8020dfe:	b2dc      	uxtb	r4, r3
 8020e00:	e13e      	b.n	8021080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 8020e02:	bf00      	nop
 8020e04:	080292cc 	.word	0x080292cc
 8020e08:	080292d8 	.word	0x080292d8
 8020e0c:	080292b4 	.word	0x080292b4
 8020e10:	080292b0 	.word	0x080292b0
 8020e14:	080292bc 	.word	0x080292bc
    else if (type_ == "long long int")
        return value_.longLongIntValue_ == p.value_.longLongIntValue_;
    else if (type_ == "unsigned long long int")
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif
    else if (type_ == "const char*")
 8020e18:	1d3b      	adds	r3, r7, #4
 8020e1a:	681b      	ldr	r3, [r3, #0]
 8020e1c:	f103 040c 	add.w	r4, r3, #12
 8020e20:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8020e24:	4999      	ldr	r1, [pc, #612]	; (802108c <_ZNK14MockNamedValue6equalsERKS_+0xb6c>)
 8020e26:	4618      	mov	r0, r3
 8020e28:	f7ee f83f 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8020e2c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8020e30:	4619      	mov	r1, r3
 8020e32:	4620      	mov	r0, r4
 8020e34:	f7ee fbfd 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8020e38:	4603      	mov	r3, r0
 8020e3a:	461c      	mov	r4, r3
 8020e3c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8020e40:	4618      	mov	r0, r3
 8020e42:	f7ee fbea 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8020e46:	2c00      	cmp	r4, #0
 8020e48:	d026      	beq.n	8020e98 <_ZNK14MockNamedValue6equalsERKS_+0x978>
        return SimpleString(value_.stringValue_) == SimpleString(p.value_.stringValue_);
 8020e4a:	1d3b      	adds	r3, r7, #4
 8020e4c:	681b      	ldr	r3, [r3, #0]
 8020e4e:	699a      	ldr	r2, [r3, #24]
 8020e50:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8020e54:	4611      	mov	r1, r2
 8020e56:	4618      	mov	r0, r3
 8020e58:	f7ee f827 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8020e5c:	463b      	mov	r3, r7
 8020e5e:	681b      	ldr	r3, [r3, #0]
 8020e60:	699a      	ldr	r2, [r3, #24]
 8020e62:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8020e66:	4611      	mov	r1, r2
 8020e68:	4618      	mov	r0, r3
 8020e6a:	f7ee f81e 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8020e6e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8020e72:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8020e76:	4611      	mov	r1, r2
 8020e78:	4618      	mov	r0, r3
 8020e7a:	f7ee fbda 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8020e7e:	4603      	mov	r3, r0
 8020e80:	461c      	mov	r4, r3
 8020e82:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8020e86:	4618      	mov	r0, r3
 8020e88:	f7ee fbc7 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8020e8c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8020e90:	4618      	mov	r0, r3
 8020e92:	f7ee fbc2 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8020e96:	e0f3      	b.n	8021080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void*")
 8020e98:	1d3b      	adds	r3, r7, #4
 8020e9a:	681b      	ldr	r3, [r3, #0]
 8020e9c:	f103 040c 	add.w	r4, r3, #12
 8020ea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8020ea4:	497a      	ldr	r1, [pc, #488]	; (8021090 <_ZNK14MockNamedValue6equalsERKS_+0xb70>)
 8020ea6:	4618      	mov	r0, r3
 8020ea8:	f7ed ffff 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8020eac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8020eb0:	4619      	mov	r1, r3
 8020eb2:	4620      	mov	r0, r4
 8020eb4:	f7ee fbbd 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8020eb8:	4603      	mov	r3, r0
 8020eba:	461c      	mov	r4, r3
 8020ebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8020ec0:	4618      	mov	r0, r3
 8020ec2:	f7ee fbaa 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8020ec6:	2c00      	cmp	r4, #0
 8020ec8:	d00b      	beq.n	8020ee2 <_ZNK14MockNamedValue6equalsERKS_+0x9c2>
        return value_.pointerValue_ == p.value_.pointerValue_;
 8020eca:	1d3b      	adds	r3, r7, #4
 8020ecc:	681b      	ldr	r3, [r3, #0]
 8020ece:	699a      	ldr	r2, [r3, #24]
 8020ed0:	463b      	mov	r3, r7
 8020ed2:	681b      	ldr	r3, [r3, #0]
 8020ed4:	699b      	ldr	r3, [r3, #24]
 8020ed6:	429a      	cmp	r2, r3
 8020ed8:	bf0c      	ite	eq
 8020eda:	2301      	moveq	r3, #1
 8020edc:	2300      	movne	r3, #0
 8020ede:	b2dc      	uxtb	r4, r3
 8020ee0:	e0ce      	b.n	8021080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const void*")
 8020ee2:	1d3b      	adds	r3, r7, #4
 8020ee4:	681b      	ldr	r3, [r3, #0]
 8020ee6:	f103 040c 	add.w	r4, r3, #12
 8020eea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8020eee:	4969      	ldr	r1, [pc, #420]	; (8021094 <_ZNK14MockNamedValue6equalsERKS_+0xb74>)
 8020ef0:	4618      	mov	r0, r3
 8020ef2:	f7ed ffda 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8020ef6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8020efa:	4619      	mov	r1, r3
 8020efc:	4620      	mov	r0, r4
 8020efe:	f7ee fb98 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8020f02:	4603      	mov	r3, r0
 8020f04:	461c      	mov	r4, r3
 8020f06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8020f0a:	4618      	mov	r0, r3
 8020f0c:	f7ee fb85 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8020f10:	2c00      	cmp	r4, #0
 8020f12:	d00b      	beq.n	8020f2c <_ZNK14MockNamedValue6equalsERKS_+0xa0c>
        return value_.constPointerValue_ == p.value_.constPointerValue_;
 8020f14:	1d3b      	adds	r3, r7, #4
 8020f16:	681b      	ldr	r3, [r3, #0]
 8020f18:	699a      	ldr	r2, [r3, #24]
 8020f1a:	463b      	mov	r3, r7
 8020f1c:	681b      	ldr	r3, [r3, #0]
 8020f1e:	699b      	ldr	r3, [r3, #24]
 8020f20:	429a      	cmp	r2, r3
 8020f22:	bf0c      	ite	eq
 8020f24:	2301      	moveq	r3, #1
 8020f26:	2300      	movne	r3, #0
 8020f28:	b2dc      	uxtb	r4, r3
 8020f2a:	e0a9      	b.n	8021080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void (*)()")
 8020f2c:	1d3b      	adds	r3, r7, #4
 8020f2e:	681b      	ldr	r3, [r3, #0]
 8020f30:	f103 040c 	add.w	r4, r3, #12
 8020f34:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8020f38:	4957      	ldr	r1, [pc, #348]	; (8021098 <_ZNK14MockNamedValue6equalsERKS_+0xb78>)
 8020f3a:	4618      	mov	r0, r3
 8020f3c:	f7ed ffb5 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8020f40:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8020f44:	4619      	mov	r1, r3
 8020f46:	4620      	mov	r0, r4
 8020f48:	f7ee fb73 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8020f4c:	4603      	mov	r3, r0
 8020f4e:	461c      	mov	r4, r3
 8020f50:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8020f54:	4618      	mov	r0, r3
 8020f56:	f7ee fb60 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8020f5a:	2c00      	cmp	r4, #0
 8020f5c:	d00b      	beq.n	8020f76 <_ZNK14MockNamedValue6equalsERKS_+0xa56>
        return value_.functionPointerValue_ == p.value_.functionPointerValue_;
 8020f5e:	1d3b      	adds	r3, r7, #4
 8020f60:	681b      	ldr	r3, [r3, #0]
 8020f62:	699a      	ldr	r2, [r3, #24]
 8020f64:	463b      	mov	r3, r7
 8020f66:	681b      	ldr	r3, [r3, #0]
 8020f68:	699b      	ldr	r3, [r3, #24]
 8020f6a:	429a      	cmp	r2, r3
 8020f6c:	bf0c      	ite	eq
 8020f6e:	2301      	moveq	r3, #1
 8020f70:	2300      	movne	r3, #0
 8020f72:	b2dc      	uxtb	r4, r3
 8020f74:	e084      	b.n	8021080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "double")
 8020f76:	1d3b      	adds	r3, r7, #4
 8020f78:	681b      	ldr	r3, [r3, #0]
 8020f7a:	f103 040c 	add.w	r4, r3, #12
 8020f7e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8020f82:	4946      	ldr	r1, [pc, #280]	; (802109c <_ZNK14MockNamedValue6equalsERKS_+0xb7c>)
 8020f84:	4618      	mov	r0, r3
 8020f86:	f7ed ff90 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8020f8a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8020f8e:	4619      	mov	r1, r3
 8020f90:	4620      	mov	r0, r4
 8020f92:	f7ee fb4e 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8020f96:	4603      	mov	r3, r0
 8020f98:	461c      	mov	r4, r3
 8020f9a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8020f9e:	4618      	mov	r0, r3
 8020fa0:	f7ee fb3b 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8020fa4:	2c00      	cmp	r4, #0
 8020fa6:	d01c      	beq.n	8020fe2 <_ZNK14MockNamedValue6equalsERKS_+0xac2>
        return (doubles_equal(value_.doubleValue_.value, p.value_.doubleValue_.value, value_.doubleValue_.tolerance));
 8020fa8:	1d3b      	adds	r3, r7, #4
 8020faa:	681b      	ldr	r3, [r3, #0]
 8020fac:	ed93 7b06 	vldr	d7, [r3, #24]
 8020fb0:	463b      	mov	r3, r7
 8020fb2:	681b      	ldr	r3, [r3, #0]
 8020fb4:	ed93 6b06 	vldr	d6, [r3, #24]
 8020fb8:	1d3b      	adds	r3, r7, #4
 8020fba:	681b      	ldr	r3, [r3, #0]
 8020fbc:	ed93 5b08 	vldr	d5, [r3, #32]
 8020fc0:	eeb0 2a45 	vmov.f32	s4, s10
 8020fc4:	eef0 2a65 	vmov.f32	s5, s11
 8020fc8:	eeb0 1a46 	vmov.f32	s2, s12
 8020fcc:	eef0 1a66 	vmov.f32	s3, s13
 8020fd0:	eeb0 0a47 	vmov.f32	s0, s14
 8020fd4:	eef0 0a67 	vmov.f32	s1, s15
 8020fd8:	f7f3 fe1a 	bl	8014c10 <_Z13doubles_equalddd>
 8020fdc:	4603      	mov	r3, r0
 8020fde:	461c      	mov	r4, r3
 8020fe0:	e04e      	b.n	8021080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const unsigned char*")
 8020fe2:	1d3b      	adds	r3, r7, #4
 8020fe4:	681b      	ldr	r3, [r3, #0]
 8020fe6:	f103 040c 	add.w	r4, r3, #12
 8020fea:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8020fee:	492c      	ldr	r1, [pc, #176]	; (80210a0 <_ZNK14MockNamedValue6equalsERKS_+0xb80>)
 8020ff0:	4618      	mov	r0, r3
 8020ff2:	f7ed ff5a 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8020ff6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8020ffa:	4619      	mov	r1, r3
 8020ffc:	4620      	mov	r0, r4
 8020ffe:	f7ee fb18 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8021002:	4603      	mov	r3, r0
 8021004:	461c      	mov	r4, r3
 8021006:	f507 7394 	add.w	r3, r7, #296	; 0x128
 802100a:	4618      	mov	r0, r3
 802100c:	f7ee fb05 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8021010:	2c00      	cmp	r4, #0
 8021012:	d01c      	beq.n	802104e <_ZNK14MockNamedValue6equalsERKS_+0xb2e>
    {
        if (size_ != p.size_) {
 8021014:	1d3b      	adds	r3, r7, #4
 8021016:	681b      	ldr	r3, [r3, #0]
 8021018:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802101a:	463b      	mov	r3, r7
 802101c:	681b      	ldr	r3, [r3, #0]
 802101e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021020:	429a      	cmp	r2, r3
 8021022:	d001      	beq.n	8021028 <_ZNK14MockNamedValue6equalsERKS_+0xb08>
            return false;
 8021024:	2400      	movs	r4, #0
 8021026:	e02b      	b.n	8021080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        }
        return SimpleString::MemCmp(value_.memoryBufferValue_, p.value_.memoryBufferValue_, size_) == 0;
 8021028:	1d3b      	adds	r3, r7, #4
 802102a:	681b      	ldr	r3, [r3, #0]
 802102c:	6998      	ldr	r0, [r3, #24]
 802102e:	463b      	mov	r3, r7
 8021030:	681b      	ldr	r3, [r3, #0]
 8021032:	6999      	ldr	r1, [r3, #24]
 8021034:	1d3b      	adds	r3, r7, #4
 8021036:	681b      	ldr	r3, [r3, #0]
 8021038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802103a:	461a      	mov	r2, r3
 802103c:	f7ed fe54 	bl	800ece8 <_ZN12SimpleString6MemCmpEPKvS1_j>
 8021040:	4603      	mov	r3, r0
 8021042:	2b00      	cmp	r3, #0
 8021044:	bf0c      	ite	eq
 8021046:	2301      	moveq	r3, #1
 8021048:	2300      	movne	r3, #0
 802104a:	b2dc      	uxtb	r4, r3
 802104c:	e018      	b.n	8021080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    }

    if (comparator_)
 802104e:	1d3b      	adds	r3, r7, #4
 8021050:	681b      	ldr	r3, [r3, #0]
 8021052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021054:	2b00      	cmp	r3, #0
 8021056:	d012      	beq.n	802107e <_ZNK14MockNamedValue6equalsERKS_+0xb5e>
        return comparator_->isEqual(value_.constObjectPointerValue_, p.value_.constObjectPointerValue_);
 8021058:	1d3b      	adds	r3, r7, #4
 802105a:	681b      	ldr	r3, [r3, #0]
 802105c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 802105e:	1d3b      	adds	r3, r7, #4
 8021060:	681b      	ldr	r3, [r3, #0]
 8021062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021064:	681b      	ldr	r3, [r3, #0]
 8021066:	3308      	adds	r3, #8
 8021068:	681b      	ldr	r3, [r3, #0]
 802106a:	1d3a      	adds	r2, r7, #4
 802106c:	6812      	ldr	r2, [r2, #0]
 802106e:	6991      	ldr	r1, [r2, #24]
 8021070:	463a      	mov	r2, r7
 8021072:	6812      	ldr	r2, [r2, #0]
 8021074:	6992      	ldr	r2, [r2, #24]
 8021076:	4798      	blx	r3
 8021078:	4603      	mov	r3, r0
 802107a:	461c      	mov	r4, r3
 802107c:	e000      	b.n	8021080 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    return false;
 802107e:	2400      	movs	r4, #0
 8021080:	4623      	mov	r3, r4
}
 8021082:	4618      	mov	r0, r3
 8021084:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8021088:	46bd      	mov	sp, r7
 802108a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802108c:	0802937c 	.word	0x0802937c
 8021090:	0802935c 	.word	0x0802935c
 8021094:	08029364 	.word	0x08029364
 8021098:	08029370 	.word	0x08029370
 802109c:	08029354 	.word	0x08029354
 80210a0:	08029388 	.word	0x08029388

080210a4 <_ZNK14MockNamedValue20compatibleForCopyingERKS_>:

bool MockNamedValue::compatibleForCopying(const MockNamedValue& p) const
{
 80210a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80210a6:	b087      	sub	sp, #28
 80210a8:	af00      	add	r7, sp, #0
 80210aa:	6078      	str	r0, [r7, #4]
 80210ac:	6039      	str	r1, [r7, #0]
    if (type_ == p.type_) return true;
 80210ae:	687b      	ldr	r3, [r7, #4]
 80210b0:	f103 020c 	add.w	r2, r3, #12
 80210b4:	683b      	ldr	r3, [r7, #0]
 80210b6:	330c      	adds	r3, #12
 80210b8:	4619      	mov	r1, r3
 80210ba:	4610      	mov	r0, r2
 80210bc:	f7ee fab9 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 80210c0:	4603      	mov	r3, r0
 80210c2:	2b00      	cmp	r3, #0
 80210c4:	d001      	beq.n	80210ca <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x26>
 80210c6:	2301      	movs	r3, #1
 80210c8:	e03c      	b.n	8021144 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    if ((type_ == "const void*") && (p.type_ == "void*"))
 80210ca:	2500      	movs	r5, #0
 80210cc:	687b      	ldr	r3, [r7, #4]
 80210ce:	f103 040c 	add.w	r4, r3, #12
 80210d2:	f107 0308 	add.w	r3, r7, #8
 80210d6:	491d      	ldr	r1, [pc, #116]	; (802114c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa8>)
 80210d8:	4618      	mov	r0, r3
 80210da:	f7ed fee6 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80210de:	2601      	movs	r6, #1
 80210e0:	f107 0308 	add.w	r3, r7, #8
 80210e4:	4619      	mov	r1, r3
 80210e6:	4620      	mov	r0, r4
 80210e8:	f7ee faa3 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 80210ec:	4603      	mov	r3, r0
 80210ee:	2b00      	cmp	r3, #0
 80210f0:	d014      	beq.n	802111c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 80210f2:	683b      	ldr	r3, [r7, #0]
 80210f4:	f103 040c 	add.w	r4, r3, #12
 80210f8:	f107 0310 	add.w	r3, r7, #16
 80210fc:	4914      	ldr	r1, [pc, #80]	; (8021150 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xac>)
 80210fe:	4618      	mov	r0, r3
 8021100:	f7ed fed3 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8021104:	2501      	movs	r5, #1
 8021106:	f107 0310 	add.w	r3, r7, #16
 802110a:	4619      	mov	r1, r3
 802110c:	4620      	mov	r0, r4
 802110e:	f7ee fa90 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8021112:	4603      	mov	r3, r0
 8021114:	2b00      	cmp	r3, #0
 8021116:	d001      	beq.n	802111c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 8021118:	2401      	movs	r4, #1
 802111a:	e000      	b.n	802111e <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x7a>
 802111c:	2400      	movs	r4, #0
 802111e:	2d00      	cmp	r5, #0
 8021120:	d004      	beq.n	802112c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x88>
 8021122:	f107 0310 	add.w	r3, r7, #16
 8021126:	4618      	mov	r0, r3
 8021128:	f7ee fa77 	bl	800f61a <_ZN12SimpleStringD1Ev>
 802112c:	2e00      	cmp	r6, #0
 802112e:	d004      	beq.n	802113a <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x96>
 8021130:	f107 0308 	add.w	r3, r7, #8
 8021134:	4618      	mov	r0, r3
 8021136:	f7ee fa70 	bl	800f61a <_ZN12SimpleStringD1Ev>
 802113a:	2c00      	cmp	r4, #0
 802113c:	d001      	beq.n	8021142 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x9e>
        return true;
 802113e:	2301      	movs	r3, #1
 8021140:	e000      	b.n	8021144 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    return false;
 8021142:	2300      	movs	r3, #0
}
 8021144:	4618      	mov	r0, r3
 8021146:	371c      	adds	r7, #28
 8021148:	46bd      	mov	sp, r7
 802114a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802114c:	08029364 	.word	0x08029364
 8021150:	0802935c 	.word	0x0802935c

08021154 <_ZNK14MockNamedValue8toStringEv>:

SimpleString MockNamedValue::toString() const
{
 8021154:	b590      	push	{r4, r7, lr}
 8021156:	b0b9      	sub	sp, #228	; 0xe4
 8021158:	af00      	add	r7, sp, #0
 802115a:	6078      	str	r0, [r7, #4]
 802115c:	6039      	str	r1, [r7, #0]
    if (type_ == "bool")
 802115e:	683b      	ldr	r3, [r7, #0]
 8021160:	f103 040c 	add.w	r4, r3, #12
 8021164:	f107 0308 	add.w	r3, r7, #8
 8021168:	49d4      	ldr	r1, [pc, #848]	; (80214bc <_ZNK14MockNamedValue8toStringEv+0x368>)
 802116a:	4618      	mov	r0, r3
 802116c:	f7ed fe9d 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8021170:	f107 0308 	add.w	r3, r7, #8
 8021174:	4619      	mov	r1, r3
 8021176:	4620      	mov	r0, r4
 8021178:	f7ee fa5b 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 802117c:	4603      	mov	r3, r0
 802117e:	461c      	mov	r4, r3
 8021180:	f107 0308 	add.w	r3, r7, #8
 8021184:	4618      	mov	r0, r3
 8021186:	f7ee fa48 	bl	800f61a <_ZN12SimpleStringD1Ev>
 802118a:	2c00      	cmp	r4, #0
 802118c:	d007      	beq.n	802119e <_ZNK14MockNamedValue8toStringEv+0x4a>
        return StringFrom(value_.boolValue_);
 802118e:	683b      	ldr	r3, [r7, #0]
 8021190:	7e1a      	ldrb	r2, [r3, #24]
 8021192:	687b      	ldr	r3, [r7, #4]
 8021194:	4611      	mov	r1, r2
 8021196:	4618      	mov	r0, r3
 8021198:	f7ee fcb0 	bl	800fafc <_Z10StringFromb>
 802119c:	e23f      	b.n	802161e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "int")
 802119e:	683b      	ldr	r3, [r7, #0]
 80211a0:	f103 040c 	add.w	r4, r3, #12
 80211a4:	f107 0310 	add.w	r3, r7, #16
 80211a8:	49c5      	ldr	r1, [pc, #788]	; (80214c0 <_ZNK14MockNamedValue8toStringEv+0x36c>)
 80211aa:	4618      	mov	r0, r3
 80211ac:	f7ed fe7d 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80211b0:	f107 0310 	add.w	r3, r7, #16
 80211b4:	4619      	mov	r1, r3
 80211b6:	4620      	mov	r0, r4
 80211b8:	f7ee fa3b 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 80211bc:	4603      	mov	r3, r0
 80211be:	461c      	mov	r4, r3
 80211c0:	f107 0310 	add.w	r3, r7, #16
 80211c4:	4618      	mov	r0, r3
 80211c6:	f7ee fa28 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80211ca:	2c00      	cmp	r4, #0
 80211cc:	d03b      	beq.n	8021246 <_ZNK14MockNamedValue8toStringEv+0xf2>
        return StringFrom(value_.intValue_) + " " + BracketsFormattedHexStringFrom(value_.intValue_);
 80211ce:	683b      	ldr	r3, [r7, #0]
 80211d0:	699a      	ldr	r2, [r3, #24]
 80211d2:	f107 0320 	add.w	r3, r7, #32
 80211d6:	4611      	mov	r1, r2
 80211d8:	4618      	mov	r0, r3
 80211da:	f7ee fce5 	bl	800fba8 <_Z10StringFromi>
 80211de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80211e2:	49b8      	ldr	r1, [pc, #736]	; (80214c4 <_ZNK14MockNamedValue8toStringEv+0x370>)
 80211e4:	4618      	mov	r0, r3
 80211e6:	f7ed fe60 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80211ea:	f107 0318 	add.w	r3, r7, #24
 80211ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80211f2:	f107 0120 	add.w	r1, r7, #32
 80211f6:	4618      	mov	r0, r3
 80211f8:	f7ee fa71 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 80211fc:	683b      	ldr	r3, [r7, #0]
 80211fe:	699a      	ldr	r2, [r3, #24]
 8021200:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8021204:	4611      	mov	r1, r2
 8021206:	4618      	mov	r0, r3
 8021208:	f7ee fdbe 	bl	800fd88 <_Z30BracketsFormattedHexStringFromi>
 802120c:	687b      	ldr	r3, [r7, #4]
 802120e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8021212:	f107 0118 	add.w	r1, r7, #24
 8021216:	4618      	mov	r0, r3
 8021218:	f7ee fa61 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 802121c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8021220:	4618      	mov	r0, r3
 8021222:	f7ee f9fa 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8021226:	f107 0318 	add.w	r3, r7, #24
 802122a:	4618      	mov	r0, r3
 802122c:	f7ee f9f5 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8021230:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8021234:	4618      	mov	r0, r3
 8021236:	f7ee f9f0 	bl	800f61a <_ZN12SimpleStringD1Ev>
 802123a:	f107 0320 	add.w	r3, r7, #32
 802123e:	4618      	mov	r0, r3
 8021240:	f7ee f9eb 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8021244:	e1eb      	b.n	802161e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned int")
 8021246:	683b      	ldr	r3, [r7, #0]
 8021248:	f103 040c 	add.w	r4, r3, #12
 802124c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8021250:	499d      	ldr	r1, [pc, #628]	; (80214c8 <_ZNK14MockNamedValue8toStringEv+0x374>)
 8021252:	4618      	mov	r0, r3
 8021254:	f7ed fe29 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8021258:	f107 0338 	add.w	r3, r7, #56	; 0x38
 802125c:	4619      	mov	r1, r3
 802125e:	4620      	mov	r0, r4
 8021260:	f7ee f9e7 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8021264:	4603      	mov	r3, r0
 8021266:	461c      	mov	r4, r3
 8021268:	f107 0338 	add.w	r3, r7, #56	; 0x38
 802126c:	4618      	mov	r0, r3
 802126e:	f7ee f9d4 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8021272:	2c00      	cmp	r4, #0
 8021274:	d03b      	beq.n	80212ee <_ZNK14MockNamedValue8toStringEv+0x19a>
        return StringFrom(value_.unsignedIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedIntValue_);
 8021276:	683b      	ldr	r3, [r7, #0]
 8021278:	699a      	ldr	r2, [r3, #24]
 802127a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 802127e:	4611      	mov	r1, r2
 8021280:	4618      	mov	r0, r3
 8021282:	f7ee fef9 	bl	8010078 <_Z10StringFromj>
 8021286:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802128a:	498e      	ldr	r1, [pc, #568]	; (80214c4 <_ZNK14MockNamedValue8toStringEv+0x370>)
 802128c:	4618      	mov	r0, r3
 802128e:	f7ed fe0c 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8021292:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8021296:	f107 0250 	add.w	r2, r7, #80	; 0x50
 802129a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 802129e:	4618      	mov	r0, r3
 80212a0:	f7ee fa1d 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 80212a4:	683b      	ldr	r3, [r7, #0]
 80212a6:	699a      	ldr	r2, [r3, #24]
 80212a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80212ac:	4611      	mov	r1, r2
 80212ae:	4618      	mov	r0, r3
 80212b0:	f7ee fd86 	bl	800fdc0 <_Z30BracketsFormattedHexStringFromj>
 80212b4:	687b      	ldr	r3, [r7, #4]
 80212b6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80212ba:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80212be:	4618      	mov	r0, r3
 80212c0:	f7ee fa0d 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 80212c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80212c8:	4618      	mov	r0, r3
 80212ca:	f7ee f9a6 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80212ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80212d2:	4618      	mov	r0, r3
 80212d4:	f7ee f9a1 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80212d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80212dc:	4618      	mov	r0, r3
 80212de:	f7ee f99c 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80212e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80212e6:	4618      	mov	r0, r3
 80212e8:	f7ee f997 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80212ec:	e197      	b.n	802161e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long int")
 80212ee:	683b      	ldr	r3, [r7, #0]
 80212f0:	f103 040c 	add.w	r4, r3, #12
 80212f4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80212f8:	4974      	ldr	r1, [pc, #464]	; (80214cc <_ZNK14MockNamedValue8toStringEv+0x378>)
 80212fa:	4618      	mov	r0, r3
 80212fc:	f7ed fdd5 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8021300:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8021304:	4619      	mov	r1, r3
 8021306:	4620      	mov	r0, r4
 8021308:	f7ee f993 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 802130c:	4603      	mov	r3, r0
 802130e:	461c      	mov	r4, r3
 8021310:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8021314:	4618      	mov	r0, r3
 8021316:	f7ee f980 	bl	800f61a <_ZN12SimpleStringD1Ev>
 802131a:	2c00      	cmp	r4, #0
 802131c:	d03b      	beq.n	8021396 <_ZNK14MockNamedValue8toStringEv+0x242>
        return StringFrom(value_.longIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longIntValue_);
 802131e:	683b      	ldr	r3, [r7, #0]
 8021320:	699a      	ldr	r2, [r3, #24]
 8021322:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8021326:	4611      	mov	r1, r2
 8021328:	4618      	mov	r0, r3
 802132a:	f7ee fc4f 	bl	800fbcc <_Z10StringFroml>
 802132e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8021332:	4964      	ldr	r1, [pc, #400]	; (80214c4 <_ZNK14MockNamedValue8toStringEv+0x370>)
 8021334:	4618      	mov	r0, r3
 8021336:	f7ed fdb8 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 802133a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 802133e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8021342:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8021346:	4618      	mov	r0, r3
 8021348:	f7ee f9c9 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 802134c:	683b      	ldr	r3, [r7, #0]
 802134e:	699a      	ldr	r2, [r3, #24]
 8021350:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8021354:	4611      	mov	r1, r2
 8021356:	4618      	mov	r0, r3
 8021358:	f7ee fd4e 	bl	800fdf8 <_Z30BracketsFormattedHexStringFroml>
 802135c:	687b      	ldr	r3, [r7, #4]
 802135e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8021362:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8021366:	4618      	mov	r0, r3
 8021368:	f7ee f9b9 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 802136c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8021370:	4618      	mov	r0, r3
 8021372:	f7ee f952 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8021376:	f107 0368 	add.w	r3, r7, #104	; 0x68
 802137a:	4618      	mov	r0, r3
 802137c:	f7ee f94d 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8021380:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8021384:	4618      	mov	r0, r3
 8021386:	f7ee f948 	bl	800f61a <_ZN12SimpleStringD1Ev>
 802138a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 802138e:	4618      	mov	r0, r3
 8021390:	f7ee f943 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8021394:	e143      	b.n	802161e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned long int")
 8021396:	683b      	ldr	r3, [r7, #0]
 8021398:	f103 040c 	add.w	r4, r3, #12
 802139c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80213a0:	494b      	ldr	r1, [pc, #300]	; (80214d0 <_ZNK14MockNamedValue8toStringEv+0x37c>)
 80213a2:	4618      	mov	r0, r3
 80213a4:	f7ed fd81 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80213a8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80213ac:	4619      	mov	r1, r3
 80213ae:	4620      	mov	r0, r4
 80213b0:	f7ee f93f 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 80213b4:	4603      	mov	r3, r0
 80213b6:	461c      	mov	r4, r3
 80213b8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80213bc:	4618      	mov	r0, r3
 80213be:	f7ee f92c 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80213c2:	2c00      	cmp	r4, #0
 80213c4:	d03b      	beq.n	802143e <_ZNK14MockNamedValue8toStringEv+0x2ea>
        return StringFrom(value_.unsignedLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongIntValue_);
 80213c6:	683b      	ldr	r3, [r7, #0]
 80213c8:	699a      	ldr	r2, [r3, #24]
 80213ca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80213ce:	4611      	mov	r1, r2
 80213d0:	4618      	mov	r0, r3
 80213d2:	f7ee fe63 	bl	801009c <_Z10StringFromm>
 80213d6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80213da:	493a      	ldr	r1, [pc, #232]	; (80214c4 <_ZNK14MockNamedValue8toStringEv+0x370>)
 80213dc:	4618      	mov	r0, r3
 80213de:	f7ed fd64 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80213e2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80213e6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80213ea:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80213ee:	4618      	mov	r0, r3
 80213f0:	f7ee f975 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 80213f4:	683b      	ldr	r3, [r7, #0]
 80213f6:	699a      	ldr	r2, [r3, #24]
 80213f8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80213fc:	4611      	mov	r1, r2
 80213fe:	4618      	mov	r0, r3
 8021400:	f7ee fd16 	bl	800fe30 <_Z30BracketsFormattedHexStringFromm>
 8021404:	687b      	ldr	r3, [r7, #4]
 8021406:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 802140a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 802140e:	4618      	mov	r0, r3
 8021410:	f7ee f965 	bl	800f6de <_ZNK12SimpleStringplERKS_>
 8021414:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8021418:	4618      	mov	r0, r3
 802141a:	f7ee f8fe 	bl	800f61a <_ZN12SimpleStringD1Ev>
 802141e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8021422:	4618      	mov	r0, r3
 8021424:	f7ee f8f9 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8021428:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 802142c:	4618      	mov	r0, r3
 802142e:	f7ee f8f4 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8021432:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8021436:	4618      	mov	r0, r3
 8021438:	f7ee f8ef 	bl	800f61a <_ZN12SimpleStringD1Ev>
 802143c:	e0ef      	b.n	802161e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long long int")
        return StringFrom(value_.longLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longLongIntValue_);
    else if (type_ == "unsigned long long int")
        return StringFrom(value_.unsignedLongLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongLongIntValue_);
#endif
    else if (type_ == "const char*")
 802143e:	683b      	ldr	r3, [r7, #0]
 8021440:	f103 040c 	add.w	r4, r3, #12
 8021444:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8021448:	4922      	ldr	r1, [pc, #136]	; (80214d4 <_ZNK14MockNamedValue8toStringEv+0x380>)
 802144a:	4618      	mov	r0, r3
 802144c:	f7ed fd2d 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8021450:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8021454:	4619      	mov	r1, r3
 8021456:	4620      	mov	r0, r4
 8021458:	f7ee f8eb 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 802145c:	4603      	mov	r3, r0
 802145e:	461c      	mov	r4, r3
 8021460:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8021464:	4618      	mov	r0, r3
 8021466:	f7ee f8d8 	bl	800f61a <_ZN12SimpleStringD1Ev>
 802146a:	2c00      	cmp	r4, #0
 802146c:	d006      	beq.n	802147c <_ZNK14MockNamedValue8toStringEv+0x328>
        return value_.stringValue_;
 802146e:	683b      	ldr	r3, [r7, #0]
 8021470:	699b      	ldr	r3, [r3, #24]
 8021472:	4619      	mov	r1, r3
 8021474:	6878      	ldr	r0, [r7, #4]
 8021476:	f7ed fd18 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 802147a:	e0d0      	b.n	802161e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "void*")
 802147c:	683b      	ldr	r3, [r7, #0]
 802147e:	f103 040c 	add.w	r4, r3, #12
 8021482:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8021486:	4914      	ldr	r1, [pc, #80]	; (80214d8 <_ZNK14MockNamedValue8toStringEv+0x384>)
 8021488:	4618      	mov	r0, r3
 802148a:	f7ed fd0e 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 802148e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8021492:	4619      	mov	r1, r3
 8021494:	4620      	mov	r0, r4
 8021496:	f7ee f8cc 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 802149a:	4603      	mov	r3, r0
 802149c:	461c      	mov	r4, r3
 802149e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80214a2:	4618      	mov	r0, r3
 80214a4:	f7ee f8b9 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80214a8:	2c00      	cmp	r4, #0
 80214aa:	d017      	beq.n	80214dc <_ZNK14MockNamedValue8toStringEv+0x388>
        return StringFrom(value_.pointerValue_);
 80214ac:	683b      	ldr	r3, [r7, #0]
 80214ae:	699a      	ldr	r2, [r3, #24]
 80214b0:	687b      	ldr	r3, [r7, #4]
 80214b2:	4611      	mov	r1, r2
 80214b4:	4618      	mov	r0, r3
 80214b6:	f7ee fb9b 	bl	800fbf0 <_Z10StringFromPKv>
 80214ba:	e0b0      	b.n	802161e <_ZNK14MockNamedValue8toStringEv+0x4ca>
 80214bc:	080292b4 	.word	0x080292b4
 80214c0:	080292b0 	.word	0x080292b0
 80214c4:	080293a0 	.word	0x080293a0
 80214c8:	080292bc 	.word	0x080292bc
 80214cc:	080292cc 	.word	0x080292cc
 80214d0:	080292d8 	.word	0x080292d8
 80214d4:	0802937c 	.word	0x0802937c
 80214d8:	0802935c 	.word	0x0802935c
    else if (type_ == "void (*)()")
 80214dc:	683b      	ldr	r3, [r7, #0]
 80214de:	f103 040c 	add.w	r4, r3, #12
 80214e2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80214e6:	4950      	ldr	r1, [pc, #320]	; (8021628 <_ZNK14MockNamedValue8toStringEv+0x4d4>)
 80214e8:	4618      	mov	r0, r3
 80214ea:	f7ed fcde 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80214ee:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80214f2:	4619      	mov	r1, r3
 80214f4:	4620      	mov	r0, r4
 80214f6:	f7ee f89c 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 80214fa:	4603      	mov	r3, r0
 80214fc:	461c      	mov	r4, r3
 80214fe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8021502:	4618      	mov	r0, r3
 8021504:	f7ee f889 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8021508:	2c00      	cmp	r4, #0
 802150a:	d007      	beq.n	802151c <_ZNK14MockNamedValue8toStringEv+0x3c8>
        return StringFrom(value_.functionPointerValue_);
 802150c:	683b      	ldr	r3, [r7, #0]
 802150e:	699a      	ldr	r2, [r3, #24]
 8021510:	687b      	ldr	r3, [r7, #4]
 8021512:	4611      	mov	r1, r2
 8021514:	4618      	mov	r0, r3
 8021516:	f7ee fb95 	bl	800fc44 <_Z10StringFromPFvvE>
 802151a:	e080      	b.n	802161e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const void*")
 802151c:	683b      	ldr	r3, [r7, #0]
 802151e:	f103 040c 	add.w	r4, r3, #12
 8021522:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8021526:	4941      	ldr	r1, [pc, #260]	; (802162c <_ZNK14MockNamedValue8toStringEv+0x4d8>)
 8021528:	4618      	mov	r0, r3
 802152a:	f7ed fcbe 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 802152e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8021532:	4619      	mov	r1, r3
 8021534:	4620      	mov	r0, r4
 8021536:	f7ee f87c 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 802153a:	4603      	mov	r3, r0
 802153c:	461c      	mov	r4, r3
 802153e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8021542:	4618      	mov	r0, r3
 8021544:	f7ee f869 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8021548:	2c00      	cmp	r4, #0
 802154a:	d007      	beq.n	802155c <_ZNK14MockNamedValue8toStringEv+0x408>
        return StringFrom(value_.constPointerValue_);
 802154c:	683b      	ldr	r3, [r7, #0]
 802154e:	699a      	ldr	r2, [r3, #24]
 8021550:	687b      	ldr	r3, [r7, #4]
 8021552:	4611      	mov	r1, r2
 8021554:	4618      	mov	r0, r3
 8021556:	f7ee fb4b 	bl	800fbf0 <_Z10StringFromPKv>
 802155a:	e060      	b.n	802161e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "double")
 802155c:	683b      	ldr	r3, [r7, #0]
 802155e:	f103 040c 	add.w	r4, r3, #12
 8021562:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8021566:	4932      	ldr	r1, [pc, #200]	; (8021630 <_ZNK14MockNamedValue8toStringEv+0x4dc>)
 8021568:	4618      	mov	r0, r3
 802156a:	f7ed fc9e 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 802156e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8021572:	4619      	mov	r1, r3
 8021574:	4620      	mov	r0, r4
 8021576:	f7ee f85c 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 802157a:	4603      	mov	r3, r0
 802157c:	461c      	mov	r4, r3
 802157e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8021582:	4618      	mov	r0, r3
 8021584:	f7ee f849 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8021588:	2c00      	cmp	r4, #0
 802158a:	d00c      	beq.n	80215a6 <_ZNK14MockNamedValue8toStringEv+0x452>
        return StringFrom(value_.doubleValue_.value);
 802158c:	683b      	ldr	r3, [r7, #0]
 802158e:	ed93 7b06 	vldr	d7, [r3, #24]
 8021592:	687b      	ldr	r3, [r7, #4]
 8021594:	2106      	movs	r1, #6
 8021596:	eeb0 0a47 	vmov.f32	s0, s14
 802159a:	eef0 0a67 	vmov.f32	s1, s15
 802159e:	4618      	mov	r0, r3
 80215a0:	f7ee fd00 	bl	800ffa4 <_Z10StringFromdi>
 80215a4:	e03b      	b.n	802161e <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const unsigned char*")
 80215a6:	683b      	ldr	r3, [r7, #0]
 80215a8:	f103 040c 	add.w	r4, r3, #12
 80215ac:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80215b0:	4920      	ldr	r1, [pc, #128]	; (8021634 <_ZNK14MockNamedValue8toStringEv+0x4e0>)
 80215b2:	4618      	mov	r0, r3
 80215b4:	f7ed fc79 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 80215b8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80215bc:	4619      	mov	r1, r3
 80215be:	4620      	mov	r0, r4
 80215c0:	f7ee f837 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 80215c4:	4603      	mov	r3, r0
 80215c6:	461c      	mov	r4, r3
 80215c8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80215cc:	4618      	mov	r0, r3
 80215ce:	f7ee f824 	bl	800f61a <_ZN12SimpleStringD1Ev>
 80215d2:	2c00      	cmp	r4, #0
 80215d4:	d008      	beq.n	80215e8 <_ZNK14MockNamedValue8toStringEv+0x494>
        return StringFromBinaryWithSizeOrNull(value_.memoryBufferValue_, size_);
 80215d6:	683b      	ldr	r3, [r7, #0]
 80215d8:	6999      	ldr	r1, [r3, #24]
 80215da:	683b      	ldr	r3, [r7, #0]
 80215dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80215de:	687b      	ldr	r3, [r7, #4]
 80215e0:	4618      	mov	r0, r3
 80215e2:	f7ee fe73 	bl	80102cc <_Z30StringFromBinaryWithSizeOrNullPKhj>
 80215e6:	e01a      	b.n	802161e <_ZNK14MockNamedValue8toStringEv+0x4ca>

    if (comparator_)
 80215e8:	683b      	ldr	r3, [r7, #0]
 80215ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80215ec:	2b00      	cmp	r3, #0
 80215ee:	d00b      	beq.n	8021608 <_ZNK14MockNamedValue8toStringEv+0x4b4>
        return comparator_->valueToString(value_.constObjectPointerValue_);
 80215f0:	683b      	ldr	r3, [r7, #0]
 80215f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80215f4:	683b      	ldr	r3, [r7, #0]
 80215f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80215f8:	681b      	ldr	r3, [r3, #0]
 80215fa:	330c      	adds	r3, #12
 80215fc:	681b      	ldr	r3, [r3, #0]
 80215fe:	683a      	ldr	r2, [r7, #0]
 8021600:	6992      	ldr	r2, [r2, #24]
 8021602:	6878      	ldr	r0, [r7, #4]
 8021604:	4798      	blx	r3
 8021606:	e00a      	b.n	802161e <_ZNK14MockNamedValue8toStringEv+0x4ca>

    return StringFromFormat("No comparator found for type: \"%s\"", type_.asCharString());
 8021608:	683b      	ldr	r3, [r7, #0]
 802160a:	330c      	adds	r3, #12
 802160c:	4618      	mov	r0, r3
 802160e:	f7ed ffd7 	bl	800f5c0 <_ZNK12SimpleString12asCharStringEv>
 8021612:	4602      	mov	r2, r0
 8021614:	687b      	ldr	r3, [r7, #4]
 8021616:	4908      	ldr	r1, [pc, #32]	; (8021638 <_ZNK14MockNamedValue8toStringEv+0x4e4>)
 8021618:	4618      	mov	r0, r3
 802161a:	f7ee fd05 	bl	8010028 <_Z16StringFromFormatPKcz>

}
 802161e:	6878      	ldr	r0, [r7, #4]
 8021620:	37e4      	adds	r7, #228	; 0xe4
 8021622:	46bd      	mov	sp, r7
 8021624:	bd90      	pop	{r4, r7, pc}
 8021626:	bf00      	nop
 8021628:	08029370 	.word	0x08029370
 802162c:	08029364 	.word	0x08029364
 8021630:	08029354 	.word	0x08029354
 8021634:	08029388 	.word	0x08029388
 8021638:	080293a4 	.word	0x080293a4

0802163c <_ZN22MockNamedValueListNode7setNextEPS_>:

void MockNamedValueListNode::setNext(MockNamedValueListNode* node)
{
 802163c:	b480      	push	{r7}
 802163e:	b083      	sub	sp, #12
 8021640:	af00      	add	r7, sp, #0
 8021642:	6078      	str	r0, [r7, #4]
 8021644:	6039      	str	r1, [r7, #0]
    next_ = node;
 8021646:	687b      	ldr	r3, [r7, #4]
 8021648:	683a      	ldr	r2, [r7, #0]
 802164a:	605a      	str	r2, [r3, #4]
}
 802164c:	bf00      	nop
 802164e:	370c      	adds	r7, #12
 8021650:	46bd      	mov	sp, r7
 8021652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021656:	4770      	bx	lr

08021658 <_ZN22MockNamedValueListNode4nextEv>:

MockNamedValueListNode* MockNamedValueListNode::next()
{
 8021658:	b480      	push	{r7}
 802165a:	b083      	sub	sp, #12
 802165c:	af00      	add	r7, sp, #0
 802165e:	6078      	str	r0, [r7, #4]
    return next_;
 8021660:	687b      	ldr	r3, [r7, #4]
 8021662:	685b      	ldr	r3, [r3, #4]
}
 8021664:	4618      	mov	r0, r3
 8021666:	370c      	adds	r7, #12
 8021668:	46bd      	mov	sp, r7
 802166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802166e:	4770      	bx	lr

08021670 <_ZN22MockNamedValueListNode4itemEv>:

MockNamedValue* MockNamedValueListNode::item()
{
 8021670:	b480      	push	{r7}
 8021672:	b083      	sub	sp, #12
 8021674:	af00      	add	r7, sp, #0
 8021676:	6078      	str	r0, [r7, #4]
    return data_;
 8021678:	687b      	ldr	r3, [r7, #4]
 802167a:	681b      	ldr	r3, [r3, #0]
}
 802167c:	4618      	mov	r0, r3
 802167e:	370c      	adds	r7, #12
 8021680:	46bd      	mov	sp, r7
 8021682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021686:	4770      	bx	lr

08021688 <_ZN22MockNamedValueListNode7destroyEv>:

void MockNamedValueListNode::destroy()
{
 8021688:	b580      	push	{r7, lr}
 802168a:	b082      	sub	sp, #8
 802168c:	af00      	add	r7, sp, #0
 802168e:	6078      	str	r0, [r7, #4]
    delete data_;
 8021690:	687b      	ldr	r3, [r7, #4]
 8021692:	681b      	ldr	r3, [r3, #0]
 8021694:	2b00      	cmp	r3, #0
 8021696:	d004      	beq.n	80216a2 <_ZN22MockNamedValueListNode7destroyEv+0x1a>
 8021698:	681a      	ldr	r2, [r3, #0]
 802169a:	3204      	adds	r2, #4
 802169c:	6812      	ldr	r2, [r2, #0]
 802169e:	4618      	mov	r0, r3
 80216a0:	4790      	blx	r2
}
 80216a2:	bf00      	nop
 80216a4:	3708      	adds	r7, #8
 80216a6:	46bd      	mov	sp, r7
 80216a8:	bd80      	pop	{r7, pc}

080216aa <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>:

MockNamedValueListNode::MockNamedValueListNode(MockNamedValue* newValue)
 80216aa:	b480      	push	{r7}
 80216ac:	b083      	sub	sp, #12
 80216ae:	af00      	add	r7, sp, #0
 80216b0:	6078      	str	r0, [r7, #4]
 80216b2:	6039      	str	r1, [r7, #0]
    : data_(newValue), next_(NULLPTR)
 80216b4:	687b      	ldr	r3, [r7, #4]
 80216b6:	683a      	ldr	r2, [r7, #0]
 80216b8:	601a      	str	r2, [r3, #0]
 80216ba:	687b      	ldr	r3, [r7, #4]
 80216bc:	2200      	movs	r2, #0
 80216be:	605a      	str	r2, [r3, #4]
{
}
 80216c0:	687b      	ldr	r3, [r7, #4]
 80216c2:	4618      	mov	r0, r3
 80216c4:	370c      	adds	r7, #12
 80216c6:	46bd      	mov	sp, r7
 80216c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216cc:	4770      	bx	lr

080216ce <_ZNK22MockNamedValueListNode7getNameEv>:

SimpleString MockNamedValueListNode::getName() const
{
 80216ce:	b580      	push	{r7, lr}
 80216d0:	b082      	sub	sp, #8
 80216d2:	af00      	add	r7, sp, #0
 80216d4:	6078      	str	r0, [r7, #4]
 80216d6:	6039      	str	r1, [r7, #0]
    return data_->getName();
 80216d8:	683b      	ldr	r3, [r7, #0]
 80216da:	6819      	ldr	r1, [r3, #0]
 80216dc:	683b      	ldr	r3, [r7, #0]
 80216de:	681b      	ldr	r3, [r3, #0]
 80216e0:	681b      	ldr	r3, [r3, #0]
 80216e2:	335c      	adds	r3, #92	; 0x5c
 80216e4:	681b      	ldr	r3, [r3, #0]
 80216e6:	687a      	ldr	r2, [r7, #4]
 80216e8:	4610      	mov	r0, r2
 80216ea:	4798      	blx	r3
}
 80216ec:	6878      	ldr	r0, [r7, #4]
 80216ee:	3708      	adds	r7, #8
 80216f0:	46bd      	mov	sp, r7
 80216f2:	bd80      	pop	{r7, pc}

080216f4 <_ZNK22MockNamedValueListNode7getTypeEv>:

SimpleString MockNamedValueListNode::getType() const
{
 80216f4:	b580      	push	{r7, lr}
 80216f6:	b082      	sub	sp, #8
 80216f8:	af00      	add	r7, sp, #0
 80216fa:	6078      	str	r0, [r7, #4]
 80216fc:	6039      	str	r1, [r7, #0]
    return data_->getType();
 80216fe:	683b      	ldr	r3, [r7, #0]
 8021700:	6819      	ldr	r1, [r3, #0]
 8021702:	683b      	ldr	r3, [r7, #0]
 8021704:	681b      	ldr	r3, [r3, #0]
 8021706:	681b      	ldr	r3, [r3, #0]
 8021708:	3360      	adds	r3, #96	; 0x60
 802170a:	681b      	ldr	r3, [r3, #0]
 802170c:	687a      	ldr	r2, [r7, #4]
 802170e:	4610      	mov	r0, r2
 8021710:	4798      	blx	r3
}
 8021712:	6878      	ldr	r0, [r7, #4]
 8021714:	3708      	adds	r7, #8
 8021716:	46bd      	mov	sp, r7
 8021718:	bd80      	pop	{r7, pc}

0802171a <_ZN18MockNamedValueListC1Ev>:

MockNamedValueList::MockNamedValueList() : head_(NULLPTR)
 802171a:	b480      	push	{r7}
 802171c:	b083      	sub	sp, #12
 802171e:	af00      	add	r7, sp, #0
 8021720:	6078      	str	r0, [r7, #4]
 8021722:	687b      	ldr	r3, [r7, #4]
 8021724:	2200      	movs	r2, #0
 8021726:	601a      	str	r2, [r3, #0]
{
}
 8021728:	687b      	ldr	r3, [r7, #4]
 802172a:	4618      	mov	r0, r3
 802172c:	370c      	adds	r7, #12
 802172e:	46bd      	mov	sp, r7
 8021730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021734:	4770      	bx	lr

08021736 <_ZN18MockNamedValueList5clearEv>:

void MockNamedValueList::clear()
{
 8021736:	b580      	push	{r7, lr}
 8021738:	b084      	sub	sp, #16
 802173a:	af00      	add	r7, sp, #0
 802173c:	6078      	str	r0, [r7, #4]
    while (head_) {
 802173e:	687b      	ldr	r3, [r7, #4]
 8021740:	681b      	ldr	r3, [r3, #0]
 8021742:	2b00      	cmp	r3, #0
 8021744:	d016      	beq.n	8021774 <_ZN18MockNamedValueList5clearEv+0x3e>
        MockNamedValueListNode* n = head_->next();
 8021746:	687b      	ldr	r3, [r7, #4]
 8021748:	681b      	ldr	r3, [r3, #0]
 802174a:	4618      	mov	r0, r3
 802174c:	f7ff ff84 	bl	8021658 <_ZN22MockNamedValueListNode4nextEv>
 8021750:	60f8      	str	r0, [r7, #12]
        head_->destroy();
 8021752:	687b      	ldr	r3, [r7, #4]
 8021754:	681b      	ldr	r3, [r3, #0]
 8021756:	4618      	mov	r0, r3
 8021758:	f7ff ff96 	bl	8021688 <_ZN22MockNamedValueListNode7destroyEv>
        delete head_;
 802175c:	687b      	ldr	r3, [r7, #4]
 802175e:	681b      	ldr	r3, [r3, #0]
 8021760:	2b00      	cmp	r3, #0
 8021762:	d003      	beq.n	802176c <_ZN18MockNamedValueList5clearEv+0x36>
 8021764:	2108      	movs	r1, #8
 8021766:	4618      	mov	r0, r3
 8021768:	f7ea fff0 	bl	800c74c <_ZdlPvj>
        head_ = n;
 802176c:	687b      	ldr	r3, [r7, #4]
 802176e:	68fa      	ldr	r2, [r7, #12]
 8021770:	601a      	str	r2, [r3, #0]
    while (head_) {
 8021772:	e7e4      	b.n	802173e <_ZN18MockNamedValueList5clearEv+0x8>
    }
}
 8021774:	bf00      	nop
 8021776:	3710      	adds	r7, #16
 8021778:	46bd      	mov	sp, r7
 802177a:	bd80      	pop	{r7, pc}

0802177c <_ZN18MockNamedValueList3addEP14MockNamedValue>:

void MockNamedValueList::add(MockNamedValue* newValue)
{
 802177c:	b590      	push	{r4, r7, lr}
 802177e:	b085      	sub	sp, #20
 8021780:	af00      	add	r7, sp, #0
 8021782:	6078      	str	r0, [r7, #4]
 8021784:	6039      	str	r1, [r7, #0]
    MockNamedValueListNode* newNode = new MockNamedValueListNode(newValue);
 8021786:	f44f 7210 	mov.w	r2, #576	; 0x240
 802178a:	4916      	ldr	r1, [pc, #88]	; (80217e4 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x68>)
 802178c:	2008      	movs	r0, #8
 802178e:	f7ea ffc9 	bl	800c724 <_ZnwjPKci>
 8021792:	4604      	mov	r4, r0
 8021794:	6839      	ldr	r1, [r7, #0]
 8021796:	4620      	mov	r0, r4
 8021798:	f7ff ff87 	bl	80216aa <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>
 802179c:	60bc      	str	r4, [r7, #8]
    if (head_ == NULLPTR)
 802179e:	687b      	ldr	r3, [r7, #4]
 80217a0:	681b      	ldr	r3, [r3, #0]
 80217a2:	2b00      	cmp	r3, #0
 80217a4:	d103      	bne.n	80217ae <_ZN18MockNamedValueList3addEP14MockNamedValue+0x32>
        head_ = newNode;
 80217a6:	687b      	ldr	r3, [r7, #4]
 80217a8:	68ba      	ldr	r2, [r7, #8]
 80217aa:	601a      	str	r2, [r3, #0]
    else {
        MockNamedValueListNode* lastNode = head_;
        while (lastNode->next()) lastNode = lastNode->next();
        lastNode->setNext(newNode);
    }
}
 80217ac:	e016      	b.n	80217dc <_ZN18MockNamedValueList3addEP14MockNamedValue+0x60>
        MockNamedValueListNode* lastNode = head_;
 80217ae:	687b      	ldr	r3, [r7, #4]
 80217b0:	681b      	ldr	r3, [r3, #0]
 80217b2:	60fb      	str	r3, [r7, #12]
        while (lastNode->next()) lastNode = lastNode->next();
 80217b4:	68f8      	ldr	r0, [r7, #12]
 80217b6:	f7ff ff4f 	bl	8021658 <_ZN22MockNamedValueListNode4nextEv>
 80217ba:	4603      	mov	r3, r0
 80217bc:	2b00      	cmp	r3, #0
 80217be:	bf14      	ite	ne
 80217c0:	2301      	movne	r3, #1
 80217c2:	2300      	moveq	r3, #0
 80217c4:	b2db      	uxtb	r3, r3
 80217c6:	2b00      	cmp	r3, #0
 80217c8:	d004      	beq.n	80217d4 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x58>
 80217ca:	68f8      	ldr	r0, [r7, #12]
 80217cc:	f7ff ff44 	bl	8021658 <_ZN22MockNamedValueListNode4nextEv>
 80217d0:	60f8      	str	r0, [r7, #12]
 80217d2:	e7ef      	b.n	80217b4 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x38>
        lastNode->setNext(newNode);
 80217d4:	68b9      	ldr	r1, [r7, #8]
 80217d6:	68f8      	ldr	r0, [r7, #12]
 80217d8:	f7ff ff30 	bl	802163c <_ZN22MockNamedValueListNode7setNextEPS_>
}
 80217dc:	bf00      	nop
 80217de:	3714      	adds	r7, #20
 80217e0:	46bd      	mov	sp, r7
 80217e2:	bd90      	pop	{r4, r7, pc}
 80217e4:	080292ec 	.word	0x080292ec

080217e8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>:

MockNamedValue* MockNamedValueList::getValueByName(const SimpleString& name)
{
 80217e8:	b590      	push	{r4, r7, lr}
 80217ea:	b087      	sub	sp, #28
 80217ec:	af00      	add	r7, sp, #0
 80217ee:	6078      	str	r0, [r7, #4]
 80217f0:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 80217f2:	687b      	ldr	r3, [r7, #4]
 80217f4:	681b      	ldr	r3, [r3, #0]
 80217f6:	617b      	str	r3, [r7, #20]
 80217f8:	697b      	ldr	r3, [r7, #20]
 80217fa:	2b00      	cmp	r3, #0
 80217fc:	d01e      	beq.n	802183c <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x54>
        if (p->getName() == name)
 80217fe:	f107 030c 	add.w	r3, r7, #12
 8021802:	6979      	ldr	r1, [r7, #20]
 8021804:	4618      	mov	r0, r3
 8021806:	f7ff ff62 	bl	80216ce <_ZNK22MockNamedValueListNode7getNameEv>
 802180a:	f107 030c 	add.w	r3, r7, #12
 802180e:	6839      	ldr	r1, [r7, #0]
 8021810:	4618      	mov	r0, r3
 8021812:	f7ed ff0e 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8021816:	4603      	mov	r3, r0
 8021818:	461c      	mov	r4, r3
 802181a:	f107 030c 	add.w	r3, r7, #12
 802181e:	4618      	mov	r0, r3
 8021820:	f7ed fefb 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8021824:	2c00      	cmp	r4, #0
 8021826:	d004      	beq.n	8021832 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x4a>
            return p->item();
 8021828:	6978      	ldr	r0, [r7, #20]
 802182a:	f7ff ff21 	bl	8021670 <_ZN22MockNamedValueListNode4itemEv>
 802182e:	4603      	mov	r3, r0
 8021830:	e005      	b.n	802183e <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x56>
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 8021832:	6978      	ldr	r0, [r7, #20]
 8021834:	f7ff ff10 	bl	8021658 <_ZN22MockNamedValueListNode4nextEv>
 8021838:	6178      	str	r0, [r7, #20]
 802183a:	e7dd      	b.n	80217f8 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x10>
    return NULLPTR;
 802183c:	2300      	movs	r3, #0
}
 802183e:	4618      	mov	r0, r3
 8021840:	371c      	adds	r7, #28
 8021842:	46bd      	mov	sp, r7
 8021844:	bd90      	pop	{r4, r7, pc}

08021846 <_ZN18MockNamedValueList5beginEv>:

MockNamedValueListNode* MockNamedValueList::begin()
{
 8021846:	b480      	push	{r7}
 8021848:	b083      	sub	sp, #12
 802184a:	af00      	add	r7, sp, #0
 802184c:	6078      	str	r0, [r7, #4]
    return head_;
 802184e:	687b      	ldr	r3, [r7, #4]
 8021850:	681b      	ldr	r3, [r3, #0]
}
 8021852:	4618      	mov	r0, r3
 8021854:	370c      	adds	r7, #12
 8021856:	46bd      	mov	sp, r7
 8021858:	f85d 7b04 	ldr.w	r7, [sp], #4
 802185c:	4770      	bx	lr

0802185e <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>:

struct MockNamedValueComparatorsAndCopiersRepositoryNode
{
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 802185e:	b580      	push	{r7, lr}
 8021860:	b084      	sub	sp, #16
 8021862:	af00      	add	r7, sp, #0
 8021864:	60f8      	str	r0, [r7, #12]
 8021866:	60b9      	str	r1, [r7, #8]
 8021868:	607a      	str	r2, [r7, #4]
 802186a:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(NULLPTR), next_(next) {}
 802186c:	68fb      	ldr	r3, [r7, #12]
 802186e:	68b9      	ldr	r1, [r7, #8]
 8021870:	4618      	mov	r0, r3
 8021872:	f7ed fb6e 	bl	800ef52 <_ZN12SimpleStringC1ERKS_>
 8021876:	68fb      	ldr	r3, [r7, #12]
 8021878:	687a      	ldr	r2, [r7, #4]
 802187a:	609a      	str	r2, [r3, #8]
 802187c:	68fb      	ldr	r3, [r7, #12]
 802187e:	2200      	movs	r2, #0
 8021880:	60da      	str	r2, [r3, #12]
 8021882:	68fb      	ldr	r3, [r7, #12]
 8021884:	683a      	ldr	r2, [r7, #0]
 8021886:	611a      	str	r2, [r3, #16]
 8021888:	68fb      	ldr	r3, [r7, #12]
 802188a:	4618      	mov	r0, r3
 802188c:	3710      	adds	r7, #16
 802188e:	46bd      	mov	sp, r7
 8021890:	bd80      	pop	{r7, pc}

08021892 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 8021892:	b580      	push	{r7, lr}
 8021894:	b084      	sub	sp, #16
 8021896:	af00      	add	r7, sp, #0
 8021898:	60f8      	str	r0, [r7, #12]
 802189a:	60b9      	str	r1, [r7, #8]
 802189c:	607a      	str	r2, [r7, #4]
 802189e:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(NULLPTR), copier_(copier), next_(next) {}
 80218a0:	68fb      	ldr	r3, [r7, #12]
 80218a2:	68b9      	ldr	r1, [r7, #8]
 80218a4:	4618      	mov	r0, r3
 80218a6:	f7ed fb54 	bl	800ef52 <_ZN12SimpleStringC1ERKS_>
 80218aa:	68fb      	ldr	r3, [r7, #12]
 80218ac:	2200      	movs	r2, #0
 80218ae:	609a      	str	r2, [r3, #8]
 80218b0:	68fb      	ldr	r3, [r7, #12]
 80218b2:	687a      	ldr	r2, [r7, #4]
 80218b4:	60da      	str	r2, [r3, #12]
 80218b6:	68fb      	ldr	r3, [r7, #12]
 80218b8:	683a      	ldr	r2, [r7, #0]
 80218ba:	611a      	str	r2, [r3, #16]
 80218bc:	68fb      	ldr	r3, [r7, #12]
 80218be:	4618      	mov	r0, r3
 80218c0:	3710      	adds	r7, #16
 80218c2:	46bd      	mov	sp, r7
 80218c4:	bd80      	pop	{r7, pc}

080218c6 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 80218c6:	b580      	push	{r7, lr}
 80218c8:	b084      	sub	sp, #16
 80218ca:	af00      	add	r7, sp, #0
 80218cc:	60f8      	str	r0, [r7, #12]
 80218ce:	60b9      	str	r1, [r7, #8]
 80218d0:	607a      	str	r2, [r7, #4]
 80218d2:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(copier), next_(next) {}
 80218d4:	68fb      	ldr	r3, [r7, #12]
 80218d6:	68b9      	ldr	r1, [r7, #8]
 80218d8:	4618      	mov	r0, r3
 80218da:	f7ed fb3a 	bl	800ef52 <_ZN12SimpleStringC1ERKS_>
 80218de:	68fb      	ldr	r3, [r7, #12]
 80218e0:	687a      	ldr	r2, [r7, #4]
 80218e2:	609a      	str	r2, [r3, #8]
 80218e4:	68fb      	ldr	r3, [r7, #12]
 80218e6:	683a      	ldr	r2, [r7, #0]
 80218e8:	60da      	str	r2, [r3, #12]
 80218ea:	68fb      	ldr	r3, [r7, #12]
 80218ec:	69ba      	ldr	r2, [r7, #24]
 80218ee:	611a      	str	r2, [r3, #16]
 80218f0:	68fb      	ldr	r3, [r7, #12]
 80218f2:	4618      	mov	r0, r3
 80218f4:	3710      	adds	r7, #16
 80218f6:	46bd      	mov	sp, r7
 80218f8:	bd80      	pop	{r7, pc}
	...

080218fc <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>:
    MockNamedValueComparator* comparator_;
    MockNamedValueCopier* copier_;
    MockNamedValueComparatorsAndCopiersRepositoryNode* next_;
};

MockNamedValueComparatorsAndCopiersRepository::MockNamedValueComparatorsAndCopiersRepository() : head_(NULLPTR)
 80218fc:	b480      	push	{r7}
 80218fe:	b083      	sub	sp, #12
 8021900:	af00      	add	r7, sp, #0
 8021902:	6078      	str	r0, [r7, #4]
 8021904:	4a06      	ldr	r2, [pc, #24]	; (8021920 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev+0x24>)
 8021906:	687b      	ldr	r3, [r7, #4]
 8021908:	601a      	str	r2, [r3, #0]
 802190a:	687b      	ldr	r3, [r7, #4]
 802190c:	2200      	movs	r2, #0
 802190e:	605a      	str	r2, [r3, #4]
{

}
 8021910:	687b      	ldr	r3, [r7, #4]
 8021912:	4618      	mov	r0, r3
 8021914:	370c      	adds	r7, #12
 8021916:	46bd      	mov	sp, r7
 8021918:	f85d 7b04 	ldr.w	r7, [sp], #4
 802191c:	4770      	bx	lr
 802191e:	bf00      	nop
 8021920:	0802c31c 	.word	0x0802c31c

08021924 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>:

MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 8021924:	b580      	push	{r7, lr}
 8021926:	b082      	sub	sp, #8
 8021928:	af00      	add	r7, sp, #0
 802192a:	6078      	str	r0, [r7, #4]
 802192c:	4a05      	ldr	r2, [pc, #20]	; (8021944 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev+0x20>)
 802192e:	687b      	ldr	r3, [r7, #4]
 8021930:	601a      	str	r2, [r3, #0]
{
    clear();
 8021932:	6878      	ldr	r0, [r7, #4]
 8021934:	f000 f825 	bl	8021982 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
}
 8021938:	687b      	ldr	r3, [r7, #4]
 802193a:	4618      	mov	r0, r3
 802193c:	3708      	adds	r7, #8
 802193e:	46bd      	mov	sp, r7
 8021940:	bd80      	pop	{r7, pc}
 8021942:	bf00      	nop
 8021944:	0802c31c 	.word	0x0802c31c

08021948 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD0Ev>:
MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 8021948:	b580      	push	{r7, lr}
 802194a:	b082      	sub	sp, #8
 802194c:	af00      	add	r7, sp, #0
 802194e:	6078      	str	r0, [r7, #4]
}
 8021950:	6878      	ldr	r0, [r7, #4]
 8021952:	f7ff ffe7 	bl	8021924 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 8021956:	2108      	movs	r1, #8
 8021958:	6878      	ldr	r0, [r7, #4]
 802195a:	f7ea fef7 	bl	800c74c <_ZdlPvj>
 802195e:	687b      	ldr	r3, [r7, #4]
 8021960:	4618      	mov	r0, r3
 8021962:	3708      	adds	r7, #8
 8021964:	46bd      	mov	sp, r7
 8021966:	bd80      	pop	{r7, pc}

08021968 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>:
struct MockNamedValueComparatorsAndCopiersRepositoryNode
 8021968:	b580      	push	{r7, lr}
 802196a:	b082      	sub	sp, #8
 802196c:	af00      	add	r7, sp, #0
 802196e:	6078      	str	r0, [r7, #4]
 8021970:	687b      	ldr	r3, [r7, #4]
 8021972:	4618      	mov	r0, r3
 8021974:	f7ed fe51 	bl	800f61a <_ZN12SimpleStringD1Ev>
 8021978:	687b      	ldr	r3, [r7, #4]
 802197a:	4618      	mov	r0, r3
 802197c:	3708      	adds	r7, #8
 802197e:	46bd      	mov	sp, r7
 8021980:	bd80      	pop	{r7, pc}

08021982 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>:

void MockNamedValueComparatorsAndCopiersRepository::clear()
{
 8021982:	b590      	push	{r4, r7, lr}
 8021984:	b085      	sub	sp, #20
 8021986:	af00      	add	r7, sp, #0
 8021988:	6078      	str	r0, [r7, #4]
    while (head_) {
 802198a:	687b      	ldr	r3, [r7, #4]
 802198c:	685b      	ldr	r3, [r3, #4]
 802198e:	2b00      	cmp	r3, #0
 8021990:	d012      	beq.n	80219b8 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x36>
        MockNamedValueComparatorsAndCopiersRepositoryNode* next = head_->next_;
 8021992:	687b      	ldr	r3, [r7, #4]
 8021994:	685b      	ldr	r3, [r3, #4]
 8021996:	691b      	ldr	r3, [r3, #16]
 8021998:	60fb      	str	r3, [r7, #12]
        delete head_;
 802199a:	687b      	ldr	r3, [r7, #4]
 802199c:	685c      	ldr	r4, [r3, #4]
 802199e:	2c00      	cmp	r4, #0
 80219a0:	d006      	beq.n	80219b0 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x2e>
 80219a2:	4620      	mov	r0, r4
 80219a4:	f7ff ffe0 	bl	8021968 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>
 80219a8:	2114      	movs	r1, #20
 80219aa:	4620      	mov	r0, r4
 80219ac:	f7ea fece 	bl	800c74c <_ZdlPvj>
        head_ = next;
 80219b0:	687b      	ldr	r3, [r7, #4]
 80219b2:	68fa      	ldr	r2, [r7, #12]
 80219b4:	605a      	str	r2, [r3, #4]
    while (head_) {
 80219b6:	e7e8      	b.n	802198a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x8>
    }
}
 80219b8:	bf00      	nop
 80219ba:	3714      	adds	r7, #20
 80219bc:	46bd      	mov	sp, r7
 80219be:	bd90      	pop	{r4, r7, pc}

080219c0 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockNamedValueComparatorsAndCopiersRepository::installComparator(const SimpleString& name, MockNamedValueComparator& comparator)
{
 80219c0:	b590      	push	{r4, r7, lr}
 80219c2:	b085      	sub	sp, #20
 80219c4:	af00      	add	r7, sp, #0
 80219c6:	60f8      	str	r0, [r7, #12]
 80219c8:	60b9      	str	r1, [r7, #8]
 80219ca:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &comparator, head_);
 80219cc:	f240 227a 	movw	r2, #634	; 0x27a
 80219d0:	4908      	ldr	r1, [pc, #32]	; (80219f4 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x34>)
 80219d2:	2014      	movs	r0, #20
 80219d4:	f7ea fea6 	bl	800c724 <_ZnwjPKci>
 80219d8:	4604      	mov	r4, r0
 80219da:	68fb      	ldr	r3, [r7, #12]
 80219dc:	685b      	ldr	r3, [r3, #4]
 80219de:	687a      	ldr	r2, [r7, #4]
 80219e0:	68b9      	ldr	r1, [r7, #8]
 80219e2:	4620      	mov	r0, r4
 80219e4:	f7ff ff3b 	bl	802185e <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>
 80219e8:	68fb      	ldr	r3, [r7, #12]
 80219ea:	605c      	str	r4, [r3, #4]
}
 80219ec:	bf00      	nop
 80219ee:	3714      	adds	r7, #20
 80219f0:	46bd      	mov	sp, r7
 80219f2:	bd90      	pop	{r4, r7, pc}
 80219f4:	080292ec 	.word	0x080292ec

080219f8 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockNamedValueComparatorsAndCopiersRepository::installCopier(const SimpleString& name, MockNamedValueCopier& copier)
{
 80219f8:	b590      	push	{r4, r7, lr}
 80219fa:	b085      	sub	sp, #20
 80219fc:	af00      	add	r7, sp, #0
 80219fe:	60f8      	str	r0, [r7, #12]
 8021a00:	60b9      	str	r1, [r7, #8]
 8021a02:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &copier, head_);
 8021a04:	f240 227f 	movw	r2, #639	; 0x27f
 8021a08:	4908      	ldr	r1, [pc, #32]	; (8021a2c <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier+0x34>)
 8021a0a:	2014      	movs	r0, #20
 8021a0c:	f7ea fe8a 	bl	800c724 <_ZnwjPKci>
 8021a10:	4604      	mov	r4, r0
 8021a12:	68fb      	ldr	r3, [r7, #12]
 8021a14:	685b      	ldr	r3, [r3, #4]
 8021a16:	687a      	ldr	r2, [r7, #4]
 8021a18:	68b9      	ldr	r1, [r7, #8]
 8021a1a:	4620      	mov	r0, r4
 8021a1c:	f7ff ff39 	bl	8021892 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>
 8021a20:	68fb      	ldr	r3, [r7, #12]
 8021a22:	605c      	str	r4, [r3, #4]
}
 8021a24:	bf00      	nop
 8021a26:	3714      	adds	r7, #20
 8021a28:	46bd      	mov	sp, r7
 8021a2a:	bd90      	pop	{r4, r7, pc}
 8021a2c:	080292ec 	.word	0x080292ec

08021a30 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString>:

MockNamedValueComparator* MockNamedValueComparatorsAndCopiersRepository::getComparatorForType(const SimpleString& name)
{
 8021a30:	b580      	push	{r7, lr}
 8021a32:	b084      	sub	sp, #16
 8021a34:	af00      	add	r7, sp, #0
 8021a36:	6078      	str	r0, [r7, #4]
 8021a38:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 8021a3a:	687b      	ldr	r3, [r7, #4]
 8021a3c:	685b      	ldr	r3, [r3, #4]
 8021a3e:	60fb      	str	r3, [r7, #12]
 8021a40:	68fb      	ldr	r3, [r7, #12]
 8021a42:	2b00      	cmp	r3, #0
 8021a44:	d017      	beq.n	8021a76 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->comparator_) return p->comparator_;
 8021a46:	68fb      	ldr	r3, [r7, #12]
 8021a48:	6839      	ldr	r1, [r7, #0]
 8021a4a:	4618      	mov	r0, r3
 8021a4c:	f7ed fdf1 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8021a50:	4603      	mov	r3, r0
 8021a52:	2b00      	cmp	r3, #0
 8021a54:	d005      	beq.n	8021a62 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 8021a56:	68fb      	ldr	r3, [r7, #12]
 8021a58:	689b      	ldr	r3, [r3, #8]
 8021a5a:	2b00      	cmp	r3, #0
 8021a5c:	d001      	beq.n	8021a62 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 8021a5e:	2301      	movs	r3, #1
 8021a60:	e000      	b.n	8021a64 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x34>
 8021a62:	2300      	movs	r3, #0
 8021a64:	2b00      	cmp	r3, #0
 8021a66:	d002      	beq.n	8021a6e <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x3e>
 8021a68:	68fb      	ldr	r3, [r7, #12]
 8021a6a:	689b      	ldr	r3, [r3, #8]
 8021a6c:	e004      	b.n	8021a78 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 8021a6e:	68fb      	ldr	r3, [r7, #12]
 8021a70:	691b      	ldr	r3, [r3, #16]
 8021a72:	60fb      	str	r3, [r7, #12]
 8021a74:	e7e4      	b.n	8021a40 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x10>
    return NULLPTR;
 8021a76:	2300      	movs	r3, #0
}
 8021a78:	4618      	mov	r0, r3
 8021a7a:	3710      	adds	r7, #16
 8021a7c:	46bd      	mov	sp, r7
 8021a7e:	bd80      	pop	{r7, pc}

08021a80 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString>:

MockNamedValueCopier* MockNamedValueComparatorsAndCopiersRepository::getCopierForType(const SimpleString& name)
{
 8021a80:	b580      	push	{r7, lr}
 8021a82:	b084      	sub	sp, #16
 8021a84:	af00      	add	r7, sp, #0
 8021a86:	6078      	str	r0, [r7, #4]
 8021a88:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 8021a8a:	687b      	ldr	r3, [r7, #4]
 8021a8c:	685b      	ldr	r3, [r3, #4]
 8021a8e:	60fb      	str	r3, [r7, #12]
 8021a90:	68fb      	ldr	r3, [r7, #12]
 8021a92:	2b00      	cmp	r3, #0
 8021a94:	d017      	beq.n	8021ac6 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->copier_) return p->copier_;
 8021a96:	68fb      	ldr	r3, [r7, #12]
 8021a98:	6839      	ldr	r1, [r7, #0]
 8021a9a:	4618      	mov	r0, r3
 8021a9c:	f7ed fdc9 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8021aa0:	4603      	mov	r3, r0
 8021aa2:	2b00      	cmp	r3, #0
 8021aa4:	d005      	beq.n	8021ab2 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 8021aa6:	68fb      	ldr	r3, [r7, #12]
 8021aa8:	68db      	ldr	r3, [r3, #12]
 8021aaa:	2b00      	cmp	r3, #0
 8021aac:	d001      	beq.n	8021ab2 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 8021aae:	2301      	movs	r3, #1
 8021ab0:	e000      	b.n	8021ab4 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x34>
 8021ab2:	2300      	movs	r3, #0
 8021ab4:	2b00      	cmp	r3, #0
 8021ab6:	d002      	beq.n	8021abe <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x3e>
 8021ab8:	68fb      	ldr	r3, [r7, #12]
 8021aba:	68db      	ldr	r3, [r3, #12]
 8021abc:	e004      	b.n	8021ac8 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 8021abe:	68fb      	ldr	r3, [r7, #12]
 8021ac0:	691b      	ldr	r3, [r3, #16]
 8021ac2:	60fb      	str	r3, [r7, #12]
 8021ac4:	e7e4      	b.n	8021a90 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x10>
    return NULLPTR;
 8021ac6:	2300      	movs	r3, #0
}
 8021ac8:	4618      	mov	r0, r3
 8021aca:	3710      	adds	r7, #16
 8021acc:	46bd      	mov	sp, r7
 8021ace:	bd80      	pop	{r7, pc}

08021ad0 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>:

void MockNamedValueComparatorsAndCopiersRepository::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 8021ad0:	b590      	push	{r4, r7, lr}
 8021ad2:	b087      	sub	sp, #28
 8021ad4:	af02      	add	r7, sp, #8
 8021ad6:	6078      	str	r0, [r7, #4]
 8021ad8:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 8021ada:	683b      	ldr	r3, [r7, #0]
 8021adc:	685b      	ldr	r3, [r3, #4]
 8021ade:	60fb      	str	r3, [r7, #12]
 8021ae0:	68fb      	ldr	r3, [r7, #12]
 8021ae2:	2b00      	cmp	r3, #0
 8021ae4:	d018      	beq.n	8021b18 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x48>
      head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(p->name_, p->comparator_, p->copier_, head_);
 8021ae6:	f240 2293 	movw	r2, #659	; 0x293
 8021aea:	490d      	ldr	r1, [pc, #52]	; (8021b20 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x50>)
 8021aec:	2014      	movs	r0, #20
 8021aee:	f7ea fe19 	bl	800c724 <_ZnwjPKci>
 8021af2:	4604      	mov	r4, r0
 8021af4:	68f9      	ldr	r1, [r7, #12]
 8021af6:	68fb      	ldr	r3, [r7, #12]
 8021af8:	689a      	ldr	r2, [r3, #8]
 8021afa:	68fb      	ldr	r3, [r7, #12]
 8021afc:	68d8      	ldr	r0, [r3, #12]
 8021afe:	687b      	ldr	r3, [r7, #4]
 8021b00:	685b      	ldr	r3, [r3, #4]
 8021b02:	9300      	str	r3, [sp, #0]
 8021b04:	4603      	mov	r3, r0
 8021b06:	4620      	mov	r0, r4
 8021b08:	f7ff fedd 	bl	80218c6 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>
 8021b0c:	687b      	ldr	r3, [r7, #4]
 8021b0e:	605c      	str	r4, [r3, #4]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 8021b10:	68fb      	ldr	r3, [r7, #12]
 8021b12:	691b      	ldr	r3, [r3, #16]
 8021b14:	60fb      	str	r3, [r7, #12]
 8021b16:	e7e3      	b.n	8021ae0 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x10>
}
 8021b18:	bf00      	nop
 8021b1a:	3714      	adds	r7, #20
 8021b1c:	46bd      	mov	sp, r7
 8021b1e:	bd90      	pop	{r4, r7, pc}
 8021b20:	080292ec 	.word	0x080292ec

08021b24 <_ZN10TestFilterC1ERK12SimpleString>:

TestFilter::TestFilter() : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
{
}

TestFilter::TestFilter(const SimpleString& filter) : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
 8021b24:	b580      	push	{r7, lr}
 8021b26:	b082      	sub	sp, #8
 8021b28:	af00      	add	r7, sp, #0
 8021b2a:	6078      	str	r0, [r7, #4]
 8021b2c:	6039      	str	r1, [r7, #0]
 8021b2e:	687b      	ldr	r3, [r7, #4]
 8021b30:	490b      	ldr	r1, [pc, #44]	; (8021b60 <_ZN10TestFilterC1ERK12SimpleString+0x3c>)
 8021b32:	4618      	mov	r0, r3
 8021b34:	f7ed f9b9 	bl	800eeaa <_ZN12SimpleStringC1EPKc>
 8021b38:	687b      	ldr	r3, [r7, #4]
 8021b3a:	2200      	movs	r2, #0
 8021b3c:	721a      	strb	r2, [r3, #8]
 8021b3e:	687b      	ldr	r3, [r7, #4]
 8021b40:	2200      	movs	r2, #0
 8021b42:	725a      	strb	r2, [r3, #9]
 8021b44:	687b      	ldr	r3, [r7, #4]
 8021b46:	2200      	movs	r2, #0
 8021b48:	60da      	str	r2, [r3, #12]
{
    filter_ = filter;
 8021b4a:	687b      	ldr	r3, [r7, #4]
 8021b4c:	6839      	ldr	r1, [r7, #0]
 8021b4e:	4618      	mov	r0, r3
 8021b50:	f7ed fa17 	bl	800ef82 <_ZN12SimpleStringaSERKS_>
}
 8021b54:	687b      	ldr	r3, [r7, #4]
 8021b56:	4618      	mov	r0, r3
 8021b58:	3708      	adds	r7, #8
 8021b5a:	46bd      	mov	sp, r7
 8021b5c:	bd80      	pop	{r7, pc}
 8021b5e:	bf00      	nop
 8021b60:	080293c8 	.word	0x080293c8

08021b64 <_ZN10TestFilter3addEPS_>:
{
    filter_ = filter;
}

TestFilter* TestFilter::add(TestFilter* filter)
{
 8021b64:	b480      	push	{r7}
 8021b66:	b083      	sub	sp, #12
 8021b68:	af00      	add	r7, sp, #0
 8021b6a:	6078      	str	r0, [r7, #4]
 8021b6c:	6039      	str	r1, [r7, #0]
    next_ = filter;
 8021b6e:	687b      	ldr	r3, [r7, #4]
 8021b70:	683a      	ldr	r2, [r7, #0]
 8021b72:	60da      	str	r2, [r3, #12]
    return this;
 8021b74:	687b      	ldr	r3, [r7, #4]
}
 8021b76:	4618      	mov	r0, r3
 8021b78:	370c      	adds	r7, #12
 8021b7a:	46bd      	mov	sp, r7
 8021b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b80:	4770      	bx	lr

08021b82 <_ZNK10TestFilter7getNextEv>:

TestFilter* TestFilter::getNext() const
{
 8021b82:	b480      	push	{r7}
 8021b84:	b083      	sub	sp, #12
 8021b86:	af00      	add	r7, sp, #0
 8021b88:	6078      	str	r0, [r7, #4]
    return next_;
 8021b8a:	687b      	ldr	r3, [r7, #4]
 8021b8c:	68db      	ldr	r3, [r3, #12]
}
 8021b8e:	4618      	mov	r0, r3
 8021b90:	370c      	adds	r7, #12
 8021b92:	46bd      	mov	sp, r7
 8021b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b98:	4770      	bx	lr

08021b9a <_ZN10TestFilter14strictMatchingEv>:

void TestFilter::strictMatching()
{
 8021b9a:	b480      	push	{r7}
 8021b9c:	b083      	sub	sp, #12
 8021b9e:	af00      	add	r7, sp, #0
 8021ba0:	6078      	str	r0, [r7, #4]
    strictMatching_ = true;
 8021ba2:	687b      	ldr	r3, [r7, #4]
 8021ba4:	2201      	movs	r2, #1
 8021ba6:	721a      	strb	r2, [r3, #8]
}
 8021ba8:	bf00      	nop
 8021baa:	370c      	adds	r7, #12
 8021bac:	46bd      	mov	sp, r7
 8021bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bb2:	4770      	bx	lr

08021bb4 <_ZN10TestFilter14invertMatchingEv>:

void TestFilter::invertMatching()
{
 8021bb4:	b480      	push	{r7}
 8021bb6:	b083      	sub	sp, #12
 8021bb8:	af00      	add	r7, sp, #0
 8021bba:	6078      	str	r0, [r7, #4]
    invertMatching_ = true;
 8021bbc:	687b      	ldr	r3, [r7, #4]
 8021bbe:	2201      	movs	r2, #1
 8021bc0:	725a      	strb	r2, [r3, #9]
}
 8021bc2:	bf00      	nop
 8021bc4:	370c      	adds	r7, #12
 8021bc6:	46bd      	mov	sp, r7
 8021bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bcc:	4770      	bx	lr

08021bce <_ZNK10TestFilter5matchERK12SimpleString>:

bool TestFilter::match(const SimpleString& name) const
{
 8021bce:	b580      	push	{r7, lr}
 8021bd0:	b084      	sub	sp, #16
 8021bd2:	af00      	add	r7, sp, #0
 8021bd4:	6078      	str	r0, [r7, #4]
 8021bd6:	6039      	str	r1, [r7, #0]
    bool matches = false;
 8021bd8:	2300      	movs	r3, #0
 8021bda:	73fb      	strb	r3, [r7, #15]

    if(strictMatching_)
 8021bdc:	687b      	ldr	r3, [r7, #4]
 8021bde:	7a1b      	ldrb	r3, [r3, #8]
 8021be0:	2b00      	cmp	r3, #0
 8021be2:	d007      	beq.n	8021bf4 <_ZNK10TestFilter5matchERK12SimpleString+0x26>
        matches = name == filter_;
 8021be4:	687b      	ldr	r3, [r7, #4]
 8021be6:	4619      	mov	r1, r3
 8021be8:	6838      	ldr	r0, [r7, #0]
 8021bea:	f7ed fd22 	bl	800f632 <_ZeqRK12SimpleStringS1_>
 8021bee:	4603      	mov	r3, r0
 8021bf0:	73fb      	strb	r3, [r7, #15]
 8021bf2:	e006      	b.n	8021c02 <_ZNK10TestFilter5matchERK12SimpleString+0x34>
    else
        matches = name.contains(filter_);
 8021bf4:	687b      	ldr	r3, [r7, #4]
 8021bf6:	4619      	mov	r1, r3
 8021bf8:	6838      	ldr	r0, [r7, #0]
 8021bfa:	f7ed f9d4 	bl	800efa6 <_ZNK12SimpleString8containsERKS_>
 8021bfe:	4603      	mov	r3, r0
 8021c00:	73fb      	strb	r3, [r7, #15]

    return invertMatching_ ? !matches : matches;
 8021c02:	687b      	ldr	r3, [r7, #4]
 8021c04:	7a5b      	ldrb	r3, [r3, #9]
 8021c06:	2b00      	cmp	r3, #0
 8021c08:	d004      	beq.n	8021c14 <_ZNK10TestFilter5matchERK12SimpleString+0x46>
 8021c0a:	7bfb      	ldrb	r3, [r7, #15]
 8021c0c:	f083 0301 	eor.w	r3, r3, #1
 8021c10:	b2db      	uxtb	r3, r3
 8021c12:	e005      	b.n	8021c20 <_ZNK10TestFilter5matchERK12SimpleString+0x52>
 8021c14:	7bfb      	ldrb	r3, [r7, #15]
 8021c16:	2b00      	cmp	r3, #0
 8021c18:	bf14      	ite	ne
 8021c1a:	2301      	movne	r3, #1
 8021c1c:	2300      	moveq	r3, #0
 8021c1e:	b2db      	uxtb	r3, r3
}
 8021c20:	4618      	mov	r0, r3
 8021c22:	3710      	adds	r7, #16
 8021c24:	46bd      	mov	sp, r7
 8021c26:	bd80      	pop	{r7, pc}

08021c28 <__cxa_guard_acquire>:
 8021c28:	6803      	ldr	r3, [r0, #0]
 8021c2a:	07db      	lsls	r3, r3, #31
 8021c2c:	d406      	bmi.n	8021c3c <__cxa_guard_acquire+0x14>
 8021c2e:	7843      	ldrb	r3, [r0, #1]
 8021c30:	b103      	cbz	r3, 8021c34 <__cxa_guard_acquire+0xc>
 8021c32:	deff      	udf	#255	; 0xff
 8021c34:	2301      	movs	r3, #1
 8021c36:	7043      	strb	r3, [r0, #1]
 8021c38:	4618      	mov	r0, r3
 8021c3a:	4770      	bx	lr
 8021c3c:	2000      	movs	r0, #0
 8021c3e:	4770      	bx	lr

08021c40 <__cxa_guard_release>:
 8021c40:	2301      	movs	r3, #1
 8021c42:	6003      	str	r3, [r0, #0]
 8021c44:	4770      	bx	lr

08021c46 <__cxa_pure_virtual>:
 8021c46:	b508      	push	{r3, lr}
 8021c48:	f000 f80c 	bl	8021c64 <_ZSt9terminatev>

08021c4c <_ZN10__cxxabiv111__terminateEPFvvE>:
 8021c4c:	b508      	push	{r3, lr}
 8021c4e:	4780      	blx	r0
 8021c50:	f000 f816 	bl	8021c80 <abort>

08021c54 <_ZSt13get_terminatev>:
 8021c54:	4b02      	ldr	r3, [pc, #8]	; (8021c60 <_ZSt13get_terminatev+0xc>)
 8021c56:	6818      	ldr	r0, [r3, #0]
 8021c58:	f3bf 8f5b 	dmb	ish
 8021c5c:	4770      	bx	lr
 8021c5e:	bf00      	nop
 8021c60:	20000104 	.word	0x20000104

08021c64 <_ZSt9terminatev>:
 8021c64:	b508      	push	{r3, lr}
 8021c66:	f7ff fff5 	bl	8021c54 <_ZSt13get_terminatev>
 8021c6a:	f7ff ffef 	bl	8021c4c <_ZN10__cxxabiv111__terminateEPFvvE>

08021c6e <fabs>:
 8021c6e:	ec51 0b10 	vmov	r0, r1, d0
 8021c72:	ee10 2a10 	vmov	r2, s0
 8021c76:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8021c7a:	ec43 2b10 	vmov	d0, r2, r3
 8021c7e:	4770      	bx	lr

08021c80 <abort>:
 8021c80:	b508      	push	{r3, lr}
 8021c82:	2006      	movs	r0, #6
 8021c84:	f000 ff8c 	bl	8022ba0 <raise>
 8021c88:	2001      	movs	r0, #1
 8021c8a:	f7df f8b2 	bl	8000df2 <_exit>

08021c8e <atexit>:
 8021c8e:	2300      	movs	r3, #0
 8021c90:	4601      	mov	r1, r0
 8021c92:	461a      	mov	r2, r3
 8021c94:	4618      	mov	r0, r3
 8021c96:	f002 b9db 	b.w	8024050 <__register_exitproc>

08021c9a <atoi>:
 8021c9a:	220a      	movs	r2, #10
 8021c9c:	2100      	movs	r1, #0
 8021c9e:	f001 be03 	b.w	80238a8 <strtol>
	...

08021ca4 <calloc>:
 8021ca4:	4b02      	ldr	r3, [pc, #8]	; (8021cb0 <calloc+0xc>)
 8021ca6:	460a      	mov	r2, r1
 8021ca8:	4601      	mov	r1, r0
 8021caa:	6818      	ldr	r0, [r3, #0]
 8021cac:	f000 bde8 	b.w	8022880 <_calloc_r>
 8021cb0:	20000108 	.word	0x20000108

08021cb4 <__errno>:
 8021cb4:	4b01      	ldr	r3, [pc, #4]	; (8021cbc <__errno+0x8>)
 8021cb6:	6818      	ldr	r0, [r3, #0]
 8021cb8:	4770      	bx	lr
 8021cba:	bf00      	nop
 8021cbc:	20000108 	.word	0x20000108

08021cc0 <_fclose_r>:
 8021cc0:	b570      	push	{r4, r5, r6, lr}
 8021cc2:	4605      	mov	r5, r0
 8021cc4:	460c      	mov	r4, r1
 8021cc6:	b911      	cbnz	r1, 8021cce <_fclose_r+0xe>
 8021cc8:	2600      	movs	r6, #0
 8021cca:	4630      	mov	r0, r6
 8021ccc:	bd70      	pop	{r4, r5, r6, pc}
 8021cce:	b118      	cbz	r0, 8021cd8 <_fclose_r+0x18>
 8021cd0:	6983      	ldr	r3, [r0, #24]
 8021cd2:	b90b      	cbnz	r3, 8021cd8 <_fclose_r+0x18>
 8021cd4:	f000 f994 	bl	8022000 <__sinit>
 8021cd8:	4b2c      	ldr	r3, [pc, #176]	; (8021d8c <_fclose_r+0xcc>)
 8021cda:	429c      	cmp	r4, r3
 8021cdc:	d114      	bne.n	8021d08 <_fclose_r+0x48>
 8021cde:	686c      	ldr	r4, [r5, #4]
 8021ce0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021ce2:	07d8      	lsls	r0, r3, #31
 8021ce4:	d405      	bmi.n	8021cf2 <_fclose_r+0x32>
 8021ce6:	89a3      	ldrh	r3, [r4, #12]
 8021ce8:	0599      	lsls	r1, r3, #22
 8021cea:	d402      	bmi.n	8021cf2 <_fclose_r+0x32>
 8021cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021cee:	f000 fd3a 	bl	8022766 <__retarget_lock_acquire_recursive>
 8021cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021cf6:	b98b      	cbnz	r3, 8021d1c <_fclose_r+0x5c>
 8021cf8:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8021cfa:	f016 0601 	ands.w	r6, r6, #1
 8021cfe:	d1e3      	bne.n	8021cc8 <_fclose_r+0x8>
 8021d00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021d02:	f000 fd32 	bl	802276a <__retarget_lock_release_recursive>
 8021d06:	e7e0      	b.n	8021cca <_fclose_r+0xa>
 8021d08:	4b21      	ldr	r3, [pc, #132]	; (8021d90 <_fclose_r+0xd0>)
 8021d0a:	429c      	cmp	r4, r3
 8021d0c:	d101      	bne.n	8021d12 <_fclose_r+0x52>
 8021d0e:	68ac      	ldr	r4, [r5, #8]
 8021d10:	e7e6      	b.n	8021ce0 <_fclose_r+0x20>
 8021d12:	4b20      	ldr	r3, [pc, #128]	; (8021d94 <_fclose_r+0xd4>)
 8021d14:	429c      	cmp	r4, r3
 8021d16:	bf08      	it	eq
 8021d18:	68ec      	ldreq	r4, [r5, #12]
 8021d1a:	e7e1      	b.n	8021ce0 <_fclose_r+0x20>
 8021d1c:	4621      	mov	r1, r4
 8021d1e:	4628      	mov	r0, r5
 8021d20:	f000 f842 	bl	8021da8 <__sflush_r>
 8021d24:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8021d26:	4606      	mov	r6, r0
 8021d28:	b133      	cbz	r3, 8021d38 <_fclose_r+0x78>
 8021d2a:	6a21      	ldr	r1, [r4, #32]
 8021d2c:	4628      	mov	r0, r5
 8021d2e:	4798      	blx	r3
 8021d30:	2800      	cmp	r0, #0
 8021d32:	bfb8      	it	lt
 8021d34:	f04f 36ff 	movlt.w	r6, #4294967295
 8021d38:	89a3      	ldrh	r3, [r4, #12]
 8021d3a:	061a      	lsls	r2, r3, #24
 8021d3c:	d503      	bpl.n	8021d46 <_fclose_r+0x86>
 8021d3e:	6921      	ldr	r1, [r4, #16]
 8021d40:	4628      	mov	r0, r5
 8021d42:	f000 fdad 	bl	80228a0 <_free_r>
 8021d46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021d48:	b141      	cbz	r1, 8021d5c <_fclose_r+0x9c>
 8021d4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021d4e:	4299      	cmp	r1, r3
 8021d50:	d002      	beq.n	8021d58 <_fclose_r+0x98>
 8021d52:	4628      	mov	r0, r5
 8021d54:	f000 fda4 	bl	80228a0 <_free_r>
 8021d58:	2300      	movs	r3, #0
 8021d5a:	6363      	str	r3, [r4, #52]	; 0x34
 8021d5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8021d5e:	b121      	cbz	r1, 8021d6a <_fclose_r+0xaa>
 8021d60:	4628      	mov	r0, r5
 8021d62:	f000 fd9d 	bl	80228a0 <_free_r>
 8021d66:	2300      	movs	r3, #0
 8021d68:	64a3      	str	r3, [r4, #72]	; 0x48
 8021d6a:	f000 f931 	bl	8021fd0 <__sfp_lock_acquire>
 8021d6e:	2300      	movs	r3, #0
 8021d70:	81a3      	strh	r3, [r4, #12]
 8021d72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021d74:	07db      	lsls	r3, r3, #31
 8021d76:	d402      	bmi.n	8021d7e <_fclose_r+0xbe>
 8021d78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021d7a:	f000 fcf6 	bl	802276a <__retarget_lock_release_recursive>
 8021d7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021d80:	f000 fcef 	bl	8022762 <__retarget_lock_close_recursive>
 8021d84:	f000 f92a 	bl	8021fdc <__sfp_lock_release>
 8021d88:	e79f      	b.n	8021cca <_fclose_r+0xa>
 8021d8a:	bf00      	nop
 8021d8c:	0802c410 	.word	0x0802c410
 8021d90:	0802c430 	.word	0x0802c430
 8021d94:	0802c3f0 	.word	0x0802c3f0

08021d98 <fclose>:
 8021d98:	4b02      	ldr	r3, [pc, #8]	; (8021da4 <fclose+0xc>)
 8021d9a:	4601      	mov	r1, r0
 8021d9c:	6818      	ldr	r0, [r3, #0]
 8021d9e:	f7ff bf8f 	b.w	8021cc0 <_fclose_r>
 8021da2:	bf00      	nop
 8021da4:	20000108 	.word	0x20000108

08021da8 <__sflush_r>:
 8021da8:	898a      	ldrh	r2, [r1, #12]
 8021daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021dae:	4605      	mov	r5, r0
 8021db0:	0710      	lsls	r0, r2, #28
 8021db2:	460c      	mov	r4, r1
 8021db4:	d458      	bmi.n	8021e68 <__sflush_r+0xc0>
 8021db6:	684b      	ldr	r3, [r1, #4]
 8021db8:	2b00      	cmp	r3, #0
 8021dba:	dc05      	bgt.n	8021dc8 <__sflush_r+0x20>
 8021dbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8021dbe:	2b00      	cmp	r3, #0
 8021dc0:	dc02      	bgt.n	8021dc8 <__sflush_r+0x20>
 8021dc2:	2000      	movs	r0, #0
 8021dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021dc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021dca:	2e00      	cmp	r6, #0
 8021dcc:	d0f9      	beq.n	8021dc2 <__sflush_r+0x1a>
 8021dce:	2300      	movs	r3, #0
 8021dd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8021dd4:	682f      	ldr	r7, [r5, #0]
 8021dd6:	602b      	str	r3, [r5, #0]
 8021dd8:	d032      	beq.n	8021e40 <__sflush_r+0x98>
 8021dda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8021ddc:	89a3      	ldrh	r3, [r4, #12]
 8021dde:	075a      	lsls	r2, r3, #29
 8021de0:	d505      	bpl.n	8021dee <__sflush_r+0x46>
 8021de2:	6863      	ldr	r3, [r4, #4]
 8021de4:	1ac0      	subs	r0, r0, r3
 8021de6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021de8:	b10b      	cbz	r3, 8021dee <__sflush_r+0x46>
 8021dea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021dec:	1ac0      	subs	r0, r0, r3
 8021dee:	2300      	movs	r3, #0
 8021df0:	4602      	mov	r2, r0
 8021df2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021df4:	6a21      	ldr	r1, [r4, #32]
 8021df6:	4628      	mov	r0, r5
 8021df8:	47b0      	blx	r6
 8021dfa:	1c43      	adds	r3, r0, #1
 8021dfc:	89a3      	ldrh	r3, [r4, #12]
 8021dfe:	d106      	bne.n	8021e0e <__sflush_r+0x66>
 8021e00:	6829      	ldr	r1, [r5, #0]
 8021e02:	291d      	cmp	r1, #29
 8021e04:	d82c      	bhi.n	8021e60 <__sflush_r+0xb8>
 8021e06:	4a2a      	ldr	r2, [pc, #168]	; (8021eb0 <__sflush_r+0x108>)
 8021e08:	40ca      	lsrs	r2, r1
 8021e0a:	07d6      	lsls	r6, r2, #31
 8021e0c:	d528      	bpl.n	8021e60 <__sflush_r+0xb8>
 8021e0e:	2200      	movs	r2, #0
 8021e10:	6062      	str	r2, [r4, #4]
 8021e12:	04d9      	lsls	r1, r3, #19
 8021e14:	6922      	ldr	r2, [r4, #16]
 8021e16:	6022      	str	r2, [r4, #0]
 8021e18:	d504      	bpl.n	8021e24 <__sflush_r+0x7c>
 8021e1a:	1c42      	adds	r2, r0, #1
 8021e1c:	d101      	bne.n	8021e22 <__sflush_r+0x7a>
 8021e1e:	682b      	ldr	r3, [r5, #0]
 8021e20:	b903      	cbnz	r3, 8021e24 <__sflush_r+0x7c>
 8021e22:	6560      	str	r0, [r4, #84]	; 0x54
 8021e24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021e26:	602f      	str	r7, [r5, #0]
 8021e28:	2900      	cmp	r1, #0
 8021e2a:	d0ca      	beq.n	8021dc2 <__sflush_r+0x1a>
 8021e2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021e30:	4299      	cmp	r1, r3
 8021e32:	d002      	beq.n	8021e3a <__sflush_r+0x92>
 8021e34:	4628      	mov	r0, r5
 8021e36:	f000 fd33 	bl	80228a0 <_free_r>
 8021e3a:	2000      	movs	r0, #0
 8021e3c:	6360      	str	r0, [r4, #52]	; 0x34
 8021e3e:	e7c1      	b.n	8021dc4 <__sflush_r+0x1c>
 8021e40:	6a21      	ldr	r1, [r4, #32]
 8021e42:	2301      	movs	r3, #1
 8021e44:	4628      	mov	r0, r5
 8021e46:	47b0      	blx	r6
 8021e48:	1c41      	adds	r1, r0, #1
 8021e4a:	d1c7      	bne.n	8021ddc <__sflush_r+0x34>
 8021e4c:	682b      	ldr	r3, [r5, #0]
 8021e4e:	2b00      	cmp	r3, #0
 8021e50:	d0c4      	beq.n	8021ddc <__sflush_r+0x34>
 8021e52:	2b1d      	cmp	r3, #29
 8021e54:	d001      	beq.n	8021e5a <__sflush_r+0xb2>
 8021e56:	2b16      	cmp	r3, #22
 8021e58:	d101      	bne.n	8021e5e <__sflush_r+0xb6>
 8021e5a:	602f      	str	r7, [r5, #0]
 8021e5c:	e7b1      	b.n	8021dc2 <__sflush_r+0x1a>
 8021e5e:	89a3      	ldrh	r3, [r4, #12]
 8021e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021e64:	81a3      	strh	r3, [r4, #12]
 8021e66:	e7ad      	b.n	8021dc4 <__sflush_r+0x1c>
 8021e68:	690f      	ldr	r7, [r1, #16]
 8021e6a:	2f00      	cmp	r7, #0
 8021e6c:	d0a9      	beq.n	8021dc2 <__sflush_r+0x1a>
 8021e6e:	0793      	lsls	r3, r2, #30
 8021e70:	680e      	ldr	r6, [r1, #0]
 8021e72:	bf08      	it	eq
 8021e74:	694b      	ldreq	r3, [r1, #20]
 8021e76:	600f      	str	r7, [r1, #0]
 8021e78:	bf18      	it	ne
 8021e7a:	2300      	movne	r3, #0
 8021e7c:	eba6 0807 	sub.w	r8, r6, r7
 8021e80:	608b      	str	r3, [r1, #8]
 8021e82:	f1b8 0f00 	cmp.w	r8, #0
 8021e86:	dd9c      	ble.n	8021dc2 <__sflush_r+0x1a>
 8021e88:	6a21      	ldr	r1, [r4, #32]
 8021e8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8021e8c:	4643      	mov	r3, r8
 8021e8e:	463a      	mov	r2, r7
 8021e90:	4628      	mov	r0, r5
 8021e92:	47b0      	blx	r6
 8021e94:	2800      	cmp	r0, #0
 8021e96:	dc06      	bgt.n	8021ea6 <__sflush_r+0xfe>
 8021e98:	89a3      	ldrh	r3, [r4, #12]
 8021e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021e9e:	81a3      	strh	r3, [r4, #12]
 8021ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8021ea4:	e78e      	b.n	8021dc4 <__sflush_r+0x1c>
 8021ea6:	4407      	add	r7, r0
 8021ea8:	eba8 0800 	sub.w	r8, r8, r0
 8021eac:	e7e9      	b.n	8021e82 <__sflush_r+0xda>
 8021eae:	bf00      	nop
 8021eb0:	20400001 	.word	0x20400001

08021eb4 <_fflush_r>:
 8021eb4:	b538      	push	{r3, r4, r5, lr}
 8021eb6:	690b      	ldr	r3, [r1, #16]
 8021eb8:	4605      	mov	r5, r0
 8021eba:	460c      	mov	r4, r1
 8021ebc:	b913      	cbnz	r3, 8021ec4 <_fflush_r+0x10>
 8021ebe:	2500      	movs	r5, #0
 8021ec0:	4628      	mov	r0, r5
 8021ec2:	bd38      	pop	{r3, r4, r5, pc}
 8021ec4:	b118      	cbz	r0, 8021ece <_fflush_r+0x1a>
 8021ec6:	6983      	ldr	r3, [r0, #24]
 8021ec8:	b90b      	cbnz	r3, 8021ece <_fflush_r+0x1a>
 8021eca:	f000 f899 	bl	8022000 <__sinit>
 8021ece:	4b14      	ldr	r3, [pc, #80]	; (8021f20 <_fflush_r+0x6c>)
 8021ed0:	429c      	cmp	r4, r3
 8021ed2:	d11b      	bne.n	8021f0c <_fflush_r+0x58>
 8021ed4:	686c      	ldr	r4, [r5, #4]
 8021ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021eda:	2b00      	cmp	r3, #0
 8021edc:	d0ef      	beq.n	8021ebe <_fflush_r+0xa>
 8021ede:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8021ee0:	07d0      	lsls	r0, r2, #31
 8021ee2:	d404      	bmi.n	8021eee <_fflush_r+0x3a>
 8021ee4:	0599      	lsls	r1, r3, #22
 8021ee6:	d402      	bmi.n	8021eee <_fflush_r+0x3a>
 8021ee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021eea:	f000 fc3c 	bl	8022766 <__retarget_lock_acquire_recursive>
 8021eee:	4628      	mov	r0, r5
 8021ef0:	4621      	mov	r1, r4
 8021ef2:	f7ff ff59 	bl	8021da8 <__sflush_r>
 8021ef6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021ef8:	07da      	lsls	r2, r3, #31
 8021efa:	4605      	mov	r5, r0
 8021efc:	d4e0      	bmi.n	8021ec0 <_fflush_r+0xc>
 8021efe:	89a3      	ldrh	r3, [r4, #12]
 8021f00:	059b      	lsls	r3, r3, #22
 8021f02:	d4dd      	bmi.n	8021ec0 <_fflush_r+0xc>
 8021f04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021f06:	f000 fc30 	bl	802276a <__retarget_lock_release_recursive>
 8021f0a:	e7d9      	b.n	8021ec0 <_fflush_r+0xc>
 8021f0c:	4b05      	ldr	r3, [pc, #20]	; (8021f24 <_fflush_r+0x70>)
 8021f0e:	429c      	cmp	r4, r3
 8021f10:	d101      	bne.n	8021f16 <_fflush_r+0x62>
 8021f12:	68ac      	ldr	r4, [r5, #8]
 8021f14:	e7df      	b.n	8021ed6 <_fflush_r+0x22>
 8021f16:	4b04      	ldr	r3, [pc, #16]	; (8021f28 <_fflush_r+0x74>)
 8021f18:	429c      	cmp	r4, r3
 8021f1a:	bf08      	it	eq
 8021f1c:	68ec      	ldreq	r4, [r5, #12]
 8021f1e:	e7da      	b.n	8021ed6 <_fflush_r+0x22>
 8021f20:	0802c410 	.word	0x0802c410
 8021f24:	0802c430 	.word	0x0802c430
 8021f28:	0802c3f0 	.word	0x0802c3f0

08021f2c <fflush>:
 8021f2c:	4601      	mov	r1, r0
 8021f2e:	b920      	cbnz	r0, 8021f3a <fflush+0xe>
 8021f30:	4b04      	ldr	r3, [pc, #16]	; (8021f44 <fflush+0x18>)
 8021f32:	4905      	ldr	r1, [pc, #20]	; (8021f48 <fflush+0x1c>)
 8021f34:	6818      	ldr	r0, [r3, #0]
 8021f36:	f000 babb 	b.w	80224b0 <_fwalk_reent>
 8021f3a:	4b04      	ldr	r3, [pc, #16]	; (8021f4c <fflush+0x20>)
 8021f3c:	6818      	ldr	r0, [r3, #0]
 8021f3e:	f7ff bfb9 	b.w	8021eb4 <_fflush_r>
 8021f42:	bf00      	nop
 8021f44:	0802c450 	.word	0x0802c450
 8021f48:	08021eb5 	.word	0x08021eb5
 8021f4c:	20000108 	.word	0x20000108

08021f50 <std>:
 8021f50:	2300      	movs	r3, #0
 8021f52:	b510      	push	{r4, lr}
 8021f54:	4604      	mov	r4, r0
 8021f56:	e9c0 3300 	strd	r3, r3, [r0]
 8021f5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021f5e:	6083      	str	r3, [r0, #8]
 8021f60:	8181      	strh	r1, [r0, #12]
 8021f62:	6643      	str	r3, [r0, #100]	; 0x64
 8021f64:	81c2      	strh	r2, [r0, #14]
 8021f66:	6183      	str	r3, [r0, #24]
 8021f68:	4619      	mov	r1, r3
 8021f6a:	2208      	movs	r2, #8
 8021f6c:	305c      	adds	r0, #92	; 0x5c
 8021f6e:	f000 fc7f 	bl	8022870 <memset>
 8021f72:	4b05      	ldr	r3, [pc, #20]	; (8021f88 <std+0x38>)
 8021f74:	6263      	str	r3, [r4, #36]	; 0x24
 8021f76:	4b05      	ldr	r3, [pc, #20]	; (8021f8c <std+0x3c>)
 8021f78:	62a3      	str	r3, [r4, #40]	; 0x28
 8021f7a:	4b05      	ldr	r3, [pc, #20]	; (8021f90 <std+0x40>)
 8021f7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8021f7e:	4b05      	ldr	r3, [pc, #20]	; (8021f94 <std+0x44>)
 8021f80:	6224      	str	r4, [r4, #32]
 8021f82:	6323      	str	r3, [r4, #48]	; 0x30
 8021f84:	bd10      	pop	{r4, pc}
 8021f86:	bf00      	nop
 8021f88:	08022c19 	.word	0x08022c19
 8021f8c:	08022c3f 	.word	0x08022c3f
 8021f90:	08022c77 	.word	0x08022c77
 8021f94:	08022c9b 	.word	0x08022c9b

08021f98 <_cleanup_r>:
 8021f98:	4901      	ldr	r1, [pc, #4]	; (8021fa0 <_cleanup_r+0x8>)
 8021f9a:	f000 ba89 	b.w	80224b0 <_fwalk_reent>
 8021f9e:	bf00      	nop
 8021fa0:	08021eb5 	.word	0x08021eb5

08021fa4 <__sfmoreglue>:
 8021fa4:	b570      	push	{r4, r5, r6, lr}
 8021fa6:	1e4a      	subs	r2, r1, #1
 8021fa8:	2568      	movs	r5, #104	; 0x68
 8021faa:	4355      	muls	r5, r2
 8021fac:	460e      	mov	r6, r1
 8021fae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8021fb2:	f000 fcc5 	bl	8022940 <_malloc_r>
 8021fb6:	4604      	mov	r4, r0
 8021fb8:	b140      	cbz	r0, 8021fcc <__sfmoreglue+0x28>
 8021fba:	2100      	movs	r1, #0
 8021fbc:	e9c0 1600 	strd	r1, r6, [r0]
 8021fc0:	300c      	adds	r0, #12
 8021fc2:	60a0      	str	r0, [r4, #8]
 8021fc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8021fc8:	f000 fc52 	bl	8022870 <memset>
 8021fcc:	4620      	mov	r0, r4
 8021fce:	bd70      	pop	{r4, r5, r6, pc}

08021fd0 <__sfp_lock_acquire>:
 8021fd0:	4801      	ldr	r0, [pc, #4]	; (8021fd8 <__sfp_lock_acquire+0x8>)
 8021fd2:	f000 bbc8 	b.w	8022766 <__retarget_lock_acquire_recursive>
 8021fd6:	bf00      	nop
 8021fd8:	20001108 	.word	0x20001108

08021fdc <__sfp_lock_release>:
 8021fdc:	4801      	ldr	r0, [pc, #4]	; (8021fe4 <__sfp_lock_release+0x8>)
 8021fde:	f000 bbc4 	b.w	802276a <__retarget_lock_release_recursive>
 8021fe2:	bf00      	nop
 8021fe4:	20001108 	.word	0x20001108

08021fe8 <__sinit_lock_acquire>:
 8021fe8:	4801      	ldr	r0, [pc, #4]	; (8021ff0 <__sinit_lock_acquire+0x8>)
 8021fea:	f000 bbbc 	b.w	8022766 <__retarget_lock_acquire_recursive>
 8021fee:	bf00      	nop
 8021ff0:	20001103 	.word	0x20001103

08021ff4 <__sinit_lock_release>:
 8021ff4:	4801      	ldr	r0, [pc, #4]	; (8021ffc <__sinit_lock_release+0x8>)
 8021ff6:	f000 bbb8 	b.w	802276a <__retarget_lock_release_recursive>
 8021ffa:	bf00      	nop
 8021ffc:	20001103 	.word	0x20001103

08022000 <__sinit>:
 8022000:	b510      	push	{r4, lr}
 8022002:	4604      	mov	r4, r0
 8022004:	f7ff fff0 	bl	8021fe8 <__sinit_lock_acquire>
 8022008:	69a3      	ldr	r3, [r4, #24]
 802200a:	b11b      	cbz	r3, 8022014 <__sinit+0x14>
 802200c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022010:	f7ff bff0 	b.w	8021ff4 <__sinit_lock_release>
 8022014:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8022018:	6523      	str	r3, [r4, #80]	; 0x50
 802201a:	4b13      	ldr	r3, [pc, #76]	; (8022068 <__sinit+0x68>)
 802201c:	4a13      	ldr	r2, [pc, #76]	; (802206c <__sinit+0x6c>)
 802201e:	681b      	ldr	r3, [r3, #0]
 8022020:	62a2      	str	r2, [r4, #40]	; 0x28
 8022022:	42a3      	cmp	r3, r4
 8022024:	bf04      	itt	eq
 8022026:	2301      	moveq	r3, #1
 8022028:	61a3      	streq	r3, [r4, #24]
 802202a:	4620      	mov	r0, r4
 802202c:	f000 f820 	bl	8022070 <__sfp>
 8022030:	6060      	str	r0, [r4, #4]
 8022032:	4620      	mov	r0, r4
 8022034:	f000 f81c 	bl	8022070 <__sfp>
 8022038:	60a0      	str	r0, [r4, #8]
 802203a:	4620      	mov	r0, r4
 802203c:	f000 f818 	bl	8022070 <__sfp>
 8022040:	2200      	movs	r2, #0
 8022042:	60e0      	str	r0, [r4, #12]
 8022044:	2104      	movs	r1, #4
 8022046:	6860      	ldr	r0, [r4, #4]
 8022048:	f7ff ff82 	bl	8021f50 <std>
 802204c:	68a0      	ldr	r0, [r4, #8]
 802204e:	2201      	movs	r2, #1
 8022050:	2109      	movs	r1, #9
 8022052:	f7ff ff7d 	bl	8021f50 <std>
 8022056:	68e0      	ldr	r0, [r4, #12]
 8022058:	2202      	movs	r2, #2
 802205a:	2112      	movs	r1, #18
 802205c:	f7ff ff78 	bl	8021f50 <std>
 8022060:	2301      	movs	r3, #1
 8022062:	61a3      	str	r3, [r4, #24]
 8022064:	e7d2      	b.n	802200c <__sinit+0xc>
 8022066:	bf00      	nop
 8022068:	0802c450 	.word	0x0802c450
 802206c:	08021f99 	.word	0x08021f99

08022070 <__sfp>:
 8022070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022072:	4607      	mov	r7, r0
 8022074:	f7ff ffac 	bl	8021fd0 <__sfp_lock_acquire>
 8022078:	4b1e      	ldr	r3, [pc, #120]	; (80220f4 <__sfp+0x84>)
 802207a:	681e      	ldr	r6, [r3, #0]
 802207c:	69b3      	ldr	r3, [r6, #24]
 802207e:	b913      	cbnz	r3, 8022086 <__sfp+0x16>
 8022080:	4630      	mov	r0, r6
 8022082:	f7ff ffbd 	bl	8022000 <__sinit>
 8022086:	3648      	adds	r6, #72	; 0x48
 8022088:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802208c:	3b01      	subs	r3, #1
 802208e:	d503      	bpl.n	8022098 <__sfp+0x28>
 8022090:	6833      	ldr	r3, [r6, #0]
 8022092:	b30b      	cbz	r3, 80220d8 <__sfp+0x68>
 8022094:	6836      	ldr	r6, [r6, #0]
 8022096:	e7f7      	b.n	8022088 <__sfp+0x18>
 8022098:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802209c:	b9d5      	cbnz	r5, 80220d4 <__sfp+0x64>
 802209e:	4b16      	ldr	r3, [pc, #88]	; (80220f8 <__sfp+0x88>)
 80220a0:	60e3      	str	r3, [r4, #12]
 80220a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80220a6:	6665      	str	r5, [r4, #100]	; 0x64
 80220a8:	f000 fb5a 	bl	8022760 <__retarget_lock_init_recursive>
 80220ac:	f7ff ff96 	bl	8021fdc <__sfp_lock_release>
 80220b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80220b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80220b8:	6025      	str	r5, [r4, #0]
 80220ba:	61a5      	str	r5, [r4, #24]
 80220bc:	2208      	movs	r2, #8
 80220be:	4629      	mov	r1, r5
 80220c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80220c4:	f000 fbd4 	bl	8022870 <memset>
 80220c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80220cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80220d0:	4620      	mov	r0, r4
 80220d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80220d4:	3468      	adds	r4, #104	; 0x68
 80220d6:	e7d9      	b.n	802208c <__sfp+0x1c>
 80220d8:	2104      	movs	r1, #4
 80220da:	4638      	mov	r0, r7
 80220dc:	f7ff ff62 	bl	8021fa4 <__sfmoreglue>
 80220e0:	4604      	mov	r4, r0
 80220e2:	6030      	str	r0, [r6, #0]
 80220e4:	2800      	cmp	r0, #0
 80220e6:	d1d5      	bne.n	8022094 <__sfp+0x24>
 80220e8:	f7ff ff78 	bl	8021fdc <__sfp_lock_release>
 80220ec:	230c      	movs	r3, #12
 80220ee:	603b      	str	r3, [r7, #0]
 80220f0:	e7ee      	b.n	80220d0 <__sfp+0x60>
 80220f2:	bf00      	nop
 80220f4:	0802c450 	.word	0x0802c450
 80220f8:	ffff0001 	.word	0xffff0001

080220fc <_fopen_r>:
 80220fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80220fe:	460f      	mov	r7, r1
 8022100:	4611      	mov	r1, r2
 8022102:	aa01      	add	r2, sp, #4
 8022104:	4605      	mov	r5, r0
 8022106:	f002 f837 	bl	8024178 <__sflags>
 802210a:	4606      	mov	r6, r0
 802210c:	b918      	cbnz	r0, 8022116 <_fopen_r+0x1a>
 802210e:	2400      	movs	r4, #0
 8022110:	4620      	mov	r0, r4
 8022112:	b003      	add	sp, #12
 8022114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022116:	4628      	mov	r0, r5
 8022118:	f7ff ffaa 	bl	8022070 <__sfp>
 802211c:	4604      	mov	r4, r0
 802211e:	2800      	cmp	r0, #0
 8022120:	d0f5      	beq.n	802210e <_fopen_r+0x12>
 8022122:	4639      	mov	r1, r7
 8022124:	9a01      	ldr	r2, [sp, #4]
 8022126:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 802212a:	4628      	mov	r0, r5
 802212c:	f000 fc62 	bl	80229f4 <_open_r>
 8022130:	1e07      	subs	r7, r0, #0
 8022132:	da09      	bge.n	8022148 <_fopen_r+0x4c>
 8022134:	2500      	movs	r5, #0
 8022136:	f7ff ff4b 	bl	8021fd0 <__sfp_lock_acquire>
 802213a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802213c:	81a5      	strh	r5, [r4, #12]
 802213e:	f000 fb10 	bl	8022762 <__retarget_lock_close_recursive>
 8022142:	f7ff ff4b 	bl	8021fdc <__sfp_lock_release>
 8022146:	e7e2      	b.n	802210e <_fopen_r+0x12>
 8022148:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802214a:	07db      	lsls	r3, r3, #31
 802214c:	d405      	bmi.n	802215a <_fopen_r+0x5e>
 802214e:	89a3      	ldrh	r3, [r4, #12]
 8022150:	0598      	lsls	r0, r3, #22
 8022152:	d402      	bmi.n	802215a <_fopen_r+0x5e>
 8022154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022156:	f000 fb06 	bl	8022766 <__retarget_lock_acquire_recursive>
 802215a:	4b0e      	ldr	r3, [pc, #56]	; (8022194 <_fopen_r+0x98>)
 802215c:	6263      	str	r3, [r4, #36]	; 0x24
 802215e:	4b0e      	ldr	r3, [pc, #56]	; (8022198 <_fopen_r+0x9c>)
 8022160:	62a3      	str	r3, [r4, #40]	; 0x28
 8022162:	4b0e      	ldr	r3, [pc, #56]	; (802219c <_fopen_r+0xa0>)
 8022164:	62e3      	str	r3, [r4, #44]	; 0x2c
 8022166:	05f1      	lsls	r1, r6, #23
 8022168:	4b0d      	ldr	r3, [pc, #52]	; (80221a0 <_fopen_r+0xa4>)
 802216a:	81e7      	strh	r7, [r4, #14]
 802216c:	81a6      	strh	r6, [r4, #12]
 802216e:	6224      	str	r4, [r4, #32]
 8022170:	6323      	str	r3, [r4, #48]	; 0x30
 8022172:	d505      	bpl.n	8022180 <_fopen_r+0x84>
 8022174:	2302      	movs	r3, #2
 8022176:	2200      	movs	r2, #0
 8022178:	4621      	mov	r1, r4
 802217a:	4628      	mov	r0, r5
 802217c:	f000 f888 	bl	8022290 <_fseek_r>
 8022180:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022182:	07da      	lsls	r2, r3, #31
 8022184:	d4c4      	bmi.n	8022110 <_fopen_r+0x14>
 8022186:	89a3      	ldrh	r3, [r4, #12]
 8022188:	059b      	lsls	r3, r3, #22
 802218a:	d4c1      	bmi.n	8022110 <_fopen_r+0x14>
 802218c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802218e:	f000 faec 	bl	802276a <__retarget_lock_release_recursive>
 8022192:	e7bd      	b.n	8022110 <_fopen_r+0x14>
 8022194:	08022c19 	.word	0x08022c19
 8022198:	08022c3f 	.word	0x08022c3f
 802219c:	08022c77 	.word	0x08022c77
 80221a0:	08022c9b 	.word	0x08022c9b

080221a4 <fopen>:
 80221a4:	4b02      	ldr	r3, [pc, #8]	; (80221b0 <fopen+0xc>)
 80221a6:	460a      	mov	r2, r1
 80221a8:	4601      	mov	r1, r0
 80221aa:	6818      	ldr	r0, [r3, #0]
 80221ac:	f7ff bfa6 	b.w	80220fc <_fopen_r>
 80221b0:	20000108 	.word	0x20000108

080221b4 <_fputs_r>:
 80221b4:	b570      	push	{r4, r5, r6, lr}
 80221b6:	460e      	mov	r6, r1
 80221b8:	4614      	mov	r4, r2
 80221ba:	4605      	mov	r5, r0
 80221bc:	b118      	cbz	r0, 80221c6 <_fputs_r+0x12>
 80221be:	6983      	ldr	r3, [r0, #24]
 80221c0:	b90b      	cbnz	r3, 80221c6 <_fputs_r+0x12>
 80221c2:	f7ff ff1d 	bl	8022000 <__sinit>
 80221c6:	4b2b      	ldr	r3, [pc, #172]	; (8022274 <_fputs_r+0xc0>)
 80221c8:	429c      	cmp	r4, r3
 80221ca:	d11e      	bne.n	802220a <_fputs_r+0x56>
 80221cc:	686c      	ldr	r4, [r5, #4]
 80221ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80221d0:	07da      	lsls	r2, r3, #31
 80221d2:	d405      	bmi.n	80221e0 <_fputs_r+0x2c>
 80221d4:	89a3      	ldrh	r3, [r4, #12]
 80221d6:	059b      	lsls	r3, r3, #22
 80221d8:	d402      	bmi.n	80221e0 <_fputs_r+0x2c>
 80221da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80221dc:	f000 fac3 	bl	8022766 <__retarget_lock_acquire_recursive>
 80221e0:	89a3      	ldrh	r3, [r4, #12]
 80221e2:	0718      	lsls	r0, r3, #28
 80221e4:	d51b      	bpl.n	802221e <_fputs_r+0x6a>
 80221e6:	6923      	ldr	r3, [r4, #16]
 80221e8:	b1cb      	cbz	r3, 802221e <_fputs_r+0x6a>
 80221ea:	3e01      	subs	r6, #1
 80221ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80221f0:	bb39      	cbnz	r1, 8022242 <_fputs_r+0x8e>
 80221f2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80221f4:	f015 0501 	ands.w	r5, r5, #1
 80221f8:	d139      	bne.n	802226e <_fputs_r+0xba>
 80221fa:	89a3      	ldrh	r3, [r4, #12]
 80221fc:	0599      	lsls	r1, r3, #22
 80221fe:	d402      	bmi.n	8022206 <_fputs_r+0x52>
 8022200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022202:	f000 fab2 	bl	802276a <__retarget_lock_release_recursive>
 8022206:	4628      	mov	r0, r5
 8022208:	bd70      	pop	{r4, r5, r6, pc}
 802220a:	4b1b      	ldr	r3, [pc, #108]	; (8022278 <_fputs_r+0xc4>)
 802220c:	429c      	cmp	r4, r3
 802220e:	d101      	bne.n	8022214 <_fputs_r+0x60>
 8022210:	68ac      	ldr	r4, [r5, #8]
 8022212:	e7dc      	b.n	80221ce <_fputs_r+0x1a>
 8022214:	4b19      	ldr	r3, [pc, #100]	; (802227c <_fputs_r+0xc8>)
 8022216:	429c      	cmp	r4, r3
 8022218:	bf08      	it	eq
 802221a:	68ec      	ldreq	r4, [r5, #12]
 802221c:	e7d7      	b.n	80221ce <_fputs_r+0x1a>
 802221e:	4621      	mov	r1, r4
 8022220:	4628      	mov	r0, r5
 8022222:	f001 fea7 	bl	8023f74 <__swsetup_r>
 8022226:	2800      	cmp	r0, #0
 8022228:	d0df      	beq.n	80221ea <_fputs_r+0x36>
 802222a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802222c:	07da      	lsls	r2, r3, #31
 802222e:	d405      	bmi.n	802223c <_fputs_r+0x88>
 8022230:	89a3      	ldrh	r3, [r4, #12]
 8022232:	059b      	lsls	r3, r3, #22
 8022234:	d402      	bmi.n	802223c <_fputs_r+0x88>
 8022236:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022238:	f000 fa97 	bl	802276a <__retarget_lock_release_recursive>
 802223c:	f04f 35ff 	mov.w	r5, #4294967295
 8022240:	e7e1      	b.n	8022206 <_fputs_r+0x52>
 8022242:	68a3      	ldr	r3, [r4, #8]
 8022244:	3b01      	subs	r3, #1
 8022246:	2b00      	cmp	r3, #0
 8022248:	60a3      	str	r3, [r4, #8]
 802224a:	da04      	bge.n	8022256 <_fputs_r+0xa2>
 802224c:	69a2      	ldr	r2, [r4, #24]
 802224e:	4293      	cmp	r3, r2
 8022250:	db06      	blt.n	8022260 <_fputs_r+0xac>
 8022252:	290a      	cmp	r1, #10
 8022254:	d004      	beq.n	8022260 <_fputs_r+0xac>
 8022256:	6823      	ldr	r3, [r4, #0]
 8022258:	1c5a      	adds	r2, r3, #1
 802225a:	6022      	str	r2, [r4, #0]
 802225c:	7019      	strb	r1, [r3, #0]
 802225e:	e7c5      	b.n	80221ec <_fputs_r+0x38>
 8022260:	4622      	mov	r2, r4
 8022262:	4628      	mov	r0, r5
 8022264:	f001 fe22 	bl	8023eac <__swbuf_r>
 8022268:	3001      	adds	r0, #1
 802226a:	d1bf      	bne.n	80221ec <_fputs_r+0x38>
 802226c:	e7dd      	b.n	802222a <_fputs_r+0x76>
 802226e:	460d      	mov	r5, r1
 8022270:	e7c9      	b.n	8022206 <_fputs_r+0x52>
 8022272:	bf00      	nop
 8022274:	0802c410 	.word	0x0802c410
 8022278:	0802c430 	.word	0x0802c430
 802227c:	0802c3f0 	.word	0x0802c3f0

08022280 <fputs>:
 8022280:	4b02      	ldr	r3, [pc, #8]	; (802228c <fputs+0xc>)
 8022282:	460a      	mov	r2, r1
 8022284:	4601      	mov	r1, r0
 8022286:	6818      	ldr	r0, [r3, #0]
 8022288:	f7ff bf94 	b.w	80221b4 <_fputs_r>
 802228c:	20000108 	.word	0x20000108

08022290 <_fseek_r>:
 8022290:	f000 b800 	b.w	8022294 <_fseeko_r>

08022294 <_fseeko_r>:
 8022294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022298:	460c      	mov	r4, r1
 802229a:	4617      	mov	r7, r2
 802229c:	461e      	mov	r6, r3
 802229e:	4605      	mov	r5, r0
 80222a0:	b118      	cbz	r0, 80222aa <_fseeko_r+0x16>
 80222a2:	6983      	ldr	r3, [r0, #24]
 80222a4:	b90b      	cbnz	r3, 80222aa <_fseeko_r+0x16>
 80222a6:	f7ff feab 	bl	8022000 <__sinit>
 80222aa:	4b44      	ldr	r3, [pc, #272]	; (80223bc <_fseeko_r+0x128>)
 80222ac:	429c      	cmp	r4, r3
 80222ae:	d122      	bne.n	80222f6 <_fseeko_r+0x62>
 80222b0:	686c      	ldr	r4, [r5, #4]
 80222b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80222b4:	07d9      	lsls	r1, r3, #31
 80222b6:	d405      	bmi.n	80222c4 <_fseeko_r+0x30>
 80222b8:	89a3      	ldrh	r3, [r4, #12]
 80222ba:	059a      	lsls	r2, r3, #22
 80222bc:	d402      	bmi.n	80222c4 <_fseeko_r+0x30>
 80222be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80222c0:	f000 fa51 	bl	8022766 <__retarget_lock_acquire_recursive>
 80222c4:	89a3      	ldrh	r3, [r4, #12]
 80222c6:	f403 7384 	and.w	r3, r3, #264	; 0x108
 80222ca:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 80222ce:	d103      	bne.n	80222d8 <_fseeko_r+0x44>
 80222d0:	4621      	mov	r1, r4
 80222d2:	4628      	mov	r0, r5
 80222d4:	f7ff fdee 	bl	8021eb4 <_fflush_r>
 80222d8:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 80222dc:	f1b8 0f00 	cmp.w	r8, #0
 80222e0:	d113      	bne.n	802230a <_fseeko_r+0x76>
 80222e2:	231d      	movs	r3, #29
 80222e4:	602b      	str	r3, [r5, #0]
 80222e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80222e8:	07d9      	lsls	r1, r3, #31
 80222ea:	d55d      	bpl.n	80223a8 <_fseeko_r+0x114>
 80222ec:	f04f 36ff 	mov.w	r6, #4294967295
 80222f0:	4630      	mov	r0, r6
 80222f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80222f6:	4b32      	ldr	r3, [pc, #200]	; (80223c0 <_fseeko_r+0x12c>)
 80222f8:	429c      	cmp	r4, r3
 80222fa:	d101      	bne.n	8022300 <_fseeko_r+0x6c>
 80222fc:	68ac      	ldr	r4, [r5, #8]
 80222fe:	e7d8      	b.n	80222b2 <_fseeko_r+0x1e>
 8022300:	4b30      	ldr	r3, [pc, #192]	; (80223c4 <_fseeko_r+0x130>)
 8022302:	429c      	cmp	r4, r3
 8022304:	bf08      	it	eq
 8022306:	68ec      	ldreq	r4, [r5, #12]
 8022308:	e7d3      	b.n	80222b2 <_fseeko_r+0x1e>
 802230a:	2e01      	cmp	r6, #1
 802230c:	d036      	beq.n	802237c <_fseeko_r+0xe8>
 802230e:	f036 0302 	bics.w	r3, r6, #2
 8022312:	d147      	bne.n	80223a4 <_fseeko_r+0x110>
 8022314:	6923      	ldr	r3, [r4, #16]
 8022316:	b91b      	cbnz	r3, 8022320 <_fseeko_r+0x8c>
 8022318:	4621      	mov	r1, r4
 802231a:	4628      	mov	r0, r5
 802231c:	f000 fa4a 	bl	80227b4 <__smakebuf_r>
 8022320:	4621      	mov	r1, r4
 8022322:	4628      	mov	r0, r5
 8022324:	f7ff fdc6 	bl	8021eb4 <_fflush_r>
 8022328:	2800      	cmp	r0, #0
 802232a:	d1dc      	bne.n	80222e6 <_fseeko_r+0x52>
 802232c:	6a21      	ldr	r1, [r4, #32]
 802232e:	4633      	mov	r3, r6
 8022330:	463a      	mov	r2, r7
 8022332:	4628      	mov	r0, r5
 8022334:	47c0      	blx	r8
 8022336:	3001      	adds	r0, #1
 8022338:	d0d5      	beq.n	80222e6 <_fseeko_r+0x52>
 802233a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802233c:	b141      	cbz	r1, 8022350 <_fseeko_r+0xbc>
 802233e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022342:	4299      	cmp	r1, r3
 8022344:	d002      	beq.n	802234c <_fseeko_r+0xb8>
 8022346:	4628      	mov	r0, r5
 8022348:	f000 faaa 	bl	80228a0 <_free_r>
 802234c:	2300      	movs	r3, #0
 802234e:	6363      	str	r3, [r4, #52]	; 0x34
 8022350:	6923      	ldr	r3, [r4, #16]
 8022352:	6023      	str	r3, [r4, #0]
 8022354:	89a3      	ldrh	r3, [r4, #12]
 8022356:	2500      	movs	r5, #0
 8022358:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 802235c:	6065      	str	r5, [r4, #4]
 802235e:	81a3      	strh	r3, [r4, #12]
 8022360:	2208      	movs	r2, #8
 8022362:	4629      	mov	r1, r5
 8022364:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8022368:	f000 fa82 	bl	8022870 <memset>
 802236c:	6e66      	ldr	r6, [r4, #100]	; 0x64
 802236e:	f016 0601 	ands.w	r6, r6, #1
 8022372:	d120      	bne.n	80223b6 <_fseeko_r+0x122>
 8022374:	89a3      	ldrh	r3, [r4, #12]
 8022376:	059b      	lsls	r3, r3, #22
 8022378:	d4ba      	bmi.n	80222f0 <_fseeko_r+0x5c>
 802237a:	e00c      	b.n	8022396 <_fseeko_r+0x102>
 802237c:	4621      	mov	r1, r4
 802237e:	4628      	mov	r0, r5
 8022380:	f000 f822 	bl	80223c8 <_ftello_r>
 8022384:	1c43      	adds	r3, r0, #1
 8022386:	4606      	mov	r6, r0
 8022388:	d109      	bne.n	802239e <_fseeko_r+0x10a>
 802238a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802238c:	07dd      	lsls	r5, r3, #31
 802238e:	d4ad      	bmi.n	80222ec <_fseeko_r+0x58>
 8022390:	89a3      	ldrh	r3, [r4, #12]
 8022392:	0598      	lsls	r0, r3, #22
 8022394:	d4aa      	bmi.n	80222ec <_fseeko_r+0x58>
 8022396:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022398:	f000 f9e7 	bl	802276a <__retarget_lock_release_recursive>
 802239c:	e7a8      	b.n	80222f0 <_fseeko_r+0x5c>
 802239e:	4407      	add	r7, r0
 80223a0:	2600      	movs	r6, #0
 80223a2:	e7b7      	b.n	8022314 <_fseeko_r+0x80>
 80223a4:	2316      	movs	r3, #22
 80223a6:	e79d      	b.n	80222e4 <_fseeko_r+0x50>
 80223a8:	89a3      	ldrh	r3, [r4, #12]
 80223aa:	059a      	lsls	r2, r3, #22
 80223ac:	d49e      	bmi.n	80222ec <_fseeko_r+0x58>
 80223ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80223b0:	f000 f9db 	bl	802276a <__retarget_lock_release_recursive>
 80223b4:	e79a      	b.n	80222ec <_fseeko_r+0x58>
 80223b6:	462e      	mov	r6, r5
 80223b8:	e79a      	b.n	80222f0 <_fseeko_r+0x5c>
 80223ba:	bf00      	nop
 80223bc:	0802c410 	.word	0x0802c410
 80223c0:	0802c430 	.word	0x0802c430
 80223c4:	0802c3f0 	.word	0x0802c3f0

080223c8 <_ftello_r>:
 80223c8:	b570      	push	{r4, r5, r6, lr}
 80223ca:	460c      	mov	r4, r1
 80223cc:	4605      	mov	r5, r0
 80223ce:	b118      	cbz	r0, 80223d8 <_ftello_r+0x10>
 80223d0:	6983      	ldr	r3, [r0, #24]
 80223d2:	b90b      	cbnz	r3, 80223d8 <_ftello_r+0x10>
 80223d4:	f7ff fe14 	bl	8022000 <__sinit>
 80223d8:	4b32      	ldr	r3, [pc, #200]	; (80224a4 <_ftello_r+0xdc>)
 80223da:	429c      	cmp	r4, r3
 80223dc:	d114      	bne.n	8022408 <_ftello_r+0x40>
 80223de:	686c      	ldr	r4, [r5, #4]
 80223e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80223e2:	07da      	lsls	r2, r3, #31
 80223e4:	d405      	bmi.n	80223f2 <_ftello_r+0x2a>
 80223e6:	89a3      	ldrh	r3, [r4, #12]
 80223e8:	059b      	lsls	r3, r3, #22
 80223ea:	d402      	bmi.n	80223f2 <_ftello_r+0x2a>
 80223ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80223ee:	f000 f9ba 	bl	8022766 <__retarget_lock_acquire_recursive>
 80223f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80223f4:	b9ce      	cbnz	r6, 802242a <_ftello_r+0x62>
 80223f6:	231d      	movs	r3, #29
 80223f8:	602b      	str	r3, [r5, #0]
 80223fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80223fc:	07de      	lsls	r6, r3, #31
 80223fe:	d50d      	bpl.n	802241c <_ftello_r+0x54>
 8022400:	f04f 35ff 	mov.w	r5, #4294967295
 8022404:	4628      	mov	r0, r5
 8022406:	bd70      	pop	{r4, r5, r6, pc}
 8022408:	4b27      	ldr	r3, [pc, #156]	; (80224a8 <_ftello_r+0xe0>)
 802240a:	429c      	cmp	r4, r3
 802240c:	d101      	bne.n	8022412 <_ftello_r+0x4a>
 802240e:	68ac      	ldr	r4, [r5, #8]
 8022410:	e7e6      	b.n	80223e0 <_ftello_r+0x18>
 8022412:	4b26      	ldr	r3, [pc, #152]	; (80224ac <_ftello_r+0xe4>)
 8022414:	429c      	cmp	r4, r3
 8022416:	bf08      	it	eq
 8022418:	68ec      	ldreq	r4, [r5, #12]
 802241a:	e7e1      	b.n	80223e0 <_ftello_r+0x18>
 802241c:	89a3      	ldrh	r3, [r4, #12]
 802241e:	059d      	lsls	r5, r3, #22
 8022420:	d4ee      	bmi.n	8022400 <_ftello_r+0x38>
 8022422:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022424:	f000 f9a1 	bl	802276a <__retarget_lock_release_recursive>
 8022428:	e7ea      	b.n	8022400 <_ftello_r+0x38>
 802242a:	89a2      	ldrh	r2, [r4, #12]
 802242c:	f002 030c 	and.w	r3, r2, #12
 8022430:	2b08      	cmp	r3, #8
 8022432:	d119      	bne.n	8022468 <_ftello_r+0xa0>
 8022434:	6823      	ldr	r3, [r4, #0]
 8022436:	b1bb      	cbz	r3, 8022468 <_ftello_r+0xa0>
 8022438:	6921      	ldr	r1, [r4, #16]
 802243a:	1a5b      	subs	r3, r3, r1
 802243c:	2b00      	cmp	r3, #0
 802243e:	dd13      	ble.n	8022468 <_ftello_r+0xa0>
 8022440:	05d0      	lsls	r0, r2, #23
 8022442:	d511      	bpl.n	8022468 <_ftello_r+0xa0>
 8022444:	2302      	movs	r3, #2
 8022446:	2200      	movs	r2, #0
 8022448:	6a21      	ldr	r1, [r4, #32]
 802244a:	4628      	mov	r0, r5
 802244c:	47b0      	blx	r6
 802244e:	1c41      	adds	r1, r0, #1
 8022450:	4605      	mov	r5, r0
 8022452:	d10d      	bne.n	8022470 <_ftello_r+0xa8>
 8022454:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022456:	07da      	lsls	r2, r3, #31
 8022458:	d4d2      	bmi.n	8022400 <_ftello_r+0x38>
 802245a:	89a3      	ldrh	r3, [r4, #12]
 802245c:	059b      	lsls	r3, r3, #22
 802245e:	d4cf      	bmi.n	8022400 <_ftello_r+0x38>
 8022460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022462:	f000 f982 	bl	802276a <__retarget_lock_release_recursive>
 8022466:	e7cd      	b.n	8022404 <_ftello_r+0x3c>
 8022468:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802246c:	d00f      	beq.n	802248e <_ftello_r+0xc6>
 802246e:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8022470:	89a2      	ldrh	r2, [r4, #12]
 8022472:	0756      	lsls	r6, r2, #29
 8022474:	d50d      	bpl.n	8022492 <_ftello_r+0xca>
 8022476:	6863      	ldr	r3, [r4, #4]
 8022478:	1aed      	subs	r5, r5, r3
 802247a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802247c:	b10b      	cbz	r3, 8022482 <_ftello_r+0xba>
 802247e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022480:	1aed      	subs	r5, r5, r3
 8022482:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022484:	07d9      	lsls	r1, r3, #31
 8022486:	d4bd      	bmi.n	8022404 <_ftello_r+0x3c>
 8022488:	0593      	lsls	r3, r2, #22
 802248a:	d4bb      	bmi.n	8022404 <_ftello_r+0x3c>
 802248c:	e7e8      	b.n	8022460 <_ftello_r+0x98>
 802248e:	2301      	movs	r3, #1
 8022490:	e7da      	b.n	8022448 <_ftello_r+0x80>
 8022492:	0710      	lsls	r0, r2, #28
 8022494:	d5f5      	bpl.n	8022482 <_ftello_r+0xba>
 8022496:	6823      	ldr	r3, [r4, #0]
 8022498:	2b00      	cmp	r3, #0
 802249a:	d0f2      	beq.n	8022482 <_ftello_r+0xba>
 802249c:	6921      	ldr	r1, [r4, #16]
 802249e:	1a5b      	subs	r3, r3, r1
 80224a0:	441d      	add	r5, r3
 80224a2:	e7ee      	b.n	8022482 <_ftello_r+0xba>
 80224a4:	0802c410 	.word	0x0802c410
 80224a8:	0802c430 	.word	0x0802c430
 80224ac:	0802c3f0 	.word	0x0802c3f0

080224b0 <_fwalk_reent>:
 80224b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80224b4:	4606      	mov	r6, r0
 80224b6:	4688      	mov	r8, r1
 80224b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80224bc:	2700      	movs	r7, #0
 80224be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80224c2:	f1b9 0901 	subs.w	r9, r9, #1
 80224c6:	d505      	bpl.n	80224d4 <_fwalk_reent+0x24>
 80224c8:	6824      	ldr	r4, [r4, #0]
 80224ca:	2c00      	cmp	r4, #0
 80224cc:	d1f7      	bne.n	80224be <_fwalk_reent+0xe>
 80224ce:	4638      	mov	r0, r7
 80224d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80224d4:	89ab      	ldrh	r3, [r5, #12]
 80224d6:	2b01      	cmp	r3, #1
 80224d8:	d907      	bls.n	80224ea <_fwalk_reent+0x3a>
 80224da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80224de:	3301      	adds	r3, #1
 80224e0:	d003      	beq.n	80224ea <_fwalk_reent+0x3a>
 80224e2:	4629      	mov	r1, r5
 80224e4:	4630      	mov	r0, r6
 80224e6:	47c0      	blx	r8
 80224e8:	4307      	orrs	r7, r0
 80224ea:	3568      	adds	r5, #104	; 0x68
 80224ec:	e7e9      	b.n	80224c2 <_fwalk_reent+0x12>
	...

080224f0 <__libc_init_array>:
 80224f0:	b570      	push	{r4, r5, r6, lr}
 80224f2:	4d0d      	ldr	r5, [pc, #52]	; (8022528 <__libc_init_array+0x38>)
 80224f4:	4c0d      	ldr	r4, [pc, #52]	; (802252c <__libc_init_array+0x3c>)
 80224f6:	1b64      	subs	r4, r4, r5
 80224f8:	10a4      	asrs	r4, r4, #2
 80224fa:	2600      	movs	r6, #0
 80224fc:	42a6      	cmp	r6, r4
 80224fe:	d109      	bne.n	8022514 <__libc_init_array+0x24>
 8022500:	4d0b      	ldr	r5, [pc, #44]	; (8022530 <__libc_init_array+0x40>)
 8022502:	4c0c      	ldr	r4, [pc, #48]	; (8022534 <__libc_init_array+0x44>)
 8022504:	f003 f8d6 	bl	80256b4 <_init>
 8022508:	1b64      	subs	r4, r4, r5
 802250a:	10a4      	asrs	r4, r4, #2
 802250c:	2600      	movs	r6, #0
 802250e:	42a6      	cmp	r6, r4
 8022510:	d105      	bne.n	802251e <__libc_init_array+0x2e>
 8022512:	bd70      	pop	{r4, r5, r6, pc}
 8022514:	f855 3b04 	ldr.w	r3, [r5], #4
 8022518:	4798      	blx	r3
 802251a:	3601      	adds	r6, #1
 802251c:	e7ee      	b.n	80224fc <__libc_init_array+0xc>
 802251e:	f855 3b04 	ldr.w	r3, [r5], #4
 8022522:	4798      	blx	r3
 8022524:	3601      	adds	r6, #1
 8022526:	e7f2      	b.n	802250e <__libc_init_array+0x1e>
 8022528:	0802c9e8 	.word	0x0802c9e8
 802252c:	0802c9e8 	.word	0x0802c9e8
 8022530:	0802c9e8 	.word	0x0802c9e8
 8022534:	0802c9fc 	.word	0x0802c9fc

08022538 <localtime>:
 8022538:	b538      	push	{r3, r4, r5, lr}
 802253a:	4b0b      	ldr	r3, [pc, #44]	; (8022568 <localtime+0x30>)
 802253c:	681d      	ldr	r5, [r3, #0]
 802253e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8022540:	4604      	mov	r4, r0
 8022542:	b953      	cbnz	r3, 802255a <localtime+0x22>
 8022544:	2024      	movs	r0, #36	; 0x24
 8022546:	f000 f975 	bl	8022834 <malloc>
 802254a:	4602      	mov	r2, r0
 802254c:	63e8      	str	r0, [r5, #60]	; 0x3c
 802254e:	b920      	cbnz	r0, 802255a <localtime+0x22>
 8022550:	4b06      	ldr	r3, [pc, #24]	; (802256c <localtime+0x34>)
 8022552:	4807      	ldr	r0, [pc, #28]	; (8022570 <localtime+0x38>)
 8022554:	2132      	movs	r1, #50	; 0x32
 8022556:	f001 fde1 	bl	802411c <__assert_func>
 802255a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 802255c:	4620      	mov	r0, r4
 802255e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022562:	f000 b807 	b.w	8022574 <localtime_r>
 8022566:	bf00      	nop
 8022568:	20000108 	.word	0x20000108
 802256c:	0802c454 	.word	0x0802c454
 8022570:	0802c46b 	.word	0x0802c46b

08022574 <localtime_r>:
 8022574:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8022578:	4607      	mov	r7, r0
 802257a:	9101      	str	r1, [sp, #4]
 802257c:	f001 fe98 	bl	80242b0 <__gettzinfo>
 8022580:	9901      	ldr	r1, [sp, #4]
 8022582:	4680      	mov	r8, r0
 8022584:	4638      	mov	r0, r7
 8022586:	f001 fe97 	bl	80242b8 <gmtime_r>
 802258a:	6943      	ldr	r3, [r0, #20]
 802258c:	079a      	lsls	r2, r3, #30
 802258e:	4604      	mov	r4, r0
 8022590:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 8022594:	d105      	bne.n	80225a2 <localtime_r+0x2e>
 8022596:	2264      	movs	r2, #100	; 0x64
 8022598:	fb96 f3f2 	sdiv	r3, r6, r2
 802259c:	fb02 6313 	mls	r3, r2, r3, r6
 80225a0:	bb7b      	cbnz	r3, 8022602 <localtime_r+0x8e>
 80225a2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80225a6:	fb96 f5f3 	sdiv	r5, r6, r3
 80225aa:	fb03 6515 	mls	r5, r3, r5, r6
 80225ae:	fab5 f585 	clz	r5, r5
 80225b2:	096d      	lsrs	r5, r5, #5
 80225b4:	4b68      	ldr	r3, [pc, #416]	; (8022758 <localtime_r+0x1e4>)
 80225b6:	2230      	movs	r2, #48	; 0x30
 80225b8:	fb02 3505 	mla	r5, r2, r5, r3
 80225bc:	f001 faae 	bl	8023b1c <__tz_lock>
 80225c0:	f001 fab8 	bl	8023b34 <_tzset_unlocked>
 80225c4:	4b65      	ldr	r3, [pc, #404]	; (802275c <localtime_r+0x1e8>)
 80225c6:	681b      	ldr	r3, [r3, #0]
 80225c8:	b353      	cbz	r3, 8022620 <localtime_r+0xac>
 80225ca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80225ce:	42b3      	cmp	r3, r6
 80225d0:	d119      	bne.n	8022606 <localtime_r+0x92>
 80225d2:	f8d8 1000 	ldr.w	r1, [r8]
 80225d6:	e9d7 6700 	ldrd	r6, r7, [r7]
 80225da:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 80225de:	b9d1      	cbnz	r1, 8022616 <localtime_r+0xa2>
 80225e0:	4296      	cmp	r6, r2
 80225e2:	eb77 0303 	sbcs.w	r3, r7, r3
 80225e6:	da23      	bge.n	8022630 <localtime_r+0xbc>
 80225e8:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80225ec:	4296      	cmp	r6, r2
 80225ee:	eb77 0303 	sbcs.w	r3, r7, r3
 80225f2:	bfb4      	ite	lt
 80225f4:	2301      	movlt	r3, #1
 80225f6:	2300      	movge	r3, #0
 80225f8:	6223      	str	r3, [r4, #32]
 80225fa:	db1b      	blt.n	8022634 <localtime_r+0xc0>
 80225fc:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 8022600:	e01a      	b.n	8022638 <localtime_r+0xc4>
 8022602:	2501      	movs	r5, #1
 8022604:	e7d6      	b.n	80225b4 <localtime_r+0x40>
 8022606:	4630      	mov	r0, r6
 8022608:	f001 f9e0 	bl	80239cc <__tzcalc_limits>
 802260c:	2800      	cmp	r0, #0
 802260e:	d1e0      	bne.n	80225d2 <localtime_r+0x5e>
 8022610:	f04f 33ff 	mov.w	r3, #4294967295
 8022614:	e004      	b.n	8022620 <localtime_r+0xac>
 8022616:	4296      	cmp	r6, r2
 8022618:	eb77 0303 	sbcs.w	r3, r7, r3
 802261c:	da02      	bge.n	8022624 <localtime_r+0xb0>
 802261e:	2300      	movs	r3, #0
 8022620:	6223      	str	r3, [r4, #32]
 8022622:	e7eb      	b.n	80225fc <localtime_r+0x88>
 8022624:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8022628:	4296      	cmp	r6, r2
 802262a:	eb77 0303 	sbcs.w	r3, r7, r3
 802262e:	daf6      	bge.n	802261e <localtime_r+0xaa>
 8022630:	2301      	movs	r3, #1
 8022632:	6223      	str	r3, [r4, #32]
 8022634:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8022638:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 802263c:	203c      	movs	r0, #60	; 0x3c
 802263e:	fb91 f6f3 	sdiv	r6, r1, r3
 8022642:	fb03 1316 	mls	r3, r3, r6, r1
 8022646:	6861      	ldr	r1, [r4, #4]
 8022648:	fb93 f2f0 	sdiv	r2, r3, r0
 802264c:	fb00 3012 	mls	r0, r0, r2, r3
 8022650:	6823      	ldr	r3, [r4, #0]
 8022652:	1a89      	subs	r1, r1, r2
 8022654:	68a2      	ldr	r2, [r4, #8]
 8022656:	6061      	str	r1, [r4, #4]
 8022658:	1a1b      	subs	r3, r3, r0
 802265a:	1b92      	subs	r2, r2, r6
 802265c:	2b3b      	cmp	r3, #59	; 0x3b
 802265e:	6023      	str	r3, [r4, #0]
 8022660:	60a2      	str	r2, [r4, #8]
 8022662:	dd35      	ble.n	80226d0 <localtime_r+0x15c>
 8022664:	3101      	adds	r1, #1
 8022666:	6061      	str	r1, [r4, #4]
 8022668:	3b3c      	subs	r3, #60	; 0x3c
 802266a:	6023      	str	r3, [r4, #0]
 802266c:	6863      	ldr	r3, [r4, #4]
 802266e:	2b3b      	cmp	r3, #59	; 0x3b
 8022670:	dd34      	ble.n	80226dc <localtime_r+0x168>
 8022672:	3201      	adds	r2, #1
 8022674:	60a2      	str	r2, [r4, #8]
 8022676:	3b3c      	subs	r3, #60	; 0x3c
 8022678:	6063      	str	r3, [r4, #4]
 802267a:	68a3      	ldr	r3, [r4, #8]
 802267c:	2b17      	cmp	r3, #23
 802267e:	dd33      	ble.n	80226e8 <localtime_r+0x174>
 8022680:	69e2      	ldr	r2, [r4, #28]
 8022682:	3201      	adds	r2, #1
 8022684:	61e2      	str	r2, [r4, #28]
 8022686:	69a2      	ldr	r2, [r4, #24]
 8022688:	3201      	adds	r2, #1
 802268a:	2a06      	cmp	r2, #6
 802268c:	bfc8      	it	gt
 802268e:	2200      	movgt	r2, #0
 8022690:	61a2      	str	r2, [r4, #24]
 8022692:	68e2      	ldr	r2, [r4, #12]
 8022694:	3b18      	subs	r3, #24
 8022696:	3201      	adds	r2, #1
 8022698:	60a3      	str	r3, [r4, #8]
 802269a:	6923      	ldr	r3, [r4, #16]
 802269c:	60e2      	str	r2, [r4, #12]
 802269e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80226a2:	428a      	cmp	r2, r1
 80226a4:	dd0e      	ble.n	80226c4 <localtime_r+0x150>
 80226a6:	2b0b      	cmp	r3, #11
 80226a8:	eba2 0201 	sub.w	r2, r2, r1
 80226ac:	60e2      	str	r2, [r4, #12]
 80226ae:	f103 0201 	add.w	r2, r3, #1
 80226b2:	bf09      	itett	eq
 80226b4:	6963      	ldreq	r3, [r4, #20]
 80226b6:	6122      	strne	r2, [r4, #16]
 80226b8:	2200      	moveq	r2, #0
 80226ba:	3301      	addeq	r3, #1
 80226bc:	bf02      	ittt	eq
 80226be:	6122      	streq	r2, [r4, #16]
 80226c0:	6163      	streq	r3, [r4, #20]
 80226c2:	61e2      	streq	r2, [r4, #28]
 80226c4:	f001 fa30 	bl	8023b28 <__tz_unlock>
 80226c8:	4620      	mov	r0, r4
 80226ca:	b002      	add	sp, #8
 80226cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80226d0:	2b00      	cmp	r3, #0
 80226d2:	dacb      	bge.n	802266c <localtime_r+0xf8>
 80226d4:	3901      	subs	r1, #1
 80226d6:	6061      	str	r1, [r4, #4]
 80226d8:	333c      	adds	r3, #60	; 0x3c
 80226da:	e7c6      	b.n	802266a <localtime_r+0xf6>
 80226dc:	2b00      	cmp	r3, #0
 80226de:	dacc      	bge.n	802267a <localtime_r+0x106>
 80226e0:	3a01      	subs	r2, #1
 80226e2:	60a2      	str	r2, [r4, #8]
 80226e4:	333c      	adds	r3, #60	; 0x3c
 80226e6:	e7c7      	b.n	8022678 <localtime_r+0x104>
 80226e8:	2b00      	cmp	r3, #0
 80226ea:	daeb      	bge.n	80226c4 <localtime_r+0x150>
 80226ec:	69e2      	ldr	r2, [r4, #28]
 80226ee:	3a01      	subs	r2, #1
 80226f0:	61e2      	str	r2, [r4, #28]
 80226f2:	69a2      	ldr	r2, [r4, #24]
 80226f4:	3a01      	subs	r2, #1
 80226f6:	bf48      	it	mi
 80226f8:	2206      	movmi	r2, #6
 80226fa:	61a2      	str	r2, [r4, #24]
 80226fc:	68e2      	ldr	r2, [r4, #12]
 80226fe:	3318      	adds	r3, #24
 8022700:	3a01      	subs	r2, #1
 8022702:	60e2      	str	r2, [r4, #12]
 8022704:	60a3      	str	r3, [r4, #8]
 8022706:	2a00      	cmp	r2, #0
 8022708:	d1dc      	bne.n	80226c4 <localtime_r+0x150>
 802270a:	6923      	ldr	r3, [r4, #16]
 802270c:	3b01      	subs	r3, #1
 802270e:	d405      	bmi.n	802271c <localtime_r+0x1a8>
 8022710:	6123      	str	r3, [r4, #16]
 8022712:	6923      	ldr	r3, [r4, #16]
 8022714:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8022718:	60e3      	str	r3, [r4, #12]
 802271a:	e7d3      	b.n	80226c4 <localtime_r+0x150>
 802271c:	230b      	movs	r3, #11
 802271e:	6123      	str	r3, [r4, #16]
 8022720:	6963      	ldr	r3, [r4, #20]
 8022722:	1e5a      	subs	r2, r3, #1
 8022724:	6162      	str	r2, [r4, #20]
 8022726:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 802272a:	0793      	lsls	r3, r2, #30
 802272c:	d105      	bne.n	802273a <localtime_r+0x1c6>
 802272e:	2164      	movs	r1, #100	; 0x64
 8022730:	fb92 f3f1 	sdiv	r3, r2, r1
 8022734:	fb01 2313 	mls	r3, r1, r3, r2
 8022738:	b963      	cbnz	r3, 8022754 <localtime_r+0x1e0>
 802273a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 802273e:	fb92 f3f1 	sdiv	r3, r2, r1
 8022742:	fb01 2313 	mls	r3, r1, r3, r2
 8022746:	fab3 f383 	clz	r3, r3
 802274a:	095b      	lsrs	r3, r3, #5
 802274c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8022750:	61e3      	str	r3, [r4, #28]
 8022752:	e7de      	b.n	8022712 <localtime_r+0x19e>
 8022754:	2301      	movs	r3, #1
 8022756:	e7f9      	b.n	802274c <localtime_r+0x1d8>
 8022758:	0802c4cc 	.word	0x0802c4cc
 802275c:	20001060 	.word	0x20001060

08022760 <__retarget_lock_init_recursive>:
 8022760:	4770      	bx	lr

08022762 <__retarget_lock_close_recursive>:
 8022762:	4770      	bx	lr

08022764 <__retarget_lock_acquire>:
 8022764:	4770      	bx	lr

08022766 <__retarget_lock_acquire_recursive>:
 8022766:	4770      	bx	lr

08022768 <__retarget_lock_release>:
 8022768:	4770      	bx	lr

0802276a <__retarget_lock_release_recursive>:
 802276a:	4770      	bx	lr

0802276c <__swhatbuf_r>:
 802276c:	b570      	push	{r4, r5, r6, lr}
 802276e:	460e      	mov	r6, r1
 8022770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022774:	2900      	cmp	r1, #0
 8022776:	b096      	sub	sp, #88	; 0x58
 8022778:	4614      	mov	r4, r2
 802277a:	461d      	mov	r5, r3
 802277c:	da07      	bge.n	802278e <__swhatbuf_r+0x22>
 802277e:	2300      	movs	r3, #0
 8022780:	602b      	str	r3, [r5, #0]
 8022782:	89b3      	ldrh	r3, [r6, #12]
 8022784:	061a      	lsls	r2, r3, #24
 8022786:	d410      	bmi.n	80227aa <__swhatbuf_r+0x3e>
 8022788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802278c:	e00e      	b.n	80227ac <__swhatbuf_r+0x40>
 802278e:	466a      	mov	r2, sp
 8022790:	f001 fd3a 	bl	8024208 <_fstat_r>
 8022794:	2800      	cmp	r0, #0
 8022796:	dbf2      	blt.n	802277e <__swhatbuf_r+0x12>
 8022798:	9a01      	ldr	r2, [sp, #4]
 802279a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802279e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80227a2:	425a      	negs	r2, r3
 80227a4:	415a      	adcs	r2, r3
 80227a6:	602a      	str	r2, [r5, #0]
 80227a8:	e7ee      	b.n	8022788 <__swhatbuf_r+0x1c>
 80227aa:	2340      	movs	r3, #64	; 0x40
 80227ac:	2000      	movs	r0, #0
 80227ae:	6023      	str	r3, [r4, #0]
 80227b0:	b016      	add	sp, #88	; 0x58
 80227b2:	bd70      	pop	{r4, r5, r6, pc}

080227b4 <__smakebuf_r>:
 80227b4:	898b      	ldrh	r3, [r1, #12]
 80227b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80227b8:	079d      	lsls	r5, r3, #30
 80227ba:	4606      	mov	r6, r0
 80227bc:	460c      	mov	r4, r1
 80227be:	d507      	bpl.n	80227d0 <__smakebuf_r+0x1c>
 80227c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80227c4:	6023      	str	r3, [r4, #0]
 80227c6:	6123      	str	r3, [r4, #16]
 80227c8:	2301      	movs	r3, #1
 80227ca:	6163      	str	r3, [r4, #20]
 80227cc:	b002      	add	sp, #8
 80227ce:	bd70      	pop	{r4, r5, r6, pc}
 80227d0:	ab01      	add	r3, sp, #4
 80227d2:	466a      	mov	r2, sp
 80227d4:	f7ff ffca 	bl	802276c <__swhatbuf_r>
 80227d8:	9900      	ldr	r1, [sp, #0]
 80227da:	4605      	mov	r5, r0
 80227dc:	4630      	mov	r0, r6
 80227de:	f000 f8af 	bl	8022940 <_malloc_r>
 80227e2:	b948      	cbnz	r0, 80227f8 <__smakebuf_r+0x44>
 80227e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80227e8:	059a      	lsls	r2, r3, #22
 80227ea:	d4ef      	bmi.n	80227cc <__smakebuf_r+0x18>
 80227ec:	f023 0303 	bic.w	r3, r3, #3
 80227f0:	f043 0302 	orr.w	r3, r3, #2
 80227f4:	81a3      	strh	r3, [r4, #12]
 80227f6:	e7e3      	b.n	80227c0 <__smakebuf_r+0xc>
 80227f8:	4b0d      	ldr	r3, [pc, #52]	; (8022830 <__smakebuf_r+0x7c>)
 80227fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80227fc:	89a3      	ldrh	r3, [r4, #12]
 80227fe:	6020      	str	r0, [r4, #0]
 8022800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022804:	81a3      	strh	r3, [r4, #12]
 8022806:	9b00      	ldr	r3, [sp, #0]
 8022808:	6163      	str	r3, [r4, #20]
 802280a:	9b01      	ldr	r3, [sp, #4]
 802280c:	6120      	str	r0, [r4, #16]
 802280e:	b15b      	cbz	r3, 8022828 <__smakebuf_r+0x74>
 8022810:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022814:	4630      	mov	r0, r6
 8022816:	f001 fdff 	bl	8024418 <_isatty_r>
 802281a:	b128      	cbz	r0, 8022828 <__smakebuf_r+0x74>
 802281c:	89a3      	ldrh	r3, [r4, #12]
 802281e:	f023 0303 	bic.w	r3, r3, #3
 8022822:	f043 0301 	orr.w	r3, r3, #1
 8022826:	81a3      	strh	r3, [r4, #12]
 8022828:	89a0      	ldrh	r0, [r4, #12]
 802282a:	4305      	orrs	r5, r0
 802282c:	81a5      	strh	r5, [r4, #12]
 802282e:	e7cd      	b.n	80227cc <__smakebuf_r+0x18>
 8022830:	08021f99 	.word	0x08021f99

08022834 <malloc>:
 8022834:	4b02      	ldr	r3, [pc, #8]	; (8022840 <malloc+0xc>)
 8022836:	4601      	mov	r1, r0
 8022838:	6818      	ldr	r0, [r3, #0]
 802283a:	f000 b881 	b.w	8022940 <_malloc_r>
 802283e:	bf00      	nop
 8022840:	20000108 	.word	0x20000108

08022844 <free>:
 8022844:	4b02      	ldr	r3, [pc, #8]	; (8022850 <free+0xc>)
 8022846:	4601      	mov	r1, r0
 8022848:	6818      	ldr	r0, [r3, #0]
 802284a:	f000 b829 	b.w	80228a0 <_free_r>
 802284e:	bf00      	nop
 8022850:	20000108 	.word	0x20000108

08022854 <memcpy>:
 8022854:	440a      	add	r2, r1
 8022856:	4291      	cmp	r1, r2
 8022858:	f100 33ff 	add.w	r3, r0, #4294967295
 802285c:	d100      	bne.n	8022860 <memcpy+0xc>
 802285e:	4770      	bx	lr
 8022860:	b510      	push	{r4, lr}
 8022862:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022866:	f803 4f01 	strb.w	r4, [r3, #1]!
 802286a:	4291      	cmp	r1, r2
 802286c:	d1f9      	bne.n	8022862 <memcpy+0xe>
 802286e:	bd10      	pop	{r4, pc}

08022870 <memset>:
 8022870:	4402      	add	r2, r0
 8022872:	4603      	mov	r3, r0
 8022874:	4293      	cmp	r3, r2
 8022876:	d100      	bne.n	802287a <memset+0xa>
 8022878:	4770      	bx	lr
 802287a:	f803 1b01 	strb.w	r1, [r3], #1
 802287e:	e7f9      	b.n	8022874 <memset+0x4>

08022880 <_calloc_r>:
 8022880:	b513      	push	{r0, r1, r4, lr}
 8022882:	434a      	muls	r2, r1
 8022884:	4611      	mov	r1, r2
 8022886:	9201      	str	r2, [sp, #4]
 8022888:	f000 f85a 	bl	8022940 <_malloc_r>
 802288c:	4604      	mov	r4, r0
 802288e:	b118      	cbz	r0, 8022898 <_calloc_r+0x18>
 8022890:	9a01      	ldr	r2, [sp, #4]
 8022892:	2100      	movs	r1, #0
 8022894:	f7ff ffec 	bl	8022870 <memset>
 8022898:	4620      	mov	r0, r4
 802289a:	b002      	add	sp, #8
 802289c:	bd10      	pop	{r4, pc}
	...

080228a0 <_free_r>:
 80228a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80228a2:	2900      	cmp	r1, #0
 80228a4:	d048      	beq.n	8022938 <_free_r+0x98>
 80228a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80228aa:	9001      	str	r0, [sp, #4]
 80228ac:	2b00      	cmp	r3, #0
 80228ae:	f1a1 0404 	sub.w	r4, r1, #4
 80228b2:	bfb8      	it	lt
 80228b4:	18e4      	addlt	r4, r4, r3
 80228b6:	f001 fde7 	bl	8024488 <__malloc_lock>
 80228ba:	4a20      	ldr	r2, [pc, #128]	; (802293c <_free_r+0x9c>)
 80228bc:	9801      	ldr	r0, [sp, #4]
 80228be:	6813      	ldr	r3, [r2, #0]
 80228c0:	4615      	mov	r5, r2
 80228c2:	b933      	cbnz	r3, 80228d2 <_free_r+0x32>
 80228c4:	6063      	str	r3, [r4, #4]
 80228c6:	6014      	str	r4, [r2, #0]
 80228c8:	b003      	add	sp, #12
 80228ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80228ce:	f001 bde1 	b.w	8024494 <__malloc_unlock>
 80228d2:	42a3      	cmp	r3, r4
 80228d4:	d90b      	bls.n	80228ee <_free_r+0x4e>
 80228d6:	6821      	ldr	r1, [r4, #0]
 80228d8:	1862      	adds	r2, r4, r1
 80228da:	4293      	cmp	r3, r2
 80228dc:	bf04      	itt	eq
 80228de:	681a      	ldreq	r2, [r3, #0]
 80228e0:	685b      	ldreq	r3, [r3, #4]
 80228e2:	6063      	str	r3, [r4, #4]
 80228e4:	bf04      	itt	eq
 80228e6:	1852      	addeq	r2, r2, r1
 80228e8:	6022      	streq	r2, [r4, #0]
 80228ea:	602c      	str	r4, [r5, #0]
 80228ec:	e7ec      	b.n	80228c8 <_free_r+0x28>
 80228ee:	461a      	mov	r2, r3
 80228f0:	685b      	ldr	r3, [r3, #4]
 80228f2:	b10b      	cbz	r3, 80228f8 <_free_r+0x58>
 80228f4:	42a3      	cmp	r3, r4
 80228f6:	d9fa      	bls.n	80228ee <_free_r+0x4e>
 80228f8:	6811      	ldr	r1, [r2, #0]
 80228fa:	1855      	adds	r5, r2, r1
 80228fc:	42a5      	cmp	r5, r4
 80228fe:	d10b      	bne.n	8022918 <_free_r+0x78>
 8022900:	6824      	ldr	r4, [r4, #0]
 8022902:	4421      	add	r1, r4
 8022904:	1854      	adds	r4, r2, r1
 8022906:	42a3      	cmp	r3, r4
 8022908:	6011      	str	r1, [r2, #0]
 802290a:	d1dd      	bne.n	80228c8 <_free_r+0x28>
 802290c:	681c      	ldr	r4, [r3, #0]
 802290e:	685b      	ldr	r3, [r3, #4]
 8022910:	6053      	str	r3, [r2, #4]
 8022912:	4421      	add	r1, r4
 8022914:	6011      	str	r1, [r2, #0]
 8022916:	e7d7      	b.n	80228c8 <_free_r+0x28>
 8022918:	d902      	bls.n	8022920 <_free_r+0x80>
 802291a:	230c      	movs	r3, #12
 802291c:	6003      	str	r3, [r0, #0]
 802291e:	e7d3      	b.n	80228c8 <_free_r+0x28>
 8022920:	6825      	ldr	r5, [r4, #0]
 8022922:	1961      	adds	r1, r4, r5
 8022924:	428b      	cmp	r3, r1
 8022926:	bf04      	itt	eq
 8022928:	6819      	ldreq	r1, [r3, #0]
 802292a:	685b      	ldreq	r3, [r3, #4]
 802292c:	6063      	str	r3, [r4, #4]
 802292e:	bf04      	itt	eq
 8022930:	1949      	addeq	r1, r1, r5
 8022932:	6021      	streq	r1, [r4, #0]
 8022934:	6054      	str	r4, [r2, #4]
 8022936:	e7c7      	b.n	80228c8 <_free_r+0x28>
 8022938:	b003      	add	sp, #12
 802293a:	bd30      	pop	{r4, r5, pc}
 802293c:	2000103c 	.word	0x2000103c

08022940 <_malloc_r>:
 8022940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022942:	1ccd      	adds	r5, r1, #3
 8022944:	f025 0503 	bic.w	r5, r5, #3
 8022948:	3508      	adds	r5, #8
 802294a:	2d0c      	cmp	r5, #12
 802294c:	bf38      	it	cc
 802294e:	250c      	movcc	r5, #12
 8022950:	2d00      	cmp	r5, #0
 8022952:	4606      	mov	r6, r0
 8022954:	db01      	blt.n	802295a <_malloc_r+0x1a>
 8022956:	42a9      	cmp	r1, r5
 8022958:	d903      	bls.n	8022962 <_malloc_r+0x22>
 802295a:	230c      	movs	r3, #12
 802295c:	6033      	str	r3, [r6, #0]
 802295e:	2000      	movs	r0, #0
 8022960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022962:	f001 fd91 	bl	8024488 <__malloc_lock>
 8022966:	4921      	ldr	r1, [pc, #132]	; (80229ec <_malloc_r+0xac>)
 8022968:	680a      	ldr	r2, [r1, #0]
 802296a:	4614      	mov	r4, r2
 802296c:	b99c      	cbnz	r4, 8022996 <_malloc_r+0x56>
 802296e:	4f20      	ldr	r7, [pc, #128]	; (80229f0 <_malloc_r+0xb0>)
 8022970:	683b      	ldr	r3, [r7, #0]
 8022972:	b923      	cbnz	r3, 802297e <_malloc_r+0x3e>
 8022974:	4621      	mov	r1, r4
 8022976:	4630      	mov	r0, r6
 8022978:	f000 f8da 	bl	8022b30 <_sbrk_r>
 802297c:	6038      	str	r0, [r7, #0]
 802297e:	4629      	mov	r1, r5
 8022980:	4630      	mov	r0, r6
 8022982:	f000 f8d5 	bl	8022b30 <_sbrk_r>
 8022986:	1c43      	adds	r3, r0, #1
 8022988:	d123      	bne.n	80229d2 <_malloc_r+0x92>
 802298a:	230c      	movs	r3, #12
 802298c:	6033      	str	r3, [r6, #0]
 802298e:	4630      	mov	r0, r6
 8022990:	f001 fd80 	bl	8024494 <__malloc_unlock>
 8022994:	e7e3      	b.n	802295e <_malloc_r+0x1e>
 8022996:	6823      	ldr	r3, [r4, #0]
 8022998:	1b5b      	subs	r3, r3, r5
 802299a:	d417      	bmi.n	80229cc <_malloc_r+0x8c>
 802299c:	2b0b      	cmp	r3, #11
 802299e:	d903      	bls.n	80229a8 <_malloc_r+0x68>
 80229a0:	6023      	str	r3, [r4, #0]
 80229a2:	441c      	add	r4, r3
 80229a4:	6025      	str	r5, [r4, #0]
 80229a6:	e004      	b.n	80229b2 <_malloc_r+0x72>
 80229a8:	6863      	ldr	r3, [r4, #4]
 80229aa:	42a2      	cmp	r2, r4
 80229ac:	bf0c      	ite	eq
 80229ae:	600b      	streq	r3, [r1, #0]
 80229b0:	6053      	strne	r3, [r2, #4]
 80229b2:	4630      	mov	r0, r6
 80229b4:	f001 fd6e 	bl	8024494 <__malloc_unlock>
 80229b8:	f104 000b 	add.w	r0, r4, #11
 80229bc:	1d23      	adds	r3, r4, #4
 80229be:	f020 0007 	bic.w	r0, r0, #7
 80229c2:	1ac2      	subs	r2, r0, r3
 80229c4:	d0cc      	beq.n	8022960 <_malloc_r+0x20>
 80229c6:	1a1b      	subs	r3, r3, r0
 80229c8:	50a3      	str	r3, [r4, r2]
 80229ca:	e7c9      	b.n	8022960 <_malloc_r+0x20>
 80229cc:	4622      	mov	r2, r4
 80229ce:	6864      	ldr	r4, [r4, #4]
 80229d0:	e7cc      	b.n	802296c <_malloc_r+0x2c>
 80229d2:	1cc4      	adds	r4, r0, #3
 80229d4:	f024 0403 	bic.w	r4, r4, #3
 80229d8:	42a0      	cmp	r0, r4
 80229da:	d0e3      	beq.n	80229a4 <_malloc_r+0x64>
 80229dc:	1a21      	subs	r1, r4, r0
 80229de:	4630      	mov	r0, r6
 80229e0:	f000 f8a6 	bl	8022b30 <_sbrk_r>
 80229e4:	3001      	adds	r0, #1
 80229e6:	d1dd      	bne.n	80229a4 <_malloc_r+0x64>
 80229e8:	e7cf      	b.n	802298a <_malloc_r+0x4a>
 80229ea:	bf00      	nop
 80229ec:	2000103c 	.word	0x2000103c
 80229f0:	20001040 	.word	0x20001040

080229f4 <_open_r>:
 80229f4:	b538      	push	{r3, r4, r5, lr}
 80229f6:	4d07      	ldr	r5, [pc, #28]	; (8022a14 <_open_r+0x20>)
 80229f8:	4604      	mov	r4, r0
 80229fa:	4608      	mov	r0, r1
 80229fc:	4611      	mov	r1, r2
 80229fe:	2200      	movs	r2, #0
 8022a00:	602a      	str	r2, [r5, #0]
 8022a02:	461a      	mov	r2, r3
 8022a04:	f7de fa6c 	bl	8000ee0 <_open>
 8022a08:	1c43      	adds	r3, r0, #1
 8022a0a:	d102      	bne.n	8022a12 <_open_r+0x1e>
 8022a0c:	682b      	ldr	r3, [r5, #0]
 8022a0e:	b103      	cbz	r3, 8022a12 <_open_r+0x1e>
 8022a10:	6023      	str	r3, [r4, #0]
 8022a12:	bd38      	pop	{r3, r4, r5, pc}
 8022a14:	2000110c 	.word	0x2000110c

08022a18 <putchar>:
 8022a18:	4b09      	ldr	r3, [pc, #36]	; (8022a40 <putchar+0x28>)
 8022a1a:	b513      	push	{r0, r1, r4, lr}
 8022a1c:	681c      	ldr	r4, [r3, #0]
 8022a1e:	4601      	mov	r1, r0
 8022a20:	b134      	cbz	r4, 8022a30 <putchar+0x18>
 8022a22:	69a3      	ldr	r3, [r4, #24]
 8022a24:	b923      	cbnz	r3, 8022a30 <putchar+0x18>
 8022a26:	9001      	str	r0, [sp, #4]
 8022a28:	4620      	mov	r0, r4
 8022a2a:	f7ff fae9 	bl	8022000 <__sinit>
 8022a2e:	9901      	ldr	r1, [sp, #4]
 8022a30:	68a2      	ldr	r2, [r4, #8]
 8022a32:	4620      	mov	r0, r4
 8022a34:	b002      	add	sp, #8
 8022a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022a3a:	f002 b9a1 	b.w	8024d80 <_putc_r>
 8022a3e:	bf00      	nop
 8022a40:	20000108 	.word	0x20000108

08022a44 <srand>:
 8022a44:	b538      	push	{r3, r4, r5, lr}
 8022a46:	4b10      	ldr	r3, [pc, #64]	; (8022a88 <srand+0x44>)
 8022a48:	681d      	ldr	r5, [r3, #0]
 8022a4a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8022a4c:	4604      	mov	r4, r0
 8022a4e:	b9b3      	cbnz	r3, 8022a7e <srand+0x3a>
 8022a50:	2018      	movs	r0, #24
 8022a52:	f7ff feef 	bl	8022834 <malloc>
 8022a56:	4602      	mov	r2, r0
 8022a58:	63a8      	str	r0, [r5, #56]	; 0x38
 8022a5a:	b920      	cbnz	r0, 8022a66 <srand+0x22>
 8022a5c:	4b0b      	ldr	r3, [pc, #44]	; (8022a8c <srand+0x48>)
 8022a5e:	480c      	ldr	r0, [pc, #48]	; (8022a90 <srand+0x4c>)
 8022a60:	2142      	movs	r1, #66	; 0x42
 8022a62:	f001 fb5b 	bl	802411c <__assert_func>
 8022a66:	490b      	ldr	r1, [pc, #44]	; (8022a94 <srand+0x50>)
 8022a68:	4b0b      	ldr	r3, [pc, #44]	; (8022a98 <srand+0x54>)
 8022a6a:	e9c0 1300 	strd	r1, r3, [r0]
 8022a6e:	4b0b      	ldr	r3, [pc, #44]	; (8022a9c <srand+0x58>)
 8022a70:	6083      	str	r3, [r0, #8]
 8022a72:	230b      	movs	r3, #11
 8022a74:	8183      	strh	r3, [r0, #12]
 8022a76:	2100      	movs	r1, #0
 8022a78:	2001      	movs	r0, #1
 8022a7a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8022a7e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8022a80:	2200      	movs	r2, #0
 8022a82:	611c      	str	r4, [r3, #16]
 8022a84:	615a      	str	r2, [r3, #20]
 8022a86:	bd38      	pop	{r3, r4, r5, pc}
 8022a88:	20000108 	.word	0x20000108
 8022a8c:	0802c454 	.word	0x0802c454
 8022a90:	0802c52c 	.word	0x0802c52c
 8022a94:	abcd330e 	.word	0xabcd330e
 8022a98:	e66d1234 	.word	0xe66d1234
 8022a9c:	0005deec 	.word	0x0005deec

08022aa0 <rand>:
 8022aa0:	4b17      	ldr	r3, [pc, #92]	; (8022b00 <rand+0x60>)
 8022aa2:	b510      	push	{r4, lr}
 8022aa4:	681c      	ldr	r4, [r3, #0]
 8022aa6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8022aa8:	b9b3      	cbnz	r3, 8022ad8 <rand+0x38>
 8022aaa:	2018      	movs	r0, #24
 8022aac:	f7ff fec2 	bl	8022834 <malloc>
 8022ab0:	63a0      	str	r0, [r4, #56]	; 0x38
 8022ab2:	b928      	cbnz	r0, 8022ac0 <rand+0x20>
 8022ab4:	4602      	mov	r2, r0
 8022ab6:	4b13      	ldr	r3, [pc, #76]	; (8022b04 <rand+0x64>)
 8022ab8:	4813      	ldr	r0, [pc, #76]	; (8022b08 <rand+0x68>)
 8022aba:	214e      	movs	r1, #78	; 0x4e
 8022abc:	f001 fb2e 	bl	802411c <__assert_func>
 8022ac0:	4a12      	ldr	r2, [pc, #72]	; (8022b0c <rand+0x6c>)
 8022ac2:	4b13      	ldr	r3, [pc, #76]	; (8022b10 <rand+0x70>)
 8022ac4:	e9c0 2300 	strd	r2, r3, [r0]
 8022ac8:	4b12      	ldr	r3, [pc, #72]	; (8022b14 <rand+0x74>)
 8022aca:	6083      	str	r3, [r0, #8]
 8022acc:	230b      	movs	r3, #11
 8022ace:	8183      	strh	r3, [r0, #12]
 8022ad0:	2201      	movs	r2, #1
 8022ad2:	2300      	movs	r3, #0
 8022ad4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8022ad8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8022ada:	480f      	ldr	r0, [pc, #60]	; (8022b18 <rand+0x78>)
 8022adc:	690a      	ldr	r2, [r1, #16]
 8022ade:	694b      	ldr	r3, [r1, #20]
 8022ae0:	4c0e      	ldr	r4, [pc, #56]	; (8022b1c <rand+0x7c>)
 8022ae2:	4350      	muls	r0, r2
 8022ae4:	fb04 0003 	mla	r0, r4, r3, r0
 8022ae8:	fba2 3404 	umull	r3, r4, r2, r4
 8022aec:	1c5a      	adds	r2, r3, #1
 8022aee:	4404      	add	r4, r0
 8022af0:	f144 0000 	adc.w	r0, r4, #0
 8022af4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8022af8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8022afc:	bd10      	pop	{r4, pc}
 8022afe:	bf00      	nop
 8022b00:	20000108 	.word	0x20000108
 8022b04:	0802c454 	.word	0x0802c454
 8022b08:	0802c52c 	.word	0x0802c52c
 8022b0c:	abcd330e 	.word	0xabcd330e
 8022b10:	e66d1234 	.word	0xe66d1234
 8022b14:	0005deec 	.word	0x0005deec
 8022b18:	5851f42d 	.word	0x5851f42d
 8022b1c:	4c957f2d 	.word	0x4c957f2d

08022b20 <realloc>:
 8022b20:	4b02      	ldr	r3, [pc, #8]	; (8022b2c <realloc+0xc>)
 8022b22:	460a      	mov	r2, r1
 8022b24:	4601      	mov	r1, r0
 8022b26:	6818      	ldr	r0, [r3, #0]
 8022b28:	f001 bcba 	b.w	80244a0 <_realloc_r>
 8022b2c:	20000108 	.word	0x20000108

08022b30 <_sbrk_r>:
 8022b30:	b538      	push	{r3, r4, r5, lr}
 8022b32:	4d06      	ldr	r5, [pc, #24]	; (8022b4c <_sbrk_r+0x1c>)
 8022b34:	2300      	movs	r3, #0
 8022b36:	4604      	mov	r4, r0
 8022b38:	4608      	mov	r0, r1
 8022b3a:	602b      	str	r3, [r5, #0]
 8022b3c:	f7de f9de 	bl	8000efc <_sbrk>
 8022b40:	1c43      	adds	r3, r0, #1
 8022b42:	d102      	bne.n	8022b4a <_sbrk_r+0x1a>
 8022b44:	682b      	ldr	r3, [r5, #0]
 8022b46:	b103      	cbz	r3, 8022b4a <_sbrk_r+0x1a>
 8022b48:	6023      	str	r3, [r4, #0]
 8022b4a:	bd38      	pop	{r3, r4, r5, pc}
 8022b4c:	2000110c 	.word	0x2000110c

08022b50 <_raise_r>:
 8022b50:	291f      	cmp	r1, #31
 8022b52:	b538      	push	{r3, r4, r5, lr}
 8022b54:	4604      	mov	r4, r0
 8022b56:	460d      	mov	r5, r1
 8022b58:	d904      	bls.n	8022b64 <_raise_r+0x14>
 8022b5a:	2316      	movs	r3, #22
 8022b5c:	6003      	str	r3, [r0, #0]
 8022b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8022b62:	bd38      	pop	{r3, r4, r5, pc}
 8022b64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8022b66:	b112      	cbz	r2, 8022b6e <_raise_r+0x1e>
 8022b68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022b6c:	b94b      	cbnz	r3, 8022b82 <_raise_r+0x32>
 8022b6e:	4620      	mov	r0, r4
 8022b70:	f000 f830 	bl	8022bd4 <_getpid_r>
 8022b74:	462a      	mov	r2, r5
 8022b76:	4601      	mov	r1, r0
 8022b78:	4620      	mov	r0, r4
 8022b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022b7e:	f000 b817 	b.w	8022bb0 <_kill_r>
 8022b82:	2b01      	cmp	r3, #1
 8022b84:	d00a      	beq.n	8022b9c <_raise_r+0x4c>
 8022b86:	1c59      	adds	r1, r3, #1
 8022b88:	d103      	bne.n	8022b92 <_raise_r+0x42>
 8022b8a:	2316      	movs	r3, #22
 8022b8c:	6003      	str	r3, [r0, #0]
 8022b8e:	2001      	movs	r0, #1
 8022b90:	e7e7      	b.n	8022b62 <_raise_r+0x12>
 8022b92:	2400      	movs	r4, #0
 8022b94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8022b98:	4628      	mov	r0, r5
 8022b9a:	4798      	blx	r3
 8022b9c:	2000      	movs	r0, #0
 8022b9e:	e7e0      	b.n	8022b62 <_raise_r+0x12>

08022ba0 <raise>:
 8022ba0:	4b02      	ldr	r3, [pc, #8]	; (8022bac <raise+0xc>)
 8022ba2:	4601      	mov	r1, r0
 8022ba4:	6818      	ldr	r0, [r3, #0]
 8022ba6:	f7ff bfd3 	b.w	8022b50 <_raise_r>
 8022baa:	bf00      	nop
 8022bac:	20000108 	.word	0x20000108

08022bb0 <_kill_r>:
 8022bb0:	b538      	push	{r3, r4, r5, lr}
 8022bb2:	4d07      	ldr	r5, [pc, #28]	; (8022bd0 <_kill_r+0x20>)
 8022bb4:	2300      	movs	r3, #0
 8022bb6:	4604      	mov	r4, r0
 8022bb8:	4608      	mov	r0, r1
 8022bba:	4611      	mov	r1, r2
 8022bbc:	602b      	str	r3, [r5, #0]
 8022bbe:	f7de f908 	bl	8000dd2 <_kill>
 8022bc2:	1c43      	adds	r3, r0, #1
 8022bc4:	d102      	bne.n	8022bcc <_kill_r+0x1c>
 8022bc6:	682b      	ldr	r3, [r5, #0]
 8022bc8:	b103      	cbz	r3, 8022bcc <_kill_r+0x1c>
 8022bca:	6023      	str	r3, [r4, #0]
 8022bcc:	bd38      	pop	{r3, r4, r5, pc}
 8022bce:	bf00      	nop
 8022bd0:	2000110c 	.word	0x2000110c

08022bd4 <_getpid_r>:
 8022bd4:	f7de b8f5 	b.w	8000dc2 <_getpid>

08022bd8 <siprintf>:
 8022bd8:	b40e      	push	{r1, r2, r3}
 8022bda:	b500      	push	{lr}
 8022bdc:	b09c      	sub	sp, #112	; 0x70
 8022bde:	ab1d      	add	r3, sp, #116	; 0x74
 8022be0:	9002      	str	r0, [sp, #8]
 8022be2:	9006      	str	r0, [sp, #24]
 8022be4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022be8:	4809      	ldr	r0, [pc, #36]	; (8022c10 <siprintf+0x38>)
 8022bea:	9107      	str	r1, [sp, #28]
 8022bec:	9104      	str	r1, [sp, #16]
 8022bee:	4909      	ldr	r1, [pc, #36]	; (8022c14 <siprintf+0x3c>)
 8022bf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8022bf4:	9105      	str	r1, [sp, #20]
 8022bf6:	6800      	ldr	r0, [r0, #0]
 8022bf8:	9301      	str	r3, [sp, #4]
 8022bfa:	a902      	add	r1, sp, #8
 8022bfc:	f001 fcd2 	bl	80245a4 <_svfiprintf_r>
 8022c00:	9b02      	ldr	r3, [sp, #8]
 8022c02:	2200      	movs	r2, #0
 8022c04:	701a      	strb	r2, [r3, #0]
 8022c06:	b01c      	add	sp, #112	; 0x70
 8022c08:	f85d eb04 	ldr.w	lr, [sp], #4
 8022c0c:	b003      	add	sp, #12
 8022c0e:	4770      	bx	lr
 8022c10:	20000108 	.word	0x20000108
 8022c14:	ffff0208 	.word	0xffff0208

08022c18 <__sread>:
 8022c18:	b510      	push	{r4, lr}
 8022c1a:	460c      	mov	r4, r1
 8022c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022c20:	f002 f8f6 	bl	8024e10 <_read_r>
 8022c24:	2800      	cmp	r0, #0
 8022c26:	bfab      	itete	ge
 8022c28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8022c2a:	89a3      	ldrhlt	r3, [r4, #12]
 8022c2c:	181b      	addge	r3, r3, r0
 8022c2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8022c32:	bfac      	ite	ge
 8022c34:	6563      	strge	r3, [r4, #84]	; 0x54
 8022c36:	81a3      	strhlt	r3, [r4, #12]
 8022c38:	bd10      	pop	{r4, pc}

08022c3a <__seofread>:
 8022c3a:	2000      	movs	r0, #0
 8022c3c:	4770      	bx	lr

08022c3e <__swrite>:
 8022c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022c42:	461f      	mov	r7, r3
 8022c44:	898b      	ldrh	r3, [r1, #12]
 8022c46:	05db      	lsls	r3, r3, #23
 8022c48:	4605      	mov	r5, r0
 8022c4a:	460c      	mov	r4, r1
 8022c4c:	4616      	mov	r6, r2
 8022c4e:	d505      	bpl.n	8022c5c <__swrite+0x1e>
 8022c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022c54:	2302      	movs	r3, #2
 8022c56:	2200      	movs	r2, #0
 8022c58:	f001 fbf2 	bl	8024440 <_lseek_r>
 8022c5c:	89a3      	ldrh	r3, [r4, #12]
 8022c5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022c62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8022c66:	81a3      	strh	r3, [r4, #12]
 8022c68:	4632      	mov	r2, r6
 8022c6a:	463b      	mov	r3, r7
 8022c6c:	4628      	mov	r0, r5
 8022c6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022c72:	f001 b96d 	b.w	8023f50 <_write_r>

08022c76 <__sseek>:
 8022c76:	b510      	push	{r4, lr}
 8022c78:	460c      	mov	r4, r1
 8022c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022c7e:	f001 fbdf 	bl	8024440 <_lseek_r>
 8022c82:	1c43      	adds	r3, r0, #1
 8022c84:	89a3      	ldrh	r3, [r4, #12]
 8022c86:	bf15      	itete	ne
 8022c88:	6560      	strne	r0, [r4, #84]	; 0x54
 8022c8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8022c8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8022c92:	81a3      	strheq	r3, [r4, #12]
 8022c94:	bf18      	it	ne
 8022c96:	81a3      	strhne	r3, [r4, #12]
 8022c98:	bd10      	pop	{r4, pc}

08022c9a <__sclose>:
 8022c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022c9e:	f001 ba5b 	b.w	8024158 <_close_r>

08022ca2 <strcpy>:
 8022ca2:	4603      	mov	r3, r0
 8022ca4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022ca8:	f803 2b01 	strb.w	r2, [r3], #1
 8022cac:	2a00      	cmp	r2, #0
 8022cae:	d1f9      	bne.n	8022ca4 <strcpy+0x2>
 8022cb0:	4770      	bx	lr
	...

08022cb4 <iso_year_adjust>:
 8022cb4:	6941      	ldr	r1, [r0, #20]
 8022cb6:	2900      	cmp	r1, #0
 8022cb8:	f240 736c 	movw	r3, #1900	; 0x76c
 8022cbc:	bfa8      	it	ge
 8022cbe:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8022cc2:	18ca      	adds	r2, r1, r3
 8022cc4:	078b      	lsls	r3, r1, #30
 8022cc6:	d105      	bne.n	8022cd4 <iso_year_adjust+0x20>
 8022cc8:	2164      	movs	r1, #100	; 0x64
 8022cca:	fb92 f3f1 	sdiv	r3, r2, r1
 8022cce:	fb01 2313 	mls	r3, r1, r3, r2
 8022cd2:	b9db      	cbnz	r3, 8022d0c <iso_year_adjust+0x58>
 8022cd4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8022cd8:	fb92 f3f1 	sdiv	r3, r2, r1
 8022cdc:	fb01 2313 	mls	r3, r1, r3, r2
 8022ce0:	fab3 f383 	clz	r3, r3
 8022ce4:	095b      	lsrs	r3, r3, #5
 8022ce6:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 8022cea:	0040      	lsls	r0, r0, #1
 8022cec:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8022cf0:	4418      	add	r0, r3
 8022cf2:	f241 63a2 	movw	r3, #5794	; 0x16a2
 8022cf6:	4298      	cmp	r0, r3
 8022cf8:	d03a      	beq.n	8022d70 <iso_year_adjust+0xbc>
 8022cfa:	dc21      	bgt.n	8022d40 <iso_year_adjust+0x8c>
 8022cfc:	2801      	cmp	r0, #1
 8022cfe:	dc1a      	bgt.n	8022d36 <iso_year_adjust+0x82>
 8022d00:	2800      	cmp	r0, #0
 8022d02:	bfb4      	ite	lt
 8022d04:	2000      	movlt	r0, #0
 8022d06:	f04f 30ff 	movge.w	r0, #4294967295
 8022d0a:	4770      	bx	lr
 8022d0c:	2301      	movs	r3, #1
 8022d0e:	e7ea      	b.n	8022ce6 <iso_year_adjust+0x32>
 8022d10:	2817      	cmp	r0, #23
 8022d12:	d813      	bhi.n	8022d3c <iso_year_adjust+0x88>
 8022d14:	e8df f000 	tbb	[pc, r0]
 8022d18:	0c0c0c0c 	.word	0x0c0c0c0c
 8022d1c:	0c0c1212 	.word	0x0c0c1212
 8022d20:	12121212 	.word	0x12121212
 8022d24:	12121212 	.word	0x12121212
 8022d28:	0c0c1212 	.word	0x0c0c1212
 8022d2c:	0c0c1212 	.word	0x0c0c1212
 8022d30:	f04f 30ff 	mov.w	r0, #4294967295
 8022d34:	4770      	bx	lr
 8022d36:	380a      	subs	r0, #10
 8022d38:	2817      	cmp	r0, #23
 8022d3a:	d9e9      	bls.n	8022d10 <iso_year_adjust+0x5c>
 8022d3c:	2000      	movs	r0, #0
 8022d3e:	4770      	bx	lr
 8022d40:	f241 63b4 	movw	r3, #5812	; 0x16b4
 8022d44:	4298      	cmp	r0, r3
 8022d46:	dc06      	bgt.n	8022d56 <iso_year_adjust+0xa2>
 8022d48:	f241 63b1 	movw	r3, #5809	; 0x16b1
 8022d4c:	4298      	cmp	r0, r3
 8022d4e:	bfd4      	ite	le
 8022d50:	2000      	movle	r0, #0
 8022d52:	2001      	movgt	r0, #1
 8022d54:	4770      	bx	lr
 8022d56:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 8022d5a:	3802      	subs	r0, #2
 8022d5c:	2815      	cmp	r0, #21
 8022d5e:	d8ed      	bhi.n	8022d3c <iso_year_adjust+0x88>
 8022d60:	2301      	movs	r3, #1
 8022d62:	4083      	lsls	r3, r0
 8022d64:	4803      	ldr	r0, [pc, #12]	; (8022d74 <iso_year_adjust+0xc0>)
 8022d66:	4018      	ands	r0, r3
 8022d68:	3800      	subs	r0, #0
 8022d6a:	bf18      	it	ne
 8022d6c:	2001      	movne	r0, #1
 8022d6e:	4770      	bx	lr
 8022d70:	2001      	movs	r0, #1
 8022d72:	4770      	bx	lr
 8022d74:	002a001f 	.word	0x002a001f

08022d78 <__strftime>:
 8022d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d7c:	b091      	sub	sp, #68	; 0x44
 8022d7e:	461d      	mov	r5, r3
 8022d80:	2300      	movs	r3, #0
 8022d82:	4681      	mov	r9, r0
 8022d84:	4688      	mov	r8, r1
 8022d86:	9304      	str	r3, [sp, #16]
 8022d88:	461c      	mov	r4, r3
 8022d8a:	7813      	ldrb	r3, [r2, #0]
 8022d8c:	2b00      	cmp	r3, #0
 8022d8e:	f000 84d1 	beq.w	8023734 <__strftime+0x9bc>
 8022d92:	2b25      	cmp	r3, #37	; 0x25
 8022d94:	d11b      	bne.n	8022dce <__strftime+0x56>
 8022d96:	7857      	ldrb	r7, [r2, #1]
 8022d98:	2f30      	cmp	r7, #48	; 0x30
 8022d9a:	d024      	beq.n	8022de6 <__strftime+0x6e>
 8022d9c:	2f2b      	cmp	r7, #43	; 0x2b
 8022d9e:	d022      	beq.n	8022de6 <__strftime+0x6e>
 8022da0:	f102 0b01 	add.w	fp, r2, #1
 8022da4:	2700      	movs	r7, #0
 8022da6:	f89b 3000 	ldrb.w	r3, [fp]
 8022daa:	3b31      	subs	r3, #49	; 0x31
 8022dac:	2b08      	cmp	r3, #8
 8022dae:	d81d      	bhi.n	8022dec <__strftime+0x74>
 8022db0:	4658      	mov	r0, fp
 8022db2:	220a      	movs	r2, #10
 8022db4:	a908      	add	r1, sp, #32
 8022db6:	f000 fdff 	bl	80239b8 <strtoul>
 8022dba:	f8dd b020 	ldr.w	fp, [sp, #32]
 8022dbe:	4606      	mov	r6, r0
 8022dc0:	f89b 3000 	ldrb.w	r3, [fp]
 8022dc4:	2b45      	cmp	r3, #69	; 0x45
 8022dc6:	d113      	bne.n	8022df0 <__strftime+0x78>
 8022dc8:	f10b 0b01 	add.w	fp, fp, #1
 8022dcc:	e012      	b.n	8022df4 <__strftime+0x7c>
 8022dce:	f108 31ff 	add.w	r1, r8, #4294967295
 8022dd2:	42a1      	cmp	r1, r4
 8022dd4:	d802      	bhi.n	8022ddc <__strftime+0x64>
 8022dd6:	2400      	movs	r4, #0
 8022dd8:	f000 bcb2 	b.w	8023740 <__strftime+0x9c8>
 8022ddc:	f809 3004 	strb.w	r3, [r9, r4]
 8022de0:	3201      	adds	r2, #1
 8022de2:	3401      	adds	r4, #1
 8022de4:	e7d1      	b.n	8022d8a <__strftime+0x12>
 8022de6:	f102 0b02 	add.w	fp, r2, #2
 8022dea:	e7dc      	b.n	8022da6 <__strftime+0x2e>
 8022dec:	2600      	movs	r6, #0
 8022dee:	e7e7      	b.n	8022dc0 <__strftime+0x48>
 8022df0:	2b4f      	cmp	r3, #79	; 0x4f
 8022df2:	d0e9      	beq.n	8022dc8 <__strftime+0x50>
 8022df4:	f89b 0000 	ldrb.w	r0, [fp]
 8022df8:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 8022dfc:	2b55      	cmp	r3, #85	; 0x55
 8022dfe:	d8ea      	bhi.n	8022dd6 <__strftime+0x5e>
 8022e00:	a201      	add	r2, pc, #4	; (adr r2, 8022e08 <__strftime+0x90>)
 8022e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022e06:	bf00      	nop
 8022e08:	08023727 	.word	0x08023727
 8022e0c:	08022dd7 	.word	0x08022dd7
 8022e10:	08022dd7 	.word	0x08022dd7
 8022e14:	08022dd7 	.word	0x08022dd7
 8022e18:	08022dd7 	.word	0x08022dd7
 8022e1c:	08022dd7 	.word	0x08022dd7
 8022e20:	08022dd7 	.word	0x08022dd7
 8022e24:	08022dd7 	.word	0x08022dd7
 8022e28:	08022dd7 	.word	0x08022dd7
 8022e2c:	08022dd7 	.word	0x08022dd7
 8022e30:	08022dd7 	.word	0x08022dd7
 8022e34:	08022dd7 	.word	0x08022dd7
 8022e38:	08022dd7 	.word	0x08022dd7
 8022e3c:	08022dd7 	.word	0x08022dd7
 8022e40:	08022dd7 	.word	0x08022dd7
 8022e44:	08022dd7 	.word	0x08022dd7
 8022e48:	08022dd7 	.word	0x08022dd7
 8022e4c:	08022dd7 	.word	0x08022dd7
 8022e50:	08022dd7 	.word	0x08022dd7
 8022e54:	08022dd7 	.word	0x08022dd7
 8022e58:	08022dd7 	.word	0x08022dd7
 8022e5c:	08022dd7 	.word	0x08022dd7
 8022e60:	08022dd7 	.word	0x08022dd7
 8022e64:	08022dd7 	.word	0x08022dd7
 8022e68:	08022dd7 	.word	0x08022dd7
 8022e6c:	08022dd7 	.word	0x08022dd7
 8022e70:	08022dd7 	.word	0x08022dd7
 8022e74:	08022dd7 	.word	0x08022dd7
 8022e78:	08022f9f 	.word	0x08022f9f
 8022e7c:	08022ff9 	.word	0x08022ff9
 8022e80:	0802306f 	.word	0x0802306f
 8022e84:	08023109 	.word	0x08023109
 8022e88:	08022dd7 	.word	0x08022dd7
 8022e8c:	08023155 	.word	0x08023155
 8022e90:	08023235 	.word	0x08023235
 8022e94:	08023337 	.word	0x08023337
 8022e98:	08023345 	.word	0x08023345
 8022e9c:	08022dd7 	.word	0x08022dd7
 8022ea0:	08022dd7 	.word	0x08022dd7
 8022ea4:	08022dd7 	.word	0x08022dd7
 8022ea8:	08023375 	.word	0x08023375
 8022eac:	08022dd7 	.word	0x08022dd7
 8022eb0:	08022dd7 	.word	0x08022dd7
 8022eb4:	0802338d 	.word	0x0802338d
 8022eb8:	08022dd7 	.word	0x08022dd7
 8022ebc:	080233db 	.word	0x080233db
 8022ec0:	080234f1 	.word	0x080234f1
 8022ec4:	08023503 	.word	0x08023503
 8022ec8:	0802355b 	.word	0x0802355b
 8022ecc:	0802356b 	.word	0x0802356b
 8022ed0:	080235e1 	.word	0x080235e1
 8022ed4:	08023067 	.word	0x08023067
 8022ed8:	08023615 	.word	0x08023615
 8022edc:	080236d3 	.word	0x080236d3
 8022ee0:	08022dd7 	.word	0x08022dd7
 8022ee4:	08022dd7 	.word	0x08022dd7
 8022ee8:	08022dd7 	.word	0x08022dd7
 8022eec:	08022dd7 	.word	0x08022dd7
 8022ef0:	08022dd7 	.word	0x08022dd7
 8022ef4:	08022dd7 	.word	0x08022dd7
 8022ef8:	08022f61 	.word	0x08022f61
 8022efc:	08022fcd 	.word	0x08022fcd
 8022f00:	08023027 	.word	0x08023027
 8022f04:	080230e1 	.word	0x080230e1
 8022f08:	080230e1 	.word	0x080230e1
 8022f0c:	08022dd7 	.word	0x08022dd7
 8022f10:	0802319d 	.word	0x0802319d
 8022f14:	08022fcd 	.word	0x08022fcd
 8022f18:	08022dd7 	.word	0x08022dd7
 8022f1c:	08023367 	.word	0x08023367
 8022f20:	08023337 	.word	0x08023337
 8022f24:	08023345 	.word	0x08023345
 8022f28:	0802336f 	.word	0x0802336f
 8022f2c:	08023379 	.word	0x08023379
 8022f30:	08022dd7 	.word	0x08022dd7
 8022f34:	0802338d 	.word	0x0802338d
 8022f38:	08022dd7 	.word	0x08022dd7
 8022f3c:	08023057 	.word	0x08023057
 8022f40:	080233f1 	.word	0x080233f1
 8022f44:	080234f5 	.word	0x080234f5
 8022f48:	0802353d 	.word	0x0802353d
 8022f4c:	08022dd7 	.word	0x08022dd7
 8022f50:	080235d1 	.word	0x080235d1
 8022f54:	0802305f 	.word	0x0802305f
 8022f58:	080235f9 	.word	0x080235f9
 8022f5c:	08023665 	.word	0x08023665
 8022f60:	69ab      	ldr	r3, [r5, #24]
 8022f62:	4aa7      	ldr	r2, [pc, #668]	; (8023200 <__strftime+0x488>)
 8022f64:	3318      	adds	r3, #24
 8022f66:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8022f6a:	4630      	mov	r0, r6
 8022f6c:	f7dd f966 	bl	800023c <strlen>
 8022f70:	3e01      	subs	r6, #1
 8022f72:	4420      	add	r0, r4
 8022f74:	f108 33ff 	add.w	r3, r8, #4294967295
 8022f78:	42a0      	cmp	r0, r4
 8022f7a:	d107      	bne.n	8022f8c <__strftime+0x214>
 8022f7c:	f89b 3000 	ldrb.w	r3, [fp]
 8022f80:	2b00      	cmp	r3, #0
 8022f82:	f000 83d7 	beq.w	8023734 <__strftime+0x9bc>
 8022f86:	f10b 0201 	add.w	r2, fp, #1
 8022f8a:	e6fe      	b.n	8022d8a <__strftime+0x12>
 8022f8c:	42a3      	cmp	r3, r4
 8022f8e:	f67f af22 	bls.w	8022dd6 <__strftime+0x5e>
 8022f92:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8022f96:	f809 2004 	strb.w	r2, [r9, r4]
 8022f9a:	3401      	adds	r4, #1
 8022f9c:	e7ec      	b.n	8022f78 <__strftime+0x200>
 8022f9e:	69aa      	ldr	r2, [r5, #24]
 8022fa0:	4b97      	ldr	r3, [pc, #604]	; (8023200 <__strftime+0x488>)
 8022fa2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8022fa6:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 8022fa8:	4630      	mov	r0, r6
 8022faa:	f7dd f947 	bl	800023c <strlen>
 8022fae:	3e01      	subs	r6, #1
 8022fb0:	4420      	add	r0, r4
 8022fb2:	f108 33ff 	add.w	r3, r8, #4294967295
 8022fb6:	42a0      	cmp	r0, r4
 8022fb8:	d0e0      	beq.n	8022f7c <__strftime+0x204>
 8022fba:	42a3      	cmp	r3, r4
 8022fbc:	f67f af0b 	bls.w	8022dd6 <__strftime+0x5e>
 8022fc0:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8022fc4:	f809 2004 	strb.w	r2, [r9, r4]
 8022fc8:	3401      	adds	r4, #1
 8022fca:	e7f4      	b.n	8022fb6 <__strftime+0x23e>
 8022fcc:	4b8c      	ldr	r3, [pc, #560]	; (8023200 <__strftime+0x488>)
 8022fce:	692a      	ldr	r2, [r5, #16]
 8022fd0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8022fd4:	4630      	mov	r0, r6
 8022fd6:	f7dd f931 	bl	800023c <strlen>
 8022fda:	3e01      	subs	r6, #1
 8022fdc:	4420      	add	r0, r4
 8022fde:	f108 33ff 	add.w	r3, r8, #4294967295
 8022fe2:	42a0      	cmp	r0, r4
 8022fe4:	d0ca      	beq.n	8022f7c <__strftime+0x204>
 8022fe6:	42a3      	cmp	r3, r4
 8022fe8:	f67f aef5 	bls.w	8022dd6 <__strftime+0x5e>
 8022fec:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8022ff0:	f809 2004 	strb.w	r2, [r9, r4]
 8022ff4:	3401      	adds	r4, #1
 8022ff6:	e7f4      	b.n	8022fe2 <__strftime+0x26a>
 8022ff8:	692b      	ldr	r3, [r5, #16]
 8022ffa:	4a81      	ldr	r2, [pc, #516]	; (8023200 <__strftime+0x488>)
 8022ffc:	330c      	adds	r3, #12
 8022ffe:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8023002:	4630      	mov	r0, r6
 8023004:	f7dd f91a 	bl	800023c <strlen>
 8023008:	3e01      	subs	r6, #1
 802300a:	4420      	add	r0, r4
 802300c:	f108 33ff 	add.w	r3, r8, #4294967295
 8023010:	42a0      	cmp	r0, r4
 8023012:	d0b3      	beq.n	8022f7c <__strftime+0x204>
 8023014:	42a3      	cmp	r3, r4
 8023016:	f67f aede 	bls.w	8022dd6 <__strftime+0x5e>
 802301a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 802301e:	f809 2004 	strb.w	r2, [r9, r4]
 8023022:	3401      	adds	r4, #1
 8023024:	e7f4      	b.n	8023010 <__strftime+0x298>
 8023026:	4b76      	ldr	r3, [pc, #472]	; (8023200 <__strftime+0x488>)
 8023028:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 802302c:	4630      	mov	r0, r6
 802302e:	f7dd f905 	bl	800023c <strlen>
 8023032:	7833      	ldrb	r3, [r6, #0]
 8023034:	2b00      	cmp	r3, #0
 8023036:	d0a1      	beq.n	8022f7c <__strftime+0x204>
 8023038:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802303a:	9300      	str	r3, [sp, #0]
 802303c:	4632      	mov	r2, r6
 802303e:	462b      	mov	r3, r5
 8023040:	eba8 0104 	sub.w	r1, r8, r4
 8023044:	eb09 0004 	add.w	r0, r9, r4
 8023048:	f7ff fe96 	bl	8022d78 <__strftime>
 802304c:	2800      	cmp	r0, #0
 802304e:	f77f aec2 	ble.w	8022dd6 <__strftime+0x5e>
 8023052:	4404      	add	r4, r0
 8023054:	e792      	b.n	8022f7c <__strftime+0x204>
 8023056:	4b6a      	ldr	r3, [pc, #424]	; (8023200 <__strftime+0x488>)
 8023058:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 802305c:	e7e6      	b.n	802302c <__strftime+0x2b4>
 802305e:	4b68      	ldr	r3, [pc, #416]	; (8023200 <__strftime+0x488>)
 8023060:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 8023064:	e7e2      	b.n	802302c <__strftime+0x2b4>
 8023066:	4b66      	ldr	r3, [pc, #408]	; (8023200 <__strftime+0x488>)
 8023068:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 802306c:	e7de      	b.n	802302c <__strftime+0x2b4>
 802306e:	4965      	ldr	r1, [pc, #404]	; (8023204 <__strftime+0x48c>)
 8023070:	f8d5 a014 	ldr.w	sl, [r5, #20]
 8023074:	458a      	cmp	sl, r1
 8023076:	bfac      	ite	ge
 8023078:	2100      	movge	r1, #0
 802307a:	2101      	movlt	r1, #1
 802307c:	f1ba 0f00 	cmp.w	sl, #0
 8023080:	db0e      	blt.n	80230a0 <__strftime+0x328>
 8023082:	2064      	movs	r0, #100	; 0x64
 8023084:	fb9a f0f0 	sdiv	r0, sl, r0
 8023088:	3013      	adds	r0, #19
 802308a:	b19f      	cbz	r7, 80230b4 <__strftime+0x33c>
 802308c:	2863      	cmp	r0, #99	; 0x63
 802308e:	dd25      	ble.n	80230dc <__strftime+0x364>
 8023090:	4a5d      	ldr	r2, [pc, #372]	; (8023208 <__strftime+0x490>)
 8023092:	4b5e      	ldr	r3, [pc, #376]	; (802320c <__strftime+0x494>)
 8023094:	2f2b      	cmp	r7, #43	; 0x2b
 8023096:	bf14      	ite	ne
 8023098:	4617      	movne	r7, r2
 802309a:	461f      	moveq	r7, r3
 802309c:	4a5c      	ldr	r2, [pc, #368]	; (8023210 <__strftime+0x498>)
 802309e:	e00b      	b.n	80230b8 <__strftime+0x340>
 80230a0:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 80230a4:	9105      	str	r1, [sp, #20]
 80230a6:	f001 f835 	bl	8024114 <abs>
 80230aa:	2364      	movs	r3, #100	; 0x64
 80230ac:	9905      	ldr	r1, [sp, #20]
 80230ae:	fb90 f0f3 	sdiv	r0, r0, r3
 80230b2:	e7ea      	b.n	802308a <__strftime+0x312>
 80230b4:	4f54      	ldr	r7, [pc, #336]	; (8023208 <__strftime+0x490>)
 80230b6:	4a57      	ldr	r2, [pc, #348]	; (8023214 <__strftime+0x49c>)
 80230b8:	4b57      	ldr	r3, [pc, #348]	; (8023218 <__strftime+0x4a0>)
 80230ba:	9001      	str	r0, [sp, #4]
 80230bc:	2e02      	cmp	r6, #2
 80230be:	bf2c      	ite	cs
 80230c0:	ebc1 0606 	rsbcs	r6, r1, r6
 80230c4:	f1c1 0602 	rsbcc	r6, r1, #2
 80230c8:	494e      	ldr	r1, [pc, #312]	; (8023204 <__strftime+0x48c>)
 80230ca:	9600      	str	r6, [sp, #0]
 80230cc:	458a      	cmp	sl, r1
 80230ce:	bfa8      	it	ge
 80230d0:	463b      	movge	r3, r7
 80230d2:	eba8 0104 	sub.w	r1, r8, r4
 80230d6:	eb09 0004 	add.w	r0, r9, r4
 80230da:	e02a      	b.n	8023132 <__strftime+0x3ba>
 80230dc:	4f4a      	ldr	r7, [pc, #296]	; (8023208 <__strftime+0x490>)
 80230de:	e7dd      	b.n	802309c <__strftime+0x324>
 80230e0:	494e      	ldr	r1, [pc, #312]	; (802321c <__strftime+0x4a4>)
 80230e2:	4a4f      	ldr	r2, [pc, #316]	; (8023220 <__strftime+0x4a8>)
 80230e4:	68eb      	ldr	r3, [r5, #12]
 80230e6:	2864      	cmp	r0, #100	; 0x64
 80230e8:	bf08      	it	eq
 80230ea:	460a      	moveq	r2, r1
 80230ec:	eba8 0104 	sub.w	r1, r8, r4
 80230f0:	eb09 0004 	add.w	r0, r9, r4
 80230f4:	f001 fe9e 	bl	8024e34 <sniprintf>
 80230f8:	2800      	cmp	r0, #0
 80230fa:	f6ff ae6c 	blt.w	8022dd6 <__strftime+0x5e>
 80230fe:	4404      	add	r4, r0
 8023100:	45a0      	cmp	r8, r4
 8023102:	f63f af3b 	bhi.w	8022f7c <__strftime+0x204>
 8023106:	e666      	b.n	8022dd6 <__strftime+0x5e>
 8023108:	6968      	ldr	r0, [r5, #20]
 802310a:	692b      	ldr	r3, [r5, #16]
 802310c:	68ef      	ldr	r7, [r5, #12]
 802310e:	2800      	cmp	r0, #0
 8023110:	eb09 0604 	add.w	r6, r9, r4
 8023114:	eba8 0104 	sub.w	r1, r8, r4
 8023118:	f103 0301 	add.w	r3, r3, #1
 802311c:	db0c      	blt.n	8023138 <__strftime+0x3c0>
 802311e:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8023122:	fb90 f2fc 	sdiv	r2, r0, ip
 8023126:	fb0c 0212 	mls	r2, ip, r2, r0
 802312a:	e9cd 7200 	strd	r7, r2, [sp]
 802312e:	4a3d      	ldr	r2, [pc, #244]	; (8023224 <__strftime+0x4ac>)
 8023130:	4630      	mov	r0, r6
 8023132:	f001 fe7f 	bl	8024e34 <sniprintf>
 8023136:	e7df      	b.n	80230f8 <__strftime+0x380>
 8023138:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802313c:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8023140:	f000 ffe8 	bl	8024114 <abs>
 8023144:	2264      	movs	r2, #100	; 0x64
 8023146:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 802314a:	fb90 fcf2 	sdiv	ip, r0, r2
 802314e:	fb0c 0212 	mls	r2, ip, r2, r0
 8023152:	e7ea      	b.n	802312a <__strftime+0x3b2>
 8023154:	2325      	movs	r3, #37	; 0x25
 8023156:	f88d 3020 	strb.w	r3, [sp, #32]
 802315a:	b187      	cbz	r7, 802317e <__strftime+0x406>
 802315c:	2e06      	cmp	r6, #6
 802315e:	bf38      	it	cc
 8023160:	2606      	movcc	r6, #6
 8023162:	1fb3      	subs	r3, r6, #6
 8023164:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 8023168:	d10c      	bne.n	8023184 <__strftime+0x40c>
 802316a:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 802316e:	492e      	ldr	r1, [pc, #184]	; (8023228 <__strftime+0x4b0>)
 8023170:	f7ff fd97 	bl	8022ca2 <strcpy>
 8023174:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8023176:	9300      	str	r3, [sp, #0]
 8023178:	aa08      	add	r2, sp, #32
 802317a:	462b      	mov	r3, r5
 802317c:	e760      	b.n	8023040 <__strftime+0x2c8>
 802317e:	272b      	movs	r7, #43	; 0x2b
 8023180:	260a      	movs	r6, #10
 8023182:	e7ee      	b.n	8023162 <__strftime+0x3ea>
 8023184:	4a29      	ldr	r2, [pc, #164]	; (802322c <__strftime+0x4b4>)
 8023186:	211e      	movs	r1, #30
 8023188:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 802318c:	f001 fe52 	bl	8024e34 <sniprintf>
 8023190:	2800      	cmp	r0, #0
 8023192:	ddea      	ble.n	802316a <__strftime+0x3f2>
 8023194:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8023198:	4418      	add	r0, r3
 802319a:	e7e8      	b.n	802316e <__strftime+0x3f6>
 802319c:	4628      	mov	r0, r5
 802319e:	f7ff fd89 	bl	8022cb4 <iso_year_adjust>
 80231a2:	4606      	mov	r6, r0
 80231a4:	6968      	ldr	r0, [r5, #20]
 80231a6:	2800      	cmp	r0, #0
 80231a8:	db11      	blt.n	80231ce <__strftime+0x456>
 80231aa:	2264      	movs	r2, #100	; 0x64
 80231ac:	fb90 f3f2 	sdiv	r3, r0, r2
 80231b0:	fb02 0313 	mls	r3, r2, r3, r0
 80231b4:	441e      	add	r6, r3
 80231b6:	2364      	movs	r3, #100	; 0x64
 80231b8:	fb96 f0f3 	sdiv	r0, r6, r3
 80231bc:	fb03 6610 	mls	r6, r3, r0, r6
 80231c0:	441e      	add	r6, r3
 80231c2:	fbb6 f2f3 	udiv	r2, r6, r3
 80231c6:	fb03 6312 	mls	r3, r3, r2, r6
 80231ca:	4a14      	ldr	r2, [pc, #80]	; (802321c <__strftime+0x4a4>)
 80231cc:	e78e      	b.n	80230ec <__strftime+0x374>
 80231ce:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80231d2:	f000 ff9f 	bl	8024114 <abs>
 80231d6:	2364      	movs	r3, #100	; 0x64
 80231d8:	2e00      	cmp	r6, #0
 80231da:	fb90 f2f3 	sdiv	r2, r0, r3
 80231de:	fb02 0313 	mls	r3, r2, r3, r0
 80231e2:	da05      	bge.n	80231f0 <__strftime+0x478>
 80231e4:	6969      	ldr	r1, [r5, #20]
 80231e6:	4a12      	ldr	r2, [pc, #72]	; (8023230 <__strftime+0x4b8>)
 80231e8:	4291      	cmp	r1, r2
 80231ea:	bfb8      	it	lt
 80231ec:	2601      	movlt	r6, #1
 80231ee:	e7e1      	b.n	80231b4 <__strftime+0x43c>
 80231f0:	d0e0      	beq.n	80231b4 <__strftime+0x43c>
 80231f2:	6969      	ldr	r1, [r5, #20]
 80231f4:	4a03      	ldr	r2, [pc, #12]	; (8023204 <__strftime+0x48c>)
 80231f6:	4291      	cmp	r1, r2
 80231f8:	bfb8      	it	lt
 80231fa:	f04f 36ff 	movlt.w	r6, #4294967295
 80231fe:	e7d9      	b.n	80231b4 <__strftime+0x43c>
 8023200:	0802c710 	.word	0x0802c710
 8023204:	fffff894 	.word	0xfffff894
 8023208:	0802c883 	.word	0x0802c883
 802320c:	0802c59a 	.word	0x0802c59a
 8023210:	0802c592 	.word	0x0802c592
 8023214:	0802c58b 	.word	0x0802c58b
 8023218:	0802c9c3 	.word	0x0802c9c3
 802321c:	0802c5aa 	.word	0x0802c5aa
 8023220:	0802c59c 	.word	0x0802c59c
 8023224:	0802c5a0 	.word	0x0802c5a0
 8023228:	0802c5b3 	.word	0x0802c5b3
 802322c:	0802c5af 	.word	0x0802c5af
 8023230:	fffff895 	.word	0xfffff895
 8023234:	4bb6      	ldr	r3, [pc, #728]	; (8023510 <__strftime+0x798>)
 8023236:	6969      	ldr	r1, [r5, #20]
 8023238:	4299      	cmp	r1, r3
 802323a:	bfac      	ite	ge
 802323c:	2300      	movge	r3, #0
 802323e:	2301      	movlt	r3, #1
 8023240:	4628      	mov	r0, r5
 8023242:	e9cd 3105 	strd	r3, r1, [sp, #20]
 8023246:	f7ff fd35 	bl	8022cb4 <iso_year_adjust>
 802324a:	9906      	ldr	r1, [sp, #24]
 802324c:	2900      	cmp	r1, #0
 802324e:	4682      	mov	sl, r0
 8023250:	db27      	blt.n	80232a2 <__strftime+0x52a>
 8023252:	2264      	movs	r2, #100	; 0x64
 8023254:	fb91 f2f2 	sdiv	r2, r1, r2
 8023258:	3213      	adds	r2, #19
 802325a:	6968      	ldr	r0, [r5, #20]
 802325c:	2800      	cmp	r0, #0
 802325e:	db2b      	blt.n	80232b8 <__strftime+0x540>
 8023260:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8023264:	fb90 fefc 	sdiv	lr, r0, ip
 8023268:	fb0c 001e 	mls	r0, ip, lr, r0
 802326c:	f1ba 0f00 	cmp.w	sl, #0
 8023270:	da31      	bge.n	80232d6 <__strftime+0x55e>
 8023272:	6969      	ldr	r1, [r5, #20]
 8023274:	4ba7      	ldr	r3, [pc, #668]	; (8023514 <__strftime+0x79c>)
 8023276:	4299      	cmp	r1, r3
 8023278:	db38      	blt.n	80232ec <__strftime+0x574>
 802327a:	eb0a 0300 	add.w	r3, sl, r0
 802327e:	1c59      	adds	r1, r3, #1
 8023280:	d139      	bne.n	80232f6 <__strftime+0x57e>
 8023282:	3a01      	subs	r2, #1
 8023284:	2363      	movs	r3, #99	; 0x63
 8023286:	2064      	movs	r0, #100	; 0x64
 8023288:	fb00 3202 	mla	r2, r0, r2, r3
 802328c:	9b05      	ldr	r3, [sp, #20]
 802328e:	2b00      	cmp	r3, #0
 8023290:	d036      	beq.n	8023300 <__strftime+0x588>
 8023292:	232d      	movs	r3, #45	; 0x2d
 8023294:	f88d 3020 	strb.w	r3, [sp, #32]
 8023298:	b106      	cbz	r6, 802329c <__strftime+0x524>
 802329a:	3e01      	subs	r6, #1
 802329c:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 80232a0:	e038      	b.n	8023314 <__strftime+0x59c>
 80232a2:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 80232a6:	9106      	str	r1, [sp, #24]
 80232a8:	f000 ff34 	bl	8024114 <abs>
 80232ac:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80232b0:	9906      	ldr	r1, [sp, #24]
 80232b2:	fb90 f2fc 	sdiv	r2, r0, ip
 80232b6:	e7d0      	b.n	802325a <__strftime+0x4e2>
 80232b8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80232bc:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80232c0:	f000 ff28 	bl	8024114 <abs>
 80232c4:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80232c8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80232cc:	fb90 fefc 	sdiv	lr, r0, ip
 80232d0:	fb0e 001c 	mls	r0, lr, ip, r0
 80232d4:	e7ca      	b.n	802326c <__strftime+0x4f4>
 80232d6:	d0d0      	beq.n	802327a <__strftime+0x502>
 80232d8:	4b8d      	ldr	r3, [pc, #564]	; (8023510 <__strftime+0x798>)
 80232da:	4299      	cmp	r1, r3
 80232dc:	bfb4      	ite	lt
 80232de:	2301      	movlt	r3, #1
 80232e0:	2300      	movge	r3, #0
 80232e2:	9305      	str	r3, [sp, #20]
 80232e4:	bfb8      	it	lt
 80232e6:	f04f 3aff 	movlt.w	sl, #4294967295
 80232ea:	e7c6      	b.n	802327a <__strftime+0x502>
 80232ec:	f04f 0a01 	mov.w	sl, #1
 80232f0:	f8cd a014 	str.w	sl, [sp, #20]
 80232f4:	e7c1      	b.n	802327a <__strftime+0x502>
 80232f6:	2b64      	cmp	r3, #100	; 0x64
 80232f8:	bf04      	itt	eq
 80232fa:	3201      	addeq	r2, #1
 80232fc:	2300      	moveq	r3, #0
 80232fe:	e7c2      	b.n	8023286 <__strftime+0x50e>
 8023300:	2f2b      	cmp	r7, #43	; 0x2b
 8023302:	d106      	bne.n	8023312 <__strftime+0x59a>
 8023304:	f242 730f 	movw	r3, #9999	; 0x270f
 8023308:	429a      	cmp	r2, r3
 802330a:	d902      	bls.n	8023312 <__strftime+0x59a>
 802330c:	f88d 7020 	strb.w	r7, [sp, #32]
 8023310:	e7c2      	b.n	8023298 <__strftime+0x520>
 8023312:	ab08      	add	r3, sp, #32
 8023314:	2125      	movs	r1, #37	; 0x25
 8023316:	7019      	strb	r1, [r3, #0]
 8023318:	b94f      	cbnz	r7, 802332e <__strftime+0x5b6>
 802331a:	1c58      	adds	r0, r3, #1
 802331c:	497e      	ldr	r1, [pc, #504]	; (8023518 <__strftime+0x7a0>)
 802331e:	9205      	str	r2, [sp, #20]
 8023320:	f7ff fcbf 	bl	8022ca2 <strcpy>
 8023324:	9a05      	ldr	r2, [sp, #20]
 8023326:	9200      	str	r2, [sp, #0]
 8023328:	4633      	mov	r3, r6
 802332a:	aa08      	add	r2, sp, #32
 802332c:	e059      	b.n	80233e2 <__strftime+0x66a>
 802332e:	2130      	movs	r1, #48	; 0x30
 8023330:	1c98      	adds	r0, r3, #2
 8023332:	7059      	strb	r1, [r3, #1]
 8023334:	e7f2      	b.n	802331c <__strftime+0x5a4>
 8023336:	4979      	ldr	r1, [pc, #484]	; (802351c <__strftime+0x7a4>)
 8023338:	4a79      	ldr	r2, [pc, #484]	; (8023520 <__strftime+0x7a8>)
 802333a:	68ab      	ldr	r3, [r5, #8]
 802333c:	286b      	cmp	r0, #107	; 0x6b
 802333e:	bf08      	it	eq
 8023340:	460a      	moveq	r2, r1
 8023342:	e6d3      	b.n	80230ec <__strftime+0x374>
 8023344:	68ab      	ldr	r3, [r5, #8]
 8023346:	b163      	cbz	r3, 8023362 <__strftime+0x5ea>
 8023348:	2b0c      	cmp	r3, #12
 802334a:	d004      	beq.n	8023356 <__strftime+0x5de>
 802334c:	210c      	movs	r1, #12
 802334e:	fb93 f2f1 	sdiv	r2, r3, r1
 8023352:	fb01 3312 	mls	r3, r1, r2, r3
 8023356:	4972      	ldr	r1, [pc, #456]	; (8023520 <__strftime+0x7a8>)
 8023358:	4a70      	ldr	r2, [pc, #448]	; (802351c <__strftime+0x7a4>)
 802335a:	2849      	cmp	r0, #73	; 0x49
 802335c:	bf08      	it	eq
 802335e:	460a      	moveq	r2, r1
 8023360:	e6c4      	b.n	80230ec <__strftime+0x374>
 8023362:	230c      	movs	r3, #12
 8023364:	e7f7      	b.n	8023356 <__strftime+0x5de>
 8023366:	69eb      	ldr	r3, [r5, #28]
 8023368:	4a6e      	ldr	r2, [pc, #440]	; (8023524 <__strftime+0x7ac>)
 802336a:	3301      	adds	r3, #1
 802336c:	e6be      	b.n	80230ec <__strftime+0x374>
 802336e:	692b      	ldr	r3, [r5, #16]
 8023370:	3301      	adds	r3, #1
 8023372:	e72a      	b.n	80231ca <__strftime+0x452>
 8023374:	686b      	ldr	r3, [r5, #4]
 8023376:	e728      	b.n	80231ca <__strftime+0x452>
 8023378:	f108 33ff 	add.w	r3, r8, #4294967295
 802337c:	42a3      	cmp	r3, r4
 802337e:	f67f ad2a 	bls.w	8022dd6 <__strftime+0x5e>
 8023382:	230a      	movs	r3, #10
 8023384:	f809 3004 	strb.w	r3, [r9, r4]
 8023388:	3401      	adds	r4, #1
 802338a:	e5f7      	b.n	8022f7c <__strftime+0x204>
 802338c:	68ab      	ldr	r3, [r5, #8]
 802338e:	2b0b      	cmp	r3, #11
 8023390:	bfcc      	ite	gt
 8023392:	22a4      	movgt	r2, #164	; 0xa4
 8023394:	22a0      	movle	r2, #160	; 0xa0
 8023396:	4b64      	ldr	r3, [pc, #400]	; (8023528 <__strftime+0x7b0>)
 8023398:	4413      	add	r3, r2
 802339a:	685e      	ldr	r6, [r3, #4]
 802339c:	4630      	mov	r0, r6
 802339e:	f7dc ff4d 	bl	800023c <strlen>
 80233a2:	1e72      	subs	r2, r6, #1
 80233a4:	4420      	add	r0, r4
 80233a6:	f108 36ff 	add.w	r6, r8, #4294967295
 80233aa:	42a0      	cmp	r0, r4
 80233ac:	f43f ade6 	beq.w	8022f7c <__strftime+0x204>
 80233b0:	42a6      	cmp	r6, r4
 80233b2:	f67f ad10 	bls.w	8022dd6 <__strftime+0x5e>
 80233b6:	f89b 1000 	ldrb.w	r1, [fp]
 80233ba:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80233be:	2950      	cmp	r1, #80	; 0x50
 80233c0:	d107      	bne.n	80233d2 <__strftime+0x65a>
 80233c2:	495a      	ldr	r1, [pc, #360]	; (802352c <__strftime+0x7b4>)
 80233c4:	5cc9      	ldrb	r1, [r1, r3]
 80233c6:	f001 0103 	and.w	r1, r1, #3
 80233ca:	2901      	cmp	r1, #1
 80233cc:	bf08      	it	eq
 80233ce:	3320      	addeq	r3, #32
 80233d0:	b2db      	uxtb	r3, r3
 80233d2:	f809 3004 	strb.w	r3, [r9, r4]
 80233d6:	3401      	adds	r4, #1
 80233d8:	e7e7      	b.n	80233aa <__strftime+0x632>
 80233da:	686b      	ldr	r3, [r5, #4]
 80233dc:	9300      	str	r3, [sp, #0]
 80233de:	4a54      	ldr	r2, [pc, #336]	; (8023530 <__strftime+0x7b8>)
 80233e0:	68ab      	ldr	r3, [r5, #8]
 80233e2:	eba8 0104 	sub.w	r1, r8, r4
 80233e6:	eb09 0004 	add.w	r0, r9, r4
 80233ea:	f001 fd23 	bl	8024e34 <sniprintf>
 80233ee:	e683      	b.n	80230f8 <__strftime+0x380>
 80233f0:	6a2b      	ldr	r3, [r5, #32]
 80233f2:	2b00      	cmp	r3, #0
 80233f4:	db79      	blt.n	80234ea <__strftime+0x772>
 80233f6:	f000 fb91 	bl	8023b1c <__tz_lock>
 80233fa:	9b04      	ldr	r3, [sp, #16]
 80233fc:	b90b      	cbnz	r3, 8023402 <__strftime+0x68a>
 80233fe:	f000 fb99 	bl	8023b34 <_tzset_unlocked>
 8023402:	f000 ff55 	bl	80242b0 <__gettzinfo>
 8023406:	6a2b      	ldr	r3, [r5, #32]
 8023408:	2b00      	cmp	r3, #0
 802340a:	bfcc      	ite	gt
 802340c:	2350      	movgt	r3, #80	; 0x50
 802340e:	2328      	movle	r3, #40	; 0x28
 8023410:	58c3      	ldr	r3, [r0, r3]
 8023412:	f1c3 0a00 	rsb	sl, r3, #0
 8023416:	f000 fb87 	bl	8023b28 <__tz_unlock>
 802341a:	2301      	movs	r3, #1
 802341c:	9304      	str	r3, [sp, #16]
 802341e:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8023422:	4662      	mov	r2, ip
 8023424:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 8023428:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802342c:	9602      	str	r6, [sp, #8]
 802342e:	f143 36ff 	adc.w	r6, r3, #4294967295
 8023432:	9603      	str	r6, [sp, #12]
 8023434:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8023438:	2e00      	cmp	r6, #0
 802343a:	f177 0600 	sbcs.w	r6, r7, #0
 802343e:	eba8 0104 	sub.w	r1, r8, r4
 8023442:	eb09 0004 	add.w	r0, r9, r4
 8023446:	da05      	bge.n	8023454 <__strftime+0x6dc>
 8023448:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 802344c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8023450:	9602      	str	r6, [sp, #8]
 8023452:	9303      	str	r3, [sp, #12]
 8023454:	9b02      	ldr	r3, [sp, #8]
 8023456:	089e      	lsrs	r6, r3, #2
 8023458:	9b03      	ldr	r3, [sp, #12]
 802345a:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 802345e:	f10c 32ff 	add.w	r2, ip, #4294967295
 8023462:	109f      	asrs	r7, r3, #2
 8023464:	2364      	movs	r3, #100	; 0x64
 8023466:	fb92 f3f3 	sdiv	r3, r2, r3
 802346a:	1af6      	subs	r6, r6, r3
 802346c:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 8023470:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 8023474:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8023478:	fb92 f3f3 	sdiv	r3, r2, r3
 802347c:	18f6      	adds	r6, r6, r3
 802347e:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8023482:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 8023486:	f240 136d 	movw	r3, #365	; 0x16d
 802348a:	fb03 fc0c 	mul.w	ip, r3, ip
 802348e:	69eb      	ldr	r3, [r5, #28]
 8023490:	eb16 060c 	adds.w	r6, r6, ip
 8023494:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 8023498:	18f6      	adds	r6, r6, r3
 802349a:	f04f 0c18 	mov.w	ip, #24
 802349e:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 80234a2:	fba6 230c 	umull	r2, r3, r6, ip
 80234a6:	68ae      	ldr	r6, [r5, #8]
 80234a8:	fb0c 3307 	mla	r3, ip, r7, r3
 80234ac:	1992      	adds	r2, r2, r6
 80234ae:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 80234b2:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 80234b6:	fba2 670c 	umull	r6, r7, r2, ip
 80234ba:	fb0c 7703 	mla	r7, ip, r3, r7
 80234be:	686b      	ldr	r3, [r5, #4]
 80234c0:	18f6      	adds	r6, r6, r3
 80234c2:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 80234c6:	fba6 230c 	umull	r2, r3, r6, ip
 80234ca:	682e      	ldr	r6, [r5, #0]
 80234cc:	fb0c 3307 	mla	r3, ip, r7, r3
 80234d0:	1992      	adds	r2, r2, r6
 80234d2:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 80234d6:	ebb2 020a 	subs.w	r2, r2, sl
 80234da:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 80234de:	e9cd 2300 	strd	r2, r3, [sp]
 80234e2:	4a14      	ldr	r2, [pc, #80]	; (8023534 <__strftime+0x7bc>)
 80234e4:	f001 fca6 	bl	8024e34 <sniprintf>
 80234e8:	e606      	b.n	80230f8 <__strftime+0x380>
 80234ea:	f04f 0a00 	mov.w	sl, #0
 80234ee:	e796      	b.n	802341e <__strftime+0x6a6>
 80234f0:	682b      	ldr	r3, [r5, #0]
 80234f2:	e66a      	b.n	80231ca <__strftime+0x452>
 80234f4:	f108 33ff 	add.w	r3, r8, #4294967295
 80234f8:	42a3      	cmp	r3, r4
 80234fa:	f67f ac6c 	bls.w	8022dd6 <__strftime+0x5e>
 80234fe:	2309      	movs	r3, #9
 8023500:	e740      	b.n	8023384 <__strftime+0x60c>
 8023502:	682b      	ldr	r3, [r5, #0]
 8023504:	9301      	str	r3, [sp, #4]
 8023506:	686b      	ldr	r3, [r5, #4]
 8023508:	9300      	str	r3, [sp, #0]
 802350a:	4a0b      	ldr	r2, [pc, #44]	; (8023538 <__strftime+0x7c0>)
 802350c:	68ab      	ldr	r3, [r5, #8]
 802350e:	e5e0      	b.n	80230d2 <__strftime+0x35a>
 8023510:	fffff894 	.word	0xfffff894
 8023514:	fffff895 	.word	0xfffff895
 8023518:	0802c5bb 	.word	0x0802c5bb
 802351c:	0802c59c 	.word	0x0802c59c
 8023520:	0802c5aa 	.word	0x0802c5aa
 8023524:	0802c5bf 	.word	0x0802c5bf
 8023528:	0802c710 	.word	0x0802c710
 802352c:	0802c885 	.word	0x0802c885
 8023530:	0802c5ce 	.word	0x0802c5ce
 8023534:	0802c5c4 	.word	0x0802c5c4
 8023538:	0802c5c9 	.word	0x0802c5c9
 802353c:	f108 33ff 	add.w	r3, r8, #4294967295
 8023540:	42a3      	cmp	r3, r4
 8023542:	f67f ac48 	bls.w	8022dd6 <__strftime+0x5e>
 8023546:	69ab      	ldr	r3, [r5, #24]
 8023548:	eb09 0204 	add.w	r2, r9, r4
 802354c:	3401      	adds	r4, #1
 802354e:	b913      	cbnz	r3, 8023556 <__strftime+0x7de>
 8023550:	2337      	movs	r3, #55	; 0x37
 8023552:	7013      	strb	r3, [r2, #0]
 8023554:	e512      	b.n	8022f7c <__strftime+0x204>
 8023556:	3330      	adds	r3, #48	; 0x30
 8023558:	e7fb      	b.n	8023552 <__strftime+0x7da>
 802355a:	69eb      	ldr	r3, [r5, #28]
 802355c:	69aa      	ldr	r2, [r5, #24]
 802355e:	3307      	adds	r3, #7
 8023560:	1a9b      	subs	r3, r3, r2
 8023562:	2207      	movs	r2, #7
 8023564:	fb93 f3f2 	sdiv	r3, r3, r2
 8023568:	e62f      	b.n	80231ca <__strftime+0x452>
 802356a:	4628      	mov	r0, r5
 802356c:	f7ff fba2 	bl	8022cb4 <iso_year_adjust>
 8023570:	69aa      	ldr	r2, [r5, #24]
 8023572:	b132      	cbz	r2, 8023582 <__strftime+0x80a>
 8023574:	3a01      	subs	r2, #1
 8023576:	2800      	cmp	r0, #0
 8023578:	dc28      	bgt.n	80235cc <__strftime+0x854>
 802357a:	69eb      	ldr	r3, [r5, #28]
 802357c:	d103      	bne.n	8023586 <__strftime+0x80e>
 802357e:	330a      	adds	r3, #10
 8023580:	e7ee      	b.n	8023560 <__strftime+0x7e8>
 8023582:	2206      	movs	r2, #6
 8023584:	e7f7      	b.n	8023576 <__strftime+0x7fe>
 8023586:	6968      	ldr	r0, [r5, #20]
 8023588:	2800      	cmp	r0, #0
 802358a:	eba2 0303 	sub.w	r3, r2, r3
 802358e:	f240 726b 	movw	r2, #1899	; 0x76b
 8023592:	bfa8      	it	ge
 8023594:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 8023598:	4410      	add	r0, r2
 802359a:	0782      	lsls	r2, r0, #30
 802359c:	d105      	bne.n	80235aa <__strftime+0x832>
 802359e:	2264      	movs	r2, #100	; 0x64
 80235a0:	fb90 f1f2 	sdiv	r1, r0, r2
 80235a4:	fb02 0111 	mls	r1, r2, r1, r0
 80235a8:	b971      	cbnz	r1, 80235c8 <__strftime+0x850>
 80235aa:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80235ae:	fb90 f2f1 	sdiv	r2, r0, r1
 80235b2:	fb01 0212 	mls	r2, r1, r2, r0
 80235b6:	fab2 f282 	clz	r2, r2
 80235ba:	0952      	lsrs	r2, r2, #5
 80235bc:	1a9a      	subs	r2, r3, r2
 80235be:	2a05      	cmp	r2, #5
 80235c0:	bfb4      	ite	lt
 80235c2:	2335      	movlt	r3, #53	; 0x35
 80235c4:	2334      	movge	r3, #52	; 0x34
 80235c6:	e600      	b.n	80231ca <__strftime+0x452>
 80235c8:	2201      	movs	r2, #1
 80235ca:	e7f7      	b.n	80235bc <__strftime+0x844>
 80235cc:	2301      	movs	r3, #1
 80235ce:	e5fc      	b.n	80231ca <__strftime+0x452>
 80235d0:	f108 33ff 	add.w	r3, r8, #4294967295
 80235d4:	42a3      	cmp	r3, r4
 80235d6:	f67f abfe 	bls.w	8022dd6 <__strftime+0x5e>
 80235da:	69ab      	ldr	r3, [r5, #24]
 80235dc:	3330      	adds	r3, #48	; 0x30
 80235de:	e6d1      	b.n	8023384 <__strftime+0x60c>
 80235e0:	69ab      	ldr	r3, [r5, #24]
 80235e2:	b13b      	cbz	r3, 80235f4 <__strftime+0x87c>
 80235e4:	3b01      	subs	r3, #1
 80235e6:	69ea      	ldr	r2, [r5, #28]
 80235e8:	3207      	adds	r2, #7
 80235ea:	1ad2      	subs	r2, r2, r3
 80235ec:	2307      	movs	r3, #7
 80235ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80235f2:	e5ea      	b.n	80231ca <__strftime+0x452>
 80235f4:	2306      	movs	r3, #6
 80235f6:	e7f6      	b.n	80235e6 <__strftime+0x86e>
 80235f8:	6968      	ldr	r0, [r5, #20]
 80235fa:	2800      	cmp	r0, #0
 80235fc:	db05      	blt.n	802360a <__strftime+0x892>
 80235fe:	2264      	movs	r2, #100	; 0x64
 8023600:	fb90 f3f2 	sdiv	r3, r0, r2
 8023604:	fb03 0312 	mls	r3, r3, r2, r0
 8023608:	e5df      	b.n	80231ca <__strftime+0x452>
 802360a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802360e:	f000 fd81 	bl	8024114 <abs>
 8023612:	e7f4      	b.n	80235fe <__strftime+0x886>
 8023614:	696b      	ldr	r3, [r5, #20]
 8023616:	4a4c      	ldr	r2, [pc, #304]	; (8023748 <__strftime+0x9d0>)
 8023618:	4293      	cmp	r3, r2
 802361a:	da09      	bge.n	8023630 <__strftime+0x8b8>
 802361c:	212d      	movs	r1, #45	; 0x2d
 802361e:	f88d 1020 	strb.w	r1, [sp, #32]
 8023622:	eba2 0a03 	sub.w	sl, r2, r3
 8023626:	b106      	cbz	r6, 802362a <__strftime+0x8b2>
 8023628:	3e01      	subs	r6, #1
 802362a:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 802362e:	e00b      	b.n	8023648 <__strftime+0x8d0>
 8023630:	2f2b      	cmp	r7, #43	; 0x2b
 8023632:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 8023636:	d106      	bne.n	8023646 <__strftime+0x8ce>
 8023638:	f242 730f 	movw	r3, #9999	; 0x270f
 802363c:	459a      	cmp	sl, r3
 802363e:	d902      	bls.n	8023646 <__strftime+0x8ce>
 8023640:	f88d 7020 	strb.w	r7, [sp, #32]
 8023644:	e7ef      	b.n	8023626 <__strftime+0x8ae>
 8023646:	ab08      	add	r3, sp, #32
 8023648:	2225      	movs	r2, #37	; 0x25
 802364a:	701a      	strb	r2, [r3, #0]
 802364c:	b937      	cbnz	r7, 802365c <__strftime+0x8e4>
 802364e:	1c58      	adds	r0, r3, #1
 8023650:	493e      	ldr	r1, [pc, #248]	; (802374c <__strftime+0x9d4>)
 8023652:	f7ff fb26 	bl	8022ca2 <strcpy>
 8023656:	f8cd a000 	str.w	sl, [sp]
 802365a:	e665      	b.n	8023328 <__strftime+0x5b0>
 802365c:	2230      	movs	r2, #48	; 0x30
 802365e:	1c98      	adds	r0, r3, #2
 8023660:	705a      	strb	r2, [r3, #1]
 8023662:	e7f5      	b.n	8023650 <__strftime+0x8d8>
 8023664:	6a2b      	ldr	r3, [r5, #32]
 8023666:	2b00      	cmp	r3, #0
 8023668:	f6ff ac88 	blt.w	8022f7c <__strftime+0x204>
 802366c:	f000 fa56 	bl	8023b1c <__tz_lock>
 8023670:	9b04      	ldr	r3, [sp, #16]
 8023672:	b90b      	cbnz	r3, 8023678 <__strftime+0x900>
 8023674:	f000 fa5e 	bl	8023b34 <_tzset_unlocked>
 8023678:	f000 fe1a 	bl	80242b0 <__gettzinfo>
 802367c:	6a2b      	ldr	r3, [r5, #32]
 802367e:	2b00      	cmp	r3, #0
 8023680:	bfcc      	ite	gt
 8023682:	2350      	movgt	r3, #80	; 0x50
 8023684:	2328      	movle	r3, #40	; 0x28
 8023686:	eb09 0704 	add.w	r7, r9, r4
 802368a:	58c6      	ldr	r6, [r0, r3]
 802368c:	f000 fa4c 	bl	8023b28 <__tz_unlock>
 8023690:	4276      	negs	r6, r6
 8023692:	233c      	movs	r3, #60	; 0x3c
 8023694:	fb96 f0f3 	sdiv	r0, r6, r3
 8023698:	f000 fece 	bl	8024438 <labs>
 802369c:	233c      	movs	r3, #60	; 0x3c
 802369e:	eba8 0a04 	sub.w	sl, r8, r4
 80236a2:	fb90 f2f3 	sdiv	r2, r0, r3
 80236a6:	fb02 0013 	mls	r0, r2, r3, r0
 80236aa:	9000      	str	r0, [sp, #0]
 80236ac:	4a28      	ldr	r2, [pc, #160]	; (8023750 <__strftime+0x9d8>)
 80236ae:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80236b2:	4651      	mov	r1, sl
 80236b4:	4638      	mov	r0, r7
 80236b6:	fb96 f3f3 	sdiv	r3, r6, r3
 80236ba:	f001 fbbb 	bl	8024e34 <sniprintf>
 80236be:	2800      	cmp	r0, #0
 80236c0:	f6ff ab89 	blt.w	8022dd6 <__strftime+0x5e>
 80236c4:	4404      	add	r4, r0
 80236c6:	45a0      	cmp	r8, r4
 80236c8:	f67f ab85 	bls.w	8022dd6 <__strftime+0x5e>
 80236cc:	2301      	movs	r3, #1
 80236ce:	9304      	str	r3, [sp, #16]
 80236d0:	e454      	b.n	8022f7c <__strftime+0x204>
 80236d2:	6a2b      	ldr	r3, [r5, #32]
 80236d4:	2b00      	cmp	r3, #0
 80236d6:	f6ff ac51 	blt.w	8022f7c <__strftime+0x204>
 80236da:	f000 fa1f 	bl	8023b1c <__tz_lock>
 80236de:	9b04      	ldr	r3, [sp, #16]
 80236e0:	b90b      	cbnz	r3, 80236e6 <__strftime+0x96e>
 80236e2:	f000 fa27 	bl	8023b34 <_tzset_unlocked>
 80236e6:	6a2b      	ldr	r3, [r5, #32]
 80236e8:	4a1a      	ldr	r2, [pc, #104]	; (8023754 <__strftime+0x9dc>)
 80236ea:	2b00      	cmp	r3, #0
 80236ec:	bfd4      	ite	le
 80236ee:	2300      	movle	r3, #0
 80236f0:	2301      	movgt	r3, #1
 80236f2:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80236f6:	4630      	mov	r0, r6
 80236f8:	f7dc fda0 	bl	800023c <strlen>
 80236fc:	3e01      	subs	r6, #1
 80236fe:	4420      	add	r0, r4
 8023700:	f108 33ff 	add.w	r3, r8, #4294967295
 8023704:	42a0      	cmp	r0, r4
 8023706:	d102      	bne.n	802370e <__strftime+0x996>
 8023708:	f000 fa0e 	bl	8023b28 <__tz_unlock>
 802370c:	e7de      	b.n	80236cc <__strftime+0x954>
 802370e:	42a3      	cmp	r3, r4
 8023710:	d905      	bls.n	802371e <__strftime+0x9a6>
 8023712:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8023716:	f809 2004 	strb.w	r2, [r9, r4]
 802371a:	3401      	adds	r4, #1
 802371c:	e7f2      	b.n	8023704 <__strftime+0x98c>
 802371e:	f000 fa03 	bl	8023b28 <__tz_unlock>
 8023722:	f7ff bb58 	b.w	8022dd6 <__strftime+0x5e>
 8023726:	f108 33ff 	add.w	r3, r8, #4294967295
 802372a:	42a3      	cmp	r3, r4
 802372c:	f67f ab53 	bls.w	8022dd6 <__strftime+0x5e>
 8023730:	2325      	movs	r3, #37	; 0x25
 8023732:	e627      	b.n	8023384 <__strftime+0x60c>
 8023734:	f1b8 0f00 	cmp.w	r8, #0
 8023738:	d002      	beq.n	8023740 <__strftime+0x9c8>
 802373a:	2300      	movs	r3, #0
 802373c:	f809 3004 	strb.w	r3, [r9, r4]
 8023740:	4620      	mov	r0, r4
 8023742:	b011      	add	sp, #68	; 0x44
 8023744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023748:	fffff894 	.word	0xfffff894
 802374c:	0802c5bb 	.word	0x0802c5bb
 8023750:	0802c5d8 	.word	0x0802c5d8
 8023754:	2000016c 	.word	0x2000016c

08023758 <strftime>:
 8023758:	b513      	push	{r0, r1, r4, lr}
 802375a:	4c03      	ldr	r4, [pc, #12]	; (8023768 <strftime+0x10>)
 802375c:	9400      	str	r4, [sp, #0]
 802375e:	f7ff fb0b 	bl	8022d78 <__strftime>
 8023762:	b002      	add	sp, #8
 8023764:	bd10      	pop	{r4, pc}
 8023766:	bf00      	nop
 8023768:	200001d0 	.word	0x200001d0

0802376c <strstr>:
 802376c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802376e:	780c      	ldrb	r4, [r1, #0]
 8023770:	b164      	cbz	r4, 802378c <strstr+0x20>
 8023772:	4603      	mov	r3, r0
 8023774:	781a      	ldrb	r2, [r3, #0]
 8023776:	4618      	mov	r0, r3
 8023778:	1c5e      	adds	r6, r3, #1
 802377a:	b90a      	cbnz	r2, 8023780 <strstr+0x14>
 802377c:	4610      	mov	r0, r2
 802377e:	e005      	b.n	802378c <strstr+0x20>
 8023780:	4294      	cmp	r4, r2
 8023782:	d108      	bne.n	8023796 <strstr+0x2a>
 8023784:	460d      	mov	r5, r1
 8023786:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 802378a:	b902      	cbnz	r2, 802378e <strstr+0x22>
 802378c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802378e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8023792:	4297      	cmp	r7, r2
 8023794:	d0f7      	beq.n	8023786 <strstr+0x1a>
 8023796:	4633      	mov	r3, r6
 8023798:	e7ec      	b.n	8023774 <strstr+0x8>
	...

0802379c <_strtol_l.isra.0>:
 802379c:	2b01      	cmp	r3, #1
 802379e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80237a2:	d001      	beq.n	80237a8 <_strtol_l.isra.0+0xc>
 80237a4:	2b24      	cmp	r3, #36	; 0x24
 80237a6:	d906      	bls.n	80237b6 <_strtol_l.isra.0+0x1a>
 80237a8:	f7fe fa84 	bl	8021cb4 <__errno>
 80237ac:	2316      	movs	r3, #22
 80237ae:	6003      	str	r3, [r0, #0]
 80237b0:	2000      	movs	r0, #0
 80237b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80237b6:	4f3a      	ldr	r7, [pc, #232]	; (80238a0 <_strtol_l.isra.0+0x104>)
 80237b8:	468e      	mov	lr, r1
 80237ba:	4676      	mov	r6, lr
 80237bc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80237c0:	5de5      	ldrb	r5, [r4, r7]
 80237c2:	f015 0508 	ands.w	r5, r5, #8
 80237c6:	d1f8      	bne.n	80237ba <_strtol_l.isra.0+0x1e>
 80237c8:	2c2d      	cmp	r4, #45	; 0x2d
 80237ca:	d134      	bne.n	8023836 <_strtol_l.isra.0+0x9a>
 80237cc:	f89e 4000 	ldrb.w	r4, [lr]
 80237d0:	f04f 0801 	mov.w	r8, #1
 80237d4:	f106 0e02 	add.w	lr, r6, #2
 80237d8:	2b00      	cmp	r3, #0
 80237da:	d05c      	beq.n	8023896 <_strtol_l.isra.0+0xfa>
 80237dc:	2b10      	cmp	r3, #16
 80237de:	d10c      	bne.n	80237fa <_strtol_l.isra.0+0x5e>
 80237e0:	2c30      	cmp	r4, #48	; 0x30
 80237e2:	d10a      	bne.n	80237fa <_strtol_l.isra.0+0x5e>
 80237e4:	f89e 4000 	ldrb.w	r4, [lr]
 80237e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80237ec:	2c58      	cmp	r4, #88	; 0x58
 80237ee:	d14d      	bne.n	802388c <_strtol_l.isra.0+0xf0>
 80237f0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80237f4:	2310      	movs	r3, #16
 80237f6:	f10e 0e02 	add.w	lr, lr, #2
 80237fa:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80237fe:	f10c 3cff 	add.w	ip, ip, #4294967295
 8023802:	2600      	movs	r6, #0
 8023804:	fbbc f9f3 	udiv	r9, ip, r3
 8023808:	4635      	mov	r5, r6
 802380a:	fb03 ca19 	mls	sl, r3, r9, ip
 802380e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8023812:	2f09      	cmp	r7, #9
 8023814:	d818      	bhi.n	8023848 <_strtol_l.isra.0+0xac>
 8023816:	463c      	mov	r4, r7
 8023818:	42a3      	cmp	r3, r4
 802381a:	dd24      	ble.n	8023866 <_strtol_l.isra.0+0xca>
 802381c:	2e00      	cmp	r6, #0
 802381e:	db1f      	blt.n	8023860 <_strtol_l.isra.0+0xc4>
 8023820:	45a9      	cmp	r9, r5
 8023822:	d31d      	bcc.n	8023860 <_strtol_l.isra.0+0xc4>
 8023824:	d101      	bne.n	802382a <_strtol_l.isra.0+0x8e>
 8023826:	45a2      	cmp	sl, r4
 8023828:	db1a      	blt.n	8023860 <_strtol_l.isra.0+0xc4>
 802382a:	fb05 4503 	mla	r5, r5, r3, r4
 802382e:	2601      	movs	r6, #1
 8023830:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8023834:	e7eb      	b.n	802380e <_strtol_l.isra.0+0x72>
 8023836:	2c2b      	cmp	r4, #43	; 0x2b
 8023838:	bf08      	it	eq
 802383a:	f89e 4000 	ldrbeq.w	r4, [lr]
 802383e:	46a8      	mov	r8, r5
 8023840:	bf08      	it	eq
 8023842:	f106 0e02 	addeq.w	lr, r6, #2
 8023846:	e7c7      	b.n	80237d8 <_strtol_l.isra.0+0x3c>
 8023848:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 802384c:	2f19      	cmp	r7, #25
 802384e:	d801      	bhi.n	8023854 <_strtol_l.isra.0+0xb8>
 8023850:	3c37      	subs	r4, #55	; 0x37
 8023852:	e7e1      	b.n	8023818 <_strtol_l.isra.0+0x7c>
 8023854:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8023858:	2f19      	cmp	r7, #25
 802385a:	d804      	bhi.n	8023866 <_strtol_l.isra.0+0xca>
 802385c:	3c57      	subs	r4, #87	; 0x57
 802385e:	e7db      	b.n	8023818 <_strtol_l.isra.0+0x7c>
 8023860:	f04f 36ff 	mov.w	r6, #4294967295
 8023864:	e7e4      	b.n	8023830 <_strtol_l.isra.0+0x94>
 8023866:	2e00      	cmp	r6, #0
 8023868:	da05      	bge.n	8023876 <_strtol_l.isra.0+0xda>
 802386a:	2322      	movs	r3, #34	; 0x22
 802386c:	6003      	str	r3, [r0, #0]
 802386e:	4665      	mov	r5, ip
 8023870:	b942      	cbnz	r2, 8023884 <_strtol_l.isra.0+0xe8>
 8023872:	4628      	mov	r0, r5
 8023874:	e79d      	b.n	80237b2 <_strtol_l.isra.0+0x16>
 8023876:	f1b8 0f00 	cmp.w	r8, #0
 802387a:	d000      	beq.n	802387e <_strtol_l.isra.0+0xe2>
 802387c:	426d      	negs	r5, r5
 802387e:	2a00      	cmp	r2, #0
 8023880:	d0f7      	beq.n	8023872 <_strtol_l.isra.0+0xd6>
 8023882:	b10e      	cbz	r6, 8023888 <_strtol_l.isra.0+0xec>
 8023884:	f10e 31ff 	add.w	r1, lr, #4294967295
 8023888:	6011      	str	r1, [r2, #0]
 802388a:	e7f2      	b.n	8023872 <_strtol_l.isra.0+0xd6>
 802388c:	2430      	movs	r4, #48	; 0x30
 802388e:	2b00      	cmp	r3, #0
 8023890:	d1b3      	bne.n	80237fa <_strtol_l.isra.0+0x5e>
 8023892:	2308      	movs	r3, #8
 8023894:	e7b1      	b.n	80237fa <_strtol_l.isra.0+0x5e>
 8023896:	2c30      	cmp	r4, #48	; 0x30
 8023898:	d0a4      	beq.n	80237e4 <_strtol_l.isra.0+0x48>
 802389a:	230a      	movs	r3, #10
 802389c:	e7ad      	b.n	80237fa <_strtol_l.isra.0+0x5e>
 802389e:	bf00      	nop
 80238a0:	0802c885 	.word	0x0802c885

080238a4 <_strtol_r>:
 80238a4:	f7ff bf7a 	b.w	802379c <_strtol_l.isra.0>

080238a8 <strtol>:
 80238a8:	4613      	mov	r3, r2
 80238aa:	460a      	mov	r2, r1
 80238ac:	4601      	mov	r1, r0
 80238ae:	4802      	ldr	r0, [pc, #8]	; (80238b8 <strtol+0x10>)
 80238b0:	6800      	ldr	r0, [r0, #0]
 80238b2:	f7ff bf73 	b.w	802379c <_strtol_l.isra.0>
 80238b6:	bf00      	nop
 80238b8:	20000108 	.word	0x20000108

080238bc <_strtoul_l.isra.0>:
 80238bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80238c0:	4e3b      	ldr	r6, [pc, #236]	; (80239b0 <_strtoul_l.isra.0+0xf4>)
 80238c2:	4686      	mov	lr, r0
 80238c4:	468c      	mov	ip, r1
 80238c6:	4660      	mov	r0, ip
 80238c8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80238cc:	5da5      	ldrb	r5, [r4, r6]
 80238ce:	f015 0508 	ands.w	r5, r5, #8
 80238d2:	d1f8      	bne.n	80238c6 <_strtoul_l.isra.0+0xa>
 80238d4:	2c2d      	cmp	r4, #45	; 0x2d
 80238d6:	d134      	bne.n	8023942 <_strtoul_l.isra.0+0x86>
 80238d8:	f89c 4000 	ldrb.w	r4, [ip]
 80238dc:	f04f 0801 	mov.w	r8, #1
 80238e0:	f100 0c02 	add.w	ip, r0, #2
 80238e4:	2b00      	cmp	r3, #0
 80238e6:	d05e      	beq.n	80239a6 <_strtoul_l.isra.0+0xea>
 80238e8:	2b10      	cmp	r3, #16
 80238ea:	d10c      	bne.n	8023906 <_strtoul_l.isra.0+0x4a>
 80238ec:	2c30      	cmp	r4, #48	; 0x30
 80238ee:	d10a      	bne.n	8023906 <_strtoul_l.isra.0+0x4a>
 80238f0:	f89c 0000 	ldrb.w	r0, [ip]
 80238f4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80238f8:	2858      	cmp	r0, #88	; 0x58
 80238fa:	d14f      	bne.n	802399c <_strtoul_l.isra.0+0xe0>
 80238fc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8023900:	2310      	movs	r3, #16
 8023902:	f10c 0c02 	add.w	ip, ip, #2
 8023906:	f04f 37ff 	mov.w	r7, #4294967295
 802390a:	2500      	movs	r5, #0
 802390c:	fbb7 f7f3 	udiv	r7, r7, r3
 8023910:	fb03 f907 	mul.w	r9, r3, r7
 8023914:	ea6f 0909 	mvn.w	r9, r9
 8023918:	4628      	mov	r0, r5
 802391a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 802391e:	2e09      	cmp	r6, #9
 8023920:	d818      	bhi.n	8023954 <_strtoul_l.isra.0+0x98>
 8023922:	4634      	mov	r4, r6
 8023924:	42a3      	cmp	r3, r4
 8023926:	dd24      	ble.n	8023972 <_strtoul_l.isra.0+0xb6>
 8023928:	2d00      	cmp	r5, #0
 802392a:	db1f      	blt.n	802396c <_strtoul_l.isra.0+0xb0>
 802392c:	4287      	cmp	r7, r0
 802392e:	d31d      	bcc.n	802396c <_strtoul_l.isra.0+0xb0>
 8023930:	d101      	bne.n	8023936 <_strtoul_l.isra.0+0x7a>
 8023932:	45a1      	cmp	r9, r4
 8023934:	db1a      	blt.n	802396c <_strtoul_l.isra.0+0xb0>
 8023936:	fb00 4003 	mla	r0, r0, r3, r4
 802393a:	2501      	movs	r5, #1
 802393c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8023940:	e7eb      	b.n	802391a <_strtoul_l.isra.0+0x5e>
 8023942:	2c2b      	cmp	r4, #43	; 0x2b
 8023944:	bf08      	it	eq
 8023946:	f89c 4000 	ldrbeq.w	r4, [ip]
 802394a:	46a8      	mov	r8, r5
 802394c:	bf08      	it	eq
 802394e:	f100 0c02 	addeq.w	ip, r0, #2
 8023952:	e7c7      	b.n	80238e4 <_strtoul_l.isra.0+0x28>
 8023954:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8023958:	2e19      	cmp	r6, #25
 802395a:	d801      	bhi.n	8023960 <_strtoul_l.isra.0+0xa4>
 802395c:	3c37      	subs	r4, #55	; 0x37
 802395e:	e7e1      	b.n	8023924 <_strtoul_l.isra.0+0x68>
 8023960:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8023964:	2e19      	cmp	r6, #25
 8023966:	d804      	bhi.n	8023972 <_strtoul_l.isra.0+0xb6>
 8023968:	3c57      	subs	r4, #87	; 0x57
 802396a:	e7db      	b.n	8023924 <_strtoul_l.isra.0+0x68>
 802396c:	f04f 35ff 	mov.w	r5, #4294967295
 8023970:	e7e4      	b.n	802393c <_strtoul_l.isra.0+0x80>
 8023972:	2d00      	cmp	r5, #0
 8023974:	da07      	bge.n	8023986 <_strtoul_l.isra.0+0xca>
 8023976:	2322      	movs	r3, #34	; 0x22
 8023978:	f8ce 3000 	str.w	r3, [lr]
 802397c:	f04f 30ff 	mov.w	r0, #4294967295
 8023980:	b942      	cbnz	r2, 8023994 <_strtoul_l.isra.0+0xd8>
 8023982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023986:	f1b8 0f00 	cmp.w	r8, #0
 802398a:	d000      	beq.n	802398e <_strtoul_l.isra.0+0xd2>
 802398c:	4240      	negs	r0, r0
 802398e:	2a00      	cmp	r2, #0
 8023990:	d0f7      	beq.n	8023982 <_strtoul_l.isra.0+0xc6>
 8023992:	b10d      	cbz	r5, 8023998 <_strtoul_l.isra.0+0xdc>
 8023994:	f10c 31ff 	add.w	r1, ip, #4294967295
 8023998:	6011      	str	r1, [r2, #0]
 802399a:	e7f2      	b.n	8023982 <_strtoul_l.isra.0+0xc6>
 802399c:	2430      	movs	r4, #48	; 0x30
 802399e:	2b00      	cmp	r3, #0
 80239a0:	d1b1      	bne.n	8023906 <_strtoul_l.isra.0+0x4a>
 80239a2:	2308      	movs	r3, #8
 80239a4:	e7af      	b.n	8023906 <_strtoul_l.isra.0+0x4a>
 80239a6:	2c30      	cmp	r4, #48	; 0x30
 80239a8:	d0a2      	beq.n	80238f0 <_strtoul_l.isra.0+0x34>
 80239aa:	230a      	movs	r3, #10
 80239ac:	e7ab      	b.n	8023906 <_strtoul_l.isra.0+0x4a>
 80239ae:	bf00      	nop
 80239b0:	0802c885 	.word	0x0802c885

080239b4 <_strtoul_r>:
 80239b4:	f7ff bf82 	b.w	80238bc <_strtoul_l.isra.0>

080239b8 <strtoul>:
 80239b8:	4613      	mov	r3, r2
 80239ba:	460a      	mov	r2, r1
 80239bc:	4601      	mov	r1, r0
 80239be:	4802      	ldr	r0, [pc, #8]	; (80239c8 <strtoul+0x10>)
 80239c0:	6800      	ldr	r0, [r0, #0]
 80239c2:	f7ff bf7b 	b.w	80238bc <_strtoul_l.isra.0>
 80239c6:	bf00      	nop
 80239c8:	20000108 	.word	0x20000108

080239cc <__tzcalc_limits>:
 80239cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80239d0:	4680      	mov	r8, r0
 80239d2:	f000 fc6d 	bl	80242b0 <__gettzinfo>
 80239d6:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80239da:	4598      	cmp	r8, r3
 80239dc:	f340 8098 	ble.w	8023b10 <__tzcalc_limits+0x144>
 80239e0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80239e4:	4443      	add	r3, r8
 80239e6:	109b      	asrs	r3, r3, #2
 80239e8:	f240 126d 	movw	r2, #365	; 0x16d
 80239ec:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 80239f0:	fb02 3505 	mla	r5, r2, r5, r3
 80239f4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80239f8:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 80239fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8023a00:	441d      	add	r5, r3
 8023a02:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8023a06:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8023a0a:	fb98 f7f3 	sdiv	r7, r8, r3
 8023a0e:	fb03 8717 	mls	r7, r3, r7, r8
 8023a12:	4442      	add	r2, r8
 8023a14:	fab7 fc87 	clz	ip, r7
 8023a18:	fbb2 f2f3 	udiv	r2, r2, r3
 8023a1c:	f008 0303 	and.w	r3, r8, #3
 8023a20:	4415      	add	r5, r2
 8023a22:	2264      	movs	r2, #100	; 0x64
 8023a24:	f8c0 8004 	str.w	r8, [r0, #4]
 8023a28:	fb98 f6f2 	sdiv	r6, r8, r2
 8023a2c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8023a30:	fb02 8616 	mls	r6, r2, r6, r8
 8023a34:	4604      	mov	r4, r0
 8023a36:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8023a3a:	9300      	str	r3, [sp, #0]
 8023a3c:	f04f 0e07 	mov.w	lr, #7
 8023a40:	7a22      	ldrb	r2, [r4, #8]
 8023a42:	6963      	ldr	r3, [r4, #20]
 8023a44:	2a4a      	cmp	r2, #74	; 0x4a
 8023a46:	d128      	bne.n	8023a9a <__tzcalc_limits+0xce>
 8023a48:	9900      	ldr	r1, [sp, #0]
 8023a4a:	18ea      	adds	r2, r5, r3
 8023a4c:	b901      	cbnz	r1, 8023a50 <__tzcalc_limits+0x84>
 8023a4e:	b906      	cbnz	r6, 8023a52 <__tzcalc_limits+0x86>
 8023a50:	bb0f      	cbnz	r7, 8023a96 <__tzcalc_limits+0xca>
 8023a52:	2b3b      	cmp	r3, #59	; 0x3b
 8023a54:	bfd4      	ite	le
 8023a56:	2300      	movle	r3, #0
 8023a58:	2301      	movgt	r3, #1
 8023a5a:	4413      	add	r3, r2
 8023a5c:	1e5a      	subs	r2, r3, #1
 8023a5e:	69a3      	ldr	r3, [r4, #24]
 8023a60:	492c      	ldr	r1, [pc, #176]	; (8023b14 <__tzcalc_limits+0x148>)
 8023a62:	fb01 3202 	mla	r2, r1, r2, r3
 8023a66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8023a68:	4413      	add	r3, r2
 8023a6a:	461a      	mov	r2, r3
 8023a6c:	17db      	asrs	r3, r3, #31
 8023a6e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8023a72:	3428      	adds	r4, #40	; 0x28
 8023a74:	45a3      	cmp	fp, r4
 8023a76:	d1e3      	bne.n	8023a40 <__tzcalc_limits+0x74>
 8023a78:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8023a7c:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8023a80:	4294      	cmp	r4, r2
 8023a82:	eb75 0303 	sbcs.w	r3, r5, r3
 8023a86:	bfb4      	ite	lt
 8023a88:	2301      	movlt	r3, #1
 8023a8a:	2300      	movge	r3, #0
 8023a8c:	6003      	str	r3, [r0, #0]
 8023a8e:	2001      	movs	r0, #1
 8023a90:	b003      	add	sp, #12
 8023a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023a96:	2300      	movs	r3, #0
 8023a98:	e7df      	b.n	8023a5a <__tzcalc_limits+0x8e>
 8023a9a:	2a44      	cmp	r2, #68	; 0x44
 8023a9c:	d101      	bne.n	8023aa2 <__tzcalc_limits+0xd6>
 8023a9e:	18ea      	adds	r2, r5, r3
 8023aa0:	e7dd      	b.n	8023a5e <__tzcalc_limits+0x92>
 8023aa2:	9a00      	ldr	r2, [sp, #0]
 8023aa4:	bb72      	cbnz	r2, 8023b04 <__tzcalc_limits+0x138>
 8023aa6:	2e00      	cmp	r6, #0
 8023aa8:	bf0c      	ite	eq
 8023aaa:	46e0      	moveq	r8, ip
 8023aac:	f04f 0801 	movne.w	r8, #1
 8023ab0:	4919      	ldr	r1, [pc, #100]	; (8023b18 <__tzcalc_limits+0x14c>)
 8023ab2:	68e2      	ldr	r2, [r4, #12]
 8023ab4:	9201      	str	r2, [sp, #4]
 8023ab6:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8023aba:	fb0a 1808 	mla	r8, sl, r8, r1
 8023abe:	462a      	mov	r2, r5
 8023ac0:	f04f 0900 	mov.w	r9, #0
 8023ac4:	f1a8 0804 	sub.w	r8, r8, #4
 8023ac8:	9901      	ldr	r1, [sp, #4]
 8023aca:	f109 0901 	add.w	r9, r9, #1
 8023ace:	4549      	cmp	r1, r9
 8023ad0:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 8023ad4:	dc18      	bgt.n	8023b08 <__tzcalc_limits+0x13c>
 8023ad6:	f102 0804 	add.w	r8, r2, #4
 8023ada:	fb98 f9fe 	sdiv	r9, r8, lr
 8023ade:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8023ae2:	eba8 0909 	sub.w	r9, r8, r9
 8023ae6:	ebb3 0909 	subs.w	r9, r3, r9
 8023aea:	6923      	ldr	r3, [r4, #16]
 8023aec:	f103 33ff 	add.w	r3, r3, #4294967295
 8023af0:	bf48      	it	mi
 8023af2:	f109 0907 	addmi.w	r9, r9, #7
 8023af6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8023afa:	444b      	add	r3, r9
 8023afc:	4553      	cmp	r3, sl
 8023afe:	da05      	bge.n	8023b0c <__tzcalc_limits+0x140>
 8023b00:	441a      	add	r2, r3
 8023b02:	e7ac      	b.n	8023a5e <__tzcalc_limits+0x92>
 8023b04:	46e0      	mov	r8, ip
 8023b06:	e7d3      	b.n	8023ab0 <__tzcalc_limits+0xe4>
 8023b08:	4452      	add	r2, sl
 8023b0a:	e7dd      	b.n	8023ac8 <__tzcalc_limits+0xfc>
 8023b0c:	3b07      	subs	r3, #7
 8023b0e:	e7f5      	b.n	8023afc <__tzcalc_limits+0x130>
 8023b10:	2000      	movs	r0, #0
 8023b12:	e7bd      	b.n	8023a90 <__tzcalc_limits+0xc4>
 8023b14:	00015180 	.word	0x00015180
 8023b18:	0802c4cc 	.word	0x0802c4cc

08023b1c <__tz_lock>:
 8023b1c:	4801      	ldr	r0, [pc, #4]	; (8023b24 <__tz_lock+0x8>)
 8023b1e:	f7fe be21 	b.w	8022764 <__retarget_lock_acquire>
 8023b22:	bf00      	nop
 8023b24:	20001107 	.word	0x20001107

08023b28 <__tz_unlock>:
 8023b28:	4801      	ldr	r0, [pc, #4]	; (8023b30 <__tz_unlock+0x8>)
 8023b2a:	f7fe be1d 	b.w	8022768 <__retarget_lock_release>
 8023b2e:	bf00      	nop
 8023b30:	20001107 	.word	0x20001107

08023b34 <_tzset_unlocked>:
 8023b34:	4b01      	ldr	r3, [pc, #4]	; (8023b3c <_tzset_unlocked+0x8>)
 8023b36:	6818      	ldr	r0, [r3, #0]
 8023b38:	f000 b802 	b.w	8023b40 <_tzset_unlocked_r>
 8023b3c:	20000108 	.word	0x20000108

08023b40 <_tzset_unlocked_r>:
 8023b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b44:	b08d      	sub	sp, #52	; 0x34
 8023b46:	4607      	mov	r7, r0
 8023b48:	f000 fbb2 	bl	80242b0 <__gettzinfo>
 8023b4c:	49ae      	ldr	r1, [pc, #696]	; (8023e08 <_tzset_unlocked_r+0x2c8>)
 8023b4e:	4eaf      	ldr	r6, [pc, #700]	; (8023e0c <_tzset_unlocked_r+0x2cc>)
 8023b50:	4605      	mov	r5, r0
 8023b52:	4638      	mov	r0, r7
 8023b54:	f000 fba4 	bl	80242a0 <_getenv_r>
 8023b58:	4604      	mov	r4, r0
 8023b5a:	b970      	cbnz	r0, 8023b7a <_tzset_unlocked_r+0x3a>
 8023b5c:	4bac      	ldr	r3, [pc, #688]	; (8023e10 <_tzset_unlocked_r+0x2d0>)
 8023b5e:	4aad      	ldr	r2, [pc, #692]	; (8023e14 <_tzset_unlocked_r+0x2d4>)
 8023b60:	6018      	str	r0, [r3, #0]
 8023b62:	4bad      	ldr	r3, [pc, #692]	; (8023e18 <_tzset_unlocked_r+0x2d8>)
 8023b64:	6018      	str	r0, [r3, #0]
 8023b66:	4bad      	ldr	r3, [pc, #692]	; (8023e1c <_tzset_unlocked_r+0x2dc>)
 8023b68:	6830      	ldr	r0, [r6, #0]
 8023b6a:	e9c3 2200 	strd	r2, r2, [r3]
 8023b6e:	f7fe fe69 	bl	8022844 <free>
 8023b72:	6034      	str	r4, [r6, #0]
 8023b74:	b00d      	add	sp, #52	; 0x34
 8023b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b7a:	6831      	ldr	r1, [r6, #0]
 8023b7c:	2900      	cmp	r1, #0
 8023b7e:	d15f      	bne.n	8023c40 <_tzset_unlocked_r+0x100>
 8023b80:	6830      	ldr	r0, [r6, #0]
 8023b82:	f7fe fe5f 	bl	8022844 <free>
 8023b86:	4620      	mov	r0, r4
 8023b88:	f7dc fb58 	bl	800023c <strlen>
 8023b8c:	1c41      	adds	r1, r0, #1
 8023b8e:	4638      	mov	r0, r7
 8023b90:	f7fe fed6 	bl	8022940 <_malloc_r>
 8023b94:	6030      	str	r0, [r6, #0]
 8023b96:	2800      	cmp	r0, #0
 8023b98:	d157      	bne.n	8023c4a <_tzset_unlocked_r+0x10a>
 8023b9a:	7823      	ldrb	r3, [r4, #0]
 8023b9c:	4aa0      	ldr	r2, [pc, #640]	; (8023e20 <_tzset_unlocked_r+0x2e0>)
 8023b9e:	49a1      	ldr	r1, [pc, #644]	; (8023e24 <_tzset_unlocked_r+0x2e4>)
 8023ba0:	2b3a      	cmp	r3, #58	; 0x3a
 8023ba2:	bf08      	it	eq
 8023ba4:	3401      	addeq	r4, #1
 8023ba6:	ae0a      	add	r6, sp, #40	; 0x28
 8023ba8:	4633      	mov	r3, r6
 8023baa:	4620      	mov	r0, r4
 8023bac:	f001 f976 	bl	8024e9c <siscanf>
 8023bb0:	2800      	cmp	r0, #0
 8023bb2:	dddf      	ble.n	8023b74 <_tzset_unlocked_r+0x34>
 8023bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023bb6:	18e7      	adds	r7, r4, r3
 8023bb8:	5ce3      	ldrb	r3, [r4, r3]
 8023bba:	2b2d      	cmp	r3, #45	; 0x2d
 8023bbc:	d149      	bne.n	8023c52 <_tzset_unlocked_r+0x112>
 8023bbe:	3701      	adds	r7, #1
 8023bc0:	f04f 34ff 	mov.w	r4, #4294967295
 8023bc4:	f10d 0a20 	add.w	sl, sp, #32
 8023bc8:	f10d 0b1e 	add.w	fp, sp, #30
 8023bcc:	f04f 0800 	mov.w	r8, #0
 8023bd0:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8023bd4:	4994      	ldr	r1, [pc, #592]	; (8023e28 <_tzset_unlocked_r+0x2e8>)
 8023bd6:	9603      	str	r6, [sp, #12]
 8023bd8:	f8cd b000 	str.w	fp, [sp]
 8023bdc:	4633      	mov	r3, r6
 8023bde:	aa07      	add	r2, sp, #28
 8023be0:	4638      	mov	r0, r7
 8023be2:	f8ad 801e 	strh.w	r8, [sp, #30]
 8023be6:	f8ad 8020 	strh.w	r8, [sp, #32]
 8023bea:	f001 f957 	bl	8024e9c <siscanf>
 8023bee:	4540      	cmp	r0, r8
 8023bf0:	ddc0      	ble.n	8023b74 <_tzset_unlocked_r+0x34>
 8023bf2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8023bf6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8023bfa:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8023e34 <_tzset_unlocked_r+0x2f4>
 8023bfe:	213c      	movs	r1, #60	; 0x3c
 8023c00:	fb01 2203 	mla	r2, r1, r3, r2
 8023c04:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8023c08:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8023c0c:	fb01 2303 	mla	r3, r1, r3, r2
 8023c10:	435c      	muls	r4, r3
 8023c12:	62ac      	str	r4, [r5, #40]	; 0x28
 8023c14:	4c81      	ldr	r4, [pc, #516]	; (8023e1c <_tzset_unlocked_r+0x2dc>)
 8023c16:	4b82      	ldr	r3, [pc, #520]	; (8023e20 <_tzset_unlocked_r+0x2e0>)
 8023c18:	6023      	str	r3, [r4, #0]
 8023c1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023c1c:	4981      	ldr	r1, [pc, #516]	; (8023e24 <_tzset_unlocked_r+0x2e4>)
 8023c1e:	441f      	add	r7, r3
 8023c20:	464a      	mov	r2, r9
 8023c22:	4633      	mov	r3, r6
 8023c24:	4638      	mov	r0, r7
 8023c26:	f001 f939 	bl	8024e9c <siscanf>
 8023c2a:	4540      	cmp	r0, r8
 8023c2c:	dc16      	bgt.n	8023c5c <_tzset_unlocked_r+0x11c>
 8023c2e:	6823      	ldr	r3, [r4, #0]
 8023c30:	6063      	str	r3, [r4, #4]
 8023c32:	4b77      	ldr	r3, [pc, #476]	; (8023e10 <_tzset_unlocked_r+0x2d0>)
 8023c34:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8023c36:	601a      	str	r2, [r3, #0]
 8023c38:	4b77      	ldr	r3, [pc, #476]	; (8023e18 <_tzset_unlocked_r+0x2d8>)
 8023c3a:	f8c3 8000 	str.w	r8, [r3]
 8023c3e:	e799      	b.n	8023b74 <_tzset_unlocked_r+0x34>
 8023c40:	f7dc fb04 	bl	800024c <strcmp>
 8023c44:	2800      	cmp	r0, #0
 8023c46:	d19b      	bne.n	8023b80 <_tzset_unlocked_r+0x40>
 8023c48:	e794      	b.n	8023b74 <_tzset_unlocked_r+0x34>
 8023c4a:	4621      	mov	r1, r4
 8023c4c:	f7ff f829 	bl	8022ca2 <strcpy>
 8023c50:	e7a3      	b.n	8023b9a <_tzset_unlocked_r+0x5a>
 8023c52:	2b2b      	cmp	r3, #43	; 0x2b
 8023c54:	bf08      	it	eq
 8023c56:	3701      	addeq	r7, #1
 8023c58:	2401      	movs	r4, #1
 8023c5a:	e7b3      	b.n	8023bc4 <_tzset_unlocked_r+0x84>
 8023c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023c5e:	f8c4 9004 	str.w	r9, [r4, #4]
 8023c62:	18fc      	adds	r4, r7, r3
 8023c64:	5cfb      	ldrb	r3, [r7, r3]
 8023c66:	2b2d      	cmp	r3, #45	; 0x2d
 8023c68:	f040 808b 	bne.w	8023d82 <_tzset_unlocked_r+0x242>
 8023c6c:	3401      	adds	r4, #1
 8023c6e:	f04f 37ff 	mov.w	r7, #4294967295
 8023c72:	2300      	movs	r3, #0
 8023c74:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023c78:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023c7c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8023c80:	930a      	str	r3, [sp, #40]	; 0x28
 8023c82:	e9cd a602 	strd	sl, r6, [sp, #8]
 8023c86:	e9cd b600 	strd	fp, r6, [sp]
 8023c8a:	4967      	ldr	r1, [pc, #412]	; (8023e28 <_tzset_unlocked_r+0x2e8>)
 8023c8c:	4633      	mov	r3, r6
 8023c8e:	aa07      	add	r2, sp, #28
 8023c90:	4620      	mov	r0, r4
 8023c92:	f001 f903 	bl	8024e9c <siscanf>
 8023c96:	2800      	cmp	r0, #0
 8023c98:	dc78      	bgt.n	8023d8c <_tzset_unlocked_r+0x24c>
 8023c9a:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8023c9c:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8023ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023ca2:	652f      	str	r7, [r5, #80]	; 0x50
 8023ca4:	441c      	add	r4, r3
 8023ca6:	462f      	mov	r7, r5
 8023ca8:	f04f 0900 	mov.w	r9, #0
 8023cac:	7823      	ldrb	r3, [r4, #0]
 8023cae:	2b2c      	cmp	r3, #44	; 0x2c
 8023cb0:	bf08      	it	eq
 8023cb2:	3401      	addeq	r4, #1
 8023cb4:	f894 8000 	ldrb.w	r8, [r4]
 8023cb8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8023cbc:	d178      	bne.n	8023db0 <_tzset_unlocked_r+0x270>
 8023cbe:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8023cc2:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8023cc6:	ab09      	add	r3, sp, #36	; 0x24
 8023cc8:	9300      	str	r3, [sp, #0]
 8023cca:	4958      	ldr	r1, [pc, #352]	; (8023e2c <_tzset_unlocked_r+0x2ec>)
 8023ccc:	9603      	str	r6, [sp, #12]
 8023cce:	4633      	mov	r3, r6
 8023cd0:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8023cd4:	4620      	mov	r0, r4
 8023cd6:	f001 f8e1 	bl	8024e9c <siscanf>
 8023cda:	2803      	cmp	r0, #3
 8023cdc:	f47f af4a 	bne.w	8023b74 <_tzset_unlocked_r+0x34>
 8023ce0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8023ce4:	1e4b      	subs	r3, r1, #1
 8023ce6:	2b0b      	cmp	r3, #11
 8023ce8:	f63f af44 	bhi.w	8023b74 <_tzset_unlocked_r+0x34>
 8023cec:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8023cf0:	1e53      	subs	r3, r2, #1
 8023cf2:	2b04      	cmp	r3, #4
 8023cf4:	f63f af3e 	bhi.w	8023b74 <_tzset_unlocked_r+0x34>
 8023cf8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8023cfc:	2b06      	cmp	r3, #6
 8023cfe:	f63f af39 	bhi.w	8023b74 <_tzset_unlocked_r+0x34>
 8023d02:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8023d06:	f887 8008 	strb.w	r8, [r7, #8]
 8023d0a:	617b      	str	r3, [r7, #20]
 8023d0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023d0e:	eb04 0803 	add.w	r8, r4, r3
 8023d12:	2302      	movs	r3, #2
 8023d14:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023d18:	2300      	movs	r3, #0
 8023d1a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023d1e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8023d22:	930a      	str	r3, [sp, #40]	; 0x28
 8023d24:	f898 3000 	ldrb.w	r3, [r8]
 8023d28:	2b2f      	cmp	r3, #47	; 0x2f
 8023d2a:	d109      	bne.n	8023d40 <_tzset_unlocked_r+0x200>
 8023d2c:	e9cd a602 	strd	sl, r6, [sp, #8]
 8023d30:	e9cd b600 	strd	fp, r6, [sp]
 8023d34:	493e      	ldr	r1, [pc, #248]	; (8023e30 <_tzset_unlocked_r+0x2f0>)
 8023d36:	4633      	mov	r3, r6
 8023d38:	aa07      	add	r2, sp, #28
 8023d3a:	4640      	mov	r0, r8
 8023d3c:	f001 f8ae 	bl	8024e9c <siscanf>
 8023d40:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8023d44:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8023d48:	213c      	movs	r1, #60	; 0x3c
 8023d4a:	fb01 2203 	mla	r2, r1, r3, r2
 8023d4e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8023d52:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8023d56:	fb01 2303 	mla	r3, r1, r3, r2
 8023d5a:	61bb      	str	r3, [r7, #24]
 8023d5c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023d5e:	3728      	adds	r7, #40	; 0x28
 8023d60:	4444      	add	r4, r8
 8023d62:	f1b9 0f00 	cmp.w	r9, #0
 8023d66:	d020      	beq.n	8023daa <_tzset_unlocked_r+0x26a>
 8023d68:	6868      	ldr	r0, [r5, #4]
 8023d6a:	f7ff fe2f 	bl	80239cc <__tzcalc_limits>
 8023d6e:	4b28      	ldr	r3, [pc, #160]	; (8023e10 <_tzset_unlocked_r+0x2d0>)
 8023d70:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8023d72:	601a      	str	r2, [r3, #0]
 8023d74:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8023d76:	1a9b      	subs	r3, r3, r2
 8023d78:	4a27      	ldr	r2, [pc, #156]	; (8023e18 <_tzset_unlocked_r+0x2d8>)
 8023d7a:	bf18      	it	ne
 8023d7c:	2301      	movne	r3, #1
 8023d7e:	6013      	str	r3, [r2, #0]
 8023d80:	e6f8      	b.n	8023b74 <_tzset_unlocked_r+0x34>
 8023d82:	2b2b      	cmp	r3, #43	; 0x2b
 8023d84:	bf08      	it	eq
 8023d86:	3401      	addeq	r4, #1
 8023d88:	2701      	movs	r7, #1
 8023d8a:	e772      	b.n	8023c72 <_tzset_unlocked_r+0x132>
 8023d8c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8023d90:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8023d94:	213c      	movs	r1, #60	; 0x3c
 8023d96:	fb01 2203 	mla	r2, r1, r3, r2
 8023d9a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8023d9e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8023da2:	fb01 2303 	mla	r3, r1, r3, r2
 8023da6:	435f      	muls	r7, r3
 8023da8:	e77a      	b.n	8023ca0 <_tzset_unlocked_r+0x160>
 8023daa:	f04f 0901 	mov.w	r9, #1
 8023dae:	e77d      	b.n	8023cac <_tzset_unlocked_r+0x16c>
 8023db0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8023db4:	bf06      	itte	eq
 8023db6:	3401      	addeq	r4, #1
 8023db8:	4643      	moveq	r3, r8
 8023dba:	2344      	movne	r3, #68	; 0x44
 8023dbc:	220a      	movs	r2, #10
 8023dbe:	a90b      	add	r1, sp, #44	; 0x2c
 8023dc0:	4620      	mov	r0, r4
 8023dc2:	9305      	str	r3, [sp, #20]
 8023dc4:	f7ff fdf8 	bl	80239b8 <strtoul>
 8023dc8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8023dcc:	9b05      	ldr	r3, [sp, #20]
 8023dce:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8023dd2:	45a0      	cmp	r8, r4
 8023dd4:	d114      	bne.n	8023e00 <_tzset_unlocked_r+0x2c0>
 8023dd6:	234d      	movs	r3, #77	; 0x4d
 8023dd8:	f1b9 0f00 	cmp.w	r9, #0
 8023ddc:	d107      	bne.n	8023dee <_tzset_unlocked_r+0x2ae>
 8023dde:	722b      	strb	r3, [r5, #8]
 8023de0:	2103      	movs	r1, #3
 8023de2:	2302      	movs	r3, #2
 8023de4:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8023de8:	f8c5 9014 	str.w	r9, [r5, #20]
 8023dec:	e791      	b.n	8023d12 <_tzset_unlocked_r+0x1d2>
 8023dee:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8023df2:	220b      	movs	r2, #11
 8023df4:	2301      	movs	r3, #1
 8023df6:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8023dfa:	2300      	movs	r3, #0
 8023dfc:	63eb      	str	r3, [r5, #60]	; 0x3c
 8023dfe:	e788      	b.n	8023d12 <_tzset_unlocked_r+0x1d2>
 8023e00:	b280      	uxth	r0, r0
 8023e02:	723b      	strb	r3, [r7, #8]
 8023e04:	6178      	str	r0, [r7, #20]
 8023e06:	e784      	b.n	8023d12 <_tzset_unlocked_r+0x1d2>
 8023e08:	0802c80c 	.word	0x0802c80c
 8023e0c:	2000105c 	.word	0x2000105c
 8023e10:	20001064 	.word	0x20001064
 8023e14:	0802c80f 	.word	0x0802c80f
 8023e18:	20001060 	.word	0x20001060
 8023e1c:	2000016c 	.word	0x2000016c
 8023e20:	2000104f 	.word	0x2000104f
 8023e24:	0802c813 	.word	0x0802c813
 8023e28:	0802c836 	.word	0x0802c836
 8023e2c:	0802c822 	.word	0x0802c822
 8023e30:	0802c835 	.word	0x0802c835
 8023e34:	20001044 	.word	0x20001044

08023e38 <_vsniprintf_r>:
 8023e38:	b530      	push	{r4, r5, lr}
 8023e3a:	1e14      	subs	r4, r2, #0
 8023e3c:	4605      	mov	r5, r0
 8023e3e:	b09b      	sub	sp, #108	; 0x6c
 8023e40:	4618      	mov	r0, r3
 8023e42:	da05      	bge.n	8023e50 <_vsniprintf_r+0x18>
 8023e44:	238b      	movs	r3, #139	; 0x8b
 8023e46:	602b      	str	r3, [r5, #0]
 8023e48:	f04f 30ff 	mov.w	r0, #4294967295
 8023e4c:	b01b      	add	sp, #108	; 0x6c
 8023e4e:	bd30      	pop	{r4, r5, pc}
 8023e50:	f44f 7302 	mov.w	r3, #520	; 0x208
 8023e54:	f8ad 300c 	strh.w	r3, [sp, #12]
 8023e58:	bf14      	ite	ne
 8023e5a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8023e5e:	4623      	moveq	r3, r4
 8023e60:	9302      	str	r3, [sp, #8]
 8023e62:	9305      	str	r3, [sp, #20]
 8023e64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8023e68:	9100      	str	r1, [sp, #0]
 8023e6a:	9104      	str	r1, [sp, #16]
 8023e6c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023e70:	4602      	mov	r2, r0
 8023e72:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8023e74:	4669      	mov	r1, sp
 8023e76:	4628      	mov	r0, r5
 8023e78:	f000 fb94 	bl	80245a4 <_svfiprintf_r>
 8023e7c:	1c43      	adds	r3, r0, #1
 8023e7e:	bfbc      	itt	lt
 8023e80:	238b      	movlt	r3, #139	; 0x8b
 8023e82:	602b      	strlt	r3, [r5, #0]
 8023e84:	2c00      	cmp	r4, #0
 8023e86:	d0e1      	beq.n	8023e4c <_vsniprintf_r+0x14>
 8023e88:	9b00      	ldr	r3, [sp, #0]
 8023e8a:	2200      	movs	r2, #0
 8023e8c:	701a      	strb	r2, [r3, #0]
 8023e8e:	e7dd      	b.n	8023e4c <_vsniprintf_r+0x14>

08023e90 <vsniprintf>:
 8023e90:	b507      	push	{r0, r1, r2, lr}
 8023e92:	9300      	str	r3, [sp, #0]
 8023e94:	4613      	mov	r3, r2
 8023e96:	460a      	mov	r2, r1
 8023e98:	4601      	mov	r1, r0
 8023e9a:	4803      	ldr	r0, [pc, #12]	; (8023ea8 <vsniprintf+0x18>)
 8023e9c:	6800      	ldr	r0, [r0, #0]
 8023e9e:	f7ff ffcb 	bl	8023e38 <_vsniprintf_r>
 8023ea2:	b003      	add	sp, #12
 8023ea4:	f85d fb04 	ldr.w	pc, [sp], #4
 8023ea8:	20000108 	.word	0x20000108

08023eac <__swbuf_r>:
 8023eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023eae:	460e      	mov	r6, r1
 8023eb0:	4614      	mov	r4, r2
 8023eb2:	4605      	mov	r5, r0
 8023eb4:	b118      	cbz	r0, 8023ebe <__swbuf_r+0x12>
 8023eb6:	6983      	ldr	r3, [r0, #24]
 8023eb8:	b90b      	cbnz	r3, 8023ebe <__swbuf_r+0x12>
 8023eba:	f7fe f8a1 	bl	8022000 <__sinit>
 8023ebe:	4b21      	ldr	r3, [pc, #132]	; (8023f44 <__swbuf_r+0x98>)
 8023ec0:	429c      	cmp	r4, r3
 8023ec2:	d12b      	bne.n	8023f1c <__swbuf_r+0x70>
 8023ec4:	686c      	ldr	r4, [r5, #4]
 8023ec6:	69a3      	ldr	r3, [r4, #24]
 8023ec8:	60a3      	str	r3, [r4, #8]
 8023eca:	89a3      	ldrh	r3, [r4, #12]
 8023ecc:	071a      	lsls	r2, r3, #28
 8023ece:	d52f      	bpl.n	8023f30 <__swbuf_r+0x84>
 8023ed0:	6923      	ldr	r3, [r4, #16]
 8023ed2:	b36b      	cbz	r3, 8023f30 <__swbuf_r+0x84>
 8023ed4:	6923      	ldr	r3, [r4, #16]
 8023ed6:	6820      	ldr	r0, [r4, #0]
 8023ed8:	1ac0      	subs	r0, r0, r3
 8023eda:	6963      	ldr	r3, [r4, #20]
 8023edc:	b2f6      	uxtb	r6, r6
 8023ede:	4283      	cmp	r3, r0
 8023ee0:	4637      	mov	r7, r6
 8023ee2:	dc04      	bgt.n	8023eee <__swbuf_r+0x42>
 8023ee4:	4621      	mov	r1, r4
 8023ee6:	4628      	mov	r0, r5
 8023ee8:	f7fd ffe4 	bl	8021eb4 <_fflush_r>
 8023eec:	bb30      	cbnz	r0, 8023f3c <__swbuf_r+0x90>
 8023eee:	68a3      	ldr	r3, [r4, #8]
 8023ef0:	3b01      	subs	r3, #1
 8023ef2:	60a3      	str	r3, [r4, #8]
 8023ef4:	6823      	ldr	r3, [r4, #0]
 8023ef6:	1c5a      	adds	r2, r3, #1
 8023ef8:	6022      	str	r2, [r4, #0]
 8023efa:	701e      	strb	r6, [r3, #0]
 8023efc:	6963      	ldr	r3, [r4, #20]
 8023efe:	3001      	adds	r0, #1
 8023f00:	4283      	cmp	r3, r0
 8023f02:	d004      	beq.n	8023f0e <__swbuf_r+0x62>
 8023f04:	89a3      	ldrh	r3, [r4, #12]
 8023f06:	07db      	lsls	r3, r3, #31
 8023f08:	d506      	bpl.n	8023f18 <__swbuf_r+0x6c>
 8023f0a:	2e0a      	cmp	r6, #10
 8023f0c:	d104      	bne.n	8023f18 <__swbuf_r+0x6c>
 8023f0e:	4621      	mov	r1, r4
 8023f10:	4628      	mov	r0, r5
 8023f12:	f7fd ffcf 	bl	8021eb4 <_fflush_r>
 8023f16:	b988      	cbnz	r0, 8023f3c <__swbuf_r+0x90>
 8023f18:	4638      	mov	r0, r7
 8023f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023f1c:	4b0a      	ldr	r3, [pc, #40]	; (8023f48 <__swbuf_r+0x9c>)
 8023f1e:	429c      	cmp	r4, r3
 8023f20:	d101      	bne.n	8023f26 <__swbuf_r+0x7a>
 8023f22:	68ac      	ldr	r4, [r5, #8]
 8023f24:	e7cf      	b.n	8023ec6 <__swbuf_r+0x1a>
 8023f26:	4b09      	ldr	r3, [pc, #36]	; (8023f4c <__swbuf_r+0xa0>)
 8023f28:	429c      	cmp	r4, r3
 8023f2a:	bf08      	it	eq
 8023f2c:	68ec      	ldreq	r4, [r5, #12]
 8023f2e:	e7ca      	b.n	8023ec6 <__swbuf_r+0x1a>
 8023f30:	4621      	mov	r1, r4
 8023f32:	4628      	mov	r0, r5
 8023f34:	f000 f81e 	bl	8023f74 <__swsetup_r>
 8023f38:	2800      	cmp	r0, #0
 8023f3a:	d0cb      	beq.n	8023ed4 <__swbuf_r+0x28>
 8023f3c:	f04f 37ff 	mov.w	r7, #4294967295
 8023f40:	e7ea      	b.n	8023f18 <__swbuf_r+0x6c>
 8023f42:	bf00      	nop
 8023f44:	0802c410 	.word	0x0802c410
 8023f48:	0802c430 	.word	0x0802c430
 8023f4c:	0802c3f0 	.word	0x0802c3f0

08023f50 <_write_r>:
 8023f50:	b538      	push	{r3, r4, r5, lr}
 8023f52:	4d07      	ldr	r5, [pc, #28]	; (8023f70 <_write_r+0x20>)
 8023f54:	4604      	mov	r4, r0
 8023f56:	4608      	mov	r0, r1
 8023f58:	4611      	mov	r1, r2
 8023f5a:	2200      	movs	r2, #0
 8023f5c:	602a      	str	r2, [r5, #0]
 8023f5e:	461a      	mov	r2, r3
 8023f60:	f7dc ff6e 	bl	8000e40 <_write>
 8023f64:	1c43      	adds	r3, r0, #1
 8023f66:	d102      	bne.n	8023f6e <_write_r+0x1e>
 8023f68:	682b      	ldr	r3, [r5, #0]
 8023f6a:	b103      	cbz	r3, 8023f6e <_write_r+0x1e>
 8023f6c:	6023      	str	r3, [r4, #0]
 8023f6e:	bd38      	pop	{r3, r4, r5, pc}
 8023f70:	2000110c 	.word	0x2000110c

08023f74 <__swsetup_r>:
 8023f74:	4b32      	ldr	r3, [pc, #200]	; (8024040 <__swsetup_r+0xcc>)
 8023f76:	b570      	push	{r4, r5, r6, lr}
 8023f78:	681d      	ldr	r5, [r3, #0]
 8023f7a:	4606      	mov	r6, r0
 8023f7c:	460c      	mov	r4, r1
 8023f7e:	b125      	cbz	r5, 8023f8a <__swsetup_r+0x16>
 8023f80:	69ab      	ldr	r3, [r5, #24]
 8023f82:	b913      	cbnz	r3, 8023f8a <__swsetup_r+0x16>
 8023f84:	4628      	mov	r0, r5
 8023f86:	f7fe f83b 	bl	8022000 <__sinit>
 8023f8a:	4b2e      	ldr	r3, [pc, #184]	; (8024044 <__swsetup_r+0xd0>)
 8023f8c:	429c      	cmp	r4, r3
 8023f8e:	d10f      	bne.n	8023fb0 <__swsetup_r+0x3c>
 8023f90:	686c      	ldr	r4, [r5, #4]
 8023f92:	89a3      	ldrh	r3, [r4, #12]
 8023f94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023f98:	0719      	lsls	r1, r3, #28
 8023f9a:	d42c      	bmi.n	8023ff6 <__swsetup_r+0x82>
 8023f9c:	06dd      	lsls	r5, r3, #27
 8023f9e:	d411      	bmi.n	8023fc4 <__swsetup_r+0x50>
 8023fa0:	2309      	movs	r3, #9
 8023fa2:	6033      	str	r3, [r6, #0]
 8023fa4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8023fa8:	81a3      	strh	r3, [r4, #12]
 8023faa:	f04f 30ff 	mov.w	r0, #4294967295
 8023fae:	e03e      	b.n	802402e <__swsetup_r+0xba>
 8023fb0:	4b25      	ldr	r3, [pc, #148]	; (8024048 <__swsetup_r+0xd4>)
 8023fb2:	429c      	cmp	r4, r3
 8023fb4:	d101      	bne.n	8023fba <__swsetup_r+0x46>
 8023fb6:	68ac      	ldr	r4, [r5, #8]
 8023fb8:	e7eb      	b.n	8023f92 <__swsetup_r+0x1e>
 8023fba:	4b24      	ldr	r3, [pc, #144]	; (802404c <__swsetup_r+0xd8>)
 8023fbc:	429c      	cmp	r4, r3
 8023fbe:	bf08      	it	eq
 8023fc0:	68ec      	ldreq	r4, [r5, #12]
 8023fc2:	e7e6      	b.n	8023f92 <__swsetup_r+0x1e>
 8023fc4:	0758      	lsls	r0, r3, #29
 8023fc6:	d512      	bpl.n	8023fee <__swsetup_r+0x7a>
 8023fc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023fca:	b141      	cbz	r1, 8023fde <__swsetup_r+0x6a>
 8023fcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023fd0:	4299      	cmp	r1, r3
 8023fd2:	d002      	beq.n	8023fda <__swsetup_r+0x66>
 8023fd4:	4630      	mov	r0, r6
 8023fd6:	f7fe fc63 	bl	80228a0 <_free_r>
 8023fda:	2300      	movs	r3, #0
 8023fdc:	6363      	str	r3, [r4, #52]	; 0x34
 8023fde:	89a3      	ldrh	r3, [r4, #12]
 8023fe0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8023fe4:	81a3      	strh	r3, [r4, #12]
 8023fe6:	2300      	movs	r3, #0
 8023fe8:	6063      	str	r3, [r4, #4]
 8023fea:	6923      	ldr	r3, [r4, #16]
 8023fec:	6023      	str	r3, [r4, #0]
 8023fee:	89a3      	ldrh	r3, [r4, #12]
 8023ff0:	f043 0308 	orr.w	r3, r3, #8
 8023ff4:	81a3      	strh	r3, [r4, #12]
 8023ff6:	6923      	ldr	r3, [r4, #16]
 8023ff8:	b94b      	cbnz	r3, 802400e <__swsetup_r+0x9a>
 8023ffa:	89a3      	ldrh	r3, [r4, #12]
 8023ffc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8024000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024004:	d003      	beq.n	802400e <__swsetup_r+0x9a>
 8024006:	4621      	mov	r1, r4
 8024008:	4630      	mov	r0, r6
 802400a:	f7fe fbd3 	bl	80227b4 <__smakebuf_r>
 802400e:	89a0      	ldrh	r0, [r4, #12]
 8024010:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024014:	f010 0301 	ands.w	r3, r0, #1
 8024018:	d00a      	beq.n	8024030 <__swsetup_r+0xbc>
 802401a:	2300      	movs	r3, #0
 802401c:	60a3      	str	r3, [r4, #8]
 802401e:	6963      	ldr	r3, [r4, #20]
 8024020:	425b      	negs	r3, r3
 8024022:	61a3      	str	r3, [r4, #24]
 8024024:	6923      	ldr	r3, [r4, #16]
 8024026:	b943      	cbnz	r3, 802403a <__swsetup_r+0xc6>
 8024028:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802402c:	d1ba      	bne.n	8023fa4 <__swsetup_r+0x30>
 802402e:	bd70      	pop	{r4, r5, r6, pc}
 8024030:	0781      	lsls	r1, r0, #30
 8024032:	bf58      	it	pl
 8024034:	6963      	ldrpl	r3, [r4, #20]
 8024036:	60a3      	str	r3, [r4, #8]
 8024038:	e7f4      	b.n	8024024 <__swsetup_r+0xb0>
 802403a:	2000      	movs	r0, #0
 802403c:	e7f7      	b.n	802402e <__swsetup_r+0xba>
 802403e:	bf00      	nop
 8024040:	20000108 	.word	0x20000108
 8024044:	0802c410 	.word	0x0802c410
 8024048:	0802c430 	.word	0x0802c430
 802404c:	0802c3f0 	.word	0x0802c3f0

08024050 <__register_exitproc>:
 8024050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024054:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8024110 <__register_exitproc+0xc0>
 8024058:	4606      	mov	r6, r0
 802405a:	f8d8 0000 	ldr.w	r0, [r8]
 802405e:	461f      	mov	r7, r3
 8024060:	460d      	mov	r5, r1
 8024062:	4691      	mov	r9, r2
 8024064:	f7fe fb7f 	bl	8022766 <__retarget_lock_acquire_recursive>
 8024068:	4b25      	ldr	r3, [pc, #148]	; (8024100 <__register_exitproc+0xb0>)
 802406a:	681c      	ldr	r4, [r3, #0]
 802406c:	b934      	cbnz	r4, 802407c <__register_exitproc+0x2c>
 802406e:	4c25      	ldr	r4, [pc, #148]	; (8024104 <__register_exitproc+0xb4>)
 8024070:	601c      	str	r4, [r3, #0]
 8024072:	4b25      	ldr	r3, [pc, #148]	; (8024108 <__register_exitproc+0xb8>)
 8024074:	b113      	cbz	r3, 802407c <__register_exitproc+0x2c>
 8024076:	681b      	ldr	r3, [r3, #0]
 8024078:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802407c:	6863      	ldr	r3, [r4, #4]
 802407e:	2b1f      	cmp	r3, #31
 8024080:	dd07      	ble.n	8024092 <__register_exitproc+0x42>
 8024082:	f8d8 0000 	ldr.w	r0, [r8]
 8024086:	f7fe fb70 	bl	802276a <__retarget_lock_release_recursive>
 802408a:	f04f 30ff 	mov.w	r0, #4294967295
 802408e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024092:	b34e      	cbz	r6, 80240e8 <__register_exitproc+0x98>
 8024094:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8024098:	b988      	cbnz	r0, 80240be <__register_exitproc+0x6e>
 802409a:	4b1c      	ldr	r3, [pc, #112]	; (802410c <__register_exitproc+0xbc>)
 802409c:	b923      	cbnz	r3, 80240a8 <__register_exitproc+0x58>
 802409e:	f8d8 0000 	ldr.w	r0, [r8]
 80240a2:	f7fe fb61 	bl	8022768 <__retarget_lock_release>
 80240a6:	e7f0      	b.n	802408a <__register_exitproc+0x3a>
 80240a8:	f44f 7084 	mov.w	r0, #264	; 0x108
 80240ac:	f7fe fbc2 	bl	8022834 <malloc>
 80240b0:	2800      	cmp	r0, #0
 80240b2:	d0f4      	beq.n	802409e <__register_exitproc+0x4e>
 80240b4:	2300      	movs	r3, #0
 80240b6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80240ba:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80240be:	6863      	ldr	r3, [r4, #4]
 80240c0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80240c4:	2201      	movs	r2, #1
 80240c6:	409a      	lsls	r2, r3
 80240c8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80240cc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80240d0:	4313      	orrs	r3, r2
 80240d2:	2e02      	cmp	r6, #2
 80240d4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80240d8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80240dc:	bf02      	ittt	eq
 80240de:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80240e2:	431a      	orreq	r2, r3
 80240e4:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80240e8:	6863      	ldr	r3, [r4, #4]
 80240ea:	f8d8 0000 	ldr.w	r0, [r8]
 80240ee:	1c5a      	adds	r2, r3, #1
 80240f0:	3302      	adds	r3, #2
 80240f2:	6062      	str	r2, [r4, #4]
 80240f4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80240f8:	f7fe fb37 	bl	802276a <__retarget_lock_release_recursive>
 80240fc:	2000      	movs	r0, #0
 80240fe:	e7c6      	b.n	802408e <__register_exitproc+0x3e>
 8024100:	200010f4 	.word	0x200010f4
 8024104:	20001068 	.word	0x20001068
 8024108:	00000000 	.word	0x00000000
 802410c:	08022835 	.word	0x08022835
 8024110:	20000174 	.word	0x20000174

08024114 <abs>:
 8024114:	2800      	cmp	r0, #0
 8024116:	bfb8      	it	lt
 8024118:	4240      	neglt	r0, r0
 802411a:	4770      	bx	lr

0802411c <__assert_func>:
 802411c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802411e:	4614      	mov	r4, r2
 8024120:	461a      	mov	r2, r3
 8024122:	4b09      	ldr	r3, [pc, #36]	; (8024148 <__assert_func+0x2c>)
 8024124:	681b      	ldr	r3, [r3, #0]
 8024126:	4605      	mov	r5, r0
 8024128:	68d8      	ldr	r0, [r3, #12]
 802412a:	b14c      	cbz	r4, 8024140 <__assert_func+0x24>
 802412c:	4b07      	ldr	r3, [pc, #28]	; (802414c <__assert_func+0x30>)
 802412e:	9100      	str	r1, [sp, #0]
 8024130:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8024134:	4906      	ldr	r1, [pc, #24]	; (8024150 <__assert_func+0x34>)
 8024136:	462b      	mov	r3, r5
 8024138:	f000 f854 	bl	80241e4 <fiprintf>
 802413c:	f7fd fda0 	bl	8021c80 <abort>
 8024140:	4b04      	ldr	r3, [pc, #16]	; (8024154 <__assert_func+0x38>)
 8024142:	461c      	mov	r4, r3
 8024144:	e7f3      	b.n	802412e <__assert_func+0x12>
 8024146:	bf00      	nop
 8024148:	20000108 	.word	0x20000108
 802414c:	0802c848 	.word	0x0802c848
 8024150:	0802c855 	.word	0x0802c855
 8024154:	0802c883 	.word	0x0802c883

08024158 <_close_r>:
 8024158:	b538      	push	{r3, r4, r5, lr}
 802415a:	4d06      	ldr	r5, [pc, #24]	; (8024174 <_close_r+0x1c>)
 802415c:	2300      	movs	r3, #0
 802415e:	4604      	mov	r4, r0
 8024160:	4608      	mov	r0, r1
 8024162:	602b      	str	r3, [r5, #0]
 8024164:	f7dc fe88 	bl	8000e78 <_close>
 8024168:	1c43      	adds	r3, r0, #1
 802416a:	d102      	bne.n	8024172 <_close_r+0x1a>
 802416c:	682b      	ldr	r3, [r5, #0]
 802416e:	b103      	cbz	r3, 8024172 <_close_r+0x1a>
 8024170:	6023      	str	r3, [r4, #0]
 8024172:	bd38      	pop	{r3, r4, r5, pc}
 8024174:	2000110c 	.word	0x2000110c

08024178 <__sflags>:
 8024178:	780b      	ldrb	r3, [r1, #0]
 802417a:	2b72      	cmp	r3, #114	; 0x72
 802417c:	b530      	push	{r4, r5, lr}
 802417e:	d022      	beq.n	80241c6 <__sflags+0x4e>
 8024180:	2b77      	cmp	r3, #119	; 0x77
 8024182:	d024      	beq.n	80241ce <__sflags+0x56>
 8024184:	2b61      	cmp	r3, #97	; 0x61
 8024186:	d027      	beq.n	80241d8 <__sflags+0x60>
 8024188:	2316      	movs	r3, #22
 802418a:	6003      	str	r3, [r0, #0]
 802418c:	2000      	movs	r0, #0
 802418e:	bd30      	pop	{r4, r5, pc}
 8024190:	2d62      	cmp	r5, #98	; 0x62
 8024192:	d012      	beq.n	80241ba <__sflags+0x42>
 8024194:	2d78      	cmp	r5, #120	; 0x78
 8024196:	d013      	beq.n	80241c0 <__sflags+0x48>
 8024198:	2d2b      	cmp	r5, #43	; 0x2b
 802419a:	d107      	bne.n	80241ac <__sflags+0x34>
 802419c:	f020 001c 	bic.w	r0, r0, #28
 80241a0:	f023 0303 	bic.w	r3, r3, #3
 80241a4:	f040 0010 	orr.w	r0, r0, #16
 80241a8:	f043 0302 	orr.w	r3, r3, #2
 80241ac:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80241b0:	2d00      	cmp	r5, #0
 80241b2:	d1ed      	bne.n	8024190 <__sflags+0x18>
 80241b4:	4323      	orrs	r3, r4
 80241b6:	6013      	str	r3, [r2, #0]
 80241b8:	e7e9      	b.n	802418e <__sflags+0x16>
 80241ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80241be:	e7f5      	b.n	80241ac <__sflags+0x34>
 80241c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80241c4:	e7f2      	b.n	80241ac <__sflags+0x34>
 80241c6:	2400      	movs	r4, #0
 80241c8:	4623      	mov	r3, r4
 80241ca:	2004      	movs	r0, #4
 80241cc:	e7ee      	b.n	80241ac <__sflags+0x34>
 80241ce:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 80241d2:	2301      	movs	r3, #1
 80241d4:	2008      	movs	r0, #8
 80241d6:	e7e9      	b.n	80241ac <__sflags+0x34>
 80241d8:	f44f 7402 	mov.w	r4, #520	; 0x208
 80241dc:	2301      	movs	r3, #1
 80241de:	f44f 7084 	mov.w	r0, #264	; 0x108
 80241e2:	e7e3      	b.n	80241ac <__sflags+0x34>

080241e4 <fiprintf>:
 80241e4:	b40e      	push	{r1, r2, r3}
 80241e6:	b503      	push	{r0, r1, lr}
 80241e8:	4601      	mov	r1, r0
 80241ea:	ab03      	add	r3, sp, #12
 80241ec:	4805      	ldr	r0, [pc, #20]	; (8024204 <fiprintf+0x20>)
 80241ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80241f2:	6800      	ldr	r0, [r0, #0]
 80241f4:	9301      	str	r3, [sp, #4]
 80241f6:	f000 faff 	bl	80247f8 <_vfiprintf_r>
 80241fa:	b002      	add	sp, #8
 80241fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8024200:	b003      	add	sp, #12
 8024202:	4770      	bx	lr
 8024204:	20000108 	.word	0x20000108

08024208 <_fstat_r>:
 8024208:	b538      	push	{r3, r4, r5, lr}
 802420a:	4d07      	ldr	r5, [pc, #28]	; (8024228 <_fstat_r+0x20>)
 802420c:	2300      	movs	r3, #0
 802420e:	4604      	mov	r4, r0
 8024210:	4608      	mov	r0, r1
 8024212:	4611      	mov	r1, r2
 8024214:	602b      	str	r3, [r5, #0]
 8024216:	f7dc fe3b 	bl	8000e90 <_fstat>
 802421a:	1c43      	adds	r3, r0, #1
 802421c:	d102      	bne.n	8024224 <_fstat_r+0x1c>
 802421e:	682b      	ldr	r3, [r5, #0]
 8024220:	b103      	cbz	r3, 8024224 <_fstat_r+0x1c>
 8024222:	6023      	str	r3, [r4, #0]
 8024224:	bd38      	pop	{r3, r4, r5, pc}
 8024226:	bf00      	nop
 8024228:	2000110c 	.word	0x2000110c

0802422c <_findenv_r>:
 802422c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024230:	4607      	mov	r7, r0
 8024232:	4689      	mov	r9, r1
 8024234:	4616      	mov	r6, r2
 8024236:	f000 fe7d 	bl	8024f34 <__env_lock>
 802423a:	4b18      	ldr	r3, [pc, #96]	; (802429c <_findenv_r+0x70>)
 802423c:	681c      	ldr	r4, [r3, #0]
 802423e:	469a      	mov	sl, r3
 8024240:	b134      	cbz	r4, 8024250 <_findenv_r+0x24>
 8024242:	464b      	mov	r3, r9
 8024244:	4698      	mov	r8, r3
 8024246:	f813 1b01 	ldrb.w	r1, [r3], #1
 802424a:	b139      	cbz	r1, 802425c <_findenv_r+0x30>
 802424c:	293d      	cmp	r1, #61	; 0x3d
 802424e:	d1f9      	bne.n	8024244 <_findenv_r+0x18>
 8024250:	4638      	mov	r0, r7
 8024252:	f000 fe75 	bl	8024f40 <__env_unlock>
 8024256:	2000      	movs	r0, #0
 8024258:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802425c:	eba8 0809 	sub.w	r8, r8, r9
 8024260:	46a3      	mov	fp, r4
 8024262:	f854 0b04 	ldr.w	r0, [r4], #4
 8024266:	2800      	cmp	r0, #0
 8024268:	d0f2      	beq.n	8024250 <_findenv_r+0x24>
 802426a:	4642      	mov	r2, r8
 802426c:	4649      	mov	r1, r9
 802426e:	f000 fe41 	bl	8024ef4 <strncmp>
 8024272:	2800      	cmp	r0, #0
 8024274:	d1f4      	bne.n	8024260 <_findenv_r+0x34>
 8024276:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802427a:	eb03 0508 	add.w	r5, r3, r8
 802427e:	f813 3008 	ldrb.w	r3, [r3, r8]
 8024282:	2b3d      	cmp	r3, #61	; 0x3d
 8024284:	d1ec      	bne.n	8024260 <_findenv_r+0x34>
 8024286:	f8da 3000 	ldr.w	r3, [sl]
 802428a:	ebab 0303 	sub.w	r3, fp, r3
 802428e:	109b      	asrs	r3, r3, #2
 8024290:	4638      	mov	r0, r7
 8024292:	6033      	str	r3, [r6, #0]
 8024294:	f000 fe54 	bl	8024f40 <__env_unlock>
 8024298:	1c68      	adds	r0, r5, #1
 802429a:	e7dd      	b.n	8024258 <_findenv_r+0x2c>
 802429c:	20000000 	.word	0x20000000

080242a0 <_getenv_r>:
 80242a0:	b507      	push	{r0, r1, r2, lr}
 80242a2:	aa01      	add	r2, sp, #4
 80242a4:	f7ff ffc2 	bl	802422c <_findenv_r>
 80242a8:	b003      	add	sp, #12
 80242aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080242b0 <__gettzinfo>:
 80242b0:	4800      	ldr	r0, [pc, #0]	; (80242b4 <__gettzinfo+0x4>)
 80242b2:	4770      	bx	lr
 80242b4:	20000178 	.word	0x20000178

080242b8 <gmtime_r>:
 80242b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80242bc:	e9d0 6700 	ldrd	r6, r7, [r0]
 80242c0:	460c      	mov	r4, r1
 80242c2:	4a51      	ldr	r2, [pc, #324]	; (8024408 <gmtime_r+0x150>)
 80242c4:	2300      	movs	r3, #0
 80242c6:	4630      	mov	r0, r6
 80242c8:	4639      	mov	r1, r7
 80242ca:	f7dc fa73 	bl	80007b4 <__aeabi_ldivmod>
 80242ce:	4639      	mov	r1, r7
 80242d0:	4605      	mov	r5, r0
 80242d2:	4a4d      	ldr	r2, [pc, #308]	; (8024408 <gmtime_r+0x150>)
 80242d4:	4630      	mov	r0, r6
 80242d6:	2300      	movs	r3, #0
 80242d8:	f7dc fa6c 	bl	80007b4 <__aeabi_ldivmod>
 80242dc:	2a00      	cmp	r2, #0
 80242de:	bfbc      	itt	lt
 80242e0:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80242e4:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80242e8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80242ec:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 80242f0:	fbb2 f3f1 	udiv	r3, r2, r1
 80242f4:	fb01 2213 	mls	r2, r1, r3, r2
 80242f8:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80242fc:	bfac      	ite	ge
 80242fe:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 8024302:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 8024306:	60a3      	str	r3, [r4, #8]
 8024308:	fbb2 f3f1 	udiv	r3, r2, r1
 802430c:	fb01 2213 	mls	r2, r1, r3, r2
 8024310:	6063      	str	r3, [r4, #4]
 8024312:	6022      	str	r2, [r4, #0]
 8024314:	1cc3      	adds	r3, r0, #3
 8024316:	2207      	movs	r2, #7
 8024318:	fb93 f2f2 	sdiv	r2, r3, r2
 802431c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8024320:	1a9b      	subs	r3, r3, r2
 8024322:	bf48      	it	mi
 8024324:	3307      	addmi	r3, #7
 8024326:	2800      	cmp	r0, #0
 8024328:	61a3      	str	r3, [r4, #24]
 802432a:	bfb8      	it	lt
 802432c:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8024330:	4936      	ldr	r1, [pc, #216]	; (802440c <gmtime_r+0x154>)
 8024332:	bfae      	itee	ge
 8024334:	fb90 f1f1 	sdivge	r1, r0, r1
 8024338:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 802433c:	fb93 f1f1 	sdivlt	r1, r3, r1
 8024340:	4b33      	ldr	r3, [pc, #204]	; (8024410 <gmtime_r+0x158>)
 8024342:	fb03 0001 	mla	r0, r3, r1, r0
 8024346:	f648 62ac 	movw	r2, #36524	; 0x8eac
 802434a:	fbb0 f2f2 	udiv	r2, r0, r2
 802434e:	4402      	add	r2, r0
 8024350:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 8024354:	fbb0 f3fc 	udiv	r3, r0, ip
 8024358:	1ad2      	subs	r2, r2, r3
 802435a:	f240 176d 	movw	r7, #365	; 0x16d
 802435e:	4b2d      	ldr	r3, [pc, #180]	; (8024414 <gmtime_r+0x15c>)
 8024360:	fbb0 f3f3 	udiv	r3, r0, r3
 8024364:	2664      	movs	r6, #100	; 0x64
 8024366:	1ad3      	subs	r3, r2, r3
 8024368:	fbb3 f5f7 	udiv	r5, r3, r7
 802436c:	fbb3 f3fc 	udiv	r3, r3, ip
 8024370:	fbb5 f2f6 	udiv	r2, r5, r6
 8024374:	1ad3      	subs	r3, r2, r3
 8024376:	4403      	add	r3, r0
 8024378:	fb07 3315 	mls	r3, r7, r5, r3
 802437c:	2099      	movs	r0, #153	; 0x99
 802437e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8024382:	f10c 0c02 	add.w	ip, ip, #2
 8024386:	f103 0e01 	add.w	lr, r3, #1
 802438a:	fbbc f7f0 	udiv	r7, ip, r0
 802438e:	4378      	muls	r0, r7
 8024390:	3002      	adds	r0, #2
 8024392:	f04f 0805 	mov.w	r8, #5
 8024396:	fbb0 f0f8 	udiv	r0, r0, r8
 802439a:	ebae 0000 	sub.w	r0, lr, r0
 802439e:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80243a2:	45f4      	cmp	ip, lr
 80243a4:	bf94      	ite	ls
 80243a6:	f04f 0c02 	movls.w	ip, #2
 80243aa:	f06f 0c09 	mvnhi.w	ip, #9
 80243ae:	4467      	add	r7, ip
 80243b0:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80243b4:	fb0c 5101 	mla	r1, ip, r1, r5
 80243b8:	2f01      	cmp	r7, #1
 80243ba:	bf98      	it	ls
 80243bc:	3101      	addls	r1, #1
 80243be:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80243c2:	d30c      	bcc.n	80243de <gmtime_r+0x126>
 80243c4:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80243c8:	61e3      	str	r3, [r4, #28]
 80243ca:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 80243ce:	2300      	movs	r3, #0
 80243d0:	60e0      	str	r0, [r4, #12]
 80243d2:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80243d6:	6223      	str	r3, [r4, #32]
 80243d8:	4620      	mov	r0, r4
 80243da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80243de:	f015 0f03 	tst.w	r5, #3
 80243e2:	d102      	bne.n	80243ea <gmtime_r+0x132>
 80243e4:	fb06 5212 	mls	r2, r6, r2, r5
 80243e8:	b95a      	cbnz	r2, 8024402 <gmtime_r+0x14a>
 80243ea:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80243ee:	fbb5 f2f6 	udiv	r2, r5, r6
 80243f2:	fb06 5212 	mls	r2, r6, r2, r5
 80243f6:	fab2 f282 	clz	r2, r2
 80243fa:	0952      	lsrs	r2, r2, #5
 80243fc:	333b      	adds	r3, #59	; 0x3b
 80243fe:	4413      	add	r3, r2
 8024400:	e7e2      	b.n	80243c8 <gmtime_r+0x110>
 8024402:	2201      	movs	r2, #1
 8024404:	e7fa      	b.n	80243fc <gmtime_r+0x144>
 8024406:	bf00      	nop
 8024408:	00015180 	.word	0x00015180
 802440c:	00023ab1 	.word	0x00023ab1
 8024410:	fffdc54f 	.word	0xfffdc54f
 8024414:	00023ab0 	.word	0x00023ab0

08024418 <_isatty_r>:
 8024418:	b538      	push	{r3, r4, r5, lr}
 802441a:	4d06      	ldr	r5, [pc, #24]	; (8024434 <_isatty_r+0x1c>)
 802441c:	2300      	movs	r3, #0
 802441e:	4604      	mov	r4, r0
 8024420:	4608      	mov	r0, r1
 8024422:	602b      	str	r3, [r5, #0]
 8024424:	f7dc fd44 	bl	8000eb0 <_isatty>
 8024428:	1c43      	adds	r3, r0, #1
 802442a:	d102      	bne.n	8024432 <_isatty_r+0x1a>
 802442c:	682b      	ldr	r3, [r5, #0]
 802442e:	b103      	cbz	r3, 8024432 <_isatty_r+0x1a>
 8024430:	6023      	str	r3, [r4, #0]
 8024432:	bd38      	pop	{r3, r4, r5, pc}
 8024434:	2000110c 	.word	0x2000110c

08024438 <labs>:
 8024438:	2800      	cmp	r0, #0
 802443a:	bfb8      	it	lt
 802443c:	4240      	neglt	r0, r0
 802443e:	4770      	bx	lr

08024440 <_lseek_r>:
 8024440:	b538      	push	{r3, r4, r5, lr}
 8024442:	4d07      	ldr	r5, [pc, #28]	; (8024460 <_lseek_r+0x20>)
 8024444:	4604      	mov	r4, r0
 8024446:	4608      	mov	r0, r1
 8024448:	4611      	mov	r1, r2
 802444a:	2200      	movs	r2, #0
 802444c:	602a      	str	r2, [r5, #0]
 802444e:	461a      	mov	r2, r3
 8024450:	f7dc fd39 	bl	8000ec6 <_lseek>
 8024454:	1c43      	adds	r3, r0, #1
 8024456:	d102      	bne.n	802445e <_lseek_r+0x1e>
 8024458:	682b      	ldr	r3, [r5, #0]
 802445a:	b103      	cbz	r3, 802445e <_lseek_r+0x1e>
 802445c:	6023      	str	r3, [r4, #0]
 802445e:	bd38      	pop	{r3, r4, r5, pc}
 8024460:	2000110c 	.word	0x2000110c

08024464 <__ascii_mbtowc>:
 8024464:	b082      	sub	sp, #8
 8024466:	b901      	cbnz	r1, 802446a <__ascii_mbtowc+0x6>
 8024468:	a901      	add	r1, sp, #4
 802446a:	b142      	cbz	r2, 802447e <__ascii_mbtowc+0x1a>
 802446c:	b14b      	cbz	r3, 8024482 <__ascii_mbtowc+0x1e>
 802446e:	7813      	ldrb	r3, [r2, #0]
 8024470:	600b      	str	r3, [r1, #0]
 8024472:	7812      	ldrb	r2, [r2, #0]
 8024474:	1e10      	subs	r0, r2, #0
 8024476:	bf18      	it	ne
 8024478:	2001      	movne	r0, #1
 802447a:	b002      	add	sp, #8
 802447c:	4770      	bx	lr
 802447e:	4610      	mov	r0, r2
 8024480:	e7fb      	b.n	802447a <__ascii_mbtowc+0x16>
 8024482:	f06f 0001 	mvn.w	r0, #1
 8024486:	e7f8      	b.n	802447a <__ascii_mbtowc+0x16>

08024488 <__malloc_lock>:
 8024488:	4801      	ldr	r0, [pc, #4]	; (8024490 <__malloc_lock+0x8>)
 802448a:	f7fe b96c 	b.w	8022766 <__retarget_lock_acquire_recursive>
 802448e:	bf00      	nop
 8024490:	20001104 	.word	0x20001104

08024494 <__malloc_unlock>:
 8024494:	4801      	ldr	r0, [pc, #4]	; (802449c <__malloc_unlock+0x8>)
 8024496:	f7fe b968 	b.w	802276a <__retarget_lock_release_recursive>
 802449a:	bf00      	nop
 802449c:	20001104 	.word	0x20001104

080244a0 <_realloc_r>:
 80244a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80244a2:	4607      	mov	r7, r0
 80244a4:	4614      	mov	r4, r2
 80244a6:	460e      	mov	r6, r1
 80244a8:	b921      	cbnz	r1, 80244b4 <_realloc_r+0x14>
 80244aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80244ae:	4611      	mov	r1, r2
 80244b0:	f7fe ba46 	b.w	8022940 <_malloc_r>
 80244b4:	b922      	cbnz	r2, 80244c0 <_realloc_r+0x20>
 80244b6:	f7fe f9f3 	bl	80228a0 <_free_r>
 80244ba:	4625      	mov	r5, r4
 80244bc:	4628      	mov	r0, r5
 80244be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80244c0:	f000 fd5e 	bl	8024f80 <_malloc_usable_size_r>
 80244c4:	42a0      	cmp	r0, r4
 80244c6:	d20f      	bcs.n	80244e8 <_realloc_r+0x48>
 80244c8:	4621      	mov	r1, r4
 80244ca:	4638      	mov	r0, r7
 80244cc:	f7fe fa38 	bl	8022940 <_malloc_r>
 80244d0:	4605      	mov	r5, r0
 80244d2:	2800      	cmp	r0, #0
 80244d4:	d0f2      	beq.n	80244bc <_realloc_r+0x1c>
 80244d6:	4631      	mov	r1, r6
 80244d8:	4622      	mov	r2, r4
 80244da:	f7fe f9bb 	bl	8022854 <memcpy>
 80244de:	4631      	mov	r1, r6
 80244e0:	4638      	mov	r0, r7
 80244e2:	f7fe f9dd 	bl	80228a0 <_free_r>
 80244e6:	e7e9      	b.n	80244bc <_realloc_r+0x1c>
 80244e8:	4635      	mov	r5, r6
 80244ea:	e7e7      	b.n	80244bc <_realloc_r+0x1c>

080244ec <__ssputs_r>:
 80244ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80244f0:	688e      	ldr	r6, [r1, #8]
 80244f2:	429e      	cmp	r6, r3
 80244f4:	4682      	mov	sl, r0
 80244f6:	460c      	mov	r4, r1
 80244f8:	4690      	mov	r8, r2
 80244fa:	461f      	mov	r7, r3
 80244fc:	d838      	bhi.n	8024570 <__ssputs_r+0x84>
 80244fe:	898a      	ldrh	r2, [r1, #12]
 8024500:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8024504:	d032      	beq.n	802456c <__ssputs_r+0x80>
 8024506:	6825      	ldr	r5, [r4, #0]
 8024508:	6909      	ldr	r1, [r1, #16]
 802450a:	eba5 0901 	sub.w	r9, r5, r1
 802450e:	6965      	ldr	r5, [r4, #20]
 8024510:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024514:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8024518:	3301      	adds	r3, #1
 802451a:	444b      	add	r3, r9
 802451c:	106d      	asrs	r5, r5, #1
 802451e:	429d      	cmp	r5, r3
 8024520:	bf38      	it	cc
 8024522:	461d      	movcc	r5, r3
 8024524:	0553      	lsls	r3, r2, #21
 8024526:	d531      	bpl.n	802458c <__ssputs_r+0xa0>
 8024528:	4629      	mov	r1, r5
 802452a:	f7fe fa09 	bl	8022940 <_malloc_r>
 802452e:	4606      	mov	r6, r0
 8024530:	b950      	cbnz	r0, 8024548 <__ssputs_r+0x5c>
 8024532:	230c      	movs	r3, #12
 8024534:	f8ca 3000 	str.w	r3, [sl]
 8024538:	89a3      	ldrh	r3, [r4, #12]
 802453a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802453e:	81a3      	strh	r3, [r4, #12]
 8024540:	f04f 30ff 	mov.w	r0, #4294967295
 8024544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024548:	6921      	ldr	r1, [r4, #16]
 802454a:	464a      	mov	r2, r9
 802454c:	f7fe f982 	bl	8022854 <memcpy>
 8024550:	89a3      	ldrh	r3, [r4, #12]
 8024552:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8024556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802455a:	81a3      	strh	r3, [r4, #12]
 802455c:	6126      	str	r6, [r4, #16]
 802455e:	6165      	str	r5, [r4, #20]
 8024560:	444e      	add	r6, r9
 8024562:	eba5 0509 	sub.w	r5, r5, r9
 8024566:	6026      	str	r6, [r4, #0]
 8024568:	60a5      	str	r5, [r4, #8]
 802456a:	463e      	mov	r6, r7
 802456c:	42be      	cmp	r6, r7
 802456e:	d900      	bls.n	8024572 <__ssputs_r+0x86>
 8024570:	463e      	mov	r6, r7
 8024572:	4632      	mov	r2, r6
 8024574:	6820      	ldr	r0, [r4, #0]
 8024576:	4641      	mov	r1, r8
 8024578:	f000 fce8 	bl	8024f4c <memmove>
 802457c:	68a3      	ldr	r3, [r4, #8]
 802457e:	6822      	ldr	r2, [r4, #0]
 8024580:	1b9b      	subs	r3, r3, r6
 8024582:	4432      	add	r2, r6
 8024584:	60a3      	str	r3, [r4, #8]
 8024586:	6022      	str	r2, [r4, #0]
 8024588:	2000      	movs	r0, #0
 802458a:	e7db      	b.n	8024544 <__ssputs_r+0x58>
 802458c:	462a      	mov	r2, r5
 802458e:	f7ff ff87 	bl	80244a0 <_realloc_r>
 8024592:	4606      	mov	r6, r0
 8024594:	2800      	cmp	r0, #0
 8024596:	d1e1      	bne.n	802455c <__ssputs_r+0x70>
 8024598:	6921      	ldr	r1, [r4, #16]
 802459a:	4650      	mov	r0, sl
 802459c:	f7fe f980 	bl	80228a0 <_free_r>
 80245a0:	e7c7      	b.n	8024532 <__ssputs_r+0x46>
	...

080245a4 <_svfiprintf_r>:
 80245a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80245a8:	4698      	mov	r8, r3
 80245aa:	898b      	ldrh	r3, [r1, #12]
 80245ac:	061b      	lsls	r3, r3, #24
 80245ae:	b09d      	sub	sp, #116	; 0x74
 80245b0:	4607      	mov	r7, r0
 80245b2:	460d      	mov	r5, r1
 80245b4:	4614      	mov	r4, r2
 80245b6:	d50e      	bpl.n	80245d6 <_svfiprintf_r+0x32>
 80245b8:	690b      	ldr	r3, [r1, #16]
 80245ba:	b963      	cbnz	r3, 80245d6 <_svfiprintf_r+0x32>
 80245bc:	2140      	movs	r1, #64	; 0x40
 80245be:	f7fe f9bf 	bl	8022940 <_malloc_r>
 80245c2:	6028      	str	r0, [r5, #0]
 80245c4:	6128      	str	r0, [r5, #16]
 80245c6:	b920      	cbnz	r0, 80245d2 <_svfiprintf_r+0x2e>
 80245c8:	230c      	movs	r3, #12
 80245ca:	603b      	str	r3, [r7, #0]
 80245cc:	f04f 30ff 	mov.w	r0, #4294967295
 80245d0:	e0d1      	b.n	8024776 <_svfiprintf_r+0x1d2>
 80245d2:	2340      	movs	r3, #64	; 0x40
 80245d4:	616b      	str	r3, [r5, #20]
 80245d6:	2300      	movs	r3, #0
 80245d8:	9309      	str	r3, [sp, #36]	; 0x24
 80245da:	2320      	movs	r3, #32
 80245dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80245e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80245e4:	2330      	movs	r3, #48	; 0x30
 80245e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8024790 <_svfiprintf_r+0x1ec>
 80245ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80245ee:	f04f 0901 	mov.w	r9, #1
 80245f2:	4623      	mov	r3, r4
 80245f4:	469a      	mov	sl, r3
 80245f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80245fa:	b10a      	cbz	r2, 8024600 <_svfiprintf_r+0x5c>
 80245fc:	2a25      	cmp	r2, #37	; 0x25
 80245fe:	d1f9      	bne.n	80245f4 <_svfiprintf_r+0x50>
 8024600:	ebba 0b04 	subs.w	fp, sl, r4
 8024604:	d00b      	beq.n	802461e <_svfiprintf_r+0x7a>
 8024606:	465b      	mov	r3, fp
 8024608:	4622      	mov	r2, r4
 802460a:	4629      	mov	r1, r5
 802460c:	4638      	mov	r0, r7
 802460e:	f7ff ff6d 	bl	80244ec <__ssputs_r>
 8024612:	3001      	adds	r0, #1
 8024614:	f000 80aa 	beq.w	802476c <_svfiprintf_r+0x1c8>
 8024618:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802461a:	445a      	add	r2, fp
 802461c:	9209      	str	r2, [sp, #36]	; 0x24
 802461e:	f89a 3000 	ldrb.w	r3, [sl]
 8024622:	2b00      	cmp	r3, #0
 8024624:	f000 80a2 	beq.w	802476c <_svfiprintf_r+0x1c8>
 8024628:	2300      	movs	r3, #0
 802462a:	f04f 32ff 	mov.w	r2, #4294967295
 802462e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024632:	f10a 0a01 	add.w	sl, sl, #1
 8024636:	9304      	str	r3, [sp, #16]
 8024638:	9307      	str	r3, [sp, #28]
 802463a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802463e:	931a      	str	r3, [sp, #104]	; 0x68
 8024640:	4654      	mov	r4, sl
 8024642:	2205      	movs	r2, #5
 8024644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024648:	4851      	ldr	r0, [pc, #324]	; (8024790 <_svfiprintf_r+0x1ec>)
 802464a:	f7db fe09 	bl	8000260 <memchr>
 802464e:	9a04      	ldr	r2, [sp, #16]
 8024650:	b9d8      	cbnz	r0, 802468a <_svfiprintf_r+0xe6>
 8024652:	06d0      	lsls	r0, r2, #27
 8024654:	bf44      	itt	mi
 8024656:	2320      	movmi	r3, #32
 8024658:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802465c:	0711      	lsls	r1, r2, #28
 802465e:	bf44      	itt	mi
 8024660:	232b      	movmi	r3, #43	; 0x2b
 8024662:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024666:	f89a 3000 	ldrb.w	r3, [sl]
 802466a:	2b2a      	cmp	r3, #42	; 0x2a
 802466c:	d015      	beq.n	802469a <_svfiprintf_r+0xf6>
 802466e:	9a07      	ldr	r2, [sp, #28]
 8024670:	4654      	mov	r4, sl
 8024672:	2000      	movs	r0, #0
 8024674:	f04f 0c0a 	mov.w	ip, #10
 8024678:	4621      	mov	r1, r4
 802467a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802467e:	3b30      	subs	r3, #48	; 0x30
 8024680:	2b09      	cmp	r3, #9
 8024682:	d94e      	bls.n	8024722 <_svfiprintf_r+0x17e>
 8024684:	b1b0      	cbz	r0, 80246b4 <_svfiprintf_r+0x110>
 8024686:	9207      	str	r2, [sp, #28]
 8024688:	e014      	b.n	80246b4 <_svfiprintf_r+0x110>
 802468a:	eba0 0308 	sub.w	r3, r0, r8
 802468e:	fa09 f303 	lsl.w	r3, r9, r3
 8024692:	4313      	orrs	r3, r2
 8024694:	9304      	str	r3, [sp, #16]
 8024696:	46a2      	mov	sl, r4
 8024698:	e7d2      	b.n	8024640 <_svfiprintf_r+0x9c>
 802469a:	9b03      	ldr	r3, [sp, #12]
 802469c:	1d19      	adds	r1, r3, #4
 802469e:	681b      	ldr	r3, [r3, #0]
 80246a0:	9103      	str	r1, [sp, #12]
 80246a2:	2b00      	cmp	r3, #0
 80246a4:	bfbb      	ittet	lt
 80246a6:	425b      	neglt	r3, r3
 80246a8:	f042 0202 	orrlt.w	r2, r2, #2
 80246ac:	9307      	strge	r3, [sp, #28]
 80246ae:	9307      	strlt	r3, [sp, #28]
 80246b0:	bfb8      	it	lt
 80246b2:	9204      	strlt	r2, [sp, #16]
 80246b4:	7823      	ldrb	r3, [r4, #0]
 80246b6:	2b2e      	cmp	r3, #46	; 0x2e
 80246b8:	d10c      	bne.n	80246d4 <_svfiprintf_r+0x130>
 80246ba:	7863      	ldrb	r3, [r4, #1]
 80246bc:	2b2a      	cmp	r3, #42	; 0x2a
 80246be:	d135      	bne.n	802472c <_svfiprintf_r+0x188>
 80246c0:	9b03      	ldr	r3, [sp, #12]
 80246c2:	1d1a      	adds	r2, r3, #4
 80246c4:	681b      	ldr	r3, [r3, #0]
 80246c6:	9203      	str	r2, [sp, #12]
 80246c8:	2b00      	cmp	r3, #0
 80246ca:	bfb8      	it	lt
 80246cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80246d0:	3402      	adds	r4, #2
 80246d2:	9305      	str	r3, [sp, #20]
 80246d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80247a0 <_svfiprintf_r+0x1fc>
 80246d8:	7821      	ldrb	r1, [r4, #0]
 80246da:	2203      	movs	r2, #3
 80246dc:	4650      	mov	r0, sl
 80246de:	f7db fdbf 	bl	8000260 <memchr>
 80246e2:	b140      	cbz	r0, 80246f6 <_svfiprintf_r+0x152>
 80246e4:	2340      	movs	r3, #64	; 0x40
 80246e6:	eba0 000a 	sub.w	r0, r0, sl
 80246ea:	fa03 f000 	lsl.w	r0, r3, r0
 80246ee:	9b04      	ldr	r3, [sp, #16]
 80246f0:	4303      	orrs	r3, r0
 80246f2:	3401      	adds	r4, #1
 80246f4:	9304      	str	r3, [sp, #16]
 80246f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80246fa:	4826      	ldr	r0, [pc, #152]	; (8024794 <_svfiprintf_r+0x1f0>)
 80246fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8024700:	2206      	movs	r2, #6
 8024702:	f7db fdad 	bl	8000260 <memchr>
 8024706:	2800      	cmp	r0, #0
 8024708:	d038      	beq.n	802477c <_svfiprintf_r+0x1d8>
 802470a:	4b23      	ldr	r3, [pc, #140]	; (8024798 <_svfiprintf_r+0x1f4>)
 802470c:	bb1b      	cbnz	r3, 8024756 <_svfiprintf_r+0x1b2>
 802470e:	9b03      	ldr	r3, [sp, #12]
 8024710:	3307      	adds	r3, #7
 8024712:	f023 0307 	bic.w	r3, r3, #7
 8024716:	3308      	adds	r3, #8
 8024718:	9303      	str	r3, [sp, #12]
 802471a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802471c:	4433      	add	r3, r6
 802471e:	9309      	str	r3, [sp, #36]	; 0x24
 8024720:	e767      	b.n	80245f2 <_svfiprintf_r+0x4e>
 8024722:	fb0c 3202 	mla	r2, ip, r2, r3
 8024726:	460c      	mov	r4, r1
 8024728:	2001      	movs	r0, #1
 802472a:	e7a5      	b.n	8024678 <_svfiprintf_r+0xd4>
 802472c:	2300      	movs	r3, #0
 802472e:	3401      	adds	r4, #1
 8024730:	9305      	str	r3, [sp, #20]
 8024732:	4619      	mov	r1, r3
 8024734:	f04f 0c0a 	mov.w	ip, #10
 8024738:	4620      	mov	r0, r4
 802473a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802473e:	3a30      	subs	r2, #48	; 0x30
 8024740:	2a09      	cmp	r2, #9
 8024742:	d903      	bls.n	802474c <_svfiprintf_r+0x1a8>
 8024744:	2b00      	cmp	r3, #0
 8024746:	d0c5      	beq.n	80246d4 <_svfiprintf_r+0x130>
 8024748:	9105      	str	r1, [sp, #20]
 802474a:	e7c3      	b.n	80246d4 <_svfiprintf_r+0x130>
 802474c:	fb0c 2101 	mla	r1, ip, r1, r2
 8024750:	4604      	mov	r4, r0
 8024752:	2301      	movs	r3, #1
 8024754:	e7f0      	b.n	8024738 <_svfiprintf_r+0x194>
 8024756:	ab03      	add	r3, sp, #12
 8024758:	9300      	str	r3, [sp, #0]
 802475a:	462a      	mov	r2, r5
 802475c:	4b0f      	ldr	r3, [pc, #60]	; (802479c <_svfiprintf_r+0x1f8>)
 802475e:	a904      	add	r1, sp, #16
 8024760:	4638      	mov	r0, r7
 8024762:	f3af 8000 	nop.w
 8024766:	1c42      	adds	r2, r0, #1
 8024768:	4606      	mov	r6, r0
 802476a:	d1d6      	bne.n	802471a <_svfiprintf_r+0x176>
 802476c:	89ab      	ldrh	r3, [r5, #12]
 802476e:	065b      	lsls	r3, r3, #25
 8024770:	f53f af2c 	bmi.w	80245cc <_svfiprintf_r+0x28>
 8024774:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024776:	b01d      	add	sp, #116	; 0x74
 8024778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802477c:	ab03      	add	r3, sp, #12
 802477e:	9300      	str	r3, [sp, #0]
 8024780:	462a      	mov	r2, r5
 8024782:	4b06      	ldr	r3, [pc, #24]	; (802479c <_svfiprintf_r+0x1f8>)
 8024784:	a904      	add	r1, sp, #16
 8024786:	4638      	mov	r0, r7
 8024788:	f000 f9d4 	bl	8024b34 <_printf_i>
 802478c:	e7eb      	b.n	8024766 <_svfiprintf_r+0x1c2>
 802478e:	bf00      	nop
 8024790:	0802c98f 	.word	0x0802c98f
 8024794:	0802c999 	.word	0x0802c999
 8024798:	00000000 	.word	0x00000000
 802479c:	080244ed 	.word	0x080244ed
 80247a0:	0802c995 	.word	0x0802c995

080247a4 <__sfputc_r>:
 80247a4:	6893      	ldr	r3, [r2, #8]
 80247a6:	3b01      	subs	r3, #1
 80247a8:	2b00      	cmp	r3, #0
 80247aa:	b410      	push	{r4}
 80247ac:	6093      	str	r3, [r2, #8]
 80247ae:	da08      	bge.n	80247c2 <__sfputc_r+0x1e>
 80247b0:	6994      	ldr	r4, [r2, #24]
 80247b2:	42a3      	cmp	r3, r4
 80247b4:	db01      	blt.n	80247ba <__sfputc_r+0x16>
 80247b6:	290a      	cmp	r1, #10
 80247b8:	d103      	bne.n	80247c2 <__sfputc_r+0x1e>
 80247ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80247be:	f7ff bb75 	b.w	8023eac <__swbuf_r>
 80247c2:	6813      	ldr	r3, [r2, #0]
 80247c4:	1c58      	adds	r0, r3, #1
 80247c6:	6010      	str	r0, [r2, #0]
 80247c8:	7019      	strb	r1, [r3, #0]
 80247ca:	4608      	mov	r0, r1
 80247cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80247d0:	4770      	bx	lr

080247d2 <__sfputs_r>:
 80247d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80247d4:	4606      	mov	r6, r0
 80247d6:	460f      	mov	r7, r1
 80247d8:	4614      	mov	r4, r2
 80247da:	18d5      	adds	r5, r2, r3
 80247dc:	42ac      	cmp	r4, r5
 80247de:	d101      	bne.n	80247e4 <__sfputs_r+0x12>
 80247e0:	2000      	movs	r0, #0
 80247e2:	e007      	b.n	80247f4 <__sfputs_r+0x22>
 80247e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80247e8:	463a      	mov	r2, r7
 80247ea:	4630      	mov	r0, r6
 80247ec:	f7ff ffda 	bl	80247a4 <__sfputc_r>
 80247f0:	1c43      	adds	r3, r0, #1
 80247f2:	d1f3      	bne.n	80247dc <__sfputs_r+0xa>
 80247f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080247f8 <_vfiprintf_r>:
 80247f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80247fc:	460d      	mov	r5, r1
 80247fe:	b09d      	sub	sp, #116	; 0x74
 8024800:	4614      	mov	r4, r2
 8024802:	4698      	mov	r8, r3
 8024804:	4606      	mov	r6, r0
 8024806:	b118      	cbz	r0, 8024810 <_vfiprintf_r+0x18>
 8024808:	6983      	ldr	r3, [r0, #24]
 802480a:	b90b      	cbnz	r3, 8024810 <_vfiprintf_r+0x18>
 802480c:	f7fd fbf8 	bl	8022000 <__sinit>
 8024810:	4b89      	ldr	r3, [pc, #548]	; (8024a38 <_vfiprintf_r+0x240>)
 8024812:	429d      	cmp	r5, r3
 8024814:	d11b      	bne.n	802484e <_vfiprintf_r+0x56>
 8024816:	6875      	ldr	r5, [r6, #4]
 8024818:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802481a:	07d9      	lsls	r1, r3, #31
 802481c:	d405      	bmi.n	802482a <_vfiprintf_r+0x32>
 802481e:	89ab      	ldrh	r3, [r5, #12]
 8024820:	059a      	lsls	r2, r3, #22
 8024822:	d402      	bmi.n	802482a <_vfiprintf_r+0x32>
 8024824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024826:	f7fd ff9e 	bl	8022766 <__retarget_lock_acquire_recursive>
 802482a:	89ab      	ldrh	r3, [r5, #12]
 802482c:	071b      	lsls	r3, r3, #28
 802482e:	d501      	bpl.n	8024834 <_vfiprintf_r+0x3c>
 8024830:	692b      	ldr	r3, [r5, #16]
 8024832:	b9eb      	cbnz	r3, 8024870 <_vfiprintf_r+0x78>
 8024834:	4629      	mov	r1, r5
 8024836:	4630      	mov	r0, r6
 8024838:	f7ff fb9c 	bl	8023f74 <__swsetup_r>
 802483c:	b1c0      	cbz	r0, 8024870 <_vfiprintf_r+0x78>
 802483e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024840:	07dc      	lsls	r4, r3, #31
 8024842:	d50e      	bpl.n	8024862 <_vfiprintf_r+0x6a>
 8024844:	f04f 30ff 	mov.w	r0, #4294967295
 8024848:	b01d      	add	sp, #116	; 0x74
 802484a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802484e:	4b7b      	ldr	r3, [pc, #492]	; (8024a3c <_vfiprintf_r+0x244>)
 8024850:	429d      	cmp	r5, r3
 8024852:	d101      	bne.n	8024858 <_vfiprintf_r+0x60>
 8024854:	68b5      	ldr	r5, [r6, #8]
 8024856:	e7df      	b.n	8024818 <_vfiprintf_r+0x20>
 8024858:	4b79      	ldr	r3, [pc, #484]	; (8024a40 <_vfiprintf_r+0x248>)
 802485a:	429d      	cmp	r5, r3
 802485c:	bf08      	it	eq
 802485e:	68f5      	ldreq	r5, [r6, #12]
 8024860:	e7da      	b.n	8024818 <_vfiprintf_r+0x20>
 8024862:	89ab      	ldrh	r3, [r5, #12]
 8024864:	0598      	lsls	r0, r3, #22
 8024866:	d4ed      	bmi.n	8024844 <_vfiprintf_r+0x4c>
 8024868:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802486a:	f7fd ff7e 	bl	802276a <__retarget_lock_release_recursive>
 802486e:	e7e9      	b.n	8024844 <_vfiprintf_r+0x4c>
 8024870:	2300      	movs	r3, #0
 8024872:	9309      	str	r3, [sp, #36]	; 0x24
 8024874:	2320      	movs	r3, #32
 8024876:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802487a:	f8cd 800c 	str.w	r8, [sp, #12]
 802487e:	2330      	movs	r3, #48	; 0x30
 8024880:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8024a44 <_vfiprintf_r+0x24c>
 8024884:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024888:	f04f 0901 	mov.w	r9, #1
 802488c:	4623      	mov	r3, r4
 802488e:	469a      	mov	sl, r3
 8024890:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024894:	b10a      	cbz	r2, 802489a <_vfiprintf_r+0xa2>
 8024896:	2a25      	cmp	r2, #37	; 0x25
 8024898:	d1f9      	bne.n	802488e <_vfiprintf_r+0x96>
 802489a:	ebba 0b04 	subs.w	fp, sl, r4
 802489e:	d00b      	beq.n	80248b8 <_vfiprintf_r+0xc0>
 80248a0:	465b      	mov	r3, fp
 80248a2:	4622      	mov	r2, r4
 80248a4:	4629      	mov	r1, r5
 80248a6:	4630      	mov	r0, r6
 80248a8:	f7ff ff93 	bl	80247d2 <__sfputs_r>
 80248ac:	3001      	adds	r0, #1
 80248ae:	f000 80aa 	beq.w	8024a06 <_vfiprintf_r+0x20e>
 80248b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80248b4:	445a      	add	r2, fp
 80248b6:	9209      	str	r2, [sp, #36]	; 0x24
 80248b8:	f89a 3000 	ldrb.w	r3, [sl]
 80248bc:	2b00      	cmp	r3, #0
 80248be:	f000 80a2 	beq.w	8024a06 <_vfiprintf_r+0x20e>
 80248c2:	2300      	movs	r3, #0
 80248c4:	f04f 32ff 	mov.w	r2, #4294967295
 80248c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80248cc:	f10a 0a01 	add.w	sl, sl, #1
 80248d0:	9304      	str	r3, [sp, #16]
 80248d2:	9307      	str	r3, [sp, #28]
 80248d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80248d8:	931a      	str	r3, [sp, #104]	; 0x68
 80248da:	4654      	mov	r4, sl
 80248dc:	2205      	movs	r2, #5
 80248de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80248e2:	4858      	ldr	r0, [pc, #352]	; (8024a44 <_vfiprintf_r+0x24c>)
 80248e4:	f7db fcbc 	bl	8000260 <memchr>
 80248e8:	9a04      	ldr	r2, [sp, #16]
 80248ea:	b9d8      	cbnz	r0, 8024924 <_vfiprintf_r+0x12c>
 80248ec:	06d1      	lsls	r1, r2, #27
 80248ee:	bf44      	itt	mi
 80248f0:	2320      	movmi	r3, #32
 80248f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80248f6:	0713      	lsls	r3, r2, #28
 80248f8:	bf44      	itt	mi
 80248fa:	232b      	movmi	r3, #43	; 0x2b
 80248fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024900:	f89a 3000 	ldrb.w	r3, [sl]
 8024904:	2b2a      	cmp	r3, #42	; 0x2a
 8024906:	d015      	beq.n	8024934 <_vfiprintf_r+0x13c>
 8024908:	9a07      	ldr	r2, [sp, #28]
 802490a:	4654      	mov	r4, sl
 802490c:	2000      	movs	r0, #0
 802490e:	f04f 0c0a 	mov.w	ip, #10
 8024912:	4621      	mov	r1, r4
 8024914:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024918:	3b30      	subs	r3, #48	; 0x30
 802491a:	2b09      	cmp	r3, #9
 802491c:	d94e      	bls.n	80249bc <_vfiprintf_r+0x1c4>
 802491e:	b1b0      	cbz	r0, 802494e <_vfiprintf_r+0x156>
 8024920:	9207      	str	r2, [sp, #28]
 8024922:	e014      	b.n	802494e <_vfiprintf_r+0x156>
 8024924:	eba0 0308 	sub.w	r3, r0, r8
 8024928:	fa09 f303 	lsl.w	r3, r9, r3
 802492c:	4313      	orrs	r3, r2
 802492e:	9304      	str	r3, [sp, #16]
 8024930:	46a2      	mov	sl, r4
 8024932:	e7d2      	b.n	80248da <_vfiprintf_r+0xe2>
 8024934:	9b03      	ldr	r3, [sp, #12]
 8024936:	1d19      	adds	r1, r3, #4
 8024938:	681b      	ldr	r3, [r3, #0]
 802493a:	9103      	str	r1, [sp, #12]
 802493c:	2b00      	cmp	r3, #0
 802493e:	bfbb      	ittet	lt
 8024940:	425b      	neglt	r3, r3
 8024942:	f042 0202 	orrlt.w	r2, r2, #2
 8024946:	9307      	strge	r3, [sp, #28]
 8024948:	9307      	strlt	r3, [sp, #28]
 802494a:	bfb8      	it	lt
 802494c:	9204      	strlt	r2, [sp, #16]
 802494e:	7823      	ldrb	r3, [r4, #0]
 8024950:	2b2e      	cmp	r3, #46	; 0x2e
 8024952:	d10c      	bne.n	802496e <_vfiprintf_r+0x176>
 8024954:	7863      	ldrb	r3, [r4, #1]
 8024956:	2b2a      	cmp	r3, #42	; 0x2a
 8024958:	d135      	bne.n	80249c6 <_vfiprintf_r+0x1ce>
 802495a:	9b03      	ldr	r3, [sp, #12]
 802495c:	1d1a      	adds	r2, r3, #4
 802495e:	681b      	ldr	r3, [r3, #0]
 8024960:	9203      	str	r2, [sp, #12]
 8024962:	2b00      	cmp	r3, #0
 8024964:	bfb8      	it	lt
 8024966:	f04f 33ff 	movlt.w	r3, #4294967295
 802496a:	3402      	adds	r4, #2
 802496c:	9305      	str	r3, [sp, #20]
 802496e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8024a54 <_vfiprintf_r+0x25c>
 8024972:	7821      	ldrb	r1, [r4, #0]
 8024974:	2203      	movs	r2, #3
 8024976:	4650      	mov	r0, sl
 8024978:	f7db fc72 	bl	8000260 <memchr>
 802497c:	b140      	cbz	r0, 8024990 <_vfiprintf_r+0x198>
 802497e:	2340      	movs	r3, #64	; 0x40
 8024980:	eba0 000a 	sub.w	r0, r0, sl
 8024984:	fa03 f000 	lsl.w	r0, r3, r0
 8024988:	9b04      	ldr	r3, [sp, #16]
 802498a:	4303      	orrs	r3, r0
 802498c:	3401      	adds	r4, #1
 802498e:	9304      	str	r3, [sp, #16]
 8024990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024994:	482c      	ldr	r0, [pc, #176]	; (8024a48 <_vfiprintf_r+0x250>)
 8024996:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802499a:	2206      	movs	r2, #6
 802499c:	f7db fc60 	bl	8000260 <memchr>
 80249a0:	2800      	cmp	r0, #0
 80249a2:	d03f      	beq.n	8024a24 <_vfiprintf_r+0x22c>
 80249a4:	4b29      	ldr	r3, [pc, #164]	; (8024a4c <_vfiprintf_r+0x254>)
 80249a6:	bb1b      	cbnz	r3, 80249f0 <_vfiprintf_r+0x1f8>
 80249a8:	9b03      	ldr	r3, [sp, #12]
 80249aa:	3307      	adds	r3, #7
 80249ac:	f023 0307 	bic.w	r3, r3, #7
 80249b0:	3308      	adds	r3, #8
 80249b2:	9303      	str	r3, [sp, #12]
 80249b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80249b6:	443b      	add	r3, r7
 80249b8:	9309      	str	r3, [sp, #36]	; 0x24
 80249ba:	e767      	b.n	802488c <_vfiprintf_r+0x94>
 80249bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80249c0:	460c      	mov	r4, r1
 80249c2:	2001      	movs	r0, #1
 80249c4:	e7a5      	b.n	8024912 <_vfiprintf_r+0x11a>
 80249c6:	2300      	movs	r3, #0
 80249c8:	3401      	adds	r4, #1
 80249ca:	9305      	str	r3, [sp, #20]
 80249cc:	4619      	mov	r1, r3
 80249ce:	f04f 0c0a 	mov.w	ip, #10
 80249d2:	4620      	mov	r0, r4
 80249d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80249d8:	3a30      	subs	r2, #48	; 0x30
 80249da:	2a09      	cmp	r2, #9
 80249dc:	d903      	bls.n	80249e6 <_vfiprintf_r+0x1ee>
 80249de:	2b00      	cmp	r3, #0
 80249e0:	d0c5      	beq.n	802496e <_vfiprintf_r+0x176>
 80249e2:	9105      	str	r1, [sp, #20]
 80249e4:	e7c3      	b.n	802496e <_vfiprintf_r+0x176>
 80249e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80249ea:	4604      	mov	r4, r0
 80249ec:	2301      	movs	r3, #1
 80249ee:	e7f0      	b.n	80249d2 <_vfiprintf_r+0x1da>
 80249f0:	ab03      	add	r3, sp, #12
 80249f2:	9300      	str	r3, [sp, #0]
 80249f4:	462a      	mov	r2, r5
 80249f6:	4b16      	ldr	r3, [pc, #88]	; (8024a50 <_vfiprintf_r+0x258>)
 80249f8:	a904      	add	r1, sp, #16
 80249fa:	4630      	mov	r0, r6
 80249fc:	f3af 8000 	nop.w
 8024a00:	4607      	mov	r7, r0
 8024a02:	1c78      	adds	r0, r7, #1
 8024a04:	d1d6      	bne.n	80249b4 <_vfiprintf_r+0x1bc>
 8024a06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024a08:	07d9      	lsls	r1, r3, #31
 8024a0a:	d405      	bmi.n	8024a18 <_vfiprintf_r+0x220>
 8024a0c:	89ab      	ldrh	r3, [r5, #12]
 8024a0e:	059a      	lsls	r2, r3, #22
 8024a10:	d402      	bmi.n	8024a18 <_vfiprintf_r+0x220>
 8024a12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024a14:	f7fd fea9 	bl	802276a <__retarget_lock_release_recursive>
 8024a18:	89ab      	ldrh	r3, [r5, #12]
 8024a1a:	065b      	lsls	r3, r3, #25
 8024a1c:	f53f af12 	bmi.w	8024844 <_vfiprintf_r+0x4c>
 8024a20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024a22:	e711      	b.n	8024848 <_vfiprintf_r+0x50>
 8024a24:	ab03      	add	r3, sp, #12
 8024a26:	9300      	str	r3, [sp, #0]
 8024a28:	462a      	mov	r2, r5
 8024a2a:	4b09      	ldr	r3, [pc, #36]	; (8024a50 <_vfiprintf_r+0x258>)
 8024a2c:	a904      	add	r1, sp, #16
 8024a2e:	4630      	mov	r0, r6
 8024a30:	f000 f880 	bl	8024b34 <_printf_i>
 8024a34:	e7e4      	b.n	8024a00 <_vfiprintf_r+0x208>
 8024a36:	bf00      	nop
 8024a38:	0802c410 	.word	0x0802c410
 8024a3c:	0802c430 	.word	0x0802c430
 8024a40:	0802c3f0 	.word	0x0802c3f0
 8024a44:	0802c98f 	.word	0x0802c98f
 8024a48:	0802c999 	.word	0x0802c999
 8024a4c:	00000000 	.word	0x00000000
 8024a50:	080247d3 	.word	0x080247d3
 8024a54:	0802c995 	.word	0x0802c995

08024a58 <_printf_common>:
 8024a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024a5c:	4616      	mov	r6, r2
 8024a5e:	4699      	mov	r9, r3
 8024a60:	688a      	ldr	r2, [r1, #8]
 8024a62:	690b      	ldr	r3, [r1, #16]
 8024a64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8024a68:	4293      	cmp	r3, r2
 8024a6a:	bfb8      	it	lt
 8024a6c:	4613      	movlt	r3, r2
 8024a6e:	6033      	str	r3, [r6, #0]
 8024a70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8024a74:	4607      	mov	r7, r0
 8024a76:	460c      	mov	r4, r1
 8024a78:	b10a      	cbz	r2, 8024a7e <_printf_common+0x26>
 8024a7a:	3301      	adds	r3, #1
 8024a7c:	6033      	str	r3, [r6, #0]
 8024a7e:	6823      	ldr	r3, [r4, #0]
 8024a80:	0699      	lsls	r1, r3, #26
 8024a82:	bf42      	ittt	mi
 8024a84:	6833      	ldrmi	r3, [r6, #0]
 8024a86:	3302      	addmi	r3, #2
 8024a88:	6033      	strmi	r3, [r6, #0]
 8024a8a:	6825      	ldr	r5, [r4, #0]
 8024a8c:	f015 0506 	ands.w	r5, r5, #6
 8024a90:	d106      	bne.n	8024aa0 <_printf_common+0x48>
 8024a92:	f104 0a19 	add.w	sl, r4, #25
 8024a96:	68e3      	ldr	r3, [r4, #12]
 8024a98:	6832      	ldr	r2, [r6, #0]
 8024a9a:	1a9b      	subs	r3, r3, r2
 8024a9c:	42ab      	cmp	r3, r5
 8024a9e:	dc26      	bgt.n	8024aee <_printf_common+0x96>
 8024aa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8024aa4:	1e13      	subs	r3, r2, #0
 8024aa6:	6822      	ldr	r2, [r4, #0]
 8024aa8:	bf18      	it	ne
 8024aaa:	2301      	movne	r3, #1
 8024aac:	0692      	lsls	r2, r2, #26
 8024aae:	d42b      	bmi.n	8024b08 <_printf_common+0xb0>
 8024ab0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8024ab4:	4649      	mov	r1, r9
 8024ab6:	4638      	mov	r0, r7
 8024ab8:	47c0      	blx	r8
 8024aba:	3001      	adds	r0, #1
 8024abc:	d01e      	beq.n	8024afc <_printf_common+0xa4>
 8024abe:	6823      	ldr	r3, [r4, #0]
 8024ac0:	68e5      	ldr	r5, [r4, #12]
 8024ac2:	6832      	ldr	r2, [r6, #0]
 8024ac4:	f003 0306 	and.w	r3, r3, #6
 8024ac8:	2b04      	cmp	r3, #4
 8024aca:	bf08      	it	eq
 8024acc:	1aad      	subeq	r5, r5, r2
 8024ace:	68a3      	ldr	r3, [r4, #8]
 8024ad0:	6922      	ldr	r2, [r4, #16]
 8024ad2:	bf0c      	ite	eq
 8024ad4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8024ad8:	2500      	movne	r5, #0
 8024ada:	4293      	cmp	r3, r2
 8024adc:	bfc4      	itt	gt
 8024ade:	1a9b      	subgt	r3, r3, r2
 8024ae0:	18ed      	addgt	r5, r5, r3
 8024ae2:	2600      	movs	r6, #0
 8024ae4:	341a      	adds	r4, #26
 8024ae6:	42b5      	cmp	r5, r6
 8024ae8:	d11a      	bne.n	8024b20 <_printf_common+0xc8>
 8024aea:	2000      	movs	r0, #0
 8024aec:	e008      	b.n	8024b00 <_printf_common+0xa8>
 8024aee:	2301      	movs	r3, #1
 8024af0:	4652      	mov	r2, sl
 8024af2:	4649      	mov	r1, r9
 8024af4:	4638      	mov	r0, r7
 8024af6:	47c0      	blx	r8
 8024af8:	3001      	adds	r0, #1
 8024afa:	d103      	bne.n	8024b04 <_printf_common+0xac>
 8024afc:	f04f 30ff 	mov.w	r0, #4294967295
 8024b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024b04:	3501      	adds	r5, #1
 8024b06:	e7c6      	b.n	8024a96 <_printf_common+0x3e>
 8024b08:	18e1      	adds	r1, r4, r3
 8024b0a:	1c5a      	adds	r2, r3, #1
 8024b0c:	2030      	movs	r0, #48	; 0x30
 8024b0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8024b12:	4422      	add	r2, r4
 8024b14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8024b18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8024b1c:	3302      	adds	r3, #2
 8024b1e:	e7c7      	b.n	8024ab0 <_printf_common+0x58>
 8024b20:	2301      	movs	r3, #1
 8024b22:	4622      	mov	r2, r4
 8024b24:	4649      	mov	r1, r9
 8024b26:	4638      	mov	r0, r7
 8024b28:	47c0      	blx	r8
 8024b2a:	3001      	adds	r0, #1
 8024b2c:	d0e6      	beq.n	8024afc <_printf_common+0xa4>
 8024b2e:	3601      	adds	r6, #1
 8024b30:	e7d9      	b.n	8024ae6 <_printf_common+0x8e>
	...

08024b34 <_printf_i>:
 8024b34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024b38:	460c      	mov	r4, r1
 8024b3a:	4691      	mov	r9, r2
 8024b3c:	7e27      	ldrb	r7, [r4, #24]
 8024b3e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024b40:	2f78      	cmp	r7, #120	; 0x78
 8024b42:	4680      	mov	r8, r0
 8024b44:	469a      	mov	sl, r3
 8024b46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8024b4a:	d807      	bhi.n	8024b5c <_printf_i+0x28>
 8024b4c:	2f62      	cmp	r7, #98	; 0x62
 8024b4e:	d80a      	bhi.n	8024b66 <_printf_i+0x32>
 8024b50:	2f00      	cmp	r7, #0
 8024b52:	f000 80d8 	beq.w	8024d06 <_printf_i+0x1d2>
 8024b56:	2f58      	cmp	r7, #88	; 0x58
 8024b58:	f000 80a3 	beq.w	8024ca2 <_printf_i+0x16e>
 8024b5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8024b60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8024b64:	e03a      	b.n	8024bdc <_printf_i+0xa8>
 8024b66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8024b6a:	2b15      	cmp	r3, #21
 8024b6c:	d8f6      	bhi.n	8024b5c <_printf_i+0x28>
 8024b6e:	a001      	add	r0, pc, #4	; (adr r0, 8024b74 <_printf_i+0x40>)
 8024b70:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8024b74:	08024bcd 	.word	0x08024bcd
 8024b78:	08024be1 	.word	0x08024be1
 8024b7c:	08024b5d 	.word	0x08024b5d
 8024b80:	08024b5d 	.word	0x08024b5d
 8024b84:	08024b5d 	.word	0x08024b5d
 8024b88:	08024b5d 	.word	0x08024b5d
 8024b8c:	08024be1 	.word	0x08024be1
 8024b90:	08024b5d 	.word	0x08024b5d
 8024b94:	08024b5d 	.word	0x08024b5d
 8024b98:	08024b5d 	.word	0x08024b5d
 8024b9c:	08024b5d 	.word	0x08024b5d
 8024ba0:	08024ced 	.word	0x08024ced
 8024ba4:	08024c11 	.word	0x08024c11
 8024ba8:	08024ccf 	.word	0x08024ccf
 8024bac:	08024b5d 	.word	0x08024b5d
 8024bb0:	08024b5d 	.word	0x08024b5d
 8024bb4:	08024d0f 	.word	0x08024d0f
 8024bb8:	08024b5d 	.word	0x08024b5d
 8024bbc:	08024c11 	.word	0x08024c11
 8024bc0:	08024b5d 	.word	0x08024b5d
 8024bc4:	08024b5d 	.word	0x08024b5d
 8024bc8:	08024cd7 	.word	0x08024cd7
 8024bcc:	680b      	ldr	r3, [r1, #0]
 8024bce:	1d1a      	adds	r2, r3, #4
 8024bd0:	681b      	ldr	r3, [r3, #0]
 8024bd2:	600a      	str	r2, [r1, #0]
 8024bd4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8024bd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8024bdc:	2301      	movs	r3, #1
 8024bde:	e0a3      	b.n	8024d28 <_printf_i+0x1f4>
 8024be0:	6825      	ldr	r5, [r4, #0]
 8024be2:	6808      	ldr	r0, [r1, #0]
 8024be4:	062e      	lsls	r6, r5, #24
 8024be6:	f100 0304 	add.w	r3, r0, #4
 8024bea:	d50a      	bpl.n	8024c02 <_printf_i+0xce>
 8024bec:	6805      	ldr	r5, [r0, #0]
 8024bee:	600b      	str	r3, [r1, #0]
 8024bf0:	2d00      	cmp	r5, #0
 8024bf2:	da03      	bge.n	8024bfc <_printf_i+0xc8>
 8024bf4:	232d      	movs	r3, #45	; 0x2d
 8024bf6:	426d      	negs	r5, r5
 8024bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024bfc:	485e      	ldr	r0, [pc, #376]	; (8024d78 <_printf_i+0x244>)
 8024bfe:	230a      	movs	r3, #10
 8024c00:	e019      	b.n	8024c36 <_printf_i+0x102>
 8024c02:	f015 0f40 	tst.w	r5, #64	; 0x40
 8024c06:	6805      	ldr	r5, [r0, #0]
 8024c08:	600b      	str	r3, [r1, #0]
 8024c0a:	bf18      	it	ne
 8024c0c:	b22d      	sxthne	r5, r5
 8024c0e:	e7ef      	b.n	8024bf0 <_printf_i+0xbc>
 8024c10:	680b      	ldr	r3, [r1, #0]
 8024c12:	6825      	ldr	r5, [r4, #0]
 8024c14:	1d18      	adds	r0, r3, #4
 8024c16:	6008      	str	r0, [r1, #0]
 8024c18:	0628      	lsls	r0, r5, #24
 8024c1a:	d501      	bpl.n	8024c20 <_printf_i+0xec>
 8024c1c:	681d      	ldr	r5, [r3, #0]
 8024c1e:	e002      	b.n	8024c26 <_printf_i+0xf2>
 8024c20:	0669      	lsls	r1, r5, #25
 8024c22:	d5fb      	bpl.n	8024c1c <_printf_i+0xe8>
 8024c24:	881d      	ldrh	r5, [r3, #0]
 8024c26:	4854      	ldr	r0, [pc, #336]	; (8024d78 <_printf_i+0x244>)
 8024c28:	2f6f      	cmp	r7, #111	; 0x6f
 8024c2a:	bf0c      	ite	eq
 8024c2c:	2308      	moveq	r3, #8
 8024c2e:	230a      	movne	r3, #10
 8024c30:	2100      	movs	r1, #0
 8024c32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8024c36:	6866      	ldr	r6, [r4, #4]
 8024c38:	60a6      	str	r6, [r4, #8]
 8024c3a:	2e00      	cmp	r6, #0
 8024c3c:	bfa2      	ittt	ge
 8024c3e:	6821      	ldrge	r1, [r4, #0]
 8024c40:	f021 0104 	bicge.w	r1, r1, #4
 8024c44:	6021      	strge	r1, [r4, #0]
 8024c46:	b90d      	cbnz	r5, 8024c4c <_printf_i+0x118>
 8024c48:	2e00      	cmp	r6, #0
 8024c4a:	d04d      	beq.n	8024ce8 <_printf_i+0x1b4>
 8024c4c:	4616      	mov	r6, r2
 8024c4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8024c52:	fb03 5711 	mls	r7, r3, r1, r5
 8024c56:	5dc7      	ldrb	r7, [r0, r7]
 8024c58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8024c5c:	462f      	mov	r7, r5
 8024c5e:	42bb      	cmp	r3, r7
 8024c60:	460d      	mov	r5, r1
 8024c62:	d9f4      	bls.n	8024c4e <_printf_i+0x11a>
 8024c64:	2b08      	cmp	r3, #8
 8024c66:	d10b      	bne.n	8024c80 <_printf_i+0x14c>
 8024c68:	6823      	ldr	r3, [r4, #0]
 8024c6a:	07df      	lsls	r7, r3, #31
 8024c6c:	d508      	bpl.n	8024c80 <_printf_i+0x14c>
 8024c6e:	6923      	ldr	r3, [r4, #16]
 8024c70:	6861      	ldr	r1, [r4, #4]
 8024c72:	4299      	cmp	r1, r3
 8024c74:	bfde      	ittt	le
 8024c76:	2330      	movle	r3, #48	; 0x30
 8024c78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8024c7c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8024c80:	1b92      	subs	r2, r2, r6
 8024c82:	6122      	str	r2, [r4, #16]
 8024c84:	f8cd a000 	str.w	sl, [sp]
 8024c88:	464b      	mov	r3, r9
 8024c8a:	aa03      	add	r2, sp, #12
 8024c8c:	4621      	mov	r1, r4
 8024c8e:	4640      	mov	r0, r8
 8024c90:	f7ff fee2 	bl	8024a58 <_printf_common>
 8024c94:	3001      	adds	r0, #1
 8024c96:	d14c      	bne.n	8024d32 <_printf_i+0x1fe>
 8024c98:	f04f 30ff 	mov.w	r0, #4294967295
 8024c9c:	b004      	add	sp, #16
 8024c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024ca2:	4835      	ldr	r0, [pc, #212]	; (8024d78 <_printf_i+0x244>)
 8024ca4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8024ca8:	6823      	ldr	r3, [r4, #0]
 8024caa:	680e      	ldr	r6, [r1, #0]
 8024cac:	061f      	lsls	r7, r3, #24
 8024cae:	f856 5b04 	ldr.w	r5, [r6], #4
 8024cb2:	600e      	str	r6, [r1, #0]
 8024cb4:	d514      	bpl.n	8024ce0 <_printf_i+0x1ac>
 8024cb6:	07d9      	lsls	r1, r3, #31
 8024cb8:	bf44      	itt	mi
 8024cba:	f043 0320 	orrmi.w	r3, r3, #32
 8024cbe:	6023      	strmi	r3, [r4, #0]
 8024cc0:	b91d      	cbnz	r5, 8024cca <_printf_i+0x196>
 8024cc2:	6823      	ldr	r3, [r4, #0]
 8024cc4:	f023 0320 	bic.w	r3, r3, #32
 8024cc8:	6023      	str	r3, [r4, #0]
 8024cca:	2310      	movs	r3, #16
 8024ccc:	e7b0      	b.n	8024c30 <_printf_i+0xfc>
 8024cce:	6823      	ldr	r3, [r4, #0]
 8024cd0:	f043 0320 	orr.w	r3, r3, #32
 8024cd4:	6023      	str	r3, [r4, #0]
 8024cd6:	2378      	movs	r3, #120	; 0x78
 8024cd8:	4828      	ldr	r0, [pc, #160]	; (8024d7c <_printf_i+0x248>)
 8024cda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8024cde:	e7e3      	b.n	8024ca8 <_printf_i+0x174>
 8024ce0:	065e      	lsls	r6, r3, #25
 8024ce2:	bf48      	it	mi
 8024ce4:	b2ad      	uxthmi	r5, r5
 8024ce6:	e7e6      	b.n	8024cb6 <_printf_i+0x182>
 8024ce8:	4616      	mov	r6, r2
 8024cea:	e7bb      	b.n	8024c64 <_printf_i+0x130>
 8024cec:	680b      	ldr	r3, [r1, #0]
 8024cee:	6826      	ldr	r6, [r4, #0]
 8024cf0:	6960      	ldr	r0, [r4, #20]
 8024cf2:	1d1d      	adds	r5, r3, #4
 8024cf4:	600d      	str	r5, [r1, #0]
 8024cf6:	0635      	lsls	r5, r6, #24
 8024cf8:	681b      	ldr	r3, [r3, #0]
 8024cfa:	d501      	bpl.n	8024d00 <_printf_i+0x1cc>
 8024cfc:	6018      	str	r0, [r3, #0]
 8024cfe:	e002      	b.n	8024d06 <_printf_i+0x1d2>
 8024d00:	0671      	lsls	r1, r6, #25
 8024d02:	d5fb      	bpl.n	8024cfc <_printf_i+0x1c8>
 8024d04:	8018      	strh	r0, [r3, #0]
 8024d06:	2300      	movs	r3, #0
 8024d08:	6123      	str	r3, [r4, #16]
 8024d0a:	4616      	mov	r6, r2
 8024d0c:	e7ba      	b.n	8024c84 <_printf_i+0x150>
 8024d0e:	680b      	ldr	r3, [r1, #0]
 8024d10:	1d1a      	adds	r2, r3, #4
 8024d12:	600a      	str	r2, [r1, #0]
 8024d14:	681e      	ldr	r6, [r3, #0]
 8024d16:	6862      	ldr	r2, [r4, #4]
 8024d18:	2100      	movs	r1, #0
 8024d1a:	4630      	mov	r0, r6
 8024d1c:	f7db faa0 	bl	8000260 <memchr>
 8024d20:	b108      	cbz	r0, 8024d26 <_printf_i+0x1f2>
 8024d22:	1b80      	subs	r0, r0, r6
 8024d24:	6060      	str	r0, [r4, #4]
 8024d26:	6863      	ldr	r3, [r4, #4]
 8024d28:	6123      	str	r3, [r4, #16]
 8024d2a:	2300      	movs	r3, #0
 8024d2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024d30:	e7a8      	b.n	8024c84 <_printf_i+0x150>
 8024d32:	6923      	ldr	r3, [r4, #16]
 8024d34:	4632      	mov	r2, r6
 8024d36:	4649      	mov	r1, r9
 8024d38:	4640      	mov	r0, r8
 8024d3a:	47d0      	blx	sl
 8024d3c:	3001      	adds	r0, #1
 8024d3e:	d0ab      	beq.n	8024c98 <_printf_i+0x164>
 8024d40:	6823      	ldr	r3, [r4, #0]
 8024d42:	079b      	lsls	r3, r3, #30
 8024d44:	d413      	bmi.n	8024d6e <_printf_i+0x23a>
 8024d46:	68e0      	ldr	r0, [r4, #12]
 8024d48:	9b03      	ldr	r3, [sp, #12]
 8024d4a:	4298      	cmp	r0, r3
 8024d4c:	bfb8      	it	lt
 8024d4e:	4618      	movlt	r0, r3
 8024d50:	e7a4      	b.n	8024c9c <_printf_i+0x168>
 8024d52:	2301      	movs	r3, #1
 8024d54:	4632      	mov	r2, r6
 8024d56:	4649      	mov	r1, r9
 8024d58:	4640      	mov	r0, r8
 8024d5a:	47d0      	blx	sl
 8024d5c:	3001      	adds	r0, #1
 8024d5e:	d09b      	beq.n	8024c98 <_printf_i+0x164>
 8024d60:	3501      	adds	r5, #1
 8024d62:	68e3      	ldr	r3, [r4, #12]
 8024d64:	9903      	ldr	r1, [sp, #12]
 8024d66:	1a5b      	subs	r3, r3, r1
 8024d68:	42ab      	cmp	r3, r5
 8024d6a:	dcf2      	bgt.n	8024d52 <_printf_i+0x21e>
 8024d6c:	e7eb      	b.n	8024d46 <_printf_i+0x212>
 8024d6e:	2500      	movs	r5, #0
 8024d70:	f104 0619 	add.w	r6, r4, #25
 8024d74:	e7f5      	b.n	8024d62 <_printf_i+0x22e>
 8024d76:	bf00      	nop
 8024d78:	0802c9a0 	.word	0x0802c9a0
 8024d7c:	0802c9b1 	.word	0x0802c9b1

08024d80 <_putc_r>:
 8024d80:	b570      	push	{r4, r5, r6, lr}
 8024d82:	460d      	mov	r5, r1
 8024d84:	4614      	mov	r4, r2
 8024d86:	4606      	mov	r6, r0
 8024d88:	b118      	cbz	r0, 8024d92 <_putc_r+0x12>
 8024d8a:	6983      	ldr	r3, [r0, #24]
 8024d8c:	b90b      	cbnz	r3, 8024d92 <_putc_r+0x12>
 8024d8e:	f7fd f937 	bl	8022000 <__sinit>
 8024d92:	4b1c      	ldr	r3, [pc, #112]	; (8024e04 <_putc_r+0x84>)
 8024d94:	429c      	cmp	r4, r3
 8024d96:	d124      	bne.n	8024de2 <_putc_r+0x62>
 8024d98:	6874      	ldr	r4, [r6, #4]
 8024d9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024d9c:	07d8      	lsls	r0, r3, #31
 8024d9e:	d405      	bmi.n	8024dac <_putc_r+0x2c>
 8024da0:	89a3      	ldrh	r3, [r4, #12]
 8024da2:	0599      	lsls	r1, r3, #22
 8024da4:	d402      	bmi.n	8024dac <_putc_r+0x2c>
 8024da6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024da8:	f7fd fcdd 	bl	8022766 <__retarget_lock_acquire_recursive>
 8024dac:	68a3      	ldr	r3, [r4, #8]
 8024dae:	3b01      	subs	r3, #1
 8024db0:	2b00      	cmp	r3, #0
 8024db2:	60a3      	str	r3, [r4, #8]
 8024db4:	da05      	bge.n	8024dc2 <_putc_r+0x42>
 8024db6:	69a2      	ldr	r2, [r4, #24]
 8024db8:	4293      	cmp	r3, r2
 8024dba:	db1c      	blt.n	8024df6 <_putc_r+0x76>
 8024dbc:	b2eb      	uxtb	r3, r5
 8024dbe:	2b0a      	cmp	r3, #10
 8024dc0:	d019      	beq.n	8024df6 <_putc_r+0x76>
 8024dc2:	6823      	ldr	r3, [r4, #0]
 8024dc4:	1c5a      	adds	r2, r3, #1
 8024dc6:	6022      	str	r2, [r4, #0]
 8024dc8:	701d      	strb	r5, [r3, #0]
 8024dca:	b2ed      	uxtb	r5, r5
 8024dcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024dce:	07da      	lsls	r2, r3, #31
 8024dd0:	d405      	bmi.n	8024dde <_putc_r+0x5e>
 8024dd2:	89a3      	ldrh	r3, [r4, #12]
 8024dd4:	059b      	lsls	r3, r3, #22
 8024dd6:	d402      	bmi.n	8024dde <_putc_r+0x5e>
 8024dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024dda:	f7fd fcc6 	bl	802276a <__retarget_lock_release_recursive>
 8024dde:	4628      	mov	r0, r5
 8024de0:	bd70      	pop	{r4, r5, r6, pc}
 8024de2:	4b09      	ldr	r3, [pc, #36]	; (8024e08 <_putc_r+0x88>)
 8024de4:	429c      	cmp	r4, r3
 8024de6:	d101      	bne.n	8024dec <_putc_r+0x6c>
 8024de8:	68b4      	ldr	r4, [r6, #8]
 8024dea:	e7d6      	b.n	8024d9a <_putc_r+0x1a>
 8024dec:	4b07      	ldr	r3, [pc, #28]	; (8024e0c <_putc_r+0x8c>)
 8024dee:	429c      	cmp	r4, r3
 8024df0:	bf08      	it	eq
 8024df2:	68f4      	ldreq	r4, [r6, #12]
 8024df4:	e7d1      	b.n	8024d9a <_putc_r+0x1a>
 8024df6:	4629      	mov	r1, r5
 8024df8:	4622      	mov	r2, r4
 8024dfa:	4630      	mov	r0, r6
 8024dfc:	f7ff f856 	bl	8023eac <__swbuf_r>
 8024e00:	4605      	mov	r5, r0
 8024e02:	e7e3      	b.n	8024dcc <_putc_r+0x4c>
 8024e04:	0802c410 	.word	0x0802c410
 8024e08:	0802c430 	.word	0x0802c430
 8024e0c:	0802c3f0 	.word	0x0802c3f0

08024e10 <_read_r>:
 8024e10:	b538      	push	{r3, r4, r5, lr}
 8024e12:	4d07      	ldr	r5, [pc, #28]	; (8024e30 <_read_r+0x20>)
 8024e14:	4604      	mov	r4, r0
 8024e16:	4608      	mov	r0, r1
 8024e18:	4611      	mov	r1, r2
 8024e1a:	2200      	movs	r2, #0
 8024e1c:	602a      	str	r2, [r5, #0]
 8024e1e:	461a      	mov	r2, r3
 8024e20:	f7db fff1 	bl	8000e06 <_read>
 8024e24:	1c43      	adds	r3, r0, #1
 8024e26:	d102      	bne.n	8024e2e <_read_r+0x1e>
 8024e28:	682b      	ldr	r3, [r5, #0]
 8024e2a:	b103      	cbz	r3, 8024e2e <_read_r+0x1e>
 8024e2c:	6023      	str	r3, [r4, #0]
 8024e2e:	bd38      	pop	{r3, r4, r5, pc}
 8024e30:	2000110c 	.word	0x2000110c

08024e34 <sniprintf>:
 8024e34:	b40c      	push	{r2, r3}
 8024e36:	b530      	push	{r4, r5, lr}
 8024e38:	4b17      	ldr	r3, [pc, #92]	; (8024e98 <sniprintf+0x64>)
 8024e3a:	1e0c      	subs	r4, r1, #0
 8024e3c:	681d      	ldr	r5, [r3, #0]
 8024e3e:	b09d      	sub	sp, #116	; 0x74
 8024e40:	da08      	bge.n	8024e54 <sniprintf+0x20>
 8024e42:	238b      	movs	r3, #139	; 0x8b
 8024e44:	602b      	str	r3, [r5, #0]
 8024e46:	f04f 30ff 	mov.w	r0, #4294967295
 8024e4a:	b01d      	add	sp, #116	; 0x74
 8024e4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024e50:	b002      	add	sp, #8
 8024e52:	4770      	bx	lr
 8024e54:	f44f 7302 	mov.w	r3, #520	; 0x208
 8024e58:	f8ad 3014 	strh.w	r3, [sp, #20]
 8024e5c:	bf14      	ite	ne
 8024e5e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8024e62:	4623      	moveq	r3, r4
 8024e64:	9304      	str	r3, [sp, #16]
 8024e66:	9307      	str	r3, [sp, #28]
 8024e68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8024e6c:	9002      	str	r0, [sp, #8]
 8024e6e:	9006      	str	r0, [sp, #24]
 8024e70:	f8ad 3016 	strh.w	r3, [sp, #22]
 8024e74:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8024e76:	ab21      	add	r3, sp, #132	; 0x84
 8024e78:	a902      	add	r1, sp, #8
 8024e7a:	4628      	mov	r0, r5
 8024e7c:	9301      	str	r3, [sp, #4]
 8024e7e:	f7ff fb91 	bl	80245a4 <_svfiprintf_r>
 8024e82:	1c43      	adds	r3, r0, #1
 8024e84:	bfbc      	itt	lt
 8024e86:	238b      	movlt	r3, #139	; 0x8b
 8024e88:	602b      	strlt	r3, [r5, #0]
 8024e8a:	2c00      	cmp	r4, #0
 8024e8c:	d0dd      	beq.n	8024e4a <sniprintf+0x16>
 8024e8e:	9b02      	ldr	r3, [sp, #8]
 8024e90:	2200      	movs	r2, #0
 8024e92:	701a      	strb	r2, [r3, #0]
 8024e94:	e7d9      	b.n	8024e4a <sniprintf+0x16>
 8024e96:	bf00      	nop
 8024e98:	20000108 	.word	0x20000108

08024e9c <siscanf>:
 8024e9c:	b40e      	push	{r1, r2, r3}
 8024e9e:	b510      	push	{r4, lr}
 8024ea0:	b09f      	sub	sp, #124	; 0x7c
 8024ea2:	ac21      	add	r4, sp, #132	; 0x84
 8024ea4:	f44f 7101 	mov.w	r1, #516	; 0x204
 8024ea8:	f854 2b04 	ldr.w	r2, [r4], #4
 8024eac:	9201      	str	r2, [sp, #4]
 8024eae:	f8ad 101c 	strh.w	r1, [sp, #28]
 8024eb2:	9004      	str	r0, [sp, #16]
 8024eb4:	9008      	str	r0, [sp, #32]
 8024eb6:	f7db f9c1 	bl	800023c <strlen>
 8024eba:	4b0c      	ldr	r3, [pc, #48]	; (8024eec <siscanf+0x50>)
 8024ebc:	9005      	str	r0, [sp, #20]
 8024ebe:	9009      	str	r0, [sp, #36]	; 0x24
 8024ec0:	930d      	str	r3, [sp, #52]	; 0x34
 8024ec2:	480b      	ldr	r0, [pc, #44]	; (8024ef0 <siscanf+0x54>)
 8024ec4:	9a01      	ldr	r2, [sp, #4]
 8024ec6:	6800      	ldr	r0, [r0, #0]
 8024ec8:	9403      	str	r4, [sp, #12]
 8024eca:	2300      	movs	r3, #0
 8024ecc:	9311      	str	r3, [sp, #68]	; 0x44
 8024ece:	9316      	str	r3, [sp, #88]	; 0x58
 8024ed0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8024ed4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8024ed8:	a904      	add	r1, sp, #16
 8024eda:	4623      	mov	r3, r4
 8024edc:	f000 f8b2 	bl	8025044 <__ssvfiscanf_r>
 8024ee0:	b01f      	add	sp, #124	; 0x7c
 8024ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024ee6:	b003      	add	sp, #12
 8024ee8:	4770      	bx	lr
 8024eea:	bf00      	nop
 8024eec:	08022c3b 	.word	0x08022c3b
 8024ef0:	20000108 	.word	0x20000108

08024ef4 <strncmp>:
 8024ef4:	b510      	push	{r4, lr}
 8024ef6:	b16a      	cbz	r2, 8024f14 <strncmp+0x20>
 8024ef8:	3901      	subs	r1, #1
 8024efa:	1884      	adds	r4, r0, r2
 8024efc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8024f00:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8024f04:	4293      	cmp	r3, r2
 8024f06:	d103      	bne.n	8024f10 <strncmp+0x1c>
 8024f08:	42a0      	cmp	r0, r4
 8024f0a:	d001      	beq.n	8024f10 <strncmp+0x1c>
 8024f0c:	2b00      	cmp	r3, #0
 8024f0e:	d1f5      	bne.n	8024efc <strncmp+0x8>
 8024f10:	1a98      	subs	r0, r3, r2
 8024f12:	bd10      	pop	{r4, pc}
 8024f14:	4610      	mov	r0, r2
 8024f16:	e7fc      	b.n	8024f12 <strncmp+0x1e>

08024f18 <__ascii_wctomb>:
 8024f18:	b149      	cbz	r1, 8024f2e <__ascii_wctomb+0x16>
 8024f1a:	2aff      	cmp	r2, #255	; 0xff
 8024f1c:	bf85      	ittet	hi
 8024f1e:	238a      	movhi	r3, #138	; 0x8a
 8024f20:	6003      	strhi	r3, [r0, #0]
 8024f22:	700a      	strbls	r2, [r1, #0]
 8024f24:	f04f 30ff 	movhi.w	r0, #4294967295
 8024f28:	bf98      	it	ls
 8024f2a:	2001      	movls	r0, #1
 8024f2c:	4770      	bx	lr
 8024f2e:	4608      	mov	r0, r1
 8024f30:	4770      	bx	lr
	...

08024f34 <__env_lock>:
 8024f34:	4801      	ldr	r0, [pc, #4]	; (8024f3c <__env_lock+0x8>)
 8024f36:	f7fd bc16 	b.w	8022766 <__retarget_lock_acquire_recursive>
 8024f3a:	bf00      	nop
 8024f3c:	20001102 	.word	0x20001102

08024f40 <__env_unlock>:
 8024f40:	4801      	ldr	r0, [pc, #4]	; (8024f48 <__env_unlock+0x8>)
 8024f42:	f7fd bc12 	b.w	802276a <__retarget_lock_release_recursive>
 8024f46:	bf00      	nop
 8024f48:	20001102 	.word	0x20001102

08024f4c <memmove>:
 8024f4c:	4288      	cmp	r0, r1
 8024f4e:	b510      	push	{r4, lr}
 8024f50:	eb01 0402 	add.w	r4, r1, r2
 8024f54:	d902      	bls.n	8024f5c <memmove+0x10>
 8024f56:	4284      	cmp	r4, r0
 8024f58:	4623      	mov	r3, r4
 8024f5a:	d807      	bhi.n	8024f6c <memmove+0x20>
 8024f5c:	1e43      	subs	r3, r0, #1
 8024f5e:	42a1      	cmp	r1, r4
 8024f60:	d008      	beq.n	8024f74 <memmove+0x28>
 8024f62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024f66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8024f6a:	e7f8      	b.n	8024f5e <memmove+0x12>
 8024f6c:	4402      	add	r2, r0
 8024f6e:	4601      	mov	r1, r0
 8024f70:	428a      	cmp	r2, r1
 8024f72:	d100      	bne.n	8024f76 <memmove+0x2a>
 8024f74:	bd10      	pop	{r4, pc}
 8024f76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8024f7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8024f7e:	e7f7      	b.n	8024f70 <memmove+0x24>

08024f80 <_malloc_usable_size_r>:
 8024f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024f84:	1f18      	subs	r0, r3, #4
 8024f86:	2b00      	cmp	r3, #0
 8024f88:	bfbc      	itt	lt
 8024f8a:	580b      	ldrlt	r3, [r1, r0]
 8024f8c:	18c0      	addlt	r0, r0, r3
 8024f8e:	4770      	bx	lr

08024f90 <_sungetc_r>:
 8024f90:	b538      	push	{r3, r4, r5, lr}
 8024f92:	1c4b      	adds	r3, r1, #1
 8024f94:	4614      	mov	r4, r2
 8024f96:	d103      	bne.n	8024fa0 <_sungetc_r+0x10>
 8024f98:	f04f 35ff 	mov.w	r5, #4294967295
 8024f9c:	4628      	mov	r0, r5
 8024f9e:	bd38      	pop	{r3, r4, r5, pc}
 8024fa0:	8993      	ldrh	r3, [r2, #12]
 8024fa2:	f023 0320 	bic.w	r3, r3, #32
 8024fa6:	8193      	strh	r3, [r2, #12]
 8024fa8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8024faa:	6852      	ldr	r2, [r2, #4]
 8024fac:	b2cd      	uxtb	r5, r1
 8024fae:	b18b      	cbz	r3, 8024fd4 <_sungetc_r+0x44>
 8024fb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8024fb2:	4293      	cmp	r3, r2
 8024fb4:	dd08      	ble.n	8024fc8 <_sungetc_r+0x38>
 8024fb6:	6823      	ldr	r3, [r4, #0]
 8024fb8:	1e5a      	subs	r2, r3, #1
 8024fba:	6022      	str	r2, [r4, #0]
 8024fbc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8024fc0:	6863      	ldr	r3, [r4, #4]
 8024fc2:	3301      	adds	r3, #1
 8024fc4:	6063      	str	r3, [r4, #4]
 8024fc6:	e7e9      	b.n	8024f9c <_sungetc_r+0xc>
 8024fc8:	4621      	mov	r1, r4
 8024fca:	f000 fb39 	bl	8025640 <__submore>
 8024fce:	2800      	cmp	r0, #0
 8024fd0:	d0f1      	beq.n	8024fb6 <_sungetc_r+0x26>
 8024fd2:	e7e1      	b.n	8024f98 <_sungetc_r+0x8>
 8024fd4:	6921      	ldr	r1, [r4, #16]
 8024fd6:	6823      	ldr	r3, [r4, #0]
 8024fd8:	b151      	cbz	r1, 8024ff0 <_sungetc_r+0x60>
 8024fda:	4299      	cmp	r1, r3
 8024fdc:	d208      	bcs.n	8024ff0 <_sungetc_r+0x60>
 8024fde:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8024fe2:	42a9      	cmp	r1, r5
 8024fe4:	d104      	bne.n	8024ff0 <_sungetc_r+0x60>
 8024fe6:	3b01      	subs	r3, #1
 8024fe8:	3201      	adds	r2, #1
 8024fea:	6023      	str	r3, [r4, #0]
 8024fec:	6062      	str	r2, [r4, #4]
 8024fee:	e7d5      	b.n	8024f9c <_sungetc_r+0xc>
 8024ff0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8024ff4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024ff8:	6363      	str	r3, [r4, #52]	; 0x34
 8024ffa:	2303      	movs	r3, #3
 8024ffc:	63a3      	str	r3, [r4, #56]	; 0x38
 8024ffe:	4623      	mov	r3, r4
 8025000:	f803 5f46 	strb.w	r5, [r3, #70]!
 8025004:	6023      	str	r3, [r4, #0]
 8025006:	2301      	movs	r3, #1
 8025008:	e7dc      	b.n	8024fc4 <_sungetc_r+0x34>

0802500a <__ssrefill_r>:
 802500a:	b510      	push	{r4, lr}
 802500c:	460c      	mov	r4, r1
 802500e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8025010:	b169      	cbz	r1, 802502e <__ssrefill_r+0x24>
 8025012:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025016:	4299      	cmp	r1, r3
 8025018:	d001      	beq.n	802501e <__ssrefill_r+0x14>
 802501a:	f7fd fc41 	bl	80228a0 <_free_r>
 802501e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025020:	6063      	str	r3, [r4, #4]
 8025022:	2000      	movs	r0, #0
 8025024:	6360      	str	r0, [r4, #52]	; 0x34
 8025026:	b113      	cbz	r3, 802502e <__ssrefill_r+0x24>
 8025028:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802502a:	6023      	str	r3, [r4, #0]
 802502c:	bd10      	pop	{r4, pc}
 802502e:	6923      	ldr	r3, [r4, #16]
 8025030:	6023      	str	r3, [r4, #0]
 8025032:	2300      	movs	r3, #0
 8025034:	6063      	str	r3, [r4, #4]
 8025036:	89a3      	ldrh	r3, [r4, #12]
 8025038:	f043 0320 	orr.w	r3, r3, #32
 802503c:	81a3      	strh	r3, [r4, #12]
 802503e:	f04f 30ff 	mov.w	r0, #4294967295
 8025042:	e7f3      	b.n	802502c <__ssrefill_r+0x22>

08025044 <__ssvfiscanf_r>:
 8025044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025048:	460c      	mov	r4, r1
 802504a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 802504e:	2100      	movs	r1, #0
 8025050:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8025054:	49b2      	ldr	r1, [pc, #712]	; (8025320 <__ssvfiscanf_r+0x2dc>)
 8025056:	91a0      	str	r1, [sp, #640]	; 0x280
 8025058:	f10d 0804 	add.w	r8, sp, #4
 802505c:	49b1      	ldr	r1, [pc, #708]	; (8025324 <__ssvfiscanf_r+0x2e0>)
 802505e:	4fb2      	ldr	r7, [pc, #712]	; (8025328 <__ssvfiscanf_r+0x2e4>)
 8025060:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 802532c <__ssvfiscanf_r+0x2e8>
 8025064:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8025068:	4606      	mov	r6, r0
 802506a:	91a1      	str	r1, [sp, #644]	; 0x284
 802506c:	9300      	str	r3, [sp, #0]
 802506e:	f892 a000 	ldrb.w	sl, [r2]
 8025072:	f1ba 0f00 	cmp.w	sl, #0
 8025076:	f000 8151 	beq.w	802531c <__ssvfiscanf_r+0x2d8>
 802507a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 802507e:	f013 0308 	ands.w	r3, r3, #8
 8025082:	f102 0501 	add.w	r5, r2, #1
 8025086:	d019      	beq.n	80250bc <__ssvfiscanf_r+0x78>
 8025088:	6863      	ldr	r3, [r4, #4]
 802508a:	2b00      	cmp	r3, #0
 802508c:	dd0f      	ble.n	80250ae <__ssvfiscanf_r+0x6a>
 802508e:	6823      	ldr	r3, [r4, #0]
 8025090:	781a      	ldrb	r2, [r3, #0]
 8025092:	5cba      	ldrb	r2, [r7, r2]
 8025094:	0712      	lsls	r2, r2, #28
 8025096:	d401      	bmi.n	802509c <__ssvfiscanf_r+0x58>
 8025098:	462a      	mov	r2, r5
 802509a:	e7e8      	b.n	802506e <__ssvfiscanf_r+0x2a>
 802509c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802509e:	3201      	adds	r2, #1
 80250a0:	9245      	str	r2, [sp, #276]	; 0x114
 80250a2:	6862      	ldr	r2, [r4, #4]
 80250a4:	3301      	adds	r3, #1
 80250a6:	3a01      	subs	r2, #1
 80250a8:	6062      	str	r2, [r4, #4]
 80250aa:	6023      	str	r3, [r4, #0]
 80250ac:	e7ec      	b.n	8025088 <__ssvfiscanf_r+0x44>
 80250ae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80250b0:	4621      	mov	r1, r4
 80250b2:	4630      	mov	r0, r6
 80250b4:	4798      	blx	r3
 80250b6:	2800      	cmp	r0, #0
 80250b8:	d0e9      	beq.n	802508e <__ssvfiscanf_r+0x4a>
 80250ba:	e7ed      	b.n	8025098 <__ssvfiscanf_r+0x54>
 80250bc:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80250c0:	f040 8083 	bne.w	80251ca <__ssvfiscanf_r+0x186>
 80250c4:	9341      	str	r3, [sp, #260]	; 0x104
 80250c6:	9343      	str	r3, [sp, #268]	; 0x10c
 80250c8:	7853      	ldrb	r3, [r2, #1]
 80250ca:	2b2a      	cmp	r3, #42	; 0x2a
 80250cc:	bf02      	ittt	eq
 80250ce:	2310      	moveq	r3, #16
 80250d0:	1c95      	addeq	r5, r2, #2
 80250d2:	9341      	streq	r3, [sp, #260]	; 0x104
 80250d4:	220a      	movs	r2, #10
 80250d6:	46ab      	mov	fp, r5
 80250d8:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80250dc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80250e0:	2b09      	cmp	r3, #9
 80250e2:	d91d      	bls.n	8025120 <__ssvfiscanf_r+0xdc>
 80250e4:	4891      	ldr	r0, [pc, #580]	; (802532c <__ssvfiscanf_r+0x2e8>)
 80250e6:	2203      	movs	r2, #3
 80250e8:	f7db f8ba 	bl	8000260 <memchr>
 80250ec:	b140      	cbz	r0, 8025100 <__ssvfiscanf_r+0xbc>
 80250ee:	2301      	movs	r3, #1
 80250f0:	eba0 0009 	sub.w	r0, r0, r9
 80250f4:	fa03 f000 	lsl.w	r0, r3, r0
 80250f8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80250fa:	4318      	orrs	r0, r3
 80250fc:	9041      	str	r0, [sp, #260]	; 0x104
 80250fe:	465d      	mov	r5, fp
 8025100:	f815 3b01 	ldrb.w	r3, [r5], #1
 8025104:	2b78      	cmp	r3, #120	; 0x78
 8025106:	d806      	bhi.n	8025116 <__ssvfiscanf_r+0xd2>
 8025108:	2b57      	cmp	r3, #87	; 0x57
 802510a:	d810      	bhi.n	802512e <__ssvfiscanf_r+0xea>
 802510c:	2b25      	cmp	r3, #37	; 0x25
 802510e:	d05c      	beq.n	80251ca <__ssvfiscanf_r+0x186>
 8025110:	d856      	bhi.n	80251c0 <__ssvfiscanf_r+0x17c>
 8025112:	2b00      	cmp	r3, #0
 8025114:	d074      	beq.n	8025200 <__ssvfiscanf_r+0x1bc>
 8025116:	2303      	movs	r3, #3
 8025118:	9347      	str	r3, [sp, #284]	; 0x11c
 802511a:	230a      	movs	r3, #10
 802511c:	9342      	str	r3, [sp, #264]	; 0x108
 802511e:	e081      	b.n	8025224 <__ssvfiscanf_r+0x1e0>
 8025120:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8025122:	fb02 1303 	mla	r3, r2, r3, r1
 8025126:	3b30      	subs	r3, #48	; 0x30
 8025128:	9343      	str	r3, [sp, #268]	; 0x10c
 802512a:	465d      	mov	r5, fp
 802512c:	e7d3      	b.n	80250d6 <__ssvfiscanf_r+0x92>
 802512e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8025132:	2a20      	cmp	r2, #32
 8025134:	d8ef      	bhi.n	8025116 <__ssvfiscanf_r+0xd2>
 8025136:	a101      	add	r1, pc, #4	; (adr r1, 802513c <__ssvfiscanf_r+0xf8>)
 8025138:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802513c:	0802520f 	.word	0x0802520f
 8025140:	08025117 	.word	0x08025117
 8025144:	08025117 	.word	0x08025117
 8025148:	0802526d 	.word	0x0802526d
 802514c:	08025117 	.word	0x08025117
 8025150:	08025117 	.word	0x08025117
 8025154:	08025117 	.word	0x08025117
 8025158:	08025117 	.word	0x08025117
 802515c:	08025117 	.word	0x08025117
 8025160:	08025117 	.word	0x08025117
 8025164:	08025117 	.word	0x08025117
 8025168:	08025283 	.word	0x08025283
 802516c:	08025259 	.word	0x08025259
 8025170:	080251c7 	.word	0x080251c7
 8025174:	080251c7 	.word	0x080251c7
 8025178:	080251c7 	.word	0x080251c7
 802517c:	08025117 	.word	0x08025117
 8025180:	0802525d 	.word	0x0802525d
 8025184:	08025117 	.word	0x08025117
 8025188:	08025117 	.word	0x08025117
 802518c:	08025117 	.word	0x08025117
 8025190:	08025117 	.word	0x08025117
 8025194:	08025293 	.word	0x08025293
 8025198:	08025265 	.word	0x08025265
 802519c:	08025207 	.word	0x08025207
 80251a0:	08025117 	.word	0x08025117
 80251a4:	08025117 	.word	0x08025117
 80251a8:	0802528f 	.word	0x0802528f
 80251ac:	08025117 	.word	0x08025117
 80251b0:	08025259 	.word	0x08025259
 80251b4:	08025117 	.word	0x08025117
 80251b8:	08025117 	.word	0x08025117
 80251bc:	0802520f 	.word	0x0802520f
 80251c0:	3b45      	subs	r3, #69	; 0x45
 80251c2:	2b02      	cmp	r3, #2
 80251c4:	d8a7      	bhi.n	8025116 <__ssvfiscanf_r+0xd2>
 80251c6:	2305      	movs	r3, #5
 80251c8:	e02b      	b.n	8025222 <__ssvfiscanf_r+0x1de>
 80251ca:	6863      	ldr	r3, [r4, #4]
 80251cc:	2b00      	cmp	r3, #0
 80251ce:	dd0d      	ble.n	80251ec <__ssvfiscanf_r+0x1a8>
 80251d0:	6823      	ldr	r3, [r4, #0]
 80251d2:	781a      	ldrb	r2, [r3, #0]
 80251d4:	4552      	cmp	r2, sl
 80251d6:	f040 80a1 	bne.w	802531c <__ssvfiscanf_r+0x2d8>
 80251da:	3301      	adds	r3, #1
 80251dc:	6862      	ldr	r2, [r4, #4]
 80251de:	6023      	str	r3, [r4, #0]
 80251e0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80251e2:	3a01      	subs	r2, #1
 80251e4:	3301      	adds	r3, #1
 80251e6:	6062      	str	r2, [r4, #4]
 80251e8:	9345      	str	r3, [sp, #276]	; 0x114
 80251ea:	e755      	b.n	8025098 <__ssvfiscanf_r+0x54>
 80251ec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80251ee:	4621      	mov	r1, r4
 80251f0:	4630      	mov	r0, r6
 80251f2:	4798      	blx	r3
 80251f4:	2800      	cmp	r0, #0
 80251f6:	d0eb      	beq.n	80251d0 <__ssvfiscanf_r+0x18c>
 80251f8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80251fa:	2800      	cmp	r0, #0
 80251fc:	f040 8084 	bne.w	8025308 <__ssvfiscanf_r+0x2c4>
 8025200:	f04f 30ff 	mov.w	r0, #4294967295
 8025204:	e086      	b.n	8025314 <__ssvfiscanf_r+0x2d0>
 8025206:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8025208:	f042 0220 	orr.w	r2, r2, #32
 802520c:	9241      	str	r2, [sp, #260]	; 0x104
 802520e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8025210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8025214:	9241      	str	r2, [sp, #260]	; 0x104
 8025216:	2210      	movs	r2, #16
 8025218:	2b6f      	cmp	r3, #111	; 0x6f
 802521a:	9242      	str	r2, [sp, #264]	; 0x108
 802521c:	bf34      	ite	cc
 802521e:	2303      	movcc	r3, #3
 8025220:	2304      	movcs	r3, #4
 8025222:	9347      	str	r3, [sp, #284]	; 0x11c
 8025224:	6863      	ldr	r3, [r4, #4]
 8025226:	2b00      	cmp	r3, #0
 8025228:	dd41      	ble.n	80252ae <__ssvfiscanf_r+0x26a>
 802522a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802522c:	0659      	lsls	r1, r3, #25
 802522e:	d404      	bmi.n	802523a <__ssvfiscanf_r+0x1f6>
 8025230:	6823      	ldr	r3, [r4, #0]
 8025232:	781a      	ldrb	r2, [r3, #0]
 8025234:	5cba      	ldrb	r2, [r7, r2]
 8025236:	0712      	lsls	r2, r2, #28
 8025238:	d440      	bmi.n	80252bc <__ssvfiscanf_r+0x278>
 802523a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 802523c:	2b02      	cmp	r3, #2
 802523e:	dc4f      	bgt.n	80252e0 <__ssvfiscanf_r+0x29c>
 8025240:	466b      	mov	r3, sp
 8025242:	4622      	mov	r2, r4
 8025244:	a941      	add	r1, sp, #260	; 0x104
 8025246:	4630      	mov	r0, r6
 8025248:	f000 f874 	bl	8025334 <_scanf_chars>
 802524c:	2801      	cmp	r0, #1
 802524e:	d065      	beq.n	802531c <__ssvfiscanf_r+0x2d8>
 8025250:	2802      	cmp	r0, #2
 8025252:	f47f af21 	bne.w	8025098 <__ssvfiscanf_r+0x54>
 8025256:	e7cf      	b.n	80251f8 <__ssvfiscanf_r+0x1b4>
 8025258:	220a      	movs	r2, #10
 802525a:	e7dd      	b.n	8025218 <__ssvfiscanf_r+0x1d4>
 802525c:	2300      	movs	r3, #0
 802525e:	9342      	str	r3, [sp, #264]	; 0x108
 8025260:	2303      	movs	r3, #3
 8025262:	e7de      	b.n	8025222 <__ssvfiscanf_r+0x1de>
 8025264:	2308      	movs	r3, #8
 8025266:	9342      	str	r3, [sp, #264]	; 0x108
 8025268:	2304      	movs	r3, #4
 802526a:	e7da      	b.n	8025222 <__ssvfiscanf_r+0x1de>
 802526c:	4629      	mov	r1, r5
 802526e:	4640      	mov	r0, r8
 8025270:	f000 f9ac 	bl	80255cc <__sccl>
 8025274:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8025276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802527a:	9341      	str	r3, [sp, #260]	; 0x104
 802527c:	4605      	mov	r5, r0
 802527e:	2301      	movs	r3, #1
 8025280:	e7cf      	b.n	8025222 <__ssvfiscanf_r+0x1de>
 8025282:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8025284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025288:	9341      	str	r3, [sp, #260]	; 0x104
 802528a:	2300      	movs	r3, #0
 802528c:	e7c9      	b.n	8025222 <__ssvfiscanf_r+0x1de>
 802528e:	2302      	movs	r3, #2
 8025290:	e7c7      	b.n	8025222 <__ssvfiscanf_r+0x1de>
 8025292:	9841      	ldr	r0, [sp, #260]	; 0x104
 8025294:	06c3      	lsls	r3, r0, #27
 8025296:	f53f aeff 	bmi.w	8025098 <__ssvfiscanf_r+0x54>
 802529a:	9b00      	ldr	r3, [sp, #0]
 802529c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802529e:	1d19      	adds	r1, r3, #4
 80252a0:	9100      	str	r1, [sp, #0]
 80252a2:	681b      	ldr	r3, [r3, #0]
 80252a4:	07c0      	lsls	r0, r0, #31
 80252a6:	bf4c      	ite	mi
 80252a8:	801a      	strhmi	r2, [r3, #0]
 80252aa:	601a      	strpl	r2, [r3, #0]
 80252ac:	e6f4      	b.n	8025098 <__ssvfiscanf_r+0x54>
 80252ae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80252b0:	4621      	mov	r1, r4
 80252b2:	4630      	mov	r0, r6
 80252b4:	4798      	blx	r3
 80252b6:	2800      	cmp	r0, #0
 80252b8:	d0b7      	beq.n	802522a <__ssvfiscanf_r+0x1e6>
 80252ba:	e79d      	b.n	80251f8 <__ssvfiscanf_r+0x1b4>
 80252bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80252be:	3201      	adds	r2, #1
 80252c0:	9245      	str	r2, [sp, #276]	; 0x114
 80252c2:	6862      	ldr	r2, [r4, #4]
 80252c4:	3a01      	subs	r2, #1
 80252c6:	2a00      	cmp	r2, #0
 80252c8:	6062      	str	r2, [r4, #4]
 80252ca:	dd02      	ble.n	80252d2 <__ssvfiscanf_r+0x28e>
 80252cc:	3301      	adds	r3, #1
 80252ce:	6023      	str	r3, [r4, #0]
 80252d0:	e7ae      	b.n	8025230 <__ssvfiscanf_r+0x1ec>
 80252d2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80252d4:	4621      	mov	r1, r4
 80252d6:	4630      	mov	r0, r6
 80252d8:	4798      	blx	r3
 80252da:	2800      	cmp	r0, #0
 80252dc:	d0a8      	beq.n	8025230 <__ssvfiscanf_r+0x1ec>
 80252de:	e78b      	b.n	80251f8 <__ssvfiscanf_r+0x1b4>
 80252e0:	2b04      	cmp	r3, #4
 80252e2:	dc06      	bgt.n	80252f2 <__ssvfiscanf_r+0x2ae>
 80252e4:	466b      	mov	r3, sp
 80252e6:	4622      	mov	r2, r4
 80252e8:	a941      	add	r1, sp, #260	; 0x104
 80252ea:	4630      	mov	r0, r6
 80252ec:	f000 f87a 	bl	80253e4 <_scanf_i>
 80252f0:	e7ac      	b.n	802524c <__ssvfiscanf_r+0x208>
 80252f2:	4b0f      	ldr	r3, [pc, #60]	; (8025330 <__ssvfiscanf_r+0x2ec>)
 80252f4:	2b00      	cmp	r3, #0
 80252f6:	f43f aecf 	beq.w	8025098 <__ssvfiscanf_r+0x54>
 80252fa:	466b      	mov	r3, sp
 80252fc:	4622      	mov	r2, r4
 80252fe:	a941      	add	r1, sp, #260	; 0x104
 8025300:	4630      	mov	r0, r6
 8025302:	f3af 8000 	nop.w
 8025306:	e7a1      	b.n	802524c <__ssvfiscanf_r+0x208>
 8025308:	89a3      	ldrh	r3, [r4, #12]
 802530a:	f013 0f40 	tst.w	r3, #64	; 0x40
 802530e:	bf18      	it	ne
 8025310:	f04f 30ff 	movne.w	r0, #4294967295
 8025314:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8025318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802531c:	9844      	ldr	r0, [sp, #272]	; 0x110
 802531e:	e7f9      	b.n	8025314 <__ssvfiscanf_r+0x2d0>
 8025320:	08024f91 	.word	0x08024f91
 8025324:	0802500b 	.word	0x0802500b
 8025328:	0802c885 	.word	0x0802c885
 802532c:	0802c995 	.word	0x0802c995
 8025330:	00000000 	.word	0x00000000

08025334 <_scanf_chars>:
 8025334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025338:	4615      	mov	r5, r2
 802533a:	688a      	ldr	r2, [r1, #8]
 802533c:	4680      	mov	r8, r0
 802533e:	460c      	mov	r4, r1
 8025340:	b932      	cbnz	r2, 8025350 <_scanf_chars+0x1c>
 8025342:	698a      	ldr	r2, [r1, #24]
 8025344:	2a00      	cmp	r2, #0
 8025346:	bf0c      	ite	eq
 8025348:	2201      	moveq	r2, #1
 802534a:	f04f 32ff 	movne.w	r2, #4294967295
 802534e:	608a      	str	r2, [r1, #8]
 8025350:	6822      	ldr	r2, [r4, #0]
 8025352:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80253e0 <_scanf_chars+0xac>
 8025356:	06d1      	lsls	r1, r2, #27
 8025358:	bf5f      	itttt	pl
 802535a:	681a      	ldrpl	r2, [r3, #0]
 802535c:	1d11      	addpl	r1, r2, #4
 802535e:	6019      	strpl	r1, [r3, #0]
 8025360:	6816      	ldrpl	r6, [r2, #0]
 8025362:	2700      	movs	r7, #0
 8025364:	69a0      	ldr	r0, [r4, #24]
 8025366:	b188      	cbz	r0, 802538c <_scanf_chars+0x58>
 8025368:	2801      	cmp	r0, #1
 802536a:	d107      	bne.n	802537c <_scanf_chars+0x48>
 802536c:	682b      	ldr	r3, [r5, #0]
 802536e:	781a      	ldrb	r2, [r3, #0]
 8025370:	6963      	ldr	r3, [r4, #20]
 8025372:	5c9b      	ldrb	r3, [r3, r2]
 8025374:	b953      	cbnz	r3, 802538c <_scanf_chars+0x58>
 8025376:	bb27      	cbnz	r7, 80253c2 <_scanf_chars+0x8e>
 8025378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802537c:	2802      	cmp	r0, #2
 802537e:	d120      	bne.n	80253c2 <_scanf_chars+0x8e>
 8025380:	682b      	ldr	r3, [r5, #0]
 8025382:	781b      	ldrb	r3, [r3, #0]
 8025384:	f813 3009 	ldrb.w	r3, [r3, r9]
 8025388:	071b      	lsls	r3, r3, #28
 802538a:	d41a      	bmi.n	80253c2 <_scanf_chars+0x8e>
 802538c:	6823      	ldr	r3, [r4, #0]
 802538e:	06da      	lsls	r2, r3, #27
 8025390:	bf5e      	ittt	pl
 8025392:	682b      	ldrpl	r3, [r5, #0]
 8025394:	781b      	ldrbpl	r3, [r3, #0]
 8025396:	f806 3b01 	strbpl.w	r3, [r6], #1
 802539a:	682a      	ldr	r2, [r5, #0]
 802539c:	686b      	ldr	r3, [r5, #4]
 802539e:	3201      	adds	r2, #1
 80253a0:	602a      	str	r2, [r5, #0]
 80253a2:	68a2      	ldr	r2, [r4, #8]
 80253a4:	3b01      	subs	r3, #1
 80253a6:	3a01      	subs	r2, #1
 80253a8:	606b      	str	r3, [r5, #4]
 80253aa:	3701      	adds	r7, #1
 80253ac:	60a2      	str	r2, [r4, #8]
 80253ae:	b142      	cbz	r2, 80253c2 <_scanf_chars+0x8e>
 80253b0:	2b00      	cmp	r3, #0
 80253b2:	dcd7      	bgt.n	8025364 <_scanf_chars+0x30>
 80253b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80253b8:	4629      	mov	r1, r5
 80253ba:	4640      	mov	r0, r8
 80253bc:	4798      	blx	r3
 80253be:	2800      	cmp	r0, #0
 80253c0:	d0d0      	beq.n	8025364 <_scanf_chars+0x30>
 80253c2:	6823      	ldr	r3, [r4, #0]
 80253c4:	f013 0310 	ands.w	r3, r3, #16
 80253c8:	d105      	bne.n	80253d6 <_scanf_chars+0xa2>
 80253ca:	68e2      	ldr	r2, [r4, #12]
 80253cc:	3201      	adds	r2, #1
 80253ce:	60e2      	str	r2, [r4, #12]
 80253d0:	69a2      	ldr	r2, [r4, #24]
 80253d2:	b102      	cbz	r2, 80253d6 <_scanf_chars+0xa2>
 80253d4:	7033      	strb	r3, [r6, #0]
 80253d6:	6923      	ldr	r3, [r4, #16]
 80253d8:	441f      	add	r7, r3
 80253da:	6127      	str	r7, [r4, #16]
 80253dc:	2000      	movs	r0, #0
 80253de:	e7cb      	b.n	8025378 <_scanf_chars+0x44>
 80253e0:	0802c885 	.word	0x0802c885

080253e4 <_scanf_i>:
 80253e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80253e8:	4698      	mov	r8, r3
 80253ea:	4b74      	ldr	r3, [pc, #464]	; (80255bc <_scanf_i+0x1d8>)
 80253ec:	460c      	mov	r4, r1
 80253ee:	4682      	mov	sl, r0
 80253f0:	4616      	mov	r6, r2
 80253f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80253f6:	b087      	sub	sp, #28
 80253f8:	ab03      	add	r3, sp, #12
 80253fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80253fe:	4b70      	ldr	r3, [pc, #448]	; (80255c0 <_scanf_i+0x1dc>)
 8025400:	69a1      	ldr	r1, [r4, #24]
 8025402:	4a70      	ldr	r2, [pc, #448]	; (80255c4 <_scanf_i+0x1e0>)
 8025404:	2903      	cmp	r1, #3
 8025406:	bf18      	it	ne
 8025408:	461a      	movne	r2, r3
 802540a:	68a3      	ldr	r3, [r4, #8]
 802540c:	9201      	str	r2, [sp, #4]
 802540e:	1e5a      	subs	r2, r3, #1
 8025410:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8025414:	bf88      	it	hi
 8025416:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802541a:	4627      	mov	r7, r4
 802541c:	bf82      	ittt	hi
 802541e:	eb03 0905 	addhi.w	r9, r3, r5
 8025422:	f240 135d 	movwhi	r3, #349	; 0x15d
 8025426:	60a3      	strhi	r3, [r4, #8]
 8025428:	f857 3b1c 	ldr.w	r3, [r7], #28
 802542c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8025430:	bf98      	it	ls
 8025432:	f04f 0900 	movls.w	r9, #0
 8025436:	6023      	str	r3, [r4, #0]
 8025438:	463d      	mov	r5, r7
 802543a:	f04f 0b00 	mov.w	fp, #0
 802543e:	6831      	ldr	r1, [r6, #0]
 8025440:	ab03      	add	r3, sp, #12
 8025442:	7809      	ldrb	r1, [r1, #0]
 8025444:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8025448:	2202      	movs	r2, #2
 802544a:	f7da ff09 	bl	8000260 <memchr>
 802544e:	b328      	cbz	r0, 802549c <_scanf_i+0xb8>
 8025450:	f1bb 0f01 	cmp.w	fp, #1
 8025454:	d159      	bne.n	802550a <_scanf_i+0x126>
 8025456:	6862      	ldr	r2, [r4, #4]
 8025458:	b92a      	cbnz	r2, 8025466 <_scanf_i+0x82>
 802545a:	6822      	ldr	r2, [r4, #0]
 802545c:	2308      	movs	r3, #8
 802545e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8025462:	6063      	str	r3, [r4, #4]
 8025464:	6022      	str	r2, [r4, #0]
 8025466:	6822      	ldr	r2, [r4, #0]
 8025468:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 802546c:	6022      	str	r2, [r4, #0]
 802546e:	68a2      	ldr	r2, [r4, #8]
 8025470:	1e51      	subs	r1, r2, #1
 8025472:	60a1      	str	r1, [r4, #8]
 8025474:	b192      	cbz	r2, 802549c <_scanf_i+0xb8>
 8025476:	6832      	ldr	r2, [r6, #0]
 8025478:	1c51      	adds	r1, r2, #1
 802547a:	6031      	str	r1, [r6, #0]
 802547c:	7812      	ldrb	r2, [r2, #0]
 802547e:	f805 2b01 	strb.w	r2, [r5], #1
 8025482:	6872      	ldr	r2, [r6, #4]
 8025484:	3a01      	subs	r2, #1
 8025486:	2a00      	cmp	r2, #0
 8025488:	6072      	str	r2, [r6, #4]
 802548a:	dc07      	bgt.n	802549c <_scanf_i+0xb8>
 802548c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8025490:	4631      	mov	r1, r6
 8025492:	4650      	mov	r0, sl
 8025494:	4790      	blx	r2
 8025496:	2800      	cmp	r0, #0
 8025498:	f040 8085 	bne.w	80255a6 <_scanf_i+0x1c2>
 802549c:	f10b 0b01 	add.w	fp, fp, #1
 80254a0:	f1bb 0f03 	cmp.w	fp, #3
 80254a4:	d1cb      	bne.n	802543e <_scanf_i+0x5a>
 80254a6:	6863      	ldr	r3, [r4, #4]
 80254a8:	b90b      	cbnz	r3, 80254ae <_scanf_i+0xca>
 80254aa:	230a      	movs	r3, #10
 80254ac:	6063      	str	r3, [r4, #4]
 80254ae:	6863      	ldr	r3, [r4, #4]
 80254b0:	4945      	ldr	r1, [pc, #276]	; (80255c8 <_scanf_i+0x1e4>)
 80254b2:	6960      	ldr	r0, [r4, #20]
 80254b4:	1ac9      	subs	r1, r1, r3
 80254b6:	f000 f889 	bl	80255cc <__sccl>
 80254ba:	f04f 0b00 	mov.w	fp, #0
 80254be:	68a3      	ldr	r3, [r4, #8]
 80254c0:	6822      	ldr	r2, [r4, #0]
 80254c2:	2b00      	cmp	r3, #0
 80254c4:	d03d      	beq.n	8025542 <_scanf_i+0x15e>
 80254c6:	6831      	ldr	r1, [r6, #0]
 80254c8:	6960      	ldr	r0, [r4, #20]
 80254ca:	f891 c000 	ldrb.w	ip, [r1]
 80254ce:	f810 000c 	ldrb.w	r0, [r0, ip]
 80254d2:	2800      	cmp	r0, #0
 80254d4:	d035      	beq.n	8025542 <_scanf_i+0x15e>
 80254d6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80254da:	d124      	bne.n	8025526 <_scanf_i+0x142>
 80254dc:	0510      	lsls	r0, r2, #20
 80254de:	d522      	bpl.n	8025526 <_scanf_i+0x142>
 80254e0:	f10b 0b01 	add.w	fp, fp, #1
 80254e4:	f1b9 0f00 	cmp.w	r9, #0
 80254e8:	d003      	beq.n	80254f2 <_scanf_i+0x10e>
 80254ea:	3301      	adds	r3, #1
 80254ec:	f109 39ff 	add.w	r9, r9, #4294967295
 80254f0:	60a3      	str	r3, [r4, #8]
 80254f2:	6873      	ldr	r3, [r6, #4]
 80254f4:	3b01      	subs	r3, #1
 80254f6:	2b00      	cmp	r3, #0
 80254f8:	6073      	str	r3, [r6, #4]
 80254fa:	dd1b      	ble.n	8025534 <_scanf_i+0x150>
 80254fc:	6833      	ldr	r3, [r6, #0]
 80254fe:	3301      	adds	r3, #1
 8025500:	6033      	str	r3, [r6, #0]
 8025502:	68a3      	ldr	r3, [r4, #8]
 8025504:	3b01      	subs	r3, #1
 8025506:	60a3      	str	r3, [r4, #8]
 8025508:	e7d9      	b.n	80254be <_scanf_i+0xda>
 802550a:	f1bb 0f02 	cmp.w	fp, #2
 802550e:	d1ae      	bne.n	802546e <_scanf_i+0x8a>
 8025510:	6822      	ldr	r2, [r4, #0]
 8025512:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8025516:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 802551a:	d1bf      	bne.n	802549c <_scanf_i+0xb8>
 802551c:	2310      	movs	r3, #16
 802551e:	6063      	str	r3, [r4, #4]
 8025520:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8025524:	e7a2      	b.n	802546c <_scanf_i+0x88>
 8025526:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 802552a:	6022      	str	r2, [r4, #0]
 802552c:	780b      	ldrb	r3, [r1, #0]
 802552e:	f805 3b01 	strb.w	r3, [r5], #1
 8025532:	e7de      	b.n	80254f2 <_scanf_i+0x10e>
 8025534:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8025538:	4631      	mov	r1, r6
 802553a:	4650      	mov	r0, sl
 802553c:	4798      	blx	r3
 802553e:	2800      	cmp	r0, #0
 8025540:	d0df      	beq.n	8025502 <_scanf_i+0x11e>
 8025542:	6823      	ldr	r3, [r4, #0]
 8025544:	05d9      	lsls	r1, r3, #23
 8025546:	d50d      	bpl.n	8025564 <_scanf_i+0x180>
 8025548:	42bd      	cmp	r5, r7
 802554a:	d909      	bls.n	8025560 <_scanf_i+0x17c>
 802554c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8025550:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8025554:	4632      	mov	r2, r6
 8025556:	4650      	mov	r0, sl
 8025558:	4798      	blx	r3
 802555a:	f105 39ff 	add.w	r9, r5, #4294967295
 802555e:	464d      	mov	r5, r9
 8025560:	42bd      	cmp	r5, r7
 8025562:	d028      	beq.n	80255b6 <_scanf_i+0x1d2>
 8025564:	6822      	ldr	r2, [r4, #0]
 8025566:	f012 0210 	ands.w	r2, r2, #16
 802556a:	d113      	bne.n	8025594 <_scanf_i+0x1b0>
 802556c:	702a      	strb	r2, [r5, #0]
 802556e:	6863      	ldr	r3, [r4, #4]
 8025570:	9e01      	ldr	r6, [sp, #4]
 8025572:	4639      	mov	r1, r7
 8025574:	4650      	mov	r0, sl
 8025576:	47b0      	blx	r6
 8025578:	f8d8 3000 	ldr.w	r3, [r8]
 802557c:	6821      	ldr	r1, [r4, #0]
 802557e:	1d1a      	adds	r2, r3, #4
 8025580:	f8c8 2000 	str.w	r2, [r8]
 8025584:	f011 0f20 	tst.w	r1, #32
 8025588:	681b      	ldr	r3, [r3, #0]
 802558a:	d00f      	beq.n	80255ac <_scanf_i+0x1c8>
 802558c:	6018      	str	r0, [r3, #0]
 802558e:	68e3      	ldr	r3, [r4, #12]
 8025590:	3301      	adds	r3, #1
 8025592:	60e3      	str	r3, [r4, #12]
 8025594:	1bed      	subs	r5, r5, r7
 8025596:	44ab      	add	fp, r5
 8025598:	6925      	ldr	r5, [r4, #16]
 802559a:	445d      	add	r5, fp
 802559c:	6125      	str	r5, [r4, #16]
 802559e:	2000      	movs	r0, #0
 80255a0:	b007      	add	sp, #28
 80255a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80255a6:	f04f 0b00 	mov.w	fp, #0
 80255aa:	e7ca      	b.n	8025542 <_scanf_i+0x15e>
 80255ac:	07ca      	lsls	r2, r1, #31
 80255ae:	bf4c      	ite	mi
 80255b0:	8018      	strhmi	r0, [r3, #0]
 80255b2:	6018      	strpl	r0, [r3, #0]
 80255b4:	e7eb      	b.n	802558e <_scanf_i+0x1aa>
 80255b6:	2001      	movs	r0, #1
 80255b8:	e7f2      	b.n	80255a0 <_scanf_i+0x1bc>
 80255ba:	bf00      	nop
 80255bc:	08029430 	.word	0x08029430
 80255c0:	080239b5 	.word	0x080239b5
 80255c4:	080238a5 	.word	0x080238a5
 80255c8:	0802c9db 	.word	0x0802c9db

080255cc <__sccl>:
 80255cc:	b570      	push	{r4, r5, r6, lr}
 80255ce:	780b      	ldrb	r3, [r1, #0]
 80255d0:	4604      	mov	r4, r0
 80255d2:	2b5e      	cmp	r3, #94	; 0x5e
 80255d4:	bf0b      	itete	eq
 80255d6:	784b      	ldrbeq	r3, [r1, #1]
 80255d8:	1c48      	addne	r0, r1, #1
 80255da:	1c88      	addeq	r0, r1, #2
 80255dc:	2200      	movne	r2, #0
 80255de:	bf08      	it	eq
 80255e0:	2201      	moveq	r2, #1
 80255e2:	1e61      	subs	r1, r4, #1
 80255e4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80255e8:	f801 2f01 	strb.w	r2, [r1, #1]!
 80255ec:	42a9      	cmp	r1, r5
 80255ee:	d1fb      	bne.n	80255e8 <__sccl+0x1c>
 80255f0:	b90b      	cbnz	r3, 80255f6 <__sccl+0x2a>
 80255f2:	3801      	subs	r0, #1
 80255f4:	bd70      	pop	{r4, r5, r6, pc}
 80255f6:	f082 0101 	eor.w	r1, r2, #1
 80255fa:	54e1      	strb	r1, [r4, r3]
 80255fc:	1c42      	adds	r2, r0, #1
 80255fe:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8025602:	2d2d      	cmp	r5, #45	; 0x2d
 8025604:	f102 36ff 	add.w	r6, r2, #4294967295
 8025608:	4610      	mov	r0, r2
 802560a:	d006      	beq.n	802561a <__sccl+0x4e>
 802560c:	2d5d      	cmp	r5, #93	; 0x5d
 802560e:	d0f1      	beq.n	80255f4 <__sccl+0x28>
 8025610:	b90d      	cbnz	r5, 8025616 <__sccl+0x4a>
 8025612:	4630      	mov	r0, r6
 8025614:	e7ee      	b.n	80255f4 <__sccl+0x28>
 8025616:	462b      	mov	r3, r5
 8025618:	e7ef      	b.n	80255fa <__sccl+0x2e>
 802561a:	7816      	ldrb	r6, [r2, #0]
 802561c:	2e5d      	cmp	r6, #93	; 0x5d
 802561e:	d0fa      	beq.n	8025616 <__sccl+0x4a>
 8025620:	42b3      	cmp	r3, r6
 8025622:	dcf8      	bgt.n	8025616 <__sccl+0x4a>
 8025624:	4618      	mov	r0, r3
 8025626:	3001      	adds	r0, #1
 8025628:	4286      	cmp	r6, r0
 802562a:	5421      	strb	r1, [r4, r0]
 802562c:	dcfb      	bgt.n	8025626 <__sccl+0x5a>
 802562e:	43d8      	mvns	r0, r3
 8025630:	4430      	add	r0, r6
 8025632:	1c5d      	adds	r5, r3, #1
 8025634:	42b3      	cmp	r3, r6
 8025636:	bfa8      	it	ge
 8025638:	2000      	movge	r0, #0
 802563a:	182b      	adds	r3, r5, r0
 802563c:	3202      	adds	r2, #2
 802563e:	e7de      	b.n	80255fe <__sccl+0x32>

08025640 <__submore>:
 8025640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025644:	460c      	mov	r4, r1
 8025646:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8025648:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802564c:	4299      	cmp	r1, r3
 802564e:	d11d      	bne.n	802568c <__submore+0x4c>
 8025650:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8025654:	f7fd f974 	bl	8022940 <_malloc_r>
 8025658:	b918      	cbnz	r0, 8025662 <__submore+0x22>
 802565a:	f04f 30ff 	mov.w	r0, #4294967295
 802565e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025662:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025666:	63a3      	str	r3, [r4, #56]	; 0x38
 8025668:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 802566c:	6360      	str	r0, [r4, #52]	; 0x34
 802566e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8025672:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8025676:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 802567a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802567e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8025682:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8025686:	6020      	str	r0, [r4, #0]
 8025688:	2000      	movs	r0, #0
 802568a:	e7e8      	b.n	802565e <__submore+0x1e>
 802568c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802568e:	0077      	lsls	r7, r6, #1
 8025690:	463a      	mov	r2, r7
 8025692:	f7fe ff05 	bl	80244a0 <_realloc_r>
 8025696:	4605      	mov	r5, r0
 8025698:	2800      	cmp	r0, #0
 802569a:	d0de      	beq.n	802565a <__submore+0x1a>
 802569c:	eb00 0806 	add.w	r8, r0, r6
 80256a0:	4601      	mov	r1, r0
 80256a2:	4632      	mov	r2, r6
 80256a4:	4640      	mov	r0, r8
 80256a6:	f7fd f8d5 	bl	8022854 <memcpy>
 80256aa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80256ae:	f8c4 8000 	str.w	r8, [r4]
 80256b2:	e7e9      	b.n	8025688 <__submore+0x48>

080256b4 <_init>:
 80256b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80256b6:	bf00      	nop
 80256b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80256ba:	bc08      	pop	{r3}
 80256bc:	469e      	mov	lr, r3
 80256be:	4770      	bx	lr

080256c0 <_fini>:
 80256c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80256c2:	bf00      	nop
 80256c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80256c6:	bc08      	pop	{r3}
 80256c8:	469e      	mov	lr, r3
 80256ca:	4770      	bx	lr
 80256cc:	0000      	movs	r0, r0
	...

080256d0 <__time_veneer>:
 80256d0:	e51ff004 	ldr	pc, [pc, #-4]	; 80256d4 <__time_veneer+0x4>
 80256d4:	20000514 	.word	0x20000514
